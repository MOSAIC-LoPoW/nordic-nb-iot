
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	200281b8 	.word	0x200281b8
    c004:	0000fb7d 	.word	0x0000fb7d
    c008:	0001d24f 	.word	0x0001d24f
    c00c:	0000f99d 	.word	0x0000f99d
    c010:	0000f99d 	.word	0x0000f99d
    c014:	0000f99d 	.word	0x0000f99d
    c018:	0000f99d 	.word	0x0000f99d
    c01c:	0000f99d 	.word	0x0000f99d
    c020:	0000f99d 	.word	0x0000f99d
    c024:	0000f99d 	.word	0x0000f99d
    c028:	0000f99d 	.word	0x0000f99d
    c02c:	0000f85d 	.word	0x0000f85d
    c030:	0000f99d 	.word	0x0000f99d
    c034:	0000f99d 	.word	0x0000f99d
    c038:	0000f7ad 	.word	0x0000f7ad
    c03c:	0001d23f 	.word	0x0001d23f

0000c040 <_irq_vector_table>:
    c040:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c050:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c060:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c070:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c080:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c090:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c0a0:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c0b0:	0001180d 0001dd39 0000fb3d 0000fb3d     ....9...=...=...
    c0c0:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c0d0:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c0e0:	0000fb3d 0000fb3d 0001dd57 0000fb3d     =...=...W...=...
    c0f0:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c100:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c110:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c120:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c130:	0000fb3d 0000fb3d 0000fb3d 0000fb3d     =...=...=...=...
    c140:	0000fb3d                                =...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 0001516c     ...(L....[..lQ..
    c210:	00000001 0000c000 2002c508 000127c5     ........... .'..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_drsub>:
    c220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c224:	e002      	b.n	c22c <__adddf3>
    c226:	bf00      	nop

0000c228 <__aeabi_dsub>:
    c228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c22c <__adddf3>:
    c22c:	b530      	push	{r4, r5, lr}
    c22e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c232:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c236:	ea94 0f05 	teq	r4, r5
    c23a:	bf08      	it	eq
    c23c:	ea90 0f02 	teqeq	r0, r2
    c240:	bf1f      	itttt	ne
    c242:	ea54 0c00 	orrsne.w	ip, r4, r0
    c246:	ea55 0c02 	orrsne.w	ip, r5, r2
    c24a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c24e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c252:	f000 80e2 	beq.w	c41a <__adddf3+0x1ee>
    c256:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c25a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c25e:	bfb8      	it	lt
    c260:	426d      	neglt	r5, r5
    c262:	dd0c      	ble.n	c27e <__adddf3+0x52>
    c264:	442c      	add	r4, r5
    c266:	ea80 0202 	eor.w	r2, r0, r2
    c26a:	ea81 0303 	eor.w	r3, r1, r3
    c26e:	ea82 0000 	eor.w	r0, r2, r0
    c272:	ea83 0101 	eor.w	r1, r3, r1
    c276:	ea80 0202 	eor.w	r2, r0, r2
    c27a:	ea81 0303 	eor.w	r3, r1, r3
    c27e:	2d36      	cmp	r5, #54	; 0x36
    c280:	bf88      	it	hi
    c282:	bd30      	pophi	{r4, r5, pc}
    c284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c288:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c28c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c294:	d002      	beq.n	c29c <__adddf3+0x70>
    c296:	4240      	negs	r0, r0
    c298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c29c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2a8:	d002      	beq.n	c2b0 <__adddf3+0x84>
    c2aa:	4252      	negs	r2, r2
    c2ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2b0:	ea94 0f05 	teq	r4, r5
    c2b4:	f000 80a7 	beq.w	c406 <__adddf3+0x1da>
    c2b8:	f1a4 0401 	sub.w	r4, r4, #1
    c2bc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2c0:	db0d      	blt.n	c2de <__adddf3+0xb2>
    c2c2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2c6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ca:	1880      	adds	r0, r0, r2
    c2cc:	f141 0100 	adc.w	r1, r1, #0
    c2d0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2d4:	1880      	adds	r0, r0, r2
    c2d6:	fa43 f305 	asr.w	r3, r3, r5
    c2da:	4159      	adcs	r1, r3
    c2dc:	e00e      	b.n	c2fc <__adddf3+0xd0>
    c2de:	f1a5 0520 	sub.w	r5, r5, #32
    c2e2:	f10e 0e20 	add.w	lr, lr, #32
    c2e6:	2a01      	cmp	r2, #1
    c2e8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c2ec:	bf28      	it	cs
    c2ee:	f04c 0c02 	orrcs.w	ip, ip, #2
    c2f2:	fa43 f305 	asr.w	r3, r3, r5
    c2f6:	18c0      	adds	r0, r0, r3
    c2f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c2fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c300:	d507      	bpl.n	c312 <__adddf3+0xe6>
    c302:	f04f 0e00 	mov.w	lr, #0
    c306:	f1dc 0c00 	rsbs	ip, ip, #0
    c30a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c30e:	eb6e 0101 	sbc.w	r1, lr, r1
    c312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c316:	d31b      	bcc.n	c350 <__adddf3+0x124>
    c318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c31c:	d30c      	bcc.n	c338 <__adddf3+0x10c>
    c31e:	0849      	lsrs	r1, r1, #1
    c320:	ea5f 0030 	movs.w	r0, r0, rrx
    c324:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c328:	f104 0401 	add.w	r4, r4, #1
    c32c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c334:	f080 809a 	bcs.w	c46c <__adddf3+0x240>
    c338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c33c:	bf08      	it	eq
    c33e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c342:	f150 0000 	adcs.w	r0, r0, #0
    c346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c34a:	ea41 0105 	orr.w	r1, r1, r5
    c34e:	bd30      	pop	{r4, r5, pc}
    c350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c354:	4140      	adcs	r0, r0
    c356:	eb41 0101 	adc.w	r1, r1, r1
    c35a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c35e:	f1a4 0401 	sub.w	r4, r4, #1
    c362:	d1e9      	bne.n	c338 <__adddf3+0x10c>
    c364:	f091 0f00 	teq	r1, #0
    c368:	bf04      	itt	eq
    c36a:	4601      	moveq	r1, r0
    c36c:	2000      	moveq	r0, #0
    c36e:	fab1 f381 	clz	r3, r1
    c372:	bf08      	it	eq
    c374:	3320      	addeq	r3, #32
    c376:	f1a3 030b 	sub.w	r3, r3, #11
    c37a:	f1b3 0220 	subs.w	r2, r3, #32
    c37e:	da0c      	bge.n	c39a <__adddf3+0x16e>
    c380:	320c      	adds	r2, #12
    c382:	dd08      	ble.n	c396 <__adddf3+0x16a>
    c384:	f102 0c14 	add.w	ip, r2, #20
    c388:	f1c2 020c 	rsb	r2, r2, #12
    c38c:	fa01 f00c 	lsl.w	r0, r1, ip
    c390:	fa21 f102 	lsr.w	r1, r1, r2
    c394:	e00c      	b.n	c3b0 <__adddf3+0x184>
    c396:	f102 0214 	add.w	r2, r2, #20
    c39a:	bfd8      	it	le
    c39c:	f1c2 0c20 	rsble	ip, r2, #32
    c3a0:	fa01 f102 	lsl.w	r1, r1, r2
    c3a4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3a8:	bfdc      	itt	le
    c3aa:	ea41 010c 	orrle.w	r1, r1, ip
    c3ae:	4090      	lslle	r0, r2
    c3b0:	1ae4      	subs	r4, r4, r3
    c3b2:	bfa2      	ittt	ge
    c3b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3b8:	4329      	orrge	r1, r5
    c3ba:	bd30      	popge	{r4, r5, pc}
    c3bc:	ea6f 0404 	mvn.w	r4, r4
    c3c0:	3c1f      	subs	r4, #31
    c3c2:	da1c      	bge.n	c3fe <__adddf3+0x1d2>
    c3c4:	340c      	adds	r4, #12
    c3c6:	dc0e      	bgt.n	c3e6 <__adddf3+0x1ba>
    c3c8:	f104 0414 	add.w	r4, r4, #20
    c3cc:	f1c4 0220 	rsb	r2, r4, #32
    c3d0:	fa20 f004 	lsr.w	r0, r0, r4
    c3d4:	fa01 f302 	lsl.w	r3, r1, r2
    c3d8:	ea40 0003 	orr.w	r0, r0, r3
    c3dc:	fa21 f304 	lsr.w	r3, r1, r4
    c3e0:	ea45 0103 	orr.w	r1, r5, r3
    c3e4:	bd30      	pop	{r4, r5, pc}
    c3e6:	f1c4 040c 	rsb	r4, r4, #12
    c3ea:	f1c4 0220 	rsb	r2, r4, #32
    c3ee:	fa20 f002 	lsr.w	r0, r0, r2
    c3f2:	fa01 f304 	lsl.w	r3, r1, r4
    c3f6:	ea40 0003 	orr.w	r0, r0, r3
    c3fa:	4629      	mov	r1, r5
    c3fc:	bd30      	pop	{r4, r5, pc}
    c3fe:	fa21 f004 	lsr.w	r0, r1, r4
    c402:	4629      	mov	r1, r5
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f094 0f00 	teq	r4, #0
    c40a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c40e:	bf06      	itte	eq
    c410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c414:	3401      	addeq	r4, #1
    c416:	3d01      	subne	r5, #1
    c418:	e74e      	b.n	c2b8 <__adddf3+0x8c>
    c41a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c41e:	bf18      	it	ne
    c420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c424:	d029      	beq.n	c47a <__adddf3+0x24e>
    c426:	ea94 0f05 	teq	r4, r5
    c42a:	bf08      	it	eq
    c42c:	ea90 0f02 	teqeq	r0, r2
    c430:	d005      	beq.n	c43e <__adddf3+0x212>
    c432:	ea54 0c00 	orrs.w	ip, r4, r0
    c436:	bf04      	itt	eq
    c438:	4619      	moveq	r1, r3
    c43a:	4610      	moveq	r0, r2
    c43c:	bd30      	pop	{r4, r5, pc}
    c43e:	ea91 0f03 	teq	r1, r3
    c442:	bf1e      	ittt	ne
    c444:	2100      	movne	r1, #0
    c446:	2000      	movne	r0, #0
    c448:	bd30      	popne	{r4, r5, pc}
    c44a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c44e:	d105      	bne.n	c45c <__adddf3+0x230>
    c450:	0040      	lsls	r0, r0, #1
    c452:	4149      	adcs	r1, r1
    c454:	bf28      	it	cs
    c456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c45a:	bd30      	pop	{r4, r5, pc}
    c45c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c460:	bf3c      	itt	cc
    c462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c466:	bd30      	popcc	{r4, r5, pc}
    c468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c46c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c474:	f04f 0000 	mov.w	r0, #0
    c478:	bd30      	pop	{r4, r5, pc}
    c47a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c47e:	bf1a      	itte	ne
    c480:	4619      	movne	r1, r3
    c482:	4610      	movne	r0, r2
    c484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c488:	bf1c      	itt	ne
    c48a:	460b      	movne	r3, r1
    c48c:	4602      	movne	r2, r0
    c48e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c492:	bf06      	itte	eq
    c494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c498:	ea91 0f03 	teqeq	r1, r3
    c49c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4a0:	bd30      	pop	{r4, r5, pc}
    c4a2:	bf00      	nop

0000c4a4 <__aeabi_ui2d>:
    c4a4:	f090 0f00 	teq	r0, #0
    c4a8:	bf04      	itt	eq
    c4aa:	2100      	moveq	r1, #0
    c4ac:	4770      	bxeq	lr
    c4ae:	b530      	push	{r4, r5, lr}
    c4b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4b8:	f04f 0500 	mov.w	r5, #0
    c4bc:	f04f 0100 	mov.w	r1, #0
    c4c0:	e750      	b.n	c364 <__adddf3+0x138>
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_i2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4dc:	bf48      	it	mi
    c4de:	4240      	negmi	r0, r0
    c4e0:	f04f 0100 	mov.w	r1, #0
    c4e4:	e73e      	b.n	c364 <__adddf3+0x138>
    c4e6:	bf00      	nop

0000c4e8 <__aeabi_f2d>:
    c4e8:	0042      	lsls	r2, r0, #1
    c4ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c4ee:	ea4f 0131 	mov.w	r1, r1, rrx
    c4f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c4f6:	bf1f      	itttt	ne
    c4f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c4fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c504:	4770      	bxne	lr
    c506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c50a:	bf08      	it	eq
    c50c:	4770      	bxeq	lr
    c50e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c512:	bf04      	itt	eq
    c514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c518:	4770      	bxeq	lr
    c51a:	b530      	push	{r4, r5, lr}
    c51c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c528:	e71c      	b.n	c364 <__adddf3+0x138>
    c52a:	bf00      	nop

0000c52c <__aeabi_ul2d>:
    c52c:	ea50 0201 	orrs.w	r2, r0, r1
    c530:	bf08      	it	eq
    c532:	4770      	bxeq	lr
    c534:	b530      	push	{r4, r5, lr}
    c536:	f04f 0500 	mov.w	r5, #0
    c53a:	e00a      	b.n	c552 <__aeabi_l2d+0x16>

0000c53c <__aeabi_l2d>:
    c53c:	ea50 0201 	orrs.w	r2, r0, r1
    c540:	bf08      	it	eq
    c542:	4770      	bxeq	lr
    c544:	b530      	push	{r4, r5, lr}
    c546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c54a:	d502      	bpl.n	c552 <__aeabi_l2d+0x16>
    c54c:	4240      	negs	r0, r0
    c54e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c552:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c556:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c55a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c55e:	f43f aed8 	beq.w	c312 <__adddf3+0xe6>
    c562:	f04f 0203 	mov.w	r2, #3
    c566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c56a:	bf18      	it	ne
    c56c:	3203      	addne	r2, #3
    c56e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c572:	bf18      	it	ne
    c574:	3203      	addne	r2, #3
    c576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c57a:	f1c2 0320 	rsb	r3, r2, #32
    c57e:	fa00 fc03 	lsl.w	ip, r0, r3
    c582:	fa20 f002 	lsr.w	r0, r0, r2
    c586:	fa01 fe03 	lsl.w	lr, r1, r3
    c58a:	ea40 000e 	orr.w	r0, r0, lr
    c58e:	fa21 f102 	lsr.w	r1, r1, r2
    c592:	4414      	add	r4, r2
    c594:	e6bd      	b.n	c312 <__adddf3+0xe6>
    c596:	bf00      	nop

0000c598 <__aeabi_uldivmod>:
    c598:	b953      	cbnz	r3, c5b0 <__aeabi_uldivmod+0x18>
    c59a:	b94a      	cbnz	r2, c5b0 <__aeabi_uldivmod+0x18>
    c59c:	2900      	cmp	r1, #0
    c59e:	bf08      	it	eq
    c5a0:	2800      	cmpeq	r0, #0
    c5a2:	bf1c      	itt	ne
    c5a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c5a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c5ac:	f000 b970 	b.w	c890 <__aeabi_idiv0>
    c5b0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5b8:	f000 f806 	bl	c5c8 <__udivmoddi4>
    c5bc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5c4:	b004      	add	sp, #16
    c5c6:	4770      	bx	lr

0000c5c8 <__udivmoddi4>:
    c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c5ce:	4604      	mov	r4, r0
    c5d0:	4689      	mov	r9, r1
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	f040 8083 	bne.w	c6de <__udivmoddi4+0x116>
    c5d8:	428a      	cmp	r2, r1
    c5da:	4615      	mov	r5, r2
    c5dc:	d945      	bls.n	c66a <__udivmoddi4+0xa2>
    c5de:	fab2 f282 	clz	r2, r2
    c5e2:	b14a      	cbz	r2, c5f8 <__udivmoddi4+0x30>
    c5e4:	f1c2 0720 	rsb	r7, r2, #32
    c5e8:	fa01 f302 	lsl.w	r3, r1, r2
    c5ec:	4095      	lsls	r5, r2
    c5ee:	4094      	lsls	r4, r2
    c5f0:	fa20 f707 	lsr.w	r7, r0, r7
    c5f4:	ea47 0903 	orr.w	r9, r7, r3
    c5f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c5fc:	0c23      	lsrs	r3, r4, #16
    c5fe:	fa1f f885 	uxth.w	r8, r5
    c602:	fbb9 fcfe 	udiv	ip, r9, lr
    c606:	fb0e 991c 	mls	r9, lr, ip, r9
    c60a:	fb0c f108 	mul.w	r1, ip, r8
    c60e:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c612:	4299      	cmp	r1, r3
    c614:	d90a      	bls.n	c62c <__udivmoddi4+0x64>
    c616:	18eb      	adds	r3, r5, r3
    c618:	bf2c      	ite	cs
    c61a:	2001      	movcs	r0, #1
    c61c:	2000      	movcc	r0, #0
    c61e:	4299      	cmp	r1, r3
    c620:	d902      	bls.n	c628 <__udivmoddi4+0x60>
    c622:	2800      	cmp	r0, #0
    c624:	f000 811d 	beq.w	c862 <__udivmoddi4+0x29a>
    c628:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c62c:	1a59      	subs	r1, r3, r1
    c62e:	b2a3      	uxth	r3, r4
    c630:	fbb1 f0fe 	udiv	r0, r1, lr
    c634:	fb0e 1110 	mls	r1, lr, r0, r1
    c638:	fb00 f808 	mul.w	r8, r0, r8
    c63c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c640:	45a0      	cmp	r8, r4
    c642:	d905      	bls.n	c650 <__udivmoddi4+0x88>
    c644:	192c      	adds	r4, r5, r4
    c646:	d202      	bcs.n	c64e <__udivmoddi4+0x86>
    c648:	45a0      	cmp	r8, r4
    c64a:	f200 810e 	bhi.w	c86a <__udivmoddi4+0x2a2>
    c64e:	3801      	subs	r0, #1
    c650:	eba4 0408 	sub.w	r4, r4, r8
    c654:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c658:	2700      	movs	r7, #0
    c65a:	b11e      	cbz	r6, c664 <__udivmoddi4+0x9c>
    c65c:	40d4      	lsrs	r4, r2
    c65e:	2300      	movs	r3, #0
    c660:	e9c6 4300 	strd	r4, r3, [r6]
    c664:	4639      	mov	r1, r7
    c666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c66a:	2a00      	cmp	r2, #0
    c66c:	d051      	beq.n	c712 <__udivmoddi4+0x14a>
    c66e:	fab2 f282 	clz	r2, r2
    c672:	2a00      	cmp	r2, #0
    c674:	f040 80af 	bne.w	c7d6 <__udivmoddi4+0x20e>
    c678:	1b49      	subs	r1, r1, r5
    c67a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c67e:	fa1f f885 	uxth.w	r8, r5
    c682:	2701      	movs	r7, #1
    c684:	0c23      	lsrs	r3, r4, #16
    c686:	fbb1 fcfe 	udiv	ip, r1, lr
    c68a:	fb0e 111c 	mls	r1, lr, ip, r1
    c68e:	fb08 f00c 	mul.w	r0, r8, ip
    c692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c696:	4298      	cmp	r0, r3
    c698:	d90a      	bls.n	c6b0 <__udivmoddi4+0xe8>
    c69a:	18eb      	adds	r3, r5, r3
    c69c:	bf2c      	ite	cs
    c69e:	2101      	movcs	r1, #1
    c6a0:	2100      	movcc	r1, #0
    c6a2:	4298      	cmp	r0, r3
    c6a4:	d902      	bls.n	c6ac <__udivmoddi4+0xe4>
    c6a6:	2900      	cmp	r1, #0
    c6a8:	f000 80d7 	beq.w	c85a <__udivmoddi4+0x292>
    c6ac:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c6b0:	1a19      	subs	r1, r3, r0
    c6b2:	b2a3      	uxth	r3, r4
    c6b4:	fbb1 f0fe 	udiv	r0, r1, lr
    c6b8:	fb0e 1110 	mls	r1, lr, r0, r1
    c6bc:	fb08 f800 	mul.w	r8, r8, r0
    c6c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c6c4:	45a0      	cmp	r8, r4
    c6c6:	d905      	bls.n	c6d4 <__udivmoddi4+0x10c>
    c6c8:	192c      	adds	r4, r5, r4
    c6ca:	d202      	bcs.n	c6d2 <__udivmoddi4+0x10a>
    c6cc:	45a0      	cmp	r8, r4
    c6ce:	f200 80c1 	bhi.w	c854 <__udivmoddi4+0x28c>
    c6d2:	3801      	subs	r0, #1
    c6d4:	eba4 0408 	sub.w	r4, r4, r8
    c6d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6dc:	e7bd      	b.n	c65a <__udivmoddi4+0x92>
    c6de:	428b      	cmp	r3, r1
    c6e0:	d908      	bls.n	c6f4 <__udivmoddi4+0x12c>
    c6e2:	2e00      	cmp	r6, #0
    c6e4:	d074      	beq.n	c7d0 <__udivmoddi4+0x208>
    c6e6:	2700      	movs	r7, #0
    c6e8:	e9c6 0100 	strd	r0, r1, [r6]
    c6ec:	4638      	mov	r0, r7
    c6ee:	4639      	mov	r1, r7
    c6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6f4:	fab3 f783 	clz	r7, r3
    c6f8:	b967      	cbnz	r7, c714 <__udivmoddi4+0x14c>
    c6fa:	428b      	cmp	r3, r1
    c6fc:	f0c0 80a4 	bcc.w	c848 <__udivmoddi4+0x280>
    c700:	4282      	cmp	r2, r0
    c702:	f240 80a1 	bls.w	c848 <__udivmoddi4+0x280>
    c706:	4638      	mov	r0, r7
    c708:	2e00      	cmp	r6, #0
    c70a:	d0ab      	beq.n	c664 <__udivmoddi4+0x9c>
    c70c:	e9c6 4900 	strd	r4, r9, [r6]
    c710:	e7a8      	b.n	c664 <__udivmoddi4+0x9c>
    c712:	deff      	udf	#255	; 0xff
    c714:	f1c7 0520 	rsb	r5, r7, #32
    c718:	40bb      	lsls	r3, r7
    c71a:	fa02 fc07 	lsl.w	ip, r2, r7
    c71e:	fa01 f407 	lsl.w	r4, r1, r7
    c722:	40ea      	lsrs	r2, r5
    c724:	fa20 f805 	lsr.w	r8, r0, r5
    c728:	40e9      	lsrs	r1, r5
    c72a:	fa00 fe07 	lsl.w	lr, r0, r7
    c72e:	431a      	orrs	r2, r3
    c730:	ea48 0404 	orr.w	r4, r8, r4
    c734:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c738:	0c20      	lsrs	r0, r4, #16
    c73a:	fa1f f982 	uxth.w	r9, r2
    c73e:	fbb1 faf8 	udiv	sl, r1, r8
    c742:	fb08 111a 	mls	r1, r8, sl, r1
    c746:	fb0a fb09 	mul.w	fp, sl, r9
    c74a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c74e:	458b      	cmp	fp, r1
    c750:	d90a      	bls.n	c768 <__udivmoddi4+0x1a0>
    c752:	1851      	adds	r1, r2, r1
    c754:	bf2c      	ite	cs
    c756:	2301      	movcs	r3, #1
    c758:	2300      	movcc	r3, #0
    c75a:	458b      	cmp	fp, r1
    c75c:	d902      	bls.n	c764 <__udivmoddi4+0x19c>
    c75e:	2b00      	cmp	r3, #0
    c760:	f000 8088 	beq.w	c874 <__udivmoddi4+0x2ac>
    c764:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c768:	eba1 010b 	sub.w	r1, r1, fp
    c76c:	b2a4      	uxth	r4, r4
    c76e:	fbb1 f0f8 	udiv	r0, r1, r8
    c772:	fb08 1110 	mls	r1, r8, r0, r1
    c776:	fb00 f909 	mul.w	r9, r0, r9
    c77a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c77e:	4589      	cmp	r9, r1
    c780:	d904      	bls.n	c78c <__udivmoddi4+0x1c4>
    c782:	1851      	adds	r1, r2, r1
    c784:	d201      	bcs.n	c78a <__udivmoddi4+0x1c2>
    c786:	4589      	cmp	r9, r1
    c788:	d87b      	bhi.n	c882 <__udivmoddi4+0x2ba>
    c78a:	3801      	subs	r0, #1
    c78c:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c790:	eba1 0109 	sub.w	r1, r1, r9
    c794:	fba0 890c 	umull	r8, r9, r0, ip
    c798:	4549      	cmp	r1, r9
    c79a:	4644      	mov	r4, r8
    c79c:	464b      	mov	r3, r9
    c79e:	d302      	bcc.n	c7a6 <__udivmoddi4+0x1de>
    c7a0:	d106      	bne.n	c7b0 <__udivmoddi4+0x1e8>
    c7a2:	45c6      	cmp	lr, r8
    c7a4:	d204      	bcs.n	c7b0 <__udivmoddi4+0x1e8>
    c7a6:	3801      	subs	r0, #1
    c7a8:	ebb8 040c 	subs.w	r4, r8, ip
    c7ac:	eb69 0302 	sbc.w	r3, r9, r2
    c7b0:	2e00      	cmp	r6, #0
    c7b2:	d05d      	beq.n	c870 <__udivmoddi4+0x2a8>
    c7b4:	ebbe 0204 	subs.w	r2, lr, r4
    c7b8:	eb61 0103 	sbc.w	r1, r1, r3
    c7bc:	fa01 f505 	lsl.w	r5, r1, r5
    c7c0:	fa22 f307 	lsr.w	r3, r2, r7
    c7c4:	40f9      	lsrs	r1, r7
    c7c6:	2700      	movs	r7, #0
    c7c8:	431d      	orrs	r5, r3
    c7ca:	e9c6 5100 	strd	r5, r1, [r6]
    c7ce:	e749      	b.n	c664 <__udivmoddi4+0x9c>
    c7d0:	4637      	mov	r7, r6
    c7d2:	4630      	mov	r0, r6
    c7d4:	e746      	b.n	c664 <__udivmoddi4+0x9c>
    c7d6:	f1c2 0020 	rsb	r0, r2, #32
    c7da:	4095      	lsls	r5, r2
    c7dc:	fa01 f702 	lsl.w	r7, r1, r2
    c7e0:	fa21 f300 	lsr.w	r3, r1, r0
    c7e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7e8:	fa24 f100 	lsr.w	r1, r4, r0
    c7ec:	fa1f f885 	uxth.w	r8, r5
    c7f0:	4094      	lsls	r4, r2
    c7f2:	4339      	orrs	r1, r7
    c7f4:	fbb3 f0fe 	udiv	r0, r3, lr
    c7f8:	0c0f      	lsrs	r7, r1, #16
    c7fa:	fb0e 3310 	mls	r3, lr, r0, r3
    c7fe:	fb00 fc08 	mul.w	ip, r0, r8
    c802:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c806:	459c      	cmp	ip, r3
    c808:	d907      	bls.n	c81a <__udivmoddi4+0x252>
    c80a:	18eb      	adds	r3, r5, r3
    c80c:	bf2c      	ite	cs
    c80e:	2701      	movcs	r7, #1
    c810:	2700      	movcc	r7, #0
    c812:	459c      	cmp	ip, r3
    c814:	d900      	bls.n	c818 <__udivmoddi4+0x250>
    c816:	b38f      	cbz	r7, c87c <__udivmoddi4+0x2b4>
    c818:	3801      	subs	r0, #1
    c81a:	eba3 030c 	sub.w	r3, r3, ip
    c81e:	b289      	uxth	r1, r1
    c820:	fbb3 f7fe 	udiv	r7, r3, lr
    c824:	fb0e 3317 	mls	r3, lr, r7, r3
    c828:	fb07 fc08 	mul.w	ip, r7, r8
    c82c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c830:	458c      	cmp	ip, r1
    c832:	d904      	bls.n	c83e <__udivmoddi4+0x276>
    c834:	1869      	adds	r1, r5, r1
    c836:	d201      	bcs.n	c83c <__udivmoddi4+0x274>
    c838:	458c      	cmp	ip, r1
    c83a:	d825      	bhi.n	c888 <__udivmoddi4+0x2c0>
    c83c:	3f01      	subs	r7, #1
    c83e:	eba1 010c 	sub.w	r1, r1, ip
    c842:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c846:	e71d      	b.n	c684 <__udivmoddi4+0xbc>
    c848:	1a84      	subs	r4, r0, r2
    c84a:	eb61 0303 	sbc.w	r3, r1, r3
    c84e:	2001      	movs	r0, #1
    c850:	4699      	mov	r9, r3
    c852:	e759      	b.n	c708 <__udivmoddi4+0x140>
    c854:	3802      	subs	r0, #2
    c856:	442c      	add	r4, r5
    c858:	e73c      	b.n	c6d4 <__udivmoddi4+0x10c>
    c85a:	f1ac 0c02 	sub.w	ip, ip, #2
    c85e:	442b      	add	r3, r5
    c860:	e726      	b.n	c6b0 <__udivmoddi4+0xe8>
    c862:	f1ac 0c02 	sub.w	ip, ip, #2
    c866:	442b      	add	r3, r5
    c868:	e6e0      	b.n	c62c <__udivmoddi4+0x64>
    c86a:	3802      	subs	r0, #2
    c86c:	442c      	add	r4, r5
    c86e:	e6ef      	b.n	c650 <__udivmoddi4+0x88>
    c870:	4637      	mov	r7, r6
    c872:	e6f7      	b.n	c664 <__udivmoddi4+0x9c>
    c874:	f1aa 0a02 	sub.w	sl, sl, #2
    c878:	4411      	add	r1, r2
    c87a:	e775      	b.n	c768 <__udivmoddi4+0x1a0>
    c87c:	3802      	subs	r0, #2
    c87e:	442b      	add	r3, r5
    c880:	e7cb      	b.n	c81a <__udivmoddi4+0x252>
    c882:	3802      	subs	r0, #2
    c884:	4411      	add	r1, r2
    c886:	e781      	b.n	c78c <__udivmoddi4+0x1c4>
    c888:	3f02      	subs	r7, #2
    c88a:	4429      	add	r1, r5
    c88c:	e7d7      	b.n	c83e <__udivmoddi4+0x276>
    c88e:	bf00      	nop

0000c890 <__aeabi_idiv0>:
    c890:	4770      	bx	lr
    c892:	bf00      	nop

0000c894 <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    c894:	2301      	movs	r3, #1
    c896:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c89a:	4906      	ldr	r1, [pc, #24]	; (c8b4 <bsd_recoverable_error_handler+0x20>)
    c89c:	f363 0207 	bfi	r2, r3, #0, #8
    c8a0:	4b05      	ldr	r3, [pc, #20]	; (c8b8 <bsd_recoverable_error_handler+0x24>)
    c8a2:	1a5b      	subs	r3, r3, r1
    c8a4:	08db      	lsrs	r3, r3, #3
    c8a6:	4601      	mov	r1, r0
    c8a8:	f363 128f 	bfi	r2, r3, #6, #10
    c8ac:	4803      	ldr	r0, [pc, #12]	; (c8bc <bsd_recoverable_error_handler+0x28>)
    c8ae:	f010 b945 	b.w	1cb3c <log_1>
    c8b2:	bf00      	nop
    c8b4:	0001f328 	.word	0x0001f328
    c8b8:	0001f328 	.word	0x0001f328
    c8bc:	0001f8f4 	.word	0x0001f8f4

0000c8c0 <start_execute>:

void start_execute(void)
{
	int err;

	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c8c0:	2303      	movs	r3, #3
    c8c2:	f04f 0100 	mov.w	r1, #0
{
    c8c6:	b510      	push	{r4, lr}
	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c8c8:	f363 0107 	bfi	r1, r3, #0, #8
    c8cc:	4c14      	ldr	r4, [pc, #80]	; (c920 <start_execute+0x60>)
    c8ce:	4b15      	ldr	r3, [pc, #84]	; (c924 <start_execute+0x64>)
    c8d0:	4815      	ldr	r0, [pc, #84]	; (c928 <start_execute+0x68>)
    c8d2:	1ae4      	subs	r4, r4, r3
    c8d4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c8d8:	f364 118f 	bfi	r1, r4, #6, #10
    c8dc:	f010 f921 	bl	1cb22 <log_0>
	err = slm_at_host_init();
    c8e0:	f000 f902 	bl	cae8 <slm_at_host_init>
	if (err != 0) {
    c8e4:	4601      	mov	r1, r0
    c8e6:	b158      	cbz	r0, c900 <start_execute+0x40>
		LOG_ERR("Failed to init at_host: %d", err);
    c8e8:	f04f 0200 	mov.w	r2, #0
    c8ec:	2301      	movs	r3, #1
    c8ee:	480f      	ldr	r0, [pc, #60]	; (c92c <start_execute+0x6c>)
    c8f0:	f363 0207 	bfi	r2, r3, #0, #8
    c8f4:	f364 128f 	bfi	r2, r4, #6, #10
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
}
    c8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    c8fc:	f010 b91e 	b.w	1cb3c <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    c900:	2108      	movs	r1, #8
    c902:	480b      	ldr	r0, [pc, #44]	; (c930 <start_execute+0x70>)
    c904:	f011 feb9 	bl	1e67a <at_params_list_init>
	if (err) {
    c908:	4601      	mov	r1, r0
    c90a:	b140      	cbz	r0, c91e <start_execute+0x5e>
		LOG_ERR("Failed to init AT Parser: %d", err);
    c90c:	f04f 0200 	mov.w	r2, #0
    c910:	2301      	movs	r3, #1
    c912:	f363 0207 	bfi	r2, r3, #0, #8
    c916:	f364 128f 	bfi	r2, r4, #6, #10
    c91a:	4806      	ldr	r0, [pc, #24]	; (c934 <start_execute+0x74>)
    c91c:	e7ec      	b.n	c8f8 <start_execute+0x38>
}
    c91e:	bd10      	pop	{r4, pc}
    c920:	0001f328 	.word	0x0001f328
    c924:	0001f328 	.word	0x0001f328
    c928:	0001f911 	.word	0x0001f911
    c92c:	0001f930 	.word	0x0001f930
    c930:	20020110 	.word	0x20020110
    c934:	0001f94b 	.word	0x0001f94b

0000c938 <write_uart_string>:

/* forward declaration */
void slm_at_host_uninit(void);

static inline void write_uart_string(char *str, size_t len)
{
    c938:	b570      	push	{r4, r5, r6, lr}
    c93a:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    c93c:	4e05      	ldr	r6, [pc, #20]	; (c954 <write_uart_string+0x1c>)
    c93e:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    c940:	42ac      	cmp	r4, r5
    c942:	d100      	bne.n	c946 <write_uart_string+0xe>
	}
}
    c944:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    c946:	6830      	ldr	r0, [r6, #0]
    c948:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    c94c:	6843      	ldr	r3, [r0, #4]
    c94e:	685b      	ldr	r3, [r3, #4]
    c950:	4798      	blx	r3
    c952:	e7f5      	b.n	c940 <write_uart_string+0x8>
    c954:	2002012c 	.word	0x2002012c

0000c958 <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    c958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c95c:	4607      	mov	r7, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    c95e:	6843      	ldr	r3, [r0, #4]
    c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c962:	b103      	cbz	r3, c966 <isr+0xe>
		return api->irq_update(dev);
    c964:	4798      	blx	r3
	if (api->irq_rx_ready) {
    c966:	687b      	ldr	r3, [r7, #4]
    c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c96a:	b19b      	cbz	r3, c994 <isr+0x3c>
		return api->irq_rx_ready(dev);
    c96c:	4638      	mov	r0, r7
    c96e:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    c970:	b180      	cbz	r0, c994 <isr+0x3c>
    c972:	4d4f      	ldr	r5, [pc, #316]	; (cab0 <isr+0x158>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c974:	4b4f      	ldr	r3, [pc, #316]	; (cab4 <isr+0x15c>)
	cmd_len += 1;
    c976:	4e50      	ldr	r6, [pc, #320]	; (cab8 <isr+0x160>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c978:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    c97a:	f8df b168 	ldr.w	fp, [pc, #360]	; cae4 <isr+0x18c>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c97e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    c982:	687b      	ldr	r3, [r7, #4]
    c984:	699b      	ldr	r3, [r3, #24]
    c986:	b12b      	cbz	r3, c994 <isr+0x3c>
		return api->fifo_read(dev, rx_data, size);
    c988:	2201      	movs	r2, #1
    c98a:	f10d 0107 	add.w	r1, sp, #7
    c98e:	4638      	mov	r0, r7
    c990:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    c992:	b910      	cbnz	r0, c99a <isr+0x42>
		uart_rx_handler(character);
	}
}
    c994:	b003      	add	sp, #12
    c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    c99a:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    c99c:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
    c9a0:	1c54      	adds	r4, r2, #1
	switch (character) {
    c9a2:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    c9a4:	6034      	str	r4, [r6, #0]
	switch (character) {
    c9a6:	d019      	beq.n	c9dc <isr+0x84>
    c9a8:	297f      	cmp	r1, #127	; 0x7f
    c9aa:	d001      	beq.n	c9b0 <isr+0x58>
    c9ac:	2908      	cmp	r1, #8
    c9ae:	d11b      	bne.n	c9e8 <isr+0x90>
		pos = pos ? pos - 1 : 0;
    c9b0:	b102      	cbz	r2, c9b4 <isr+0x5c>
    c9b2:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9b4:	2c02      	cmp	r4, #2
    c9b6:	bf38      	it	cc
    c9b8:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    c9ba:	2000      	movs	r0, #0
    c9bc:	4b3f      	ldr	r3, [pc, #252]	; (cabc <isr+0x164>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9be:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    c9c0:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9c2:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    c9c4:	f89b 3000 	ldrb.w	r3, [fp]
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d1da      	bne.n	c982 <isr+0x2a>
	switch (term_mode) {
    c9cc:	4b3c      	ldr	r3, [pc, #240]	; (cac0 <isr+0x168>)
    c9ce:	781b      	ldrb	r3, [r3, #0]
    c9d0:	2b03      	cmp	r3, #3
    c9d2:	d85e      	bhi.n	ca92 <isr+0x13a>
    c9d4:	e8df f003 	tbb	[pc, r3]
    c9d8:	554d2f2f 	.word	0x554d2f2f
		inside_quotes = !inside_quotes;
    c9dc:	f89b 3000 	ldrb.w	r3, [fp]
    c9e0:	f083 0301 	eor.w	r3, r3, #1
    c9e4:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    c9e8:	f640 238c 	movw	r3, #2700	; 0xa8c
    c9ec:	429c      	cmp	r4, r3
    c9ee:	d90f      	bls.n	ca10 <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    c9f0:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    c9f4:	f042 0201 	orr.w	r2, r2, #1
    c9f8:	f362 0807 	bfi	r8, r2, #0, #8
    c9fc:	f365 188f 	bfi	r8, r5, #6, #10
    ca00:	4642      	mov	r2, r8
    ca02:	4830      	ldr	r0, [pc, #192]	; (cac4 <isr+0x16c>)
    ca04:	f010 f89a 	bl	1cb3c <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    ca08:	f640 238c 	movw	r3, #2700	; 0xa8c
	cmd_len = 0;
    ca0c:	6033      	str	r3, [r6, #0]
    ca0e:	e7b8      	b.n	c982 <isr+0x2a>
		} else if (cmd_len < 1) {
    ca10:	b974      	cbnz	r4, ca30 <isr+0xd8>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    ca12:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    ca16:	f043 0301 	orr.w	r3, r3, #1
    ca1a:	f363 0907 	bfi	r9, r3, #0, #8
    ca1e:	f365 198f 	bfi	r9, r5, #6, #10
    ca22:	464a      	mov	r2, r9
    ca24:	4621      	mov	r1, r4
    ca26:	4828      	ldr	r0, [pc, #160]	; (cac8 <isr+0x170>)
    ca28:	f010 f888 	bl	1cb3c <log_1>
			cmd_len = 0;
    ca2c:	6034      	str	r4, [r6, #0]
			return;
    ca2e:	e7a8      	b.n	c982 <isr+0x2a>
		at_buf[pos] = character;
    ca30:	4b22      	ldr	r3, [pc, #136]	; (cabc <isr+0x164>)
    ca32:	5499      	strb	r1, [r3, r2]
		break;
    ca34:	e7c6      	b.n	c9c4 <isr+0x6c>
		if (character == termination[term_mode]) {
    ca36:	4a25      	ldr	r2, [pc, #148]	; (cacc <isr+0x174>)
    ca38:	5cd3      	ldrb	r3, [r2, r3]
    ca3a:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    ca3c:	d1a1      	bne.n	c982 <isr+0x2a>
	uart_irq_rx_disable(uart_dev);
    ca3e:	4b24      	ldr	r3, [pc, #144]	; (cad0 <isr+0x178>)
    ca40:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    ca42:	6843      	ldr	r3, [r0, #4]
    ca44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ca46:	b103      	cbz	r3, ca4a <isr+0xf2>
		api->irq_rx_disable(dev);
    ca48:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca4a:	4922      	ldr	r1, [pc, #136]	; (cad4 <isr+0x17c>)
    ca4c:	e8d1 3fef 	ldaex	r3, [r1]
    ca50:	f043 0201 	orr.w	r2, r3, #1
    ca54:	e8c1 2fe0 	stlex	r0, r2, [r1]
    ca58:	2800      	cmp	r0, #0
    ca5a:	d1f7      	bne.n	ca4c <isr+0xf4>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ca5c:	07db      	lsls	r3, r3, #31
    ca5e:	d403      	bmi.n	ca68 <isr+0x110>
		k_queue_append(&work_q->queue, work);
    ca60:	3908      	subs	r1, #8
    ca62:	481d      	ldr	r0, [pc, #116]	; (cad8 <isr+0x180>)
    ca64:	f011 ffa1 	bl	1e9aa <k_queue_append>
	at_buf_len = cmd_len;
    ca68:	4b1c      	ldr	r3, [pc, #112]	; (cadc <isr+0x184>)
    ca6a:	6832      	ldr	r2, [r6, #0]
    ca6c:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    ca6e:	2300      	movs	r3, #0
    ca70:	e7cc      	b.n	ca0c <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    ca72:	4b12      	ldr	r3, [pc, #72]	; (cabc <isr+0x164>)
    ca74:	441a      	add	r2, r3
    ca76:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d081      	beq.n	c982 <isr+0x2a>
    ca7e:	290a      	cmp	r1, #10
    ca80:	e7dc      	b.n	ca3c <isr+0xe4>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    ca82:	4b0e      	ldr	r3, [pc, #56]	; (cabc <isr+0x164>)
    ca84:	441a      	add	r2, r3
    ca86:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ca8a:	2b0d      	cmp	r3, #13
    ca8c:	f47f af79 	bne.w	c982 <isr+0x2a>
    ca90:	e7f5      	b.n	ca7e <isr+0x126>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    ca92:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    ca96:	f042 0201 	orr.w	r2, r2, #1
    ca9a:	f362 0a07 	bfi	sl, r2, #0, #8
    ca9e:	f365 1a8f 	bfi	sl, r5, #6, #10
    caa2:	4652      	mov	r2, sl
    caa4:	4619      	mov	r1, r3
    caa6:	480e      	ldr	r0, [pc, #56]	; (cae0 <isr+0x188>)
    caa8:	f010 f848 	bl	1cb3c <log_1>
    caac:	e769      	b.n	c982 <isr+0x2a>
    caae:	bf00      	nop
    cab0:	0001f338 	.word	0x0001f338
    cab4:	0001f328 	.word	0x0001f328
    cab8:	2002011c 	.word	0x2002011c
    cabc:	20024e4e 	.word	0x20024e4e
    cac0:	20026367 	.word	0x20026367
    cac4:	0001fa0c 	.word	0x0001fa0c
    cac8:	0001fa2c 	.word	0x0001fa2c
    cacc:	0001fbad 	.word	0x0001fbad
    cad0:	2002012c 	.word	0x2002012c
    cad4:	20020128 	.word	0x20020128
    cad8:	20024d68 	.word	0x20024d68
    cadc:	20020118 	.word	0x20020118
    cae0:	0001fa4a 	.word	0x0001fa4a
    cae4:	20026366 	.word	0x20026366

0000cae8 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    cae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    caea:	2203      	movs	r2, #3
    caec:	4b49      	ldr	r3, [pc, #292]	; (cc14 <slm_at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    caee:	494a      	ldr	r1, [pc, #296]	; (cc18 <slm_at_host_init+0x130>)
    caf0:	2000      	movs	r0, #0
		term_mode = mode;
    caf2:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    caf4:	f005 fbd6 	bl	122a4 <at_notif_register_handler>
	if (err != 0) {
    caf8:	4c48      	ldr	r4, [pc, #288]	; (cc1c <slm_at_host_init+0x134>)
    cafa:	4b49      	ldr	r3, [pc, #292]	; (cc20 <slm_at_host_init+0x138>)
    cafc:	4605      	mov	r5, r0
    cafe:	1ae4      	subs	r4, r4, r3
    cb00:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    cb04:	b168      	cbz	r0, cb22 <slm_at_host_init+0x3a>
		LOG_ERR("Can't register handler err=%d", err);
    cb06:	f04f 0200 	mov.w	r2, #0
    cb0a:	2301      	movs	r3, #1
    cb0c:	f363 0207 	bfi	r2, r3, #0, #8
    cb10:	4601      	mov	r1, r0
    cb12:	f364 128f 	bfi	r2, r4, #6, #10
    cb16:	4843      	ldr	r0, [pc, #268]	; (cc24 <slm_at_host_init+0x13c>)
    cb18:	f010 f810 	bl	1cb3c <log_1>
		return -EFAULT;
	}
#endif
	LOG_DBG("at_host init done");
	return err;
}
    cb1c:	4628      	mov	r0, r5
    cb1e:	b003      	add	sp, #12
    cb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    cb22:	4841      	ldr	r0, [pc, #260]	; (cc28 <slm_at_host_init+0x140>)
    cb24:	f00e f9ec 	bl	1af00 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    cb28:	4d40      	ldr	r5, [pc, #256]	; (cc2c <slm_at_host_init+0x144>)
    cb2a:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
    cb2c:	b1e8      	cbz	r0, cb6a <slm_at_host_init+0x82>
			LOG_ERR("UART check failed: %d. "
    cb2e:	4f40      	ldr	r7, [pc, #256]	; (cc30 <slm_at_host_init+0x148>)
		err = uart_err_check(uart_dev);
    cb30:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
    cb32:	6843      	ldr	r3, [r0, #4]
    cb34:	689b      	ldr	r3, [r3, #8]
    cb36:	2b00      	cmp	r3, #0
    cb38:	d048      	beq.n	cbcc <slm_at_host_init+0xe4>
		return api->err_check(dev);
    cb3a:	4798      	blx	r3
		if (err) {
    cb3c:	4601      	mov	r1, r0
    cb3e:	2800      	cmp	r0, #0
    cb40:	d044      	beq.n	cbcc <slm_at_host_init+0xe4>
			LOG_ERR("UART check failed: %d. "
    cb42:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    cb46:	f043 0301 	orr.w	r3, r3, #1
    cb4a:	f363 0607 	bfi	r6, r3, #0, #8
    cb4e:	f364 168f 	bfi	r6, r4, #6, #10
    cb52:	4632      	mov	r2, r6
    cb54:	4638      	mov	r0, r7
    cb56:	f00f fff1 	bl	1cb3c <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    cb5a:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
    cb5c:	6843      	ldr	r3, [r0, #4]
    cb5e:	699b      	ldr	r3, [r3, #24]
    cb60:	b9eb      	cbnz	r3, cb9e <slm_at_host_init+0xb6>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    cb62:	200a      	movs	r0, #10
    cb64:	f00f f870 	bl	1bc48 <z_impl_k_sleep>
    cb68:	e7e2      	b.n	cb30 <slm_at_host_init+0x48>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    cb6a:	2301      	movs	r3, #1
    cb6c:	f04f 0200 	mov.w	r2, #0
    cb70:	f363 0207 	bfi	r2, r3, #0, #8
    cb74:	f364 128f 	bfi	r2, r4, #6, #10
    cb78:	492b      	ldr	r1, [pc, #172]	; (cc28 <slm_at_host_init+0x140>)
    cb7a:	482e      	ldr	r0, [pc, #184]	; (cc34 <slm_at_host_init+0x14c>)
    cb7c:	f00f ffde 	bl	1cb3c <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    cb80:	f04f 0200 	mov.w	r2, #0
    cb84:	2301      	movs	r3, #1
    cb86:	f06f 0115 	mvn.w	r1, #21
    cb8a:	f363 0207 	bfi	r2, r3, #0, #8
    cb8e:	482a      	ldr	r0, [pc, #168]	; (cc38 <slm_at_host_init+0x150>)
    cb90:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("GPS could not be initialized: %d", err);
    cb94:	f00f ffd2 	bl	1cb3c <log_1>
		return -EFAULT;
    cb98:	f06f 050d 	mvn.w	r5, #13
    cb9c:	e7be      	b.n	cb1c <slm_at_host_init+0x34>
		return api->fifo_read(dev, rx_data, size);
    cb9e:	2201      	movs	r2, #1
    cba0:	f10d 0107 	add.w	r1, sp, #7
    cba4:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    cba6:	2800      	cmp	r0, #0
    cba8:	d1d7      	bne.n	cb5a <slm_at_host_init+0x72>
    cbaa:	e7da      	b.n	cb62 <slm_at_host_init+0x7a>
	err = slm_at_gps_init(slm_at_callback);
    cbac:	4823      	ldr	r0, [pc, #140]	; (cc3c <slm_at_host_init+0x154>)
    cbae:	f001 fec7 	bl	e940 <slm_at_gps_init>
	if (err) {
    cbb2:	4605      	mov	r5, r0
    cbb4:	2800      	cmp	r0, #0
    cbb6:	d0b1      	beq.n	cb1c <slm_at_host_init+0x34>
		LOG_ERR("GPS could not be initialized: %d", err);
    cbb8:	f04f 0200 	mov.w	r2, #0
    cbbc:	2301      	movs	r3, #1
    cbbe:	f363 0207 	bfi	r2, r3, #0, #8
    cbc2:	4601      	mov	r1, r0
    cbc4:	f364 128f 	bfi	r2, r4, #6, #10
    cbc8:	481d      	ldr	r0, [pc, #116]	; (cc40 <slm_at_host_init+0x158>)
    cbca:	e7e3      	b.n	cb94 <slm_at_host_init+0xac>
	uart_irq_callback_set(uart_dev, isr);
    cbcc:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    cbce:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    cbd0:	b123      	cbz	r3, cbdc <slm_at_host_init+0xf4>
    cbd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    cbd4:	b113      	cbz	r3, cbdc <slm_at_host_init+0xf4>
		api->irq_callback_set(dev, cb, user_data);
    cbd6:	491b      	ldr	r1, [pc, #108]	; (cc44 <slm_at_host_init+0x15c>)
    cbd8:	4610      	mov	r0, r2
    cbda:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    cbdc:	2200      	movs	r2, #0
    cbde:	4b1a      	ldr	r3, [pc, #104]	; (cc48 <slm_at_host_init+0x160>)
    cbe0:	491a      	ldr	r1, [pc, #104]	; (cc4c <slm_at_host_init+0x164>)
	uart_irq_rx_enable(uart_dev);
    cbe2:	6828      	ldr	r0, [r5, #0]
    cbe4:	e9c3 1201 	strd	r1, r2, [r3, #4]
    cbe8:	601a      	str	r2, [r3, #0]
    cbea:	f00f fbe3 	bl	1c3b4 <uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    cbee:	2107      	movs	r1, #7
    cbf0:	4817      	ldr	r0, [pc, #92]	; (cc50 <slm_at_host_init+0x168>)
    cbf2:	f7ff fea1 	bl	c938 <write_uart_string>
	err = slm_at_tcpip_init(slm_at_callback);
    cbf6:	4811      	ldr	r0, [pc, #68]	; (cc3c <slm_at_host_init+0x154>)
    cbf8:	f001 fa0a 	bl	e010 <slm_at_tcpip_init>
	if (err) {
    cbfc:	4601      	mov	r1, r0
    cbfe:	2800      	cmp	r0, #0
    cc00:	d0d4      	beq.n	cbac <slm_at_host_init+0xc4>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    cc02:	f04f 0200 	mov.w	r2, #0
    cc06:	2301      	movs	r3, #1
    cc08:	f363 0207 	bfi	r2, r3, #0, #8
    cc0c:	f364 128f 	bfi	r2, r4, #6, #10
    cc10:	4810      	ldr	r0, [pc, #64]	; (cc54 <slm_at_host_init+0x16c>)
    cc12:	e7bf      	b.n	cb94 <slm_at_host_init+0xac>
    cc14:	20026367 	.word	0x20026367
    cc18:	0001c3d3 	.word	0x0001c3d3
    cc1c:	0001f338 	.word	0x0001f338
    cc20:	0001f328 	.word	0x0001f328
    cc24:	0001fa67 	.word	0x0001fa67
    cc28:	0001fa85 	.word	0x0001fa85
    cc2c:	2002012c 	.word	0x2002012c
    cc30:	0001fabc 	.word	0x0001fabc
    cc34:	0001fa8c 	.word	0x0001fa8c
    cc38:	0001fa9c 	.word	0x0001fa9c
    cc3c:	0001c3bf 	.word	0x0001c3bf
    cc40:	0001fb1c 	.word	0x0001fb1c
    cc44:	0000c959 	.word	0x0000c959
    cc48:	20020120 	.word	0x20020120
    cc4c:	0000cce9 	.word	0x0000cce9
    cc50:	0001faf1 	.word	0x0001faf1
    cc54:	0001faf9 	.word	0x0001faf9

0000cc58 <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
    cc58:	b508      	push	{r3, lr}
	int err;

#if defined(CONFIG_SLM_TCPIP_AT_MODE)
	/* Uninitialize the TCPIP module */
	err = slm_at_tcpip_uninit();
    cc5a:	f00f fbcc 	bl	1c3f6 <slm_at_tcpip_uninit>
	if (err) {
    cc5e:	4601      	mov	r1, r0
    cc60:	b168      	cbz	r0, cc7e <slm_at_host_uninit+0x26>
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
    cc62:	2302      	movs	r3, #2
    cc64:	f04f 0200 	mov.w	r2, #0
    cc68:	4819      	ldr	r0, [pc, #100]	; (ccd0 <slm_at_host_uninit+0x78>)
    cc6a:	f363 0207 	bfi	r2, r3, #0, #8
    cc6e:	4b19      	ldr	r3, [pc, #100]	; (ccd4 <slm_at_host_uninit+0x7c>)
    cc70:	1a1b      	subs	r3, r3, r0
    cc72:	08db      	lsrs	r3, r3, #3
    cc74:	f363 128f 	bfi	r2, r3, #6, #10
    cc78:	4817      	ldr	r0, [pc, #92]	; (ccd8 <slm_at_host_uninit+0x80>)
    cc7a:	f00f ff5f 	bl	1cb3c <log_1>
	}
#endif
#if defined(CONFIG_SLM_GPS_AT_MODE)
	/* Uninitialize the GPS module */
	err = slm_at_gps_uninit();
    cc7e:	f001 fef9 	bl	ea74 <slm_at_gps_uninit>
	if (err) {
    cc82:	4601      	mov	r1, r0
    cc84:	b168      	cbz	r0, cca2 <slm_at_host_uninit+0x4a>
		LOG_WRN("GPS could not be uninitialized: %d", err);
    cc86:	2302      	movs	r3, #2
    cc88:	f04f 0200 	mov.w	r2, #0
    cc8c:	4810      	ldr	r0, [pc, #64]	; (ccd0 <slm_at_host_uninit+0x78>)
    cc8e:	f363 0207 	bfi	r2, r3, #0, #8
    cc92:	4b10      	ldr	r3, [pc, #64]	; (ccd4 <slm_at_host_uninit+0x7c>)
    cc94:	1a1b      	subs	r3, r3, r0
    cc96:	08db      	lsrs	r3, r3, #3
    cc98:	f363 128f 	bfi	r2, r3, #6, #10
    cc9c:	480f      	ldr	r0, [pc, #60]	; (ccdc <slm_at_host_uninit+0x84>)
    cc9e:	f00f ff4d 	bl	1cb3c <log_1>
	}
#endif
	err = at_notif_deregister_handler(NULL, response_handler);
    cca2:	490f      	ldr	r1, [pc, #60]	; (cce0 <slm_at_host_uninit+0x88>)
    cca4:	2000      	movs	r0, #0
    cca6:	f005 fb4d 	bl	12344 <at_notif_deregister_handler>
	if (err != 0) {
    ccaa:	4601      	mov	r1, r0
    ccac:	b178      	cbz	r0, ccce <slm_at_host_uninit+0x76>
		LOG_WRN("Can't deregister handler err=%d", err);
    ccae:	2302      	movs	r3, #2
    ccb0:	f04f 0200 	mov.w	r2, #0
    ccb4:	4806      	ldr	r0, [pc, #24]	; (ccd0 <slm_at_host_uninit+0x78>)
    ccb6:	f363 0207 	bfi	r2, r3, #0, #8
    ccba:	4b06      	ldr	r3, [pc, #24]	; (ccd4 <slm_at_host_uninit+0x7c>)
    ccbc:	1a1b      	subs	r3, r3, r0
    ccbe:	08db      	lsrs	r3, r3, #3
    ccc0:	f363 128f 	bfi	r2, r3, #6, #10
    ccc4:	4807      	ldr	r0, [pc, #28]	; (cce4 <slm_at_host_uninit+0x8c>)
	if (err != 0) {
		LOG_WRN("Can't power off uart err=%d", err);
	}
#endif
	LOG_DBG("at_host uninit done");
}
    ccc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_WRN("Can't deregister handler err=%d", err);
    ccca:	f00f bf37 	b.w	1cb3c <log_1>
}
    ccce:	bd08      	pop	{r3, pc}
    ccd0:	0001f328 	.word	0x0001f328
    ccd4:	0001f338 	.word	0x0001f338
    ccd8:	0001fb3d 	.word	0x0001fb3d
    ccdc:	0001fb62 	.word	0x0001fb62
    cce0:	0001c3d3 	.word	0x0001c3d3
    cce4:	0001fb85 	.word	0x0001fb85

0000cce8 <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    cce8:	4a68      	ldr	r2, [pc, #416]	; (ce8c <cmd_send+0x1a4>)
    ccea:	4b69      	ldr	r3, [pc, #420]	; (ce90 <cmd_send+0x1a8>)
    ccec:	6811      	ldr	r1, [r2, #0]
    ccee:	f640 228b 	movw	r2, #2699	; 0xa8b
    ccf2:	4291      	cmp	r1, r2
    ccf4:	bf28      	it	cs
    ccf6:	4611      	movcs	r1, r2
    ccf8:	2200      	movs	r2, #0
{
    ccfa:	b530      	push	{r4, r5, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    ccfc:	461c      	mov	r4, r3
    ccfe:	4865      	ldr	r0, [pc, #404]	; (ce94 <cmd_send+0x1ac>)
{
    cd00:	b087      	sub	sp, #28
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    cd02:	545a      	strb	r2, [r3, r1]
static inline bool slm_at_cmd_cmp(const char *cmd,
				const char *slm_cmd,
				u8_t length)
{
	for (int i = 0; i < length; i++) {
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    cd04:	f814 1b01 	ldrb.w	r1, [r4], #1
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
    cd08:	f1a1 0561 	sub.w	r5, r1, #97	; 0x61
    cd0c:	2d19      	cmp	r5, #25
    cd0e:	f810 5b01 	ldrb.w	r5, [r0], #1
    cd12:	bf98      	it	ls
    cd14:	3920      	subls	r1, #32
    cd16:	428d      	cmp	r5, r1
    cd18:	d105      	bne.n	cd26 <cmd_send+0x3e>
	for (int i = 0; i < length; i++) {
    cd1a:	3201      	adds	r2, #1
    cd1c:	2a0a      	cmp	r2, #10
    cd1e:	d1f1      	bne.n	cd04 <cmd_send+0x1c>
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    cd20:	2110      	movs	r1, #16
    cd22:	485d      	ldr	r0, [pc, #372]	; (ce98 <cmd_send+0x1b0>)
    cd24:	e079      	b.n	ce1a <cmd_send+0x132>
    cd26:	2100      	movs	r1, #0
    cd28:	485c      	ldr	r0, [pc, #368]	; (ce9c <cmd_send+0x1b4>)
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    cd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
    cd2e:	f1a2 0461 	sub.w	r4, r2, #97	; 0x61
    cd32:	2c19      	cmp	r4, #25
    cd34:	f810 4b01 	ldrb.w	r4, [r0], #1
    cd38:	bf98      	it	ls
    cd3a:	3a20      	subls	r2, #32
    cd3c:	4294      	cmp	r4, r2
    cd3e:	d17a      	bne.n	ce36 <cmd_send+0x14e>
	for (int i = 0; i < length; i++) {
    cd40:	3101      	adds	r1, #1
    cd42:	2909      	cmp	r1, #9
    cd44:	d1f1      	bne.n	cd2a <cmd_send+0x42>
	ret = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    cd46:	4a56      	ldr	r2, [pc, #344]	; (cea0 <cmd_send+0x1b8>)
    cd48:	2100      	movs	r1, #0
    cd4a:	4851      	ldr	r0, [pc, #324]	; (ce90 <cmd_send+0x1a8>)
    cd4c:	f011 fc44 	bl	1e5d8 <at_parser_params_from_str>
	if (ret < 0) {
    cd50:	1e04      	subs	r4, r0, #0
    cd52:	da18      	bge.n	cd86 <cmd_send+0x9e>
		LOG_ERR("Failed to parse AT command %d", ret);
    cd54:	2301      	movs	r3, #1
    cd56:	f04f 0200 	mov.w	r2, #0
    cd5a:	4952      	ldr	r1, [pc, #328]	; (cea4 <cmd_send+0x1bc>)
    cd5c:	f363 0207 	bfi	r2, r3, #0, #8
    cd60:	4b51      	ldr	r3, [pc, #324]	; (cea8 <cmd_send+0x1c0>)
    cd62:	4852      	ldr	r0, [pc, #328]	; (ceac <cmd_send+0x1c4>)
    cd64:	1a5b      	subs	r3, r3, r1
    cd66:	08db      	lsrs	r3, r3, #3
    cd68:	f363 128f 	bfi	r2, r3, #6, #10
    cd6c:	4621      	mov	r1, r4
    cd6e:	f00f fee5 	bl	1cb3c <log_1>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    cd72:	2108      	movs	r1, #8
    cd74:	484e      	ldr	r0, [pc, #312]	; (ceb0 <cmd_send+0x1c8>)
		write_uart_string(str, ++chars);
    cd76:	f7ff fddf 	bl	c938 <write_uart_string>
	uart_irq_rx_enable(uart_dev);
    cd7a:	4b4e      	ldr	r3, [pc, #312]	; (ceb4 <cmd_send+0x1cc>)
    cd7c:	6818      	ldr	r0, [r3, #0]
    cd7e:	f00f fb19 	bl	1c3b4 <uart_irq_rx_enable>
}
    cd82:	b007      	add	sp, #28
    cd84:	bd30      	pop	{r4, r5, pc}
	type = at_parser_cmd_type_get(at_cmd);
    cd86:	4842      	ldr	r0, [pc, #264]	; (ce90 <cmd_send+0x1a8>)
    cd88:	f011 fc29 	bl	1e5de <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    cd8c:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
    cd8e:	4605      	mov	r5, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    cd90:	d12c      	bne.n	cdec <cmd_send+0x104>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    cd92:	4843      	ldr	r0, [pc, #268]	; (cea0 <cmd_send+0x1b8>)
    cd94:	f011 fd4f 	bl	1e836 <at_params_valid_count_get>
    cd98:	2801      	cmp	r0, #1
    cd9a:	d80e      	bhi.n	cdba <cmd_send+0xd2>
			LOG_ERR("AT parameter error");
    cd9c:	2301      	movs	r3, #1
    cd9e:	f04f 0100 	mov.w	r1, #0
    cda2:	4a40      	ldr	r2, [pc, #256]	; (cea4 <cmd_send+0x1bc>)
    cda4:	f363 0107 	bfi	r1, r3, #0, #8
    cda8:	4b3f      	ldr	r3, [pc, #252]	; (cea8 <cmd_send+0x1c0>)
    cdaa:	4843      	ldr	r0, [pc, #268]	; (ceb8 <cmd_send+0x1d0>)
    cdac:	1a9b      	subs	r3, r3, r2
    cdae:	08db      	lsrs	r3, r3, #3
    cdb0:	f363 118f 	bfi	r1, r3, #6, #10
    cdb4:	f00f feb5 	bl	1cb22 <log_0>
		if (err == 0) {
    cdb8:	e7db      	b.n	cd72 <cmd_send+0x8a>
		ret = at_params_short_get(&m_param_list, 1, &shutdown_mode);
    cdba:	aa02      	add	r2, sp, #8
    cdbc:	4629      	mov	r1, r5
    cdbe:	4838      	ldr	r0, [pc, #224]	; (cea0 <cmd_send+0x1b8>)
    cdc0:	f011 fd04 	bl	1e7cc <at_params_short_get>
		if (ret < 0) {
    cdc4:	2800      	cmp	r0, #0
    cdc6:	dbe9      	blt.n	cd9c <cmd_send+0xb4>
		switch (shutdown_mode) {
    cdc8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d0e5      	beq.n	cd9c <cmd_send+0xb4>
    cdd0:	2b02      	cmp	r3, #2
    cdd2:	d908      	bls.n	cde6 <cmd_send+0xfe>
    cdd4:	2b03      	cmp	r3, #3
    cdd6:	d1e1      	bne.n	cd9c <cmd_send+0xb4>
			enter_sleep(shutdown_mode);
    cdd8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    cddc:	f00f face 	bl	1c37c <enter_sleep>
		write_uart_string(OK_STR, sizeof(OK_STR));
    cde0:	2105      	movs	r1, #5
    cde2:	4836      	ldr	r0, [pc, #216]	; (cebc <cmd_send+0x1d4>)
    cde4:	e7c7      	b.n	cd76 <cmd_send+0x8e>
			slm_at_host_uninit();
    cde6:	f7ff ff37 	bl	cc58 <slm_at_host_uninit>
    cdea:	e7f5      	b.n	cdd8 <cmd_send+0xf0>
		if (err == 0) {
    cdec:	2c00      	cmp	r4, #0
    cdee:	d1c0      	bne.n	cd72 <cmd_send+0x8a>
    cdf0:	e7f6      	b.n	cde0 <cmd_send+0xf8>
	switch (state) {
    cdf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cdf6:	2b03      	cmp	r3, #3
    cdf8:	d8bf      	bhi.n	cd7a <cmd_send+0x92>
    cdfa:	a201      	add	r2, pc, #4	; (adr r2, ce00 <cmd_send+0x118>)
    cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce00:	0000ce11 	.word	0x0000ce11
    ce04:	0000cd73 	.word	0x0000cd73
    ce08:	0000ce21 	.word	0x0000ce21
    ce0c:	0000ce31 	.word	0x0000ce31
		write_uart_string(buf, strlen(buf));
    ce10:	482b      	ldr	r0, [pc, #172]	; (cec0 <cmd_send+0x1d8>)
    ce12:	f010 fbc1 	bl	1d598 <strlen>
    ce16:	4601      	mov	r1, r0
    ce18:	4829      	ldr	r0, [pc, #164]	; (cec0 <cmd_send+0x1d8>)
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    ce1a:	f7ff fd8d 	bl	c938 <write_uart_string>
    ce1e:	e7df      	b.n	cde0 <cmd_send+0xf8>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    ce20:	460a      	mov	r2, r1
    ce22:	4928      	ldr	r1, [pc, #160]	; (cec4 <cmd_send+0x1dc>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    ce24:	a802      	add	r0, sp, #8
    ce26:	f004 f873 	bl	10f10 <sprintf>
		write_uart_string(str, ++chars);
    ce2a:	1c41      	adds	r1, r0, #1
    ce2c:	a802      	add	r0, sp, #8
    ce2e:	e7a2      	b.n	cd76 <cmd_send+0x8e>
		chars = sprintf(str, "+CME: %d\r\n", err);
    ce30:	460a      	mov	r2, r1
    ce32:	4925      	ldr	r1, [pc, #148]	; (cec8 <cmd_send+0x1e0>)
    ce34:	e7f6      	b.n	ce24 <cmd_send+0x13c>
	err = slm_at_tcpip_parse(at_buf);
    ce36:	4816      	ldr	r0, [pc, #88]	; (ce90 <cmd_send+0x1a8>)
    ce38:	f000 fe40 	bl	dabc <slm_at_tcpip_parse>
	if (err == 0) {
    ce3c:	2800      	cmp	r0, #0
    ce3e:	d0cf      	beq.n	cde0 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    ce40:	3023      	adds	r0, #35	; 0x23
    ce42:	d196      	bne.n	cd72 <cmd_send+0x8a>
	err = slm_at_gps_parse(at_buf);
    ce44:	4812      	ldr	r0, [pc, #72]	; (ce90 <cmd_send+0x1a8>)
    ce46:	f001 fd39 	bl	e8bc <slm_at_gps_parse>
	if (err == 0) {
    ce4a:	2800      	cmp	r0, #0
    ce4c:	d0c8      	beq.n	cde0 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    ce4e:	3023      	adds	r0, #35	; 0x23
    ce50:	d18f      	bne.n	cd72 <cmd_send+0x8a>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    ce52:	491b      	ldr	r1, [pc, #108]	; (cec0 <cmd_send+0x1d8>)
    ce54:	f10d 0307 	add.w	r3, sp, #7
    ce58:	f640 228c 	movw	r2, #2700	; 0xa8c
    ce5c:	480c      	ldr	r0, [pc, #48]	; (ce90 <cmd_send+0x1a8>)
    ce5e:	f005 f97d 	bl	1215c <at_cmd_write>
	if (err < 0) {
    ce62:	1e01      	subs	r1, r0, #0
    ce64:	dac5      	bge.n	cdf2 <cmd_send+0x10a>
		LOG_ERR("Could not send AT command to modem: %d", err);
    ce66:	2301      	movs	r3, #1
    ce68:	f04f 0200 	mov.w	r2, #0
    ce6c:	480d      	ldr	r0, [pc, #52]	; (cea4 <cmd_send+0x1bc>)
    ce6e:	f363 0207 	bfi	r2, r3, #0, #8
    ce72:	4b0d      	ldr	r3, [pc, #52]	; (cea8 <cmd_send+0x1c0>)
    ce74:	1a1b      	subs	r3, r3, r0
    ce76:	08db      	lsrs	r3, r3, #3
    ce78:	f363 128f 	bfi	r2, r3, #6, #10
    ce7c:	4813      	ldr	r0, [pc, #76]	; (cecc <cmd_send+0x1e4>)
    ce7e:	f00f fe5d 	bl	1cb3c <log_1>
		state = AT_CMD_ERROR;
    ce82:	2301      	movs	r3, #1
    ce84:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (state) {
    ce88:	e773      	b.n	cd72 <cmd_send+0x8a>
    ce8a:	bf00      	nop
    ce8c:	20020118 	.word	0x20020118
    ce90:	20024e4e 	.word	0x20024e4e
    ce94:	0001f96c 	.word	0x0001f96c
    ce98:	0001f9fc 	.word	0x0001f9fc
    ce9c:	0001f977 	.word	0x0001f977
    cea0:	20020110 	.word	0x20020110
    cea4:	0001f328 	.word	0x0001f328
    cea8:	0001f338 	.word	0x0001f338
    ceac:	0001f981 	.word	0x0001f981
    ceb0:	0001f9b7 	.word	0x0001f9b7
    ceb4:	2002012c 	.word	0x2002012c
    ceb8:	0001f99f 	.word	0x0001f99f
    cebc:	0001f9b2 	.word	0x0001f9b2
    cec0:	200258da 	.word	0x200258da
    cec4:	0001f9e6 	.word	0x0001f9e6
    cec8:	0001f9f1 	.word	0x0001f9f1
    cecc:	0001f9bf 	.word	0x0001f9bf

0000ced0 <socket>:
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    ced0:	4b01      	ldr	r3, [pc, #4]	; (ced8 <socket+0x8>)
    ced2:	681b      	ldr	r3, [r3, #0]
    ced4:	681b      	ldr	r3, [r3, #0]
    ced6:	4718      	bx	r3
    ced8:	20020344 	.word	0x20020344

0000cedc <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    cedc:	4b01      	ldr	r3, [pc, #4]	; (cee4 <close+0x8>)
    cede:	681b      	ldr	r3, [r3, #0]
    cee0:	685b      	ldr	r3, [r3, #4]
    cee2:	4718      	bx	r3
    cee4:	20020344 	.word	0x20020344

0000cee8 <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    cee8:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    ceea:	4c18      	ldr	r4, [pc, #96]	; (cf4c <do_socket_close+0x64>)
{
    ceec:	4606      	mov	r6, r0
	if (client.sock > 0) {
    ceee:	6820      	ldr	r0, [r4, #0]
    cef0:	2800      	cmp	r0, #0
    cef2:	dd29      	ble.n	cf48 <do_socket_close+0x60>
		ret = close(client.sock);
    cef4:	f7ff fff2 	bl	cedc <close>
		if (ret < 0) {
    cef8:	1e05      	subs	r5, r0, #0
    cefa:	da16      	bge.n	cf2a <do_socket_close+0x42>
			LOG_WRN("close() failed: %d", -errno);
    cefc:	2302      	movs	r3, #2
    cefe:	f04f 0500 	mov.w	r5, #0
    cf02:	4a13      	ldr	r2, [pc, #76]	; (cf50 <do_socket_close+0x68>)
    cf04:	f363 0507 	bfi	r5, r3, #0, #8
    cf08:	4b12      	ldr	r3, [pc, #72]	; (cf54 <do_socket_close+0x6c>)
    cf0a:	1a9b      	subs	r3, r3, r2
    cf0c:	08db      	lsrs	r3, r3, #3
    cf0e:	f363 158f 	bfi	r5, r3, #6, #10
    cf12:	f00f fa6c 	bl	1c3ee <z_errno>
    cf16:	6801      	ldr	r1, [r0, #0]
    cf18:	462a      	mov	r2, r5
    cf1a:	4249      	negs	r1, r1
    cf1c:	480e      	ldr	r0, [pc, #56]	; (cf58 <do_socket_close+0x70>)
    cf1e:	f00f fe0d 	bl	1cb3c <log_1>
			ret = -errno;
    cf22:	f00f fa64 	bl	1c3ee <z_errno>
    cf26:	6805      	ldr	r5, [r0, #0]
    cf28:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    cf2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf2e:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    cf30:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cf32:	4632      	mov	r2, r6
    cf34:	4909      	ldr	r1, [pc, #36]	; (cf5c <do_socket_close+0x74>)
    cf36:	480a      	ldr	r0, [pc, #40]	; (cf60 <do_socket_close+0x78>)
		client.ip_proto = IPPROTO_IP;
    cf38:	80a3      	strh	r3, [r4, #4]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cf3a:	f003 ffe9 	bl	10f10 <sprintf>
		client.callback(buf);
    cf3e:	68a3      	ldr	r3, [r4, #8]
    cf40:	4807      	ldr	r0, [pc, #28]	; (cf60 <do_socket_close+0x78>)
    cf42:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    cf44:	4628      	mov	r0, r5
    cf46:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    cf48:	2500      	movs	r5, #0
	return ret;
    cf4a:	e7fb      	b.n	cf44 <do_socket_close+0x5c>
    cf4c:	20020130 	.word	0x20020130
    cf50:	0001f328 	.word	0x0001f328
    cf54:	0001f3a0 	.word	0x0001f3a0
    cf58:	0001fbc9 	.word	0x0001fbc9
    cf5c:	0001fbdc 	.word	0x0001fbdc
    cf60:	20026368 	.word	0x20026368

0000cf64 <do_socket_open>:
	if (type == SOCK_STREAM) {
    cf64:	2801      	cmp	r0, #1
{
    cf66:	b538      	push	{r3, r4, r5, lr}
    cf68:	4601      	mov	r1, r0
    cf6a:	4c21      	ldr	r4, [pc, #132]	; (cff0 <do_socket_open+0x8c>)
	if (type == SOCK_STREAM) {
    cf6c:	d12d      	bne.n	cfca <do_socket_open+0x66>
		client.sock = socket(AF_INET, SOCK_STREAM,
    cf6e:	2206      	movs	r2, #6
    cf70:	f7ff ffae 	bl	ced0 <socket>
		client.ip_proto = IPPROTO_TCP;
    cf74:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    cf76:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cf78:	7123      	strb	r3, [r4, #4]
	if (client.sock < 0) {
    cf7a:	6822      	ldr	r2, [r4, #0]
    cf7c:	2a00      	cmp	r2, #0
    cf7e:	da2d      	bge.n	cfdc <do_socket_open+0x78>
		LOG_ERR("socket() failed: %d", -errno);
    cf80:	2301      	movs	r3, #1
    cf82:	f04f 0500 	mov.w	r5, #0
    cf86:	4a1b      	ldr	r2, [pc, #108]	; (cff4 <do_socket_open+0x90>)
    cf88:	f363 0507 	bfi	r5, r3, #0, #8
    cf8c:	4b1a      	ldr	r3, [pc, #104]	; (cff8 <do_socket_open+0x94>)
    cf8e:	1a9b      	subs	r3, r3, r2
    cf90:	08db      	lsrs	r3, r3, #3
    cf92:	f363 158f 	bfi	r5, r3, #6, #10
    cf96:	f00f fa2a 	bl	1c3ee <z_errno>
    cf9a:	6801      	ldr	r1, [r0, #0]
    cf9c:	462a      	mov	r2, r5
    cf9e:	4249      	negs	r1, r1
    cfa0:	4816      	ldr	r0, [pc, #88]	; (cffc <do_socket_open+0x98>)
    cfa2:	f00f fdcb 	bl	1cb3c <log_1>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    cfa6:	f00f fa22 	bl	1c3ee <z_errno>
    cfaa:	6802      	ldr	r2, [r0, #0]
    cfac:	4914      	ldr	r1, [pc, #80]	; (d000 <do_socket_open+0x9c>)
    cfae:	4252      	negs	r2, r2
    cfb0:	4814      	ldr	r0, [pc, #80]	; (d004 <do_socket_open+0xa0>)
    cfb2:	f003 ffad 	bl	10f10 <sprintf>
		client.callback(buf);
    cfb6:	68a3      	ldr	r3, [r4, #8]
    cfb8:	4812      	ldr	r0, [pc, #72]	; (d004 <do_socket_open+0xa0>)
    cfba:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    cfbc:	2300      	movs	r3, #0
    cfbe:	7123      	strb	r3, [r4, #4]
		ret = -errno;
    cfc0:	f00f fa15 	bl	1c3ee <z_errno>
    cfc4:	6800      	ldr	r0, [r0, #0]
    cfc6:	4240      	negs	r0, r0
}
    cfc8:	bd38      	pop	{r3, r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    cfca:	2802      	cmp	r0, #2
    cfcc:	d1d5      	bne.n	cf7a <do_socket_open+0x16>
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cfce:	2211      	movs	r2, #17
    cfd0:	2001      	movs	r0, #1
    cfd2:	f7ff ff7d 	bl	ced0 <socket>
		client.ip_proto = IPPROTO_UDP;
    cfd6:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cfd8:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cfda:	e7cd      	b.n	cf78 <do_socket_open+0x14>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    cfdc:	7923      	ldrb	r3, [r4, #4]
    cfde:	490a      	ldr	r1, [pc, #40]	; (d008 <do_socket_open+0xa4>)
    cfe0:	4808      	ldr	r0, [pc, #32]	; (d004 <do_socket_open+0xa0>)
    cfe2:	f003 ff95 	bl	10f10 <sprintf>
		client.callback(buf);
    cfe6:	4807      	ldr	r0, [pc, #28]	; (d004 <do_socket_open+0xa0>)
    cfe8:	68a3      	ldr	r3, [r4, #8]
    cfea:	4798      	blx	r3
	int ret = 0;
    cfec:	2000      	movs	r0, #0
	return ret;
    cfee:	e7eb      	b.n	cfc8 <do_socket_open+0x64>
    cff0:	20020130 	.word	0x20020130
    cff4:	0001f328 	.word	0x0001f328
    cff8:	0001f3a0 	.word	0x0001f3a0
    cffc:	0001fbeb 	.word	0x0001fbeb
    d000:	0001fbdc 	.word	0x0001fbdc
    d004:	20026368 	.word	0x20026368
    d008:	0001fbff 	.word	0x0001fbff

0000d00c <handle_at_socket>:
static int handle_at_socket(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    d00c:	2801      	cmp	r0, #1
{
    d00e:	b513      	push	{r0, r1, r4, lr}
    d010:	4604      	mov	r4, r0
	switch (cmd_type) {
    d012:	d004      	beq.n	d01e <handle_at_socket+0x12>
    d014:	2802      	cmp	r0, #2
    d016:	d050      	beq.n	d0ba <handle_at_socket+0xae>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    d018:	f06f 0415 	mvn.w	r4, #21
    d01c:	e02e      	b.n	d07c <handle_at_socket+0x70>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d01e:	4830      	ldr	r0, [pc, #192]	; (d0e0 <handle_at_socket+0xd4>)
    d020:	f011 fc09 	bl	1e836 <at_params_valid_count_get>
    d024:	2801      	cmp	r0, #1
    d026:	d9f7      	bls.n	d018 <handle_at_socket+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    d028:	4621      	mov	r1, r4
    d02a:	aa01      	add	r2, sp, #4
    d02c:	482c      	ldr	r0, [pc, #176]	; (d0e0 <handle_at_socket+0xd4>)
    d02e:	f011 fbcd 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d032:	1e04      	subs	r4, r0, #0
    d034:	db22      	blt.n	d07c <handle_at_socket+0x70>
			return err;
		}
		if (op == 1) {
    d036:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d03a:	2801      	cmp	r0, #1
    d03c:	d127      	bne.n	d08e <handle_at_socket+0x82>
			u16_t type;

			if (at_params_valid_count_get(&m_param_list) < 3) {
    d03e:	4828      	ldr	r0, [pc, #160]	; (d0e0 <handle_at_socket+0xd4>)
    d040:	f011 fbf9 	bl	1e836 <at_params_valid_count_get>
    d044:	2802      	cmp	r0, #2
    d046:	d9e7      	bls.n	d018 <handle_at_socket+0xc>
				return -EINVAL;
			}
			err = at_params_short_get(&m_param_list, 2, &type);
    d048:	f10d 0206 	add.w	r2, sp, #6
    d04c:	2102      	movs	r1, #2
    d04e:	4824      	ldr	r0, [pc, #144]	; (d0e0 <handle_at_socket+0xd4>)
    d050:	f011 fbbc 	bl	1e7cc <at_params_short_get>
			if (err < 0) {
    d054:	1e04      	subs	r4, r0, #0
    d056:	db11      	blt.n	d07c <handle_at_socket+0x70>
				return err;
			}
			if (client.sock > 0) {
    d058:	4b22      	ldr	r3, [pc, #136]	; (d0e4 <handle_at_socket+0xd8>)
    d05a:	681b      	ldr	r3, [r3, #0]
    d05c:	2b00      	cmp	r3, #0
    d05e:	dd10      	ble.n	d082 <handle_at_socket+0x76>
				LOG_WRN("Socket is already opened");
    d060:	2302      	movs	r3, #2
    d062:	f04f 0100 	mov.w	r1, #0
    d066:	4a20      	ldr	r2, [pc, #128]	; (d0e8 <handle_at_socket+0xdc>)
    d068:	f363 0107 	bfi	r1, r3, #0, #8
    d06c:	4b1f      	ldr	r3, [pc, #124]	; (d0ec <handle_at_socket+0xe0>)
    d06e:	4820      	ldr	r0, [pc, #128]	; (d0f0 <handle_at_socket+0xe4>)
    d070:	1a9b      	subs	r3, r3, r2
    d072:	08db      	lsrs	r3, r3, #3
    d074:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_socket_open(type);
			}
		} else if (op == 0) {
			if (client.sock < 0) {
				LOG_WRN("Socket is not opened yet");
    d078:	f00f fd53 	bl	1cb22 <log_0>
	default:
		break;
	}

	return err;
}
    d07c:	4620      	mov	r0, r4
    d07e:	b002      	add	sp, #8
    d080:	bd10      	pop	{r4, pc}
				err = do_socket_open(type);
    d082:	f89d 0006 	ldrb.w	r0, [sp, #6]
    d086:	f7ff ff6d 	bl	cf64 <do_socket_open>
				err = do_socket_close(0);
    d08a:	4604      	mov	r4, r0
    d08c:	e7f6      	b.n	d07c <handle_at_socket+0x70>
		} else if (op == 0) {
    d08e:	2800      	cmp	r0, #0
    d090:	d1f4      	bne.n	d07c <handle_at_socket+0x70>
			if (client.sock < 0) {
    d092:	4b14      	ldr	r3, [pc, #80]	; (d0e4 <handle_at_socket+0xd8>)
    d094:	681b      	ldr	r3, [r3, #0]
    d096:	2b00      	cmp	r3, #0
    d098:	da0c      	bge.n	d0b4 <handle_at_socket+0xa8>
				LOG_WRN("Socket is not opened yet");
    d09a:	2302      	movs	r3, #2
    d09c:	f04f 0100 	mov.w	r1, #0
    d0a0:	4a11      	ldr	r2, [pc, #68]	; (d0e8 <handle_at_socket+0xdc>)
    d0a2:	f363 0107 	bfi	r1, r3, #0, #8
    d0a6:	4b11      	ldr	r3, [pc, #68]	; (d0ec <handle_at_socket+0xe0>)
    d0a8:	4812      	ldr	r0, [pc, #72]	; (d0f4 <handle_at_socket+0xe8>)
    d0aa:	1a9b      	subs	r3, r3, r2
    d0ac:	08db      	lsrs	r3, r3, #3
    d0ae:	f363 118f 	bfi	r1, r3, #6, #10
    d0b2:	e7e1      	b.n	d078 <handle_at_socket+0x6c>
				err = do_socket_close(0);
    d0b4:	f7ff ff18 	bl	cee8 <do_socket_close>
    d0b8:	e7e7      	b.n	d08a <handle_at_socket+0x7e>
		if (client.sock != INVALID_SOCKET) {
    d0ba:	4c0a      	ldr	r4, [pc, #40]	; (d0e4 <handle_at_socket+0xd8>)
    d0bc:	6822      	ldr	r2, [r4, #0]
    d0be:	1c53      	adds	r3, r2, #1
    d0c0:	d009      	beq.n	d0d6 <handle_at_socket+0xca>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    d0c2:	7923      	ldrb	r3, [r4, #4]
    d0c4:	490c      	ldr	r1, [pc, #48]	; (d0f8 <handle_at_socket+0xec>)
    d0c6:	480d      	ldr	r0, [pc, #52]	; (d0fc <handle_at_socket+0xf0>)
    d0c8:	f003 ff22 	bl	10f10 <sprintf>
		client.callback(buf);
    d0cc:	68a3      	ldr	r3, [r4, #8]
    d0ce:	480b      	ldr	r0, [pc, #44]	; (d0fc <handle_at_socket+0xf0>)
    d0d0:	4798      	blx	r3
		err = 0;
    d0d2:	2400      	movs	r4, #0
		break;
    d0d4:	e7d2      	b.n	d07c <handle_at_socket+0x70>
			sprintf(buf, "#XSOCKET: 0\r\n");
    d0d6:	490a      	ldr	r1, [pc, #40]	; (d100 <handle_at_socket+0xf4>)
    d0d8:	4808      	ldr	r0, [pc, #32]	; (d0fc <handle_at_socket+0xf0>)
    d0da:	f003 ff19 	bl	10f10 <sprintf>
    d0de:	e7f5      	b.n	d0cc <handle_at_socket+0xc0>
    d0e0:	20020110 	.word	0x20020110
    d0e4:	20020130 	.word	0x20020130
    d0e8:	0001f328 	.word	0x0001f328
    d0ec:	0001f3a0 	.word	0x0001f3a0
    d0f0:	0001fcef 	.word	0x0001fcef
    d0f4:	0001fd08 	.word	0x0001fd08
    d0f8:	0001fbff 	.word	0x0001fbff
    d0fc:	20026368 	.word	0x20026368
    d100:	0001fd21 	.word	0x0001fd21

0000d104 <send.constprop.10>:
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    d104:	4b04      	ldr	r3, [pc, #16]	; (d118 <send.constprop.10+0x14>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    d106:	b410      	push	{r4}
	return socket_ops->send(sock, buf, len, flags);
    d108:	681b      	ldr	r3, [r3, #0]
    d10a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d10c:	2300      	movs	r3, #0
    d10e:	46a4      	mov	ip, r4
}
    d110:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->send(sock, buf, len, flags);
    d114:	4760      	bx	ip
    d116:	bf00      	nop
    d118:	20020344 	.word	0x20020344

0000d11c <handle_at_tcp_send>:
 */
static int handle_at_tcp_send(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    d11c:	f44f 7310 	mov.w	r3, #576	; 0x240
{
    d120:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (!client.connected) {
    d122:	4d2f      	ldr	r5, [pc, #188]	; (d1e0 <handle_at_tcp_send+0xc4>)
{
    d124:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    d128:	9301      	str	r3, [sp, #4]
	if (!client.connected) {
    d12a:	796b      	ldrb	r3, [r5, #5]
{
    d12c:	4604      	mov	r4, r0
	if (!client.connected) {
    d12e:	b993      	cbnz	r3, d156 <handle_at_tcp_send+0x3a>
		LOG_ERR("TCP not connected yet");
    d130:	2301      	movs	r3, #1
    d132:	f04f 0100 	mov.w	r1, #0
    d136:	4a2b      	ldr	r2, [pc, #172]	; (d1e4 <handle_at_tcp_send+0xc8>)
    d138:	f363 0107 	bfi	r1, r3, #0, #8
    d13c:	4b2a      	ldr	r3, [pc, #168]	; (d1e8 <handle_at_tcp_send+0xcc>)
    d13e:	482b      	ldr	r0, [pc, #172]	; (d1ec <handle_at_tcp_send+0xd0>)
    d140:	1a9b      	subs	r3, r3, r2
    d142:	08db      	lsrs	r3, r3, #3
    d144:	f363 118f 	bfi	r1, r3, #6, #10
    d148:	f00f fceb 	bl	1cb22 <log_0>
	int err = -EINVAL;
    d14c:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d150:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (cmd_type) {
    d156:	2801      	cmp	r0, #1
    d158:	d1f8      	bne.n	d14c <handle_at_tcp_send+0x30>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d15a:	4825      	ldr	r0, [pc, #148]	; (d1f0 <handle_at_tcp_send+0xd4>)
    d15c:	f011 fb6b 	bl	1e836 <at_params_valid_count_get>
    d160:	2801      	cmp	r0, #1
    d162:	d9f3      	bls.n	d14c <handle_at_tcp_send+0x30>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    d164:	ae02      	add	r6, sp, #8
    d166:	ab01      	add	r3, sp, #4
    d168:	4632      	mov	r2, r6
    d16a:	4621      	mov	r1, r4
    d16c:	4820      	ldr	r0, [pc, #128]	; (d1f0 <handle_at_tcp_send+0xd4>)
    d16e:	f011 fb3f 	bl	1e7f0 <at_params_string_get>
		if (err < 0) {
    d172:	2800      	cmp	r0, #0
    d174:	dbec      	blt.n	d150 <handle_at_tcp_send+0x34>
		data[size] = '\0';
    d176:	2400      	movs	r4, #0
    d178:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    d17a:	4630      	mov	r0, r6
		data[size] = '\0';
    d17c:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    d17e:	f010 fa0b 	bl	1d598 <strlen>
    d182:	4607      	mov	r7, r0
	while (offset < datalen) {
    d184:	42a7      	cmp	r7, r4
    d186:	d91f      	bls.n	d1c8 <handle_at_tcp_send+0xac>
		ret = send(client.sock, data + offset,
    d188:	1b3a      	subs	r2, r7, r4
    d18a:	1931      	adds	r1, r6, r4
    d18c:	6828      	ldr	r0, [r5, #0]
    d18e:	f7ff ffb9 	bl	d104 <send.constprop.10>
		if (ret < 0) {
    d192:	2800      	cmp	r0, #0
    d194:	da22      	bge.n	d1dc <handle_at_tcp_send+0xc0>
			do_socket_close(-errno);
    d196:	f00f f92a 	bl	1c3ee <z_errno>
    d19a:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    d19c:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    d1a0:	4240      	negs	r0, r0
    d1a2:	f7ff fea1 	bl	cee8 <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    d1a6:	2302      	movs	r3, #2
    d1a8:	4a0e      	ldr	r2, [pc, #56]	; (d1e4 <handle_at_tcp_send+0xc8>)
    d1aa:	f363 0607 	bfi	r6, r3, #0, #8
    d1ae:	4b0e      	ldr	r3, [pc, #56]	; (d1e8 <handle_at_tcp_send+0xcc>)
    d1b0:	1a9b      	subs	r3, r3, r2
    d1b2:	08db      	lsrs	r3, r3, #3
    d1b4:	f363 168f 	bfi	r6, r3, #6, #10
    d1b8:	f00f f919 	bl	1c3ee <z_errno>
    d1bc:	6801      	ldr	r1, [r0, #0]
    d1be:	4632      	mov	r2, r6
    d1c0:	4249      	negs	r1, r1
    d1c2:	480c      	ldr	r0, [pc, #48]	; (d1f4 <handle_at_tcp_send+0xd8>)
    d1c4:	f00f fcba 	bl	1cb3c <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    d1c8:	4622      	mov	r2, r4
    d1ca:	490b      	ldr	r1, [pc, #44]	; (d1f8 <handle_at_tcp_send+0xdc>)
    d1cc:	480b      	ldr	r0, [pc, #44]	; (d1fc <handle_at_tcp_send+0xe0>)
    d1ce:	f003 fe9f 	bl	10f10 <sprintf>
	client.callback(buf);
    d1d2:	480a      	ldr	r0, [pc, #40]	; (d1fc <handle_at_tcp_send+0xe0>)
    d1d4:	68ab      	ldr	r3, [r5, #8]
    d1d6:	4798      	blx	r3
		err = do_tcp_send(data);
    d1d8:	2000      	movs	r0, #0
		break;
    d1da:	e7b9      	b.n	d150 <handle_at_tcp_send+0x34>
		offset += ret;
    d1dc:	4404      	add	r4, r0
    d1de:	e7d1      	b.n	d184 <handle_at_tcp_send+0x68>
    d1e0:	20020130 	.word	0x20020130
    d1e4:	0001f328 	.word	0x0001f328
    d1e8:	0001f3a0 	.word	0x0001f3a0
    d1ec:	0001fd82 	.word	0x0001fd82
    d1f0:	20020110 	.word	0x20020110
    d1f4:	0001fd98 	.word	0x0001fd98
    d1f8:	0001fdaa 	.word	0x0001fdaa
    d1fc:	20026368 	.word	0x20026368

0000d200 <recv.constprop.12>:
	return socket_ops->recv(sock, buf, max_len, flags);
    d200:	4b04      	ldr	r3, [pc, #16]	; (d214 <recv.constprop.12+0x14>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    d202:	b410      	push	{r4}
	return socket_ops->recv(sock, buf, max_len, flags);
    d204:	681b      	ldr	r3, [r3, #0]
    d206:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    d208:	2300      	movs	r3, #0
    d20a:	46a4      	mov	ip, r4
}
    d20c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->recv(sock, buf, max_len, flags);
    d210:	4760      	bx	ip
    d212:	bf00      	nop
    d214:	20020344 	.word	0x20020344

0000d218 <handle_at_bind>:
{
    d218:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
    d21a:	4d2d      	ldr	r5, [pc, #180]	; (d2d0 <handle_at_bind+0xb8>)
{
    d21c:	b085      	sub	sp, #20
	if (client.sock < 0) {
    d21e:	682b      	ldr	r3, [r5, #0]
{
    d220:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d222:	2b00      	cmp	r3, #0
    d224:	da11      	bge.n	d24a <handle_at_bind+0x32>
		LOG_ERR("Socket not opened yet");
    d226:	2301      	movs	r3, #1
    d228:	f04f 0100 	mov.w	r1, #0
    d22c:	4a29      	ldr	r2, [pc, #164]	; (d2d4 <handle_at_bind+0xbc>)
    d22e:	f363 0107 	bfi	r1, r3, #0, #8
    d232:	4b29      	ldr	r3, [pc, #164]	; (d2d8 <handle_at_bind+0xc0>)
    d234:	4829      	ldr	r0, [pc, #164]	; (d2dc <handle_at_bind+0xc4>)
    d236:	1a9b      	subs	r3, r3, r2
    d238:	08db      	lsrs	r3, r3, #3
    d23a:	f363 118f 	bfi	r1, r3, #6, #10
    d23e:	f00f fc70 	bl	1cb22 <log_0>
	int err = -EINVAL;
    d242:	f06f 0015 	mvn.w	r0, #21
}
    d246:	b005      	add	sp, #20
    d248:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
    d24a:	2801      	cmp	r0, #1
    d24c:	d1f9      	bne.n	d242 <handle_at_bind+0x2a>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d24e:	4824      	ldr	r0, [pc, #144]	; (d2e0 <handle_at_bind+0xc8>)
    d250:	f011 faf1 	bl	1e836 <at_params_valid_count_get>
    d254:	2801      	cmp	r0, #1
    d256:	d9f4      	bls.n	d242 <handle_at_bind+0x2a>
		err = at_params_short_get(&m_param_list, 1, &port);
    d258:	f10d 0206 	add.w	r2, sp, #6
    d25c:	4621      	mov	r1, r4
    d25e:	4820      	ldr	r0, [pc, #128]	; (d2e0 <handle_at_bind+0xc8>)
    d260:	f011 fab4 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d264:	2800      	cmp	r0, #0
    d266:	dbee      	blt.n	d246 <handle_at_bind+0x2e>
		err = do_bind(port);
    d268:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	local.sin_family = AF_INET;
    d26c:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
    d270:	0213      	lsls	r3, r2, #8
    d272:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    d276:	2400      	movs	r4, #0
	return socket_ops->bind(sock, addr, addrlen);
    d278:	2208      	movs	r2, #8
	local.sin_port = htons(port);
    d27a:	f8ad 300a 	strh.w	r3, [sp, #10]
    d27e:	4b19      	ldr	r3, [pc, #100]	; (d2e4 <handle_at_bind+0xcc>)
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    d280:	9403      	str	r4, [sp, #12]
    d282:	681b      	ldr	r3, [r3, #0]
    d284:	eb0d 0102 	add.w	r1, sp, r2
    d288:	68db      	ldr	r3, [r3, #12]
    d28a:	6828      	ldr	r0, [r5, #0]
    d28c:	4798      	blx	r3
	if (ret < 0) {
    d28e:	42a0      	cmp	r0, r4
    d290:	da1b      	bge.n	d2ca <handle_at_bind+0xb2>
		LOG_ERR("bind() failed: %d", -errno);
    d292:	2301      	movs	r3, #1
    d294:	4a0f      	ldr	r2, [pc, #60]	; (d2d4 <handle_at_bind+0xbc>)
    d296:	f363 0407 	bfi	r4, r3, #0, #8
    d29a:	4b0f      	ldr	r3, [pc, #60]	; (d2d8 <handle_at_bind+0xc0>)
    d29c:	1a9b      	subs	r3, r3, r2
    d29e:	08db      	lsrs	r3, r3, #3
    d2a0:	f363 148f 	bfi	r4, r3, #6, #10
    d2a4:	f00f f8a3 	bl	1c3ee <z_errno>
    d2a8:	6801      	ldr	r1, [r0, #0]
    d2aa:	4622      	mov	r2, r4
    d2ac:	4249      	negs	r1, r1
    d2ae:	480e      	ldr	r0, [pc, #56]	; (d2e8 <handle_at_bind+0xd0>)
    d2b0:	f00f fc44 	bl	1cb3c <log_1>
		do_socket_close(-errno);
    d2b4:	f00f f89b 	bl	1c3ee <z_errno>
    d2b8:	6800      	ldr	r0, [r0, #0]
    d2ba:	4240      	negs	r0, r0
    d2bc:	f7ff fe14 	bl	cee8 <do_socket_close>
		return -errno;
    d2c0:	f00f f895 	bl	1c3ee <z_errno>
    d2c4:	6800      	ldr	r0, [r0, #0]
    d2c6:	4240      	negs	r0, r0
    d2c8:	e7bd      	b.n	d246 <handle_at_bind+0x2e>
	return 0;
    d2ca:	4620      	mov	r0, r4
		break;
    d2cc:	e7bb      	b.n	d246 <handle_at_bind+0x2e>
    d2ce:	bf00      	nop
    d2d0:	20020130 	.word	0x20020130
    d2d4:	0001f328 	.word	0x0001f328
    d2d8:	0001f3a0 	.word	0x0001f3a0
    d2dc:	0001fcc7 	.word	0x0001fcc7
    d2e0:	20020110 	.word	0x20020110
    d2e4:	20020344 	.word	0x20020344
    d2e8:	0001fcdd 	.word	0x0001fcdd

0000d2ec <parse_host_by_name>:
{
    d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2f0:	4614      	mov	r4, r2
    d2f2:	4680      	mov	r8, r0
	struct addrinfo hints = {
    d2f4:	2501      	movs	r5, #1
{
    d2f6:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    d2f8:	4f24      	ldr	r7, [pc, #144]	; (d38c <parse_host_by_name+0xa0>)
	struct addrinfo hints = {
    d2fa:	2220      	movs	r2, #32
{
    d2fc:	460e      	mov	r6, r1
	struct addrinfo hints = {
    d2fe:	a806      	add	r0, sp, #24
    d300:	2100      	movs	r1, #0
    d302:	f010 f9ae 	bl	1d662 <memset>
    d306:	683b      	ldr	r3, [r7, #0]
    d308:	e9cd 5407 	strd	r5, r4, [sp, #28]
    d30c:	aa06      	add	r2, sp, #24
    d30e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    d310:	2100      	movs	r1, #0
    d312:	ab01      	add	r3, sp, #4
    d314:	4640      	mov	r0, r8
    d316:	47a0      	blx	r4
	if (err) {
    d318:	4604      	mov	r4, r0
    d31a:	b188      	cbz	r0, d340 <parse_host_by_name+0x54>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    d31c:	f04f 0200 	mov.w	r2, #0
    d320:	491b      	ldr	r1, [pc, #108]	; (d390 <parse_host_by_name+0xa4>)
    d322:	4b1c      	ldr	r3, [pc, #112]	; (d394 <parse_host_by_name+0xa8>)
    d324:	f365 0207 	bfi	r2, r5, #0, #8
    d328:	1a5b      	subs	r3, r3, r1
    d32a:	08db      	lsrs	r3, r3, #3
    d32c:	4601      	mov	r1, r0
    d32e:	f363 128f 	bfi	r2, r3, #6, #10
    d332:	4819      	ldr	r0, [pc, #100]	; (d398 <parse_host_by_name+0xac>)
    d334:	f00f fc02 	bl	1cb3c <log_1>
}
    d338:	4620      	mov	r0, r4
    d33a:	b00e      	add	sp, #56	; 0x38
    d33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    d340:	9b01      	ldr	r3, [sp, #4]
    d342:	b983      	cbnz	r3, d366 <parse_host_by_name+0x7a>
		LOG_ERR("ERROR: Address not found\n");
    d344:	2301      	movs	r3, #1
    d346:	f04f 0100 	mov.w	r1, #0
    d34a:	4a11      	ldr	r2, [pc, #68]	; (d390 <parse_host_by_name+0xa4>)
    d34c:	f363 0107 	bfi	r1, r3, #0, #8
    d350:	4b10      	ldr	r3, [pc, #64]	; (d394 <parse_host_by_name+0xa8>)
    d352:	4812      	ldr	r0, [pc, #72]	; (d39c <parse_host_by_name+0xb0>)
    d354:	1a9b      	subs	r3, r3, r2
    d356:	08db      	lsrs	r3, r3, #3
    d358:	f363 118f 	bfi	r1, r3, #6, #10
    d35c:	f00f fbe1 	bl	1cb22 <log_0>
		return -ENOENT;
    d360:	f06f 0401 	mvn.w	r4, #1
    d364:	e7e8      	b.n	d338 <parse_host_by_name+0x4c>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    d366:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    d368:	490d      	ldr	r1, [pc, #52]	; (d3a0 <parse_host_by_name+0xb4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    d36a:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    d36c:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    d36e:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    d370:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    d372:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    d374:	2310      	movs	r3, #16
    d376:	aa02      	add	r2, sp, #8
    d378:	3104      	adds	r1, #4
    d37a:	4628      	mov	r0, r5
    d37c:	f003 fe0a 	bl	10f94 <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    d380:	683b      	ldr	r3, [r7, #0]
    d382:	9801      	ldr	r0, [sp, #4]
    d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d386:	4798      	blx	r3
    d388:	e7d6      	b.n	d338 <parse_host_by_name+0x4c>
    d38a:	bf00      	nop
    d38c:	20020344 	.word	0x20020344
    d390:	0001f328 	.word	0x0001f328
    d394:	0001f3a0 	.word	0x0001f3a0
    d398:	0001fec0 	.word	0x0001fec0
    d39c:	0001fedd 	.word	0x0001fedd
    d3a0:	20024e2c 	.word	0x20024e2c

0000d3a4 <parse_host_by_ipv4>:
{
    d3a4:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    d3a6:	2301      	movs	r3, #1
    d3a8:	4a06      	ldr	r2, [pc, #24]	; (d3c4 <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    d3aa:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    d3ac:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    d3ae:	8051      	strh	r1, [r2, #2]
	return z_impl_net_addr_pton(family, src, dst);
    d3b0:	4601      	mov	r1, r0
    d3b2:	3204      	adds	r2, #4
    d3b4:	4618      	mov	r0, r3
    d3b6:	f010 fa5e 	bl	1d876 <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    d3ba:	2800      	cmp	r0, #0
}
    d3bc:	bf18      	it	ne
    d3be:	f06f 0015 	mvnne.w	r0, #21
    d3c2:	bd08      	pop	{r3, pc}
    d3c4:	20024e2c 	.word	0x20024e2c

0000d3c8 <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    d3c8:	2380      	movs	r3, #128	; 0x80
{
    d3ca:	b570      	push	{r4, r5, r6, lr}
    d3cc:	b0a2      	sub	sp, #136	; 0x88
	int size = TCPIP_MAX_URL;
    d3ce:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    d3d0:	4b4f      	ldr	r3, [pc, #316]	; (d510 <handle_at_tcp_conn+0x148>)
{
    d3d2:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d3d4:	681a      	ldr	r2, [r3, #0]
    d3d6:	461e      	mov	r6, r3
    d3d8:	2a00      	cmp	r2, #0
    d3da:	da10      	bge.n	d3fe <handle_at_tcp_conn+0x36>
		LOG_ERR("Socket not opened yet");
    d3dc:	2301      	movs	r3, #1
    d3de:	f04f 0100 	mov.w	r1, #0
    d3e2:	4a4c      	ldr	r2, [pc, #304]	; (d514 <handle_at_tcp_conn+0x14c>)
    d3e4:	f363 0107 	bfi	r1, r3, #0, #8
    d3e8:	4b4b      	ldr	r3, [pc, #300]	; (d518 <handle_at_tcp_conn+0x150>)
    d3ea:	484c      	ldr	r0, [pc, #304]	; (d51c <handle_at_tcp_conn+0x154>)
    d3ec:	1a9b      	subs	r3, r3, r2
    d3ee:	08db      	lsrs	r3, r3, #3
    d3f0:	f363 118f 	bfi	r1, r3, #6, #10
    d3f4:	f00f fb95 	bl	1cb22 <log_0>
			return -EINVAL;
    d3f8:	f06f 0415 	mvn.w	r4, #21
    d3fc:	e045      	b.n	d48a <handle_at_tcp_conn+0xc2>
	switch (cmd_type) {
    d3fe:	2801      	cmp	r0, #1
    d400:	d009      	beq.n	d416 <handle_at_tcp_conn+0x4e>
    d402:	2802      	cmp	r0, #2
    d404:	d1f8      	bne.n	d3f8 <handle_at_tcp_conn+0x30>
		if (client.connected) {
    d406:	795c      	ldrb	r4, [r3, #5]
    d408:	689a      	ldr	r2, [r3, #8]
    d40a:	2c00      	cmp	r4, #0
    d40c:	d076      	beq.n	d4fc <handle_at_tcp_conn+0x134>
			client.callback("+XTCPCONN: 1\r\n");
    d40e:	4844      	ldr	r0, [pc, #272]	; (d520 <handle_at_tcp_conn+0x158>)
    d410:	4790      	blx	r2
		err = 0;
    d412:	2400      	movs	r4, #0
    d414:	e039      	b.n	d48a <handle_at_tcp_conn+0xc2>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d416:	4843      	ldr	r0, [pc, #268]	; (d524 <handle_at_tcp_conn+0x15c>)
    d418:	f011 fa0d 	bl	1e836 <at_params_valid_count_get>
    d41c:	2802      	cmp	r0, #2
    d41e:	d9eb      	bls.n	d3f8 <handle_at_tcp_conn+0x30>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d420:	4621      	mov	r1, r4
    d422:	ab01      	add	r3, sp, #4
    d424:	aa02      	add	r2, sp, #8
    d426:	483f      	ldr	r0, [pc, #252]	; (d524 <handle_at_tcp_conn+0x15c>)
    d428:	f011 f9e2 	bl	1e7f0 <at_params_string_get>
		if (err < 0) {
    d42c:	1e04      	subs	r4, r0, #0
    d42e:	db2c      	blt.n	d48a <handle_at_tcp_conn+0xc2>
		url[size] = '\0';
    d430:	2500      	movs	r5, #0
    d432:	9b01      	ldr	r3, [sp, #4]
    d434:	aa22      	add	r2, sp, #136	; 0x88
    d436:	4413      	add	r3, r2
		err = at_params_short_get(&m_param_list, 2, &port);
    d438:	2102      	movs	r1, #2
    d43a:	f10d 0202 	add.w	r2, sp, #2
    d43e:	4839      	ldr	r0, [pc, #228]	; (d524 <handle_at_tcp_conn+0x15c>)
		url[size] = '\0';
    d440:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    d444:	f011 f9c2 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d448:	1e04      	subs	r4, r0, #0
    d44a:	db1e      	blt.n	d48a <handle_at_tcp_conn+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
    d44c:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    d44e:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    d452:	f010 f8a1 	bl	1d598 <strlen>
	for (index = 0; index < length; index++) {
    d456:	462b      	mov	r3, r5
    d458:	a902      	add	r1, sp, #8
    d45a:	b2c0      	uxtb	r0, r0
    d45c:	4283      	cmp	r3, r0
    d45e:	db17      	blt.n	d490 <handle_at_tcp_conn+0xc8>
		ret = parse_host_by_ipv4(url, port);
    d460:	4621      	mov	r1, r4
    d462:	a802      	add	r0, sp, #8
    d464:	f7ff ff9e 	bl	d3a4 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d468:	4604      	mov	r4, r0
	if (ret) {
    d46a:	b1d4      	cbz	r4, d4a2 <handle_at_tcp_conn+0xda>
		LOG_ERR("Parse failed: %d", ret);
    d46c:	2301      	movs	r3, #1
    d46e:	f04f 0200 	mov.w	r2, #0
    d472:	4928      	ldr	r1, [pc, #160]	; (d514 <handle_at_tcp_conn+0x14c>)
    d474:	f363 0207 	bfi	r2, r3, #0, #8
    d478:	4b27      	ldr	r3, [pc, #156]	; (d518 <handle_at_tcp_conn+0x150>)
    d47a:	482b      	ldr	r0, [pc, #172]	; (d528 <handle_at_tcp_conn+0x160>)
    d47c:	1a5b      	subs	r3, r3, r1
    d47e:	08db      	lsrs	r3, r3, #3
    d480:	f363 128f 	bfi	r2, r3, #6, #10
    d484:	4621      	mov	r1, r4
    d486:	f00f fb59 	bl	1cb3c <log_1>
}
    d48a:	4620      	mov	r0, r4
    d48c:	b022      	add	sp, #136	; 0x88
    d48e:	bd70      	pop	{r4, r5, r6, pc}
		char ch = *(address + index);
    d490:	f811 2b01 	ldrb.w	r2, [r1], #1
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d494:	2a2e      	cmp	r2, #46	; 0x2e
    d496:	d002      	beq.n	d49e <handle_at_tcp_conn+0xd6>
    d498:	3a30      	subs	r2, #48	; 0x30
    d49a:	2a09      	cmp	r2, #9
    d49c:	d831      	bhi.n	d502 <handle_at_tcp_conn+0x13a>
	for (index = 0; index < length; index++) {
    d49e:	3301      	adds	r3, #1
    d4a0:	e7dc      	b.n	d45c <handle_at_tcp_conn+0x94>
	return socket_ops->connect(sock, addr, addrlen);
    d4a2:	4b22      	ldr	r3, [pc, #136]	; (d52c <handle_at_tcp_conn+0x164>)
    d4a4:	2208      	movs	r2, #8
    d4a6:	681b      	ldr	r3, [r3, #0]
    d4a8:	4921      	ldr	r1, [pc, #132]	; (d530 <handle_at_tcp_conn+0x168>)
    d4aa:	695b      	ldr	r3, [r3, #20]
    d4ac:	6830      	ldr	r0, [r6, #0]
    d4ae:	4798      	blx	r3
	if (ret < 0) {
    d4b0:	2800      	cmp	r0, #0
    d4b2:	da1d      	bge.n	d4f0 <handle_at_tcp_conn+0x128>
		LOG_ERR("connect() failed: %d", -errno);
    d4b4:	2301      	movs	r3, #1
    d4b6:	f04f 0400 	mov.w	r4, #0
    d4ba:	4a16      	ldr	r2, [pc, #88]	; (d514 <handle_at_tcp_conn+0x14c>)
    d4bc:	f363 0407 	bfi	r4, r3, #0, #8
    d4c0:	4b15      	ldr	r3, [pc, #84]	; (d518 <handle_at_tcp_conn+0x150>)
    d4c2:	1a9b      	subs	r3, r3, r2
    d4c4:	08db      	lsrs	r3, r3, #3
    d4c6:	f363 148f 	bfi	r4, r3, #6, #10
    d4ca:	f00e ff90 	bl	1c3ee <z_errno>
    d4ce:	6801      	ldr	r1, [r0, #0]
    d4d0:	4622      	mov	r2, r4
    d4d2:	4249      	negs	r1, r1
    d4d4:	4817      	ldr	r0, [pc, #92]	; (d534 <handle_at_tcp_conn+0x16c>)
    d4d6:	f00f fb31 	bl	1cb3c <log_1>
		do_socket_close(-errno);
    d4da:	f00e ff88 	bl	1c3ee <z_errno>
    d4de:	6800      	ldr	r0, [r0, #0]
    d4e0:	4240      	negs	r0, r0
    d4e2:	f7ff fd01 	bl	cee8 <do_socket_close>
		return -errno;
    d4e6:	f00e ff82 	bl	1c3ee <z_errno>
    d4ea:	6804      	ldr	r4, [r0, #0]
    d4ec:	4264      	negs	r4, r4
    d4ee:	e7cc      	b.n	d48a <handle_at_tcp_conn+0xc2>
	client.connected = true;
    d4f0:	2301      	movs	r3, #1
	client.callback("#XTCPCONN: 1\r\n");
    d4f2:	4811      	ldr	r0, [pc, #68]	; (d538 <handle_at_tcp_conn+0x170>)
	client.connected = true;
    d4f4:	7173      	strb	r3, [r6, #5]
	client.callback("#XTCPCONN: 1\r\n");
    d4f6:	68b3      	ldr	r3, [r6, #8]
    d4f8:	4798      	blx	r3
	return 0;
    d4fa:	e7c6      	b.n	d48a <handle_at_tcp_conn+0xc2>
			client.callback("+XTCPCONN: 0\r\n");
    d4fc:	480f      	ldr	r0, [pc, #60]	; (d53c <handle_at_tcp_conn+0x174>)
    d4fe:	4790      	blx	r2
    d500:	e7c3      	b.n	d48a <handle_at_tcp_conn+0xc2>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d502:	2201      	movs	r2, #1
    d504:	4621      	mov	r1, r4
    d506:	a802      	add	r0, sp, #8
    d508:	f7ff fef0 	bl	d2ec <parse_host_by_name>
    d50c:	e7ac      	b.n	d468 <handle_at_tcp_conn+0xa0>
    d50e:	bf00      	nop
    d510:	20020130 	.word	0x20020130
    d514:	0001f328 	.word	0x0001f328
    d518:	0001f3a0 	.word	0x0001f3a0
    d51c:	0001fcc7 	.word	0x0001fcc7
    d520:	0001fd64 	.word	0x0001fd64
    d524:	20020110 	.word	0x20020110
    d528:	0001fd2f 	.word	0x0001fd2f
    d52c:	20020344 	.word	0x20020344
    d530:	20024e2c 	.word	0x20024e2c
    d534:	0001fd40 	.word	0x0001fd40
    d538:	0001fd55 	.word	0x0001fd55
    d53c:	0001fd73 	.word	0x0001fd73

0000d540 <do_tcp_receive>:
	struct timeval tmo = {
    d540:	2300      	movs	r3, #0
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    d542:	2208      	movs	r2, #8
{
    d544:	b5f0      	push	{r4, r5, r6, r7, lr}
    d546:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	struct timeval tmo = {
    d54a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    d54e:	4b3f      	ldr	r3, [pc, #252]	; (d64c <do_tcp_receive+0x10c>)
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    d550:	4d3f      	ldr	r5, [pc, #252]	; (d650 <do_tcp_receive+0x110>)
    d552:	681b      	ldr	r3, [r3, #0]
    d554:	9200      	str	r2, [sp, #0]
    d556:	69dc      	ldr	r4, [r3, #28]
{
    d558:	4607      	mov	r7, r0
    d55a:	eb0d 0302 	add.w	r3, sp, r2
    d55e:	2101      	movs	r1, #1
    d560:	2214      	movs	r2, #20
    d562:	6828      	ldr	r0, [r5, #0]
    d564:	47a0      	blx	r4
	if (ret < 0) {
    d566:	1e04      	subs	r4, r0, #0
    d568:	da1c      	bge.n	d5a4 <do_tcp_receive+0x64>
		do_socket_close(-errno);
    d56a:	f00e ff40 	bl	1c3ee <z_errno>
    d56e:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    d570:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    d574:	4240      	negs	r0, r0
    d576:	f7ff fcb7 	bl	cee8 <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    d57a:	2301      	movs	r3, #1
    d57c:	4a35      	ldr	r2, [pc, #212]	; (d654 <do_tcp_receive+0x114>)
    d57e:	f363 0507 	bfi	r5, r3, #0, #8
    d582:	4b35      	ldr	r3, [pc, #212]	; (d658 <do_tcp_receive+0x118>)
    d584:	1a9b      	subs	r3, r3, r2
    d586:	08db      	lsrs	r3, r3, #3
    d588:	f363 158f 	bfi	r5, r3, #6, #10
    d58c:	f00e ff2f 	bl	1c3ee <z_errno>
    d590:	6801      	ldr	r1, [r0, #0]
    d592:	462a      	mov	r2, r5
    d594:	4249      	negs	r1, r1
    d596:	4831      	ldr	r0, [pc, #196]	; (d65c <do_tcp_receive+0x11c>)
    d598:	f00f fad0 	bl	1cb3c <log_1>
}
    d59c:	4620      	mov	r0, r4
    d59e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length > NET_IPV4_MTU) {
    d5a4:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
    d5a8:	ae04      	add	r6, sp, #16
		ret = recv(client.sock, data, NET_IPV4_MTU, 0);
    d5aa:	bf8c      	ite	hi
    d5ac:	f44f 7210 	movhi.w	r2, #576	; 0x240
		ret = recv(client.sock, data, length, 0);
    d5b0:	463a      	movls	r2, r7
    d5b2:	6828      	ldr	r0, [r5, #0]
    d5b4:	4631      	mov	r1, r6
    d5b6:	f7ff fe23 	bl	d200 <recv.constprop.12>
	if (ret < 0) {
    d5ba:	2800      	cmp	r0, #0
		ret = recv(client.sock, data, length, 0);
    d5bc:	4604      	mov	r4, r0
	if (ret < 0) {
    d5be:	da1d      	bge.n	d5fc <do_tcp_receive+0xbc>
		LOG_WRN("recv() error: %d", -errno);
    d5c0:	2302      	movs	r3, #2
    d5c2:	f04f 0400 	mov.w	r4, #0
    d5c6:	4a23      	ldr	r2, [pc, #140]	; (d654 <do_tcp_receive+0x114>)
    d5c8:	f363 0407 	bfi	r4, r3, #0, #8
    d5cc:	4b22      	ldr	r3, [pc, #136]	; (d658 <do_tcp_receive+0x118>)
    d5ce:	1a9b      	subs	r3, r3, r2
    d5d0:	08db      	lsrs	r3, r3, #3
    d5d2:	f363 148f 	bfi	r4, r3, #6, #10
    d5d6:	f00e ff0a 	bl	1c3ee <z_errno>
    d5da:	6801      	ldr	r1, [r0, #0]
    d5dc:	4622      	mov	r2, r4
    d5de:	4249      	negs	r1, r1
    d5e0:	481f      	ldr	r0, [pc, #124]	; (d660 <do_tcp_receive+0x120>)
    d5e2:	f00f faab 	bl	1cb3c <log_1>
		do_socket_close(-errno);
    d5e6:	f00e ff02 	bl	1c3ee <z_errno>
    d5ea:	6800      	ldr	r0, [r0, #0]
    d5ec:	4240      	negs	r0, r0
    d5ee:	f7ff fc7b 	bl	cee8 <do_socket_close>
		ret = -errno;
    d5f2:	f00e fefc 	bl	1c3ee <z_errno>
    d5f6:	6804      	ldr	r4, [r0, #0]
    d5f8:	4264      	negs	r4, r4
    d5fa:	e7cf      	b.n	d59c <do_tcp_receive+0x5c>
	} else if (ret == 0) {
    d5fc:	d111      	bne.n	d622 <do_tcp_receive+0xe2>
		LOG_WRN("recv() return 0");
    d5fe:	2302      	movs	r3, #2
    d600:	f04f 0100 	mov.w	r1, #0
    d604:	4a13      	ldr	r2, [pc, #76]	; (d654 <do_tcp_receive+0x114>)
    d606:	f363 0107 	bfi	r1, r3, #0, #8
    d60a:	4b13      	ldr	r3, [pc, #76]	; (d658 <do_tcp_receive+0x118>)
    d60c:	4815      	ldr	r0, [pc, #84]	; (d664 <do_tcp_receive+0x124>)
    d60e:	1a9b      	subs	r3, r3, r2
    d610:	08db      	lsrs	r3, r3, #3
    d612:	f363 118f 	bfi	r1, r3, #6, #10
    d616:	f00f fa84 	bl	1cb22 <log_0>
		do_socket_close(0);
    d61a:	4620      	mov	r0, r4
    d61c:	f7ff fc64 	bl	cee8 <do_socket_close>
    d620:	e7bc      	b.n	d59c <do_tcp_receive+0x5c>
		data[ret] = '\0';
    d622:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    d624:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d626:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    d628:	480f      	ldr	r0, [pc, #60]	; (d668 <do_tcp_receive+0x128>)
    d62a:	4798      	blx	r3
		client.callback(data);
    d62c:	68ab      	ldr	r3, [r5, #8]
    d62e:	4630      	mov	r0, r6
    d630:	4798      	blx	r3
		client.callback("\r\n");
    d632:	68ab      	ldr	r3, [r5, #8]
    d634:	480d      	ldr	r0, [pc, #52]	; (d66c <do_tcp_receive+0x12c>)
    d636:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    d638:	4622      	mov	r2, r4
    d63a:	490d      	ldr	r1, [pc, #52]	; (d670 <do_tcp_receive+0x130>)
    d63c:	480d      	ldr	r0, [pc, #52]	; (d674 <do_tcp_receive+0x134>)
    d63e:	f003 fc67 	bl	10f10 <sprintf>
		client.callback(buf);
    d642:	68ab      	ldr	r3, [r5, #8]
    d644:	480b      	ldr	r0, [pc, #44]	; (d674 <do_tcp_receive+0x134>)
    d646:	4798      	blx	r3
		ret = 0;
    d648:	463c      	mov	r4, r7
    d64a:	e7a7      	b.n	d59c <do_tcp_receive+0x5c>
    d64c:	20020344 	.word	0x20020344
    d650:	20020130 	.word	0x20020130
    d654:	0001f328 	.word	0x0001f328
    d658:	0001f3a0 	.word	0x0001f3a0
    d65c:	0001fc12 	.word	0x0001fc12
    d660:	0001fc29 	.word	0x0001fc29
    d664:	0001fc3a 	.word	0x0001fc3a
    d668:	0001fc4a 	.word	0x0001fc4a
    d66c:	0001fd7f 	.word	0x0001fd7f
    d670:	0001fc56 	.word	0x0001fc56
    d674:	20026368 	.word	0x20026368

0000d678 <handle_at_tcp_recv>:
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t length, time;

	if (!client.connected) {
    d678:	4b19      	ldr	r3, [pc, #100]	; (d6e0 <handle_at_tcp_recv+0x68>)
{
    d67a:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    d67c:	795b      	ldrb	r3, [r3, #5]
{
    d67e:	4604      	mov	r4, r0
	if (!client.connected) {
    d680:	b98b      	cbnz	r3, d6a6 <handle_at_tcp_recv+0x2e>
		LOG_ERR("TCP not connected yet");
    d682:	2301      	movs	r3, #1
    d684:	f04f 0100 	mov.w	r1, #0
    d688:	4a16      	ldr	r2, [pc, #88]	; (d6e4 <handle_at_tcp_recv+0x6c>)
    d68a:	f363 0107 	bfi	r1, r3, #0, #8
    d68e:	4b16      	ldr	r3, [pc, #88]	; (d6e8 <handle_at_tcp_recv+0x70>)
    d690:	4816      	ldr	r0, [pc, #88]	; (d6ec <handle_at_tcp_recv+0x74>)
    d692:	1a9b      	subs	r3, r3, r2
    d694:	08db      	lsrs	r3, r3, #3
    d696:	f363 118f 	bfi	r1, r3, #6, #10
    d69a:	f00f fa42 	bl	1cb22 <log_0>
	int err = -EINVAL;
    d69e:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d6a2:	b002      	add	sp, #8
    d6a4:	bd10      	pop	{r4, pc}
	switch (cmd_type) {
    d6a6:	2801      	cmp	r0, #1
    d6a8:	d1f9      	bne.n	d69e <handle_at_tcp_recv+0x26>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d6aa:	4811      	ldr	r0, [pc, #68]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ac:	f011 f8c3 	bl	1e836 <at_params_valid_count_get>
    d6b0:	2802      	cmp	r0, #2
    d6b2:	d9f4      	bls.n	d69e <handle_at_tcp_recv+0x26>
		err = at_params_short_get(&m_param_list, 1, &length);
    d6b4:	aa01      	add	r2, sp, #4
    d6b6:	4621      	mov	r1, r4
    d6b8:	480d      	ldr	r0, [pc, #52]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ba:	f011 f887 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d6be:	2800      	cmp	r0, #0
    d6c0:	dbef      	blt.n	d6a2 <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 2, &time);
    d6c2:	f10d 0206 	add.w	r2, sp, #6
    d6c6:	2102      	movs	r1, #2
    d6c8:	4809      	ldr	r0, [pc, #36]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ca:	f011 f87f 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d6ce:	2800      	cmp	r0, #0
    d6d0:	dbe7      	blt.n	d6a2 <handle_at_tcp_recv+0x2a>
		err = do_tcp_receive(length, time);
    d6d2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    d6d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d6da:	f7ff ff31 	bl	d540 <do_tcp_receive>
		break;
    d6de:	e7e0      	b.n	d6a2 <handle_at_tcp_recv+0x2a>
    d6e0:	20020130 	.word	0x20020130
    d6e4:	0001f328 	.word	0x0001f328
    d6e8:	0001f3a0 	.word	0x0001f3a0
    d6ec:	0001fd82 	.word	0x0001fd82
    d6f0:	20020110 	.word	0x20020110

0000d6f4 <do_udp_init>:
{
    d6f4:	b538      	push	{r3, r4, r5, lr}
    d6f6:	4604      	mov	r4, r0
    d6f8:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    d6fa:	f00f ff4d 	bl	1d598 <strlen>
	for (index = 0; index < length; index++) {
    d6fe:	2300      	movs	r3, #0
    d700:	b2c0      	uxtb	r0, r0
    d702:	4283      	cmp	r3, r0
    d704:	db16      	blt.n	d734 <do_udp_init+0x40>
		ret = parse_host_by_ipv4(url, port);
    d706:	4629      	mov	r1, r5
    d708:	4620      	mov	r0, r4
    d70a:	f7ff fe4b 	bl	d3a4 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d70e:	4604      	mov	r4, r0
	if (ret) {
    d710:	b174      	cbz	r4, d730 <do_udp_init+0x3c>
		LOG_ERR("Parse failed: %d", ret);
    d712:	2301      	movs	r3, #1
    d714:	f04f 0200 	mov.w	r2, #0
    d718:	490d      	ldr	r1, [pc, #52]	; (d750 <do_udp_init+0x5c>)
    d71a:	f363 0207 	bfi	r2, r3, #0, #8
    d71e:	4b0d      	ldr	r3, [pc, #52]	; (d754 <do_udp_init+0x60>)
    d720:	480d      	ldr	r0, [pc, #52]	; (d758 <do_udp_init+0x64>)
    d722:	1a5b      	subs	r3, r3, r1
    d724:	08db      	lsrs	r3, r3, #3
    d726:	f363 128f 	bfi	r2, r3, #6, #10
    d72a:	4621      	mov	r1, r4
    d72c:	f00f fa06 	bl	1cb3c <log_1>
}
    d730:	4620      	mov	r0, r4
    d732:	bd38      	pop	{r3, r4, r5, pc}
		char ch = *(address + index);
    d734:	5ce2      	ldrb	r2, [r4, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d736:	2a2e      	cmp	r2, #46	; 0x2e
    d738:	d002      	beq.n	d740 <do_udp_init+0x4c>
    d73a:	3a30      	subs	r2, #48	; 0x30
    d73c:	2a09      	cmp	r2, #9
    d73e:	d801      	bhi.n	d744 <do_udp_init+0x50>
	for (index = 0; index < length; index++) {
    d740:	3301      	adds	r3, #1
    d742:	e7de      	b.n	d702 <do_udp_init+0xe>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d744:	2202      	movs	r2, #2
    d746:	4629      	mov	r1, r5
    d748:	4620      	mov	r0, r4
    d74a:	f7ff fdcf 	bl	d2ec <parse_host_by_name>
    d74e:	e7de      	b.n	d70e <do_udp_init+0x1a>
    d750:	0001f328 	.word	0x0001f328
    d754:	0001f3a0 	.word	0x0001f3a0
    d758:	0001fd2f 	.word	0x0001fd2f

0000d75c <handle_at_udp_recvfrom>:
 */
static int handle_at_udp_recvfrom(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    d75c:	2380      	movs	r3, #128	; 0x80
{
    d75e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d762:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	int size = TCPIP_MAX_URL;
    d766:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    d768:	4b69      	ldr	r3, [pc, #420]	; (d910 <handle_at_udp_recvfrom+0x1b4>)
{
    d76a:	4680      	mov	r8, r0
	if (client.sock < 0) {
    d76c:	681a      	ldr	r2, [r3, #0]
    d76e:	461d      	mov	r5, r3
    d770:	2a00      	cmp	r2, #0
    d772:	da14      	bge.n	d79e <handle_at_udp_recvfrom+0x42>
		LOG_ERR("Socket not opened yet");
    d774:	2301      	movs	r3, #1
    d776:	f04f 0100 	mov.w	r1, #0
    d77a:	4a66      	ldr	r2, [pc, #408]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d77c:	f363 0107 	bfi	r1, r3, #0, #8
    d780:	4b65      	ldr	r3, [pc, #404]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d782:	4866      	ldr	r0, [pc, #408]	; (d91c <handle_at_udp_recvfrom+0x1c0>)
    d784:	1a9b      	subs	r3, r3, r2
    d786:	08db      	lsrs	r3, r3, #3
    d788:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    d78c:	f00f f9c9 	bl	1cb22 <log_0>
		return err;
    d790:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    d794:	4620      	mov	r0, r4
    d796:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    d79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d79e:	791b      	ldrb	r3, [r3, #4]
    d7a0:	2b11      	cmp	r3, #17
    d7a2:	d00c      	beq.n	d7be <handle_at_udp_recvfrom+0x62>
		LOG_ERR("Invalid socket");
    d7a4:	2301      	movs	r3, #1
    d7a6:	f04f 0100 	mov.w	r1, #0
    d7aa:	4a5a      	ldr	r2, [pc, #360]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d7ac:	f363 0107 	bfi	r1, r3, #0, #8
    d7b0:	4b59      	ldr	r3, [pc, #356]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d7b2:	485b      	ldr	r0, [pc, #364]	; (d920 <handle_at_udp_recvfrom+0x1c4>)
    d7b4:	1a9b      	subs	r3, r3, r2
    d7b6:	08db      	lsrs	r3, r3, #3
    d7b8:	f363 118f 	bfi	r1, r3, #6, #10
    d7bc:	e7e6      	b.n	d78c <handle_at_udp_recvfrom+0x30>
	switch (cmd_type) {
    d7be:	2801      	cmp	r0, #1
    d7c0:	d1e6      	bne.n	d790 <handle_at_udp_recvfrom+0x34>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    d7c2:	4858      	ldr	r0, [pc, #352]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7c4:	f011 f837 	bl	1e836 <at_params_valid_count_get>
    d7c8:	2804      	cmp	r0, #4
    d7ca:	d9e1      	bls.n	d790 <handle_at_udp_recvfrom+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d7cc:	af08      	add	r7, sp, #32
    d7ce:	ab04      	add	r3, sp, #16
    d7d0:	463a      	mov	r2, r7
    d7d2:	4641      	mov	r1, r8
    d7d4:	4853      	ldr	r0, [pc, #332]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7d6:	f011 f80b 	bl	1e7f0 <at_params_string_get>
		if (err < 0) {
    d7da:	1e04      	subs	r4, r0, #0
    d7dc:	dbda      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		url[size] = '\0';
    d7de:	f04f 0a00 	mov.w	sl, #0
    d7e2:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    d7e4:	f10d 020a 	add.w	r2, sp, #10
    d7e8:	2102      	movs	r1, #2
    d7ea:	484e      	ldr	r0, [pc, #312]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
		url[size] = '\0';
    d7ec:	f807 a003 	strb.w	sl, [r7, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d7f0:	f010 ffec 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d7f4:	1e04      	subs	r4, r0, #0
    d7f6:	dbcd      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 3, &length);
    d7f8:	aa03      	add	r2, sp, #12
    d7fa:	2103      	movs	r1, #3
    d7fc:	4849      	ldr	r0, [pc, #292]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7fe:	f010 ffe5 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d802:	1e04      	subs	r4, r0, #0
    d804:	dbc6      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 4, &time);
    d806:	f10d 020e 	add.w	r2, sp, #14
    d80a:	2104      	movs	r1, #4
    d80c:	4845      	ldr	r0, [pc, #276]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d80e:	f010 ffdd 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d812:	1e04      	subs	r4, r0, #0
    d814:	dbbe      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
	int sockaddr_len = sizeof(struct sockaddr);
    d816:	2218      	movs	r2, #24
		err = do_udp_recvfrom(url, port, length, time);
    d818:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	int sockaddr_len = sizeof(struct sockaddr);
    d81c:	ae05      	add	r6, sp, #20
	ret = do_udp_init(url, port);
    d81e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    d822:	4638      	mov	r0, r7
		err = do_udp_recvfrom(url, port, length, time);
    d824:	f8bd 900c 	ldrh.w	r9, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    d828:	6032      	str	r2, [r6, #0]
	struct timeval tmo = {
    d82a:	e9cd 3a06 	strd	r3, sl, [sp, #24]
	ret = do_udp_init(url, port);
    d82e:	f7ff ff61 	bl	d6f4 <do_udp_init>
	if (ret < 0) {
    d832:	1e04      	subs	r4, r0, #0
    d834:	dbae      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
    d836:	2208      	movs	r2, #8
    d838:	4f3b      	ldr	r7, [pc, #236]	; (d928 <handle_at_udp_recvfrom+0x1cc>)
    d83a:	4641      	mov	r1, r8
    d83c:	683b      	ldr	r3, [r7, #0]
    d83e:	9200      	str	r2, [sp, #0]
    d840:	69dc      	ldr	r4, [r3, #28]
    d842:	2214      	movs	r2, #20
    d844:	ab06      	add	r3, sp, #24
    d846:	6828      	ldr	r0, [r5, #0]
    d848:	47a0      	blx	r4
	if (ret < 0) {
    d84a:	1e04      	subs	r4, r0, #0
    d84c:	da19      	bge.n	d882 <handle_at_udp_recvfrom+0x126>
		LOG_ERR("setsockopt() error: %d", -errno);
    d84e:	2301      	movs	r3, #1
    d850:	f04f 0500 	mov.w	r5, #0
    d854:	4a2f      	ldr	r2, [pc, #188]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d856:	f363 0507 	bfi	r5, r3, #0, #8
    d85a:	4b2f      	ldr	r3, [pc, #188]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d85c:	1a9b      	subs	r3, r3, r2
    d85e:	08db      	lsrs	r3, r3, #3
    d860:	f363 158f 	bfi	r5, r3, #6, #10
    d864:	f00e fdc3 	bl	1c3ee <z_errno>
    d868:	6801      	ldr	r1, [r0, #0]
    d86a:	462a      	mov	r2, r5
    d86c:	4249      	negs	r1, r1
    d86e:	482f      	ldr	r0, [pc, #188]	; (d92c <handle_at_udp_recvfrom+0x1d0>)
    d870:	f00f f964 	bl	1cb3c <log_1>
		do_socket_close(-errno);
    d874:	f00e fdbb 	bl	1c3ee <z_errno>
    d878:	6800      	ldr	r0, [r0, #0]
    d87a:	4240      	negs	r0, r0
    d87c:	f7ff fb34 	bl	cee8 <do_socket_close>
		return ret;
    d880:	e788      	b.n	d794 <handle_at_udp_recvfrom+0x38>
	if (length > NET_IPV4_MTU) {
    d882:	683b      	ldr	r3, [r7, #0]
    d884:	f5b9 7f10 	cmp.w	r9, #576	; 0x240
    d888:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d88a:	4b29      	ldr	r3, [pc, #164]	; (d930 <handle_at_udp_recvfrom+0x1d4>)
    d88c:	af28      	add	r7, sp, #160	; 0xa0
    d88e:	6828      	ldr	r0, [r5, #0]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    d890:	bf88      	it	hi
    d892:	f44f 7210 	movhi.w	r2, #576	; 0x240
    d896:	9601      	str	r6, [sp, #4]
    d898:	9300      	str	r3, [sp, #0]
    d89a:	bf98      	it	ls
    d89c:	fa0f f289 	sxthls.w	r2, r9
    d8a0:	2300      	movs	r3, #0
    d8a2:	4639      	mov	r1, r7
    d8a4:	47a0      	blx	r4
	if (ret < 0) {
    d8a6:	2800      	cmp	r0, #0
    d8a8:	4606      	mov	r6, r0
    d8aa:	da1d      	bge.n	d8e8 <handle_at_udp_recvfrom+0x18c>
		LOG_WRN("recvfrom() error: %d", -errno);
    d8ac:	2302      	movs	r3, #2
    d8ae:	f04f 0400 	mov.w	r4, #0
    d8b2:	4a18      	ldr	r2, [pc, #96]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d8b4:	f363 0407 	bfi	r4, r3, #0, #8
    d8b8:	4b17      	ldr	r3, [pc, #92]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d8ba:	1a9b      	subs	r3, r3, r2
    d8bc:	08db      	lsrs	r3, r3, #3
    d8be:	f363 148f 	bfi	r4, r3, #6, #10
    d8c2:	f00e fd94 	bl	1c3ee <z_errno>
    d8c6:	6801      	ldr	r1, [r0, #0]
    d8c8:	4622      	mov	r2, r4
    d8ca:	4249      	negs	r1, r1
    d8cc:	4819      	ldr	r0, [pc, #100]	; (d934 <handle_at_udp_recvfrom+0x1d8>)
    d8ce:	f00f f935 	bl	1cb3c <log_1>
		do_socket_close(-errno);
    d8d2:	f00e fd8c 	bl	1c3ee <z_errno>
    d8d6:	6800      	ldr	r0, [r0, #0]
    d8d8:	4240      	negs	r0, r0
    d8da:	f7ff fb05 	bl	cee8 <do_socket_close>
		ret = -errno;
    d8de:	f00e fd86 	bl	1c3ee <z_errno>
    d8e2:	6804      	ldr	r4, [r0, #0]
    d8e4:	4264      	negs	r4, r4
    d8e6:	e755      	b.n	d794 <handle_at_udp_recvfrom+0x38>
		data[ret] = '\0';
    d8e8:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    d8ea:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d8ec:	543c      	strb	r4, [r7, r0]
		client.callback("#XUDPRECV: ");
    d8ee:	4812      	ldr	r0, [pc, #72]	; (d938 <handle_at_udp_recvfrom+0x1dc>)
    d8f0:	4798      	blx	r3
		client.callback(data);
    d8f2:	68ab      	ldr	r3, [r5, #8]
    d8f4:	4638      	mov	r0, r7
    d8f6:	4798      	blx	r3
		client.callback("\r\n");
    d8f8:	68ab      	ldr	r3, [r5, #8]
    d8fa:	4810      	ldr	r0, [pc, #64]	; (d93c <handle_at_udp_recvfrom+0x1e0>)
    d8fc:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    d8fe:	4632      	mov	r2, r6
    d900:	490f      	ldr	r1, [pc, #60]	; (d940 <handle_at_udp_recvfrom+0x1e4>)
    d902:	4810      	ldr	r0, [pc, #64]	; (d944 <handle_at_udp_recvfrom+0x1e8>)
    d904:	f003 fb04 	bl	10f10 <sprintf>
		client.callback(buf);
    d908:	68ab      	ldr	r3, [r5, #8]
    d90a:	480e      	ldr	r0, [pc, #56]	; (d944 <handle_at_udp_recvfrom+0x1e8>)
    d90c:	4798      	blx	r3
		break;
    d90e:	e741      	b.n	d794 <handle_at_udp_recvfrom+0x38>
    d910:	20020130 	.word	0x20020130
    d914:	0001f328 	.word	0x0001f328
    d918:	0001f3a0 	.word	0x0001f3a0
    d91c:	0001fcc7 	.word	0x0001fcc7
    d920:	0001fdba 	.word	0x0001fdba
    d924:	20020110 	.word	0x20020110
    d928:	20020344 	.word	0x20020344
    d92c:	0001fc12 	.word	0x0001fc12
    d930:	20024e2c 	.word	0x20024e2c
    d934:	0001fdc9 	.word	0x0001fdc9
    d938:	0001fdde 	.word	0x0001fdde
    d93c:	0001fd7f 	.word	0x0001fd7f
    d940:	0001fdea 	.word	0x0001fdea
    d944:	20026368 	.word	0x20026368

0000d948 <handle_at_udp_sendto>:
{
    d948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (client.sock < 0) {
    d94c:	4b50      	ldr	r3, [pc, #320]	; (da90 <handle_at_udp_sendto+0x148>)
{
    d94e:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
	if (client.sock < 0) {
    d952:	681a      	ldr	r2, [r3, #0]
{
    d954:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d956:	2a00      	cmp	r2, #0
    d958:	461f      	mov	r7, r3
    d95a:	da13      	bge.n	d984 <handle_at_udp_sendto+0x3c>
		LOG_ERR("Socket not opened yet");
    d95c:	2301      	movs	r3, #1
    d95e:	f04f 0100 	mov.w	r1, #0
    d962:	4a4c      	ldr	r2, [pc, #304]	; (da94 <handle_at_udp_sendto+0x14c>)
    d964:	f363 0107 	bfi	r1, r3, #0, #8
    d968:	4b4b      	ldr	r3, [pc, #300]	; (da98 <handle_at_udp_sendto+0x150>)
    d96a:	484c      	ldr	r0, [pc, #304]	; (da9c <handle_at_udp_sendto+0x154>)
    d96c:	1a9b      	subs	r3, r3, r2
    d96e:	08db      	lsrs	r3, r3, #3
    d970:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Invalid socket");
    d974:	f00f f8d5 	bl	1cb22 <log_0>
	int err = -EINVAL;
    d978:	f06f 0015 	mvn.w	r0, #21
}
    d97c:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
    d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d984:	791b      	ldrb	r3, [r3, #4]
    d986:	2b11      	cmp	r3, #17
    d988:	d00c      	beq.n	d9a4 <handle_at_udp_sendto+0x5c>
		LOG_ERR("Invalid socket");
    d98a:	2301      	movs	r3, #1
    d98c:	f04f 0100 	mov.w	r1, #0
    d990:	4a40      	ldr	r2, [pc, #256]	; (da94 <handle_at_udp_sendto+0x14c>)
    d992:	f363 0107 	bfi	r1, r3, #0, #8
    d996:	4b40      	ldr	r3, [pc, #256]	; (da98 <handle_at_udp_sendto+0x150>)
    d998:	4841      	ldr	r0, [pc, #260]	; (daa0 <handle_at_udp_sendto+0x158>)
    d99a:	1a9b      	subs	r3, r3, r2
    d99c:	08db      	lsrs	r3, r3, #3
    d99e:	f363 118f 	bfi	r1, r3, #6, #10
    d9a2:	e7e7      	b.n	d974 <handle_at_udp_sendto+0x2c>
	switch (cmd_type) {
    d9a4:	2801      	cmp	r0, #1
    d9a6:	d1e7      	bne.n	d978 <handle_at_udp_sendto+0x30>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    d9a8:	483e      	ldr	r0, [pc, #248]	; (daa4 <handle_at_udp_sendto+0x15c>)
    d9aa:	f010 ff44 	bl	1e836 <at_params_valid_count_get>
    d9ae:	2803      	cmp	r0, #3
    d9b0:	d9e2      	bls.n	d978 <handle_at_udp_sendto+0x30>
		size = TCPIP_MAX_URL;
    d9b2:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d9b4:	ae04      	add	r6, sp, #16
		size = TCPIP_MAX_URL;
    d9b6:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d9b8:	4632      	mov	r2, r6
    d9ba:	ab03      	add	r3, sp, #12
    d9bc:	4621      	mov	r1, r4
    d9be:	4839      	ldr	r0, [pc, #228]	; (daa4 <handle_at_udp_sendto+0x15c>)
    d9c0:	f010 ff16 	bl	1e7f0 <at_params_string_get>
		if (err < 0) {
    d9c4:	2800      	cmp	r0, #0
    d9c6:	dbd9      	blt.n	d97c <handle_at_udp_sendto+0x34>
		url[size] = '\0';
    d9c8:	2400      	movs	r4, #0
    d9ca:	9b03      	ldr	r3, [sp, #12]
		err = at_params_short_get(&m_param_list, 2, &port);
    d9cc:	f10d 020a 	add.w	r2, sp, #10
    d9d0:	2102      	movs	r1, #2
    d9d2:	4834      	ldr	r0, [pc, #208]	; (daa4 <handle_at_udp_sendto+0x15c>)
		url[size] = '\0';
    d9d4:	54f4      	strb	r4, [r6, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d9d6:	f010 fef9 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    d9da:	2800      	cmp	r0, #0
    d9dc:	dbce      	blt.n	d97c <handle_at_udp_sendto+0x34>
		size = NET_IPV4_MTU;
    d9de:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    d9e2:	ad24      	add	r5, sp, #144	; 0x90
		size = NET_IPV4_MTU;
    d9e4:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    d9e6:	462a      	mov	r2, r5
    d9e8:	ab03      	add	r3, sp, #12
    d9ea:	2103      	movs	r1, #3
    d9ec:	482d      	ldr	r0, [pc, #180]	; (daa4 <handle_at_udp_sendto+0x15c>)
    d9ee:	f010 feff 	bl	1e7f0 <at_params_string_get>
		if (err < 0) {
    d9f2:	2800      	cmp	r0, #0
    d9f4:	dbc2      	blt.n	d97c <handle_at_udp_sendto+0x34>
		data[size] = '\0';
    d9f6:	9b03      	ldr	r3, [sp, #12]
	u32_t datalen = strlen(data);
    d9f8:	4628      	mov	r0, r5
		data[size] = '\0';
    d9fa:	54ec      	strb	r4, [r5, r3]
		err = do_udp_sendto(url, port, data);
    d9fc:	f8bd 900a 	ldrh.w	r9, [sp, #10]
	u32_t datalen = strlen(data);
    da00:	f00f fdca 	bl	1d598 <strlen>
	ret = do_udp_init(url, port);
    da04:	4649      	mov	r1, r9
	u32_t datalen = strlen(data);
    da06:	4680      	mov	r8, r0
	ret = do_udp_init(url, port);
    da08:	4630      	mov	r0, r6
    da0a:	f7ff fe73 	bl	d6f4 <do_udp_init>
	if (ret < 0) {
    da0e:	2800      	cmp	r0, #0
    da10:	dbb4      	blt.n	d97c <handle_at_udp_sendto+0x34>
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    da12:	f04f 0908 	mov.w	r9, #8
    da16:	4e24      	ldr	r6, [pc, #144]	; (daa8 <handle_at_udp_sendto+0x160>)
    da18:	f8df a09c 	ldr.w	sl, [pc, #156]	; dab8 <handle_at_udp_sendto+0x170>
	while (offset < datalen) {
    da1c:	45a0      	cmp	r8, r4
    da1e:	d809      	bhi.n	da34 <handle_at_udp_sendto+0xec>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    da20:	4622      	mov	r2, r4
    da22:	4922      	ldr	r1, [pc, #136]	; (daac <handle_at_udp_sendto+0x164>)
    da24:	4822      	ldr	r0, [pc, #136]	; (dab0 <handle_at_udp_sendto+0x168>)
    da26:	f003 fa73 	bl	10f10 <sprintf>
	client.callback(buf);
    da2a:	4821      	ldr	r0, [pc, #132]	; (dab0 <handle_at_udp_sendto+0x168>)
    da2c:	68bb      	ldr	r3, [r7, #8]
    da2e:	4798      	blx	r3
	return 0;
    da30:	2000      	movs	r0, #0
    da32:	e7a3      	b.n	d97c <handle_at_udp_sendto+0x34>
    da34:	6833      	ldr	r3, [r6, #0]
    da36:	e9cd a900 	strd	sl, r9, [sp]
    da3a:	eba8 0204 	sub.w	r2, r8, r4
    da3e:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
    da42:	1929      	adds	r1, r5, r4
    da44:	2300      	movs	r3, #0
    da46:	6838      	ldr	r0, [r7, #0]
    da48:	47d8      	blx	fp
		if (ret <= 0) {
    da4a:	2800      	cmp	r0, #0
    da4c:	dc1d      	bgt.n	da8a <handle_at_udp_sendto+0x142>
			LOG_ERR("sendto() failed: %d", -errno);
    da4e:	2301      	movs	r3, #1
    da50:	f04f 0400 	mov.w	r4, #0
    da54:	4a0f      	ldr	r2, [pc, #60]	; (da94 <handle_at_udp_sendto+0x14c>)
    da56:	f363 0407 	bfi	r4, r3, #0, #8
    da5a:	4b0f      	ldr	r3, [pc, #60]	; (da98 <handle_at_udp_sendto+0x150>)
    da5c:	1a9b      	subs	r3, r3, r2
    da5e:	08db      	lsrs	r3, r3, #3
    da60:	f363 148f 	bfi	r4, r3, #6, #10
    da64:	f00e fcc3 	bl	1c3ee <z_errno>
    da68:	6801      	ldr	r1, [r0, #0]
    da6a:	4622      	mov	r2, r4
    da6c:	4249      	negs	r1, r1
    da6e:	4811      	ldr	r0, [pc, #68]	; (dab4 <handle_at_udp_sendto+0x16c>)
    da70:	f00f f864 	bl	1cb3c <log_1>
			do_socket_close(-errno);
    da74:	f00e fcbb 	bl	1c3ee <z_errno>
    da78:	6800      	ldr	r0, [r0, #0]
    da7a:	4240      	negs	r0, r0
    da7c:	f7ff fa34 	bl	cee8 <do_socket_close>
			return -errno;
    da80:	f00e fcb5 	bl	1c3ee <z_errno>
    da84:	6800      	ldr	r0, [r0, #0]
    da86:	4240      	negs	r0, r0
    da88:	e778      	b.n	d97c <handle_at_udp_sendto+0x34>
		offset += ret;
    da8a:	4404      	add	r4, r0
    da8c:	e7c6      	b.n	da1c <handle_at_udp_sendto+0xd4>
    da8e:	bf00      	nop
    da90:	20020130 	.word	0x20020130
    da94:	0001f328 	.word	0x0001f328
    da98:	0001f3a0 	.word	0x0001f3a0
    da9c:	0001fcc7 	.word	0x0001fcc7
    daa0:	0001fdba 	.word	0x0001fdba
    daa4:	20020110 	.word	0x20020110
    daa8:	20020344 	.word	0x20020344
    daac:	0001fe0e 	.word	0x0001fe0e
    dab0:	20026368 	.word	0x20026368
    dab4:	0001fdfa 	.word	0x0001fdfa
    dab8:	20024e2c 	.word	0x20024e2c

0000dabc <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
    dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dac0:	4d20      	ldr	r5, [pc, #128]	; (db44 <slm_at_tcpip_parse+0x88>)
    dac2:	4606      	mov	r6, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    dac4:	2400      	movs	r4, #0
    dac6:	46a8      	mov	r8, r5
		u8_t cmd_len = strlen(m_tcpip_at_list[i].string);
    dac8:	686f      	ldr	r7, [r5, #4]
    daca:	4638      	mov	r0, r7
    dacc:	f00f fd64 	bl	1d598 <strlen>
    dad0:	2300      	movs	r3, #0
    dad2:	b2c0      	uxtb	r0, r0
    dad4:	4283      	cmp	r3, r0
    dad6:	db18      	blt.n	db0a <slm_at_tcpip_parse+0x4e>

		if (slm_at_cmd_cmp(at_cmd, m_tcpip_at_list[i].string,
			cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    dad8:	2100      	movs	r1, #0
    dada:	4a1b      	ldr	r2, [pc, #108]	; (db48 <slm_at_tcpip_parse+0x8c>)
    dadc:	4630      	mov	r0, r6
    dade:	f010 fd7b 	bl	1e5d8 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    dae2:	1e01      	subs	r1, r0, #0
    dae4:	da1c      	bge.n	db20 <slm_at_tcpip_parse+0x64>
				LOG_ERR("Failed to parse AT command %d", ret);
    dae6:	2301      	movs	r3, #1
    dae8:	f04f 0200 	mov.w	r2, #0
    daec:	4817      	ldr	r0, [pc, #92]	; (db4c <slm_at_tcpip_parse+0x90>)
    daee:	f363 0207 	bfi	r2, r3, #0, #8
    daf2:	4b17      	ldr	r3, [pc, #92]	; (db50 <slm_at_tcpip_parse+0x94>)
    daf4:	1a1b      	subs	r3, r3, r0
    daf6:	08db      	lsrs	r3, r3, #3
    daf8:	4816      	ldr	r0, [pc, #88]	; (db54 <slm_at_tcpip_parse+0x98>)
    dafa:	f363 128f 	bfi	r2, r3, #6, #10
    dafe:	f00f f81d 	bl	1cb3c <log_1>
				return -EINVAL;
    db02:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    db06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    db0a:	5cf2      	ldrb	r2, [r6, r3]
    db0c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    db10:	2919      	cmp	r1, #25
    db12:	5cf9      	ldrb	r1, [r7, r3]
    db14:	bf98      	it	ls
    db16:	3a20      	subls	r2, #32
    db18:	4291      	cmp	r1, r2
    db1a:	d10b      	bne.n	db34 <slm_at_tcpip_parse+0x78>
	for (int i = 0; i < length; i++) {
    db1c:	3301      	adds	r3, #1
    db1e:	e7d9      	b.n	dad4 <slm_at_tcpip_parse+0x18>
			type = at_parser_cmd_type_get(at_cmd);
    db20:	4630      	mov	r0, r6
    db22:	f010 fd5c 	bl	1e5de <at_parser_cmd_type_get>
			ret = m_tcpip_at_list[i].handler(type);
    db26:	230c      	movs	r3, #12
    db28:	fb03 8404 	mla	r4, r3, r4, r8
    db2c:	68a3      	ldr	r3, [r4, #8]
}
    db2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = m_tcpip_at_list[i].handler(type);
    db32:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    db34:	3401      	adds	r4, #1
    db36:	2c07      	cmp	r4, #7
    db38:	f105 050c 	add.w	r5, r5, #12
    db3c:	d1c4      	bne.n	dac8 <slm_at_tcpip_parse+0xc>
	int ret = -ENOTSUP;
    db3e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    db42:	e7e0      	b.n	db06 <slm_at_tcpip_parse+0x4a>
    db44:	0001f3e0 	.word	0x0001f3e0
    db48:	20020110 	.word	0x20020110
    db4c:	0001f328 	.word	0x0001f328
    db50:	0001f3a0 	.word	0x0001f3a0
    db54:	0001f981 	.word	0x0001f981

0000db58 <enable_PSM>:

	return 0;
}

void enable_PSM(void)
{
    db58:	b510      	push	{r4, lr}
    db5a:	b0a6      	sub	sp, #152	; 0x98
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    db5c:	2296      	movs	r2, #150	; 0x96
    db5e:	2100      	movs	r1, #0
    db60:	4668      	mov	r0, sp
    db62:	f00f fd7e 	bl	1d662 <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    db66:	f240 2201 	movw	r2, #513	; 0x201
    db6a:	2100      	movs	r1, #0
    db6c:	2066      	movs	r0, #102	; 0x66
    db6e:	f7ff f9af 	bl	ced0 <socket>
	if (at_sock < 0) {
    db72:	1e04      	subs	r4, r0, #0
    db74:	da0d      	bge.n	db92 <enable_PSM+0x3a>
		LOG_ERR("Socket could not be opended.");
    db76:	2301      	movs	r3, #1
    db78:	f04f 0100 	mov.w	r1, #0
    db7c:	4a24      	ldr	r2, [pc, #144]	; (dc10 <enable_PSM+0xb8>)
    db7e:	f363 0107 	bfi	r1, r3, #0, #8
    db82:	4b24      	ldr	r3, [pc, #144]	; (dc14 <enable_PSM+0xbc>)
    db84:	4824      	ldr	r0, [pc, #144]	; (dc18 <enable_PSM+0xc0>)
    db86:	1a9b      	subs	r3, r3, r2
    db88:	08db      	lsrs	r3, r3, #3
    db8a:	f363 118f 	bfi	r1, r3, #6, #10
    db8e:	f00e ffc8 	bl	1cb22 <log_0>
	}
	bytes_sent = send(at_sock, AT_CPSMS1, strlen(AT_CPSMS1), 0);
    db92:	4822      	ldr	r0, [pc, #136]	; (dc1c <enable_PSM+0xc4>)
    db94:	f00f fd00 	bl	1d598 <strlen>
    db98:	4920      	ldr	r1, [pc, #128]	; (dc1c <enable_PSM+0xc4>)
    db9a:	4602      	mov	r2, r0
    db9c:	4620      	mov	r0, r4
    db9e:	f7ff fab1 	bl	d104 <send.constprop.10>
	if (bytes_sent < 0) {
    dba2:	2800      	cmp	r0, #0
    dba4:	da10      	bge.n	dbc8 <enable_PSM+0x70>
		LOG_INF("CPSM send error");
    dba6:	2303      	movs	r3, #3
    dba8:	f04f 0100 	mov.w	r1, #0
    dbac:	4a18      	ldr	r2, [pc, #96]	; (dc10 <enable_PSM+0xb8>)
    dbae:	f363 0107 	bfi	r1, r3, #0, #8
    dbb2:	4b18      	ldr	r3, [pc, #96]	; (dc14 <enable_PSM+0xbc>)
    dbb4:	481a      	ldr	r0, [pc, #104]	; (dc20 <enable_PSM+0xc8>)
    dbb6:	1a9b      	subs	r3, r3, r2
    dbb8:	08db      	lsrs	r3, r3, #3
    dbba:	f363 118f 	bfi	r1, r3, #6, #10
    dbbe:	f00e ffb0 	bl	1cb22 <log_0>
		close(at_sock);
    dbc2:	4620      	mov	r0, r4
    dbc4:	f7ff f98a 	bl	cedc <close>
	}
	do {
		bytes_received = recv(at_sock, buffer, 100, 0);
    dbc8:	2264      	movs	r2, #100	; 0x64
    dbca:	4669      	mov	r1, sp
    dbcc:	4620      	mov	r0, r4
    dbce:	f7ff fb17 	bl	d200 <recv.constprop.12>
	} while (bytes_received == 0);
    dbd2:	2800      	cmp	r0, #0
    dbd4:	d0f8      	beq.n	dbc8 <enable_PSM+0x70>
	if(strstr(buffer, "OK") != NULL)
    dbd6:	4913      	ldr	r1, [pc, #76]	; (dc24 <enable_PSM+0xcc>)
    dbd8:	4668      	mov	r0, sp
    dbda:	f00f fc88 	bl	1d4ee <strstr>
    dbde:	b168      	cbz	r0, dbfc <enable_PSM+0xa4>
	{
		LOG_INF("PSM enabled!");
    dbe0:	2303      	movs	r3, #3
    dbe2:	f04f 0100 	mov.w	r1, #0
    dbe6:	4a0a      	ldr	r2, [pc, #40]	; (dc10 <enable_PSM+0xb8>)
    dbe8:	f363 0107 	bfi	r1, r3, #0, #8
    dbec:	4b09      	ldr	r3, [pc, #36]	; (dc14 <enable_PSM+0xbc>)
    dbee:	480e      	ldr	r0, [pc, #56]	; (dc28 <enable_PSM+0xd0>)
    dbf0:	1a9b      	subs	r3, r3, r2
    dbf2:	08db      	lsrs	r3, r3, #3
    dbf4:	f363 118f 	bfi	r1, r3, #6, #10
    dbf8:	f00e ff93 	bl	1cb22 <log_0>
	}
	k_sleep(K_SECONDS(3));
    dbfc:	f640 30b8 	movw	r0, #3000	; 0xbb8
    dc00:	f00e fbf7 	bl	1c3f2 <k_sleep>
	close(at_sock);
    dc04:	4620      	mov	r0, r4
    dc06:	f7ff f969 	bl	cedc <close>
}
    dc0a:	b026      	add	sp, #152	; 0x98
    dc0c:	bd10      	pop	{r4, pc}
    dc0e:	bf00      	nop
    dc10:	0001f328 	.word	0x0001f328
    dc14:	0001f3a0 	.word	0x0001f3a0
    dc18:	0001fc66 	.word	0x0001fc66
    dc1c:	0001fc83 	.word	0x0001fc83
    dc20:	0001fcaa 	.word	0x0001fcaa
    dc24:	0002017f 	.word	0x0002017f
    dc28:	0001fcba 	.word	0x0001fcba

0000dc2c <disable_PSM>:

void disable_PSM(void)
{
    dc2c:	b510      	push	{r4, lr}
    dc2e:	b0a6      	sub	sp, #152	; 0x98
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    dc30:	2296      	movs	r2, #150	; 0x96
    dc32:	2100      	movs	r1, #0
    dc34:	4668      	mov	r0, sp
    dc36:	f00f fd14 	bl	1d662 <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dc3a:	f240 2201 	movw	r2, #513	; 0x201
    dc3e:	2100      	movs	r1, #0
    dc40:	2066      	movs	r0, #102	; 0x66
    dc42:	f7ff f945 	bl	ced0 <socket>
	if (at_sock < 0) {
    dc46:	1e04      	subs	r4, r0, #0
    dc48:	da0d      	bge.n	dc66 <disable_PSM+0x3a>
		LOG_ERR("Socket could not be opended.");
    dc4a:	2301      	movs	r3, #1
    dc4c:	f04f 0100 	mov.w	r1, #0
    dc50:	4a24      	ldr	r2, [pc, #144]	; (dce4 <disable_PSM+0xb8>)
    dc52:	f363 0107 	bfi	r1, r3, #0, #8
    dc56:	4b24      	ldr	r3, [pc, #144]	; (dce8 <disable_PSM+0xbc>)
    dc58:	4824      	ldr	r0, [pc, #144]	; (dcec <disable_PSM+0xc0>)
    dc5a:	1a9b      	subs	r3, r3, r2
    dc5c:	08db      	lsrs	r3, r3, #3
    dc5e:	f363 118f 	bfi	r1, r3, #6, #10
    dc62:	f00e ff5e 	bl	1cb22 <log_0>
	}
	bytes_sent = send(at_sock, AT_CPSMS0, strlen(AT_CPSMS0), 0);
    dc66:	4822      	ldr	r0, [pc, #136]	; (dcf0 <disable_PSM+0xc4>)
    dc68:	f00f fc96 	bl	1d598 <strlen>
    dc6c:	4920      	ldr	r1, [pc, #128]	; (dcf0 <disable_PSM+0xc4>)
    dc6e:	4602      	mov	r2, r0
    dc70:	4620      	mov	r0, r4
    dc72:	f7ff fa47 	bl	d104 <send.constprop.10>
	if (bytes_sent < 0) {
    dc76:	2800      	cmp	r0, #0
    dc78:	da10      	bge.n	dc9c <disable_PSM+0x70>
		LOG_INF("CPSM send error");
    dc7a:	2303      	movs	r3, #3
    dc7c:	f04f 0100 	mov.w	r1, #0
    dc80:	4a18      	ldr	r2, [pc, #96]	; (dce4 <disable_PSM+0xb8>)
    dc82:	f363 0107 	bfi	r1, r3, #0, #8
    dc86:	4b18      	ldr	r3, [pc, #96]	; (dce8 <disable_PSM+0xbc>)
    dc88:	481a      	ldr	r0, [pc, #104]	; (dcf4 <disable_PSM+0xc8>)
    dc8a:	1a9b      	subs	r3, r3, r2
    dc8c:	08db      	lsrs	r3, r3, #3
    dc8e:	f363 118f 	bfi	r1, r3, #6, #10
    dc92:	f00e ff46 	bl	1cb22 <log_0>
		close(at_sock);
    dc96:	4620      	mov	r0, r4
    dc98:	f7ff f920 	bl	cedc <close>
	}
	do {
		bytes_received = recv(at_sock, buffer, 100, 0);
    dc9c:	2264      	movs	r2, #100	; 0x64
    dc9e:	4669      	mov	r1, sp
    dca0:	4620      	mov	r0, r4
    dca2:	f7ff faad 	bl	d200 <recv.constprop.12>
	} while (bytes_received == 0);
    dca6:	2800      	cmp	r0, #0
    dca8:	d0f8      	beq.n	dc9c <disable_PSM+0x70>
	if(strstr(buffer, "OK") != NULL)
    dcaa:	4913      	ldr	r1, [pc, #76]	; (dcf8 <disable_PSM+0xcc>)
    dcac:	4668      	mov	r0, sp
    dcae:	f00f fc1e 	bl	1d4ee <strstr>
    dcb2:	b168      	cbz	r0, dcd0 <disable_PSM+0xa4>
	{
		LOG_INF("PSM disabled!");
    dcb4:	2303      	movs	r3, #3
    dcb6:	f04f 0100 	mov.w	r1, #0
    dcba:	4a0a      	ldr	r2, [pc, #40]	; (dce4 <disable_PSM+0xb8>)
    dcbc:	f363 0107 	bfi	r1, r3, #0, #8
    dcc0:	4b09      	ldr	r3, [pc, #36]	; (dce8 <disable_PSM+0xbc>)
    dcc2:	480e      	ldr	r0, [pc, #56]	; (dcfc <disable_PSM+0xd0>)
    dcc4:	1a9b      	subs	r3, r3, r2
    dcc6:	08db      	lsrs	r3, r3, #3
    dcc8:	f363 118f 	bfi	r1, r3, #6, #10
    dccc:	f00e ff29 	bl	1cb22 <log_0>
	}
	k_sleep(K_SECONDS(3));
    dcd0:	f640 30b8 	movw	r0, #3000	; 0xbb8
    dcd4:	f00e fb8d 	bl	1c3f2 <k_sleep>
	close(at_sock);
    dcd8:	4620      	mov	r0, r4
    dcda:	f7ff f8ff 	bl	cedc <close>
}
    dcde:	b026      	add	sp, #152	; 0x98
    dce0:	bd10      	pop	{r4, pc}
    dce2:	bf00      	nop
    dce4:	0001f328 	.word	0x0001f328
    dce8:	0001f3a0 	.word	0x0001f3a0
    dcec:	0001fc66 	.word	0x0001fc66
    dcf0:	0001fbb0 	.word	0x0001fbb0
    dcf4:	0001fcaa 	.word	0x0001fcaa
    dcf8:	0002017f 	.word	0x0002017f
    dcfc:	0001fbbb 	.word	0x0001fbbb

0000dd00 <request_nb_iot_network_stats>:


int request_nb_iot_network_stats()
{
	LOG_INF("Requesting NB-IoT network stats...");
    dd00:	2303      	movs	r3, #3
    dd02:	f04f 0100 	mov.w	r1, #0
{
    dd06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Requesting NB-IoT network stats...");
    dd0a:	f363 0107 	bfi	r1, r3, #0, #8
    dd0e:	4ca6      	ldr	r4, [pc, #664]	; (dfa8 <request_nb_iot_network_stats+0x2a8>)
    dd10:	4ba6      	ldr	r3, [pc, #664]	; (dfac <request_nb_iot_network_stats+0x2ac>)
{
    dd12:	b0a9      	sub	sp, #164	; 0xa4
	LOG_INF("Requesting NB-IoT network stats...");
    dd14:	1ae4      	subs	r4, r4, r3
    dd16:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dd1a:	f364 118f 	bfi	r1, r4, #6, #10
    dd1e:	48a4      	ldr	r0, [pc, #656]	; (dfb0 <request_nb_iot_network_stats+0x2b0>)
    dd20:	f00e feff 	bl	1cb22 <log_0>

	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    dd24:	2296      	movs	r2, #150	; 0x96
    dd26:	2100      	movs	r1, #0
    dd28:	a802      	add	r0, sp, #8
    dd2a:	f00f fc9a 	bl	1d662 <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dd2e:	f240 2201 	movw	r2, #513	; 0x201
    dd32:	2100      	movs	r1, #0
    dd34:	2066      	movs	r0, #102	; 0x66
    dd36:	f7ff f8cb 	bl	ced0 <socket>
	if (at_sock < 0) {
    dd3a:	1e05      	subs	r5, r0, #0
    dd3c:	db16      	blt.n	dd6c <request_nb_iot_network_stats+0x6c>
		return -1;
	}

	// Get and parse current cell ID: AT+CEREG?
	bytes_sent = send(at_sock, AT_CEREG, strlen(AT_CEREG), 0);
    dd3e:	489d      	ldr	r0, [pc, #628]	; (dfb4 <request_nb_iot_network_stats+0x2b4>)
    dd40:	f00f fc2a 	bl	1d598 <strlen>
    dd44:	499b      	ldr	r1, [pc, #620]	; (dfb4 <request_nb_iot_network_stats+0x2b4>)
    dd46:	4602      	mov	r2, r0
    dd48:	4628      	mov	r0, r5
    dd4a:	f7ff f9db 	bl	d104 <send.constprop.10>
	if (bytes_sent < 0) {
    dd4e:	2800      	cmp	r0, #0
    dd50:	da0f      	bge.n	dd72 <request_nb_iot_network_stats+0x72>
		LOG_INF("CEREG send error");
    dd52:	f04f 0100 	mov.w	r1, #0
    dd56:	2303      	movs	r3, #3
    dd58:	4897      	ldr	r0, [pc, #604]	; (dfb8 <request_nb_iot_network_stats+0x2b8>)
    dd5a:	f363 0107 	bfi	r1, r3, #0, #8
    dd5e:	f364 118f 	bfi	r1, r4, #6, #10
			neighbors[0] = '\0';
		}	
	}
	else if (strstr(buffer, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting neighbor data!");
    dd62:	f00e fede 	bl	1cb22 <log_0>
		close(at_sock);
    dd66:	4628      	mov	r0, r5
    dd68:	f7ff f8b8 	bl	cedc <close>
		return -1;
    dd6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd70:	e0f5      	b.n	df5e <request_nb_iot_network_stats+0x25e>
		bytes_received = recv(at_sock, buffer, 100, 0);
    dd72:	2264      	movs	r2, #100	; 0x64
    dd74:	a902      	add	r1, sp, #8
    dd76:	4628      	mov	r0, r5
    dd78:	f7ff fa42 	bl	d200 <recv.constprop.12>
	} while (bytes_received == 0);
    dd7c:	2800      	cmp	r0, #0
    dd7e:	d0f8      	beq.n	dd72 <request_nb_iot_network_stats+0x72>
	if(strstr(buffer, "OK") != NULL)
    dd80:	498e      	ldr	r1, [pc, #568]	; (dfbc <request_nb_iot_network_stats+0x2bc>)
    dd82:	a802      	add	r0, sp, #8
    dd84:	f00f fbb3 	bl	1d4ee <strstr>
    dd88:	b370      	cbz	r0, dde8 <request_nb_iot_network_stats+0xe8>
		char* pos = strstr(buffer, "\",\"")+3;		
    dd8a:	498d      	ldr	r1, [pc, #564]	; (dfc0 <request_nb_iot_network_stats+0x2c0>)
    dd8c:	a802      	add	r0, sp, #8
    dd8e:	f00f fbae 	bl	1d4ee <strstr>
    dd92:	4a8c      	ldr	r2, [pc, #560]	; (dfc4 <request_nb_iot_network_stats+0x2c4>)
    dd94:	1c83      	adds	r3, r0, #2
    dd96:	300a      	adds	r0, #10
			current_cell_id[i] = pos[i];
    dd98:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		for(uint8_t i=0; i<8; i++)
    dd9c:	4298      	cmp	r0, r3
			current_cell_id[i] = pos[i];
    dd9e:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint8_t i=0; i<8; i++)
    dda2:	d1f9      	bne.n	dd98 <request_nb_iot_network_stats+0x98>
		LOG_INF("Current cell ID = %s", current_cell_id);
    dda4:	f04f 0200 	mov.w	r2, #0
    dda8:	2303      	movs	r3, #3
    ddaa:	f363 0207 	bfi	r2, r3, #0, #8
    ddae:	f364 128f 	bfi	r2, r4, #6, #10
    ddb2:	4984      	ldr	r1, [pc, #528]	; (dfc4 <request_nb_iot_network_stats+0x2c4>)
    ddb4:	4884      	ldr	r0, [pc, #528]	; (dfc8 <request_nb_iot_network_stats+0x2c8>)
    ddb6:	f00e fec1 	bl	1cb3c <log_1>
	k_sleep(K_SECONDS(1));
    ddba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ddbe:	f00e fb18 	bl	1c3f2 <k_sleep>
	bytes_sent = send(at_sock, AT_CESQ, strlen(AT_CESQ), 0);
    ddc2:	4882      	ldr	r0, [pc, #520]	; (dfcc <request_nb_iot_network_stats+0x2cc>)
    ddc4:	f00f fbe8 	bl	1d598 <strlen>
    ddc8:	4980      	ldr	r1, [pc, #512]	; (dfcc <request_nb_iot_network_stats+0x2cc>)
    ddca:	4602      	mov	r2, r0
    ddcc:	4628      	mov	r0, r5
    ddce:	f7ff f999 	bl	d104 <send.constprop.10>
	if (bytes_sent < 0) {
    ddd2:	2800      	cmp	r0, #0
    ddd4:	da17      	bge.n	de06 <request_nb_iot_network_stats+0x106>
		LOG_INF("CESQ send error");
    ddd6:	f04f 0100 	mov.w	r1, #0
    ddda:	2303      	movs	r3, #3
    dddc:	f363 0107 	bfi	r1, r3, #0, #8
    dde0:	f364 118f 	bfi	r1, r4, #6, #10
    dde4:	487a      	ldr	r0, [pc, #488]	; (dfd0 <request_nb_iot_network_stats+0x2d0>)
    dde6:	e7bc      	b.n	dd62 <request_nb_iot_network_stats+0x62>
	else if (strstr(buffer, "ERROR") != NULL) 
    dde8:	497a      	ldr	r1, [pc, #488]	; (dfd4 <request_nb_iot_network_stats+0x2d4>)
    ddea:	a802      	add	r0, sp, #8
    ddec:	f00f fb7f 	bl	1d4ee <strstr>
    ddf0:	2800      	cmp	r0, #0
    ddf2:	d0e2      	beq.n	ddba <request_nb_iot_network_stats+0xba>
		LOG_ERR("Error while getting current cell ID!");
    ddf4:	f04f 0100 	mov.w	r1, #0
    ddf8:	2301      	movs	r3, #1
    ddfa:	f363 0107 	bfi	r1, r3, #0, #8
    ddfe:	f364 118f 	bfi	r1, r4, #6, #10
    de02:	4875      	ldr	r0, [pc, #468]	; (dfd8 <request_nb_iot_network_stats+0x2d8>)
    de04:	e7ad      	b.n	dd62 <request_nb_iot_network_stats+0x62>
		bytes_received = recv(at_sock, buffer, 100, 0);
    de06:	2264      	movs	r2, #100	; 0x64
    de08:	a902      	add	r1, sp, #8
    de0a:	4628      	mov	r0, r5
    de0c:	f7ff f9f8 	bl	d200 <recv.constprop.12>
	} while (bytes_received == 0);
    de10:	2800      	cmp	r0, #0
    de12:	d0f8      	beq.n	de06 <request_nb_iot_network_stats+0x106>
	if(strstr(buffer, "OK") != NULL)
    de14:	4969      	ldr	r1, [pc, #420]	; (dfbc <request_nb_iot_network_stats+0x2bc>)
    de16:	a802      	add	r0, sp, #8
    de18:	f00f fb69 	bl	1d4ee <strstr>
    de1c:	2800      	cmp	r0, #0
    de1e:	d03e      	beq.n	de9e <request_nb_iot_network_stats+0x19e>
		char *pos1 = strrchr(buffer, ',') + 1;
    de20:	212c      	movs	r1, #44	; 0x2c
    de22:	a802      	add	r0, sp, #8
    de24:	f00f fbab 	bl	1d57e <strrchr>
    de28:	1c46      	adds	r6, r0, #1
		char *pos2 = strstr(pos1, "\n");
    de2a:	496c      	ldr	r1, [pc, #432]	; (dfdc <request_nb_iot_network_stats+0x2dc>)
    de2c:	4630      	mov	r0, r6
    de2e:	f00f fb5e 	bl	1d4ee <strstr>
    de32:	4680      	mov	r8, r0
		memcpy(rsrp, pos1, strlen(pos1)-strlen(pos2));
    de34:	4630      	mov	r0, r6
    de36:	f00f fbaf 	bl	1d598 <strlen>
    de3a:	4607      	mov	r7, r0
    de3c:	4640      	mov	r0, r8
    de3e:	f00f fbab 	bl	1d598 <strlen>
    de42:	4631      	mov	r1, r6
    de44:	1a3a      	subs	r2, r7, r0
    de46:	4668      	mov	r0, sp
    de48:	f00f fbe1 	bl	1d60e <memcpy>
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    de4c:	220a      	movs	r2, #10
    de4e:	a901      	add	r1, sp, #4
    de50:	4668      	mov	r0, sp
    de52:	f00f fa5d 	bl	1d310 <strtol>
    de56:	4b62      	ldr	r3, [pc, #392]	; (dfe0 <request_nb_iot_network_stats+0x2e0>)
		LOG_INF("Current RSRP = %d", current_rsrp);
    de58:	f04f 0200 	mov.w	r2, #0
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    de5c:	7018      	strb	r0, [r3, #0]
		LOG_INF("Current RSRP = %d", current_rsrp);
    de5e:	2303      	movs	r3, #3
    de60:	f363 0207 	bfi	r2, r3, #0, #8
    de64:	b2c1      	uxtb	r1, r0
    de66:	f364 128f 	bfi	r2, r4, #6, #10
    de6a:	485e      	ldr	r0, [pc, #376]	; (dfe4 <request_nb_iot_network_stats+0x2e4>)
    de6c:	f00e fe66 	bl	1cb3c <log_1>
	k_sleep(K_SECONDS(1));
    de70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    de74:	f00e fabd 	bl	1c3f2 <k_sleep>
	bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    de78:	485b      	ldr	r0, [pc, #364]	; (dfe8 <request_nb_iot_network_stats+0x2e8>)
    de7a:	f00f fb8d 	bl	1d598 <strlen>
    de7e:	495a      	ldr	r1, [pc, #360]	; (dfe8 <request_nb_iot_network_stats+0x2e8>)
    de80:	4602      	mov	r2, r0
    de82:	4628      	mov	r0, r5
    de84:	f7ff f93e 	bl	d104 <send.constprop.10>
	if (bytes_sent < 0) {
    de88:	2800      	cmp	r0, #0
    de8a:	da17      	bge.n	debc <request_nb_iot_network_stats+0x1bc>
		LOG_INF("NBRGRSRP send error");
    de8c:	f04f 0100 	mov.w	r1, #0
    de90:	2303      	movs	r3, #3
    de92:	f363 0107 	bfi	r1, r3, #0, #8
    de96:	f364 118f 	bfi	r1, r4, #6, #10
    de9a:	4854      	ldr	r0, [pc, #336]	; (dfec <request_nb_iot_network_stats+0x2ec>)
    de9c:	e761      	b.n	dd62 <request_nb_iot_network_stats+0x62>
	else if (strstr(buffer, "ERROR") != NULL) 
    de9e:	494d      	ldr	r1, [pc, #308]	; (dfd4 <request_nb_iot_network_stats+0x2d4>)
    dea0:	a802      	add	r0, sp, #8
    dea2:	f00f fb24 	bl	1d4ee <strstr>
    dea6:	2800      	cmp	r0, #0
    dea8:	d0e2      	beq.n	de70 <request_nb_iot_network_stats+0x170>
		LOG_ERR("Error while getting current RSRP!");
    deaa:	f04f 0100 	mov.w	r1, #0
    deae:	2301      	movs	r3, #1
    deb0:	f363 0107 	bfi	r1, r3, #0, #8
    deb4:	f364 118f 	bfi	r1, r4, #6, #10
    deb8:	484d      	ldr	r0, [pc, #308]	; (dff0 <request_nb_iot_network_stats+0x2f0>)
    deba:	e752      	b.n	dd62 <request_nb_iot_network_stats+0x62>
		bytes_received = recv(at_sock, buffer, 150, 0);
    debc:	2296      	movs	r2, #150	; 0x96
    debe:	a902      	add	r1, sp, #8
    dec0:	4628      	mov	r0, r5
    dec2:	f7ff f99d 	bl	d200 <recv.constprop.12>
	} while (bytes_received == 0);
    dec6:	2800      	cmp	r0, #0
    dec8:	d0f8      	beq.n	debc <request_nb_iot_network_stats+0x1bc>
	if(strstr(buffer, "OK") != NULL)
    deca:	493c      	ldr	r1, [pc, #240]	; (dfbc <request_nb_iot_network_stats+0x2bc>)
    decc:	a802      	add	r0, sp, #8
    dece:	f00f fb0e 	bl	1d4ee <strstr>
    ded2:	2800      	cmp	r0, #0
    ded4:	d058      	beq.n	df88 <request_nb_iot_network_stats+0x288>
		if(strstr(buffer, "NBRGRSRP") != NULL)
    ded6:	4947      	ldr	r1, [pc, #284]	; (dff4 <request_nb_iot_network_stats+0x2f4>)
    ded8:	a802      	add	r0, sp, #8
    deda:	f00f fb08 	bl	1d4ee <strstr>
    dede:	4606      	mov	r6, r0
    dee0:	2800      	cmp	r0, #0
    dee2:	d044      	beq.n	df6e <request_nb_iot_network_stats+0x26e>
			char* pos1 = strstr(buffer, "\%NBRGRSRP: ") + strlen("\%NBRGRSRP: ");
    dee4:	4944      	ldr	r1, [pc, #272]	; (dff8 <request_nb_iot_network_stats+0x2f8>)
    dee6:	a802      	add	r0, sp, #8
    dee8:	f00f fb01 	bl	1d4ee <strstr>
    deec:	4607      	mov	r7, r0
    deee:	4842      	ldr	r0, [pc, #264]	; (dff8 <request_nb_iot_network_stats+0x2f8>)
    def0:	f00f fb52 	bl	1d598 <strlen>
    def4:	4407      	add	r7, r0
			char* pos2 = strstr(pos1, "\n");
    def6:	4939      	ldr	r1, [pc, #228]	; (dfdc <request_nb_iot_network_stats+0x2dc>)
    def8:	4638      	mov	r0, r7
    defa:	f00f faf8 	bl	1d4ee <strstr>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    defe:	2600      	movs	r6, #0
			char* pos2 = strstr(pos1, "\n");
    df00:	4681      	mov	r9, r0
				neighbors[i] = pos1[i];
    df02:	f8df b0f8 	ldr.w	fp, [pc, #248]	; dffc <request_nb_iot_network_stats+0x2fc>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    df06:	4638      	mov	r0, r7
    df08:	f00f fb46 	bl	1d598 <strlen>
    df0c:	4680      	mov	r8, r0
    df0e:	4648      	mov	r0, r9
    df10:	f00f fb42 	bl	1d598 <strlen>
    df14:	fa5f fa86 	uxtb.w	sl, r6
    df18:	eba8 0000 	sub.w	r0, r8, r0
    df1c:	4582      	cmp	sl, r0
    df1e:	f106 0601 	add.w	r6, r6, #1
    df22:	d31f      	bcc.n	df64 <request_nb_iot_network_stats+0x264>
			LOG_INF("Neighbors = %s", neighbors);
    df24:	f04f 0200 	mov.w	r2, #0
    df28:	2303      	movs	r3, #3
    df2a:	f363 0207 	bfi	r2, r3, #0, #8
    df2e:	f364 128f 	bfi	r2, r4, #6, #10
    df32:	4932      	ldr	r1, [pc, #200]	; (dffc <request_nb_iot_network_stats+0x2fc>)
    df34:	4832      	ldr	r0, [pc, #200]	; (e000 <request_nb_iot_network_stats+0x300>)
    df36:	f00e fe01 	bl	1cb3c <log_1>
		return -1;
	}
	k_sleep(K_SECONDS(1));
    df3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    df3e:	f00e fa58 	bl	1c3f2 <k_sleep>
	close(at_sock);
    df42:	4628      	mov	r0, r5
    df44:	f7fe ffca 	bl	cedc <close>
	LOG_INF("NB-IoT network stats requested.");
    df48:	2303      	movs	r3, #3
    df4a:	f04f 0100 	mov.w	r1, #0
    df4e:	f363 0107 	bfi	r1, r3, #0, #8
    df52:	482c      	ldr	r0, [pc, #176]	; (e004 <request_nb_iot_network_stats+0x304>)
    df54:	f364 118f 	bfi	r1, r4, #6, #10
    df58:	f00e fde3 	bl	1cb22 <log_0>
	
	return 0;
    df5c:	2000      	movs	r0, #0
}
    df5e:	b029      	add	sp, #164	; 0xa4
    df60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				neighbors[i] = pos1[i];
    df64:	f817 300a 	ldrb.w	r3, [r7, sl]
    df68:	f80b 300a 	strb.w	r3, [fp, sl]
    df6c:	e7cb      	b.n	df06 <request_nb_iot_network_stats+0x206>
			LOG_INF("No neighbors found.");
    df6e:	2303      	movs	r3, #3
    df70:	f04f 0100 	mov.w	r1, #0
    df74:	f363 0107 	bfi	r1, r3, #0, #8
    df78:	f364 118f 	bfi	r1, r4, #6, #10
    df7c:	4822      	ldr	r0, [pc, #136]	; (e008 <request_nb_iot_network_stats+0x308>)
    df7e:	f00e fdd0 	bl	1cb22 <log_0>
			neighbors[0] = '\0';
    df82:	4b1e      	ldr	r3, [pc, #120]	; (dffc <request_nb_iot_network_stats+0x2fc>)
    df84:	701e      	strb	r6, [r3, #0]
    df86:	e7d8      	b.n	df3a <request_nb_iot_network_stats+0x23a>
	else if (strstr(buffer, "ERROR") != NULL) 
    df88:	4912      	ldr	r1, [pc, #72]	; (dfd4 <request_nb_iot_network_stats+0x2d4>)
    df8a:	a802      	add	r0, sp, #8
    df8c:	f00f faaf 	bl	1d4ee <strstr>
    df90:	2800      	cmp	r0, #0
    df92:	d0d2      	beq.n	df3a <request_nb_iot_network_stats+0x23a>
		LOG_ERR("Error while getting neighbor data!");
    df94:	f04f 0100 	mov.w	r1, #0
    df98:	2301      	movs	r3, #1
    df9a:	f363 0107 	bfi	r1, r3, #0, #8
    df9e:	f364 118f 	bfi	r1, r4, #6, #10
    dfa2:	481a      	ldr	r0, [pc, #104]	; (e00c <request_nb_iot_network_stats+0x30c>)
    dfa4:	e6dd      	b.n	dd62 <request_nb_iot_network_stats+0x62>
    dfa6:	bf00      	nop
    dfa8:	0001f3a0 	.word	0x0001f3a0
    dfac:	0001f328 	.word	0x0001f328
    dfb0:	0001fef7 	.word	0x0001fef7
    dfb4:	0001ff1a 	.word	0x0001ff1a
    dfb8:	0001ff24 	.word	0x0001ff24
    dfbc:	0002017f 	.word	0x0002017f
    dfc0:	0001ff35 	.word	0x0001ff35
    dfc4:	20026494 	.word	0x20026494
    dfc8:	0001ff39 	.word	0x0001ff39
    dfcc:	0001ff79 	.word	0x0001ff79
    dfd0:	0001ff81 	.word	0x0001ff81
    dfd4:	0001ff4e 	.word	0x0001ff4e
    dfd8:	0001ff54 	.word	0x0001ff54
    dfdc:	0001fd80 	.word	0x0001fd80
    dfe0:	2002649e 	.word	0x2002649e
    dfe4:	0001ff91 	.word	0x0001ff91
    dfe8:	0001ffc5 	.word	0x0001ffc5
    dfec:	0001ffd1 	.word	0x0001ffd1
    dff0:	0001ffa3 	.word	0x0001ffa3
    dff4:	0001ffc8 	.word	0x0001ffc8
    dff8:	0001ffe5 	.word	0x0001ffe5
    dffc:	2002649f 	.word	0x2002649f
    e000:	0001fff1 	.word	0x0001fff1
    e004:	00020037 	.word	0x00020037
    e008:	00020000 	.word	0x00020000
    e00c:	00020014 	.word	0x00020014

0000e010 <slm_at_tcpip_init>:


/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e014:	4a52      	ldr	r2, [pc, #328]	; (e160 <slm_at_tcpip_init+0x150>)
    e016:	4c53      	ldr	r4, [pc, #332]	; (e164 <slm_at_tcpip_init+0x154>)
    e018:	b0a7      	sub	sp, #156	; 0x9c
    e01a:	1aa4      	subs	r4, r4, r2
    e01c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e020:	b978      	cbnz	r0, e042 <slm_at_tcpip_init+0x32>
		LOG_ERR("No callback");
    e022:	2301      	movs	r3, #1
    e024:	f04f 0100 	mov.w	r1, #0
    e028:	f363 0107 	bfi	r1, r3, #0, #8
    e02c:	f364 118f 	bfi	r1, r4, #6, #10
    e030:	484d      	ldr	r0, [pc, #308]	; (e168 <slm_at_tcpip_init+0x158>)
    e032:	f00e fd76 	bl	1cb22 <log_0>
		return -EINVAL;
    e036:	f06f 0815 	mvn.w	r8, #21
	}
	
	////////////////////////////////////////////////////////////////////

	
}
    e03a:	4640      	mov	r0, r8
    e03c:	b027      	add	sp, #156	; 0x9c
    e03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.ip_proto = IPPROTO_IP;
    e042:	2500      	movs	r5, #0
	client.sock = INVALID_SOCKET;
    e044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e048:	4a48      	ldr	r2, [pc, #288]	; (e16c <slm_at_tcpip_init+0x15c>)
    e04a:	6011      	str	r1, [r2, #0]
	client.callback = callback;
    e04c:	6090      	str	r0, [r2, #8]
	client.ip_proto = IPPROTO_IP;
    e04e:	8095      	strh	r5, [r2, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    e050:	f04f 0100 	mov.w	r1, #0
    e054:	2203      	movs	r2, #3
    e056:	f362 0107 	bfi	r1, r2, #0, #8
    e05a:	f364 118f 	bfi	r1, r4, #6, #10
    e05e:	4844      	ldr	r0, [pc, #272]	; (e170 <slm_at_tcpip_init+0x160>)
    e060:	f00e fd5f 	bl	1cb22 <log_0>
	char buffer[150] = {0};
    e064:	2296      	movs	r2, #150	; 0x96
    e066:	4629      	mov	r1, r5
    e068:	4668      	mov	r0, sp
    e06a:	f00f fafa 	bl	1d662 <memset>
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    e06e:	f240 2201 	movw	r2, #513	; 0x201
    e072:	4629      	mov	r1, r5
    e074:	2066      	movs	r0, #102	; 0x66
    e076:	f7fe ff2b 	bl	ced0 <socket>
	if (at_sock < 0) {
    e07a:	1e06      	subs	r6, r0, #0
    e07c:	db26      	blt.n	e0cc <slm_at_tcpip_init+0xbc>
    e07e:	4f3d      	ldr	r7, [pc, #244]	; (e174 <slm_at_tcpip_init+0x164>)
		if (memcmp(buffer, "OK", 2) != 0) {
    e080:	f8df a108 	ldr.w	sl, [pc, #264]	; e18c <slm_at_tcpip_init+0x17c>
		LOG_INF("%s",nb_init_at_commands[i]);
    e084:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
    e088:	f042 0203 	orr.w	r2, r2, #3
    e08c:	f362 0b07 	bfi	fp, r2, #0, #8
    e090:	f364 1b8f 	bfi	fp, r4, #6, #10
    e094:	465a      	mov	r2, fp
    e096:	4639      	mov	r1, r7
    e098:	4837      	ldr	r0, [pc, #220]	; (e178 <slm_at_tcpip_init+0x168>)
    e09a:	f00e fd4f 	bl	1cb3c <log_1>
		bytes_sent = send(at_sock, nb_init_at_commands[i],
    e09e:	4638      	mov	r0, r7
    e0a0:	f00f fa7a 	bl	1d598 <strlen>
    e0a4:	4639      	mov	r1, r7
    e0a6:	4602      	mov	r2, r0
    e0a8:	4630      	mov	r0, r6
    e0aa:	f7ff f82b 	bl	d104 <send.constprop.10>
		if (bytes_sent < 0) {
    e0ae:	2800      	cmp	r0, #0
    e0b0:	da19      	bge.n	e0e6 <slm_at_tcpip_init+0xd6>
			LOG_INF("NO BYTES SENT");
    e0b2:	f04f 0100 	mov.w	r1, #0
    e0b6:	2303      	movs	r3, #3
    e0b8:	4830      	ldr	r0, [pc, #192]	; (e17c <slm_at_tcpip_init+0x16c>)
    e0ba:	f363 0107 	bfi	r1, r3, #0, #8
    e0be:	f364 118f 	bfi	r1, r4, #6, #10
			LOG_INF("NOK");
    e0c2:	f00e fd2e 	bl	1cb22 <log_0>
			close(at_sock);
    e0c6:	4630      	mov	r0, r6
    e0c8:	f7fe ff08 	bl	cedc <close>
		LOG_ERR("Could not init nb-iot parameters!");
    e0cc:	2301      	movs	r3, #1
    e0ce:	f04f 0100 	mov.w	r1, #0
    e0d2:	f363 0107 	bfi	r1, r3, #0, #8
    e0d6:	f364 118f 	bfi	r1, r4, #6, #10
    e0da:	4829      	ldr	r0, [pc, #164]	; (e180 <slm_at_tcpip_init+0x170>)
    e0dc:	f00e fd21 	bl	1cb22 <log_0>
		return -1;
    e0e0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    e0e4:	e7a9      	b.n	e03a <slm_at_tcpip_init+0x2a>
			bytes_received = recv(at_sock, buffer, 2, 0);
    e0e6:	2202      	movs	r2, #2
    e0e8:	4669      	mov	r1, sp
    e0ea:	4630      	mov	r0, r6
    e0ec:	f7ff f888 	bl	d200 <recv.constprop.12>
		} while (bytes_received == 0);
    e0f0:	2800      	cmp	r0, #0
    e0f2:	d0f8      	beq.n	e0e6 <slm_at_tcpip_init+0xd6>
		if (memcmp(buffer, "OK", 2) != 0) {
    e0f4:	2202      	movs	r2, #2
    e0f6:	4651      	mov	r1, sl
    e0f8:	4668      	mov	r0, sp
    e0fa:	f00f fa78 	bl	1d5ee <memcmp>
    e0fe:	4680      	mov	r8, r0
    e100:	b140      	cbz	r0, e114 <slm_at_tcpip_init+0x104>
			LOG_INF("NOK");
    e102:	f04f 0100 	mov.w	r1, #0
    e106:	2303      	movs	r3, #3
    e108:	f363 0107 	bfi	r1, r3, #0, #8
    e10c:	f364 118f 	bfi	r1, r4, #6, #10
    e110:	481c      	ldr	r0, [pc, #112]	; (e184 <slm_at_tcpip_init+0x174>)
    e112:	e7d6      	b.n	e0c2 <slm_at_tcpip_init+0xb2>
			LOG_INF("OK");
    e114:	f029 023f 	bic.w	r2, r9, #63	; 0x3f
    e118:	f042 0203 	orr.w	r2, r2, #3
    e11c:	f362 0907 	bfi	r9, r2, #0, #8
    e120:	f364 198f 	bfi	r9, r4, #6, #10
    e124:	4649      	mov	r1, r9
    e126:	4650      	mov	r0, sl
    e128:	f00e fcfb 	bl	1cb22 <log_0>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e12c:	3501      	adds	r5, #1
		k_sleep(K_SECONDS(3));
    e12e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e132:	f00e f95e 	bl	1c3f2 <k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e136:	2d04      	cmp	r5, #4
    e138:	f107 0728 	add.w	r7, r7, #40	; 0x28
    e13c:	d1a2      	bne.n	e084 <slm_at_tcpip_init+0x74>
	close(at_sock);
    e13e:	4630      	mov	r0, r6
    e140:	f7fe fecc 	bl	cedc <close>
	LOG_INF("NB-IoT Parameters Initialized");
    e144:	2303      	movs	r3, #3
    e146:	f04f 0100 	mov.w	r1, #0
    e14a:	f363 0107 	bfi	r1, r3, #0, #8
    e14e:	f364 118f 	bfi	r1, r4, #6, #10
    e152:	480d      	ldr	r0, [pc, #52]	; (e188 <slm_at_tcpip_init+0x178>)
    e154:	f00e fce5 	bl	1cb22 <log_0>
		do_socket_open(2);
    e158:	2002      	movs	r0, #2
    e15a:	f7fe ff03 	bl	cf64 <do_socket_open>
		return 0;
    e15e:	e76c      	b.n	e03a <slm_at_tcpip_init+0x2a>
    e160:	0001f328 	.word	0x0001f328
    e164:	0001f3a0 	.word	0x0001f3a0
    e168:	00020145 	.word	0x00020145
    e16c:	20020130 	.word	0x20020130
    e170:	00020151 	.word	0x00020151
    e174:	0001fe20 	.word	0x0001fe20
    e178:	00020d3a 	.word	0x00020d3a
    e17c:	00020170 	.word	0x00020170
    e180:	000201a0 	.word	0x000201a0
    e184:	0002017e 	.word	0x0002017e
    e188:	00020182 	.word	0x00020182
    e18c:	0002017f 	.word	0x0002017f

0000e190 <send_message>:
/** If GPS has fix, save GPS data and toggle PSM to request network stats:
 *  Cell ID and RSRP of serving cell and neighbors (if available).
 */
void send_message()
{
	LOG_INF("--------BEGIN-----------");
    e190:	2303      	movs	r3, #3
    e192:	f04f 0100 	mov.w	r1, #0
{
    e196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("--------BEGIN-----------");
    e19a:	f363 0107 	bfi	r1, r3, #0, #8
    e19e:	4c5d      	ldr	r4, [pc, #372]	; (e314 <send_message+0x184>)
    e1a0:	4b5d      	ldr	r3, [pc, #372]	; (e318 <send_message+0x188>)
	// Wait for GPS fix
	while(!notified)
    e1a2:	4e5e      	ldr	r6, [pc, #376]	; (e31c <send_message+0x18c>)
	LOG_INF("--------BEGIN-----------");
    e1a4:	1ae4      	subs	r4, r4, r3
    e1a6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
{
    e1aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
	LOG_INF("--------BEGIN-----------");
    e1ae:	f364 118f 	bfi	r1, r4, #6, #10
    e1b2:	485b      	ldr	r0, [pc, #364]	; (e320 <send_message+0x190>)
    e1b4:	f00e fcb5 	bl	1cb22 <log_0>
    e1b8:	4637      	mov	r7, r6
	{
		k_sleep(K_SECONDS(1));
		LOG_INF("waiting for GPS fix");
    e1ba:	f8df 8198 	ldr.w	r8, [pc, #408]	; e354 <send_message+0x1c4>
	while(!notified)
    e1be:	7833      	ldrb	r3, [r6, #0]
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	f000 808b 	beq.w	e2dc <send_message+0x14c>
	}
	LOG_INF("GPS client running = %d", gps_client_inst.running);
    e1c6:	2303      	movs	r3, #3
    e1c8:	f04f 0200 	mov.w	r2, #0
    e1cc:	4e55      	ldr	r6, [pc, #340]	; (e324 <send_message+0x194>)
    e1ce:	f363 0207 	bfi	r2, r3, #0, #8
    e1d2:	f364 128f 	bfi	r2, r4, #6, #10
    e1d6:	79b1      	ldrb	r1, [r6, #6]
    e1d8:	4853      	ldr	r0, [pc, #332]	; (e328 <send_message+0x198>)
    e1da:	f00e fcaf 	bl	1cb3c <log_1>
	LOG_INF("GPS client has fix = %d", gps_client_inst.has_fix);
    e1de:	2303      	movs	r3, #3
    e1e0:	f04f 0200 	mov.w	r2, #0

	// Get GPS data
	//nrf_gnss_data_frame_t myGPS_data = *myGPS_datapointer;
	char gps_buf[100];
	sprintf(gps_buf, "%f;%f;%f;%f;%04u-%02u-%02u %02u:%02u:%02u", 
    e1e4:	4d51      	ldr	r5, [pc, #324]	; (e32c <send_message+0x19c>)
	LOG_INF("GPS client has fix = %d", gps_client_inst.has_fix);
    e1e6:	f363 0207 	bfi	r2, r3, #0, #8
    e1ea:	f364 128f 	bfi	r2, r4, #6, #10
    e1ee:	79f1      	ldrb	r1, [r6, #7]
    e1f0:	484f      	ldr	r0, [pc, #316]	; (e330 <send_message+0x1a0>)
    e1f2:	f00e fca3 	bl	1cb3c <log_1>
	sprintf(gps_buf, "%f;%f;%f;%f;%04u-%02u-%02u %02u:%02u:%02u", 
    e1f6:	7fab      	ldrb	r3, [r5, #30]
    e1f8:	930b      	str	r3, [sp, #44]	; 0x2c
    e1fa:	7f6b      	ldrb	r3, [r5, #29]
    e1fc:	930a      	str	r3, [sp, #40]	; 0x28
    e1fe:	7f2b      	ldrb	r3, [r5, #28]
    e200:	9309      	str	r3, [sp, #36]	; 0x24
    e202:	7eeb      	ldrb	r3, [r5, #27]
    e204:	9308      	str	r3, [sp, #32]
    e206:	7eab      	ldrb	r3, [r5, #26]
    e208:	9307      	str	r3, [sp, #28]
    e20a:	8b2b      	ldrh	r3, [r5, #24]
    e20c:	9306      	str	r3, [sp, #24]
    e20e:	6968      	ldr	r0, [r5, #20]
    e210:	f7fe f96a 	bl	c4e8 <__aeabi_f2d>
    e214:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e218:	6928      	ldr	r0, [r5, #16]
    e21a:	f7fe f965 	bl	c4e8 <__aeabi_f2d>
    e21e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    e222:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    e226:	e9cd 2300 	strd	r2, r3, [sp]
    e22a:	4942      	ldr	r1, [pc, #264]	; (e334 <send_message+0x1a4>)
    e22c:	e9d5 2300 	ldrd	r2, r3, [r5]
    e230:	a80c      	add	r0, sp, #48	; 0x30
    e232:	f002 fe6d 	bl	10f10 <sprintf>
		current_location.datetime.day,
		current_location.datetime.hour,
		current_location.datetime.minute,
		current_location.datetime.seconds);

	gps_client_inst.callback(gps_buf);
    e236:	68b3      	ldr	r3, [r6, #8]
    e238:	a80c      	add	r0, sp, #48	; 0x30
    e23a:	4798      	blx	r3
	// 	//default
	// 	default:
	// 		LOG_INF("UNKOWN GPS DATA TYPE");
	// }
	
	disable_PSM();
    e23c:	f7ff fcf6 	bl	dc2c <disable_PSM>
	k_sleep(K_SECONDS(3));
    e240:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e244:	f00e f8d5 	bl	1c3f2 <k_sleep>

	int error = request_nb_iot_network_stats();
    e248:	f7ff fd5a 	bl	dd00 <request_nb_iot_network_stats>
	if(error == 0)
    e24c:	4601      	mov	r1, r0
    e24e:	2800      	cmp	r0, #0
    e250:	d155      	bne.n	e2fe <send_message+0x16e>
	{
		// Put all data in a buffer
		char payloadstring[500] = {0};
    e252:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    e256:	a825      	add	r0, sp, #148	; 0x94
    e258:	f00f fa03 	bl	1d662 <memset>

		strcat(payloadstring, current_cell_id);
    e25c:	4936      	ldr	r1, [pc, #216]	; (e338 <send_message+0x1a8>)
    e25e:	a825      	add	r0, sp, #148	; 0x94
    e260:	f00f f9bc 	bl	1d5dc <strcat>
		strcat(payloadstring, ";");
    e264:	4935      	ldr	r1, [pc, #212]	; (e33c <send_message+0x1ac>)
    e266:	a825      	add	r0, sp, #148	; 0x94
    e268:	f00f f9b8 	bl	1d5dc <strcat>

		char* rsrp = (char*) &current_rsrp;
		strcat(payloadstring, rsrp);
    e26c:	4934      	ldr	r1, [pc, #208]	; (e340 <send_message+0x1b0>)
    e26e:	a825      	add	r0, sp, #148	; 0x94
    e270:	f00f f9b4 	bl	1d5dc <strcat>
		strcat(payloadstring, ";");
    e274:	4931      	ldr	r1, [pc, #196]	; (e33c <send_message+0x1ac>)
    e276:	a825      	add	r0, sp, #148	; 0x94
    e278:	f00f f9b0 	bl	1d5dc <strcat>

		if(neighbors[0] != '\0')
    e27c:	4931      	ldr	r1, [pc, #196]	; (e344 <send_message+0x1b4>)
    e27e:	780b      	ldrb	r3, [r1, #0]
    e280:	b113      	cbz	r3, e288 <send_message+0xf8>
			strcat(payloadstring, neighbors);
    e282:	a825      	add	r0, sp, #148	; 0x94
    e284:	f00f f9aa 	bl	1d5dc <strcat>
		strcat(payloadstring, ";");
    e288:	492c      	ldr	r1, [pc, #176]	; (e33c <send_message+0x1ac>)
    e28a:	a825      	add	r0, sp, #148	; 0x94
    e28c:	f00f f9a6 	bl	1d5dc <strcat>
		
		strcat(payloadstring, gps_buf);
    e290:	a90c      	add	r1, sp, #48	; 0x30
    e292:	a825      	add	r0, sp, #148	; 0x94
    e294:	f00f f9a2 	bl	1d5dc <strcat>
		//strcat(payloadstring, ";");

		// Send message to UDP server
		//do_udp_sendto("nbiot.idlab.uantwerpen.be", 1270, payloadstring); // TODO change UDP port
		LOG_INF("MESSAGE SENT: \"%s\" (LENGTH = %d)", payloadstring, strlen(payloadstring));
    e298:	f04f 0500 	mov.w	r5, #0
    e29c:	2303      	movs	r3, #3
    e29e:	a825      	add	r0, sp, #148	; 0x94
    e2a0:	f363 0507 	bfi	r5, r3, #0, #8
    e2a4:	f00f f978 	bl	1d598 <strlen>
    e2a8:	f364 158f 	bfi	r5, r4, #6, #10
    e2ac:	4602      	mov	r2, r0
    e2ae:	462b      	mov	r3, r5
    e2b0:	a925      	add	r1, sp, #148	; 0x94
    e2b2:	4825      	ldr	r0, [pc, #148]	; (e348 <send_message+0x1b8>)
    e2b4:	f00e fc56 	bl	1cb64 <log_2>

		enable_PSM();
    e2b8:	f7ff fc4e 	bl	db58 <enable_PSM>

	} else 
	{
		LOG_ERR("Unexpected ERROR, try rebooting the device.");
	}
	notified = 0;
    e2bc:	2300      	movs	r3, #0
	LOG_INF("---------END-----------");
    e2be:	f04f 0100 	mov.w	r1, #0
	notified = 0;
    e2c2:	703b      	strb	r3, [r7, #0]
	LOG_INF("---------END-----------");
    e2c4:	2303      	movs	r3, #3
    e2c6:	f363 0107 	bfi	r1, r3, #0, #8
    e2ca:	f364 118f 	bfi	r1, r4, #6, #10
    e2ce:	481f      	ldr	r0, [pc, #124]	; (e34c <send_message+0x1bc>)
    e2d0:	f00e fc27 	bl	1cb22 <log_0>
}
    e2d4:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
    e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_sleep(K_SECONDS(1));
    e2dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    e2e0:	f00e f887 	bl	1c3f2 <k_sleep>
		LOG_INF("waiting for GPS fix");
    e2e4:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
    e2e8:	f043 0303 	orr.w	r3, r3, #3
    e2ec:	f363 0507 	bfi	r5, r3, #0, #8
    e2f0:	f364 158f 	bfi	r5, r4, #6, #10
    e2f4:	4629      	mov	r1, r5
    e2f6:	4640      	mov	r0, r8
    e2f8:	f00e fc13 	bl	1cb22 <log_0>
    e2fc:	e75f      	b.n	e1be <send_message+0x2e>
		LOG_ERR("Unexpected ERROR, try rebooting the device.");
    e2fe:	2301      	movs	r3, #1
    e300:	f04f 0100 	mov.w	r1, #0
    e304:	f363 0107 	bfi	r1, r3, #0, #8
    e308:	f364 118f 	bfi	r1, r4, #6, #10
    e30c:	4810      	ldr	r0, [pc, #64]	; (e350 <send_message+0x1c0>)
    e30e:	f00e fc08 	bl	1cb22 <log_0>
    e312:	e7d3      	b.n	e2bc <send_message+0x12c>
    e314:	0001f3a0 	.word	0x0001f3a0
    e318:	0001f328 	.word	0x0001f328
    e31c:	20026544 	.word	0x20026544
    e320:	00020057 	.word	0x00020057
    e324:	2002013c 	.word	0x2002013c
    e328:	00020084 	.word	0x00020084
    e32c:	20020000 	.word	0x20020000
    e330:	0002009c 	.word	0x0002009c
    e334:	000200b4 	.word	0x000200b4
    e338:	20026494 	.word	0x20026494
    e33c:	000200de 	.word	0x000200de
    e340:	2002649e 	.word	0x2002649e
    e344:	2002649f 	.word	0x2002649f
    e348:	000200e0 	.word	0x000200e0
    e34c:	0002012d 	.word	0x0002012d
    e350:	00020101 	.word	0x00020101
    e354:	00020070 	.word	0x00020070

0000e358 <close>:
	return socket_ops->close(sock);
    e358:	4b01      	ldr	r3, [pc, #4]	; (e360 <close+0x8>)
    e35a:	681b      	ldr	r3, [r3, #0]
    e35c:	685b      	ldr	r3, [r3, #4]
    e35e:	4718      	bx	r3
    e360:	20020344 	.word	0x20020344

0000e364 <do_gps_stop>:

	return -errno;
}

static int do_gps_stop(void)
{
    e364:	b530      	push	{r4, r5, lr}
	int ret = 0;
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e366:	2400      	movs	r4, #0

	if (gps_client_inst.sock != INVALID_SOCKET) {
    e368:	4d1a      	ldr	r5, [pc, #104]	; (e3d4 <do_gps_stop+0x70>)
{
    e36a:	b085      	sub	sp, #20
	if (gps_client_inst.sock != INVALID_SOCKET) {
    e36c:	6828      	ldr	r0, [r5, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e36e:	9403      	str	r4, [sp, #12]
	if (gps_client_inst.sock != INVALID_SOCKET) {
    e370:	1c43      	adds	r3, r0, #1
    e372:	d020      	beq.n	e3b6 <do_gps_stop+0x52>
		ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e374:	2304      	movs	r3, #4
    e376:	2208      	movs	r2, #8
    e378:	9300      	str	r3, [sp, #0]
    e37a:	f44f 7101 	mov.w	r1, #516	; 0x204
    e37e:	ab03      	add	r3, sp, #12
    e380:	f008 ffbe 	bl	17300 <nrf_setsockopt>
			NRF_SO_GNSS_STOP, &delete_mask, sizeof(delete_mask));
		if (ret != 0) {
    e384:	4604      	mov	r4, r0
    e386:	b1c8      	cbz	r0, e3bc <do_gps_stop+0x58>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    e388:	2301      	movs	r3, #1
    e38a:	f04f 0400 	mov.w	r4, #0
    e38e:	4a12      	ldr	r2, [pc, #72]	; (e3d8 <do_gps_stop+0x74>)
    e390:	f363 0407 	bfi	r4, r3, #0, #8
    e394:	4b11      	ldr	r3, [pc, #68]	; (e3dc <do_gps_stop+0x78>)
    e396:	1a9b      	subs	r3, r3, r2
    e398:	08db      	lsrs	r3, r3, #3
    e39a:	f363 148f 	bfi	r4, r3, #6, #10
    e39e:	f00e f82d 	bl	1c3fc <z_errno>
    e3a2:	6801      	ldr	r1, [r0, #0]
    e3a4:	4622      	mov	r2, r4
    e3a6:	4249      	negs	r1, r1
    e3a8:	480d      	ldr	r0, [pc, #52]	; (e3e0 <do_gps_stop+0x7c>)
    e3aa:	f00e fbc7 	bl	1cb3c <log_1>
			ret = -errno;
    e3ae:	f00e f825 	bl	1c3fc <z_errno>
    e3b2:	6804      	ldr	r4, [r0, #0]
    e3b4:	4264      	negs	r4, r4
		}

	}

	return ret;
}
    e3b6:	4620      	mov	r0, r4
    e3b8:	b005      	add	sp, #20
    e3ba:	bd30      	pop	{r4, r5, pc}
			k_thread_suspend(gps_thread_id);
    e3bc:	4b09      	ldr	r3, [pc, #36]	; (e3e4 <do_gps_stop+0x80>)
    e3be:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
    e3c0:	f00d fd80 	bl	1bec4 <z_impl_k_thread_suspend>
			nrf_close(gps_client_inst.sock);
    e3c4:	6828      	ldr	r0, [r5, #0]
    e3c6:	f008 fed7 	bl	17178 <nrf_close>
			gps_client_inst.running = false;
    e3ca:	71ac      	strb	r4, [r5, #6]
			gps_client_inst.callback("#XGPSRUN: 0\r\n");
    e3cc:	68ab      	ldr	r3, [r5, #8]
    e3ce:	4806      	ldr	r0, [pc, #24]	; (e3e8 <do_gps_stop+0x84>)
    e3d0:	4798      	blx	r3
			LOG_DBG("GPS stopped");
    e3d2:	e7f0      	b.n	e3b6 <do_gps_stop+0x52>
    e3d4:	2002013c 	.word	0x2002013c
    e3d8:	0001f328 	.word	0x0001f328
    e3dc:	0001f360 	.word	0x0001f360
    e3e0:	00020306 	.word	0x00020306
    e3e4:	200201f8 	.word	0x200201f8
    e3e8:	00020323 	.word	0x00020323

0000e3ec <do_gps_start>:
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e3ec:	2300      	movs	r3, #0
{
    e3ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e3f0:	2701      	movs	r7, #1
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e3f2:	4d70      	ldr	r5, [pc, #448]	; (e5b4 <do_gps_start+0x1c8>)
{
    e3f4:	b08b      	sub	sp, #44	; 0x2c
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e3f6:	f8ad 301e 	strh.w	r3, [sp, #30]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    e3fa:	9309      	str	r3, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e3fc:	88ab      	ldrh	r3, [r5, #4]
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e3fe:	f44f 7201 	mov.w	r2, #516	; 0x204
    e402:	2102      	movs	r1, #2
    e404:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e406:	f8ad 7020 	strh.w	r7, [sp, #32]
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e40a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e40e:	f008 fea1 	bl	17154 <nrf_socket>
	if (gps_client_inst.sock < 0) {
    e412:	2800      	cmp	r0, #0
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e414:	6028      	str	r0, [r5, #0]
	if (gps_client_inst.sock < 0) {
    e416:	da31      	bge.n	e47c <do_gps_start+0x90>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    e418:	f04f 0400 	mov.w	r4, #0
    e41c:	4a66      	ldr	r2, [pc, #408]	; (e5b8 <do_gps_start+0x1cc>)
    e41e:	4b67      	ldr	r3, [pc, #412]	; (e5bc <do_gps_start+0x1d0>)
    e420:	f367 0407 	bfi	r4, r7, #0, #8
    e424:	1a9b      	subs	r3, r3, r2
    e426:	08db      	lsrs	r3, r3, #3
    e428:	f363 148f 	bfi	r4, r3, #6, #10
    e42c:	f00d ffe6 	bl	1c3fc <z_errno>
    e430:	6801      	ldr	r1, [r0, #0]
    e432:	4622      	mov	r2, r4
    e434:	4249      	negs	r1, r1
    e436:	4862      	ldr	r0, [pc, #392]	; (e5c0 <do_gps_start+0x1d4>)
    e438:	f00e fb80 	bl	1cb3c <log_1>
	int ret = -EINVAL;
    e43c:	f06f 0415 	mvn.w	r4, #21
	LOG_ERR("GPS start failed: %d", ret);
    e440:	2301      	movs	r3, #1
    e442:	f04f 0200 	mov.w	r2, #0
    e446:	495c      	ldr	r1, [pc, #368]	; (e5b8 <do_gps_start+0x1cc>)
    e448:	f363 0207 	bfi	r2, r3, #0, #8
    e44c:	4b5b      	ldr	r3, [pc, #364]	; (e5bc <do_gps_start+0x1d0>)
    e44e:	485d      	ldr	r0, [pc, #372]	; (e5c4 <do_gps_start+0x1d8>)
    e450:	1a5b      	subs	r3, r3, r1
    e452:	08db      	lsrs	r3, r3, #3
    e454:	f363 128f 	bfi	r2, r3, #6, #10
    e458:	4621      	mov	r1, r4
    e45a:	f00e fb6f 	bl	1cb3c <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    e45e:	4622      	mov	r2, r4
    e460:	4959      	ldr	r1, [pc, #356]	; (e5c8 <do_gps_start+0x1dc>)
    e462:	485a      	ldr	r0, [pc, #360]	; (e5cc <do_gps_start+0x1e0>)
    e464:	f002 fd54 	bl	10f10 <sprintf>
	gps_client_inst.callback(buf);
    e468:	68ab      	ldr	r3, [r5, #8]
    e46a:	4858      	ldr	r0, [pc, #352]	; (e5cc <do_gps_start+0x1e0>)
    e46c:	4798      	blx	r3
	gps_client_inst.running = false;
    e46e:	2300      	movs	r3, #0
    e470:	71ab      	strb	r3, [r5, #6]
	return -errno;
    e472:	f00d ffc3 	bl	1c3fc <z_errno>
    e476:	6804      	ldr	r4, [r0, #0]
    e478:	4264      	negs	r4, r4
    e47a:	e088      	b.n	e58e <do_gps_start+0x1a2>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    e47c:	2602      	movs	r6, #2
    e47e:	f10d 031e 	add.w	r3, sp, #30
    e482:	9600      	str	r6, [sp, #0]
    e484:	4632      	mov	r2, r6
    e486:	f44f 7101 	mov.w	r1, #516	; 0x204
    e48a:	f008 ff39 	bl	17300 <nrf_setsockopt>
	if (ret != 0) {
    e48e:	4604      	mov	r4, r0
    e490:	b198      	cbz	r0, e4ba <do_gps_start+0xce>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    e492:	2301      	movs	r3, #1
    e494:	f04f 0600 	mov.w	r6, #0
    e498:	4a47      	ldr	r2, [pc, #284]	; (e5b8 <do_gps_start+0x1cc>)
    e49a:	f363 0607 	bfi	r6, r3, #0, #8
    e49e:	4b47      	ldr	r3, [pc, #284]	; (e5bc <do_gps_start+0x1d0>)
    e4a0:	1a9b      	subs	r3, r3, r2
    e4a2:	08db      	lsrs	r3, r3, #3
    e4a4:	f363 168f 	bfi	r6, r3, #6, #10
    e4a8:	f00d ffa8 	bl	1c3fc <z_errno>
    e4ac:	4632      	mov	r2, r6
    e4ae:	6801      	ldr	r1, [r0, #0]
    e4b0:	4847      	ldr	r0, [pc, #284]	; (e5d0 <do_gps_start+0x1e4>)
    e4b2:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e4b4:	f00e fb42 	bl	1cb3c <log_1>
		goto error;
    e4b8:	e7c2      	b.n	e440 <do_gps_start+0x54>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e4ba:	9600      	str	r6, [sp, #0]
    e4bc:	ab08      	add	r3, sp, #32
    e4be:	463a      	mov	r2, r7
    e4c0:	f44f 7101 	mov.w	r1, #516	; 0x204
    e4c4:	6828      	ldr	r0, [r5, #0]
    e4c6:	f008 ff1b 	bl	17300 <nrf_setsockopt>
	if (ret != 0) {
    e4ca:	4604      	mov	r4, r0
    e4cc:	b188      	cbz	r0, e4f2 <do_gps_start+0x106>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    e4ce:	2301      	movs	r3, #1
    e4d0:	f04f 0600 	mov.w	r6, #0
    e4d4:	4a38      	ldr	r2, [pc, #224]	; (e5b8 <do_gps_start+0x1cc>)
    e4d6:	f363 0607 	bfi	r6, r3, #0, #8
    e4da:	4b38      	ldr	r3, [pc, #224]	; (e5bc <do_gps_start+0x1d0>)
    e4dc:	1a9b      	subs	r3, r3, r2
    e4de:	08db      	lsrs	r3, r3, #3
    e4e0:	f363 168f 	bfi	r6, r3, #6, #10
    e4e4:	f00d ff8a 	bl	1c3fc <z_errno>
    e4e8:	6801      	ldr	r1, [r0, #0]
    e4ea:	4632      	mov	r2, r6
    e4ec:	4249      	negs	r1, r1
    e4ee:	4839      	ldr	r0, [pc, #228]	; (e5d4 <do_gps_start+0x1e8>)
    e4f0:	e7e0      	b.n	e4b4 <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    e4f2:	9600      	str	r6, [sp, #0]
    e4f4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    e4f8:	2204      	movs	r2, #4
    e4fa:	f44f 7101 	mov.w	r1, #516	; 0x204
    e4fe:	6828      	ldr	r0, [r5, #0]
    e500:	f008 fefe 	bl	17300 <nrf_setsockopt>
	if (ret != 0) {
    e504:	4604      	mov	r4, r0
    e506:	b188      	cbz	r0, e52c <do_gps_start+0x140>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    e508:	2301      	movs	r3, #1
    e50a:	f04f 0600 	mov.w	r6, #0
    e50e:	4a2a      	ldr	r2, [pc, #168]	; (e5b8 <do_gps_start+0x1cc>)
    e510:	f363 0607 	bfi	r6, r3, #0, #8
    e514:	4b29      	ldr	r3, [pc, #164]	; (e5bc <do_gps_start+0x1d0>)
    e516:	1a9b      	subs	r3, r3, r2
    e518:	08db      	lsrs	r3, r3, #3
    e51a:	f363 168f 	bfi	r6, r3, #6, #10
    e51e:	f00d ff6d 	bl	1c3fc <z_errno>
    e522:	6801      	ldr	r1, [r0, #0]
    e524:	4632      	mov	r2, r6
    e526:	4249      	negs	r1, r1
    e528:	482b      	ldr	r0, [pc, #172]	; (e5d8 <do_gps_start+0x1ec>)
    e52a:	e7c3      	b.n	e4b4 <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    e52c:	2304      	movs	r3, #4
    e52e:	2207      	movs	r2, #7
    e530:	9300      	str	r3, [sp, #0]
    e532:	f44f 7101 	mov.w	r1, #516	; 0x204
    e536:	ab09      	add	r3, sp, #36	; 0x24
    e538:	6828      	ldr	r0, [r5, #0]
    e53a:	f008 fee1 	bl	17300 <nrf_setsockopt>
	if (ret != 0) {
    e53e:	4604      	mov	r4, r0
    e540:	b188      	cbz	r0, e566 <do_gps_start+0x17a>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e542:	2301      	movs	r3, #1
    e544:	f04f 0600 	mov.w	r6, #0
    e548:	4a1b      	ldr	r2, [pc, #108]	; (e5b8 <do_gps_start+0x1cc>)
    e54a:	f363 0607 	bfi	r6, r3, #0, #8
    e54e:	4b1b      	ldr	r3, [pc, #108]	; (e5bc <do_gps_start+0x1d0>)
    e550:	1a9b      	subs	r3, r3, r2
    e552:	08db      	lsrs	r3, r3, #3
    e554:	f363 168f 	bfi	r6, r3, #6, #10
    e558:	f00d ff50 	bl	1c3fc <z_errno>
    e55c:	6801      	ldr	r1, [r0, #0]
    e55e:	4632      	mov	r2, r6
    e560:	4249      	negs	r1, r1
    e562:	481e      	ldr	r0, [pc, #120]	; (e5dc <do_gps_start+0x1f0>)
    e564:	e7a6      	b.n	e4b4 <do_gps_start+0xc8>
	if (gps_thread_id != NULL) {
    e566:	4e1e      	ldr	r6, [pc, #120]	; (e5e0 <do_gps_start+0x1f4>)
    e568:	6830      	ldr	r0, [r6, #0]
    e56a:	b198      	cbz	r0, e594 <do_gps_start+0x1a8>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    e56c:	f00d fcca 	bl	1bf04 <z_impl_k_thread_resume>
	gps_client_inst.running = true;
    e570:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e572:	88aa      	ldrh	r2, [r5, #4]
    e574:	491b      	ldr	r1, [pc, #108]	; (e5e4 <do_gps_start+0x1f8>)
    e576:	4815      	ldr	r0, [pc, #84]	; (e5cc <do_gps_start+0x1e0>)
	gps_client_inst.running = true;
    e578:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e57a:	f002 fcc9 	bl	10f10 <sprintf>
	gps_client_inst.callback(buf);
    e57e:	68ab      	ldr	r3, [r5, #8]
    e580:	4812      	ldr	r0, [pc, #72]	; (e5cc <do_gps_start+0x1e0>)
    e582:	4798      	blx	r3
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    e584:	f010 fc13 	bl	1edae <z_impl_k_uptime_get>
	ttft_start = k_uptime_get();
    e588:	4b17      	ldr	r3, [pc, #92]	; (e5e8 <do_gps_start+0x1fc>)
    e58a:	e9c3 0100 	strd	r0, r1, [r3]
}
    e58e:	4620      	mov	r0, r4
    e590:	b00b      	add	sp, #44	; 0x2c
    e592:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e594:	230e      	movs	r3, #14
    e596:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e59a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e59e:	e9cd 4400 	strd	r4, r4, [sp]
    e5a2:	4b12      	ldr	r3, [pc, #72]	; (e5ec <do_gps_start+0x200>)
    e5a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e5a8:	4911      	ldr	r1, [pc, #68]	; (e5f0 <do_gps_start+0x204>)
    e5aa:	4812      	ldr	r0, [pc, #72]	; (e5f4 <do_gps_start+0x208>)
    e5ac:	f00d fc36 	bl	1be1c <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    e5b0:	6030      	str	r0, [r6, #0]
    e5b2:	e7dd      	b.n	e570 <do_gps_start+0x184>
    e5b4:	2002013c 	.word	0x2002013c
    e5b8:	0001f328 	.word	0x0001f328
    e5bc:	0001f360 	.word	0x0001f360
    e5c0:	0002021e 	.word	0x0002021e
    e5c4:	000202e2 	.word	0x000202e2
    e5c8:	000202f7 	.word	0x000202f7
    e5cc:	20026503 	.word	0x20026503
    e5d0:	0002023e 	.word	0x0002023e
    e5d4:	00020266 	.word	0x00020266
    e5d8:	00020291 	.word	0x00020291
    e5dc:	000202b3 	.word	0x000202b3
    e5e0:	200201f8 	.word	0x200201f8
    e5e4:	000202d1 	.word	0x000202d1
    e5e8:	20020100 	.word	0x20020100
    e5ec:	0000e6ed 	.word	0x0000e6ed
    e5f0:	200266b8 	.word	0x200266b8
    e5f4:	20020148 	.word	0x20020148

0000e5f8 <handle_at_gpsrun>:
static int handle_at_gpsrun(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    e5f8:	2801      	cmp	r0, #1
{
    e5fa:	b513      	push	{r0, r1, r4, lr}
    e5fc:	4604      	mov	r4, r0
	switch (cmd_type) {
    e5fe:	d004      	beq.n	e60a <handle_at_gpsrun+0x12>
    e600:	2802      	cmp	r0, #2
    e602:	d04c      	beq.n	e69e <handle_at_gpsrun+0xa6>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    e604:	f06f 0415 	mvn.w	r4, #21
    e608:	e02d      	b.n	e666 <handle_at_gpsrun+0x6e>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    e60a:	482e      	ldr	r0, [pc, #184]	; (e6c4 <handle_at_gpsrun+0xcc>)
    e60c:	f010 f913 	bl	1e836 <at_params_valid_count_get>
    e610:	2801      	cmp	r0, #1
    e612:	d9f7      	bls.n	e604 <handle_at_gpsrun+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    e614:	4621      	mov	r1, r4
    e616:	f10d 0206 	add.w	r2, sp, #6
    e61a:	482a      	ldr	r0, [pc, #168]	; (e6c4 <handle_at_gpsrun+0xcc>)
    e61c:	f010 f8d6 	bl	1e7cc <at_params_short_get>
		if (err < 0) {
    e620:	1e04      	subs	r4, r0, #0
    e622:	db20      	blt.n	e666 <handle_at_gpsrun+0x6e>
			return err;
		}
		if (op == 1) {
    e624:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e628:	2b01      	cmp	r3, #1
    e62a:	d123      	bne.n	e674 <handle_at_gpsrun+0x7c>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    e62c:	4825      	ldr	r0, [pc, #148]	; (e6c4 <handle_at_gpsrun+0xcc>)
    e62e:	f010 f902 	bl	1e836 <at_params_valid_count_get>
    e632:	2802      	cmp	r0, #2
    e634:	d906      	bls.n	e644 <handle_at_gpsrun+0x4c>
				err = at_params_short_get(&m_param_list, 2,
    e636:	4a24      	ldr	r2, [pc, #144]	; (e6c8 <handle_at_gpsrun+0xd0>)
    e638:	2102      	movs	r1, #2
    e63a:	4822      	ldr	r0, [pc, #136]	; (e6c4 <handle_at_gpsrun+0xcc>)
    e63c:	f010 f8c6 	bl	1e7cc <at_params_short_get>
							&gps_client_inst.mask);
				if (err < 0) {
    e640:	1e04      	subs	r4, r0, #0
    e642:	db10      	blt.n	e666 <handle_at_gpsrun+0x6e>
					return err;
				}
			}
			if (gps_client_inst.running) {
    e644:	4b21      	ldr	r3, [pc, #132]	; (e6cc <handle_at_gpsrun+0xd4>)
    e646:	799b      	ldrb	r3, [r3, #6]
    e648:	b183      	cbz	r3, e66c <handle_at_gpsrun+0x74>
				LOG_WRN("GPS is running");
    e64a:	2302      	movs	r3, #2
    e64c:	f04f 0100 	mov.w	r1, #0
    e650:	4a1f      	ldr	r2, [pc, #124]	; (e6d0 <handle_at_gpsrun+0xd8>)
    e652:	f363 0107 	bfi	r1, r3, #0, #8
    e656:	4b1f      	ldr	r3, [pc, #124]	; (e6d4 <handle_at_gpsrun+0xdc>)
    e658:	481f      	ldr	r0, [pc, #124]	; (e6d8 <handle_at_gpsrun+0xe0>)
    e65a:	1a9b      	subs	r3, r3, r2
    e65c:	08db      	lsrs	r3, r3, #3
    e65e:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_gps_start();
			}
		} else if (op == 0) {
			if (!gps_client_inst.running) {
				LOG_WRN("GPS is not running");
    e662:	f00e fa5e 	bl	1cb22 <log_0>
	default:
		break;
	}

	return err;
}
    e666:	4620      	mov	r0, r4
    e668:	b002      	add	sp, #8
    e66a:	bd10      	pop	{r4, pc}
				err = do_gps_start();
    e66c:	f7ff febe 	bl	e3ec <do_gps_start>
				err = do_gps_stop();
    e670:	4604      	mov	r4, r0
    e672:	e7f8      	b.n	e666 <handle_at_gpsrun+0x6e>
		} else if (op == 0) {
    e674:	2b00      	cmp	r3, #0
    e676:	d1f6      	bne.n	e666 <handle_at_gpsrun+0x6e>
			if (!gps_client_inst.running) {
    e678:	4b14      	ldr	r3, [pc, #80]	; (e6cc <handle_at_gpsrun+0xd4>)
    e67a:	799b      	ldrb	r3, [r3, #6]
    e67c:	b963      	cbnz	r3, e698 <handle_at_gpsrun+0xa0>
				LOG_WRN("GPS is not running");
    e67e:	2302      	movs	r3, #2
    e680:	f04f 0100 	mov.w	r1, #0
    e684:	4a12      	ldr	r2, [pc, #72]	; (e6d0 <handle_at_gpsrun+0xd8>)
    e686:	f363 0107 	bfi	r1, r3, #0, #8
    e68a:	4b12      	ldr	r3, [pc, #72]	; (e6d4 <handle_at_gpsrun+0xdc>)
    e68c:	4813      	ldr	r0, [pc, #76]	; (e6dc <handle_at_gpsrun+0xe4>)
    e68e:	1a9b      	subs	r3, r3, r2
    e690:	08db      	lsrs	r3, r3, #3
    e692:	f363 118f 	bfi	r1, r3, #6, #10
    e696:	e7e4      	b.n	e662 <handle_at_gpsrun+0x6a>
				err = do_gps_stop();
    e698:	f7ff fe64 	bl	e364 <do_gps_stop>
    e69c:	e7e8      	b.n	e670 <handle_at_gpsrun+0x78>
		if (gps_client_inst.running) {
    e69e:	4c0b      	ldr	r4, [pc, #44]	; (e6cc <handle_at_gpsrun+0xd4>)
    e6a0:	79a3      	ldrb	r3, [r4, #6]
    e6a2:	b14b      	cbz	r3, e6b8 <handle_at_gpsrun+0xc0>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e6a4:	88a2      	ldrh	r2, [r4, #4]
    e6a6:	490e      	ldr	r1, [pc, #56]	; (e6e0 <handle_at_gpsrun+0xe8>)
    e6a8:	480e      	ldr	r0, [pc, #56]	; (e6e4 <handle_at_gpsrun+0xec>)
    e6aa:	f002 fc31 	bl	10f10 <sprintf>
		gps_client_inst.callback(buf);
    e6ae:	68a3      	ldr	r3, [r4, #8]
    e6b0:	480c      	ldr	r0, [pc, #48]	; (e6e4 <handle_at_gpsrun+0xec>)
    e6b2:	4798      	blx	r3
		err = 0;
    e6b4:	2400      	movs	r4, #0
		break;
    e6b6:	e7d6      	b.n	e666 <handle_at_gpsrun+0x6e>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    e6b8:	490b      	ldr	r1, [pc, #44]	; (e6e8 <handle_at_gpsrun+0xf0>)
    e6ba:	480a      	ldr	r0, [pc, #40]	; (e6e4 <handle_at_gpsrun+0xec>)
    e6bc:	f002 fc28 	bl	10f10 <sprintf>
    e6c0:	e7f5      	b.n	e6ae <handle_at_gpsrun+0xb6>
    e6c2:	bf00      	nop
    e6c4:	20020110 	.word	0x20020110
    e6c8:	20020140 	.word	0x20020140
    e6cc:	2002013c 	.word	0x2002013c
    e6d0:	0001f328 	.word	0x0001f328
    e6d4:	0001f360 	.word	0x0001f360
    e6d8:	00020452 	.word	0x00020452
    e6dc:	00020461 	.word	0x00020461
    e6e0:	000202d1 	.word	0x000202d1
    e6e4:	20026503 	.word	0x20026503
    e6e8:	00020323 	.word	0x00020323

0000e6ec <gps_thread_fn>:
{
    e6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e6f0:	4f62      	ldr	r7, [pc, #392]	; (e87c <gps_thread_fn+0x190>)
    e6f2:	4e63      	ldr	r6, [pc, #396]	; (e880 <gps_thread_fn+0x194>)
    e6f4:	463d      	mov	r5, r7
	LOG_INF("NOTIFY!");
    e6f6:	4b63      	ldr	r3, [pc, #396]	; (e884 <gps_thread_fn+0x198>)
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e6f8:	4c63      	ldr	r4, [pc, #396]	; (e888 <gps_thread_fn+0x19c>)
	LOG_INF("NOTIFY!");
    e6fa:	1af6      	subs	r6, r6, r3
    e6fc:	f3c6 06c9 	ubfx	r6, r6, #3, #10
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e700:	2300      	movs	r3, #0
    e702:	22d8      	movs	r2, #216	; 0xd8
    e704:	4960      	ldr	r1, [pc, #384]	; (e888 <gps_thread_fn+0x19c>)
    e706:	6838      	ldr	r0, [r7, #0]
    e708:	f008 fd96 	bl	17238 <nrf_recv>
    e70c:	2800      	cmp	r0, #0
    e70e:	dc21      	bgt.n	e754 <gps_thread_fn+0x68>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    e710:	2301      	movs	r3, #1
    e712:	f04f 0400 	mov.w	r4, #0
    e716:	f363 0407 	bfi	r4, r3, #0, #8
    e71a:	f00d fe6f 	bl	1c3fc <z_errno>
    e71e:	6801      	ldr	r1, [r0, #0]
    e720:	f366 148f 	bfi	r4, r6, #6, #10
    e724:	4622      	mov	r2, r4
    e726:	4249      	negs	r1, r1
    e728:	4858      	ldr	r0, [pc, #352]	; (e88c <gps_thread_fn+0x1a0>)
    e72a:	f00e fa07 	bl	1cb3c <log_1>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    e72e:	f00d fe65 	bl	1c3fc <z_errno>
    e732:	6802      	ldr	r2, [r0, #0]
    e734:	4956      	ldr	r1, [pc, #344]	; (e890 <gps_thread_fn+0x1a4>)
    e736:	4252      	negs	r2, r2
    e738:	4856      	ldr	r0, [pc, #344]	; (e894 <gps_thread_fn+0x1a8>)
    e73a:	f002 fbe9 	bl	10f10 <sprintf>
			gps_client_inst.callback(buf);
    e73e:	68bb      	ldr	r3, [r7, #8]
    e740:	4854      	ldr	r0, [pc, #336]	; (e894 <gps_thread_fn+0x1a8>)
    e742:	4798      	blx	r3
			nrf_close(gps_client_inst.sock);
    e744:	6838      	ldr	r0, [r7, #0]
    e746:	f008 fd17 	bl	17178 <nrf_close>
			gps_client_inst.running = false;
    e74a:	2300      	movs	r3, #0
    e74c:	71bb      	strb	r3, [r7, #6]
}
    e74e:	b004      	add	sp, #16
    e750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || gps_client_inst.has_fix) {
    e754:	7823      	ldrb	r3, [r4, #0]
    e756:	2b01      	cmp	r3, #1
    e758:	d1d2      	bne.n	e700 <gps_thread_fn+0x14>
    e75a:	79f9      	ldrb	r1, [r7, #7]
    e75c:	2900      	cmp	r1, #0
    e75e:	d055      	beq.n	e80c <gps_thread_fn+0x120>
			if (IS_FIX(gps_data.pvt.flags)) {
    e760:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e764:	07db      	lsls	r3, r3, #31
    e766:	d5cb      	bpl.n	e700 <gps_thread_fn+0x14>
	notified = 1;
    e768:	f04f 0901 	mov.w	r9, #1
	LOG_INF("NOTIFY!");
    e76c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    e770:	f043 0303 	orr.w	r3, r3, #3
    e774:	f363 0807 	bfi	r8, r3, #0, #8
    e778:	f366 188f 	bfi	r8, r6, #6, #10
    e77c:	4641      	mov	r1, r8
    e77e:	4846      	ldr	r0, [pc, #280]	; (e898 <gps_thread_fn+0x1ac>)
    e780:	f00e f9cf 	bl	1cb22 <log_0>
	current_location.lat = gps_data.pvt.latitude;
    e784:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
	notified = 1;
    e788:	4b44      	ldr	r3, [pc, #272]	; (e89c <gps_thread_fn+0x1b0>)
	current_location.alt = gps_data.pvt.altitude;
    e78a:	69a2      	ldr	r2, [r4, #24]
	notified = 1;
    e78c:	f883 9000 	strb.w	r9, [r3]
	current_location.lat = gps_data.pvt.latitude;
    e790:	4b43      	ldr	r3, [pc, #268]	; (e8a0 <gps_thread_fn+0x1b4>)
	current_location.alt = gps_data.pvt.altitude;
    e792:	611a      	str	r2, [r3, #16]
	current_location.hdop = gps_data.pvt.hdop;
    e794:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	current_location.lat = gps_data.pvt.latitude;
    e796:	e9c3 0100 	strd	r0, r1, [r3]
	current_location.lon = gps_data.pvt.longitude;
    e79a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
	current_location.hdop = gps_data.pvt.hdop;
    e79e:	615a      	str	r2, [r3, #20]
	current_location.datetime = gps_data.pvt.datetime;
    e7a0:	4a40      	ldr	r2, [pc, #256]	; (e8a4 <gps_thread_fn+0x1b8>)
	current_location.lon = gps_data.pvt.longitude;
    e7a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
	current_location.datetime = gps_data.pvt.datetime;
    e7a6:	ca07      	ldmia	r2, {r0, r1, r2}
    e7a8:	3318      	adds	r3, #24
    e7aa:	c303      	stmia	r3!, {r0, r1}
	gps_client_inst.callback(buf);
    e7ac:	4839      	ldr	r0, [pc, #228]	; (e894 <gps_thread_fn+0x1a8>)
	current_location.datetime = gps_data.pvt.datetime;
    e7ae:	801a      	strh	r2, [r3, #0]
	gps_client_inst.callback(buf);
    e7b0:	68ab      	ldr	r3, [r5, #8]
    e7b2:	4798      	blx	r3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    e7b4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e7b8:	493b      	ldr	r1, [pc, #236]	; (e8a8 <gps_thread_fn+0x1bc>)
    e7ba:	9303      	str	r3, [sp, #12]
    e7bc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    e7c0:	4834      	ldr	r0, [pc, #208]	; (e894 <gps_thread_fn+0x1a8>)
    e7c2:	9302      	str	r3, [sp, #8]
    e7c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e7c8:	9301      	str	r3, [sp, #4]
    e7ca:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    e7ce:	9300      	str	r3, [sp, #0]
    e7d0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e7d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e7d6:	f002 fb9b 	bl	10f10 <sprintf>
	gps_client_inst.callback(buf);
    e7da:	68ab      	ldr	r3, [r5, #8]
    e7dc:	482d      	ldr	r0, [pc, #180]	; (e894 <gps_thread_fn+0x1a8>)
    e7de:	4798      	blx	r3
				if (!gps_client_inst.has_fix) {
    e7e0:	79eb      	ldrb	r3, [r5, #7]
    e7e2:	2b00      	cmp	r3, #0
    e7e4:	d18c      	bne.n	e700 <gps_thread_fn+0x14>
	return z_impl_k_uptime_get();
    e7e6:	f010 fae2 	bl	1edae <z_impl_k_uptime_get>
						(int)(now - ttft_start)/1000);
    e7ea:	4b30      	ldr	r3, [pc, #192]	; (e8ac <gps_thread_fn+0x1c0>)
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e7ec:	4930      	ldr	r1, [pc, #192]	; (e8b0 <gps_thread_fn+0x1c4>)
						(int)(now - ttft_start)/1000);
    e7ee:	681a      	ldr	r2, [r3, #0]
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e7f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
						(int)(now - ttft_start)/1000);
    e7f4:	1a82      	subs	r2, r0, r2
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e7f6:	fb92 f2f3 	sdiv	r2, r2, r3
    e7fa:	4826      	ldr	r0, [pc, #152]	; (e894 <gps_thread_fn+0x1a8>)
    e7fc:	f002 fb88 	bl	10f10 <sprintf>
					gps_client_inst.callback(buf);
    e800:	68ab      	ldr	r3, [r5, #8]
    e802:	4824      	ldr	r0, [pc, #144]	; (e894 <gps_thread_fn+0x1a8>)
    e804:	4798      	blx	r3
					gps_client_inst.has_fix = true;
    e806:	f885 9007 	strb.w	r9, [r5, #7]
    e80a:	e779      	b.n	e700 <gps_thread_fn+0x14>
	u8_t in_fix = 0;
    e80c:	460b      	mov	r3, r1
	u8_t tracked = 0;
    e80e:	4689      	mov	r9, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e810:	4608      	mov	r0, r1
    e812:	4a1d      	ldr	r2, [pc, #116]	; (e888 <gps_thread_fn+0x19c>)
		if ((gps_data.pvt.sv[i].sv > 0) &&
    e814:	f8b2 c046 	ldrh.w	ip, [r2, #70]	; 0x46
    e818:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    e81c:	f1bc 0f1f 	cmp.w	ip, #31
    e820:	d810      	bhi.n	e844 <gps_thread_fn+0x158>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e822:	f892 c050 	ldrb.w	ip, [r2, #80]	; 0x50
			tracked++;
    e826:	f109 0901 	add.w	r9, r9, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e82a:	f01c 0f01 	tst.w	ip, #1
				in_fix++;
    e82e:	bf1c      	itt	ne
    e830:	3301      	addne	r3, #1
    e832:	b2db      	uxtbne	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    e834:	f01c 0f08 	tst.w	ip, #8
				unhealthy++;
    e838:	bf18      	it	ne
    e83a:	3101      	addne	r1, #1
			tracked++;
    e83c:	fa5f f989 	uxtb.w	r9, r9
				unhealthy++;
    e840:	bf18      	it	ne
    e842:	b2c9      	uxtbne	r1, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e844:	3001      	adds	r0, #1
    e846:	280c      	cmp	r0, #12
    e848:	f102 020c 	add.w	r2, r2, #12
    e84c:	d1e2      	bne.n	e814 <gps_thread_fn+0x128>
	if (last_tracked != tracked) {
    e84e:	f8df a068 	ldr.w	sl, [pc, #104]	; e8b8 <gps_thread_fn+0x1cc>
    e852:	f89a 2000 	ldrb.w	r2, [sl]
    e856:	454a      	cmp	r2, r9
    e858:	d082      	beq.n	e760 <gps_thread_fn+0x74>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    e85a:	9100      	str	r1, [sp, #0]
    e85c:	464a      	mov	r2, r9
    e85e:	4915      	ldr	r1, [pc, #84]	; (e8b4 <gps_thread_fn+0x1c8>)
    e860:	480c      	ldr	r0, [pc, #48]	; (e894 <gps_thread_fn+0x1a8>)
    e862:	f002 fb55 	bl	10f10 <sprintf>
		gps_client_inst.callback(buf);
    e866:	68ab      	ldr	r3, [r5, #8]
    e868:	480a      	ldr	r0, [pc, #40]	; (e894 <gps_thread_fn+0x1a8>)
    e86a:	4798      	blx	r3
		switch (gps_data.data_id) {
    e86c:	7823      	ldrb	r3, [r4, #0]
		last_tracked = tracked;
    e86e:	f88a 9000 	strb.w	r9, [sl]
		switch (gps_data.data_id) {
    e872:	2b01      	cmp	r3, #1
    e874:	f43f af74 	beq.w	e760 <gps_thread_fn+0x74>
    e878:	e742      	b.n	e700 <gps_thread_fn+0x14>
    e87a:	bf00      	nop
    e87c:	2002013c 	.word	0x2002013c
    e880:	0001f360 	.word	0x0001f360
    e884:	0001f328 	.word	0x0001f328
    e888:	20020028 	.word	0x20020028
    e88c:	000203d1 	.word	0x000203d1
    e890:	000202f7 	.word	0x000202f7
    e894:	20026503 	.word	0x20026503
    e898:	00020410 	.word	0x00020410
    e89c:	20026544 	.word	0x20026544
    e8a0:	20020000 	.word	0x20020000
    e8a4:	20020050 	.word	0x20020050
    e8a8:	00020418 	.word	0x00020418
    e8ac:	20020100 	.word	0x20020100
    e8b0:	00020440 	.word	0x00020440
    e8b4:	000203e4 	.word	0x000203e4
    e8b8:	20026543 	.word	0x20026543

0000e8bc <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const char *at_cmd)
{
    e8bc:	b538      	push	{r3, r4, r5, lr}
    e8be:	4604      	mov	r4, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_gps_at_list[i].string);
    e8c0:	481a      	ldr	r0, [pc, #104]	; (e92c <slm_at_gps_parse+0x70>)
    e8c2:	f00e fe69 	bl	1d598 <strlen>
    e8c6:	2300      	movs	r3, #0
    e8c8:	4918      	ldr	r1, [pc, #96]	; (e92c <slm_at_gps_parse+0x70>)
    e8ca:	b2c0      	uxtb	r0, r0
    e8cc:	4283      	cmp	r3, r0
    e8ce:	db17      	blt.n	e900 <slm_at_gps_parse+0x44>

		if (slm_at_cmd_cmp(at_cmd, m_gps_at_list[i].string, cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    e8d0:	2100      	movs	r1, #0
    e8d2:	4a17      	ldr	r2, [pc, #92]	; (e930 <slm_at_gps_parse+0x74>)
    e8d4:	4620      	mov	r0, r4
    e8d6:	f00f fe7f 	bl	1e5d8 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    e8da:	1e01      	subs	r1, r0, #0
    e8dc:	da1c      	bge.n	e918 <slm_at_gps_parse+0x5c>
				LOG_ERR("Failed to parse AT command %d", ret);
    e8de:	2301      	movs	r3, #1
    e8e0:	f04f 0200 	mov.w	r2, #0
    e8e4:	4813      	ldr	r0, [pc, #76]	; (e934 <slm_at_gps_parse+0x78>)
    e8e6:	f363 0207 	bfi	r2, r3, #0, #8
    e8ea:	4b13      	ldr	r3, [pc, #76]	; (e938 <slm_at_gps_parse+0x7c>)
    e8ec:	1a1b      	subs	r3, r3, r0
    e8ee:	08db      	lsrs	r3, r3, #3
    e8f0:	4812      	ldr	r0, [pc, #72]	; (e93c <slm_at_gps_parse+0x80>)
    e8f2:	f363 128f 	bfi	r2, r3, #6, #10
    e8f6:	f00e f921 	bl	1cb3c <log_1>
				return -EINVAL;
    e8fa:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    e8fe:	bd38      	pop	{r3, r4, r5, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    e900:	5ce2      	ldrb	r2, [r4, r3]
    e902:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
    e906:	2d19      	cmp	r5, #25
    e908:	f811 5b01 	ldrb.w	r5, [r1], #1
    e90c:	bf98      	it	ls
    e90e:	3a20      	subls	r2, #32
    e910:	4295      	cmp	r5, r2
    e912:	d108      	bne.n	e926 <slm_at_gps_parse+0x6a>
	for (int i = 0; i < length; i++) {
    e914:	3301      	adds	r3, #1
    e916:	e7d9      	b.n	e8cc <slm_at_gps_parse+0x10>
			type = at_parser_cmd_type_get(at_cmd);
    e918:	4620      	mov	r0, r4
    e91a:	f00f fe60 	bl	1e5de <at_parser_cmd_type_get>
}
    e91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_gps_at_list[i].handler(type);
    e922:	f7ff be69 	b.w	e5f8 <handle_at_gpsrun>
	int ret = -ENOTSUP;
    e926:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e92a:	e7e8      	b.n	e8fe <slm_at_gps_parse+0x42>
    e92c:	00020498 	.word	0x00020498
    e930:	20020110 	.word	0x20020110
    e934:	0001f328 	.word	0x0001f328
    e938:	0001f360 	.word	0x0001f360
    e93c:	0001f981 	.word	0x0001f981

0000e940 <slm_at_gps_init>:
///////////////////////////////////////////////////////////////////////////

/**@brief API to initialize GPS AT commands handler
 */
int slm_at_gps_init(at_cmd_handler_t callback)
{
    e940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e944:	4b40      	ldr	r3, [pc, #256]	; (ea48 <slm_at_gps_init+0x108>)
    e946:	4c41      	ldr	r4, [pc, #260]	; (ea4c <slm_at_gps_init+0x10c>)
    e948:	1ae4      	subs	r4, r4, r3
    e94a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e94e:	b970      	cbnz	r0, e96e <slm_at_gps_init+0x2e>
		LOG_ERR("No callback");
    e950:	2301      	movs	r3, #1
    e952:	f04f 0100 	mov.w	r1, #0
    e956:	f363 0107 	bfi	r1, r3, #0, #8
    e95a:	483d      	ldr	r0, [pc, #244]	; (ea50 <slm_at_gps_init+0x110>)
    e95c:	f364 118f 	bfi	r1, r4, #6, #10
    e960:	f00e f8df 	bl	1cb22 <log_0>
		return -EINVAL;
    e964:	f06f 0015 	mvn.w	r0, #21
	enable_gps();
	do_gps_start();
	//////////////////////////////////////////////////////////////////////

	return 0;
}
    e968:	b003      	add	sp, #12
    e96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e96e:	2201      	movs	r2, #1
    e970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	gps_thread_id = NULL;
    e974:	2500      	movs	r5, #0
	gps_client_inst.sock = INVALID_SOCKET;
    e976:	4b37      	ldr	r3, [pc, #220]	; (ea54 <slm_at_gps_init+0x114>)
	return socket_ops->socket(family, type, proto);
    e978:	4f37      	ldr	r7, [pc, #220]	; (ea58 <slm_at_gps_init+0x118>)
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e97a:	e9c3 1200 	strd	r1, r2, [r3]
	gps_client_inst.callback = callback;
    e97e:	6098      	str	r0, [r3, #8]
	gps_thread_id = NULL;
    e980:	4b36      	ldr	r3, [pc, #216]	; (ea5c <slm_at_gps_init+0x11c>)
	LOG_INF("Initializing GPS Module");
    e982:	f04f 0100 	mov.w	r1, #0
	gps_thread_id = NULL;
    e986:	601d      	str	r5, [r3, #0]
	LOG_INF("Initializing GPS Module");
    e988:	2303      	movs	r3, #3
    e98a:	f363 0107 	bfi	r1, r3, #0, #8
    e98e:	f364 118f 	bfi	r1, r4, #6, #10
    e992:	4833      	ldr	r0, [pc, #204]	; (ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>)
    e994:	f00e f8c5 	bl	1cb22 <log_0>
    e998:	683b      	ldr	r3, [r7, #0]
    e99a:	f240 2201 	movw	r2, #513	; 0x201
    e99e:	681b      	ldr	r3, [r3, #0]
    e9a0:	4629      	mov	r1, r5
    e9a2:	2066      	movs	r0, #102	; 0x66
    e9a4:	4798      	blx	r3
	if (at_sock < 0) {
    e9a6:	1e06      	subs	r6, r0, #0
    e9a8:	46b8      	mov	r8, r7
    e9aa:	db20      	blt.n	e9ee <slm_at_gps_init+0xae>
    e9ac:	4f2d      	ldr	r7, [pc, #180]	; (ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>)
		if (memcmp(buf, "OK", 2) != 0) {
    e9ae:	f8df a0c0 	ldr.w	sl, [pc, #192]	; ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
		LOG_INF("%s",gps_at_commands[i]);
    e9b2:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    e9b6:	f043 0303 	orr.w	r3, r3, #3
    e9ba:	f363 0907 	bfi	r9, r3, #0, #8
    e9be:	f364 198f 	bfi	r9, r4, #6, #10
    e9c2:	464a      	mov	r2, r9
    e9c4:	4639      	mov	r1, r7
    e9c6:	4828      	ldr	r0, [pc, #160]	; (ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>)
    e9c8:	f00e f8b8 	bl	1cb3c <log_1>
		bytes_sent = send(at_sock, gps_at_commands[i],
    e9cc:	4638      	mov	r0, r7
    e9ce:	f00e fde3 	bl	1d598 <strlen>
	return socket_ops->send(sock, buf, len, flags);
    e9d2:	f8d8 3000 	ldr.w	r3, [r8]
    e9d6:	4602      	mov	r2, r0
    e9d8:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    e9dc:	4639      	mov	r1, r7
    e9de:	2300      	movs	r3, #0
    e9e0:	4630      	mov	r0, r6
    e9e2:	47d8      	blx	fp
		if (bytes_sent < 0) {
    e9e4:	2800      	cmp	r0, #0
    e9e6:	da06      	bge.n	e9f6 <slm_at_gps_init+0xb6>
			close(at_sock);
    e9e8:	4630      	mov	r0, r6
    e9ea:	f7ff fcb5 	bl	e358 <close>
	do_gps_start();
    e9ee:	f7ff fcfd 	bl	e3ec <do_gps_start>
	return 0;
    e9f2:	2000      	movs	r0, #0
    e9f4:	e7b8      	b.n	e968 <slm_at_gps_init+0x28>
	return socket_ops->recv(sock, buf, max_len, flags);
    e9f6:	f8d8 3000 	ldr.w	r3, [r8]
    e9fa:	2202      	movs	r2, #2
    e9fc:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    ea00:	a901      	add	r1, sp, #4
    ea02:	2300      	movs	r3, #0
    ea04:	4630      	mov	r0, r6
    ea06:	47d8      	blx	fp
		} while (bytes_received == 0);
    ea08:	2800      	cmp	r0, #0
    ea0a:	d0f4      	beq.n	e9f6 <slm_at_gps_init+0xb6>
		if (memcmp(buf, "OK", 2) != 0) {
    ea0c:	2202      	movs	r2, #2
    ea0e:	4651      	mov	r1, sl
    ea10:	a801      	add	r0, sp, #4
    ea12:	f00e fdec 	bl	1d5ee <memcmp>
    ea16:	2800      	cmp	r0, #0
    ea18:	d1e6      	bne.n	e9e8 <slm_at_gps_init+0xa8>
	return z_impl_k_sleep(ms);
    ea1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    ea1e:	3501      	adds	r5, #1
    ea20:	f00d f912 	bl	1bc48 <z_impl_k_sleep>
    ea24:	2d04      	cmp	r5, #4
    ea26:	f107 0728 	add.w	r7, r7, #40	; 0x28
    ea2a:	d1c2      	bne.n	e9b2 <slm_at_gps_init+0x72>
	close(at_sock);
    ea2c:	4630      	mov	r0, r6
    ea2e:	f7ff fc93 	bl	e358 <close>
	LOG_INF("GPS Enabled");
    ea32:	2303      	movs	r3, #3
    ea34:	f04f 0100 	mov.w	r1, #0
    ea38:	f363 0107 	bfi	r1, r3, #0, #8
    ea3c:	f364 118f 	bfi	r1, r4, #6, #10
    ea40:	480a      	ldr	r0, [pc, #40]	; (ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>)
    ea42:	f00e f86e 	bl	1cb22 <log_0>
	return 0;
    ea46:	e7d2      	b.n	e9ee <slm_at_gps_init+0xae>
    ea48:	0001f328 	.word	0x0001f328
    ea4c:	0001f360 	.word	0x0001f360
    ea50:	00020145 	.word	0x00020145
    ea54:	2002013c 	.word	0x2002013c
    ea58:	20020344 	.word	0x20020344
    ea5c:	200201f8 	.word	0x200201f8
    ea60:	00020474 	.word	0x00020474
    ea64:	00020331 	.word	0x00020331
    ea68:	00020d3a 	.word	0x00020d3a
    ea6c:	0002048c 	.word	0x0002048c
    ea70:	0002017f 	.word	0x0002017f

0000ea74 <slm_at_gps_uninit>:

/**@brief API to uninitialize GPS AT commands handler
 */
int slm_at_gps_uninit(void)
{
    ea74:	b510      	push	{r4, lr}
	if (gps_thread_id != NULL) {
    ea76:	4c06      	ldr	r4, [pc, #24]	; (ea90 <slm_at_gps_uninit+0x1c>)
    ea78:	6823      	ldr	r3, [r4, #0]
    ea7a:	b133      	cbz	r3, ea8a <slm_at_gps_uninit+0x16>
		do_gps_stop();
    ea7c:	f7ff fc72 	bl	e364 <do_gps_stop>
		k_thread_abort(gps_thread_id);
    ea80:	6820      	ldr	r0, [r4, #0]
	z_impl_k_thread_abort(thread);
    ea82:	f001 fb5b 	bl	1013c <z_impl_k_thread_abort>
		gps_thread_id = NULL;
    ea86:	2300      	movs	r3, #0
    ea88:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    ea8a:	2000      	movs	r0, #0
    ea8c:	bd10      	pop	{r4, pc}
    ea8e:	bf00      	nop
    ea90:	200201f8 	.word	0x200201f8

0000ea94 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    ea94:	680b      	ldr	r3, [r1, #0]
    ea96:	3301      	adds	r3, #1
    ea98:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    ea9a:	4b01      	ldr	r3, [pc, #4]	; (eaa0 <char_out+0xc>)
    ea9c:	681b      	ldr	r3, [r3, #0]
    ea9e:	4718      	bx	r3
    eaa0:	2002c50c 	.word	0x2002c50c

0000eaa4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eaa8:	b085      	sub	sp, #20
    eaaa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    eaac:	469b      	mov	fp, r3
    eaae:	2c01      	cmp	r4, #1
    eab0:	bfb8      	it	lt
    eab2:	2401      	movlt	r4, #1
    eab4:	2b01      	cmp	r3, #1
    eab6:	bf0c      	ite	eq
    eab8:	2330      	moveq	r3, #48	; 0x30
    eaba:	2320      	movne	r3, #32
    eabc:	4616      	mov	r6, r2
    eabe:	4682      	mov	sl, r0
    eac0:	4688      	mov	r8, r1
    eac2:	2501      	movs	r5, #1
    eac4:	270a      	movs	r7, #10
    eac6:	2200      	movs	r2, #0
    eac8:	f8df 906c 	ldr.w	r9, [pc, #108]	; eb38 <_printk_dec_ulong+0x94>
    eacc:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    eace:	fbb6 f3f9 	udiv	r3, r6, r9
    ead2:	9301      	str	r3, [sp, #4]
    ead4:	b90a      	cbnz	r2, eada <_printk_dec_ulong+0x36>
    ead6:	45b1      	cmp	r9, r6
    ead8:	d81c      	bhi.n	eb14 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    eada:	9b01      	ldr	r3, [sp, #4]
    eadc:	4641      	mov	r1, r8
    eade:	f103 0030 	add.w	r0, r3, #48	; 0x30
    eae2:	47d0      	blx	sl
			found_largest_digit = 1;
    eae4:	2201      	movs	r2, #1
			digits++;
    eae6:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    eae8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    eaea:	3f01      	subs	r7, #1
		remainder %= pos;
    eaec:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    eaf0:	230a      	movs	r3, #10
	while (pos >= 10) {
    eaf2:	2f01      	cmp	r7, #1
		pos /= 10;
    eaf4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    eaf8:	d1e9      	bne.n	eace <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    eafa:	4641      	mov	r1, r8
    eafc:	f106 0030 	add.w	r0, r6, #48	; 0x30
    eb00:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    eb02:	f1bb 0f03 	cmp.w	fp, #3
    eb06:	d102      	bne.n	eb0e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    eb08:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    eb0a:	2c00      	cmp	r4, #0
    eb0c:	dc0e      	bgt.n	eb2c <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    eb0e:	b005      	add	sp, #20
    eb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    eb14:	42bc      	cmp	r4, r7
    eb16:	dbe7      	blt.n	eae8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    eb18:	f1bb 0f02 	cmp.w	fp, #2
    eb1c:	d8e4      	bhi.n	eae8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    eb1e:	4641      	mov	r1, r8
    eb20:	9802      	ldr	r0, [sp, #8]
    eb22:	9203      	str	r2, [sp, #12]
			digits++;
    eb24:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    eb26:	47d0      	blx	sl
			digits++;
    eb28:	9a03      	ldr	r2, [sp, #12]
    eb2a:	e7dd      	b.n	eae8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    eb2c:	4641      	mov	r1, r8
    eb2e:	2020      	movs	r0, #32
    eb30:	47d0      	blx	sl
    eb32:	3c01      	subs	r4, #1
    eb34:	e7e9      	b.n	eb0a <_printk_dec_ulong+0x66>
    eb36:	bf00      	nop
    eb38:	3b9aca00 	.word	0x3b9aca00

0000eb3c <__printk_hook_install>:
	_char_out = fn;
    eb3c:	4b01      	ldr	r3, [pc, #4]	; (eb44 <__printk_hook_install+0x8>)
    eb3e:	6018      	str	r0, [r3, #0]
}
    eb40:	4770      	bx	lr
    eb42:	bf00      	nop
    eb44:	2002c50c 	.word	0x2002c50c

0000eb48 <vprintk>:
	struct out_context ctx = { 0 };
    eb48:	2300      	movs	r3, #0
{
    eb4a:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    eb4c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    eb4e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    eb50:	4803      	ldr	r0, [pc, #12]	; (eb60 <vprintk+0x18>)
    eb52:	460b      	mov	r3, r1
    eb54:	a901      	add	r1, sp, #4
    eb56:	f00d fe41 	bl	1c7dc <z_vprintk>
}
    eb5a:	b003      	add	sp, #12
    eb5c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb60:	0000ea95 	.word	0x0000ea95

0000eb64 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    eb64:	f04f 0220 	mov.w	r2, #32
    eb68:	f3ef 8311 	mrs	r3, BASEPRI
    eb6c:	f382 8811 	msr	BASEPRI, r2
    eb70:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    eb74:	2101      	movs	r1, #1
    eb76:	4a04      	ldr	r2, [pc, #16]	; (eb88 <nordicsemi_nrf91_init+0x24>)
    eb78:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    eb7c:	f383 8811 	msr	BASEPRI, r3
    eb80:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    eb84:	2000      	movs	r0, #0
    eb86:	4770      	bx	lr
    eb88:	40039000 	.word	0x40039000

0000eb8c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    eb8c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    eb8e:	2200      	movs	r2, #0
{
    eb90:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    eb92:	490d      	ldr	r1, [pc, #52]	; (ebc8 <enable_logger+0x3c>)
    eb94:	480d      	ldr	r0, [pc, #52]	; (ebcc <enable_logger+0x40>)
    eb96:	f010 f918 	bl	1edca <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    eb9a:	2400      	movs	r4, #0
    eb9c:	230e      	movs	r3, #14
    eb9e:	4d0c      	ldr	r5, [pc, #48]	; (ebd0 <enable_logger+0x44>)
    eba0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    eba4:	e9cd 4404 	strd	r4, r4, [sp, #16]
    eba8:	e9cd 4400 	strd	r4, r4, [sp]
    ebac:	4b09      	ldr	r3, [pc, #36]	; (ebd4 <enable_logger+0x48>)
    ebae:	f44f 7240 	mov.w	r2, #768	; 0x300
    ebb2:	4909      	ldr	r1, [pc, #36]	; (ebd8 <enable_logger+0x4c>)
    ebb4:	4628      	mov	r0, r5
    ebb6:	f00d f931 	bl	1be1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    ebba:	4908      	ldr	r1, [pc, #32]	; (ebdc <enable_logger+0x50>)
    ebbc:	4628      	mov	r0, r5
    ebbe:	f010 f86d 	bl	1ec9c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    ebc2:	4620      	mov	r0, r4
    ebc4:	b007      	add	sp, #28
    ebc6:	bd30      	pop	{r4, r5, pc}
    ebc8:	0000ebe1 	.word	0x0000ebe1
    ebcc:	20020210 	.word	0x20020210
    ebd0:	20020258 	.word	0x20020258
    ebd4:	0000eec1 	.word	0x0000eec1
    ebd8:	20026ab8 	.word	0x20026ab8
    ebdc:	000204ba 	.word	0x000204ba

0000ebe0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ebe0:	4801      	ldr	r0, [pc, #4]	; (ebe8 <log_process_thread_timer_expiry_fn+0x8>)
    ebe2:	f00d b85f 	b.w	1bca4 <z_impl_k_sem_give>
    ebe6:	bf00      	nop
    ebe8:	2002c688 	.word	0x2002c688

0000ebec <log_core_init>:
{
    ebec:	b508      	push	{r3, lr}
		log_msg_pool_init();
    ebee:	f000 f9df 	bl	efb0 <log_msg_pool_init>
		log_list_init(&list);
    ebf2:	4809      	ldr	r0, [pc, #36]	; (ec18 <log_core_init+0x2c>)
    ebf4:	f00d ff72 	bl	1cadc <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    ebf8:	2304      	movs	r3, #4
    ebfa:	2234      	movs	r2, #52	; 0x34
    ebfc:	4807      	ldr	r0, [pc, #28]	; (ec1c <log_core_init+0x30>)
    ebfe:	4908      	ldr	r1, [pc, #32]	; (ec20 <log_core_init+0x34>)
    ec00:	f00f fe31 	bl	1e866 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    ec04:	4b07      	ldr	r3, [pc, #28]	; (ec24 <log_core_init+0x38>)
    ec06:	4a08      	ldr	r2, [pc, #32]	; (ec28 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    ec08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    ec0c:	601a      	str	r2, [r3, #0]
}
    ec0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    ec12:	f000 bbfd 	b.w	f410 <log_output_timestamp_freq_set>
    ec16:	bf00      	nop
    ec18:	20020208 	.word	0x20020208
    ec1c:	2002023c 	.word	0x2002023c
    ec20:	2002aaf8 	.word	0x2002aaf8
    ec24:	2002c510 	.word	0x2002c510
    ec28:	0001cb1b 	.word	0x0001cb1b

0000ec2c <dropped_notify>:
{
    ec2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ec2e:	2500      	movs	r5, #0
    ec30:	4b0c      	ldr	r3, [pc, #48]	; (ec64 <dropped_notify+0x38>)
    ec32:	e8d3 7fef 	ldaex	r7, [r3]
    ec36:	e8c3 5fe2 	stlex	r2, r5, [r3]
    ec3a:	2a00      	cmp	r2, #0
    ec3c:	d1f9      	bne.n	ec32 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    ec3e:	4c0a      	ldr	r4, [pc, #40]	; (ec68 <dropped_notify+0x3c>)
    ec40:	4e0a      	ldr	r6, [pc, #40]	; (ec6c <dropped_notify+0x40>)
    ec42:	1b36      	subs	r6, r6, r4
    ec44:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ec46:	42b5      	cmp	r5, r6
    ec48:	db00      	blt.n	ec4c <dropped_notify+0x20>
}
    ec4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ec4c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ec4e:	795b      	ldrb	r3, [r3, #5]
    ec50:	b12b      	cbz	r3, ec5e <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    ec52:	6823      	ldr	r3, [r4, #0]
    ec54:	68db      	ldr	r3, [r3, #12]
    ec56:	b113      	cbz	r3, ec5e <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    ec58:	4639      	mov	r1, r7
    ec5a:	4620      	mov	r0, r4
    ec5c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ec5e:	3501      	adds	r5, #1
    ec60:	3410      	adds	r4, #16
    ec62:	e7f0      	b.n	ec46 <dropped_notify+0x1a>
    ec64:	20020200 	.word	0x20020200
    ec68:	0001f3b0 	.word	0x0001f3b0
    ec6c:	0001f3c0 	.word	0x0001f3c0

0000ec70 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    ec70:	4b22      	ldr	r3, [pc, #136]	; (ecfc <z_impl_log_process+0x8c>)
{
    ec72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!backend_attached && !bypass) {
    ec76:	781b      	ldrb	r3, [r3, #0]
{
    ec78:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    ec7a:	b903      	cbnz	r3, ec7e <z_impl_log_process+0xe>
    ec7c:	b340      	cbz	r0, ecd0 <z_impl_log_process+0x60>
	__asm__ volatile(
    ec7e:	f04f 0320 	mov.w	r3, #32
    ec82:	f3ef 8411 	mrs	r4, BASEPRI
    ec86:	f383 8811 	msr	BASEPRI, r3
    ec8a:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ec8e:	481c      	ldr	r0, [pc, #112]	; (ed00 <z_impl_log_process+0x90>)
    ec90:	f00d ff34 	bl	1cafc <log_list_head_get>
    ec94:	4607      	mov	r7, r0
	__asm__ volatile(
    ec96:	f384 8811 	msr	BASEPRI, r4
    ec9a:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ec9e:	b158      	cbz	r0, ecb8 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    eca0:	4b18      	ldr	r3, [pc, #96]	; (ed04 <z_impl_log_process+0x94>)
    eca2:	e8d3 2fef 	ldaex	r2, [r3]
    eca6:	3a01      	subs	r2, #1
    eca8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ecac:	2900      	cmp	r1, #0
    ecae:	d1f8      	bne.n	eca2 <z_impl_log_process+0x32>
	if (!bypass) {
    ecb0:	b18d      	cbz	r5, ecd6 <z_impl_log_process+0x66>
	log_msg_put(msg);
    ecb2:	4638      	mov	r0, r7
    ecb4:	f00e f80f 	bl	1ccd6 <log_msg_put>
	if (!bypass && dropped_cnt) {
    ecb8:	b925      	cbnz	r5, ecc4 <z_impl_log_process+0x54>
    ecba:	4b13      	ldr	r3, [pc, #76]	; (ed08 <z_impl_log_process+0x98>)
    ecbc:	681b      	ldr	r3, [r3, #0]
    ecbe:	b10b      	cbz	r3, ecc4 <z_impl_log_process+0x54>
		dropped_notify();
    ecc0:	f7ff ffb4 	bl	ec2c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ecc4:	480e      	ldr	r0, [pc, #56]	; (ed00 <z_impl_log_process+0x90>)
    ecc6:	f00d ff17 	bl	1caf8 <log_list_head_peek>
    ecca:	1c05      	adds	r5, r0, #0
    eccc:	bf18      	it	ne
    ecce:	2501      	movne	r5, #1
}
    ecd0:	4628      	mov	r0, r5
    ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (int i = 0; i < log_backend_count_get(); i++) {
    ecd6:	46a8      	mov	r8, r5
	return __log_backends_end - __log_backends_start;
    ecd8:	4c0c      	ldr	r4, [pc, #48]	; (ed0c <z_impl_log_process+0x9c>)
    ecda:	4e0d      	ldr	r6, [pc, #52]	; (ed10 <z_impl_log_process+0xa0>)
    ecdc:	1b36      	subs	r6, r6, r4
    ecde:	1136      	asrs	r6, r6, #4
    ece0:	45b0      	cmp	r8, r6
    ece2:	dae6      	bge.n	ecb2 <z_impl_log_process+0x42>
	return backend->cb->active;
    ece4:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    ece6:	795b      	ldrb	r3, [r3, #5]
    ece8:	b123      	cbz	r3, ecf4 <z_impl_log_process+0x84>
	backend->api->put(backend, msg);
    ecea:	6823      	ldr	r3, [r4, #0]
    ecec:	4639      	mov	r1, r7
    ecee:	681b      	ldr	r3, [r3, #0]
    ecf0:	4620      	mov	r0, r4
    ecf2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    ecf4:	f108 0801 	add.w	r8, r8, #1
    ecf8:	3410      	adds	r4, #16
    ecfa:	e7f1      	b.n	ece0 <z_impl_log_process+0x70>
    ecfc:	20026545 	.word	0x20026545
    ed00:	20020208 	.word	0x20020208
    ed04:	200201fc 	.word	0x200201fc
    ed08:	20020200 	.word	0x20020200
    ed0c:	0001f3b0 	.word	0x0001f3b0
    ed10:	0001f3c0 	.word	0x0001f3c0

0000ed14 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    ed14:	4b24      	ldr	r3, [pc, #144]	; (eda8 <msg_finalize+0x94>)
{
    ed16:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    ed18:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    ed1a:	8141      	strh	r1, [r0, #10]
{
    ed1c:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    ed1e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ed20:	4c22      	ldr	r4, [pc, #136]	; (edac <msg_finalize+0x98>)
    ed22:	60e8      	str	r0, [r5, #12]
    ed24:	e8d4 3fef 	ldaex	r3, [r4]
    ed28:	3301      	adds	r3, #1
    ed2a:	e8c4 3fe2 	stlex	r2, r3, [r4]
    ed2e:	2a00      	cmp	r2, #0
    ed30:	d1f8      	bne.n	ed24 <msg_finalize+0x10>
	__asm__ volatile(
    ed32:	f04f 0320 	mov.w	r3, #32
    ed36:	f3ef 8611 	mrs	r6, BASEPRI
    ed3a:	f383 8811 	msr	BASEPRI, r3
    ed3e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    ed42:	481b      	ldr	r0, [pc, #108]	; (edb0 <msg_finalize+0x9c>)
    ed44:	4629      	mov	r1, r5
    ed46:	f00d fecd 	bl	1cae4 <log_list_add_tail>
	__asm__ volatile(
    ed4a:	f386 8811 	msr	BASEPRI, r6
    ed4e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    ed52:	4b18      	ldr	r3, [pc, #96]	; (edb4 <msg_finalize+0xa0>)
    ed54:	781a      	ldrb	r2, [r3, #0]
    ed56:	b17a      	cbz	r2, ed78 <msg_finalize+0x64>
	__asm__ volatile(
    ed58:	f04f 0320 	mov.w	r3, #32
    ed5c:	f3ef 8411 	mrs	r4, BASEPRI
    ed60:	f383 8811 	msr	BASEPRI, r3
    ed64:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    ed68:	2000      	movs	r0, #0
    ed6a:	f7ff ff81 	bl	ec70 <z_impl_log_process>
	__asm__ volatile(
    ed6e:	f384 8811 	msr	BASEPRI, r4
    ed72:	f3bf 8f6f 	isb	sy
}
    ed76:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    ed78:	490f      	ldr	r1, [pc, #60]	; (edb8 <msg_finalize+0xa4>)
    ed7a:	6823      	ldr	r3, [r4, #0]
    ed7c:	6809      	ldr	r1, [r1, #0]
    ed7e:	2900      	cmp	r1, #0
    ed80:	d0f9      	beq.n	ed76 <msg_finalize+0x62>
    ed82:	2b01      	cmp	r3, #1
    ed84:	d106      	bne.n	ed94 <msg_finalize+0x80>
}
    ed86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    ed8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ed8e:	480b      	ldr	r0, [pc, #44]	; (edbc <msg_finalize+0xa8>)
    ed90:	f00d ba5e 	b.w	1c250 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    ed94:	2b0a      	cmp	r3, #10
    ed96:	d1ee      	bne.n	ed76 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    ed98:	4808      	ldr	r0, [pc, #32]	; (edbc <msg_finalize+0xa8>)
    ed9a:	f010 f822 	bl	1ede2 <z_impl_k_timer_stop>
}
    ed9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    eda2:	4807      	ldr	r0, [pc, #28]	; (edc0 <msg_finalize+0xac>)
    eda4:	f00c bf7e 	b.w	1bca4 <z_impl_k_sem_give>
    eda8:	2002c510 	.word	0x2002c510
    edac:	200201fc 	.word	0x200201fc
    edb0:	20020208 	.word	0x20020208
    edb4:	20026546 	.word	0x20026546
    edb8:	20020308 	.word	0x20020308
    edbc:	20020210 	.word	0x20020210
    edc0:	2002c688 	.word	0x2002c688

0000edc4 <log_dropped>:
    edc4:	4b04      	ldr	r3, [pc, #16]	; (edd8 <log_dropped+0x14>)
    edc6:	e8d3 2fef 	ldaex	r2, [r3]
    edca:	3201      	adds	r2, #1
    edcc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    edd0:	2900      	cmp	r1, #0
    edd2:	d1f8      	bne.n	edc6 <log_dropped+0x2>
}
    edd4:	4770      	bx	lr
    edd6:	bf00      	nop
    edd8:	20020200 	.word	0x20020200

0000eddc <log_source_name_get>:
    eddc:	4a04      	ldr	r2, [pc, #16]	; (edf0 <log_source_name_get+0x14>)
    edde:	4b05      	ldr	r3, [pc, #20]	; (edf4 <log_source_name_get+0x18>)
    ede0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    ede2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    ede6:	bf34      	ite	cc
    ede8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    edec:	2000      	movcs	r0, #0
}
    edee:	4770      	bx	lr
    edf0:	0001f328 	.word	0x0001f328
    edf4:	0001f3b0 	.word	0x0001f3b0

0000edf8 <log_backend_enable>:
	id += backend - log_backend_get(0);
    edf8:	4b09      	ldr	r3, [pc, #36]	; (ee20 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    edfa:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    edfc:	1ac3      	subs	r3, r0, r3
    edfe:	111b      	asrs	r3, r3, #4
    ee00:	3301      	adds	r3, #1
{
    ee02:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    ee04:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    ee06:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    ee08:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    ee0a:	4c06      	ldr	r4, [pc, #24]	; (ee24 <log_backend_enable+0x2c>)
    ee0c:	715a      	strb	r2, [r3, #5]
    ee0e:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    ee10:	6019      	str	r1, [r3, #0]
    ee12:	b912      	cbnz	r2, ee1a <log_backend_enable+0x22>
    ee14:	4804      	ldr	r0, [pc, #16]	; (ee28 <log_backend_enable+0x30>)
    ee16:	f00c ff45 	bl	1bca4 <z_impl_k_sem_give>
	backend_attached = true;
    ee1a:	2301      	movs	r3, #1
    ee1c:	7023      	strb	r3, [r4, #0]
}
    ee1e:	bd10      	pop	{r4, pc}
    ee20:	0001f3b0 	.word	0x0001f3b0
    ee24:	20026545 	.word	0x20026545
    ee28:	2002c688 	.word	0x2002c688

0000ee2c <log_init>:
{
    ee2c:	b570      	push	{r4, r5, r6, lr}
    ee2e:	4b0f      	ldr	r3, [pc, #60]	; (ee6c <log_init+0x40>)
    ee30:	e8d3 5fef 	ldaex	r5, [r3]
    ee34:	1c6a      	adds	r2, r5, #1
    ee36:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ee3a:	2900      	cmp	r1, #0
    ee3c:	d1f8      	bne.n	ee30 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    ee3e:	b92d      	cbnz	r5, ee4c <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    ee40:	4c0b      	ldr	r4, [pc, #44]	; (ee70 <log_init+0x44>)
    ee42:	4e0c      	ldr	r6, [pc, #48]	; (ee74 <log_init+0x48>)
    ee44:	1b36      	subs	r6, r6, r4
    ee46:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    ee48:	42b5      	cmp	r5, r6
    ee4a:	db00      	blt.n	ee4e <log_init+0x22>
}
    ee4c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    ee4e:	7b23      	ldrb	r3, [r4, #12]
    ee50:	b143      	cbz	r3, ee64 <log_init+0x38>
			if (backend->api->init != NULL) {
    ee52:	6823      	ldr	r3, [r4, #0]
    ee54:	695b      	ldr	r3, [r3, #20]
    ee56:	b103      	cbz	r3, ee5a <log_init+0x2e>
				backend->api->init();
    ee58:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    ee5a:	2204      	movs	r2, #4
    ee5c:	2100      	movs	r1, #0
    ee5e:	4620      	mov	r0, r4
    ee60:	f7ff ffca 	bl	edf8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    ee64:	3501      	adds	r5, #1
    ee66:	3410      	adds	r4, #16
    ee68:	e7ee      	b.n	ee48 <log_init+0x1c>
    ee6a:	bf00      	nop
    ee6c:	20020204 	.word	0x20020204
    ee70:	0001f3b0 	.word	0x0001f3b0
    ee74:	0001f3c0 	.word	0x0001f3c0

0000ee78 <z_impl_log_panic>:
{
    ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    ee7a:	4f0e      	ldr	r7, [pc, #56]	; (eeb4 <z_impl_log_panic+0x3c>)
    ee7c:	783d      	ldrb	r5, [r7, #0]
    ee7e:	b975      	cbnz	r5, ee9e <z_impl_log_panic+0x26>
	log_init();
    ee80:	f7ff ffd4 	bl	ee2c <log_init>
    ee84:	4c0c      	ldr	r4, [pc, #48]	; (eeb8 <z_impl_log_panic+0x40>)
    ee86:	4e0d      	ldr	r6, [pc, #52]	; (eebc <z_impl_log_panic+0x44>)
    ee88:	1b36      	subs	r6, r6, r4
    ee8a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ee8c:	42b5      	cmp	r5, r6
    ee8e:	db07      	blt.n	eea0 <z_impl_log_panic+0x28>
    ee90:	2000      	movs	r0, #0
    ee92:	f7ff feed 	bl	ec70 <z_impl_log_process>
		while (log_process(false) == true) {
    ee96:	2800      	cmp	r0, #0
    ee98:	d1fa      	bne.n	ee90 <z_impl_log_panic+0x18>
	panic_mode = true;
    ee9a:	2301      	movs	r3, #1
    ee9c:	703b      	strb	r3, [r7, #0]
}
    ee9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    eea0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    eea2:	795b      	ldrb	r3, [r3, #5]
    eea4:	b11b      	cbz	r3, eeae <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    eea6:	6823      	ldr	r3, [r4, #0]
    eea8:	4620      	mov	r0, r4
    eeaa:	691b      	ldr	r3, [r3, #16]
    eeac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    eeae:	3501      	adds	r5, #1
    eeb0:	3410      	adds	r4, #16
    eeb2:	e7eb      	b.n	ee8c <z_impl_log_panic+0x14>
    eeb4:	20026546 	.word	0x20026546
    eeb8:	0001f3b0 	.word	0x0001f3b0
    eebc:	0001f3c0 	.word	0x0001f3c0

0000eec0 <log_process_thread_func>:
{
    eec0:	b508      	push	{r3, lr}
	log_init();
    eec2:	f7ff ffb3 	bl	ee2c <log_init>
	return z_impl_k_current_get();
    eec6:	f00c fee7 	bl	1bc98 <z_impl_k_current_get>
	proc_tid = process_tid;
    eeca:	4b0b      	ldr	r3, [pc, #44]	; (eef8 <log_process_thread_func+0x38>)
    eecc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    eece:	b130      	cbz	r0, eede <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    eed0:	4b0a      	ldr	r3, [pc, #40]	; (eefc <log_process_thread_func+0x3c>)
	    process_tid &&
    eed2:	681b      	ldr	r3, [r3, #0]
    eed4:	2b09      	cmp	r3, #9
    eed6:	dd02      	ble.n	eede <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    eed8:	4809      	ldr	r0, [pc, #36]	; (ef00 <log_process_thread_func+0x40>)
    eeda:	f00c fee3 	bl	1bca4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    eede:	4c08      	ldr	r4, [pc, #32]	; (ef00 <log_process_thread_func+0x40>)
    eee0:	2000      	movs	r0, #0
    eee2:	f7ff fec5 	bl	ec70 <z_impl_log_process>
		if (log_process(false) == false) {
    eee6:	2800      	cmp	r0, #0
    eee8:	d1fa      	bne.n	eee0 <log_process_thread_func+0x20>
    eeea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    eeee:	4620      	mov	r0, r4
    eef0:	f00c ff04 	bl	1bcfc <z_impl_k_sem_take>
    eef4:	e7f4      	b.n	eee0 <log_process_thread_func+0x20>
    eef6:	bf00      	nop
    eef8:	20020308 	.word	0x20020308
    eefc:	200201fc 	.word	0x200201fc
    ef00:	2002c688 	.word	0x2002c688

0000ef04 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    ef04:	4b14      	ldr	r3, [pc, #80]	; (ef58 <log_strdup+0x54>)
{
    ef06:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    ef08:	4298      	cmp	r0, r3
{
    ef0a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ef0c:	d302      	bcc.n	ef14 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    ef0e:	4b13      	ldr	r3, [pc, #76]	; (ef5c <log_strdup+0x58>)
    ef10:	4298      	cmp	r0, r3
    ef12:	d31b      	bcc.n	ef4c <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    ef14:	2200      	movs	r2, #0
    ef16:	a901      	add	r1, sp, #4
    ef18:	4811      	ldr	r0, [pc, #68]	; (ef60 <log_strdup+0x5c>)
    ef1a:	f00c f97f 	bl	1b21c <k_mem_slab_alloc>
	if (err != 0) {
    ef1e:	4605      	mov	r5, r0
    ef20:	b9b8      	cbnz	r0, ef52 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ef22:	2201      	movs	r2, #1
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	e8d3 1fef 	ldaex	r1, [r3]
    ef2a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ef2e:	2800      	cmp	r0, #0
    ef30:	d1f9      	bne.n	ef26 <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    ef32:	9801      	ldr	r0, [sp, #4]
    ef34:	4621      	mov	r1, r4
    ef36:	222d      	movs	r2, #45	; 0x2d
    ef38:	3004      	adds	r0, #4
    ef3a:	f00e faff 	bl	1d53c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ef3e:	237e      	movs	r3, #126	; 0x7e
    ef40:	9c01      	ldr	r4, [sp, #4]
    ef42:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    ef46:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    ef4a:	3404      	adds	r4, #4
}
    ef4c:	4620      	mov	r0, r4
    ef4e:	b003      	add	sp, #12
    ef50:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    ef52:	4c04      	ldr	r4, [pc, #16]	; (ef64 <log_strdup+0x60>)
    ef54:	e7fa      	b.n	ef4c <log_strdup+0x48>
    ef56:	bf00      	nop
    ef58:	0001f03c 	.word	0x0001f03c
    ef5c:	00020f1c 	.word	0x00020f1c
    ef60:	2002023c 	.word	0x2002023c
    ef64:	000204c2 	.word	0x000204c2

0000ef68 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    ef68:	b148      	cbz	r0, ef7e <log_is_strdup+0x16>
    ef6a:	4b05      	ldr	r3, [pc, #20]	; (ef80 <log_is_strdup+0x18>)
    ef6c:	4298      	cmp	r0, r3
    ef6e:	d305      	bcc.n	ef7c <log_is_strdup+0x14>
    ef70:	33d0      	adds	r3, #208	; 0xd0
    ef72:	4298      	cmp	r0, r3
    ef74:	bf2c      	ite	cs
    ef76:	2000      	movcs	r0, #0
    ef78:	2001      	movcc	r0, #1
    ef7a:	4770      	bx	lr
    ef7c:	2000      	movs	r0, #0
}
    ef7e:	4770      	bx	lr
    ef80:	2002aaf8 	.word	0x2002aaf8

0000ef84 <log_free>:
{
    ef84:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    ef86:	3804      	subs	r0, #4
    ef88:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ef8a:	e8d0 3fef 	ldaex	r3, [r0]
    ef8e:	1e5a      	subs	r2, r3, #1
    ef90:	e8c0 2fe1 	stlex	r1, r2, [r0]
    ef94:	2900      	cmp	r1, #0
    ef96:	d1f8      	bne.n	ef8a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    ef98:	2b01      	cmp	r3, #1
    ef9a:	d103      	bne.n	efa4 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    ef9c:	a901      	add	r1, sp, #4
    ef9e:	4803      	ldr	r0, [pc, #12]	; (efac <log_free+0x28>)
    efa0:	f00c f968 	bl	1b274 <k_mem_slab_free>
}
    efa4:	b003      	add	sp, #12
    efa6:	f85d fb04 	ldr.w	pc, [sp], #4
    efaa:	bf00      	nop
    efac:	2002023c 	.word	0x2002023c

0000efb0 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    efb0:	2320      	movs	r3, #32
    efb2:	4902      	ldr	r1, [pc, #8]	; (efbc <log_msg_pool_init+0xc>)
    efb4:	461a      	mov	r2, r3
    efb6:	4802      	ldr	r0, [pc, #8]	; (efc0 <log_msg_pool_init+0x10>)
    efb8:	f00f bc55 	b.w	1e866 <k_mem_slab_init>
    efbc:	2002abc8 	.word	0x2002abc8
    efc0:	2002030c 	.word	0x2002030c

0000efc4 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    efc4:	2300      	movs	r3, #0
{
    efc6:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    efc8:	4d09      	ldr	r5, [pc, #36]	; (eff0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    efca:	9301      	str	r3, [sp, #4]
    efcc:	2001      	movs	r0, #1
    efce:	f7ff fe4f 	bl	ec70 <z_impl_log_process>
    efd2:	4604      	mov	r4, r0
			log_dropped();
    efd4:	f7ff fef6 	bl	edc4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    efd8:	2200      	movs	r2, #0
    efda:	a901      	add	r1, sp, #4
    efdc:	4628      	mov	r0, r5
    efde:	f00c f91d 	bl	1b21c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    efe2:	b108      	cbz	r0, efe8 <log_msg_no_space_handle+0x24>
    efe4:	2c00      	cmp	r4, #0
    efe6:	d1f1      	bne.n	efcc <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    efe8:	9801      	ldr	r0, [sp, #4]
    efea:	b003      	add	sp, #12
    efec:	bd30      	pop	{r4, r5, pc}
    efee:	bf00      	nop
    eff0:	2002030c 	.word	0x2002030c

0000eff4 <log_msg_chunk_alloc>:
{
    eff4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    eff6:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    eff8:	a901      	add	r1, sp, #4
    effa:	4806      	ldr	r0, [pc, #24]	; (f014 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    effc:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    effe:	f00c f90d 	bl	1b21c <k_mem_slab_alloc>
	if (err != 0) {
    f002:	b110      	cbz	r0, f00a <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    f004:	f7ff ffde 	bl	efc4 <log_msg_no_space_handle>
    f008:	9001      	str	r0, [sp, #4]
}
    f00a:	9801      	ldr	r0, [sp, #4]
    f00c:	b003      	add	sp, #12
    f00e:	f85d fb04 	ldr.w	pc, [sp], #4
    f012:	bf00      	nop
    f014:	2002030c 	.word	0x2002030c

0000f018 <msg_free>:
{
    f018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f01a:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    f01c:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    f01e:	f014 0401 	ands.w	r4, r4, #1
{
    f022:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    f024:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    f028:	d00e      	beq.n	f048 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    f02a:	9b01      	ldr	r3, [sp, #4]
    f02c:	7a1a      	ldrb	r2, [r3, #8]
    f02e:	0792      	lsls	r2, r2, #30
    f030:	d504      	bpl.n	f03c <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    f032:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f034:	4c10      	ldr	r4, [pc, #64]	; (f078 <msg_free+0x60>)
    f036:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    f038:	9b03      	ldr	r3, [sp, #12]
    f03a:	b9b3      	cbnz	r3, f06a <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f03c:	a901      	add	r1, sp, #4
    f03e:	480e      	ldr	r0, [pc, #56]	; (f078 <msg_free+0x60>)
    f040:	f00c f918 	bl	1b274 <k_mem_slab_free>
}
    f044:	b004      	add	sp, #16
    f046:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    f048:	2d00      	cmp	r5, #0
    f04a:	d0ee      	beq.n	f02a <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    f04c:	42a5      	cmp	r5, r4
    f04e:	9801      	ldr	r0, [sp, #4]
    f050:	d9eb      	bls.n	f02a <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    f052:	4621      	mov	r1, r4
    f054:	f00d fe22 	bl	1cc9c <log_msg_arg_get>
    f058:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    f05a:	f7ff ff85 	bl	ef68 <log_is_strdup>
    f05e:	b110      	cbz	r0, f066 <msg_free+0x4e>
				log_free(buf);
    f060:	4630      	mov	r0, r6
    f062:	f7ff ff8f 	bl	ef84 <log_free>
		for (i = 0; i < nargs; i++) {
    f066:	3401      	adds	r4, #1
    f068:	e7f0      	b.n	f04c <msg_free+0x34>
		next = cont->next;
    f06a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f06c:	a903      	add	r1, sp, #12
    f06e:	4620      	mov	r0, r4
    f070:	f00c f900 	bl	1b274 <k_mem_slab_free>
		cont = next;
    f074:	9503      	str	r5, [sp, #12]
    f076:	e7df      	b.n	f038 <msg_free+0x20>
    f078:	2002030c 	.word	0x2002030c

0000f07c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    f07c:	b40e      	push	{r1, r2, r3}
    f07e:	b503      	push	{r0, r1, lr}
    f080:	ab03      	add	r3, sp, #12
    f082:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f086:	4601      	mov	r1, r0
    f088:	4804      	ldr	r0, [pc, #16]	; (f09c <print_formatted+0x20>)
	va_start(args, fmt);
    f08a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f08c:	f00d fba6 	bl	1c7dc <z_vprintk>
#endif
	va_end(args);

	return length;
}
    f090:	2000      	movs	r0, #0
    f092:	b002      	add	sp, #8
    f094:	f85d eb04 	ldr.w	lr, [sp], #4
    f098:	b003      	add	sp, #12
    f09a:	4770      	bx	lr
    f09c:	0001d09d 	.word	0x0001d09d

0000f0a0 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    f0a4:	f011 0402 	ands.w	r4, r1, #2
{
    f0a8:	b085      	sub	sp, #20
    f0aa:	4606      	mov	r6, r0
    f0ac:	4690      	mov	r8, r2
    f0ae:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f0b2:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f0b6:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    f0ba:	d007      	beq.n	f0cc <prefix_print+0x2c>
	if (!format) {
    f0bc:	f011 0f44 	tst.w	r1, #68	; 0x44
    f0c0:	d137      	bne.n	f132 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    f0c2:	461a      	mov	r2, r3
    f0c4:	4932      	ldr	r1, [pc, #200]	; (f190 <prefix_print+0xf0>)
    f0c6:	f7ff ffd9 	bl	f07c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    f0ca:	4604      	mov	r4, r0
	if (color) {
    f0cc:	f1b9 0f00 	cmp.w	r9, #0
    f0d0:	d00a      	beq.n	f0e8 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    f0d2:	4b30      	ldr	r3, [pc, #192]	; (f194 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    f0d4:	4930      	ldr	r1, [pc, #192]	; (f198 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    f0d6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    f0da:	4b30      	ldr	r3, [pc, #192]	; (f19c <prefix_print+0xfc>)
    f0dc:	4630      	mov	r0, r6
    f0de:	2a00      	cmp	r2, #0
    f0e0:	bf08      	it	eq
    f0e2:	461a      	moveq	r2, r3
    f0e4:	f7ff ffca 	bl	f07c <print_formatted>
	if (level_on) {
    f0e8:	b13d      	cbz	r5, f0fa <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    f0ea:	4b2d      	ldr	r3, [pc, #180]	; (f1a0 <prefix_print+0x100>)
    f0ec:	492d      	ldr	r1, [pc, #180]	; (f1a4 <prefix_print+0x104>)
    f0ee:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    f0f2:	4630      	mov	r0, r6
    f0f4:	f7ff ffc2 	bl	f07c <print_formatted>
    f0f8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    f0fa:	f1b8 0f00 	cmp.w	r8, #0
    f0fe:	d044      	beq.n	f18a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f100:	2301      	movs	r3, #1
    f102:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    f106:	4b28      	ldr	r3, [pc, #160]	; (f1a8 <prefix_print+0x108>)
    f108:	f017 0f10 	tst.w	r7, #16
    f10c:	4f27      	ldr	r7, [pc, #156]	; (f1ac <prefix_print+0x10c>)
    f10e:	bf18      	it	ne
    f110:	461f      	movne	r7, r3
    f112:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f116:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f11a:	f7ff fe5f 	bl	eddc <log_source_name_get>
    f11e:	4639      	mov	r1, r7
    f120:	4602      	mov	r2, r0
    f122:	4630      	mov	r0, r6
    f124:	f7ff ffaa 	bl	f07c <print_formatted>
    f128:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    f12a:	4420      	add	r0, r4
    f12c:	b005      	add	sp, #20
    f12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    f132:	4a1f      	ldr	r2, [pc, #124]	; (f1b0 <prefix_print+0x110>)
    f134:	6811      	ldr	r1, [r2, #0]
    f136:	b331      	cbz	r1, f186 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    f138:	4a1e      	ldr	r2, [pc, #120]	; (f1b4 <prefix_print+0x114>)
    f13a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    f13e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    f140:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f144:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    f148:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    f14c:	fbb4 f2fe 	udiv	r2, r4, lr
    f150:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    f154:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    f158:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f15c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    f160:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f164:	fb01 441b 	mls	r4, r1, fp, r4
    f168:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    f16c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f170:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    f174:	e9cd b101 	strd	fp, r1, [sp, #4]
    f178:	fb0a e113 	mls	r1, sl, r3, lr
    f17c:	9100      	str	r1, [sp, #0]
    f17e:	490e      	ldr	r1, [pc, #56]	; (f1b8 <prefix_print+0x118>)
    f180:	f7ff ff7c 	bl	f07c <print_formatted>
    f184:	e7a1      	b.n	f0ca <prefix_print+0x2a>
		length = 0;
    f186:	4608      	mov	r0, r1
    f188:	e79f      	b.n	f0ca <prefix_print+0x2a>
	total += print_formatted(log_output,
    f18a:	4f08      	ldr	r7, [pc, #32]	; (f1ac <prefix_print+0x10c>)
    f18c:	e7c1      	b.n	f112 <prefix_print+0x72>
    f18e:	bf00      	nop
    f190:	00020527 	.word	0x00020527
    f194:	0001f45c 	.word	0x0001f45c
    f198:	00020d3a 	.word	0x00020d3a
    f19c:	00020519 	.word	0x00020519
    f1a0:	0001f470 	.word	0x0001f470
    f1a4:	0002054c 	.word	0x0002054c
    f1a8:	00020523 	.word	0x00020523
    f1ac:	0002051e 	.word	0x0002051e
    f1b0:	20020328 	.word	0x20020328
    f1b4:	2002032c 	.word	0x2002032c
    f1b8:	00020530 	.word	0x00020530

0000f1bc <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    f1bc:	b538      	push	{r3, r4, r5, lr}
    f1be:	460c      	mov	r4, r1
	if (color) {
    f1c0:	07e1      	lsls	r1, r4, #31
{
    f1c2:	4605      	mov	r5, r0
	if (color) {
    f1c4:	d503      	bpl.n	f1ce <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    f1c6:	4a08      	ldr	r2, [pc, #32]	; (f1e8 <postfix_print+0x2c>)
    f1c8:	4908      	ldr	r1, [pc, #32]	; (f1ec <postfix_print+0x30>)
    f1ca:	f7ff ff57 	bl	f07c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f1ce:	06e2      	lsls	r2, r4, #27
    f1d0:	d408      	bmi.n	f1e4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f1d2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f1d4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    f1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    f1da:	bf4c      	ite	mi
    f1dc:	4904      	ldrmi	r1, [pc, #16]	; (f1f0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f1de:	4905      	ldrpl	r1, [pc, #20]	; (f1f4 <postfix_print+0x38>)
    f1e0:	f7ff bf4c 	b.w	f07c <print_formatted>
}
    f1e4:	bd38      	pop	{r3, r4, r5, pc}
    f1e6:	bf00      	nop
    f1e8:	00020519 	.word	0x00020519
    f1ec:	00020d3a 	.word	0x00020d3a
    f1f0:	0001fd80 	.word	0x0001fd80
    f1f4:	0001fd7f 	.word	0x0001fd7f

0000f1f8 <hexdump_line_print>:
{
    f1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1fc:	4698      	mov	r8, r3
    f1fe:	9b08      	ldr	r3, [sp, #32]
    f200:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f202:	06dd      	lsls	r5, r3, #27
{
    f204:	460e      	mov	r6, r1
    f206:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f208:	d405      	bmi.n	f216 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f20a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f20c:	bf4c      	ite	mi
    f20e:	4929      	ldrmi	r1, [pc, #164]	; (f2b4 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    f210:	4929      	ldrpl	r1, [pc, #164]	; (f2b8 <hexdump_line_print+0xc0>)
    f212:	f7ff ff33 	bl	f07c <print_formatted>
{
    f216:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    f218:	f8df 90a4 	ldr.w	r9, [pc, #164]	; f2c0 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    f21c:	4545      	cmp	r5, r8
    f21e:	db2a      	blt.n	f276 <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f220:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    f222:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f2c4 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    f226:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f2c8 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    f22a:	f8df a094 	ldr.w	sl, [pc, #148]	; f2c0 <hexdump_line_print+0xc8>
		if (i < length) {
    f22e:	42bd      	cmp	r5, r7
    f230:	d22e      	bcs.n	f290 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    f232:	5d72      	ldrb	r2, [r6, r5]
    f234:	4649      	mov	r1, r9
    f236:	4620      	mov	r0, r4
    f238:	f7ff ff20 	bl	f07c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f23c:	3501      	adds	r5, #1
    f23e:	2d10      	cmp	r5, #16
    f240:	d11f      	bne.n	f282 <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    f242:	491e      	ldr	r1, [pc, #120]	; (f2bc <hexdump_line_print+0xc4>)
    f244:	4620      	mov	r0, r4
    f246:	f7ff ff19 	bl	f07c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f24a:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    f24c:	f8df 8070 	ldr.w	r8, [pc, #112]	; f2c0 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    f250:	f8df 9078 	ldr.w	r9, [pc, #120]	; f2cc <hexdump_line_print+0xd4>
		if (i < length) {
    f254:	42af      	cmp	r7, r5
    f256:	d927      	bls.n	f2a8 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    f258:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    f25a:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    f25c:	f1a2 0320 	sub.w	r3, r2, #32
    f260:	2b5f      	cmp	r3, #95	; 0x5f
    f262:	bf28      	it	cs
    f264:	222e      	movcs	r2, #46	; 0x2e
    f266:	4620      	mov	r0, r4
    f268:	f7ff ff08 	bl	f07c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f26c:	3501      	adds	r5, #1
    f26e:	2d10      	cmp	r5, #16
    f270:	d113      	bne.n	f29a <hexdump_line_print+0xa2>
}
    f272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f276:	4649      	mov	r1, r9
    f278:	4620      	mov	r0, r4
    f27a:	f7ff feff 	bl	f07c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f27e:	3501      	adds	r5, #1
    f280:	e7cc      	b.n	f21c <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    f282:	076a      	lsls	r2, r5, #29
    f284:	d1d3      	bne.n	f22e <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    f286:	4651      	mov	r1, sl
    f288:	4620      	mov	r0, r4
    f28a:	f7ff fef7 	bl	f07c <print_formatted>
    f28e:	e7ce      	b.n	f22e <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    f290:	4641      	mov	r1, r8
    f292:	4620      	mov	r0, r4
    f294:	f7ff fef2 	bl	f07c <print_formatted>
    f298:	e7d0      	b.n	f23c <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    f29a:	076b      	lsls	r3, r5, #29
    f29c:	d1da      	bne.n	f254 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f29e:	4641      	mov	r1, r8
    f2a0:	4620      	mov	r0, r4
    f2a2:	f7ff feeb 	bl	f07c <print_formatted>
    f2a6:	e7d5      	b.n	f254 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f2a8:	4641      	mov	r1, r8
    f2aa:	4620      	mov	r0, r4
    f2ac:	f7ff fee6 	bl	f07c <print_formatted>
    f2b0:	e7dc      	b.n	f26c <hexdump_line_print+0x74>
    f2b2:	bf00      	nop
    f2b4:	0001fd80 	.word	0x0001fd80
    f2b8:	0001fd7f 	.word	0x0001fd7f
    f2bc:	000204ea 	.word	0x000204ea
    f2c0:	000204e8 	.word	0x000204e8
    f2c4:	000204e6 	.word	0x000204e6
    f2c8:	000204e0 	.word	0x000204e0
    f2cc:	000204ec 	.word	0x000204ec

0000f2d0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    f2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    f2d4:	7a8b      	ldrb	r3, [r1, #10]
    f2d6:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f2d8:	f013 0407 	ands.w	r4, r3, #7
{
    f2dc:	b08a      	sub	sp, #40	; 0x28
    f2de:	4605      	mov	r5, r0
    f2e0:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f2e2:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f2e4:	d01c      	beq.n	f320 <log_output_msg_process+0x50>
    f2e6:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    f2e8:	8949      	ldrh	r1, [r1, #10]
    f2ea:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f2ee:	0989      	lsrs	r1, r1, #6
    f2f0:	9102      	str	r1, [sp, #8]
    f2f2:	e9cd 4300 	strd	r4, r3, [sp]
    f2f6:	f002 0201 	and.w	r2, r2, #1
    f2fa:	68f3      	ldr	r3, [r6, #12]
    f2fc:	4639      	mov	r1, r7
    f2fe:	f7ff fecf 	bl	f0a0 <prefix_print>
    f302:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f304:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f306:	07da      	lsls	r2, r3, #31
    f308:	d40c      	bmi.n	f324 <log_output_msg_process+0x54>
		std_print(msg, log_output);
    f30a:	4629      	mov	r1, r5
    f30c:	4630      	mov	r0, r6
    f30e:	f00d fd5b 	bl	1cdc8 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f312:	b34c      	cbz	r4, f368 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    f314:	4622      	mov	r2, r4
    f316:	4639      	mov	r1, r7
    f318:	4628      	mov	r0, r5
    f31a:	f7ff ff4f 	bl	f1bc <postfix_print>
    f31e:	e023      	b.n	f368 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f320:	46a1      	mov	r9, r4
    f322:	e7ef      	b.n	f304 <log_output_msg_process+0x34>
	} else if (raw_string) {
    f324:	bb34      	cbnz	r4, f374 <log_output_msg_process+0xa4>
	size_t offset = 0;
    f326:	4627      	mov	r7, r4
		length = log_output->size;
    f328:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f32a:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f32c:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f32e:	68a9      	ldr	r1, [r5, #8]
    f330:	463b      	mov	r3, r7
    f332:	4630      	mov	r0, r6
    f334:	f00d fd34 	bl	1cda0 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f338:	9a06      	ldr	r2, [sp, #24]
    f33a:	686b      	ldr	r3, [r5, #4]
    f33c:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f33e:	b13a      	cbz	r2, f350 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    f340:	68ab      	ldr	r3, [r5, #8]
    f342:	4413      	add	r3, r2
    f344:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    f348:	f1a4 030a 	sub.w	r3, r4, #10
    f34c:	425c      	negs	r4, r3
    f34e:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    f350:	4628      	mov	r0, r5
    f352:	f00d fe96 	bl	1d082 <log_output_flush>
		offset += length;
    f356:	9b06      	ldr	r3, [sp, #24]
    f358:	441f      	add	r7, r3
	} while (length > 0);
    f35a:	2b00      	cmp	r3, #0
    f35c:	d1e4      	bne.n	f328 <log_output_msg_process+0x58>
	if (eol) {
    f35e:	b11c      	cbz	r4, f368 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    f360:	4914      	ldr	r1, [pc, #80]	; (f3b4 <log_output_msg_process+0xe4>)
    f362:	4628      	mov	r0, r5
    f364:	f7ff fe8a 	bl	f07c <print_formatted>
	}

	log_output_flush(log_output);
    f368:	4628      	mov	r0, r5
    f36a:	f00d fe8a 	bl	1d082 <log_output_flush>
}
    f36e:	b00a      	add	sp, #40	; 0x28
    f370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    f374:	4630      	mov	r0, r6
    f376:	f00d fcbd 	bl	1ccf4 <log_msg_str_get>
    f37a:	490f      	ldr	r1, [pc, #60]	; (f3b8 <log_output_msg_process+0xe8>)
    f37c:	4602      	mov	r2, r0
    f37e:	4628      	mov	r0, r5
    f380:	f7ff fe7c 	bl	f07c <print_formatted>
	u32_t offset = 0U;
    f384:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    f388:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f38c:	aa05      	add	r2, sp, #20
    f38e:	4643      	mov	r3, r8
    f390:	a906      	add	r1, sp, #24
    f392:	4630      	mov	r0, r6
		length = sizeof(buf);
    f394:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f398:	f00d fd02 	bl	1cda0 <log_msg_hexdump_data_get>
		if (length) {
    f39c:	9a05      	ldr	r2, [sp, #20]
    f39e:	2a00      	cmp	r2, #0
    f3a0:	d0b8      	beq.n	f314 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    f3a2:	464b      	mov	r3, r9
    f3a4:	9700      	str	r7, [sp, #0]
    f3a6:	a906      	add	r1, sp, #24
    f3a8:	4628      	mov	r0, r5
    f3aa:	f7ff ff25 	bl	f1f8 <hexdump_line_print>
			offset += length;
    f3ae:	9b05      	ldr	r3, [sp, #20]
    f3b0:	4498      	add	r8, r3
    f3b2:	e7eb      	b.n	f38c <log_output_msg_process+0xbc>
    f3b4:	000204ef 	.word	0x000204ef
    f3b8:	00020d3a 	.word	0x00020d3a

0000f3bc <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    f3bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    f3be:	e9d0 4300 	ldrd	r4, r3, [r0]
    f3c2:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    f3c4:	f242 730f 	movw	r3, #9999	; 0x270f
    f3c8:	428b      	cmp	r3, r1
    f3ca:	bf28      	it	cs
    f3cc:	460b      	movcs	r3, r1
    f3ce:	4a0d      	ldr	r2, [pc, #52]	; (f404 <log_output_dropped_process+0x48>)
    f3d0:	2105      	movs	r1, #5
    f3d2:	4668      	mov	r0, sp
    f3d4:	f001 fd84 	bl	10ee0 <snprintf>
    f3d8:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    f3da:	462b      	mov	r3, r5
    f3dc:	4620      	mov	r0, r4
    f3de:	220b      	movs	r2, #11
    f3e0:	4909      	ldr	r1, [pc, #36]	; (f408 <log_output_dropped_process+0x4c>)
    f3e2:	f00d fce4 	bl	1cdae <buffer_write>
	buffer_write(outf, buf, len, dev);
    f3e6:	462b      	mov	r3, r5
    f3e8:	4632      	mov	r2, r6
    f3ea:	4669      	mov	r1, sp
    f3ec:	4620      	mov	r0, r4
    f3ee:	f00d fcde 	bl	1cdae <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    f3f2:	462b      	mov	r3, r5
    f3f4:	221b      	movs	r2, #27
    f3f6:	4905      	ldr	r1, [pc, #20]	; (f40c <log_output_dropped_process+0x50>)
    f3f8:	4620      	mov	r0, r4
    f3fa:	f00d fcd8 	bl	1cdae <buffer_write>
}
    f3fe:	b002      	add	sp, #8
    f400:	bd70      	pop	{r4, r5, r6, pc}
    f402:	bf00      	nop
    f404:	000203e1 	.word	0x000203e1
    f408:	0002050d 	.word	0x0002050d
    f40c:	000204f1 	.word	0x000204f1

0000f410 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    f410:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f412:	2100      	movs	r1, #0
	timestamp_div = 1U;
    f414:	4a07      	ldr	r2, [pc, #28]	; (f434 <log_output_timestamp_freq_set+0x24>)
{
    f416:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    f418:	4c07      	ldr	r4, [pc, #28]	; (f438 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f41a:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f41c:	42a0      	cmp	r0, r4
    f41e:	d804      	bhi.n	f42a <log_output_timestamp_freq_set+0x1a>
    f420:	b101      	cbz	r1, f424 <log_output_timestamp_freq_set+0x14>
    f422:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f424:	4b05      	ldr	r3, [pc, #20]	; (f43c <log_output_timestamp_freq_set+0x2c>)
    f426:	6018      	str	r0, [r3, #0]
}
    f428:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    f42a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f42c:	005b      	lsls	r3, r3, #1
    f42e:	2101      	movs	r1, #1
    f430:	e7f4      	b.n	f41c <log_output_timestamp_freq_set+0xc>
    f432:	bf00      	nop
    f434:	2002032c 	.word	0x2002032c
    f438:	000f4240 	.word	0x000f4240
    f43c:	20020328 	.word	0x20020328

0000f440 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    f440:	4801      	ldr	r0, [pc, #4]	; (f448 <panic+0x8>)
    f442:	f00d be1e 	b.w	1d082 <log_output_flush>
    f446:	bf00      	nop
    f448:	0001f49c 	.word	0x0001f49c

0000f44c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    f44c:	4801      	ldr	r0, [pc, #4]	; (f454 <dropped+0x8>)
    f44e:	f7ff bfb5 	b.w	f3bc <log_output_dropped_process>
    f452:	bf00      	nop
    f454:	0001f49c 	.word	0x0001f49c

0000f458 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    f458:	b508      	push	{r3, lr}
    f45a:	4803      	ldr	r0, [pc, #12]	; (f468 <log_backend_uart_init+0x10>)
    f45c:	f00b fd50 	bl	1af00 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    f460:	4b02      	ldr	r3, [pc, #8]	; (f46c <log_backend_uart_init+0x14>)
    f462:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    f464:	bd08      	pop	{r3, pc}
    f466:	bf00      	nop
    f468:	0001fa85 	.word	0x0001fa85
    f46c:	20020338 	.word	0x20020338

0000f470 <put>:
{
    f470:	b510      	push	{r4, lr}
    f472:	460c      	mov	r4, r1
	log_msg_get(msg);
    f474:	4608      	mov	r0, r1
    f476:	f00d fc05 	bl	1cc84 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    f47a:	4621      	mov	r1, r4
    f47c:	4804      	ldr	r0, [pc, #16]	; (f490 <put+0x20>)
    f47e:	220f      	movs	r2, #15
    f480:	f7ff ff26 	bl	f2d0 <log_output_msg_process>
	log_msg_put(msg);
    f484:	4620      	mov	r0, r4
}
    f486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f48a:	f00d bc24 	b.w	1ccd6 <log_msg_put>
    f48e:	bf00      	nop
    f490:	0001f49c 	.word	0x0001f49c

0000f494 <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    f494:	4b01      	ldr	r3, [pc, #4]	; (f49c <socket_offload_register+0x8>)
    f496:	6018      	str	r0, [r3, #0]
}
    f498:	4770      	bx	lr
    f49a:	bf00      	nop
    f49c:	20020344 	.word	0x20020344

0000f4a0 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    f4a0:	280a      	cmp	r0, #10
{
    f4a2:	b538      	push	{r3, r4, r5, lr}
    f4a4:	4604      	mov	r4, r0
    f4a6:	4d07      	ldr	r5, [pc, #28]	; (f4c4 <console_out+0x24>)
	if ('\n' == c) {
    f4a8:	d104      	bne.n	f4b4 <console_out+0x14>
    f4aa:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    f4ac:	6843      	ldr	r3, [r0, #4]
    f4ae:	210d      	movs	r1, #13
    f4b0:	685b      	ldr	r3, [r3, #4]
    f4b2:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    f4b4:	6828      	ldr	r0, [r5, #0]
    f4b6:	6843      	ldr	r3, [r0, #4]
    f4b8:	b2e1      	uxtb	r1, r4
    f4ba:	685b      	ldr	r3, [r3, #4]
    f4bc:	4798      	blx	r3

	return c;
}
    f4be:	4620      	mov	r0, r4
    f4c0:	bd38      	pop	{r3, r4, r5, pc}
    f4c2:	bf00      	nop
    f4c4:	20020348 	.word	0x20020348

0000f4c8 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    f4c8:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    f4ca:	4c04      	ldr	r4, [pc, #16]	; (f4dc <uart_console_hook_install+0x14>)
    f4cc:	4620      	mov	r0, r4
    f4ce:	f001 fd01 	bl	10ed4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    f4d2:	4620      	mov	r0, r4
}
    f4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    f4d8:	f7ff bb30 	b.w	eb3c <__printk_hook_install>
    f4dc:	0000f4a1 	.word	0x0000f4a1

0000f4e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    f4e0:	b508      	push	{r3, lr}
    f4e2:	4804      	ldr	r0, [pc, #16]	; (f4f4 <uart_console_init+0x14>)
    f4e4:	f00b fd0c 	bl	1af00 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f4e8:	4b03      	ldr	r3, [pc, #12]	; (f4f8 <uart_console_init+0x18>)
    f4ea:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    f4ec:	f7ff ffec 	bl	f4c8 <uart_console_hook_install>

	return 0;
}
    f4f0:	2000      	movs	r0, #0
    f4f2:	bd08      	pop	{r3, pc}
    f4f4:	0001fa85 	.word	0x0001fa85
    f4f8:	20020348 	.word	0x20020348

0000f4fc <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    f4fc:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f4fe:	2200      	movs	r2, #0
{
    f500:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f502:	2101      	movs	r1, #1
    f504:	2005      	movs	r0, #5
    f506:	f000 f9c9 	bl	f89c <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    f50a:	2005      	movs	r0, #5
    f50c:	f000 f9b6 	bl	f87c <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    f510:	2202      	movs	r2, #2
    f512:	4b05      	ldr	r3, [pc, #20]	; (f528 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f514:	2000      	movs	r0, #0
    f516:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    f51a:	2203      	movs	r2, #3
    f51c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    f520:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    f522:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    f526:	bd10      	pop	{r4, pc}
    f528:	40005000 	.word	0x40005000

0000f52c <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    f52c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f52e:	4b10      	ldr	r3, [pc, #64]	; (f570 <nrf_power_clock_isr+0x44>)
    f530:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f532:	b162      	cbz	r2, f54e <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    f534:	4a0f      	ldr	r2, [pc, #60]	; (f574 <nrf_power_clock_isr+0x48>)
    f536:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f53a:	07d1      	lsls	r1, r2, #31
    f53c:	d507      	bpl.n	f54e <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f53e:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    f540:	480d      	ldr	r0, [pc, #52]	; (f578 <nrf_power_clock_isr+0x4c>)
    f542:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    f544:	6883      	ldr	r3, [r0, #8]
    f546:	7a5b      	ldrb	r3, [r3, #9]
    f548:	b90b      	cbnz	r3, f54e <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    f54a:	f00d fe5b 	bl	1d204 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f54e:	4b0b      	ldr	r3, [pc, #44]	; (f57c <nrf_power_clock_isr+0x50>)
    f550:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f552:	b15a      	cbz	r2, f56c <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    f554:	4a07      	ldr	r2, [pc, #28]	; (f574 <nrf_power_clock_isr+0x48>)
    f556:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f55a:	0792      	lsls	r2, r2, #30
    f55c:	d506      	bpl.n	f56c <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f55e:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    f560:	4807      	ldr	r0, [pc, #28]	; (f580 <nrf_power_clock_isr+0x54>)
    f562:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    f564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    f568:	f00d be4c 	b.w	1d204 <clkstarted_handle>
}
    f56c:	bd08      	pop	{r3, pc}
    f56e:	bf00      	nop
    f570:	40005100 	.word	0x40005100
    f574:	40005000 	.word	0x40005000
    f578:	2002c59c 	.word	0x2002c59c
    f57c:	40005104 	.word	0x40005104
    f580:	2002c5a8 	.word	0x2002c5a8

0000f584 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    f584:	2200      	movs	r2, #0
    f586:	4b0d      	ldr	r3, [pc, #52]	; (f5bc <rtc1_nrf_isr+0x38>)
    f588:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    f58c:	f04f 0220 	mov.w	r2, #32
    f590:	f3ef 8111 	mrs	r1, BASEPRI
    f594:	f382 8811 	msr	BASEPRI, r2
    f598:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f59c:	4a08      	ldr	r2, [pc, #32]	; (f5c0 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f59e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    f5a2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f5a4:	1ac0      	subs	r0, r0, r3
    f5a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f5aa:	4403      	add	r3, r0
    f5ac:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    f5ae:	f381 8811 	msr	BASEPRI, r1
    f5b2:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    f5b6:	f00c bdb3 	b.w	1c120 <z_clock_announce>
    f5ba:	bf00      	nop
    f5bc:	40015000 	.word	0x40015000
    f5c0:	20020364 	.word	0x20020364

0000f5c4 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    f5c4:	b570      	push	{r4, r5, r6, lr}
    f5c6:	4818      	ldr	r0, [pc, #96]	; (f628 <z_clock_driver_init+0x64>)
    f5c8:	f00b fc9a 	bl	1af00 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    f5cc:	b348      	cbz	r0, f622 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    f5ce:	6843      	ldr	r3, [r0, #4]
    f5d0:	2100      	movs	r1, #0
    f5d2:	681b      	ldr	r3, [r3, #0]
    f5d4:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    f5d6:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f5d8:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    f5da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f5de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    f5e2:	4d12      	ldr	r5, [pc, #72]	; (f62c <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    f5e4:	4631      	mov	r1, r6
    f5e6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    f5ea:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    f5ee:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f5f2:	4b0f      	ldr	r3, [pc, #60]	; (f630 <z_clock_driver_init+0x6c>)
    f5f4:	2015      	movs	r0, #21
    f5f6:	601c      	str	r4, [r3, #0]
    f5f8:	4b0e      	ldr	r3, [pc, #56]	; (f634 <z_clock_driver_init+0x70>)
    f5fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f5fe:	4622      	mov	r2, r4
    f600:	f000 f94c 	bl	f89c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    f604:	2015      	movs	r0, #21
    f606:	f000 f939 	bl	f87c <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    f60a:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f60c:	4b0a      	ldr	r3, [pc, #40]	; (f638 <z_clock_driver_init+0x74>)
    f60e:	601e      	str	r6, [r3, #0]
    f610:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    f612:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    f616:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f61c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    f620:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    f622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f626:	e7fb      	b.n	f620 <z_clock_driver_init+0x5c>
    f628:	00020589 	.word	0x00020589
    f62c:	40015000 	.word	0x40015000
    f630:	40015140 	.word	0x40015140
    f634:	e000e100 	.word	0xe000e100
    f638:	40015008 	.word	0x40015008

0000f63c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    f63c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    f63e:	4c25      	ldr	r4, [pc, #148]	; (f6d4 <z_clock_set_timeout+0x98>)
    f640:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f644:	bf08      	it	eq
    f646:	4620      	moveq	r0, r4
	__asm__ volatile(
    f648:	f04f 0320 	mov.w	r3, #32
    f64c:	f3ef 8511 	mrs	r5, BASEPRI
    f650:	f383 8811 	msr	BASEPRI, r3
    f654:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f658:	4b1f      	ldr	r3, [pc, #124]	; (f6d8 <z_clock_set_timeout+0x9c>)
    f65a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    f65e:	4b1f      	ldr	r3, [pc, #124]	; (f6dc <z_clock_set_timeout+0xa0>)
    f660:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    f662:	1aca      	subs	r2, r1, r3
    f664:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    f668:	0212      	lsls	r2, r2, #8
    f66a:	d41a      	bmi.n	f6a2 <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    f66c:	1e42      	subs	r2, r0, #1
    f66e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f672:	42a2      	cmp	r2, r4
    f674:	bfa8      	it	ge
    f676:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    f678:	1c70      	adds	r0, r6, #1
    f67a:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    f67c:	42a0      	cmp	r0, r4
    f67e:	bf94      	ite	ls
    f680:	1818      	addls	r0, r3, r0
    f682:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    f684:	1a41      	subs	r1, r0, r1
    f686:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f68a:	4a13      	ldr	r2, [pc, #76]	; (f6d8 <z_clock_set_timeout+0x9c>)
    f68c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    f690:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    f692:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    f696:	d906      	bls.n	f6a6 <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    f698:	f385 8811 	msr	BASEPRI, r5
    f69c:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    f6a0:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    f6a2:	2200      	movs	r2, #0
    f6a4:	e7e8      	b.n	f678 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    f6a6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    f6aa:	490d      	ldr	r1, [pc, #52]	; (f6e0 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    f6ac:	1ac3      	subs	r3, r0, r3
    f6ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    f6b2:	1e5c      	subs	r4, r3, #1
    f6b4:	428c      	cmp	r4, r1
    f6b6:	d905      	bls.n	f6c4 <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f6b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f6bc:	4b09      	ldr	r3, [pc, #36]	; (f6e4 <z_clock_set_timeout+0xa8>)
    f6be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f6c2:	e7e9      	b.n	f698 <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    f6c4:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    f6c6:	bf02      	ittt	eq
    f6c8:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f6ca:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f6ce:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    f6d2:	e7e1      	b.n	f698 <z_clock_set_timeout+0x5c>
    f6d4:	00fffffe 	.word	0x00fffffe
    f6d8:	40015000 	.word	0x40015000
    f6dc:	20020364 	.word	0x20020364
    f6e0:	007ffffe 	.word	0x007ffffe
    f6e4:	e000e100 	.word	0xe000e100

0000f6e8 <z_clock_elapsed>:
	__asm__ volatile(
    f6e8:	f04f 0220 	mov.w	r2, #32
    f6ec:	f3ef 8311 	mrs	r3, BASEPRI
    f6f0:	f382 8811 	msr	BASEPRI, r2
    f6f4:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f6f8:	4a06      	ldr	r2, [pc, #24]	; (f714 <z_clock_elapsed+0x2c>)
    f6fa:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f6fe:	4a06      	ldr	r2, [pc, #24]	; (f718 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f700:	6812      	ldr	r2, [r2, #0]
    f702:	1a80      	subs	r0, r0, r2
    f704:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f708:	f383 8811 	msr	BASEPRI, r3
    f70c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f710:	4770      	bx	lr
    f712:	bf00      	nop
    f714:	40015000 	.word	0x40015000
    f718:	20020364 	.word	0x20020364

0000f71c <z_timer_cycle_get_32>:
	__asm__ volatile(
    f71c:	f04f 0320 	mov.w	r3, #32
    f720:	f3ef 8211 	mrs	r2, BASEPRI
    f724:	f383 8811 	msr	BASEPRI, r3
    f728:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    f72c:	4906      	ldr	r1, [pc, #24]	; (f748 <z_timer_cycle_get_32+0x2c>)
    f72e:	4b07      	ldr	r3, [pc, #28]	; (f74c <z_timer_cycle_get_32+0x30>)
    f730:	6808      	ldr	r0, [r1, #0]
    f732:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    f736:	f382 8811 	msr	BASEPRI, r2
    f73a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    f73e:	1a1b      	subs	r3, r3, r0
    f740:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    f744:	4418      	add	r0, r3
    f746:	4770      	bx	lr
    f748:	20020364 	.word	0x20020364
    f74c:	40015000 	.word	0x40015000

0000f750 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    f750:	4807      	ldr	r0, [pc, #28]	; (f770 <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    f752:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    f754:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    f756:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    f758:	d003      	beq.n	f762 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    f75a:	4906      	ldr	r1, [pc, #24]	; (f774 <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    f75c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    f760:	600a      	str	r2, [r1, #0]

0000f762 <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    f762:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    f764:	f00c fb08 	bl	1bd78 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    f768:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    f76c:	4770      	bx	lr
    f76e:	0000      	.short	0x0000
    ldr r0, =_kernel
    f770:	20024d28 	.word	0x20024d28
    ldr r1, =_SCS_ICSR
    f774:	e000ed04 	.word	0xe000ed04

0000f778 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    f778:	4a09      	ldr	r2, [pc, #36]	; (f7a0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f77a:	490a      	ldr	r1, [pc, #40]	; (f7a4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f77c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f77e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    f780:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    f782:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f784:	4908      	ldr	r1, [pc, #32]	; (f7a8 <arch_swap+0x30>)
    f786:	684b      	ldr	r3, [r1, #4]
    f788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f78c:	604b      	str	r3, [r1, #4]
    f78e:	2300      	movs	r3, #0
    f790:	f383 8811 	msr	BASEPRI, r3
    f794:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f798:	6893      	ldr	r3, [r2, #8]
}
    f79a:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f79c:	4770      	bx	lr
    f79e:	bf00      	nop
    f7a0:	20024d28 	.word	0x20024d28
    f7a4:	0001f8dc 	.word	0x0001f8dc
    f7a8:	e000ed00 	.word	0xe000ed00

0000f7ac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f7ac:	4929      	ldr	r1, [pc, #164]	; (f854 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f7ae:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f7b0:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    f7b4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f7b6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f7ba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    f7be:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f7c2:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    f7c6:	d004      	beq.n	f7d2 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    f7c8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    f7cc:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    f7d0:	e007      	b.n	f7e2 <out_fp_endif>

0000f7d2 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    f7d2:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    f7d6:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    f7da:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    f7de:	f050 0004 	orrs.w	r0, r0, #4

0000f7e2 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    f7e2:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f7e6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f7e8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    f7ec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    f7f0:	4f19      	ldr	r7, [pc, #100]	; (f858 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    f7f2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    f7f6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    f7f8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    f7fa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    f7fc:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    f7fe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    f800:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    f802:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    f806:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    f80a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    f80e:	d105      	bne.n	f81c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    f810:	2300      	movs	r3, #0
    vmsr fpscr, r3
    f812:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f816:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    f81a:	e005      	b.n	f828 <in_fp_endif>

0000f81c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    f81c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    f820:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    f824:	ec90 8a10 	vldmia	r0, {s16-s31}

0000f828 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    f828:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    f82c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    f830:	f383 8814 	msr	CONTROL, r3
    isb
    f834:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    f838:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    f83a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    f83c:	f00d fd0e 	bl	1d25c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    f840:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    f844:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    f848:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    f84c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    f850:	4770      	bx	lr
    f852:	0000      	.short	0x0000
    ldr r1, =_kernel
    f854:	20024d28 	.word	0x20024d28
    ldr v4, =_SCS_ICSR
    f858:	e000ed04 	.word	0xe000ed04

0000f85c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    f85c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    f860:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    f862:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f866:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f86a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f86c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f870:	2902      	cmp	r1, #2
    beq _oops
    f872:	d0ff      	beq.n	f874 <_oops>

0000f874 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f874:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    f876:	f00d fce6 	bl	1d246 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    f87a:	bd01      	pop	{r0, pc}

0000f87c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    f87c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    f87e:	2b00      	cmp	r3, #0
    f880:	db08      	blt.n	f894 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f882:	2201      	movs	r2, #1
    f884:	f000 001f 	and.w	r0, r0, #31
    f888:	fa02 f000 	lsl.w	r0, r2, r0
    f88c:	4a02      	ldr	r2, [pc, #8]	; (f898 <arch_irq_enable+0x1c>)
    f88e:	095b      	lsrs	r3, r3, #5
    f890:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    f894:	4770      	bx	lr
    f896:	bf00      	nop
    f898:	e000e100 	.word	0xe000e100

0000f89c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f89c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f89e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    f8a0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8a4:	bfa8      	it	ge
    f8a6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    f8aa:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8ae:	bfb8      	it	lt
    f8b0:	4b05      	ldrlt	r3, [pc, #20]	; (f8c8 <z_arm_irq_priority_set+0x2c>)
    f8b2:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8b4:	bfab      	itete	ge
    f8b6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8ba:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8be:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8c2:	5419      	strblt	r1, [r3, r0]
}
    f8c4:	4770      	bx	lr
    f8c6:	bf00      	nop
    f8c8:	e000ed14 	.word	0xe000ed14

0000f8cc <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    f8cc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    f8ce:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    f8d0:	4b04      	ldr	r3, [pc, #16]	; (f8e4 <_arch_isr_direct_pm+0x18>)
    f8d2:	6a18      	ldr	r0, [r3, #32]
    f8d4:	b118      	cbz	r0, f8de <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    f8d6:	2200      	movs	r2, #0
    f8d8:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    f8da:	f00e ffc2 	bl	1e862 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    f8de:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    f8e0:	bd08      	pop	{r3, pc}
    f8e2:	bf00      	nop
    f8e4:	20024d28 	.word	0x20024d28

0000f8e8 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    f8e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f8ea:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f8ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    f8ee:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f8f0:	9300      	str	r3, [sp, #0]
    f8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    f8f4:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f8f6:	f00f f9d6 	bl	1eca6 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    f8fa:	4a0c      	ldr	r2, [pc, #48]	; (f92c <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    f8fc:	f1a4 0320 	sub.w	r3, r4, #32
    f900:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    f904:	f022 0201 	bic.w	r2, r2, #1
    f908:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f90a:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    f90c:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f90e:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    f910:	9a07      	ldr	r2, [sp, #28]
    f912:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    f914:	9a08      	ldr	r2, [sp, #32]
    f916:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    f918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    f91c:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    f91e:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    f920:	2300      	movs	r3, #0
    f922:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    f924:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f928:	b002      	add	sp, #8
    f92a:	bd70      	pop	{r4, r5, r6, pc}
    f92c:	0001c773 	.word	0x0001c773

0000f930 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f934:	461f      	mov	r7, r3
    f936:	4606      	mov	r6, r0
    f938:	460c      	mov	r4, r1
    f93a:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f93c:	2300      	movs	r3, #0
    f93e:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    f942:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    f946:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    f94a:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    f94e:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f952:	f000 fc1b 	bl	1018c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    f956:	4b0a      	ldr	r3, [pc, #40]	; (f980 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    f958:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f95a:	4630      	mov	r0, r6
	_current = main_thread;
    f95c:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    f95e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f962:	f00d fc7b 	bl	1d25c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f966:	4638      	mov	r0, r7
    f968:	f384 8809 	msr	PSP, r4
    f96c:	2100      	movs	r1, #0
    f96e:	b663      	cpsie	if
    f970:	f381 8811 	msr	BASEPRI, r1
    f974:	f3bf 8f6f 	isb	sy
    f978:	2200      	movs	r2, #0
    f97a:	2300      	movs	r3, #0
    f97c:	f00c fef9 	bl	1c772 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f980:	20024d28 	.word	0x20024d28

0000f984 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    f984:	4901      	ldr	r1, [pc, #4]	; (f98c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    f986:	2210      	movs	r2, #16
	str r2, [r1]
    f988:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    f98a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    f98c:	e000ed10 	.word	0xe000ed10

0000f990 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    f990:	4040      	eors	r0, r0
	msr BASEPRI, r0
    f992:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    f996:	bf30      	wfi

	bx lr
    f998:	4770      	bx	lr
    f99a:	bf00      	nop

0000f99c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    f99c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f9a0:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    f9a4:	4672      	mov	r2, lr

	push {r0, lr}
    f9a6:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    f9a8:	f000 fab0 	bl	ff0c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    f9ac:	bd01      	pop	{r0, pc}
    f9ae:	bf00      	nop

0000f9b0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9b4:	4681      	mov	r9, r0
    f9b6:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    f9b8:	460c      	mov	r4, r1
    f9ba:	2900      	cmp	r1, #0
    f9bc:	d07a      	beq.n	fab4 <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    f9be:	2201      	movs	r2, #1
    f9c0:	f04f 0300 	mov.w	r3, #0
    f9c4:	4d3f      	ldr	r5, [pc, #252]	; (fac4 <z_arm_fatal_error+0x114>)
    f9c6:	f362 0307 	bfi	r3, r2, #0, #8
    f9ca:	4a3f      	ldr	r2, [pc, #252]	; (fac8 <z_arm_fatal_error+0x118>)
    f9cc:	483f      	ldr	r0, [pc, #252]	; (facc <z_arm_fatal_error+0x11c>)
    f9ce:	1aad      	subs	r5, r5, r2
    f9d0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    f9d4:	f365 138f 	bfi	r3, r5, #6, #10
    f9d8:	f8ad 3000 	strh.w	r3, [sp]
    f9dc:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    f9e0:	6809      	ldr	r1, [r1, #0]
    f9e2:	f00d f8d7 	bl	1cb94 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    f9e6:	2201      	movs	r2, #1
    f9e8:	f04f 0300 	mov.w	r3, #0
    f9ec:	f362 0307 	bfi	r3, r2, #0, #8
    f9f0:	f365 138f 	bfi	r3, r5, #6, #10
    f9f4:	f8ad 3000 	strh.w	r3, [sp]
    f9f8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f9fc:	68e1      	ldr	r1, [r4, #12]
    f9fe:	4834      	ldr	r0, [pc, #208]	; (fad0 <z_arm_fatal_error+0x120>)
    fa00:	f00d f8c8 	bl	1cb94 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    fa04:	2301      	movs	r3, #1
    fa06:	f04f 0200 	mov.w	r2, #0
    fa0a:	f363 0207 	bfi	r2, r3, #0, #8
    fa0e:	f365 128f 	bfi	r2, r5, #6, #10
    fa12:	69e1      	ldr	r1, [r4, #28]
    fa14:	482f      	ldr	r0, [pc, #188]	; (fad4 <z_arm_fatal_error+0x124>)
    fa16:	f00d f891 	bl	1cb3c <log_1>
	for (int i = 0; i < 16; i += 4) {
    fa1a:	4627      	mov	r7, r4
    fa1c:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fa1e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; fae0 <z_arm_fatal_error+0x130>
    fa22:	edd7 7a08 	vldr	s15, [r7, #32]
    fa26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa2a:	edcd 7a03 	vstr	s15, [sp, #12]
    fa2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    fa32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa36:	edcd 7a05 	vstr	s15, [sp, #20]
    fa3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    fa3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa42:	edcd 7a07 	vstr	s15, [sp, #28]
    fa46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    fa4a:	2208      	movs	r2, #8
    fa4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa50:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    fa54:	f043 0301 	orr.w	r3, r3, #1
    fa58:	f363 0807 	bfi	r8, r3, #0, #8
    fa5c:	1c73      	adds	r3, r6, #1
    fa5e:	9304      	str	r3, [sp, #16]
    fa60:	1cb3      	adds	r3, r6, #2
    fa62:	9306      	str	r3, [sp, #24]
    fa64:	f365 188f 	bfi	r8, r5, #6, #10
    fa68:	1cf3      	adds	r3, r6, #3
    fa6a:	9602      	str	r6, [sp, #8]
    fa6c:	9308      	str	r3, [sp, #32]
    fa6e:	eb0d 0102 	add.w	r1, sp, r2
    fa72:	4643      	mov	r3, r8
    fa74:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    fa76:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fa78:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    fa7c:	f00d f8a5 	bl	1cbca <log_n>
	for (int i = 0; i < 16; i += 4) {
    fa80:	2e10      	cmp	r6, #16
    fa82:	f107 0710 	add.w	r7, r7, #16
    fa86:	d1cc      	bne.n	fa22 <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    fa88:	2301      	movs	r3, #1
    fa8a:	f04f 0200 	mov.w	r2, #0
    fa8e:	f363 0207 	bfi	r2, r3, #0, #8
    fa92:	f365 128f 	bfi	r2, r5, #6, #10
    fa96:	6e21      	ldr	r1, [r4, #96]	; 0x60
    fa98:	480f      	ldr	r0, [pc, #60]	; (fad8 <z_arm_fatal_error+0x128>)
    fa9a:	f00d f84f 	bl	1cb3c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    fa9e:	f04f 0200 	mov.w	r2, #0
    faa2:	2301      	movs	r3, #1
    faa4:	f363 0207 	bfi	r2, r3, #0, #8
    faa8:	f365 128f 	bfi	r2, r5, #6, #10
    faac:	69a1      	ldr	r1, [r4, #24]
    faae:	480b      	ldr	r0, [pc, #44]	; (fadc <z_arm_fatal_error+0x12c>)
    fab0:	f00d f844 	bl	1cb3c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fab4:	4621      	mov	r1, r4
    fab6:	4648      	mov	r0, r9
    fab8:	f00b fa4e 	bl	1af58 <z_fatal_error>
}
    fabc:	b00a      	add	sp, #40	; 0x28
    fabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fac2:	bf00      	nop
    fac4:	0001f388 	.word	0x0001f388
    fac8:	0001f328 	.word	0x0001f328
    facc:	000205b5 	.word	0x000205b5
    fad0:	000205e4 	.word	0x000205e4
    fad4:	00020613 	.word	0x00020613
    fad8:	00020665 	.word	0x00020665
    fadc:	00020674 	.word	0x00020674
    fae0:	00020622 	.word	0x00020622

0000fae4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    fae4:	bf30      	wfi
    b z_SysNmiOnReset
    fae6:	f7ff bffd 	b.w	fae4 <z_SysNmiOnReset>
    faea:	bf00      	nop

0000faec <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    faec:	4a11      	ldr	r2, [pc, #68]	; (fb34 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    faee:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    faf0:	4b11      	ldr	r3, [pc, #68]	; (fb38 <z_arm_prep_c+0x4c>)
    faf2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    faf6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    faf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fafc:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    fb00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fb04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    fb08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    fb0c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    fb10:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    fb14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fb18:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fb1c:	2300      	movs	r3, #0
    fb1e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    fb22:	f00b fa99 	bl	1b058 <z_bss_zero>
	z_data_copy();
    fb26:	f00b faa1 	bl	1b06c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    fb2a:	f000 fafb 	bl	10124 <z_arm_int_lib_init>
	z_cstart();
    fb2e:	f00b fad5 	bl	1b0dc <z_cstart>
    fb32:	bf00      	nop
    fb34:	0000c000 	.word	0x0000c000
    fb38:	e000ed00 	.word	0xe000ed00

0000fb3c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    fb3c:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    fb3e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    fb40:	4a0b      	ldr	r2, [pc, #44]	; (fb70 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    fb42:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    fb44:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    fb46:	bf1e      	ittt	ne
	movne	r1, #0
    fb48:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    fb4a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    fb4c:	f00e fe89 	blne	1e862 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    fb50:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    fb52:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    fb56:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    fb5a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    fb5e:	4905      	ldr	r1, [pc, #20]	; (fb74 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    fb60:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    fb62:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    fb64:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    fb66:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    fb6a:	4903      	ldr	r1, [pc, #12]	; (fb78 <_isr_wrapper+0x3c>)
	bx r1
    fb6c:	4708      	bx	r1
    fb6e:	0000      	.short	0x0000
	ldr r2, =_kernel
    fb70:	20024d28 	.word	0x20024d28
	ldr r1, =_sw_isr_table
    fb74:	0001f03c 	.word	0x0001f03c
	ldr r1, =z_arm_int_exit
    fb78:	0000f751 	.word	0x0000f751

0000fb7c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    fb7c:	f00c ffac 	bl	1cad8 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fb80:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fb82:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    fb86:	4808      	ldr	r0, [pc, #32]	; (fba8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    fb88:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    fb8c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    fb8e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    fb92:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    fb96:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    fb98:	4308      	orrs	r0, r1
    msr CONTROL, r0
    fb9a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    fb9e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    fba2:	f7ff ffa3 	bl	faec <z_arm_prep_c>
    fba6:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    fba8:	200282f8 	.word	0x200282f8

0000fbac <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    fbac:	2301      	movs	r3, #1
    fbae:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    fbb2:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    fbb4:	f363 0107 	bfi	r1, r3, #0, #8
    fbb8:	4c3a      	ldr	r4, [pc, #232]	; (fca4 <usage_fault.isra.2+0xf8>)
    fbba:	4b3b      	ldr	r3, [pc, #236]	; (fca8 <usage_fault.isra.2+0xfc>)
    fbbc:	483b      	ldr	r0, [pc, #236]	; (fcac <usage_fault.isra.2+0x100>)
    fbbe:	1ae4      	subs	r4, r4, r3
    fbc0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fbc4:	f364 118f 	bfi	r1, r4, #6, #10
    fbc8:	f00c ffab 	bl	1cb22 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    fbcc:	4b38      	ldr	r3, [pc, #224]	; (fcb0 <usage_fault.isra.2+0x104>)
    fbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fbd0:	0199      	lsls	r1, r3, #6
    fbd2:	d509      	bpl.n	fbe8 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    fbd4:	f04f 0100 	mov.w	r1, #0
    fbd8:	2301      	movs	r3, #1
    fbda:	f363 0107 	bfi	r1, r3, #0, #8
    fbde:	f364 118f 	bfi	r1, r4, #6, #10
    fbe2:	4834      	ldr	r0, [pc, #208]	; (fcb4 <usage_fault.isra.2+0x108>)
    fbe4:	f00c ff9d 	bl	1cb22 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    fbe8:	4b31      	ldr	r3, [pc, #196]	; (fcb0 <usage_fault.isra.2+0x104>)
    fbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fbec:	01da      	lsls	r2, r3, #7
    fbee:	d509      	bpl.n	fc04 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    fbf0:	f04f 0100 	mov.w	r1, #0
    fbf4:	2301      	movs	r3, #1
    fbf6:	f363 0107 	bfi	r1, r3, #0, #8
    fbfa:	f364 118f 	bfi	r1, r4, #6, #10
    fbfe:	482e      	ldr	r0, [pc, #184]	; (fcb8 <usage_fault.isra.2+0x10c>)
    fc00:	f00c ff8f 	bl	1cb22 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    fc04:	4b2a      	ldr	r3, [pc, #168]	; (fcb0 <usage_fault.isra.2+0x104>)
    fc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc08:	02db      	lsls	r3, r3, #11
    fc0a:	d509      	bpl.n	fc20 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    fc0c:	f04f 0100 	mov.w	r1, #0
    fc10:	2301      	movs	r3, #1
    fc12:	f363 0107 	bfi	r1, r3, #0, #8
    fc16:	f364 118f 	bfi	r1, r4, #6, #10
    fc1a:	4828      	ldr	r0, [pc, #160]	; (fcbc <usage_fault.isra.2+0x110>)
    fc1c:	f00c ff81 	bl	1cb22 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    fc20:	4b23      	ldr	r3, [pc, #140]	; (fcb0 <usage_fault.isra.2+0x104>)
    fc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc24:	0318      	lsls	r0, r3, #12
    fc26:	d509      	bpl.n	fc3c <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    fc28:	f04f 0100 	mov.w	r1, #0
    fc2c:	2301      	movs	r3, #1
    fc2e:	f363 0107 	bfi	r1, r3, #0, #8
    fc32:	f364 118f 	bfi	r1, r4, #6, #10
    fc36:	4822      	ldr	r0, [pc, #136]	; (fcc0 <usage_fault.isra.2+0x114>)
    fc38:	f00c ff73 	bl	1cb22 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    fc3c:	4b1c      	ldr	r3, [pc, #112]	; (fcb0 <usage_fault.isra.2+0x104>)
    fc3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc40:	0359      	lsls	r1, r3, #13
    fc42:	d509      	bpl.n	fc58 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    fc44:	f04f 0100 	mov.w	r1, #0
    fc48:	2301      	movs	r3, #1
    fc4a:	f363 0107 	bfi	r1, r3, #0, #8
    fc4e:	f364 118f 	bfi	r1, r4, #6, #10
    fc52:	481c      	ldr	r0, [pc, #112]	; (fcc4 <usage_fault.isra.2+0x118>)
    fc54:	f00c ff65 	bl	1cb22 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    fc58:	4b15      	ldr	r3, [pc, #84]	; (fcb0 <usage_fault.isra.2+0x104>)
    fc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc5c:	039a      	lsls	r2, r3, #14
    fc5e:	d509      	bpl.n	fc74 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    fc60:	f04f 0100 	mov.w	r1, #0
    fc64:	2301      	movs	r3, #1
    fc66:	f363 0107 	bfi	r1, r3, #0, #8
    fc6a:	f364 118f 	bfi	r1, r4, #6, #10
    fc6e:	4816      	ldr	r0, [pc, #88]	; (fcc8 <usage_fault.isra.2+0x11c>)
    fc70:	f00c ff57 	bl	1cb22 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    fc74:	4b0e      	ldr	r3, [pc, #56]	; (fcb0 <usage_fault.isra.2+0x104>)
    fc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc78:	03db      	lsls	r3, r3, #15
    fc7a:	d509      	bpl.n	fc90 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    fc7c:	f04f 0100 	mov.w	r1, #0
    fc80:	2301      	movs	r3, #1
    fc82:	f363 0107 	bfi	r1, r3, #0, #8
    fc86:	f364 118f 	bfi	r1, r4, #6, #10
    fc8a:	4810      	ldr	r0, [pc, #64]	; (fccc <usage_fault.isra.2+0x120>)
    fc8c:	f00c ff49 	bl	1cb22 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fc90:	4a07      	ldr	r2, [pc, #28]	; (fcb0 <usage_fault.isra.2+0x104>)

	return reason;
}
    fc92:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fc94:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fc96:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    fc9a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    fc9e:	6293      	str	r3, [r2, #40]	; 0x28
}
    fca0:	bd10      	pop	{r4, pc}
    fca2:	bf00      	nop
    fca4:	0001f388 	.word	0x0001f388
    fca8:	0001f328 	.word	0x0001f328
    fcac:	00020802 	.word	0x00020802
    fcb0:	e000ed00 	.word	0xe000ed00
    fcb4:	0002081a 	.word	0x0002081a
    fcb8:	0002082d 	.word	0x0002082d
    fcbc:	00020847 	.word	0x00020847
    fcc0:	00020871 	.word	0x00020871
    fcc4:	0002088f 	.word	0x0002088f
    fcc8:	000208b4 	.word	0x000208b4
    fccc:	000208ce 	.word	0x000208ce

0000fcd0 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    fcd2:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fcd4:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    fcd6:	f04f 0100 	mov.w	r1, #0
    fcda:	4c37      	ldr	r4, [pc, #220]	; (fdb8 <mem_manage_fault.isra.4+0xe8>)
    fcdc:	f363 0107 	bfi	r1, r3, #0, #8
    fce0:	4b36      	ldr	r3, [pc, #216]	; (fdbc <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fce2:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    fce4:	1ae4      	subs	r4, r4, r3
    fce6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fcea:	f364 118f 	bfi	r1, r4, #6, #10
    fcee:	4834      	ldr	r0, [pc, #208]	; (fdc0 <mem_manage_fault.isra.4+0xf0>)
    fcf0:	f00c ff17 	bl	1cb22 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    fcf4:	4b33      	ldr	r3, [pc, #204]	; (fdc4 <mem_manage_fault.isra.4+0xf4>)
    fcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fcf8:	06d9      	lsls	r1, r3, #27
    fcfa:	d509      	bpl.n	fd10 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    fcfc:	f04f 0100 	mov.w	r1, #0
    fd00:	2301      	movs	r3, #1
    fd02:	f363 0107 	bfi	r1, r3, #0, #8
    fd06:	f364 118f 	bfi	r1, r4, #6, #10
    fd0a:	482f      	ldr	r0, [pc, #188]	; (fdc8 <mem_manage_fault.isra.4+0xf8>)
    fd0c:	f00c ff09 	bl	1cb22 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    fd10:	4b2c      	ldr	r3, [pc, #176]	; (fdc4 <mem_manage_fault.isra.4+0xf4>)
    fd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd14:	071a      	lsls	r2, r3, #28
    fd16:	d509      	bpl.n	fd2c <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    fd18:	f04f 0100 	mov.w	r1, #0
    fd1c:	2301      	movs	r3, #1
    fd1e:	f363 0107 	bfi	r1, r3, #0, #8
    fd22:	f364 118f 	bfi	r1, r4, #6, #10
    fd26:	4829      	ldr	r0, [pc, #164]	; (fdcc <mem_manage_fault.isra.4+0xfc>)
    fd28:	f00c fefb 	bl	1cb22 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    fd2c:	4d25      	ldr	r5, [pc, #148]	; (fdc4 <mem_manage_fault.isra.4+0xf4>)
    fd2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fd30:	079b      	lsls	r3, r3, #30
    fd32:	d51c      	bpl.n	fd6e <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    fd34:	2301      	movs	r3, #1
    fd36:	f04f 0100 	mov.w	r1, #0
    fd3a:	f363 0107 	bfi	r1, r3, #0, #8
    fd3e:	f364 118f 	bfi	r1, r4, #6, #10
    fd42:	4823      	ldr	r0, [pc, #140]	; (fdd0 <mem_manage_fault.isra.4+0x100>)
    fd44:	f00c feed 	bl	1cb22 <log_0>
		mmfar = SCB->MMFAR;
    fd48:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    fd4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fd4c:	0618      	lsls	r0, r3, #24
    fd4e:	d50e      	bpl.n	fd6e <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    fd50:	f04f 0200 	mov.w	r2, #0
    fd54:	2301      	movs	r3, #1
    fd56:	f363 0207 	bfi	r2, r3, #0, #8
    fd5a:	f364 128f 	bfi	r2, r4, #6, #10
    fd5e:	481d      	ldr	r0, [pc, #116]	; (fdd4 <mem_manage_fault.isra.4+0x104>)
    fd60:	f00c feec 	bl	1cb3c <log_1>
			if (from_hard_fault) {
    fd64:	b11f      	cbz	r7, fd6e <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    fd66:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fd68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    fd6c:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    fd6e:	4b15      	ldr	r3, [pc, #84]	; (fdc4 <mem_manage_fault.isra.4+0xf4>)
    fd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd72:	07da      	lsls	r2, r3, #31
    fd74:	d509      	bpl.n	fd8a <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    fd76:	f04f 0100 	mov.w	r1, #0
    fd7a:	2301      	movs	r3, #1
    fd7c:	f363 0107 	bfi	r1, r3, #0, #8
    fd80:	f364 118f 	bfi	r1, r4, #6, #10
    fd84:	4814      	ldr	r0, [pc, #80]	; (fdd8 <mem_manage_fault.isra.4+0x108>)
    fd86:	f00c fecc 	bl	1cb22 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    fd8a:	4b0e      	ldr	r3, [pc, #56]	; (fdc4 <mem_manage_fault.isra.4+0xf4>)
    fd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd8e:	069b      	lsls	r3, r3, #26
    fd90:	d509      	bpl.n	fda6 <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    fd92:	f04f 0100 	mov.w	r1, #0
    fd96:	2301      	movs	r3, #1
    fd98:	f363 0107 	bfi	r1, r3, #0, #8
    fd9c:	f364 118f 	bfi	r1, r4, #6, #10
    fda0:	480e      	ldr	r0, [pc, #56]	; (fddc <mem_manage_fault.isra.4+0x10c>)
    fda2:	f00c febe 	bl	1cb22 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    fda6:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    fda8:	4b06      	ldr	r3, [pc, #24]	; (fdc4 <mem_manage_fault.isra.4+0xf4>)
    fdaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    fdac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fdae:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    fdb2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    fdb4:	7030      	strb	r0, [r6, #0]
}
    fdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdb8:	0001f388 	.word	0x0001f388
    fdbc:	0001f328 	.word	0x0001f328
    fdc0:	0002072a 	.word	0x0002072a
    fdc4:	e000ed00 	.word	0xe000ed00
    fdc8:	00020740 	.word	0x00020740
    fdcc:	00020773 	.word	0x00020773
    fdd0:	00020786 	.word	0x00020786
    fdd4:	0002079e 	.word	0x0002079e
    fdd8:	000207b4 	.word	0x000207b4
    fddc:	000207d3 	.word	0x000207d3

0000fde0 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    fde2:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fde4:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    fde6:	f04f 0100 	mov.w	r1, #0
    fdea:	4c3d      	ldr	r4, [pc, #244]	; (fee0 <bus_fault.isra.5+0x100>)
    fdec:	f363 0107 	bfi	r1, r3, #0, #8
    fdf0:	4b3c      	ldr	r3, [pc, #240]	; (fee4 <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fdf2:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    fdf4:	1ae4      	subs	r4, r4, r3
    fdf6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fdfa:	f364 118f 	bfi	r1, r4, #6, #10
    fdfe:	483a      	ldr	r0, [pc, #232]	; (fee8 <bus_fault.isra.5+0x108>)
    fe00:	f00c fe8f 	bl	1cb22 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    fe04:	4b39      	ldr	r3, [pc, #228]	; (feec <bus_fault.isra.5+0x10c>)
    fe06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fe08:	04d9      	lsls	r1, r3, #19
    fe0a:	d509      	bpl.n	fe20 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    fe0c:	f04f 0100 	mov.w	r1, #0
    fe10:	2301      	movs	r3, #1
    fe12:	f363 0107 	bfi	r1, r3, #0, #8
    fe16:	f364 118f 	bfi	r1, r4, #6, #10
    fe1a:	4835      	ldr	r0, [pc, #212]	; (fef0 <bus_fault.isra.5+0x110>)
    fe1c:	f00c fe81 	bl	1cb22 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    fe20:	4b32      	ldr	r3, [pc, #200]	; (feec <bus_fault.isra.5+0x10c>)
    fe22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fe24:	051a      	lsls	r2, r3, #20
    fe26:	d509      	bpl.n	fe3c <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    fe28:	f04f 0100 	mov.w	r1, #0
    fe2c:	2301      	movs	r3, #1
    fe2e:	f363 0107 	bfi	r1, r3, #0, #8
    fe32:	f364 118f 	bfi	r1, r4, #6, #10
    fe36:	482f      	ldr	r0, [pc, #188]	; (fef4 <bus_fault.isra.5+0x114>)
    fe38:	f00c fe73 	bl	1cb22 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    fe3c:	4d2b      	ldr	r5, [pc, #172]	; (feec <bus_fault.isra.5+0x10c>)
    fe3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe40:	059b      	lsls	r3, r3, #22
    fe42:	d51c      	bpl.n	fe7e <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    fe44:	2301      	movs	r3, #1
    fe46:	f04f 0100 	mov.w	r1, #0
    fe4a:	f363 0107 	bfi	r1, r3, #0, #8
    fe4e:	f364 118f 	bfi	r1, r4, #6, #10
    fe52:	4829      	ldr	r0, [pc, #164]	; (fef8 <bus_fault.isra.5+0x118>)
    fe54:	f00c fe65 	bl	1cb22 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    fe58:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    fe5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe5c:	0418      	lsls	r0, r3, #16
    fe5e:	d50e      	bpl.n	fe7e <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    fe60:	f04f 0200 	mov.w	r2, #0
    fe64:	2301      	movs	r3, #1
    fe66:	f363 0207 	bfi	r2, r3, #0, #8
    fe6a:	f364 128f 	bfi	r2, r4, #6, #10
    fe6e:	4823      	ldr	r0, [pc, #140]	; (fefc <bus_fault.isra.5+0x11c>)
    fe70:	f00c fe64 	bl	1cb3c <log_1>
			if (from_hard_fault) {
    fe74:	b11f      	cbz	r7, fe7e <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    fe76:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    fe7c:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    fe7e:	4b1b      	ldr	r3, [pc, #108]	; (feec <bus_fault.isra.5+0x10c>)
    fe80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fe82:	0559      	lsls	r1, r3, #21
    fe84:	d509      	bpl.n	fe9a <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    fe86:	f04f 0100 	mov.w	r1, #0
    fe8a:	2301      	movs	r3, #1
    fe8c:	f363 0107 	bfi	r1, r3, #0, #8
    fe90:	f364 118f 	bfi	r1, r4, #6, #10
    fe94:	481a      	ldr	r0, [pc, #104]	; (ff00 <bus_fault.isra.5+0x120>)
    fe96:	f00c fe44 	bl	1cb22 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    fe9a:	4b14      	ldr	r3, [pc, #80]	; (feec <bus_fault.isra.5+0x10c>)
    fe9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fe9e:	05d2      	lsls	r2, r2, #23
    fea0:	d511      	bpl.n	fec6 <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    fea2:	f04f 0100 	mov.w	r1, #0
    fea6:	2301      	movs	r3, #1
    fea8:	4816      	ldr	r0, [pc, #88]	; (ff04 <bus_fault.isra.5+0x124>)
    feaa:	f363 0107 	bfi	r1, r3, #0, #8
    feae:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    feb2:	f00c fe36 	bl	1cb22 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    feb6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    feb8:	4a0c      	ldr	r2, [pc, #48]	; (feec <bus_fault.isra.5+0x10c>)
    feba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    febc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    fec0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    fec2:	7030      	strb	r0, [r6, #0]
}
    fec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    fec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fec8:	049b      	lsls	r3, r3, #18
    feca:	d5f4      	bpl.n	feb6 <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    fecc:	f04f 0100 	mov.w	r1, #0
    fed0:	2301      	movs	r3, #1
    fed2:	f363 0107 	bfi	r1, r3, #0, #8
    fed6:	f364 118f 	bfi	r1, r4, #6, #10
    feda:	480b      	ldr	r0, [pc, #44]	; (ff08 <bus_fault.isra.5+0x128>)
    fedc:	e7e9      	b.n	feb2 <bus_fault.isra.5+0xd2>
    fede:	bf00      	nop
    fee0:	0001f388 	.word	0x0001f388
    fee4:	0001f328 	.word	0x0001f328
    fee8:	000206a2 	.word	0x000206a2
    feec:	e000ed00 	.word	0xe000ed00
    fef0:	000206b8 	.word	0x000206b8
    fef4:	00020773 	.word	0x00020773
    fef8:	000206c9 	.word	0x000206c9
    fefc:	000206e2 	.word	0x000206e2
    ff00:	000206f7 	.word	0x000206f7
    ff04:	00020712 	.word	0x00020712
    ff08:	000207d3 	.word	0x000207d3

0000ff0c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    ff0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff10:	4b69      	ldr	r3, [pc, #420]	; (100b8 <z_arm_fault+0x1ac>)
{
    ff12:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff14:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    ff18:	4606      	mov	r6, r0
    ff1a:	4689      	mov	r9, r1
    ff1c:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff1e:	f3c8 0708 	ubfx	r7, r8, #0, #9
    ff22:	2500      	movs	r5, #0
    ff24:	f385 8811 	msr	BASEPRI, r5
    ff28:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    ff2c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    ff30:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    ff34:	d128      	bne.n	ff88 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    ff36:	07d0      	lsls	r0, r2, #31
    ff38:	d426      	bmi.n	ff88 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    ff3a:	0651      	lsls	r1, r2, #25
    ff3c:	d403      	bmi.n	ff46 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    ff3e:	0722      	lsls	r2, r4, #28
    ff40:	d412      	bmi.n	ff68 <z_arm_fault+0x5c>
			*nested_exc = true;
    ff42:	2501      	movs	r5, #1
    ff44:	e012      	b.n	ff6c <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    ff46:	2301      	movs	r3, #1
    ff48:	f04f 0100 	mov.w	r1, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    ff4c:	4a5b      	ldr	r2, [pc, #364]	; (100bc <z_arm_fault+0x1b0>)
    ff4e:	f363 0107 	bfi	r1, r3, #0, #8
    ff52:	4b5b      	ldr	r3, [pc, #364]	; (100c0 <z_arm_fault+0x1b4>)
    ff54:	485b      	ldr	r0, [pc, #364]	; (100c4 <z_arm_fault+0x1b8>)
    ff56:	1a9b      	subs	r3, r3, r2
    ff58:	08db      	lsrs	r3, r3, #3
    ff5a:	f363 118f 	bfi	r1, r3, #6, #10
    ff5e:	f00c fde0 	bl	1cb22 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    ff62:	f014 0504 	ands.w	r5, r4, #4
    ff66:	d001      	beq.n	ff6c <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    ff68:	464e      	mov	r6, r9
	*nested_exc = false;
    ff6a:	2500      	movs	r5, #0
	*recoverable = false;
    ff6c:	2300      	movs	r3, #0
    ff6e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    ff72:	1efb      	subs	r3, r7, #3
    ff74:	2b09      	cmp	r3, #9
    ff76:	f200 8082 	bhi.w	1007e <z_arm_fault+0x172>
    ff7a:	e8df f003 	tbb	[pc, r3]
    ff7e:	6b07      	.short	0x6b07
    ff80:	80804e6f 	.word	0x80804e6f
    ff84:	73808080 	.word	0x73808080
		return NULL;
    ff88:	462e      	mov	r6, r5
    ff8a:	e7ef      	b.n	ff6c <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    ff8c:	2301      	movs	r3, #1
    ff8e:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    ff92:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    ff96:	f363 0107 	bfi	r1, r3, #0, #8
    ff9a:	4f49      	ldr	r7, [pc, #292]	; (100c0 <z_arm_fault+0x1b4>)
    ff9c:	4b47      	ldr	r3, [pc, #284]	; (100bc <z_arm_fault+0x1b0>)
    ff9e:	484a      	ldr	r0, [pc, #296]	; (100c8 <z_arm_fault+0x1bc>)
    ffa0:	1aff      	subs	r7, r7, r3
    ffa2:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    ffa6:	f367 118f 	bfi	r1, r7, #6, #10
    ffaa:	f00c fdba 	bl	1cb22 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ffae:	4b42      	ldr	r3, [pc, #264]	; (100b8 <z_arm_fault+0x1ac>)
	*recoverable = false;
    ffb0:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ffb4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    ffb6:	f014 0402 	ands.w	r4, r4, #2
    ffba:	d00b      	beq.n	ffd4 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    ffbc:	f04f 0100 	mov.w	r1, #0
    ffc0:	2301      	movs	r3, #1
    ffc2:	4842      	ldr	r0, [pc, #264]	; (100cc <z_arm_fault+0x1c0>)
    ffc4:	f363 0107 	bfi	r1, r3, #0, #8
    ffc8:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
    ffcc:	f00c fda9 	bl	1cb22 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    ffd0:	2400      	movs	r4, #0
    ffd2:	e025      	b.n	10020 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    ffd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ffd6:	005b      	lsls	r3, r3, #1
    ffd8:	d522      	bpl.n	10020 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    ffda:	2301      	movs	r3, #1
    ffdc:	f04f 0100 	mov.w	r1, #0
    ffe0:	f363 0107 	bfi	r1, r3, #0, #8
    ffe4:	f367 118f 	bfi	r1, r7, #6, #10
    ffe8:	4839      	ldr	r0, [pc, #228]	; (100d0 <z_arm_fault+0x1c4>)
    ffea:	f00c fd9a 	bl	1cb22 <log_0>
		if (SCB_MMFSR != 0) {
    ffee:	4b39      	ldr	r3, [pc, #228]	; (100d4 <z_arm_fault+0x1c8>)
    fff0:	781b      	ldrb	r3, [r3, #0]
    fff2:	b12b      	cbz	r3, 10000 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    fff4:	2001      	movs	r0, #1
    fff6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    fffa:	f7ff fe69 	bl	fcd0 <mem_manage_fault.isra.4>
    fffe:	e00e      	b.n	1001e <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
   10000:	4b35      	ldr	r3, [pc, #212]	; (100d8 <z_arm_fault+0x1cc>)
   10002:	781b      	ldrb	r3, [r3, #0]
   10004:	b12b      	cbz	r3, 10012 <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
   10006:	2001      	movs	r0, #1
   10008:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1000c:	f7ff fee8 	bl	fde0 <bus_fault.isra.5>
   10010:	e005      	b.n	1001e <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
   10012:	4b32      	ldr	r3, [pc, #200]	; (100dc <z_arm_fault+0x1d0>)
   10014:	881b      	ldrh	r3, [r3, #0]
   10016:	b29b      	uxth	r3, r3
   10018:	b113      	cbz	r3, 10020 <z_arm_fault+0x114>
			reason = usage_fault(esf);
   1001a:	f7ff fdc7 	bl	fbac <usage_fault.isra.2>
   1001e:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10020:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10024:	b99b      	cbnz	r3, 1004e <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10026:	2268      	movs	r2, #104	; 0x68
   10028:	4631      	mov	r1, r6
   1002a:	a802      	add	r0, sp, #8
   1002c:	f00d faef 	bl	1d60e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   10030:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10032:	2d00      	cmp	r5, #0
   10034:	d03a      	beq.n	100ac <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   10036:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1003a:	b922      	cbnz	r2, 10046 <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1003c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10040:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10044:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   10046:	a902      	add	r1, sp, #8
   10048:	4620      	mov	r0, r4
   1004a:	f7ff fcb1 	bl	f9b0 <z_arm_fatal_error>
}
   1004e:	b01d      	add	sp, #116	; 0x74
   10050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   10054:	f10d 0107 	add.w	r1, sp, #7
   10058:	2000      	movs	r0, #0
   1005a:	e7ce      	b.n	fffa <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
   1005c:	f10d 0107 	add.w	r1, sp, #7
   10060:	2000      	movs	r0, #0
   10062:	e7d3      	b.n	1000c <z_arm_fault+0x100>
	PR_FAULT_INFO(
   10064:	2301      	movs	r3, #1
   10066:	f04f 0100 	mov.w	r1, #0
   1006a:	4a14      	ldr	r2, [pc, #80]	; (100bc <z_arm_fault+0x1b0>)
   1006c:	f363 0107 	bfi	r1, r3, #0, #8
   10070:	4b13      	ldr	r3, [pc, #76]	; (100c0 <z_arm_fault+0x1b4>)
   10072:	481b      	ldr	r0, [pc, #108]	; (100e0 <z_arm_fault+0x1d4>)
   10074:	1a9b      	subs	r3, r3, r2
   10076:	08db      	lsrs	r3, r3, #3
   10078:	f363 118f 	bfi	r1, r3, #6, #10
   1007c:	e7a6      	b.n	ffcc <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
   1007e:	2201      	movs	r2, #1
   10080:	f04f 0300 	mov.w	r3, #0
   10084:	490e      	ldr	r1, [pc, #56]	; (100c0 <z_arm_fault+0x1b4>)
   10086:	f362 0307 	bfi	r3, r2, #0, #8
   1008a:	4a0c      	ldr	r2, [pc, #48]	; (100bc <z_arm_fault+0x1b0>)
   1008c:	4815      	ldr	r0, [pc, #84]	; (100e4 <z_arm_fault+0x1d8>)
   1008e:	1a89      	subs	r1, r1, r2
   10090:	08c9      	lsrs	r1, r1, #3
   10092:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   10096:	f361 138f 	bfi	r3, r1, #6, #10
   1009a:	f1a7 0210 	sub.w	r2, r7, #16
   1009e:	4912      	ldr	r1, [pc, #72]	; (100e8 <z_arm_fault+0x1dc>)
   100a0:	bf18      	it	ne
   100a2:	4601      	movne	r1, r0
   100a4:	4811      	ldr	r0, [pc, #68]	; (100ec <z_arm_fault+0x1e0>)
   100a6:	f00c fd5d 	bl	1cb64 <log_2>
   100aa:	e791      	b.n	ffd0 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   100ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   100b0:	f023 0301 	bic.w	r3, r3, #1
   100b4:	e7c6      	b.n	10044 <z_arm_fault+0x138>
   100b6:	bf00      	nop
   100b8:	e000ed00 	.word	0xe000ed00
   100bc:	0001f328 	.word	0x0001f328
   100c0:	0001f388 	.word	0x0001f388
   100c4:	000208f9 	.word	0x000208f9
   100c8:	0002091c 	.word	0x0002091c
   100cc:	00020933 	.word	0x00020933
   100d0:	00020954 	.word	0x00020954
   100d4:	e000ed28 	.word	0xe000ed28
   100d8:	e000ed29 	.word	0xe000ed29
   100dc:	e000ed2a 	.word	0xe000ed2a
   100e0:	00020973 	.word	0x00020973
   100e4:	000209be 	.word	0x000209be
   100e8:	000209a9 	.word	0x000209a9
   100ec:	000209d7 	.word	0x000209d7

000100f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   100f0:	4a02      	ldr	r2, [pc, #8]	; (100fc <z_arm_fault_init+0xc>)
   100f2:	6953      	ldr	r3, [r2, #20]
   100f4:	f043 0310 	orr.w	r3, r3, #16
   100f8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   100fa:	4770      	bx	lr
   100fc:	e000ed00 	.word	0xe000ed00

00010100 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   10100:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   10104:	4905      	ldr	r1, [pc, #20]	; (1011c <sys_arch_reboot+0x1c>)
   10106:	4b06      	ldr	r3, [pc, #24]	; (10120 <sys_arch_reboot+0x20>)
   10108:	68ca      	ldr	r2, [r1, #12]
   1010a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1010e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10110:	60cb      	str	r3, [r1, #12]
   10112:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   10116:	bf00      	nop
   10118:	e7fd      	b.n	10116 <sys_arch_reboot+0x16>
   1011a:	bf00      	nop
   1011c:	e000ed00 	.word	0xe000ed00
   10120:	05fa0004 	.word	0x05fa0004

00010124 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   10124:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10126:	2120      	movs	r1, #32
   10128:	4803      	ldr	r0, [pc, #12]	; (10138 <z_arm_int_lib_init+0x14>)
   1012a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1012c:	3301      	adds	r3, #1
   1012e:	2b41      	cmp	r3, #65	; 0x41
   10130:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10134:	d1f9      	bne.n	1012a <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10136:	4770      	bx	lr
   10138:	e000e100 	.word	0xe000e100

0001013c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   1013c:	b538      	push	{r3, r4, r5, lr}
   1013e:	4605      	mov	r5, r0
	__asm__ volatile(
   10140:	f04f 0320 	mov.w	r3, #32
   10144:	f3ef 8411 	mrs	r4, BASEPRI
   10148:	f383 8811 	msr	BASEPRI, r3
   1014c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   10150:	f00e fdca 	bl	1ece8 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   10154:	4b0b      	ldr	r3, [pc, #44]	; (10184 <z_impl_k_thread_abort+0x48>)
   10156:	689b      	ldr	r3, [r3, #8]
   10158:	42ab      	cmp	r3, r5
   1015a:	d10d      	bne.n	10178 <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   1015c:	4b0a      	ldr	r3, [pc, #40]	; (10188 <z_impl_k_thread_abort+0x4c>)
   1015e:	685a      	ldr	r2, [r3, #4]
   10160:	f3c2 0208 	ubfx	r2, r2, #0, #9
   10164:	b922      	cbnz	r2, 10170 <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
   10166:	f00b fe07 	bl	1bd78 <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   1016a:	4620      	mov	r0, r4
   1016c:	f7ff fb04 	bl	f778 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10170:	685a      	ldr	r2, [r3, #4]
   10172:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   10176:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   10178:	4620      	mov	r0, r4
}
   1017a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1017e:	f00e bccd 	b.w	1eb1c <z_reschedule_irqlock>
   10182:	bf00      	nop
   10184:	20024d28 	.word	0x20024d28
   10188:	e000ed00 	.word	0xe000ed00

0001018c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1018c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1018e:	4b0e      	ldr	r3, [pc, #56]	; (101c8 <z_arm_configure_static_mpu_regions+0x3c>)
{
   10190:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   10192:	9302      	str	r3, [sp, #8]
   10194:	4b0d      	ldr	r3, [pc, #52]	; (101cc <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10196:	4c0e      	ldr	r4, [pc, #56]	; (101d0 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   10198:	9303      	str	r3, [sp, #12]
   1019a:	4b0e      	ldr	r3, [pc, #56]	; (101d4 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1019c:	4a0e      	ldr	r2, [pc, #56]	; (101d8 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   1019e:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   101a0:	ab02      	add	r3, sp, #8
   101a2:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   101a4:	a801      	add	r0, sp, #4
   101a6:	4623      	mov	r3, r4
   101a8:	2101      	movs	r1, #1
   101aa:	f000 f951 	bl	10450 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   101ae:	2300      	movs	r3, #0
   101b0:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   101b2:	4b0a      	ldr	r3, [pc, #40]	; (101dc <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   101b4:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   101b6:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   101b8:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   101ba:	9305      	str	r3, [sp, #20]
   101bc:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   101be:	f000 f951 	bl	10464 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   101c2:	b008      	add	sp, #32
   101c4:	bd10      	pop	{r4, pc}
   101c6:	bf00      	nop
   101c8:	20020000 	.word	0x20020000
   101cc:	00000000 	.word	0x00000000
   101d0:	20040000 	.word	0x20040000
   101d4:	00010006 	.word	0x00010006
   101d8:	20020000 	.word	0x20020000
   101dc:	20020000 	.word	0x20020000

000101e0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   101e0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   101e2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   101e4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   101e6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   101ea:	f004 031f 	and.w	r3, r4, #31
   101ee:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   101f0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   101f2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   101f4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   101f8:	4904      	ldr	r1, [pc, #16]	; (1020c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   101fa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   101fe:	f043 0301 	orr.w	r3, r3, #1
   10202:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   10204:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   10206:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   10208:	bd10      	pop	{r4, pc}
   1020a:	bf00      	nop
   1020c:	e000ed90 	.word	0xe000ed90

00010210 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   10210:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   10212:	f04f 0200 	mov.w	r2, #0
   10216:	2301      	movs	r3, #1
   10218:	4907      	ldr	r1, [pc, #28]	; (10238 <region_allocate_and_init.part.0+0x28>)
   1021a:	f363 0207 	bfi	r2, r3, #0, #8
   1021e:	4b07      	ldr	r3, [pc, #28]	; (1023c <region_allocate_and_init.part.0+0x2c>)
   10220:	1a5b      	subs	r3, r3, r1
   10222:	08db      	lsrs	r3, r3, #3
   10224:	4601      	mov	r1, r0
   10226:	f363 128f 	bfi	r2, r3, #6, #10
   1022a:	4805      	ldr	r0, [pc, #20]	; (10240 <region_allocate_and_init.part.0+0x30>)
   1022c:	f00c fc86 	bl	1cb3c <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10230:	f06f 0015 	mvn.w	r0, #21
   10234:	bd08      	pop	{r3, pc}
   10236:	bf00      	nop
   10238:	0001f328 	.word	0x0001f328
   1023c:	0001f378 	.word	0x0001f378
   10240:	00020a34 	.word	0x00020a34

00010244 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   10244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10248:	4607      	mov	r7, r0
   1024a:	4688      	mov	r8, r1
   1024c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1024e:	2600      	movs	r6, #0
	MPU->RNR = index;
   10250:	4d5e      	ldr	r5, [pc, #376]	; (103cc <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   10252:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   10254:	4546      	cmp	r6, r8
   10256:	da3d      	bge.n	102d4 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   10258:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   1025c:	f8d3 9004 	ldr.w	r9, [r3, #4]
   10260:	f1b9 0f00 	cmp.w	r9, #0
   10264:	d059      	beq.n	1031a <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   10266:	f1b9 0f1f 	cmp.w	r9, #31
   1026a:	d922      	bls.n	102b2 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   1026c:	f019 0f1f 	tst.w	r9, #31
   10270:	d11f      	bne.n	102b2 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   10272:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   10276:	f01a 0f1f 	tst.w	sl, #31
   1027a:	d11a      	bne.n	102b2 <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1027c:	4650      	mov	r0, sl
   1027e:	f00d f818 	bl	1d2b2 <arm_cmse_mpu_region_get>
   10282:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10284:	eb09 000a 	add.w	r0, r9, sl
   10288:	3801      	subs	r0, #1
   1028a:	f00d f812 	bl	1d2b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1028e:	4583      	cmp	fp, r0
   10290:	d024      	beq.n	102dc <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   10292:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   10296:	2301      	movs	r3, #1
   10298:	f04f 0200 	mov.w	r2, #0
   1029c:	494c      	ldr	r1, [pc, #304]	; (103d0 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
   1029e:	f363 0207 	bfi	r2, r3, #0, #8
   102a2:	4b4c      	ldr	r3, [pc, #304]	; (103d4 <mpu_configure_regions_and_partition.constprop.2+0x190>)
   102a4:	484c      	ldr	r0, [pc, #304]	; (103d8 <mpu_configure_regions_and_partition.constprop.2+0x194>)
   102a6:	1a5b      	subs	r3, r3, r1
   102a8:	08db      	lsrs	r3, r3, #3
   102aa:	f363 128f 	bfi	r2, r3, #6, #10
   102ae:	4659      	mov	r1, fp
   102b0:	e00c      	b.n	102cc <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   102b2:	2301      	movs	r3, #1
   102b4:	f04f 0200 	mov.w	r2, #0
   102b8:	4945      	ldr	r1, [pc, #276]	; (103d0 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
   102ba:	f363 0207 	bfi	r2, r3, #0, #8
   102be:	4b45      	ldr	r3, [pc, #276]	; (103d4 <mpu_configure_regions_and_partition.constprop.2+0x190>)
   102c0:	4846      	ldr	r0, [pc, #280]	; (103dc <mpu_configure_regions_and_partition.constprop.2+0x198>)
   102c2:	1a5b      	subs	r3, r3, r1
   102c4:	4631      	mov	r1, r6
   102c6:	08db      	lsrs	r3, r3, #3
   102c8:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   102cc:	f00c fc36 	bl	1cb3c <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   102d0:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   102d4:	4620      	mov	r0, r4
   102d6:	b005      	add	sp, #20
   102d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   102dc:	f11b 0f16 	cmn.w	fp, #22
   102e0:	d0d9      	beq.n	10296 <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   102e2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   102e4:	455b      	cmp	r3, fp
   102e6:	dbd6      	blt.n	10296 <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   102e8:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   102ec:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   102ee:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   102f2:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   102f4:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   102f8:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   102fc:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10300:	e9d1 3200 	ldrd	r3, r2, [r1]
   10304:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   10306:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10308:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   1030c:	d118      	bne.n	10340 <mpu_configure_regions_and_partition.constprop.2+0xfc>
   1030e:	45ca      	cmp	sl, r9
   10310:	d105      	bne.n	1031e <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   10312:	fa5f f08b 	uxtb.w	r0, fp
   10316:	f00c ffa9 	bl	1d26c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1031a:	3601      	adds	r6, #1
   1031c:	e79a      	b.n	10254 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   1031e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10322:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   10324:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10328:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1032c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1032e:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   10330:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   10332:	f00c ff9b 	bl	1d26c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10336:	f110 0f16 	cmn.w	r0, #22
   1033a:	d0c9      	beq.n	102d0 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   1033c:	1c44      	adds	r4, r0, #1
   1033e:	e7ec      	b.n	1031a <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   10340:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10344:	692a      	ldr	r2, [r5, #16]
   10346:	3b01      	subs	r3, #1
   10348:	f023 031f 	bic.w	r3, r3, #31
   1034c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10350:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   10352:	45ca      	cmp	sl, r9
   10354:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10356:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   10358:	d0eb      	beq.n	10332 <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   1035a:	f00c ff87 	bl	1d26c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1035e:	f110 0f16 	cmn.w	r0, #22
   10362:	d0b5      	beq.n	102d0 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   10364:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   10368:	68ea      	ldr	r2, [r5, #12]
   1036a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1036e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   10372:	f362 0304 	bfi	r3, r2, #0, #5
   10376:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1037a:	692b      	ldr	r3, [r5, #16]
   1037c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10380:	085b      	lsrs	r3, r3, #1
   10382:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   10386:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1038a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1038e:	e9d3 1300 	ldrd	r1, r3, [r3]
   10392:	440b      	add	r3, r1
   10394:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   10396:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1039a:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   1039c:	4453      	add	r3, sl
   1039e:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   103a2:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   103a4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   103a8:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   103aa:	9303      	str	r3, [sp, #12]
   103ac:	d908      	bls.n	103c0 <mpu_configure_regions_and_partition.constprop.2+0x17c>
   103ae:	4620      	mov	r0, r4
   103b0:	f7ff ff2e 	bl	10210 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   103b4:	f110 0f16 	cmn.w	r0, #22
   103b8:	4604      	mov	r4, r0
   103ba:	d089      	beq.n	102d0 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   103bc:	3401      	adds	r4, #1
   103be:	e7ac      	b.n	1031a <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
   103c0:	4669      	mov	r1, sp
   103c2:	4620      	mov	r0, r4
   103c4:	f7ff ff0c 	bl	101e0 <region_init>
			if (reg_index == -EINVAL) {
   103c8:	e7f8      	b.n	103bc <mpu_configure_regions_and_partition.constprop.2+0x178>
   103ca:	bf00      	nop
   103cc:	e000ed90 	.word	0xe000ed90
   103d0:	0001f328 	.word	0x0001f328
   103d4:	0001f378 	.word	0x0001f378
   103d8:	00020a11 	.word	0x00020a11
   103dc:	000209ee 	.word	0x000209ee

000103e0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   103e0:	2205      	movs	r2, #5
   103e2:	4b03      	ldr	r3, [pc, #12]	; (103f0 <arm_core_mpu_enable+0x10>)
   103e4:	605a      	str	r2, [r3, #4]
   103e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   103ea:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   103ee:	4770      	bx	lr
   103f0:	e000ed90 	.word	0xe000ed90

000103f4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   103f4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   103f8:	2200      	movs	r2, #0
   103fa:	4b01      	ldr	r3, [pc, #4]	; (10400 <arm_core_mpu_disable+0xc>)
   103fc:	605a      	str	r2, [r3, #4]
}
   103fe:	4770      	bx	lr
   10400:	e000ed90 	.word	0xe000ed90

00010404 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   10404:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10406:	4d0e      	ldr	r5, [pc, #56]	; (10440 <arm_mpu_init+0x3c>)
   10408:	682e      	ldr	r6, [r5, #0]
   1040a:	2e10      	cmp	r6, #16
   1040c:	d815      	bhi.n	1043a <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1040e:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   10410:	f7ff fff0 	bl	103f4 <arm_core_mpu_disable>
	MPU->MAIR0 =
   10414:	4b0b      	ldr	r3, [pc, #44]	; (10444 <arm_mpu_init+0x40>)
   10416:	4a0c      	ldr	r2, [pc, #48]	; (10448 <arm_mpu_init+0x44>)
   10418:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1041a:	42a6      	cmp	r6, r4
   1041c:	d105      	bne.n	1042a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1041e:	4b0b      	ldr	r3, [pc, #44]	; (1044c <arm_mpu_init+0x48>)
   10420:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
   10422:	f7ff ffdd 	bl	103e0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   10426:	2000      	movs	r0, #0
}
   10428:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1042a:	6869      	ldr	r1, [r5, #4]
   1042c:	4620      	mov	r0, r4
   1042e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   10432:	f7ff fed5 	bl	101e0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10436:	3401      	adds	r4, #1
   10438:	e7ef      	b.n	1041a <arm_mpu_init+0x16>
		return -1;
   1043a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1043e:	e7f3      	b.n	10428 <arm_mpu_init+0x24>
   10440:	0001f434 	.word	0x0001f434
   10444:	e000ed90 	.word	0xe000ed90
   10448:	0044ffaa 	.word	0x0044ffaa
   1044c:	20026548 	.word	0x20026548

00010450 <arm_core_mpu_configure_static_mpu_regions>:
{
   10450:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10452:	4c03      	ldr	r4, [pc, #12]	; (10460 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   10454:	7822      	ldrb	r2, [r4, #0]
   10456:	f7ff fef5 	bl	10244 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1045a:	7020      	strb	r0, [r4, #0]
}
   1045c:	bd10      	pop	{r4, pc}
   1045e:	bf00      	nop
   10460:	20026548 	.word	0x20026548

00010464 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   10464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10468:	4c25      	ldr	r4, [pc, #148]	; (10500 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
   1046a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1046c:	4680      	mov	r8, r0
   1046e:	2700      	movs	r7, #0
   10470:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
   10472:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   10476:	4d23      	ldr	r5, [pc, #140]	; (10504 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10478:	4557      	cmp	r7, sl
   1047a:	da1a      	bge.n	104b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1047c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10480:	9301      	str	r3, [sp, #4]
   10482:	2b00      	cmp	r3, #0
   10484:	d036      	beq.n	104f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   10486:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1048a:	4608      	mov	r0, r1
   1048c:	9100      	str	r1, [sp, #0]
   1048e:	f00c ff10 	bl	1d2b2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10492:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10496:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10498:	1858      	adds	r0, r3, r1
   1049a:	3801      	subs	r0, #1
   1049c:	f00c ff09 	bl	1d2b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   104a0:	4286      	cmp	r6, r0
   104a2:	4a19      	ldr	r2, [pc, #100]	; (10508 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
   104a4:	d008      	beq.n	104b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   104a6:	2314      	movs	r3, #20
   104a8:	435f      	muls	r7, r3
   104aa:	f06f 0315 	mvn.w	r3, #21
   104ae:	f849 3007 	str.w	r3, [r9, r7]
}
   104b2:	b003      	add	sp, #12
   104b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   104b8:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   104bc:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   104be:	d0f8      	beq.n	104b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   104c0:	7813      	ldrb	r3, [r2, #0]
   104c2:	42b3      	cmp	r3, r6
   104c4:	ddf5      	ble.n	104b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   104c6:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
   104ca:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   104cc:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   104ce:	68e8      	ldr	r0, [r5, #12]
   104d0:	7b19      	ldrb	r1, [r3, #12]
   104d2:	f360 0104 	bfi	r1, r0, #0, #5
   104d6:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   104d8:	6929      	ldr	r1, [r5, #16]
   104da:	7b18      	ldrb	r0, [r3, #12]
   104dc:	0849      	lsrs	r1, r1, #1
   104de:	f361 1047 	bfi	r0, r1, #5, #3
   104e2:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   104e4:	68eb      	ldr	r3, [r5, #12]
   104e6:	f023 031f 	bic.w	r3, r3, #31
   104ea:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   104ec:	692b      	ldr	r3, [r5, #16]
   104ee:	f023 031f 	bic.w	r3, r3, #31
   104f2:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   104f4:	3701      	adds	r7, #1
   104f6:	3414      	adds	r4, #20
   104f8:	f108 080c 	add.w	r8, r8, #12
   104fc:	e7bc      	b.n	10478 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   104fe:	bf00      	nop
   10500:	20020368 	.word	0x20020368
   10504:	e000ed90 	.word	0xe000ed90
   10508:	20026548 	.word	0x20026548

0001050c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   1050c:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   1050e:	4b0c      	ldr	r3, [pc, #48]	; (10540 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   10510:	460e      	mov	r6, r1
   10512:	781c      	ldrb	r4, [r3, #0]
   10514:	4605      	mov	r5, r0
   10516:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
   10518:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   1051a:	4a0a      	ldr	r2, [pc, #40]	; (10544 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1051c:	2b0f      	cmp	r3, #15
   1051e:	dd0b      	ble.n	10538 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   10520:	4909      	ldr	r1, [pc, #36]	; (10548 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   10522:	f851 0b04 	ldr.w	r0, [r1], #4
   10526:	f7ff fe5b 	bl	101e0 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   1052a:	4622      	mov	r2, r4
   1052c:	4631      	mov	r1, r6
   1052e:	4628      	mov	r0, r5
}
   10530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10534:	f7ff be86 	b.w	10244 <mpu_configure_regions_and_partition.constprop.2>
   10538:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   1053a:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1053c:	3301      	adds	r3, #1
   1053e:	e7ed      	b.n	1051c <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
   10540:	20026548 	.word	0x20026548
   10544:	e000ed90 	.word	0xe000ed90
   10548:	20020368 	.word	0x20020368

0001054c <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
   1054c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10550:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
   10552:	2300      	movs	r3, #0
{
   10554:	b0a3      	sub	sp, #140	; 0x8c
   10556:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
   1055a:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
   1055c:	4613      	mov	r3, r2
   1055e:	f813 0b01 	ldrb.w	r0, [r3], #1
   10562:	9308      	str	r3, [sp, #32]
   10564:	b158      	cbz	r0, 1057e <z_prf+0x32>
		if (c != '%') {
   10566:	2825      	cmp	r0, #37	; 0x25
   10568:	f000 8085 	beq.w	10676 <z_prf+0x12a>
			PUTC(c);
   1056c:	9903      	ldr	r1, [sp, #12]
   1056e:	9b02      	ldr	r3, [sp, #8]
   10570:	4798      	blx	r3
   10572:	3001      	adds	r0, #1
   10574:	f040 841a 	bne.w	10dac <z_prf+0x860>
   10578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1057c:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   1057e:	9801      	ldr	r0, [sp, #4]
   10580:	b023      	add	sp, #140	; 0x8c
   10582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   10586:	2c23      	cmp	r4, #35	; 0x23
   10588:	d06c      	beq.n	10664 <z_prf+0x118>
   1058a:	d861      	bhi.n	10650 <z_prf+0x104>
   1058c:	2c00      	cmp	r4, #0
   1058e:	d0f6      	beq.n	1057e <z_prf+0x32>
					fspace = true;
   10590:	2c20      	cmp	r4, #32
   10592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10594:	bf08      	it	eq
   10596:	2301      	moveq	r3, #1
   10598:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
   1059a:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   1059e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   105a2:	48b7      	ldr	r0, [pc, #732]	; (10880 <z_prf+0x334>)
   105a4:	f818 4b01 	ldrb.w	r4, [r8], #1
   105a8:	4621      	mov	r1, r4
   105aa:	f00c ffda 	bl	1d562 <strchr>
   105ae:	2800      	cmp	r0, #0
   105b0:	d1e9      	bne.n	10586 <z_prf+0x3a>
			if (c == '*') {
   105b2:	2c2a      	cmp	r4, #42	; 0x2a
   105b4:	d166      	bne.n	10684 <z_prf+0x138>
				width = va_arg(vargs, int);
   105b6:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
   105ba:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
   105be:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
   105c0:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
   105c2:	bfbf      	itttt	lt
   105c4:	425b      	neglt	r3, r3
   105c6:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
   105c8:	2301      	movlt	r3, #1
   105ca:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
   105cc:	9b08      	ldr	r3, [sp, #32]
   105ce:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
   105d2:	2c2e      	cmp	r4, #46	; 0x2e
   105d4:	d17b      	bne.n	106ce <z_prf+0x182>
				if (c == '*') {
   105d6:	f898 3000 	ldrb.w	r3, [r8]
   105da:	2b2a      	cmp	r3, #42	; 0x2a
   105dc:	d174      	bne.n	106c8 <z_prf+0x17c>
					precision = va_arg(vargs, int);
   105de:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
   105e2:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
   105e6:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
   105ea:	4621      	mov	r1, r4
   105ec:	48a5      	ldr	r0, [pc, #660]	; (10884 <z_prf+0x338>)
   105ee:	4627      	mov	r7, r4
   105f0:	f00c ffb7 	bl	1d562 <strchr>
   105f4:	2800      	cmp	r0, #0
   105f6:	d06d      	beq.n	106d4 <z_prf+0x188>
				c = *format++;
   105f8:	4643      	mov	r3, r8
   105fa:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
   105fe:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   10600:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
   10602:	d107      	bne.n	10614 <z_prf+0xc8>
   10604:	2c68      	cmp	r4, #104	; 0x68
   10606:	d105      	bne.n	10614 <z_prf+0xc8>
					i = 'H';
   10608:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   1060a:	f108 0302 	add.w	r3, r8, #2
   1060e:	f898 4001 	ldrb.w	r4, [r8, #1]
   10612:	9308      	str	r3, [sp, #32]
			switch (c) {
   10614:	2c67      	cmp	r4, #103	; 0x67
   10616:	d87b      	bhi.n	10710 <z_prf+0x1c4>
   10618:	2c65      	cmp	r4, #101	; 0x65
   1061a:	f080 8135 	bcs.w	10888 <z_prf+0x33c>
   1061e:	2c47      	cmp	r4, #71	; 0x47
   10620:	d85c      	bhi.n	106dc <z_prf+0x190>
   10622:	2c45      	cmp	r4, #69	; 0x45
   10624:	f080 8130 	bcs.w	10888 <z_prf+0x33c>
   10628:	2c00      	cmp	r4, #0
   1062a:	d0a8      	beq.n	1057e <z_prf+0x32>
   1062c:	2c25      	cmp	r4, #37	; 0x25
   1062e:	f000 83b9 	beq.w	10da4 <z_prf+0x858>
				PUTC('%');
   10632:	9903      	ldr	r1, [sp, #12]
   10634:	2025      	movs	r0, #37	; 0x25
   10636:	9b02      	ldr	r3, [sp, #8]
   10638:	4798      	blx	r3
   1063a:	3001      	adds	r0, #1
   1063c:	d09c      	beq.n	10578 <z_prf+0x2c>
				PUTC(c);
   1063e:	9903      	ldr	r1, [sp, #12]
   10640:	4620      	mov	r0, r4
   10642:	9b02      	ldr	r3, [sp, #8]
   10644:	4798      	blx	r3
   10646:	3001      	adds	r0, #1
   10648:	d096      	beq.n	10578 <z_prf+0x2c>
				count += 2;
   1064a:	9b01      	ldr	r3, [sp, #4]
   1064c:	3302      	adds	r3, #2
   1064e:	e3af      	b.n	10db0 <z_prf+0x864>
				switch (c) {
   10650:	2c2d      	cmp	r4, #45	; 0x2d
   10652:	d00a      	beq.n	1066a <z_prf+0x11e>
   10654:	2c30      	cmp	r4, #48	; 0x30
   10656:	d00b      	beq.n	10670 <z_prf+0x124>
					fplus = true;
   10658:	2c2b      	cmp	r4, #43	; 0x2b
   1065a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1065c:	bf08      	it	eq
   1065e:	2301      	moveq	r3, #1
   10660:	930b      	str	r3, [sp, #44]	; 0x2c
   10662:	e79a      	b.n	1059a <z_prf+0x4e>
					falt = true;
   10664:	f04f 0b01 	mov.w	fp, #1
   10668:	e797      	b.n	1059a <z_prf+0x4e>
					fminus = true;
   1066a:	2301      	movs	r3, #1
   1066c:	930f      	str	r3, [sp, #60]	; 0x3c
   1066e:	e794      	b.n	1059a <z_prf+0x4e>
					fzero = true;
   10670:	2301      	movs	r3, #1
   10672:	930a      	str	r3, [sp, #40]	; 0x28
   10674:	e791      	b.n	1059a <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
   10676:	2300      	movs	r3, #0
   10678:	930a      	str	r3, [sp, #40]	; 0x28
   1067a:	930e      	str	r3, [sp, #56]	; 0x38
   1067c:	930b      	str	r3, [sp, #44]	; 0x2c
   1067e:	930f      	str	r3, [sp, #60]	; 0x3c
   10680:	469b      	mov	fp, r3
   10682:	e78c      	b.n	1059e <z_prf+0x52>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10684:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   10688:	2b09      	cmp	r3, #9
				width = 0;
   1068a:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
   1068c:	d8a1      	bhi.n	105d2 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   1068e:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   10690:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10694:	f818 4b01 	ldrb.w	r4, [r8], #1
   10698:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1069c:	2b09      	cmp	r3, #9
   1069e:	d898      	bhi.n	105d2 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   106a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   106a2:	fb02 4403 	mla	r4, r2, r3, r4
   106a6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   106aa:	e9cd 8308 	strd	r8, r3, [sp, #32]
   106ae:	e7ef      	b.n	10690 <z_prf+0x144>
   106b0:	4690      	mov	r8, r2
   106b2:	fb01 3505 	mla	r5, r1, r5, r3
   106b6:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   106b8:	4642      	mov	r2, r8
   106ba:	f812 3b01 	ldrb.w	r3, [r2], #1
   106be:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   106c2:	2809      	cmp	r0, #9
   106c4:	d9f4      	bls.n	106b0 <z_prf+0x164>
   106c6:	e78e      	b.n	105e6 <z_prf+0x9a>
	int i = 0;
   106c8:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   106ca:	210a      	movs	r1, #10
   106cc:	e7f4      	b.n	106b8 <z_prf+0x16c>
			precision = -1;
   106ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   106d2:	e78a      	b.n	105ea <z_prf+0x9e>
   106d4:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
   106d8:	4607      	mov	r7, r0
   106da:	e79b      	b.n	10614 <z_prf+0xc8>
			switch (c) {
   106dc:	2c63      	cmp	r4, #99	; 0x63
   106de:	d059      	beq.n	10794 <z_prf+0x248>
   106e0:	d820      	bhi.n	10724 <z_prf+0x1d8>
   106e2:	2c58      	cmp	r4, #88	; 0x58
   106e4:	d1a5      	bne.n	10632 <z_prf+0xe6>
				if (c == 'o') {
   106e6:	2c6f      	cmp	r4, #111	; 0x6f
   106e8:	f106 0904 	add.w	r9, r6, #4
   106ec:	6831      	ldr	r1, [r6, #0]
   106ee:	f040 8328 	bne.w	10d42 <z_prf+0x7f6>
	if (alt_form) {
   106f2:	f1bb 0f00 	cmp.w	fp, #0
   106f6:	f000 8317 	beq.w	10d28 <z_prf+0x7dc>
		*buf++ = '0';
   106fa:	2330      	movs	r3, #48	; 0x30
   106fc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
   10700:	2900      	cmp	r1, #0
   10702:	f040 831b 	bne.w	10d3c <z_prf+0x7f0>
			*buf++ = 0;
   10706:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
   1070a:	460f      	mov	r7, r1
			return 1;
   1070c:	2601      	movs	r6, #1
   1070e:	e025      	b.n	1075c <z_prf+0x210>
			switch (c) {
   10710:	2c70      	cmp	r4, #112	; 0x70
   10712:	f000 82f5 	beq.w	10d00 <z_prf+0x7b4>
   10716:	d827      	bhi.n	10768 <z_prf+0x21c>
   10718:	2c6e      	cmp	r4, #110	; 0x6e
   1071a:	f000 82de 	beq.w	10cda <z_prf+0x78e>
   1071e:	d8e2      	bhi.n	106e6 <z_prf+0x19a>
   10720:	2c69      	cmp	r4, #105	; 0x69
   10722:	d186      	bne.n	10632 <z_prf+0xe6>
				switch (i) {
   10724:	6837      	ldr	r7, [r6, #0]
   10726:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
   1072a:	2f00      	cmp	r7, #0
   1072c:	f280 809a 	bge.w	10864 <z_prf+0x318>
		*buf++ = '-';
   10730:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   10732:	4279      	negs	r1, r7
		*buf++ = '-';
   10734:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
   10738:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
   1073c:	4630      	mov	r0, r6
   1073e:	220a      	movs	r2, #10
   10740:	f00c ffb1 	bl	1d6a6 <_to_x>
				if (fplus || fspace || val < 0) {
   10744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
   10746:	4406      	add	r6, r0
   10748:	a81b      	add	r0, sp, #108	; 0x6c
   1074a:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
   1074c:	2b00      	cmp	r3, #0
   1074e:	f040 8332 	bne.w	10db6 <z_prf+0x86a>
   10752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10754:	2b00      	cmp	r3, #0
   10756:	f040 832e 	bne.w	10db6 <z_prf+0x86a>
   1075a:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
   1075c:	2d00      	cmp	r5, #0
   1075e:	da21      	bge.n	107a4 <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
   10760:	2500      	movs	r5, #0
   10762:	46ab      	mov	fp, r5
   10764:	46a8      	mov	r8, r5
   10766:	e0e1      	b.n	1092c <z_prf+0x3e0>
			switch (c) {
   10768:	2c75      	cmp	r4, #117	; 0x75
   1076a:	d0bc      	beq.n	106e6 <z_prf+0x19a>
   1076c:	2c78      	cmp	r4, #120	; 0x78
   1076e:	d0ba      	beq.n	106e6 <z_prf+0x19a>
   10770:	2c73      	cmp	r4, #115	; 0x73
   10772:	f47f af5e 	bne.w	10632 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
   10776:	46b1      	mov	r9, r6
					precision = INT_MAX;
   10778:	2d00      	cmp	r5, #0
   1077a:	bfb8      	it	lt
   1077c:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   10780:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
   10782:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
   10786:	42b5      	cmp	r5, r6
   10788:	f040 82c9 	bne.w	10d1e <z_prf+0x7d2>
   1078c:	462e      	mov	r6, r5
   1078e:	2500      	movs	r5, #0
   10790:	462f      	mov	r7, r5
   10792:	e008      	b.n	107a6 <z_prf+0x25a>
				break;
   10794:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
   10796:	46b1      	mov	r9, r6
				break;
   10798:	463d      	mov	r5, r7
				clen = 1;
   1079a:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
   1079c:	f859 3b04 	ldr.w	r3, [r9], #4
   107a0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
   107a4:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
   107a6:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   107a8:	2500      	movs	r5, #0
   107aa:	46ab      	mov	fp, r5
   107ac:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
   107ae:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
   107b0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
   107b4:	1991      	adds	r1, r2, r6
   107b6:	9106      	str	r1, [sp, #24]
   107b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   107ba:	1990      	adds	r0, r2, r6
   107bc:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
   107be:	990f      	ldr	r1, [sp, #60]	; 0x3c
   107c0:	b911      	cbnz	r1, 107c8 <z_prf+0x27c>
   107c2:	2c00      	cmp	r4, #0
   107c4:	f300 8314 	bgt.w	10df0 <z_prf+0x8a4>
			while (prefix-- > 0) {
   107c8:	eb03 0a07 	add.w	sl, r3, r7
   107cc:	4553      	cmp	r3, sl
   107ce:	f040 8313 	bne.w	10df8 <z_prf+0x8ac>
			while (zero_head-- > 0) {
   107d2:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   107d6:	f080 831d 	bcs.w	10e14 <z_prf+0x8c8>
			clen -= prefix;
   107da:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
   107dc:	f1b8 0f00 	cmp.w	r8, #0
   107e0:	d011      	beq.n	10806 <z_prf+0x2ba>
				c = *cptr;
   107e2:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
   107e6:	eb0a 0706 	add.w	r7, sl, r6
   107ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   107ee:	2b09      	cmp	r3, #9
   107f0:	eba7 060a 	sub.w	r6, r7, sl
   107f4:	f240 8319 	bls.w	10e2a <z_prf+0x8de>
   107f8:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
   107fa:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
   107fe:	f080 831d 	bcs.w	10e3c <z_prf+0x8f0>
				clen -= zero.predot;
   10802:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
   10806:	f1bb 0f00 	cmp.w	fp, #0
   1080a:	d015      	beq.n	10838 <z_prf+0x2ec>
   1080c:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
   10810:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
   10814:	9903      	ldr	r1, [sp, #12]
   10816:	4640      	mov	r0, r8
   10818:	9b02      	ldr	r3, [sp, #8]
   1081a:	4798      	blx	r3
   1081c:	3001      	adds	r0, #1
   1081e:	f43f aeab 	beq.w	10578 <z_prf+0x2c>
				} while (c != '.');
   10822:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
   10826:	eba7 060a 	sub.w	r6, r7, sl
   1082a:	d1f1      	bne.n	10810 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
   1082c:	465f      	mov	r7, fp
   1082e:	2f00      	cmp	r7, #0
   10830:	f300 830d 	bgt.w	10e4e <z_prf+0x902>
				clen -= zero.postdot;
   10834:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
   10838:	b195      	cbz	r5, 10860 <z_prf+0x314>
				c = *cptr;
   1083a:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
   1083e:	eb0a 0706 	add.w	r7, sl, r6
   10842:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10846:	2b09      	cmp	r3, #9
   10848:	eba7 060a 	sub.w	r6, r7, sl
   1084c:	f240 830a 	bls.w	10e64 <z_prf+0x918>
   10850:	282e      	cmp	r0, #46	; 0x2e
   10852:	f000 8307 	beq.w	10e64 <z_prf+0x918>
				while (zero.trail-- > 0) {
   10856:	462f      	mov	r7, r5
   10858:	2f00      	cmp	r7, #0
   1085a:	f300 830c 	bgt.w	10e76 <z_prf+0x92a>
				clen -= zero.trail;
   1085e:	1b76      	subs	r6, r6, r5
   10860:	4456      	add	r6, sl
   10862:	e31b      	b.n	10e9c <z_prf+0x950>
	} else if (fplus) {
   10864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10866:	b123      	cbz	r3, 10872 <z_prf+0x326>
		*buf++ = '+';
   10868:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   1086a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   1086e:	4639      	mov	r1, r7
   10870:	e762      	b.n	10738 <z_prf+0x1ec>
	} else if (fspace) {
   10872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10874:	b10b      	cbz	r3, 1087a <z_prf+0x32e>
		*buf++ = ' ';
   10876:	2320      	movs	r3, #32
   10878:	e7f7      	b.n	1086a <z_prf+0x31e>
	} else if (fspace) {
   1087a:	4639      	mov	r1, r7
   1087c:	ae1b      	add	r6, sp, #108	; 0x6c
   1087e:	e75d      	b.n	1073c <z_prf+0x1f0>
   10880:	00020a5a 	.word	0x00020a5a
   10884:	00020a60 	.word	0x00020a60
				u.d = va_arg(vargs, double);
   10888:	f106 0907 	add.w	r9, r6, #7
   1088c:	f029 0907 	bic.w	r9, r9, #7
   10890:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
   10894:	02d8      	lsls	r0, r3, #11
   10896:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
   1089a:	02d6      	lsls	r6, r2, #11
   1089c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
   108a0:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
   108a2:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   108a6:	9604      	str	r6, [sp, #16]
   108a8:	9005      	str	r0, [sp, #20]
	if (sign) {
   108aa:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   108ae:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   108b2:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
   108b6:	da41      	bge.n	1093c <z_prf+0x3f0>
		*buf++ = '-';
   108b8:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
   108ba:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   108be:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
   108c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
   108c6:	4299      	cmp	r1, r3
   108c8:	d153      	bne.n	10972 <z_prf+0x426>
		if (!fract) {
   108ca:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   108ce:	430a      	orrs	r2, r1
   108d0:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   108d4:	f107 0303 	add.w	r3, r7, #3
   108d8:	d140      	bne.n	1095c <z_prf+0x410>
			if (isupper(c)) {
   108da:	2c19      	cmp	r4, #25
   108dc:	d838      	bhi.n	10950 <z_prf+0x404>
				*buf++ = 'I';
   108de:	2249      	movs	r2, #73	; 0x49
   108e0:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
   108e2:	224e      	movs	r2, #78	; 0x4e
   108e4:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
   108e6:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
   108e8:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   108ea:	46ab      	mov	fp, r5
   108ec:	46a8      	mov	r8, r5
		return buf - start;
   108ee:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
   108f0:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
   108f2:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   108f4:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
   108f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   108f8:	2a00      	cmp	r2, #0
   108fa:	f040 81ec 	bne.w	10cd6 <z_prf+0x78a>
   108fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10900:	2a00      	cmp	r2, #0
   10902:	f040 81e8 	bne.w	10cd6 <z_prf+0x78a>
   10906:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   1090a:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
   1090e:	4257      	negs	r7, r2
   10910:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
   10912:	eb05 0608 	add.w	r6, r5, r8
   10916:	4433      	add	r3, r6
   10918:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
   1091c:	ab22      	add	r3, sp, #136	; 0x88
   1091e:	443b      	add	r3, r7
   10920:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   10924:	3b30      	subs	r3, #48	; 0x30
   10926:	2b09      	cmp	r3, #9
   10928:	f200 8249 	bhi.w	10dbe <z_prf+0x872>
			} else if (fzero) {
   1092c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1092e:	2b00      	cmp	r3, #0
   10930:	f000 8248 	beq.w	10dc4 <z_prf+0x878>
   10934:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10936:	1b9a      	subs	r2, r3, r6
   10938:	ab1b      	add	r3, sp, #108	; 0x6c
   1093a:	e739      	b.n	107b0 <z_prf+0x264>
	} else if (fplus) {
   1093c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1093e:	b10b      	cbz	r3, 10944 <z_prf+0x3f8>
		*buf++ = '+';
   10940:	232b      	movs	r3, #43	; 0x2b
   10942:	e7ba      	b.n	108ba <z_prf+0x36e>
	} else if (fspace) {
   10944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10946:	b10b      	cbz	r3, 1094c <z_prf+0x400>
		*buf++ = ' ';
   10948:	2320      	movs	r3, #32
   1094a:	e7b6      	b.n	108ba <z_prf+0x36e>
	} else if (fspace) {
   1094c:	af1b      	add	r7, sp, #108	; 0x6c
   1094e:	e7b8      	b.n	108c2 <z_prf+0x376>
				*buf++ = 'i';
   10950:	2269      	movs	r2, #105	; 0x69
   10952:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
   10954:	226e      	movs	r2, #110	; 0x6e
   10956:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
   10958:	2266      	movs	r2, #102	; 0x66
   1095a:	e7c5      	b.n	108e8 <z_prf+0x39c>
			if (isupper(c)) {
   1095c:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   1095e:	bf99      	ittee	ls
   10960:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
   10962:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
   10964:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
   10966:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
   10968:	bf94      	ite	ls
   1096a:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
   1096c:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
   1096e:	7079      	strb	r1, [r7, #1]
   10970:	e7ba      	b.n	108e8 <z_prf+0x39c>
	if ((exp | fract) != 0) {
   10972:	9b04      	ldr	r3, [sp, #16]
   10974:	9805      	ldr	r0, [sp, #20]
   10976:	430b      	orrs	r3, r1
   10978:	9310      	str	r3, [sp, #64]	; 0x40
   1097a:	17cb      	asrs	r3, r1, #31
   1097c:	4303      	orrs	r3, r0
		c = 'f';
   1097e:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   10980:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
   10982:	bf08      	it	eq
   10984:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   10986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1098a:	4313      	orrs	r3, r2
   1098c:	f000 8111 	beq.w	10bb2 <z_prf+0x666>
		if (exp == 0) {
   10990:	2900      	cmp	r1, #0
   10992:	f000 809b 	beq.w	10acc <z_prf+0x580>
		fract |= HIGHBIT64;
   10996:	2600      	movs	r6, #0
   10998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   1099a:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
   1099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   109a2:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
   109a4:	f118 0f02 	cmn.w	r8, #2
   109a8:	f2c0 80a4 	blt.w	10af4 <z_prf+0x5a8>
	while (exp > 0) {
   109ac:	f1b8 0f00 	cmp.w	r8, #0
   109b0:	f300 80dd 	bgt.w	10b6e <z_prf+0x622>
		_rlrshift(&fract);
   109b4:	a816      	add	r0, sp, #88	; 0x58
		exp++;
   109b6:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   109ba:	f00c fe96 	bl	1d6ea <_rlrshift>
	while (exp < (0 + 4)) {
   109be:	f1b8 0f04 	cmp.w	r8, #4
   109c2:	d1f7      	bne.n	109b4 <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
   109c4:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   109c6:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   109ca:	bfb8      	it	lt
   109cc:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   109ce:	2b47      	cmp	r3, #71	; 0x47
   109d0:	f040 80f8 	bne.w	10bc4 <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
   109d4:	1cf1      	adds	r1, r6, #3
   109d6:	db02      	blt.n	109de <z_prf+0x492>
   109d8:	42ae      	cmp	r6, r5
   109da:	f340 80ed 	ble.w	10bb8 <z_prf+0x66c>
			c += 'e' - 'g';
   109de:	3c02      	subs	r4, #2
   109e0:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   109e2:	2d00      	cmp	r5, #0
   109e4:	f000 80f4 	beq.w	10bd0 <z_prf+0x684>
				precision--;
   109e8:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   109ea:	f1bb 0f00 	cmp.w	fp, #0
   109ee:	f040 80ef 	bne.w	10bd0 <z_prf+0x684>
   109f2:	2d00      	cmp	r5, #0
   109f4:	bfd4      	ite	le
   109f6:	f04f 0a00 	movle.w	sl, #0
   109fa:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   109fe:	2c66      	cmp	r4, #102	; 0x66
   10a00:	f040 80e8 	bne.w	10bd4 <z_prf+0x688>
		if (exp < 0) {
   10a04:	eb16 0805 	adds.w	r8, r6, r5
   10a08:	f140 80ec 	bpl.w	10be4 <z_prf+0x698>
	digit_count = 16;
   10a0c:	2310      	movs	r3, #16
   10a0e:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   10a10:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   10a14:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
   10a16:	2200      	movs	r2, #0
   10a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10a1c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
   10a20:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   10a24:	f080 80e0 	bcs.w	10be8 <z_prf+0x69c>
	fract += ltemp;
   10a28:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10a2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10a2c:	9919      	ldr	r1, [sp, #100]	; 0x64
   10a2e:	189b      	adds	r3, r3, r2
   10a30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10a32:	eb41 0202 	adc.w	r2, r1, r2
   10a36:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
   10a3a:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   10a3e:	9312      	str	r3, [sp, #72]	; 0x48
   10a40:	2300      	movs	r3, #0
   10a42:	9313      	str	r3, [sp, #76]	; 0x4c
   10a44:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   10a48:	4313      	orrs	r3, r2
   10a4a:	d006      	beq.n	10a5a <z_prf+0x50e>
		_ldiv5(&fract);
   10a4c:	a816      	add	r0, sp, #88	; 0x58
   10a4e:	f00c fe5d 	bl	1d70c <_ldiv5>
		_rlrshift(&fract);
   10a52:	a816      	add	r0, sp, #88	; 0x58
   10a54:	f00c fe49 	bl	1d6ea <_rlrshift>
		decexp++;
   10a58:	3601      	adds	r6, #1
	if (c == 'f') {
   10a5a:	2c66      	cmp	r4, #102	; 0x66
   10a5c:	f040 80e1 	bne.w	10c22 <z_prf+0x6d6>
		if (decexp > 0) {
   10a60:	2e00      	cmp	r6, #0
   10a62:	f340 80c8 	ble.w	10bf6 <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
   10a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10a68:	2b00      	cmp	r3, #0
   10a6a:	dd07      	ble.n	10a7c <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
   10a6c:	a915      	add	r1, sp, #84	; 0x54
   10a6e:	a816      	add	r0, sp, #88	; 0x58
   10a70:	f00c fe77 	bl	1d762 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   10a74:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   10a76:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
   10a7a:	d1f4      	bne.n	10a66 <z_prf+0x51a>
			zp->predot = decexp;
   10a7c:	46b0      	mov	r8, r6
   10a7e:	463b      	mov	r3, r7
			decexp = 0;
   10a80:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
   10a82:	f1bb 0f00 	cmp.w	fp, #0
   10a86:	d101      	bne.n	10a8c <z_prf+0x540>
   10a88:	2d00      	cmp	r5, #0
   10a8a:	dd15      	ble.n	10ab8 <z_prf+0x56c>
			*buf++ = '.';
   10a8c:	222e      	movs	r2, #46	; 0x2e
   10a8e:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
   10a92:	2e00      	cmp	r6, #0
   10a94:	f000 80c0 	beq.w	10c18 <z_prf+0x6cc>
   10a98:	2d00      	cmp	r5, #0
   10a9a:	f340 80bf 	ble.w	10c1c <z_prf+0x6d0>
			zp->postdot = -decexp;
   10a9e:	f1c6 0b00 	rsb	fp, r6, #0
   10aa2:	45ab      	cmp	fp, r5
   10aa4:	bfa8      	it	ge
   10aa6:	46ab      	movge	fp, r5
			precision -= zp->postdot;
   10aa8:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
   10aac:	2d00      	cmp	r5, #0
   10aae:	dd03      	ble.n	10ab8 <z_prf+0x56c>
   10ab0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10ab2:	2a00      	cmp	r2, #0
   10ab4:	f300 80a6 	bgt.w	10c04 <z_prf+0x6b8>
	if (prune_zero) {
   10ab8:	f1ba 0f00 	cmp.w	sl, #0
   10abc:	f040 80c6 	bne.w	10c4c <z_prf+0x700>
	*buf = 0;
   10ac0:	2200      	movs	r2, #0
	return buf - start;
   10ac2:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
   10ac4:	701a      	strb	r2, [r3, #0]
	return buf - start;
   10ac6:	1b9b      	subs	r3, r3, r6
   10ac8:	e715      	b.n	108f6 <z_prf+0x3aa>
				exp--;
   10aca:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   10acc:	9b04      	ldr	r3, [sp, #16]
   10ace:	18db      	adds	r3, r3, r3
   10ad0:	9304      	str	r3, [sp, #16]
   10ad2:	9b05      	ldr	r3, [sp, #20]
   10ad4:	415b      	adcs	r3, r3
   10ad6:	9305      	str	r3, [sp, #20]
   10ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10adc:	2a00      	cmp	r2, #0
   10ade:	f173 0300 	sbcs.w	r3, r3, #0
   10ae2:	daf2      	bge.n	10aca <z_prf+0x57e>
   10ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10ae8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10aec:	e753      	b.n	10996 <z_prf+0x44a>
			_rlrshift(&fract);
   10aee:	a816      	add	r0, sp, #88	; 0x58
   10af0:	f00c fdfb 	bl	1d6ea <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   10af4:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
   10af8:	2300      	movs	r3, #0
   10afa:	2100      	movs	r1, #0
   10afc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   10b00:	930d      	str	r3, [sp, #52]	; 0x34
   10b02:	48bc      	ldr	r0, [pc, #752]	; (10df4 <z_prf+0x8a8>)
   10b04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   10b08:	4299      	cmp	r1, r3
   10b0a:	bf08      	it	eq
   10b0c:	4290      	cmpeq	r0, r2
   10b0e:	f108 0801 	add.w	r8, r8, #1
   10b12:	d3ec      	bcc.n	10aee <z_prf+0x5a2>
		fract *= 5U;
   10b14:	2005      	movs	r0, #5
   10b16:	fbae 2300 	umull	r2, r3, lr, r0
   10b1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10b1e:	9b07      	ldr	r3, [sp, #28]
		decexp--;
   10b20:	3e01      	subs	r6, #1
		fract *= 5U;
   10b22:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
   10b26:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   10b2a:	9307      	str	r3, [sp, #28]
   10b2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10b30:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   10b34:	2100      	movs	r1, #0
   10b36:	2300      	movs	r3, #0
   10b38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10b3c:	9807      	ldr	r0, [sp, #28]
   10b3e:	428b      	cmp	r3, r1
   10b40:	bf08      	it	eq
   10b42:	4282      	cmpeq	r2, r0
   10b44:	d208      	bcs.n	10b58 <z_prf+0x60c>
   10b46:	f1bc 0f00 	cmp.w	ip, #0
   10b4a:	f43f af2b 	beq.w	109a4 <z_prf+0x458>
   10b4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10b52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10b56:	e725      	b.n	109a4 <z_prf+0x458>
			fract <<= 1;
   10b58:	9b06      	ldr	r3, [sp, #24]
			exp--;
   10b5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   10b5e:	18db      	adds	r3, r3, r3
   10b60:	9306      	str	r3, [sp, #24]
   10b62:	9b07      	ldr	r3, [sp, #28]
   10b64:	f04f 0c01 	mov.w	ip, #1
   10b68:	415b      	adcs	r3, r3
   10b6a:	9307      	str	r3, [sp, #28]
			exp--;
   10b6c:	e7e2      	b.n	10b34 <z_prf+0x5e8>
		_ldiv5(&fract);
   10b6e:	a816      	add	r0, sp, #88	; 0x58
   10b70:	f00c fdcc 	bl	1d70c <_ldiv5>
		exp--;
   10b74:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
   10b78:	f04f 0c00 	mov.w	ip, #0
		exp--;
   10b7c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   10b80:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   10b82:	2300      	movs	r3, #0
   10b84:	2100      	movs	r1, #0
   10b86:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10b8a:	4299      	cmp	r1, r3
   10b8c:	bf08      	it	eq
   10b8e:	4570      	cmpeq	r0, lr
   10b90:	d206      	bcs.n	10ba0 <z_prf+0x654>
   10b92:	f1bc 0f00 	cmp.w	ip, #0
   10b96:	f43f af09 	beq.w	109ac <z_prf+0x460>
   10b9a:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
   10b9e:	e705      	b.n	109ac <z_prf+0x460>
			fract <<= 1;
   10ba0:	eb1a 0a0a 	adds.w	sl, sl, sl
   10ba4:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   10ba8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10bac:	f04f 0c01 	mov.w	ip, #1
   10bb0:	e7e7      	b.n	10b82 <z_prf+0x636>
	if ((exp | fract) != 0) {
   10bb2:	2600      	movs	r6, #0
   10bb4:	46b0      	mov	r8, r6
   10bb6:	e6fd      	b.n	109b4 <z_prf+0x468>
			precision -= decexp;
   10bb8:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   10bba:	f1bb 0f00 	cmp.w	fp, #0
   10bbe:	d104      	bne.n	10bca <z_prf+0x67e>
			c = 'f';
   10bc0:	2466      	movs	r4, #102	; 0x66
   10bc2:	e716      	b.n	109f2 <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   10bc4:	f04f 0a00 	mov.w	sl, #0
   10bc8:	e719      	b.n	109fe <z_prf+0x4b2>
   10bca:	f04f 0a00 	mov.w	sl, #0
   10bce:	e719      	b.n	10a04 <z_prf+0x4b8>
   10bd0:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   10bd4:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   10bd8:	2310      	movs	r3, #16
   10bda:	4598      	cmp	r8, r3
   10bdc:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
   10bde:	bfa8      	it	ge
   10be0:	4698      	movge	r8, r3
   10be2:	e718      	b.n	10a16 <z_prf+0x4ca>
		if (exp < 0) {
   10be4:	2466      	movs	r4, #102	; 0x66
   10be6:	e7f7      	b.n	10bd8 <z_prf+0x68c>
		_ldiv5(&ltemp);
   10be8:	a818      	add	r0, sp, #96	; 0x60
   10bea:	f00c fd8f 	bl	1d70c <_ldiv5>
		_rlrshift(&ltemp);
   10bee:	a818      	add	r0, sp, #96	; 0x60
   10bf0:	f00c fd7b 	bl	1d6ea <_rlrshift>
   10bf4:	e714      	b.n	10a20 <z_prf+0x4d4>
			*buf++ = '0';
   10bf6:	463b      	mov	r3, r7
   10bf8:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
   10bfa:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
   10bfe:	f803 2b01 	strb.w	r2, [r3], #1
   10c02:	e73e      	b.n	10a82 <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
   10c04:	a915      	add	r1, sp, #84	; 0x54
   10c06:	a816      	add	r0, sp, #88	; 0x58
   10c08:	9306      	str	r3, [sp, #24]
   10c0a:	f00c fdaa 	bl	1d762 <_get_digit>
   10c0e:	9b06      	ldr	r3, [sp, #24]
			precision--;
   10c10:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   10c12:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   10c16:	e749      	b.n	10aac <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
   10c18:	46b3      	mov	fp, r6
   10c1a:	e747      	b.n	10aac <z_prf+0x560>
   10c1c:	f04f 0b00 	mov.w	fp, #0
   10c20:	e74a      	b.n	10ab8 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
   10c22:	a915      	add	r1, sp, #84	; 0x54
   10c24:	a816      	add	r0, sp, #88	; 0x58
   10c26:	f00c fd9c 	bl	1d762 <_get_digit>
		if (*buf++ != '0') {
   10c2a:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   10c2c:	7038      	strb	r0, [r7, #0]
			decexp--;
   10c2e:	bf18      	it	ne
   10c30:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   10c34:	f1bb 0f00 	cmp.w	fp, #0
   10c38:	d138      	bne.n	10cac <z_prf+0x760>
   10c3a:	2d00      	cmp	r5, #0
   10c3c:	dc36      	bgt.n	10cac <z_prf+0x760>
		if (*buf++ != '0') {
   10c3e:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
   10c40:	f1ba 0f00 	cmp.w	sl, #0
   10c44:	d044      	beq.n	10cd0 <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
   10c46:	f04f 0b00 	mov.w	fp, #0
   10c4a:	46d8      	mov	r8, fp
		while (*--buf == '0')
   10c4c:	461a      	mov	r2, r3
   10c4e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   10c52:	2930      	cmp	r1, #48	; 0x30
   10c54:	d0fa      	beq.n	10c4c <z_prf+0x700>
		if (*buf != '.') {
   10c56:	292e      	cmp	r1, #46	; 0x2e
   10c58:	bf18      	it	ne
   10c5a:	4613      	movne	r3, r2
   10c5c:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   10c5e:	f004 02df 	and.w	r2, r4, #223	; 0xdf
   10c62:	2a45      	cmp	r2, #69	; 0x45
   10c64:	f47f af2c 	bne.w	10ac0 <z_prf+0x574>
		if (decexp < 0) {
   10c68:	2e00      	cmp	r6, #0
			*buf++ = '-';
   10c6a:	bfb4      	ite	lt
   10c6c:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   10c6e:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   10c70:	4619      	mov	r1, r3
			decexp = -decexp;
   10c72:	bfb8      	it	lt
   10c74:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   10c76:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   10c78:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
   10c7c:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
   10c7e:	dd08      	ble.n	10c92 <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
   10c80:	2064      	movs	r0, #100	; 0x64
   10c82:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
   10c86:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
   10c8a:	f102 0430 	add.w	r4, r2, #48	; 0x30
   10c8e:	1cd9      	adds	r1, r3, #3
   10c90:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
   10c92:	200a      	movs	r0, #10
   10c94:	fb96 f2f0 	sdiv	r2, r6, r0
   10c98:	460b      	mov	r3, r1
		decexp %= 10;
   10c9a:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
   10c9e:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
   10ca2:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   10ca4:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
   10ca8:	704e      	strb	r6, [r1, #1]
   10caa:	e709      	b.n	10ac0 <z_prf+0x574>
			*buf++ = '.';
   10cac:	222e      	movs	r2, #46	; 0x2e
   10cae:	1cbb      	adds	r3, r7, #2
   10cb0:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   10cb2:	2d00      	cmp	r5, #0
   10cb4:	ddc4      	ble.n	10c40 <z_prf+0x6f4>
   10cb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10cb8:	2a00      	cmp	r2, #0
   10cba:	ddc1      	ble.n	10c40 <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
   10cbc:	a915      	add	r1, sp, #84	; 0x54
   10cbe:	a816      	add	r0, sp, #88	; 0x58
   10cc0:	9306      	str	r3, [sp, #24]
   10cc2:	f00c fd4e 	bl	1d762 <_get_digit>
   10cc6:	9b06      	ldr	r3, [sp, #24]
			precision--;
   10cc8:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   10cca:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   10cce:	e7f0      	b.n	10cb2 <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
   10cd0:	46d3      	mov	fp, sl
   10cd2:	46d0      	mov	r8, sl
   10cd4:	e7c3      	b.n	10c5e <z_prf+0x712>
					prefix = 1;
   10cd6:	2701      	movs	r7, #1
   10cd8:	e61b      	b.n	10912 <z_prf+0x3c6>
				switch (i) {
   10cda:	46b1      	mov	r9, r6
   10cdc:	2f68      	cmp	r7, #104	; 0x68
   10cde:	f859 3b04 	ldr.w	r3, [r9], #4
   10ce2:	d005      	beq.n	10cf0 <z_prf+0x7a4>
   10ce4:	dc01      	bgt.n	10cea <z_prf+0x79e>
   10ce6:	2f48      	cmp	r7, #72	; 0x48
   10ce8:	d007      	beq.n	10cfa <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
   10cea:	9a01      	ldr	r2, [sp, #4]
   10cec:	601a      	str	r2, [r3, #0]
					break;
   10cee:	e001      	b.n	10cf4 <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
   10cf0:	9a01      	ldr	r2, [sp, #4]
   10cf2:	801a      	strh	r2, [r3, #0]
				continue;
   10cf4:	464e      	mov	r6, r9
   10cf6:	9a08      	ldr	r2, [sp, #32]
   10cf8:	e430      	b.n	1055c <z_prf+0x10>
					*va_arg(vargs, char *) = count;
   10cfa:	9a01      	ldr	r2, [sp, #4]
   10cfc:	701a      	strb	r2, [r3, #0]
					break;
   10cfe:	e7f9      	b.n	10cf4 <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
   10d00:	46b1      	mov	r9, r6
		*buf++ = '0';
   10d02:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
   10d06:	2210      	movs	r2, #16
   10d08:	f859 1b04 	ldr.w	r1, [r9], #4
   10d0c:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
   10d10:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   10d14:	f00c fcc7 	bl	1d6a6 <_to_x>
				prefix = 2;
   10d18:	2702      	movs	r7, #2
	return len + (buf - buf0);
   10d1a:	1c86      	adds	r6, r0, #2
				break;
   10d1c:	e51e      	b.n	1075c <z_prf+0x210>
					if (cptr[clen] == '\0') {
   10d1e:	5d9a      	ldrb	r2, [r3, r6]
   10d20:	2a00      	cmp	r2, #0
   10d22:	d04a      	beq.n	10dba <z_prf+0x86e>
				for (clen = 0; clen < precision; clen++) {
   10d24:	3601      	adds	r6, #1
   10d26:	e52e      	b.n	10786 <z_prf+0x23a>
	if (alt_form) {
   10d28:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
   10d2a:	2208      	movs	r2, #8
   10d2c:	4620      	mov	r0, r4
   10d2e:	f00c fcba 	bl	1d6a6 <_to_x>
   10d32:	ae1b      	add	r6, sp, #108	; 0x6c
   10d34:	1ba6      	subs	r6, r4, r6
   10d36:	4406      	add	r6, r0
			prefix = 0;
   10d38:	2700      	movs	r7, #0
   10d3a:	e50f      	b.n	1075c <z_prf+0x210>
		*buf++ = '0';
   10d3c:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
   10d40:	e7f3      	b.n	10d2a <z_prf+0x7de>
				} else if (c == 'u') {
   10d42:	2c75      	cmp	r4, #117	; 0x75
   10d44:	d105      	bne.n	10d52 <z_prf+0x806>
	return _to_x(buf, value, 10);
   10d46:	220a      	movs	r2, #10
   10d48:	a81b      	add	r0, sp, #108	; 0x6c
   10d4a:	f00c fcac 	bl	1d6a6 <_to_x>
   10d4e:	4606      	mov	r6, r0
   10d50:	e7f2      	b.n	10d38 <z_prf+0x7ec>
	if (alt_form) {
   10d52:	f1bb 0f00 	cmp.w	fp, #0
   10d56:	d012      	beq.n	10d7e <z_prf+0x832>
		*buf++ = '0';
   10d58:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   10d5c:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
   10d60:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   10d64:	2210      	movs	r2, #16
   10d66:	4640      	mov	r0, r8
   10d68:	f00c fc9d 	bl	1d6a6 <_to_x>
	if (prefix == 'X') {
   10d6c:	2c58      	cmp	r4, #88	; 0x58
   10d6e:	d009      	beq.n	10d84 <z_prf+0x838>
	return len + (buf - buf0);
   10d70:	ae1b      	add	r6, sp, #108	; 0x6c
   10d72:	eba8 0606 	sub.w	r6, r8, r6
   10d76:	4406      	add	r6, r0
						prefix = 2;
   10d78:	ea4f 074b 	mov.w	r7, fp, lsl #1
   10d7c:	e4ee      	b.n	1075c <z_prf+0x210>
	if (alt_form) {
   10d7e:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
   10d82:	e7ef      	b.n	10d64 <z_prf+0x818>
   10d84:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
   10d86:	f812 3b01 	ldrb.w	r3, [r2], #1
   10d8a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   10d8e:	2919      	cmp	r1, #25
   10d90:	d803      	bhi.n	10d9a <z_prf+0x84e>
			*buf += 'A' - 'a';
   10d92:	3b20      	subs	r3, #32
   10d94:	f802 3c01 	strb.w	r3, [r2, #-1]
   10d98:	e7f5      	b.n	10d86 <z_prf+0x83a>
	} while (*buf++);
   10d9a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   10d9e:	2b00      	cmp	r3, #0
   10da0:	d1f1      	bne.n	10d86 <z_prf+0x83a>
   10da2:	e7e5      	b.n	10d70 <z_prf+0x824>
				PUTC('%');
   10da4:	9903      	ldr	r1, [sp, #12]
   10da6:	4620      	mov	r0, r4
   10da8:	f7ff bbe1 	b.w	1056e <z_prf+0x22>
				count++;
   10dac:	9b01      	ldr	r3, [sp, #4]
   10dae:	3301      	adds	r3, #1
				count += 2;
   10db0:	9301      	str	r3, [sp, #4]
				continue;
   10db2:	46b1      	mov	r9, r6
   10db4:	e79e      	b.n	10cf4 <z_prf+0x7a8>
					prefix = 1;
   10db6:	2701      	movs	r7, #1
   10db8:	e4d0      	b.n	1075c <z_prf+0x210>
   10dba:	4615      	mov	r5, r2
   10dbc:	e4e8      	b.n	10790 <z_prf+0x244>
			cptr = buf;
   10dbe:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
   10dc0:	2200      	movs	r2, #0
   10dc2:	e4f7      	b.n	107b4 <z_prf+0x268>
   10dc4:	ab1b      	add	r3, sp, #108	; 0x6c
   10dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10dc8:	e4f4      	b.n	107b4 <z_prf+0x268>
   10dca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
   10dce:	9903      	ldr	r1, [sp, #12]
   10dd0:	9b02      	ldr	r3, [sp, #8]
   10dd2:	2020      	movs	r0, #32
   10dd4:	4798      	blx	r3
   10dd6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10dda:	3001      	adds	r0, #1
   10ddc:	f43f abcc 	beq.w	10578 <z_prf+0x2c>
				while (width-- > 0) {
   10de0:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
   10de4:	d2f1      	bcs.n	10dca <z_prf+0x87e>
				count += width;
   10de6:	9901      	ldr	r1, [sp, #4]
   10de8:	4421      	add	r1, r4
   10dea:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
   10dec:	4654      	mov	r4, sl
   10dee:	e4eb      	b.n	107c8 <z_prf+0x27c>
   10df0:	46a2      	mov	sl, r4
   10df2:	e7f5      	b.n	10de0 <z_prf+0x894>
   10df4:	33333332 	.word	0x33333332
				PUTC(*cptr++);
   10df8:	f813 0b01 	ldrb.w	r0, [r3], #1
   10dfc:	9903      	ldr	r1, [sp, #12]
   10dfe:	9309      	str	r3, [sp, #36]	; 0x24
   10e00:	9b02      	ldr	r3, [sp, #8]
   10e02:	920a      	str	r2, [sp, #40]	; 0x28
   10e04:	4798      	blx	r3
   10e06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10e0a:	3001      	adds	r0, #1
   10e0c:	f47f acde 	bne.w	107cc <z_prf+0x280>
   10e10:	f7ff bbb2 	b.w	10578 <z_prf+0x2c>
				PUTC('0');
   10e14:	9903      	ldr	r1, [sp, #12]
   10e16:	2030      	movs	r0, #48	; 0x30
   10e18:	9b02      	ldr	r3, [sp, #8]
   10e1a:	9209      	str	r2, [sp, #36]	; 0x24
   10e1c:	4798      	blx	r3
   10e1e:	3001      	adds	r0, #1
   10e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e22:	f47f acd6 	bne.w	107d2 <z_prf+0x286>
   10e26:	f7ff bba7 	b.w	10578 <z_prf+0x2c>
					PUTC(c);
   10e2a:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10e2e:	4798      	blx	r3
   10e30:	3001      	adds	r0, #1
   10e32:	f43f aba1 	beq.w	10578 <z_prf+0x2c>
					c = *++cptr;
   10e36:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10e3a:	e4d6      	b.n	107ea <z_prf+0x29e>
					PUTC('0');
   10e3c:	9903      	ldr	r1, [sp, #12]
   10e3e:	2030      	movs	r0, #48	; 0x30
   10e40:	9b02      	ldr	r3, [sp, #8]
   10e42:	4798      	blx	r3
   10e44:	3001      	adds	r0, #1
   10e46:	f47f acd8 	bne.w	107fa <z_prf+0x2ae>
   10e4a:	f7ff bb95 	b.w	10578 <z_prf+0x2c>
					PUTC('0');
   10e4e:	9903      	ldr	r1, [sp, #12]
   10e50:	2030      	movs	r0, #48	; 0x30
   10e52:	9b02      	ldr	r3, [sp, #8]
   10e54:	4798      	blx	r3
   10e56:	3001      	adds	r0, #1
   10e58:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10e5c:	f47f ace7 	bne.w	1082e <z_prf+0x2e2>
   10e60:	f7ff bb8a 	b.w	10578 <z_prf+0x2c>
					PUTC(c);
   10e64:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10e68:	4798      	blx	r3
   10e6a:	3001      	adds	r0, #1
   10e6c:	f43f ab84 	beq.w	10578 <z_prf+0x2c>
					c = *++cptr;
   10e70:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10e74:	e4e5      	b.n	10842 <z_prf+0x2f6>
					PUTC('0');
   10e76:	9903      	ldr	r1, [sp, #12]
   10e78:	2030      	movs	r0, #48	; 0x30
   10e7a:	9b02      	ldr	r3, [sp, #8]
   10e7c:	4798      	blx	r3
   10e7e:	3001      	adds	r0, #1
   10e80:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10e84:	f47f ace8 	bne.w	10858 <z_prf+0x30c>
   10e88:	f7ff bb76 	b.w	10578 <z_prf+0x2c>
				PUTC(*cptr++);
   10e8c:	9903      	ldr	r1, [sp, #12]
   10e8e:	f81a 0b01 	ldrb.w	r0, [sl], #1
   10e92:	9b02      	ldr	r3, [sp, #8]
   10e94:	4798      	blx	r3
   10e96:	3001      	adds	r0, #1
   10e98:	f43f ab6e 	beq.w	10578 <z_prf+0x2c>
   10e9c:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
   10ea0:	2b00      	cmp	r3, #0
   10ea2:	dcf3      	bgt.n	10e8c <z_prf+0x940>
			count += clen;
   10ea4:	9b01      	ldr	r3, [sp, #4]
   10ea6:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
   10ea8:	2c00      	cmp	r4, #0
			count += clen;
   10eaa:	4413      	add	r3, r2
   10eac:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   10eae:	f77f af21 	ble.w	10cf4 <z_prf+0x7a8>
   10eb2:	4625      	mov	r5, r4
   10eb4:	e006      	b.n	10ec4 <z_prf+0x978>
					PUTC(' ');
   10eb6:	9903      	ldr	r1, [sp, #12]
   10eb8:	2020      	movs	r0, #32
   10eba:	9b02      	ldr	r3, [sp, #8]
   10ebc:	4798      	blx	r3
   10ebe:	3001      	adds	r0, #1
   10ec0:	f43f ab5a 	beq.w	10578 <z_prf+0x2c>
				while (width-- > 0) {
   10ec4:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   10ec8:	d2f5      	bcs.n	10eb6 <z_prf+0x96a>
				count += width;
   10eca:	9b01      	ldr	r3, [sp, #4]
   10ecc:	4423      	add	r3, r4
   10ece:	9301      	str	r3, [sp, #4]
   10ed0:	e710      	b.n	10cf4 <z_prf+0x7a8>
   10ed2:	bf00      	nop

00010ed4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10ed4:	4b01      	ldr	r3, [pc, #4]	; (10edc <__stdout_hook_install+0x8>)
   10ed6:	6018      	str	r0, [r3, #0]
}
   10ed8:	4770      	bx	lr
   10eda:	bf00      	nop
   10edc:	2002c514 	.word	0x2002c514

00010ee0 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   10ee0:	b40c      	push	{r2, r3}
   10ee2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   10ee4:	b909      	cbnz	r1, 10eea <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   10ee6:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   10eea:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   10eee:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10ef0:	9a06      	ldr	r2, [sp, #24]
   10ef2:	a902      	add	r1, sp, #8
   10ef4:	4805      	ldr	r0, [pc, #20]	; (10f0c <snprintf+0x2c>)
	va_start(vargs, format);
   10ef6:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10ef8:	f7ff fb28 	bl	1054c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10efc:	2200      	movs	r2, #0
   10efe:	9b02      	ldr	r3, [sp, #8]
   10f00:	701a      	strb	r2, [r3, #0]
	return r;
}
   10f02:	b005      	add	sp, #20
   10f04:	f85d eb04 	ldr.w	lr, [sp], #4
   10f08:	b002      	add	sp, #8
   10f0a:	4770      	bx	lr
   10f0c:	0001d797 	.word	0x0001d797

00010f10 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   10f10:	b40e      	push	{r1, r2, r3}
   10f12:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   10f18:	ab05      	add	r3, sp, #20
   10f1a:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   10f1e:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10f20:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f22:	4806      	ldr	r0, [pc, #24]	; (10f3c <sprintf+0x2c>)
   10f24:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   10f26:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f28:	f7ff fb10 	bl	1054c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10f2c:	2200      	movs	r2, #0
   10f2e:	9b02      	ldr	r3, [sp, #8]
   10f30:	701a      	strb	r2, [r3, #0]
	return r;
}
   10f32:	b004      	add	sp, #16
   10f34:	f85d eb04 	ldr.w	lr, [sp], #4
   10f38:	b003      	add	sp, #12
   10f3a:	4770      	bx	lr
   10f3c:	0001d797 	.word	0x0001d797

00010f40 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   10f40:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   10f42:	4c07      	ldr	r4, [pc, #28]	; (10f60 <net_if_init+0x20>)
   10f44:	4d07      	ldr	r5, [pc, #28]	; (10f64 <net_if_init+0x24>)
   10f46:	42ac      	cmp	r4, r5
   10f48:	d100      	bne.n	10f4c <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10f4a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   10f4c:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   10f4e:	681b      	ldr	r3, [r3, #0]
   10f50:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   10f52:	b11b      	cbz	r3, 10f5c <net_if_init+0x1c>
   10f54:	681b      	ldr	r3, [r3, #0]
   10f56:	b10b      	cbz	r3, 10f5c <net_if_init+0x1c>
	api->init(iface);
   10f58:	4620      	mov	r0, r4
   10f5a:	4798      	blx	r3
	     iface++, if_count++) {
   10f5c:	3420      	adds	r4, #32
   10f5e:	e7f2      	b.n	10f46 <net_if_init+0x6>
   10f60:	2002c720 	.word	0x2002c720
   10f64:	2002c740 	.word	0x2002c740

00010f68 <net_if_post_init>:

void net_if_post_init(void)
{
   10f68:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10f6a:	4c08      	ldr	r4, [pc, #32]	; (10f8c <net_if_post_init+0x24>)
   10f6c:	4d08      	ldr	r5, [pc, #32]	; (10f90 <net_if_post_init+0x28>)
   10f6e:	42ac      	cmp	r4, r5
   10f70:	d100      	bne.n	10f74 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10f72:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   10f74:	6820      	ldr	r0, [r4, #0]
   10f76:	2103      	movs	r1, #3
   10f78:	300c      	adds	r0, #12
   10f7a:	f00c fc20 	bl	1d7be <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   10f7e:	b910      	cbnz	r0, 10f86 <net_if_post_init+0x1e>
			net_if_up(iface);
   10f80:	4620      	mov	r0, r4
   10f82:	f00c fc2b 	bl	1d7dc <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10f86:	3420      	adds	r4, #32
   10f88:	e7f1      	b.n	10f6e <net_if_post_init+0x6>
   10f8a:	bf00      	nop
   10f8c:	2002c720 	.word	0x2002c720
   10f90:	2002c740 	.word	0x2002c740

00010f94 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   10f94:	2300      	movs	r3, #0
{
   10f96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   10f9a:	2802      	cmp	r0, #2
{
   10f9c:	b089      	sub	sp, #36	; 0x24
   10f9e:	4681      	mov	r9, r0
   10fa0:	468a      	mov	sl, r1
   10fa2:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   10fa4:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   10fa8:	d13c      	bne.n	11024 <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   10faa:	aa06      	add	r2, sp, #24
   10fac:	4610      	mov	r0, r2
   10fae:	9104      	str	r1, [sp, #16]
{
   10fb0:	4619      	mov	r1, r3
   10fb2:	e006      	b.n	10fc2 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   10fb4:	7804      	ldrb	r4, [r0, #0]
   10fb6:	3101      	adds	r1, #1
   10fb8:	3401      	adds	r4, #1
   10fba:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   10fbc:	b2cc      	uxtb	r4, r1
   10fbe:	2c07      	cmp	r4, #7
   10fc0:	d803      	bhi.n	10fca <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   10fc2:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   10fc6:	2c00      	cmp	r4, #0
   10fc8:	d0f4      	beq.n	10fb4 <z_impl_net_addr_ntop+0x20>
   10fca:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   10fcc:	2b08      	cmp	r3, #8
   10fce:	f100 0001 	add.w	r0, r0, #1
   10fd2:	d1ed      	bne.n	10fb0 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   10fd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   10fd8:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   10fda:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   10fdc:	f812 1b01 	ldrb.w	r1, [r2], #1
   10fe0:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   10fe2:	bf88      	it	hi
   10fe4:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   10fe6:	f103 0301 	add.w	r3, r3, #1
   10fea:	b2db      	uxtb	r3, r3
				pos = i;
   10fec:	bf88      	it	hi
   10fee:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   10ff0:	2b08      	cmp	r3, #8
   10ff2:	d1f3      	bne.n	10fdc <z_impl_net_addr_ntop+0x48>
		len = 8;
   10ff4:	9303      	str	r3, [sp, #12]
   10ff6:	2f01      	cmp	r7, #1
   10ff8:	f04f 033a 	mov.w	r3, #58	; 0x3a
   10ffc:	bf08      	it	eq
   10ffe:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   11002:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   11004:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   11006:	4644      	mov	r4, r8
   11008:	4615      	mov	r5, r2
   1100a:	9b03      	ldr	r3, [sp, #12]
   1100c:	429d      	cmp	r5, r3
   1100e:	db19      	blt.n	11044 <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   11010:	4544      	cmp	r4, r8
   11012:	d009      	beq.n	11028 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   11014:	2300      	movs	r3, #0
   11016:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   1101a:	bf0c      	ite	eq
   1101c:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   11020:	7023      	strbne	r3, [r4, #0]
   11022:	e003      	b.n	1102c <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   11024:	2801      	cmp	r0, #1
   11026:	d005      	beq.n	11034 <z_impl_net_addr_ntop+0xa0>
		return NULL;
   11028:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   1102c:	4640      	mov	r0, r8
   1102e:	b009      	add	sp, #36	; 0x24
   11030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   11034:	232e      	movs	r3, #46	; 0x2e
   11036:	2204      	movs	r2, #4
	s8_t pos = -1;
   11038:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   1103c:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
   11040:	4607      	mov	r7, r0
   11042:	e7df      	b.n	11004 <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   11044:	9b03      	ldr	r3, [sp, #12]
   11046:	2b04      	cmp	r3, #4
   11048:	d134      	bne.n	110b4 <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
   1104a:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   1104e:	b949      	cbnz	r1, 11064 <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   11050:	2330      	movs	r3, #48	; 0x30
   11052:	4620      	mov	r0, r4
   11054:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   11058:	9b02      	ldr	r3, [sp, #8]
   1105a:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   1105c:	3501      	adds	r5, #1
   1105e:	b2ed      	uxtb	r5, r5
   11060:	4604      	mov	r4, r0
   11062:	e7d2      	b.n	1100a <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   11064:	2009      	movs	r0, #9
   11066:	f04f 0b00 	mov.w	fp, #0
   1106a:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 11144 <z_impl_net_addr_ntop+0x1b0>
   1106e:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   11070:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   11074:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   11078:	4583      	cmp	fp, r0
		value = value % divisor;
   1107a:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   1107c:	dc01      	bgt.n	11082 <z_impl_net_addr_ntop+0xee>
   1107e:	4561      	cmp	r1, ip
   11080:	d306      	bcc.n	11090 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   11082:	4683      	mov	fp, r0
   11084:	9b01      	ldr	r3, [sp, #4]
   11086:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   1108a:	f803 eb01 	strb.w	lr, [r3], #1
   1108e:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   11090:	230a      	movs	r3, #10
   11092:	3801      	subs	r0, #1
   11094:	fbbc fcf3 	udiv	ip, ip, r3
   11098:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   1109a:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1109c:	d1e8      	bne.n	11070 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   1109e:	f04f 0300 	mov.w	r3, #0
   110a2:	9901      	ldr	r1, [sp, #4]
   110a4:	700b      	strb	r3, [r1, #0]
	return buf - start;
   110a6:	1b0b      	subs	r3, r1, r4
			ptr += l;
   110a8:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   110aa:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   110ac:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   110ae:	3001      	adds	r0, #1
   110b0:	54e1      	strb	r1, [r4, r3]
			continue;
   110b2:	e7d3      	b.n	1105c <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   110b4:	42ae      	cmp	r6, r5
   110b6:	d10d      	bne.n	110d4 <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   110b8:	b902      	cbnz	r2, 110bc <z_impl_net_addr_ntop+0x128>
   110ba:	b916      	cbnz	r6, 110c2 <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   110bc:	233a      	movs	r3, #58	; 0x3a
   110be:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   110c2:	233a      	movs	r3, #58	; 0x3a
   110c4:	4620      	mov	r0, r4
   110c6:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   110ca:	1e7b      	subs	r3, r7, #1
   110cc:	441d      	add	r5, r3
   110ce:	b2ed      	uxtb	r5, r5
			needcolon = false;
   110d0:	2200      	movs	r2, #0
			continue;
   110d2:	e7c3      	b.n	1105c <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   110d4:	b112      	cbz	r2, 110dc <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   110d6:	233a      	movs	r3, #58	; 0x3a
   110d8:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   110dc:	9b04      	ldr	r3, [sp, #16]
   110de:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   110e2:	021a      	lsls	r2, r3, #8
   110e4:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   110e8:	b212      	sxth	r2, r2
		bh = value >> 8;
   110ea:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   110ee:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   110f2:	b1b3      	cbz	r3, 11122 <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   110f4:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   110f6:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   110f8:	d90b      	bls.n	11112 <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   110fa:	2300      	movs	r3, #0
   110fc:	2261      	movs	r2, #97	; 0x61
   110fe:	4620      	mov	r0, r4
   11100:	f00c fb9b 	bl	1d83a <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   11104:	2301      	movs	r3, #1
   11106:	2261      	movs	r2, #97	; 0x61
   11108:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1110a:	f00c fb96 	bl	1d83a <net_byte_to_hex>
		needcolon = true;
   1110e:	2201      	movs	r2, #1
   11110:	e7a4      	b.n	1105c <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   11112:	b25b      	sxtb	r3, r3
   11114:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   11116:	bf94      	ite	ls
   11118:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   1111a:	3357      	addhi	r3, #87	; 0x57
   1111c:	1c60      	adds	r0, r4, #1
   1111e:	7023      	strb	r3, [r4, #0]
   11120:	e7f0      	b.n	11104 <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   11122:	f1bb 0f0f 	cmp.w	fp, #15
   11126:	d903      	bls.n	11130 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11128:	2261      	movs	r2, #97	; 0x61
   1112a:	4659      	mov	r1, fp
   1112c:	4620      	mov	r0, r4
   1112e:	e7ec      	b.n	1110a <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   11130:	b252      	sxtb	r2, r2
   11132:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   11136:	bf94      	ite	ls
   11138:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   1113a:	3257      	addhi	r2, #87	; 0x57
   1113c:	1c60      	adds	r0, r4, #1
   1113e:	7022      	strb	r2, [r4, #0]
   11140:	e7e5      	b.n	1110e <z_impl_net_addr_ntop+0x17a>
   11142:	bf00      	nop
   11144:	3b9aca00 	.word	0x3b9aca00

00011148 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   11148:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1114a:	4b09      	ldr	r3, [pc, #36]	; (11170 <gpio_nrfx_init+0x28>)
   1114c:	781a      	ldrb	r2, [r3, #0]
   1114e:	b96a      	cbnz	r2, 1116c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   11150:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   11152:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   11154:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   11156:	2105      	movs	r1, #5
   11158:	f7fe fba0 	bl	f89c <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   1115c:	2031      	movs	r0, #49	; 0x31
   1115e:	f7fe fb8d 	bl	f87c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   11162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   11166:	4b03      	ldr	r3, [pc, #12]	; (11174 <gpio_nrfx_init+0x2c>)
   11168:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1116c:	2000      	movs	r0, #0
   1116e:	bd08      	pop	{r3, pc}
   11170:	20026549 	.word	0x20026549
   11174:	40031000 	.word	0x40031000

00011178 <gpiote_pin_int_cfg>:
{
   11178:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1117a:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   1117c:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1117e:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   11180:	4c51      	ldr	r4, [pc, #324]	; (112c8 <gpiote_pin_int_cfg+0x150>)
   11182:	7918      	ldrb	r0, [r3, #4]
   11184:	f001 031f 	and.w	r3, r1, #31
   11188:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1118c:	2000      	movs	r0, #0
   1118e:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   11192:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11194:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   11198:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1119c:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   111a0:	42b3      	cmp	r3, r6
   111a2:	d170      	bne.n	11286 <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
   111a4:	fa25 f600 	lsr.w	r6, r5, r0
   111a8:	07f6      	lsls	r6, r6, #31
   111aa:	d56c      	bpl.n	11286 <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   111ac:	0085      	lsls	r5, r0, #2
   111ae:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   111b2:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   111b6:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   111ba:	f026 0601 	bic.w	r6, r6, #1
   111be:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   111c2:	2501      	movs	r5, #1
   111c4:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   111c8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   111cc:	4d3f      	ldr	r5, [pc, #252]	; (112cc <gpiote_pin_int_cfg+0x154>)
   111ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   111d2:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   111d6:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   111da:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   111de:	6890      	ldr	r0, [r2, #8]
   111e0:	40c8      	lsrs	r0, r1
   111e2:	f010 0001 	ands.w	r0, r0, #1
   111e6:	d04d      	beq.n	11284 <gpiote_pin_int_cfg+0x10c>
   111e8:	68d0      	ldr	r0, [r2, #12]
   111ea:	40c8      	lsrs	r0, r1
   111ec:	f010 0001 	ands.w	r0, r0, #1
   111f0:	d048      	beq.n	11284 <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   111f2:	6950      	ldr	r0, [r2, #20]
   111f4:	40c8      	lsrs	r0, r1
   111f6:	f010 0001 	ands.w	r0, r0, #1
   111fa:	d050      	beq.n	1129e <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
   111fc:	6990      	ldr	r0, [r2, #24]
   111fe:	40c8      	lsrs	r0, r1
   11200:	07c0      	lsls	r0, r0, #31
   11202:	d444      	bmi.n	1128e <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
   11204:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   11206:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   11208:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1120a:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   1120e:	f000 0001 	and.w	r0, r0, #1
   11212:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   11216:	4288      	cmp	r0, r1
   11218:	bf14      	ite	ne
   1121a:	2101      	movne	r1, #1
   1121c:	2102      	moveq	r1, #2
   1121e:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   11220:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   11224:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   11228:	f010 0003 	ands.w	r0, r0, #3
   1122c:	d131      	bne.n	11292 <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1122e:	00aa      	lsls	r2, r5, #2
   11230:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   11234:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   11238:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1123c:	021b      	lsls	r3, r3, #8
   1123e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11242:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   11246:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1124a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
   1124e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11252:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
   11256:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11258:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1125c:	b29b      	uxth	r3, r3
   1125e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11262:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11266:	4331      	orrs	r1, r6
   11268:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1126c:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1126e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   11272:	f043 0301 	orr.w	r3, r3, #1
   11276:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1127a:	2301      	movs	r3, #1
   1127c:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   11280:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   11284:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11286:	3001      	adds	r0, #1
   11288:	2808      	cmp	r0, #8
   1128a:	d183      	bne.n	11194 <gpiote_pin_int_cfg+0x1c>
   1128c:	e79e      	b.n	111cc <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1128e:	2103      	movs	r1, #3
   11290:	e7c5      	b.n	1121e <gpiote_pin_int_cfg+0xa6>
   11292:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   11294:	2d08      	cmp	r5, #8
   11296:	d1c3      	bne.n	11220 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   11298:	f06f 0012 	mvn.w	r0, #18
   1129c:	e7f2      	b.n	11284 <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1129e:	6913      	ldr	r3, [r2, #16]
   112a0:	69d2      	ldr	r2, [r2, #28]
   112a2:	4053      	eors	r3, r2
   112a4:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   112a8:	f011 0f01 	tst.w	r1, #1
   112ac:	bf14      	ite	ne
   112ae:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   112b2:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   112b6:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   112ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   112be:	4313      	orrs	r3, r2
   112c0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   112c4:	e7de      	b.n	11284 <gpiote_pin_int_cfg+0x10c>
   112c6:	bf00      	nop
   112c8:	40031000 	.word	0x40031000
   112cc:	40842500 	.word	0x40842500

000112d0 <gpio_nrfx_config>:
{
   112d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d4:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   112d6:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   112d8:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   112dc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   112e0:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   112e2:	d040      	beq.n	11366 <gpio_nrfx_config+0x96>
   112e4:	dc09      	bgt.n	112fa <gpio_nrfx_config+0x2a>
   112e6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   112ea:	d03e      	beq.n	1136a <gpio_nrfx_config+0x9a>
   112ec:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   112f0:	d03d      	beq.n	1136e <gpio_nrfx_config+0x9e>
   112f2:	b190      	cbz	r0, 1131a <gpio_nrfx_config+0x4a>
		return -EINVAL;
   112f4:	f06f 0015 	mvn.w	r0, #21
   112f8:	e032      	b.n	11360 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   112fa:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   112fe:	d038      	beq.n	11372 <gpio_nrfx_config+0xa2>
   11300:	dc04      	bgt.n	1130c <gpio_nrfx_config+0x3c>
   11302:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   11306:	d1f5      	bne.n	112f4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   11308:	2003      	movs	r0, #3
   1130a:	e006      	b.n	1131a <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1130c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   11310:	d031      	beq.n	11376 <gpio_nrfx_config+0xa6>
   11312:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   11316:	d1ed      	bne.n	112f4 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   11318:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   1131a:	f406 7740 	and.w	r7, r6, #768	; 0x300
   1131e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   11322:	d02a      	beq.n	1137a <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   11324:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   11328:	4263      	negs	r3, r4
   1132a:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1132c:	2901      	cmp	r1, #1
		from_pin = pin;
   1132e:	bf19      	ittee	ne
   11330:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   11332:	46a1      	movne	r9, r4
		to_pin   = 31U;
   11334:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   11338:	2400      	moveq	r4, #0
   1133a:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   1133e:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   11342:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   11346:	ea47 070c 	orr.w	r7, r7, ip
   1134a:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1134e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 113f0 <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   11352:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11356:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1135a:	45a1      	cmp	r9, r4
   1135c:	d20f      	bcs.n	1137e <gpio_nrfx_config+0xae>
	return 0;
   1135e:	2000      	movs	r0, #0
}
   11360:	b003      	add	sp, #12
   11362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   11366:	2002      	movs	r0, #2
   11368:	e7d7      	b.n	1131a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   1136a:	2001      	movs	r0, #1
   1136c:	e7d5      	b.n	1131a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   1136e:	2004      	movs	r0, #4
   11370:	e7d3      	b.n	1131a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   11372:	2005      	movs	r0, #5
   11374:	e7d1      	b.n	1131a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   11376:	2006      	movs	r0, #6
   11378:	e7cf      	b.n	1131a <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   1137a:	2303      	movs	r3, #3
   1137c:	e7d6      	b.n	1132c <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   1137e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   11382:	6892      	ldr	r2, [r2, #8]
   11384:	7911      	ldrb	r1, [r2, #4]
   11386:	f004 021f 	and.w	r2, r4, #31
   1138a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1138e:	3280      	adds	r2, #128	; 0x80
   11390:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11394:	68a9      	ldr	r1, [r5, #8]
   11396:	fa0b f204 	lsl.w	r2, fp, r4
   1139a:	2b00      	cmp	r3, #0
   1139c:	d025      	beq.n	113ea <gpio_nrfx_config+0x11a>
   1139e:	4311      	orrs	r1, r2
   113a0:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   113a2:	6969      	ldr	r1, [r5, #20]
   113a4:	06b0      	lsls	r0, r6, #26
   113a6:	bf4c      	ite	mi
   113a8:	4311      	orrmi	r1, r2
   113aa:	4391      	bicpl	r1, r2
   113ac:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   113ae:	69a9      	ldr	r1, [r5, #24]
   113b0:	0670      	lsls	r0, r6, #25
   113b2:	bf4c      	ite	mi
   113b4:	4311      	orrmi	r1, r2
   113b6:	4391      	bicpl	r1, r2
   113b8:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   113ba:	6929      	ldr	r1, [r5, #16]
   113bc:	0770      	lsls	r0, r6, #29
   113be:	bf4c      	ite	mi
   113c0:	4311      	orrmi	r1, r2
   113c2:	4391      	bicpl	r1, r2
   113c4:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   113c6:	69e9      	ldr	r1, [r5, #28]
   113c8:	0630      	lsls	r0, r6, #24
   113ca:	bf4c      	ite	mi
   113cc:	430a      	orrmi	r2, r1
   113ce:	ea21 0202 	bicpl.w	r2, r1, r2
   113d2:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   113d4:	4621      	mov	r1, r4
   113d6:	4640      	mov	r0, r8
   113d8:	9301      	str	r3, [sp, #4]
   113da:	f7ff fecd 	bl	11178 <gpiote_pin_int_cfg>
		if (res != 0) {
   113de:	2800      	cmp	r0, #0
   113e0:	d1be      	bne.n	11360 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   113e2:	3401      	adds	r4, #1
   113e4:	b2e4      	uxtb	r4, r4
   113e6:	9b01      	ldr	r3, [sp, #4]
   113e8:	e7b7      	b.n	1135a <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   113ea:	ea21 0102 	bic.w	r1, r1, r2
   113ee:	e7d7      	b.n	113a0 <gpio_nrfx_config+0xd0>
   113f0:	40842500 	.word	0x40842500

000113f4 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   113f4:	494f      	ldr	r1, [pc, #316]	; (11534 <gpiote_event_handler+0x140>)
{
   113f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113fa:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   113fc:	2d00      	cmp	r5, #0
   113fe:	d060      	beq.n	114c2 <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
   11400:	4b4d      	ldr	r3, [pc, #308]	; (11538 <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
   11402:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   11404:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   11406:	681b      	ldr	r3, [r3, #0]
   11408:	f8df e138 	ldr.w	lr, [pc, #312]	; 11544 <gpiote_event_handler+0x150>
   1140c:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1140e:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   11412:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   11414:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   11418:	4320      	orrs	r0, r4
   1141a:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1141e:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   11420:	69d4      	ldr	r4, [r2, #28]
   11422:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   11424:	6900      	ldr	r0, [r0, #16]
   11426:	4054      	eors	r4, r2
   11428:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   1142a:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   1142c:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   11430:	bb93      	cbnz	r3, 11498 <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11432:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11434:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   11436:	2001      	movs	r0, #1
   11438:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1143a:	4940      	ldr	r1, [pc, #256]	; (1153c <gpiote_event_handler+0x148>)
   1143c:	4e40      	ldr	r6, [pc, #256]	; (11540 <gpiote_event_handler+0x14c>)
   1143e:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   11442:	fa00 fc03 	lsl.w	ip, r0, r3
   11446:	ea1c 0f02 	tst.w	ip, r2
   1144a:	d00d      	beq.n	11468 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1144c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   11450:	b152      	cbz	r2, 11468 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11452:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   11456:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1145a:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1145e:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   11462:	fa00 f202 	lsl.w	r2, r0, r2
   11466:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11468:	3301      	adds	r3, #1
   1146a:	2b08      	cmp	r3, #8
   1146c:	d1e7      	bne.n	1143e <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   1146e:	bb54      	cbnz	r4, 114c6 <gpiote_event_handler+0xd2>
	if (port_event) {
   11470:	b185      	cbz	r5, 11494 <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
   11472:	2401      	movs	r4, #1
	u32_t pin = 0U;
   11474:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   11476:	4b30      	ldr	r3, [pc, #192]	; (11538 <gpiote_event_handler+0x144>)
   11478:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 11544 <gpiote_event_handler+0x150>
   1147c:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   1147e:	681b      	ldr	r3, [r3, #0]
   11480:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11482:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   11486:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   11488:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   1148c:	4301      	orrs	r1, r0
   1148e:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   11492:	bb7b      	cbnz	r3, 114f4 <gpiote_event_handler+0x100>
}
   11494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   11498:	4203      	tst	r3, r0
   1149a:	d00f      	beq.n	114bc <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1149c:	f897 c004 	ldrb.w	ip, [r7, #4]
   114a0:	f006 021f 	and.w	r2, r6, #31
   114a4:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   114a8:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   114ac:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   114b0:	ea23 0300 	bic.w	r3, r3, r0
   114b4:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   114b8:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   114bc:	3601      	adds	r6, #1
		bit <<= 1;
   114be:	0040      	lsls	r0, r0, #1
   114c0:	e7b6      	b.n	11430 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   114c2:	462c      	mov	r4, r5
   114c4:	e7b6      	b.n	11434 <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
   114c6:	4f1c      	ldr	r7, [pc, #112]	; (11538 <gpiote_event_handler+0x144>)
   114c8:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   114cc:	f8d8 1000 	ldr.w	r1, [r8]
   114d0:	2900      	cmp	r1, #0
   114d2:	d0cd      	beq.n	11470 <gpiote_event_handler+0x7c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   114d4:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   114d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   114da:	688a      	ldr	r2, [r1, #8]
   114dc:	4023      	ands	r3, r4
   114de:	4213      	tst	r3, r2
   114e0:	d003      	beq.n	114ea <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
   114e2:	684b      	ldr	r3, [r1, #4]
   114e4:	4622      	mov	r2, r4
   114e6:	4638      	mov	r0, r7
   114e8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   114ea:	2e00      	cmp	r6, #0
   114ec:	d0c0      	beq.n	11470 <gpiote_event_handler+0x7c>
   114ee:	4631      	mov	r1, r6
   114f0:	6836      	ldr	r6, [r6, #0]
   114f2:	e7f0      	b.n	114d6 <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   114f4:	421c      	tst	r4, r3
   114f6:	d01a      	beq.n	1152e <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   114f8:	7930      	ldrb	r0, [r6, #4]
   114fa:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   114fe:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11500:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11504:	6910      	ldr	r0, [r2, #16]
   11506:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   1150a:	4078      	eors	r0, r7
   1150c:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   1150e:	f010 0f01 	tst.w	r0, #1
   11512:	bf14      	ite	ne
   11514:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   11518:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1151c:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   11520:	ea23 0304 	bic.w	r3, r3, r4
   11524:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11528:	4338      	orrs	r0, r7
   1152a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   1152e:	3501      	adds	r5, #1
		bit <<= 1;
   11530:	0064      	lsls	r4, r4, #1
   11532:	e7ae      	b.n	11492 <gpiote_event_handler+0x9e>
   11534:	4003117c 	.word	0x4003117c
   11538:	2002c608 	.word	0x2002c608
   1153c:	40031000 	.word	0x40031000
   11540:	40031100 	.word	0x40031100
   11544:	40842500 	.word	0x40842500

00011548 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11548:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1154a:	794b      	ldrb	r3, [r1, #5]
   1154c:	2b01      	cmp	r3, #1
   1154e:	d029      	beq.n	115a4 <uarte_nrfx_configure+0x5c>
   11550:	2b03      	cmp	r3, #3
   11552:	d124      	bne.n	1159e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11554:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11556:	798b      	ldrb	r3, [r1, #6]
   11558:	2b03      	cmp	r3, #3
   1155a:	d120      	bne.n	1159e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1155c:	79cc      	ldrb	r4, [r1, #7]
   1155e:	b12c      	cbz	r4, 1156c <uarte_nrfx_configure+0x24>
   11560:	2c01      	cmp	r4, #1
   11562:	d11c      	bne.n	1159e <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   11564:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   11566:	689b      	ldr	r3, [r3, #8]
   11568:	791b      	ldrb	r3, [r3, #4]
   1156a:	b1c3      	cbz	r3, 1159e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1156c:	790a      	ldrb	r2, [r1, #4]
   1156e:	b112      	cbz	r2, 11576 <uarte_nrfx_configure+0x2e>
   11570:	2a02      	cmp	r2, #2
   11572:	d114      	bne.n	1159e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11574:	220e      	movs	r2, #14
	switch (baudrate) {
   11576:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   1157a:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1157c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1157e:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   11580:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   11582:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   11584:	d062      	beq.n	1164c <uarte_nrfx_configure+0x104>
   11586:	d829      	bhi.n	115dc <uarte_nrfx_configure+0x94>
   11588:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1158c:	d061      	beq.n	11652 <uarte_nrfx_configure+0x10a>
   1158e:	d814      	bhi.n	115ba <uarte_nrfx_configure+0x72>
   11590:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11594:	d05f      	beq.n	11656 <uarte_nrfx_configure+0x10e>
   11596:	d807      	bhi.n	115a8 <uarte_nrfx_configure+0x60>
   11598:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1159c:	d05e      	beq.n	1165c <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   1159e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   115a2:	e052      	b.n	1164a <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   115a4:	2600      	movs	r6, #0
   115a6:	e7d6      	b.n	11556 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   115a8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   115ac:	d059      	beq.n	11662 <uarte_nrfx_configure+0x11a>
   115ae:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   115b2:	d1f4      	bne.n	1159e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   115b4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   115b8:	e03c      	b.n	11634 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   115ba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   115be:	d053      	beq.n	11668 <uarte_nrfx_configure+0x120>
   115c0:	d804      	bhi.n	115cc <uarte_nrfx_configure+0x84>
   115c2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   115c6:	d1ea      	bne.n	1159e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   115c8:	4b32      	ldr	r3, [pc, #200]	; (11694 <uarte_nrfx_configure+0x14c>)
   115ca:	e033      	b.n	11634 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   115cc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   115d0:	d04c      	beq.n	1166c <uarte_nrfx_configure+0x124>
   115d2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   115d6:	d1e2      	bne.n	1159e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   115d8:	4b2f      	ldr	r3, [pc, #188]	; (11698 <uarte_nrfx_configure+0x150>)
   115da:	e02b      	b.n	11634 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   115dc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   115e0:	d046      	beq.n	11670 <uarte_nrfx_configure+0x128>
   115e2:	d812      	bhi.n	1160a <uarte_nrfx_configure+0xc2>
   115e4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   115e8:	42bb      	cmp	r3, r7
   115ea:	d044      	beq.n	11676 <uarte_nrfx_configure+0x12e>
   115ec:	d805      	bhi.n	115fa <uarte_nrfx_configure+0xb2>
   115ee:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   115f2:	d1d4      	bne.n	1159e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   115f4:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   115f8:	e01c      	b.n	11634 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   115fa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   115fe:	d03d      	beq.n	1167c <uarte_nrfx_configure+0x134>
   11600:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11604:	d1cb      	bne.n	1159e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11606:	4b25      	ldr	r3, [pc, #148]	; (1169c <uarte_nrfx_configure+0x154>)
   11608:	e014      	b.n	11634 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1160a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1160e:	d038      	beq.n	11682 <uarte_nrfx_configure+0x13a>
   11610:	d808      	bhi.n	11624 <uarte_nrfx_configure+0xdc>
   11612:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   11616:	d037      	beq.n	11688 <uarte_nrfx_configure+0x140>
   11618:	4f21      	ldr	r7, [pc, #132]	; (116a0 <uarte_nrfx_configure+0x158>)
   1161a:	42bb      	cmp	r3, r7
   1161c:	d1bf      	bne.n	1159e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1161e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11622:	e007      	b.n	11634 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11624:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11628:	d031      	beq.n	1168e <uarte_nrfx_configure+0x146>
   1162a:	4f1e      	ldr	r7, [pc, #120]	; (116a4 <uarte_nrfx_configure+0x15c>)
   1162c:	42bb      	cmp	r3, r7
   1162e:	d1b6      	bne.n	1159e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11630:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11634:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11638:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1163a:	6883      	ldr	r3, [r0, #8]
   1163c:	4322      	orrs	r2, r4
   1163e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11640:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   11644:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11648:	2000      	movs	r0, #0
}
   1164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1164c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11650:	e7f0      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11652:	4b15      	ldr	r3, [pc, #84]	; (116a8 <uarte_nrfx_configure+0x160>)
   11654:	e7ee      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   11656:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1165a:	e7eb      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   1165c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11660:	e7e8      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11662:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11666:	e7e5      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11668:	4b10      	ldr	r3, [pc, #64]	; (116ac <uarte_nrfx_configure+0x164>)
   1166a:	e7e3      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1166c:	4b10      	ldr	r3, [pc, #64]	; (116b0 <uarte_nrfx_configure+0x168>)
   1166e:	e7e1      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11670:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11674:	e7de      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11676:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1167a:	e7db      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1167c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11680:	e7d8      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11682:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11686:	e7d5      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11688:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1168c:	e7d2      	b.n	11634 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1168e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11692:	e7cf      	b.n	11634 <uarte_nrfx_configure+0xec>
   11694:	00275000 	.word	0x00275000
   11698:	0075c000 	.word	0x0075c000
   1169c:	013a9000 	.word	0x013a9000
   116a0:	0003d090 	.word	0x0003d090
   116a4:	000f4240 	.word	0x000f4240
   116a8:	0013b000 	.word	0x0013b000
   116ac:	003af000 	.word	0x003af000
   116b0:	004ea000 	.word	0x004ea000

000116b4 <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   116b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   116b8:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   116ba:	f04f 0e03 	mov.w	lr, #3
   116be:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   116c2:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   116c4:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   116c6:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   116c8:	fa05 f702 	lsl.w	r7, r5, r2
   116cc:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   116ce:	4b1f      	ldr	r3, [pc, #124]	; (1174c <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   116d0:	6886      	ldr	r6, [r0, #8]
   116d2:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   116d4:	f102 0780 	add.w	r7, r2, #128	; 0x80
   116d8:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   116dc:	684f      	ldr	r7, [r1, #4]
   116de:	f107 0880 	add.w	r8, r7, #128	; 0x80
   116e2:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   116e6:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   116ea:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   116ee:	688f      	ldr	r7, [r1, #8]
   116f0:	1c7a      	adds	r2, r7, #1
   116f2:	d010      	beq.n	11716 <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   116f4:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   116f6:	1c51      	adds	r1, r2, #1
   116f8:	d00d      	beq.n	11716 <uarte_instance_init.constprop.4+0x62>
   116fa:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   116fe:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   11700:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11702:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   11706:	f107 0180 	add.w	r1, r7, #128	; 0x80
   1170a:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1170e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   11712:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   11716:	4631      	mov	r1, r6
   11718:	f7ff ff16 	bl	11548 <uarte_nrfx_configure>
	if (err) {
   1171c:	b9a0      	cbnz	r0, 11748 <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1171e:	2308      	movs	r3, #8
   11720:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   11724:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11728:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1172c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11730:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   11732:	68b2      	ldr	r2, [r6, #8]
   11734:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11738:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1173a:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1173c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11740:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11744:	60a3      	str	r3, [r4, #8]
   11746:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1174c:	40842500 	.word	0x40842500

00011750 <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   11750:	b530      	push	{r4, r5, lr}
   11752:	b085      	sub	sp, #20
   11754:	466c      	mov	r4, sp
   11756:	4605      	mov	r5, r0
   11758:	4b08      	ldr	r3, [pc, #32]	; (1177c <uarte_2_init+0x2c>)
   1175a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1175c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11760:	2200      	movs	r2, #0
   11762:	2101      	movs	r1, #1
   11764:	200a      	movs	r0, #10
   11766:	f7fe f899 	bl	f89c <z_arm_irq_priority_set>
   1176a:	200a      	movs	r0, #10
   1176c:	f7fe f886 	bl	f87c <arch_irq_enable>
   11770:	4621      	mov	r1, r4
   11772:	4628      	mov	r0, r5
   11774:	f7ff ff9e 	bl	116b4 <uarte_instance_init.constprop.4>
   11778:	b005      	add	sp, #20
   1177a:	bd30      	pop	{r4, r5, pc}
   1177c:	0001f3c0 	.word	0x0001f3c0

00011780 <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   11780:	b530      	push	{r4, r5, lr}
   11782:	b085      	sub	sp, #20
   11784:	466c      	mov	r4, sp
   11786:	4605      	mov	r5, r0
   11788:	4b08      	ldr	r3, [pc, #32]	; (117ac <uarte_0_init+0x2c>)
   1178a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1178c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11790:	2200      	movs	r2, #0
   11792:	2101      	movs	r1, #1
   11794:	2008      	movs	r0, #8
   11796:	f7fe f881 	bl	f89c <z_arm_irq_priority_set>
   1179a:	2008      	movs	r0, #8
   1179c:	f7fe f86e 	bl	f87c <arch_irq_enable>
   117a0:	4621      	mov	r1, r4
   117a2:	4628      	mov	r0, r5
   117a4:	f7ff ff86 	bl	116b4 <uarte_instance_init.constprop.4>
   117a8:	b005      	add	sp, #20
   117aa:	bd30      	pop	{r4, r5, pc}
   117ac:	0001f3d0 	.word	0x0001f3d0

000117b0 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   117b0:	2200      	movs	r2, #0
{
   117b2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   117b4:	4611      	mov	r1, r2
   117b6:	202a      	movs	r0, #42	; 0x2a
   117b8:	f7fe f870 	bl	f89c <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   117bc:	f003 f90c 	bl	149d8 <bsd_init>
   117c0:	4b01      	ldr	r3, [pc, #4]	; (117c8 <_bsdlib_init+0x18>)
   117c2:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   117c4:	2000      	movs	r0, #0
   117c6:	bd08      	pop	{r3, pc}
   117c8:	2002039c 	.word	0x2002039c

000117cc <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   117cc:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   117ce:	4b0d      	ldr	r3, [pc, #52]	; (11804 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   117d0:	4c0d      	ldr	r4, [pc, #52]	; (11808 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   117d2:	681a      	ldr	r2, [r3, #0]
   117d4:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   117d6:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   117d8:	4623      	mov	r3, r4
		if (entry->id == id) {
   117da:	6819      	ldr	r1, [r3, #0]
   117dc:	4281      	cmp	r1, r0
   117de:	d00e      	beq.n	117fe <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   117e0:	b151      	cbz	r1, 117f8 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   117e2:	6859      	ldr	r1, [r3, #4]
   117e4:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   117e6:	42b1      	cmp	r1, r6
   117e8:	bfc4      	itt	gt
   117ea:	461c      	movgt	r4, r3
   117ec:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   117ee:	3d01      	subs	r5, #1
   117f0:	f103 0308 	add.w	r3, r3, #8
   117f4:	d1f1      	bne.n	117da <thread_monitor_entry_get+0xe>
   117f6:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   117f8:	3a01      	subs	r2, #1
	new_entry->id = id;
   117fa:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   117fc:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   117fe:	4618      	mov	r0, r3
   11800:	bd70      	pop	{r4, r5, r6, pc}
   11802:	bf00      	nop
   11804:	200203a0 	.word	0x200203a0
   11808:	200203ac 	.word	0x200203ac

0001180c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1180c:	4668      	mov	r0, sp
   1180e:	f020 0107 	bic.w	r1, r0, #7
   11812:	468d      	mov	sp, r1
   11814:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11816:	4b0d      	ldr	r3, [pc, #52]	; (1184c <rpc_proxy_irq_handler+0x40>)
   11818:	e8d3 2fef 	ldaex	r2, [r3]
   1181c:	3201      	adds	r2, #1
   1181e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11822:	2900      	cmp	r1, #0
   11824:	d1f8      	bne.n	11818 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   11826:	f007 fb0b 	bl	18e40 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1182a:	4b09      	ldr	r3, [pc, #36]	; (11850 <rpc_proxy_irq_handler+0x44>)
   1182c:	681c      	ldr	r4, [r3, #0]
   1182e:	b93c      	cbnz	r4, 11840 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11830:	f7fe f84c 	bl	f8cc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   11834:	f7fd ff8c 	bl	f750 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11838:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1183c:	4685      	mov	sp, r0
   1183e:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   11840:	1d20      	adds	r0, r4, #4
   11842:	f00a fa2f 	bl	1bca4 <z_impl_k_sem_give>
   11846:	6824      	ldr	r4, [r4, #0]
	return node->next;
   11848:	e7f1      	b.n	1182e <rpc_proxy_irq_handler+0x22>
   1184a:	bf00      	nop
   1184c:	200203a0 	.word	0x200203a0
   11850:	200203a4 	.word	0x200203a4

00011854 <bsd_os_timedwait>:
{
   11854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11858:	4688      	mov	r8, r1
   1185a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   1185c:	f00d faa7 	bl	1edae <z_impl_k_uptime_get>
	if (*timeout == 0) {
   11860:	f8d8 3000 	ldr.w	r3, [r8]
   11864:	4606      	mov	r6, r0
   11866:	2b00      	cmp	r3, #0
   11868:	460f      	mov	r7, r1
   1186a:	d103      	bne.n	11874 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   1186c:	f00a f9a0 	bl	1bbb0 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   11870:	203c      	movs	r0, #60	; 0x3c
   11872:	e06e      	b.n	11952 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   11874:	bfbc      	itt	lt
   11876:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1187a:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   1187e:	2201      	movs	r2, #1
   11880:	2100      	movs	r1, #0
   11882:	a802      	add	r0, sp, #8
   11884:	f00d f9f8 	bl	1ec78 <z_impl_k_sem_init>
   11888:	f10d 0a04 	add.w	sl, sp, #4
   1188c:	f04f 0320 	mov.w	r3, #32
   11890:	f3ef 8b11 	mrs	fp, BASEPRI
   11894:	f383 8811 	msr	BASEPRI, r3
   11898:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1189c:	f00a f9fc 	bl	1bc98 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   118a0:	f7ff ff94 	bl	117cc <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   118a4:	4933      	ldr	r1, [pc, #204]	; (11974 <bsd_os_timedwait+0x120>)
   118a6:	6843      	ldr	r3, [r0, #4]
   118a8:	680a      	ldr	r2, [r1, #0]
   118aa:	4689      	mov	r9, r1
   118ac:	4293      	cmp	r3, r2
   118ae:	f04f 0300 	mov.w	r3, #0
   118b2:	d108      	bne.n	118c6 <bsd_os_timedwait+0x72>
	parent->next = child;
   118b4:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   118b6:	4b30      	ldr	r3, [pc, #192]	; (11978 <bsd_os_timedwait+0x124>)
   118b8:	685a      	ldr	r2, [r3, #4]
   118ba:	2a00      	cmp	r2, #0
   118bc:	d14c      	bne.n	11958 <bsd_os_timedwait+0x104>
	list->head = node;
   118be:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   118c2:	2301      	movs	r3, #1
   118c4:	e000      	b.n	118c8 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   118c6:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   118c8:	f38b 8811 	msr	BASEPRI, fp
   118cc:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   118d0:	2b00      	cmp	r3, #0
   118d2:	d03d      	beq.n	11950 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   118d4:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   118d8:	a802      	add	r0, sp, #8
   118da:	f00a fa0f 	bl	1bcfc <z_impl_k_sem_take>
	__asm__ volatile(
   118de:	f04f 0320 	mov.w	r3, #32
   118e2:	f3ef 8b11 	mrs	fp, BASEPRI
   118e6:	f383 8811 	msr	BASEPRI, r3
   118ea:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   118ee:	2000      	movs	r0, #0
   118f0:	4b21      	ldr	r3, [pc, #132]	; (11978 <bsd_os_timedwait+0x124>)
   118f2:	681a      	ldr	r2, [r3, #0]
   118f4:	b152      	cbz	r2, 1190c <bsd_os_timedwait+0xb8>
   118f6:	4552      	cmp	r2, sl
   118f8:	d139      	bne.n	1196e <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   118fa:	9901      	ldr	r1, [sp, #4]
   118fc:	bb88      	cbnz	r0, 11962 <bsd_os_timedwait+0x10e>
   118fe:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   11900:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   11902:	4290      	cmp	r0, r2
   11904:	d100      	bne.n	11908 <bsd_os_timedwait+0xb4>
	list->tail = node;
   11906:	6059      	str	r1, [r3, #4]
	parent->next = child;
   11908:	2300      	movs	r3, #0
   1190a:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   1190c:	f00a f9c4 	bl	1bc98 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11910:	f7ff ff5c 	bl	117cc <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   11914:	f8d9 3000 	ldr.w	r3, [r9]
   11918:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1191a:	f38b 8811 	msr	BASEPRI, fp
   1191e:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   11922:	f8d8 9000 	ldr.w	r9, [r8]
   11926:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1192a:	d011      	beq.n	11950 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   1192c:	f00d fa3f 	bl	1edae <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   11930:	eb16 0209 	adds.w	r2, r6, r9
   11934:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   11938:	1a14      	subs	r4, r2, r0
   1193a:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   1193e:	2c00      	cmp	r4, #0
   11940:	f175 0300 	sbcs.w	r3, r5, #0
   11944:	bfb8      	it	lt
   11946:	2400      	movlt	r4, #0
   11948:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   1194c:	2c00      	cmp	r4, #0
   1194e:	d08f      	beq.n	11870 <bsd_os_timedwait+0x1c>
	return 0;
   11950:	2000      	movs	r0, #0
}
   11952:	b009      	add	sp, #36	; 0x24
   11954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11958:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1195c:	f8c3 a004 	str.w	sl, [r3, #4]
   11960:	e7af      	b.n	118c2 <bsd_os_timedwait+0x6e>
	parent->next = child;
   11962:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   11964:	6859      	ldr	r1, [r3, #4]
   11966:	4291      	cmp	r1, r2
	list->tail = node;
   11968:	bf08      	it	eq
   1196a:	6058      	streq	r0, [r3, #4]
   1196c:	e7cc      	b.n	11908 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1196e:	4610      	mov	r0, r2
   11970:	6812      	ldr	r2, [r2, #0]
   11972:	e7bf      	b.n	118f4 <bsd_os_timedwait+0xa0>
   11974:	200203a0 	.word	0x200203a0
   11978:	200203a4 	.word	0x200203a4

0001197c <bsd_os_errno_set>:
	switch (err_code) {
   1197c:	282d      	cmp	r0, #45	; 0x2d
{
   1197e:	b510      	push	{r4, lr}
   11980:	4604      	mov	r4, r0
	switch (err_code) {
   11982:	d00c      	beq.n	1199e <bsd_os_errno_set+0x22>
   11984:	dc38      	bgt.n	119f8 <bsd_os_errno_set+0x7c>
   11986:	280e      	cmp	r0, #14
   11988:	d009      	beq.n	1199e <bsd_os_errno_set+0x22>
   1198a:	dc11      	bgt.n	119b0 <bsd_os_errno_set+0x34>
   1198c:	2808      	cmp	r0, #8
   1198e:	d006      	beq.n	1199e <bsd_os_errno_set+0x22>
   11990:	dc09      	bgt.n	119a6 <bsd_os_errno_set+0x2a>
   11992:	2802      	cmp	r0, #2
   11994:	d003      	beq.n	1199e <bsd_os_errno_set+0x22>
   11996:	2805      	cmp	r0, #5
   11998:	d001      	beq.n	1199e <bsd_os_errno_set+0x22>
   1199a:	2801      	cmp	r0, #1
   1199c:	d119      	bne.n	119d2 <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
   1199e:	f00c f9c9 	bl	1dd34 <z_errno>
   119a2:	6004      	str	r4, [r0, #0]
}
   119a4:	bd10      	pop	{r4, pc}
	switch (err_code) {
   119a6:	280c      	cmp	r0, #12
   119a8:	d0f9      	beq.n	1199e <bsd_os_errno_set+0x22>
   119aa:	dc57      	bgt.n	11a5c <bsd_os_errno_set+0xe0>
   119ac:	2809      	cmp	r0, #9
   119ae:	e7f5      	b.n	1199c <bsd_os_errno_set+0x20>
   119b0:	2828      	cmp	r0, #40	; 0x28
   119b2:	f000 8083 	beq.w	11abc <bsd_os_errno_set+0x140>
   119b6:	dc05      	bgt.n	119c4 <bsd_os_errno_set+0x48>
   119b8:	2818      	cmp	r0, #24
   119ba:	d0f0      	beq.n	1199e <bsd_os_errno_set+0x22>
   119bc:	2823      	cmp	r0, #35	; 0x23
   119be:	d052      	beq.n	11a66 <bsd_os_errno_set+0xea>
   119c0:	2816      	cmp	r0, #22
   119c2:	e7eb      	b.n	1199c <bsd_os_errno_set+0x20>
   119c4:	282a      	cmp	r0, #42	; 0x2a
   119c6:	d0ea      	beq.n	1199e <bsd_os_errno_set+0x22>
   119c8:	db51      	blt.n	11a6e <bsd_os_errno_set+0xf2>
   119ca:	282b      	cmp	r0, #43	; 0x2b
   119cc:	d0e7      	beq.n	1199e <bsd_os_errno_set+0x22>
   119ce:	282c      	cmp	r0, #44	; 0x2c
   119d0:	d051      	beq.n	11a76 <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   119d2:	2301      	movs	r3, #1
   119d4:	f04f 0200 	mov.w	r2, #0
   119d8:	493a      	ldr	r1, [pc, #232]	; (11ac4 <bsd_os_errno_set+0x148>)
   119da:	f363 0207 	bfi	r2, r3, #0, #8
   119de:	4b3a      	ldr	r3, [pc, #232]	; (11ac8 <bsd_os_errno_set+0x14c>)
   119e0:	483a      	ldr	r0, [pc, #232]	; (11acc <bsd_os_errno_set+0x150>)
   119e2:	1a5b      	subs	r3, r3, r1
   119e4:	08db      	lsrs	r3, r3, #3
   119e6:	f363 128f 	bfi	r2, r3, #6, #10
   119ea:	4621      	mov	r1, r4
   119ec:	f00b f8a6 	bl	1cb3c <log_1>
		errno = 0xBAADBAAD;
   119f0:	f00c f9a0 	bl	1dd34 <z_errno>
   119f4:	4b36      	ldr	r3, [pc, #216]	; (11ad0 <bsd_os_errno_set+0x154>)
   119f6:	e034      	b.n	11a62 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   119f8:	283c      	cmp	r0, #60	; 0x3c
   119fa:	d0d0      	beq.n	1199e <bsd_os_errno_set+0x22>
   119fc:	dc15      	bgt.n	11a2a <bsd_os_errno_set+0xae>
   119fe:	2833      	cmp	r0, #51	; 0x33
   11a00:	d0cd      	beq.n	1199e <bsd_os_errno_set+0x22>
   11a02:	dc05      	bgt.n	11a10 <bsd_os_errno_set+0x94>
   11a04:	2830      	cmp	r0, #48	; 0x30
   11a06:	d0ca      	beq.n	1199e <bsd_os_errno_set+0x22>
   11a08:	2832      	cmp	r0, #50	; 0x32
   11a0a:	d038      	beq.n	11a7e <bsd_os_errno_set+0x102>
   11a0c:	282f      	cmp	r0, #47	; 0x2f
   11a0e:	e7c5      	b.n	1199c <bsd_os_errno_set+0x20>
   11a10:	2836      	cmp	r0, #54	; 0x36
   11a12:	d0c4      	beq.n	1199e <bsd_os_errno_set+0x22>
   11a14:	dc01      	bgt.n	11a1a <bsd_os_errno_set+0x9e>
   11a16:	2834      	cmp	r0, #52	; 0x34
   11a18:	e7c0      	b.n	1199c <bsd_os_errno_set+0x20>
   11a1a:	2838      	cmp	r0, #56	; 0x38
   11a1c:	d0bf      	beq.n	1199e <bsd_os_errno_set+0x22>
   11a1e:	2839      	cmp	r0, #57	; 0x39
   11a20:	d1d7      	bne.n	119d2 <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
   11a22:	f00c f987 	bl	1dd34 <z_errno>
   11a26:	2339      	movs	r3, #57	; 0x39
   11a28:	e01b      	b.n	11a62 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11a2a:	287d      	cmp	r0, #125	; 0x7d
   11a2c:	d033      	beq.n	11a96 <bsd_os_errno_set+0x11a>
   11a2e:	dc09      	bgt.n	11a44 <bsd_os_errno_set+0xc8>
   11a30:	2870      	cmp	r0, #112	; 0x70
   11a32:	d028      	beq.n	11a86 <bsd_os_errno_set+0x10a>
   11a34:	2873      	cmp	r0, #115	; 0x73
   11a36:	d02a      	beq.n	11a8e <bsd_os_errno_set+0x112>
   11a38:	2869      	cmp	r0, #105	; 0x69
   11a3a:	d1ca      	bne.n	119d2 <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
   11a3c:	f00c f97a 	bl	1dd34 <z_errno>
   11a40:	2337      	movs	r3, #55	; 0x37
   11a42:	e00e      	b.n	11a62 <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11a44:	287f      	cmp	r0, #127	; 0x7f
   11a46:	d02f      	beq.n	11aa8 <bsd_os_errno_set+0x12c>
   11a48:	db29      	blt.n	11a9e <bsd_os_errno_set+0x122>
   11a4a:	2880      	cmp	r0, #128	; 0x80
   11a4c:	d031      	beq.n	11ab2 <bsd_os_errno_set+0x136>
   11a4e:	2881      	cmp	r0, #129	; 0x81
   11a50:	d1bf      	bne.n	119d2 <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
   11a52:	f00c f96f 	bl	1dd34 <z_errno>
   11a56:	f240 73d4 	movw	r3, #2004	; 0x7d4
   11a5a:	e002      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = EACCES;
   11a5c:	f00c f96a 	bl	1dd34 <z_errno>
   11a60:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   11a62:	6003      	str	r3, [r0, #0]
}
   11a64:	e79e      	b.n	119a4 <bsd_os_errno_set+0x28>
		errno = EAGAIN;
   11a66:	f00c f965 	bl	1dd34 <z_errno>
   11a6a:	230b      	movs	r3, #11
   11a6c:	e7f9      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
   11a6e:	f00c f961 	bl	1dd34 <z_errno>
   11a72:	2329      	movs	r3, #41	; 0x29
   11a74:	e7f5      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
   11a76:	f00c f95d 	bl	1dd34 <z_errno>
   11a7a:	232c      	movs	r3, #44	; 0x2c
   11a7c:	e7f1      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
   11a7e:	f00c f959 	bl	1dd34 <z_errno>
   11a82:	233e      	movs	r3, #62	; 0x3e
   11a84:	e7ed      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
   11a86:	f00c f955 	bl	1dd34 <z_errno>
   11a8a:	2343      	movs	r3, #67	; 0x43
   11a8c:	e7e9      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
   11a8e:	f00c f951 	bl	1dd34 <z_errno>
   11a92:	2344      	movs	r3, #68	; 0x44
   11a94:	e7e5      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
   11a96:	f00c f94d 	bl	1dd34 <z_errno>
   11a9a:	2348      	movs	r3, #72	; 0x48
   11a9c:	e7e1      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
   11a9e:	f00c f949 	bl	1dd34 <z_errno>
   11aa2:	f240 73d1 	movw	r3, #2001	; 0x7d1
   11aa6:	e7dc      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
   11aa8:	f00c f944 	bl	1dd34 <z_errno>
   11aac:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11ab0:	e7d7      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
   11ab2:	f00c f93f 	bl	1dd34 <z_errno>
   11ab6:	f240 73d3 	movw	r3, #2003	; 0x7d3
   11aba:	e7d2      	b.n	11a62 <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
   11abc:	f00c f93a 	bl	1dd34 <z_errno>
   11ac0:	2324      	movs	r3, #36	; 0x24
   11ac2:	e7ce      	b.n	11a62 <bsd_os_errno_set+0xe6>
   11ac4:	0001f328 	.word	0x0001f328
   11ac8:	0001f348 	.word	0x0001f348
   11acc:	00020a94 	.word	0x00020a94
   11ad0:	baadbaad 	.word	0xbaadbaad

00011ad4 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11ad8:	4b01      	ldr	r3, [pc, #4]	; (11ae0 <bsd_os_application_irq_set+0xc>)
   11ada:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11ade:	4770      	bx	lr
   11ae0:	e000e100 	.word	0xe000e100

00011ae4 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11ae8:	4b01      	ldr	r3, [pc, #4]	; (11af0 <bsd_os_application_irq_clear+0xc>)
   11aea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11aee:	4770      	bx	lr
   11af0:	e000e100 	.word	0xe000e100

00011af4 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11af4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11af8:	4b01      	ldr	r3, [pc, #4]	; (11b00 <bsd_os_trace_irq_set+0xc>)
   11afa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11afe:	4770      	bx	lr
   11b00:	e000e100 	.word	0xe000e100

00011b04 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11b08:	4b01      	ldr	r3, [pc, #4]	; (11b10 <bsd_os_trace_irq_clear+0xc>)
   11b0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11b0e:	4770      	bx	lr
   11b10:	e000e100 	.word	0xe000e100

00011b14 <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   11b14:	b500      	push	{lr}
   11b16:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   11b18:	2218      	movs	r2, #24
   11b1a:	2100      	movs	r1, #0
   11b1c:	a802      	add	r0, sp, #8
   11b1e:	f00b fda0 	bl	1d662 <memset>
   11b22:	2301      	movs	r3, #1
   11b24:	9301      	str	r3, [sp, #4]
   11b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b2a:	e9cd 3303 	strd	r3, r3, [sp, #12]
   11b2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11b32:	9306      	str	r3, [sp, #24]
   11b34:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   11b36:	2200      	movs	r2, #0
   11b38:	a901      	add	r1, sp, #4
   11b3a:	4804      	ldr	r0, [pc, #16]	; (11b4c <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   11b3c:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   11b40:	f009 f8ee 	bl	1ad20 <nrfx_uarte_init>
#endif
}
   11b44:	b009      	add	sp, #36	; 0x24
   11b46:	f85d fb04 	ldr.w	pc, [sp], #4
   11b4a:	bf00      	nop
   11b4c:	0001f560 	.word	0x0001f560

00011b50 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   11b50:	b508      	push	{r3, lr}
	list->head = NULL;
   11b52:	2300      	movs	r3, #0
   11b54:	4a08      	ldr	r2, [pc, #32]	; (11b78 <bsd_os_init+0x28>)
	list->tail = NULL;
   11b56:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11b5a:	4a08      	ldr	r2, [pc, #32]	; (11b7c <bsd_os_init+0x2c>)
   11b5c:	e8d2 1fef 	ldaex	r1, [r2]
   11b60:	e8c2 3fe0 	stlex	r0, r3, [r2]
   11b64:	2800      	cmp	r0, #0
   11b66:	d1f9      	bne.n	11b5c <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   11b68:	f00c f90f 	bl	1dd8a <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   11b6c:	f7ff ffd2 	bl	11b14 <trace_uart_init>
	trace_task_create();
}
   11b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   11b74:	f00c b8fe 	b.w	1dd74 <trace_task_create>
   11b78:	200203a4 	.word	0x200203a4
   11b7c:	200203a0 	.word	0x200203a0

00011b80 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   11b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b84:	4607      	mov	r7, r0
   11b86:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   11b88:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11b8a:	f8df 8024 	ldr.w	r8, [pc, #36]	; 11bb0 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   11b8e:	b914      	cbnz	r4, 11b96 <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   11b90:	4620      	mov	r0, r4
   11b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   11b96:	2cff      	cmp	r4, #255	; 0xff
   11b98:	4626      	mov	r6, r4
   11b9a:	bf28      	it	cs
   11b9c:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   11b9e:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11ba0:	4632      	mov	r2, r6
   11ba2:	4439      	add	r1, r7
   11ba4:	4640      	mov	r0, r8
   11ba6:	f009 f94f 	bl	1ae48 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   11baa:	1ba4      	subs	r4, r4, r6
   11bac:	e7ef      	b.n	11b8e <bsd_os_trace_put+0xe>
   11bae:	bf00      	nop
   11bb0:	0001f560 	.word	0x0001f560

00011bb4 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   11bb4:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   11bb8:	d03c      	beq.n	11c34 <z_to_nrf_optname+0x80>
   11bba:	dc04      	bgt.n	11bc6 <z_to_nrf_optname+0x12>
   11bbc:	2801      	cmp	r0, #1
   11bbe:	d044      	beq.n	11c4a <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   11bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   11bc4:	4770      	bx	lr
	switch (z_in_level) {
   11bc6:	f240 2302 	movw	r3, #514	; 0x202
   11bca:	4298      	cmp	r0, r3
   11bcc:	d052      	beq.n	11c74 <z_to_nrf_optname+0xc0>
   11bce:	f240 2303 	movw	r3, #515	; 0x203
   11bd2:	4298      	cmp	r0, r3
   11bd4:	d1f4      	bne.n	11bc0 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   11bd6:	3901      	subs	r1, #1
   11bd8:	2913      	cmp	r1, #19
   11bda:	d8f1      	bhi.n	11bc0 <z_to_nrf_optname+0xc>
   11bdc:	a301      	add	r3, pc, #4	; (adr r3, 11be4 <z_to_nrf_optname+0x30>)
   11bde:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   11be2:	bf00      	nop
   11be4:	00011c81 	.word	0x00011c81
   11be8:	00011c45 	.word	0x00011c45
   11bec:	00011c65 	.word	0x00011c65
   11bf0:	00011c57 	.word	0x00011c57
   11bf4:	00011c69 	.word	0x00011c69
   11bf8:	00011c6d 	.word	0x00011c6d
   11bfc:	00011c71 	.word	0x00011c71
   11c00:	00011bc1 	.word	0x00011bc1
   11c04:	00011bc1 	.word	0x00011bc1
   11c08:	00011bc1 	.word	0x00011bc1
   11c0c:	00011bc1 	.word	0x00011bc1
   11c10:	00011bc1 	.word	0x00011bc1
   11c14:	00011bc1 	.word	0x00011bc1
   11c18:	00011bc1 	.word	0x00011bc1
   11c1c:	00011bc1 	.word	0x00011bc1
   11c20:	00011bc1 	.word	0x00011bc1
   11c24:	00011bc1 	.word	0x00011bc1
   11c28:	00011bc1 	.word	0x00011bc1
   11c2c:	00011bc1 	.word	0x00011bc1
   11c30:	00011c5b 	.word	0x00011c5b
		switch (z_in_optname) {
   11c34:	3901      	subs	r1, #1
   11c36:	2905      	cmp	r1, #5
   11c38:	d8c2      	bhi.n	11bc0 <z_to_nrf_optname+0xc>
   11c3a:	e8df f001 	tbb	[pc, r1]
   11c3e:	1503      	.short	0x1503
   11c40:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   11c44:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11c46:	6013      	str	r3, [r2, #0]
   11c48:	e00a      	b.n	11c60 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   11c4a:	2914      	cmp	r1, #20
   11c4c:	d005      	beq.n	11c5a <z_to_nrf_optname+0xa6>
   11c4e:	2919      	cmp	r1, #25
   11c50:	d005      	beq.n	11c5e <z_to_nrf_optname+0xaa>
   11c52:	2904      	cmp	r1, #4
   11c54:	d1b4      	bne.n	11bc0 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   11c56:	2304      	movs	r3, #4
   11c58:	e7f5      	b.n	11c46 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   11c5a:	2314      	movs	r3, #20
   11c5c:	e7f3      	b.n	11c46 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   11c5e:	6011      	str	r1, [r2, #0]
	int retval = 0;
   11c60:	2000      	movs	r0, #0
			break;
   11c62:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   11c64:	2303      	movs	r3, #3
   11c66:	e7ee      	b.n	11c46 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   11c68:	2305      	movs	r3, #5
   11c6a:	e7ec      	b.n	11c46 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   11c6c:	2306      	movs	r3, #6
   11c6e:	e7ea      	b.n	11c46 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11c70:	2307      	movs	r3, #7
   11c72:	e7e8      	b.n	11c46 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   11c74:	2902      	cmp	r1, #2
   11c76:	d0e5      	beq.n	11c44 <z_to_nrf_optname+0x90>
   11c78:	2903      	cmp	r1, #3
   11c7a:	d0f3      	beq.n	11c64 <z_to_nrf_optname+0xb0>
   11c7c:	2901      	cmp	r1, #1
   11c7e:	d19f      	bne.n	11bc0 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   11c80:	2301      	movs	r3, #1
   11c82:	e7e0      	b.n	11c46 <z_to_nrf_optname+0x92>

00011c84 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11c84:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   11c86:	4b03      	ldr	r3, [pc, #12]	; (11c94 <nrf91_socket_iface_init+0x10>)
   11c88:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   11c8a:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   11c8c:	4802      	ldr	r0, [pc, #8]	; (11c98 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   11c8e:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   11c90:	f7fd bc00 	b.w	f494 <socket_offload_register>
   11c94:	200203fc 	.word	0x200203fc
   11c98:	0001f568 	.word	0x0001f568

00011c9c <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   11c9c:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   11c9e:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   11ca0:	b118      	cbz	r0, 11caa <callback_worker+0xe>
		data->callback(data->data);
   11ca2:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   11ca6:	300c      	adds	r0, #12
   11ca8:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   11caa:	a901      	add	r1, sp, #4
   11cac:	4802      	ldr	r0, [pc, #8]	; (11cb8 <callback_worker+0x1c>)
   11cae:	f009 fae1 	bl	1b274 <k_mem_slab_free>
}
   11cb2:	b003      	add	sp, #12
   11cb4:	f85d fb04 	ldr.w	pc, [sp], #4
   11cb8:	2002c650 	.word	0x2002c650

00011cbc <open_socket>:
{
   11cbc:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   11cbe:	4b09      	ldr	r3, [pc, #36]	; (11ce4 <open_socket+0x28>)
   11cc0:	f240 2201 	movw	r2, #513	; 0x201
   11cc4:	681b      	ldr	r3, [r3, #0]
   11cc6:	2100      	movs	r1, #0
   11cc8:	681b      	ldr	r3, [r3, #0]
   11cca:	2066      	movs	r0, #102	; 0x66
   11ccc:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   11cce:	4b06      	ldr	r3, [pc, #24]	; (11ce8 <open_socket+0x2c>)
   11cd0:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   11cd2:	3001      	adds	r0, #1
   11cd4:	d104      	bne.n	11ce0 <open_socket+0x24>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   11cd6:	f009 f939 	bl	1af4c <z_impl_z_errno>
		return -errno;
   11cda:	6800      	ldr	r0, [r0, #0]
   11cdc:	4240      	negs	r0, r0
}
   11cde:	bd08      	pop	{r3, pc}
	return 0;
   11ce0:	2000      	movs	r0, #0
   11ce2:	e7fc      	b.n	11cde <open_socket+0x22>
   11ce4:	20020344 	.word	0x20020344
   11ce8:	20020400 	.word	0x20020400

00011cec <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   11cec:	b530      	push	{r4, r5, lr}
   11cee:	b087      	sub	sp, #28
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   11cf0:	f7ff ffe4 	bl	11cbc <open_socket>
	if (err) {
   11cf4:	4d1a      	ldr	r5, [pc, #104]	; (11d60 <at_cmd_driver_init+0x74>)
   11cf6:	4b1b      	ldr	r3, [pc, #108]	; (11d64 <at_cmd_driver_init+0x78>)
   11cf8:	4604      	mov	r4, r0
   11cfa:	1aed      	subs	r5, r5, r3
   11cfc:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11d00:	f04f 0200 	mov.w	r2, #0
	if (err) {
   11d04:	b158      	cbz	r0, 11d1e <at_cmd_driver_init+0x32>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11d06:	2301      	movs	r3, #1
   11d08:	4601      	mov	r1, r0
   11d0a:	f363 0207 	bfi	r2, r3, #0, #8
   11d0e:	4816      	ldr	r0, [pc, #88]	; (11d68 <at_cmd_driver_init+0x7c>)
   11d10:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   11d14:	f00a ff12 	bl	1cb3c <log_1>

	return 0;
}
   11d18:	4620      	mov	r0, r4
   11d1a:	b007      	add	sp, #28
   11d1c:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("Common AT socket created");
   11d1e:	2304      	movs	r3, #4
   11d20:	f363 0207 	bfi	r2, r3, #0, #8
   11d24:	f365 128f 	bfi	r2, r5, #6, #10
   11d28:	4910      	ldr	r1, [pc, #64]	; (11d6c <at_cmd_driver_init+0x80>)
   11d2a:	4811      	ldr	r0, [pc, #68]	; (11d70 <at_cmd_driver_init+0x84>)
   11d2c:	f00a ff06 	bl	1cb3c <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11d30:	230a      	movs	r3, #10
   11d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11d36:	e9cd 4302 	strd	r4, r3, [sp, #8]
   11d3a:	490e      	ldr	r1, [pc, #56]	; (11d74 <at_cmd_driver_init+0x88>)
   11d3c:	4b0e      	ldr	r3, [pc, #56]	; (11d78 <at_cmd_driver_init+0x8c>)
   11d3e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   11d42:	e9cd 4400 	strd	r4, r4, [sp]
   11d46:	480d      	ldr	r0, [pc, #52]	; (11d7c <at_cmd_driver_init+0x90>)
   11d48:	f00a f868 	bl	1be1c <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   11d4c:	f04f 0200 	mov.w	r2, #0
   11d50:	2304      	movs	r3, #4
   11d52:	f363 0207 	bfi	r2, r3, #0, #8
   11d56:	f365 128f 	bfi	r2, r5, #6, #10
   11d5a:	4904      	ldr	r1, [pc, #16]	; (11d6c <at_cmd_driver_init+0x80>)
   11d5c:	4808      	ldr	r0, [pc, #32]	; (11d80 <at_cmd_driver_init+0x94>)
   11d5e:	e7d9      	b.n	11d14 <at_cmd_driver_init+0x28>
   11d60:	0001f330 	.word	0x0001f330
   11d64:	0001f328 	.word	0x0001f328
   11d68:	00020b1a 	.word	0x00020b1a
   11d6c:	00020b07 	.word	0x00020b07
   11d70:	00020b3c 	.word	0x00020b3c
   11d74:	20026db8 	.word	0x20026db8
   11d78:	00011d85 	.word	0x00011d85
   11d7c:	20020414 	.word	0x20020414
   11d80:	00020b59 	.word	0x00020b59

00011d84 <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   11d84:	2304      	movs	r3, #4
   11d86:	f04f 0200 	mov.w	r2, #0
{
   11d8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   11d8e:	f363 0207 	bfi	r2, r3, #0, #8
   11d92:	499b      	ldr	r1, [pc, #620]	; (12000 <socket_thread_fn+0x27c>)
   11d94:	4b9b      	ldr	r3, [pc, #620]	; (12004 <socket_thread_fn+0x280>)
{
   11d96:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   11d98:	1a5b      	subs	r3, r3, r1
   11d9a:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
   11d9e:	f36b 128f 	bfi	r2, fp, #6, #10
   11da2:	4999      	ldr	r1, [pc, #612]	; (12008 <socket_thread_fn+0x284>)
   11da4:	4899      	ldr	r0, [pc, #612]	; (1200c <socket_thread_fn+0x288>)
   11da6:	f00a fec9 	bl	1cb3c <log_1>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   11daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11dae:	a903      	add	r1, sp, #12
   11db0:	4897      	ldr	r0, [pc, #604]	; (12010 <socket_thread_fn+0x28c>)
   11db2:	f009 fa33 	bl	1b21c <k_mem_slab_alloc>
		ret.code  = 0;
   11db6:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   11db8:	4c96      	ldr	r4, [pc, #600]	; (12014 <socket_thread_fn+0x290>)
		item->callback = NULL;
   11dba:	9903      	ldr	r1, [sp, #12]
   11dbc:	6822      	ldr	r2, [r4, #0]
   11dbe:	4896      	ldr	r0, [pc, #600]	; (12018 <socket_thread_fn+0x294>)
   11dc0:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   11dc4:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
   11dc8:	310c      	adds	r1, #12
		ret.code  = 0;
   11dca:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   11dcc:	f88d 3014 	strb.w	r3, [sp, #20]
   11dd0:	f640 228c 	movw	r2, #2700	; 0xa8c
   11dd4:	6800      	ldr	r0, [r0, #0]
   11dd6:	47d0      	blx	sl
		if (bytes_read < 0) {
   11dd8:	1e01      	subs	r1, r0, #0
   11dda:	da5b      	bge.n	11e94 <socket_thread_fn+0x110>
			LOG_ERR("AT socket recv failed with err %d",
   11ddc:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   11de0:	f043 0301 	orr.w	r3, r3, #1
   11de4:	f363 0507 	bfi	r5, r3, #0, #8
   11de8:	f36b 158f 	bfi	r5, fp, #6, #10
   11dec:	488b      	ldr	r0, [pc, #556]	; (1201c <socket_thread_fn+0x298>)
   11dee:	462a      	mov	r2, r5
   11df0:	f00a fea4 	bl	1cb3c <log_1>
	return socket_ops->close(sock);
   11df4:	6823      	ldr	r3, [r4, #0]
   11df6:	4888      	ldr	r0, [pc, #544]	; (12018 <socket_thread_fn+0x294>)
   11df8:	685b      	ldr	r3, [r3, #4]
   11dfa:	6800      	ldr	r0, [r0, #0]
   11dfc:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   11dfe:	2800      	cmp	r0, #0
   11e00:	d131      	bne.n	11e66 <socket_thread_fn+0xe2>
			    (open_socket() == 0)) {
   11e02:	f7ff ff5b 	bl	11cbc <open_socket>
			if ((close(common_socket_fd) == 0) &&
   11e06:	bb70      	cbnz	r0, 11e66 <socket_thread_fn+0xe2>
				LOG_INF("AT socket recovered");
   11e08:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   11e0c:	f043 0303 	orr.w	r3, r3, #3
   11e10:	f363 0607 	bfi	r6, r3, #0, #8
   11e14:	f36b 168f 	bfi	r6, fp, #6, #10
   11e18:	4631      	mov	r1, r6
   11e1a:	4881      	ldr	r0, [pc, #516]	; (12020 <socket_thread_fn+0x29c>)
   11e1c:	f00a fe81 	bl	1cb22 <log_0>
				ret.state = AT_CMD_ERROR;
   11e20:	2301      	movs	r3, #1
   11e22:	f88d 3014 	strb.w	r3, [sp, #20]
   11e26:	f009 f891 	bl	1af4c <z_impl_z_errno>
				ret.code  = -errno;
   11e2a:	6803      	ldr	r3, [r0, #0]
   11e2c:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   11e2e:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   11e30:	9903      	ldr	r1, [sp, #12]
   11e32:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   11e36:	2b00      	cmp	r3, #0
   11e38:	f040 80b8 	bne.w	11fac <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   11e3c:	a903      	add	r1, sp, #12
   11e3e:	4874      	ldr	r0, [pc, #464]	; (12010 <socket_thread_fn+0x28c>)
   11e40:	f009 fa18 	bl	1b274 <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   11e44:	4b77      	ldr	r3, [pc, #476]	; (12024 <socket_thread_fn+0x2a0>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   11e46:	689b      	ldr	r3, [r3, #8]
   11e48:	2b00      	cmp	r3, #0
   11e4a:	d1ae      	bne.n	11daa <socket_thread_fn+0x26>
   11e4c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   11e50:	2a04      	cmp	r2, #4
   11e52:	d0aa      	beq.n	11daa <socket_thread_fn+0x26>
			current_cmd_handler = NULL;
   11e54:	4a74      	ldr	r2, [pc, #464]	; (12028 <socket_thread_fn+0x2a4>)
   11e56:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(q, data, timeout);
   11e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11e5c:	a904      	add	r1, sp, #16
   11e5e:	4873      	ldr	r0, [pc, #460]	; (1202c <socket_thread_fn+0x2a8>)
   11e60:	f009 fad2 	bl	1b408 <z_impl_k_msgq_put>
   11e64:	e7a1      	b.n	11daa <socket_thread_fn+0x26>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   11e66:	2301      	movs	r3, #1
   11e68:	f04f 0400 	mov.w	r4, #0
   11e6c:	f363 0407 	bfi	r4, r3, #0, #8
   11e70:	f36b 148f 	bfi	r4, fp, #6, #10
   11e74:	f009 f86a 	bl	1af4c <z_impl_z_errno>
   11e78:	4622      	mov	r2, r4
   11e7a:	6801      	ldr	r1, [r0, #0]
   11e7c:	486c      	ldr	r0, [pc, #432]	; (12030 <socket_thread_fn+0x2ac>)
   11e7e:	f00a fe5d 	bl	1cb3c <log_1>
   11e82:	4b64      	ldr	r3, [pc, #400]	; (12014 <socket_thread_fn+0x290>)
   11e84:	4a64      	ldr	r2, [pc, #400]	; (12018 <socket_thread_fn+0x294>)
   11e86:	681b      	ldr	r3, [r3, #0]
   11e88:	6810      	ldr	r0, [r2, #0]
   11e8a:	685b      	ldr	r3, [r3, #4]
   11e8c:	4798      	blx	r3
}
   11e8e:	b007      	add	sp, #28
   11e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   11e94:	f640 238c 	movw	r3, #2700	; 0xa8c
   11e98:	4299      	cmp	r1, r3
   11e9a:	d004      	beq.n	11ea6 <socket_thread_fn+0x122>
			   item->data[bytes_read - 1] != '\0') {
   11e9c:	9803      	ldr	r0, [sp, #12]
   11e9e:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   11ea0:	7acb      	ldrb	r3, [r1, #11]
   11ea2:	9301      	str	r3, [sp, #4]
   11ea4:	b173      	cbz	r3, 11ec4 <socket_thread_fn+0x140>
			LOG_ERR("AT message to large for reception buffer or "
   11ea6:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   11eaa:	f043 0301 	orr.w	r3, r3, #1
   11eae:	f363 0707 	bfi	r7, r3, #0, #8
   11eb2:	f36b 178f 	bfi	r7, fp, #6, #10
   11eb6:	4639      	mov	r1, r7
   11eb8:	485e      	ldr	r0, [pc, #376]	; (12034 <socket_thread_fn+0x2b0>)
   11eba:	f00a fe32 	bl	1cb22 <log_0>
			ret.code  = -ENOBUFS;
   11ebe:	f06f 0336 	mvn.w	r3, #54	; 0x36
   11ec2:	e7b4      	b.n	11e2e <socket_thread_fn+0xaa>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   11ec4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   11ec8:	f043 0304 	orr.w	r3, r3, #4
   11ecc:	300c      	adds	r0, #12
   11ece:	f363 0807 	bfi	r8, r3, #0, #8
   11ed2:	f7fd f817 	bl	ef04 <log_strdup>
   11ed6:	f36b 188f 	bfi	r8, fp, #6, #10
   11eda:	4602      	mov	r2, r0
   11edc:	4643      	mov	r3, r8
   11ede:	494a      	ldr	r1, [pc, #296]	; (12008 <socket_thread_fn+0x284>)
   11ee0:	4855      	ldr	r0, [pc, #340]	; (12038 <socket_thread_fn+0x2b4>)
   11ee2:	f00a fe3f 	bl	1cb64 <log_2>
	ret->state = AT_CMD_NOTIFICATION;
   11ee6:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   11ee8:	f8dd a00c 	ldr.w	sl, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11eec:	4953      	ldr	r1, [pc, #332]	; (1203c <socket_thread_fn+0x2b8>)
		payload_len = get_return_code(item->data, &ret);
   11eee:	f10a 040c 	add.w	r4, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11ef2:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   11ef4:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11ef8:	f00b faf9 	bl	1d4ee <strstr>
		if (tmpstr) {
   11efc:	4603      	mov	r3, r0
   11efe:	b120      	cbz	r0, 11f0a <socket_thread_fn+0x186>
			ret->state = AT_CMD_OK;
   11f00:	9a01      	ldr	r2, [sp, #4]
   11f02:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11f06:	9204      	str	r2, [sp, #16]
			break;
   11f08:	e00e      	b.n	11f28 <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   11f0a:	494d      	ldr	r1, [pc, #308]	; (12040 <socket_thread_fn+0x2bc>)
   11f0c:	4620      	mov	r0, r4
   11f0e:	f00b faee 	bl	1d4ee <strstr>
		if (tmpstr) {
   11f12:	9001      	str	r0, [sp, #4]
   11f14:	b328      	cbz	r0, 11f62 <socket_thread_fn+0x1de>
			ret->state = AT_CMD_ERROR_CMS;
   11f16:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11f18:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   11f1c:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11f20:	f00b f9d0 	bl	1d2c4 <atoi>
   11f24:	9b01      	ldr	r3, [sp, #4]
   11f26:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   11f28:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   11f2a:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   11f2c:	3201      	adds	r2, #1
   11f2e:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   11f30:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11f34:	2b04      	cmp	r3, #4
   11f36:	d04f      	beq.n	11fd8 <socket_thread_fn+0x254>
			if ((response_buf_len > 0) &&
   11f38:	f8df a124 	ldr.w	sl, [pc, #292]	; 12060 <socket_thread_fn+0x2dc>
   11f3c:	f8da 3000 	ldr.w	r3, [sl]
   11f40:	2b00      	cmp	r3, #0
   11f42:	d052      	beq.n	11fea <socket_thread_fn+0x266>
			    (response_buf != NULL)) {
   11f44:	4c3f      	ldr	r4, [pc, #252]	; (12044 <socket_thread_fn+0x2c0>)
   11f46:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   11f48:	2800      	cmp	r0, #0
   11f4a:	d04e      	beq.n	11fea <socket_thread_fn+0x266>
				if (response_buf_len > payload_len) {
   11f4c:	4293      	cmp	r3, r2
   11f4e:	d91d      	bls.n	11f8c <socket_thread_fn+0x208>
					memcpy(response_buf, item->data,
   11f50:	9903      	ldr	r1, [sp, #12]
   11f52:	310c      	adds	r1, #12
   11f54:	f00b fb5b 	bl	1d60e <memcpy>
				response_buf_len = 0;
   11f58:	2300      	movs	r3, #0
   11f5a:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   11f5e:	6023      	str	r3, [r4, #0]
				goto next;
   11f60:	e766      	b.n	11e30 <socket_thread_fn+0xac>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   11f62:	4939      	ldr	r1, [pc, #228]	; (12048 <socket_thread_fn+0x2c4>)
   11f64:	4620      	mov	r0, r4
   11f66:	f00b fac2 	bl	1d4ee <strstr>
		if (tmpstr) {
   11f6a:	9001      	str	r0, [sp, #4]
   11f6c:	b108      	cbz	r0, 11f72 <socket_thread_fn+0x1ee>
			ret->state = AT_CMD_ERROR_CME;
   11f6e:	2203      	movs	r2, #3
   11f70:	e7d2      	b.n	11f18 <socket_thread_fn+0x194>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   11f72:	4936      	ldr	r1, [pc, #216]	; (1204c <socket_thread_fn+0x2c8>)
   11f74:	4620      	mov	r0, r4
   11f76:	f00b faba 	bl	1d4ee <strstr>
		if (tmpstr) {
   11f7a:	4603      	mov	r3, r0
   11f7c:	2800      	cmp	r0, #0
   11f7e:	d039      	beq.n	11ff4 <socket_thread_fn+0x270>
			ret->state = AT_CMD_ERROR;
   11f80:	2201      	movs	r2, #1
   11f82:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11f86:	f06f 0207 	mvn.w	r2, #7
   11f8a:	e7bc      	b.n	11f06 <socket_thread_fn+0x182>
					LOG_ERR("Response buffer not large "
   11f8c:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   11f90:	f043 0301 	orr.w	r3, r3, #1
   11f94:	f363 0907 	bfi	r9, r3, #0, #8
   11f98:	f36b 198f 	bfi	r9, fp, #6, #10
   11f9c:	4649      	mov	r1, r9
   11f9e:	482c      	ldr	r0, [pc, #176]	; (12050 <socket_thread_fn+0x2cc>)
   11fa0:	f00a fdbf 	bl	1cb22 <log_0>
					ret.code  = -EMSGSIZE;
   11fa4:	f06f 0323 	mvn.w	r3, #35	; 0x23
   11fa8:	9304      	str	r3, [sp, #16]
   11faa:	e7d5      	b.n	11f58 <socket_thread_fn+0x1d4>
   11fac:	4b29      	ldr	r3, [pc, #164]	; (12054 <socket_thread_fn+0x2d0>)
   11fae:	2200      	movs	r2, #0
   11fb0:	604b      	str	r3, [r1, #4]
   11fb2:	460b      	mov	r3, r1
   11fb4:	600a      	str	r2, [r1, #0]
   11fb6:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11fba:	e8d3 2fef 	ldaex	r2, [r3]
   11fbe:	f042 0001 	orr.w	r0, r2, #1
   11fc2:	e8c3 0fe4 	stlex	r4, r0, [r3]
   11fc6:	2c00      	cmp	r4, #0
   11fc8:	d1f7      	bne.n	11fba <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11fca:	07d3      	lsls	r3, r2, #31
   11fcc:	f53f af3a 	bmi.w	11e44 <socket_thread_fn+0xc0>
		k_queue_append(&work_q->queue, work);
   11fd0:	4821      	ldr	r0, [pc, #132]	; (12058 <socket_thread_fn+0x2d4>)
   11fd2:	f00c fcea 	bl	1e9aa <k_queue_append>
   11fd6:	e735      	b.n	11e44 <socket_thread_fn+0xc0>
		if (payload_len == 0) {
   11fd8:	2a00      	cmp	r2, #0
   11fda:	f43f af29 	beq.w	11e30 <socket_thread_fn+0xac>
			item->callback = notification_handler;
   11fde:	4b1f      	ldr	r3, [pc, #124]	; (1205c <socket_thread_fn+0x2d8>)
			item->callback = current_cmd_handler;
   11fe0:	681a      	ldr	r2, [r3, #0]
   11fe2:	9b03      	ldr	r3, [sp, #12]
   11fe4:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   11fe8:	e722      	b.n	11e30 <socket_thread_fn+0xac>
		if (payload_len == 0) {
   11fea:	2a00      	cmp	r2, #0
   11fec:	f43f af20 	beq.w	11e30 <socket_thread_fn+0xac>
			item->callback = current_cmd_handler;
   11ff0:	4b0d      	ldr	r3, [pc, #52]	; (12028 <socket_thread_fn+0x2a4>)
   11ff2:	e7f5      	b.n	11fe0 <socket_thread_fn+0x25c>
		new_len = strlen(buf) + 1;
   11ff4:	4620      	mov	r0, r4
   11ff6:	f00b facf 	bl	1d598 <strlen>
   11ffa:	1c42      	adds	r2, r0, #1
   11ffc:	e798      	b.n	11f30 <socket_thread_fn+0x1ac>
   11ffe:	bf00      	nop
   12000:	0001f328 	.word	0x0001f328
   12004:	0001f330 	.word	0x0001f330
   12008:	00020acd 	.word	0x00020acd
   1200c:	00020c57 	.word	0x00020c57
   12010:	2002c650 	.word	0x2002c650
   12014:	20020344 	.word	0x20020344
   12018:	20020400 	.word	0x20020400
   1201c:	00020c74 	.word	0x00020c74
   12020:	00020c96 	.word	0x00020c96
   12024:	2002c6a0 	.word	0x2002c6a0
   12028:	20020404 	.word	0x20020404
   1202c:	2002c6e0 	.word	0x2002c6e0
   12030:	00020caa 	.word	0x00020caa
   12034:	00020ce1 	.word	0x00020ce1
   12038:	00020d2b 	.word	0x00020d2b
   1203c:	0002017f 	.word	0x0002017f
   12040:	00020d3d 	.word	0x00020d3d
   12044:	2002040c 	.word	0x2002040c
   12048:	00020d49 	.word	0x00020d49
   1204c:	0001ff4e 	.word	0x0001ff4e
   12050:	00020d55 	.word	0x00020d55
   12054:	00011c9d 	.word	0x00011c9d
   12058:	20024d68 	.word	0x20024d68
   1205c:	20020408 	.word	0x20020408
   12060:	20020410 	.word	0x20020410

00012064 <at_write>:
{
   12064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12068:	4680      	mov	r8, r0
   1206a:	460e      	mov	r6, r1
	LOG_DBG("Sending command %s", log_strdup(cmd));
   1206c:	f04f 0500 	mov.w	r5, #0
	int bytes_to_send = strlen(cmd);
   12070:	f00b fa92 	bl	1d598 <strlen>
	LOG_DBG("Sending command %s", log_strdup(cmd));
   12074:	2304      	movs	r3, #4
   12076:	4c2f      	ldr	r4, [pc, #188]	; (12134 <at_write+0xd0>)
   12078:	f363 0507 	bfi	r5, r3, #0, #8
   1207c:	4b2e      	ldr	r3, [pc, #184]	; (12138 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   1207e:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   12080:	4640      	mov	r0, r8
   12082:	1ae4      	subs	r4, r4, r3
   12084:	f7fc ff3e 	bl	ef04 <log_strdup>
   12088:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1208c:	f364 158f 	bfi	r5, r4, #6, #10
   12090:	462b      	mov	r3, r5
   12092:	4602      	mov	r2, r0
   12094:	4929      	ldr	r1, [pc, #164]	; (1213c <at_write+0xd8>)
   12096:	482a      	ldr	r0, [pc, #168]	; (12140 <at_write+0xdc>)
   12098:	f00a fd64 	bl	1cb64 <log_2>
	return socket_ops->send(sock, buf, len, flags);
   1209c:	4b29      	ldr	r3, [pc, #164]	; (12144 <at_write+0xe0>)
   1209e:	482a      	ldr	r0, [pc, #168]	; (12148 <at_write+0xe4>)
   120a0:	681b      	ldr	r3, [r3, #0]
   120a2:	463a      	mov	r2, r7
   120a4:	6add      	ldr	r5, [r3, #44]	; 0x2c
   120a6:	4641      	mov	r1, r8
   120a8:	2300      	movs	r3, #0
   120aa:	6800      	ldr	r0, [r0, #0]
   120ac:	47a8      	blx	r5
	if (bytes_sent == -1) {
   120ae:	1c43      	adds	r3, r0, #1
   120b0:	4605      	mov	r5, r0
   120b2:	d11d      	bne.n	120f0 <at_write+0x8c>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   120b4:	2301      	movs	r3, #1
   120b6:	f04f 0500 	mov.w	r5, #0
   120ba:	f363 0507 	bfi	r5, r3, #0, #8
   120be:	f364 158f 	bfi	r5, r4, #6, #10
   120c2:	f008 ff43 	bl	1af4c <z_impl_z_errno>
   120c6:	462a      	mov	r2, r5
   120c8:	6801      	ldr	r1, [r0, #0]
   120ca:	4820      	ldr	r0, [pc, #128]	; (1214c <at_write+0xe8>)
   120cc:	f00a fd36 	bl	1cb3c <log_1>
   120d0:	f008 ff3c 	bl	1af4c <z_impl_z_errno>
		ret.code  = -errno;
   120d4:	6803      	ldr	r3, [r0, #0]
   120d6:	425b      	negs	r3, r3
   120d8:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   120da:	2301      	movs	r3, #1
   120dc:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   120e0:	b116      	cbz	r6, 120e8 <at_write+0x84>
		*state = ret.state;
   120e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   120e6:	7033      	strb	r3, [r6, #0]
}
   120e8:	9800      	ldr	r0, [sp, #0]
   120ea:	b002      	add	sp, #8
   120ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   120f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   120f4:	4669      	mov	r1, sp
   120f6:	4816      	ldr	r0, [pc, #88]	; (12150 <at_write+0xec>)
   120f8:	f009 f9d8 	bl	1b4ac <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   120fc:	2204      	movs	r2, #4
   120fe:	f04f 0300 	mov.w	r3, #0
   12102:	f362 0307 	bfi	r3, r2, #0, #8
   12106:	f364 138f 	bfi	r3, r4, #6, #10
   1210a:	462a      	mov	r2, r5
   1210c:	490b      	ldr	r1, [pc, #44]	; (1213c <at_write+0xd8>)
   1210e:	4811      	ldr	r0, [pc, #68]	; (12154 <at_write+0xf0>)
   12110:	f00a fd28 	bl	1cb64 <log_2>
		if (bytes_sent != bytes_to_send) {
   12114:	42af      	cmp	r7, r5
   12116:	d0e3      	beq.n	120e0 <at_write+0x7c>
			LOG_ERR("Bytes sent (%d) was not the "
   12118:	2201      	movs	r2, #1
   1211a:	f04f 0300 	mov.w	r3, #0
   1211e:	f362 0307 	bfi	r3, r2, #0, #8
   12122:	f364 138f 	bfi	r3, r4, #6, #10
   12126:	463a      	mov	r2, r7
   12128:	4629      	mov	r1, r5
   1212a:	480b      	ldr	r0, [pc, #44]	; (12158 <at_write+0xf4>)
   1212c:	f00a fd1a 	bl	1cb64 <log_2>
   12130:	e7d6      	b.n	120e0 <at_write+0x7c>
   12132:	bf00      	nop
   12134:	0001f330 	.word	0x0001f330
   12138:	0001f328 	.word	0x0001f328
   1213c:	00020ade 	.word	0x00020ade
   12140:	00020bd8 	.word	0x00020bd8
   12144:	20020344 	.word	0x20020344
   12148:	20020400 	.word	0x20020400
   1214c:	00020bef 	.word	0x00020bef
   12150:	2002c6e0 	.word	0x2002c6e0
   12154:	00020c12 	.word	0x00020c12
   12158:	00020c25 	.word	0x00020c25

0001215c <at_cmd_write>:
{
   1215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12160:	4605      	mov	r5, r0
   12162:	4688      	mov	r8, r1
   12164:	4617      	mov	r7, r2
   12166:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   12168:	4c0a      	ldr	r4, [pc, #40]	; (12194 <at_cmd_write+0x38>)
   1216a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1216e:	4620      	mov	r0, r4
   12170:	f009 fdc4 	bl	1bcfc <z_impl_k_sem_take>
	response_buf     = buf;
   12174:	4b08      	ldr	r3, [pc, #32]	; (12198 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   12176:	4631      	mov	r1, r6
	response_buf     = buf;
   12178:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   1217c:	4b07      	ldr	r3, [pc, #28]	; (1219c <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   1217e:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   12180:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   12182:	f7ff ff6f 	bl	12064 <at_write>
   12186:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   12188:	4620      	mov	r0, r4
   1218a:	f009 fd8b 	bl	1bca4 <z_impl_k_sem_give>
}
   1218e:	4628      	mov	r0, r5
   12190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12194:	2002c6a0 	.word	0x2002c6a0
   12198:	2002040c 	.word	0x2002040c
   1219c:	20020410 	.word	0x20020410

000121a0 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   121a0:	2204      	movs	r2, #4
   121a2:	f04f 0300 	mov.w	r3, #0
{
   121a6:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   121a8:	f362 0307 	bfi	r3, r2, #0, #8
   121ac:	4c13      	ldr	r4, [pc, #76]	; (121fc <at_cmd_set_notification_handler+0x5c>)
   121ae:	4a14      	ldr	r2, [pc, #80]	; (12200 <at_cmd_set_notification_handler+0x60>)
	if (notification_handler != NULL && handler != notification_handler) {
   121b0:	4d14      	ldr	r5, [pc, #80]	; (12204 <at_cmd_set_notification_handler+0x64>)
	LOG_DBG("Setting notification handler to %p", handler);
   121b2:	1aa4      	subs	r4, r4, r2
   121b4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   121b8:	4602      	mov	r2, r0
   121ba:	4913      	ldr	r1, [pc, #76]	; (12208 <at_cmd_set_notification_handler+0x68>)
{
   121bc:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   121be:	f364 138f 	bfi	r3, r4, #6, #10
   121c2:	4812      	ldr	r0, [pc, #72]	; (1220c <at_cmd_set_notification_handler+0x6c>)
   121c4:	f00a fcce 	bl	1cb64 <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   121c8:	6829      	ldr	r1, [r5, #0]
   121ca:	b159      	cbz	r1, 121e4 <at_cmd_set_notification_handler+0x44>
   121cc:	428e      	cmp	r6, r1
   121ce:	d009      	beq.n	121e4 <at_cmd_set_notification_handler+0x44>
		LOG_WRN("Forgetting prior notification handler %p",
   121d0:	f04f 0200 	mov.w	r2, #0
   121d4:	2302      	movs	r3, #2
   121d6:	f363 0207 	bfi	r2, r3, #0, #8
   121da:	f364 128f 	bfi	r2, r4, #6, #10
   121de:	480c      	ldr	r0, [pc, #48]	; (12210 <at_cmd_set_notification_handler+0x70>)
   121e0:	f00a fcac 	bl	1cb3c <log_1>
	return z_impl_k_sem_take(sem, timeout);
   121e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   121e8:	480a      	ldr	r0, [pc, #40]	; (12214 <at_cmd_set_notification_handler+0x74>)
   121ea:	f009 fd87 	bl	1bcfc <z_impl_k_sem_take>
	notification_handler = handler;
   121ee:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   121f0:	4808      	ldr	r0, [pc, #32]	; (12214 <at_cmd_set_notification_handler+0x74>)
}
   121f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   121f6:	f009 bd55 	b.w	1bca4 <z_impl_k_sem_give>
   121fa:	bf00      	nop
   121fc:	0001f330 	.word	0x0001f330
   12200:	0001f328 	.word	0x0001f328
   12204:	20020408 	.word	0x20020408
   12208:	00020ae7 	.word	0x00020ae7
   1220c:	00020b88 	.word	0x00020b88
   12210:	00020baf 	.word	0x00020baf
   12214:	2002c6a0 	.word	0x2002c6a0

00012218 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12218:	4b0b      	ldr	r3, [pc, #44]	; (12248 <find_node+0x30>)
{
   1221a:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1221c:	681b      	ldr	r3, [r3, #0]
   1221e:	b153      	cbz	r3, 12236 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12220:	2500      	movs	r5, #0
   12222:	461c      	mov	r4, r3
   12224:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   12226:	6866      	ldr	r6, [r4, #4]
   12228:	428e      	cmp	r6, r1
   1222a:	d106      	bne.n	1223a <find_node+0x22>
   1222c:	68a6      	ldr	r6, [r4, #8]
   1222e:	4296      	cmp	r6, r2
   12230:	d103      	bne.n	1223a <find_node+0x22>
			*prev_out = prev;
			return curr;
   12232:	4623      	mov	r3, r4
			*prev_out = prev;
   12234:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   12236:	4618      	mov	r0, r3
   12238:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1223a:	2b00      	cmp	r3, #0
   1223c:	d0fb      	beq.n	12236 <find_node+0x1e>
   1223e:	4625      	mov	r5, r4
   12240:	461c      	mov	r4, r3
   12242:	681b      	ldr	r3, [r3, #0]
   12244:	e7ef      	b.n	12226 <find_node+0xe>
   12246:	bf00      	nop
   12248:	200204c4 	.word	0x200204c4

0001224c <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   1224c:	b510      	push	{r4, lr}
	list->head = NULL;
   1224e:	2400      	movs	r4, #0
   12250:	4b03      	ldr	r3, [pc, #12]	; (12260 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   12252:	4804      	ldr	r0, [pc, #16]	; (12264 <module_init+0x18>)
	list->tail = NULL;
   12254:	e9c3 4400 	strd	r4, r4, [r3]
   12258:	f7ff ffa2 	bl	121a0 <at_cmd_set_notification_handler>
	return 0;
}
   1225c:	4620      	mov	r0, r4
   1225e:	bd10      	pop	{r4, pc}
   12260:	200204c4 	.word	0x200204c4
   12264:	00012269 	.word	0x00012269

00012268 <notif_dispatch>:
{
   12268:	b538      	push	{r3, r4, r5, lr}
   1226a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   1226c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12270:	480a      	ldr	r0, [pc, #40]	; (1229c <notif_dispatch+0x34>)
   12272:	f009 f979 	bl	1b568 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12276:	4b0a      	ldr	r3, [pc, #40]	; (122a0 <notif_dispatch+0x38>)
   12278:	681b      	ldr	r3, [r3, #0]
   1227a:	b923      	cbnz	r3, 12286 <notif_dispatch+0x1e>
}
   1227c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   12280:	4806      	ldr	r0, [pc, #24]	; (1229c <notif_dispatch+0x34>)
   12282:	f009 b9e3 	b.w	1b64c <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12286:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   12288:	689a      	ldr	r2, [r3, #8]
   1228a:	4629      	mov	r1, r5
   1228c:	6858      	ldr	r0, [r3, #4]
   1228e:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12290:	2c00      	cmp	r4, #0
   12292:	d0f3      	beq.n	1227c <notif_dispatch+0x14>
   12294:	4623      	mov	r3, r4
   12296:	6824      	ldr	r4, [r4, #0]
   12298:	e7f6      	b.n	12288 <notif_dispatch+0x20>
   1229a:	bf00      	nop
   1229c:	2002c6cc 	.word	0x2002c6cc
   122a0:	200204c4 	.word	0x200204c4

000122a4 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   122a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   122a6:	4606      	mov	r6, r0
	if (handler == NULL) {
   122a8:	460c      	mov	r4, r1
   122aa:	b999      	cbnz	r1, 122d4 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   122ac:	2201      	movs	r2, #1
   122ae:	f04f 0300 	mov.w	r3, #0
   122b2:	491f      	ldr	r1, [pc, #124]	; (12330 <at_notif_register_handler+0x8c>)
   122b4:	f362 0307 	bfi	r3, r2, #0, #8
   122b8:	4a1e      	ldr	r2, [pc, #120]	; (12334 <at_notif_register_handler+0x90>)
   122ba:	1a52      	subs	r2, r2, r1
   122bc:	08d2      	lsrs	r2, r2, #3
   122be:	f362 138f 	bfi	r3, r2, #6, #10
   122c2:	4601      	mov	r1, r0
   122c4:	4622      	mov	r2, r4
   122c6:	481c      	ldr	r0, [pc, #112]	; (12338 <at_notif_register_handler+0x94>)
   122c8:	f00a fc4c 	bl	1cb64 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   122cc:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   122d0:	b002      	add	sp, #8
   122d2:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   122d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   122d8:	4818      	ldr	r0, [pc, #96]	; (1233c <at_notif_register_handler+0x98>)
   122da:	f009 f945 	bl	1b568 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   122de:	4622      	mov	r2, r4
   122e0:	4631      	mov	r1, r6
   122e2:	a801      	add	r0, sp, #4
   122e4:	f7ff ff98 	bl	12218 <find_node>
   122e8:	4605      	mov	r5, r0
   122ea:	b120      	cbz	r0, 122f6 <at_notif_register_handler+0x52>
	z_impl_k_mutex_unlock(mutex);
   122ec:	4813      	ldr	r0, [pc, #76]	; (1233c <at_notif_register_handler+0x98>)
   122ee:	f009 f9ad 	bl	1b64c <z_impl_k_mutex_unlock>
	return 0;
   122f2:	2000      	movs	r0, #0
	return append_notif_handler(context, handler);
   122f4:	e7ec      	b.n	122d0 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   122f6:	200c      	movs	r0, #12
   122f8:	f009 f876 	bl	1b3e8 <k_malloc>
   122fc:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   122fe:	b928      	cbnz	r0, 1230c <at_notif_register_handler+0x68>
   12300:	480e      	ldr	r0, [pc, #56]	; (1233c <at_notif_register_handler+0x98>)
   12302:	f009 f9a3 	bl	1b64c <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   12306:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1230a:	e7e1      	b.n	122d0 <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   1230c:	220c      	movs	r2, #12
   1230e:	4629      	mov	r1, r5
   12310:	f00b f9a7 	bl	1d662 <memset>
	to_ins->ctx     = ctx;
   12314:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   12316:	4a0a      	ldr	r2, [pc, #40]	; (12340 <at_notif_register_handler+0x9c>)
	parent->next = child;
   12318:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   1231a:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1231c:	e9c3 6401 	strd	r6, r4, [r3, #4]
   12320:	b911      	cbnz	r1, 12328 <at_notif_register_handler+0x84>
	list->head = node;
   12322:	e9c2 3300 	strd	r3, r3, [r2]
   12326:	e7e1      	b.n	122ec <at_notif_register_handler+0x48>
	parent->next = child;
   12328:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1232a:	6053      	str	r3, [r2, #4]
   1232c:	e7de      	b.n	122ec <at_notif_register_handler+0x48>
   1232e:	bf00      	nop
   12330:	0001f328 	.word	0x0001f328
   12334:	0001f340 	.word	0x0001f340
   12338:	00020da3 	.word	0x00020da3
   1233c:	2002c6cc 	.word	0x2002c6cc
   12340:	200204c4 	.word	0x200204c4

00012344 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   12344:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12346:	4605      	mov	r5, r0
	if (handler == NULL) {
   12348:	460c      	mov	r4, r1
   1234a:	b999      	cbnz	r1, 12374 <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   1234c:	2201      	movs	r2, #1
   1234e:	f04f 0300 	mov.w	r3, #0
   12352:	4922      	ldr	r1, [pc, #136]	; (123dc <at_notif_deregister_handler+0x98>)
   12354:	f362 0307 	bfi	r3, r2, #0, #8
   12358:	4a21      	ldr	r2, [pc, #132]	; (123e0 <at_notif_deregister_handler+0x9c>)
   1235a:	1a89      	subs	r1, r1, r2
   1235c:	08c9      	lsrs	r1, r1, #3
   1235e:	f361 138f 	bfi	r3, r1, #6, #10
   12362:	4622      	mov	r2, r4
   12364:	4601      	mov	r1, r0
   12366:	481f      	ldr	r0, [pc, #124]	; (123e4 <at_notif_deregister_handler+0xa0>)
   12368:	f00a fbfc 	bl	1cb64 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   1236c:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   12370:	b003      	add	sp, #12
   12372:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   12374:	2300      	movs	r3, #0
   12376:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   12378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1237c:	481a      	ldr	r0, [pc, #104]	; (123e8 <at_notif_deregister_handler+0xa4>)
   1237e:	f009 f8f3 	bl	1b568 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   12382:	4622      	mov	r2, r4
   12384:	4629      	mov	r1, r5
   12386:	a801      	add	r0, sp, #4
   12388:	f7ff ff46 	bl	12218 <find_node>
	if (curr == NULL) {
   1238c:	b990      	cbnz	r0, 123b4 <at_notif_deregister_handler+0x70>
		LOG_WRN("Handler not registered. Nothing to do");
   1238e:	2302      	movs	r3, #2
   12390:	f04f 0100 	mov.w	r1, #0
   12394:	4a12      	ldr	r2, [pc, #72]	; (123e0 <at_notif_deregister_handler+0x9c>)
   12396:	f363 0107 	bfi	r1, r3, #0, #8
   1239a:	4b10      	ldr	r3, [pc, #64]	; (123dc <at_notif_deregister_handler+0x98>)
   1239c:	4813      	ldr	r0, [pc, #76]	; (123ec <at_notif_deregister_handler+0xa8>)
   1239e:	1a9b      	subs	r3, r3, r2
   123a0:	08db      	lsrs	r3, r3, #3
   123a2:	f363 118f 	bfi	r1, r3, #6, #10
   123a6:	f00a fbbc 	bl	1cb22 <log_0>
	z_impl_k_mutex_unlock(mutex);
   123aa:	480f      	ldr	r0, [pc, #60]	; (123e8 <at_notif_deregister_handler+0xa4>)
   123ac:	f009 f94e 	bl	1b64c <z_impl_k_mutex_unlock>
	return remove_notif_handler(context, handler);
   123b0:	2000      	movs	r0, #0
   123b2:	e7dd      	b.n	12370 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   123b4:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   123b6:	6801      	ldr	r1, [r0, #0]
   123b8:	4b0d      	ldr	r3, [pc, #52]	; (123f0 <at_notif_deregister_handler+0xac>)
   123ba:	b94a      	cbnz	r2, 123d0 <at_notif_deregister_handler+0x8c>
   123bc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   123be:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   123c0:	4290      	cmp	r0, r2
   123c2:	d100      	bne.n	123c6 <at_notif_deregister_handler+0x82>
	list->tail = node;
   123c4:	6059      	str	r1, [r3, #4]
	parent->next = child;
   123c6:	2300      	movs	r3, #0
   123c8:	6003      	str	r3, [r0, #0]
	k_free(curr);
   123ca:	f00c fa72 	bl	1e8b2 <k_free>
   123ce:	e7ec      	b.n	123aa <at_notif_deregister_handler+0x66>
   123d0:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   123d2:	6859      	ldr	r1, [r3, #4]
   123d4:	4288      	cmp	r0, r1
	list->tail = node;
   123d6:	bf08      	it	eq
   123d8:	605a      	streq	r2, [r3, #4]
   123da:	e7f4      	b.n	123c6 <at_notif_deregister_handler+0x82>
   123dc:	0001f340 	.word	0x0001f340
   123e0:	0001f328 	.word	0x0001f328
   123e4:	00020da3 	.word	0x00020da3
   123e8:	2002c6cc 	.word	0x2002c6cc
   123ec:	00020d7d 	.word	0x00020d7d
   123f0:	200204c4 	.word	0x200204c4

000123f4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   123f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   123f8:	6805      	ldr	r5, [r0, #0]
{
   123fa:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   123fc:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   123fe:	782b      	ldrb	r3, [r5, #0]
{
   12400:	4680      	mov	r8, r0
   12402:	460f      	mov	r7, r1
   12404:	4616      	mov	r6, r2
   12406:	2b00      	cmp	r3, #0
   12408:	f000 80c1 	beq.w	1258e <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1240c:	4b61      	ldr	r3, [pc, #388]	; (12594 <at_parse_process_element+0x1a0>)
   1240e:	781c      	ldrb	r4, [r3, #0]
   12410:	2c05      	cmp	r4, #5
   12412:	d110      	bne.n	12436 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   12414:	1c6b      	adds	r3, r5, #1
   12416:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   12418:	9a00      	ldr	r2, [sp, #0]
   1241a:	7810      	ldrb	r0, [r2, #0]
   1241c:	f00c f8a7 	bl	1e56e <is_valid_notification_char>
   12420:	b930      	cbnz	r0, 12430 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   12422:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   12424:	462a      	mov	r2, r5
   12426:	4639      	mov	r1, r7
   12428:	4630      	mov	r0, r6
   1242a:	f00c f989 	bl	1e740 <at_params_string_put>
   1242e:	e01b      	b.n	12468 <at_parse_process_element+0x74>
			tmpstr++;
   12430:	3201      	adds	r2, #1
   12432:	9200      	str	r2, [sp, #0]
   12434:	e7f0      	b.n	12418 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   12436:	2c06      	cmp	r4, #6
   12438:	d124      	bne.n	12484 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   1243a:	4668      	mov	r0, sp
   1243c:	f00c f889 	bl	1e552 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   12440:	9a00      	ldr	r2, [sp, #0]
   12442:	7810      	ldrb	r0, [r2, #0]
   12444:	f00c f893 	bl	1e56e <is_valid_notification_char>
   12448:	b9a8      	cbnz	r0, 12476 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   1244a:	1b53      	subs	r3, r2, r5
   1244c:	4639      	mov	r1, r7
   1244e:	462a      	mov	r2, r5
   12450:	4630      	mov	r0, r6
   12452:	f00c f975 	bl	1e740 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   12456:	9b00      	ldr	r3, [sp, #0]
   12458:	781a      	ldrb	r2, [r3, #0]
   1245a:	2a3d      	cmp	r2, #61	; 0x3d
   1245c:	d10e      	bne.n	1247c <at_parse_process_element+0x88>
   1245e:	785a      	ldrb	r2, [r3, #1]
   12460:	2a3f      	cmp	r2, #63	; 0x3f
   12462:	d101      	bne.n	12468 <at_parse_process_element+0x74>
			tmpstr += 2;
   12464:	3302      	adds	r3, #2
			tmpstr++;
   12466:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   12468:	2000      	movs	r0, #0
	*str = tmpstr;
   1246a:	9b00      	ldr	r3, [sp, #0]
   1246c:	f8c8 3000 	str.w	r3, [r8]
}
   12470:	b023      	add	sp, #140	; 0x8c
   12472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   12476:	3201      	adds	r2, #1
   12478:	9200      	str	r2, [sp, #0]
   1247a:	e7e1      	b.n	12440 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1247c:	2a3f      	cmp	r2, #63	; 0x3f
   1247e:	d1f3      	bne.n	12468 <at_parse_process_element+0x74>
			tmpstr++;
   12480:	3301      	adds	r3, #1
   12482:	e7f0      	b.n	12466 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   12484:	2c07      	cmp	r4, #7
   12486:	d103      	bne.n	12490 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   12488:	4610      	mov	r0, r2
   1248a:	f00c f934 	bl	1e6f6 <at_params_empty_put>
   1248e:	e7eb      	b.n	12468 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   12490:	2c02      	cmp	r4, #2
   12492:	d112      	bne.n	124ba <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   12494:	9a00      	ldr	r2, [sp, #0]
   12496:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   12498:	2822      	cmp	r0, #34	; 0x22
   1249a:	d003      	beq.n	124a4 <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1249c:	b110      	cbz	r0, 124a4 <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   1249e:	f00c f84f 	bl	1e540 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   124a2:	b138      	cbz	r0, 124b4 <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   124a4:	1b53      	subs	r3, r2, r5
   124a6:	4639      	mov	r1, r7
   124a8:	462a      	mov	r2, r5
   124aa:	4630      	mov	r0, r6
   124ac:	f00c f948 	bl	1e740 <at_params_string_put>
		tmpstr++;
   124b0:	9b00      	ldr	r3, [sp, #0]
   124b2:	e7e5      	b.n	12480 <at_parse_process_element+0x8c>
			tmpstr++;
   124b4:	3201      	adds	r2, #1
   124b6:	9200      	str	r2, [sp, #0]
   124b8:	e7ec      	b.n	12494 <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   124ba:	2c01      	cmp	r4, #1
   124bc:	d13c      	bne.n	12538 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   124be:	4628      	mov	r0, r5
   124c0:	220a      	movs	r2, #10
   124c2:	a901      	add	r1, sp, #4
   124c4:	f00a ff9a 	bl	1d3fc <strtoul>
		tmpstr = next;
   124c8:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   124ca:	4d33      	ldr	r5, [pc, #204]	; (12598 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   124cc:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   124ce:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   124d0:	9800      	ldr	r0, [sp, #0]
   124d2:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   124d4:	2b29      	cmp	r3, #41	; 0x29
   124d6:	d028      	beq.n	1252a <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   124d8:	b33b      	cbz	r3, 1252a <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   124da:	3b2c      	subs	r3, #44	; 0x2c
   124dc:	b2db      	uxtb	r3, r3
   124de:	3001      	adds	r0, #1
   124e0:	2b11      	cmp	r3, #17
				tmparray[i++] =
   124e2:	9000      	str	r0, [sp, #0]
   124e4:	d803      	bhi.n	124ee <at_parse_process_element+0xfa>
   124e6:	fa25 f303 	lsr.w	r3, r5, r3
   124ea:	07db      	lsls	r3, r3, #31
   124ec:	d408      	bmi.n	12500 <at_parse_process_element+0x10c>
				tmpstr++;
   124ee:	46a1      	mov	r9, r4
   124f0:	e004      	b.n	124fc <at_parse_process_element+0x108>
					tmpstr = next;
   124f2:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   124f4:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   124f8:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   124fa:	d015      	beq.n	12528 <at_parse_process_element+0x134>
				tmpstr++;
   124fc:	464c      	mov	r4, r9
   124fe:	e7e7      	b.n	124d0 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   12500:	220a      	movs	r2, #10
   12502:	a901      	add	r1, sp, #4
   12504:	f00a ff7a 	bl	1d3fc <strtoul>
				tmparray[i++] =
   12508:	ab22      	add	r3, sp, #136	; 0x88
   1250a:	f104 0901 	add.w	r9, r4, #1
   1250e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   12512:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   12516:	9800      	ldr	r0, [sp, #0]
   12518:	f00b f83e 	bl	1d598 <strlen>
   1251c:	4604      	mov	r4, r0
   1251e:	9801      	ldr	r0, [sp, #4]
   12520:	f00b f83a 	bl	1d598 <strlen>
   12524:	4284      	cmp	r4, r0
   12526:	d1e4      	bne.n	124f2 <at_parse_process_element+0xfe>
   12528:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   1252a:	00a3      	lsls	r3, r4, #2
   1252c:	aa02      	add	r2, sp, #8
   1252e:	4639      	mov	r1, r7
   12530:	4630      	mov	r0, r6
   12532:	f00c f928 	bl	1e786 <at_params_array_put>
   12536:	e7bb      	b.n	124b0 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   12538:	2c03      	cmp	r4, #3
   1253a:	d115      	bne.n	12568 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1253c:	220a      	movs	r2, #10
   1253e:	a902      	add	r1, sp, #8
   12540:	4628      	mov	r0, r5
   12542:	f00a ff5b 	bl	1d3fc <strtoul>
		tmpstr = next;
   12546:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   12548:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   1254c:	4602      	mov	r2, r0
		tmpstr = next;
   1254e:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   12550:	d205      	bcs.n	1255e <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   12552:	b282      	uxth	r2, r0
   12554:	4639      	mov	r1, r7
   12556:	4630      	mov	r0, r6
   12558:	f00c f8ba 	bl	1e6d0 <at_params_short_put>
   1255c:	e784      	b.n	12468 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   1255e:	4639      	mov	r1, r7
   12560:	4630      	mov	r0, r6
   12562:	f00c f8da 	bl	1e71a <at_params_int_put>
   12566:	e77f      	b.n	12468 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   12568:	2c04      	cmp	r4, #4
   1256a:	f47f af7d 	bne.w	12468 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   1256e:	9b00      	ldr	r3, [sp, #0]
   12570:	781a      	ldrb	r2, [r3, #0]
	return (int)(((ua - (unsigned)'0') < 10U) ||
   12572:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   12576:	2909      	cmp	r1, #9
   12578:	d906      	bls.n	12588 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   1257a:	f042 0220 	orr.w	r2, r2, #32
   1257e:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   12580:	2a05      	cmp	r2, #5
   12582:	d901      	bls.n	12588 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   12584:	1b5b      	subs	r3, r3, r5
   12586:	e74d      	b.n	12424 <at_parse_process_element+0x30>
			tmpstr++;
   12588:	3301      	adds	r3, #1
   1258a:	9300      	str	r3, [sp, #0]
   1258c:	e7ef      	b.n	1256e <at_parse_process_element+0x17a>
		return -1;
   1258e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12592:	e76d      	b.n	12470 <at_parse_process_element+0x7c>
   12594:	2002658a 	.word	0x2002658a
   12598:	00024001 	.word	0x00024001

0001259c <at_parse_detect_type>:
{
   1259c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1259e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   125a0:	2900      	cmp	r1, #0
{
   125a2:	4605      	mov	r5, r0
   125a4:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   125a6:	d144      	bne.n	12632 <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   125a8:	2a2b      	cmp	r2, #43	; 0x2b
   125aa:	4e2a      	ldr	r6, [pc, #168]	; (12654 <at_parse_detect_type+0xb8>)
   125ac:	d001      	beq.n	125b2 <at_parse_detect_type+0x16>
   125ae:	2a25      	cmp	r2, #37	; 0x25
   125b0:	d104      	bne.n	125bc <at_parse_detect_type+0x20>
	state = new_state;
   125b2:	2305      	movs	r3, #5
   125b4:	7033      	strb	r3, [r6, #0]
	return 0;
   125b6:	2000      	movs	r0, #0
	*str = tmpstr;
   125b8:	602c      	str	r4, [r5, #0]
}
   125ba:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   125bc:	4620      	mov	r0, r4
   125be:	f00b ffe2 	bl	1e586 <is_command>
   125c2:	b3a0      	cbz	r0, 1262e <at_parse_detect_type+0x92>
	state = new_state;
   125c4:	2306      	movs	r3, #6
   125c6:	e7f5      	b.n	125b4 <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   125c8:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   125cc:	fa21 f303 	lsr.w	r3, r1, r3
   125d0:	07d9      	lsls	r1, r3, #31
   125d2:	d50a      	bpl.n	125ea <at_parse_detect_type+0x4e>
   125d4:	2203      	movs	r2, #3
   125d6:	4b1f      	ldr	r3, [pc, #124]	; (12654 <at_parse_detect_type+0xb8>)
   125d8:	701a      	strb	r2, [r3, #0]
   125da:	e7ec      	b.n	125b6 <at_parse_detect_type+0x1a>
	if (chr == '(') {
   125dc:	2a28      	cmp	r2, #40	; 0x28
   125de:	d104      	bne.n	125ea <at_parse_detect_type+0x4e>
   125e0:	2201      	movs	r2, #1
   125e2:	4b1c      	ldr	r3, [pc, #112]	; (12654 <at_parse_detect_type+0xb8>)
		tmpstr++;
   125e4:	4414      	add	r4, r2
	state = new_state;
   125e6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   125e8:	e7e5      	b.n	125b6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   125ea:	4610      	mov	r0, r2
   125ec:	f00b ffa8 	bl	1e540 <is_lfcr>
   125f0:	b170      	cbz	r0, 12610 <at_parse_detect_type+0x74>
   125f2:	4918      	ldr	r1, [pc, #96]	; (12654 <at_parse_detect_type+0xb8>)
   125f4:	7808      	ldrb	r0, [r1, #0]
   125f6:	2803      	cmp	r0, #3
   125f8:	d108      	bne.n	1260c <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   125fa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   125fe:	f00b ff9f 	bl	1e540 <is_lfcr>
   12602:	2800      	cmp	r0, #0
   12604:	d1f9      	bne.n	125fa <at_parse_detect_type+0x5e>
	state = new_state;
   12606:	2304      	movs	r3, #4
   12608:	700b      	strb	r3, [r1, #0]
   1260a:	e7d4      	b.n	125b6 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1260c:	2807      	cmp	r0, #7
   1260e:	d0d2      	beq.n	125b6 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12610:	3a2c      	subs	r2, #44	; 0x2c
   12612:	b2d2      	uxtb	r2, r2
   12614:	2a11      	cmp	r2, #17
   12616:	d807      	bhi.n	12628 <at_parse_detect_type+0x8c>
   12618:	4b0f      	ldr	r3, [pc, #60]	; (12658 <at_parse_detect_type+0xbc>)
   1261a:	fa23 f202 	lsr.w	r2, r3, r2
   1261e:	07d3      	lsls	r3, r2, #31
   12620:	d502      	bpl.n	12628 <at_parse_detect_type+0x8c>
	state = new_state;
   12622:	4b0c      	ldr	r3, [pc, #48]	; (12654 <at_parse_detect_type+0xb8>)
   12624:	2207      	movs	r2, #7
   12626:	e7d7      	b.n	125d8 <at_parse_detect_type+0x3c>
		return -1;
   12628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1262c:	e7c5      	b.n	125ba <at_parse_detect_type+0x1e>
	state = new_state;
   1262e:	2302      	movs	r3, #2
   12630:	e7c0      	b.n	125b4 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   12632:	dd03      	ble.n	1263c <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12634:	2a2b      	cmp	r2, #43	; 0x2b
   12636:	d0f7      	beq.n	12628 <at_parse_detect_type+0x8c>
   12638:	2a25      	cmp	r2, #37	; 0x25
   1263a:	d0f5      	beq.n	12628 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   1263c:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   12640:	b2db      	uxtb	r3, r3
   12642:	2b0e      	cmp	r3, #14
   12644:	d9c0      	bls.n	125c8 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   12646:	2a22      	cmp	r2, #34	; 0x22
   12648:	d1c8      	bne.n	125dc <at_parse_detect_type+0x40>
	state = new_state;
   1264a:	2202      	movs	r2, #2
   1264c:	4b01      	ldr	r3, [pc, #4]	; (12654 <at_parse_detect_type+0xb8>)
		tmpstr++;
   1264e:	3401      	adds	r4, #1
	state = new_state;
   12650:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12652:	e7b0      	b.n	125b6 <at_parse_detect_type+0x1a>
   12654:	2002658a 	.word	0x2002658a
   12658:	00024001 	.word	0x00024001

0001265c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1265c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12660:	4688      	mov	r8, r1
   12662:	4616      	mov	r6, r2
   12664:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   12666:	4604      	mov	r4, r0
   12668:	2800      	cmp	r0, #0
   1266a:	d07c      	beq.n	12766 <at_parser_max_params_from_str+0x10a>
   1266c:	2a00      	cmp	r2, #0
   1266e:	d07a      	beq.n	12766 <at_parser_max_params_from_str+0x10a>
   12670:	6853      	ldr	r3, [r2, #4]
   12672:	2b00      	cmp	r3, #0
   12674:	d077      	beq.n	12766 <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   12676:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   12678:	4610      	mov	r0, r2
   1267a:	f00c f811 	bl	1e6a0 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1267e:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   12680:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   12682:	4297      	cmp	r7, r2
   12684:	bf28      	it	cs
   12686:	4617      	movcs	r7, r2
	int index = 0;
   12688:	462c      	mov	r4, r5
	state = IDLE;
   1268a:	4b38      	ldr	r3, [pc, #224]	; (1276c <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1268c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12770 <at_parser_max_params_from_str+0x114>
   12690:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   12692:	9a01      	ldr	r2, [sp, #4]
   12694:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12696:	2b00      	cmp	r3, #0
   12698:	d04b      	beq.n	12732 <at_parser_max_params_from_str+0xd6>
   1269a:	42a7      	cmp	r7, r4
   1269c:	d949      	bls.n	12732 <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1269e:	2b20      	cmp	r3, #32
   126a0:	d002      	beq.n	126a8 <at_parser_max_params_from_str+0x4c>
   126a2:	3b09      	subs	r3, #9
   126a4:	2b04      	cmp	r3, #4
   126a6:	d801      	bhi.n	126ac <at_parser_max_params_from_str+0x50>
			str++;
   126a8:	3201      	adds	r2, #1
   126aa:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   126ac:	4621      	mov	r1, r4
   126ae:	a801      	add	r0, sp, #4
   126b0:	f7ff ff74 	bl	1259c <at_parse_detect_type>
   126b4:	1c42      	adds	r2, r0, #1
   126b6:	d03c      	beq.n	12732 <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   126b8:	4632      	mov	r2, r6
   126ba:	4621      	mov	r1, r4
   126bc:	a801      	add	r0, sp, #4
   126be:	f7ff fe99 	bl	123f4 <at_parse_process_element>
   126c2:	1c43      	adds	r3, r0, #1
   126c4:	d035      	beq.n	12732 <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   126c6:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   126c8:	781a      	ldrb	r2, [r3, #0]
   126ca:	3a2c      	subs	r2, #44	; 0x2c
   126cc:	b2d2      	uxtb	r2, r2
   126ce:	2a11      	cmp	r2, #17
   126d0:	d81a      	bhi.n	12708 <at_parser_max_params_from_str+0xac>
   126d2:	fa29 f202 	lsr.w	r2, r9, r2
   126d6:	07d1      	lsls	r1, r2, #31
   126d8:	d516      	bpl.n	12708 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   126da:	7858      	ldrb	r0, [r3, #1]
   126dc:	f00b ff30 	bl	1e540 <is_lfcr>
   126e0:	b178      	cbz	r0, 12702 <at_parser_max_params_from_str+0xa6>
				index++;
   126e2:	3401      	adds	r4, #1
				if (index == max_params) {
   126e4:	42bc      	cmp	r4, r7
   126e6:	d039      	beq.n	1275c <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   126e8:	4621      	mov	r1, r4
   126ea:	a801      	add	r0, sp, #4
   126ec:	f7ff ff56 	bl	1259c <at_parse_detect_type>
   126f0:	1c42      	adds	r2, r0, #1
   126f2:	d01e      	beq.n	12732 <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   126f4:	4632      	mov	r2, r6
   126f6:	4621      	mov	r1, r4
   126f8:	a801      	add	r0, sp, #4
   126fa:	f7ff fe7b 	bl	123f4 <at_parse_process_element>
   126fe:	1c43      	adds	r3, r0, #1
   12700:	d017      	beq.n	12732 <at_parser_max_params_from_str+0xd6>
			str++;
   12702:	9b01      	ldr	r3, [sp, #4]
   12704:	3301      	adds	r3, #1
   12706:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   12708:	9a01      	ldr	r2, [sp, #4]
   1270a:	7810      	ldrb	r0, [r2, #0]
   1270c:	f00b ff18 	bl	1e540 <is_lfcr>
   12710:	b1f8      	cbz	r0, 12752 <at_parser_max_params_from_str+0xf6>
   12712:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   12714:	7811      	ldrb	r1, [r2, #0]
   12716:	4692      	mov	sl, r2
   12718:	4608      	mov	r0, r1
   1271a:	3201      	adds	r2, #1
   1271c:	f00b ff10 	bl	1e540 <is_lfcr>
   12720:	2800      	cmp	r0, #0
   12722:	d1f7      	bne.n	12714 <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12724:	b119      	cbz	r1, 1272e <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12726:	292b      	cmp	r1, #43	; 0x2b
   12728:	d001      	beq.n	1272e <at_parser_max_params_from_str+0xd2>
   1272a:	2925      	cmp	r1, #37	; 0x25
   1272c:	d111      	bne.n	12752 <at_parser_max_params_from_str+0xf6>
				str += i;
   1272e:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   12732:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   12734:	b9a5      	cbnz	r5, 12760 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12736:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   12738:	2a00      	cmp	r2, #0
   1273a:	bf0c      	ite	eq
   1273c:	2000      	moveq	r0, #0
   1273e:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   12742:	f1b8 0f00 	cmp.w	r8, #0
   12746:	d001      	beq.n	1274c <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   12748:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   1274c:	b002      	add	sp, #8
   1274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   12752:	3401      	adds	r4, #1
			oversized = true;
   12754:	42bc      	cmp	r4, r7
   12756:	bf08      	it	eq
   12758:	2501      	moveq	r5, #1
   1275a:	e79a      	b.n	12692 <at_parser_max_params_from_str+0x36>
					oversized = true;
   1275c:	4605      	mov	r5, r0
   1275e:	e7e8      	b.n	12732 <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   12760:	f06f 0006 	mvn.w	r0, #6
   12764:	e7ed      	b.n	12742 <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   12766:	f06f 0015 	mvn.w	r0, #21
   1276a:	e7ef      	b.n	1274c <at_parser_max_params_from_str+0xf0>
   1276c:	2002658a 	.word	0x2002658a
   12770:	00024001 	.word	0x00024001

00012774 <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   12774:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   12776:	2300      	movs	r3, #0
   12778:	4804      	ldr	r0, [pc, #16]	; (1278c <lte_lc_power_off+0x18>)
   1277a:	461a      	mov	r2, r3
   1277c:	4619      	mov	r1, r3
   1277e:	f7ff fced 	bl	1215c <at_cmd_write>
   12782:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   12784:	bf18      	it	ne
   12786:	f06f 0004 	mvnne.w	r0, #4
   1278a:	bd08      	pop	{r3, pc}
   1278c:	00020ddd 	.word	0x00020ddd

00012790 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   12790:	b508      	push	{r3, lr}
	z_impl_log_panic();
   12792:	f7fc fb71 	bl	ee78 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   12796:	2301      	movs	r3, #1
   12798:	f04f 0100 	mov.w	r1, #0
   1279c:	4a06      	ldr	r2, [pc, #24]	; (127b8 <k_sys_fatal_error_handler+0x28>)
   1279e:	f363 0107 	bfi	r1, r3, #0, #8
   127a2:	4b06      	ldr	r3, [pc, #24]	; (127bc <k_sys_fatal_error_handler+0x2c>)
   127a4:	4806      	ldr	r0, [pc, #24]	; (127c0 <k_sys_fatal_error_handler+0x30>)
   127a6:	1a9b      	subs	r3, r3, r2
   127a8:	08db      	lsrs	r3, r3, #3
   127aa:	f363 118f 	bfi	r1, r3, #6, #10
   127ae:	f00a f9b8 	bl	1cb22 <log_0>
	sys_arch_reboot(0);
   127b2:	2000      	movs	r0, #0
   127b4:	f7fd fca4 	bl	10100 <sys_arch_reboot>

	CODE_UNREACHABLE;
   127b8:	0001f328 	.word	0x0001f328
   127bc:	0001f358 	.word	0x0001f358
   127c0:	00020dee 	.word	0x00020dee

000127c4 <ext_api_getter>:
extern const struct fw_info_ext_api * const _ext_apis_start[];
extern const u32_t _ext_apis_size;
__noinit fw_info_ext_api_getter ext_api_getter_in;

int ext_api_getter(u32_t id, u32_t index, const struct fw_info_ext_api **out)
{
   127c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!out) {
   127c6:	b1da      	cbz	r2, 12800 <ext_api_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   127c8:	2300      	movs	r3, #0
	bool id_found = false;
   127ca:	461c      	mov	r4, r3
   127cc:	4d0e      	ldr	r5, [pc, #56]	; (12808 <ext_api_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   127ce:	4f0f      	ldr	r7, [pc, #60]	; (1280c <ext_api_getter+0x48>)
   127d0:	42bb      	cmp	r3, r7
   127d2:	d306      	bcc.n	127e2 <ext_api_getter+0x1e>
				*out = ext_api;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   127d4:	2c00      	cmp	r4, #0
   127d6:	bf14      	ite	ne
   127d8:	f06f 0008 	mvnne.w	r0, #8
   127dc:	f06f 0001 	mvneq.w	r0, #1
   127e0:	e009      	b.n	127f6 <ext_api_getter+0x32>
		const struct fw_info_ext_api *ext_api = _ext_apis_start[i];
   127e2:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_api->ext_api_id == id) {
   127e6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   127ea:	4560      	cmp	r0, ip
   127ec:	d106      	bne.n	127fc <ext_api_getter+0x38>
			if (index-- == 0) {
   127ee:	1e4c      	subs	r4, r1, #1
   127f0:	b911      	cbnz	r1, 127f8 <ext_api_getter+0x34>
				return 0;
   127f2:	4608      	mov	r0, r1
				*out = ext_api;
   127f4:	6016      	str	r6, [r2, #0]
}
   127f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   127f8:	4621      	mov	r1, r4
			id_found = true;
   127fa:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   127fc:	3301      	adds	r3, #1
   127fe:	e7e7      	b.n	127d0 <ext_api_getter+0xc>
		return -EFAULT;
   12800:	f06f 000d 	mvn.w	r0, #13
   12804:	e7f7      	b.n	127f6 <ext_api_getter+0x32>
   12806:	bf00      	nop
   12808:	00020f1c 	.word	0x00020f1c
   1280c:	00000000 	.word	0x00000000

00012810 <rpc_logobj_client_evt_handler>:
   12810:	b120      	cbz	r0, 1281c <rpc_logobj_client_evt_handler+0xc>
   12812:	f850 1b08 	ldr.w	r1, [r0], #8
   12816:	0c09      	lsrs	r1, r1, #16
   12818:	f000 b852 	b.w	128c0 <logobj_event_handler>
   1281c:	4770      	bx	lr
   1281e:	bf00      	nop

00012820 <rpc_logobj_client_init>:
   12820:	4801      	ldr	r0, [pc, #4]	; (12828 <rpc_logobj_client_init+0x8>)
   12822:	f006 bb87 	b.w	18f34 <rpc_client_register>
   12826:	bf00      	nop
   12828:	0001f5a8 	.word	0x0001f5a8

0001282c <rpc_logobj_client_request_alloc>:
   1282c:	2300      	movs	r3, #0
   1282e:	b510      	push	{r4, lr}
   12830:	b082      	sub	sp, #8
   12832:	9301      	str	r3, [sp, #4]
   12834:	b961      	cbnz	r1, 12850 <rpc_logobj_client_request_alloc+0x24>
   12836:	b170      	cbz	r0, 12856 <rpc_logobj_client_request_alloc+0x2a>
   12838:	4604      	mov	r4, r0
   1283a:	aa01      	add	r2, sp, #4
   1283c:	2009      	movs	r0, #9
   1283e:	f006 fdb1 	bl	193a4 <rpc_message_alloc>
   12842:	b918      	cbnz	r0, 1284c <rpc_logobj_client_request_alloc+0x20>
   12844:	9b01      	ldr	r3, [sp, #4]
   12846:	b10b      	cbz	r3, 1284c <rpc_logobj_client_request_alloc+0x20>
   12848:	3308      	adds	r3, #8
   1284a:	6023      	str	r3, [r4, #0]
   1284c:	b002      	add	sp, #8
   1284e:	bd10      	pop	{r4, pc}
   12850:	200f      	movs	r0, #15
   12852:	b002      	add	sp, #8
   12854:	bd10      	pop	{r4, pc}
   12856:	200e      	movs	r0, #14
   12858:	b002      	add	sp, #8
   1285a:	bd10      	pop	{r4, pc}

0001285c <rpc_logobj_client_request_send>:
   1285c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   12860:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   12864:	d10b      	bne.n	1287e <rpc_logobj_client_request_send+0x22>
   12866:	b160      	cbz	r0, 12882 <rpc_logobj_client_request_send+0x26>
   12868:	4603      	mov	r3, r0
   1286a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1286e:	2009      	movs	r0, #9
   12870:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   12874:	f843 1d08 	str.w	r1, [r3, #-8]!
   12878:	4619      	mov	r1, r3
   1287a:	f006 bd7b 	b.w	19374 <rpc_message_send>
   1287e:	200f      	movs	r0, #15
   12880:	4770      	bx	lr
   12882:	200e      	movs	r0, #14
   12884:	4770      	bx	lr
   12886:	bf00      	nop

00012888 <rpc_logobj_client_message_free>:
   12888:	b120      	cbz	r0, 12894 <rpc_logobj_client_message_free+0xc>
   1288a:	f1a0 0108 	sub.w	r1, r0, #8
   1288e:	2009      	movs	r0, #9
   12890:	f006 bdba 	b.w	19408 <rpc_message_free>
   12894:	200e      	movs	r0, #14
   12896:	4770      	bx	lr

00012898 <rpc_logobj_client_data_free>:
   12898:	b118      	cbz	r0, 128a2 <rpc_logobj_client_data_free+0xa>
   1289a:	4601      	mov	r1, r0
   1289c:	2009      	movs	r0, #9
   1289e:	f006 bec5 	b.w	1962c <rpc_message_data_free>
   128a2:	200e      	movs	r0, #14
   128a4:	4770      	bx	lr
   128a6:	bf00      	nop

000128a8 <packet_free_cb>:
   128a8:	b510      	push	{r4, lr}
   128aa:	4604      	mov	r4, r0
   128ac:	6800      	ldr	r0, [r0, #0]
   128ae:	f7ff fff3 	bl	12898 <rpc_logobj_client_data_free>
   128b2:	68a0      	ldr	r0, [r4, #8]
   128b4:	b118      	cbz	r0, 128be <packet_free_cb+0x16>
   128b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   128ba:	f001 b90f 	b.w	13adc <nrf_free>
   128be:	bd10      	pop	{r4, pc}

000128c0 <logobj_event_handler>:
   128c0:	b530      	push	{r4, r5, lr}
   128c2:	4b3b      	ldr	r3, [pc, #236]	; (129b0 <logobj_event_handler+0xf0>)
   128c4:	b085      	sub	sp, #20
   128c6:	681d      	ldr	r5, [r3, #0]
   128c8:	2d00      	cmp	r5, #0
   128ca:	d04c      	beq.n	12966 <logobj_event_handler+0xa6>
   128cc:	f248 0302 	movw	r3, #32770	; 0x8002
   128d0:	4299      	cmp	r1, r3
   128d2:	d053      	beq.n	1297c <logobj_event_handler+0xbc>
   128d4:	d91c      	bls.n	12910 <logobj_event_handler+0x50>
   128d6:	f248 0303 	movw	r3, #32771	; 0x8003
   128da:	4299      	cmp	r1, r3
   128dc:	d05a      	beq.n	12994 <logobj_event_handler+0xd4>
   128de:	f249 0301 	movw	r3, #36865	; 0x9001
   128e2:	4299      	cmp	r1, r3
   128e4:	d147      	bne.n	12976 <logobj_event_handler+0xb6>
   128e6:	2400      	movs	r4, #0
   128e8:	6843      	ldr	r3, [r0, #4]
   128ea:	6802      	ldr	r2, [r0, #0]
   128ec:	e9cd 4402 	strd	r4, r4, [sp, #8]
   128f0:	e9cd 2300 	strd	r2, r3, [sp]
   128f4:	69e8      	ldr	r0, [r5, #28]
   128f6:	4669      	mov	r1, sp
   128f8:	6803      	ldr	r3, [r0, #0]
   128fa:	685b      	ldr	r3, [r3, #4]
   128fc:	4798      	blx	r3
   128fe:	3001      	adds	r0, #1
   12900:	d04e      	beq.n	129a0 <logobj_event_handler+0xe0>
   12902:	4620      	mov	r0, r4
   12904:	682b      	ldr	r3, [r5, #0]
   12906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1290a:	602b      	str	r3, [r5, #0]
   1290c:	b005      	add	sp, #20
   1290e:	bd30      	pop	{r4, r5, pc}
   12910:	f248 0301 	movw	r3, #32769	; 0x8001
   12914:	4299      	cmp	r1, r3
   12916:	d12e      	bne.n	12976 <logobj_event_handler+0xb6>
   12918:	68c3      	ldr	r3, [r0, #12]
   1291a:	2b00      	cmp	r3, #0
   1291c:	d135      	bne.n	1298a <logobj_event_handler+0xca>
   1291e:	6828      	ldr	r0, [r5, #0]
   12920:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   12924:	d03e      	beq.n	129a4 <logobj_event_handler+0xe4>
   12926:	682b      	ldr	r3, [r5, #0]
   12928:	b29b      	uxth	r3, r3
   1292a:	2b01      	cmp	r3, #1
   1292c:	d105      	bne.n	1293a <logobj_event_handler+0x7a>
   1292e:	682b      	ldr	r3, [r5, #0]
   12930:	0c1b      	lsrs	r3, r3, #16
   12932:	041b      	lsls	r3, r3, #16
   12934:	f043 0302 	orr.w	r3, r3, #2
   12938:	602b      	str	r3, [r5, #0]
   1293a:	4b1e      	ldr	r3, [pc, #120]	; (129b4 <logobj_event_handler+0xf4>)
   1293c:	781a      	ldrb	r2, [r3, #0]
   1293e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   12942:	2a00      	cmp	r2, #0
   12944:	d031      	beq.n	129aa <logobj_event_handler+0xea>
   12946:	4a1c      	ldr	r2, [pc, #112]	; (129b8 <logobj_event_handler+0xf8>)
   12948:	7811      	ldrb	r1, [r2, #0]
   1294a:	b909      	cbnz	r1, 12950 <logobj_event_handler+0x90>
   1294c:	2101      	movs	r1, #1
   1294e:	7011      	strb	r1, [r2, #0]
   12950:	2000      	movs	r0, #0
   12952:	7018      	strb	r0, [r3, #0]
   12954:	682b      	ldr	r3, [r5, #0]
   12956:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1295a:	602b      	str	r3, [r5, #0]
   1295c:	682b      	ldr	r3, [r5, #0]
   1295e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   12962:	602b      	str	r3, [r5, #0]
   12964:	e7d2      	b.n	1290c <logobj_event_handler+0x4c>
   12966:	6800      	ldr	r0, [r0, #0]
   12968:	2800      	cmp	r0, #0
   1296a:	d0cf      	beq.n	1290c <logobj_event_handler+0x4c>
   1296c:	f7ff ff94 	bl	12898 <rpc_logobj_client_data_free>
   12970:	4628      	mov	r0, r5
   12972:	b005      	add	sp, #20
   12974:	bd30      	pop	{r4, r5, pc}
   12976:	2000      	movs	r0, #0
   12978:	b005      	add	sp, #20
   1297a:	bd30      	pop	{r4, r5, pc}
   1297c:	682b      	ldr	r3, [r5, #0]
   1297e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   12982:	d00b      	beq.n	1299c <logobj_event_handler+0xdc>
   12984:	68c0      	ldr	r0, [r0, #12]
   12986:	2800      	cmp	r0, #0
   12988:	d0e4      	beq.n	12954 <logobj_event_handler+0x94>
   1298a:	230e      	movs	r3, #14
   1298c:	2000      	movs	r0, #0
   1298e:	606b      	str	r3, [r5, #4]
   12990:	b005      	add	sp, #20
   12992:	bd30      	pop	{r4, r5, pc}
   12994:	68c3      	ldr	r3, [r0, #12]
   12996:	2b01      	cmp	r3, #1
   12998:	d1a5      	bne.n	128e6 <logobj_event_handler+0x26>
   1299a:	e7f6      	b.n	1298a <logobj_event_handler+0xca>
   1299c:	4618      	mov	r0, r3
   1299e:	e7b5      	b.n	1290c <logobj_event_handler+0x4c>
   129a0:	2002      	movs	r0, #2
   129a2:	e7b3      	b.n	1290c <logobj_event_handler+0x4c>
   129a4:	230e      	movs	r3, #14
   129a6:	606b      	str	r3, [r5, #4]
   129a8:	e7b0      	b.n	1290c <logobj_event_handler+0x4c>
   129aa:	4a03      	ldr	r2, [pc, #12]	; (129b8 <logobj_event_handler+0xf8>)
   129ac:	7011      	strb	r1, [r2, #0]
   129ae:	e7cf      	b.n	12950 <logobj_event_handler+0x90>
   129b0:	200204d0 	.word	0x200204d0
   129b4:	2002658b 	.word	0x2002658b
   129b8:	2002658c 	.word	0x2002658c

000129bc <logobj_interface_init>:
   129bc:	2300      	movs	r3, #0
   129be:	b510      	push	{r4, lr}
   129c0:	4907      	ldr	r1, [pc, #28]	; (129e0 <logobj_interface_init+0x24>)
   129c2:	4a08      	ldr	r2, [pc, #32]	; (129e4 <logobj_interface_init+0x28>)
   129c4:	4c08      	ldr	r4, [pc, #32]	; (129e8 <logobj_interface_init+0x2c>)
   129c6:	4809      	ldr	r0, [pc, #36]	; (129ec <logobj_interface_init+0x30>)
   129c8:	7023      	strb	r3, [r4, #0]
   129ca:	6003      	str	r3, [r0, #0]
   129cc:	700b      	strb	r3, [r1, #0]
   129ce:	6013      	str	r3, [r2, #0]
   129d0:	f7ff ff26 	bl	12820 <rpc_logobj_client_init>
   129d4:	3000      	adds	r0, #0
   129d6:	bf18      	it	ne
   129d8:	2001      	movne	r0, #1
   129da:	4240      	negs	r0, r0
   129dc:	bd10      	pop	{r4, pc}
   129de:	bf00      	nop
   129e0:	2002658b 	.word	0x2002658b
   129e4:	200204cc 	.word	0x200204cc
   129e8:	2002658c 	.word	0x2002658c
   129ec:	200204d0 	.word	0x200204d0

000129f0 <logobj_interface_open>:
   129f0:	2300      	movs	r3, #0
   129f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129f6:	2866      	cmp	r0, #102	; 0x66
   129f8:	b082      	sub	sp, #8
   129fa:	9300      	str	r3, [sp, #0]
   129fc:	d172      	bne.n	12ae4 <logobj_interface_open+0xf4>
   129fe:	2902      	cmp	r1, #2
   12a00:	4689      	mov	r9, r1
   12a02:	d16f      	bne.n	12ae4 <logobj_interface_open+0xf4>
   12a04:	f240 2305 	movw	r3, #517	; 0x205
   12a08:	429a      	cmp	r2, r3
   12a0a:	4692      	mov	sl, r2
   12a0c:	d16a      	bne.n	12ae4 <logobj_interface_open+0xf4>
   12a0e:	4f48      	ldr	r7, [pc, #288]	; (12b30 <logobj_interface_open+0x140>)
   12a10:	683d      	ldr	r5, [r7, #0]
   12a12:	2d00      	cmp	r5, #0
   12a14:	d17c      	bne.n	12b10 <logobj_interface_open+0x120>
   12a16:	4680      	mov	r8, r0
   12a18:	4a46      	ldr	r2, [pc, #280]	; (12b34 <logobj_interface_open+0x144>)
   12a1a:	4668      	mov	r0, sp
   12a1c:	f006 f81c 	bl	18a58 <interface_socket_allocate>
   12a20:	9b00      	ldr	r3, [sp, #0]
   12a22:	4606      	mov	r6, r0
   12a24:	2b00      	cmp	r3, #0
   12a26:	d07d      	beq.n	12b24 <logobj_interface_open+0x134>
   12a28:	4629      	mov	r1, r5
   12a2a:	2204      	movs	r2, #4
   12a2c:	4842      	ldr	r0, [pc, #264]	; (12b38 <logobj_interface_open+0x148>)
   12a2e:	603b      	str	r3, [r7, #0]
   12a30:	f00a fe17 	bl	1d662 <memset>
   12a34:	9c00      	ldr	r4, [sp, #0]
   12a36:	4629      	mov	r1, r5
   12a38:	e9c4 8903 	strd	r8, r9, [r4, #12]
   12a3c:	f8c4 a014 	str.w	sl, [r4, #20]
   12a40:	a801      	add	r0, sp, #4
   12a42:	f7ff fef3 	bl	1282c <rpc_logobj_client_request_alloc>
   12a46:	2800      	cmp	r0, #0
   12a48:	d13c      	bne.n	12ac4 <logobj_interface_open+0xd4>
   12a4a:	2201      	movs	r2, #1
   12a4c:	2104      	movs	r1, #4
   12a4e:	9b01      	ldr	r3, [sp, #4]
   12a50:	4d3a      	ldr	r5, [pc, #232]	; (12b3c <logobj_interface_open+0x14c>)
   12a52:	7358      	strb	r0, [r3, #13]
   12a54:	7398      	strb	r0, [r3, #14]
   12a56:	73d8      	strb	r0, [r3, #15]
   12a58:	7258      	strb	r0, [r3, #9]
   12a5a:	7298      	strb	r0, [r3, #10]
   12a5c:	72d8      	strb	r0, [r3, #11]
   12a5e:	7219      	strb	r1, [r3, #8]
   12a60:	702a      	strb	r2, [r5, #0]
   12a62:	731a      	strb	r2, [r3, #12]
   12a64:	6822      	ldr	r2, [r4, #0]
   12a66:	4618      	mov	r0, r3
   12a68:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   12a6c:	6022      	str	r2, [r4, #0]
   12a6e:	f247 0101 	movw	r1, #28673	; 0x7001
   12a72:	f7ff fef3 	bl	1285c <rpc_logobj_client_request_send>
   12a76:	bb38      	cbnz	r0, 12ac8 <logobj_interface_open+0xd8>
   12a78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a80:	4611      	mov	r1, r2
   12a82:	4630      	mov	r0, r6
   12a84:	f006 f88c 	bl	18ba0 <interface_socket_wait>
   12a88:	4604      	mov	r4, r0
   12a8a:	b310      	cbz	r0, 12ad2 <logobj_interface_open+0xe2>
   12a8c:	9a00      	ldr	r2, [sp, #0]
   12a8e:	2e00      	cmp	r6, #0
   12a90:	6813      	ldr	r3, [r2, #0]
   12a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12a96:	6013      	str	r3, [r2, #0]
   12a98:	9a00      	ldr	r2, [sp, #0]
   12a9a:	6813      	ldr	r3, [r2, #0]
   12a9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12aa0:	6013      	str	r3, [r2, #0]
   12aa2:	9a00      	ldr	r2, [sp, #0]
   12aa4:	6813      	ldr	r3, [r2, #0]
   12aa6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12aaa:	6013      	str	r3, [r2, #0]
   12aac:	da36      	bge.n	12b1c <logobj_interface_open+0x12c>
   12aae:	2300      	movs	r3, #0
   12ab0:	4620      	mov	r0, r4
   12ab2:	603b      	str	r3, [r7, #0]
   12ab4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12ab8:	f7fe ff60 	bl	1197c <bsd_os_errno_set>
   12abc:	4630      	mov	r0, r6
   12abe:	b002      	add	sp, #8
   12ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12ac4:	240c      	movs	r4, #12
   12ac6:	e7e1      	b.n	12a8c <logobj_interface_open+0x9c>
   12ac8:	9801      	ldr	r0, [sp, #4]
   12aca:	f7ff fedd 	bl	12888 <rpc_logobj_client_message_free>
   12ace:	2405      	movs	r4, #5
   12ad0:	e7dc      	b.n	12a8c <logobj_interface_open+0x9c>
   12ad2:	4630      	mov	r0, r6
   12ad4:	f006 f8d0 	bl	18c78 <interface_socket_from_handle_get>
   12ad8:	b150      	cbz	r0, 12af0 <logobj_interface_open+0x100>
   12ada:	6844      	ldr	r4, [r0, #4]
   12adc:	b144      	cbz	r4, 12af0 <logobj_interface_open+0x100>
   12ade:	2300      	movs	r3, #0
   12ae0:	6043      	str	r3, [r0, #4]
   12ae2:	e7d3      	b.n	12a8c <logobj_interface_open+0x9c>
   12ae4:	2016      	movs	r0, #22
   12ae6:	f7fe ff49 	bl	1197c <bsd_os_errno_set>
   12aea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12aee:	e7e5      	b.n	12abc <logobj_interface_open+0xcc>
   12af0:	9a00      	ldr	r2, [sp, #0]
   12af2:	6813      	ldr	r3, [r2, #0]
   12af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12af8:	6013      	str	r3, [r2, #0]
   12afa:	9a00      	ldr	r2, [sp, #0]
   12afc:	6813      	ldr	r3, [r2, #0]
   12afe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12b02:	6013      	str	r3, [r2, #0]
   12b04:	9a00      	ldr	r2, [sp, #0]
   12b06:	6813      	ldr	r3, [r2, #0]
   12b08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12b0c:	6013      	str	r3, [r2, #0]
   12b0e:	e7d5      	b.n	12abc <logobj_interface_open+0xcc>
   12b10:	2001      	movs	r0, #1
   12b12:	f7fe ff33 	bl	1197c <bsd_os_errno_set>
   12b16:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b1a:	e7cf      	b.n	12abc <logobj_interface_open+0xcc>
   12b1c:	4630      	mov	r0, r6
   12b1e:	f005 fff1 	bl	18b04 <interface_socket_free>
   12b22:	e7c4      	b.n	12aae <logobj_interface_open+0xbe>
   12b24:	2018      	movs	r0, #24
   12b26:	f7fe ff29 	bl	1197c <bsd_os_errno_set>
   12b2a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b2e:	e7c5      	b.n	12abc <logobj_interface_open+0xcc>
   12b30:	200204d0 	.word	0x200204d0
   12b34:	000128a9 	.word	0x000128a9
   12b38:	200204cc 	.word	0x200204cc
   12b3c:	2002658b 	.word	0x2002658b

00012b40 <logobj_interface_read>:
   12b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b44:	b085      	sub	sp, #20
   12b46:	2900      	cmp	r1, #0
   12b48:	d05e      	beq.n	12c08 <logobj_interface_read+0xc8>
   12b4a:	2a00      	cmp	r2, #0
   12b4c:	4616      	mov	r6, r2
   12b4e:	dd5b      	ble.n	12c08 <logobj_interface_read+0xc8>
   12b50:	461f      	mov	r7, r3
   12b52:	4680      	mov	r8, r0
   12b54:	460d      	mov	r5, r1
   12b56:	f006 f88f 	bl	18c78 <interface_socket_from_handle_get>
   12b5a:	4604      	mov	r4, r0
   12b5c:	2800      	cmp	r0, #0
   12b5e:	d059      	beq.n	12c14 <logobj_interface_read+0xd4>
   12b60:	69c0      	ldr	r0, [r0, #28]
   12b62:	07ba      	lsls	r2, r7, #30
   12b64:	6803      	ldr	r3, [r0, #0]
   12b66:	68db      	ldr	r3, [r3, #12]
   12b68:	d524      	bpl.n	12bb4 <logobj_interface_read+0x74>
   12b6a:	4798      	blx	r3
   12b6c:	3001      	adds	r0, #1
   12b6e:	d03b      	beq.n	12be8 <logobj_interface_read+0xa8>
   12b70:	6823      	ldr	r3, [r4, #0]
   12b72:	69e0      	ldr	r0, [r4, #28]
   12b74:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   12b78:	d038      	beq.n	12bec <logobj_interface_read+0xac>
   12b7a:	2100      	movs	r1, #0
   12b7c:	6823      	ldr	r3, [r4, #0]
   12b7e:	463a      	mov	r2, r7
   12b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12b84:	6023      	str	r3, [r4, #0]
   12b86:	e9cd 1102 	strd	r1, r1, [sp, #8]
   12b8a:	e9cd 5600 	strd	r5, r6, [sp]
   12b8e:	6803      	ldr	r3, [r0, #0]
   12b90:	4669      	mov	r1, sp
   12b92:	689b      	ldr	r3, [r3, #8]
   12b94:	4798      	blx	r3
   12b96:	4605      	mov	r5, r0
   12b98:	69e0      	ldr	r0, [r4, #28]
   12b9a:	6803      	ldr	r3, [r0, #0]
   12b9c:	68db      	ldr	r3, [r3, #12]
   12b9e:	4798      	blx	r3
   12ba0:	3001      	adds	r0, #1
   12ba2:	d003      	beq.n	12bac <logobj_interface_read+0x6c>
   12ba4:	6823      	ldr	r3, [r4, #0]
   12ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12baa:	6023      	str	r3, [r4, #0]
   12bac:	4628      	mov	r0, r5
   12bae:	b005      	add	sp, #20
   12bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12bb4:	6822      	ldr	r2, [r4, #0]
   12bb6:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   12bba:	d1d6      	bne.n	12b6a <logobj_interface_read+0x2a>
   12bbc:	4798      	blx	r3
   12bbe:	1c43      	adds	r3, r0, #1
   12bc0:	d1d6      	bne.n	12b70 <logobj_interface_read+0x30>
   12bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12bc6:	6a23      	ldr	r3, [r4, #32]
   12bc8:	4611      	mov	r1, r2
   12bca:	2b00      	cmp	r3, #0
   12bcc:	bf08      	it	eq
   12bce:	4603      	moveq	r3, r0
   12bd0:	4640      	mov	r0, r8
   12bd2:	f005 ffe5 	bl	18ba0 <interface_socket_wait>
   12bd6:	b158      	cbz	r0, 12bf0 <logobj_interface_read+0xb0>
   12bd8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12bdc:	f7fe fece 	bl	1197c <bsd_os_errno_set>
   12be0:	4628      	mov	r0, r5
   12be2:	b005      	add	sp, #20
   12be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12be8:	2023      	movs	r0, #35	; 0x23
   12bea:	e7f5      	b.n	12bd8 <logobj_interface_read+0x98>
   12bec:	461d      	mov	r5, r3
   12bee:	e7d4      	b.n	12b9a <logobj_interface_read+0x5a>
   12bf0:	4640      	mov	r0, r8
   12bf2:	f006 f841 	bl	18c78 <interface_socket_from_handle_get>
   12bf6:	4603      	mov	r3, r0
   12bf8:	2800      	cmp	r0, #0
   12bfa:	d0b9      	beq.n	12b70 <logobj_interface_read+0x30>
   12bfc:	6840      	ldr	r0, [r0, #4]
   12bfe:	2800      	cmp	r0, #0
   12c00:	d0b6      	beq.n	12b70 <logobj_interface_read+0x30>
   12c02:	f8c3 9004 	str.w	r9, [r3, #4]
   12c06:	e7e7      	b.n	12bd8 <logobj_interface_read+0x98>
   12c08:	2016      	movs	r0, #22
   12c0a:	f7fe feb7 	bl	1197c <bsd_os_errno_set>
   12c0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c12:	e7cb      	b.n	12bac <logobj_interface_read+0x6c>
   12c14:	2009      	movs	r0, #9
   12c16:	f7fe feb1 	bl	1197c <bsd_os_errno_set>
   12c1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c1e:	e7c5      	b.n	12bac <logobj_interface_read+0x6c>

00012c20 <logobj_interface_write>:
   12c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c24:	b082      	sub	sp, #8
   12c26:	2900      	cmp	r1, #0
   12c28:	d05b      	beq.n	12ce2 <logobj_interface_write+0xc2>
   12c2a:	2a04      	cmp	r2, #4
   12c2c:	d159      	bne.n	12ce2 <logobj_interface_write+0xc2>
   12c2e:	461e      	mov	r6, r3
   12c30:	4607      	mov	r7, r0
   12c32:	460d      	mov	r5, r1
   12c34:	f006 f820 	bl	18c78 <interface_socket_from_handle_get>
   12c38:	4604      	mov	r4, r0
   12c3a:	2800      	cmp	r0, #0
   12c3c:	d067      	beq.n	12d0e <logobj_interface_write+0xee>
   12c3e:	07b0      	lsls	r0, r6, #30
   12c40:	d526      	bpl.n	12c90 <logobj_interface_write+0x70>
   12c42:	6823      	ldr	r3, [r4, #0]
   12c44:	039b      	lsls	r3, r3, #14
   12c46:	d55e      	bpl.n	12d06 <logobj_interface_write+0xe6>
   12c48:	2600      	movs	r6, #0
   12c4a:	6823      	ldr	r3, [r4, #0]
   12c4c:	2100      	movs	r1, #0
   12c4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12c52:	6023      	str	r3, [r4, #0]
   12c54:	a801      	add	r0, sp, #4
   12c56:	f8d5 8000 	ldr.w	r8, [r5]
   12c5a:	f7ff fde7 	bl	1282c <rpc_logobj_client_request_alloc>
   12c5e:	b9f8      	cbnz	r0, 12ca0 <logobj_interface_write+0x80>
   12c60:	2504      	movs	r5, #4
   12c62:	9b01      	ldr	r3, [sp, #4]
   12c64:	f247 0103 	movw	r1, #28675	; 0x7003
   12c68:	f8c3 800c 	str.w	r8, [r3, #12]
   12c6c:	7258      	strb	r0, [r3, #9]
   12c6e:	7298      	strb	r0, [r3, #10]
   12c70:	72d8      	strb	r0, [r3, #11]
   12c72:	721d      	strb	r5, [r3, #8]
   12c74:	4618      	mov	r0, r3
   12c76:	f7ff fdf1 	bl	1285c <rpc_logobj_client_request_send>
   12c7a:	4680      	mov	r8, r0
   12c7c:	bb40      	cbnz	r0, 12cd0 <logobj_interface_write+0xb0>
   12c7e:	b9ce      	cbnz	r6, 12cb4 <logobj_interface_write+0x94>
   12c80:	4628      	mov	r0, r5
   12c82:	6823      	ldr	r3, [r4, #0]
   12c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12c88:	6023      	str	r3, [r4, #0]
   12c8a:	b002      	add	sp, #8
   12c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c90:	6823      	ldr	r3, [r4, #0]
   12c92:	00d9      	lsls	r1, r3, #3
   12c94:	d4d5      	bmi.n	12c42 <logobj_interface_write+0x22>
   12c96:	6823      	ldr	r3, [r4, #0]
   12c98:	039a      	lsls	r2, r3, #14
   12c9a:	d536      	bpl.n	12d0a <logobj_interface_write+0xea>
   12c9c:	2601      	movs	r6, #1
   12c9e:	e7d4      	b.n	12c4a <logobj_interface_write+0x2a>
   12ca0:	200c      	movs	r0, #12
   12ca2:	6823      	ldr	r3, [r4, #0]
   12ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12ca8:	6023      	str	r3, [r4, #0]
   12caa:	f7fe fe67 	bl	1197c <bsd_os_errno_set>
   12cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12cb2:	e7ea      	b.n	12c8a <logobj_interface_write+0x6a>
   12cb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12cbc:	4611      	mov	r1, r2
   12cbe:	4638      	mov	r0, r7
   12cc0:	f005 ff6e 	bl	18ba0 <interface_socket_wait>
   12cc4:	b198      	cbz	r0, 12cee <logobj_interface_write+0xce>
   12cc6:	6823      	ldr	r3, [r4, #0]
   12cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12ccc:	6023      	str	r3, [r4, #0]
   12cce:	e7ec      	b.n	12caa <logobj_interface_write+0x8a>
   12cd0:	9801      	ldr	r0, [sp, #4]
   12cd2:	f7ff fdd9 	bl	12888 <rpc_logobj_client_message_free>
   12cd6:	6823      	ldr	r3, [r4, #0]
   12cd8:	2005      	movs	r0, #5
   12cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12cde:	6023      	str	r3, [r4, #0]
   12ce0:	e7e3      	b.n	12caa <logobj_interface_write+0x8a>
   12ce2:	2016      	movs	r0, #22
   12ce4:	f7fe fe4a 	bl	1197c <bsd_os_errno_set>
   12ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12cec:	e7cd      	b.n	12c8a <logobj_interface_write+0x6a>
   12cee:	4638      	mov	r0, r7
   12cf0:	f005 ffc2 	bl	18c78 <interface_socket_from_handle_get>
   12cf4:	4603      	mov	r3, r0
   12cf6:	2800      	cmp	r0, #0
   12cf8:	d0c2      	beq.n	12c80 <logobj_interface_write+0x60>
   12cfa:	6840      	ldr	r0, [r0, #4]
   12cfc:	2800      	cmp	r0, #0
   12cfe:	d0bf      	beq.n	12c80 <logobj_interface_write+0x60>
   12d00:	f8c3 8004 	str.w	r8, [r3, #4]
   12d04:	e7df      	b.n	12cc6 <logobj_interface_write+0xa6>
   12d06:	2073      	movs	r0, #115	; 0x73
   12d08:	e7cf      	b.n	12caa <logobj_interface_write+0x8a>
   12d0a:	2009      	movs	r0, #9
   12d0c:	e7cd      	b.n	12caa <logobj_interface_write+0x8a>
   12d0e:	2009      	movs	r0, #9
   12d10:	f7fe fe34 	bl	1197c <bsd_os_errno_set>
   12d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d18:	e7b7      	b.n	12c8a <logobj_interface_write+0x6a>
   12d1a:	bf00      	nop

00012d1c <logobj_interface_setopt>:
   12d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d1e:	2901      	cmp	r1, #1
   12d20:	b085      	sub	sp, #20
   12d22:	d068      	beq.n	12df6 <logobj_interface_setopt+0xda>
   12d24:	461e      	mov	r6, r3
   12d26:	f240 2305 	movw	r3, #517	; 0x205
   12d2a:	4299      	cmp	r1, r3
   12d2c:	f040 8095 	bne.w	12e5a <logobj_interface_setopt+0x13e>
   12d30:	4607      	mov	r7, r0
   12d32:	4615      	mov	r5, r2
   12d34:	f005 ffa0 	bl	18c78 <interface_socket_from_handle_get>
   12d38:	4604      	mov	r4, r0
   12d3a:	2800      	cmp	r0, #0
   12d3c:	f000 80b2 	beq.w	12ea4 <logobj_interface_setopt+0x188>
   12d40:	2d01      	cmp	r5, #1
   12d42:	d019      	beq.n	12d78 <logobj_interface_setopt+0x5c>
   12d44:	2d02      	cmp	r5, #2
   12d46:	d010      	beq.n	12d6a <logobj_interface_setopt+0x4e>
   12d48:	252a      	movs	r5, #42	; 0x2a
   12d4a:	6803      	ldr	r3, [r0, #0]
   12d4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12d50:	6023      	str	r3, [r4, #0]
   12d52:	6823      	ldr	r3, [r4, #0]
   12d54:	4628      	mov	r0, r5
   12d56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12d5a:	6023      	str	r3, [r4, #0]
   12d5c:	f7fe fe0e 	bl	1197c <bsd_os_errno_set>
   12d60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12d64:	4628      	mov	r0, r5
   12d66:	b005      	add	sp, #20
   12d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d6a:	b116      	cbz	r6, 12d72 <logobj_interface_setopt+0x56>
   12d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12d6e:	2b01      	cmp	r3, #1
   12d70:	d049      	beq.n	12e06 <logobj_interface_setopt+0xea>
   12d72:	6823      	ldr	r3, [r4, #0]
   12d74:	2516      	movs	r5, #22
   12d76:	e7e9      	b.n	12d4c <logobj_interface_setopt+0x30>
   12d78:	2e00      	cmp	r6, #0
   12d7a:	d0fa      	beq.n	12d72 <logobj_interface_setopt+0x56>
   12d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12d7e:	2b04      	cmp	r3, #4
   12d80:	d1f7      	bne.n	12d72 <logobj_interface_setopt+0x56>
   12d82:	2100      	movs	r1, #0
   12d84:	a803      	add	r0, sp, #12
   12d86:	f7ff fd51 	bl	1282c <rpc_logobj_client_request_alloc>
   12d8a:	4605      	mov	r5, r0
   12d8c:	2800      	cmp	r0, #0
   12d8e:	d16a      	bne.n	12e66 <logobj_interface_setopt+0x14a>
   12d90:	9803      	ldr	r0, [sp, #12]
   12d92:	2208      	movs	r2, #8
   12d94:	4629      	mov	r1, r5
   12d96:	300c      	adds	r0, #12
   12d98:	f00a fc63 	bl	1d662 <memset>
   12d9c:	9803      	ldr	r0, [sp, #12]
   12d9e:	4631      	mov	r1, r6
   12da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12da2:	300c      	adds	r0, #12
   12da4:	f00a fc33 	bl	1d60e <memcpy>
   12da8:	2308      	movs	r3, #8
   12daa:	9803      	ldr	r0, [sp, #12]
   12dac:	f247 0102 	movw	r1, #28674	; 0x7002
   12db0:	7203      	strb	r3, [r0, #8]
   12db2:	7245      	strb	r5, [r0, #9]
   12db4:	7285      	strb	r5, [r0, #10]
   12db6:	72c5      	strb	r5, [r0, #11]
   12db8:	6823      	ldr	r3, [r4, #0]
   12dba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12dbe:	6023      	str	r3, [r4, #0]
   12dc0:	f7ff fd4c 	bl	1285c <rpc_logobj_client_request_send>
   12dc4:	2800      	cmp	r0, #0
   12dc6:	d151      	bne.n	12e6c <logobj_interface_setopt+0x150>
   12dc8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12dd0:	4611      	mov	r1, r2
   12dd2:	4638      	mov	r0, r7
   12dd4:	f005 fee4 	bl	18ba0 <interface_socket_wait>
   12dd8:	4605      	mov	r5, r0
   12dda:	2800      	cmp	r0, #0
   12ddc:	d13b      	bne.n	12e56 <logobj_interface_setopt+0x13a>
   12dde:	4638      	mov	r0, r7
   12de0:	f005 ff4a 	bl	18c78 <interface_socket_from_handle_get>
   12de4:	2800      	cmp	r0, #0
   12de6:	d04f      	beq.n	12e88 <logobj_interface_setopt+0x16c>
   12de8:	6843      	ldr	r3, [r0, #4]
   12dea:	2b00      	cmp	r3, #0
   12dec:	d04c      	beq.n	12e88 <logobj_interface_setopt+0x16c>
   12dee:	2200      	movs	r2, #0
   12df0:	461d      	mov	r5, r3
   12df2:	6042      	str	r2, [r0, #4]
   12df4:	e02f      	b.n	12e56 <logobj_interface_setopt+0x13a>
   12df6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12df8:	9400      	str	r4, [sp, #0]
   12dfa:	f005 ff65 	bl	18cc8 <interface_socket_setopt>
   12dfe:	4605      	mov	r5, r0
   12e00:	4628      	mov	r0, r5
   12e02:	b005      	add	sp, #20
   12e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e06:	2100      	movs	r1, #0
   12e08:	a803      	add	r0, sp, #12
   12e0a:	7835      	ldrb	r5, [r6, #0]
   12e0c:	f7ff fd0e 	bl	1282c <rpc_logobj_client_request_alloc>
   12e10:	bb48      	cbnz	r0, 12e66 <logobj_interface_setopt+0x14a>
   12e12:	2d01      	cmp	r5, #1
   12e14:	bf08      	it	eq
   12e16:	4b26      	ldreq	r3, [pc, #152]	; (12eb0 <logobj_interface_setopt+0x194>)
   12e18:	f04f 0204 	mov.w	r2, #4
   12e1c:	bf08      	it	eq
   12e1e:	701d      	strbeq	r5, [r3, #0]
   12e20:	2300      	movs	r3, #0
   12e22:	9803      	ldr	r0, [sp, #12]
   12e24:	f247 0101 	movw	r1, #28673	; 0x7001
   12e28:	7243      	strb	r3, [r0, #9]
   12e2a:	60c5      	str	r5, [r0, #12]
   12e2c:	7283      	strb	r3, [r0, #10]
   12e2e:	72c3      	strb	r3, [r0, #11]
   12e30:	7202      	strb	r2, [r0, #8]
   12e32:	6823      	ldr	r3, [r4, #0]
   12e34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12e38:	6023      	str	r3, [r4, #0]
   12e3a:	f7ff fd0f 	bl	1285c <rpc_logobj_client_request_send>
   12e3e:	4606      	mov	r6, r0
   12e40:	b9a0      	cbnz	r0, 12e6c <logobj_interface_setopt+0x150>
   12e42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e4a:	4611      	mov	r1, r2
   12e4c:	4638      	mov	r0, r7
   12e4e:	f005 fea7 	bl	18ba0 <interface_socket_wait>
   12e52:	4605      	mov	r5, r0
   12e54:	b180      	cbz	r0, 12e78 <logobj_interface_setopt+0x15c>
   12e56:	6823      	ldr	r3, [r4, #0]
   12e58:	e778      	b.n	12d4c <logobj_interface_setopt+0x30>
   12e5a:	202a      	movs	r0, #42	; 0x2a
   12e5c:	f7fe fd8e 	bl	1197c <bsd_os_errno_set>
   12e60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12e64:	e77e      	b.n	12d64 <logobj_interface_setopt+0x48>
   12e66:	6823      	ldr	r3, [r4, #0]
   12e68:	250c      	movs	r5, #12
   12e6a:	e76f      	b.n	12d4c <logobj_interface_setopt+0x30>
   12e6c:	9803      	ldr	r0, [sp, #12]
   12e6e:	f7ff fd0b 	bl	12888 <rpc_logobj_client_message_free>
   12e72:	2505      	movs	r5, #5
   12e74:	6823      	ldr	r3, [r4, #0]
   12e76:	e769      	b.n	12d4c <logobj_interface_setopt+0x30>
   12e78:	4638      	mov	r0, r7
   12e7a:	f005 fefd 	bl	18c78 <interface_socket_from_handle_get>
   12e7e:	b140      	cbz	r0, 12e92 <logobj_interface_setopt+0x176>
   12e80:	6845      	ldr	r5, [r0, #4]
   12e82:	b135      	cbz	r5, 12e92 <logobj_interface_setopt+0x176>
   12e84:	6046      	str	r6, [r0, #4]
   12e86:	e7e6      	b.n	12e56 <logobj_interface_setopt+0x13a>
   12e88:	4631      	mov	r1, r6
   12e8a:	2204      	movs	r2, #4
   12e8c:	4809      	ldr	r0, [pc, #36]	; (12eb4 <logobj_interface_setopt+0x198>)
   12e8e:	f00a fbbe 	bl	1d60e <memcpy>
   12e92:	6823      	ldr	r3, [r4, #0]
   12e94:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12e98:	6023      	str	r3, [r4, #0]
   12e9a:	6823      	ldr	r3, [r4, #0]
   12e9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12ea0:	6023      	str	r3, [r4, #0]
   12ea2:	e75f      	b.n	12d64 <logobj_interface_setopt+0x48>
   12ea4:	2009      	movs	r0, #9
   12ea6:	f7fe fd69 	bl	1197c <bsd_os_errno_set>
   12eaa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12eae:	e759      	b.n	12d64 <logobj_interface_setopt+0x48>
   12eb0:	2002658b 	.word	0x2002658b
   12eb4:	200204cc 	.word	0x200204cc

00012eb8 <logobj_interface_getopt>:
   12eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12eba:	2901      	cmp	r1, #1
   12ebc:	b083      	sub	sp, #12
   12ebe:	9e08      	ldr	r6, [sp, #32]
   12ec0:	d030      	beq.n	12f24 <logobj_interface_getopt+0x6c>
   12ec2:	461f      	mov	r7, r3
   12ec4:	f240 2305 	movw	r3, #517	; 0x205
   12ec8:	4299      	cmp	r1, r3
   12eca:	d134      	bne.n	12f36 <logobj_interface_getopt+0x7e>
   12ecc:	4615      	mov	r5, r2
   12ece:	f005 fed3 	bl	18c78 <interface_socket_from_handle_get>
   12ed2:	2800      	cmp	r0, #0
   12ed4:	d037      	beq.n	12f46 <logobj_interface_getopt+0x8e>
   12ed6:	2d01      	cmp	r5, #1
   12ed8:	d015      	beq.n	12f06 <logobj_interface_getopt+0x4e>
   12eda:	2d02      	cmp	r5, #2
   12edc:	d10b      	bne.n	12ef6 <logobj_interface_getopt+0x3e>
   12ede:	b387      	cbz	r7, 12f42 <logobj_interface_getopt+0x8a>
   12ee0:	6833      	ldr	r3, [r6, #0]
   12ee2:	b373      	cbz	r3, 12f42 <logobj_interface_getopt+0x8a>
   12ee4:	2300      	movs	r3, #0
   12ee6:	2201      	movs	r2, #1
   12ee8:	4618      	mov	r0, r3
   12eea:	491a      	ldr	r1, [pc, #104]	; (12f54 <logobj_interface_getopt+0x9c>)
   12eec:	7809      	ldrb	r1, [r1, #0]
   12eee:	7039      	strb	r1, [r7, #0]
   12ef0:	6032      	str	r2, [r6, #0]
   12ef2:	b003      	add	sp, #12
   12ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ef6:	2009      	movs	r0, #9
   12ef8:	f7fe fd40 	bl	1197c <bsd_os_errno_set>
   12efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f00:	4618      	mov	r0, r3
   12f02:	b003      	add	sp, #12
   12f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f06:	b1e7      	cbz	r7, 12f42 <logobj_interface_getopt+0x8a>
   12f08:	6833      	ldr	r3, [r6, #0]
   12f0a:	2b03      	cmp	r3, #3
   12f0c:	d919      	bls.n	12f42 <logobj_interface_getopt+0x8a>
   12f0e:	4638      	mov	r0, r7
   12f10:	2204      	movs	r2, #4
   12f12:	4911      	ldr	r1, [pc, #68]	; (12f58 <logobj_interface_getopt+0xa0>)
   12f14:	f00a fb7b 	bl	1d60e <memcpy>
   12f18:	2300      	movs	r3, #0
   12f1a:	2204      	movs	r2, #4
   12f1c:	4618      	mov	r0, r3
   12f1e:	6032      	str	r2, [r6, #0]
   12f20:	b003      	add	sp, #12
   12f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f24:	9600      	str	r6, [sp, #0]
   12f26:	f005 ff05 	bl	18d34 <interface_socket_getopt>
   12f2a:	4603      	mov	r3, r0
   12f2c:	2800      	cmp	r0, #0
   12f2e:	d1e3      	bne.n	12ef8 <logobj_interface_getopt+0x40>
   12f30:	4618      	mov	r0, r3
   12f32:	b003      	add	sp, #12
   12f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f36:	202a      	movs	r0, #42	; 0x2a
   12f38:	f7fe fd20 	bl	1197c <bsd_os_errno_set>
   12f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f40:	e7de      	b.n	12f00 <logobj_interface_getopt+0x48>
   12f42:	2016      	movs	r0, #22
   12f44:	e7d8      	b.n	12ef8 <logobj_interface_getopt+0x40>
   12f46:	2009      	movs	r0, #9
   12f48:	f7fe fd18 	bl	1197c <bsd_os_errno_set>
   12f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f50:	e7d6      	b.n	12f00 <logobj_interface_getopt+0x48>
   12f52:	bf00      	nop
   12f54:	2002658c 	.word	0x2002658c
   12f58:	200204cc 	.word	0x200204cc

00012f5c <logobj_interface_close>:
   12f5c:	b510      	push	{r4, lr}
   12f5e:	4604      	mov	r4, r0
   12f60:	f005 fe8a 	bl	18c78 <interface_socket_from_handle_get>
   12f64:	b138      	cbz	r0, 12f76 <logobj_interface_close+0x1a>
   12f66:	4620      	mov	r0, r4
   12f68:	f005 fdcc 	bl	18b04 <interface_socket_free>
   12f6c:	2300      	movs	r3, #0
   12f6e:	4a05      	ldr	r2, [pc, #20]	; (12f84 <logobj_interface_close+0x28>)
   12f70:	4618      	mov	r0, r3
   12f72:	6013      	str	r3, [r2, #0]
   12f74:	bd10      	pop	{r4, pc}
   12f76:	2009      	movs	r0, #9
   12f78:	f7fe fd00 	bl	1197c <bsd_os_errno_set>
   12f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12f80:	bd10      	pop	{r4, pc}
   12f82:	bf00      	nop
   12f84:	200204d0 	.word	0x200204d0

00012f88 <packet_free_cb>:
   12f88:	6800      	ldr	r0, [r0, #0]
   12f8a:	f004 ba31 	b.w	173f0 <rpc_at_client_data_free>
   12f8e:	bf00      	nop

00012f90 <at_interface_write>:
   12f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f92:	b083      	sub	sp, #12
   12f94:	460f      	mov	r7, r1
   12f96:	4615      	mov	r5, r2
   12f98:	4606      	mov	r6, r0
   12f9a:	f005 fe6d 	bl	18c78 <interface_socket_from_handle_get>
   12f9e:	2800      	cmp	r0, #0
   12fa0:	d047      	beq.n	13032 <at_interface_write+0xa2>
   12fa2:	6803      	ldr	r3, [r0, #0]
   12fa4:	4604      	mov	r4, r0
   12fa6:	039b      	lsls	r3, r3, #14
   12fa8:	d543      	bpl.n	13032 <at_interface_write+0xa2>
   12faa:	6803      	ldr	r3, [r0, #0]
   12fac:	4629      	mov	r1, r5
   12fae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12fb2:	6003      	str	r3, [r0, #0]
   12fb4:	6803      	ldr	r3, [r0, #0]
   12fb6:	a801      	add	r0, sp, #4
   12fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   12fbc:	6023      	str	r3, [r4, #0]
   12fbe:	f004 f9ed 	bl	1739c <rpc_at_client_request_alloc>
   12fc2:	bba0      	cbnz	r0, 1302e <at_interface_write+0x9e>
   12fc4:	2204      	movs	r2, #4
   12fc6:	9b01      	ldr	r3, [sp, #4]
   12fc8:	721a      	strb	r2, [r3, #8]
   12fca:	7258      	strb	r0, [r3, #9]
   12fcc:	7298      	strb	r0, [r3, #10]
   12fce:	72d8      	strb	r0, [r3, #11]
   12fd0:	60de      	str	r6, [r3, #12]
   12fd2:	b985      	cbnz	r5, 12ff6 <at_interface_write+0x66>
   12fd4:	4618      	mov	r0, r3
   12fd6:	2101      	movs	r1, #1
   12fd8:	f004 f9f4 	bl	173c4 <rpc_at_client_request_send>
   12fdc:	b9d0      	cbnz	r0, 13014 <at_interface_write+0x84>
   12fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12fe2:	4630      	mov	r0, r6
   12fe4:	4611      	mov	r1, r2
   12fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12fea:	f005 fdd9 	bl	18ba0 <interface_socket_wait>
   12fee:	b9a8      	cbnz	r0, 1301c <at_interface_write+0x8c>
   12ff0:	4628      	mov	r0, r5
   12ff2:	b003      	add	sp, #12
   12ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ff6:	4639      	mov	r1, r7
   12ff8:	6818      	ldr	r0, [r3, #0]
   12ffa:	462a      	mov	r2, r5
   12ffc:	f00a fb07 	bl	1d60e <memcpy>
   13000:	2101      	movs	r1, #1
   13002:	9801      	ldr	r0, [sp, #4]
   13004:	f004 f9de 	bl	173c4 <rpc_at_client_request_send>
   13008:	2800      	cmp	r0, #0
   1300a:	d0e8      	beq.n	12fde <at_interface_write+0x4e>
   1300c:	9b01      	ldr	r3, [sp, #4]
   1300e:	6818      	ldr	r0, [r3, #0]
   13010:	f004 f9ee 	bl	173f0 <rpc_at_client_data_free>
   13014:	9801      	ldr	r0, [sp, #4]
   13016:	f004 f9e3 	bl	173e0 <rpc_at_client_message_free>
   1301a:	2023      	movs	r0, #35	; 0x23
   1301c:	6823      	ldr	r3, [r4, #0]
   1301e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13022:	6023      	str	r3, [r4, #0]
   13024:	f7fe fcaa 	bl	1197c <bsd_os_errno_set>
   13028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1302c:	e7e1      	b.n	12ff2 <at_interface_write+0x62>
   1302e:	200c      	movs	r0, #12
   13030:	e7f4      	b.n	1301c <at_interface_write+0x8c>
   13032:	2016      	movs	r0, #22
   13034:	e7f6      	b.n	13024 <at_interface_write+0x94>
   13036:	bf00      	nop

00013038 <at_interface_init>:
   13038:	f004 b9aa 	b.w	17390 <rpc_at_client_init>

0001303c <at_interface_open>:
   1303c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13040:	2500      	movs	r5, #0
   13042:	b082      	sub	sp, #8
   13044:	ab02      	add	r3, sp, #8
   13046:	f843 5d08 	str.w	r5, [r3, #-8]!
   1304a:	4680      	mov	r8, r0
   1304c:	460f      	mov	r7, r1
   1304e:	4618      	mov	r0, r3
   13050:	4616      	mov	r6, r2
   13052:	2102      	movs	r1, #2
   13054:	4a1d      	ldr	r2, [pc, #116]	; (130cc <at_interface_open+0x90>)
   13056:	f005 fcff 	bl	18a58 <interface_socket_allocate>
   1305a:	9b00      	ldr	r3, [sp, #0]
   1305c:	4604      	mov	r4, r0
   1305e:	b30b      	cbz	r3, 130a4 <at_interface_open+0x68>
   13060:	e9c3 8703 	strd	r8, r7, [r3, #12]
   13064:	615e      	str	r6, [r3, #20]
   13066:	4629      	mov	r1, r5
   13068:	a801      	add	r0, sp, #4
   1306a:	f004 f997 	bl	1739c <rpc_at_client_request_alloc>
   1306e:	b9e8      	cbnz	r0, 130ac <at_interface_open+0x70>
   13070:	2204      	movs	r2, #4
   13072:	9b01      	ldr	r3, [sp, #4]
   13074:	2105      	movs	r1, #5
   13076:	7258      	strb	r0, [r3, #9]
   13078:	7298      	strb	r0, [r3, #10]
   1307a:	72d8      	strb	r0, [r3, #11]
   1307c:	721a      	strb	r2, [r3, #8]
   1307e:	60dc      	str	r4, [r3, #12]
   13080:	4618      	mov	r0, r3
   13082:	f004 f99f 	bl	173c4 <rpc_at_client_request_send>
   13086:	b9d8      	cbnz	r0, 130c0 <at_interface_open+0x84>
   13088:	2202      	movs	r2, #2
   1308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1308e:	4611      	mov	r1, r2
   13090:	4620      	mov	r0, r4
   13092:	f005 fd85 	bl	18ba0 <interface_socket_wait>
   13096:	4605      	mov	r5, r0
   13098:	b948      	cbnz	r0, 130ae <at_interface_open+0x72>
   1309a:	9a00      	ldr	r2, [sp, #0]
   1309c:	6813      	ldr	r3, [r2, #0]
   1309e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   130a2:	6013      	str	r3, [r2, #0]
   130a4:	4620      	mov	r0, r4
   130a6:	b002      	add	sp, #8
   130a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130ac:	250c      	movs	r5, #12
   130ae:	4620      	mov	r0, r4
   130b0:	f005 fd28 	bl	18b04 <interface_socket_free>
   130b4:	4628      	mov	r0, r5
   130b6:	f7fe fc61 	bl	1197c <bsd_os_errno_set>
   130ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   130be:	e7f1      	b.n	130a4 <at_interface_open+0x68>
   130c0:	9801      	ldr	r0, [sp, #4]
   130c2:	f004 f98d 	bl	173e0 <rpc_at_client_message_free>
   130c6:	2523      	movs	r5, #35	; 0x23
   130c8:	e7f1      	b.n	130ae <at_interface_open+0x72>
   130ca:	bf00      	nop
   130cc:	00012f89 	.word	0x00012f89

000130d0 <at_interface_close>:
   130d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   130d2:	b083      	sub	sp, #12
   130d4:	4606      	mov	r6, r0
   130d6:	f005 fdcf 	bl	18c78 <interface_socket_from_handle_get>
   130da:	2800      	cmp	r0, #0
   130dc:	d03d      	beq.n	1315a <at_interface_close+0x8a>
   130de:	230d      	movs	r3, #13
   130e0:	6807      	ldr	r7, [r0, #0]
   130e2:	6003      	str	r3, [r0, #0]
   130e4:	6803      	ldr	r3, [r0, #0]
   130e6:	4604      	mov	r4, r0
   130e8:	039b      	lsls	r3, r3, #14
   130ea:	d41f      	bmi.n	1312c <at_interface_close+0x5c>
   130ec:	2100      	movs	r1, #0
   130ee:	a801      	add	r0, sp, #4
   130f0:	f004 f954 	bl	1739c <rpc_at_client_request_alloc>
   130f4:	bb20      	cbnz	r0, 13140 <at_interface_close+0x70>
   130f6:	2204      	movs	r2, #4
   130f8:	9b01      	ldr	r3, [sp, #4]
   130fa:	2106      	movs	r1, #6
   130fc:	7258      	strb	r0, [r3, #9]
   130fe:	7298      	strb	r0, [r3, #10]
   13100:	72d8      	strb	r0, [r3, #11]
   13102:	721a      	strb	r2, [r3, #8]
   13104:	60de      	str	r6, [r3, #12]
   13106:	4618      	mov	r0, r3
   13108:	f004 f95c 	bl	173c4 <rpc_at_client_request_send>
   1310c:	b9d0      	cbnz	r0, 13144 <at_interface_close+0x74>
   1310e:	220e      	movs	r2, #14
   13110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13114:	4611      	mov	r1, r2
   13116:	4630      	mov	r0, r6
   13118:	f005 fd42 	bl	18ba0 <interface_socket_wait>
   1311c:	4605      	mov	r5, r0
   1311e:	b9a8      	cbnz	r0, 1314c <at_interface_close+0x7c>
   13120:	4630      	mov	r0, r6
   13122:	f005 fcef 	bl	18b04 <interface_socket_free>
   13126:	4628      	mov	r0, r5
   13128:	b003      	add	sp, #12
   1312a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1312c:	6803      	ldr	r3, [r0, #0]
   1312e:	2100      	movs	r1, #0
   13130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13134:	6003      	str	r3, [r0, #0]
   13136:	a801      	add	r0, sp, #4
   13138:	f004 f930 	bl	1739c <rpc_at_client_request_alloc>
   1313c:	2800      	cmp	r0, #0
   1313e:	d0da      	beq.n	130f6 <at_interface_close+0x26>
   13140:	250c      	movs	r5, #12
   13142:	e003      	b.n	1314c <at_interface_close+0x7c>
   13144:	9801      	ldr	r0, [sp, #4]
   13146:	f004 f94b 	bl	173e0 <rpc_at_client_message_free>
   1314a:	2523      	movs	r5, #35	; 0x23
   1314c:	6027      	str	r7, [r4, #0]
   1314e:	4628      	mov	r0, r5
   13150:	f7fe fc14 	bl	1197c <bsd_os_errno_set>
   13154:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13158:	e7e5      	b.n	13126 <at_interface_close+0x56>
   1315a:	2516      	movs	r5, #22
   1315c:	e7f7      	b.n	1314e <at_interface_close+0x7e>
   1315e:	bf00      	nop

00013160 <at_interface_read>:
   13160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13164:	b084      	sub	sp, #16
   13166:	4688      	mov	r8, r1
   13168:	4615      	mov	r5, r2
   1316a:	461e      	mov	r6, r3
   1316c:	4607      	mov	r7, r0
   1316e:	f005 fd83 	bl	18c78 <interface_socket_from_handle_get>
   13172:	2800      	cmp	r0, #0
   13174:	d049      	beq.n	1320a <at_interface_read+0xaa>
   13176:	2300      	movs	r3, #0
   13178:	e9cd 8500 	strd	r8, r5, [sp]
   1317c:	f016 0502 	ands.w	r5, r6, #2
   13180:	4604      	mov	r4, r0
   13182:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13186:	d00e      	beq.n	131a6 <at_interface_read+0x46>
   13188:	e01e      	b.n	131c8 <at_interface_read+0x68>
   1318a:	2d00      	cmp	r5, #0
   1318c:	d133      	bne.n	131f6 <at_interface_read+0x96>
   1318e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13192:	6a23      	ldr	r3, [r4, #32]
   13194:	4611      	mov	r1, r2
   13196:	2b00      	cmp	r3, #0
   13198:	bf08      	it	eq
   1319a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1319e:	4638      	mov	r0, r7
   131a0:	f005 fcfe 	bl	18ba0 <interface_socket_wait>
   131a4:	4605      	mov	r5, r0
   131a6:	6823      	ldr	r3, [r4, #0]
   131a8:	69e0      	ldr	r0, [r4, #28]
   131aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   131ae:	6023      	str	r3, [r4, #0]
   131b0:	6803      	ldr	r3, [r0, #0]
   131b2:	4632      	mov	r2, r6
   131b4:	689b      	ldr	r3, [r3, #8]
   131b6:	4669      	mov	r1, sp
   131b8:	4798      	blx	r3
   131ba:	f1b0 0800 	subs.w	r8, r0, #0
   131be:	dbe4      	blt.n	1318a <at_interface_read+0x2a>
   131c0:	4640      	mov	r0, r8
   131c2:	b004      	add	sp, #16
   131c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131c8:	6803      	ldr	r3, [r0, #0]
   131ca:	69c0      	ldr	r0, [r0, #28]
   131cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   131d0:	6023      	str	r3, [r4, #0]
   131d2:	6803      	ldr	r3, [r0, #0]
   131d4:	4632      	mov	r2, r6
   131d6:	689b      	ldr	r3, [r3, #8]
   131d8:	4669      	mov	r1, sp
   131da:	4798      	blx	r3
   131dc:	f1b0 0800 	subs.w	r8, r0, #0
   131e0:	daee      	bge.n	131c0 <at_interface_read+0x60>
   131e2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   131e6:	d1eb      	bne.n	131c0 <at_interface_read+0x60>
   131e8:	2023      	movs	r0, #35	; 0x23
   131ea:	f7fe fbc7 	bl	1197c <bsd_os_errno_set>
   131ee:	4640      	mov	r0, r8
   131f0:	b004      	add	sp, #16
   131f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131f6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   131fa:	d1e1      	bne.n	131c0 <at_interface_read+0x60>
   131fc:	4628      	mov	r0, r5
   131fe:	f7fe fbbd 	bl	1197c <bsd_os_errno_set>
   13202:	4640      	mov	r0, r8
   13204:	b004      	add	sp, #16
   13206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1320a:	2016      	movs	r0, #22
   1320c:	f7fe fbb6 	bl	1197c <bsd_os_errno_set>
   13210:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13214:	e7d4      	b.n	131c0 <at_interface_read+0x60>
   13216:	bf00      	nop

00013218 <at_interface_getopt>:
   13218:	f005 bd8c 	b.w	18d34 <interface_socket_getopt>

0001321c <at_interface_setopt>:
   1321c:	f005 bd54 	b.w	18cc8 <interface_socket_setopt>

00013220 <rpc_at_event_handler>:
   13220:	b570      	push	{r4, r5, r6, lr}
   13222:	4606      	mov	r6, r0
   13224:	b084      	sub	sp, #16
   13226:	68c0      	ldr	r0, [r0, #12]
   13228:	460d      	mov	r5, r1
   1322a:	f005 fd25 	bl	18c78 <interface_socket_from_handle_get>
   1322e:	4604      	mov	r4, r0
   13230:	b348      	cbz	r0, 13286 <rpc_at_event_handler+0x66>
   13232:	6803      	ldr	r3, [r0, #0]
   13234:	b29b      	uxth	r3, r3
   13236:	2b01      	cmp	r3, #1
   13238:	d01f      	beq.n	1327a <rpc_at_event_handler+0x5a>
   1323a:	6803      	ldr	r3, [r0, #0]
   1323c:	b29b      	uxth	r3, r3
   1323e:	2b0d      	cmp	r3, #13
   13240:	d029      	beq.n	13296 <rpc_at_event_handler+0x76>
   13242:	6803      	ldr	r3, [r0, #0]
   13244:	b29b      	uxth	r3, r3
   13246:	2b02      	cmp	r3, #2
   13248:	d02d      	beq.n	132a6 <rpc_at_event_handler+0x86>
   1324a:	3d03      	subs	r5, #3
   1324c:	2d01      	cmp	r5, #1
   1324e:	d817      	bhi.n	13280 <rpc_at_event_handler+0x60>
   13250:	2500      	movs	r5, #0
   13252:	6873      	ldr	r3, [r6, #4]
   13254:	6832      	ldr	r2, [r6, #0]
   13256:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1325a:	e9cd 2300 	strd	r2, r3, [sp]
   1325e:	69e0      	ldr	r0, [r4, #28]
   13260:	4669      	mov	r1, sp
   13262:	6803      	ldr	r3, [r0, #0]
   13264:	685b      	ldr	r3, [r3, #4]
   13266:	4798      	blx	r3
   13268:	3001      	adds	r0, #1
   1326a:	d019      	beq.n	132a0 <rpc_at_event_handler+0x80>
   1326c:	4628      	mov	r0, r5
   1326e:	6823      	ldr	r3, [r4, #0]
   13270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13274:	6023      	str	r3, [r4, #0]
   13276:	b004      	add	sp, #16
   13278:	bd70      	pop	{r4, r5, r6, pc}
   1327a:	2d02      	cmp	r5, #2
   1327c:	d1e5      	bne.n	1324a <rpc_at_event_handler+0x2a>
   1327e:	6005      	str	r5, [r0, #0]
   13280:	2000      	movs	r0, #0
   13282:	b004      	add	sp, #16
   13284:	bd70      	pop	{r4, r5, r6, pc}
   13286:	6830      	ldr	r0, [r6, #0]
   13288:	2800      	cmp	r0, #0
   1328a:	d0f9      	beq.n	13280 <rpc_at_event_handler+0x60>
   1328c:	f004 f8b0 	bl	173f0 <rpc_at_client_data_free>
   13290:	4620      	mov	r0, r4
   13292:	b004      	add	sp, #16
   13294:	bd70      	pop	{r4, r5, r6, pc}
   13296:	2d02      	cmp	r5, #2
   13298:	d1d7      	bne.n	1324a <rpc_at_event_handler+0x2a>
   1329a:	230e      	movs	r3, #14
   1329c:	6003      	str	r3, [r0, #0]
   1329e:	e7ef      	b.n	13280 <rpc_at_event_handler+0x60>
   132a0:	2002      	movs	r0, #2
   132a2:	b004      	add	sp, #16
   132a4:	bd70      	pop	{r4, r5, r6, pc}
   132a6:	6803      	ldr	r3, [r0, #0]
   132a8:	029b      	lsls	r3, r3, #10
   132aa:	d5ce      	bpl.n	1324a <rpc_at_event_handler+0x2a>
   132ac:	2d02      	cmp	r5, #2
   132ae:	d1cc      	bne.n	1324a <rpc_at_event_handler+0x2a>
   132b0:	6803      	ldr	r3, [r0, #0]
   132b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   132b6:	6003      	str	r3, [r0, #0]
   132b8:	6803      	ldr	r3, [r0, #0]
   132ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   132be:	6003      	str	r3, [r0, #0]
   132c0:	e7de      	b.n	13280 <rpc_at_event_handler+0x60>
   132c2:	bf00      	nop

000132c4 <dfu_client_event_handler>:
   132c4:	f850 1b08 	ldr.w	r1, [r0], #8
   132c8:	0c09      	lsrs	r1, r1, #16
   132ca:	f001 b891 	b.w	143f0 <rpc_dfu_event_handler>
   132ce:	bf00      	nop

000132d0 <rpc_dfu_client_init>:
   132d0:	4801      	ldr	r0, [pc, #4]	; (132d8 <rpc_dfu_client_init+0x8>)
   132d2:	f005 be2f 	b.w	18f34 <rpc_client_register>
   132d6:	bf00      	nop
   132d8:	0001f5b8 	.word	0x0001f5b8

000132dc <rpc_dfu_client_request_alloc>:
   132dc:	2300      	movs	r3, #0
   132de:	b510      	push	{r4, lr}
   132e0:	b082      	sub	sp, #8
   132e2:	9301      	str	r3, [sp, #4]
   132e4:	b158      	cbz	r0, 132fe <rpc_dfu_client_request_alloc+0x22>
   132e6:	4604      	mov	r4, r0
   132e8:	aa01      	add	r2, sp, #4
   132ea:	2006      	movs	r0, #6
   132ec:	f006 f85a 	bl	193a4 <rpc_message_alloc>
   132f0:	b918      	cbnz	r0, 132fa <rpc_dfu_client_request_alloc+0x1e>
   132f2:	9b01      	ldr	r3, [sp, #4]
   132f4:	b10b      	cbz	r3, 132fa <rpc_dfu_client_request_alloc+0x1e>
   132f6:	3308      	adds	r3, #8
   132f8:	6023      	str	r3, [r4, #0]
   132fa:	b002      	add	sp, #8
   132fc:	bd10      	pop	{r4, pc}
   132fe:	2007      	movs	r0, #7
   13300:	b002      	add	sp, #8
   13302:	bd10      	pop	{r4, pc}

00013304 <rpc_dfu_client_request_send>:
   13304:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   13308:	d10b      	bne.n	13322 <rpc_dfu_client_request_send+0x1e>
   1330a:	b160      	cbz	r0, 13326 <rpc_dfu_client_request_send+0x22>
   1330c:	4603      	mov	r3, r0
   1330e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   13312:	2006      	movs	r0, #6
   13314:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13318:	f843 1d08 	str.w	r1, [r3, #-8]!
   1331c:	4619      	mov	r1, r3
   1331e:	f006 b829 	b.w	19374 <rpc_message_send>
   13322:	200f      	movs	r0, #15
   13324:	4770      	bx	lr
   13326:	2007      	movs	r0, #7
   13328:	4770      	bx	lr
   1332a:	bf00      	nop

0001332c <rpc_dfu_client_message_free>:
   1332c:	b120      	cbz	r0, 13338 <rpc_dfu_client_message_free+0xc>
   1332e:	f1a0 0108 	sub.w	r1, r0, #8
   13332:	2006      	movs	r0, #6
   13334:	f006 b868 	b.w	19408 <rpc_message_free>
   13338:	2007      	movs	r0, #7
   1333a:	4770      	bx	lr

0001333c <rpc_dfu_client_data_free>:
   1333c:	b118      	cbz	r0, 13346 <rpc_dfu_client_data_free+0xa>
   1333e:	4601      	mov	r1, r0
   13340:	2006      	movs	r0, #6
   13342:	f006 b973 	b.w	1962c <rpc_message_data_free>
   13346:	2007      	movs	r0, #7
   13348:	4770      	bx	lr
   1334a:	bf00      	nop

0001334c <mem_free>:
   1334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13350:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 13420 <mem_free+0xd4>
   13354:	b083      	sub	sp, #12
   13356:	9000      	str	r0, [sp, #0]
   13358:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1335c:	f8dc 3008 	ldr.w	r3, [ip, #8]
   13360:	b12b      	cbz	r3, 1336e <mem_free+0x22>
   13362:	f8dc 2000 	ldr.w	r2, [ip]
   13366:	9c00      	ldr	r4, [sp, #0]
   13368:	7810      	ldrb	r0, [r2, #0]
   1336a:	42a0      	cmp	r0, r4
   1336c:	d006      	beq.n	1337c <mem_free+0x30>
   1336e:	f10c 0c0c 	add.w	ip, ip, #12
   13372:	45e3      	cmp	fp, ip
   13374:	d1f2      	bne.n	1335c <mem_free+0x10>
   13376:	b003      	add	sp, #12
   13378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1337c:	f8dc a004 	ldr.w	sl, [ip, #4]
   13380:	eb03 080a 	add.w	r8, r3, sl
   13384:	45c2      	cmp	sl, r8
   13386:	d2f2      	bcs.n	1336e <mem_free+0x22>
   13388:	6853      	ldr	r3, [r2, #4]
   1338a:	f8cd c004 	str.w	ip, [sp, #4]
   1338e:	46d6      	mov	lr, sl
   13390:	469c      	mov	ip, r3
   13392:	f8d2 9010 	ldr.w	r9, [r2, #16]
   13396:	8997      	ldrh	r7, [r2, #12]
   13398:	ebae 000a 	sub.w	r0, lr, sl
   1339c:	b3df      	cbz	r7, 13416 <mem_free+0xca>
   1339e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   133a2:	4290      	cmp	r0, r2
   133a4:	d31c      	bcc.n	133e0 <mem_free+0x94>
   133a6:	4665      	mov	r5, ip
   133a8:	2400      	movs	r4, #0
   133aa:	f109 0304 	add.w	r3, r9, #4
   133ae:	e003      	b.n	133b8 <mem_free+0x6c>
   133b0:	885a      	ldrh	r2, [r3, #2]
   133b2:	3304      	adds	r3, #4
   133b4:	4282      	cmp	r2, r0
   133b6:	d815      	bhi.n	133e4 <mem_free+0x98>
   133b8:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   133bc:	3401      	adds	r4, #1
   133be:	42a7      	cmp	r7, r4
   133c0:	fb02 5506 	mla	r5, r2, r6, r5
   133c4:	eba0 0002 	sub.w	r0, r0, r2
   133c8:	461e      	mov	r6, r3
   133ca:	d1f1      	bne.n	133b0 <mem_free+0x64>
   133cc:	2000      	movs	r0, #0
   133ce:	4281      	cmp	r1, r0
   133d0:	d00d      	beq.n	133ee <mem_free+0xa2>
   133d2:	f10e 0e01 	add.w	lr, lr, #1
   133d6:	45f0      	cmp	r8, lr
   133d8:	d1de      	bne.n	13398 <mem_free+0x4c>
   133da:	f8dd c004 	ldr.w	ip, [sp, #4]
   133de:	e7c6      	b.n	1336e <mem_free+0x22>
   133e0:	4665      	mov	r5, ip
   133e2:	464e      	mov	r6, r9
   133e4:	8833      	ldrh	r3, [r6, #0]
   133e6:	fb00 5003 	mla	r0, r0, r3, r5
   133ea:	4281      	cmp	r1, r0
   133ec:	d1f1      	bne.n	133d2 <mem_free+0x86>
   133ee:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   133f2:	f8dd c004 	ldr.w	ip, [sp, #4]
   133f6:	d0ba      	beq.n	1336e <mem_free+0x22>
   133f8:	2301      	movs	r3, #1
   133fa:	4a08      	ldr	r2, [pc, #32]	; (1341c <mem_free+0xd0>)
   133fc:	ea4f 115e 	mov.w	r1, lr, lsr #5
   13400:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   13404:	f00e 0e1f 	and.w	lr, lr, #31
   13408:	fa03 fe0e 	lsl.w	lr, r3, lr
   1340c:	ea4e 0000 	orr.w	r0, lr, r0
   13410:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   13414:	e7af      	b.n	13376 <mem_free+0x2a>
   13416:	4638      	mov	r0, r7
   13418:	e7d9      	b.n	133ce <mem_free+0x82>
   1341a:	bf00      	nop
   1341c:	200204d4 	.word	0x200204d4
   13420:	20020518 	.word	0x20020518

00013424 <mem_alloc.constprop.5>:
   13424:	2800      	cmp	r0, #0
   13426:	d050      	beq.n	134ca <mem_alloc.constprop.5+0xa6>
   13428:	4b6d      	ldr	r3, [pc, #436]	; (135e0 <mem_alloc.constprop.5+0x1bc>)
   1342a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1342e:	4290      	cmp	r0, r2
   13430:	d84b      	bhi.n	134ca <mem_alloc.constprop.5+0xa6>
   13432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13436:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1343a:	b083      	sub	sp, #12
   1343c:	f1bb 0f00 	cmp.w	fp, #0
   13440:	d054      	beq.n	134ec <mem_alloc.constprop.5+0xc8>
   13442:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   13446:	4691      	mov	r9, r2
   13448:	2600      	movs	r6, #0
   1344a:	f04f 0812 	mov.w	r8, #18
   1344e:	4f65      	ldr	r7, [pc, #404]	; (135e4 <mem_alloc.constprop.5+0x1c0>)
   13450:	9201      	str	r2, [sp, #4]
   13452:	f10b 0e11 	add.w	lr, fp, #17
   13456:	eb06 0209 	add.w	r2, r6, r9
   1345a:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1345e:	3201      	adds	r2, #1
   13460:	0852      	lsrs	r2, r2, #1
   13462:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   13466:	f102 0112 	add.w	r1, r2, #18
   1346a:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1346e:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   13472:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   13476:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1347a:	f8dc c004 	ldr.w	ip, [ip, #4]
   1347e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13482:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13486:	f8da a010 	ldr.w	sl, [sl, #16]
   1348a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1348e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   13492:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   13496:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1349a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1349e:	6849      	ldr	r1, [r1, #4]
   134a0:	692d      	ldr	r5, [r5, #16]
   134a2:	6924      	ldr	r4, [r4, #16]
   134a4:	f8dc c004 	ldr.w	ip, [ip, #4]
   134a8:	4550      	cmp	r0, sl
   134aa:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   134ae:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   134b2:	d915      	bls.n	134e0 <mem_alloc.constprop.5+0xbc>
   134b4:	4288      	cmp	r0, r1
   134b6:	d211      	bcs.n	134dc <mem_alloc.constprop.5+0xb8>
   134b8:	42a8      	cmp	r0, r5
   134ba:	d908      	bls.n	134ce <mem_alloc.constprop.5+0xaa>
   134bc:	1c56      	adds	r6, r2, #1
   134be:	45b1      	cmp	r9, r6
   134c0:	f0c0 8087 	bcc.w	135d2 <mem_alloc.constprop.5+0x1ae>
   134c4:	f102 0813 	add.w	r8, r2, #19
   134c8:	e7c5      	b.n	13456 <mem_alloc.constprop.5+0x32>
   134ca:	2000      	movs	r0, #0
   134cc:	4770      	bx	lr
   134ce:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   134d2:	454e      	cmp	r6, r9
   134d4:	d87d      	bhi.n	135d2 <mem_alloc.constprop.5+0x1ae>
   134d6:	f102 0e11 	add.w	lr, r2, #17
   134da:	e7bc      	b.n	13456 <mem_alloc.constprop.5+0x32>
   134dc:	f109 0601 	add.w	r6, r9, #1
   134e0:	45b3      	cmp	fp, r6
   134e2:	d007      	beq.n	134f4 <mem_alloc.constprop.5+0xd0>
   134e4:	2e10      	cmp	r6, #16
   134e6:	d001      	beq.n	134ec <mem_alloc.constprop.5+0xc8>
   134e8:	45b3      	cmp	fp, r6
   134ea:	d808      	bhi.n	134fe <mem_alloc.constprop.5+0xda>
   134ec:	2000      	movs	r0, #0
   134ee:	b003      	add	sp, #12
   134f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134f4:	9a01      	ldr	r2, [sp, #4]
   134f6:	2a10      	cmp	r2, #16
   134f8:	bf18      	it	ne
   134fa:	4616      	movne	r6, r2
   134fc:	d0f6      	beq.n	134ec <mem_alloc.constprop.5+0xc8>
   134fe:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 135e8 <mem_alloc.constprop.5+0x1c4>
   13502:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   13506:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1350a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1350e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   13512:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   13516:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1351a:	691d      	ldr	r5, [r3, #16]
   1351c:	2c00      	cmp	r4, #0
   1351e:	d056      	beq.n	135ce <mem_alloc.constprop.5+0x1aa>
   13520:	462a      	mov	r2, r5
   13522:	4670      	mov	r0, lr
   13524:	00a4      	lsls	r4, r4, #2
   13526:	eb05 0904 	add.w	r9, r5, r4
   1352a:	8851      	ldrh	r1, [r2, #2]
   1352c:	3204      	adds	r2, #4
   1352e:	4591      	cmp	r9, r2
   13530:	4408      	add	r0, r1
   13532:	d1fa      	bne.n	1352a <mem_alloc.constprop.5+0x106>
   13534:	1929      	adds	r1, r5, r4
   13536:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1353a:	4482      	add	sl, r0
   1353c:	4582      	cmp	sl, r0
   1353e:	d918      	bls.n	13572 <mem_alloc.constprop.5+0x14e>
   13540:	0941      	lsrs	r1, r0, #5
   13542:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   13546:	f000 041f 	and.w	r4, r0, #31
   1354a:	fa22 f904 	lsr.w	r9, r2, r4
   1354e:	f019 0f01 	tst.w	r9, #1
   13552:	d007      	beq.n	13564 <mem_alloc.constprop.5+0x140>
   13554:	e013      	b.n	1357e <mem_alloc.constprop.5+0x15a>
   13556:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1355a:	fa22 f904 	lsr.w	r9, r2, r4
   1355e:	f019 0f01 	tst.w	r9, #1
   13562:	d10c      	bne.n	1357e <mem_alloc.constprop.5+0x15a>
   13564:	3001      	adds	r0, #1
   13566:	4582      	cmp	sl, r0
   13568:	ea4f 1150 	mov.w	r1, r0, lsr #5
   1356c:	f000 041f 	and.w	r4, r0, #31
   13570:	d1f1      	bne.n	13556 <mem_alloc.constprop.5+0x132>
   13572:	3601      	adds	r6, #1
   13574:	455e      	cmp	r6, fp
   13576:	f108 0808 	add.w	r8, r8, #8
   1357a:	d3c4      	bcc.n	13506 <mem_alloc.constprop.5+0xe2>
   1357c:	e7b6      	b.n	134ec <mem_alloc.constprop.5+0xc8>
   1357e:	2601      	movs	r6, #1
   13580:	fa06 f404 	lsl.w	r4, r6, r4
   13584:	899e      	ldrh	r6, [r3, #12]
   13586:	ea22 0204 	bic.w	r2, r2, r4
   1358a:	eba0 000e 	sub.w	r0, r0, lr
   1358e:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   13592:	685c      	ldr	r4, [r3, #4]
   13594:	2e00      	cmp	r6, #0
   13596:	d0a9      	beq.n	134ec <mem_alloc.constprop.5+0xc8>
   13598:	886a      	ldrh	r2, [r5, #2]
   1359a:	4282      	cmp	r2, r0
   1359c:	d811      	bhi.n	135c2 <mem_alloc.constprop.5+0x19e>
   1359e:	2100      	movs	r1, #0
   135a0:	1d2b      	adds	r3, r5, #4
   135a2:	e003      	b.n	135ac <mem_alloc.constprop.5+0x188>
   135a4:	885a      	ldrh	r2, [r3, #2]
   135a6:	3304      	adds	r3, #4
   135a8:	4282      	cmp	r2, r0
   135aa:	d80a      	bhi.n	135c2 <mem_alloc.constprop.5+0x19e>
   135ac:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   135b0:	3101      	adds	r1, #1
   135b2:	428e      	cmp	r6, r1
   135b4:	fb02 4405 	mla	r4, r2, r5, r4
   135b8:	eba0 0002 	sub.w	r0, r0, r2
   135bc:	461d      	mov	r5, r3
   135be:	d1f1      	bne.n	135a4 <mem_alloc.constprop.5+0x180>
   135c0:	e794      	b.n	134ec <mem_alloc.constprop.5+0xc8>
   135c2:	882b      	ldrh	r3, [r5, #0]
   135c4:	fb00 4003 	mla	r0, r0, r3, r4
   135c8:	b003      	add	sp, #12
   135ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135ce:	4670      	mov	r0, lr
   135d0:	e7b0      	b.n	13534 <mem_alloc.constprop.5+0x110>
   135d2:	f1bb 0f10 	cmp.w	fp, #16
   135d6:	bf08      	it	eq
   135d8:	260f      	moveq	r6, #15
   135da:	d090      	beq.n	134fe <mem_alloc.constprop.5+0xda>
   135dc:	e786      	b.n	134ec <mem_alloc.constprop.5+0xc8>
   135de:	bf00      	nop
   135e0:	20020554 	.word	0x20020554
   135e4:	20020518 	.word	0x20020518
   135e8:	200204d4 	.word	0x200204d4

000135ec <mem_alloc.constprop.4>:
   135ec:	2800      	cmp	r0, #0
   135ee:	d04c      	beq.n	1368a <mem_alloc.constprop.4+0x9e>
   135f0:	4b6b      	ldr	r3, [pc, #428]	; (137a0 <mem_alloc.constprop.4+0x1b4>)
   135f2:	681a      	ldr	r2, [r3, #0]
   135f4:	4290      	cmp	r0, r2
   135f6:	d848      	bhi.n	1368a <mem_alloc.constprop.4+0x9e>
   135f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135fc:	685f      	ldr	r7, [r3, #4]
   135fe:	b083      	sub	sp, #12
   13600:	9700      	str	r7, [sp, #0]
   13602:	2f00      	cmp	r7, #0
   13604:	d051      	beq.n	136aa <mem_alloc.constprop.4+0xbe>
   13606:	1e7a      	subs	r2, r7, #1
   13608:	4696      	mov	lr, r2
   1360a:	2100      	movs	r1, #0
   1360c:	f04f 0c01 	mov.w	ip, #1
   13610:	4c64      	ldr	r4, [pc, #400]	; (137a4 <mem_alloc.constprop.4+0x1b8>)
   13612:	9201      	str	r2, [sp, #4]
   13614:	eb01 020e 	add.w	r2, r1, lr
   13618:	3201      	adds	r2, #1
   1361a:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   1361e:	0852      	lsrs	r2, r2, #1
   13620:	f102 0801 	add.w	r8, r2, #1
   13624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13628:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   1362c:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   13630:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   13634:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   13638:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   1363c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   13640:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   13644:	f8da a010 	ldr.w	sl, [sl, #16]
   13648:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1364c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   13650:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   13654:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   13658:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   1365c:	6936      	ldr	r6, [r6, #16]
   1365e:	f8db b004 	ldr.w	fp, [fp, #4]
   13662:	692d      	ldr	r5, [r5, #16]
   13664:	f8d9 9004 	ldr.w	r9, [r9, #4]
   13668:	4550      	cmp	r0, sl
   1366a:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1366e:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   13672:	d913      	bls.n	1369c <mem_alloc.constprop.4+0xb0>
   13674:	42a8      	cmp	r0, r5
   13676:	d210      	bcs.n	1369a <mem_alloc.constprop.4+0xae>
   13678:	42b0      	cmp	r0, r6
   1367a:	d908      	bls.n	1368e <mem_alloc.constprop.4+0xa2>
   1367c:	45c6      	cmp	lr, r8
   1367e:	4641      	mov	r1, r8
   13680:	f0c0 8087 	bcc.w	13792 <mem_alloc.constprop.4+0x1a6>
   13684:	f108 0c01 	add.w	ip, r8, #1
   13688:	e7c4      	b.n	13614 <mem_alloc.constprop.4+0x28>
   1368a:	2000      	movs	r0, #0
   1368c:	4770      	bx	lr
   1368e:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   13692:	4571      	cmp	r1, lr
   13694:	d87d      	bhi.n	13792 <mem_alloc.constprop.4+0x1a6>
   13696:	4617      	mov	r7, r2
   13698:	e7bc      	b.n	13614 <mem_alloc.constprop.4+0x28>
   1369a:	4639      	mov	r1, r7
   1369c:	9a00      	ldr	r2, [sp, #0]
   1369e:	428a      	cmp	r2, r1
   136a0:	d007      	beq.n	136b2 <mem_alloc.constprop.4+0xc6>
   136a2:	2910      	cmp	r1, #16
   136a4:	d001      	beq.n	136aa <mem_alloc.constprop.4+0xbe>
   136a6:	428a      	cmp	r2, r1
   136a8:	d808      	bhi.n	136bc <mem_alloc.constprop.4+0xd0>
   136aa:	2000      	movs	r0, #0
   136ac:	b003      	add	sp, #12
   136ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b2:	9a01      	ldr	r2, [sp, #4]
   136b4:	2a10      	cmp	r2, #16
   136b6:	bf18      	it	ne
   136b8:	4611      	movne	r1, r2
   136ba:	d0f6      	beq.n	136aa <mem_alloc.constprop.4+0xbe>
   136bc:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 137a8 <mem_alloc.constprop.4+0x1bc>
   136c0:	f8dd 9000 	ldr.w	r9, [sp]
   136c4:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   136c8:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   136cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   136d0:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   136d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   136d8:	f8d2 e004 	ldr.w	lr, [r2, #4]
   136dc:	691f      	ldr	r7, [r3, #16]
   136de:	2e00      	cmp	r6, #0
   136e0:	d055      	beq.n	1378e <mem_alloc.constprop.4+0x1a2>
   136e2:	463a      	mov	r2, r7
   136e4:	4670      	mov	r0, lr
   136e6:	00b6      	lsls	r6, r6, #2
   136e8:	eb07 0a06 	add.w	sl, r7, r6
   136ec:	8855      	ldrh	r5, [r2, #2]
   136ee:	3204      	adds	r2, #4
   136f0:	4592      	cmp	sl, r2
   136f2:	4428      	add	r0, r5
   136f4:	d1fa      	bne.n	136ec <mem_alloc.constprop.4+0x100>
   136f6:	19bd      	adds	r5, r7, r6
   136f8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   136fc:	4483      	add	fp, r0
   136fe:	4583      	cmp	fp, r0
   13700:	d918      	bls.n	13734 <mem_alloc.constprop.4+0x148>
   13702:	0945      	lsrs	r5, r0, #5
   13704:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   13708:	f000 061f 	and.w	r6, r0, #31
   1370c:	fa22 fa06 	lsr.w	sl, r2, r6
   13710:	f01a 0f01 	tst.w	sl, #1
   13714:	d007      	beq.n	13726 <mem_alloc.constprop.4+0x13a>
   13716:	e013      	b.n	13740 <mem_alloc.constprop.4+0x154>
   13718:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1371c:	fa22 fa06 	lsr.w	sl, r2, r6
   13720:	f01a 0f01 	tst.w	sl, #1
   13724:	d10c      	bne.n	13740 <mem_alloc.constprop.4+0x154>
   13726:	3001      	adds	r0, #1
   13728:	4583      	cmp	fp, r0
   1372a:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1372e:	f000 061f 	and.w	r6, r0, #31
   13732:	d1f1      	bne.n	13718 <mem_alloc.constprop.4+0x12c>
   13734:	3101      	adds	r1, #1
   13736:	4549      	cmp	r1, r9
   13738:	f108 0808 	add.w	r8, r8, #8
   1373c:	d3c4      	bcc.n	136c8 <mem_alloc.constprop.4+0xdc>
   1373e:	e7b4      	b.n	136aa <mem_alloc.constprop.4+0xbe>
   13740:	2101      	movs	r1, #1
   13742:	40b1      	lsls	r1, r6
   13744:	899e      	ldrh	r6, [r3, #12]
   13746:	ea22 0201 	bic.w	r2, r2, r1
   1374a:	eba0 000e 	sub.w	r0, r0, lr
   1374e:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   13752:	685c      	ldr	r4, [r3, #4]
   13754:	2e00      	cmp	r6, #0
   13756:	d0a8      	beq.n	136aa <mem_alloc.constprop.4+0xbe>
   13758:	887a      	ldrh	r2, [r7, #2]
   1375a:	4282      	cmp	r2, r0
   1375c:	d811      	bhi.n	13782 <mem_alloc.constprop.4+0x196>
   1375e:	2100      	movs	r1, #0
   13760:	1d3b      	adds	r3, r7, #4
   13762:	e003      	b.n	1376c <mem_alloc.constprop.4+0x180>
   13764:	885a      	ldrh	r2, [r3, #2]
   13766:	3304      	adds	r3, #4
   13768:	4282      	cmp	r2, r0
   1376a:	d80a      	bhi.n	13782 <mem_alloc.constprop.4+0x196>
   1376c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   13770:	3101      	adds	r1, #1
   13772:	428e      	cmp	r6, r1
   13774:	eba0 0002 	sub.w	r0, r0, r2
   13778:	fb02 4405 	mla	r4, r2, r5, r4
   1377c:	461f      	mov	r7, r3
   1377e:	d1f1      	bne.n	13764 <mem_alloc.constprop.4+0x178>
   13780:	e793      	b.n	136aa <mem_alloc.constprop.4+0xbe>
   13782:	883b      	ldrh	r3, [r7, #0]
   13784:	fb00 4003 	mla	r0, r0, r3, r4
   13788:	b003      	add	sp, #12
   1378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1378e:	4670      	mov	r0, lr
   13790:	e7b1      	b.n	136f6 <mem_alloc.constprop.4+0x10a>
   13792:	9a00      	ldr	r2, [sp, #0]
   13794:	2a10      	cmp	r2, #16
   13796:	bf08      	it	eq
   13798:	210f      	moveq	r1, #15
   1379a:	d08f      	beq.n	136bc <mem_alloc.constprop.4+0xd0>
   1379c:	e785      	b.n	136aa <mem_alloc.constprop.4+0xbe>
   1379e:	bf00      	nop
   137a0:	20020554 	.word	0x20020554
   137a4:	20020518 	.word	0x20020518
   137a8:	200204d4 	.word	0x200204d4

000137ac <nrf_mem_init>:
   137ac:	b570      	push	{r4, r5, r6, lr}
   137ae:	2200      	movs	r2, #0
   137b0:	2501      	movs	r5, #1
   137b2:	4833      	ldr	r0, [pc, #204]	; (13880 <nrf_mem_init+0xd4>)
   137b4:	0951      	lsrs	r1, r2, #5
   137b6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   137ba:	f002 031f 	and.w	r3, r2, #31
   137be:	fa05 f303 	lsl.w	r3, r5, r3
   137c2:	3201      	adds	r2, #1
   137c4:	4323      	orrs	r3, r4
   137c6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   137ca:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   137ce:	d1f1      	bne.n	137b4 <nrf_mem_init+0x8>
   137d0:	2400      	movs	r4, #0
   137d2:	4b2c      	ldr	r3, [pc, #176]	; (13884 <nrf_mem_init+0xd8>)
   137d4:	4621      	mov	r1, r4
   137d6:	223c      	movs	r2, #60	; 0x3c
   137d8:	482b      	ldr	r0, [pc, #172]	; (13888 <nrf_mem_init+0xdc>)
   137da:	601c      	str	r4, [r3, #0]
   137dc:	f009 ff41 	bl	1d662 <memset>
   137e0:	2110      	movs	r1, #16
   137e2:	2205      	movs	r2, #5
   137e4:	4b29      	ldr	r3, [pc, #164]	; (1388c <nrf_mem_init+0xe0>)
   137e6:	4e2a      	ldr	r6, [pc, #168]	; (13890 <nrf_mem_init+0xe4>)
   137e8:	e9c3 4400 	strd	r4, r4, [r3]
   137ec:	60d9      	str	r1, [r3, #12]
   137ee:	6159      	str	r1, [r3, #20]
   137f0:	61d9      	str	r1, [r3, #28]
   137f2:	6259      	str	r1, [r3, #36]	; 0x24
   137f4:	62d9      	str	r1, [r3, #44]	; 0x2c
   137f6:	6359      	str	r1, [r3, #52]	; 0x34
   137f8:	63d9      	str	r1, [r3, #60]	; 0x3c
   137fa:	6459      	str	r1, [r3, #68]	; 0x44
   137fc:	64d9      	str	r1, [r3, #76]	; 0x4c
   137fe:	6559      	str	r1, [r3, #84]	; 0x54
   13800:	65d9      	str	r1, [r3, #92]	; 0x5c
   13802:	6659      	str	r1, [r3, #100]	; 0x64
   13804:	66d9      	str	r1, [r3, #108]	; 0x6c
   13806:	6759      	str	r1, [r3, #116]	; 0x74
   13808:	67d9      	str	r1, [r3, #124]	; 0x7c
   1380a:	609a      	str	r2, [r3, #8]
   1380c:	611a      	str	r2, [r3, #16]
   1380e:	619a      	str	r2, [r3, #24]
   13810:	621a      	str	r2, [r3, #32]
   13812:	629a      	str	r2, [r3, #40]	; 0x28
   13814:	631a      	str	r2, [r3, #48]	; 0x30
   13816:	639a      	str	r2, [r3, #56]	; 0x38
   13818:	641a      	str	r2, [r3, #64]	; 0x40
   1381a:	649a      	str	r2, [r3, #72]	; 0x48
   1381c:	651a      	str	r2, [r3, #80]	; 0x50
   1381e:	659a      	str	r2, [r3, #88]	; 0x58
   13820:	661a      	str	r2, [r3, #96]	; 0x60
   13822:	669a      	str	r2, [r3, #104]	; 0x68
   13824:	671a      	str	r2, [r3, #112]	; 0x70
   13826:	679a      	str	r2, [r3, #120]	; 0x78
   13828:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   1382c:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   13830:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   13834:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   13838:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   1383c:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   13840:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   13844:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   13848:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   1384c:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   13850:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   13854:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   13858:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   1385c:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   13860:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   13864:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   13868:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1386c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13870:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   13874:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   13878:	4620      	mov	r0, r4
   1387a:	7035      	strb	r5, [r6, #0]
   1387c:	bd70      	pop	{r4, r5, r6, pc}
   1387e:	bf00      	nop
   13880:	200204d4 	.word	0x200204d4
   13884:	20020514 	.word	0x20020514
   13888:	20020518 	.word	0x20020518
   1388c:	20020554 	.word	0x20020554
   13890:	2002658d 	.word	0x2002658d

00013894 <nrf_mem_register>:
   13894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13898:	4b87      	ldr	r3, [pc, #540]	; (13ab8 <nrf_mem_register+0x224>)
   1389a:	b087      	sub	sp, #28
   1389c:	781b      	ldrb	r3, [r3, #0]
   1389e:	2b00      	cmp	r3, #0
   138a0:	f000 808c 	beq.w	139bc <nrf_mem_register+0x128>
   138a4:	b328      	cbz	r0, 138f2 <nrf_mem_register+0x5e>
   138a6:	b321      	cbz	r1, 138f2 <nrf_mem_register+0x5e>
   138a8:	780b      	ldrb	r3, [r1, #0]
   138aa:	f8df 8218 	ldr.w	r8, [pc, #536]	; 13ac4 <nrf_mem_register+0x230>
   138ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   138b2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   138b6:	685b      	ldr	r3, [r3, #4]
   138b8:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   138bc:	4463      	add	r3, ip
   138be:	2b10      	cmp	r3, #16
   138c0:	d811      	bhi.n	138e6 <nrf_mem_register+0x52>
   138c2:	f04f 0a00 	mov.w	sl, #0
   138c6:	4689      	mov	r9, r1
   138c8:	4b7c      	ldr	r3, [pc, #496]	; (13abc <nrf_mem_register+0x228>)
   138ca:	4f7d      	ldr	r7, [pc, #500]	; (13ac0 <nrf_mem_register+0x22c>)
   138cc:	681b      	ldr	r3, [r3, #0]
   138ce:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   138d2:	9300      	str	r3, [sp, #0]
   138d4:	68b9      	ldr	r1, [r7, #8]
   138d6:	b191      	cbz	r1, 138fe <nrf_mem_register+0x6a>
   138d8:	f10a 0a01 	add.w	sl, sl, #1
   138dc:	f1ba 0f05 	cmp.w	sl, #5
   138e0:	f107 070c 	add.w	r7, r7, #12
   138e4:	d1f6      	bne.n	138d4 <nrf_mem_register+0x40>
   138e6:	f248 1b07 	movw	fp, #33031	; 0x8107
   138ea:	4658      	mov	r0, fp
   138ec:	b007      	add	sp, #28
   138ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f2:	f248 1b0e 	movw	fp, #33038	; 0x810e
   138f6:	4658      	mov	r0, fp
   138f8:	b007      	add	sp, #28
   138fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138fe:	f1bc 0f00 	cmp.w	ip, #0
   13902:	d061      	beq.n	139c8 <nrf_mem_register+0x134>
   13904:	460d      	mov	r5, r1
   13906:	460c      	mov	r4, r1
   13908:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1390c:	eb0e 0b03 	add.w	fp, lr, r3
   13910:	885a      	ldrh	r2, [r3, #2]
   13912:	f833 6b04 	ldrh.w	r6, [r3], #4
   13916:	4415      	add	r5, r2
   13918:	459b      	cmp	fp, r3
   1391a:	fb02 4406 	mla	r4, r2, r6, r4
   1391e:	d1f7      	bne.n	13910 <nrf_mem_register+0x7c>
   13920:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13924:	42a3      	cmp	r3, r4
   13926:	d3d7      	bcc.n	138d8 <nrf_mem_register+0x44>
   13928:	9b00      	ldr	r3, [sp, #0]
   1392a:	442b      	add	r3, r5
   1392c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13930:	d2d2      	bcs.n	138d8 <nrf_mem_register+0x44>
   13932:	4c63      	ldr	r4, [pc, #396]	; (13ac0 <nrf_mem_register+0x22c>)
   13934:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   13938:	0092      	lsls	r2, r2, #2
   1393a:	f8c0 a000 	str.w	sl, [r0]
   1393e:	18a0      	adds	r0, r4, r2
   13940:	f844 9002 	str.w	r9, [r4, r2]
   13944:	9a00      	ldr	r2, [sp, #0]
   13946:	468b      	mov	fp, r1
   13948:	e9c0 2501 	strd	r2, r5, [r0, #4]
   1394c:	f899 2001 	ldrb.w	r2, [r9, #1]
   13950:	485a      	ldr	r0, [pc, #360]	; (13abc <nrf_mem_register+0x228>)
   13952:	2a01      	cmp	r2, #1
   13954:	6003      	str	r3, [r0, #0]
   13956:	d0c8      	beq.n	138ea <nrf_mem_register+0x56>
   13958:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   1395c:	2b00      	cmp	r3, #0
   1395e:	d0c4      	beq.n	138ea <nrf_mem_register+0x56>
   13960:	2500      	movs	r5, #0
   13962:	f8cd 9004 	str.w	r9, [sp, #4]
   13966:	f8cd a00c 	str.w	sl, [sp, #12]
   1396a:	f8cd b014 	str.w	fp, [sp, #20]
   1396e:	9b01      	ldr	r3, [sp, #4]
   13970:	781f      	ldrb	r7, [r3, #0]
   13972:	691a      	ldr	r2, [r3, #16]
   13974:	013b      	lsls	r3, r7, #4
   13976:	eb03 0907 	add.w	r9, r3, r7
   1397a:	9300      	str	r3, [sp, #0]
   1397c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   13980:	6859      	ldr	r1, [r3, #4]
   13982:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   13986:	9102      	str	r1, [sp, #8]
   13988:	bb39      	cbnz	r1, 139da <nrf_mem_register+0x146>
   1398a:	9a03      	ldr	r2, [sp, #12]
   1398c:	60dd      	str	r5, [r3, #12]
   1398e:	609a      	str	r2, [r3, #8]
   13990:	9b00      	ldr	r3, [sp, #0]
   13992:	443b      	add	r3, r7
   13994:	461f      	mov	r7, r3
   13996:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1399a:	684b      	ldr	r3, [r1, #4]
   1399c:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   139a0:	3301      	adds	r3, #1
   139a2:	4294      	cmp	r4, r2
   139a4:	604b      	str	r3, [r1, #4]
   139a6:	d912      	bls.n	139ce <nrf_mem_register+0x13a>
   139a8:	9b01      	ldr	r3, [sp, #4]
   139aa:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   139ae:	899b      	ldrh	r3, [r3, #12]
   139b0:	3501      	adds	r5, #1
   139b2:	429d      	cmp	r5, r3
   139b4:	d3db      	bcc.n	1396e <nrf_mem_register+0xda>
   139b6:	f8dd b014 	ldr.w	fp, [sp, #20]
   139ba:	e796      	b.n	138ea <nrf_mem_register+0x56>
   139bc:	f248 1b08 	movw	fp, #33032	; 0x8108
   139c0:	4658      	mov	r0, fp
   139c2:	b007      	add	sp, #28
   139c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c8:	9b00      	ldr	r3, [sp, #0]
   139ca:	4665      	mov	r5, ip
   139cc:	e7ae      	b.n	1392c <nrf_mem_register+0x98>
   139ce:	9b01      	ldr	r3, [sp, #4]
   139d0:	3501      	adds	r5, #1
   139d2:	899b      	ldrh	r3, [r3, #12]
   139d4:	42ab      	cmp	r3, r5
   139d6:	d8ca      	bhi.n	1396e <nrf_mem_register+0xda>
   139d8:	e7ed      	b.n	139b6 <nrf_mem_register+0x122>
   139da:	2600      	movs	r6, #0
   139dc:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   139e0:	9504      	str	r5, [sp, #16]
   139e2:	eb06 000a 	add.w	r0, r6, sl
   139e6:	eb09 0206 	add.w	r2, r9, r6
   139ea:	3201      	adds	r2, #1
   139ec:	3001      	adds	r0, #1
   139ee:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   139f2:	0840      	lsrs	r0, r0, #1
   139f4:	4d32      	ldr	r5, [pc, #200]	; (13ac0 <nrf_mem_register+0x22c>)
   139f6:	eb09 0100 	add.w	r1, r9, r0
   139fa:	eb09 030a 	add.w	r3, r9, sl
   139fe:	3101      	adds	r1, #1
   13a00:	3301      	adds	r3, #1
   13a02:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13a06:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   13a0a:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   13a0e:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   13a12:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   13a16:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   13a1a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13a1e:	f8db b010 	ldr.w	fp, [fp, #16]
   13a22:	6852      	ldr	r2, [r2, #4]
   13a24:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   13a28:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   13a2c:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   13a30:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   13a34:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   13a38:	f8de e010 	ldr.w	lr, [lr, #16]
   13a3c:	6849      	ldr	r1, [r1, #4]
   13a3e:	f8dc c010 	ldr.w	ip, [ip, #16]
   13a42:	685b      	ldr	r3, [r3, #4]
   13a44:	4294      	cmp	r4, r2
   13a46:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   13a4a:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   13a4e:	d92d      	bls.n	13aac <nrf_mem_register+0x218>
   13a50:	429c      	cmp	r4, r3
   13a52:	d22d      	bcs.n	13ab0 <nrf_mem_register+0x21c>
   13a54:	428c      	cmp	r4, r1
   13a56:	d924      	bls.n	13aa2 <nrf_mem_register+0x20e>
   13a58:	1c46      	adds	r6, r0, #1
   13a5a:	45b2      	cmp	sl, r6
   13a5c:	d2c1      	bcs.n	139e2 <nrf_mem_register+0x14e>
   13a5e:	2610      	movs	r6, #16
   13a60:	9d04      	ldr	r5, [sp, #16]
   13a62:	9a02      	ldr	r2, [sp, #8]
   13a64:	42b2      	cmp	r2, r6
   13a66:	d911      	bls.n	13a8c <nrf_mem_register+0x1f8>
   13a68:	9b00      	ldr	r3, [sp, #0]
   13a6a:	443b      	add	r3, r7
   13a6c:	441a      	add	r2, r3
   13a6e:	4433      	add	r3, r6
   13a70:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   13a74:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   13a78:	2208      	movs	r2, #8
   13a7a:	4651      	mov	r1, sl
   13a7c:	eb0a 0002 	add.w	r0, sl, r2
   13a80:	f1aa 0a08 	sub.w	sl, sl, #8
   13a84:	f009 fdc3 	bl	1d60e <memcpy>
   13a88:	45d1      	cmp	r9, sl
   13a8a:	d1f5      	bne.n	13a78 <nrf_mem_register+0x1e4>
   13a8c:	9b00      	ldr	r3, [sp, #0]
   13a8e:	9903      	ldr	r1, [sp, #12]
   13a90:	443b      	add	r3, r7
   13a92:	4433      	add	r3, r6
   13a94:	3301      	adds	r3, #1
   13a96:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   13a9a:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   13a9e:	6055      	str	r5, [r2, #4]
   13aa0:	e776      	b.n	13990 <nrf_mem_register+0xfc>
   13aa2:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   13aa6:	4556      	cmp	r6, sl
   13aa8:	d99b      	bls.n	139e2 <nrf_mem_register+0x14e>
   13aaa:	e7d8      	b.n	13a5e <nrf_mem_register+0x1ca>
   13aac:	9d04      	ldr	r5, [sp, #16]
   13aae:	e7d8      	b.n	13a62 <nrf_mem_register+0x1ce>
   13ab0:	9d04      	ldr	r5, [sp, #16]
   13ab2:	f10a 0601 	add.w	r6, sl, #1
   13ab6:	e7d4      	b.n	13a62 <nrf_mem_register+0x1ce>
   13ab8:	2002658d 	.word	0x2002658d
   13abc:	20020514 	.word	0x20020514
   13ac0:	20020518 	.word	0x20020518
   13ac4:	20020554 	.word	0x20020554

00013ac8 <nrf_malloc>:
   13ac8:	4b03      	ldr	r3, [pc, #12]	; (13ad8 <nrf_malloc+0x10>)
   13aca:	781b      	ldrb	r3, [r3, #0]
   13acc:	b10b      	cbz	r3, 13ad2 <nrf_malloc+0xa>
   13ace:	f7ff bd8d 	b.w	135ec <mem_alloc.constprop.4>
   13ad2:	4618      	mov	r0, r3
   13ad4:	4770      	bx	lr
   13ad6:	bf00      	nop
   13ad8:	2002658d 	.word	0x2002658d

00013adc <nrf_free>:
   13adc:	4b04      	ldr	r3, [pc, #16]	; (13af0 <nrf_free+0x14>)
   13ade:	781b      	ldrb	r3, [r3, #0]
   13ae0:	b123      	cbz	r3, 13aec <nrf_free+0x10>
   13ae2:	b118      	cbz	r0, 13aec <nrf_free+0x10>
   13ae4:	4601      	mov	r1, r0
   13ae6:	2000      	movs	r0, #0
   13ae8:	f7ff bc30 	b.w	1334c <mem_free>
   13aec:	4770      	bx	lr
   13aee:	bf00      	nop
   13af0:	2002658d 	.word	0x2002658d

00013af4 <nrf_shared_malloc>:
   13af4:	4b03      	ldr	r3, [pc, #12]	; (13b04 <nrf_shared_malloc+0x10>)
   13af6:	781b      	ldrb	r3, [r3, #0]
   13af8:	b10b      	cbz	r3, 13afe <nrf_shared_malloc+0xa>
   13afa:	f7ff bc93 	b.w	13424 <mem_alloc.constprop.5>
   13afe:	4618      	mov	r0, r3
   13b00:	4770      	bx	lr
   13b02:	bf00      	nop
   13b04:	2002658d 	.word	0x2002658d

00013b08 <nrf_shared_free>:
   13b08:	4b04      	ldr	r3, [pc, #16]	; (13b1c <nrf_shared_free+0x14>)
   13b0a:	781b      	ldrb	r3, [r3, #0]
   13b0c:	b123      	cbz	r3, 13b18 <nrf_shared_free+0x10>
   13b0e:	b118      	cbz	r0, 13b18 <nrf_shared_free+0x10>
   13b10:	4601      	mov	r1, r0
   13b12:	2001      	movs	r0, #1
   13b14:	f7ff bc1a 	b.w	1334c <mem_free>
   13b18:	4770      	bx	lr
   13b1a:	bf00      	nop
   13b1c:	2002658d 	.word	0x2002658d

00013b20 <ip_client_event_handler>:
   13b20:	f850 1b08 	ldr.w	r1, [r0], #8
   13b24:	0c09      	lsrs	r1, r1, #16
   13b26:	f004 bd23 	b.w	18570 <rpc_ip_event_handler>
   13b2a:	bf00      	nop

00013b2c <rpc_ip_client_init>:
   13b2c:	4801      	ldr	r0, [pc, #4]	; (13b34 <rpc_ip_client_init+0x8>)
   13b2e:	f005 ba01 	b.w	18f34 <rpc_client_register>
   13b32:	bf00      	nop
   13b34:	0001f5c8 	.word	0x0001f5c8

00013b38 <rpc_ip_client_request_alloc>:
   13b38:	2300      	movs	r3, #0
   13b3a:	b510      	push	{r4, lr}
   13b3c:	b082      	sub	sp, #8
   13b3e:	9301      	str	r3, [sp, #4]
   13b40:	b158      	cbz	r0, 13b5a <rpc_ip_client_request_alloc+0x22>
   13b42:	4604      	mov	r4, r0
   13b44:	aa01      	add	r2, sp, #4
   13b46:	2004      	movs	r0, #4
   13b48:	f005 fc2c 	bl	193a4 <rpc_message_alloc>
   13b4c:	b918      	cbnz	r0, 13b56 <rpc_ip_client_request_alloc+0x1e>
   13b4e:	9b01      	ldr	r3, [sp, #4]
   13b50:	b10b      	cbz	r3, 13b56 <rpc_ip_client_request_alloc+0x1e>
   13b52:	3308      	adds	r3, #8
   13b54:	6023      	str	r3, [r4, #0]
   13b56:	b002      	add	sp, #8
   13b58:	bd10      	pop	{r4, pc}
   13b5a:	2007      	movs	r0, #7
   13b5c:	b002      	add	sp, #8
   13b5e:	bd10      	pop	{r4, pc}

00013b60 <rpc_ip_client_request_send>:
   13b60:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   13b64:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   13b68:	d10b      	bne.n	13b82 <rpc_ip_client_request_send+0x22>
   13b6a:	b160      	cbz	r0, 13b86 <rpc_ip_client_request_send+0x26>
   13b6c:	4603      	mov	r3, r0
   13b6e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   13b72:	2004      	movs	r0, #4
   13b74:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13b78:	f843 1d08 	str.w	r1, [r3, #-8]!
   13b7c:	4619      	mov	r1, r3
   13b7e:	f005 bbf9 	b.w	19374 <rpc_message_send>
   13b82:	200f      	movs	r0, #15
   13b84:	4770      	bx	lr
   13b86:	2007      	movs	r0, #7
   13b88:	4770      	bx	lr
   13b8a:	bf00      	nop

00013b8c <rpc_ip_client_message_free>:
   13b8c:	b120      	cbz	r0, 13b98 <rpc_ip_client_message_free+0xc>
   13b8e:	f1a0 0108 	sub.w	r1, r0, #8
   13b92:	2004      	movs	r0, #4
   13b94:	f005 bc38 	b.w	19408 <rpc_message_free>
   13b98:	2007      	movs	r0, #7
   13b9a:	4770      	bx	lr

00013b9c <rpc_ip_client_data_free>:
   13b9c:	b118      	cbz	r0, 13ba6 <rpc_ip_client_data_free+0xa>
   13b9e:	4601      	mov	r1, r0
   13ba0:	2004      	movs	r0, #4
   13ba2:	f005 bd43 	b.w	1962c <rpc_message_data_free>
   13ba6:	2007      	movs	r0, #7
   13ba8:	4770      	bx	lr
   13baa:	bf00      	nop

00013bac <secure_client_socket>:
   13bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13bb0:	460c      	mov	r4, r1
   13bb2:	680b      	ldr	r3, [r1, #0]
   13bb4:	6989      	ldr	r1, [r1, #24]
   13bb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13bba:	6023      	str	r3, [r4, #0]
   13bbc:	6822      	ldr	r2, [r4, #0]
   13bbe:	2300      	movs	r3, #0
   13bc0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   13bc4:	6022      	str	r2, [r4, #0]
   13bc6:	f247 0281 	movw	r2, #28801	; 0x7081
   13bca:	6827      	ldr	r7, [r4, #0]
   13bcc:	4606      	mov	r6, r0
   13bce:	f003 fc2d 	bl	1742c <ip_interface_request_create>
   13bd2:	2800      	cmp	r0, #0
   13bd4:	d03b      	beq.n	13c4e <secure_client_socket+0xa2>
   13bd6:	4605      	mov	r5, r0
   13bd8:	4b28      	ldr	r3, [pc, #160]	; (13c7c <secure_client_socket+0xd0>)
   13bda:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
   13bde:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13be2:	2224      	movs	r2, #36	; 0x24
   13be4:	3014      	adds	r0, #20
   13be6:	f009 fd12 	bl	1d60e <memcpy>
   13bea:	68ab      	ldr	r3, [r5, #8]
   13bec:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13c80 <secure_client_socket+0xd4>
   13bf0:	3324      	adds	r3, #36	; 0x24
   13bf2:	60ab      	str	r3, [r5, #8]
   13bf4:	6823      	ldr	r3, [r4, #0]
   13bf6:	4629      	mov	r1, r5
   13bf8:	ea03 0308 	and.w	r3, r3, r8
   13bfc:	f043 030a 	orr.w	r3, r3, #10
   13c00:	6023      	str	r3, [r4, #0]
   13c02:	f247 0281 	movw	r2, #28801	; 0x7081
   13c06:	463b      	mov	r3, r7
   13c08:	4620      	mov	r0, r4
   13c0a:	f003 fc2f 	bl	1746c <ip_interface_request_send>
   13c0e:	b960      	cbnz	r0, 13c2a <secure_client_socket+0x7e>
   13c10:	6823      	ldr	r3, [r4, #0]
   13c12:	00db      	lsls	r3, r3, #3
   13c14:	d40b      	bmi.n	13c2e <secure_client_socket+0x82>
   13c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c1e:	210b      	movs	r1, #11
   13c20:	4630      	mov	r0, r6
   13c22:	f003 fc37 	bl	17494 <ip_interface_wait>
   13c26:	b128      	cbz	r0, 13c34 <secure_client_socket+0x88>
   13c28:	6027      	str	r7, [r4, #0]
   13c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c2e:	2073      	movs	r0, #115	; 0x73
   13c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   13c38:	4630      	mov	r0, r6
   13c3a:	4611      	mov	r1, r2
   13c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c40:	f003 fc28 	bl	17494 <ip_interface_wait>
   13c44:	b130      	cbz	r0, 13c54 <secure_client_socket+0xa8>
   13c46:	2873      	cmp	r0, #115	; 0x73
   13c48:	d0ef      	beq.n	13c2a <secure_client_socket+0x7e>
   13c4a:	6027      	str	r7, [r4, #0]
   13c4c:	e7ed      	b.n	13c2a <secure_client_socket+0x7e>
   13c4e:	200c      	movs	r0, #12
   13c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c54:	6823      	ldr	r3, [r4, #0]
   13c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   13c5a:	6023      	str	r3, [r4, #0]
   13c5c:	6823      	ldr	r3, [r4, #0]
   13c5e:	ea03 0808 	and.w	r8, r3, r8
   13c62:	f048 030c 	orr.w	r3, r8, #12
   13c66:	6023      	str	r3, [r4, #0]
   13c68:	6823      	ldr	r3, [r4, #0]
   13c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13c6e:	6023      	str	r3, [r4, #0]
   13c70:	6823      	ldr	r3, [r4, #0]
   13c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13c76:	6023      	str	r3, [r4, #0]
   13c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c7c:	20020664 	.word	0x20020664
   13c80:	ffff0000 	.word	0xffff0000

00013c84 <tls_interface_init>:
   13c84:	2000      	movs	r0, #0
   13c86:	4770      	bx	lr

00013c88 <tls_interface_open>:
   13c88:	b538      	push	{r3, r4, r5, lr}
   13c8a:	f020 0308 	bic.w	r3, r0, #8
   13c8e:	2b02      	cmp	r3, #2
   13c90:	d006      	beq.n	13ca0 <tls_interface_open+0x18>
   13c92:	202f      	movs	r0, #47	; 0x2f
   13c94:	f7fd fe72 	bl	1197c <bsd_os_errno_set>
   13c98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13c9c:	4628      	mov	r0, r5
   13c9e:	bd38      	pop	{r3, r4, r5, pc}
   13ca0:	4614      	mov	r4, r2
   13ca2:	1e4a      	subs	r2, r1, #1
   13ca4:	2a01      	cmp	r2, #1
   13ca6:	d828      	bhi.n	13cfa <tls_interface_open+0x72>
   13ca8:	bb14      	cbnz	r4, 13cf0 <tls_interface_open+0x68>
   13caa:	2901      	cmp	r1, #1
   13cac:	bf06      	itte	eq
   13cae:	2301      	moveq	r3, #1
   13cb0:	f44f 7482 	moveq.w	r4, #260	; 0x104
   13cb4:	f44f 7487 	movne.w	r4, #270	; 0x10e
   13cb8:	461a      	mov	r2, r3
   13cba:	f003 fc17 	bl	174ec <ip_interface_open>
   13cbe:	1e05      	subs	r5, r0, #0
   13cc0:	db26      	blt.n	13d10 <tls_interface_open+0x88>
   13cc2:	4b15      	ldr	r3, [pc, #84]	; (13d18 <tls_interface_open+0x90>)
   13cc4:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   13cc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13ccc:	2224      	movs	r2, #36	; 0x24
   13cce:	4913      	ldr	r1, [pc, #76]	; (13d1c <tls_interface_open+0x94>)
   13cd0:	f009 fc9d 	bl	1d60e <memcpy>
   13cd4:	4628      	mov	r0, r5
   13cd6:	f004 ffcf 	bl	18c78 <interface_socket_from_handle_get>
   13cda:	6803      	ldr	r3, [r0, #0]
   13cdc:	6144      	str	r4, [r0, #20]
   13cde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13ce2:	6003      	str	r3, [r0, #0]
   13ce4:	6803      	ldr	r3, [r0, #0]
   13ce6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13cea:	6003      	str	r3, [r0, #0]
   13cec:	4628      	mov	r0, r5
   13cee:	bd38      	pop	{r3, r4, r5, pc}
   13cf0:	2901      	cmp	r1, #1
   13cf2:	d008      	beq.n	13d06 <tls_interface_open+0x7e>
   13cf4:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   13cf8:	d0de      	beq.n	13cb8 <tls_interface_open+0x30>
   13cfa:	2016      	movs	r0, #22
   13cfc:	f7fd fe3e 	bl	1197c <bsd_os_errno_set>
   13d00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13d04:	e7ca      	b.n	13c9c <tls_interface_open+0x14>
   13d06:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   13d0a:	d1f6      	bne.n	13cfa <tls_interface_open+0x72>
   13d0c:	460b      	mov	r3, r1
   13d0e:	e7d3      	b.n	13cb8 <tls_interface_open+0x30>
   13d10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13d14:	e7c2      	b.n	13c9c <tls_interface_open+0x14>
   13d16:	bf00      	nop
   13d18:	20020664 	.word	0x20020664
   13d1c:	0001f5d8 	.word	0x0001f5d8

00013d20 <tls_interface_close>:
   13d20:	b510      	push	{r4, lr}
   13d22:	4604      	mov	r4, r0
   13d24:	f004 ffa8 	bl	18c78 <interface_socket_from_handle_get>
   13d28:	b120      	cbz	r0, 13d34 <tls_interface_close+0x14>
   13d2a:	4620      	mov	r0, r4
   13d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d30:	f003 bc88 	b.w	17644 <ip_interface_close>
   13d34:	2009      	movs	r0, #9
   13d36:	f7fd fe21 	bl	1197c <bsd_os_errno_set>
   13d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d3e:	bd10      	pop	{r4, pc}

00013d40 <tls_interface_sendto>:
   13d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d44:	460d      	mov	r5, r1
   13d46:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13d4a:	4616      	mov	r6, r2
   13d4c:	461f      	mov	r7, r3
   13d4e:	4604      	mov	r4, r0
   13d50:	f004 ff92 	bl	18c78 <interface_socket_from_handle_get>
   13d54:	2800      	cmp	r0, #0
   13d56:	d03b      	beq.n	13dd0 <tls_interface_sendto+0x90>
   13d58:	6803      	ldr	r3, [r0, #0]
   13d5a:	b29b      	uxth	r3, r3
   13d5c:	2b0c      	cmp	r3, #12
   13d5e:	d039      	beq.n	13dd4 <tls_interface_sendto+0x94>
   13d60:	6803      	ldr	r3, [r0, #0]
   13d62:	b29b      	uxth	r3, r3
   13d64:	2b0b      	cmp	r3, #11
   13d66:	d111      	bne.n	13d8c <tls_interface_sendto+0x4c>
   13d68:	4b20      	ldr	r3, [pc, #128]	; (13dec <tls_interface_sendto+0xac>)
   13d6a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   13d6e:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   13d72:	2b02      	cmp	r3, #2
   13d74:	d038      	beq.n	13de8 <tls_interface_sendto+0xa8>
   13d76:	6903      	ldr	r3, [r0, #16]
   13d78:	2b01      	cmp	r3, #1
   13d7a:	bf14      	ite	ne
   13d7c:	2039      	movne	r0, #57	; 0x39
   13d7e:	202a      	moveq	r0, #42	; 0x2a
   13d80:	f7fd fdfc 	bl	1197c <bsd_os_errno_set>
   13d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d8c:	6903      	ldr	r3, [r0, #16]
   13d8e:	2b01      	cmp	r3, #1
   13d90:	d00b      	beq.n	13daa <tls_interface_sendto+0x6a>
   13d92:	2b02      	cmp	r3, #2
   13d94:	d001      	beq.n	13d9a <tls_interface_sendto+0x5a>
   13d96:	2039      	movs	r0, #57	; 0x39
   13d98:	e7f2      	b.n	13d80 <tls_interface_sendto+0x40>
   13d9a:	6803      	ldr	r3, [r0, #0]
   13d9c:	b29b      	uxth	r3, r3
   13d9e:	2b02      	cmp	r3, #2
   13da0:	d007      	beq.n	13db2 <tls_interface_sendto+0x72>
   13da2:	6803      	ldr	r3, [r0, #0]
   13da4:	b29b      	uxth	r3, r3
   13da6:	2b04      	cmp	r3, #4
   13da8:	d003      	beq.n	13db2 <tls_interface_sendto+0x72>
   13daa:	6803      	ldr	r3, [r0, #0]
   13dac:	b29b      	uxth	r3, r3
   13dae:	2b05      	cmp	r3, #5
   13db0:	d1f1      	bne.n	13d96 <tls_interface_sendto+0x56>
   13db2:	4b0e      	ldr	r3, [pc, #56]	; (13dec <tls_interface_sendto+0xac>)
   13db4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13db8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13dbc:	2b02      	cmp	r3, #2
   13dbe:	d1ea      	bne.n	13d96 <tls_interface_sendto+0x56>
   13dc0:	4601      	mov	r1, r0
   13dc2:	4620      	mov	r0, r4
   13dc4:	f7ff fef2 	bl	13bac <secure_client_socket>
   13dc8:	2800      	cmp	r0, #0
   13dca:	d003      	beq.n	13dd4 <tls_interface_sendto+0x94>
   13dcc:	dcd8      	bgt.n	13d80 <tls_interface_sendto+0x40>
   13dce:	e7d9      	b.n	13d84 <tls_interface_sendto+0x44>
   13dd0:	2009      	movs	r0, #9
   13dd2:	e7d5      	b.n	13d80 <tls_interface_sendto+0x40>
   13dd4:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13dd8:	463b      	mov	r3, r7
   13dda:	4632      	mov	r2, r6
   13ddc:	4629      	mov	r1, r5
   13dde:	4620      	mov	r0, r4
   13de0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13de4:	f003 bc9e 	b.w	17724 <ip_interface_sendto>
   13de8:	2023      	movs	r0, #35	; 0x23
   13dea:	e7c9      	b.n	13d80 <tls_interface_sendto+0x40>
   13dec:	20020664 	.word	0x20020664

00013df0 <tls_interface_recvfrom>:
   13df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13df4:	460d      	mov	r5, r1
   13df6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13dfa:	4616      	mov	r6, r2
   13dfc:	461f      	mov	r7, r3
   13dfe:	4604      	mov	r4, r0
   13e00:	f004 ff3a 	bl	18c78 <interface_socket_from_handle_get>
   13e04:	2800      	cmp	r0, #0
   13e06:	d038      	beq.n	13e7a <tls_interface_recvfrom+0x8a>
   13e08:	6803      	ldr	r3, [r0, #0]
   13e0a:	b29b      	uxth	r3, r3
   13e0c:	2b0c      	cmp	r3, #12
   13e0e:	d00f      	beq.n	13e30 <tls_interface_recvfrom+0x40>
   13e10:	6803      	ldr	r3, [r0, #0]
   13e12:	b29b      	uxth	r3, r3
   13e14:	2b0d      	cmp	r3, #13
   13e16:	d00b      	beq.n	13e30 <tls_interface_recvfrom+0x40>
   13e18:	6903      	ldr	r3, [r0, #16]
   13e1a:	2b01      	cmp	r3, #1
   13e1c:	d01a      	beq.n	13e54 <tls_interface_recvfrom+0x64>
   13e1e:	2b02      	cmp	r3, #2
   13e20:	d010      	beq.n	13e44 <tls_interface_recvfrom+0x54>
   13e22:	2023      	movs	r0, #35	; 0x23
   13e24:	f7fd fdaa 	bl	1197c <bsd_os_errno_set>
   13e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e30:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13e34:	463b      	mov	r3, r7
   13e36:	4632      	mov	r2, r6
   13e38:	4629      	mov	r1, r5
   13e3a:	4620      	mov	r0, r4
   13e3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e40:	f003 bdaa 	b.w	17998 <ip_interface_recvfrom>
   13e44:	6803      	ldr	r3, [r0, #0]
   13e46:	b29b      	uxth	r3, r3
   13e48:	2b02      	cmp	r3, #2
   13e4a:	d007      	beq.n	13e5c <tls_interface_recvfrom+0x6c>
   13e4c:	6803      	ldr	r3, [r0, #0]
   13e4e:	b29b      	uxth	r3, r3
   13e50:	2b04      	cmp	r3, #4
   13e52:	d003      	beq.n	13e5c <tls_interface_recvfrom+0x6c>
   13e54:	6803      	ldr	r3, [r0, #0]
   13e56:	b29b      	uxth	r3, r3
   13e58:	2b05      	cmp	r3, #5
   13e5a:	d1e2      	bne.n	13e22 <tls_interface_recvfrom+0x32>
   13e5c:	4b08      	ldr	r3, [pc, #32]	; (13e80 <tls_interface_recvfrom+0x90>)
   13e5e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13e62:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13e66:	2b02      	cmp	r3, #2
   13e68:	d1db      	bne.n	13e22 <tls_interface_recvfrom+0x32>
   13e6a:	4601      	mov	r1, r0
   13e6c:	4620      	mov	r0, r4
   13e6e:	f7ff fe9d 	bl	13bac <secure_client_socket>
   13e72:	2800      	cmp	r0, #0
   13e74:	d0dc      	beq.n	13e30 <tls_interface_recvfrom+0x40>
   13e76:	dcd5      	bgt.n	13e24 <tls_interface_recvfrom+0x34>
   13e78:	e7d6      	b.n	13e28 <tls_interface_recvfrom+0x38>
   13e7a:	2009      	movs	r0, #9
   13e7c:	e7d2      	b.n	13e24 <tls_interface_recvfrom+0x34>
   13e7e:	bf00      	nop
   13e80:	20020664 	.word	0x20020664

00013e84 <tls_interface_bind>:
   13e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13e88:	460c      	mov	r4, r1
   13e8a:	4617      	mov	r7, r2
   13e8c:	4606      	mov	r6, r0
   13e8e:	f004 fef3 	bl	18c78 <interface_socket_from_handle_get>
   13e92:	2800      	cmp	r0, #0
   13e94:	d04c      	beq.n	13f30 <tls_interface_bind+0xac>
   13e96:	6803      	ldr	r3, [r0, #0]
   13e98:	4605      	mov	r5, r0
   13e9a:	b29b      	uxth	r3, r3
   13e9c:	2b02      	cmp	r3, #2
   13e9e:	d150      	bne.n	13f42 <tls_interface_bind+0xbe>
   13ea0:	4621      	mov	r1, r4
   13ea2:	463a      	mov	r2, r7
   13ea4:	4630      	mov	r0, r6
   13ea6:	f003 ff4d 	bl	17d44 <ip_interface_bind>
   13eaa:	4604      	mov	r4, r0
   13eac:	b120      	cbz	r0, 13eb8 <tls_interface_bind+0x34>
   13eae:	2c00      	cmp	r4, #0
   13eb0:	dc3f      	bgt.n	13f32 <tls_interface_bind+0xae>
   13eb2:	4620      	mov	r0, r4
   13eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13eb8:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
   13ebc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13f54 <tls_interface_bind+0xd0>
   13ec0:	00bf      	lsls	r7, r7, #2
   13ec2:	f818 3007 	ldrb.w	r3, [r8, r7]
   13ec6:	2b01      	cmp	r3, #1
   13ec8:	d1f3      	bne.n	13eb2 <tls_interface_bind+0x2e>
   13eca:	4603      	mov	r3, r0
   13ecc:	f247 0281 	movw	r2, #28801	; 0x7081
   13ed0:	69a9      	ldr	r1, [r5, #24]
   13ed2:	4630      	mov	r0, r6
   13ed4:	f003 faaa 	bl	1742c <ip_interface_request_create>
   13ed8:	4681      	mov	r9, r0
   13eda:	b3b0      	cbz	r0, 13f4a <tls_interface_bind+0xc6>
   13edc:	eb08 0107 	add.w	r1, r8, r7
   13ee0:	2224      	movs	r2, #36	; 0x24
   13ee2:	3014      	adds	r0, #20
   13ee4:	f009 fb93 	bl	1d60e <memcpy>
   13ee8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13eec:	4649      	mov	r1, r9
   13eee:	3324      	adds	r3, #36	; 0x24
   13ef0:	f8c9 3008 	str.w	r3, [r9, #8]
   13ef4:	682a      	ldr	r2, [r5, #0]
   13ef6:	2304      	movs	r3, #4
   13ef8:	0c12      	lsrs	r2, r2, #16
   13efa:	0412      	lsls	r2, r2, #16
   13efc:	f042 020a 	orr.w	r2, r2, #10
   13f00:	602a      	str	r2, [r5, #0]
   13f02:	4628      	mov	r0, r5
   13f04:	f247 0281 	movw	r2, #28801	; 0x7081
   13f08:	f003 fab0 	bl	1746c <ip_interface_request_send>
   13f0c:	b9f8      	cbnz	r0, 13f4e <tls_interface_bind+0xca>
   13f0e:	682b      	ldr	r3, [r5, #0]
   13f10:	00db      	lsls	r3, r3, #3
   13f12:	d418      	bmi.n	13f46 <tls_interface_bind+0xc2>
   13f14:	4630      	mov	r0, r6
   13f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13f1e:	210b      	movs	r1, #11
   13f20:	f003 fab8 	bl	17494 <ip_interface_wait>
   13f24:	2800      	cmp	r0, #0
   13f26:	d0c4      	beq.n	13eb2 <tls_interface_bind+0x2e>
   13f28:	2304      	movs	r3, #4
   13f2a:	4604      	mov	r4, r0
   13f2c:	602b      	str	r3, [r5, #0]
   13f2e:	e7be      	b.n	13eae <tls_interface_bind+0x2a>
   13f30:	2409      	movs	r4, #9
   13f32:	4620      	mov	r0, r4
   13f34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13f38:	f7fd fd20 	bl	1197c <bsd_os_errno_set>
   13f3c:	4620      	mov	r0, r4
   13f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13f42:	242d      	movs	r4, #45	; 0x2d
   13f44:	e7f5      	b.n	13f32 <tls_interface_bind+0xae>
   13f46:	2473      	movs	r4, #115	; 0x73
   13f48:	e7f3      	b.n	13f32 <tls_interface_bind+0xae>
   13f4a:	240c      	movs	r4, #12
   13f4c:	e7f1      	b.n	13f32 <tls_interface_bind+0xae>
   13f4e:	4604      	mov	r4, r0
   13f50:	e7ad      	b.n	13eae <tls_interface_bind+0x2a>
   13f52:	bf00      	nop
   13f54:	20020664 	.word	0x20020664

00013f58 <tls_interface_connect>:
   13f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f5a:	460e      	mov	r6, r1
   13f5c:	4617      	mov	r7, r2
   13f5e:	4604      	mov	r4, r0
   13f60:	f004 fe8a 	bl	18c78 <interface_socket_from_handle_get>
   13f64:	b1e8      	cbz	r0, 13fa2 <tls_interface_connect+0x4a>
   13f66:	4b13      	ldr	r3, [pc, #76]	; (13fb4 <tls_interface_connect+0x5c>)
   13f68:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13f6c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13f70:	2b02      	cmp	r3, #2
   13f72:	d11c      	bne.n	13fae <tls_interface_connect+0x56>
   13f74:	6803      	ldr	r3, [r0, #0]
   13f76:	4605      	mov	r5, r0
   13f78:	b29b      	uxth	r3, r3
   13f7a:	2b02      	cmp	r3, #2
   13f7c:	d003      	beq.n	13f86 <tls_interface_connect+0x2e>
   13f7e:	6803      	ldr	r3, [r0, #0]
   13f80:	b29b      	uxth	r3, r3
   13f82:	2b04      	cmp	r3, #4
   13f84:	d113      	bne.n	13fae <tls_interface_connect+0x56>
   13f86:	463a      	mov	r2, r7
   13f88:	4631      	mov	r1, r6
   13f8a:	4620      	mov	r0, r4
   13f8c:	f003 fe30 	bl	17bf0 <ip_interface_connect>
   13f90:	b110      	cbz	r0, 13f98 <tls_interface_connect+0x40>
   13f92:	2800      	cmp	r0, #0
   13f94:	dc06      	bgt.n	13fa4 <tls_interface_connect+0x4c>
   13f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f98:	4629      	mov	r1, r5
   13f9a:	4620      	mov	r0, r4
   13f9c:	f7ff fe06 	bl	13bac <secure_client_socket>
   13fa0:	e7f7      	b.n	13f92 <tls_interface_connect+0x3a>
   13fa2:	2009      	movs	r0, #9
   13fa4:	f7fd fcea 	bl	1197c <bsd_os_errno_set>
   13fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fae:	202d      	movs	r0, #45	; 0x2d
   13fb0:	e7f8      	b.n	13fa4 <tls_interface_connect+0x4c>
   13fb2:	bf00      	nop
   13fb4:	20020664 	.word	0x20020664

00013fb8 <tls_interface_listen>:
   13fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13fbc:	460f      	mov	r7, r1
   13fbe:	4606      	mov	r6, r0
   13fc0:	f004 fe5a 	bl	18c78 <interface_socket_from_handle_get>
   13fc4:	2800      	cmp	r0, #0
   13fc6:	d06b      	beq.n	140a0 <tls_interface_listen+0xe8>
   13fc8:	6903      	ldr	r3, [r0, #16]
   13fca:	4604      	mov	r4, r0
   13fcc:	2b01      	cmp	r3, #1
   13fce:	d165      	bne.n	1409c <tls_interface_listen+0xe4>
   13fd0:	6803      	ldr	r3, [r0, #0]
   13fd2:	b29b      	uxth	r3, r3
   13fd4:	2b04      	cmp	r3, #4
   13fd6:	d056      	beq.n	14086 <tls_interface_listen+0xce>
   13fd8:	6823      	ldr	r3, [r4, #0]
   13fda:	b29b      	uxth	r3, r3
   13fdc:	2b0b      	cmp	r3, #11
   13fde:	d15d      	bne.n	1409c <tls_interface_listen+0xe4>
   13fe0:	00f3      	lsls	r3, r6, #3
   13fe2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 140a4 <tls_interface_listen+0xec>
   13fe6:	199a      	adds	r2, r3, r6
   13fe8:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   13fec:	2a01      	cmp	r2, #1
   13fee:	d155      	bne.n	1409c <tls_interface_listen+0xe4>
   13ff0:	2201      	movs	r2, #1
   13ff2:	4433      	add	r3, r6
   13ff4:	009d      	lsls	r5, r3, #2
   13ff6:	f809 2005 	strb.w	r2, [r9, r5]
   13ffa:	69a1      	ldr	r1, [r4, #24]
   13ffc:	2300      	movs	r3, #0
   13ffe:	f247 0281 	movw	r2, #28801	; 0x7081
   14002:	4630      	mov	r0, r6
   14004:	f8d4 8000 	ldr.w	r8, [r4]
   14008:	f003 fa10 	bl	1742c <ip_interface_request_create>
   1400c:	4682      	mov	sl, r0
   1400e:	2800      	cmp	r0, #0
   14010:	d042      	beq.n	14098 <tls_interface_listen+0xe0>
   14012:	eb09 0105 	add.w	r1, r9, r5
   14016:	2224      	movs	r2, #36	; 0x24
   14018:	3014      	adds	r0, #20
   1401a:	f009 faf8 	bl	1d60e <memcpy>
   1401e:	f8da 3008 	ldr.w	r3, [sl, #8]
   14022:	4651      	mov	r1, sl
   14024:	3324      	adds	r3, #36	; 0x24
   14026:	f8ca 3008 	str.w	r3, [sl, #8]
   1402a:	6822      	ldr	r2, [r4, #0]
   1402c:	4643      	mov	r3, r8
   1402e:	0c12      	lsrs	r2, r2, #16
   14030:	0412      	lsls	r2, r2, #16
   14032:	f042 020a 	orr.w	r2, r2, #10
   14036:	6022      	str	r2, [r4, #0]
   14038:	4620      	mov	r0, r4
   1403a:	f247 0281 	movw	r2, #28801	; 0x7081
   1403e:	f003 fa15 	bl	1746c <ip_interface_request_send>
   14042:	b9e0      	cbnz	r0, 1407e <tls_interface_listen+0xc6>
   14044:	6823      	ldr	r3, [r4, #0]
   14046:	00db      	lsls	r3, r3, #3
   14048:	d40e      	bmi.n	14068 <tls_interface_listen+0xb0>
   1404a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1404e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14052:	210b      	movs	r1, #11
   14054:	4630      	mov	r0, r6
   14056:	f003 fa1d 	bl	17494 <ip_interface_wait>
   1405a:	b160      	cbz	r0, 14076 <tls_interface_listen+0xbe>
   1405c:	2800      	cmp	r0, #0
   1405e:	f8c4 8000 	str.w	r8, [r4]
   14062:	dc02      	bgt.n	1406a <tls_interface_listen+0xb2>
   14064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14068:	2073      	movs	r0, #115	; 0x73
   1406a:	f7fd fc87 	bl	1197c <bsd_os_errno_set>
   1406e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14076:	4639      	mov	r1, r7
   14078:	4630      	mov	r0, r6
   1407a:	f003 fef9 	bl	17e70 <ip_interface_listen>
   1407e:	2800      	cmp	r0, #0
   14080:	dcf3      	bgt.n	1406a <tls_interface_listen+0xb2>
   14082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14086:	00f3      	lsls	r3, r6, #3
   14088:	f8df 9018 	ldr.w	r9, [pc, #24]	; 140a4 <tls_interface_listen+0xec>
   1408c:	199a      	adds	r2, r3, r6
   1408e:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   14092:	2a02      	cmp	r2, #2
   14094:	d1a0      	bne.n	13fd8 <tls_interface_listen+0x20>
   14096:	e7ab      	b.n	13ff0 <tls_interface_listen+0x38>
   14098:	200c      	movs	r0, #12
   1409a:	e7e6      	b.n	1406a <tls_interface_listen+0xb2>
   1409c:	202d      	movs	r0, #45	; 0x2d
   1409e:	e7e4      	b.n	1406a <tls_interface_listen+0xb2>
   140a0:	2009      	movs	r0, #9
   140a2:	e7e2      	b.n	1406a <tls_interface_listen+0xb2>
   140a4:	20020664 	.word	0x20020664

000140a8 <tls_interface_accept>:
   140a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140aa:	460c      	mov	r4, r1
   140ac:	4616      	mov	r6, r2
   140ae:	461f      	mov	r7, r3
   140b0:	4605      	mov	r5, r0
   140b2:	f004 fde1 	bl	18c78 <interface_socket_from_handle_get>
   140b6:	2800      	cmp	r0, #0
   140b8:	d03b      	beq.n	14132 <tls_interface_accept+0x8a>
   140ba:	6800      	ldr	r0, [r0, #0]
   140bc:	b280      	uxth	r0, r0
   140be:	2806      	cmp	r0, #6
   140c0:	d137      	bne.n	14132 <tls_interface_accept+0x8a>
   140c2:	4621      	mov	r1, r4
   140c4:	463b      	mov	r3, r7
   140c6:	4632      	mov	r2, r6
   140c8:	4628      	mov	r0, r5
   140ca:	f003 ff47 	bl	17f5c <ip_interface_accept>
   140ce:	4604      	mov	r4, r0
   140d0:	b118      	cbz	r0, 140da <tls_interface_accept+0x32>
   140d2:	2c00      	cmp	r4, #0
   140d4:	dc2e      	bgt.n	14134 <tls_interface_accept+0x8c>
   140d6:	4620      	mov	r0, r4
   140d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140da:	4628      	mov	r0, r5
   140dc:	f004 fdcc 	bl	18c78 <interface_socket_from_handle_get>
   140e0:	6803      	ldr	r3, [r0, #0]
   140e2:	4f18      	ldr	r7, [pc, #96]	; (14144 <tls_interface_accept+0x9c>)
   140e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   140e8:	6003      	str	r3, [r0, #0]
   140ea:	6803      	ldr	r3, [r0, #0]
   140ec:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   140f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   140f4:	4606      	mov	r6, r0
   140f6:	6003      	str	r3, [r0, #0]
   140f8:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   140fc:	2224      	movs	r2, #36	; 0x24
   140fe:	4638      	mov	r0, r7
   14100:	f009 fa85 	bl	1d60e <memcpy>
   14104:	2302      	movs	r3, #2
   14106:	703b      	strb	r3, [r7, #0]
   14108:	6833      	ldr	r3, [r6, #0]
   1410a:	4620      	mov	r0, r4
   1410c:	0c1b      	lsrs	r3, r3, #16
   1410e:	041b      	lsls	r3, r3, #16
   14110:	f043 030b 	orr.w	r3, r3, #11
   14114:	6033      	str	r3, [r6, #0]
   14116:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1411a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1411e:	210c      	movs	r1, #12
   14120:	f003 f9b8 	bl	17494 <ip_interface_wait>
   14124:	4604      	mov	r4, r0
   14126:	2800      	cmp	r0, #0
   14128:	d0d5      	beq.n	140d6 <tls_interface_accept+0x2e>
   1412a:	2000      	movs	r0, #0
   1412c:	f003 fa8a 	bl	17644 <ip_interface_close>
   14130:	e7cf      	b.n	140d2 <tls_interface_accept+0x2a>
   14132:	2409      	movs	r4, #9
   14134:	4620      	mov	r0, r4
   14136:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1413a:	f7fd fc1f 	bl	1197c <bsd_os_errno_set>
   1413e:	4620      	mov	r0, r4
   14140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14142:	bf00      	nop
   14144:	20020664 	.word	0x20020664

00014148 <tls_interface_setopt>:
   14148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1414c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   14150:	9f06      	ldr	r7, [sp, #24]
   14152:	d11d      	bne.n	14190 <tls_interface_setopt+0x48>
   14154:	461c      	mov	r4, r3
   14156:	b1c3      	cbz	r3, 1418a <tls_interface_setopt+0x42>
   14158:	b1bf      	cbz	r7, 1418a <tls_interface_setopt+0x42>
   1415a:	4605      	mov	r5, r0
   1415c:	4616      	mov	r6, r2
   1415e:	f004 fd8b 	bl	18c78 <interface_socket_from_handle_get>
   14162:	b1c8      	cbz	r0, 14198 <tls_interface_setopt+0x50>
   14164:	6803      	ldr	r3, [r0, #0]
   14166:	b29b      	uxth	r3, r3
   14168:	2b02      	cmp	r3, #2
   1416a:	d007      	beq.n	1417c <tls_interface_setopt+0x34>
   1416c:	6803      	ldr	r3, [r0, #0]
   1416e:	b29b      	uxth	r3, r3
   14170:	2b04      	cmp	r3, #4
   14172:	d003      	beq.n	1417c <tls_interface_setopt+0x34>
   14174:	6803      	ldr	r3, [r0, #0]
   14176:	b29b      	uxth	r3, r3
   14178:	2b05      	cmp	r3, #5
   1417a:	d10d      	bne.n	14198 <tls_interface_setopt+0x50>
   1417c:	3e01      	subs	r6, #1
   1417e:	2e03      	cmp	r6, #3
   14180:	d851      	bhi.n	14226 <tls_interface_setopt+0xde>
   14182:	e8df f006 	tbb	[pc, r6]
   14186:	3225      	.short	0x3225
   14188:	0b18      	.short	0x0b18
   1418a:	200e      	movs	r0, #14
   1418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14194:	f004 b81a 	b.w	181cc <ip_interface_setopt>
   14198:	2009      	movs	r0, #9
   1419a:	e7f7      	b.n	1418c <tls_interface_setopt+0x44>
   1419c:	2f04      	cmp	r7, #4
   1419e:	d139      	bne.n	14214 <tls_interface_setopt+0xcc>
   141a0:	6823      	ldr	r3, [r4, #0]
   141a2:	2b02      	cmp	r3, #2
   141a4:	d836      	bhi.n	14214 <tls_interface_setopt+0xcc>
   141a6:	4a21      	ldr	r2, [pc, #132]	; (1422c <tls_interface_setopt+0xe4>)
   141a8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   141ac:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   141b0:	70ab      	strb	r3, [r5, #2]
   141b2:	2000      	movs	r0, #0
   141b4:	e7ea      	b.n	1418c <tls_interface_setopt+0x44>
   141b6:	2f01      	cmp	r7, #1
   141b8:	d12c      	bne.n	14214 <tls_interface_setopt+0xcc>
   141ba:	7823      	ldrb	r3, [r4, #0]
   141bc:	2b01      	cmp	r3, #1
   141be:	d829      	bhi.n	14214 <tls_interface_setopt+0xcc>
   141c0:	4a1a      	ldr	r2, [pc, #104]	; (1422c <tls_interface_setopt+0xe4>)
   141c2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   141c6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   141ca:	7053      	strb	r3, [r2, #1]
   141cc:	2000      	movs	r0, #0
   141ce:	e7dd      	b.n	1418c <tls_interface_setopt+0x44>
   141d0:	2f04      	cmp	r7, #4
   141d2:	d11f      	bne.n	14214 <tls_interface_setopt+0xcc>
   141d4:	6820      	ldr	r0, [r4, #0]
   141d6:	b1f8      	cbz	r0, 14218 <tls_interface_setopt+0xd0>
   141d8:	2801      	cmp	r0, #1
   141da:	d11b      	bne.n	14214 <tls_interface_setopt+0xcc>
   141dc:	4b13      	ldr	r3, [pc, #76]	; (1422c <tls_interface_setopt+0xe4>)
   141de:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   141e2:	f803 0025 	strb.w	r0, [r3, r5, lsl #2]
   141e6:	2000      	movs	r0, #0
   141e8:	e7d0      	b.n	1418c <tls_interface_setopt+0x44>
   141ea:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   141ee:	d011      	beq.n	14214 <tls_interface_setopt+0xcc>
   141f0:	f017 0603 	ands.w	r6, r7, #3
   141f4:	d10e      	bne.n	14214 <tls_interface_setopt+0xcc>
   141f6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   141fa:	00ad      	lsls	r5, r5, #2
   141fc:	4b0b      	ldr	r3, [pc, #44]	; (1422c <tls_interface_setopt+0xe4>)
   141fe:	1d28      	adds	r0, r5, #4
   14200:	4418      	add	r0, r3
   14202:	442b      	add	r3, r5
   14204:	463a      	mov	r2, r7
   14206:	4621      	mov	r1, r4
   14208:	f883 c003 	strb.w	ip, [r3, #3]
   1420c:	f009 f9ff 	bl	1d60e <memcpy>
   14210:	4630      	mov	r0, r6
   14212:	e7bb      	b.n	1418c <tls_interface_setopt+0x44>
   14214:	2016      	movs	r0, #22
   14216:	e7b9      	b.n	1418c <tls_interface_setopt+0x44>
   14218:	2202      	movs	r2, #2
   1421a:	4b04      	ldr	r3, [pc, #16]	; (1422c <tls_interface_setopt+0xe4>)
   1421c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14220:	f803 2025 	strb.w	r2, [r3, r5, lsl #2]
   14224:	e7b2      	b.n	1418c <tls_interface_setopt+0x44>
   14226:	202a      	movs	r0, #42	; 0x2a
   14228:	e7b0      	b.n	1418c <tls_interface_setopt+0x44>
   1422a:	bf00      	nop
   1422c:	20020664 	.word	0x20020664

00014230 <tls_interface_getopt>:
   14230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14234:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   14238:	9f06      	ldr	r7, [sp, #24]
   1423a:	d112      	bne.n	14262 <tls_interface_getopt+0x32>
   1423c:	461d      	mov	r5, r3
   1423e:	b16b      	cbz	r3, 1425c <tls_interface_getopt+0x2c>
   14240:	b167      	cbz	r7, 1425c <tls_interface_getopt+0x2c>
   14242:	4606      	mov	r6, r0
   14244:	4614      	mov	r4, r2
   14246:	f004 fd17 	bl	18c78 <interface_socket_from_handle_get>
   1424a:	2800      	cmp	r0, #0
   1424c:	d04f      	beq.n	142ee <tls_interface_getopt+0xbe>
   1424e:	3c01      	subs	r4, #1
   14250:	2c03      	cmp	r4, #3
   14252:	d852      	bhi.n	142fa <tls_interface_getopt+0xca>
   14254:	e8df f004 	tbb	[pc, r4]
   14258:	09152139 	.word	0x09152139
   1425c:	200e      	movs	r0, #14
   1425e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14266:	f004 b86d 	b.w	18344 <ip_interface_getopt>
   1426a:	683b      	ldr	r3, [r7, #0]
   1426c:	2b04      	cmp	r3, #4
   1426e:	d13c      	bne.n	142ea <tls_interface_getopt+0xba>
   14270:	4b23      	ldr	r3, [pc, #140]	; (14300 <tls_interface_getopt+0xd0>)
   14272:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   14276:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1427a:	78b3      	ldrb	r3, [r6, #2]
   1427c:	2000      	movs	r0, #0
   1427e:	602b      	str	r3, [r5, #0]
   14280:	e7ed      	b.n	1425e <tls_interface_getopt+0x2e>
   14282:	683b      	ldr	r3, [r7, #0]
   14284:	2b04      	cmp	r3, #4
   14286:	d130      	bne.n	142ea <tls_interface_getopt+0xba>
   14288:	4b1d      	ldr	r3, [pc, #116]	; (14300 <tls_interface_getopt+0xd0>)
   1428a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1428e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   14292:	7873      	ldrb	r3, [r6, #1]
   14294:	2000      	movs	r0, #0
   14296:	602b      	str	r3, [r5, #0]
   14298:	e7e1      	b.n	1425e <tls_interface_getopt+0x2e>
   1429a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1429e:	4918      	ldr	r1, [pc, #96]	; (14300 <tls_interface_getopt+0xd0>)
   142a0:	683b      	ldr	r3, [r7, #0]
   142a2:	00b6      	lsls	r6, r6, #2
   142a4:	198a      	adds	r2, r1, r6
   142a6:	f013 0403 	ands.w	r4, r3, #3
   142aa:	78d0      	ldrb	r0, [r2, #3]
   142ac:	d121      	bne.n	142f2 <tls_interface_getopt+0xc2>
   142ae:	089b      	lsrs	r3, r3, #2
   142b0:	4283      	cmp	r3, r0
   142b2:	bf28      	it	cs
   142b4:	4603      	movcs	r3, r0
   142b6:	009a      	lsls	r2, r3, #2
   142b8:	b1db      	cbz	r3, 142f2 <tls_interface_getopt+0xc2>
   142ba:	3604      	adds	r6, #4
   142bc:	4431      	add	r1, r6
   142be:	603a      	str	r2, [r7, #0]
   142c0:	4628      	mov	r0, r5
   142c2:	f009 f9a4 	bl	1d60e <memcpy>
   142c6:	4620      	mov	r0, r4
   142c8:	e7c9      	b.n	1425e <tls_interface_getopt+0x2e>
   142ca:	683b      	ldr	r3, [r7, #0]
   142cc:	2b04      	cmp	r3, #4
   142ce:	d10c      	bne.n	142ea <tls_interface_getopt+0xba>
   142d0:	4b0b      	ldr	r3, [pc, #44]	; (14300 <tls_interface_getopt+0xd0>)
   142d2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   142d6:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   142da:	2000      	movs	r0, #0
   142dc:	f1a3 0301 	sub.w	r3, r3, #1
   142e0:	fab3 f383 	clz	r3, r3
   142e4:	095b      	lsrs	r3, r3, #5
   142e6:	602b      	str	r3, [r5, #0]
   142e8:	e7b9      	b.n	1425e <tls_interface_getopt+0x2e>
   142ea:	2016      	movs	r0, #22
   142ec:	e7b7      	b.n	1425e <tls_interface_getopt+0x2e>
   142ee:	2009      	movs	r0, #9
   142f0:	e7b5      	b.n	1425e <tls_interface_getopt+0x2e>
   142f2:	2800      	cmp	r0, #0
   142f4:	d1f9      	bne.n	142ea <tls_interface_getopt+0xba>
   142f6:	6038      	str	r0, [r7, #0]
   142f8:	e7b1      	b.n	1425e <tls_interface_getopt+0x2e>
   142fa:	202a      	movs	r0, #42	; 0x2a
   142fc:	e7af      	b.n	1425e <tls_interface_getopt+0x2e>
   142fe:	bf00      	nop
   14300:	20020664 	.word	0x20020664

00014304 <tls_rpc_ip_event_handler>:
   14304:	b538      	push	{r3, r4, r5, lr}
   14306:	f248 0581 	movw	r5, #32897	; 0x8081
   1430a:	42ab      	cmp	r3, r5
   1430c:	460c      	mov	r4, r1
   1430e:	d053      	beq.n	143b8 <tls_rpc_ip_event_handler+0xb4>
   14310:	f249 0182 	movw	r1, #36994	; 0x9082
   14314:	428b      	cmp	r3, r1
   14316:	d02d      	beq.n	14374 <tls_rpc_ip_event_handler+0x70>
   14318:	f248 0102 	movw	r1, #32770	; 0x8002
   1431c:	428b      	cmp	r3, r1
   1431e:	d001      	beq.n	14324 <tls_rpc_ip_event_handler+0x20>
   14320:	2001      	movs	r0, #1
   14322:	bd38      	pop	{r3, r4, r5, pc}
   14324:	2c00      	cmp	r4, #0
   14326:	d0fb      	beq.n	14320 <tls_rpc_ip_event_handler+0x1c>
   14328:	6963      	ldr	r3, [r4, #20]
   1432a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1432e:	d002      	beq.n	14336 <tls_rpc_ip_event_handler+0x32>
   14330:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   14334:	d1f4      	bne.n	14320 <tls_rpc_ip_event_handler+0x1c>
   14336:	6823      	ldr	r3, [r4, #0]
   14338:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1433c:	6023      	str	r3, [r4, #0]
   1433e:	6955      	ldr	r5, [r2, #20]
   14340:	2d00      	cmp	r5, #0
   14342:	d148      	bne.n	143d6 <tls_rpc_ip_event_handler+0xd2>
   14344:	6823      	ldr	r3, [r4, #0]
   14346:	0c1b      	lsrs	r3, r3, #16
   14348:	041b      	lsls	r3, r3, #16
   1434a:	f043 0305 	orr.w	r3, r3, #5
   1434e:	6023      	str	r3, [r4, #0]
   14350:	6823      	ldr	r3, [r4, #0]
   14352:	00da      	lsls	r2, r3, #3
   14354:	d50c      	bpl.n	14370 <tls_rpc_ip_event_handler+0x6c>
   14356:	4b25      	ldr	r3, [pc, #148]	; (143ec <tls_rpc_ip_event_handler+0xe8>)
   14358:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
   1435c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   14360:	2b02      	cmp	r3, #2
   14362:	d105      	bne.n	14370 <tls_rpc_ip_event_handler+0x6c>
   14364:	4621      	mov	r1, r4
   14366:	f7ff fc21 	bl	13bac <secure_client_socket>
   1436a:	b108      	cbz	r0, 14370 <tls_rpc_ip_event_handler+0x6c>
   1436c:	2873      	cmp	r0, #115	; 0x73
   1436e:	d135      	bne.n	143dc <tls_rpc_ip_event_handler+0xd8>
   14370:	2000      	movs	r0, #0
   14372:	bd38      	pop	{r3, r4, r5, pc}
   14374:	2c00      	cmp	r4, #0
   14376:	d0fb      	beq.n	14370 <tls_rpc_ip_event_handler+0x6c>
   14378:	6823      	ldr	r3, [r4, #0]
   1437a:	b29b      	uxth	r3, r3
   1437c:	2b0b      	cmp	r3, #11
   1437e:	d1f7      	bne.n	14370 <tls_rpc_ip_event_handler+0x6c>
   14380:	6910      	ldr	r0, [r2, #16]
   14382:	bb48      	cbnz	r0, 143d8 <tls_rpc_ip_event_handler+0xd4>
   14384:	6823      	ldr	r3, [r4, #0]
   14386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1438a:	6023      	str	r3, [r4, #0]
   1438c:	6823      	ldr	r3, [r4, #0]
   1438e:	00db      	lsls	r3, r3, #3
   14390:	d5ee      	bpl.n	14370 <tls_rpc_ip_event_handler+0x6c>
   14392:	6823      	ldr	r3, [r4, #0]
   14394:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   14398:	6023      	str	r3, [r4, #0]
   1439a:	6823      	ldr	r3, [r4, #0]
   1439c:	0c1b      	lsrs	r3, r3, #16
   1439e:	041b      	lsls	r3, r3, #16
   143a0:	f043 030c 	orr.w	r3, r3, #12
   143a4:	6023      	str	r3, [r4, #0]
   143a6:	6823      	ldr	r3, [r4, #0]
   143a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   143ac:	6023      	str	r3, [r4, #0]
   143ae:	6823      	ldr	r3, [r4, #0]
   143b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   143b4:	6023      	str	r3, [r4, #0]
   143b6:	bd38      	pop	{r3, r4, r5, pc}
   143b8:	2900      	cmp	r1, #0
   143ba:	d0d9      	beq.n	14370 <tls_rpc_ip_event_handler+0x6c>
   143bc:	680b      	ldr	r3, [r1, #0]
   143be:	b29b      	uxth	r3, r3
   143c0:	2b0a      	cmp	r3, #10
   143c2:	d1d5      	bne.n	14370 <tls_rpc_ip_event_handler+0x6c>
   143c4:	6950      	ldr	r0, [r2, #20]
   143c6:	b938      	cbnz	r0, 143d8 <tls_rpc_ip_event_handler+0xd4>
   143c8:	680b      	ldr	r3, [r1, #0]
   143ca:	0c1b      	lsrs	r3, r3, #16
   143cc:	041b      	lsls	r3, r3, #16
   143ce:	f043 030b 	orr.w	r3, r3, #11
   143d2:	600b      	str	r3, [r1, #0]
   143d4:	bd38      	pop	{r3, r4, r5, pc}
   143d6:	4628      	mov	r0, r5
   143d8:	f003 f81e 	bl	17418 <rpc_error_to_nrf_bsd_error>
   143dc:	6060      	str	r0, [r4, #4]
   143de:	6823      	ldr	r3, [r4, #0]
   143e0:	2000      	movs	r0, #0
   143e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   143e6:	6023      	str	r3, [r4, #0]
   143e8:	bd38      	pop	{r3, r4, r5, pc}
   143ea:	bf00      	nop
   143ec:	20020664 	.word	0x20020664

000143f0 <rpc_dfu_event_handler>:
   143f0:	b508      	push	{r3, lr}
   143f2:	4a08      	ldr	r2, [pc, #32]	; (14414 <rpc_dfu_event_handler+0x24>)
   143f4:	68c1      	ldr	r1, [r0, #12]
   143f6:	8812      	ldrh	r2, [r2, #0]
   143f8:	4603      	mov	r3, r0
   143fa:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   143fe:	d005      	beq.n	1440c <rpc_dfu_event_handler+0x1c>
   14400:	6800      	ldr	r0, [r0, #0]
   14402:	b110      	cbz	r0, 1440a <rpc_dfu_event_handler+0x1a>
   14404:	f7fe ff9a 	bl	1333c <rpc_dfu_client_data_free>
   14408:	2000      	movs	r0, #0
   1440a:	bd08      	pop	{r3, pc}
   1440c:	4a02      	ldr	r2, [pc, #8]	; (14418 <rpc_dfu_event_handler+0x28>)
   1440e:	2001      	movs	r0, #1
   14410:	6013      	str	r3, [r2, #0]
   14412:	bd08      	pop	{r3, pc}
   14414:	20024e44 	.word	0x20024e44
   14418:	20020790 	.word	0x20020790

0001441c <mfu_interface_init>:
   1441c:	2300      	movs	r3, #0
   1441e:	b510      	push	{r4, lr}
   14420:	4808      	ldr	r0, [pc, #32]	; (14444 <mfu_interface_init+0x28>)
   14422:	4909      	ldr	r1, [pc, #36]	; (14448 <mfu_interface_init+0x2c>)
   14424:	4a09      	ldr	r2, [pc, #36]	; (1444c <mfu_interface_init+0x30>)
   14426:	4c0a      	ldr	r4, [pc, #40]	; (14450 <mfu_interface_init+0x34>)
   14428:	8003      	strh	r3, [r0, #0]
   1442a:	600b      	str	r3, [r1, #0]
   1442c:	6013      	str	r3, [r2, #0]
   1442e:	6023      	str	r3, [r4, #0]
   14430:	f7fe ff4e 	bl	132d0 <rpc_dfu_client_init>
   14434:	b910      	cbnz	r0, 1443c <mfu_interface_init+0x20>
   14436:	2301      	movs	r3, #1
   14438:	6023      	str	r3, [r4, #0]
   1443a:	bd10      	pop	{r4, pc}
   1443c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14440:	bd10      	pop	{r4, pc}
   14442:	bf00      	nop
   14444:	20024e44 	.word	0x20024e44
   14448:	20020790 	.word	0x20020790
   1444c:	2002078c 	.word	0x2002078c
   14450:	20020784 	.word	0x20020784

00014454 <mfu_interface_open>:
   14454:	2801      	cmp	r0, #1
   14456:	b508      	push	{r3, lr}
   14458:	d10b      	bne.n	14472 <mfu_interface_open+0x1e>
   1445a:	f240 2303 	movw	r3, #515	; 0x203
   1445e:	429a      	cmp	r2, r3
   14460:	d107      	bne.n	14472 <mfu_interface_open+0x1e>
   14462:	4b09      	ldr	r3, [pc, #36]	; (14488 <mfu_interface_open+0x34>)
   14464:	681a      	ldr	r2, [r3, #0]
   14466:	2a01      	cmp	r2, #1
   14468:	d109      	bne.n	1447e <mfu_interface_open+0x2a>
   1446a:	2202      	movs	r2, #2
   1446c:	601a      	str	r2, [r3, #0]
   1446e:	4807      	ldr	r0, [pc, #28]	; (1448c <mfu_interface_open+0x38>)
   14470:	bd08      	pop	{r3, pc}
   14472:	2016      	movs	r0, #22
   14474:	f7fd fa82 	bl	1197c <bsd_os_errno_set>
   14478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1447c:	bd08      	pop	{r3, pc}
   1447e:	f7fd fa7d 	bl	1197c <bsd_os_errno_set>
   14482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14486:	bd08      	pop	{r3, pc}
   14488:	20020784 	.word	0x20020784
   1448c:	49765432 	.word	0x49765432

00014490 <mfu_interface_close>:
   14490:	b5f0      	push	{r4, r5, r6, r7, lr}
   14492:	4c32      	ldr	r4, [pc, #200]	; (1455c <mfu_interface_close+0xcc>)
   14494:	b083      	sub	sp, #12
   14496:	6823      	ldr	r3, [r4, #0]
   14498:	1e9a      	subs	r2, r3, #2
   1449a:	2a01      	cmp	r2, #1
   1449c:	d857      	bhi.n	1454e <mfu_interface_close+0xbe>
   1449e:	2b03      	cmp	r3, #3
   144a0:	d004      	beq.n	144ac <mfu_interface_close+0x1c>
   144a2:	2301      	movs	r3, #1
   144a4:	2000      	movs	r0, #0
   144a6:	6023      	str	r3, [r4, #0]
   144a8:	b003      	add	sp, #12
   144aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144ac:	2100      	movs	r1, #0
   144ae:	4668      	mov	r0, sp
   144b0:	f7fe ff14 	bl	132dc <rpc_dfu_client_request_alloc>
   144b4:	4603      	mov	r3, r0
   144b6:	2800      	cmp	r0, #0
   144b8:	d13d      	bne.n	14536 <mfu_interface_close+0xa6>
   144ba:	2104      	movs	r1, #4
   144bc:	4e28      	ldr	r6, [pc, #160]	; (14560 <mfu_interface_close+0xd0>)
   144be:	9800      	ldr	r0, [sp, #0]
   144c0:	8832      	ldrh	r2, [r6, #0]
   144c2:	7201      	strb	r1, [r0, #8]
   144c4:	3201      	adds	r2, #1
   144c6:	b292      	uxth	r2, r2
   144c8:	0411      	lsls	r1, r2, #16
   144ca:	f041 0106 	orr.w	r1, r1, #6
   144ce:	4d25      	ldr	r5, [pc, #148]	; (14564 <mfu_interface_close+0xd4>)
   144d0:	60c1      	str	r1, [r0, #12]
   144d2:	7103      	strb	r3, [r0, #4]
   144d4:	7143      	strb	r3, [r0, #5]
   144d6:	7183      	strb	r3, [r0, #6]
   144d8:	71c3      	strb	r3, [r0, #7]
   144da:	7243      	strb	r3, [r0, #9]
   144dc:	7283      	strb	r3, [r0, #10]
   144de:	72c3      	strb	r3, [r0, #11]
   144e0:	2106      	movs	r1, #6
   144e2:	8032      	strh	r2, [r6, #0]
   144e4:	602b      	str	r3, [r5, #0]
   144e6:	f7fe ff0d 	bl	13304 <rpc_dfu_client_request_send>
   144ea:	b9d8      	cbnz	r0, 14524 <mfu_interface_close+0x94>
   144ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144f0:	ae02      	add	r6, sp, #8
   144f2:	4627      	mov	r7, r4
   144f4:	f846 3d04 	str.w	r3, [r6, #-4]!
   144f8:	e004      	b.n	14504 <mfu_interface_close+0x74>
   144fa:	4631      	mov	r1, r6
   144fc:	4638      	mov	r0, r7
   144fe:	f7fd f9a9 	bl	11854 <bsd_os_timedwait>
   14502:	b9f0      	cbnz	r0, 14542 <mfu_interface_close+0xb2>
   14504:	6828      	ldr	r0, [r5, #0]
   14506:	2800      	cmp	r0, #0
   14508:	d0f7      	beq.n	144fa <mfu_interface_close+0x6a>
   1450a:	6905      	ldr	r5, [r0, #16]
   1450c:	f7fe ff0e 	bl	1332c <rpc_dfu_client_message_free>
   14510:	2d00      	cmp	r5, #0
   14512:	d0c6      	beq.n	144a2 <mfu_interface_close+0x12>
   14514:	4b14      	ldr	r3, [pc, #80]	; (14568 <mfu_interface_close+0xd8>)
   14516:	2008      	movs	r0, #8
   14518:	601d      	str	r5, [r3, #0]
   1451a:	f7fd fa2f 	bl	1197c <bsd_os_errno_set>
   1451e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14522:	e7c1      	b.n	144a8 <mfu_interface_close+0x18>
   14524:	9800      	ldr	r0, [sp, #0]
   14526:	6803      	ldr	r3, [r0, #0]
   14528:	b11b      	cbz	r3, 14532 <mfu_interface_close+0xa2>
   1452a:	4618      	mov	r0, r3
   1452c:	f7fe ff06 	bl	1333c <rpc_dfu_client_data_free>
   14530:	9800      	ldr	r0, [sp, #0]
   14532:	f7fe fefb 	bl	1332c <rpc_dfu_client_message_free>
   14536:	200c      	movs	r0, #12
   14538:	f7fd fa20 	bl	1197c <bsd_os_errno_set>
   1453c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14540:	e7b2      	b.n	144a8 <mfu_interface_close+0x18>
   14542:	203c      	movs	r0, #60	; 0x3c
   14544:	f7fd fa1a 	bl	1197c <bsd_os_errno_set>
   14548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1454c:	e7ac      	b.n	144a8 <mfu_interface_close+0x18>
   1454e:	2001      	movs	r0, #1
   14550:	f7fd fa14 	bl	1197c <bsd_os_errno_set>
   14554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14558:	e7a6      	b.n	144a8 <mfu_interface_close+0x18>
   1455a:	bf00      	nop
   1455c:	20020784 	.word	0x20020784
   14560:	20024e44 	.word	0x20024e44
   14564:	20020790 	.word	0x20020790
   14568:	20020788 	.word	0x20020788

0001456c <mfu_interface_sendto>:
   1456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14570:	4e5a      	ldr	r6, [pc, #360]	; (146dc <mfu_interface_sendto+0x170>)
   14572:	4615      	mov	r5, r2
   14574:	6833      	ldr	r3, [r6, #0]
   14576:	b082      	sub	sp, #8
   14578:	1e9a      	subs	r2, r3, #2
   1457a:	2a01      	cmp	r2, #1
   1457c:	f200 80a7 	bhi.w	146ce <mfu_interface_sendto+0x162>
   14580:	460f      	mov	r7, r1
   14582:	2900      	cmp	r1, #0
   14584:	f000 809d 	beq.w	146c2 <mfu_interface_sendto+0x156>
   14588:	2d00      	cmp	r5, #0
   1458a:	f000 809a 	beq.w	146c2 <mfu_interface_sendto+0x156>
   1458e:	2b02      	cmp	r3, #2
   14590:	46e8      	mov	r8, sp
   14592:	d04e      	beq.n	14632 <mfu_interface_sendto+0xc6>
   14594:	4640      	mov	r0, r8
   14596:	4629      	mov	r1, r5
   14598:	f7fe fea0 	bl	132dc <rpc_dfu_client_request_alloc>
   1459c:	4606      	mov	r6, r0
   1459e:	b140      	cbz	r0, 145b2 <mfu_interface_sendto+0x46>
   145a0:	200c      	movs	r0, #12
   145a2:	f7fd f9eb 	bl	1197c <bsd_os_errno_set>
   145a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   145aa:	4628      	mov	r0, r5
   145ac:	b002      	add	sp, #8
   145ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145b2:	9b00      	ldr	r3, [sp, #0]
   145b4:	4639      	mov	r1, r7
   145b6:	6818      	ldr	r0, [r3, #0]
   145b8:	462a      	mov	r2, r5
   145ba:	f009 f828 	bl	1d60e <memcpy>
   145be:	2104      	movs	r1, #4
   145c0:	4c47      	ldr	r4, [pc, #284]	; (146e0 <mfu_interface_sendto+0x174>)
   145c2:	9800      	ldr	r0, [sp, #0]
   145c4:	8823      	ldrh	r3, [r4, #0]
   145c6:	6045      	str	r5, [r0, #4]
   145c8:	3301      	adds	r3, #1
   145ca:	b29b      	uxth	r3, r3
   145cc:	041a      	lsls	r2, r3, #16
   145ce:	8023      	strh	r3, [r4, #0]
   145d0:	430a      	orrs	r2, r1
   145d2:	4c44      	ldr	r4, [pc, #272]	; (146e4 <mfu_interface_sendto+0x178>)
   145d4:	60c2      	str	r2, [r0, #12]
   145d6:	7246      	strb	r6, [r0, #9]
   145d8:	7286      	strb	r6, [r0, #10]
   145da:	72c6      	strb	r6, [r0, #11]
   145dc:	7201      	strb	r1, [r0, #8]
   145de:	6026      	str	r6, [r4, #0]
   145e0:	f7fe fe90 	bl	13304 <rpc_dfu_client_request_send>
   145e4:	2800      	cmp	r0, #0
   145e6:	d162      	bne.n	146ae <mfu_interface_sendto+0x142>
   145e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145ec:	ae02      	add	r6, sp, #8
   145ee:	4f3b      	ldr	r7, [pc, #236]	; (146dc <mfu_interface_sendto+0x170>)
   145f0:	f846 3d04 	str.w	r3, [r6, #-4]!
   145f4:	e004      	b.n	14600 <mfu_interface_sendto+0x94>
   145f6:	4631      	mov	r1, r6
   145f8:	4638      	mov	r0, r7
   145fa:	f7fd f92b 	bl	11854 <bsd_os_timedwait>
   145fe:	b978      	cbnz	r0, 14620 <mfu_interface_sendto+0xb4>
   14600:	6820      	ldr	r0, [r4, #0]
   14602:	2800      	cmp	r0, #0
   14604:	d0f7      	beq.n	145f6 <mfu_interface_sendto+0x8a>
   14606:	6904      	ldr	r4, [r0, #16]
   14608:	f7fe fe90 	bl	1332c <rpc_dfu_client_message_free>
   1460c:	2c00      	cmp	r4, #0
   1460e:	d0cc      	beq.n	145aa <mfu_interface_sendto+0x3e>
   14610:	4b35      	ldr	r3, [pc, #212]	; (146e8 <mfu_interface_sendto+0x17c>)
   14612:	2008      	movs	r0, #8
   14614:	601c      	str	r4, [r3, #0]
   14616:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1461a:	f7fd f9af 	bl	1197c <bsd_os_errno_set>
   1461e:	e7c4      	b.n	145aa <mfu_interface_sendto+0x3e>
   14620:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14624:	203c      	movs	r0, #60	; 0x3c
   14626:	f7fd f9a9 	bl	1197c <bsd_os_errno_set>
   1462a:	4628      	mov	r0, r5
   1462c:	b002      	add	sp, #8
   1462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14632:	4640      	mov	r0, r8
   14634:	2100      	movs	r1, #0
   14636:	f7fe fe51 	bl	132dc <rpc_dfu_client_request_alloc>
   1463a:	4602      	mov	r2, r0
   1463c:	2800      	cmp	r0, #0
   1463e:	d1af      	bne.n	145a0 <mfu_interface_sendto+0x34>
   14640:	f04f 0c08 	mov.w	ip, #8
   14644:	4926      	ldr	r1, [pc, #152]	; (146e0 <mfu_interface_sendto+0x174>)
   14646:	4829      	ldr	r0, [pc, #164]	; (146ec <mfu_interface_sendto+0x180>)
   14648:	880b      	ldrh	r3, [r1, #0]
   1464a:	6804      	ldr	r4, [r0, #0]
   1464c:	3301      	adds	r3, #1
   1464e:	9800      	ldr	r0, [sp, #0]
   14650:	b29b      	uxth	r3, r3
   14652:	800b      	strh	r3, [r1, #0]
   14654:	041b      	lsls	r3, r3, #16
   14656:	f043 0303 	orr.w	r3, r3, #3
   1465a:	6104      	str	r4, [r0, #16]
   1465c:	4c21      	ldr	r4, [pc, #132]	; (146e4 <mfu_interface_sendto+0x178>)
   1465e:	60c3      	str	r3, [r0, #12]
   14660:	7102      	strb	r2, [r0, #4]
   14662:	7142      	strb	r2, [r0, #5]
   14664:	7182      	strb	r2, [r0, #6]
   14666:	71c2      	strb	r2, [r0, #7]
   14668:	7242      	strb	r2, [r0, #9]
   1466a:	7282      	strb	r2, [r0, #10]
   1466c:	72c2      	strb	r2, [r0, #11]
   1466e:	f880 c008 	strb.w	ip, [r0, #8]
   14672:	2103      	movs	r1, #3
   14674:	6022      	str	r2, [r4, #0]
   14676:	f7fe fe45 	bl	13304 <rpc_dfu_client_request_send>
   1467a:	b9c0      	cbnz	r0, 146ae <mfu_interface_sendto+0x142>
   1467c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14680:	f10d 0908 	add.w	r9, sp, #8
   14684:	f849 3d04 	str.w	r3, [r9, #-4]!
   14688:	46b2      	mov	sl, r6
   1468a:	e005      	b.n	14698 <mfu_interface_sendto+0x12c>
   1468c:	4649      	mov	r1, r9
   1468e:	4650      	mov	r0, sl
   14690:	f7fd f8e0 	bl	11854 <bsd_os_timedwait>
   14694:	2800      	cmp	r0, #0
   14696:	d1c3      	bne.n	14620 <mfu_interface_sendto+0xb4>
   14698:	6820      	ldr	r0, [r4, #0]
   1469a:	2800      	cmp	r0, #0
   1469c:	d0f6      	beq.n	1468c <mfu_interface_sendto+0x120>
   1469e:	6904      	ldr	r4, [r0, #16]
   146a0:	f7fe fe44 	bl	1332c <rpc_dfu_client_message_free>
   146a4:	2c00      	cmp	r4, #0
   146a6:	d1b3      	bne.n	14610 <mfu_interface_sendto+0xa4>
   146a8:	2303      	movs	r3, #3
   146aa:	6033      	str	r3, [r6, #0]
   146ac:	e772      	b.n	14594 <mfu_interface_sendto+0x28>
   146ae:	9800      	ldr	r0, [sp, #0]
   146b0:	6803      	ldr	r3, [r0, #0]
   146b2:	b11b      	cbz	r3, 146bc <mfu_interface_sendto+0x150>
   146b4:	4618      	mov	r0, r3
   146b6:	f7fe fe41 	bl	1333c <rpc_dfu_client_data_free>
   146ba:	9800      	ldr	r0, [sp, #0]
   146bc:	f7fe fe36 	bl	1332c <rpc_dfu_client_message_free>
   146c0:	e76e      	b.n	145a0 <mfu_interface_sendto+0x34>
   146c2:	2016      	movs	r0, #22
   146c4:	f7fd f95a 	bl	1197c <bsd_os_errno_set>
   146c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   146cc:	e76d      	b.n	145aa <mfu_interface_sendto+0x3e>
   146ce:	2001      	movs	r0, #1
   146d0:	f7fd f954 	bl	1197c <bsd_os_errno_set>
   146d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   146d8:	e767      	b.n	145aa <mfu_interface_sendto+0x3e>
   146da:	bf00      	nop
   146dc:	20020784 	.word	0x20020784
   146e0:	20024e44 	.word	0x20024e44
   146e4:	20020790 	.word	0x20020790
   146e8:	20020788 	.word	0x20020788
   146ec:	2002078c 	.word	0x2002078c

000146f0 <mfu_interface_setopt>:
   146f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   146f2:	4846      	ldr	r0, [pc, #280]	; (1480c <mfu_interface_setopt+0x11c>)
   146f4:	b083      	sub	sp, #12
   146f6:	6800      	ldr	r0, [r0, #0]
   146f8:	3802      	subs	r0, #2
   146fa:	2801      	cmp	r0, #1
   146fc:	d877      	bhi.n	147ee <mfu_interface_setopt+0xfe>
   146fe:	f240 2003 	movw	r0, #515	; 0x203
   14702:	4281      	cmp	r1, r0
   14704:	d16d      	bne.n	147e2 <mfu_interface_setopt+0xf2>
   14706:	3a04      	subs	r2, #4
   14708:	2a03      	cmp	r2, #3
   1470a:	d85c      	bhi.n	147c6 <mfu_interface_setopt+0xd6>
   1470c:	e8df f002 	tbb	[pc, r2]
   14710:	514e024b 	.word	0x514e024b
   14714:	2407      	movs	r4, #7
   14716:	4625      	mov	r5, r4
   14718:	2100      	movs	r1, #0
   1471a:	4668      	mov	r0, sp
   1471c:	f7fe fdde 	bl	132dc <rpc_dfu_client_request_alloc>
   14720:	4603      	mov	r3, r0
   14722:	2800      	cmp	r0, #0
   14724:	d138      	bne.n	14798 <mfu_interface_setopt+0xa8>
   14726:	2704      	movs	r7, #4
   14728:	4e39      	ldr	r6, [pc, #228]	; (14810 <mfu_interface_setopt+0x120>)
   1472a:	9800      	ldr	r0, [sp, #0]
   1472c:	8832      	ldrh	r2, [r6, #0]
   1472e:	4629      	mov	r1, r5
   14730:	3201      	adds	r2, #1
   14732:	b292      	uxth	r2, r2
   14734:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   14738:	4c36      	ldr	r4, [pc, #216]	; (14814 <mfu_interface_setopt+0x124>)
   1473a:	60c5      	str	r5, [r0, #12]
   1473c:	7103      	strb	r3, [r0, #4]
   1473e:	7143      	strb	r3, [r0, #5]
   14740:	7183      	strb	r3, [r0, #6]
   14742:	71c3      	strb	r3, [r0, #7]
   14744:	7243      	strb	r3, [r0, #9]
   14746:	7283      	strb	r3, [r0, #10]
   14748:	72c3      	strb	r3, [r0, #11]
   1474a:	7207      	strb	r7, [r0, #8]
   1474c:	8032      	strh	r2, [r6, #0]
   1474e:	6023      	str	r3, [r4, #0]
   14750:	f7fe fdd8 	bl	13304 <rpc_dfu_client_request_send>
   14754:	b9b8      	cbnz	r0, 14786 <mfu_interface_setopt+0x96>
   14756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1475a:	ad02      	add	r5, sp, #8
   1475c:	4e2b      	ldr	r6, [pc, #172]	; (1480c <mfu_interface_setopt+0x11c>)
   1475e:	f845 3d04 	str.w	r3, [r5, #-4]!
   14762:	e005      	b.n	14770 <mfu_interface_setopt+0x80>
   14764:	4629      	mov	r1, r5
   14766:	4630      	mov	r0, r6
   14768:	f7fd f874 	bl	11854 <bsd_os_timedwait>
   1476c:	2800      	cmp	r0, #0
   1476e:	d131      	bne.n	147d4 <mfu_interface_setopt+0xe4>
   14770:	6820      	ldr	r0, [r4, #0]
   14772:	2800      	cmp	r0, #0
   14774:	d0f6      	beq.n	14764 <mfu_interface_setopt+0x74>
   14776:	6904      	ldr	r4, [r0, #16]
   14778:	f7fe fdd8 	bl	1332c <rpc_dfu_client_message_free>
   1477c:	2c00      	cmp	r4, #0
   1477e:	d13c      	bne.n	147fa <mfu_interface_setopt+0x10a>
   14780:	4620      	mov	r0, r4
   14782:	b003      	add	sp, #12
   14784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14786:	9800      	ldr	r0, [sp, #0]
   14788:	6803      	ldr	r3, [r0, #0]
   1478a:	b11b      	cbz	r3, 14794 <mfu_interface_setopt+0xa4>
   1478c:	4618      	mov	r0, r3
   1478e:	f7fe fdd5 	bl	1333c <rpc_dfu_client_data_free>
   14792:	9800      	ldr	r0, [sp, #0]
   14794:	f7fe fdca 	bl	1332c <rpc_dfu_client_message_free>
   14798:	200c      	movs	r0, #12
   1479a:	f7fd f8ef 	bl	1197c <bsd_os_errno_set>
   1479e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147a2:	b003      	add	sp, #12
   147a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147a6:	2405      	movs	r4, #5
   147a8:	4625      	mov	r5, r4
   147aa:	e7b5      	b.n	14718 <mfu_interface_setopt+0x28>
   147ac:	2408      	movs	r4, #8
   147ae:	4625      	mov	r5, r4
   147b0:	e7b2      	b.n	14718 <mfu_interface_setopt+0x28>
   147b2:	b1b3      	cbz	r3, 147e2 <mfu_interface_setopt+0xf2>
   147b4:	9a08      	ldr	r2, [sp, #32]
   147b6:	2a04      	cmp	r2, #4
   147b8:	d113      	bne.n	147e2 <mfu_interface_setopt+0xf2>
   147ba:	2000      	movs	r0, #0
   147bc:	681a      	ldr	r2, [r3, #0]
   147be:	4b16      	ldr	r3, [pc, #88]	; (14818 <mfu_interface_setopt+0x128>)
   147c0:	601a      	str	r2, [r3, #0]
   147c2:	b003      	add	sp, #12
   147c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147c6:	202a      	movs	r0, #42	; 0x2a
   147c8:	f7fd f8d8 	bl	1197c <bsd_os_errno_set>
   147cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147d0:	b003      	add	sp, #12
   147d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147d4:	203c      	movs	r0, #60	; 0x3c
   147d6:	f7fd f8d1 	bl	1197c <bsd_os_errno_set>
   147da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147de:	b003      	add	sp, #12
   147e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147e2:	2016      	movs	r0, #22
   147e4:	f7fd f8ca 	bl	1197c <bsd_os_errno_set>
   147e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147ec:	e7c9      	b.n	14782 <mfu_interface_setopt+0x92>
   147ee:	2001      	movs	r0, #1
   147f0:	f7fd f8c4 	bl	1197c <bsd_os_errno_set>
   147f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147f8:	e7c3      	b.n	14782 <mfu_interface_setopt+0x92>
   147fa:	4b08      	ldr	r3, [pc, #32]	; (1481c <mfu_interface_setopt+0x12c>)
   147fc:	2008      	movs	r0, #8
   147fe:	601c      	str	r4, [r3, #0]
   14800:	f7fd f8bc 	bl	1197c <bsd_os_errno_set>
   14804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14808:	e7bb      	b.n	14782 <mfu_interface_setopt+0x92>
   1480a:	bf00      	nop
   1480c:	20020784 	.word	0x20020784
   14810:	20024e44 	.word	0x20024e44
   14814:	20020790 	.word	0x20020790
   14818:	2002078c 	.word	0x2002078c
   1481c:	20020788 	.word	0x20020788

00014820 <mfu_interface_getopt>:
   14820:	f240 2003 	movw	r0, #515	; 0x203
   14824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14828:	4281      	cmp	r1, r0
   1482a:	b082      	sub	sp, #8
   1482c:	9e08      	ldr	r6, [sp, #32]
   1482e:	f040 80ae 	bne.w	1498e <mfu_interface_getopt+0x16e>
   14832:	461d      	mov	r5, r3
   14834:	2b00      	cmp	r3, #0
   14836:	f000 80aa 	beq.w	1498e <mfu_interface_getopt+0x16e>
   1483a:	2e00      	cmp	r6, #0
   1483c:	f000 80a7 	beq.w	1498e <mfu_interface_getopt+0x16e>
   14840:	4b5e      	ldr	r3, [pc, #376]	; (149bc <mfu_interface_getopt+0x19c>)
   14842:	681b      	ldr	r3, [r3, #0]
   14844:	3b02      	subs	r3, #2
   14846:	2b01      	cmp	r3, #1
   14848:	f200 80a7 	bhi.w	1499a <mfu_interface_getopt+0x17a>
   1484c:	3a01      	subs	r2, #1
   1484e:	2a13      	cmp	r2, #19
   14850:	d879      	bhi.n	14946 <mfu_interface_getopt+0x126>
   14852:	e8df f002 	tbb	[pc, r2]
   14856:	5f17      	.short	0x5f17
   14858:	78787878 	.word	0x78787878
   1485c:	78787872 	.word	0x78787872
   14860:	78787878 	.word	0x78787878
   14864:	78787878 	.word	0x78787878
   14868:	0a78      	.short	0x0a78
   1486a:	6833      	ldr	r3, [r6, #0]
   1486c:	2b04      	cmp	r3, #4
   1486e:	f040 808e 	bne.w	1498e <mfu_interface_getopt+0x16e>
   14872:	2200      	movs	r2, #0
   14874:	4610      	mov	r0, r2
   14876:	4b52      	ldr	r3, [pc, #328]	; (149c0 <mfu_interface_getopt+0x1a0>)
   14878:	6819      	ldr	r1, [r3, #0]
   1487a:	601a      	str	r2, [r3, #0]
   1487c:	6029      	str	r1, [r5, #0]
   1487e:	b002      	add	sp, #8
   14880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14884:	6833      	ldr	r3, [r6, #0]
   14886:	2b24      	cmp	r3, #36	; 0x24
   14888:	f040 8081 	bne.w	1498e <mfu_interface_getopt+0x16e>
   1488c:	2401      	movs	r4, #1
   1488e:	46a0      	mov	r8, r4
   14890:	2100      	movs	r1, #0
   14892:	4668      	mov	r0, sp
   14894:	f7fe fd22 	bl	132dc <rpc_dfu_client_request_alloc>
   14898:	2800      	cmp	r0, #0
   1489a:	d146      	bne.n	1492a <mfu_interface_getopt+0x10a>
   1489c:	4949      	ldr	r1, [pc, #292]	; (149c4 <mfu_interface_getopt+0x1a4>)
   1489e:	9b00      	ldr	r3, [sp, #0]
   148a0:	880a      	ldrh	r2, [r1, #0]
   148a2:	f1b8 0f03 	cmp.w	r8, #3
   148a6:	f102 0201 	add.w	r2, r2, #1
   148aa:	b292      	uxth	r2, r2
   148ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   148b0:	7118      	strb	r0, [r3, #4]
   148b2:	800a      	strh	r2, [r1, #0]
   148b4:	60dc      	str	r4, [r3, #12]
   148b6:	7158      	strb	r0, [r3, #5]
   148b8:	7198      	strb	r0, [r3, #6]
   148ba:	71d8      	strb	r0, [r3, #7]
   148bc:	d04b      	beq.n	14956 <mfu_interface_getopt+0x136>
   148be:	2104      	movs	r1, #4
   148c0:	2200      	movs	r2, #0
   148c2:	4f41      	ldr	r7, [pc, #260]	; (149c8 <mfu_interface_getopt+0x1a8>)
   148c4:	6099      	str	r1, [r3, #8]
   148c6:	4618      	mov	r0, r3
   148c8:	4641      	mov	r1, r8
   148ca:	603a      	str	r2, [r7, #0]
   148cc:	f7fe fd1a 	bl	13304 <rpc_dfu_client_request_send>
   148d0:	2800      	cmp	r0, #0
   148d2:	d14d      	bne.n	14970 <mfu_interface_getopt+0x150>
   148d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   148d8:	ac02      	add	r4, sp, #8
   148da:	f844 3d04 	str.w	r3, [r4, #-4]!
   148de:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 149bc <mfu_interface_getopt+0x19c>
   148e2:	e005      	b.n	148f0 <mfu_interface_getopt+0xd0>
   148e4:	4621      	mov	r1, r4
   148e6:	4640      	mov	r0, r8
   148e8:	f7fc ffb4 	bl	11854 <bsd_os_timedwait>
   148ec:	2800      	cmp	r0, #0
   148ee:	d137      	bne.n	14960 <mfu_interface_getopt+0x140>
   148f0:	6839      	ldr	r1, [r7, #0]
   148f2:	2900      	cmp	r1, #0
   148f4:	d0f6      	beq.n	148e4 <mfu_interface_getopt+0xc4>
   148f6:	690c      	ldr	r4, [r1, #16]
   148f8:	2c00      	cmp	r4, #0
   148fa:	d154      	bne.n	149a6 <mfu_interface_getopt+0x186>
   148fc:	6832      	ldr	r2, [r6, #0]
   148fe:	3114      	adds	r1, #20
   14900:	4628      	mov	r0, r5
   14902:	f008 fe84 	bl	1d60e <memcpy>
   14906:	6838      	ldr	r0, [r7, #0]
   14908:	f7fe fd10 	bl	1332c <rpc_dfu_client_message_free>
   1490c:	4620      	mov	r0, r4
   1490e:	b002      	add	sp, #8
   14910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14914:	6833      	ldr	r3, [r6, #0]
   14916:	2b04      	cmp	r3, #4
   14918:	d139      	bne.n	1498e <mfu_interface_getopt+0x16e>
   1491a:	2402      	movs	r4, #2
   1491c:	2100      	movs	r1, #0
   1491e:	4668      	mov	r0, sp
   14920:	46a0      	mov	r8, r4
   14922:	f7fe fcdb 	bl	132dc <rpc_dfu_client_request_alloc>
   14926:	2800      	cmp	r0, #0
   14928:	d0b8      	beq.n	1489c <mfu_interface_getopt+0x7c>
   1492a:	200c      	movs	r0, #12
   1492c:	f7fd f826 	bl	1197c <bsd_os_errno_set>
   14930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14934:	b002      	add	sp, #8
   14936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1493a:	6833      	ldr	r3, [r6, #0]
   1493c:	2b04      	cmp	r3, #4
   1493e:	d126      	bne.n	1498e <mfu_interface_getopt+0x16e>
   14940:	2409      	movs	r4, #9
   14942:	46a0      	mov	r8, r4
   14944:	e7a4      	b.n	14890 <mfu_interface_getopt+0x70>
   14946:	202a      	movs	r0, #42	; 0x2a
   14948:	f7fd f818 	bl	1197c <bsd_os_errno_set>
   1494c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14950:	b002      	add	sp, #8
   14952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14956:	4a1d      	ldr	r2, [pc, #116]	; (149cc <mfu_interface_getopt+0x1ac>)
   14958:	2108      	movs	r1, #8
   1495a:	6812      	ldr	r2, [r2, #0]
   1495c:	611a      	str	r2, [r3, #16]
   1495e:	e7af      	b.n	148c0 <mfu_interface_getopt+0xa0>
   14960:	203c      	movs	r0, #60	; 0x3c
   14962:	f7fd f80b 	bl	1197c <bsd_os_errno_set>
   14966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1496a:	b002      	add	sp, #8
   1496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14970:	9800      	ldr	r0, [sp, #0]
   14972:	6803      	ldr	r3, [r0, #0]
   14974:	b11b      	cbz	r3, 1497e <mfu_interface_getopt+0x15e>
   14976:	4618      	mov	r0, r3
   14978:	f7fe fce0 	bl	1333c <rpc_dfu_client_data_free>
   1497c:	9800      	ldr	r0, [sp, #0]
   1497e:	f7fe fcd5 	bl	1332c <rpc_dfu_client_message_free>
   14982:	200c      	movs	r0, #12
   14984:	f7fc fffa 	bl	1197c <bsd_os_errno_set>
   14988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1498c:	e7d2      	b.n	14934 <mfu_interface_getopt+0x114>
   1498e:	2016      	movs	r0, #22
   14990:	f7fc fff4 	bl	1197c <bsd_os_errno_set>
   14994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14998:	e771      	b.n	1487e <mfu_interface_getopt+0x5e>
   1499a:	2001      	movs	r0, #1
   1499c:	f7fc ffee 	bl	1197c <bsd_os_errno_set>
   149a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149a4:	e76b      	b.n	1487e <mfu_interface_getopt+0x5e>
   149a6:	4b06      	ldr	r3, [pc, #24]	; (149c0 <mfu_interface_getopt+0x1a0>)
   149a8:	2008      	movs	r0, #8
   149aa:	601c      	str	r4, [r3, #0]
   149ac:	f7fc ffe6 	bl	1197c <bsd_os_errno_set>
   149b0:	6838      	ldr	r0, [r7, #0]
   149b2:	f7fe fcbb 	bl	1332c <rpc_dfu_client_message_free>
   149b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149ba:	e760      	b.n	1487e <mfu_interface_getopt+0x5e>
   149bc:	20020784 	.word	0x20020784
   149c0:	20020788 	.word	0x20020788
   149c4:	20024e44 	.word	0x20024e44
   149c8:	20020790 	.word	0x20020790
   149cc:	2002078c 	.word	0x2002078c

000149d0 <bsd_platform_error_handler>:
   149d0:	b508      	push	{r3, lr}
   149d2:	f7f7 ff5f 	bl	c894 <bsd_recoverable_error_handler>
   149d6:	bd08      	pop	{r3, pc}

000149d8 <bsd_init>:
   149d8:	b510      	push	{r4, lr}
   149da:	4c06      	ldr	r4, [pc, #24]	; (149f4 <bsd_init+0x1c>)
   149dc:	7823      	ldrb	r3, [r4, #0]
   149de:	b92b      	cbnz	r3, 149ec <bsd_init+0x14>
   149e0:	f000 f826 	bl	14a30 <bsd_platform_init>
   149e4:	b908      	cbnz	r0, 149ea <bsd_init+0x12>
   149e6:	2301      	movs	r3, #1
   149e8:	7023      	strb	r3, [r4, #0]
   149ea:	bd10      	pop	{r4, pc}
   149ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149f0:	bd10      	pop	{r4, pc}
   149f2:	bf00      	nop
   149f4:	2002658e 	.word	0x2002658e

000149f8 <bsd_shutdown>:
   149f8:	b510      	push	{r4, lr}
   149fa:	4c05      	ldr	r4, [pc, #20]	; (14a10 <bsd_shutdown+0x18>)
   149fc:	7823      	ldrb	r3, [r4, #0]
   149fe:	b123      	cbz	r3, 14a0a <bsd_shutdown+0x12>
   14a00:	f000 f87c 	bl	14afc <bsd_platform_shutdown>
   14a04:	b900      	cbnz	r0, 14a08 <bsd_shutdown+0x10>
   14a06:	7020      	strb	r0, [r4, #0]
   14a08:	bd10      	pop	{r4, pc}
   14a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a0e:	bd10      	pop	{r4, pc}
   14a10:	2002658e 	.word	0x2002658e

00014a14 <unimplemented_method>:
   14a14:	b40f      	push	{r0, r1, r2, r3}
   14a16:	b508      	push	{r3, lr}
   14a18:	202d      	movs	r0, #45	; 0x2d
   14a1a:	f7fc ffaf 	bl	1197c <bsd_os_errno_set>
   14a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a26:	b004      	add	sp, #16
   14a28:	4770      	bx	lr
   14a2a:	bf00      	nop

00014a2c <rpc_transport_ipc_fault_handler>:
   14a2c:	f7ff bfd0 	b.w	149d0 <bsd_platform_error_handler>

00014a30 <bsd_platform_init>:
   14a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a32:	b093      	sub	sp, #76	; 0x4c
   14a34:	f7fe feba 	bl	137ac <nrf_mem_init>
   14a38:	2800      	cmp	r0, #0
   14a3a:	d14c      	bne.n	14ad6 <bsd_platform_init+0xa6>
   14a3c:	4928      	ldr	r1, [pc, #160]	; (14ae0 <bsd_platform_init+0xb0>)
   14a3e:	a801      	add	r0, sp, #4
   14a40:	f7fe ff28 	bl	13894 <nrf_mem_register>
   14a44:	2800      	cmp	r0, #0
   14a46:	d146      	bne.n	14ad6 <bsd_platform_init+0xa6>
   14a48:	f7fd f882 	bl	11b50 <bsd_os_init>
   14a4c:	f004 fa68 	bl	18f20 <rpc_framework_init>
   14a50:	2800      	cmp	r0, #0
   14a52:	d140      	bne.n	14ad6 <bsd_platform_init+0xa6>
   14a54:	2320      	movs	r3, #32
   14a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14a5a:	2208      	movs	r2, #8
   14a5c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   14a60:	4f20      	ldr	r7, [pc, #128]	; (14ae4 <bsd_platform_init+0xb4>)
   14a62:	4e21      	ldr	r6, [pc, #132]	; (14ae8 <bsd_platform_init+0xb8>)
   14a64:	9303      	str	r3, [sp, #12]
   14a66:	9305      	str	r3, [sp, #20]
   14a68:	9307      	str	r3, [sp, #28]
   14a6a:	4d20      	ldr	r5, [pc, #128]	; (14aec <bsd_platform_init+0xbc>)
   14a6c:	9109      	str	r1, [sp, #36]	; 0x24
   14a6e:	910d      	str	r1, [sp, #52]	; 0x34
   14a70:	4c1f      	ldr	r4, [pc, #124]	; (14af0 <bsd_platform_init+0xc0>)
   14a72:	4920      	ldr	r1, [pc, #128]	; (14af4 <bsd_platform_init+0xc4>)
   14a74:	4b20      	ldr	r3, [pc, #128]	; (14af8 <bsd_platform_init+0xc8>)
   14a76:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   14a7a:	eb0d 0002 	add.w	r0, sp, r2
   14a7e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   14a82:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   14a86:	9702      	str	r7, [sp, #8]
   14a88:	9604      	str	r6, [sp, #16]
   14a8a:	9506      	str	r5, [sp, #24]
   14a8c:	9408      	str	r4, [sp, #32]
   14a8e:	910a      	str	r1, [sp, #40]	; 0x28
   14a90:	930c      	str	r3, [sp, #48]	; 0x30
   14a92:	f000 fbe7 	bl	15264 <rpc_transport_ipc_init>
   14a96:	b108      	cbz	r0, 14a9c <bsd_platform_init+0x6c>
   14a98:	b013      	add	sp, #76	; 0x4c
   14a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a9c:	f003 ffd0 	bl	18a40 <interface_init>
   14aa0:	b9c8      	cbnz	r0, 14ad6 <bsd_platform_init+0xa6>
   14aa2:	f7fe fac9 	bl	13038 <at_interface_init>
   14aa6:	b9b0      	cbnz	r0, 14ad6 <bsd_platform_init+0xa6>
   14aa8:	f002 fd08 	bl	174bc <ip_interface_init>
   14aac:	b998      	cbnz	r0, 14ad6 <bsd_platform_init+0xa6>
   14aae:	f7ff f8e9 	bl	13c84 <tls_interface_init>
   14ab2:	b980      	cbnz	r0, 14ad6 <bsd_platform_init+0xa6>
   14ab4:	f7ff fcb2 	bl	1441c <mfu_interface_init>
   14ab8:	b968      	cbnz	r0, 14ad6 <bsd_platform_init+0xa6>
   14aba:	f001 fac3 	bl	16044 <pdn_interface_init>
   14abe:	b950      	cbnz	r0, 14ad6 <bsd_platform_init+0xa6>
   14ac0:	f005 fcf8 	bl	1a4b4 <gnss_interface_init>
   14ac4:	b938      	cbnz	r0, 14ad6 <bsd_platform_init+0xa6>
   14ac6:	f7fd ff79 	bl	129bc <logobj_interface_init>
   14aca:	3000      	adds	r0, #0
   14acc:	bf18      	it	ne
   14ace:	2001      	movne	r0, #1
   14ad0:	4240      	negs	r0, r0
   14ad2:	b013      	add	sp, #76	; 0x4c
   14ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14ada:	b013      	add	sp, #76	; 0x4c
   14adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ade:	bf00      	nop
   14ae0:	0001f754 	.word	0x0001f754
   14ae4:	20010000 	.word	0x20010000
   14ae8:	20010040 	.word	0x20010040
   14aec:	20010020 	.word	0x20010020
   14af0:	20017060 	.word	0x20017060
   14af4:	20010060 	.word	0x20010060
   14af8:	20013060 	.word	0x20013060

00014afc <bsd_platform_shutdown>:
   14afc:	b508      	push	{r3, lr}
   14afe:	f004 f947 	bl	18d90 <interface_shutdown>
   14b02:	f000 fc13 	bl	1532c <rpc_transport_ipc_shutdown>
   14b06:	2000      	movs	r0, #0
   14b08:	bd08      	pop	{r3, pc}
   14b0a:	bf00      	nop

00014b0c <bsd_platform_af_method_table_get>:
   14b0c:	2805      	cmp	r0, #5
   14b0e:	d02a      	beq.n	14b66 <bsd_platform_af_method_table_get+0x5a>
   14b10:	b508      	push	{r3, lr}
   14b12:	d914      	bls.n	14b3e <bsd_platform_af_method_table_get+0x32>
   14b14:	280a      	cmp	r0, #10
   14b16:	d016      	beq.n	14b46 <bsd_platform_af_method_table_get+0x3a>
   14b18:	2866      	cmp	r0, #102	; 0x66
   14b1a:	d10b      	bne.n	14b34 <bsd_platform_af_method_table_get+0x28>
   14b1c:	f240 2302 	movw	r3, #514	; 0x202
   14b20:	429a      	cmp	r2, r3
   14b22:	d032      	beq.n	14b8a <bsd_platform_af_method_table_get+0x7e>
   14b24:	f240 2305 	movw	r3, #517	; 0x205
   14b28:	429a      	cmp	r2, r3
   14b2a:	d032      	beq.n	14b92 <bsd_platform_af_method_table_get+0x86>
   14b2c:	f240 2301 	movw	r3, #513	; 0x201
   14b30:	429a      	cmp	r2, r3
   14b32:	d02c      	beq.n	14b8e <bsd_platform_af_method_table_get+0x82>
   14b34:	2016      	movs	r0, #22
   14b36:	f7fc ff21 	bl	1197c <bsd_os_errno_set>
   14b3a:	2000      	movs	r0, #0
   14b3c:	bd08      	pop	{r3, pc}
   14b3e:	2801      	cmp	r0, #1
   14b40:	d016      	beq.n	14b70 <bsd_platform_af_method_table_get+0x64>
   14b42:	2802      	cmp	r0, #2
   14b44:	d1f6      	bne.n	14b34 <bsd_platform_af_method_table_get+0x28>
   14b46:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14b4a:	2a0a      	cmp	r2, #10
   14b4c:	d819      	bhi.n	14b82 <bsd_platform_af_method_table_get+0x76>
   14b4e:	2301      	movs	r3, #1
   14b50:	f240 4103 	movw	r1, #1027	; 0x403
   14b54:	4810      	ldr	r0, [pc, #64]	; (14b98 <bsd_platform_af_method_table_get+0x8c>)
   14b56:	fa03 f202 	lsl.w	r2, r3, r2
   14b5a:	420a      	tst	r2, r1
   14b5c:	f100 0328 	add.w	r3, r0, #40	; 0x28
   14b60:	bf18      	it	ne
   14b62:	4618      	movne	r0, r3
   14b64:	bd08      	pop	{r3, pc}
   14b66:	2903      	cmp	r1, #3
   14b68:	480c      	ldr	r0, [pc, #48]	; (14b9c <bsd_platform_af_method_table_get+0x90>)
   14b6a:	bf18      	it	ne
   14b6c:	2000      	movne	r0, #0
   14b6e:	4770      	bx	lr
   14b70:	f240 2303 	movw	r3, #515	; 0x203
   14b74:	429a      	cmp	r2, r3
   14b76:	d006      	beq.n	14b86 <bsd_platform_af_method_table_get+0x7a>
   14b78:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14b7c:	d1da      	bne.n	14b34 <bsd_platform_af_method_table_get+0x28>
   14b7e:	4808      	ldr	r0, [pc, #32]	; (14ba0 <bsd_platform_af_method_table_get+0x94>)
   14b80:	bd08      	pop	{r3, pc}
   14b82:	4805      	ldr	r0, [pc, #20]	; (14b98 <bsd_platform_af_method_table_get+0x8c>)
   14b84:	bd08      	pop	{r3, pc}
   14b86:	4807      	ldr	r0, [pc, #28]	; (14ba4 <bsd_platform_af_method_table_get+0x98>)
   14b88:	bd08      	pop	{r3, pc}
   14b8a:	4807      	ldr	r0, [pc, #28]	; (14ba8 <bsd_platform_af_method_table_get+0x9c>)
   14b8c:	bd08      	pop	{r3, pc}
   14b8e:	4807      	ldr	r0, [pc, #28]	; (14bac <bsd_platform_af_method_table_get+0xa0>)
   14b90:	bd08      	pop	{r3, pc}
   14b92:	4807      	ldr	r0, [pc, #28]	; (14bb0 <bsd_platform_af_method_table_get+0xa4>)
   14b94:	bd08      	pop	{r3, pc}
   14b96:	bf00      	nop
   14b98:	0001f624 	.word	0x0001f624
   14b9c:	0001f714 	.word	0x0001f714
   14ba0:	0001f6c4 	.word	0x0001f6c4
   14ba4:	0001f674 	.word	0x0001f674
   14ba8:	0001f69c 	.word	0x0001f69c
   14bac:	0001f5fc 	.word	0x0001f5fc
   14bb0:	0001f6ec 	.word	0x0001f6ec

00014bb4 <bsd_platform_fd_method_table_get>:
   14bb4:	b538      	push	{r3, r4, r5, lr}
   14bb6:	4605      	mov	r5, r0
   14bb8:	f004 f85e 	bl	18c78 <interface_socket_from_handle_get>
   14bbc:	4604      	mov	r4, r0
   14bbe:	b950      	cbnz	r0, 14bd6 <bsd_platform_fd_method_table_get+0x22>
   14bc0:	4b2a      	ldr	r3, [pc, #168]	; (14c6c <bsd_platform_fd_method_table_get+0xb8>)
   14bc2:	43ab      	bics	r3, r5
   14bc4:	d032      	beq.n	14c2c <bsd_platform_fd_method_table_get+0x78>
   14bc6:	4b2a      	ldr	r3, [pc, #168]	; (14c70 <bsd_platform_fd_method_table_get+0xbc>)
   14bc8:	43ab      	bics	r3, r5
   14bca:	d043      	beq.n	14c54 <bsd_platform_fd_method_table_get+0xa0>
   14bcc:	4b29      	ldr	r3, [pc, #164]	; (14c74 <bsd_platform_fd_method_table_get+0xc0>)
   14bce:	43ab      	bics	r3, r5
   14bd0:	d146      	bne.n	14c60 <bsd_platform_fd_method_table_get+0xac>
   14bd2:	4829      	ldr	r0, [pc, #164]	; (14c78 <bsd_platform_fd_method_table_get+0xc4>)
   14bd4:	bd38      	pop	{r3, r4, r5, pc}
   14bd6:	68c3      	ldr	r3, [r0, #12]
   14bd8:	6942      	ldr	r2, [r0, #20]
   14bda:	2b05      	cmp	r3, #5
   14bdc:	d034      	beq.n	14c48 <bsd_platform_fd_method_table_get+0x94>
   14bde:	d911      	bls.n	14c04 <bsd_platform_fd_method_table_get+0x50>
   14be0:	2b0a      	cmp	r3, #10
   14be2:	d013      	beq.n	14c0c <bsd_platform_fd_method_table_get+0x58>
   14be4:	2b66      	cmp	r3, #102	; 0x66
   14be6:	d12a      	bne.n	14c3e <bsd_platform_fd_method_table_get+0x8a>
   14be8:	f240 2302 	movw	r3, #514	; 0x202
   14bec:	429a      	cmp	r2, r3
   14bee:	d031      	beq.n	14c54 <bsd_platform_fd_method_table_get+0xa0>
   14bf0:	f240 2305 	movw	r3, #517	; 0x205
   14bf4:	429a      	cmp	r2, r3
   14bf6:	d031      	beq.n	14c5c <bsd_platform_fd_method_table_get+0xa8>
   14bf8:	f240 2301 	movw	r3, #513	; 0x201
   14bfc:	429a      	cmp	r2, r3
   14bfe:	d11e      	bne.n	14c3e <bsd_platform_fd_method_table_get+0x8a>
   14c00:	481e      	ldr	r0, [pc, #120]	; (14c7c <bsd_platform_fd_method_table_get+0xc8>)
   14c02:	bd38      	pop	{r3, r4, r5, pc}
   14c04:	2b01      	cmp	r3, #1
   14c06:	d013      	beq.n	14c30 <bsd_platform_fd_method_table_get+0x7c>
   14c08:	2b02      	cmp	r3, #2
   14c0a:	d118      	bne.n	14c3e <bsd_platform_fd_method_table_get+0x8a>
   14c0c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14c10:	2a0a      	cmp	r2, #10
   14c12:	d821      	bhi.n	14c58 <bsd_platform_fd_method_table_get+0xa4>
   14c14:	2301      	movs	r3, #1
   14c16:	f240 4103 	movw	r1, #1027	; 0x403
   14c1a:	4819      	ldr	r0, [pc, #100]	; (14c80 <bsd_platform_fd_method_table_get+0xcc>)
   14c1c:	fa03 f202 	lsl.w	r2, r3, r2
   14c20:	420a      	tst	r2, r1
   14c22:	f100 0428 	add.w	r4, r0, #40	; 0x28
   14c26:	bf18      	it	ne
   14c28:	4620      	movne	r0, r4
   14c2a:	bd38      	pop	{r3, r4, r5, pc}
   14c2c:	4815      	ldr	r0, [pc, #84]	; (14c84 <bsd_platform_fd_method_table_get+0xd0>)
   14c2e:	bd38      	pop	{r3, r4, r5, pc}
   14c30:	f240 2303 	movw	r3, #515	; 0x203
   14c34:	429a      	cmp	r2, r3
   14c36:	d0f9      	beq.n	14c2c <bsd_platform_fd_method_table_get+0x78>
   14c38:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14c3c:	d0c9      	beq.n	14bd2 <bsd_platform_fd_method_table_get+0x1e>
   14c3e:	2016      	movs	r0, #22
   14c40:	f7fc fe9c 	bl	1197c <bsd_os_errno_set>
   14c44:	2000      	movs	r0, #0
   14c46:	bd38      	pop	{r3, r4, r5, pc}
   14c48:	6903      	ldr	r3, [r0, #16]
   14c4a:	480f      	ldr	r0, [pc, #60]	; (14c88 <bsd_platform_fd_method_table_get+0xd4>)
   14c4c:	2b03      	cmp	r3, #3
   14c4e:	bf18      	it	ne
   14c50:	2000      	movne	r0, #0
   14c52:	bd38      	pop	{r3, r4, r5, pc}
   14c54:	480d      	ldr	r0, [pc, #52]	; (14c8c <bsd_platform_fd_method_table_get+0xd8>)
   14c56:	bd38      	pop	{r3, r4, r5, pc}
   14c58:	4809      	ldr	r0, [pc, #36]	; (14c80 <bsd_platform_fd_method_table_get+0xcc>)
   14c5a:	bd38      	pop	{r3, r4, r5, pc}
   14c5c:	480c      	ldr	r0, [pc, #48]	; (14c90 <bsd_platform_fd_method_table_get+0xdc>)
   14c5e:	bd38      	pop	{r3, r4, r5, pc}
   14c60:	2009      	movs	r0, #9
   14c62:	f7fc fe8b 	bl	1197c <bsd_os_errno_set>
   14c66:	4620      	mov	r0, r4
   14c68:	bd38      	pop	{r3, r4, r5, pc}
   14c6a:	bf00      	nop
   14c6c:	49765432 	.word	0x49765432
   14c70:	789a0000 	.word	0x789a0000
   14c74:	49765443 	.word	0x49765443
   14c78:	0001f6c4 	.word	0x0001f6c4
   14c7c:	0001f5fc 	.word	0x0001f5fc
   14c80:	0001f624 	.word	0x0001f624
   14c84:	0001f674 	.word	0x0001f674
   14c88:	0001f714 	.word	0x0001f714
   14c8c:	0001f69c 	.word	0x0001f69c
   14c90:	0001f6ec 	.word	0x0001f6ec

00014c94 <bsd_platform_getaddrinfo>:
   14c94:	f003 bb58 	b.w	18348 <ip_interface_getaddrinfo>

00014c98 <bsd_platform_freeaddrinfo>:
   14c98:	f003 bc4c 	b.w	18534 <ip_interface_freeaddrinfo>

00014c9c <bsd_platform_poll>:
   14c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14ca0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   14ca4:	b083      	sub	sp, #12
   14ca6:	9200      	str	r2, [sp, #0]
   14ca8:	2800      	cmp	r0, #0
   14caa:	d048      	beq.n	14d3e <bsd_platform_poll+0xa2>
   14cac:	1e4b      	subs	r3, r1, #1
   14cae:	2b07      	cmp	r3, #7
   14cb0:	d845      	bhi.n	14d3e <bsd_platform_poll+0xa2>
   14cb2:	4680      	mov	r8, r0
   14cb4:	4605      	mov	r5, r0
   14cb6:	2400      	movs	r4, #0
   14cb8:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   14cbc:	88ab      	ldrh	r3, [r5, #4]
   14cbe:	6828      	ldr	r0, [r5, #0]
   14cc0:	f003 0303 	and.w	r3, r3, #3
   14cc4:	a901      	add	r1, sp, #4
   14cc6:	f043 061c 	orr.w	r6, r3, #28
   14cca:	f003 ffe3 	bl	18c94 <interface_socket_event_get>
   14cce:	9b01      	ldr	r3, [sp, #4]
   14cd0:	3508      	adds	r5, #8
   14cd2:	4033      	ands	r3, r6
   14cd4:	f825 3c02 	strh.w	r3, [r5, #-2]
   14cd8:	b103      	cbz	r3, 14cdc <bsd_platform_poll+0x40>
   14cda:	3401      	adds	r4, #1
   14cdc:	42af      	cmp	r7, r5
   14cde:	d1ed      	bne.n	14cbc <bsd_platform_poll+0x20>
   14ce0:	bb9c      	cbnz	r4, 14d4a <bsd_platform_poll+0xae>
   14ce2:	4669      	mov	r1, sp
   14ce4:	4640      	mov	r0, r8
   14ce6:	f7fc fdb5 	bl	11854 <bsd_os_timedwait>
   14cea:	4607      	mov	r7, r0
   14cec:	b108      	cbz	r0, 14cf2 <bsd_platform_poll+0x56>
   14cee:	283c      	cmp	r0, #60	; 0x3c
   14cf0:	d11d      	bne.n	14d2e <bsd_platform_poll+0x92>
   14cf2:	46c1      	mov	r9, r8
   14cf4:	2600      	movs	r6, #0
   14cf6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   14cfa:	f8d9 0000 	ldr.w	r0, [r9]
   14cfe:	f003 0303 	and.w	r3, r3, #3
   14d02:	a901      	add	r1, sp, #4
   14d04:	f043 041c 	orr.w	r4, r3, #28
   14d08:	f003 ffc4 	bl	18c94 <interface_socket_event_get>
   14d0c:	9b01      	ldr	r3, [sp, #4]
   14d0e:	f109 0908 	add.w	r9, r9, #8
   14d12:	4023      	ands	r3, r4
   14d14:	f829 3c02 	strh.w	r3, [r9, #-2]
   14d18:	b103      	cbz	r3, 14d1c <bsd_platform_poll+0x80>
   14d1a:	3601      	adds	r6, #1
   14d1c:	454d      	cmp	r5, r9
   14d1e:	d1ea      	bne.n	14cf6 <bsd_platform_poll+0x5a>
   14d20:	b90e      	cbnz	r6, 14d26 <bsd_platform_poll+0x8a>
   14d22:	2f00      	cmp	r7, #0
   14d24:	d0dd      	beq.n	14ce2 <bsd_platform_poll+0x46>
   14d26:	4630      	mov	r0, r6
   14d28:	b003      	add	sp, #12
   14d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d2e:	2023      	movs	r0, #35	; 0x23
   14d30:	f7fc fe24 	bl	1197c <bsd_os_errno_set>
   14d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d38:	b003      	add	sp, #12
   14d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d3e:	2016      	movs	r0, #22
   14d40:	f7fc fe1c 	bl	1197c <bsd_os_errno_set>
   14d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d48:	e7ee      	b.n	14d28 <bsd_platform_poll+0x8c>
   14d4a:	4620      	mov	r0, r4
   14d4c:	e7ec      	b.n	14d28 <bsd_platform_poll+0x8c>
   14d4e:	bf00      	nop

00014d50 <bsd_platform_fcntl>:
   14d50:	b508      	push	{r3, lr}
   14d52:	4b06      	ldr	r3, [pc, #24]	; (14d6c <bsd_platform_fcntl+0x1c>)
   14d54:	4383      	bics	r3, r0
   14d56:	d003      	beq.n	14d60 <bsd_platform_fcntl+0x10>
   14d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14d5c:	f004 b846 	b.w	18dec <interface_socket_fcntl>
   14d60:	202d      	movs	r0, #45	; 0x2d
   14d62:	f7fc fe0b 	bl	1197c <bsd_os_errno_set>
   14d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d6a:	bd08      	pop	{r3, pc}
   14d6c:	49765432 	.word	0x49765432

00014d70 <ipc_trace_init>:
   14d70:	4b01      	ldr	r3, [pc, #4]	; (14d78 <ipc_trace_init+0x8>)
   14d72:	6018      	str	r0, [r3, #0]
   14d74:	4770      	bx	lr
   14d76:	bf00      	nop
   14d78:	200207a0 	.word	0x200207a0

00014d7c <bsd_os_trace_irq_handler>:
   14d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d7e:	4b6c      	ldr	r3, [pc, #432]	; (14f30 <bsd_os_trace_irq_handler+0x1b4>)
   14d80:	b083      	sub	sp, #12
   14d82:	781b      	ldrb	r3, [r3, #0]
   14d84:	2b00      	cmp	r3, #0
   14d86:	f000 80ad 	beq.w	14ee4 <bsd_os_trace_irq_handler+0x168>
   14d8a:	4b6a      	ldr	r3, [pc, #424]	; (14f34 <bsd_os_trace_irq_handler+0x1b8>)
   14d8c:	681c      	ldr	r4, [r3, #0]
   14d8e:	68a2      	ldr	r2, [r4, #8]
   14d90:	6863      	ldr	r3, [r4, #4]
   14d92:	429a      	cmp	r2, r3
   14d94:	d02d      	beq.n	14df2 <bsd_os_trace_irq_handler+0x76>
   14d96:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14d9a:	f8ad 3000 	strh.w	r3, [sp]
   14d9e:	7823      	ldrb	r3, [r4, #0]
   14da0:	466e      	mov	r6, sp
   14da2:	f88d 3004 	strb.w	r3, [sp, #4]
   14da6:	6863      	ldr	r3, [r4, #4]
   14da8:	2105      	movs	r1, #5
   14daa:	429a      	cmp	r2, r3
   14dac:	bf2a      	itet	cs
   14dae:	6927      	ldrcs	r7, [r4, #16]
   14db0:	1a9f      	subcc	r7, r3, r2
   14db2:	1abf      	subcs	r7, r7, r2
   14db4:	429a      	cmp	r2, r3
   14db6:	bf94      	ite	ls
   14db8:	2500      	movls	r5, #0
   14dba:	68e5      	ldrhi	r5, [r4, #12]
   14dbc:	b2bf      	uxth	r7, r7
   14dbe:	bf88      	it	hi
   14dc0:	1b5b      	subhi	r3, r3, r5
   14dc2:	4630      	mov	r0, r6
   14dc4:	bf88      	it	hi
   14dc6:	b29d      	uxthhi	r5, r3
   14dc8:	f8ad 7002 	strh.w	r7, [sp, #2]
   14dcc:	f7fc fed8 	bl	11b80 <bsd_os_trace_put>
   14dd0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14dd4:	68a0      	ldr	r0, [r4, #8]
   14dd6:	f7fc fed3 	bl	11b80 <bsd_os_trace_put>
   14dda:	68a3      	ldr	r3, [r4, #8]
   14ddc:	6922      	ldr	r2, [r4, #16]
   14dde:	441f      	add	r7, r3
   14de0:	4297      	cmp	r7, r2
   14de2:	bf08      	it	eq
   14de4:	68e3      	ldreq	r3, [r4, #12]
   14de6:	60a7      	str	r7, [r4, #8]
   14de8:	bf08      	it	eq
   14dea:	60a3      	streq	r3, [r4, #8]
   14dec:	2d00      	cmp	r5, #0
   14dee:	f040 808d 	bne.w	14f0c <bsd_os_trace_irq_handler+0x190>
   14df2:	4b51      	ldr	r3, [pc, #324]	; (14f38 <bsd_os_trace_irq_handler+0x1bc>)
   14df4:	681c      	ldr	r4, [r3, #0]
   14df6:	68a2      	ldr	r2, [r4, #8]
   14df8:	6863      	ldr	r3, [r4, #4]
   14dfa:	429a      	cmp	r2, r3
   14dfc:	d02c      	beq.n	14e58 <bsd_os_trace_irq_handler+0xdc>
   14dfe:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14e02:	f8ad 3000 	strh.w	r3, [sp]
   14e06:	7823      	ldrb	r3, [r4, #0]
   14e08:	466e      	mov	r6, sp
   14e0a:	f88d 3004 	strb.w	r3, [sp, #4]
   14e0e:	6863      	ldr	r3, [r4, #4]
   14e10:	2105      	movs	r1, #5
   14e12:	429a      	cmp	r2, r3
   14e14:	bf2a      	itet	cs
   14e16:	6927      	ldrcs	r7, [r4, #16]
   14e18:	1a9f      	subcc	r7, r3, r2
   14e1a:	1abf      	subcs	r7, r7, r2
   14e1c:	429a      	cmp	r2, r3
   14e1e:	bf94      	ite	ls
   14e20:	2500      	movls	r5, #0
   14e22:	68e5      	ldrhi	r5, [r4, #12]
   14e24:	b2bf      	uxth	r7, r7
   14e26:	bf88      	it	hi
   14e28:	1b5b      	subhi	r3, r3, r5
   14e2a:	4630      	mov	r0, r6
   14e2c:	bf88      	it	hi
   14e2e:	b29d      	uxthhi	r5, r3
   14e30:	f8ad 7002 	strh.w	r7, [sp, #2]
   14e34:	f7fc fea4 	bl	11b80 <bsd_os_trace_put>
   14e38:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14e3c:	68a0      	ldr	r0, [r4, #8]
   14e3e:	f7fc fe9f 	bl	11b80 <bsd_os_trace_put>
   14e42:	68a3      	ldr	r3, [r4, #8]
   14e44:	6922      	ldr	r2, [r4, #16]
   14e46:	441f      	add	r7, r3
   14e48:	4297      	cmp	r7, r2
   14e4a:	bf08      	it	eq
   14e4c:	68e3      	ldreq	r3, [r4, #12]
   14e4e:	60a7      	str	r7, [r4, #8]
   14e50:	bf08      	it	eq
   14e52:	60a3      	streq	r3, [r4, #8]
   14e54:	2d00      	cmp	r5, #0
   14e56:	d148      	bne.n	14eea <bsd_os_trace_irq_handler+0x16e>
   14e58:	4b38      	ldr	r3, [pc, #224]	; (14f3c <bsd_os_trace_irq_handler+0x1c0>)
   14e5a:	681c      	ldr	r4, [r3, #0]
   14e5c:	68a2      	ldr	r2, [r4, #8]
   14e5e:	6863      	ldr	r3, [r4, #4]
   14e60:	429a      	cmp	r2, r3
   14e62:	d02b      	beq.n	14ebc <bsd_os_trace_irq_handler+0x140>
   14e64:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14e68:	f8ad 3000 	strh.w	r3, [sp]
   14e6c:	7823      	ldrb	r3, [r4, #0]
   14e6e:	466e      	mov	r6, sp
   14e70:	f88d 3004 	strb.w	r3, [sp, #4]
   14e74:	6863      	ldr	r3, [r4, #4]
   14e76:	2105      	movs	r1, #5
   14e78:	429a      	cmp	r2, r3
   14e7a:	bf2a      	itet	cs
   14e7c:	6927      	ldrcs	r7, [r4, #16]
   14e7e:	1a9f      	subcc	r7, r3, r2
   14e80:	1abf      	subcs	r7, r7, r2
   14e82:	429a      	cmp	r2, r3
   14e84:	bf94      	ite	ls
   14e86:	2500      	movls	r5, #0
   14e88:	68e5      	ldrhi	r5, [r4, #12]
   14e8a:	b2bf      	uxth	r7, r7
   14e8c:	bf88      	it	hi
   14e8e:	1b5b      	subhi	r3, r3, r5
   14e90:	4630      	mov	r0, r6
   14e92:	bf88      	it	hi
   14e94:	b29d      	uxthhi	r5, r3
   14e96:	f8ad 7002 	strh.w	r7, [sp, #2]
   14e9a:	f7fc fe71 	bl	11b80 <bsd_os_trace_put>
   14e9e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14ea2:	68a0      	ldr	r0, [r4, #8]
   14ea4:	f7fc fe6c 	bl	11b80 <bsd_os_trace_put>
   14ea8:	68a3      	ldr	r3, [r4, #8]
   14eaa:	6922      	ldr	r2, [r4, #16]
   14eac:	441f      	add	r7, r3
   14eae:	4297      	cmp	r7, r2
   14eb0:	bf08      	it	eq
   14eb2:	68e3      	ldreq	r3, [r4, #12]
   14eb4:	60a7      	str	r7, [r4, #8]
   14eb6:	bf08      	it	eq
   14eb8:	60a3      	streq	r3, [r4, #8]
   14eba:	b90d      	cbnz	r5, 14ec0 <bsd_os_trace_irq_handler+0x144>
   14ebc:	b003      	add	sp, #12
   14ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ec0:	4630      	mov	r0, r6
   14ec2:	2105      	movs	r1, #5
   14ec4:	f8ad 5002 	strh.w	r5, [sp, #2]
   14ec8:	f7fc fe5a 	bl	11b80 <bsd_os_trace_put>
   14ecc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14ed0:	68e0      	ldr	r0, [r4, #12]
   14ed2:	f7fc fe55 	bl	11b80 <bsd_os_trace_put>
   14ed6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14eda:	68e3      	ldr	r3, [r4, #12]
   14edc:	4413      	add	r3, r2
   14ede:	60a3      	str	r3, [r4, #8]
   14ee0:	b003      	add	sp, #12
   14ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ee4:	f7fc fe0e 	bl	11b04 <bsd_os_trace_irq_clear>
   14ee8:	e74f      	b.n	14d8a <bsd_os_trace_irq_handler+0xe>
   14eea:	2105      	movs	r1, #5
   14eec:	4630      	mov	r0, r6
   14eee:	f8ad 5002 	strh.w	r5, [sp, #2]
   14ef2:	f7fc fe45 	bl	11b80 <bsd_os_trace_put>
   14ef6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14efa:	68e0      	ldr	r0, [r4, #12]
   14efc:	f7fc fe40 	bl	11b80 <bsd_os_trace_put>
   14f00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14f04:	68e3      	ldr	r3, [r4, #12]
   14f06:	4413      	add	r3, r2
   14f08:	60a3      	str	r3, [r4, #8]
   14f0a:	e7a5      	b.n	14e58 <bsd_os_trace_irq_handler+0xdc>
   14f0c:	2105      	movs	r1, #5
   14f0e:	4630      	mov	r0, r6
   14f10:	f8ad 5002 	strh.w	r5, [sp, #2]
   14f14:	f7fc fe34 	bl	11b80 <bsd_os_trace_put>
   14f18:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f1c:	68e0      	ldr	r0, [r4, #12]
   14f1e:	f7fc fe2f 	bl	11b80 <bsd_os_trace_put>
   14f22:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14f26:	68e3      	ldr	r3, [r4, #12]
   14f28:	4413      	add	r3, r2
   14f2a:	60a3      	str	r3, [r4, #8]
   14f2c:	e761      	b.n	14df2 <bsd_os_trace_irq_handler+0x76>
   14f2e:	bf00      	nop
   14f30:	2002658f 	.word	0x2002658f
   14f34:	2002079c 	.word	0x2002079c
   14f38:	20020794 	.word	0x20020794
   14f3c:	20020798 	.word	0x20020798

00014f40 <ipc_trace_handle>:
   14f40:	2200      	movs	r2, #0
   14f42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f46:	4bb0      	ldr	r3, [pc, #704]	; (15208 <_flash_used+0x9c>)
   14f48:	b083      	sub	sp, #12
   14f4a:	681b      	ldr	r3, [r3, #0]
   14f4c:	6919      	ldr	r1, [r3, #16]
   14f4e:	695c      	ldr	r4, [r3, #20]
   14f50:	7c18      	ldrb	r0, [r3, #16]
   14f52:	741a      	strb	r2, [r3, #16]
   14f54:	7c58      	ldrb	r0, [r3, #17]
   14f56:	745a      	strb	r2, [r3, #17]
   14f58:	7c98      	ldrb	r0, [r3, #18]
   14f5a:	749a      	strb	r2, [r3, #18]
   14f5c:	7cd8      	ldrb	r0, [r3, #19]
   14f5e:	74da      	strb	r2, [r3, #19]
   14f60:	7d18      	ldrb	r0, [r3, #20]
   14f62:	751a      	strb	r2, [r3, #20]
   14f64:	7d58      	ldrb	r0, [r3, #21]
   14f66:	755a      	strb	r2, [r3, #21]
   14f68:	7d98      	ldrb	r0, [r3, #22]
   14f6a:	759a      	strb	r2, [r3, #22]
   14f6c:	7dd8      	ldrb	r0, [r3, #23]
   14f6e:	75da      	strb	r2, [r3, #23]
   14f70:	b1b9      	cbz	r1, 14fa2 <ipc_trace_handle+0x62>
   14f72:	3901      	subs	r1, #1
   14f74:	2903      	cmp	r1, #3
   14f76:	d814      	bhi.n	14fa2 <ipc_trace_handle+0x62>
   14f78:	e8df f011 	tbh	[pc, r1, lsl #1]
   14f7c:	010300d6 	.word	0x010300d6
   14f80:	00160004 	.word	0x00160004
   14f84:	2501      	movs	r5, #1
   14f86:	2003      	movs	r0, #3
   14f88:	2200      	movs	r2, #0
   14f8a:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14f8e:	4c9f      	ldr	r4, [pc, #636]	; (1520c <_flash_used+0xa0>)
   14f90:	7025      	strb	r5, [r4, #0]
   14f92:	7a1c      	ldrb	r4, [r3, #8]
   14f94:	7218      	strb	r0, [r3, #8]
   14f96:	7a58      	ldrb	r0, [r3, #9]
   14f98:	725a      	strb	r2, [r3, #9]
   14f9a:	7a98      	ldrb	r0, [r3, #10]
   14f9c:	729a      	strb	r2, [r3, #10]
   14f9e:	7ada      	ldrb	r2, [r3, #11]
   14fa0:	72d9      	strb	r1, [r3, #11]
   14fa2:	b003      	add	sp, #12
   14fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa8:	2104      	movs	r1, #4
   14faa:	2200      	movs	r2, #0
   14fac:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   14fb0:	7a1c      	ldrb	r4, [r3, #8]
   14fb2:	7219      	strb	r1, [r3, #8]
   14fb4:	7a59      	ldrb	r1, [r3, #9]
   14fb6:	725a      	strb	r2, [r3, #9]
   14fb8:	4994      	ldr	r1, [pc, #592]	; (1520c <_flash_used+0xa0>)
   14fba:	7a9c      	ldrb	r4, [r3, #10]
   14fbc:	729a      	strb	r2, [r3, #10]
   14fbe:	7adc      	ldrb	r4, [r3, #11]
   14fc0:	72d8      	strb	r0, [r3, #11]
   14fc2:	700a      	strb	r2, [r1, #0]
   14fc4:	780b      	ldrb	r3, [r1, #0]
   14fc6:	2b00      	cmp	r3, #0
   14fc8:	f000 8117 	beq.w	151fa <_flash_used+0x8e>
   14fcc:	4b90      	ldr	r3, [pc, #576]	; (15210 <_flash_used+0xa4>)
   14fce:	681c      	ldr	r4, [r3, #0]
   14fd0:	68a2      	ldr	r2, [r4, #8]
   14fd2:	6863      	ldr	r3, [r4, #4]
   14fd4:	429a      	cmp	r2, r3
   14fd6:	d02d      	beq.n	15034 <ipc_trace_handle+0xf4>
   14fd8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14fdc:	f8ad 3000 	strh.w	r3, [sp]
   14fe0:	7823      	ldrb	r3, [r4, #0]
   14fe2:	466e      	mov	r6, sp
   14fe4:	f88d 3004 	strb.w	r3, [sp, #4]
   14fe8:	6863      	ldr	r3, [r4, #4]
   14fea:	2105      	movs	r1, #5
   14fec:	429a      	cmp	r2, r3
   14fee:	bf2a      	itet	cs
   14ff0:	6927      	ldrcs	r7, [r4, #16]
   14ff2:	1a9f      	subcc	r7, r3, r2
   14ff4:	1abf      	subcs	r7, r7, r2
   14ff6:	429a      	cmp	r2, r3
   14ff8:	bf94      	ite	ls
   14ffa:	2500      	movls	r5, #0
   14ffc:	68e5      	ldrhi	r5, [r4, #12]
   14ffe:	b2bf      	uxth	r7, r7
   15000:	bf88      	it	hi
   15002:	1b5b      	subhi	r3, r3, r5
   15004:	4630      	mov	r0, r6
   15006:	bf88      	it	hi
   15008:	b29d      	uxthhi	r5, r3
   1500a:	f8ad 7002 	strh.w	r7, [sp, #2]
   1500e:	f7fc fdb7 	bl	11b80 <bsd_os_trace_put>
   15012:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   15016:	68a0      	ldr	r0, [r4, #8]
   15018:	f7fc fdb2 	bl	11b80 <bsd_os_trace_put>
   1501c:	68a3      	ldr	r3, [r4, #8]
   1501e:	6922      	ldr	r2, [r4, #16]
   15020:	441f      	add	r7, r3
   15022:	4297      	cmp	r7, r2
   15024:	bf08      	it	eq
   15026:	68e3      	ldreq	r3, [r4, #12]
   15028:	60a7      	str	r7, [r4, #8]
   1502a:	bf08      	it	eq
   1502c:	60a3      	streq	r3, [r4, #8]
   1502e:	2d00      	cmp	r5, #0
   15030:	f040 80d2 	bne.w	151d8 <_flash_used+0x6c>
   15034:	4b77      	ldr	r3, [pc, #476]	; (15214 <_flash_used+0xa8>)
   15036:	681c      	ldr	r4, [r3, #0]
   15038:	68a2      	ldr	r2, [r4, #8]
   1503a:	6863      	ldr	r3, [r4, #4]
   1503c:	429a      	cmp	r2, r3
   1503e:	d02d      	beq.n	1509c <ipc_trace_handle+0x15c>
   15040:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   15044:	f8ad 3000 	strh.w	r3, [sp]
   15048:	7823      	ldrb	r3, [r4, #0]
   1504a:	466e      	mov	r6, sp
   1504c:	f88d 3004 	strb.w	r3, [sp, #4]
   15050:	6863      	ldr	r3, [r4, #4]
   15052:	2105      	movs	r1, #5
   15054:	429a      	cmp	r2, r3
   15056:	bf2a      	itet	cs
   15058:	6927      	ldrcs	r7, [r4, #16]
   1505a:	1a9f      	subcc	r7, r3, r2
   1505c:	1abf      	subcs	r7, r7, r2
   1505e:	429a      	cmp	r2, r3
   15060:	bf94      	ite	ls
   15062:	2500      	movls	r5, #0
   15064:	68e5      	ldrhi	r5, [r4, #12]
   15066:	b2bf      	uxth	r7, r7
   15068:	bf88      	it	hi
   1506a:	1b5b      	subhi	r3, r3, r5
   1506c:	4630      	mov	r0, r6
   1506e:	bf88      	it	hi
   15070:	b29d      	uxthhi	r5, r3
   15072:	f8ad 7002 	strh.w	r7, [sp, #2]
   15076:	f7fc fd83 	bl	11b80 <bsd_os_trace_put>
   1507a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1507e:	68a0      	ldr	r0, [r4, #8]
   15080:	f7fc fd7e 	bl	11b80 <bsd_os_trace_put>
   15084:	68a3      	ldr	r3, [r4, #8]
   15086:	6922      	ldr	r2, [r4, #16]
   15088:	441f      	add	r7, r3
   1508a:	4297      	cmp	r7, r2
   1508c:	bf08      	it	eq
   1508e:	68e3      	ldreq	r3, [r4, #12]
   15090:	60a7      	str	r7, [r4, #8]
   15092:	bf08      	it	eq
   15094:	60a3      	streq	r3, [r4, #8]
   15096:	2d00      	cmp	r5, #0
   15098:	f040 808d 	bne.w	151b6 <_flash_used+0x4a>
   1509c:	4b5e      	ldr	r3, [pc, #376]	; (15218 <_flash_used+0xac>)
   1509e:	681c      	ldr	r4, [r3, #0]
   150a0:	68a2      	ldr	r2, [r4, #8]
   150a2:	6863      	ldr	r3, [r4, #4]
   150a4:	429a      	cmp	r2, r3
   150a6:	f43f af7c 	beq.w	14fa2 <ipc_trace_handle+0x62>
   150aa:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   150ae:	f8ad 3000 	strh.w	r3, [sp]
   150b2:	7823      	ldrb	r3, [r4, #0]
   150b4:	466e      	mov	r6, sp
   150b6:	f88d 3004 	strb.w	r3, [sp, #4]
   150ba:	6863      	ldr	r3, [r4, #4]
   150bc:	2105      	movs	r1, #5
   150be:	429a      	cmp	r2, r3
   150c0:	bf2a      	itet	cs
   150c2:	6927      	ldrcs	r7, [r4, #16]
   150c4:	1a9f      	subcc	r7, r3, r2
   150c6:	1abf      	subcs	r7, r7, r2
   150c8:	429a      	cmp	r2, r3
   150ca:	bf94      	ite	ls
   150cc:	2500      	movls	r5, #0
   150ce:	68e5      	ldrhi	r5, [r4, #12]
   150d0:	b2bf      	uxth	r7, r7
   150d2:	bf88      	it	hi
   150d4:	1b5b      	subhi	r3, r3, r5
   150d6:	4630      	mov	r0, r6
   150d8:	bf88      	it	hi
   150da:	b29d      	uxthhi	r5, r3
   150dc:	f8ad 7002 	strh.w	r7, [sp, #2]
   150e0:	f7fc fd4e 	bl	11b80 <bsd_os_trace_put>
   150e4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   150e8:	68a0      	ldr	r0, [r4, #8]
   150ea:	f7fc fd49 	bl	11b80 <bsd_os_trace_put>
   150ee:	68a3      	ldr	r3, [r4, #8]
   150f0:	6922      	ldr	r2, [r4, #16]
   150f2:	441f      	add	r7, r3
   150f4:	4297      	cmp	r7, r2
   150f6:	bf08      	it	eq
   150f8:	68e3      	ldreq	r3, [r4, #12]
   150fa:	60a7      	str	r7, [r4, #8]
   150fc:	bf08      	it	eq
   150fe:	60a3      	streq	r3, [r4, #8]
   15100:	2d00      	cmp	r5, #0
   15102:	f43f af4e 	beq.w	14fa2 <ipc_trace_handle+0x62>
   15106:	2105      	movs	r1, #5
   15108:	4630      	mov	r0, r6
   1510a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1510e:	f7fc fd37 	bl	11b80 <bsd_os_trace_put>
   15112:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   15116:	68e0      	ldr	r0, [r4, #12]
   15118:	f7fc fd32 	bl	11b80 <bsd_os_trace_put>
   1511c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15120:	68e3      	ldr	r3, [r4, #12]
   15122:	4413      	add	r3, r2
   15124:	60a3      	str	r3, [r4, #8]
   15126:	e73c      	b.n	14fa2 <ipc_trace_handle+0x62>
   15128:	4a38      	ldr	r2, [pc, #224]	; (1520c <_flash_used+0xa0>)
   1512a:	7811      	ldrb	r1, [r2, #0]
   1512c:	b109      	cbz	r1, 15132 <ipc_trace_handle+0x1f2>
   1512e:	2100      	movs	r1, #0
   15130:	7011      	strb	r1, [r2, #0]
   15132:	68a5      	ldr	r5, [r4, #8]
   15134:	2d00      	cmp	r5, #0
   15136:	d039      	beq.n	151ac <_flash_used+0x40>
   15138:	f04f 0c00 	mov.w	ip, #0
   1513c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 15214 <_flash_used+0xa8>
   15140:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 15210 <_flash_used+0xa4>
   15144:	4934      	ldr	r1, [pc, #208]	; (15218 <_flash_used+0xac>)
   15146:	46e1      	mov	r9, ip
   15148:	4666      	mov	r6, ip
   1514a:	4662      	mov	r2, ip
   1514c:	f8d1 e000 	ldr.w	lr, [r1]
   15150:	f8da 8000 	ldr.w	r8, [sl]
   15154:	f8db 7000 	ldr.w	r7, [fp]
   15158:	e008      	b.n	1516c <_flash_used>
   1515a:	2963      	cmp	r1, #99	; 0x63
   1515c:	d016      	beq.n	1518c <_flash_used+0x20>
   1515e:	2961      	cmp	r1, #97	; 0x61
   15160:	bf04      	itt	eq
   15162:	4607      	moveq	r7, r0
   15164:	2601      	moveq	r6, #1
   15166:	3201      	adds	r2, #1
   15168:	42aa      	cmp	r2, r5
   1516a:	d013      	beq.n	15194 <_flash_used+0x28>
   1516c:	1c91      	adds	r1, r2, #2
   1516e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   15172:	6848      	ldr	r0, [r1, #4]
   15174:	7801      	ldrb	r1, [r0, #0]
   15176:	2962      	cmp	r1, #98	; 0x62
   15178:	d1ef      	bne.n	1515a <ipc_trace_handle+0x21a>
   1517a:	4680      	mov	r8, r0
   1517c:	f04f 0901 	mov.w	r9, #1
   15180:	e7f1      	b.n	15166 <ipc_trace_handle+0x226>
   15182:	f7fc fcb7 	bl	11af4 <bsd_os_trace_irq_set>
   15186:	b003      	add	sp, #12
   15188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1518c:	4686      	mov	lr, r0
   1518e:	f04f 0c01 	mov.w	ip, #1
   15192:	e7e8      	b.n	15166 <ipc_trace_handle+0x226>
   15194:	bba6      	cbnz	r6, 15200 <_flash_used+0x94>
   15196:	f1b9 0f00 	cmp.w	r9, #0
   1519a:	d001      	beq.n	151a0 <_flash_used+0x34>
   1519c:	f8ca 8000 	str.w	r8, [sl]
   151a0:	f1bc 0f00 	cmp.w	ip, #0
   151a4:	d002      	beq.n	151ac <_flash_used+0x40>
   151a6:	4a1c      	ldr	r2, [pc, #112]	; (15218 <_flash_used+0xac>)
   151a8:	f8c2 e000 	str.w	lr, [r2]
   151ac:	2001      	movs	r0, #1
   151ae:	2200      	movs	r2, #0
   151b0:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   151b4:	e6ed      	b.n	14f92 <ipc_trace_handle+0x52>
   151b6:	2105      	movs	r1, #5
   151b8:	4630      	mov	r0, r6
   151ba:	f8ad 5002 	strh.w	r5, [sp, #2]
   151be:	f7fc fcdf 	bl	11b80 <bsd_os_trace_put>
   151c2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   151c6:	68e0      	ldr	r0, [r4, #12]
   151c8:	f7fc fcda 	bl	11b80 <bsd_os_trace_put>
   151cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   151d0:	68e3      	ldr	r3, [r4, #12]
   151d2:	4413      	add	r3, r2
   151d4:	60a3      	str	r3, [r4, #8]
   151d6:	e761      	b.n	1509c <ipc_trace_handle+0x15c>
   151d8:	2105      	movs	r1, #5
   151da:	4630      	mov	r0, r6
   151dc:	f8ad 5002 	strh.w	r5, [sp, #2]
   151e0:	f7fc fcce 	bl	11b80 <bsd_os_trace_put>
   151e4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   151e8:	68e0      	ldr	r0, [r4, #12]
   151ea:	f7fc fcc9 	bl	11b80 <bsd_os_trace_put>
   151ee:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   151f2:	68e3      	ldr	r3, [r4, #12]
   151f4:	4413      	add	r3, r2
   151f6:	60a3      	str	r3, [r4, #8]
   151f8:	e71c      	b.n	15034 <ipc_trace_handle+0xf4>
   151fa:	f7fc fc83 	bl	11b04 <bsd_os_trace_irq_clear>
   151fe:	e6e5      	b.n	14fcc <ipc_trace_handle+0x8c>
   15200:	f8cb 7000 	str.w	r7, [fp]
   15204:	e7c7      	b.n	15196 <_flash_used+0x2a>
   15206:	bf00      	nop
   15208:	200207a0 	.word	0x200207a0
   1520c:	2002658f 	.word	0x2002658f
   15210:	2002079c 	.word	0x2002079c
   15214:	20020794 	.word	0x20020794
   15218:	20020798 	.word	0x20020798

0001521c <rpc_trace_coredump_in_progress>:
   1521c:	4b01      	ldr	r3, [pc, #4]	; (15224 <rpc_trace_coredump_in_progress+0x8>)
   1521e:	7818      	ldrb	r0, [r3, #0]
   15220:	4770      	bx	lr
   15222:	bf00      	nop
   15224:	2002658f 	.word	0x2002658f

00015228 <transport_reset>:
   15228:	2000      	movs	r0, #0
   1522a:	4770      	bx	lr

0001522c <transport_data_free>:
   1522c:	4b0b      	ldr	r3, [pc, #44]	; (1525c <transport_data_free+0x30>)
   1522e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15232:	4413      	add	r3, r2
   15234:	4298      	cmp	r0, r3
   15236:	d20d      	bcs.n	15254 <transport_data_free+0x28>
   15238:	4282      	cmp	r2, r0
   1523a:	d80b      	bhi.n	15254 <transport_data_free+0x28>
   1523c:	b510      	push	{r4, lr}
   1523e:	4604      	mov	r4, r0
   15240:	f000 fdfc 	bl	15e3c <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   15244:	b140      	cbz	r0, 15258 <transport_data_free+0x2c>
   15246:	4a06      	ldr	r2, [pc, #24]	; (15260 <transport_data_free+0x34>)
   15248:	6084      	str	r4, [r0, #8]
   1524a:	6002      	str	r2, [r0, #0]
   1524c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15250:	f000 bd3c 	b.w	15ccc <rpc_transport_ipc_tx_send>
   15254:	f7fe bc58 	b.w	13b08 <nrf_shared_free>
   15258:	bd10      	pop	{r4, pc}
   1525a:	bf00      	nop
   1525c:	200207a4 	.word	0x200207a4
   15260:	00020001 	.word	0x00020001

00015264 <rpc_transport_ipc_init>:
   15264:	2800      	cmp	r0, #0
   15266:	d02b      	beq.n	152c0 <rpc_transport_ipc_init+0x5c>
   15268:	b530      	push	{r4, r5, lr}
   1526a:	b089      	sub	sp, #36	; 0x24
   1526c:	aa01      	add	r2, sp, #4
   1526e:	4669      	mov	r1, sp
   15270:	4604      	mov	r4, r0
   15272:	f000 fc41 	bl	15af8 <rpc_transport_ipc_tx_init>
   15276:	4603      	mov	r3, r0
   15278:	b140      	cbz	r0, 1528c <rpc_transport_ipc_init+0x28>
   1527a:	4a13      	ldr	r2, [pc, #76]	; (152c8 <rpc_transport_ipc_init+0x64>)
   1527c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15280:	c803      	ldmia	r0, {r0, r1}
   15282:	e882 0003 	stmia.w	r2, {r0, r1}
   15286:	4618      	mov	r0, r3
   15288:	b009      	add	sp, #36	; 0x24
   1528a:	bd30      	pop	{r4, r5, pc}
   1528c:	e9dd 1200 	ldrd	r1, r2, [sp]
   15290:	4620      	mov	r0, r4
   15292:	f000 f857 	bl	15344 <rpc_transport_ipc_rx_init>
   15296:	4603      	mov	r3, r0
   15298:	2800      	cmp	r0, #0
   1529a:	d1ee      	bne.n	1527a <rpc_transport_ipc_init+0x16>
   1529c:	4b0b      	ldr	r3, [pc, #44]	; (152cc <rpc_transport_ipc_init+0x68>)
   1529e:	490c      	ldr	r1, [pc, #48]	; (152d0 <rpc_transport_ipc_init+0x6c>)
   152a0:	480c      	ldr	r0, [pc, #48]	; (152d4 <rpc_transport_ipc_init+0x70>)
   152a2:	4a0d      	ldr	r2, [pc, #52]	; (152d8 <rpc_transport_ipc_init+0x74>)
   152a4:	9303      	str	r3, [sp, #12]
   152a6:	4d0d      	ldr	r5, [pc, #52]	; (152dc <rpc_transport_ipc_init+0x78>)
   152a8:	4b0d      	ldr	r3, [pc, #52]	; (152e0 <rpc_transport_ipc_init+0x7c>)
   152aa:	9104      	str	r1, [sp, #16]
   152ac:	9005      	str	r0, [sp, #20]
   152ae:	490d      	ldr	r1, [pc, #52]	; (152e4 <rpc_transport_ipc_init+0x80>)
   152b0:	a802      	add	r0, sp, #8
   152b2:	9307      	str	r3, [sp, #28]
   152b4:	9506      	str	r5, [sp, #24]
   152b6:	9202      	str	r2, [sp, #8]
   152b8:	f003 ffb4 	bl	19224 <rpc_transport_register>
   152bc:	4603      	mov	r3, r0
   152be:	e7dc      	b.n	1527a <rpc_transport_ipc_init+0x16>
   152c0:	230e      	movs	r3, #14
   152c2:	4618      	mov	r0, r3
   152c4:	4770      	bx	lr
   152c6:	bf00      	nop
   152c8:	200207a4 	.word	0x200207a4
   152cc:	00015dcd 	.word	0x00015dcd
   152d0:	00015e9d 	.word	0x00015e9d
   152d4:	00015961 	.word	0x00015961
   152d8:	00015ccd 	.word	0x00015ccd
   152dc:	0001522d 	.word	0x0001522d
   152e0:	00015229 	.word	0x00015229
   152e4:	200207ac 	.word	0x200207ac

000152e8 <rpc_transport_rx_handle>:
   152e8:	b160      	cbz	r0, 15304 <rpc_transport_rx_handle+0x1c>
   152ea:	b508      	push	{r3, lr}
   152ec:	6843      	ldr	r3, [r0, #4]
   152ee:	b2db      	uxtb	r3, r3
   152f0:	2b02      	cmp	r3, #2
   152f2:	d00e      	beq.n	15312 <rpc_transport_rx_handle+0x2a>
   152f4:	6803      	ldr	r3, [r0, #0]
   152f6:	0c1b      	lsrs	r3, r3, #16
   152f8:	2b02      	cmp	r3, #2
   152fa:	d005      	beq.n	15308 <rpc_transport_rx_handle+0x20>
   152fc:	2b04      	cmp	r3, #4
   152fe:	d00e      	beq.n	1531e <rpc_transport_rx_handle+0x36>
   15300:	2000      	movs	r0, #0
   15302:	bd08      	pop	{r3, pc}
   15304:	2000      	movs	r0, #0
   15306:	4770      	bx	lr
   15308:	6880      	ldr	r0, [r0, #8]
   1530a:	f7fe fbfd 	bl	13b08 <nrf_shared_free>
   1530e:	2000      	movs	r0, #0
   15310:	bd08      	pop	{r3, pc}
   15312:	4601      	mov	r1, r0
   15314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15318:	4803      	ldr	r0, [pc, #12]	; (15328 <rpc_transport_rx_handle+0x40>)
   1531a:	f003 be75 	b.w	19008 <rpc_transport_input>
   1531e:	4802      	ldr	r0, [pc, #8]	; (15328 <rpc_transport_rx_handle+0x40>)
   15320:	f003 ffe0 	bl	192e4 <rpc_transport_unregister>
   15324:	2000      	movs	r0, #0
   15326:	bd08      	pop	{r3, pc}
   15328:	200207ac 	.word	0x200207ac

0001532c <rpc_transport_ipc_shutdown>:
   1532c:	b508      	push	{r3, lr}
   1532e:	f000 fdbf 	bl	15eb0 <rpc_transport_ipc_tx_suspend>
   15332:	f000 fb4b 	bl	159cc <rpc_transport_ipc_rx_suspend>
   15336:	f000 fdc1 	bl	15ebc <rpc_transport_ipc_tx_shutdown>
   1533a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1533e:	f000 bb65 	b.w	15a0c <rpc_transport_ipc_rx_shutdown>
   15342:	bf00      	nop

00015344 <rpc_transport_ipc_rx_init>:
   15344:	2800      	cmp	r0, #0
   15346:	f000 80ff 	beq.w	15548 <rpc_transport_ipc_rx_init+0x204>
   1534a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1534e:	6805      	ldr	r5, [r0, #0]
   15350:	b095      	sub	sp, #84	; 0x54
   15352:	2d00      	cmp	r5, #0
   15354:	f000 80ee 	beq.w	15534 <rpc_transport_ipc_rx_init+0x1f0>
   15358:	6883      	ldr	r3, [r0, #8]
   1535a:	2b00      	cmp	r3, #0
   1535c:	f000 80ea 	beq.w	15534 <rpc_transport_ipc_rx_init+0x1f0>
   15360:	6907      	ldr	r7, [r0, #16]
   15362:	2f00      	cmp	r7, #0
   15364:	f000 80e6 	beq.w	15534 <rpc_transport_ipc_rx_init+0x1f0>
   15368:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1536a:	2c00      	cmp	r4, #0
   1536c:	f000 80e2 	beq.w	15534 <rpc_transport_ipc_rx_init+0x1f0>
   15370:	6844      	ldr	r4, [r0, #4]
   15372:	2c1b      	cmp	r4, #27
   15374:	f240 80e3 	bls.w	1553e <rpc_transport_ipc_rx_init+0x1fa>
   15378:	68c4      	ldr	r4, [r0, #12]
   1537a:	2c0b      	cmp	r4, #11
   1537c:	f240 80df 	bls.w	1553e <rpc_transport_ipc_rx_init+0x1fa>
   15380:	f8d0 e014 	ldr.w	lr, [r0, #20]
   15384:	f1be 0f17 	cmp.w	lr, #23
   15388:	f240 80d9 	bls.w	1553e <rpc_transport_ipc_rx_init+0x1fa>
   1538c:	2600      	movs	r6, #0
   1538e:	4604      	mov	r4, r0
   15390:	486f      	ldr	r0, [pc, #444]	; (15550 <rpc_transport_ipc_rx_init+0x20c>)
   15392:	e9cd 1200 	strd	r1, r2, [sp]
   15396:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 15570 <rpc_transport_ipc_rx_init+0x22c>
   1539a:	496e      	ldr	r1, [pc, #440]	; (15554 <rpc_transport_ipc_rx_init+0x210>)
   1539c:	8006      	strh	r6, [r0, #0]
   1539e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   153a0:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 15574 <rpc_transport_ipc_rx_init+0x230>
   153a4:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 15578 <rpc_transport_ipc_rx_init+0x234>
   153a8:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 1557c <rpc_transport_ipc_rx_init+0x238>
   153ac:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 15580 <rpc_transport_ipc_rx_init+0x23c>
   153b0:	4672      	mov	r2, lr
   153b2:	600e      	str	r6, [r1, #0]
   153b4:	f8ca 0000 	str.w	r0, [sl]
   153b8:	4631      	mov	r1, r6
   153ba:	4638      	mov	r0, r7
   153bc:	f8cc 6000 	str.w	r6, [ip]
   153c0:	f8cb 3000 	str.w	r3, [fp]
   153c4:	f8c8 6000 	str.w	r6, [r8]
   153c8:	f8c9 6000 	str.w	r6, [r9]
   153cc:	f008 f949 	bl	1d662 <memset>
   153d0:	69e3      	ldr	r3, [r4, #28]
   153d2:	4638      	mov	r0, r7
   153d4:	603b      	str	r3, [r7, #0]
   153d6:	69a3      	ldr	r3, [r4, #24]
   153d8:	607b      	str	r3, [r7, #4]
   153da:	f7ff fcc9 	bl	14d70 <ipc_trace_init>
   153de:	2201      	movs	r2, #1
   153e0:	f04f 0c04 	mov.w	ip, #4
   153e4:	4b5c      	ldr	r3, [pc, #368]	; (15558 <rpc_transport_ipc_rx_init+0x214>)
   153e6:	495d      	ldr	r1, [pc, #372]	; (1555c <rpc_transport_ipc_rx_init+0x218>)
   153e8:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   153ec:	6809      	ldr	r1, [r1, #0]
   153ee:	2080      	movs	r0, #128	; 0x80
   153f0:	9104      	str	r1, [sp, #16]
   153f2:	495b      	ldr	r1, [pc, #364]	; (15560 <rpc_transport_ipc_rx_init+0x21c>)
   153f4:	f8dd e010 	ldr.w	lr, [sp, #16]
   153f8:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   153fc:	6809      	ldr	r1, [r1, #0]
   153fe:	702e      	strb	r6, [r5, #0]
   15400:	9103      	str	r1, [sp, #12]
   15402:	706e      	strb	r6, [r5, #1]
   15404:	70ee      	strb	r6, [r5, #3]
   15406:	70aa      	strb	r2, [r5, #2]
   15408:	9903      	ldr	r1, [sp, #12]
   1540a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1540c:	f8db e000 	ldr.w	lr, [fp]
   15410:	6069      	str	r1, [r5, #4]
   15412:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   15414:	9c01      	ldr	r4, [sp, #4]
   15416:	60a9      	str	r1, [r5, #8]
   15418:	60ec      	str	r4, [r5, #12]
   1541a:	9c00      	ldr	r4, [sp, #0]
   1541c:	4951      	ldr	r1, [pc, #324]	; (15564 <rpc_transport_ipc_rx_init+0x220>)
   1541e:	61af      	str	r7, [r5, #24]
   15420:	f8c5 e014 	str.w	lr, [r5, #20]
   15424:	612c      	str	r4, [r5, #16]
   15426:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1542a:	680c      	ldr	r4, [r1, #0]
   1542c:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   15430:	9405      	str	r4, [sp, #20]
   15432:	9c05      	ldr	r4, [sp, #20]
   15434:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   15438:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1543c:	f44f 6780 	mov.w	r7, #1024	; 0x400
   15440:	9406      	str	r4, [sp, #24]
   15442:	9c06      	ldr	r4, [sp, #24]
   15444:	2410      	movs	r4, #16
   15446:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1544a:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1544e:	4d46      	ldr	r5, [pc, #280]	; (15568 <rpc_transport_ipc_rx_init+0x224>)
   15450:	9407      	str	r4, [sp, #28]
   15452:	9c07      	ldr	r4, [sp, #28]
   15454:	2440      	movs	r4, #64	; 0x40
   15456:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1545a:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1545e:	9408      	str	r4, [sp, #32]
   15460:	9c08      	ldr	r4, [sp, #32]
   15462:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   15466:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   1546a:	9009      	str	r0, [sp, #36]	; 0x24
   1546c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1546e:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   15472:	6808      	ldr	r0, [r1, #0]
   15474:	900a      	str	r0, [sp, #40]	; 0x28
   15476:	980a      	ldr	r0, [sp, #40]	; 0x28
   15478:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   1547c:	6888      	ldr	r0, [r1, #8]
   1547e:	900b      	str	r0, [sp, #44]	; 0x2c
   15480:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15482:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   15486:	6908      	ldr	r0, [r1, #16]
   15488:	900c      	str	r0, [sp, #48]	; 0x30
   1548a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1548c:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   15490:	6988      	ldr	r0, [r1, #24]
   15492:	900d      	str	r0, [sp, #52]	; 0x34
   15494:	980d      	ldr	r0, [sp, #52]	; 0x34
   15496:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   1549a:	69c8      	ldr	r0, [r1, #28]
   1549c:	f501 7101 	add.w	r1, r1, #516	; 0x204
   154a0:	900e      	str	r0, [sp, #56]	; 0x38
   154a2:	980e      	ldr	r0, [sp, #56]	; 0x38
   154a4:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   154a8:	4310      	orrs	r0, r2
   154aa:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   154ae:	680c      	ldr	r4, [r1, #0]
   154b0:	482e      	ldr	r0, [pc, #184]	; (1556c <rpc_transport_ipc_rx_init+0x228>)
   154b2:	940f      	str	r4, [sp, #60]	; 0x3c
   154b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   154b6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   154ba:	ea44 040c 	orr.w	r4, r4, ip
   154be:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   154c2:	680c      	ldr	r4, [r1, #0]
   154c4:	9410      	str	r4, [sp, #64]	; 0x40
   154c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
   154c8:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   154cc:	f044 0410 	orr.w	r4, r4, #16
   154d0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   154d4:	680c      	ldr	r4, [r1, #0]
   154d6:	9411      	str	r4, [sp, #68]	; 0x44
   154d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
   154da:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   154de:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   154e2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   154e6:	680c      	ldr	r4, [r1, #0]
   154e8:	9412      	str	r4, [sp, #72]	; 0x48
   154ea:	9c12      	ldr	r4, [sp, #72]	; 0x48
   154ec:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   154f0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   154f4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   154f8:	f8da 3000 	ldr.w	r3, [sl]
   154fc:	6809      	ldr	r1, [r1, #0]
   154fe:	015b      	lsls	r3, r3, #5
   15500:	9113      	str	r1, [sp, #76]	; 0x4c
   15502:	b2db      	uxtb	r3, r3
   15504:	9913      	ldr	r1, [sp, #76]	; 0x4c
   15506:	f8c8 2000 	str.w	r2, [r8]
   1550a:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   1550e:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   15512:	6047      	str	r7, [r0, #4]
   15514:	9602      	str	r6, [sp, #8]
   15516:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   1551a:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   1551e:	9302      	str	r3, [sp, #8]
   15520:	9b02      	ldr	r3, [sp, #8]
   15522:	f8d8 3000 	ldr.w	r3, [r8]
   15526:	2b01      	cmp	r3, #1
   15528:	d0fb      	beq.n	15522 <rpc_transport_ipc_rx_init+0x1de>
   1552a:	f8d9 0000 	ldr.w	r0, [r9]
   1552e:	b015      	add	sp, #84	; 0x54
   15530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15534:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15538:	b015      	add	sp, #84	; 0x54
   1553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1553e:	f24c 0009 	movw	r0, #49161	; 0xc009
   15542:	b015      	add	sp, #84	; 0x54
   15544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15548:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1554c:	4770      	bx	lr
   1554e:	bf00      	nop
   15550:	20024e46 	.word	0x20024e46
   15554:	200207bc 	.word	0x200207bc
   15558:	4002a000 	.word	0x4002a000
   1555c:	4002a610 	.word	0x4002a610
   15560:	4002a614 	.word	0x4002a614
   15564:	4002a590 	.word	0x4002a590
   15568:	40005000 	.word	0x40005000
   1556c:	e000e100 	.word	0xe000e100
   15570:	200207b4 	.word	0x200207b4
   15574:	200207c0 	.word	0x200207c0
   15578:	200207b8 	.word	0x200207b8
   1557c:	200207c4 	.word	0x200207c4
   15580:	200207b0 	.word	0x200207b0

00015584 <IPC_IRQHandler>:
   15584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15588:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1558c:	4ca7      	ldr	r4, [pc, #668]	; (1582c <IPC_IRQHandler+0x2a8>)
   1558e:	b087      	sub	sp, #28
   15590:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   15594:	f3bf 8f4f 	dsb	sy
   15598:	f3bf 8f6f 	isb	sy
   1559c:	4ea4      	ldr	r6, [pc, #656]	; (15830 <IPC_IRQHandler+0x2ac>)
   1559e:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   155a2:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   155a6:	061f      	lsls	r7, r3, #24
   155a8:	f100 80c8 	bmi.w	1573c <IPC_IRQHandler+0x1b8>
   155ac:	4ba0      	ldr	r3, [pc, #640]	; (15830 <IPC_IRQHandler+0x2ac>)
   155ae:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   155b2:	07d0      	lsls	r0, r2, #31
   155b4:	f100 80d4 	bmi.w	15760 <IPC_IRQHandler+0x1dc>
   155b8:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   155bc:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   155c0:	f040 80b6 	bne.w	15730 <IPC_IRQHandler+0x1ac>
   155c4:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   155c8:	0749      	lsls	r1, r1, #29
   155ca:	f100 80e6 	bmi.w	1579a <IPC_IRQHandler+0x216>
   155ce:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   155d2:	06da      	lsls	r2, r3, #27
   155d4:	f140 809d 	bpl.w	15712 <IPC_IRQHandler+0x18e>
   155d8:	2100      	movs	r1, #0
   155da:	4a95      	ldr	r2, [pc, #596]	; (15830 <IPC_IRQHandler+0x2ac>)
   155dc:	4b95      	ldr	r3, [pc, #596]	; (15834 <IPC_IRQHandler+0x2b0>)
   155de:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   155e2:	681b      	ldr	r3, [r3, #0]
   155e4:	9304      	str	r3, [sp, #16]
   155e6:	9b04      	ldr	r3, [sp, #16]
   155e8:	f8df 8270 	ldr.w	r8, [pc, #624]	; 1585c <IPC_IRQHandler+0x2d8>
   155ec:	4f92      	ldr	r7, [pc, #584]	; (15838 <IPC_IRQHandler+0x2b4>)
   155ee:	f8df 9270 	ldr.w	r9, [pc, #624]	; 15860 <IPC_IRQHandler+0x2dc>
   155f2:	f8d8 a000 	ldr.w	sl, [r8]
   155f6:	f8da 1000 	ldr.w	r1, [sl]
   155fa:	2900      	cmp	r1, #0
   155fc:	d03f      	beq.n	1567e <IPC_IRQHandler+0xfa>
   155fe:	2200      	movs	r2, #0
   15600:	4614      	mov	r4, r2
   15602:	e002      	b.n	1560a <IPC_IRQHandler+0x86>
   15604:	3401      	adds	r4, #1
   15606:	428c      	cmp	r4, r1
   15608:	d227      	bcs.n	1565a <IPC_IRQHandler+0xd6>
   1560a:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   1560e:	68ab      	ldr	r3, [r5, #8]
   15610:	2b00      	cmp	r3, #0
   15612:	d0f7      	beq.n	15604 <IPC_IRQHandler+0x80>
   15614:	686e      	ldr	r6, [r5, #4]
   15616:	b2f6      	uxtb	r6, r6
   15618:	2e01      	cmp	r6, #1
   1561a:	d1f3      	bne.n	15604 <IPC_IRQHandler+0x80>
   1561c:	6868      	ldr	r0, [r5, #4]
   1561e:	f8b9 3000 	ldrh.w	r3, [r9]
   15622:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   15626:	d1ed      	bne.n	15604 <IPC_IRQHandler+0x80>
   15628:	686a      	ldr	r2, [r5, #4]
   1562a:	3301      	adds	r3, #1
   1562c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15630:	f042 0202 	orr.w	r2, r2, #2
   15634:	606a      	str	r2, [r5, #4]
   15636:	68a8      	ldr	r0, [r5, #8]
   15638:	f8a9 3000 	strh.w	r3, [r9]
   1563c:	f7ff fe54 	bl	152e8 <rpc_transport_rx_handle>
   15640:	4632      	mov	r2, r6
   15642:	b928      	cbnz	r0, 15650 <IPC_IRQHandler+0xcc>
   15644:	686b      	ldr	r3, [r5, #4]
   15646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1564a:	f043 0303 	orr.w	r3, r3, #3
   1564e:	606b      	str	r3, [r5, #4]
   15650:	f8da 1000 	ldr.w	r1, [sl]
   15654:	3401      	adds	r4, #1
   15656:	428c      	cmp	r4, r1
   15658:	d3d7      	bcc.n	1560a <IPC_IRQHandler+0x86>
   1565a:	2a00      	cmp	r2, #0
   1565c:	d1cd      	bne.n	155fa <IPC_IRQHandler+0x76>
   1565e:	b171      	cbz	r1, 1567e <IPC_IRQHandler+0xfa>
   15660:	4613      	mov	r3, r2
   15662:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   15666:	6890      	ldr	r0, [r2, #8]
   15668:	3301      	adds	r3, #1
   1566a:	b130      	cbz	r0, 1567a <IPC_IRQHandler+0xf6>
   1566c:	f8d2 b004 	ldr.w	fp, [r2, #4]
   15670:	fa5f fb8b 	uxtb.w	fp, fp
   15674:	f1bb 0f01 	cmp.w	fp, #1
   15678:	d003      	beq.n	15682 <IPC_IRQHandler+0xfe>
   1567a:	428b      	cmp	r3, r1
   1567c:	d1f1      	bne.n	15662 <IPC_IRQHandler+0xde>
   1567e:	f04f 0b00 	mov.w	fp, #0
   15682:	f8d7 a000 	ldr.w	sl, [r7]
   15686:	f8da 2000 	ldr.w	r2, [sl]
   1568a:	2a00      	cmp	r2, #0
   1568c:	d03d      	beq.n	1570a <IPC_IRQHandler+0x186>
   1568e:	2100      	movs	r1, #0
   15690:	460c      	mov	r4, r1
   15692:	e002      	b.n	1569a <IPC_IRQHandler+0x116>
   15694:	3401      	adds	r4, #1
   15696:	4294      	cmp	r4, r2
   15698:	d227      	bcs.n	156ea <IPC_IRQHandler+0x166>
   1569a:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   1569e:	68ab      	ldr	r3, [r5, #8]
   156a0:	2b00      	cmp	r3, #0
   156a2:	d0f7      	beq.n	15694 <IPC_IRQHandler+0x110>
   156a4:	686e      	ldr	r6, [r5, #4]
   156a6:	b2f6      	uxtb	r6, r6
   156a8:	2e01      	cmp	r6, #1
   156aa:	d1f3      	bne.n	15694 <IPC_IRQHandler+0x110>
   156ac:	6868      	ldr	r0, [r5, #4]
   156ae:	f8b9 3000 	ldrh.w	r3, [r9]
   156b2:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   156b6:	d1ed      	bne.n	15694 <IPC_IRQHandler+0x110>
   156b8:	686a      	ldr	r2, [r5, #4]
   156ba:	3301      	adds	r3, #1
   156bc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   156c0:	f042 0202 	orr.w	r2, r2, #2
   156c4:	606a      	str	r2, [r5, #4]
   156c6:	68a8      	ldr	r0, [r5, #8]
   156c8:	f8a9 3000 	strh.w	r3, [r9]
   156cc:	f7ff fe0c 	bl	152e8 <rpc_transport_rx_handle>
   156d0:	4631      	mov	r1, r6
   156d2:	b928      	cbnz	r0, 156e0 <IPC_IRQHandler+0x15c>
   156d4:	686a      	ldr	r2, [r5, #4]
   156d6:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   156da:	f043 0303 	orr.w	r3, r3, #3
   156de:	606b      	str	r3, [r5, #4]
   156e0:	f8da 2000 	ldr.w	r2, [sl]
   156e4:	3401      	adds	r4, #1
   156e6:	4294      	cmp	r4, r2
   156e8:	d3d7      	bcc.n	1569a <IPC_IRQHandler+0x116>
   156ea:	2900      	cmp	r1, #0
   156ec:	d1cd      	bne.n	1568a <IPC_IRQHandler+0x106>
   156ee:	b162      	cbz	r2, 1570a <IPC_IRQHandler+0x186>
   156f0:	460b      	mov	r3, r1
   156f2:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   156f6:	6888      	ldr	r0, [r1, #8]
   156f8:	3301      	adds	r3, #1
   156fa:	b120      	cbz	r0, 15706 <IPC_IRQHandler+0x182>
   156fc:	6849      	ldr	r1, [r1, #4]
   156fe:	b2c9      	uxtb	r1, r1
   15700:	2901      	cmp	r1, #1
   15702:	f43f af76 	beq.w	155f2 <IPC_IRQHandler+0x6e>
   15706:	4293      	cmp	r3, r2
   15708:	d1f3      	bne.n	156f2 <IPC_IRQHandler+0x16e>
   1570a:	f1bb 0f00 	cmp.w	fp, #0
   1570e:	f47f af70 	bne.w	155f2 <IPC_IRQHandler+0x6e>
   15712:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15716:	4b49      	ldr	r3, [pc, #292]	; (1583c <IPC_IRQHandler+0x2b8>)
   15718:	4a44      	ldr	r2, [pc, #272]	; (1582c <IPC_IRQHandler+0x2a8>)
   1571a:	681b      	ldr	r3, [r3, #0]
   1571c:	015b      	lsls	r3, r3, #5
   1571e:	b2db      	uxtb	r3, r3
   15720:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   15724:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   15728:	6051      	str	r1, [r2, #4]
   1572a:	b007      	add	sp, #28
   1572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15730:	2206      	movs	r2, #6
   15732:	4b43      	ldr	r3, [pc, #268]	; (15840 <IPC_IRQHandler+0x2bc>)
   15734:	601a      	str	r2, [r3, #0]
   15736:	b007      	add	sp, #28
   15738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1573c:	f7ff fc00 	bl	14f40 <ipc_trace_handle>
   15740:	f7ff fd6c 	bl	1521c <rpc_trace_coredump_in_progress>
   15744:	2800      	cmp	r0, #0
   15746:	d149      	bne.n	157dc <IPC_IRQHandler+0x258>
   15748:	4b3e      	ldr	r3, [pc, #248]	; (15844 <IPC_IRQHandler+0x2c0>)
   1574a:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   1574e:	681b      	ldr	r3, [r3, #0]
   15750:	9301      	str	r3, [sp, #4]
   15752:	9b01      	ldr	r3, [sp, #4]
   15754:	4b36      	ldr	r3, [pc, #216]	; (15830 <IPC_IRQHandler+0x2ac>)
   15756:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1575a:	07d0      	lsls	r0, r2, #31
   1575c:	f57f af2c 	bpl.w	155b8 <IPC_IRQHandler+0x34>
   15760:	2000      	movs	r0, #0
   15762:	f248 0202 	movw	r2, #32770	; 0x8002
   15766:	4938      	ldr	r1, [pc, #224]	; (15848 <IPC_IRQHandler+0x2c4>)
   15768:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1576c:	6809      	ldr	r1, [r1, #0]
   1576e:	9102      	str	r1, [sp, #8]
   15770:	9902      	ldr	r1, [sp, #8]
   15772:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   15776:	4293      	cmp	r3, r2
   15778:	d040      	beq.n	157fc <IPC_IRQHandler+0x278>
   1577a:	d81e      	bhi.n	157ba <IPC_IRQHandler+0x236>
   1577c:	2b00      	cmp	r3, #0
   1577e:	d04f      	beq.n	15820 <IPC_IRQHandler+0x29c>
   15780:	2b02      	cmp	r3, #2
   15782:	d942      	bls.n	1580a <IPC_IRQHandler+0x286>
   15784:	f248 0201 	movw	r2, #32769	; 0x8001
   15788:	4293      	cmp	r3, r2
   1578a:	d149      	bne.n	15820 <IPC_IRQHandler+0x29c>
   1578c:	2003      	movs	r0, #3
   1578e:	2207      	movs	r2, #7
   15790:	492b      	ldr	r1, [pc, #172]	; (15840 <IPC_IRQHandler+0x2bc>)
   15792:	4b2e      	ldr	r3, [pc, #184]	; (1584c <IPC_IRQHandler+0x2c8>)
   15794:	6008      	str	r0, [r1, #0]
   15796:	601a      	str	r2, [r3, #0]
   15798:	e7cd      	b.n	15736 <IPC_IRQHandler+0x1b2>
   1579a:	4d29      	ldr	r5, [pc, #164]	; (15840 <IPC_IRQHandler+0x2bc>)
   1579c:	6829      	ldr	r1, [r5, #0]
   1579e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   157a2:	2901      	cmp	r1, #1
   157a4:	492a      	ldr	r1, [pc, #168]	; (15850 <IPC_IRQHandler+0x2cc>)
   157a6:	d05d      	beq.n	15864 <IPC_IRQHandler+0x2e0>
   157a8:	680a      	ldr	r2, [r1, #0]
   157aa:	9203      	str	r2, [sp, #12]
   157ac:	9a03      	ldr	r2, [sp, #12]
   157ae:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   157b2:	06db      	lsls	r3, r3, #27
   157b4:	f53f af10 	bmi.w	155d8 <IPC_IRQHandler+0x54>
   157b8:	e716      	b.n	155e8 <IPC_IRQHandler+0x64>
   157ba:	4a26      	ldr	r2, [pc, #152]	; (15854 <IPC_IRQHandler+0x2d0>)
   157bc:	4293      	cmp	r3, r2
   157be:	d814      	bhi.n	157ea <IPC_IRQHandler+0x266>
   157c0:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   157c4:	d814      	bhi.n	157f0 <IPC_IRQHandler+0x26c>
   157c6:	f248 0203 	movw	r2, #32771	; 0x8003
   157ca:	4293      	cmp	r3, r2
   157cc:	d128      	bne.n	15820 <IPC_IRQHandler+0x29c>
   157ce:	2003      	movs	r0, #3
   157d0:	2204      	movs	r2, #4
   157d2:	491b      	ldr	r1, [pc, #108]	; (15840 <IPC_IRQHandler+0x2bc>)
   157d4:	4b1d      	ldr	r3, [pc, #116]	; (1584c <IPC_IRQHandler+0x2c8>)
   157d6:	6008      	str	r0, [r1, #0]
   157d8:	601a      	str	r2, [r3, #0]
   157da:	e7ac      	b.n	15736 <IPC_IRQHandler+0x1b2>
   157dc:	23e0      	movs	r3, #224	; 0xe0
   157de:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   157e2:	6065      	str	r5, [r4, #4]
   157e4:	b007      	add	sp, #28
   157e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157ea:	4a1b      	ldr	r2, [pc, #108]	; (15858 <IPC_IRQHandler+0x2d4>)
   157ec:	4293      	cmp	r3, r2
   157ee:	d117      	bne.n	15820 <IPC_IRQHandler+0x29c>
   157f0:	2003      	movs	r0, #3
   157f2:	4913      	ldr	r1, [pc, #76]	; (15840 <IPC_IRQHandler+0x2bc>)
   157f4:	4a15      	ldr	r2, [pc, #84]	; (1584c <IPC_IRQHandler+0x2c8>)
   157f6:	6008      	str	r0, [r1, #0]
   157f8:	6013      	str	r3, [r2, #0]
   157fa:	e79c      	b.n	15736 <IPC_IRQHandler+0x1b2>
   157fc:	2003      	movs	r0, #3
   157fe:	2206      	movs	r2, #6
   15800:	490f      	ldr	r1, [pc, #60]	; (15840 <IPC_IRQHandler+0x2bc>)
   15802:	4b12      	ldr	r3, [pc, #72]	; (1584c <IPC_IRQHandler+0x2c8>)
   15804:	6008      	str	r0, [r1, #0]
   15806:	601a      	str	r2, [r3, #0]
   15808:	e795      	b.n	15736 <IPC_IRQHandler+0x1b2>
   1580a:	2303      	movs	r3, #3
   1580c:	4618      	mov	r0, r3
   1580e:	490c      	ldr	r1, [pc, #48]	; (15840 <IPC_IRQHandler+0x2bc>)
   15810:	4a0e      	ldr	r2, [pc, #56]	; (1584c <IPC_IRQHandler+0x2c8>)
   15812:	600b      	str	r3, [r1, #0]
   15814:	6013      	str	r3, [r2, #0]
   15816:	b007      	add	sp, #28
   15818:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1581c:	f7ff b906 	b.w	14a2c <rpc_transport_ipc_fault_handler>
   15820:	2303      	movs	r3, #3
   15822:	4907      	ldr	r1, [pc, #28]	; (15840 <IPC_IRQHandler+0x2bc>)
   15824:	4a09      	ldr	r2, [pc, #36]	; (1584c <IPC_IRQHandler+0x2c8>)
   15826:	600b      	str	r3, [r1, #0]
   15828:	6013      	str	r3, [r2, #0]
   1582a:	e784      	b.n	15736 <IPC_IRQHandler+0x1b2>
   1582c:	e000e100 	.word	0xe000e100
   15830:	4002a000 	.word	0x4002a000
   15834:	4002a110 	.word	0x4002a110
   15838:	200207bc 	.word	0x200207bc
   1583c:	200207b4 	.word	0x200207b4
   15840:	200207b8 	.word	0x200207b8
   15844:	4002a11c 	.word	0x4002a11c
   15848:	4002a100 	.word	0x4002a100
   1584c:	200207b0 	.word	0x200207b0
   15850:	4002a108 	.word	0x4002a108
   15854:	04400004 	.word	0x04400004
   15858:	05500001 	.word	0x05500001
   1585c:	200207c0 	.word	0x200207c0
   15860:	20024e46 	.word	0x20024e46
   15864:	4a37      	ldr	r2, [pc, #220]	; (15944 <IPC_IRQHandler+0x3c0>)
   15866:	680b      	ldr	r3, [r1, #0]
   15868:	6812      	ldr	r2, [r2, #0]
   1586a:	9305      	str	r3, [sp, #20]
   1586c:	6893      	ldr	r3, [r2, #8]
   1586e:	4836      	ldr	r0, [pc, #216]	; (15948 <IPC_IRQHandler+0x3c4>)
   15870:	4936      	ldr	r1, [pc, #216]	; (1594c <IPC_IRQHandler+0x3c8>)
   15872:	6003      	str	r3, [r0, #0]
   15874:	6854      	ldr	r4, [r2, #4]
   15876:	9a05      	ldr	r2, [sp, #20]
   15878:	600c      	str	r4, [r1, #0]
   1587a:	b16b      	cbz	r3, 15898 <IPC_IRQHandler+0x314>
   1587c:	b164      	cbz	r4, 15898 <IPC_IRQHandler+0x314>
   1587e:	681b      	ldr	r3, [r3, #0]
   15880:	2b10      	cmp	r3, #16
   15882:	d802      	bhi.n	1588a <IPC_IRQHandler+0x306>
   15884:	6822      	ldr	r2, [r4, #0]
   15886:	2a10      	cmp	r2, #16
   15888:	d90c      	bls.n	158a4 <IPC_IRQHandler+0x320>
   1588a:	2103      	movs	r1, #3
   1588c:	f24c 0206 	movw	r2, #49158	; 0xc006
   15890:	4b2f      	ldr	r3, [pc, #188]	; (15950 <IPC_IRQHandler+0x3cc>)
   15892:	6029      	str	r1, [r5, #0]
   15894:	601a      	str	r2, [r3, #0]
   15896:	e74e      	b.n	15736 <IPC_IRQHandler+0x1b2>
   15898:	2103      	movs	r1, #3
   1589a:	2210      	movs	r2, #16
   1589c:	4b2c      	ldr	r3, [pc, #176]	; (15950 <IPC_IRQHandler+0x3cc>)
   1589e:	6029      	str	r1, [r5, #0]
   158a0:	601a      	str	r2, [r3, #0]
   158a2:	e748      	b.n	15736 <IPC_IRQHandler+0x1b2>
   158a4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1595c <IPC_IRQHandler+0x3d8>
   158a8:	2a00      	cmp	r2, #0
   158aa:	d042      	beq.n	15932 <IPC_IRQHandler+0x3ae>
   158ac:	2300      	movs	r3, #0
   158ae:	f104 0904 	add.w	r9, r4, #4
   158b2:	461e      	mov	r6, r3
   158b4:	e002      	b.n	158bc <IPC_IRQHandler+0x338>
   158b6:	3601      	adds	r6, #1
   158b8:	4296      	cmp	r6, r2
   158ba:	d22a      	bcs.n	15912 <IPC_IRQHandler+0x38e>
   158bc:	00f7      	lsls	r7, r6, #3
   158be:	19e1      	adds	r1, r4, r7
   158c0:	6888      	ldr	r0, [r1, #8]
   158c2:	2800      	cmp	r0, #0
   158c4:	d0f7      	beq.n	158b6 <IPC_IRQHandler+0x332>
   158c6:	f8d1 a004 	ldr.w	sl, [r1, #4]
   158ca:	fa5f fa8a 	uxtb.w	sl, sl
   158ce:	f1ba 0f01 	cmp.w	sl, #1
   158d2:	d1f0      	bne.n	158b6 <IPC_IRQHandler+0x332>
   158d4:	f8d1 c004 	ldr.w	ip, [r1, #4]
   158d8:	f8b8 0000 	ldrh.w	r0, [r8]
   158dc:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   158e0:	d1e9      	bne.n	158b6 <IPC_IRQHandler+0x332>
   158e2:	684b      	ldr	r3, [r1, #4]
   158e4:	1c42      	adds	r2, r0, #1
   158e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   158ea:	f043 0302 	orr.w	r3, r3, #2
   158ee:	604b      	str	r3, [r1, #4]
   158f0:	6888      	ldr	r0, [r1, #8]
   158f2:	f8a8 2000 	strh.w	r2, [r8]
   158f6:	f7ff fcf7 	bl	152e8 <rpc_transport_rx_handle>
   158fa:	4653      	mov	r3, sl
   158fc:	b938      	cbnz	r0, 1590e <IPC_IRQHandler+0x38a>
   158fe:	f859 2007 	ldr.w	r2, [r9, r7]
   15902:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15906:	f042 0203 	orr.w	r2, r2, #3
   1590a:	f849 2007 	str.w	r2, [r9, r7]
   1590e:	6822      	ldr	r2, [r4, #0]
   15910:	e7d1      	b.n	158b6 <IPC_IRQHandler+0x332>
   15912:	2b00      	cmp	r3, #0
   15914:	d1c8      	bne.n	158a8 <IPC_IRQHandler+0x324>
   15916:	b912      	cbnz	r2, 1591e <IPC_IRQHandler+0x39a>
   15918:	e00b      	b.n	15932 <IPC_IRQHandler+0x3ae>
   1591a:	4293      	cmp	r3, r2
   1591c:	d009      	beq.n	15932 <IPC_IRQHandler+0x3ae>
   1591e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   15922:	6888      	ldr	r0, [r1, #8]
   15924:	3301      	adds	r3, #1
   15926:	2800      	cmp	r0, #0
   15928:	d0f7      	beq.n	1591a <IPC_IRQHandler+0x396>
   1592a:	6849      	ldr	r1, [r1, #4]
   1592c:	b2c9      	uxtb	r1, r1
   1592e:	2901      	cmp	r1, #1
   15930:	d1f3      	bne.n	1591a <IPC_IRQHandler+0x396>
   15932:	2002      	movs	r0, #2
   15934:	4b07      	ldr	r3, [pc, #28]	; (15954 <IPC_IRQHandler+0x3d0>)
   15936:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1593a:	4a07      	ldr	r2, [pc, #28]	; (15958 <IPC_IRQHandler+0x3d4>)
   1593c:	681b      	ldr	r3, [r3, #0]
   1593e:	6028      	str	r0, [r5, #0]
   15940:	e6ec      	b.n	1571c <IPC_IRQHandler+0x198>
   15942:	bf00      	nop
   15944:	200207c4 	.word	0x200207c4
   15948:	200207c0 	.word	0x200207c0
   1594c:	200207bc 	.word	0x200207bc
   15950:	200207b0 	.word	0x200207b0
   15954:	200207b4 	.word	0x200207b4
   15958:	e000e100 	.word	0xe000e100
   1595c:	20024e46 	.word	0x20024e46

00015960 <rpc_transport_msg_free>:
   15960:	b430      	push	{r4, r5}
   15962:	4b18      	ldr	r3, [pc, #96]	; (159c4 <rpc_transport_msg_free+0x64>)
   15964:	681c      	ldr	r4, [r3, #0]
   15966:	6825      	ldr	r5, [r4, #0]
   15968:	b16d      	cbz	r5, 15986 <rpc_transport_msg_free+0x26>
   1596a:	68a3      	ldr	r3, [r4, #8]
   1596c:	4283      	cmp	r3, r0
   1596e:	d027      	beq.n	159c0 <rpc_transport_msg_free+0x60>
   15970:	2300      	movs	r3, #0
   15972:	e002      	b.n	1597a <rpc_transport_msg_free+0x1a>
   15974:	6889      	ldr	r1, [r1, #8]
   15976:	4281      	cmp	r1, r0
   15978:	d019      	beq.n	159ae <rpc_transport_msg_free+0x4e>
   1597a:	3301      	adds	r3, #1
   1597c:	00da      	lsls	r2, r3, #3
   1597e:	42ab      	cmp	r3, r5
   15980:	eb04 0102 	add.w	r1, r4, r2
   15984:	d1f6      	bne.n	15974 <rpc_transport_msg_free+0x14>
   15986:	4b10      	ldr	r3, [pc, #64]	; (159c8 <rpc_transport_msg_free+0x68>)
   15988:	681c      	ldr	r4, [r3, #0]
   1598a:	6825      	ldr	r5, [r4, #0]
   1598c:	b16d      	cbz	r5, 159aa <rpc_transport_msg_free+0x4a>
   1598e:	68a3      	ldr	r3, [r4, #8]
   15990:	4283      	cmp	r3, r0
   15992:	d015      	beq.n	159c0 <rpc_transport_msg_free+0x60>
   15994:	2300      	movs	r3, #0
   15996:	e002      	b.n	1599e <rpc_transport_msg_free+0x3e>
   15998:	6889      	ldr	r1, [r1, #8]
   1599a:	4281      	cmp	r1, r0
   1599c:	d007      	beq.n	159ae <rpc_transport_msg_free+0x4e>
   1599e:	3301      	adds	r3, #1
   159a0:	00da      	lsls	r2, r3, #3
   159a2:	429d      	cmp	r5, r3
   159a4:	eb04 0102 	add.w	r1, r4, r2
   159a8:	d1f6      	bne.n	15998 <rpc_transport_msg_free+0x38>
   159aa:	bc30      	pop	{r4, r5}
   159ac:	4770      	bx	lr
   159ae:	3204      	adds	r2, #4
   159b0:	58a3      	ldr	r3, [r4, r2]
   159b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   159b6:	f043 0303 	orr.w	r3, r3, #3
   159ba:	50a3      	str	r3, [r4, r2]
   159bc:	bc30      	pop	{r4, r5}
   159be:	4770      	bx	lr
   159c0:	2204      	movs	r2, #4
   159c2:	e7f5      	b.n	159b0 <rpc_transport_msg_free+0x50>
   159c4:	200207c0 	.word	0x200207c0
   159c8:	200207bc 	.word	0x200207bc

000159cc <rpc_transport_ipc_rx_suspend>:
   159cc:	b410      	push	{r4}
   159ce:	2400      	movs	r4, #0
   159d0:	2010      	movs	r0, #16
   159d2:	2204      	movs	r2, #4
   159d4:	4b0a      	ldr	r3, [pc, #40]	; (15a00 <rpc_transport_ipc_rx_suspend+0x34>)
   159d6:	490b      	ldr	r1, [pc, #44]	; (15a04 <rpc_transport_ipc_rx_suspend+0x38>)
   159d8:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   159dc:	680c      	ldr	r4, [r1, #0]
   159de:	b083      	sub	sp, #12
   159e0:	9401      	str	r4, [sp, #4]
   159e2:	9c01      	ldr	r4, [sp, #4]
   159e4:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   159e8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   159ec:	6809      	ldr	r1, [r1, #0]
   159ee:	4b06      	ldr	r3, [pc, #24]	; (15a08 <rpc_transport_ipc_rx_suspend+0x3c>)
   159f0:	9100      	str	r1, [sp, #0]
   159f2:	9900      	ldr	r1, [sp, #0]
   159f4:	601a      	str	r2, [r3, #0]
   159f6:	b003      	add	sp, #12
   159f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   159fc:	4770      	bx	lr
   159fe:	bf00      	nop
   15a00:	4002a000 	.word	0x4002a000
   15a04:	4002a5a0 	.word	0x4002a5a0
   15a08:	200207b8 	.word	0x200207b8

00015a0c <rpc_transport_ipc_rx_shutdown>:
   15a0c:	b4f0      	push	{r4, r5, r6, r7}
   15a0e:	4a32      	ldr	r2, [pc, #200]	; (15ad8 <rpc_transport_ipc_rx_shutdown+0xcc>)
   15a10:	b08c      	sub	sp, #48	; 0x30
   15a12:	6813      	ldr	r3, [r2, #0]
   15a14:	2b06      	cmp	r3, #6
   15a16:	d1fc      	bne.n	15a12 <rpc_transport_ipc_rx_shutdown+0x6>
   15a18:	2000      	movs	r0, #0
   15a1a:	2201      	movs	r2, #1
   15a1c:	210a      	movs	r1, #10
   15a1e:	4b2f      	ldr	r3, [pc, #188]	; (15adc <rpc_transport_ipc_rx_shutdown+0xd0>)
   15a20:	9000      	str	r0, [sp, #0]
   15a22:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   15a26:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   15a2a:	9000      	str	r0, [sp, #0]
   15a2c:	9800      	ldr	r0, [sp, #0]
   15a2e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   15a32:	9101      	str	r1, [sp, #4]
   15a34:	9b01      	ldr	r3, [sp, #4]
   15a36:	b12b      	cbz	r3, 15a44 <rpc_transport_ipc_rx_shutdown+0x38>
   15a38:	9b01      	ldr	r3, [sp, #4]
   15a3a:	3b01      	subs	r3, #1
   15a3c:	9301      	str	r3, [sp, #4]
   15a3e:	9b01      	ldr	r3, [sp, #4]
   15a40:	2b00      	cmp	r3, #0
   15a42:	d1f9      	bne.n	15a38 <rpc_transport_ipc_rx_shutdown+0x2c>
   15a44:	2200      	movs	r2, #0
   15a46:	2601      	movs	r6, #1
   15a48:	2504      	movs	r5, #4
   15a4a:	2410      	movs	r4, #16
   15a4c:	4923      	ldr	r1, [pc, #140]	; (15adc <rpc_transport_ipc_rx_shutdown+0xd0>)
   15a4e:	4b24      	ldr	r3, [pc, #144]	; (15ae0 <rpc_transport_ipc_rx_shutdown+0xd4>)
   15a50:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   15a54:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   15a58:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15a5c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   15a60:	6809      	ldr	r1, [r1, #0]
   15a62:	2040      	movs	r0, #64	; 0x40
   15a64:	9102      	str	r1, [sp, #8]
   15a66:	491f      	ldr	r1, [pc, #124]	; (15ae4 <rpc_transport_ipc_rx_shutdown+0xd8>)
   15a68:	9f02      	ldr	r7, [sp, #8]
   15a6a:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   15a6e:	680f      	ldr	r7, [r1, #0]
   15a70:	2180      	movs	r1, #128	; 0x80
   15a72:	9703      	str	r7, [sp, #12]
   15a74:	4f1c      	ldr	r7, [pc, #112]	; (15ae8 <rpc_transport_ipc_rx_shutdown+0xdc>)
   15a76:	f8dd c00c 	ldr.w	ip, [sp, #12]
   15a7a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   15a7e:	683f      	ldr	r7, [r7, #0]
   15a80:	9704      	str	r7, [sp, #16]
   15a82:	4f1a      	ldr	r7, [pc, #104]	; (15aec <rpc_transport_ipc_rx_shutdown+0xe0>)
   15a84:	f8dd c010 	ldr.w	ip, [sp, #16]
   15a88:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   15a8c:	683f      	ldr	r7, [r7, #0]
   15a8e:	9705      	str	r7, [sp, #20]
   15a90:	9f05      	ldr	r7, [sp, #20]
   15a92:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   15a96:	4a16      	ldr	r2, [pc, #88]	; (15af0 <rpc_transport_ipc_rx_shutdown+0xe4>)
   15a98:	6812      	ldr	r2, [r2, #0]
   15a9a:	9206      	str	r2, [sp, #24]
   15a9c:	4a15      	ldr	r2, [pc, #84]	; (15af4 <rpc_transport_ipc_rx_shutdown+0xe8>)
   15a9e:	9f06      	ldr	r7, [sp, #24]
   15aa0:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   15aa4:	6816      	ldr	r6, [r2, #0]
   15aa6:	9607      	str	r6, [sp, #28]
   15aa8:	9e07      	ldr	r6, [sp, #28]
   15aaa:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   15aae:	6815      	ldr	r5, [r2, #0]
   15ab0:	9508      	str	r5, [sp, #32]
   15ab2:	9d08      	ldr	r5, [sp, #32]
   15ab4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   15ab8:	6814      	ldr	r4, [r2, #0]
   15aba:	9409      	str	r4, [sp, #36]	; 0x24
   15abc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15abe:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   15ac2:	6810      	ldr	r0, [r2, #0]
   15ac4:	900a      	str	r0, [sp, #40]	; 0x28
   15ac6:	980a      	ldr	r0, [sp, #40]	; 0x28
   15ac8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   15acc:	6813      	ldr	r3, [r2, #0]
   15ace:	930b      	str	r3, [sp, #44]	; 0x2c
   15ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15ad2:	b00c      	add	sp, #48	; 0x30
   15ad4:	bcf0      	pop	{r4, r5, r6, r7}
   15ad6:	4770      	bx	lr
   15ad8:	200207b8 	.word	0x200207b8
   15adc:	40005000 	.word	0x40005000
   15ae0:	4002a000 	.word	0x4002a000
   15ae4:	4002a598 	.word	0x4002a598
   15ae8:	4002a5a0 	.word	0x4002a5a0
   15aec:	4002a5a8 	.word	0x4002a5a8
   15af0:	4002a5ac 	.word	0x4002a5ac
   15af4:	4002a308 	.word	0x4002a308

00015af8 <rpc_transport_ipc_tx_init>:
   15af8:	2800      	cmp	r0, #0
   15afa:	f000 80b8 	beq.w	15c6e <rpc_transport_ipc_tx_init+0x176>
   15afe:	2900      	cmp	r1, #0
   15b00:	f000 80b5 	beq.w	15c6e <rpc_transport_ipc_tx_init+0x176>
   15b04:	2a00      	cmp	r2, #0
   15b06:	f000 80b2 	beq.w	15c6e <rpc_transport_ipc_tx_init+0x176>
   15b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b0e:	6a04      	ldr	r4, [r0, #32]
   15b10:	b085      	sub	sp, #20
   15b12:	2c00      	cmp	r4, #0
   15b14:	f000 80a6 	beq.w	15c64 <rpc_transport_ipc_tx_init+0x16c>
   15b18:	6a40      	ldr	r0, [r0, #36]	; 0x24
   15b1a:	2800      	cmp	r0, #0
   15b1c:	f000 80a2 	beq.w	15c64 <rpc_transport_ipc_tx_init+0x16c>
   15b20:	f642 4587 	movw	r5, #11399	; 0x2c87
   15b24:	f04f 0a00 	mov.w	sl, #0
   15b28:	4e55      	ldr	r6, [pc, #340]	; (15c80 <rpc_transport_ipc_tx_init+0x188>)
   15b2a:	42a8      	cmp	r0, r5
   15b2c:	f886 a000 	strb.w	sl, [r6]
   15b30:	f240 80a0 	bls.w	15c74 <rpc_transport_ipc_tx_init+0x17c>
   15b34:	2708      	movs	r7, #8
   15b36:	f8df 9180 	ldr.w	r9, [pc, #384]	; 15cb8 <rpc_transport_ipc_tx_init+0x1c0>
   15b3a:	4620      	mov	r0, r4
   15b3c:	4616      	mov	r6, r2
   15b3e:	460d      	mov	r5, r1
   15b40:	2244      	movs	r2, #68	; 0x44
   15b42:	4651      	mov	r1, sl
   15b44:	f8c9 4000 	str.w	r4, [r9]
   15b48:	f007 fd8b 	bl	1d662 <memset>
   15b4c:	f8d9 2000 	ldr.w	r2, [r9]
   15b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
   15b54:	f8df 8164 	ldr.w	r8, [pc, #356]	; 15cbc <rpc_transport_ipc_tx_init+0x1c4>
   15b58:	f882 a001 	strb.w	sl, [r2, #1]
   15b5c:	f882 a002 	strb.w	sl, [r2, #2]
   15b60:	f882 a003 	strb.w	sl, [r2, #3]
   15b64:	7017      	strb	r7, [r2, #0]
   15b66:	4618      	mov	r0, r3
   15b68:	2244      	movs	r2, #68	; 0x44
   15b6a:	4651      	mov	r1, sl
   15b6c:	f8c8 3000 	str.w	r3, [r8]
   15b70:	f007 fd77 	bl	1d662 <memset>
   15b74:	f8d8 2000 	ldr.w	r2, [r8]
   15b78:	f104 0388 	add.w	r3, r4, #136	; 0x88
   15b7c:	f8df b140 	ldr.w	fp, [pc, #320]	; 15cc0 <rpc_transport_ipc_tx_init+0x1c8>
   15b80:	7017      	strb	r7, [r2, #0]
   15b82:	f882 a001 	strb.w	sl, [r2, #1]
   15b86:	f882 a002 	strb.w	sl, [r2, #2]
   15b8a:	f882 a003 	strb.w	sl, [r2, #3]
   15b8e:	4618      	mov	r0, r3
   15b90:	f44f 7200 	mov.w	r2, #512	; 0x200
   15b94:	4651      	mov	r1, sl
   15b96:	f8cb 3000 	str.w	r3, [fp]
   15b9a:	f007 fd62 	bl	1d662 <memset>
   15b9e:	4b39      	ldr	r3, [pc, #228]	; (15c84 <rpc_transport_ipc_tx_init+0x18c>)
   15ba0:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   15ba4:	f8c3 c000 	str.w	ip, [r3]
   15ba8:	4651      	mov	r1, sl
   15baa:	4660      	mov	r0, ip
   15bac:	f44f 7200 	mov.w	r2, #512	; 0x200
   15bb0:	f007 fd57 	bl	1d662 <memset>
   15bb4:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   15bb8:	2106      	movs	r1, #6
   15bba:	f04f 0e01 	mov.w	lr, #1
   15bbe:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   15bc2:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   15bc6:	4b30      	ldr	r3, [pc, #192]	; (15c88 <rpc_transport_ipc_tx_init+0x190>)
   15bc8:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   15bcc:	605c      	str	r4, [r3, #4]
   15bce:	4c2f      	ldr	r4, [pc, #188]	; (15c8c <rpc_transport_ipc_tx_init+0x194>)
   15bd0:	f8c3 c008 	str.w	ip, [r3, #8]
   15bd4:	8199      	strh	r1, [r3, #12]
   15bd6:	f8a3 e000 	strh.w	lr, [r3]
   15bda:	4619      	mov	r1, r3
   15bdc:	611c      	str	r4, [r3, #16]
   15bde:	4b2c      	ldr	r3, [pc, #176]	; (15c90 <rpc_transport_ipc_tx_init+0x198>)
   15be0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 15cc4 <rpc_transport_ipc_tx_init+0x1cc>
   15be4:	6120      	str	r0, [r4, #16]
   15be6:	482b      	ldr	r0, [pc, #172]	; (15c94 <rpc_transport_ipc_tx_init+0x19c>)
   15be8:	6063      	str	r3, [r4, #4]
   15bea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   15bee:	60a0      	str	r0, [r4, #8]
   15bf0:	f8c4 c000 	str.w	ip, [r4]
   15bf4:	4828      	ldr	r0, [pc, #160]	; (15c98 <rpc_transport_ipc_tx_init+0x1a0>)
   15bf6:	60e3      	str	r3, [r4, #12]
   15bf8:	6162      	str	r2, [r4, #20]
   15bfa:	f7fd fe4b 	bl	13894 <nrf_mem_register>
   15bfe:	2800      	cmp	r0, #0
   15c00:	d132      	bne.n	15c68 <rpc_transport_ipc_tx_init+0x170>
   15c02:	f04f 0c02 	mov.w	ip, #2
   15c06:	2420      	movs	r4, #32
   15c08:	f8d9 1000 	ldr.w	r1, [r9]
   15c0c:	f8db 2000 	ldr.w	r2, [fp]
   15c10:	6029      	str	r1, [r5, #0]
   15c12:	4b1c      	ldr	r3, [pc, #112]	; (15c84 <rpc_transport_ipc_tx_init+0x18c>)
   15c14:	f8d8 1000 	ldr.w	r1, [r8]
   15c18:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 15cc8 <rpc_transport_ipc_tx_init+0x1d0>
   15c1c:	4d1f      	ldr	r5, [pc, #124]	; (15c9c <rpc_transport_ipc_tx_init+0x1a4>)
   15c1e:	6031      	str	r1, [r6, #0]
   15c20:	f8ce 2000 	str.w	r2, [lr]
   15c24:	681b      	ldr	r3, [r3, #0]
   15c26:	491e      	ldr	r1, [pc, #120]	; (15ca0 <rpc_transport_ipc_tx_init+0x1a8>)
   15c28:	f502 7200 	add.w	r2, r2, #512	; 0x200
   15c2c:	602a      	str	r2, [r5, #0]
   15c2e:	4e1d      	ldr	r6, [pc, #116]	; (15ca4 <rpc_transport_ipc_tx_init+0x1ac>)
   15c30:	4a1d      	ldr	r2, [pc, #116]	; (15ca8 <rpc_transport_ipc_tx_init+0x1b0>)
   15c32:	4d1e      	ldr	r5, [pc, #120]	; (15cac <rpc_transport_ipc_tx_init+0x1b4>)
   15c34:	600b      	str	r3, [r1, #0]
   15c36:	f503 7300 	add.w	r3, r3, #512	; 0x200
   15c3a:	491d      	ldr	r1, [pc, #116]	; (15cb0 <rpc_transport_ipc_tx_init+0x1b8>)
   15c3c:	6033      	str	r3, [r6, #0]
   15c3e:	8028      	strh	r0, [r5, #0]
   15c40:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   15c44:	6809      	ldr	r1, [r1, #0]
   15c46:	4b1b      	ldr	r3, [pc, #108]	; (15cb4 <rpc_transport_ipc_tx_init+0x1bc>)
   15c48:	9103      	str	r1, [sp, #12]
   15c4a:	9903      	ldr	r1, [sp, #12]
   15c4c:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   15c50:	6819      	ldr	r1, [r3, #0]
   15c52:	443b      	add	r3, r7
   15c54:	9102      	str	r1, [sp, #8]
   15c56:	9902      	ldr	r1, [sp, #8]
   15c58:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   15c5c:	681b      	ldr	r3, [r3, #0]
   15c5e:	9301      	str	r3, [sp, #4]
   15c60:	9b01      	ldr	r3, [sp, #4]
   15c62:	e001      	b.n	15c68 <rpc_transport_ipc_tx_init+0x170>
   15c64:	f24c 0007 	movw	r0, #49159	; 0xc007
   15c68:	b005      	add	sp, #20
   15c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c6e:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15c72:	4770      	bx	lr
   15c74:	f24c 0004 	movw	r0, #49156	; 0xc004
   15c78:	b005      	add	sp, #20
   15c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c7e:	bf00      	nop
   15c80:	20026590 	.word	0x20026590
   15c84:	200207f0 	.word	0x200207f0
   15c88:	200207dc 	.word	0x200207dc
   15c8c:	20020800 	.word	0x20020800
   15c90:	00040080 	.word	0x00040080
   15c94:	00040100 	.word	0x00040100
   15c98:	200207c8 	.word	0x200207c8
   15c9c:	200207d4 	.word	0x200207d4
   15ca0:	200207d0 	.word	0x200207d0
   15ca4:	200207cc 	.word	0x200207cc
   15ca8:	4002a000 	.word	0x4002a000
   15cac:	20024e48 	.word	0x20024e48
   15cb0:	4002a514 	.word	0x4002a514
   15cb4:	4002a51c 	.word	0x4002a51c
   15cb8:	200207fc 	.word	0x200207fc
   15cbc:	200207f4 	.word	0x200207f4
   15cc0:	200207f8 	.word	0x200207f8
   15cc4:	00080040 	.word	0x00080040
   15cc8:	200207d8 	.word	0x200207d8

00015ccc <rpc_transport_ipc_tx_send>:
   15ccc:	2800      	cmp	r0, #0
   15cce:	d05f      	beq.n	15d90 <rpc_transport_ipc_tx_send+0xc4>
   15cd0:	b470      	push	{r4, r5, r6}
   15cd2:	4b33      	ldr	r3, [pc, #204]	; (15da0 <rpc_transport_ipc_tx_send+0xd4>)
   15cd4:	b083      	sub	sp, #12
   15cd6:	681a      	ldr	r2, [r3, #0]
   15cd8:	4b32      	ldr	r3, [pc, #200]	; (15da4 <rpc_transport_ipc_tx_send+0xd8>)
   15cda:	4282      	cmp	r2, r0
   15cdc:	d81e      	bhi.n	15d1c <rpc_transport_ipc_tx_send+0x50>
   15cde:	681b      	ldr	r3, [r3, #0]
   15ce0:	4931      	ldr	r1, [pc, #196]	; (15da8 <rpc_transport_ipc_tx_send+0xdc>)
   15ce2:	4283      	cmp	r3, r0
   15ce4:	6809      	ldr	r1, [r1, #0]
   15ce6:	d803      	bhi.n	15cf0 <rpc_transport_ipc_tx_send+0x24>
   15ce8:	4c30      	ldr	r4, [pc, #192]	; (15dac <rpc_transport_ipc_tx_send+0xe0>)
   15cea:	6824      	ldr	r4, [r4, #0]
   15cec:	4284      	cmp	r4, r0
   15cee:	d847      	bhi.n	15d80 <rpc_transport_ipc_tx_send+0xb4>
   15cf0:	4281      	cmp	r1, r0
   15cf2:	d90e      	bls.n	15d12 <rpc_transport_ipc_tx_send+0x46>
   15cf4:	4b2e      	ldr	r3, [pc, #184]	; (15db0 <rpc_transport_ipc_tx_send+0xe4>)
   15cf6:	781b      	ldrb	r3, [r3, #0]
   15cf8:	2b00      	cmp	r3, #0
   15cfa:	d14c      	bne.n	15d96 <rpc_transport_ipc_tx_send+0xca>
   15cfc:	1a83      	subs	r3, r0, r2
   15cfe:	492d      	ldr	r1, [pc, #180]	; (15db4 <rpc_transport_ipc_tx_send+0xe8>)
   15d00:	099e      	lsrs	r6, r3, #6
   15d02:	069b      	lsls	r3, r3, #26
   15d04:	680a      	ldr	r2, [r1, #0]
   15d06:	4c2c      	ldr	r4, [pc, #176]	; (15db8 <rpc_transport_ipc_tx_send+0xec>)
   15d08:	f04f 0103 	mov.w	r1, #3
   15d0c:	f04f 0502 	mov.w	r5, #2
   15d10:	d014      	beq.n	15d3c <rpc_transport_ipc_tx_send+0x70>
   15d12:	f24c 0010 	movw	r0, #49168	; 0xc010
   15d16:	b003      	add	sp, #12
   15d18:	bc70      	pop	{r4, r5, r6}
   15d1a:	4770      	bx	lr
   15d1c:	681b      	ldr	r3, [r3, #0]
   15d1e:	4298      	cmp	r0, r3
   15d20:	d3f7      	bcc.n	15d12 <rpc_transport_ipc_tx_send+0x46>
   15d22:	4a22      	ldr	r2, [pc, #136]	; (15dac <rpc_transport_ipc_tx_send+0xe0>)
   15d24:	6812      	ldr	r2, [r2, #0]
   15d26:	4290      	cmp	r0, r2
   15d28:	d2f3      	bcs.n	15d12 <rpc_transport_ipc_tx_send+0x46>
   15d2a:	2101      	movs	r1, #1
   15d2c:	1ac3      	subs	r3, r0, r3
   15d2e:	4a23      	ldr	r2, [pc, #140]	; (15dbc <rpc_transport_ipc_tx_send+0xf0>)
   15d30:	099e      	lsrs	r6, r3, #6
   15d32:	069b      	lsls	r3, r3, #26
   15d34:	460d      	mov	r5, r1
   15d36:	6812      	ldr	r2, [r2, #0]
   15d38:	4c21      	ldr	r4, [pc, #132]	; (15dc0 <rpc_transport_ipc_tx_send+0xf4>)
   15d3a:	d1ea      	bne.n	15d12 <rpc_transport_ipc_tx_send+0x46>
   15d3c:	6843      	ldr	r3, [r0, #4]
   15d3e:	b2db      	uxtb	r3, r3
   15d40:	429d      	cmp	r5, r3
   15d42:	d120      	bne.n	15d86 <rpc_transport_ipc_tx_send+0xba>
   15d44:	2020      	movs	r0, #32
   15d46:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   15d4a:	4d1e      	ldr	r5, [pc, #120]	; (15dc4 <rpc_transport_ipc_tx_send+0xf8>)
   15d4c:	6853      	ldr	r3, [r2, #4]
   15d4e:	882e      	ldrh	r6, [r5, #0]
   15d50:	b29b      	uxth	r3, r3
   15d52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15d5a:	f043 0301 	orr.w	r3, r3, #1
   15d5e:	6053      	str	r3, [r2, #4]
   15d60:	bf00      	nop
   15d62:	3801      	subs	r0, #1
   15d64:	d1fc      	bne.n	15d60 <rpc_transport_ipc_tx_send+0x94>
   15d66:	2201      	movs	r2, #1
   15d68:	4b17      	ldr	r3, [pc, #92]	; (15dc8 <rpc_transport_ipc_tx_send+0xfc>)
   15d6a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   15d6e:	6822      	ldr	r2, [r4, #0]
   15d70:	882b      	ldrh	r3, [r5, #0]
   15d72:	9201      	str	r2, [sp, #4]
   15d74:	9a01      	ldr	r2, [sp, #4]
   15d76:	3301      	adds	r3, #1
   15d78:	802b      	strh	r3, [r5, #0]
   15d7a:	b003      	add	sp, #12
   15d7c:	bc70      	pop	{r4, r5, r6}
   15d7e:	4770      	bx	lr
   15d80:	4281      	cmp	r1, r0
   15d82:	d9d2      	bls.n	15d2a <rpc_transport_ipc_tx_send+0x5e>
   15d84:	e7b6      	b.n	15cf4 <rpc_transport_ipc_tx_send+0x28>
   15d86:	f24c 0007 	movw	r0, #49159	; 0xc007
   15d8a:	b003      	add	sp, #12
   15d8c:	bc70      	pop	{r4, r5, r6}
   15d8e:	4770      	bx	lr
   15d90:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15d94:	4770      	bx	lr
   15d96:	f24c 000f 	movw	r0, #49167	; 0xc00f
   15d9a:	b003      	add	sp, #12
   15d9c:	bc70      	pop	{r4, r5, r6}
   15d9e:	4770      	bx	lr
   15da0:	200207d8 	.word	0x200207d8
   15da4:	200207d0 	.word	0x200207d0
   15da8:	200207d4 	.word	0x200207d4
   15dac:	200207cc 	.word	0x200207cc
   15db0:	20026590 	.word	0x20026590
   15db4:	200207fc 	.word	0x200207fc
   15db8:	4002a00c 	.word	0x4002a00c
   15dbc:	200207f4 	.word	0x200207f4
   15dc0:	4002a004 	.word	0x4002a004
   15dc4:	20024e48 	.word	0x20024e48
   15dc8:	4002a000 	.word	0x4002a000

00015dcc <rpc_transport_ipc_tx_rpc_data_alloc>:
   15dcc:	4b18      	ldr	r3, [pc, #96]	; (15e30 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   15dce:	781b      	ldrb	r3, [r3, #0]
   15dd0:	bb63      	cbnz	r3, 15e2c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   15dd2:	b4f0      	push	{r4, r5, r6, r7}
   15dd4:	4a17      	ldr	r2, [pc, #92]	; (15e34 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   15dd6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   15dda:	6814      	ldr	r4, [r2, #0]
   15ddc:	4b16      	ldr	r3, [pc, #88]	; (15e38 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   15dde:	6825      	ldr	r5, [r4, #0]
   15de0:	681e      	ldr	r6, [r3, #0]
   15de2:	b1a5      	cbz	r5, 15e0e <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   15de4:	4607      	mov	r7, r0
   15de6:	00c1      	lsls	r1, r0, #3
   15de8:	1863      	adds	r3, r4, r1
   15dea:	685a      	ldr	r2, [r3, #4]
   15dec:	b2d2      	uxtb	r2, r2
   15dee:	2a03      	cmp	r2, #3
   15df0:	d104      	bne.n	15dfc <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   15df2:	609f      	str	r7, [r3, #8]
   15df4:	685a      	ldr	r2, [r3, #4]
   15df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15dfa:	605a      	str	r2, [r3, #4]
   15dfc:	685a      	ldr	r2, [r3, #4]
   15dfe:	f012 0fff 	tst.w	r2, #255	; 0xff
   15e02:	d101      	bne.n	15e08 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   15e04:	689b      	ldr	r3, [r3, #8]
   15e06:	b12b      	cbz	r3, 15e14 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   15e08:	3001      	adds	r0, #1
   15e0a:	42a8      	cmp	r0, r5
   15e0c:	d1eb      	bne.n	15de6 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   15e0e:	2000      	movs	r0, #0
   15e10:	bcf0      	pop	{r4, r5, r6, r7}
   15e12:	4770      	bx	lr
   15e14:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15e18:	4421      	add	r1, r4
   15e1a:	6088      	str	r0, [r1, #8]
   15e1c:	6843      	ldr	r3, [r0, #4]
   15e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15e22:	f043 0302 	orr.w	r3, r3, #2
   15e26:	6043      	str	r3, [r0, #4]
   15e28:	bcf0      	pop	{r4, r5, r6, r7}
   15e2a:	4770      	bx	lr
   15e2c:	2000      	movs	r0, #0
   15e2e:	4770      	bx	lr
   15e30:	20026590 	.word	0x20026590
   15e34:	200207fc 	.word	0x200207fc
   15e38:	200207f8 	.word	0x200207f8

00015e3c <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   15e3c:	b4f0      	push	{r4, r5, r6, r7}
   15e3e:	4a15      	ldr	r2, [pc, #84]	; (15e94 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   15e40:	4b15      	ldr	r3, [pc, #84]	; (15e98 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   15e42:	6814      	ldr	r4, [r2, #0]
   15e44:	681e      	ldr	r6, [r3, #0]
   15e46:	6825      	ldr	r5, [r4, #0]
   15e48:	b1ad      	cbz	r5, 15e76 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   15e4a:	2000      	movs	r0, #0
   15e4c:	4607      	mov	r7, r0
   15e4e:	00c1      	lsls	r1, r0, #3
   15e50:	1863      	adds	r3, r4, r1
   15e52:	685a      	ldr	r2, [r3, #4]
   15e54:	b2d2      	uxtb	r2, r2
   15e56:	2a03      	cmp	r2, #3
   15e58:	d104      	bne.n	15e64 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   15e5a:	609f      	str	r7, [r3, #8]
   15e5c:	685a      	ldr	r2, [r3, #4]
   15e5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15e62:	605a      	str	r2, [r3, #4]
   15e64:	685a      	ldr	r2, [r3, #4]
   15e66:	f012 0fff 	tst.w	r2, #255	; 0xff
   15e6a:	d101      	bne.n	15e70 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   15e6c:	689b      	ldr	r3, [r3, #8]
   15e6e:	b12b      	cbz	r3, 15e7c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   15e70:	3001      	adds	r0, #1
   15e72:	4285      	cmp	r5, r0
   15e74:	d1eb      	bne.n	15e4e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   15e76:	2000      	movs	r0, #0
   15e78:	bcf0      	pop	{r4, r5, r6, r7}
   15e7a:	4770      	bx	lr
   15e7c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15e80:	4421      	add	r1, r4
   15e82:	6088      	str	r0, [r1, #8]
   15e84:	6843      	ldr	r3, [r0, #4]
   15e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15e8a:	f043 0301 	orr.w	r3, r3, #1
   15e8e:	6043      	str	r3, [r0, #4]
   15e90:	bcf0      	pop	{r4, r5, r6, r7}
   15e92:	4770      	bx	lr
   15e94:	200207f4 	.word	0x200207f4
   15e98:	200207f0 	.word	0x200207f0

00015e9c <rpc_transport_ipc_tx_data_alloc>:
   15e9c:	4b03      	ldr	r3, [pc, #12]	; (15eac <rpc_transport_ipc_tx_data_alloc+0x10>)
   15e9e:	781b      	ldrb	r3, [r3, #0]
   15ea0:	b90b      	cbnz	r3, 15ea6 <rpc_transport_ipc_tx_data_alloc+0xa>
   15ea2:	f7fd be27 	b.w	13af4 <nrf_shared_malloc>
   15ea6:	2000      	movs	r0, #0
   15ea8:	4770      	bx	lr
   15eaa:	bf00      	nop
   15eac:	20026590 	.word	0x20026590

00015eb0 <rpc_transport_ipc_tx_suspend>:
   15eb0:	2201      	movs	r2, #1
   15eb2:	4b01      	ldr	r3, [pc, #4]	; (15eb8 <rpc_transport_ipc_tx_suspend+0x8>)
   15eb4:	701a      	strb	r2, [r3, #0]
   15eb6:	4770      	bx	lr
   15eb8:	20026590 	.word	0x20026590

00015ebc <rpc_transport_ipc_tx_shutdown>:
   15ebc:	b4f0      	push	{r4, r5, r6, r7}
   15ebe:	4a16      	ldr	r2, [pc, #88]	; (15f18 <rpc_transport_ipc_tx_shutdown+0x5c>)
   15ec0:	4b16      	ldr	r3, [pc, #88]	; (15f1c <rpc_transport_ipc_tx_shutdown+0x60>)
   15ec2:	6814      	ldr	r4, [r2, #0]
   15ec4:	681e      	ldr	r6, [r3, #0]
   15ec6:	6825      	ldr	r5, [r4, #0]
   15ec8:	b1ad      	cbz	r5, 15ef6 <rpc_transport_ipc_tx_shutdown+0x3a>
   15eca:	2200      	movs	r2, #0
   15ecc:	4617      	mov	r7, r2
   15ece:	00d0      	lsls	r0, r2, #3
   15ed0:	1823      	adds	r3, r4, r0
   15ed2:	6859      	ldr	r1, [r3, #4]
   15ed4:	b2c9      	uxtb	r1, r1
   15ed6:	2903      	cmp	r1, #3
   15ed8:	d104      	bne.n	15ee4 <rpc_transport_ipc_tx_shutdown+0x28>
   15eda:	609f      	str	r7, [r3, #8]
   15edc:	6859      	ldr	r1, [r3, #4]
   15ede:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   15ee2:	6059      	str	r1, [r3, #4]
   15ee4:	6859      	ldr	r1, [r3, #4]
   15ee6:	f011 0fff 	tst.w	r1, #255	; 0xff
   15eea:	d101      	bne.n	15ef0 <rpc_transport_ipc_tx_shutdown+0x34>
   15eec:	689b      	ldr	r3, [r3, #8]
   15eee:	b123      	cbz	r3, 15efa <rpc_transport_ipc_tx_shutdown+0x3e>
   15ef0:	3201      	adds	r2, #1
   15ef2:	42aa      	cmp	r2, r5
   15ef4:	d1eb      	bne.n	15ece <rpc_transport_ipc_tx_shutdown+0x12>
   15ef6:	bcf0      	pop	{r4, r5, r6, r7}
   15ef8:	4770      	bx	lr
   15efa:	0192      	lsls	r2, r2, #6
   15efc:	4404      	add	r4, r0
   15efe:	18b0      	adds	r0, r6, r2
   15f00:	60a0      	str	r0, [r4, #8]
   15f02:	6843      	ldr	r3, [r0, #4]
   15f04:	4906      	ldr	r1, [pc, #24]	; (15f20 <rpc_transport_ipc_tx_shutdown+0x64>)
   15f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15f0a:	f043 0301 	orr.w	r3, r3, #1
   15f0e:	6043      	str	r3, [r0, #4]
   15f10:	50b1      	str	r1, [r6, r2]
   15f12:	bcf0      	pop	{r4, r5, r6, r7}
   15f14:	f7ff beda 	b.w	15ccc <rpc_transport_ipc_tx_send>
   15f18:	200207f4 	.word	0x200207f4
   15f1c:	200207f0 	.word	0x200207f0
   15f20:	00030001 	.word	0x00030001

00015f24 <ok_rsp_parser>:
   15f24:	2000      	movs	r0, #0
   15f26:	4770      	bx	lr

00015f28 <pdn_state_get_parser>:
   15f28:	2200      	movs	r2, #0
   15f2a:	b570      	push	{r4, r5, r6, lr}
   15f2c:	780b      	ldrb	r3, [r1, #0]
   15f2e:	b084      	sub	sp, #16
   15f30:	460e      	mov	r6, r1
   15f32:	e9cd 2200 	strd	r2, r2, [sp]
   15f36:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15f3a:	b323      	cbz	r3, 15f86 <pdn_state_get_parser+0x5e>
   15f3c:	460c      	mov	r4, r1
   15f3e:	2b20      	cmp	r3, #32
   15f40:	460d      	mov	r5, r1
   15f42:	d01b      	beq.n	15f7c <pdn_state_get_parser+0x54>
   15f44:	700b      	strb	r3, [r1, #0]
   15f46:	3201      	adds	r2, #1
   15f48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15f4c:	18b1      	adds	r1, r6, r2
   15f4e:	460d      	mov	r5, r1
   15f50:	2b00      	cmp	r3, #0
   15f52:	d1f4      	bne.n	15f3e <pdn_state_get_parser+0x16>
   15f54:	2200      	movs	r2, #0
   15f56:	4b0d      	ldr	r3, [pc, #52]	; (15f8c <pdn_state_get_parser+0x64>)
   15f58:	702a      	strb	r2, [r5, #0]
   15f5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15f5e:	4a0c      	ldr	r2, [pc, #48]	; (15f90 <pdn_state_get_parser+0x68>)
   15f60:	681b      	ldr	r3, [r3, #0]
   15f62:	2110      	movs	r1, #16
   15f64:	4668      	mov	r0, sp
   15f66:	f7fa ffbb 	bl	10ee0 <snprintf>
   15f6a:	4669      	mov	r1, sp
   15f6c:	4630      	mov	r0, r6
   15f6e:	f007 fabe 	bl	1d4ee <strstr>
   15f72:	3000      	adds	r0, #0
   15f74:	bf18      	it	ne
   15f76:	2001      	movne	r0, #1
   15f78:	b004      	add	sp, #16
   15f7a:	bd70      	pop	{r4, r5, r6, pc}
   15f7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15f80:	2b00      	cmp	r3, #0
   15f82:	d1dc      	bne.n	15f3e <pdn_state_get_parser+0x16>
   15f84:	e7e6      	b.n	15f54 <pdn_state_get_parser+0x2c>
   15f86:	460d      	mov	r5, r1
   15f88:	e7e4      	b.n	15f54 <pdn_state_get_parser+0x2c>
   15f8a:	bf00      	nop
   15f8c:	2002091c 	.word	0x2002091c
   15f90:	0001f810 	.word	0x0001f810

00015f94 <pdn_id_get_parser>:
   15f94:	b570      	push	{r4, r5, r6, lr}
   15f96:	780b      	ldrb	r3, [r1, #0]
   15f98:	4606      	mov	r6, r0
   15f9a:	b313      	cbz	r3, 15fe2 <pdn_id_get_parser+0x4e>
   15f9c:	4608      	mov	r0, r1
   15f9e:	2400      	movs	r4, #0
   15fa0:	460a      	mov	r2, r1
   15fa2:	2b20      	cmp	r3, #32
   15fa4:	4615      	mov	r5, r2
   15fa6:	d017      	beq.n	15fd8 <pdn_id_get_parser+0x44>
   15fa8:	7013      	strb	r3, [r2, #0]
   15faa:	3401      	adds	r4, #1
   15fac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15fb0:	190a      	adds	r2, r1, r4
   15fb2:	4615      	mov	r5, r2
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	d1f4      	bne.n	15fa2 <pdn_id_get_parser+0xe>
   15fb8:	2300      	movs	r3, #0
   15fba:	4608      	mov	r0, r1
   15fbc:	702b      	strb	r3, [r5, #0]
   15fbe:	213a      	movs	r1, #58	; 0x3a
   15fc0:	f007 facf 	bl	1d562 <strchr>
   15fc4:	b130      	cbz	r0, 15fd4 <pdn_id_get_parser+0x40>
   15fc6:	3001      	adds	r0, #1
   15fc8:	f007 f97c 	bl	1d2c4 <atoi>
   15fcc:	4b06      	ldr	r3, [pc, #24]	; (15fe8 <pdn_id_get_parser+0x54>)
   15fce:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   15fd2:	6058      	str	r0, [r3, #4]
   15fd4:	2000      	movs	r0, #0
   15fd6:	bd70      	pop	{r4, r5, r6, pc}
   15fd8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15fdc:	2b00      	cmp	r3, #0
   15fde:	d1e0      	bne.n	15fa2 <pdn_id_get_parser+0xe>
   15fe0:	e7ea      	b.n	15fb8 <pdn_id_get_parser+0x24>
   15fe2:	460d      	mov	r5, r1
   15fe4:	e7e8      	b.n	15fb8 <pdn_id_get_parser+0x24>
   15fe6:	bf00      	nop
   15fe8:	2002091c 	.word	0x2002091c

00015fec <context_create_parser>:
   15fec:	b570      	push	{r4, r5, r6, lr}
   15fee:	780b      	ldrb	r3, [r1, #0]
   15ff0:	4606      	mov	r6, r0
   15ff2:	b313      	cbz	r3, 1603a <context_create_parser+0x4e>
   15ff4:	4608      	mov	r0, r1
   15ff6:	2400      	movs	r4, #0
   15ff8:	460a      	mov	r2, r1
   15ffa:	2b20      	cmp	r3, #32
   15ffc:	4615      	mov	r5, r2
   15ffe:	d017      	beq.n	16030 <context_create_parser+0x44>
   16000:	7013      	strb	r3, [r2, #0]
   16002:	3401      	adds	r4, #1
   16004:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16008:	190a      	adds	r2, r1, r4
   1600a:	4615      	mov	r5, r2
   1600c:	2b00      	cmp	r3, #0
   1600e:	d1f4      	bne.n	15ffa <context_create_parser+0xe>
   16010:	2300      	movs	r3, #0
   16012:	4608      	mov	r0, r1
   16014:	702b      	strb	r3, [r5, #0]
   16016:	213a      	movs	r1, #58	; 0x3a
   16018:	f007 faa3 	bl	1d562 <strchr>
   1601c:	b130      	cbz	r0, 1602c <context_create_parser+0x40>
   1601e:	4b08      	ldr	r3, [pc, #32]	; (16040 <context_create_parser+0x54>)
   16020:	3001      	adds	r0, #1
   16022:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   16026:	f007 f94d 	bl	1d2c4 <atoi>
   1602a:	6020      	str	r0, [r4, #0]
   1602c:	2000      	movs	r0, #0
   1602e:	bd70      	pop	{r4, r5, r6, pc}
   16030:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16034:	2b00      	cmp	r3, #0
   16036:	d1e0      	bne.n	15ffa <context_create_parser+0xe>
   16038:	e7ea      	b.n	16010 <context_create_parser+0x24>
   1603a:	460d      	mov	r5, r1
   1603c:	e7e8      	b.n	16010 <context_create_parser+0x24>
   1603e:	bf00      	nop
   16040:	2002091c 	.word	0x2002091c

00016044 <pdn_interface_init>:
   16044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16048:	b510      	push	{r4, lr}
   1604a:	4c09      	ldr	r4, [pc, #36]	; (16070 <pdn_interface_init+0x2c>)
   1604c:	2228      	movs	r2, #40	; 0x28
   1604e:	2100      	movs	r1, #0
   16050:	4808      	ldr	r0, [pc, #32]	; (16074 <pdn_interface_init+0x30>)
   16052:	6023      	str	r3, [r4, #0]
   16054:	f007 fb05 	bl	1d662 <memset>
   16058:	f240 2201 	movw	r2, #513	; 0x201
   1605c:	2100      	movs	r1, #0
   1605e:	2066      	movs	r0, #102	; 0x66
   16060:	f7fc ffec 	bl	1303c <at_interface_open>
   16064:	2800      	cmp	r0, #0
   16066:	6020      	str	r0, [r4, #0]
   16068:	bfb4      	ite	lt
   1606a:	2003      	movlt	r0, #3
   1606c:	2000      	movge	r0, #0
   1606e:	bd10      	pop	{r4, pc}
   16070:	20020818 	.word	0x20020818
   16074:	2002091c 	.word	0x2002091c

00016078 <pdn_interface_open>:
   16078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1607c:	2866      	cmp	r0, #102	; 0x66
   1607e:	b083      	sub	sp, #12
   16080:	f040 80bc 	bne.w	161fc <pdn_interface_open+0x184>
   16084:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   16088:	f040 80aa 	bne.w	161e0 <pdn_interface_open+0x168>
   1608c:	f240 2302 	movw	r3, #514	; 0x202
   16090:	429a      	cmp	r2, r3
   16092:	f040 80a5 	bne.w	161e0 <pdn_interface_open+0x168>
   16096:	4c62      	ldr	r4, [pc, #392]	; (16220 <pdn_interface_open+0x1a8>)
   16098:	6825      	ldr	r5, [r4, #0]
   1609a:	b34d      	cbz	r5, 160f0 <pdn_interface_open+0x78>
   1609c:	6863      	ldr	r3, [r4, #4]
   1609e:	2b00      	cmp	r3, #0
   160a0:	f000 8098 	beq.w	161d4 <pdn_interface_open+0x15c>
   160a4:	68a3      	ldr	r3, [r4, #8]
   160a6:	2b00      	cmp	r3, #0
   160a8:	f000 8096 	beq.w	161d8 <pdn_interface_open+0x160>
   160ac:	68e3      	ldr	r3, [r4, #12]
   160ae:	2b00      	cmp	r3, #0
   160b0:	f000 8094 	beq.w	161dc <pdn_interface_open+0x164>
   160b4:	6923      	ldr	r3, [r4, #16]
   160b6:	2b00      	cmp	r3, #0
   160b8:	f000 8098 	beq.w	161ec <pdn_interface_open+0x174>
   160bc:	6963      	ldr	r3, [r4, #20]
   160be:	2b00      	cmp	r3, #0
   160c0:	f000 8098 	beq.w	161f4 <pdn_interface_open+0x17c>
   160c4:	69a3      	ldr	r3, [r4, #24]
   160c6:	2b00      	cmp	r3, #0
   160c8:	f000 8096 	beq.w	161f8 <pdn_interface_open+0x180>
   160cc:	69e3      	ldr	r3, [r4, #28]
   160ce:	2b00      	cmp	r3, #0
   160d0:	f000 808e 	beq.w	161f0 <pdn_interface_open+0x178>
   160d4:	6a23      	ldr	r3, [r4, #32]
   160d6:	b153      	cbz	r3, 160ee <pdn_interface_open+0x76>
   160d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   160da:	2509      	movs	r5, #9
   160dc:	b143      	cbz	r3, 160f0 <pdn_interface_open+0x78>
   160de:	200c      	movs	r0, #12
   160e0:	f7fb fc4c 	bl	1197c <bsd_os_errno_set>
   160e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   160e8:	b003      	add	sp, #12
   160ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   160ee:	2508      	movs	r5, #8
   160f0:	2074      	movs	r0, #116	; 0x74
   160f2:	f7fd fce9 	bl	13ac8 <nrf_malloc>
   160f6:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   160fa:	2800      	cmp	r0, #0
   160fc:	d0ef      	beq.n	160de <pdn_interface_open+0x66>
   160fe:	2274      	movs	r2, #116	; 0x74
   16100:	2100      	movs	r1, #0
   16102:	f007 faae 	bl	1d662 <memset>
   16106:	2101      	movs	r1, #1
   16108:	2003      	movs	r0, #3
   1610a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1610e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   16112:	4a44      	ldr	r2, [pc, #272]	; (16224 <pdn_interface_open+0x1ac>)
   16114:	6099      	str	r1, [r3, #8]
   16116:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1611a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1611e:	6718      	str	r0, [r3, #112]	; 0x70
   16120:	605f      	str	r7, [r3, #4]
   16122:	4841      	ldr	r0, [pc, #260]	; (16228 <pdn_interface_open+0x1b0>)
   16124:	f8df 810c 	ldr.w	r8, [pc, #268]	; 16234 <pdn_interface_open+0x1bc>
   16128:	f7fa feda 	bl	10ee0 <snprintf>
   1612c:	483e      	ldr	r0, [pc, #248]	; (16228 <pdn_interface_open+0x1b0>)
   1612e:	f8d8 9000 	ldr.w	r9, [r8]
   16132:	2600      	movs	r6, #0
   16134:	f007 fa30 	bl	1d598 <strlen>
   16138:	4633      	mov	r3, r6
   1613a:	4602      	mov	r2, r0
   1613c:	493a      	ldr	r1, [pc, #232]	; (16228 <pdn_interface_open+0x1b0>)
   1613e:	4648      	mov	r0, r9
   16140:	9601      	str	r6, [sp, #4]
   16142:	9600      	str	r6, [sp, #0]
   16144:	f7fc ff24 	bl	12f90 <at_interface_write>
   16148:	4681      	mov	r9, r0
   1614a:	4837      	ldr	r0, [pc, #220]	; (16228 <pdn_interface_open+0x1b0>)
   1614c:	f007 fa24 	bl	1d598 <strlen>
   16150:	4548      	cmp	r0, r9
   16152:	d159      	bne.n	16208 <pdn_interface_open+0x190>
   16154:	4633      	mov	r3, r6
   16156:	e9cd 6600 	strd	r6, r6, [sp]
   1615a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1615e:	4932      	ldr	r1, [pc, #200]	; (16228 <pdn_interface_open+0x1b0>)
   16160:	f8d8 0000 	ldr.w	r0, [r8]
   16164:	f7fc fffc 	bl	13160 <at_interface_read>
   16168:	4606      	mov	r6, r0
   1616a:	4830      	ldr	r0, [pc, #192]	; (1622c <pdn_interface_open+0x1b4>)
   1616c:	f007 fa14 	bl	1d598 <strlen>
   16170:	4286      	cmp	r6, r0
   16172:	db15      	blt.n	161a0 <pdn_interface_open+0x128>
   16174:	4602      	mov	r2, r0
   16176:	492c      	ldr	r1, [pc, #176]	; (16228 <pdn_interface_open+0x1b0>)
   16178:	482c      	ldr	r0, [pc, #176]	; (1622c <pdn_interface_open+0x1b4>)
   1617a:	f007 fa20 	bl	1d5be <strncmp>
   1617e:	b978      	cbnz	r0, 161a0 <pdn_interface_open+0x128>
   16180:	4929      	ldr	r1, [pc, #164]	; (16228 <pdn_interface_open+0x1b0>)
   16182:	4628      	mov	r0, r5
   16184:	f7ff ff32 	bl	15fec <context_create_parser>
   16188:	b9b0      	cbnz	r0, 161b8 <pdn_interface_open+0x140>
   1618a:	2202      	movs	r2, #2
   1618c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   16190:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   16194:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   16198:	609a      	str	r2, [r3, #8]
   1619a:	b003      	add	sp, #12
   1619c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   161a0:	4823      	ldr	r0, [pc, #140]	; (16230 <pdn_interface_open+0x1b8>)
   161a2:	f007 f9f9 	bl	1d598 <strlen>
   161a6:	4920      	ldr	r1, [pc, #128]	; (16228 <pdn_interface_open+0x1b0>)
   161a8:	4602      	mov	r2, r0
   161aa:	4821      	ldr	r0, [pc, #132]	; (16230 <pdn_interface_open+0x1b8>)
   161ac:	f007 fa07 	bl	1d5be <strncmp>
   161b0:	b960      	cbnz	r0, 161cc <pdn_interface_open+0x154>
   161b2:	2008      	movs	r0, #8
   161b4:	f7fb fbe2 	bl	1197c <bsd_os_errno_set>
   161b8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   161bc:	f7fd fc8e 	bl	13adc <nrf_free>
   161c0:	2300      	movs	r3, #0
   161c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   161c6:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   161ca:	e78d      	b.n	160e8 <pdn_interface_open+0x70>
   161cc:	2005      	movs	r0, #5
   161ce:	f7fb fbd5 	bl	1197c <bsd_os_errno_set>
   161d2:	e7f1      	b.n	161b8 <pdn_interface_open+0x140>
   161d4:	2501      	movs	r5, #1
   161d6:	e78b      	b.n	160f0 <pdn_interface_open+0x78>
   161d8:	2502      	movs	r5, #2
   161da:	e789      	b.n	160f0 <pdn_interface_open+0x78>
   161dc:	2503      	movs	r5, #3
   161de:	e787      	b.n	160f0 <pdn_interface_open+0x78>
   161e0:	2016      	movs	r0, #22
   161e2:	f7fb fbcb 	bl	1197c <bsd_os_errno_set>
   161e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   161ea:	e77d      	b.n	160e8 <pdn_interface_open+0x70>
   161ec:	2504      	movs	r5, #4
   161ee:	e77f      	b.n	160f0 <pdn_interface_open+0x78>
   161f0:	2507      	movs	r5, #7
   161f2:	e77d      	b.n	160f0 <pdn_interface_open+0x78>
   161f4:	2505      	movs	r5, #5
   161f6:	e77b      	b.n	160f0 <pdn_interface_open+0x78>
   161f8:	2506      	movs	r5, #6
   161fa:	e779      	b.n	160f0 <pdn_interface_open+0x78>
   161fc:	202f      	movs	r0, #47	; 0x2f
   161fe:	f7fb fbbd 	bl	1197c <bsd_os_errno_set>
   16202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16206:	e76f      	b.n	160e8 <pdn_interface_open+0x70>
   16208:	2005      	movs	r0, #5
   1620a:	f7fb fbb7 	bl	1197c <bsd_os_errno_set>
   1620e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   16212:	f7fd fc63 	bl	13adc <nrf_free>
   16216:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1621a:	4638      	mov	r0, r7
   1621c:	e764      	b.n	160e8 <pdn_interface_open+0x70>
   1621e:	bf00      	nop
   16220:	2002091c 	.word	0x2002091c
   16224:	0001f7ec 	.word	0x0001f7ec
   16228:	2002081c 	.word	0x2002081c
   1622c:	0001f7fc 	.word	0x0001f7fc
   16230:	0001f808 	.word	0x0001f808
   16234:	20020818 	.word	0x20020818

00016238 <pdn_interface_connect>:
   16238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1623c:	b083      	sub	sp, #12
   1623e:	2900      	cmp	r1, #0
   16240:	f000 813e 	beq.w	164c0 <pdn_interface_connect+0x288>
   16244:	2a64      	cmp	r2, #100	; 0x64
   16246:	4691      	mov	r9, r2
   16248:	f200 813a 	bhi.w	164c0 <pdn_interface_connect+0x288>
   1624c:	4605      	mov	r5, r0
   1624e:	4608      	mov	r0, r1
   16250:	4688      	mov	r8, r1
   16252:	f007 f9a1 	bl	1d598 <strlen>
   16256:	2864      	cmp	r0, #100	; 0x64
   16258:	f200 8132 	bhi.w	164c0 <pdn_interface_connect+0x288>
   1625c:	4ba5      	ldr	r3, [pc, #660]	; (164f4 <pdn_interface_connect+0x2bc>)
   1625e:	43ab      	bics	r3, r5
   16260:	f040 8125 	bne.w	164ae <pdn_interface_connect+0x276>
   16264:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   16268:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   1626c:	2d09      	cmp	r5, #9
   1626e:	f300 811e 	bgt.w	164ae <pdn_interface_connect+0x276>
   16272:	4fa1      	ldr	r7, [pc, #644]	; (164f8 <pdn_interface_connect+0x2c0>)
   16274:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16278:	2b00      	cmp	r3, #0
   1627a:	f000 8118 	beq.w	164ae <pdn_interface_connect+0x276>
   1627e:	689a      	ldr	r2, [r3, #8]
   16280:	2a00      	cmp	r2, #0
   16282:	f000 8114 	beq.w	164ae <pdn_interface_connect+0x276>
   16286:	2d00      	cmp	r5, #0
   16288:	f2c0 8111 	blt.w	164ae <pdn_interface_connect+0x276>
   1628c:	689b      	ldr	r3, [r3, #8]
   1628e:	2b02      	cmp	r3, #2
   16290:	f040 810d 	bne.w	164ae <pdn_interface_connect+0x276>
   16294:	4e99      	ldr	r6, [pc, #612]	; (164fc <pdn_interface_connect+0x2c4>)
   16296:	4a9a      	ldr	r2, [pc, #616]	; (16500 <pdn_interface_connect+0x2c8>)
   16298:	f44f 7180 	mov.w	r1, #256	; 0x100
   1629c:	4630      	mov	r0, r6
   1629e:	f7fa fe1f 	bl	10ee0 <snprintf>
   162a2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   162a6:	4604      	mov	r4, r0
   162a8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   162ac:	681b      	ldr	r3, [r3, #0]
   162ae:	4a95      	ldr	r2, [pc, #596]	; (16504 <pdn_interface_connect+0x2cc>)
   162b0:	1830      	adds	r0, r6, r0
   162b2:	f7fa fe15 	bl	10ee0 <snprintf>
   162b6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   162ba:	4404      	add	r4, r0
   162bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   162be:	f003 0203 	and.w	r2, r3, #3
   162c2:	2a03      	cmp	r2, #3
   162c4:	f000 80ea 	beq.w	1649c <pdn_interface_connect+0x264>
   162c8:	079b      	lsls	r3, r3, #30
   162ca:	eb06 0004 	add.w	r0, r6, r4
   162ce:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   162d2:	bf4c      	ite	mi
   162d4:	4b8c      	ldrmi	r3, [pc, #560]	; (16508 <pdn_interface_connect+0x2d0>)
   162d6:	4b8d      	ldrpl	r3, [pc, #564]	; (1650c <pdn_interface_connect+0x2d4>)
   162d8:	4a8d      	ldr	r2, [pc, #564]	; (16510 <pdn_interface_connect+0x2d8>)
   162da:	f7fa fe01 	bl	10ee0 <snprintf>
   162de:	4404      	add	r4, r0
   162e0:	4643      	mov	r3, r8
   162e2:	4a8c      	ldr	r2, [pc, #560]	; (16514 <pdn_interface_connect+0x2dc>)
   162e4:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   162e8:	1930      	adds	r0, r6, r4
   162ea:	f7fa fdf9 	bl	10ee0 <snprintf>
   162ee:	4420      	add	r0, r4
   162f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   162f4:	f300 80f7 	bgt.w	164e6 <pdn_interface_connect+0x2ae>
   162f8:	f8df a238 	ldr.w	sl, [pc, #568]	; 16534 <pdn_interface_connect+0x2fc>
   162fc:	487f      	ldr	r0, [pc, #508]	; (164fc <pdn_interface_connect+0x2c4>)
   162fe:	f8da b000 	ldr.w	fp, [sl]
   16302:	2400      	movs	r4, #0
   16304:	f007 f948 	bl	1d598 <strlen>
   16308:	4623      	mov	r3, r4
   1630a:	4602      	mov	r2, r0
   1630c:	497b      	ldr	r1, [pc, #492]	; (164fc <pdn_interface_connect+0x2c4>)
   1630e:	4658      	mov	r0, fp
   16310:	9401      	str	r4, [sp, #4]
   16312:	9400      	str	r4, [sp, #0]
   16314:	f7fc fe3c 	bl	12f90 <at_interface_write>
   16318:	4683      	mov	fp, r0
   1631a:	4878      	ldr	r0, [pc, #480]	; (164fc <pdn_interface_connect+0x2c4>)
   1631c:	f007 f93c 	bl	1d598 <strlen>
   16320:	4558      	cmp	r0, fp
   16322:	d008      	beq.n	16336 <pdn_interface_connect+0xfe>
   16324:	2005      	movs	r0, #5
   16326:	f7fb fb29 	bl	1197c <bsd_os_errno_set>
   1632a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1632e:	4620      	mov	r0, r4
   16330:	b003      	add	sp, #12
   16332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16336:	4623      	mov	r3, r4
   16338:	e9cd 4400 	strd	r4, r4, [sp]
   1633c:	f44f 7280 	mov.w	r2, #256	; 0x100
   16340:	496e      	ldr	r1, [pc, #440]	; (164fc <pdn_interface_connect+0x2c4>)
   16342:	f8da 0000 	ldr.w	r0, [sl]
   16346:	f7fc ff0b 	bl	13160 <at_interface_read>
   1634a:	4604      	mov	r4, r0
   1634c:	4872      	ldr	r0, [pc, #456]	; (16518 <pdn_interface_connect+0x2e0>)
   1634e:	f007 f923 	bl	1d598 <strlen>
   16352:	4284      	cmp	r4, r0
   16354:	f2c0 8091 	blt.w	1647a <pdn_interface_connect+0x242>
   16358:	4602      	mov	r2, r0
   1635a:	4968      	ldr	r1, [pc, #416]	; (164fc <pdn_interface_connect+0x2c4>)
   1635c:	486e      	ldr	r0, [pc, #440]	; (16518 <pdn_interface_connect+0x2e0>)
   1635e:	f007 f92e 	bl	1d5be <strncmp>
   16362:	2800      	cmp	r0, #0
   16364:	f040 8089 	bne.w	1647a <pdn_interface_connect+0x242>
   16368:	4964      	ldr	r1, [pc, #400]	; (164fc <pdn_interface_connect+0x2c4>)
   1636a:	4628      	mov	r0, r5
   1636c:	f7ff fdda 	bl	15f24 <ok_rsp_parser>
   16370:	4604      	mov	r4, r0
   16372:	2800      	cmp	r0, #0
   16374:	d1db      	bne.n	1632e <pdn_interface_connect+0xf6>
   16376:	4a69      	ldr	r2, [pc, #420]	; (1651c <pdn_interface_connect+0x2e4>)
   16378:	f44f 7180 	mov.w	r1, #256	; 0x100
   1637c:	485f      	ldr	r0, [pc, #380]	; (164fc <pdn_interface_connect+0x2c4>)
   1637e:	f7fa fdaf 	bl	10ee0 <snprintf>
   16382:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16386:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1638a:	681b      	ldr	r3, [r3, #0]
   1638c:	4a64      	ldr	r2, [pc, #400]	; (16520 <pdn_interface_connect+0x2e8>)
   1638e:	4430      	add	r0, r6
   16390:	f7fa fda6 	bl	10ee0 <snprintf>
   16394:	4859      	ldr	r0, [pc, #356]	; (164fc <pdn_interface_connect+0x2c4>)
   16396:	f8da b000 	ldr.w	fp, [sl]
   1639a:	f007 f8fd 	bl	1d598 <strlen>
   1639e:	4623      	mov	r3, r4
   163a0:	4602      	mov	r2, r0
   163a2:	4956      	ldr	r1, [pc, #344]	; (164fc <pdn_interface_connect+0x2c4>)
   163a4:	4658      	mov	r0, fp
   163a6:	9401      	str	r4, [sp, #4]
   163a8:	9400      	str	r4, [sp, #0]
   163aa:	f7fc fdf1 	bl	12f90 <at_interface_write>
   163ae:	4683      	mov	fp, r0
   163b0:	4852      	ldr	r0, [pc, #328]	; (164fc <pdn_interface_connect+0x2c4>)
   163b2:	f007 f8f1 	bl	1d598 <strlen>
   163b6:	4558      	cmp	r0, fp
   163b8:	d1b4      	bne.n	16324 <pdn_interface_connect+0xec>
   163ba:	4623      	mov	r3, r4
   163bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   163c0:	494e      	ldr	r1, [pc, #312]	; (164fc <pdn_interface_connect+0x2c4>)
   163c2:	f8da 0000 	ldr.w	r0, [sl]
   163c6:	e9cd 4400 	strd	r4, r4, [sp]
   163ca:	f7fc fec9 	bl	13160 <at_interface_read>
   163ce:	4683      	mov	fp, r0
   163d0:	4851      	ldr	r0, [pc, #324]	; (16518 <pdn_interface_connect+0x2e0>)
   163d2:	f007 f8e1 	bl	1d598 <strlen>
   163d6:	4583      	cmp	fp, r0
   163d8:	db4f      	blt.n	1647a <pdn_interface_connect+0x242>
   163da:	4602      	mov	r2, r0
   163dc:	4947      	ldr	r1, [pc, #284]	; (164fc <pdn_interface_connect+0x2c4>)
   163de:	484e      	ldr	r0, [pc, #312]	; (16518 <pdn_interface_connect+0x2e0>)
   163e0:	f007 f8ed 	bl	1d5be <strncmp>
   163e4:	2800      	cmp	r0, #0
   163e6:	d148      	bne.n	1647a <pdn_interface_connect+0x242>
   163e8:	2103      	movs	r1, #3
   163ea:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   163ee:	464a      	mov	r2, r9
   163f0:	6099      	str	r1, [r3, #8]
   163f2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   163f6:	4641      	mov	r1, r8
   163f8:	300c      	adds	r0, #12
   163fa:	f007 f908 	bl	1d60e <memcpy>
   163fe:	4a49      	ldr	r2, [pc, #292]	; (16524 <pdn_interface_connect+0x2ec>)
   16400:	f44f 7180 	mov.w	r1, #256	; 0x100
   16404:	483d      	ldr	r0, [pc, #244]	; (164fc <pdn_interface_connect+0x2c4>)
   16406:	f7fa fd6b 	bl	10ee0 <snprintf>
   1640a:	4601      	mov	r1, r0
   1640c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16410:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   16414:	681b      	ldr	r3, [r3, #0]
   16416:	4a42      	ldr	r2, [pc, #264]	; (16520 <pdn_interface_connect+0x2e8>)
   16418:	1830      	adds	r0, r6, r0
   1641a:	f7fa fd61 	bl	10ee0 <snprintf>
   1641e:	4837      	ldr	r0, [pc, #220]	; (164fc <pdn_interface_connect+0x2c4>)
   16420:	f8da 6000 	ldr.w	r6, [sl]
   16424:	f007 f8b8 	bl	1d598 <strlen>
   16428:	4623      	mov	r3, r4
   1642a:	4602      	mov	r2, r0
   1642c:	4933      	ldr	r1, [pc, #204]	; (164fc <pdn_interface_connect+0x2c4>)
   1642e:	4630      	mov	r0, r6
   16430:	9401      	str	r4, [sp, #4]
   16432:	9400      	str	r4, [sp, #0]
   16434:	f7fc fdac 	bl	12f90 <at_interface_write>
   16438:	4606      	mov	r6, r0
   1643a:	4830      	ldr	r0, [pc, #192]	; (164fc <pdn_interface_connect+0x2c4>)
   1643c:	f007 f8ac 	bl	1d598 <strlen>
   16440:	42b0      	cmp	r0, r6
   16442:	d153      	bne.n	164ec <pdn_interface_connect+0x2b4>
   16444:	4623      	mov	r3, r4
   16446:	f44f 7280 	mov.w	r2, #256	; 0x100
   1644a:	492c      	ldr	r1, [pc, #176]	; (164fc <pdn_interface_connect+0x2c4>)
   1644c:	f8da 0000 	ldr.w	r0, [sl]
   16450:	e9cd 4400 	strd	r4, r4, [sp]
   16454:	f7fc fe84 	bl	13160 <at_interface_read>
   16458:	4606      	mov	r6, r0
   1645a:	4833      	ldr	r0, [pc, #204]	; (16528 <pdn_interface_connect+0x2f0>)
   1645c:	f007 f89c 	bl	1d598 <strlen>
   16460:	4286      	cmp	r6, r0
   16462:	db33      	blt.n	164cc <pdn_interface_connect+0x294>
   16464:	4602      	mov	r2, r0
   16466:	4925      	ldr	r1, [pc, #148]	; (164fc <pdn_interface_connect+0x2c4>)
   16468:	482f      	ldr	r0, [pc, #188]	; (16528 <pdn_interface_connect+0x2f0>)
   1646a:	f007 f8a8 	bl	1d5be <strncmp>
   1646e:	bb68      	cbnz	r0, 164cc <pdn_interface_connect+0x294>
   16470:	4628      	mov	r0, r5
   16472:	4922      	ldr	r1, [pc, #136]	; (164fc <pdn_interface_connect+0x2c4>)
   16474:	f7ff fd8e 	bl	15f94 <pdn_id_get_parser>
   16478:	e759      	b.n	1632e <pdn_interface_connect+0xf6>
   1647a:	482c      	ldr	r0, [pc, #176]	; (1652c <pdn_interface_connect+0x2f4>)
   1647c:	f007 f88c 	bl	1d598 <strlen>
   16480:	491e      	ldr	r1, [pc, #120]	; (164fc <pdn_interface_connect+0x2c4>)
   16482:	4602      	mov	r2, r0
   16484:	4829      	ldr	r0, [pc, #164]	; (1652c <pdn_interface_connect+0x2f4>)
   16486:	f007 f89a 	bl	1d5be <strncmp>
   1648a:	2800      	cmp	r0, #0
   1648c:	f47f af4a 	bne.w	16324 <pdn_interface_connect+0xec>
   16490:	2008      	movs	r0, #8
   16492:	f7fb fa73 	bl	1197c <bsd_os_errno_set>
   16496:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1649a:	e748      	b.n	1632e <pdn_interface_connect+0xf6>
   1649c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   164a0:	1930      	adds	r0, r6, r4
   164a2:	4b23      	ldr	r3, [pc, #140]	; (16530 <pdn_interface_connect+0x2f8>)
   164a4:	4a1a      	ldr	r2, [pc, #104]	; (16510 <pdn_interface_connect+0x2d8>)
   164a6:	f7fa fd1b 	bl	10ee0 <snprintf>
   164aa:	4404      	add	r4, r0
   164ac:	e718      	b.n	162e0 <pdn_interface_connect+0xa8>
   164ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   164b2:	2009      	movs	r0, #9
   164b4:	f7fb fa62 	bl	1197c <bsd_os_errno_set>
   164b8:	4620      	mov	r0, r4
   164ba:	b003      	add	sp, #12
   164bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164c0:	2016      	movs	r0, #22
   164c2:	f7fb fa5b 	bl	1197c <bsd_os_errno_set>
   164c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   164ca:	e730      	b.n	1632e <pdn_interface_connect+0xf6>
   164cc:	4817      	ldr	r0, [pc, #92]	; (1652c <pdn_interface_connect+0x2f4>)
   164ce:	f007 f863 	bl	1d598 <strlen>
   164d2:	490a      	ldr	r1, [pc, #40]	; (164fc <pdn_interface_connect+0x2c4>)
   164d4:	4602      	mov	r2, r0
   164d6:	4815      	ldr	r0, [pc, #84]	; (1652c <pdn_interface_connect+0x2f4>)
   164d8:	f007 f871 	bl	1d5be <strncmp>
   164dc:	b930      	cbnz	r0, 164ec <pdn_interface_connect+0x2b4>
   164de:	2008      	movs	r0, #8
   164e0:	f7fb fa4c 	bl	1197c <bsd_os_errno_set>
   164e4:	e723      	b.n	1632e <pdn_interface_connect+0xf6>
   164e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   164ea:	e720      	b.n	1632e <pdn_interface_connect+0xf6>
   164ec:	2005      	movs	r0, #5
   164ee:	f7fb fa45 	bl	1197c <bsd_os_errno_set>
   164f2:	e71c      	b.n	1632e <pdn_interface_connect+0xf6>
   164f4:	789a0000 	.word	0x789a0000
   164f8:	2002091c 	.word	0x2002091c
   164fc:	2002081c 	.word	0x2002081c
   16500:	0001f774 	.word	0x0001f774
   16504:	0001f780 	.word	0x0001f780
   16508:	0001f794 	.word	0x0001f794
   1650c:	0001f79c 	.word	0x0001f79c
   16510:	0001f78c 	.word	0x0001f78c
   16514:	0001f7d0 	.word	0x0001f7d0
   16518:	0001f7a0 	.word	0x0001f7a0
   1651c:	0001f7a4 	.word	0x0001f7a4
   16520:	0001f7b0 	.word	0x0001f7b0
   16524:	0001f7b4 	.word	0x0001f7b4
   16528:	0001f7c4 	.word	0x0001f7c4
   1652c:	0001f808 	.word	0x0001f808
   16530:	0001f784 	.word	0x0001f784
   16534:	20020818 	.word	0x20020818

00016538 <pdn_interface_close>:
   16538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1653c:	4b63      	ldr	r3, [pc, #396]	; (166cc <pdn_interface_close+0x194>)
   1653e:	b083      	sub	sp, #12
   16540:	4383      	bics	r3, r0
   16542:	f040 809d 	bne.w	16680 <pdn_interface_close+0x148>
   16546:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1654a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1654e:	2c09      	cmp	r4, #9
   16550:	f300 8096 	bgt.w	16680 <pdn_interface_close+0x148>
   16554:	4d5e      	ldr	r5, [pc, #376]	; (166d0 <pdn_interface_close+0x198>)
   16556:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1655a:	2800      	cmp	r0, #0
   1655c:	f000 8090 	beq.w	16680 <pdn_interface_close+0x148>
   16560:	6883      	ldr	r3, [r0, #8]
   16562:	2b00      	cmp	r3, #0
   16564:	f000 808c 	beq.w	16680 <pdn_interface_close+0x148>
   16568:	6883      	ldr	r3, [r0, #8]
   1656a:	2b03      	cmp	r3, #3
   1656c:	d008      	beq.n	16580 <pdn_interface_close+0x48>
   1656e:	f7fd fab5 	bl	13adc <nrf_free>
   16572:	2300      	movs	r3, #0
   16574:	4618      	mov	r0, r3
   16576:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1657a:	b003      	add	sp, #12
   1657c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16580:	4e54      	ldr	r6, [pc, #336]	; (166d4 <pdn_interface_close+0x19c>)
   16582:	4a55      	ldr	r2, [pc, #340]	; (166d8 <pdn_interface_close+0x1a0>)
   16584:	f44f 7180 	mov.w	r1, #256	; 0x100
   16588:	4630      	mov	r0, r6
   1658a:	f7fa fca9 	bl	10ee0 <snprintf>
   1658e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   16592:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16596:	681b      	ldr	r3, [r3, #0]
   16598:	4a50      	ldr	r2, [pc, #320]	; (166dc <pdn_interface_close+0x1a4>)
   1659a:	4430      	add	r0, r6
   1659c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 166ec <pdn_interface_close+0x1b4>
   165a0:	f7fa fc9e 	bl	10ee0 <snprintf>
   165a4:	4630      	mov	r0, r6
   165a6:	f8d8 9000 	ldr.w	r9, [r8]
   165aa:	2700      	movs	r7, #0
   165ac:	f006 fff4 	bl	1d598 <strlen>
   165b0:	4631      	mov	r1, r6
   165b2:	4602      	mov	r2, r0
   165b4:	463b      	mov	r3, r7
   165b6:	4648      	mov	r0, r9
   165b8:	9701      	str	r7, [sp, #4]
   165ba:	9700      	str	r7, [sp, #0]
   165bc:	f7fc fce8 	bl	12f90 <at_interface_write>
   165c0:	4681      	mov	r9, r0
   165c2:	4630      	mov	r0, r6
   165c4:	f006 ffe8 	bl	1d598 <strlen>
   165c8:	4548      	cmp	r0, r9
   165ca:	d176      	bne.n	166ba <pdn_interface_close+0x182>
   165cc:	463b      	mov	r3, r7
   165ce:	e9cd 7700 	strd	r7, r7, [sp]
   165d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   165d6:	4631      	mov	r1, r6
   165d8:	f8d8 0000 	ldr.w	r0, [r8]
   165dc:	f7fc fdc0 	bl	13160 <at_interface_read>
   165e0:	4607      	mov	r7, r0
   165e2:	483f      	ldr	r0, [pc, #252]	; (166e0 <pdn_interface_close+0x1a8>)
   165e4:	f006 ffd8 	bl	1d598 <strlen>
   165e8:	4287      	cmp	r7, r0
   165ea:	da4f      	bge.n	1668c <pdn_interface_close+0x154>
   165ec:	483d      	ldr	r0, [pc, #244]	; (166e4 <pdn_interface_close+0x1ac>)
   165ee:	f006 ffd3 	bl	1d598 <strlen>
   165f2:	4938      	ldr	r1, [pc, #224]	; (166d4 <pdn_interface_close+0x19c>)
   165f4:	4602      	mov	r2, r0
   165f6:	483b      	ldr	r0, [pc, #236]	; (166e4 <pdn_interface_close+0x1ac>)
   165f8:	f006 ffe1 	bl	1d5be <strncmp>
   165fc:	2800      	cmp	r0, #0
   165fe:	d15c      	bne.n	166ba <pdn_interface_close+0x182>
   16600:	2008      	movs	r0, #8
   16602:	f7fb f9bb 	bl	1197c <bsd_os_errno_set>
   16606:	4a38      	ldr	r2, [pc, #224]	; (166e8 <pdn_interface_close+0x1b0>)
   16608:	f44f 7180 	mov.w	r1, #256	; 0x100
   1660c:	4831      	ldr	r0, [pc, #196]	; (166d4 <pdn_interface_close+0x19c>)
   1660e:	f7fa fc67 	bl	10ee0 <snprintf>
   16612:	4601      	mov	r1, r0
   16614:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   16618:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1661c:	681b      	ldr	r3, [r3, #0]
   1661e:	4a2f      	ldr	r2, [pc, #188]	; (166dc <pdn_interface_close+0x1a4>)
   16620:	1830      	adds	r0, r6, r0
   16622:	f7fa fc5d 	bl	10ee0 <snprintf>
   16626:	482b      	ldr	r0, [pc, #172]	; (166d4 <pdn_interface_close+0x19c>)
   16628:	f8d8 7000 	ldr.w	r7, [r8]
   1662c:	2600      	movs	r6, #0
   1662e:	f006 ffb3 	bl	1d598 <strlen>
   16632:	4633      	mov	r3, r6
   16634:	4602      	mov	r2, r0
   16636:	4927      	ldr	r1, [pc, #156]	; (166d4 <pdn_interface_close+0x19c>)
   16638:	4638      	mov	r0, r7
   1663a:	9601      	str	r6, [sp, #4]
   1663c:	9600      	str	r6, [sp, #0]
   1663e:	f7fc fca7 	bl	12f90 <at_interface_write>
   16642:	4607      	mov	r7, r0
   16644:	4823      	ldr	r0, [pc, #140]	; (166d4 <pdn_interface_close+0x19c>)
   16646:	f006 ffa7 	bl	1d598 <strlen>
   1664a:	42b8      	cmp	r0, r7
   1664c:	d139      	bne.n	166c2 <pdn_interface_close+0x18a>
   1664e:	4633      	mov	r3, r6
   16650:	e9cd 6600 	strd	r6, r6, [sp]
   16654:	f44f 7280 	mov.w	r2, #256	; 0x100
   16658:	491e      	ldr	r1, [pc, #120]	; (166d4 <pdn_interface_close+0x19c>)
   1665a:	f8d8 0000 	ldr.w	r0, [r8]
   1665e:	f7fc fd7f 	bl	13160 <at_interface_read>
   16662:	4606      	mov	r6, r0
   16664:	481e      	ldr	r0, [pc, #120]	; (166e0 <pdn_interface_close+0x1a8>)
   16666:	f006 ff97 	bl	1d598 <strlen>
   1666a:	4286      	cmp	r6, r0
   1666c:	db16      	blt.n	1669c <pdn_interface_close+0x164>
   1666e:	4602      	mov	r2, r0
   16670:	4918      	ldr	r1, [pc, #96]	; (166d4 <pdn_interface_close+0x19c>)
   16672:	481b      	ldr	r0, [pc, #108]	; (166e0 <pdn_interface_close+0x1a8>)
   16674:	f006 ffa3 	bl	1d5be <strncmp>
   16678:	b980      	cbnz	r0, 1669c <pdn_interface_close+0x164>
   1667a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1667e:	e776      	b.n	1656e <pdn_interface_close+0x36>
   16680:	2009      	movs	r0, #9
   16682:	f7fb f97b 	bl	1197c <bsd_os_errno_set>
   16686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1668a:	e776      	b.n	1657a <pdn_interface_close+0x42>
   1668c:	4602      	mov	r2, r0
   1668e:	4631      	mov	r1, r6
   16690:	4813      	ldr	r0, [pc, #76]	; (166e0 <pdn_interface_close+0x1a8>)
   16692:	f006 ff94 	bl	1d5be <strncmp>
   16696:	2800      	cmp	r0, #0
   16698:	d0b5      	beq.n	16606 <pdn_interface_close+0xce>
   1669a:	e7a7      	b.n	165ec <pdn_interface_close+0xb4>
   1669c:	4811      	ldr	r0, [pc, #68]	; (166e4 <pdn_interface_close+0x1ac>)
   1669e:	f006 ff7b 	bl	1d598 <strlen>
   166a2:	490c      	ldr	r1, [pc, #48]	; (166d4 <pdn_interface_close+0x19c>)
   166a4:	4602      	mov	r2, r0
   166a6:	480f      	ldr	r0, [pc, #60]	; (166e4 <pdn_interface_close+0x1ac>)
   166a8:	f006 ff89 	bl	1d5be <strncmp>
   166ac:	b948      	cbnz	r0, 166c2 <pdn_interface_close+0x18a>
   166ae:	2008      	movs	r0, #8
   166b0:	f7fb f964 	bl	1197c <bsd_os_errno_set>
   166b4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   166b8:	e759      	b.n	1656e <pdn_interface_close+0x36>
   166ba:	2005      	movs	r0, #5
   166bc:	f7fb f95e 	bl	1197c <bsd_os_errno_set>
   166c0:	e7a1      	b.n	16606 <pdn_interface_close+0xce>
   166c2:	2005      	movs	r0, #5
   166c4:	f7fb f95a 	bl	1197c <bsd_os_errno_set>
   166c8:	e7d7      	b.n	1667a <pdn_interface_close+0x142>
   166ca:	bf00      	nop
   166cc:	789a0000 	.word	0x789a0000
   166d0:	2002091c 	.word	0x2002091c
   166d4:	2002081c 	.word	0x2002081c
   166d8:	0001f768 	.word	0x0001f768
   166dc:	0001f7b0 	.word	0x0001f7b0
   166e0:	0001f7a0 	.word	0x0001f7a0
   166e4:	0001f808 	.word	0x0001f808
   166e8:	0001f774 	.word	0x0001f774
   166ec:	20020818 	.word	0x20020818

000166f0 <pdn_interface_setopt>:
   166f0:	b510      	push	{r4, lr}
   166f2:	f240 2402 	movw	r4, #514	; 0x202
   166f6:	42a1      	cmp	r1, r4
   166f8:	d10b      	bne.n	16712 <pdn_interface_setopt+0x22>
   166fa:	b153      	cbz	r3, 16712 <pdn_interface_setopt+0x22>
   166fc:	9902      	ldr	r1, [sp, #8]
   166fe:	b141      	cbz	r1, 16712 <pdn_interface_setopt+0x22>
   16700:	4925      	ldr	r1, [pc, #148]	; (16798 <pdn_interface_setopt+0xa8>)
   16702:	4381      	bics	r1, r0
   16704:	d00b      	beq.n	1671e <pdn_interface_setopt+0x2e>
   16706:	2009      	movs	r0, #9
   16708:	f7fb f938 	bl	1197c <bsd_os_errno_set>
   1670c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16710:	bd10      	pop	{r4, pc}
   16712:	2016      	movs	r0, #22
   16714:	f7fb f932 	bl	1197c <bsd_os_errno_set>
   16718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1671c:	bd10      	pop	{r4, pc}
   1671e:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   16722:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   16726:	2809      	cmp	r0, #9
   16728:	dced      	bgt.n	16706 <pdn_interface_setopt+0x16>
   1672a:	491c      	ldr	r1, [pc, #112]	; (1679c <pdn_interface_setopt+0xac>)
   1672c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   16730:	2900      	cmp	r1, #0
   16732:	d0e8      	beq.n	16706 <pdn_interface_setopt+0x16>
   16734:	688c      	ldr	r4, [r1, #8]
   16736:	2c00      	cmp	r4, #0
   16738:	d0e5      	beq.n	16706 <pdn_interface_setopt+0x16>
   1673a:	2800      	cmp	r0, #0
   1673c:	dbe3      	blt.n	16706 <pdn_interface_setopt+0x16>
   1673e:	2a01      	cmp	r2, #1
   16740:	d001      	beq.n	16746 <pdn_interface_setopt+0x56>
   16742:	202d      	movs	r0, #45	; 0x2d
   16744:	e7e6      	b.n	16714 <pdn_interface_setopt+0x24>
   16746:	688a      	ldr	r2, [r1, #8]
   16748:	b1fa      	cbz	r2, 1678a <pdn_interface_setopt+0x9a>
   1674a:	688a      	ldr	r2, [r1, #8]
   1674c:	2a03      	cmp	r2, #3
   1674e:	d01c      	beq.n	1678a <pdn_interface_setopt+0x9a>
   16750:	688a      	ldr	r2, [r1, #8]
   16752:	2a04      	cmp	r2, #4
   16754:	d019      	beq.n	1678a <pdn_interface_setopt+0x9a>
   16756:	9a02      	ldr	r2, [sp, #8]
   16758:	0890      	lsrs	r0, r2, #2
   1675a:	1e42      	subs	r2, r0, #1
   1675c:	2a01      	cmp	r2, #1
   1675e:	d8d8      	bhi.n	16712 <pdn_interface_setopt+0x22>
   16760:	9a02      	ldr	r2, [sp, #8]
   16762:	0792      	lsls	r2, r2, #30
   16764:	d1d5      	bne.n	16712 <pdn_interface_setopt+0x22>
   16766:	681a      	ldr	r2, [r3, #0]
   16768:	2a02      	cmp	r2, #2
   1676a:	d010      	beq.n	1678e <pdn_interface_setopt+0x9e>
   1676c:	2a0a      	cmp	r2, #10
   1676e:	d1d0      	bne.n	16712 <pdn_interface_setopt+0x22>
   16770:	2202      	movs	r2, #2
   16772:	2802      	cmp	r0, #2
   16774:	d106      	bne.n	16784 <pdn_interface_setopt+0x94>
   16776:	685b      	ldr	r3, [r3, #4]
   16778:	2b02      	cmp	r3, #2
   1677a:	d00a      	beq.n	16792 <pdn_interface_setopt+0xa2>
   1677c:	2b0a      	cmp	r3, #10
   1677e:	d1c8      	bne.n	16712 <pdn_interface_setopt+0x22>
   16780:	f042 0202 	orr.w	r2, r2, #2
   16784:	670a      	str	r2, [r1, #112]	; 0x70
   16786:	2000      	movs	r0, #0
   16788:	e7c4      	b.n	16714 <pdn_interface_setopt+0x24>
   1678a:	200e      	movs	r0, #14
   1678c:	e7c2      	b.n	16714 <pdn_interface_setopt+0x24>
   1678e:	2201      	movs	r2, #1
   16790:	e7ef      	b.n	16772 <pdn_interface_setopt+0x82>
   16792:	f042 0201 	orr.w	r2, r2, #1
   16796:	e7f5      	b.n	16784 <pdn_interface_setopt+0x94>
   16798:	789a0000 	.word	0x789a0000
   1679c:	2002091c 	.word	0x2002091c

000167a0 <pdn_interface_getopt>:
   167a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   167a4:	f240 2402 	movw	r4, #514	; 0x202
   167a8:	b083      	sub	sp, #12
   167aa:	42a1      	cmp	r1, r4
   167ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   167ae:	f040 80a9 	bne.w	16904 <pdn_interface_getopt+0x164>
   167b2:	461e      	mov	r6, r3
   167b4:	2b00      	cmp	r3, #0
   167b6:	f000 80a5 	beq.w	16904 <pdn_interface_getopt+0x164>
   167ba:	2d00      	cmp	r5, #0
   167bc:	f000 80a2 	beq.w	16904 <pdn_interface_getopt+0x164>
   167c0:	4b56      	ldr	r3, [pc, #344]	; (1691c <pdn_interface_getopt+0x17c>)
   167c2:	4383      	bics	r3, r0
   167c4:	f040 8084 	bne.w	168d0 <pdn_interface_getopt+0x130>
   167c8:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   167cc:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   167d0:	2c09      	cmp	r4, #9
   167d2:	dc7d      	bgt.n	168d0 <pdn_interface_getopt+0x130>
   167d4:	4b52      	ldr	r3, [pc, #328]	; (16920 <pdn_interface_getopt+0x180>)
   167d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   167da:	2b00      	cmp	r3, #0
   167dc:	d078      	beq.n	168d0 <pdn_interface_getopt+0x130>
   167de:	6899      	ldr	r1, [r3, #8]
   167e0:	2900      	cmp	r1, #0
   167e2:	d075      	beq.n	168d0 <pdn_interface_getopt+0x130>
   167e4:	2c00      	cmp	r4, #0
   167e6:	db73      	blt.n	168d0 <pdn_interface_getopt+0x130>
   167e8:	2a02      	cmp	r2, #2
   167ea:	d00e      	beq.n	1680a <pdn_interface_getopt+0x6a>
   167ec:	2a03      	cmp	r2, #3
   167ee:	d008      	beq.n	16802 <pdn_interface_getopt+0x62>
   167f0:	2a01      	cmp	r2, #1
   167f2:	d015      	beq.n	16820 <pdn_interface_getopt+0x80>
   167f4:	202d      	movs	r0, #45	; 0x2d
   167f6:	f7fb f8c1 	bl	1197c <bsd_os_errno_set>
   167fa:	2000      	movs	r0, #0
   167fc:	b003      	add	sp, #12
   167fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16802:	682b      	ldr	r3, [r5, #0]
   16804:	bb23      	cbnz	r3, 16850 <pdn_interface_getopt+0xb0>
   16806:	2016      	movs	r0, #22
   16808:	e7f5      	b.n	167f6 <pdn_interface_getopt+0x56>
   1680a:	682a      	ldr	r2, [r5, #0]
   1680c:	2a00      	cmp	r2, #0
   1680e:	d0fa      	beq.n	16806 <pdn_interface_getopt+0x66>
   16810:	2201      	movs	r2, #1
   16812:	2000      	movs	r0, #0
   16814:	681b      	ldr	r3, [r3, #0]
   16816:	7033      	strb	r3, [r6, #0]
   16818:	602a      	str	r2, [r5, #0]
   1681a:	b003      	add	sp, #12
   1681c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16820:	689a      	ldr	r2, [r3, #8]
   16822:	2a00      	cmp	r2, #0
   16824:	d052      	beq.n	168cc <pdn_interface_getopt+0x12c>
   16826:	689a      	ldr	r2, [r3, #8]
   16828:	2a04      	cmp	r2, #4
   1682a:	d04f      	beq.n	168cc <pdn_interface_getopt+0x12c>
   1682c:	682a      	ldr	r2, [r5, #0]
   1682e:	2a07      	cmp	r2, #7
   16830:	d9e9      	bls.n	16806 <pdn_interface_getopt+0x66>
   16832:	f012 0203 	ands.w	r2, r2, #3
   16836:	d1e6      	bne.n	16806 <pdn_interface_getopt+0x66>
   16838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1683a:	0799      	lsls	r1, r3, #30
   1683c:	d45d      	bmi.n	168fa <pdn_interface_getopt+0x15a>
   1683e:	2104      	movs	r1, #4
   16840:	07db      	lsls	r3, r3, #31
   16842:	d502      	bpl.n	1684a <pdn_interface_getopt+0xaa>
   16844:	2302      	movs	r3, #2
   16846:	50b3      	str	r3, [r6, r2]
   16848:	460a      	mov	r2, r1
   1684a:	602a      	str	r2, [r5, #0]
   1684c:	2000      	movs	r0, #0
   1684e:	e7d5      	b.n	167fc <pdn_interface_getopt+0x5c>
   16850:	4a34      	ldr	r2, [pc, #208]	; (16924 <pdn_interface_getopt+0x184>)
   16852:	f44f 7180 	mov.w	r1, #256	; 0x100
   16856:	4834      	ldr	r0, [pc, #208]	; (16928 <pdn_interface_getopt+0x188>)
   16858:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 16934 <pdn_interface_getopt+0x194>
   1685c:	f7fa fb40 	bl	10ee0 <snprintf>
   16860:	4831      	ldr	r0, [pc, #196]	; (16928 <pdn_interface_getopt+0x188>)
   16862:	f8d8 9000 	ldr.w	r9, [r8]
   16866:	2700      	movs	r7, #0
   16868:	f006 fe96 	bl	1d598 <strlen>
   1686c:	463b      	mov	r3, r7
   1686e:	4602      	mov	r2, r0
   16870:	492d      	ldr	r1, [pc, #180]	; (16928 <pdn_interface_getopt+0x188>)
   16872:	4648      	mov	r0, r9
   16874:	9701      	str	r7, [sp, #4]
   16876:	9700      	str	r7, [sp, #0]
   16878:	f7fc fb8a 	bl	12f90 <at_interface_write>
   1687c:	4681      	mov	r9, r0
   1687e:	482a      	ldr	r0, [pc, #168]	; (16928 <pdn_interface_getopt+0x188>)
   16880:	f006 fe8a 	bl	1d598 <strlen>
   16884:	4548      	cmp	r0, r9
   16886:	d143      	bne.n	16910 <pdn_interface_getopt+0x170>
   16888:	463b      	mov	r3, r7
   1688a:	e9cd 7700 	strd	r7, r7, [sp]
   1688e:	f44f 7280 	mov.w	r2, #256	; 0x100
   16892:	4925      	ldr	r1, [pc, #148]	; (16928 <pdn_interface_getopt+0x188>)
   16894:	f8d8 0000 	ldr.w	r0, [r8]
   16898:	f7fc fc62 	bl	13160 <at_interface_read>
   1689c:	4607      	mov	r7, r0
   1689e:	4823      	ldr	r0, [pc, #140]	; (1692c <pdn_interface_getopt+0x18c>)
   168a0:	f006 fe7a 	bl	1d598 <strlen>
   168a4:	4287      	cmp	r7, r0
   168a6:	db19      	blt.n	168dc <pdn_interface_getopt+0x13c>
   168a8:	4602      	mov	r2, r0
   168aa:	491f      	ldr	r1, [pc, #124]	; (16928 <pdn_interface_getopt+0x188>)
   168ac:	481f      	ldr	r0, [pc, #124]	; (1692c <pdn_interface_getopt+0x18c>)
   168ae:	f006 fe86 	bl	1d5be <strncmp>
   168b2:	4607      	mov	r7, r0
   168b4:	b990      	cbnz	r0, 168dc <pdn_interface_getopt+0x13c>
   168b6:	4620      	mov	r0, r4
   168b8:	491b      	ldr	r1, [pc, #108]	; (16928 <pdn_interface_getopt+0x188>)
   168ba:	f7ff fb35 	bl	15f28 <pdn_state_get_parser>
   168be:	2800      	cmp	r0, #0
   168c0:	db99      	blt.n	167f6 <pdn_interface_getopt+0x56>
   168c2:	2301      	movs	r3, #1
   168c4:	7030      	strb	r0, [r6, #0]
   168c6:	4638      	mov	r0, r7
   168c8:	602b      	str	r3, [r5, #0]
   168ca:	e797      	b.n	167fc <pdn_interface_getopt+0x5c>
   168cc:	200e      	movs	r0, #14
   168ce:	e792      	b.n	167f6 <pdn_interface_getopt+0x56>
   168d0:	2009      	movs	r0, #9
   168d2:	f7fb f853 	bl	1197c <bsd_os_errno_set>
   168d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   168da:	e78f      	b.n	167fc <pdn_interface_getopt+0x5c>
   168dc:	4814      	ldr	r0, [pc, #80]	; (16930 <pdn_interface_getopt+0x190>)
   168de:	f006 fe5b 	bl	1d598 <strlen>
   168e2:	4911      	ldr	r1, [pc, #68]	; (16928 <pdn_interface_getopt+0x188>)
   168e4:	4602      	mov	r2, r0
   168e6:	4812      	ldr	r0, [pc, #72]	; (16930 <pdn_interface_getopt+0x190>)
   168e8:	f006 fe69 	bl	1d5be <strncmp>
   168ec:	b980      	cbnz	r0, 16910 <pdn_interface_getopt+0x170>
   168ee:	2008      	movs	r0, #8
   168f0:	f7fb f844 	bl	1197c <bsd_os_errno_set>
   168f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   168f8:	e77d      	b.n	167f6 <pdn_interface_getopt+0x56>
   168fa:	220a      	movs	r2, #10
   168fc:	2108      	movs	r1, #8
   168fe:	6032      	str	r2, [r6, #0]
   16900:	2204      	movs	r2, #4
   16902:	e79d      	b.n	16840 <pdn_interface_getopt+0xa0>
   16904:	2016      	movs	r0, #22
   16906:	f7fb f839 	bl	1197c <bsd_os_errno_set>
   1690a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1690e:	e775      	b.n	167fc <pdn_interface_getopt+0x5c>
   16910:	2005      	movs	r0, #5
   16912:	f7fb f833 	bl	1197c <bsd_os_errno_set>
   16916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1691a:	e76c      	b.n	167f6 <pdn_interface_getopt+0x56>
   1691c:	789a0000 	.word	0x789a0000
   16920:	2002091c 	.word	0x2002091c
   16924:	0001f7d8 	.word	0x0001f7d8
   16928:	2002081c 	.word	0x2002081c
   1692c:	0001f7e4 	.word	0x0001f7e4
   16930:	0001f808 	.word	0x0001f808
   16934:	20020818 	.word	0x20020818

00016938 <pdn_interface_pdn_id_get>:
   16938:	2900      	cmp	r1, #0
   1693a:	f000 83b9 	beq.w	170b0 <pdn_interface_pdn_id_get+0x778>
   1693e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16942:	4ca3      	ldr	r4, [pc, #652]	; (16bd0 <pdn_interface_pdn_id_get+0x298>)
   16944:	2802      	cmp	r0, #2
   16946:	b083      	sub	sp, #12
   16948:	460d      	mov	r5, r1
   1694a:	6823      	ldr	r3, [r4, #0]
   1694c:	f000 8094 	beq.w	16a78 <pdn_interface_pdn_id_get+0x140>
   16950:	280a      	cmp	r0, #10
   16952:	d03f      	beq.n	169d4 <pdn_interface_pdn_id_get+0x9c>
   16954:	b11b      	cbz	r3, 1695e <pdn_interface_pdn_id_get+0x26>
   16956:	689b      	ldr	r3, [r3, #8]
   16958:	2b03      	cmp	r3, #3
   1695a:	f000 8127 	beq.w	16bac <pdn_interface_pdn_id_get+0x274>
   1695e:	6863      	ldr	r3, [r4, #4]
   16960:	b11b      	cbz	r3, 1696a <pdn_interface_pdn_id_get+0x32>
   16962:	689b      	ldr	r3, [r3, #8]
   16964:	2b03      	cmp	r3, #3
   16966:	f000 8110 	beq.w	16b8a <pdn_interface_pdn_id_get+0x252>
   1696a:	68a3      	ldr	r3, [r4, #8]
   1696c:	b11b      	cbz	r3, 16976 <pdn_interface_pdn_id_get+0x3e>
   1696e:	689b      	ldr	r3, [r3, #8]
   16970:	2b03      	cmp	r3, #3
   16972:	f000 80f9 	beq.w	16b68 <pdn_interface_pdn_id_get+0x230>
   16976:	68e3      	ldr	r3, [r4, #12]
   16978:	b11b      	cbz	r3, 16982 <pdn_interface_pdn_id_get+0x4a>
   1697a:	689b      	ldr	r3, [r3, #8]
   1697c:	2b03      	cmp	r3, #3
   1697e:	f000 80e2 	beq.w	16b46 <pdn_interface_pdn_id_get+0x20e>
   16982:	6923      	ldr	r3, [r4, #16]
   16984:	b11b      	cbz	r3, 1698e <pdn_interface_pdn_id_get+0x56>
   16986:	689b      	ldr	r3, [r3, #8]
   16988:	2b03      	cmp	r3, #3
   1698a:	f000 8123 	beq.w	16bd4 <pdn_interface_pdn_id_get+0x29c>
   1698e:	6963      	ldr	r3, [r4, #20]
   16990:	b11b      	cbz	r3, 1699a <pdn_interface_pdn_id_get+0x62>
   16992:	689b      	ldr	r3, [r3, #8]
   16994:	2b03      	cmp	r3, #3
   16996:	f000 8161 	beq.w	16c5c <pdn_interface_pdn_id_get+0x324>
   1699a:	69a3      	ldr	r3, [r4, #24]
   1699c:	b11b      	cbz	r3, 169a6 <pdn_interface_pdn_id_get+0x6e>
   1699e:	689b      	ldr	r3, [r3, #8]
   169a0:	2b03      	cmp	r3, #3
   169a2:	f000 814a 	beq.w	16c3a <pdn_interface_pdn_id_get+0x302>
   169a6:	69e3      	ldr	r3, [r4, #28]
   169a8:	b11b      	cbz	r3, 169b2 <pdn_interface_pdn_id_get+0x7a>
   169aa:	689b      	ldr	r3, [r3, #8]
   169ac:	2b03      	cmp	r3, #3
   169ae:	f000 8133 	beq.w	16c18 <pdn_interface_pdn_id_get+0x2e0>
   169b2:	6a23      	ldr	r3, [r4, #32]
   169b4:	b11b      	cbz	r3, 169be <pdn_interface_pdn_id_get+0x86>
   169b6:	689b      	ldr	r3, [r3, #8]
   169b8:	2b03      	cmp	r3, #3
   169ba:	f000 811c 	beq.w	16bf6 <pdn_interface_pdn_id_get+0x2be>
   169be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   169c0:	b11b      	cbz	r3, 169ca <pdn_interface_pdn_id_get+0x92>
   169c2:	689b      	ldr	r3, [r3, #8]
   169c4:	2b03      	cmp	r3, #3
   169c6:	f000 80ad 	beq.w	16b24 <pdn_interface_pdn_id_get+0x1ec>
   169ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   169ce:	b003      	add	sp, #12
   169d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   169d4:	b11b      	cbz	r3, 169de <pdn_interface_pdn_id_get+0xa6>
   169d6:	689b      	ldr	r3, [r3, #8]
   169d8:	2b03      	cmp	r3, #3
   169da:	f000 8335 	beq.w	17048 <pdn_interface_pdn_id_get+0x710>
   169de:	6863      	ldr	r3, [r4, #4]
   169e0:	b11b      	cbz	r3, 169ea <pdn_interface_pdn_id_get+0xb2>
   169e2:	689b      	ldr	r3, [r3, #8]
   169e4:	2b03      	cmp	r3, #3
   169e6:	f000 82fd 	beq.w	16fe4 <pdn_interface_pdn_id_get+0x6ac>
   169ea:	68a3      	ldr	r3, [r4, #8]
   169ec:	b11b      	cbz	r3, 169f6 <pdn_interface_pdn_id_get+0xbe>
   169ee:	689b      	ldr	r3, [r3, #8]
   169f0:	2b03      	cmp	r3, #3
   169f2:	f000 82d5 	beq.w	16fa0 <pdn_interface_pdn_id_get+0x668>
   169f6:	68e3      	ldr	r3, [r4, #12]
   169f8:	b11b      	cbz	r3, 16a02 <pdn_interface_pdn_id_get+0xca>
   169fa:	689e      	ldr	r6, [r3, #8]
   169fc:	2e03      	cmp	r6, #3
   169fe:	f000 81f0 	beq.w	16de2 <pdn_interface_pdn_id_get+0x4aa>
   16a02:	6923      	ldr	r3, [r4, #16]
   16a04:	b11b      	cbz	r3, 16a0e <pdn_interface_pdn_id_get+0xd6>
   16a06:	689b      	ldr	r3, [r3, #8]
   16a08:	2b03      	cmp	r3, #3
   16a0a:	f000 8203 	beq.w	16e14 <pdn_interface_pdn_id_get+0x4dc>
   16a0e:	6963      	ldr	r3, [r4, #20]
   16a10:	b11b      	cbz	r3, 16a1a <pdn_interface_pdn_id_get+0xe2>
   16a12:	689b      	ldr	r3, [r3, #8]
   16a14:	2b03      	cmp	r3, #3
   16a16:	f000 8215 	beq.w	16e44 <pdn_interface_pdn_id_get+0x50c>
   16a1a:	69a3      	ldr	r3, [r4, #24]
   16a1c:	b11b      	cbz	r3, 16a26 <pdn_interface_pdn_id_get+0xee>
   16a1e:	689b      	ldr	r3, [r3, #8]
   16a20:	2b03      	cmp	r3, #3
   16a22:	f000 8227 	beq.w	16e74 <pdn_interface_pdn_id_get+0x53c>
   16a26:	69e3      	ldr	r3, [r4, #28]
   16a28:	b11b      	cbz	r3, 16a32 <pdn_interface_pdn_id_get+0xfa>
   16a2a:	689b      	ldr	r3, [r3, #8]
   16a2c:	2b03      	cmp	r3, #3
   16a2e:	f000 8239 	beq.w	16ea4 <pdn_interface_pdn_id_get+0x56c>
   16a32:	6a23      	ldr	r3, [r4, #32]
   16a34:	b11b      	cbz	r3, 16a3e <pdn_interface_pdn_id_get+0x106>
   16a36:	689b      	ldr	r3, [r3, #8]
   16a38:	2b03      	cmp	r3, #3
   16a3a:	f000 824d 	beq.w	16ed8 <pdn_interface_pdn_id_get+0x5a0>
   16a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a40:	2b00      	cmp	r3, #0
   16a42:	d0c2      	beq.n	169ca <pdn_interface_pdn_id_get+0x92>
   16a44:	689b      	ldr	r3, [r3, #8]
   16a46:	2b03      	cmp	r3, #3
   16a48:	d1bf      	bne.n	169ca <pdn_interface_pdn_id_get+0x92>
   16a4a:	4628      	mov	r0, r5
   16a4c:	f006 fda4 	bl	1d598 <strlen>
   16a50:	4606      	mov	r6, r0
   16a52:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16a54:	300c      	adds	r0, #12
   16a56:	f006 fd9f 	bl	1d598 <strlen>
   16a5a:	42b0      	cmp	r0, r6
   16a5c:	d1b5      	bne.n	169ca <pdn_interface_pdn_id_get+0x92>
   16a5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16a60:	4628      	mov	r0, r5
   16a62:	310c      	adds	r1, #12
   16a64:	f006 fd9f 	bl	1d5a6 <strcmp>
   16a68:	2800      	cmp	r0, #0
   16a6a:	d1ae      	bne.n	169ca <pdn_interface_pdn_id_get+0x92>
   16a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16a70:	0792      	lsls	r2, r2, #30
   16a72:	d5aa      	bpl.n	169ca <pdn_interface_pdn_id_get+0x92>
   16a74:	2609      	movs	r6, #9
   16a76:	e11a      	b.n	16cae <pdn_interface_pdn_id_get+0x376>
   16a78:	b11b      	cbz	r3, 16a82 <pdn_interface_pdn_id_get+0x14a>
   16a7a:	689b      	ldr	r3, [r3, #8]
   16a7c:	2b03      	cmp	r3, #3
   16a7e:	f000 82fd 	beq.w	1707c <pdn_interface_pdn_id_get+0x744>
   16a82:	6863      	ldr	r3, [r4, #4]
   16a84:	b11b      	cbz	r3, 16a8e <pdn_interface_pdn_id_get+0x156>
   16a86:	689b      	ldr	r3, [r3, #8]
   16a88:	2b03      	cmp	r3, #3
   16a8a:	f000 82c5 	beq.w	17018 <pdn_interface_pdn_id_get+0x6e0>
   16a8e:	68a3      	ldr	r3, [r4, #8]
   16a90:	b11b      	cbz	r3, 16a9a <pdn_interface_pdn_id_get+0x162>
   16a92:	689b      	ldr	r3, [r3, #8]
   16a94:	2b03      	cmp	r3, #3
   16a96:	f000 8269 	beq.w	16f6c <pdn_interface_pdn_id_get+0x634>
   16a9a:	68e3      	ldr	r3, [r4, #12]
   16a9c:	b11b      	cbz	r3, 16aa6 <pdn_interface_pdn_id_get+0x16e>
   16a9e:	689e      	ldr	r6, [r3, #8]
   16aa0:	2e03      	cmp	r6, #3
   16aa2:	f000 80ec 	beq.w	16c7e <pdn_interface_pdn_id_get+0x346>
   16aa6:	6923      	ldr	r3, [r4, #16]
   16aa8:	b11b      	cbz	r3, 16ab2 <pdn_interface_pdn_id_get+0x17a>
   16aaa:	689b      	ldr	r3, [r3, #8]
   16aac:	2b03      	cmp	r3, #3
   16aae:	f000 814a 	beq.w	16d46 <pdn_interface_pdn_id_get+0x40e>
   16ab2:	6963      	ldr	r3, [r4, #20]
   16ab4:	b11b      	cbz	r3, 16abe <pdn_interface_pdn_id_get+0x186>
   16ab6:	689b      	ldr	r3, [r3, #8]
   16ab8:	2b03      	cmp	r3, #3
   16aba:	f000 815e 	beq.w	16d7a <pdn_interface_pdn_id_get+0x442>
   16abe:	69a3      	ldr	r3, [r4, #24]
   16ac0:	b11b      	cbz	r3, 16aca <pdn_interface_pdn_id_get+0x192>
   16ac2:	689b      	ldr	r3, [r3, #8]
   16ac4:	2b03      	cmp	r3, #3
   16ac6:	f000 8172 	beq.w	16dae <pdn_interface_pdn_id_get+0x476>
   16aca:	69e3      	ldr	r3, [r4, #28]
   16acc:	b11b      	cbz	r3, 16ad6 <pdn_interface_pdn_id_get+0x19e>
   16ace:	689b      	ldr	r3, [r3, #8]
   16ad0:	2b03      	cmp	r3, #3
   16ad2:	f000 821b 	beq.w	16f0c <pdn_interface_pdn_id_get+0x5d4>
   16ad6:	6a23      	ldr	r3, [r4, #32]
   16ad8:	b11b      	cbz	r3, 16ae2 <pdn_interface_pdn_id_get+0x1aa>
   16ada:	689b      	ldr	r3, [r3, #8]
   16adc:	2b03      	cmp	r3, #3
   16ade:	f000 822d 	beq.w	16f3c <pdn_interface_pdn_id_get+0x604>
   16ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16ae4:	2b00      	cmp	r3, #0
   16ae6:	f43f af70 	beq.w	169ca <pdn_interface_pdn_id_get+0x92>
   16aea:	689b      	ldr	r3, [r3, #8]
   16aec:	2b03      	cmp	r3, #3
   16aee:	f47f af6c 	bne.w	169ca <pdn_interface_pdn_id_get+0x92>
   16af2:	4628      	mov	r0, r5
   16af4:	f006 fd50 	bl	1d598 <strlen>
   16af8:	4606      	mov	r6, r0
   16afa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16afc:	300c      	adds	r0, #12
   16afe:	f006 fd4b 	bl	1d598 <strlen>
   16b02:	4286      	cmp	r6, r0
   16b04:	f47f af61 	bne.w	169ca <pdn_interface_pdn_id_get+0x92>
   16b08:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16b0a:	4628      	mov	r0, r5
   16b0c:	310c      	adds	r1, #12
   16b0e:	f006 fd4a 	bl	1d5a6 <strcmp>
   16b12:	2800      	cmp	r0, #0
   16b14:	f47f af59 	bne.w	169ca <pdn_interface_pdn_id_get+0x92>
   16b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b1c:	07d2      	lsls	r2, r2, #31
   16b1e:	f57f af54 	bpl.w	169ca <pdn_interface_pdn_id_get+0x92>
   16b22:	e7a7      	b.n	16a74 <pdn_interface_pdn_id_get+0x13c>
   16b24:	4628      	mov	r0, r5
   16b26:	f006 fd37 	bl	1d598 <strlen>
   16b2a:	4606      	mov	r6, r0
   16b2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16b2e:	300c      	adds	r0, #12
   16b30:	f006 fd32 	bl	1d598 <strlen>
   16b34:	42b0      	cmp	r0, r6
   16b36:	f47f af48 	bne.w	169ca <pdn_interface_pdn_id_get+0x92>
   16b3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16b3c:	4628      	mov	r0, r5
   16b3e:	310c      	adds	r1, #12
   16b40:	f006 fd31 	bl	1d5a6 <strcmp>
   16b44:	e741      	b.n	169ca <pdn_interface_pdn_id_get+0x92>
   16b46:	4628      	mov	r0, r5
   16b48:	f006 fd26 	bl	1d598 <strlen>
   16b4c:	4606      	mov	r6, r0
   16b4e:	68e0      	ldr	r0, [r4, #12]
   16b50:	300c      	adds	r0, #12
   16b52:	f006 fd21 	bl	1d598 <strlen>
   16b56:	4286      	cmp	r6, r0
   16b58:	f47f af13 	bne.w	16982 <pdn_interface_pdn_id_get+0x4a>
   16b5c:	68e1      	ldr	r1, [r4, #12]
   16b5e:	4628      	mov	r0, r5
   16b60:	310c      	adds	r1, #12
   16b62:	f006 fd20 	bl	1d5a6 <strcmp>
   16b66:	e70c      	b.n	16982 <pdn_interface_pdn_id_get+0x4a>
   16b68:	4628      	mov	r0, r5
   16b6a:	f006 fd15 	bl	1d598 <strlen>
   16b6e:	4606      	mov	r6, r0
   16b70:	68a0      	ldr	r0, [r4, #8]
   16b72:	300c      	adds	r0, #12
   16b74:	f006 fd10 	bl	1d598 <strlen>
   16b78:	4286      	cmp	r6, r0
   16b7a:	f47f aefc 	bne.w	16976 <pdn_interface_pdn_id_get+0x3e>
   16b7e:	68a1      	ldr	r1, [r4, #8]
   16b80:	4628      	mov	r0, r5
   16b82:	310c      	adds	r1, #12
   16b84:	f006 fd0f 	bl	1d5a6 <strcmp>
   16b88:	e6f5      	b.n	16976 <pdn_interface_pdn_id_get+0x3e>
   16b8a:	4628      	mov	r0, r5
   16b8c:	f006 fd04 	bl	1d598 <strlen>
   16b90:	4606      	mov	r6, r0
   16b92:	6860      	ldr	r0, [r4, #4]
   16b94:	300c      	adds	r0, #12
   16b96:	f006 fcff 	bl	1d598 <strlen>
   16b9a:	4286      	cmp	r6, r0
   16b9c:	f47f aee5 	bne.w	1696a <pdn_interface_pdn_id_get+0x32>
   16ba0:	6861      	ldr	r1, [r4, #4]
   16ba2:	4628      	mov	r0, r5
   16ba4:	310c      	adds	r1, #12
   16ba6:	f006 fcfe 	bl	1d5a6 <strcmp>
   16baa:	e6de      	b.n	1696a <pdn_interface_pdn_id_get+0x32>
   16bac:	4608      	mov	r0, r1
   16bae:	f006 fcf3 	bl	1d598 <strlen>
   16bb2:	4606      	mov	r6, r0
   16bb4:	6820      	ldr	r0, [r4, #0]
   16bb6:	300c      	adds	r0, #12
   16bb8:	f006 fcee 	bl	1d598 <strlen>
   16bbc:	4286      	cmp	r6, r0
   16bbe:	f47f aece 	bne.w	1695e <pdn_interface_pdn_id_get+0x26>
   16bc2:	6821      	ldr	r1, [r4, #0]
   16bc4:	4628      	mov	r0, r5
   16bc6:	310c      	adds	r1, #12
   16bc8:	f006 fced 	bl	1d5a6 <strcmp>
   16bcc:	e6c7      	b.n	1695e <pdn_interface_pdn_id_get+0x26>
   16bce:	bf00      	nop
   16bd0:	2002091c 	.word	0x2002091c
   16bd4:	4628      	mov	r0, r5
   16bd6:	f006 fcdf 	bl	1d598 <strlen>
   16bda:	4606      	mov	r6, r0
   16bdc:	6920      	ldr	r0, [r4, #16]
   16bde:	300c      	adds	r0, #12
   16be0:	f006 fcda 	bl	1d598 <strlen>
   16be4:	4286      	cmp	r6, r0
   16be6:	f47f aed2 	bne.w	1698e <pdn_interface_pdn_id_get+0x56>
   16bea:	6921      	ldr	r1, [r4, #16]
   16bec:	4628      	mov	r0, r5
   16bee:	310c      	adds	r1, #12
   16bf0:	f006 fcd9 	bl	1d5a6 <strcmp>
   16bf4:	e6cb      	b.n	1698e <pdn_interface_pdn_id_get+0x56>
   16bf6:	4628      	mov	r0, r5
   16bf8:	f006 fcce 	bl	1d598 <strlen>
   16bfc:	4606      	mov	r6, r0
   16bfe:	6a20      	ldr	r0, [r4, #32]
   16c00:	300c      	adds	r0, #12
   16c02:	f006 fcc9 	bl	1d598 <strlen>
   16c06:	4286      	cmp	r6, r0
   16c08:	f47f aed9 	bne.w	169be <pdn_interface_pdn_id_get+0x86>
   16c0c:	6a21      	ldr	r1, [r4, #32]
   16c0e:	4628      	mov	r0, r5
   16c10:	310c      	adds	r1, #12
   16c12:	f006 fcc8 	bl	1d5a6 <strcmp>
   16c16:	e6d2      	b.n	169be <pdn_interface_pdn_id_get+0x86>
   16c18:	4628      	mov	r0, r5
   16c1a:	f006 fcbd 	bl	1d598 <strlen>
   16c1e:	4606      	mov	r6, r0
   16c20:	69e0      	ldr	r0, [r4, #28]
   16c22:	300c      	adds	r0, #12
   16c24:	f006 fcb8 	bl	1d598 <strlen>
   16c28:	4286      	cmp	r6, r0
   16c2a:	f47f aec2 	bne.w	169b2 <pdn_interface_pdn_id_get+0x7a>
   16c2e:	69e1      	ldr	r1, [r4, #28]
   16c30:	4628      	mov	r0, r5
   16c32:	310c      	adds	r1, #12
   16c34:	f006 fcb7 	bl	1d5a6 <strcmp>
   16c38:	e6bb      	b.n	169b2 <pdn_interface_pdn_id_get+0x7a>
   16c3a:	4628      	mov	r0, r5
   16c3c:	f006 fcac 	bl	1d598 <strlen>
   16c40:	4606      	mov	r6, r0
   16c42:	69a0      	ldr	r0, [r4, #24]
   16c44:	300c      	adds	r0, #12
   16c46:	f006 fca7 	bl	1d598 <strlen>
   16c4a:	4286      	cmp	r6, r0
   16c4c:	f47f aeab 	bne.w	169a6 <pdn_interface_pdn_id_get+0x6e>
   16c50:	69a1      	ldr	r1, [r4, #24]
   16c52:	4628      	mov	r0, r5
   16c54:	310c      	adds	r1, #12
   16c56:	f006 fca6 	bl	1d5a6 <strcmp>
   16c5a:	e6a4      	b.n	169a6 <pdn_interface_pdn_id_get+0x6e>
   16c5c:	4628      	mov	r0, r5
   16c5e:	f006 fc9b 	bl	1d598 <strlen>
   16c62:	4606      	mov	r6, r0
   16c64:	6960      	ldr	r0, [r4, #20]
   16c66:	300c      	adds	r0, #12
   16c68:	f006 fc96 	bl	1d598 <strlen>
   16c6c:	4286      	cmp	r6, r0
   16c6e:	f47f ae94 	bne.w	1699a <pdn_interface_pdn_id_get+0x62>
   16c72:	6961      	ldr	r1, [r4, #20]
   16c74:	4628      	mov	r0, r5
   16c76:	310c      	adds	r1, #12
   16c78:	f006 fc95 	bl	1d5a6 <strcmp>
   16c7c:	e68d      	b.n	1699a <pdn_interface_pdn_id_get+0x62>
   16c7e:	4628      	mov	r0, r5
   16c80:	f006 fc8a 	bl	1d598 <strlen>
   16c84:	4607      	mov	r7, r0
   16c86:	68e0      	ldr	r0, [r4, #12]
   16c88:	300c      	adds	r0, #12
   16c8a:	f006 fc85 	bl	1d598 <strlen>
   16c8e:	4287      	cmp	r7, r0
   16c90:	f47f af09 	bne.w	16aa6 <pdn_interface_pdn_id_get+0x16e>
   16c94:	68e1      	ldr	r1, [r4, #12]
   16c96:	4628      	mov	r0, r5
   16c98:	310c      	adds	r1, #12
   16c9a:	f006 fc84 	bl	1d5a6 <strcmp>
   16c9e:	2800      	cmp	r0, #0
   16ca0:	f47f af01 	bne.w	16aa6 <pdn_interface_pdn_id_get+0x16e>
   16ca4:	68e3      	ldr	r3, [r4, #12]
   16ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ca8:	07d1      	lsls	r1, r2, #31
   16caa:	f57f aefc 	bpl.w	16aa6 <pdn_interface_pdn_id_get+0x16e>
   16cae:	6858      	ldr	r0, [r3, #4]
   16cb0:	1c43      	adds	r3, r0, #1
   16cb2:	f47f ae8c 	bne.w	169ce <pdn_interface_pdn_id_get+0x96>
   16cb6:	4dc6      	ldr	r5, [pc, #792]	; (16fd0 <pdn_interface_pdn_id_get+0x698>)
   16cb8:	4ac6      	ldr	r2, [pc, #792]	; (16fd4 <pdn_interface_pdn_id_get+0x69c>)
   16cba:	f44f 7180 	mov.w	r1, #256	; 0x100
   16cbe:	4628      	mov	r0, r5
   16cc0:	f7fa f90e 	bl	10ee0 <snprintf>
   16cc4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16cc8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16ccc:	681b      	ldr	r3, [r3, #0]
   16cce:	4ac2      	ldr	r2, [pc, #776]	; (16fd8 <pdn_interface_pdn_id_get+0x6a0>)
   16cd0:	4428      	add	r0, r5
   16cd2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 16fe0 <pdn_interface_pdn_id_get+0x6a8>
   16cd6:	f7fa f903 	bl	10ee0 <snprintf>
   16cda:	4628      	mov	r0, r5
   16cdc:	f8d8 9000 	ldr.w	r9, [r8]
   16ce0:	2700      	movs	r7, #0
   16ce2:	f006 fc59 	bl	1d598 <strlen>
   16ce6:	4629      	mov	r1, r5
   16ce8:	4602      	mov	r2, r0
   16cea:	463b      	mov	r3, r7
   16cec:	4648      	mov	r0, r9
   16cee:	9701      	str	r7, [sp, #4]
   16cf0:	9700      	str	r7, [sp, #0]
   16cf2:	f7fc f94d 	bl	12f90 <at_interface_write>
   16cf6:	4681      	mov	r9, r0
   16cf8:	4628      	mov	r0, r5
   16cfa:	f006 fc4d 	bl	1d598 <strlen>
   16cfe:	4548      	cmp	r0, r9
   16d00:	f040 81e9 	bne.w	170d6 <pdn_interface_pdn_id_get+0x79e>
   16d04:	463b      	mov	r3, r7
   16d06:	f44f 7280 	mov.w	r2, #256	; 0x100
   16d0a:	e9cd 7700 	strd	r7, r7, [sp]
   16d0e:	4629      	mov	r1, r5
   16d10:	f8d8 0000 	ldr.w	r0, [r8]
   16d14:	f7fc fa24 	bl	13160 <at_interface_read>
   16d18:	4607      	mov	r7, r0
   16d1a:	48b0      	ldr	r0, [pc, #704]	; (16fdc <pdn_interface_pdn_id_get+0x6a4>)
   16d1c:	f006 fc3c 	bl	1d598 <strlen>
   16d20:	4287      	cmp	r7, r0
   16d22:	4602      	mov	r2, r0
   16d24:	f2c0 81c7 	blt.w	170b6 <pdn_interface_pdn_id_get+0x77e>
   16d28:	4629      	mov	r1, r5
   16d2a:	48ac      	ldr	r0, [pc, #688]	; (16fdc <pdn_interface_pdn_id_get+0x6a4>)
   16d2c:	f006 fc47 	bl	1d5be <strncmp>
   16d30:	2800      	cmp	r0, #0
   16d32:	f040 81c0 	bne.w	170b6 <pdn_interface_pdn_id_get+0x77e>
   16d36:	4629      	mov	r1, r5
   16d38:	4630      	mov	r0, r6
   16d3a:	f7ff f92b 	bl	15f94 <pdn_id_get_parser>
   16d3e:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16d42:	6858      	ldr	r0, [r3, #4]
   16d44:	e643      	b.n	169ce <pdn_interface_pdn_id_get+0x96>
   16d46:	4628      	mov	r0, r5
   16d48:	f006 fc26 	bl	1d598 <strlen>
   16d4c:	4606      	mov	r6, r0
   16d4e:	6920      	ldr	r0, [r4, #16]
   16d50:	300c      	adds	r0, #12
   16d52:	f006 fc21 	bl	1d598 <strlen>
   16d56:	4286      	cmp	r6, r0
   16d58:	f47f aeab 	bne.w	16ab2 <pdn_interface_pdn_id_get+0x17a>
   16d5c:	6921      	ldr	r1, [r4, #16]
   16d5e:	4628      	mov	r0, r5
   16d60:	310c      	adds	r1, #12
   16d62:	f006 fc20 	bl	1d5a6 <strcmp>
   16d66:	2800      	cmp	r0, #0
   16d68:	f47f aea3 	bne.w	16ab2 <pdn_interface_pdn_id_get+0x17a>
   16d6c:	6923      	ldr	r3, [r4, #16]
   16d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16d70:	07d2      	lsls	r2, r2, #31
   16d72:	f57f ae9e 	bpl.w	16ab2 <pdn_interface_pdn_id_get+0x17a>
   16d76:	2604      	movs	r6, #4
   16d78:	e799      	b.n	16cae <pdn_interface_pdn_id_get+0x376>
   16d7a:	4628      	mov	r0, r5
   16d7c:	f006 fc0c 	bl	1d598 <strlen>
   16d80:	4606      	mov	r6, r0
   16d82:	6960      	ldr	r0, [r4, #20]
   16d84:	300c      	adds	r0, #12
   16d86:	f006 fc07 	bl	1d598 <strlen>
   16d8a:	4286      	cmp	r6, r0
   16d8c:	f47f ae97 	bne.w	16abe <pdn_interface_pdn_id_get+0x186>
   16d90:	6961      	ldr	r1, [r4, #20]
   16d92:	4628      	mov	r0, r5
   16d94:	310c      	adds	r1, #12
   16d96:	f006 fc06 	bl	1d5a6 <strcmp>
   16d9a:	2800      	cmp	r0, #0
   16d9c:	f47f ae8f 	bne.w	16abe <pdn_interface_pdn_id_get+0x186>
   16da0:	6963      	ldr	r3, [r4, #20]
   16da2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16da4:	07d7      	lsls	r7, r2, #31
   16da6:	f57f ae8a 	bpl.w	16abe <pdn_interface_pdn_id_get+0x186>
   16daa:	2605      	movs	r6, #5
   16dac:	e77f      	b.n	16cae <pdn_interface_pdn_id_get+0x376>
   16dae:	4628      	mov	r0, r5
   16db0:	f006 fbf2 	bl	1d598 <strlen>
   16db4:	4606      	mov	r6, r0
   16db6:	69a0      	ldr	r0, [r4, #24]
   16db8:	300c      	adds	r0, #12
   16dba:	f006 fbed 	bl	1d598 <strlen>
   16dbe:	4286      	cmp	r6, r0
   16dc0:	f47f ae83 	bne.w	16aca <pdn_interface_pdn_id_get+0x192>
   16dc4:	69a1      	ldr	r1, [r4, #24]
   16dc6:	4628      	mov	r0, r5
   16dc8:	310c      	adds	r1, #12
   16dca:	f006 fbec 	bl	1d5a6 <strcmp>
   16dce:	2800      	cmp	r0, #0
   16dd0:	f47f ae7b 	bne.w	16aca <pdn_interface_pdn_id_get+0x192>
   16dd4:	69a3      	ldr	r3, [r4, #24]
   16dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16dd8:	07d6      	lsls	r6, r2, #31
   16dda:	f57f ae76 	bpl.w	16aca <pdn_interface_pdn_id_get+0x192>
   16dde:	2606      	movs	r6, #6
   16de0:	e765      	b.n	16cae <pdn_interface_pdn_id_get+0x376>
   16de2:	4628      	mov	r0, r5
   16de4:	f006 fbd8 	bl	1d598 <strlen>
   16de8:	4607      	mov	r7, r0
   16dea:	68e0      	ldr	r0, [r4, #12]
   16dec:	300c      	adds	r0, #12
   16dee:	f006 fbd3 	bl	1d598 <strlen>
   16df2:	4287      	cmp	r7, r0
   16df4:	f47f ae05 	bne.w	16a02 <pdn_interface_pdn_id_get+0xca>
   16df8:	68e1      	ldr	r1, [r4, #12]
   16dfa:	4628      	mov	r0, r5
   16dfc:	310c      	adds	r1, #12
   16dfe:	f006 fbd2 	bl	1d5a6 <strcmp>
   16e02:	2800      	cmp	r0, #0
   16e04:	f47f adfd 	bne.w	16a02 <pdn_interface_pdn_id_get+0xca>
   16e08:	68e3      	ldr	r3, [r4, #12]
   16e0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e0c:	0791      	lsls	r1, r2, #30
   16e0e:	f53f af4e 	bmi.w	16cae <pdn_interface_pdn_id_get+0x376>
   16e12:	e5f6      	b.n	16a02 <pdn_interface_pdn_id_get+0xca>
   16e14:	4628      	mov	r0, r5
   16e16:	f006 fbbf 	bl	1d598 <strlen>
   16e1a:	4606      	mov	r6, r0
   16e1c:	6920      	ldr	r0, [r4, #16]
   16e1e:	300c      	adds	r0, #12
   16e20:	f006 fbba 	bl	1d598 <strlen>
   16e24:	4286      	cmp	r6, r0
   16e26:	f47f adf2 	bne.w	16a0e <pdn_interface_pdn_id_get+0xd6>
   16e2a:	6921      	ldr	r1, [r4, #16]
   16e2c:	4628      	mov	r0, r5
   16e2e:	310c      	adds	r1, #12
   16e30:	f006 fbb9 	bl	1d5a6 <strcmp>
   16e34:	2800      	cmp	r0, #0
   16e36:	f47f adea 	bne.w	16a0e <pdn_interface_pdn_id_get+0xd6>
   16e3a:	6923      	ldr	r3, [r4, #16]
   16e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e3e:	0792      	lsls	r2, r2, #30
   16e40:	d499      	bmi.n	16d76 <pdn_interface_pdn_id_get+0x43e>
   16e42:	e5e4      	b.n	16a0e <pdn_interface_pdn_id_get+0xd6>
   16e44:	4628      	mov	r0, r5
   16e46:	f006 fba7 	bl	1d598 <strlen>
   16e4a:	4606      	mov	r6, r0
   16e4c:	6960      	ldr	r0, [r4, #20]
   16e4e:	300c      	adds	r0, #12
   16e50:	f006 fba2 	bl	1d598 <strlen>
   16e54:	4286      	cmp	r6, r0
   16e56:	f47f ade0 	bne.w	16a1a <pdn_interface_pdn_id_get+0xe2>
   16e5a:	6961      	ldr	r1, [r4, #20]
   16e5c:	4628      	mov	r0, r5
   16e5e:	310c      	adds	r1, #12
   16e60:	f006 fba1 	bl	1d5a6 <strcmp>
   16e64:	2800      	cmp	r0, #0
   16e66:	f47f add8 	bne.w	16a1a <pdn_interface_pdn_id_get+0xe2>
   16e6a:	6963      	ldr	r3, [r4, #20]
   16e6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e6e:	0797      	lsls	r7, r2, #30
   16e70:	d49b      	bmi.n	16daa <pdn_interface_pdn_id_get+0x472>
   16e72:	e5d2      	b.n	16a1a <pdn_interface_pdn_id_get+0xe2>
   16e74:	4628      	mov	r0, r5
   16e76:	f006 fb8f 	bl	1d598 <strlen>
   16e7a:	4606      	mov	r6, r0
   16e7c:	69a0      	ldr	r0, [r4, #24]
   16e7e:	300c      	adds	r0, #12
   16e80:	f006 fb8a 	bl	1d598 <strlen>
   16e84:	4286      	cmp	r6, r0
   16e86:	f47f adce 	bne.w	16a26 <pdn_interface_pdn_id_get+0xee>
   16e8a:	69a1      	ldr	r1, [r4, #24]
   16e8c:	4628      	mov	r0, r5
   16e8e:	310c      	adds	r1, #12
   16e90:	f006 fb89 	bl	1d5a6 <strcmp>
   16e94:	2800      	cmp	r0, #0
   16e96:	f47f adc6 	bne.w	16a26 <pdn_interface_pdn_id_get+0xee>
   16e9a:	69a3      	ldr	r3, [r4, #24]
   16e9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e9e:	0796      	lsls	r6, r2, #30
   16ea0:	d49d      	bmi.n	16dde <pdn_interface_pdn_id_get+0x4a6>
   16ea2:	e5c0      	b.n	16a26 <pdn_interface_pdn_id_get+0xee>
   16ea4:	4628      	mov	r0, r5
   16ea6:	f006 fb77 	bl	1d598 <strlen>
   16eaa:	4606      	mov	r6, r0
   16eac:	69e0      	ldr	r0, [r4, #28]
   16eae:	300c      	adds	r0, #12
   16eb0:	f006 fb72 	bl	1d598 <strlen>
   16eb4:	4286      	cmp	r6, r0
   16eb6:	f47f adbc 	bne.w	16a32 <pdn_interface_pdn_id_get+0xfa>
   16eba:	69e1      	ldr	r1, [r4, #28]
   16ebc:	4628      	mov	r0, r5
   16ebe:	310c      	adds	r1, #12
   16ec0:	f006 fb71 	bl	1d5a6 <strcmp>
   16ec4:	2800      	cmp	r0, #0
   16ec6:	f47f adb4 	bne.w	16a32 <pdn_interface_pdn_id_get+0xfa>
   16eca:	69e3      	ldr	r3, [r4, #28]
   16ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ece:	0790      	lsls	r0, r2, #30
   16ed0:	f57f adaf 	bpl.w	16a32 <pdn_interface_pdn_id_get+0xfa>
   16ed4:	2607      	movs	r6, #7
   16ed6:	e6ea      	b.n	16cae <pdn_interface_pdn_id_get+0x376>
   16ed8:	4628      	mov	r0, r5
   16eda:	f006 fb5d 	bl	1d598 <strlen>
   16ede:	4606      	mov	r6, r0
   16ee0:	6a20      	ldr	r0, [r4, #32]
   16ee2:	300c      	adds	r0, #12
   16ee4:	f006 fb58 	bl	1d598 <strlen>
   16ee8:	4286      	cmp	r6, r0
   16eea:	f47f ada8 	bne.w	16a3e <pdn_interface_pdn_id_get+0x106>
   16eee:	6a21      	ldr	r1, [r4, #32]
   16ef0:	4628      	mov	r0, r5
   16ef2:	310c      	adds	r1, #12
   16ef4:	f006 fb57 	bl	1d5a6 <strcmp>
   16ef8:	2800      	cmp	r0, #0
   16efa:	f47f ada0 	bne.w	16a3e <pdn_interface_pdn_id_get+0x106>
   16efe:	6a23      	ldr	r3, [r4, #32]
   16f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f02:	0791      	lsls	r1, r2, #30
   16f04:	f57f ad9b 	bpl.w	16a3e <pdn_interface_pdn_id_get+0x106>
   16f08:	2608      	movs	r6, #8
   16f0a:	e6d0      	b.n	16cae <pdn_interface_pdn_id_get+0x376>
   16f0c:	4628      	mov	r0, r5
   16f0e:	f006 fb43 	bl	1d598 <strlen>
   16f12:	4606      	mov	r6, r0
   16f14:	69e0      	ldr	r0, [r4, #28]
   16f16:	300c      	adds	r0, #12
   16f18:	f006 fb3e 	bl	1d598 <strlen>
   16f1c:	4286      	cmp	r6, r0
   16f1e:	f47f adda 	bne.w	16ad6 <pdn_interface_pdn_id_get+0x19e>
   16f22:	69e1      	ldr	r1, [r4, #28]
   16f24:	4628      	mov	r0, r5
   16f26:	310c      	adds	r1, #12
   16f28:	f006 fb3d 	bl	1d5a6 <strcmp>
   16f2c:	2800      	cmp	r0, #0
   16f2e:	f47f add2 	bne.w	16ad6 <pdn_interface_pdn_id_get+0x19e>
   16f32:	69e3      	ldr	r3, [r4, #28]
   16f34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f36:	07d0      	lsls	r0, r2, #31
   16f38:	d4cc      	bmi.n	16ed4 <pdn_interface_pdn_id_get+0x59c>
   16f3a:	e5cc      	b.n	16ad6 <pdn_interface_pdn_id_get+0x19e>
   16f3c:	4628      	mov	r0, r5
   16f3e:	f006 fb2b 	bl	1d598 <strlen>
   16f42:	4606      	mov	r6, r0
   16f44:	6a20      	ldr	r0, [r4, #32]
   16f46:	300c      	adds	r0, #12
   16f48:	f006 fb26 	bl	1d598 <strlen>
   16f4c:	4286      	cmp	r6, r0
   16f4e:	f47f adc8 	bne.w	16ae2 <pdn_interface_pdn_id_get+0x1aa>
   16f52:	6a21      	ldr	r1, [r4, #32]
   16f54:	4628      	mov	r0, r5
   16f56:	310c      	adds	r1, #12
   16f58:	f006 fb25 	bl	1d5a6 <strcmp>
   16f5c:	2800      	cmp	r0, #0
   16f5e:	f47f adc0 	bne.w	16ae2 <pdn_interface_pdn_id_get+0x1aa>
   16f62:	6a23      	ldr	r3, [r4, #32]
   16f64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f66:	07d1      	lsls	r1, r2, #31
   16f68:	d4ce      	bmi.n	16f08 <pdn_interface_pdn_id_get+0x5d0>
   16f6a:	e5ba      	b.n	16ae2 <pdn_interface_pdn_id_get+0x1aa>
   16f6c:	4628      	mov	r0, r5
   16f6e:	f006 fb13 	bl	1d598 <strlen>
   16f72:	4606      	mov	r6, r0
   16f74:	68a0      	ldr	r0, [r4, #8]
   16f76:	300c      	adds	r0, #12
   16f78:	f006 fb0e 	bl	1d598 <strlen>
   16f7c:	4286      	cmp	r6, r0
   16f7e:	f47f ad8c 	bne.w	16a9a <pdn_interface_pdn_id_get+0x162>
   16f82:	68a1      	ldr	r1, [r4, #8]
   16f84:	4628      	mov	r0, r5
   16f86:	310c      	adds	r1, #12
   16f88:	f006 fb0d 	bl	1d5a6 <strcmp>
   16f8c:	2800      	cmp	r0, #0
   16f8e:	f47f ad84 	bne.w	16a9a <pdn_interface_pdn_id_get+0x162>
   16f92:	68a3      	ldr	r3, [r4, #8]
   16f94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f96:	07d0      	lsls	r0, r2, #31
   16f98:	f57f ad7f 	bpl.w	16a9a <pdn_interface_pdn_id_get+0x162>
   16f9c:	2602      	movs	r6, #2
   16f9e:	e686      	b.n	16cae <pdn_interface_pdn_id_get+0x376>
   16fa0:	4628      	mov	r0, r5
   16fa2:	f006 faf9 	bl	1d598 <strlen>
   16fa6:	4606      	mov	r6, r0
   16fa8:	68a0      	ldr	r0, [r4, #8]
   16faa:	300c      	adds	r0, #12
   16fac:	f006 faf4 	bl	1d598 <strlen>
   16fb0:	4286      	cmp	r6, r0
   16fb2:	f47f ad20 	bne.w	169f6 <pdn_interface_pdn_id_get+0xbe>
   16fb6:	68a1      	ldr	r1, [r4, #8]
   16fb8:	4628      	mov	r0, r5
   16fba:	310c      	adds	r1, #12
   16fbc:	f006 faf3 	bl	1d5a6 <strcmp>
   16fc0:	2800      	cmp	r0, #0
   16fc2:	f47f ad18 	bne.w	169f6 <pdn_interface_pdn_id_get+0xbe>
   16fc6:	68a3      	ldr	r3, [r4, #8]
   16fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16fca:	0790      	lsls	r0, r2, #30
   16fcc:	d4e6      	bmi.n	16f9c <pdn_interface_pdn_id_get+0x664>
   16fce:	e512      	b.n	169f6 <pdn_interface_pdn_id_get+0xbe>
   16fd0:	2002081c 	.word	0x2002081c
   16fd4:	0001f7b4 	.word	0x0001f7b4
   16fd8:	0001f7b0 	.word	0x0001f7b0
   16fdc:	0001f7c4 	.word	0x0001f7c4
   16fe0:	20020818 	.word	0x20020818
   16fe4:	4628      	mov	r0, r5
   16fe6:	f006 fad7 	bl	1d598 <strlen>
   16fea:	4606      	mov	r6, r0
   16fec:	6860      	ldr	r0, [r4, #4]
   16fee:	300c      	adds	r0, #12
   16ff0:	f006 fad2 	bl	1d598 <strlen>
   16ff4:	4286      	cmp	r6, r0
   16ff6:	f47f acf8 	bne.w	169ea <pdn_interface_pdn_id_get+0xb2>
   16ffa:	6861      	ldr	r1, [r4, #4]
   16ffc:	4628      	mov	r0, r5
   16ffe:	310c      	adds	r1, #12
   17000:	f006 fad1 	bl	1d5a6 <strcmp>
   17004:	2800      	cmp	r0, #0
   17006:	f47f acf0 	bne.w	169ea <pdn_interface_pdn_id_get+0xb2>
   1700a:	6863      	ldr	r3, [r4, #4]
   1700c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1700e:	0796      	lsls	r6, r2, #30
   17010:	f57f aceb 	bpl.w	169ea <pdn_interface_pdn_id_get+0xb2>
   17014:	2601      	movs	r6, #1
   17016:	e64a      	b.n	16cae <pdn_interface_pdn_id_get+0x376>
   17018:	4628      	mov	r0, r5
   1701a:	f006 fabd 	bl	1d598 <strlen>
   1701e:	4606      	mov	r6, r0
   17020:	6860      	ldr	r0, [r4, #4]
   17022:	300c      	adds	r0, #12
   17024:	f006 fab8 	bl	1d598 <strlen>
   17028:	4286      	cmp	r6, r0
   1702a:	f47f ad30 	bne.w	16a8e <pdn_interface_pdn_id_get+0x156>
   1702e:	6861      	ldr	r1, [r4, #4]
   17030:	4628      	mov	r0, r5
   17032:	310c      	adds	r1, #12
   17034:	f006 fab7 	bl	1d5a6 <strcmp>
   17038:	2800      	cmp	r0, #0
   1703a:	f47f ad28 	bne.w	16a8e <pdn_interface_pdn_id_get+0x156>
   1703e:	6863      	ldr	r3, [r4, #4]
   17040:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   17042:	07d6      	lsls	r6, r2, #31
   17044:	d4e6      	bmi.n	17014 <pdn_interface_pdn_id_get+0x6dc>
   17046:	e522      	b.n	16a8e <pdn_interface_pdn_id_get+0x156>
   17048:	4608      	mov	r0, r1
   1704a:	f006 faa5 	bl	1d598 <strlen>
   1704e:	4606      	mov	r6, r0
   17050:	6820      	ldr	r0, [r4, #0]
   17052:	300c      	adds	r0, #12
   17054:	f006 faa0 	bl	1d598 <strlen>
   17058:	4286      	cmp	r6, r0
   1705a:	f47f acc0 	bne.w	169de <pdn_interface_pdn_id_get+0xa6>
   1705e:	6821      	ldr	r1, [r4, #0]
   17060:	4628      	mov	r0, r5
   17062:	310c      	adds	r1, #12
   17064:	f006 fa9f 	bl	1d5a6 <strcmp>
   17068:	4606      	mov	r6, r0
   1706a:	2800      	cmp	r0, #0
   1706c:	f47f acb7 	bne.w	169de <pdn_interface_pdn_id_get+0xa6>
   17070:	6823      	ldr	r3, [r4, #0]
   17072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   17074:	0797      	lsls	r7, r2, #30
   17076:	f53f ae1a 	bmi.w	16cae <pdn_interface_pdn_id_get+0x376>
   1707a:	e4b0      	b.n	169de <pdn_interface_pdn_id_get+0xa6>
   1707c:	4608      	mov	r0, r1
   1707e:	f006 fa8b 	bl	1d598 <strlen>
   17082:	4606      	mov	r6, r0
   17084:	6820      	ldr	r0, [r4, #0]
   17086:	300c      	adds	r0, #12
   17088:	f006 fa86 	bl	1d598 <strlen>
   1708c:	4286      	cmp	r6, r0
   1708e:	f47f acf8 	bne.w	16a82 <pdn_interface_pdn_id_get+0x14a>
   17092:	6821      	ldr	r1, [r4, #0]
   17094:	4628      	mov	r0, r5
   17096:	310c      	adds	r1, #12
   17098:	f006 fa85 	bl	1d5a6 <strcmp>
   1709c:	4606      	mov	r6, r0
   1709e:	2800      	cmp	r0, #0
   170a0:	f47f acef 	bne.w	16a82 <pdn_interface_pdn_id_get+0x14a>
   170a4:	6823      	ldr	r3, [r4, #0]
   170a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   170a8:	07d7      	lsls	r7, r2, #31
   170aa:	f53f ae00 	bmi.w	16cae <pdn_interface_pdn_id_get+0x376>
   170ae:	e4e8      	b.n	16a82 <pdn_interface_pdn_id_get+0x14a>
   170b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   170b4:	4770      	bx	lr
   170b6:	480b      	ldr	r0, [pc, #44]	; (170e4 <pdn_interface_pdn_id_get+0x7ac>)
   170b8:	f006 fa6e 	bl	1d598 <strlen>
   170bc:	490a      	ldr	r1, [pc, #40]	; (170e8 <pdn_interface_pdn_id_get+0x7b0>)
   170be:	4602      	mov	r2, r0
   170c0:	4808      	ldr	r0, [pc, #32]	; (170e4 <pdn_interface_pdn_id_get+0x7ac>)
   170c2:	f006 fa7c 	bl	1d5be <strncmp>
   170c6:	b930      	cbnz	r0, 170d6 <pdn_interface_pdn_id_get+0x79e>
   170c8:	2008      	movs	r0, #8
   170ca:	f7fa fc57 	bl	1197c <bsd_os_errno_set>
   170ce:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   170d2:	6858      	ldr	r0, [r3, #4]
   170d4:	e47b      	b.n	169ce <pdn_interface_pdn_id_get+0x96>
   170d6:	2005      	movs	r0, #5
   170d8:	f7fa fc50 	bl	1197c <bsd_os_errno_set>
   170dc:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   170e0:	6858      	ldr	r0, [r3, #4]
   170e2:	e474      	b.n	169ce <pdn_interface_pdn_id_get+0x96>
   170e4:	0001f808 	.word	0x0001f808
   170e8:	2002081c 	.word	0x2002081c

000170ec <linked_list_init>:
   170ec:	b128      	cbz	r0, 170fa <linked_list_init+0xe>
   170ee:	2300      	movs	r3, #0
   170f0:	6003      	str	r3, [r0, #0]
   170f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
   170f6:	4618      	mov	r0, r3
   170f8:	4770      	bx	lr
   170fa:	2007      	movs	r0, #7
   170fc:	4770      	bx	lr
   170fe:	bf00      	nop

00017100 <linked_list_push>:
   17100:	6802      	ldr	r2, [r0, #0]
   17102:	4603      	mov	r3, r0
   17104:	3201      	adds	r2, #1
   17106:	d00e      	beq.n	17126 <linked_list_push+0x26>
   17108:	2200      	movs	r2, #0
   1710a:	600a      	str	r2, [r1, #0]
   1710c:	6802      	ldr	r2, [r0, #0]
   1710e:	b13a      	cbz	r2, 17120 <linked_list_push+0x20>
   17110:	6882      	ldr	r2, [r0, #8]
   17112:	6011      	str	r1, [r2, #0]
   17114:	6081      	str	r1, [r0, #8]
   17116:	681a      	ldr	r2, [r3, #0]
   17118:	2000      	movs	r0, #0
   1711a:	3201      	adds	r2, #1
   1711c:	601a      	str	r2, [r3, #0]
   1711e:	4770      	bx	lr
   17120:	e9c0 1101 	strd	r1, r1, [r0, #4]
   17124:	e7f7      	b.n	17116 <linked_list_push+0x16>
   17126:	2004      	movs	r0, #4
   17128:	4770      	bx	lr
   1712a:	bf00      	nop

0001712c <linked_list_pop>:
   1712c:	4603      	mov	r3, r0
   1712e:	6800      	ldr	r0, [r0, #0]
   17130:	b128      	cbz	r0, 1713e <linked_list_pop+0x12>
   17132:	6858      	ldr	r0, [r3, #4]
   17134:	681a      	ldr	r2, [r3, #0]
   17136:	6801      	ldr	r1, [r0, #0]
   17138:	3a01      	subs	r2, #1
   1713a:	6059      	str	r1, [r3, #4]
   1713c:	601a      	str	r2, [r3, #0]
   1713e:	4770      	bx	lr

00017140 <linked_list_peek>:
   17140:	6803      	ldr	r3, [r0, #0]
   17142:	b10b      	cbz	r3, 17148 <linked_list_peek+0x8>
   17144:	6840      	ldr	r0, [r0, #4]
   17146:	4770      	bx	lr
   17148:	4618      	mov	r0, r3
   1714a:	4770      	bx	lr

0001714c <linked_list_size_get>:
   1714c:	6800      	ldr	r0, [r0, #0]
   1714e:	4770      	bx	lr

00017150 <linked_list_get_next>:
   17150:	6800      	ldr	r0, [r0, #0]
   17152:	4770      	bx	lr

00017154 <nrf_socket>:
   17154:	b570      	push	{r4, r5, r6, lr}
   17156:	4604      	mov	r4, r0
   17158:	460d      	mov	r5, r1
   1715a:	4616      	mov	r6, r2
   1715c:	f7fd fcd6 	bl	14b0c <bsd_platform_af_method_table_get>
   17160:	b130      	cbz	r0, 17170 <nrf_socket+0x1c>
   17162:	6803      	ldr	r3, [r0, #0]
   17164:	4632      	mov	r2, r6
   17166:	4629      	mov	r1, r5
   17168:	4620      	mov	r0, r4
   1716a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1716e:	4718      	bx	r3
   17170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17174:	bd70      	pop	{r4, r5, r6, pc}
   17176:	bf00      	nop

00017178 <nrf_close>:
   17178:	b510      	push	{r4, lr}
   1717a:	4604      	mov	r4, r0
   1717c:	f7fd fd1a 	bl	14bb4 <bsd_platform_fd_method_table_get>
   17180:	b120      	cbz	r0, 1718c <nrf_close+0x14>
   17182:	6843      	ldr	r3, [r0, #4]
   17184:	4620      	mov	r0, r4
   17186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1718a:	4718      	bx	r3
   1718c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17190:	bd10      	pop	{r4, pc}
   17192:	bf00      	nop

00017194 <nrf_sendto>:
   17194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17198:	460d      	mov	r5, r1
   1719a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1719e:	4616      	mov	r6, r2
   171a0:	461f      	mov	r7, r3
   171a2:	4604      	mov	r4, r0
   171a4:	f7fd fd06 	bl	14bb4 <bsd_platform_fd_method_table_get>
   171a8:	b158      	cbz	r0, 171c2 <nrf_sendto+0x2e>
   171aa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   171ae:	f8d0 e008 	ldr.w	lr, [r0, #8]
   171b2:	463b      	mov	r3, r7
   171b4:	4632      	mov	r2, r6
   171b6:	4629      	mov	r1, r5
   171b8:	4620      	mov	r0, r4
   171ba:	46f4      	mov	ip, lr
   171bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171c0:	4760      	bx	ip
   171c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   171ca:	bf00      	nop

000171cc <nrf_send>:
   171cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171d0:	b082      	sub	sp, #8
   171d2:	460e      	mov	r6, r1
   171d4:	4617      	mov	r7, r2
   171d6:	4698      	mov	r8, r3
   171d8:	4605      	mov	r5, r0
   171da:	f7fd fceb 	bl	14bb4 <bsd_platform_fd_method_table_get>
   171de:	b160      	cbz	r0, 171fa <nrf_send+0x2e>
   171e0:	4604      	mov	r4, r0
   171e2:	2000      	movs	r0, #0
   171e4:	e9cd 0000 	strd	r0, r0, [sp]
   171e8:	4643      	mov	r3, r8
   171ea:	463a      	mov	r2, r7
   171ec:	4631      	mov	r1, r6
   171ee:	4628      	mov	r0, r5
   171f0:	68a4      	ldr	r4, [r4, #8]
   171f2:	47a0      	blx	r4
   171f4:	b002      	add	sp, #8
   171f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   171fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171fe:	e7f9      	b.n	171f4 <nrf_send+0x28>

00017200 <nrf_recvfrom>:
   17200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17204:	460d      	mov	r5, r1
   17206:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1720a:	4616      	mov	r6, r2
   1720c:	461f      	mov	r7, r3
   1720e:	4604      	mov	r4, r0
   17210:	f7fd fcd0 	bl	14bb4 <bsd_platform_fd_method_table_get>
   17214:	b158      	cbz	r0, 1722e <nrf_recvfrom+0x2e>
   17216:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1721a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1721e:	463b      	mov	r3, r7
   17220:	4632      	mov	r2, r6
   17222:	4629      	mov	r1, r5
   17224:	4620      	mov	r0, r4
   17226:	46f4      	mov	ip, lr
   17228:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1722c:	4760      	bx	ip
   1722e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17236:	bf00      	nop

00017238 <nrf_recv>:
   17238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1723c:	b082      	sub	sp, #8
   1723e:	460e      	mov	r6, r1
   17240:	4617      	mov	r7, r2
   17242:	4698      	mov	r8, r3
   17244:	4605      	mov	r5, r0
   17246:	f7fd fcb5 	bl	14bb4 <bsd_platform_fd_method_table_get>
   1724a:	b160      	cbz	r0, 17266 <nrf_recv+0x2e>
   1724c:	4604      	mov	r4, r0
   1724e:	2000      	movs	r0, #0
   17250:	e9cd 0000 	strd	r0, r0, [sp]
   17254:	4643      	mov	r3, r8
   17256:	463a      	mov	r2, r7
   17258:	4631      	mov	r1, r6
   1725a:	4628      	mov	r0, r5
   1725c:	68e4      	ldr	r4, [r4, #12]
   1725e:	47a0      	blx	r4
   17260:	b002      	add	sp, #8
   17262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1726a:	e7f9      	b.n	17260 <nrf_recv+0x28>

0001726c <nrf_connect>:
   1726c:	b570      	push	{r4, r5, r6, lr}
   1726e:	460d      	mov	r5, r1
   17270:	4616      	mov	r6, r2
   17272:	4604      	mov	r4, r0
   17274:	f7fd fc9e 	bl	14bb4 <bsd_platform_fd_method_table_get>
   17278:	b130      	cbz	r0, 17288 <nrf_connect+0x1c>
   1727a:	6943      	ldr	r3, [r0, #20]
   1727c:	4632      	mov	r2, r6
   1727e:	4629      	mov	r1, r5
   17280:	4620      	mov	r0, r4
   17282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17286:	4718      	bx	r3
   17288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1728c:	bd70      	pop	{r4, r5, r6, pc}
   1728e:	bf00      	nop

00017290 <nrf_listen>:
   17290:	b570      	push	{r4, r5, r6, lr}
   17292:	460d      	mov	r5, r1
   17294:	4604      	mov	r4, r0
   17296:	f7fd fc8d 	bl	14bb4 <bsd_platform_fd_method_table_get>
   1729a:	b128      	cbz	r0, 172a8 <nrf_listen+0x18>
   1729c:	6983      	ldr	r3, [r0, #24]
   1729e:	4629      	mov	r1, r5
   172a0:	4620      	mov	r0, r4
   172a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172a6:	4718      	bx	r3
   172a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172ac:	bd70      	pop	{r4, r5, r6, pc}
   172ae:	bf00      	nop

000172b0 <nrf_accept>:
   172b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172b4:	460d      	mov	r5, r1
   172b6:	4616      	mov	r6, r2
   172b8:	4604      	mov	r4, r0
   172ba:	f7fd fc7b 	bl	14bb4 <bsd_platform_fd_method_table_get>
   172be:	b140      	cbz	r0, 172d2 <nrf_accept+0x22>
   172c0:	69c7      	ldr	r7, [r0, #28]
   172c2:	4632      	mov	r2, r6
   172c4:	4629      	mov	r1, r5
   172c6:	4620      	mov	r0, r4
   172c8:	46bc      	mov	ip, r7
   172ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   172ce:	2300      	movs	r3, #0
   172d0:	4760      	bx	ip
   172d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   172da:	bf00      	nop

000172dc <nrf_bind>:
   172dc:	b570      	push	{r4, r5, r6, lr}
   172de:	460d      	mov	r5, r1
   172e0:	4616      	mov	r6, r2
   172e2:	4604      	mov	r4, r0
   172e4:	f7fd fc66 	bl	14bb4 <bsd_platform_fd_method_table_get>
   172e8:	b130      	cbz	r0, 172f8 <nrf_bind+0x1c>
   172ea:	6903      	ldr	r3, [r0, #16]
   172ec:	4632      	mov	r2, r6
   172ee:	4629      	mov	r1, r5
   172f0:	4620      	mov	r0, r4
   172f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172f6:	4718      	bx	r3
   172f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172fc:	bd70      	pop	{r4, r5, r6, pc}
   172fe:	bf00      	nop

00017300 <nrf_setsockopt>:
   17300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17304:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17308:	460d      	mov	r5, r1
   1730a:	4616      	mov	r6, r2
   1730c:	461f      	mov	r7, r3
   1730e:	4604      	mov	r4, r0
   17310:	f7fd fc50 	bl	14bb4 <bsd_platform_fd_method_table_get>
   17314:	b158      	cbz	r0, 1732e <nrf_setsockopt+0x2e>
   17316:	f8cd 8018 	str.w	r8, [sp, #24]
   1731a:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1731e:	463b      	mov	r3, r7
   17320:	4632      	mov	r2, r6
   17322:	4629      	mov	r1, r5
   17324:	4620      	mov	r0, r4
   17326:	46f4      	mov	ip, lr
   17328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1732c:	4760      	bx	ip
   1732e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17336:	bf00      	nop

00017338 <nrf_getsockopt>:
   17338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1733c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17340:	460d      	mov	r5, r1
   17342:	4616      	mov	r6, r2
   17344:	461f      	mov	r7, r3
   17346:	4604      	mov	r4, r0
   17348:	f7fd fc34 	bl	14bb4 <bsd_platform_fd_method_table_get>
   1734c:	b158      	cbz	r0, 17366 <nrf_getsockopt+0x2e>
   1734e:	f8cd 8018 	str.w	r8, [sp, #24]
   17352:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   17356:	463b      	mov	r3, r7
   17358:	4632      	mov	r2, r6
   1735a:	4629      	mov	r1, r5
   1735c:	4620      	mov	r0, r4
   1735e:	46f4      	mov	ip, lr
   17360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17364:	4760      	bx	ip
   17366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1736a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1736e:	bf00      	nop

00017370 <nrf_getaddrinfo>:
   17370:	f7fd bc90 	b.w	14c94 <bsd_platform_getaddrinfo>

00017374 <nrf_freeaddrinfo>:
   17374:	f7fd bc90 	b.w	14c98 <bsd_platform_freeaddrinfo>

00017378 <nrf_poll>:
   17378:	f7fd bc90 	b.w	14c9c <bsd_platform_poll>

0001737c <nrf_fcntl>:
   1737c:	f7fd bce8 	b.w	14d50 <bsd_platform_fcntl>

00017380 <at_client_evt_handler>:
   17380:	b120      	cbz	r0, 1738c <at_client_evt_handler+0xc>
   17382:	f850 1b08 	ldr.w	r1, [r0], #8
   17386:	0c09      	lsrs	r1, r1, #16
   17388:	f7fb bf4a 	b.w	13220 <rpc_at_event_handler>
   1738c:	4770      	bx	lr
   1738e:	bf00      	nop

00017390 <rpc_at_client_init>:
   17390:	4801      	ldr	r0, [pc, #4]	; (17398 <rpc_at_client_init+0x8>)
   17392:	f001 bdcf 	b.w	18f34 <rpc_client_register>
   17396:	bf00      	nop
   17398:	0001f81c 	.word	0x0001f81c

0001739c <rpc_at_client_request_alloc>:
   1739c:	b180      	cbz	r0, 173c0 <rpc_at_client_request_alloc+0x24>
   1739e:	2300      	movs	r3, #0
   173a0:	b510      	push	{r4, lr}
   173a2:	b082      	sub	sp, #8
   173a4:	aa02      	add	r2, sp, #8
   173a6:	4604      	mov	r4, r0
   173a8:	f842 3d04 	str.w	r3, [r2, #-4]!
   173ac:	2003      	movs	r0, #3
   173ae:	f001 fff9 	bl	193a4 <rpc_message_alloc>
   173b2:	b918      	cbnz	r0, 173bc <rpc_at_client_request_alloc+0x20>
   173b4:	9b01      	ldr	r3, [sp, #4]
   173b6:	b10b      	cbz	r3, 173bc <rpc_at_client_request_alloc+0x20>
   173b8:	3308      	adds	r3, #8
   173ba:	6023      	str	r3, [r4, #0]
   173bc:	b002      	add	sp, #8
   173be:	bd10      	pop	{r4, pc}
   173c0:	200e      	movs	r0, #14
   173c2:	4770      	bx	lr

000173c4 <rpc_at_client_request_send>:
   173c4:	b150      	cbz	r0, 173dc <rpc_at_client_request_send+0x18>
   173c6:	4603      	mov	r3, r0
   173c8:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   173cc:	2003      	movs	r0, #3
   173ce:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   173d2:	f843 1d08 	str.w	r1, [r3, #-8]!
   173d6:	4619      	mov	r1, r3
   173d8:	f001 bfcc 	b.w	19374 <rpc_message_send>
   173dc:	200e      	movs	r0, #14
   173de:	4770      	bx	lr

000173e0 <rpc_at_client_message_free>:
   173e0:	b120      	cbz	r0, 173ec <rpc_at_client_message_free+0xc>
   173e2:	f1a0 0108 	sub.w	r1, r0, #8
   173e6:	2003      	movs	r0, #3
   173e8:	f002 b80e 	b.w	19408 <rpc_message_free>
   173ec:	200e      	movs	r0, #14
   173ee:	4770      	bx	lr

000173f0 <rpc_at_client_data_free>:
   173f0:	b118      	cbz	r0, 173fa <rpc_at_client_data_free+0xa>
   173f2:	4601      	mov	r1, r0
   173f4:	2003      	movs	r0, #3
   173f6:	f002 b919 	b.w	1962c <rpc_message_data_free>
   173fa:	200e      	movs	r0, #14
   173fc:	4770      	bx	lr
   173fe:	bf00      	nop

00017400 <ip_recvd_packet_free_cb>:
   17400:	b510      	push	{r4, lr}
   17402:	4604      	mov	r4, r0
   17404:	6800      	ldr	r0, [r0, #0]
   17406:	f7fc fbc9 	bl	13b9c <rpc_ip_client_data_free>
   1740a:	68a0      	ldr	r0, [r4, #8]
   1740c:	b118      	cbz	r0, 17416 <ip_recvd_packet_free_cb+0x16>
   1740e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17412:	f7fc bb63 	b.w	13adc <nrf_free>
   17416:	bd10      	pop	{r4, pc}

00017418 <rpc_error_to_nrf_bsd_error>:
   17418:	2810      	cmp	r0, #16
   1741a:	bf9a      	itte	ls
   1741c:	4b02      	ldrls	r3, [pc, #8]	; (17428 <rpc_error_to_nrf_bsd_error+0x10>)
   1741e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   17422:	202d      	movhi	r0, #45	; 0x2d
   17424:	4770      	bx	lr
   17426:	bf00      	nop
   17428:	0001f82c 	.word	0x0001f82c

0001742c <ip_interface_request_create>:
   1742c:	b570      	push	{r4, r5, r6, lr}
   1742e:	2500      	movs	r5, #0
   17430:	b082      	sub	sp, #8
   17432:	ac02      	add	r4, sp, #8
   17434:	f844 5d04 	str.w	r5, [r4, #-4]!
   17438:	4606      	mov	r6, r0
   1743a:	460d      	mov	r5, r1
   1743c:	4620      	mov	r0, r4
   1743e:	4619      	mov	r1, r3
   17440:	4614      	mov	r4, r2
   17442:	f7fc fb79 	bl	13b38 <rpc_ip_client_request_alloc>
   17446:	b960      	cbnz	r0, 17462 <ip_interface_request_create+0x36>
   17448:	9b01      	ldr	r3, [sp, #4]
   1744a:	2208      	movs	r2, #8
   1744c:	7258      	strb	r0, [r3, #9]
   1744e:	7298      	strb	r0, [r3, #10]
   17450:	72d8      	strb	r0, [r3, #11]
   17452:	4618      	mov	r0, r3
   17454:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   17458:	60dc      	str	r4, [r3, #12]
   1745a:	611d      	str	r5, [r3, #16]
   1745c:	721a      	strb	r2, [r3, #8]
   1745e:	b002      	add	sp, #8
   17460:	bd70      	pop	{r4, r5, r6, pc}
   17462:	9b01      	ldr	r3, [sp, #4]
   17464:	4618      	mov	r0, r3
   17466:	b002      	add	sp, #8
   17468:	bd70      	pop	{r4, r5, r6, pc}
   1746a:	bf00      	nop

0001746c <ip_interface_request_send>:
   1746c:	b570      	push	{r4, r5, r6, lr}
   1746e:	460c      	mov	r4, r1
   17470:	4605      	mov	r5, r0
   17472:	4611      	mov	r1, r2
   17474:	4620      	mov	r0, r4
   17476:	461e      	mov	r6, r3
   17478:	f7fc fb72 	bl	13b60 <rpc_ip_client_request_send>
   1747c:	b900      	cbnz	r0, 17480 <ip_interface_request_send+0x14>
   1747e:	bd70      	pop	{r4, r5, r6, pc}
   17480:	6820      	ldr	r0, [r4, #0]
   17482:	b108      	cbz	r0, 17488 <ip_interface_request_send+0x1c>
   17484:	f7fc fb8a 	bl	13b9c <rpc_ip_client_data_free>
   17488:	4620      	mov	r0, r4
   1748a:	f7fc fb7f 	bl	13b8c <rpc_ip_client_message_free>
   1748e:	602e      	str	r6, [r5, #0]
   17490:	2023      	movs	r0, #35	; 0x23
   17492:	bd70      	pop	{r4, r5, r6, pc}

00017494 <ip_interface_wait>:
   17494:	b538      	push	{r3, r4, r5, lr}
   17496:	4605      	mov	r5, r0
   17498:	f001 fb82 	bl	18ba0 <interface_socket_wait>
   1749c:	4604      	mov	r4, r0
   1749e:	b108      	cbz	r0, 174a4 <ip_interface_wait+0x10>
   174a0:	4620      	mov	r0, r4
   174a2:	bd38      	pop	{r3, r4, r5, pc}
   174a4:	4628      	mov	r0, r5
   174a6:	f001 fbe7 	bl	18c78 <interface_socket_from_handle_get>
   174aa:	2800      	cmp	r0, #0
   174ac:	d0f8      	beq.n	174a0 <ip_interface_wait+0xc>
   174ae:	6844      	ldr	r4, [r0, #4]
   174b0:	2c00      	cmp	r4, #0
   174b2:	d0f5      	beq.n	174a0 <ip_interface_wait+0xc>
   174b4:	2300      	movs	r3, #0
   174b6:	6043      	str	r3, [r0, #4]
   174b8:	4620      	mov	r0, r4
   174ba:	bd38      	pop	{r3, r4, r5, pc}

000174bc <ip_interface_init>:
   174bc:	b538      	push	{r3, r4, r5, lr}
   174be:	2300      	movs	r3, #0
   174c0:	4d07      	ldr	r5, [pc, #28]	; (174e0 <ip_interface_init+0x24>)
   174c2:	4c08      	ldr	r4, [pc, #32]	; (174e4 <ip_interface_init+0x28>)
   174c4:	4619      	mov	r1, r3
   174c6:	2220      	movs	r2, #32
   174c8:	4807      	ldr	r0, [pc, #28]	; (174e8 <ip_interface_init+0x2c>)
   174ca:	602b      	str	r3, [r5, #0]
   174cc:	6023      	str	r3, [r4, #0]
   174ce:	f006 f8c8 	bl	1d662 <memset>
   174d2:	f7fc fb2b 	bl	13b2c <rpc_ip_client_init>
   174d6:	3000      	adds	r0, #0
   174d8:	bf18      	it	ne
   174da:	2001      	movne	r0, #1
   174dc:	4240      	negs	r0, r0
   174de:	bd38      	pop	{r3, r4, r5, pc}
   174e0:	20020954 	.word	0x20020954
   174e4:	20020950 	.word	0x20020950
   174e8:	2002095c 	.word	0x2002095c

000174ec <ip_interface_open>:
   174ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174f0:	4606      	mov	r6, r0
   174f2:	2000      	movs	r0, #0
   174f4:	f026 0308 	bic.w	r3, r6, #8
   174f8:	b082      	sub	sp, #8
   174fa:	2b02      	cmp	r3, #2
   174fc:	460c      	mov	r4, r1
   174fe:	4617      	mov	r7, r2
   17500:	9000      	str	r0, [sp, #0]
   17502:	d002      	beq.n	1750a <ip_interface_open+0x1e>
   17504:	2e05      	cmp	r6, #5
   17506:	f040 8084 	bne.w	17612 <ip_interface_open+0x126>
   1750a:	1e63      	subs	r3, r4, #1
   1750c:	2b02      	cmp	r3, #2
   1750e:	d85c      	bhi.n	175ca <ip_interface_open+0xde>
   17510:	2f00      	cmp	r7, #0
   17512:	d154      	bne.n	175be <ip_interface_open+0xd2>
   17514:	2c01      	cmp	r4, #1
   17516:	d067      	beq.n	175e8 <ip_interface_open+0xfc>
   17518:	2c03      	cmp	r4, #3
   1751a:	bf18      	it	ne
   1751c:	2702      	movne	r7, #2
   1751e:	4a48      	ldr	r2, [pc, #288]	; (17640 <ip_interface_open+0x154>)
   17520:	4621      	mov	r1, r4
   17522:	4668      	mov	r0, sp
   17524:	f001 fa98 	bl	18a58 <interface_socket_allocate>
   17528:	9b00      	ldr	r3, [sp, #0]
   1752a:	4680      	mov	r8, r0
   1752c:	2b00      	cmp	r3, #0
   1752e:	d059      	beq.n	175e4 <ip_interface_open+0xf8>
   17530:	2100      	movs	r1, #0
   17532:	a802      	add	r0, sp, #8
   17534:	f840 1d04 	str.w	r1, [r0, #-4]!
   17538:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1753c:	615f      	str	r7, [r3, #20]
   1753e:	f7fc fafb 	bl	13b38 <rpc_ip_client_request_alloc>
   17542:	2800      	cmp	r0, #0
   17544:	d14b      	bne.n	175de <ip_interface_open+0xf2>
   17546:	f247 0201 	movw	r2, #28673	; 0x7001
   1754a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1754e:	2108      	movs	r1, #8
   17550:	9d01      	ldr	r5, [sp, #4]
   17552:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   17556:	60ea      	str	r2, [r5, #12]
   17558:	7268      	strb	r0, [r5, #9]
   1755a:	72a8      	strb	r0, [r5, #10]
   1755c:	72e8      	strb	r0, [r5, #11]
   1755e:	7229      	strb	r1, [r5, #8]
   17560:	742b      	strb	r3, [r5, #16]
   17562:	746b      	strb	r3, [r5, #17]
   17564:	74ab      	strb	r3, [r5, #18]
   17566:	74eb      	strb	r3, [r5, #19]
   17568:	68ab      	ldr	r3, [r5, #8]
   1756a:	2e05      	cmp	r6, #5
   1756c:	f103 030c 	add.w	r3, r3, #12
   17570:	60ab      	str	r3, [r5, #8]
   17572:	d003      	beq.n	1757c <ip_interface_open+0x90>
   17574:	2e0a      	cmp	r6, #10
   17576:	bf14      	ite	ne
   17578:	2601      	movne	r6, #1
   1757a:	2602      	moveq	r6, #2
   1757c:	616e      	str	r6, [r5, #20]
   1757e:	61ef      	str	r7, [r5, #28]
   17580:	61ac      	str	r4, [r5, #24]
   17582:	f247 0101 	movw	r1, #28673	; 0x7001
   17586:	4628      	mov	r0, r5
   17588:	9f00      	ldr	r7, [sp, #0]
   1758a:	f7fc fae9 	bl	13b60 <rpc_ip_client_request_send>
   1758e:	4606      	mov	r6, r0
   17590:	b360      	cbz	r0, 175ec <ip_interface_open+0x100>
   17592:	6828      	ldr	r0, [r5, #0]
   17594:	b108      	cbz	r0, 1759a <ip_interface_open+0xae>
   17596:	f7fc fb01 	bl	13b9c <rpc_ip_client_data_free>
   1759a:	4628      	mov	r0, r5
   1759c:	f7fc faf6 	bl	13b8c <rpc_ip_client_message_free>
   175a0:	2301      	movs	r3, #1
   175a2:	2523      	movs	r5, #35	; 0x23
   175a4:	603b      	str	r3, [r7, #0]
   175a6:	4640      	mov	r0, r8
   175a8:	f001 faac 	bl	18b04 <interface_socket_free>
   175ac:	4628      	mov	r0, r5
   175ae:	f7fa f9e5 	bl	1197c <bsd_os_errno_set>
   175b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   175b6:	4640      	mov	r0, r8
   175b8:	b002      	add	sp, #8
   175ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   175be:	2c01      	cmp	r4, #1
   175c0:	d009      	beq.n	175d6 <ip_interface_open+0xea>
   175c2:	2c02      	cmp	r4, #2
   175c4:	d109      	bne.n	175da <ip_interface_open+0xee>
   175c6:	2f02      	cmp	r7, #2
   175c8:	d0a9      	beq.n	1751e <ip_interface_open+0x32>
   175ca:	2016      	movs	r0, #22
   175cc:	f7fa f9d6 	bl	1197c <bsd_os_errno_set>
   175d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   175d4:	e7ef      	b.n	175b6 <ip_interface_open+0xca>
   175d6:	2f01      	cmp	r7, #1
   175d8:	d1f7      	bne.n	175ca <ip_interface_open+0xde>
   175da:	2702      	movs	r7, #2
   175dc:	e79f      	b.n	1751e <ip_interface_open+0x32>
   175de:	9d01      	ldr	r5, [sp, #4]
   175e0:	2d00      	cmp	r5, #0
   175e2:	d1c1      	bne.n	17568 <ip_interface_open+0x7c>
   175e4:	250c      	movs	r5, #12
   175e6:	e7de      	b.n	175a6 <ip_interface_open+0xba>
   175e8:	4627      	mov	r7, r4
   175ea:	e798      	b.n	1751e <ip_interface_open+0x32>
   175ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   175f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   175f4:	2102      	movs	r1, #2
   175f6:	4640      	mov	r0, r8
   175f8:	f001 fad2 	bl	18ba0 <interface_socket_wait>
   175fc:	4605      	mov	r5, r0
   175fe:	2800      	cmp	r0, #0
   17600:	d1d1      	bne.n	175a6 <ip_interface_open+0xba>
   17602:	4640      	mov	r0, r8
   17604:	f001 fb38 	bl	18c78 <interface_socket_from_handle_get>
   17608:	b148      	cbz	r0, 1761e <ip_interface_open+0x132>
   1760a:	6845      	ldr	r5, [r0, #4]
   1760c:	b13d      	cbz	r5, 1761e <ip_interface_open+0x132>
   1760e:	6046      	str	r6, [r0, #4]
   17610:	e7c9      	b.n	175a6 <ip_interface_open+0xba>
   17612:	202f      	movs	r0, #47	; 0x2f
   17614:	f7fa f9b2 	bl	1197c <bsd_os_errno_set>
   17618:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1761c:	e7cb      	b.n	175b6 <ip_interface_open+0xca>
   1761e:	3c02      	subs	r4, #2
   17620:	2c01      	cmp	r4, #1
   17622:	d8c8      	bhi.n	175b6 <ip_interface_open+0xca>
   17624:	4640      	mov	r0, r8
   17626:	9b00      	ldr	r3, [sp, #0]
   17628:	681a      	ldr	r2, [r3, #0]
   1762a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1762e:	601a      	str	r2, [r3, #0]
   17630:	681a      	ldr	r2, [r3, #0]
   17632:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   17636:	601a      	str	r2, [r3, #0]
   17638:	b002      	add	sp, #8
   1763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1763e:	bf00      	nop
   17640:	00017401 	.word	0x00017401

00017644 <ip_interface_close>:
   17644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17648:	b082      	sub	sp, #8
   1764a:	4606      	mov	r6, r0
   1764c:	f001 fb14 	bl	18c78 <interface_socket_from_handle_get>
   17650:	2800      	cmp	r0, #0
   17652:	d063      	beq.n	1771c <ip_interface_close+0xd8>
   17654:	4604      	mov	r4, r0
   17656:	2100      	movs	r1, #0
   17658:	a802      	add	r0, sp, #8
   1765a:	6827      	ldr	r7, [r4, #0]
   1765c:	f840 1d04 	str.w	r1, [r0, #-4]!
   17660:	f8d4 8018 	ldr.w	r8, [r4, #24]
   17664:	f7fc fa68 	bl	13b38 <rpc_ip_client_request_alloc>
   17668:	2800      	cmp	r0, #0
   1766a:	d13a      	bne.n	176e2 <ip_interface_close+0x9e>
   1766c:	f247 0309 	movw	r3, #28681	; 0x7009
   17670:	2208      	movs	r2, #8
   17672:	9d01      	ldr	r5, [sp, #4]
   17674:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17678:	60eb      	str	r3, [r5, #12]
   1767a:	f8c5 8010 	str.w	r8, [r5, #16]
   1767e:	7268      	strb	r0, [r5, #9]
   17680:	72a8      	strb	r0, [r5, #10]
   17682:	72e8      	strb	r0, [r5, #11]
   17684:	722a      	strb	r2, [r5, #8]
   17686:	6823      	ldr	r3, [r4, #0]
   17688:	f247 0109 	movw	r1, #28681	; 0x7009
   1768c:	0c1b      	lsrs	r3, r3, #16
   1768e:	041b      	lsls	r3, r3, #16
   17690:	f043 030d 	orr.w	r3, r3, #13
   17694:	6023      	str	r3, [r4, #0]
   17696:	6823      	ldr	r3, [r4, #0]
   17698:	4628      	mov	r0, r5
   1769a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1769e:	6023      	str	r3, [r4, #0]
   176a0:	6823      	ldr	r3, [r4, #0]
   176a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   176a6:	6023      	str	r3, [r4, #0]
   176a8:	f7fc fa5a 	bl	13b60 <rpc_ip_client_request_send>
   176ac:	bb40      	cbnz	r0, 17700 <ip_interface_close+0xbc>
   176ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   176b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   176b6:	210e      	movs	r1, #14
   176b8:	4630      	mov	r0, r6
   176ba:	f001 fa71 	bl	18ba0 <interface_socket_wait>
   176be:	4604      	mov	r4, r0
   176c0:	b1a0      	cbz	r0, 176ec <ip_interface_close+0xa8>
   176c2:	4c17      	ldr	r4, [pc, #92]	; (17720 <ip_interface_close+0xdc>)
   176c4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   176c8:	b120      	cbz	r0, 176d4 <ip_interface_close+0x90>
   176ca:	f7fc fa5f 	bl	13b8c <rpc_ip_client_message_free>
   176ce:	2300      	movs	r3, #0
   176d0:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   176d4:	4630      	mov	r0, r6
   176d6:	f001 fa15 	bl	18b04 <interface_socket_free>
   176da:	2000      	movs	r0, #0
   176dc:	b002      	add	sp, #8
   176de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176e2:	9d01      	ldr	r5, [sp, #4]
   176e4:	200c      	movs	r0, #12
   176e6:	2d00      	cmp	r5, #0
   176e8:	d1cd      	bne.n	17686 <ip_interface_close+0x42>
   176ea:	e012      	b.n	17712 <ip_interface_close+0xce>
   176ec:	4630      	mov	r0, r6
   176ee:	f001 fac3 	bl	18c78 <interface_socket_from_handle_get>
   176f2:	2800      	cmp	r0, #0
   176f4:	d0e5      	beq.n	176c2 <ip_interface_close+0x7e>
   176f6:	6843      	ldr	r3, [r0, #4]
   176f8:	2b00      	cmp	r3, #0
   176fa:	d0e2      	beq.n	176c2 <ip_interface_close+0x7e>
   176fc:	6044      	str	r4, [r0, #4]
   176fe:	e7e0      	b.n	176c2 <ip_interface_close+0x7e>
   17700:	6828      	ldr	r0, [r5, #0]
   17702:	b108      	cbz	r0, 17708 <ip_interface_close+0xc4>
   17704:	f7fc fa4a 	bl	13b9c <rpc_ip_client_data_free>
   17708:	4628      	mov	r0, r5
   1770a:	f7fc fa3f 	bl	13b8c <rpc_ip_client_message_free>
   1770e:	2023      	movs	r0, #35	; 0x23
   17710:	6027      	str	r7, [r4, #0]
   17712:	f7fa f933 	bl	1197c <bsd_os_errno_set>
   17716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1771a:	e7df      	b.n	176dc <ip_interface_close+0x98>
   1771c:	2009      	movs	r0, #9
   1771e:	e7f8      	b.n	17712 <ip_interface_close+0xce>
   17720:	2002095c 	.word	0x2002095c

00017724 <ip_interface_sendto>:
   17724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17728:	2500      	movs	r5, #0
   1772a:	b089      	sub	sp, #36	; 0x24
   1772c:	9103      	str	r1, [sp, #12]
   1772e:	4614      	mov	r4, r2
   17730:	9301      	str	r3, [sp, #4]
   17732:	9507      	str	r5, [sp, #28]
   17734:	4607      	mov	r7, r0
   17736:	9e12      	ldr	r6, [sp, #72]	; 0x48
   17738:	f001 fa9e 	bl	18c78 <interface_socket_from_handle_get>
   1773c:	2800      	cmp	r0, #0
   1773e:	f000 8124 	beq.w	1798a <ip_interface_sendto+0x266>
   17742:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   17746:	f300 8118 	bgt.w	1797a <ip_interface_sendto+0x256>
   1774a:	6903      	ldr	r3, [r0, #16]
   1774c:	4605      	mov	r5, r0
   1774e:	2b01      	cmp	r3, #1
   17750:	f000 80d1 	beq.w	178f6 <ip_interface_sendto+0x1d2>
   17754:	682a      	ldr	r2, [r5, #0]
   17756:	0390      	lsls	r0, r2, #14
   17758:	d423      	bmi.n	177a2 <ip_interface_sendto+0x7e>
   1775a:	682a      	ldr	r2, [r5, #0]
   1775c:	0091      	lsls	r1, r2, #2
   1775e:	d406      	bmi.n	1776e <ip_interface_sendto+0x4a>
   17760:	2b01      	cmp	r3, #1
   17762:	f000 80ed 	beq.w	17940 <ip_interface_sendto+0x21c>
   17766:	682b      	ldr	r3, [r5, #0]
   17768:	031a      	lsls	r2, r3, #12
   1776a:	f140 8102 	bpl.w	17972 <ip_interface_sendto+0x24e>
   1776e:	682b      	ldr	r3, [r5, #0]
   17770:	031b      	lsls	r3, r3, #12
   17772:	f140 8106 	bpl.w	17982 <ip_interface_sendto+0x25e>
   17776:	68a8      	ldr	r0, [r5, #8]
   17778:	f8df 9218 	ldr.w	r9, [pc, #536]	; 17994 <ip_interface_sendto+0x270>
   1777c:	2800      	cmp	r0, #0
   1777e:	f040 8096 	bne.w	178ae <ip_interface_sendto+0x18a>
   17782:	682b      	ldr	r3, [r5, #0]
   17784:	0118      	lsls	r0, r3, #4
   17786:	f140 8082 	bpl.w	1788e <ip_interface_sendto+0x16a>
   1778a:	682b      	ldr	r3, [r5, #0]
   1778c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   17790:	602b      	str	r3, [r5, #0]
   17792:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   17796:	2800      	cmp	r0, #0
   17798:	d17c      	bne.n	17894 <ip_interface_sendto+0x170>
   1779a:	4620      	mov	r0, r4
   1779c:	b009      	add	sp, #36	; 0x24
   1779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177a2:	f247 0806 	movw	r8, #28678	; 0x7006
   177a6:	f04f 0a0c 	mov.w	sl, #12
   177aa:	043b      	lsls	r3, r7, #16
   177ac:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 17994 <ip_interface_sendto+0x270>
   177b0:	9304      	str	r3, [sp, #16]
   177b2:	4621      	mov	r1, r4
   177b4:	a807      	add	r0, sp, #28
   177b6:	f7fc f9bf 	bl	13b38 <rpc_ip_client_request_alloc>
   177ba:	2804      	cmp	r0, #4
   177bc:	d0f9      	beq.n	177b2 <ip_interface_sendto+0x8e>
   177be:	2800      	cmp	r0, #0
   177c0:	d171      	bne.n	178a6 <ip_interface_sendto+0x182>
   177c2:	9b07      	ldr	r3, [sp, #28]
   177c4:	f883 a008 	strb.w	sl, [r3, #8]
   177c8:	7258      	strb	r0, [r3, #9]
   177ca:	7298      	strb	r0, [r3, #10]
   177cc:	72d8      	strb	r0, [r3, #11]
   177ce:	b33e      	cbz	r6, 17820 <ip_interface_sendto+0xfc>
   177d0:	68ea      	ldr	r2, [r5, #12]
   177d2:	6871      	ldr	r1, [r6, #4]
   177d4:	428a      	cmp	r2, r1
   177d6:	d10a      	bne.n	177ee <ip_interface_sendto+0xca>
   177d8:	2a02      	cmp	r2, #2
   177da:	f103 001c 	add.w	r0, r3, #28
   177de:	7831      	ldrb	r1, [r6, #0]
   177e0:	f000 8090 	beq.w	17904 <ip_interface_sendto+0x1e0>
   177e4:	2a0a      	cmp	r2, #10
   177e6:	d102      	bne.n	177ee <ip_interface_sendto+0xca>
   177e8:	2924      	cmp	r1, #36	; 0x24
   177ea:	f000 80af 	beq.w	1794c <ip_interface_sendto+0x228>
   177ee:	6818      	ldr	r0, [r3, #0]
   177f0:	b110      	cbz	r0, 177f8 <ip_interface_sendto+0xd4>
   177f2:	f7fc f9d3 	bl	13b9c <rpc_ip_client_data_free>
   177f6:	9b07      	ldr	r3, [sp, #28]
   177f8:	4618      	mov	r0, r3
   177fa:	f7fc f9c7 	bl	13b8c <rpc_ip_client_message_free>
   177fe:	2016      	movs	r0, #22
   17800:	682b      	ldr	r3, [r5, #0]
   17802:	031a      	lsls	r2, r3, #12
   17804:	d453      	bmi.n	178ae <ip_interface_sendto+0x18a>
   17806:	682b      	ldr	r3, [r5, #0]
   17808:	b29b      	uxth	r3, r3
   1780a:	2b0d      	cmp	r3, #13
   1780c:	d0b6      	beq.n	1777c <ip_interface_sendto+0x58>
   1780e:	682b      	ldr	r3, [r5, #0]
   17810:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17814:	602b      	str	r3, [r5, #0]
   17816:	682b      	ldr	r3, [r5, #0]
   17818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1781c:	602b      	str	r3, [r5, #0]
   1781e:	e7ad      	b.n	1777c <ip_interface_sendto+0x58>
   17820:	4642      	mov	r2, r8
   17822:	9901      	ldr	r1, [sp, #4]
   17824:	6159      	str	r1, [r3, #20]
   17826:	69a9      	ldr	r1, [r5, #24]
   17828:	9804      	ldr	r0, [sp, #16]
   1782a:	6119      	str	r1, [r3, #16]
   1782c:	9903      	ldr	r1, [sp, #12]
   1782e:	4302      	orrs	r2, r0
   17830:	60da      	str	r2, [r3, #12]
   17832:	605c      	str	r4, [r3, #4]
   17834:	b119      	cbz	r1, 1783e <ip_interface_sendto+0x11a>
   17836:	6818      	ldr	r0, [r3, #0]
   17838:	4622      	mov	r2, r4
   1783a:	f005 fee8 	bl	1d60e <memcpy>
   1783e:	682b      	ldr	r3, [r5, #0]
   17840:	4641      	mov	r1, r8
   17842:	9305      	str	r3, [sp, #20]
   17844:	682b      	ldr	r3, [r5, #0]
   17846:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1784a:	602b      	str	r3, [r5, #0]
   1784c:	682b      	ldr	r3, [r5, #0]
   1784e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   17852:	602b      	str	r3, [r5, #0]
   17854:	9b07      	ldr	r3, [sp, #28]
   17856:	4618      	mov	r0, r3
   17858:	9302      	str	r3, [sp, #8]
   1785a:	f7fc f981 	bl	13b60 <rpc_ip_client_request_send>
   1785e:	9b02      	ldr	r3, [sp, #8]
   17860:	4683      	mov	fp, r0
   17862:	bb58      	cbnz	r0, 178bc <ip_interface_sendto+0x198>
   17864:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1786c:	4611      	mov	r1, r2
   1786e:	4638      	mov	r0, r7
   17870:	f001 f996 	bl	18ba0 <interface_socket_wait>
   17874:	b370      	cbz	r0, 178d4 <ip_interface_sendto+0x1b0>
   17876:	682b      	ldr	r3, [r5, #0]
   17878:	0319      	lsls	r1, r3, #12
   1787a:	d437      	bmi.n	178ec <ip_interface_sendto+0x1c8>
   1787c:	280c      	cmp	r0, #12
   1787e:	d1bf      	bne.n	17800 <ip_interface_sendto+0xdc>
   17880:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   17884:	2800      	cmp	r0, #0
   17886:	d094      	beq.n	177b2 <ip_interface_sendto+0x8e>
   17888:	f7fc f980 	bl	13b8c <rpc_ip_client_message_free>
   1788c:	e791      	b.n	177b2 <ip_interface_sendto+0x8e>
   1788e:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   17892:	6984      	ldr	r4, [r0, #24]
   17894:	f7fc f97a 	bl	13b8c <rpc_ip_client_message_free>
   17898:	2300      	movs	r3, #0
   1789a:	4620      	mov	r0, r4
   1789c:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   178a0:	b009      	add	sp, #36	; 0x24
   178a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178a6:	682b      	ldr	r3, [r5, #0]
   178a8:	200c      	movs	r0, #12
   178aa:	031a      	lsls	r2, r3, #12
   178ac:	d5ab      	bpl.n	17806 <ip_interface_sendto+0xe2>
   178ae:	f7fa f865 	bl	1197c <bsd_os_errno_set>
   178b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   178b6:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   178ba:	e76c      	b.n	17796 <ip_interface_sendto+0x72>
   178bc:	6818      	ldr	r0, [r3, #0]
   178be:	469b      	mov	fp, r3
   178c0:	b108      	cbz	r0, 178c6 <ip_interface_sendto+0x1a2>
   178c2:	f7fc f96b 	bl	13b9c <rpc_ip_client_data_free>
   178c6:	4658      	mov	r0, fp
   178c8:	f7fc f960 	bl	13b8c <rpc_ip_client_message_free>
   178cc:	9b05      	ldr	r3, [sp, #20]
   178ce:	2023      	movs	r0, #35	; 0x23
   178d0:	602b      	str	r3, [r5, #0]
   178d2:	e795      	b.n	17800 <ip_interface_sendto+0xdc>
   178d4:	4638      	mov	r0, r7
   178d6:	f001 f9cf 	bl	18c78 <interface_socket_from_handle_get>
   178da:	4603      	mov	r3, r0
   178dc:	b1f0      	cbz	r0, 1791c <ip_interface_sendto+0x1f8>
   178de:	6840      	ldr	r0, [r0, #4]
   178e0:	b1e0      	cbz	r0, 1791c <ip_interface_sendto+0x1f8>
   178e2:	f8c3 b004 	str.w	fp, [r3, #4]
   178e6:	682b      	ldr	r3, [r5, #0]
   178e8:	0319      	lsls	r1, r3, #12
   178ea:	d5c7      	bpl.n	1787c <ip_interface_sendto+0x158>
   178ec:	68a8      	ldr	r0, [r5, #8]
   178ee:	682b      	ldr	r3, [r5, #0]
   178f0:	031e      	lsls	r6, r3, #12
   178f2:	d588      	bpl.n	17806 <ip_interface_sendto+0xe2>
   178f4:	e742      	b.n	1777c <ip_interface_sendto+0x58>
   178f6:	2e00      	cmp	r6, #0
   178f8:	f43f af2c 	beq.w	17754 <ip_interface_sendto+0x30>
   178fc:	2016      	movs	r0, #22
   178fe:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17994 <ip_interface_sendto+0x270>
   17902:	e7d4      	b.n	178ae <ip_interface_sendto+0x18a>
   17904:	2910      	cmp	r1, #16
   17906:	f47f af72 	bne.w	177ee <ip_interface_sendto+0xca>
   1790a:	2204      	movs	r2, #4
   1790c:	8931      	ldrh	r1, [r6, #8]
   1790e:	835a      	strh	r2, [r3, #26]
   17910:	8319      	strh	r1, [r3, #24]
   17912:	f106 010c 	add.w	r1, r6, #12
   17916:	f005 fe7a 	bl	1d60e <memcpy>
   1791a:	e01e      	b.n	1795a <ip_interface_sendto+0x236>
   1791c:	682b      	ldr	r3, [r5, #0]
   1791e:	031b      	lsls	r3, r3, #12
   17920:	f53f af2f 	bmi.w	17782 <ip_interface_sendto+0x5e>
   17924:	682b      	ldr	r3, [r5, #0]
   17926:	b29b      	uxth	r3, r3
   17928:	2b0d      	cmp	r3, #13
   1792a:	f43f af2a 	beq.w	17782 <ip_interface_sendto+0x5e>
   1792e:	682b      	ldr	r3, [r5, #0]
   17930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17934:	602b      	str	r3, [r5, #0]
   17936:	682b      	ldr	r3, [r5, #0]
   17938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1793c:	602b      	str	r3, [r5, #0]
   1793e:	e720      	b.n	17782 <ip_interface_sendto+0x5e>
   17940:	682b      	ldr	r3, [r5, #0]
   17942:	b29b      	uxth	r3, r3
   17944:	2b05      	cmp	r3, #5
   17946:	f47f af12 	bne.w	1776e <ip_interface_sendto+0x4a>
   1794a:	e70c      	b.n	17766 <ip_interface_sendto+0x42>
   1794c:	2210      	movs	r2, #16
   1794e:	8931      	ldrh	r1, [r6, #8]
   17950:	835a      	strh	r2, [r3, #26]
   17952:	8319      	strh	r1, [r3, #24]
   17954:	18b1      	adds	r1, r6, r2
   17956:	f005 fe5a 	bl	1d60e <memcpy>
   1795a:	f247 0207 	movw	r2, #28679	; 0x7007
   1795e:	9b07      	ldr	r3, [sp, #28]
   17960:	4690      	mov	r8, r2
   17962:	6899      	ldr	r1, [r3, #8]
   17964:	8b58      	ldrh	r0, [r3, #26]
   17966:	3104      	adds	r1, #4
   17968:	4401      	add	r1, r0
   1796a:	9801      	ldr	r0, [sp, #4]
   1796c:	6099      	str	r1, [r3, #8]
   1796e:	6158      	str	r0, [r3, #20]
   17970:	e759      	b.n	17826 <ip_interface_sendto+0x102>
   17972:	2023      	movs	r0, #35	; 0x23
   17974:	f8df 901c 	ldr.w	r9, [pc, #28]	; 17994 <ip_interface_sendto+0x270>
   17978:	e799      	b.n	178ae <ip_interface_sendto+0x18a>
   1797a:	2028      	movs	r0, #40	; 0x28
   1797c:	f8df 9014 	ldr.w	r9, [pc, #20]	; 17994 <ip_interface_sendto+0x270>
   17980:	e795      	b.n	178ae <ip_interface_sendto+0x18a>
   17982:	2039      	movs	r0, #57	; 0x39
   17984:	f8df 900c 	ldr.w	r9, [pc, #12]	; 17994 <ip_interface_sendto+0x270>
   17988:	e791      	b.n	178ae <ip_interface_sendto+0x18a>
   1798a:	2009      	movs	r0, #9
   1798c:	f8df 9004 	ldr.w	r9, [pc, #4]	; 17994 <ip_interface_sendto+0x270>
   17990:	e78d      	b.n	178ae <ip_interface_sendto+0x18a>
   17992:	bf00      	nop
   17994:	2002095c 	.word	0x2002095c

00017998 <ip_interface_recvfrom>:
   17998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1799c:	b085      	sub	sp, #20
   1799e:	2a00      	cmp	r2, #0
   179a0:	f000 8110 	beq.w	17bc4 <ip_interface_recvfrom+0x22c>
   179a4:	468a      	mov	sl, r1
   179a6:	4699      	mov	r9, r3
   179a8:	4607      	mov	r7, r0
   179aa:	4616      	mov	r6, r2
   179ac:	f001 f964 	bl	18c78 <interface_socket_from_handle_get>
   179b0:	4604      	mov	r4, r0
   179b2:	2800      	cmp	r0, #0
   179b4:	f000 810d 	beq.w	17bd2 <ip_interface_recvfrom+0x23a>
   179b8:	6803      	ldr	r3, [r0, #0]
   179ba:	02d9      	lsls	r1, r3, #11
   179bc:	d565      	bpl.n	17a8a <ip_interface_recvfrom+0xf2>
   179be:	f019 0f02 	tst.w	r9, #2
   179c2:	bf18      	it	ne
   179c4:	f04f 0800 	movne.w	r8, #0
   179c8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   179cc:	bf08      	it	eq
   179ce:	6803      	ldreq	r3, [r0, #0]
   179d0:	f009 0510 	and.w	r5, r9, #16
   179d4:	bf04      	itt	eq
   179d6:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   179da:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   179de:	6823      	ldr	r3, [r4, #0]
   179e0:	03da      	lsls	r2, r3, #15
   179e2:	d56d      	bpl.n	17ac0 <ip_interface_recvfrom+0x128>
   179e4:	6823      	ldr	r3, [r4, #0]
   179e6:	69e0      	ldr	r0, [r4, #28]
   179e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   179ec:	6023      	str	r3, [r4, #0]
   179ee:	6803      	ldr	r3, [r0, #0]
   179f0:	68db      	ldr	r3, [r3, #12]
   179f2:	4798      	blx	r3
   179f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   179f8:	4683      	mov	fp, r0
   179fa:	f000 8081 	beq.w	17b00 <ip_interface_recvfrom+0x168>
   179fe:	4286      	cmp	r6, r0
   17a00:	dd03      	ble.n	17a0a <ip_interface_recvfrom+0x72>
   17a02:	6923      	ldr	r3, [r4, #16]
   17a04:	2b01      	cmp	r3, #1
   17a06:	f000 80a7 	beq.w	17b58 <ip_interface_recvfrom+0x1c0>
   17a0a:	2500      	movs	r5, #0
   17a0c:	69e0      	ldr	r0, [r4, #28]
   17a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17a10:	b103      	cbz	r3, 17a14 <ip_interface_recvfrom+0x7c>
   17a12:	681b      	ldr	r3, [r3, #0]
   17a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a16:	e9cd a600 	strd	sl, r6, [sp]
   17a1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17a1e:	6803      	ldr	r3, [r0, #0]
   17a20:	464a      	mov	r2, r9
   17a22:	689b      	ldr	r3, [r3, #8]
   17a24:	4669      	mov	r1, sp
   17a26:	4798      	blx	r3
   17a28:	4683      	mov	fp, r0
   17a2a:	69e0      	ldr	r0, [r4, #28]
   17a2c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   17a30:	6803      	ldr	r3, [r0, #0]
   17a32:	bf18      	it	ne
   17a34:	2601      	movne	r6, #1
   17a36:	68db      	ldr	r3, [r3, #12]
   17a38:	bf0a      	itet	eq
   17a3a:	2600      	moveq	r6, #0
   17a3c:	f04f 0800 	movne.w	r8, #0
   17a40:	f04f 0823 	moveq.w	r8, #35	; 0x23
   17a44:	4798      	blx	r3
   17a46:	3001      	adds	r0, #1
   17a48:	d135      	bne.n	17ab6 <ip_interface_recvfrom+0x11e>
   17a4a:	2d00      	cmp	r5, #0
   17a4c:	f000 80b6 	beq.w	17bbc <ip_interface_recvfrom+0x224>
   17a50:	2e00      	cmp	r6, #0
   17a52:	f000 80a6 	beq.w	17ba2 <ip_interface_recvfrom+0x20a>
   17a56:	6823      	ldr	r3, [r4, #0]
   17a58:	0319      	lsls	r1, r3, #12
   17a5a:	d506      	bpl.n	17a6a <ip_interface_recvfrom+0xd2>
   17a5c:	6823      	ldr	r3, [r4, #0]
   17a5e:	b29b      	uxth	r3, r3
   17a60:	2b0d      	cmp	r3, #13
   17a62:	d002      	beq.n	17a6a <ip_interface_recvfrom+0xd2>
   17a64:	6923      	ldr	r3, [r4, #16]
   17a66:	2b01      	cmp	r3, #1
   17a68:	d025      	beq.n	17ab6 <ip_interface_recvfrom+0x11e>
   17a6a:	6823      	ldr	r3, [r4, #0]
   17a6c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   17a70:	6823      	ldr	r3, [r4, #0]
   17a72:	f040 80b1 	bne.w	17bd8 <ip_interface_recvfrom+0x240>
   17a76:	031a      	lsls	r2, r3, #12
   17a78:	d475      	bmi.n	17b66 <ip_interface_recvfrom+0x1ce>
   17a7a:	f1b8 0f00 	cmp.w	r8, #0
   17a7e:	f040 808a 	bne.w	17b96 <ip_interface_recvfrom+0x1fe>
   17a82:	4658      	mov	r0, fp
   17a84:	b005      	add	sp, #20
   17a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a8a:	6803      	ldr	r3, [r0, #0]
   17a8c:	b29b      	uxth	r3, r3
   17a8e:	2b06      	cmp	r3, #6
   17a90:	d073      	beq.n	17b7a <ip_interface_recvfrom+0x1e2>
   17a92:	6803      	ldr	r3, [r0, #0]
   17a94:	b29b      	uxth	r3, r3
   17a96:	2b07      	cmp	r3, #7
   17a98:	bf0c      	ite	eq
   17a9a:	f04f 0809 	moveq.w	r8, #9
   17a9e:	f04f 0839 	movne.w	r8, #57	; 0x39
   17aa2:	69e0      	ldr	r0, [r4, #28]
   17aa4:	6803      	ldr	r3, [r0, #0]
   17aa6:	68db      	ldr	r3, [r3, #12]
   17aa8:	4798      	blx	r3
   17aaa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17aae:	4683      	mov	fp, r0
   17ab0:	d0db      	beq.n	17a6a <ip_interface_recvfrom+0xd2>
   17ab2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17ab6:	6823      	ldr	r3, [r4, #0]
   17ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17abc:	6023      	str	r3, [r4, #0]
   17abe:	e7dc      	b.n	17a7a <ip_interface_recvfrom+0xe2>
   17ac0:	f1b8 0f00 	cmp.w	r8, #0
   17ac4:	f000 8081 	beq.w	17bca <ip_interface_recvfrom+0x232>
   17ac8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17acc:	6a23      	ldr	r3, [r4, #32]
   17ace:	4611      	mov	r1, r2
   17ad0:	2b00      	cmp	r3, #0
   17ad2:	bf08      	it	eq
   17ad4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17ad8:	4638      	mov	r0, r7
   17ada:	f001 f861 	bl	18ba0 <interface_socket_wait>
   17ade:	4680      	mov	r8, r0
   17ae0:	b358      	cbz	r0, 17b3a <ip_interface_recvfrom+0x1a2>
   17ae2:	6823      	ldr	r3, [r4, #0]
   17ae4:	69e0      	ldr	r0, [r4, #28]
   17ae6:	031b      	lsls	r3, r3, #12
   17ae8:	d521      	bpl.n	17b2e <ip_interface_recvfrom+0x196>
   17aea:	6823      	ldr	r3, [r4, #0]
   17aec:	b29b      	uxth	r3, r3
   17aee:	2b0d      	cmp	r3, #13
   17af0:	d01d      	beq.n	17b2e <ip_interface_recvfrom+0x196>
   17af2:	6925      	ldr	r5, [r4, #16]
   17af4:	f1a5 0501 	sub.w	r5, r5, #1
   17af8:	fab5 f585 	clz	r5, r5
   17afc:	096d      	lsrs	r5, r5, #5
   17afe:	e786      	b.n	17a0e <ip_interface_recvfrom+0x76>
   17b00:	6823      	ldr	r3, [r4, #0]
   17b02:	0318      	lsls	r0, r3, #12
   17b04:	d5dc      	bpl.n	17ac0 <ip_interface_recvfrom+0x128>
   17b06:	6823      	ldr	r3, [r4, #0]
   17b08:	b29b      	uxth	r3, r3
   17b0a:	2b0d      	cmp	r3, #13
   17b0c:	d0d8      	beq.n	17ac0 <ip_interface_recvfrom+0x128>
   17b0e:	6923      	ldr	r3, [r4, #16]
   17b10:	69e0      	ldr	r0, [r4, #28]
   17b12:	2b01      	cmp	r3, #1
   17b14:	d034      	beq.n	17b80 <ip_interface_recvfrom+0x1e8>
   17b16:	f04f 0839 	mov.w	r8, #57	; 0x39
   17b1a:	6823      	ldr	r3, [r4, #0]
   17b1c:	0c1b      	lsrs	r3, r3, #16
   17b1e:	041b      	lsls	r3, r3, #16
   17b20:	f043 030d 	orr.w	r3, r3, #13
   17b24:	6023      	str	r3, [r4, #0]
   17b26:	6823      	ldr	r3, [r4, #0]
   17b28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17b2c:	6023      	str	r3, [r4, #0]
   17b2e:	6803      	ldr	r3, [r0, #0]
   17b30:	68db      	ldr	r3, [r3, #12]
   17b32:	4798      	blx	r3
   17b34:	3001      	adds	r0, #1
   17b36:	d1be      	bne.n	17ab6 <ip_interface_recvfrom+0x11e>
   17b38:	e797      	b.n	17a6a <ip_interface_recvfrom+0xd2>
   17b3a:	4638      	mov	r0, r7
   17b3c:	f001 f89c 	bl	18c78 <interface_socket_from_handle_get>
   17b40:	b138      	cbz	r0, 17b52 <ip_interface_recvfrom+0x1ba>
   17b42:	f8d0 8004 	ldr.w	r8, [r0, #4]
   17b46:	f1b8 0f00 	cmp.w	r8, #0
   17b4a:	d002      	beq.n	17b52 <ip_interface_recvfrom+0x1ba>
   17b4c:	2300      	movs	r3, #0
   17b4e:	6043      	str	r3, [r0, #4]
   17b50:	e7c7      	b.n	17ae2 <ip_interface_recvfrom+0x14a>
   17b52:	f04f 0801 	mov.w	r8, #1
   17b56:	e742      	b.n	179de <ip_interface_recvfrom+0x46>
   17b58:	b11d      	cbz	r5, 17b62 <ip_interface_recvfrom+0x1ca>
   17b5a:	6823      	ldr	r3, [r4, #0]
   17b5c:	00db      	lsls	r3, r3, #3
   17b5e:	d5b3      	bpl.n	17ac8 <ip_interface_recvfrom+0x130>
   17b60:	e753      	b.n	17a0a <ip_interface_recvfrom+0x72>
   17b62:	69e0      	ldr	r0, [r4, #28]
   17b64:	e753      	b.n	17a0e <ip_interface_recvfrom+0x76>
   17b66:	6823      	ldr	r3, [r4, #0]
   17b68:	b29b      	uxth	r3, r3
   17b6a:	2b0d      	cmp	r3, #13
   17b6c:	d185      	bne.n	17a7a <ip_interface_recvfrom+0xe2>
   17b6e:	68a3      	ldr	r3, [r4, #8]
   17b70:	2b00      	cmp	r3, #0
   17b72:	d082      	beq.n	17a7a <ip_interface_recvfrom+0xe2>
   17b74:	f8d4 8008 	ldr.w	r8, [r4, #8]
   17b78:	e77f      	b.n	17a7a <ip_interface_recvfrom+0xe2>
   17b7a:	f04f 0809 	mov.w	r8, #9
   17b7e:	e790      	b.n	17aa2 <ip_interface_recvfrom+0x10a>
   17b80:	6803      	ldr	r3, [r0, #0]
   17b82:	68db      	ldr	r3, [r3, #12]
   17b84:	4798      	blx	r3
   17b86:	3001      	adds	r0, #1
   17b88:	d00b      	beq.n	17ba2 <ip_interface_recvfrom+0x20a>
   17b8a:	f04f 0823 	mov.w	r8, #35	; 0x23
   17b8e:	6823      	ldr	r3, [r4, #0]
   17b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17b94:	6023      	str	r3, [r4, #0]
   17b96:	4640      	mov	r0, r8
   17b98:	f7f9 fef0 	bl	1197c <bsd_os_errno_set>
   17b9c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17ba0:	e76f      	b.n	17a82 <ip_interface_recvfrom+0xea>
   17ba2:	6823      	ldr	r3, [r4, #0]
   17ba4:	f04f 0b00 	mov.w	fp, #0
   17ba8:	0c1b      	lsrs	r3, r3, #16
   17baa:	041b      	lsls	r3, r3, #16
   17bac:	f043 030d 	orr.w	r3, r3, #13
   17bb0:	6023      	str	r3, [r4, #0]
   17bb2:	6823      	ldr	r3, [r4, #0]
   17bb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17bb8:	6023      	str	r3, [r4, #0]
   17bba:	e762      	b.n	17a82 <ip_interface_recvfrom+0xea>
   17bbc:	2e00      	cmp	r6, #0
   17bbe:	f47f af4a 	bne.w	17a56 <ip_interface_recvfrom+0xbe>
   17bc2:	e752      	b.n	17a6a <ip_interface_recvfrom+0xd2>
   17bc4:	f04f 0816 	mov.w	r8, #22
   17bc8:	e7e5      	b.n	17b96 <ip_interface_recvfrom+0x1fe>
   17bca:	f04f 0823 	mov.w	r8, #35	; 0x23
   17bce:	69e0      	ldr	r0, [r4, #28]
   17bd0:	e7ad      	b.n	17b2e <ip_interface_recvfrom+0x196>
   17bd2:	f04f 0809 	mov.w	r8, #9
   17bd6:	e7de      	b.n	17b96 <ip_interface_recvfrom+0x1fe>
   17bd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   17bdc:	6023      	str	r3, [r4, #0]
   17bde:	6823      	ldr	r3, [r4, #0]
   17be0:	f04f 0869 	mov.w	r8, #105	; 0x69
   17be4:	0c1b      	lsrs	r3, r3, #16
   17be6:	041b      	lsls	r3, r3, #16
   17be8:	f043 030d 	orr.w	r3, r3, #13
   17bec:	6023      	str	r3, [r4, #0]
   17bee:	e7d2      	b.n	17b96 <ip_interface_recvfrom+0x1fe>

00017bf0 <ip_interface_connect>:
   17bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17bf4:	b082      	sub	sp, #8
   17bf6:	2900      	cmp	r1, #0
   17bf8:	d044      	beq.n	17c84 <ip_interface_connect+0x94>
   17bfa:	2a00      	cmp	r2, #0
   17bfc:	d042      	beq.n	17c84 <ip_interface_connect+0x94>
   17bfe:	4606      	mov	r6, r0
   17c00:	460f      	mov	r7, r1
   17c02:	f001 f839 	bl	18c78 <interface_socket_from_handle_get>
   17c06:	4605      	mov	r5, r0
   17c08:	2800      	cmp	r0, #0
   17c0a:	f000 8096 	beq.w	17d3a <ip_interface_connect+0x14a>
   17c0e:	6803      	ldr	r3, [r0, #0]
   17c10:	b29b      	uxth	r3, r3
   17c12:	2b02      	cmp	r3, #2
   17c14:	d004      	beq.n	17c20 <ip_interface_connect+0x30>
   17c16:	6803      	ldr	r3, [r0, #0]
   17c18:	b29b      	uxth	r3, r3
   17c1a:	2b04      	cmp	r3, #4
   17c1c:	f040 808d 	bne.w	17d3a <ip_interface_connect+0x14a>
   17c20:	6829      	ldr	r1, [r5, #0]
   17c22:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   17c26:	f040 8084 	bne.w	17d32 <ip_interface_connect+0x142>
   17c2a:	a802      	add	r0, sp, #8
   17c2c:	f840 1d04 	str.w	r1, [r0, #-4]!
   17c30:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17c34:	f7fb ff80 	bl	13b38 <rpc_ip_client_request_alloc>
   17c38:	bb70      	cbnz	r0, 17c98 <ip_interface_connect+0xa8>
   17c3a:	2108      	movs	r1, #8
   17c3c:	0433      	lsls	r3, r6, #16
   17c3e:	9c01      	ldr	r4, [sp, #4]
   17c40:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   17c44:	f042 0202 	orr.w	r2, r2, #2
   17c48:	60e2      	str	r2, [r4, #12]
   17c4a:	f8c4 8010 	str.w	r8, [r4, #16]
   17c4e:	7260      	strb	r0, [r4, #9]
   17c50:	72a0      	strb	r0, [r4, #10]
   17c52:	72e0      	strb	r0, [r4, #11]
   17c54:	7221      	strb	r1, [r4, #8]
   17c56:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   17c5a:	f043 0302 	orr.w	r3, r3, #2
   17c5e:	60e3      	str	r3, [r4, #12]
   17c60:	68a3      	ldr	r3, [r4, #8]
   17c62:	69aa      	ldr	r2, [r5, #24]
   17c64:	3304      	adds	r3, #4
   17c66:	6122      	str	r2, [r4, #16]
   17c68:	60a3      	str	r3, [r4, #8]
   17c6a:	68eb      	ldr	r3, [r5, #12]
   17c6c:	687a      	ldr	r2, [r7, #4]
   17c6e:	4293      	cmp	r3, r2
   17c70:	d108      	bne.n	17c84 <ip_interface_connect+0x94>
   17c72:	2b02      	cmp	r3, #2
   17c74:	f104 0018 	add.w	r0, r4, #24
   17c78:	783a      	ldrb	r2, [r7, #0]
   17c7a:	d03a      	beq.n	17cf2 <ip_interface_connect+0x102>
   17c7c:	2b0a      	cmp	r3, #10
   17c7e:	d101      	bne.n	17c84 <ip_interface_connect+0x94>
   17c80:	2a24      	cmp	r2, #36	; 0x24
   17c82:	d00e      	beq.n	17ca2 <ip_interface_connect+0xb2>
   17c84:	2416      	movs	r4, #22
   17c86:	4620      	mov	r0, r4
   17c88:	f7f9 fe78 	bl	1197c <bsd_os_errno_set>
   17c8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17c90:	4620      	mov	r0, r4
   17c92:	b002      	add	sp, #8
   17c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17c98:	9c01      	ldr	r4, [sp, #4]
   17c9a:	2c00      	cmp	r4, #0
   17c9c:	d04f      	beq.n	17d3e <ip_interface_connect+0x14e>
   17c9e:	0433      	lsls	r3, r6, #16
   17ca0:	e7d9      	b.n	17c56 <ip_interface_connect+0x66>
   17ca2:	2210      	movs	r2, #16
   17ca4:	893b      	ldrh	r3, [r7, #8]
   17ca6:	18b9      	adds	r1, r7, r2
   17ca8:	82e2      	strh	r2, [r4, #22]
   17caa:	82a3      	strh	r3, [r4, #20]
   17cac:	f005 fcaf 	bl	1d60e <memcpy>
   17cb0:	68a3      	ldr	r3, [r4, #8]
   17cb2:	8ae2      	ldrh	r2, [r4, #22]
   17cb4:	f247 0102 	movw	r1, #28674	; 0x7002
   17cb8:	4413      	add	r3, r2
   17cba:	60a3      	str	r3, [r4, #8]
   17cbc:	682f      	ldr	r7, [r5, #0]
   17cbe:	682b      	ldr	r3, [r5, #0]
   17cc0:	4620      	mov	r0, r4
   17cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   17cc6:	602b      	str	r3, [r5, #0]
   17cc8:	f7fb ff4a 	bl	13b60 <rpc_ip_client_request_send>
   17ccc:	b9e0      	cbnz	r0, 17d08 <ip_interface_connect+0x118>
   17cce:	682b      	ldr	r3, [r5, #0]
   17cd0:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   17cd4:	d12f      	bne.n	17d36 <ip_interface_connect+0x146>
   17cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17cde:	2105      	movs	r1, #5
   17ce0:	4630      	mov	r0, r6
   17ce2:	f000 ff5d 	bl	18ba0 <interface_socket_wait>
   17ce6:	4604      	mov	r4, r0
   17ce8:	b1c0      	cbz	r0, 17d1c <ip_interface_connect+0x12c>
   17cea:	2c73      	cmp	r4, #115	; 0x73
   17cec:	d0cb      	beq.n	17c86 <ip_interface_connect+0x96>
   17cee:	602f      	str	r7, [r5, #0]
   17cf0:	e7c9      	b.n	17c86 <ip_interface_connect+0x96>
   17cf2:	2a10      	cmp	r2, #16
   17cf4:	d1c6      	bne.n	17c84 <ip_interface_connect+0x94>
   17cf6:	2204      	movs	r2, #4
   17cf8:	893b      	ldrh	r3, [r7, #8]
   17cfa:	f107 010c 	add.w	r1, r7, #12
   17cfe:	82e2      	strh	r2, [r4, #22]
   17d00:	82a3      	strh	r3, [r4, #20]
   17d02:	f005 fc84 	bl	1d60e <memcpy>
   17d06:	e7d3      	b.n	17cb0 <ip_interface_connect+0xc0>
   17d08:	6820      	ldr	r0, [r4, #0]
   17d0a:	b108      	cbz	r0, 17d10 <ip_interface_connect+0x120>
   17d0c:	f7fb ff46 	bl	13b9c <rpc_ip_client_data_free>
   17d10:	4620      	mov	r0, r4
   17d12:	f7fb ff3b 	bl	13b8c <rpc_ip_client_message_free>
   17d16:	2423      	movs	r4, #35	; 0x23
   17d18:	602f      	str	r7, [r5, #0]
   17d1a:	e7b4      	b.n	17c86 <ip_interface_connect+0x96>
   17d1c:	4630      	mov	r0, r6
   17d1e:	f000 ffab 	bl	18c78 <interface_socket_from_handle_get>
   17d22:	2800      	cmp	r0, #0
   17d24:	d0b4      	beq.n	17c90 <ip_interface_connect+0xa0>
   17d26:	6844      	ldr	r4, [r0, #4]
   17d28:	2c00      	cmp	r4, #0
   17d2a:	d0b1      	beq.n	17c90 <ip_interface_connect+0xa0>
   17d2c:	f8c0 8004 	str.w	r8, [r0, #4]
   17d30:	e7db      	b.n	17cea <ip_interface_connect+0xfa>
   17d32:	2472      	movs	r4, #114	; 0x72
   17d34:	e7a7      	b.n	17c86 <ip_interface_connect+0x96>
   17d36:	2473      	movs	r4, #115	; 0x73
   17d38:	e7a5      	b.n	17c86 <ip_interface_connect+0x96>
   17d3a:	2409      	movs	r4, #9
   17d3c:	e7a3      	b.n	17c86 <ip_interface_connect+0x96>
   17d3e:	240c      	movs	r4, #12
   17d40:	e7a1      	b.n	17c86 <ip_interface_connect+0x96>
   17d42:	bf00      	nop

00017d44 <ip_interface_bind>:
   17d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d48:	b082      	sub	sp, #8
   17d4a:	b389      	cbz	r1, 17db0 <ip_interface_bind+0x6c>
   17d4c:	b382      	cbz	r2, 17db0 <ip_interface_bind+0x6c>
   17d4e:	4607      	mov	r7, r0
   17d50:	460e      	mov	r6, r1
   17d52:	f000 ff91 	bl	18c78 <interface_socket_from_handle_get>
   17d56:	4605      	mov	r5, r0
   17d58:	2800      	cmp	r0, #0
   17d5a:	d07b      	beq.n	17e54 <ip_interface_bind+0x110>
   17d5c:	6803      	ldr	r3, [r0, #0]
   17d5e:	b29b      	uxth	r3, r3
   17d60:	2b02      	cmp	r3, #2
   17d62:	d177      	bne.n	17e54 <ip_interface_bind+0x110>
   17d64:	2100      	movs	r1, #0
   17d66:	a802      	add	r0, sp, #8
   17d68:	f840 1d04 	str.w	r1, [r0, #-4]!
   17d6c:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17d70:	f7fb fee2 	bl	13b38 <rpc_ip_client_request_alloc>
   17d74:	bb30      	cbnz	r0, 17dc4 <ip_interface_bind+0x80>
   17d76:	f247 0305 	movw	r3, #28677	; 0x7005
   17d7a:	2208      	movs	r2, #8
   17d7c:	9c01      	ldr	r4, [sp, #4]
   17d7e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   17d82:	60e3      	str	r3, [r4, #12]
   17d84:	f8c4 8010 	str.w	r8, [r4, #16]
   17d88:	7260      	strb	r0, [r4, #9]
   17d8a:	72a0      	strb	r0, [r4, #10]
   17d8c:	72e0      	strb	r0, [r4, #11]
   17d8e:	7222      	strb	r2, [r4, #8]
   17d90:	68a3      	ldr	r3, [r4, #8]
   17d92:	3304      	adds	r3, #4
   17d94:	60a3      	str	r3, [r4, #8]
   17d96:	68eb      	ldr	r3, [r5, #12]
   17d98:	6872      	ldr	r2, [r6, #4]
   17d9a:	4293      	cmp	r3, r2
   17d9c:	d108      	bne.n	17db0 <ip_interface_bind+0x6c>
   17d9e:	2b02      	cmp	r3, #2
   17da0:	f104 0018 	add.w	r0, r4, #24
   17da4:	7832      	ldrb	r2, [r6, #0]
   17da6:	d03c      	beq.n	17e22 <ip_interface_bind+0xde>
   17da8:	2b0a      	cmp	r3, #10
   17daa:	d101      	bne.n	17db0 <ip_interface_bind+0x6c>
   17dac:	2a24      	cmp	r2, #36	; 0x24
   17dae:	d00e      	beq.n	17dce <ip_interface_bind+0x8a>
   17db0:	2416      	movs	r4, #22
   17db2:	4620      	mov	r0, r4
   17db4:	f7f9 fde2 	bl	1197c <bsd_os_errno_set>
   17db8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17dbc:	4620      	mov	r0, r4
   17dbe:	b002      	add	sp, #8
   17dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17dc4:	9c01      	ldr	r4, [sp, #4]
   17dc6:	2c00      	cmp	r4, #0
   17dc8:	d1e2      	bne.n	17d90 <ip_interface_bind+0x4c>
   17dca:	240c      	movs	r4, #12
   17dcc:	e7f1      	b.n	17db2 <ip_interface_bind+0x6e>
   17dce:	2210      	movs	r2, #16
   17dd0:	8933      	ldrh	r3, [r6, #8]
   17dd2:	18b1      	adds	r1, r6, r2
   17dd4:	82e2      	strh	r2, [r4, #22]
   17dd6:	82a3      	strh	r3, [r4, #20]
   17dd8:	f005 fc19 	bl	1d60e <memcpy>
   17ddc:	68a3      	ldr	r3, [r4, #8]
   17dde:	8ae2      	ldrh	r2, [r4, #22]
   17de0:	f247 0105 	movw	r1, #28677	; 0x7005
   17de4:	4413      	add	r3, r2
   17de6:	60a3      	str	r3, [r4, #8]
   17de8:	682b      	ldr	r3, [r5, #0]
   17dea:	4620      	mov	r0, r4
   17dec:	0c1b      	lsrs	r3, r3, #16
   17dee:	041b      	lsls	r3, r3, #16
   17df0:	f043 0303 	orr.w	r3, r3, #3
   17df4:	602b      	str	r3, [r5, #0]
   17df6:	682e      	ldr	r6, [r5, #0]
   17df8:	f7fb feb2 	bl	13b60 <rpc_ip_client_request_send>
   17dfc:	4680      	mov	r8, r0
   17dfe:	b9d8      	cbnz	r0, 17e38 <ip_interface_bind+0xf4>
   17e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17e08:	2104      	movs	r1, #4
   17e0a:	4638      	mov	r0, r7
   17e0c:	f000 fec8 	bl	18ba0 <interface_socket_wait>
   17e10:	4604      	mov	r4, r0
   17e12:	b308      	cbz	r0, 17e58 <ip_interface_bind+0x114>
   17e14:	682b      	ldr	r3, [r5, #0]
   17e16:	0c1b      	lsrs	r3, r3, #16
   17e18:	041b      	lsls	r3, r3, #16
   17e1a:	f043 0302 	orr.w	r3, r3, #2
   17e1e:	602b      	str	r3, [r5, #0]
   17e20:	e7c7      	b.n	17db2 <ip_interface_bind+0x6e>
   17e22:	2a10      	cmp	r2, #16
   17e24:	d1c4      	bne.n	17db0 <ip_interface_bind+0x6c>
   17e26:	2204      	movs	r2, #4
   17e28:	8933      	ldrh	r3, [r6, #8]
   17e2a:	f106 010c 	add.w	r1, r6, #12
   17e2e:	82e2      	strh	r2, [r4, #22]
   17e30:	82a3      	strh	r3, [r4, #20]
   17e32:	f005 fbec 	bl	1d60e <memcpy>
   17e36:	e7d1      	b.n	17ddc <ip_interface_bind+0x98>
   17e38:	6820      	ldr	r0, [r4, #0]
   17e3a:	b108      	cbz	r0, 17e40 <ip_interface_bind+0xfc>
   17e3c:	f7fb feae 	bl	13b9c <rpc_ip_client_data_free>
   17e40:	0c36      	lsrs	r6, r6, #16
   17e42:	0436      	lsls	r6, r6, #16
   17e44:	4620      	mov	r0, r4
   17e46:	f046 0602 	orr.w	r6, r6, #2
   17e4a:	f7fb fe9f 	bl	13b8c <rpc_ip_client_message_free>
   17e4e:	2423      	movs	r4, #35	; 0x23
   17e50:	602e      	str	r6, [r5, #0]
   17e52:	e7ae      	b.n	17db2 <ip_interface_bind+0x6e>
   17e54:	2409      	movs	r4, #9
   17e56:	e7ac      	b.n	17db2 <ip_interface_bind+0x6e>
   17e58:	4638      	mov	r0, r7
   17e5a:	f000 ff0d 	bl	18c78 <interface_socket_from_handle_get>
   17e5e:	2800      	cmp	r0, #0
   17e60:	d0ac      	beq.n	17dbc <ip_interface_bind+0x78>
   17e62:	6844      	ldr	r4, [r0, #4]
   17e64:	2c00      	cmp	r4, #0
   17e66:	d0a9      	beq.n	17dbc <ip_interface_bind+0x78>
   17e68:	f8c0 8004 	str.w	r8, [r0, #4]
   17e6c:	e7d2      	b.n	17e14 <ip_interface_bind+0xd0>
   17e6e:	bf00      	nop

00017e70 <ip_interface_listen>:
   17e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e74:	b082      	sub	sp, #8
   17e76:	4606      	mov	r6, r0
   17e78:	f000 fefe 	bl	18c78 <interface_socket_from_handle_get>
   17e7c:	2800      	cmp	r0, #0
   17e7e:	d067      	beq.n	17f50 <ip_interface_listen+0xe0>
   17e80:	6803      	ldr	r3, [r0, #0]
   17e82:	4605      	mov	r5, r0
   17e84:	b29b      	uxth	r3, r3
   17e86:	2b04      	cmp	r3, #4
   17e88:	d162      	bne.n	17f50 <ip_interface_listen+0xe0>
   17e8a:	2100      	movs	r1, #0
   17e8c:	4a32      	ldr	r2, [pc, #200]	; (17f58 <ip_interface_listen+0xe8>)
   17e8e:	4630      	mov	r0, r6
   17e90:	f000 fe4e 	bl	18b30 <interface_socket_packet_handler_update>
   17e94:	4601      	mov	r1, r0
   17e96:	2800      	cmp	r0, #0
   17e98:	d15c      	bne.n	17f54 <ip_interface_listen+0xe4>
   17e9a:	a802      	add	r0, sp, #8
   17e9c:	f840 1d04 	str.w	r1, [r0, #-4]!
   17ea0:	69af      	ldr	r7, [r5, #24]
   17ea2:	f7fb fe49 	bl	13b38 <rpc_ip_client_request_alloc>
   17ea6:	bba8      	cbnz	r0, 17f14 <ip_interface_listen+0xa4>
   17ea8:	f247 0308 	movw	r3, #28680	; 0x7008
   17eac:	2208      	movs	r2, #8
   17eae:	9c01      	ldr	r4, [sp, #4]
   17eb0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17eb4:	60e3      	str	r3, [r4, #12]
   17eb6:	6127      	str	r7, [r4, #16]
   17eb8:	7260      	strb	r0, [r4, #9]
   17eba:	72a0      	strb	r0, [r4, #10]
   17ebc:	72e0      	strb	r0, [r4, #11]
   17ebe:	7222      	strb	r2, [r4, #8]
   17ec0:	68a3      	ldr	r3, [r4, #8]
   17ec2:	f247 0108 	movw	r1, #28680	; 0x7008
   17ec6:	3304      	adds	r3, #4
   17ec8:	60a3      	str	r3, [r4, #8]
   17eca:	682b      	ldr	r3, [r5, #0]
   17ecc:	4620      	mov	r0, r4
   17ece:	0c1b      	lsrs	r3, r3, #16
   17ed0:	041b      	lsls	r3, r3, #16
   17ed2:	f043 0306 	orr.w	r3, r3, #6
   17ed6:	602b      	str	r3, [r5, #0]
   17ed8:	682f      	ldr	r7, [r5, #0]
   17eda:	f7fb fe41 	bl	13b60 <rpc_ip_client_request_send>
   17ede:	4680      	mov	r8, r0
   17ee0:	b9e8      	cbnz	r0, 17f1e <ip_interface_listen+0xae>
   17ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17eea:	2107      	movs	r1, #7
   17eec:	4630      	mov	r0, r6
   17eee:	f000 fe57 	bl	18ba0 <interface_socket_wait>
   17ef2:	4604      	mov	r4, r0
   17ef4:	b308      	cbz	r0, 17f3a <ip_interface_listen+0xca>
   17ef6:	682b      	ldr	r3, [r5, #0]
   17ef8:	0c1b      	lsrs	r3, r3, #16
   17efa:	041b      	lsls	r3, r3, #16
   17efc:	f043 0304 	orr.w	r3, r3, #4
   17f00:	602b      	str	r3, [r5, #0]
   17f02:	4620      	mov	r0, r4
   17f04:	f7f9 fd3a 	bl	1197c <bsd_os_errno_set>
   17f08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17f0c:	4620      	mov	r0, r4
   17f0e:	b002      	add	sp, #8
   17f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f14:	9c01      	ldr	r4, [sp, #4]
   17f16:	2c00      	cmp	r4, #0
   17f18:	d1d2      	bne.n	17ec0 <ip_interface_listen+0x50>
   17f1a:	240c      	movs	r4, #12
   17f1c:	e7f1      	b.n	17f02 <ip_interface_listen+0x92>
   17f1e:	6820      	ldr	r0, [r4, #0]
   17f20:	b108      	cbz	r0, 17f26 <ip_interface_listen+0xb6>
   17f22:	f7fb fe3b 	bl	13b9c <rpc_ip_client_data_free>
   17f26:	0c3f      	lsrs	r7, r7, #16
   17f28:	043f      	lsls	r7, r7, #16
   17f2a:	4620      	mov	r0, r4
   17f2c:	f047 0704 	orr.w	r7, r7, #4
   17f30:	f7fb fe2c 	bl	13b8c <rpc_ip_client_message_free>
   17f34:	2423      	movs	r4, #35	; 0x23
   17f36:	602f      	str	r7, [r5, #0]
   17f38:	e7e3      	b.n	17f02 <ip_interface_listen+0x92>
   17f3a:	4630      	mov	r0, r6
   17f3c:	f000 fe9c 	bl	18c78 <interface_socket_from_handle_get>
   17f40:	2800      	cmp	r0, #0
   17f42:	d0e3      	beq.n	17f0c <ip_interface_listen+0x9c>
   17f44:	6844      	ldr	r4, [r0, #4]
   17f46:	2c00      	cmp	r4, #0
   17f48:	d0e0      	beq.n	17f0c <ip_interface_listen+0x9c>
   17f4a:	f8c0 8004 	str.w	r8, [r0, #4]
   17f4e:	e7d2      	b.n	17ef6 <ip_interface_listen+0x86>
   17f50:	2409      	movs	r4, #9
   17f52:	e7d6      	b.n	17f02 <ip_interface_listen+0x92>
   17f54:	2423      	movs	r4, #35	; 0x23
   17f56:	e7d4      	b.n	17f02 <ip_interface_listen+0x92>
   17f58:	00017401 	.word	0x00017401

00017f5c <ip_interface_accept>:
   17f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f60:	2500      	movs	r5, #0
   17f62:	b085      	sub	sp, #20
   17f64:	460f      	mov	r7, r1
   17f66:	4690      	mov	r8, r2
   17f68:	9502      	str	r5, [sp, #8]
   17f6a:	4606      	mov	r6, r0
   17f6c:	f000 fe84 	bl	18c78 <interface_socket_from_handle_get>
   17f70:	4604      	mov	r4, r0
   17f72:	2800      	cmp	r0, #0
   17f74:	f000 811c 	beq.w	181b0 <ip_interface_accept+0x254>
   17f78:	6803      	ldr	r3, [r0, #0]
   17f7a:	b29b      	uxth	r3, r3
   17f7c:	2b07      	cmp	r3, #7
   17f7e:	d10a      	bne.n	17f96 <ip_interface_accept+0x3a>
   17f80:	6803      	ldr	r3, [r0, #0]
   17f82:	6805      	ldr	r5, [r0, #0]
   17f84:	00db      	lsls	r3, r3, #3
   17f86:	d416      	bmi.n	17fb6 <ip_interface_accept+0x5a>
   17f88:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17f8c:	d019      	beq.n	17fc2 <ip_interface_accept+0x66>
   17f8e:	6805      	ldr	r5, [r0, #0]
   17f90:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17f94:	d124      	bne.n	17fe0 <ip_interface_accept+0x84>
   17f96:	f04f 0909 	mov.w	r9, #9
   17f9a:	9b02      	ldr	r3, [sp, #8]
   17f9c:	b113      	cbz	r3, 17fa4 <ip_interface_accept+0x48>
   17f9e:	4628      	mov	r0, r5
   17fa0:	f000 fdb0 	bl	18b04 <interface_socket_free>
   17fa4:	4648      	mov	r0, r9
   17fa6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   17faa:	f7f9 fce7 	bl	1197c <bsd_os_errno_set>
   17fae:	4648      	mov	r0, r9
   17fb0:	b005      	add	sp, #20
   17fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fb6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17fba:	d16d      	bne.n	18098 <ip_interface_accept+0x13c>
   17fbc:	f04f 0923 	mov.w	r9, #35	; 0x23
   17fc0:	e7eb      	b.n	17f9a <ip_interface_accept+0x3e>
   17fc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17fca:	4611      	mov	r1, r2
   17fcc:	4630      	mov	r0, r6
   17fce:	f000 fde7 	bl	18ba0 <interface_socket_wait>
   17fd2:	4681      	mov	r9, r0
   17fd4:	2800      	cmp	r0, #0
   17fd6:	d07e      	beq.n	180d6 <ip_interface_accept+0x17a>
   17fd8:	6825      	ldr	r5, [r4, #0]
   17fda:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17fde:	d0dc      	beq.n	17f9a <ip_interface_accept+0x3e>
   17fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17fe4:	2300      	movs	r3, #0
   17fe6:	e9cd 0300 	strd	r0, r3, [sp]
   17fea:	4a75      	ldr	r2, [pc, #468]	; (181c0 <ip_interface_accept+0x264>)
   17fec:	6921      	ldr	r1, [r4, #16]
   17fee:	a802      	add	r0, sp, #8
   17ff0:	f000 fd32 	bl	18a58 <interface_socket_allocate>
   17ff4:	9b02      	ldr	r3, [sp, #8]
   17ff6:	4605      	mov	r5, r0
   17ff8:	2b00      	cmp	r3, #0
   17ffa:	f000 80dd 	beq.w	181b8 <ip_interface_accept+0x25c>
   17ffe:	2100      	movs	r1, #0
   18000:	6962      	ldr	r2, [r4, #20]
   18002:	a804      	add	r0, sp, #16
   18004:	615a      	str	r2, [r3, #20]
   18006:	68e2      	ldr	r2, [r4, #12]
   18008:	f840 1d04 	str.w	r1, [r0, #-4]!
   1800c:	60da      	str	r2, [r3, #12]
   1800e:	6922      	ldr	r2, [r4, #16]
   18010:	611a      	str	r2, [r3, #16]
   18012:	f8d4 9018 	ldr.w	r9, [r4, #24]
   18016:	f7fb fd8f 	bl	13b38 <rpc_ip_client_request_alloc>
   1801a:	2800      	cmp	r0, #0
   1801c:	d143      	bne.n	180a6 <ip_interface_accept+0x14a>
   1801e:	f247 030c 	movw	r3, #28684	; 0x700c
   18022:	2108      	movs	r1, #8
   18024:	f8dd b00c 	ldr.w	fp, [sp, #12]
   18028:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1802c:	f8cb 300c 	str.w	r3, [fp, #12]
   18030:	f8cb 9010 	str.w	r9, [fp, #16]
   18034:	f88b 0009 	strb.w	r0, [fp, #9]
   18038:	f88b 000a 	strb.w	r0, [fp, #10]
   1803c:	f88b 000b 	strb.w	r0, [fp, #11]
   18040:	f88b 1008 	strb.w	r1, [fp, #8]
   18044:	6823      	ldr	r3, [r4, #0]
   18046:	f247 010c 	movw	r1, #28684	; 0x700c
   1804a:	0c1b      	lsrs	r3, r3, #16
   1804c:	041b      	lsls	r3, r3, #16
   1804e:	f043 0308 	orr.w	r3, r3, #8
   18052:	6023      	str	r3, [r4, #0]
   18054:	4658      	mov	r0, fp
   18056:	f8d4 9000 	ldr.w	r9, [r4]
   1805a:	f7fb fd81 	bl	13b60 <rpc_ip_client_request_send>
   1805e:	4682      	mov	sl, r0
   18060:	bb48      	cbnz	r0, 180b6 <ip_interface_accept+0x15a>
   18062:	6822      	ldr	r2, [r4, #0]
   18064:	9900      	ldr	r1, [sp, #0]
   18066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1806a:	400a      	ands	r2, r1
   1806c:	6022      	str	r2, [r4, #0]
   1806e:	2109      	movs	r1, #9
   18070:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18074:	4630      	mov	r0, r6
   18076:	f000 fd93 	bl	18ba0 <interface_socket_wait>
   1807a:	4681      	mov	r9, r0
   1807c:	2800      	cmp	r0, #0
   1807e:	f000 8085 	beq.w	1818c <ip_interface_accept+0x230>
   18082:	6823      	ldr	r3, [r4, #0]
   18084:	9a01      	ldr	r2, [sp, #4]
   18086:	431a      	orrs	r2, r3
   18088:	6022      	str	r2, [r4, #0]
   1808a:	6823      	ldr	r3, [r4, #0]
   1808c:	0c1b      	lsrs	r3, r3, #16
   1808e:	041b      	lsls	r3, r3, #16
   18090:	f043 0307 	orr.w	r3, r3, #7
   18094:	6023      	str	r3, [r4, #0]
   18096:	e780      	b.n	17f9a <ip_interface_accept+0x3e>
   18098:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1809c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   180a0:	e9cd 2300 	strd	r2, r3, [sp]
   180a4:	e7a1      	b.n	17fea <ip_interface_accept+0x8e>
   180a6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   180aa:	f04f 090c 	mov.w	r9, #12
   180ae:	f1bb 0f00 	cmp.w	fp, #0
   180b2:	d1c7      	bne.n	18044 <ip_interface_accept+0xe8>
   180b4:	e771      	b.n	17f9a <ip_interface_accept+0x3e>
   180b6:	f8db 0000 	ldr.w	r0, [fp]
   180ba:	b108      	cbz	r0, 180c0 <ip_interface_accept+0x164>
   180bc:	f7fb fd6e 	bl	13b9c <rpc_ip_client_data_free>
   180c0:	ea4f 4919 	mov.w	r9, r9, lsr #16
   180c4:	4658      	mov	r0, fp
   180c6:	ea4f 4909 	mov.w	r9, r9, lsl #16
   180ca:	f7fb fd5f 	bl	13b8c <rpc_ip_client_message_free>
   180ce:	f049 0307 	orr.w	r3, r9, #7
   180d2:	6023      	str	r3, [r4, #0]
   180d4:	e772      	b.n	17fbc <ip_interface_accept+0x60>
   180d6:	4630      	mov	r0, r6
   180d8:	f000 fdce 	bl	18c78 <interface_socket_from_handle_get>
   180dc:	b130      	cbz	r0, 180ec <ip_interface_accept+0x190>
   180de:	f8d0 9004 	ldr.w	r9, [r0, #4]
   180e2:	f1b9 0f00 	cmp.w	r9, #0
   180e6:	d001      	beq.n	180ec <ip_interface_accept+0x190>
   180e8:	6045      	str	r5, [r0, #4]
   180ea:	e775      	b.n	17fd8 <ip_interface_accept+0x7c>
   180ec:	6823      	ldr	r3, [r4, #0]
   180ee:	03d9      	lsls	r1, r3, #15
   180f0:	f53f af76 	bmi.w	17fe0 <ip_interface_accept+0x84>
   180f4:	4d33      	ldr	r5, [pc, #204]	; (181c4 <ip_interface_accept+0x268>)
   180f6:	9902      	ldr	r1, [sp, #8]
   180f8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   180fc:	699b      	ldr	r3, [r3, #24]
   180fe:	618b      	str	r3, [r1, #24]
   18100:	b147      	cbz	r7, 18114 <ip_interface_accept+0x1b8>
   18102:	68cb      	ldr	r3, [r1, #12]
   18104:	2b0a      	cmp	r3, #10
   18106:	d024      	beq.n	18152 <ip_interface_accept+0x1f6>
   18108:	2b02      	cmp	r3, #2
   1810a:	d103      	bne.n	18114 <ip_interface_accept+0x1b8>
   1810c:	f8d8 2000 	ldr.w	r2, [r8]
   18110:	2a10      	cmp	r2, #16
   18112:	d032      	beq.n	1817a <ip_interface_accept+0x21e>
   18114:	680a      	ldr	r2, [r1, #0]
   18116:	482c      	ldr	r0, [pc, #176]	; (181c8 <ip_interface_accept+0x26c>)
   18118:	4002      	ands	r2, r0
   1811a:	f042 0205 	orr.w	r2, r2, #5
   1811e:	600a      	str	r2, [r1, #0]
   18120:	9a02      	ldr	r2, [sp, #8]
   18122:	6811      	ldr	r1, [r2, #0]
   18124:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   18128:	6011      	str	r1, [r2, #0]
   1812a:	6811      	ldr	r1, [r2, #0]
   1812c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18130:	6011      	str	r1, [r2, #0]
   18132:	6823      	ldr	r3, [r4, #0]
   18134:	4003      	ands	r3, r0
   18136:	f043 0307 	orr.w	r3, r3, #7
   1813a:	6023      	str	r3, [r4, #0]
   1813c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   18140:	f7fb fd24 	bl	13b8c <rpc_ip_client_message_free>
   18144:	2300      	movs	r3, #0
   18146:	4648      	mov	r0, r9
   18148:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1814c:	b005      	add	sp, #20
   1814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18152:	f8d8 2000 	ldr.w	r2, [r8]
   18156:	2a24      	cmp	r2, #36	; 0x24
   18158:	d1dc      	bne.n	18114 <ip_interface_accept+0x1b8>
   1815a:	703a      	strb	r2, [r7, #0]
   1815c:	2210      	movs	r2, #16
   1815e:	607b      	str	r3, [r7, #4]
   18160:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   18164:	f107 0010 	add.w	r0, r7, #16
   18168:	8b9b      	ldrh	r3, [r3, #28]
   1816a:	813b      	strh	r3, [r7, #8]
   1816c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   18170:	3120      	adds	r1, #32
   18172:	f005 fa4c 	bl	1d60e <memcpy>
   18176:	9902      	ldr	r1, [sp, #8]
   18178:	e7cc      	b.n	18114 <ip_interface_accept+0x1b8>
   1817a:	703a      	strb	r2, [r7, #0]
   1817c:	607b      	str	r3, [r7, #4]
   1817e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   18182:	f107 000c 	add.w	r0, r7, #12
   18186:	8b9b      	ldrh	r3, [r3, #28]
   18188:	2204      	movs	r2, #4
   1818a:	e7ee      	b.n	1816a <ip_interface_accept+0x20e>
   1818c:	4630      	mov	r0, r6
   1818e:	f000 fd73 	bl	18c78 <interface_socket_from_handle_get>
   18192:	b138      	cbz	r0, 181a4 <ip_interface_accept+0x248>
   18194:	f8d0 9004 	ldr.w	r9, [r0, #4]
   18198:	f1b9 0f00 	cmp.w	r9, #0
   1819c:	d002      	beq.n	181a4 <ip_interface_accept+0x248>
   1819e:	f8c0 a004 	str.w	sl, [r0, #4]
   181a2:	e76e      	b.n	18082 <ip_interface_accept+0x126>
   181a4:	6823      	ldr	r3, [r4, #0]
   181a6:	9a01      	ldr	r2, [sp, #4]
   181a8:	46a9      	mov	r9, r5
   181aa:	4313      	orrs	r3, r2
   181ac:	6023      	str	r3, [r4, #0]
   181ae:	e7a1      	b.n	180f4 <ip_interface_accept+0x198>
   181b0:	4605      	mov	r5, r0
   181b2:	f04f 0909 	mov.w	r9, #9
   181b6:	e6f0      	b.n	17f9a <ip_interface_accept+0x3e>
   181b8:	f04f 090c 	mov.w	r9, #12
   181bc:	e6f2      	b.n	17fa4 <ip_interface_accept+0x48>
   181be:	bf00      	nop
   181c0:	00017401 	.word	0x00017401
   181c4:	2002095c 	.word	0x2002095c
   181c8:	ffff0000 	.word	0xffff0000

000181cc <ip_interface_setopt>:
   181cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181d0:	2901      	cmp	r1, #1
   181d2:	b084      	sub	sp, #16
   181d4:	f040 809c 	bne.w	18310 <ip_interface_setopt+0x144>
   181d8:	460e      	mov	r6, r1
   181da:	4690      	mov	r8, r2
   181dc:	461d      	mov	r5, r3
   181de:	4607      	mov	r7, r0
   181e0:	f000 fd4a 	bl	18c78 <interface_socket_from_handle_get>
   181e4:	4604      	mov	r4, r0
   181e6:	2800      	cmp	r0, #0
   181e8:	f000 80a5 	beq.w	18336 <ip_interface_setopt+0x16a>
   181ec:	f1b8 0f19 	cmp.w	r8, #25
   181f0:	d16e      	bne.n	182d0 <ip_interface_setopt+0x104>
   181f2:	2d00      	cmp	r5, #0
   181f4:	f000 8092 	beq.w	1831c <ip_interface_setopt+0x150>
   181f8:	4628      	mov	r0, r5
   181fa:	f005 f9cd 	bl	1d598 <strlen>
   181fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18200:	4298      	cmp	r0, r3
   18202:	f040 808b 	bne.w	1831c <ip_interface_setopt+0x150>
   18206:	6823      	ldr	r3, [r4, #0]
   18208:	b29b      	uxth	r3, r3
   1820a:	2b02      	cmp	r3, #2
   1820c:	d173      	bne.n	182f6 <ip_interface_setopt+0x12a>
   1820e:	4629      	mov	r1, r5
   18210:	68e0      	ldr	r0, [r4, #12]
   18212:	f7fe fb91 	bl	16938 <pdn_interface_pdn_id_get>
   18216:	9002      	str	r0, [sp, #8]
   18218:	3001      	adds	r0, #1
   1821a:	bf08      	it	eq
   1821c:	2516      	moveq	r5, #22
   1821e:	d04e      	beq.n	182be <ip_interface_setopt+0xf2>
   18220:	6823      	ldr	r3, [r4, #0]
   18222:	025b      	lsls	r3, r3, #9
   18224:	d44a      	bmi.n	182bc <ip_interface_setopt+0xf0>
   18226:	6823      	ldr	r3, [r4, #0]
   18228:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   1822c:	d146      	bne.n	182bc <ip_interface_setopt+0xf0>
   1822e:	6826      	ldr	r6, [r4, #0]
   18230:	6822      	ldr	r2, [r4, #0]
   18232:	a804      	add	r0, sp, #16
   18234:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   18238:	6022      	str	r2, [r4, #0]
   1823a:	2104      	movs	r1, #4
   1823c:	f840 3d04 	str.w	r3, [r0, #-4]!
   18240:	f8d4 8018 	ldr.w	r8, [r4, #24]
   18244:	f7fb fc78 	bl	13b38 <rpc_ip_client_request_alloc>
   18248:	2800      	cmp	r0, #0
   1824a:	d14e      	bne.n	182ea <ip_interface_setopt+0x11e>
   1824c:	f247 0203 	movw	r2, #28675	; 0x7003
   18250:	2300      	movs	r3, #0
   18252:	2108      	movs	r1, #8
   18254:	9d03      	ldr	r5, [sp, #12]
   18256:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1825a:	60ea      	str	r2, [r5, #12]
   1825c:	f8c5 8010 	str.w	r8, [r5, #16]
   18260:	7229      	strb	r1, [r5, #8]
   18262:	726b      	strb	r3, [r5, #9]
   18264:	72ab      	strb	r3, [r5, #10]
   18266:	72eb      	strb	r3, [r5, #11]
   18268:	f04f 0c08 	mov.w	ip, #8
   1826c:	2300      	movs	r3, #0
   1826e:	2010      	movs	r0, #16
   18270:	2130      	movs	r1, #48	; 0x30
   18272:	68aa      	ldr	r2, [r5, #8]
   18274:	756b      	strb	r3, [r5, #21]
   18276:	4462      	add	r2, ip
   18278:	60aa      	str	r2, [r5, #8]
   1827a:	75ab      	strb	r3, [r5, #22]
   1827c:	75eb      	strb	r3, [r5, #23]
   1827e:	76ab      	strb	r3, [r5, #26]
   18280:	76eb      	strb	r3, [r5, #27]
   18282:	f885 c014 	strb.w	ip, [r5, #20]
   18286:	7628      	strb	r0, [r5, #24]
   18288:	7669      	strb	r1, [r5, #25]
   1828a:	2204      	movs	r2, #4
   1828c:	eb0d 010c 	add.w	r1, sp, ip
   18290:	6828      	ldr	r0, [r5, #0]
   18292:	f005 f9bc 	bl	1d60e <memcpy>
   18296:	f247 0103 	movw	r1, #28675	; 0x7003
   1829a:	4628      	mov	r0, r5
   1829c:	f7fb fc60 	bl	13b60 <rpc_ip_client_request_send>
   182a0:	4680      	mov	r8, r0
   182a2:	bb50      	cbnz	r0, 182fa <ip_interface_setopt+0x12e>
   182a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   182a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   182ac:	4611      	mov	r1, r2
   182ae:	4638      	mov	r0, r7
   182b0:	f000 fc76 	bl	18ba0 <interface_socket_wait>
   182b4:	4605      	mov	r5, r0
   182b6:	b398      	cbz	r0, 18320 <ip_interface_setopt+0x154>
   182b8:	6026      	str	r6, [r4, #0]
   182ba:	e000      	b.n	182be <ip_interface_setopt+0xf2>
   182bc:	2523      	movs	r5, #35	; 0x23
   182be:	4628      	mov	r0, r5
   182c0:	f7f9 fb5c 	bl	1197c <bsd_os_errno_set>
   182c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   182c8:	4628      	mov	r0, r5
   182ca:	b004      	add	sp, #16
   182cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   182d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   182d2:	4642      	mov	r2, r8
   182d4:	9300      	str	r3, [sp, #0]
   182d6:	4631      	mov	r1, r6
   182d8:	462b      	mov	r3, r5
   182da:	4638      	mov	r0, r7
   182dc:	f000 fcf4 	bl	18cc8 <interface_socket_setopt>
   182e0:	4605      	mov	r5, r0
   182e2:	4628      	mov	r0, r5
   182e4:	b004      	add	sp, #16
   182e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   182ea:	9d03      	ldr	r5, [sp, #12]
   182ec:	2d00      	cmp	r5, #0
   182ee:	d1bb      	bne.n	18268 <ip_interface_setopt+0x9c>
   182f0:	6026      	str	r6, [r4, #0]
   182f2:	250c      	movs	r5, #12
   182f4:	e7e3      	b.n	182be <ip_interface_setopt+0xf2>
   182f6:	2509      	movs	r5, #9
   182f8:	e7e1      	b.n	182be <ip_interface_setopt+0xf2>
   182fa:	6828      	ldr	r0, [r5, #0]
   182fc:	b108      	cbz	r0, 18302 <ip_interface_setopt+0x136>
   182fe:	f7fb fc4d 	bl	13b9c <rpc_ip_client_data_free>
   18302:	4628      	mov	r0, r5
   18304:	f7fb fc42 	bl	13b8c <rpc_ip_client_message_free>
   18308:	2523      	movs	r5, #35	; 0x23
   1830a:	6026      	str	r6, [r4, #0]
   1830c:	6026      	str	r6, [r4, #0]
   1830e:	e7d6      	b.n	182be <ip_interface_setopt+0xf2>
   18310:	202a      	movs	r0, #42	; 0x2a
   18312:	f7f9 fb33 	bl	1197c <bsd_os_errno_set>
   18316:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1831a:	e7d5      	b.n	182c8 <ip_interface_setopt+0xfc>
   1831c:	250e      	movs	r5, #14
   1831e:	e7ce      	b.n	182be <ip_interface_setopt+0xf2>
   18320:	4638      	mov	r0, r7
   18322:	f000 fca9 	bl	18c78 <interface_socket_from_handle_get>
   18326:	b120      	cbz	r0, 18332 <ip_interface_setopt+0x166>
   18328:	6845      	ldr	r5, [r0, #4]
   1832a:	b115      	cbz	r5, 18332 <ip_interface_setopt+0x166>
   1832c:	f8c0 8004 	str.w	r8, [r0, #4]
   18330:	e7c2      	b.n	182b8 <ip_interface_setopt+0xec>
   18332:	6026      	str	r6, [r4, #0]
   18334:	e7c8      	b.n	182c8 <ip_interface_setopt+0xfc>
   18336:	2009      	movs	r0, #9
   18338:	f7f9 fb20 	bl	1197c <bsd_os_errno_set>
   1833c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18340:	e7c2      	b.n	182c8 <ip_interface_setopt+0xfc>
   18342:	bf00      	nop

00018344 <ip_interface_getopt>:
   18344:	f000 bcf6 	b.w	18d34 <interface_socket_getopt>

00018348 <ip_interface_getaddrinfo>:
   18348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1834c:	f04f 0c00 	mov.w	ip, #0
   18350:	2401      	movs	r4, #1
   18352:	4e72      	ldr	r6, [pc, #456]	; (1851c <ip_interface_getaddrinfo+0x1d4>)
   18354:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 18528 <ip_interface_getaddrinfo+0x1e0>
   18358:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 1852c <ip_interface_getaddrinfo+0x1e4>
   1835c:	b085      	sub	sp, #20
   1835e:	4607      	mov	r7, r0
   18360:	4615      	mov	r5, r2
   18362:	9301      	str	r3, [sp, #4]
   18364:	f8a6 c000 	strh.w	ip, [r6]
   18368:	f8ca 4000 	str.w	r4, [sl]
   1836c:	f8c9 4000 	str.w	r4, [r9]
   18370:	b171      	cbz	r1, 18390 <ip_interface_getaddrinfo+0x48>
   18372:	4608      	mov	r0, r1
   18374:	220a      	movs	r2, #10
   18376:	4661      	mov	r1, ip
   18378:	f004 ffca 	bl	1d310 <strtol>
   1837c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   18380:	1e42      	subs	r2, r0, #1
   18382:	429a      	cmp	r2, r3
   18384:	f200 8083 	bhi.w	1848e <ip_interface_getaddrinfo+0x146>
   18388:	0203      	lsls	r3, r0, #8
   1838a:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1838e:	8030      	strh	r0, [r6, #0]
   18390:	f8df 819c 	ldr.w	r8, [pc, #412]	; 18530 <ip_interface_getaddrinfo+0x1e8>
   18394:	f8d8 3000 	ldr.w	r3, [r8]
   18398:	2b00      	cmp	r3, #0
   1839a:	d174      	bne.n	18486 <ip_interface_getaddrinfo+0x13e>
   1839c:	4a60      	ldr	r2, [pc, #384]	; (18520 <ip_interface_getaddrinfo+0x1d8>)
   1839e:	6013      	str	r3, [r2, #0]
   183a0:	4a60      	ldr	r2, [pc, #384]	; (18524 <ip_interface_getaddrinfo+0x1dc>)
   183a2:	6013      	str	r3, [r2, #0]
   183a4:	2f00      	cmp	r7, #0
   183a6:	d062      	beq.n	1846e <ip_interface_getaddrinfo+0x126>
   183a8:	4638      	mov	r0, r7
   183aa:	f005 f8f5 	bl	1d598 <strlen>
   183ae:	4683      	mov	fp, r0
   183b0:	b125      	cbz	r5, 183bc <ip_interface_getaddrinfo+0x74>
   183b2:	69ea      	ldr	r2, [r5, #28]
   183b4:	b112      	cbz	r2, 183bc <ip_interface_getaddrinfo+0x74>
   183b6:	6851      	ldr	r1, [r2, #4]
   183b8:	2966      	cmp	r1, #102	; 0x66
   183ba:	d06c      	beq.n	18496 <ip_interface_getaddrinfo+0x14e>
   183bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   183c0:	2100      	movs	r1, #0
   183c2:	ae04      	add	r6, sp, #16
   183c4:	f846 1d04 	str.w	r1, [r6, #-4]!
   183c8:	4630      	mov	r0, r6
   183ca:	4659      	mov	r1, fp
   183cc:	9200      	str	r2, [sp, #0]
   183ce:	f7fb fbb3 	bl	13b38 <rpc_ip_client_request_alloc>
   183d2:	9a00      	ldr	r2, [sp, #0]
   183d4:	2800      	cmp	r0, #0
   183d6:	d14c      	bne.n	18472 <ip_interface_getaddrinfo+0x12a>
   183d8:	f247 010d 	movw	r1, #28685	; 0x700d
   183dc:	f04f 0c08 	mov.w	ip, #8
   183e0:	9c03      	ldr	r4, [sp, #12]
   183e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   183e6:	60e1      	str	r1, [r4, #12]
   183e8:	6122      	str	r2, [r4, #16]
   183ea:	7260      	strb	r0, [r4, #9]
   183ec:	72a0      	strb	r0, [r4, #10]
   183ee:	72e0      	strb	r0, [r4, #11]
   183f0:	f884 c008 	strb.w	ip, [r4, #8]
   183f4:	2d00      	cmp	r5, #0
   183f6:	d076      	beq.n	184e6 <ip_interface_getaddrinfo+0x19e>
   183f8:	686a      	ldr	r2, [r5, #4]
   183fa:	f022 0108 	bic.w	r1, r2, #8
   183fe:	2902      	cmp	r1, #2
   18400:	d05c      	beq.n	184bc <ip_interface_getaddrinfo+0x174>
   18402:	2a05      	cmp	r2, #5
   18404:	d178      	bne.n	184f8 <ip_interface_getaddrinfo+0x1b0>
   18406:	68a9      	ldr	r1, [r5, #8]
   18408:	2902      	cmp	r1, #2
   1840a:	f8c9 1000 	str.w	r1, [r9]
   1840e:	d061      	beq.n	184d4 <ip_interface_getaddrinfo+0x18c>
   18410:	61a2      	str	r2, [r4, #24]
   18412:	68ea      	ldr	r2, [r5, #12]
   18414:	6222      	str	r2, [r4, #32]
   18416:	68aa      	ldr	r2, [r5, #8]
   18418:	61e2      	str	r2, [r4, #28]
   1841a:	682a      	ldr	r2, [r5, #0]
   1841c:	6162      	str	r2, [r4, #20]
   1841e:	68a2      	ldr	r2, [r4, #8]
   18420:	3210      	adds	r2, #16
   18422:	60a2      	str	r2, [r4, #8]
   18424:	b12f      	cbz	r7, 18432 <ip_interface_getaddrinfo+0xea>
   18426:	6820      	ldr	r0, [r4, #0]
   18428:	b118      	cbz	r0, 18432 <ip_interface_getaddrinfo+0xea>
   1842a:	465a      	mov	r2, fp
   1842c:	4639      	mov	r1, r7
   1842e:	f005 f8ee 	bl	1d60e <memcpy>
   18432:	2301      	movs	r3, #1
   18434:	f247 010d 	movw	r1, #28685	; 0x700d
   18438:	4620      	mov	r0, r4
   1843a:	f8c8 3000 	str.w	r3, [r8]
   1843e:	f7fb fb8f 	bl	13b60 <rpc_ip_client_request_send>
   18442:	2800      	cmp	r0, #0
   18444:	d156      	bne.n	184f4 <ip_interface_getaddrinfo+0x1ac>
   18446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1844a:	9303      	str	r3, [sp, #12]
   1844c:	4631      	mov	r1, r6
   1844e:	4620      	mov	r0, r4
   18450:	f7f9 fa00 	bl	11854 <bsd_os_timedwait>
   18454:	f8d8 3000 	ldr.w	r3, [r8]
   18458:	2b01      	cmp	r3, #1
   1845a:	d0f7      	beq.n	1844c <ip_interface_getaddrinfo+0x104>
   1845c:	4b31      	ldr	r3, [pc, #196]	; (18524 <ip_interface_getaddrinfo+0x1dc>)
   1845e:	6818      	ldr	r0, [r3, #0]
   18460:	2800      	cmp	r0, #0
   18462:	d13b      	bne.n	184dc <ip_interface_getaddrinfo+0x194>
   18464:	4b2e      	ldr	r3, [pc, #184]	; (18520 <ip_interface_getaddrinfo+0x1d8>)
   18466:	9a01      	ldr	r2, [sp, #4]
   18468:	681b      	ldr	r3, [r3, #0]
   1846a:	6013      	str	r3, [r2, #0]
   1846c:	e00c      	b.n	18488 <ip_interface_getaddrinfo+0x140>
   1846e:	46bb      	mov	fp, r7
   18470:	e79e      	b.n	183b0 <ip_interface_getaddrinfo+0x68>
   18472:	9c03      	ldr	r4, [sp, #12]
   18474:	2c00      	cmp	r4, #0
   18476:	d1bd      	bne.n	183f4 <ip_interface_getaddrinfo+0xac>
   18478:	200c      	movs	r0, #12
   1847a:	2300      	movs	r3, #0
   1847c:	f8c8 3000 	str.w	r3, [r8]
   18480:	b005      	add	sp, #20
   18482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18486:	2073      	movs	r0, #115	; 0x73
   18488:	b005      	add	sp, #20
   1848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1848e:	2016      	movs	r0, #22
   18490:	b005      	add	sp, #20
   18492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18496:	6891      	ldr	r1, [r2, #8]
   18498:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1849c:	d18e      	bne.n	183bc <ip_interface_getaddrinfo+0x74>
   1849e:	f240 2102 	movw	r1, #514	; 0x202
   184a2:	68d0      	ldr	r0, [r2, #12]
   184a4:	4288      	cmp	r0, r1
   184a6:	d189      	bne.n	183bc <ip_interface_getaddrinfo+0x74>
   184a8:	6991      	ldr	r1, [r2, #24]
   184aa:	2900      	cmp	r1, #0
   184ac:	d086      	beq.n	183bc <ip_interface_getaddrinfo+0x74>
   184ae:	6868      	ldr	r0, [r5, #4]
   184b0:	f7fe fa42 	bl	16938 <pdn_interface_pdn_id_get>
   184b4:	1c43      	adds	r3, r0, #1
   184b6:	d081      	beq.n	183bc <ip_interface_getaddrinfo+0x74>
   184b8:	4602      	mov	r2, r0
   184ba:	e781      	b.n	183c0 <ip_interface_getaddrinfo+0x78>
   184bc:	68a9      	ldr	r1, [r5, #8]
   184be:	2902      	cmp	r1, #2
   184c0:	f8c9 1000 	str.w	r1, [r9]
   184c4:	d006      	beq.n	184d4 <ip_interface_getaddrinfo+0x18c>
   184c6:	2a05      	cmp	r2, #5
   184c8:	d0a2      	beq.n	18410 <ip_interface_getaddrinfo+0xc8>
   184ca:	2a0a      	cmp	r2, #10
   184cc:	bf14      	ite	ne
   184ce:	2201      	movne	r2, #1
   184d0:	2202      	moveq	r2, #2
   184d2:	e79d      	b.n	18410 <ip_interface_getaddrinfo+0xc8>
   184d4:	2102      	movs	r1, #2
   184d6:	f8ca 1000 	str.w	r1, [sl]
   184da:	e7f4      	b.n	184c6 <ip_interface_getaddrinfo+0x17e>
   184dc:	4b11      	ldr	r3, [pc, #68]	; (18524 <ip_interface_getaddrinfo+0x1dc>)
   184de:	6818      	ldr	r0, [r3, #0]
   184e0:	2800      	cmp	r0, #0
   184e2:	d0d1      	beq.n	18488 <ip_interface_getaddrinfo+0x140>
   184e4:	e7c9      	b.n	1847a <ip_interface_getaddrinfo+0x132>
   184e6:	4629      	mov	r1, r5
   184e8:	2210      	movs	r2, #16
   184ea:	f104 0014 	add.w	r0, r4, #20
   184ee:	f005 f8b8 	bl	1d662 <memset>
   184f2:	e794      	b.n	1841e <ip_interface_getaddrinfo+0xd6>
   184f4:	2023      	movs	r0, #35	; 0x23
   184f6:	e7c0      	b.n	1847a <ip_interface_getaddrinfo+0x132>
   184f8:	202f      	movs	r0, #47	; 0x2f
   184fa:	f7f9 fa3f 	bl	1197c <bsd_os_errno_set>
   184fe:	68a2      	ldr	r2, [r4, #8]
   18500:	3210      	adds	r2, #16
   18502:	60a2      	str	r2, [r4, #8]
   18504:	b917      	cbnz	r7, 1850c <ip_interface_getaddrinfo+0x1c4>
   18506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1850a:	e7b6      	b.n	1847a <ip_interface_getaddrinfo+0x132>
   1850c:	6820      	ldr	r0, [r4, #0]
   1850e:	2800      	cmp	r0, #0
   18510:	d0f9      	beq.n	18506 <ip_interface_getaddrinfo+0x1be>
   18512:	465a      	mov	r2, fp
   18514:	4639      	mov	r1, r7
   18516:	f005 f87a 	bl	1d60e <memcpy>
   1851a:	e7f4      	b.n	18506 <ip_interface_getaddrinfo+0x1be>
   1851c:	20024e4a 	.word	0x20024e4a
   18520:	20020954 	.word	0x20020954
   18524:	2002094c 	.word	0x2002094c
   18528:	20020944 	.word	0x20020944
   1852c:	20020948 	.word	0x20020948
   18530:	20020950 	.word	0x20020950

00018534 <ip_interface_freeaddrinfo>:
   18534:	b538      	push	{r3, r4, r5, lr}
   18536:	4c0b      	ldr	r4, [pc, #44]	; (18564 <ip_interface_freeaddrinfo+0x30>)
   18538:	6823      	ldr	r3, [r4, #0]
   1853a:	2b02      	cmp	r3, #2
   1853c:	d000      	beq.n	18540 <ip_interface_freeaddrinfo+0xc>
   1853e:	bd38      	pop	{r3, r4, r5, pc}
   18540:	b130      	cbz	r0, 18550 <ip_interface_freeaddrinfo+0x1c>
   18542:	4605      	mov	r5, r0
   18544:	6940      	ldr	r0, [r0, #20]
   18546:	f7fb fac9 	bl	13adc <nrf_free>
   1854a:	4628      	mov	r0, r5
   1854c:	f7fb fac6 	bl	13adc <nrf_free>
   18550:	2300      	movs	r3, #0
   18552:	4a05      	ldr	r2, [pc, #20]	; (18568 <ip_interface_freeaddrinfo+0x34>)
   18554:	4905      	ldr	r1, [pc, #20]	; (1856c <ip_interface_freeaddrinfo+0x38>)
   18556:	6023      	str	r3, [r4, #0]
   18558:	6013      	str	r3, [r2, #0]
   1855a:	6808      	ldr	r0, [r1, #0]
   1855c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18560:	f7fb bb1c 	b.w	13b9c <rpc_ip_client_data_free>
   18564:	20020950 	.word	0x20020950
   18568:	2002094c 	.word	0x2002094c
   1856c:	20020958 	.word	0x20020958

00018570 <rpc_ip_event_handler>:
   18570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18574:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   18578:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1857c:	4605      	mov	r5, r0
   1857e:	b089      	sub	sp, #36	; 0x24
   18580:	460e      	mov	r6, r1
   18582:	68c0      	ldr	r0, [r0, #12]
   18584:	d05e      	beq.n	18644 <rpc_ip_event_handler+0xd4>
   18586:	0c04      	lsrs	r4, r0, #16
   18588:	4620      	mov	r0, r4
   1858a:	f000 fb75 	bl	18c78 <interface_socket_from_handle_get>
   1858e:	f248 030d 	movw	r3, #32781	; 0x800d
   18592:	429e      	cmp	r6, r3
   18594:	4607      	mov	r7, r0
   18596:	46a0      	mov	r8, r4
   18598:	d041      	beq.n	1861e <rpc_ip_event_handler+0xae>
   1859a:	2f00      	cmp	r7, #0
   1859c:	d04e      	beq.n	1863c <rpc_ip_event_handler+0xcc>
   1859e:	4640      	mov	r0, r8
   185a0:	4633      	mov	r3, r6
   185a2:	462a      	mov	r2, r5
   185a4:	4639      	mov	r1, r7
   185a6:	f7fb fead 	bl	14304 <tls_rpc_ip_event_handler>
   185aa:	2800      	cmp	r0, #0
   185ac:	d042      	beq.n	18634 <rpc_ip_event_handler+0xc4>
   185ae:	f248 0307 	movw	r3, #32775	; 0x8007
   185b2:	429e      	cmp	r6, r3
   185b4:	d961      	bls.n	1867a <rpc_ip_event_handler+0x10a>
   185b6:	f248 030c 	movw	r3, #32780	; 0x800c
   185ba:	429e      	cmp	r6, r3
   185bc:	f000 816b 	beq.w	18896 <rpc_ip_event_handler+0x326>
   185c0:	f240 8106 	bls.w	187d0 <rpc_ip_event_handler+0x260>
   185c4:	f249 0302 	movw	r3, #36866	; 0x9002
   185c8:	429e      	cmp	r6, r3
   185ca:	f000 808c 	beq.w	186e6 <rpc_ip_event_handler+0x176>
   185ce:	f249 0303 	movw	r3, #36867	; 0x9003
   185d2:	429e      	cmp	r6, r3
   185d4:	f000 8180 	beq.w	188d8 <rpc_ip_event_handler+0x368>
   185d8:	f249 0301 	movw	r3, #36865	; 0x9001
   185dc:	429e      	cmp	r6, r3
   185de:	d12d      	bne.n	1863c <rpc_ip_event_handler+0xcc>
   185e0:	683c      	ldr	r4, [r7, #0]
   185e2:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   185e6:	f000 81c3 	beq.w	18970 <rpc_ip_event_handler+0x400>
   185ea:	68ab      	ldr	r3, [r5, #8]
   185ec:	2b04      	cmp	r3, #4
   185ee:	f200 81eb 	bhi.w	189c8 <rpc_ip_event_handler+0x458>
   185f2:	2400      	movs	r4, #0
   185f4:	4626      	mov	r6, r4
   185f6:	6829      	ldr	r1, [r5, #0]
   185f8:	686a      	ldr	r2, [r5, #4]
   185fa:	e9cd 6406 	strd	r6, r4, [sp, #24]
   185fe:	e9cd 1204 	strd	r1, r2, [sp, #16]
   18602:	69f8      	ldr	r0, [r7, #28]
   18604:	a904      	add	r1, sp, #16
   18606:	6803      	ldr	r3, [r0, #0]
   18608:	685b      	ldr	r3, [r3, #4]
   1860a:	4798      	blx	r3
   1860c:	3001      	adds	r0, #1
   1860e:	f000 81cc 	beq.w	189aa <rpc_ip_event_handler+0x43a>
   18612:	683b      	ldr	r3, [r7, #0]
   18614:	2000      	movs	r0, #0
   18616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1861a:	603b      	str	r3, [r7, #0]
   1861c:	e00b      	b.n	18636 <rpc_ip_event_handler+0xc6>
   1861e:	f8df 9344 	ldr.w	r9, [pc, #836]	; 18964 <rpc_ip_event_handler+0x3f4>
   18622:	682f      	ldr	r7, [r5, #0]
   18624:	f8d9 3000 	ldr.w	r3, [r9]
   18628:	2b01      	cmp	r3, #1
   1862a:	d015      	beq.n	18658 <rpc_ip_event_handler+0xe8>
   1862c:	b117      	cbz	r7, 18634 <rpc_ip_event_handler+0xc4>
   1862e:	4638      	mov	r0, r7
   18630:	f7fb fab4 	bl	13b9c <rpc_ip_client_data_free>
   18634:	2000      	movs	r0, #0
   18636:	b009      	add	sp, #36	; 0x24
   18638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1863c:	6828      	ldr	r0, [r5, #0]
   1863e:	2800      	cmp	r0, #0
   18640:	d1f6      	bne.n	18630 <rpc_ip_event_handler+0xc0>
   18642:	e7f7      	b.n	18634 <rpc_ip_event_handler+0xc4>
   18644:	f000 face 	bl	18be4 <interface_from_internal_id_search>
   18648:	4680      	mov	r8, r0
   1864a:	f000 fb15 	bl	18c78 <interface_socket_from_handle_get>
   1864e:	4607      	mov	r7, r0
   18650:	4644      	mov	r4, r8
   18652:	2f00      	cmp	r7, #0
   18654:	d1a3      	bne.n	1859e <rpc_ip_event_handler+0x2e>
   18656:	e7f1      	b.n	1863c <rpc_ip_event_handler+0xcc>
   18658:	696b      	ldr	r3, [r5, #20]
   1865a:	2b00      	cmp	r3, #0
   1865c:	d048      	beq.n	186f0 <rpc_ip_event_handler+0x180>
   1865e:	2b10      	cmp	r3, #16
   18660:	bf96      	itet	ls
   18662:	4aba      	ldrls	r2, [pc, #744]	; (1894c <rpc_ip_event_handler+0x3dc>)
   18664:	212d      	movhi	r1, #45	; 0x2d
   18666:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   1866a:	2302      	movs	r3, #2
   1866c:	4ab8      	ldr	r2, [pc, #736]	; (18950 <rpc_ip_event_handler+0x3e0>)
   1866e:	6011      	str	r1, [r2, #0]
   18670:	f8c9 3000 	str.w	r3, [r9]
   18674:	2f00      	cmp	r7, #0
   18676:	d1da      	bne.n	1862e <rpc_ip_event_handler+0xbe>
   18678:	e7dc      	b.n	18634 <rpc_ip_event_handler+0xc4>
   1867a:	f248 0306 	movw	r3, #32774	; 0x8006
   1867e:	429e      	cmp	r6, r3
   18680:	f080 80e6 	bcs.w	18850 <rpc_ip_event_handler+0x2e0>
   18684:	f248 0302 	movw	r3, #32770	; 0x8002
   18688:	429e      	cmp	r6, r3
   1868a:	f000 80c8 	beq.w	1881e <rpc_ip_event_handler+0x2ae>
   1868e:	d918      	bls.n	186c2 <rpc_ip_event_handler+0x152>
   18690:	f248 0303 	movw	r3, #32771	; 0x8003
   18694:	429e      	cmp	r6, r3
   18696:	f000 8112 	beq.w	188be <rpc_ip_event_handler+0x34e>
   1869a:	f248 0305 	movw	r3, #32773	; 0x8005
   1869e:	429e      	cmp	r6, r3
   186a0:	d1cc      	bne.n	1863c <rpc_ip_event_handler+0xcc>
   186a2:	683b      	ldr	r3, [r7, #0]
   186a4:	b29b      	uxth	r3, r3
   186a6:	2b03      	cmp	r3, #3
   186a8:	d1c4      	bne.n	18634 <rpc_ip_event_handler+0xc4>
   186aa:	696b      	ldr	r3, [r5, #20]
   186ac:	2b00      	cmp	r3, #0
   186ae:	f000 817e 	beq.w	189ae <rpc_ip_event_handler+0x43e>
   186b2:	2b10      	cmp	r3, #16
   186b4:	f200 813b 	bhi.w	1892e <rpc_ip_event_handler+0x3be>
   186b8:	4aa4      	ldr	r2, [pc, #656]	; (1894c <rpc_ip_event_handler+0x3dc>)
   186ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   186be:	607b      	str	r3, [r7, #4]
   186c0:	e7b8      	b.n	18634 <rpc_ip_event_handler+0xc4>
   186c2:	f248 0301 	movw	r3, #32769	; 0x8001
   186c6:	429e      	cmp	r6, r3
   186c8:	d1b8      	bne.n	1863c <rpc_ip_event_handler+0xcc>
   186ca:	683b      	ldr	r3, [r7, #0]
   186cc:	2b01      	cmp	r3, #1
   186ce:	d1b1      	bne.n	18634 <rpc_ip_event_handler+0xc4>
   186d0:	6968      	ldr	r0, [r5, #20]
   186d2:	2800      	cmp	r0, #0
   186d4:	f000 8173 	beq.w	189be <rpc_ip_event_handler+0x44e>
   186d8:	2810      	cmp	r0, #16
   186da:	f200 8128 	bhi.w	1892e <rpc_ip_event_handler+0x3be>
   186de:	4b9b      	ldr	r3, [pc, #620]	; (1894c <rpc_ip_event_handler+0x3dc>)
   186e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   186e4:	e7eb      	b.n	186be <rpc_ip_event_handler+0x14e>
   186e6:	683b      	ldr	r3, [r7, #0]
   186e8:	b29b      	uxth	r3, r3
   186ea:	2b07      	cmp	r3, #7
   186ec:	d1a2      	bne.n	18634 <rpc_ip_event_handler+0xc4>
   186ee:	e790      	b.n	18612 <rpc_ip_event_handler+0xa2>
   186f0:	4b98      	ldr	r3, [pc, #608]	; (18954 <rpc_ip_event_handler+0x3e4>)
   186f2:	601f      	str	r7, [r3, #0]
   186f4:	69ac      	ldr	r4, [r5, #24]
   186f6:	0163      	lsls	r3, r4, #5
   186f8:	4618      	mov	r0, r3
   186fa:	9303      	str	r3, [sp, #12]
   186fc:	f7fb f9e4 	bl	13ac8 <nrf_malloc>
   18700:	9002      	str	r0, [sp, #8]
   18702:	2800      	cmp	r0, #0
   18704:	f000 8103 	beq.w	1890e <rpc_ip_event_handler+0x39e>
   18708:	00e5      	lsls	r5, r4, #3
   1870a:	1928      	adds	r0, r5, r4
   1870c:	0080      	lsls	r0, r0, #2
   1870e:	f7fb f9db 	bl	13ac8 <nrf_malloc>
   18712:	2800      	cmp	r0, #0
   18714:	f000 810d 	beq.w	18932 <rpc_ip_event_handler+0x3c2>
   18718:	2c00      	cmp	r4, #0
   1871a:	d078      	beq.n	1880e <rpc_ip_event_handler+0x29e>
   1871c:	f105 0210 	add.w	r2, r5, #16
   18720:	1883      	adds	r3, r0, r2
   18722:	9301      	str	r3, [sp, #4]
   18724:	9b02      	ldr	r3, [sp, #8]
   18726:	2404      	movs	r4, #4
   18728:	f8df a23c 	ldr.w	sl, [pc, #572]	; 18968 <rpc_ip_event_handler+0x3f8>
   1872c:	f8df b23c 	ldr.w	fp, [pc, #572]	; 1896c <rpc_ip_event_handler+0x3fc>
   18730:	f100 0810 	add.w	r8, r0, #16
   18734:	f103 0620 	add.w	r6, r3, #32
   18738:	e01d      	b.n	18776 <rpc_ip_event_handler+0x206>
   1873a:	220a      	movs	r2, #10
   1873c:	f848 2c0c 	str.w	r2, [r8, #-12]
   18740:	f04f 0224 	mov.w	r2, #36	; 0x24
   18744:	4640      	mov	r0, r8
   18746:	f808 2c10 	strb.w	r2, [r8, #-16]
   1874a:	f828 3c08 	strh.w	r3, [r8, #-8]
   1874e:	f856 2c10 	ldr.w	r2, [r6, #-16]
   18752:	f004 ff5c 	bl	1d60e <memcpy>
   18756:	f856 3c10 	ldr.w	r3, [r6, #-16]
   1875a:	f108 0808 	add.w	r8, r8, #8
   1875e:	441c      	add	r4, r3
   18760:	193b      	adds	r3, r7, r4
   18762:	f846 3c08 	str.w	r3, [r6, #-8]
   18766:	9b01      	ldr	r3, [sp, #4]
   18768:	f846 6c04 	str.w	r6, [r6, #-4]
   1876c:	4598      	cmp	r8, r3
   1876e:	442c      	add	r4, r5
   18770:	f106 0620 	add.w	r6, r6, #32
   18774:	d045      	beq.n	18802 <rpc_ip_event_handler+0x292>
   18776:	593b      	ldr	r3, [r7, r4]
   18778:	193a      	adds	r2, r7, r4
   1877a:	f846 3c20 	str.w	r3, [r6, #-32]
   1877e:	6853      	ldr	r3, [r2, #4]
   18780:	f8da 1000 	ldr.w	r1, [sl]
   18784:	2b02      	cmp	r3, #2
   18786:	bf14      	ite	ne
   18788:	2002      	movne	r0, #2
   1878a:	200a      	moveq	r0, #10
   1878c:	f8db 3000 	ldr.w	r3, [fp]
   18790:	e946 0107 	strd	r0, r1, [r6, #-28]
   18794:	f846 3c14 	str.w	r3, [r6, #-20]
   18798:	8a10      	ldrh	r0, [r2, #16]
   1879a:	f1a8 0310 	sub.w	r3, r8, #16
   1879e:	f846 0c10 	str.w	r0, [r6, #-16]
   187a2:	8a55      	ldrh	r5, [r2, #18]
   187a4:	f846 3c0c 	str.w	r3, [r6, #-12]
   187a8:	4b6b      	ldr	r3, [pc, #428]	; (18958 <rpc_ip_event_handler+0x3e8>)
   187aa:	3414      	adds	r4, #20
   187ac:	2804      	cmp	r0, #4
   187ae:	eb07 0104 	add.w	r1, r7, r4
   187b2:	881b      	ldrh	r3, [r3, #0]
   187b4:	d1c1      	bne.n	1873a <rpc_ip_event_handler+0x1ca>
   187b6:	2210      	movs	r2, #16
   187b8:	2002      	movs	r0, #2
   187ba:	f828 3c08 	strh.w	r3, [r8, #-8]
   187be:	f848 0c0c 	str.w	r0, [r8, #-12]
   187c2:	f808 2c10 	strb.w	r2, [r8, #-16]
   187c6:	f856 2c10 	ldr.w	r2, [r6, #-16]
   187ca:	f1a8 0004 	sub.w	r0, r8, #4
   187ce:	e7c0      	b.n	18752 <rpc_ip_event_handler+0x1e2>
   187d0:	f248 0308 	movw	r3, #32776	; 0x8008
   187d4:	429e      	cmp	r6, r3
   187d6:	d04e      	beq.n	18876 <rpc_ip_event_handler+0x306>
   187d8:	f248 0309 	movw	r3, #32777	; 0x8009
   187dc:	429e      	cmp	r6, r3
   187de:	f47f af2d 	bne.w	1863c <rpc_ip_event_handler+0xcc>
   187e2:	683b      	ldr	r3, [r7, #0]
   187e4:	b29b      	uxth	r3, r3
   187e6:	2b0d      	cmp	r3, #13
   187e8:	f47f af24 	bne.w	18634 <rpc_ip_event_handler+0xc4>
   187ec:	6968      	ldr	r0, [r5, #20]
   187ee:	2800      	cmp	r0, #0
   187f0:	f47f af72 	bne.w	186d8 <rpc_ip_event_handler+0x168>
   187f4:	683b      	ldr	r3, [r7, #0]
   187f6:	0c1b      	lsrs	r3, r3, #16
   187f8:	041b      	lsls	r3, r3, #16
   187fa:	f043 030e 	orr.w	r3, r3, #14
   187fe:	603b      	str	r3, [r7, #0]
   18800:	e719      	b.n	18636 <rpc_ip_event_handler+0xc6>
   18802:	2200      	movs	r2, #0
   18804:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   18808:	440b      	add	r3, r1
   1880a:	f843 2c04 	str.w	r2, [r3, #-4]
   1880e:	2202      	movs	r2, #2
   18810:	4b52      	ldr	r3, [pc, #328]	; (1895c <rpc_ip_event_handler+0x3ec>)
   18812:	f8c9 2000 	str.w	r2, [r9]
   18816:	9a02      	ldr	r2, [sp, #8]
   18818:	2000      	movs	r0, #0
   1881a:	601a      	str	r2, [r3, #0]
   1881c:	e70b      	b.n	18636 <rpc_ip_event_handler+0xc6>
   1881e:	683b      	ldr	r3, [r7, #0]
   18820:	0099      	lsls	r1, r3, #2
   18822:	f57f af07 	bpl.w	18634 <rpc_ip_event_handler+0xc4>
   18826:	683b      	ldr	r3, [r7, #0]
   18828:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1882c:	603b      	str	r3, [r7, #0]
   1882e:	6968      	ldr	r0, [r5, #20]
   18830:	2800      	cmp	r0, #0
   18832:	f000 80a2 	beq.w	1897a <rpc_ip_event_handler+0x40a>
   18836:	2810      	cmp	r0, #16
   18838:	bf8e      	itee	hi
   1883a:	232d      	movhi	r3, #45	; 0x2d
   1883c:	4b43      	ldrls	r3, [pc, #268]	; (1894c <rpc_ip_event_handler+0x3dc>)
   1883e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   18842:	2000      	movs	r0, #0
   18844:	607b      	str	r3, [r7, #4]
   18846:	683b      	ldr	r3, [r7, #0]
   18848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1884c:	603b      	str	r3, [r7, #0]
   1884e:	e6f2      	b.n	18636 <rpc_ip_event_handler+0xc6>
   18850:	683b      	ldr	r3, [r7, #0]
   18852:	029a      	lsls	r2, r3, #10
   18854:	f57f aeee 	bpl.w	18634 <rpc_ip_event_handler+0xc4>
   18858:	696b      	ldr	r3, [r5, #20]
   1885a:	2b00      	cmp	r3, #0
   1885c:	f000 809c 	beq.w	18998 <rpc_ip_event_handler+0x428>
   18860:	2b6b      	cmp	r3, #107	; 0x6b
   18862:	f47f af26 	bne.w	186b2 <rpc_ip_event_handler+0x142>
   18866:	693b      	ldr	r3, [r7, #16]
   18868:	2b01      	cmp	r3, #1
   1886a:	f000 80b1 	beq.w	189d0 <rpc_ip_event_handler+0x460>
   1886e:	230c      	movs	r3, #12
   18870:	2000      	movs	r0, #0
   18872:	607b      	str	r3, [r7, #4]
   18874:	e6df      	b.n	18636 <rpc_ip_event_handler+0xc6>
   18876:	683b      	ldr	r3, [r7, #0]
   18878:	b29b      	uxth	r3, r3
   1887a:	2b06      	cmp	r3, #6
   1887c:	f47f aeda 	bne.w	18634 <rpc_ip_event_handler+0xc4>
   18880:	6968      	ldr	r0, [r5, #20]
   18882:	2800      	cmp	r0, #0
   18884:	f47f af28 	bne.w	186d8 <rpc_ip_event_handler+0x168>
   18888:	683b      	ldr	r3, [r7, #0]
   1888a:	0c1b      	lsrs	r3, r3, #16
   1888c:	041b      	lsls	r3, r3, #16
   1888e:	f043 0307 	orr.w	r3, r3, #7
   18892:	603b      	str	r3, [r7, #0]
   18894:	e6cf      	b.n	18636 <rpc_ip_event_handler+0xc6>
   18896:	683b      	ldr	r3, [r7, #0]
   18898:	b29b      	uxth	r3, r3
   1889a:	2b08      	cmp	r3, #8
   1889c:	f47f aeca 	bne.w	18634 <rpc_ip_event_handler+0xc4>
   188a0:	696b      	ldr	r3, [r5, #20]
   188a2:	2b00      	cmp	r3, #0
   188a4:	f47f af05 	bne.w	186b2 <rpc_ip_event_handler+0x142>
   188a8:	4b2d      	ldr	r3, [pc, #180]	; (18960 <rpc_ip_event_handler+0x3f0>)
   188aa:	2001      	movs	r0, #1
   188ac:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   188b0:	683b      	ldr	r3, [r7, #0]
   188b2:	0c1b      	lsrs	r3, r3, #16
   188b4:	041b      	lsls	r3, r3, #16
   188b6:	f043 0309 	orr.w	r3, r3, #9
   188ba:	603b      	str	r3, [r7, #0]
   188bc:	e6bb      	b.n	18636 <rpc_ip_event_handler+0xc6>
   188be:	683b      	ldr	r3, [r7, #0]
   188c0:	025b      	lsls	r3, r3, #9
   188c2:	f57f aeb7 	bpl.w	18634 <rpc_ip_event_handler+0xc4>
   188c6:	6968      	ldr	r0, [r5, #20]
   188c8:	2800      	cmp	r0, #0
   188ca:	f47f af05 	bne.w	186d8 <rpc_ip_event_handler+0x168>
   188ce:	683b      	ldr	r3, [r7, #0]
   188d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   188d4:	603b      	str	r3, [r7, #0]
   188d6:	e6ae      	b.n	18636 <rpc_ip_event_handler+0xc6>
   188d8:	683b      	ldr	r3, [r7, #0]
   188da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   188de:	603b      	str	r3, [r7, #0]
   188e0:	683b      	ldr	r3, [r7, #0]
   188e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   188e6:	603b      	str	r3, [r7, #0]
   188e8:	683b      	ldr	r3, [r7, #0]
   188ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   188ee:	603b      	str	r3, [r7, #0]
   188f0:	692b      	ldr	r3, [r5, #16]
   188f2:	2b6c      	cmp	r3, #108	; 0x6c
   188f4:	d021      	beq.n	1893a <rpc_ip_event_handler+0x3ca>
   188f6:	2b10      	cmp	r3, #16
   188f8:	bf8c      	ite	hi
   188fa:	232d      	movhi	r3, #45	; 0x2d
   188fc:	4a13      	ldrls	r2, [pc, #76]	; (1894c <rpc_ip_event_handler+0x3dc>)
   188fe:	f04f 0000 	mov.w	r0, #0
   18902:	bf98      	it	ls
   18904:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   18908:	607b      	str	r3, [r7, #4]
   1890a:	60bb      	str	r3, [r7, #8]
   1890c:	e693      	b.n	18636 <rpc_ip_event_handler+0xc6>
   1890e:	f7fb f8e5 	bl	13adc <nrf_free>
   18912:	200c      	movs	r0, #12
   18914:	2302      	movs	r3, #2
   18916:	490e      	ldr	r1, [pc, #56]	; (18950 <rpc_ip_event_handler+0x3e0>)
   18918:	4a10      	ldr	r2, [pc, #64]	; (1895c <rpc_ip_event_handler+0x3ec>)
   1891a:	6008      	str	r0, [r1, #0]
   1891c:	682f      	ldr	r7, [r5, #0]
   1891e:	9902      	ldr	r1, [sp, #8]
   18920:	6011      	str	r1, [r2, #0]
   18922:	f8c9 3000 	str.w	r3, [r9]
   18926:	2f00      	cmp	r7, #0
   18928:	f47f ae81 	bne.w	1862e <rpc_ip_event_handler+0xbe>
   1892c:	e682      	b.n	18634 <rpc_ip_event_handler+0xc4>
   1892e:	232d      	movs	r3, #45	; 0x2d
   18930:	e6c5      	b.n	186be <rpc_ip_event_handler+0x14e>
   18932:	220c      	movs	r2, #12
   18934:	4b06      	ldr	r3, [pc, #24]	; (18950 <rpc_ip_event_handler+0x3e0>)
   18936:	601a      	str	r2, [r3, #0]
   18938:	e769      	b.n	1880e <rpc_ip_event_handler+0x29e>
   1893a:	2239      	movs	r2, #57	; 0x39
   1893c:	683b      	ldr	r3, [r7, #0]
   1893e:	2000      	movs	r0, #0
   18940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   18944:	603b      	str	r3, [r7, #0]
   18946:	607a      	str	r2, [r7, #4]
   18948:	60ba      	str	r2, [r7, #8]
   1894a:	e674      	b.n	18636 <rpc_ip_event_handler+0xc6>
   1894c:	0001f82c 	.word	0x0001f82c
   18950:	2002094c 	.word	0x2002094c
   18954:	20020958 	.word	0x20020958
   18958:	20024e4a 	.word	0x20024e4a
   1895c:	20020954 	.word	0x20020954
   18960:	2002095c 	.word	0x2002095c
   18964:	20020950 	.word	0x20020950
   18968:	20020948 	.word	0x20020948
   1896c:	20020944 	.word	0x20020944
   18970:	6828      	ldr	r0, [r5, #0]
   18972:	f7fb f913 	bl	13b9c <rpc_ip_client_data_free>
   18976:	4620      	mov	r0, r4
   18978:	e65d      	b.n	18636 <rpc_ip_event_handler+0xc6>
   1897a:	683b      	ldr	r3, [r7, #0]
   1897c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18980:	603b      	str	r3, [r7, #0]
   18982:	683b      	ldr	r3, [r7, #0]
   18984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18988:	603b      	str	r3, [r7, #0]
   1898a:	683b      	ldr	r3, [r7, #0]
   1898c:	0c1b      	lsrs	r3, r3, #16
   1898e:	041b      	lsls	r3, r3, #16
   18990:	f043 0305 	orr.w	r3, r3, #5
   18994:	603b      	str	r3, [r7, #0]
   18996:	e64e      	b.n	18636 <rpc_ip_event_handler+0xc6>
   18998:	683b      	ldr	r3, [r7, #0]
   1899a:	4a28      	ldr	r2, [pc, #160]	; (18a3c <rpc_ip_event_handler+0x4cc>)
   1899c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   189a0:	603b      	str	r3, [r7, #0]
   189a2:	2001      	movs	r0, #1
   189a4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   189a8:	e645      	b.n	18636 <rpc_ip_event_handler+0xc6>
   189aa:	2002      	movs	r0, #2
   189ac:	e643      	b.n	18636 <rpc_ip_event_handler+0xc6>
   189ae:	683b      	ldr	r3, [r7, #0]
   189b0:	2000      	movs	r0, #0
   189b2:	0c1b      	lsrs	r3, r3, #16
   189b4:	041b      	lsls	r3, r3, #16
   189b6:	f043 0304 	orr.w	r3, r3, #4
   189ba:	603b      	str	r3, [r7, #0]
   189bc:	e63b      	b.n	18636 <rpc_ip_event_handler+0xc6>
   189be:	2302      	movs	r3, #2
   189c0:	603b      	str	r3, [r7, #0]
   189c2:	69ab      	ldr	r3, [r5, #24]
   189c4:	61bb      	str	r3, [r7, #24]
   189c6:	e636      	b.n	18636 <rpc_ip_event_handler+0xc6>
   189c8:	8a6c      	ldrh	r4, [r5, #18]
   189ca:	b94c      	cbnz	r4, 189e0 <rpc_ip_event_handler+0x470>
   189cc:	4626      	mov	r6, r4
   189ce:	e612      	b.n	185f6 <rpc_ip_event_handler+0x86>
   189d0:	220c      	movs	r2, #12
   189d2:	683b      	ldr	r3, [r7, #0]
   189d4:	2000      	movs	r0, #0
   189d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   189da:	603b      	str	r3, [r7, #0]
   189dc:	607a      	str	r2, [r7, #4]
   189de:	e62a      	b.n	18636 <rpc_ip_event_handler+0xc6>
   189e0:	2024      	movs	r0, #36	; 0x24
   189e2:	f7fb f871 	bl	13ac8 <nrf_malloc>
   189e6:	4606      	mov	r6, r0
   189e8:	b158      	cbz	r0, 18a02 <rpc_ip_event_handler+0x492>
   189ea:	8a6a      	ldrh	r2, [r5, #18]
   189ec:	2a10      	cmp	r2, #16
   189ee:	d018      	beq.n	18a22 <rpc_ip_event_handler+0x4b2>
   189f0:	2a04      	cmp	r2, #4
   189f2:	d00a      	beq.n	18a0a <rpc_ip_event_handler+0x49a>
   189f4:	6828      	ldr	r0, [r5, #0]
   189f6:	f7fb f8d1 	bl	13b9c <rpc_ip_client_data_free>
   189fa:	4630      	mov	r0, r6
   189fc:	f7fb f86e 	bl	13adc <nrf_free>
   18a00:	e618      	b.n	18634 <rpc_ip_event_handler+0xc4>
   18a02:	6828      	ldr	r0, [r5, #0]
   18a04:	f7fb f8ca 	bl	13b9c <rpc_ip_client_data_free>
   18a08:	e614      	b.n	18634 <rpc_ip_event_handler+0xc4>
   18a0a:	2302      	movs	r3, #2
   18a0c:	2410      	movs	r4, #16
   18a0e:	6043      	str	r3, [r0, #4]
   18a10:	7004      	strb	r4, [r0, #0]
   18a12:	8a2b      	ldrh	r3, [r5, #16]
   18a14:	f105 0114 	add.w	r1, r5, #20
   18a18:	8103      	strh	r3, [r0, #8]
   18a1a:	300c      	adds	r0, #12
   18a1c:	f004 fdf7 	bl	1d60e <memcpy>
   18a20:	e5e9      	b.n	185f6 <rpc_ip_event_handler+0x86>
   18a22:	230a      	movs	r3, #10
   18a24:	2424      	movs	r4, #36	; 0x24
   18a26:	6043      	str	r3, [r0, #4]
   18a28:	7004      	strb	r4, [r0, #0]
   18a2a:	8a2b      	ldrh	r3, [r5, #16]
   18a2c:	f105 0114 	add.w	r1, r5, #20
   18a30:	8103      	strh	r3, [r0, #8]
   18a32:	3010      	adds	r0, #16
   18a34:	f004 fdeb 	bl	1d60e <memcpy>
   18a38:	e5dd      	b.n	185f6 <rpc_ip_event_handler+0x86>
   18a3a:	bf00      	nop
   18a3c:	2002095c 	.word	0x2002095c

00018a40 <interface_init>:
   18a40:	b508      	push	{r3, lr}
   18a42:	f44f 7290 	mov.w	r2, #288	; 0x120
   18a46:	2100      	movs	r1, #0
   18a48:	4802      	ldr	r0, [pc, #8]	; (18a54 <interface_init+0x14>)
   18a4a:	f004 fe0a 	bl	1d662 <memset>
   18a4e:	2000      	movs	r0, #0
   18a50:	bd08      	pop	{r3, pc}
   18a52:	bf00      	nop
   18a54:	20026594 	.word	0x20026594

00018a58 <interface_socket_allocate>:
   18a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a5a:	4b29      	ldr	r3, [pc, #164]	; (18b00 <interface_socket_allocate+0xa8>)
   18a5c:	4606      	mov	r6, r0
   18a5e:	681d      	ldr	r5, [r3, #0]
   18a60:	4608      	mov	r0, r1
   18a62:	b1e5      	cbz	r5, 18a9e <interface_socket_allocate+0x46>
   18a64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   18a66:	2c00      	cmp	r4, #0
   18a68:	d03d      	beq.n	18ae6 <interface_socket_allocate+0x8e>
   18a6a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   18a6c:	2c00      	cmp	r4, #0
   18a6e:	d03c      	beq.n	18aea <interface_socket_allocate+0x92>
   18a70:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   18a72:	2c00      	cmp	r4, #0
   18a74:	d03b      	beq.n	18aee <interface_socket_allocate+0x96>
   18a76:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   18a7a:	b179      	cbz	r1, 18a9c <interface_socket_allocate+0x44>
   18a7c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   18a80:	b3b9      	cbz	r1, 18af2 <interface_socket_allocate+0x9a>
   18a82:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   18a86:	b3b1      	cbz	r1, 18af6 <interface_socket_allocate+0x9e>
   18a88:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   18a8c:	b3a9      	cbz	r1, 18afa <interface_socket_allocate+0xa2>
   18a8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18a92:	200c      	movs	r0, #12
   18a94:	f7f8 ff72 	bl	1197c <bsd_os_errno_set>
   18a98:	4628      	mov	r0, r5
   18a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a9c:	2504      	movs	r5, #4
   18a9e:	f04f 0c01 	mov.w	ip, #1
   18aa2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   18aa6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   18aaa:	00a4      	lsls	r4, r4, #2
   18aac:	f843 c004 	str.w	ip, [r3, r4]
   18ab0:	441c      	add	r4, r3
   18ab2:	4611      	mov	r1, r2
   18ab4:	61a7      	str	r7, [r4, #24]
   18ab6:	4622      	mov	r2, r4
   18ab8:	f001 ffde 	bl	1aa78 <packet_handler_create>
   18abc:	4603      	mov	r3, r0
   18abe:	61e0      	str	r0, [r4, #28]
   18ac0:	b158      	cbz	r0, 18ada <interface_socket_allocate+0x82>
   18ac2:	681b      	ldr	r3, [r3, #0]
   18ac4:	681b      	ldr	r3, [r3, #0]
   18ac6:	4798      	blx	r3
   18ac8:	b910      	cbnz	r0, 18ad0 <interface_socket_allocate+0x78>
   18aca:	6034      	str	r4, [r6, #0]
   18acc:	4628      	mov	r0, r5
   18ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ad0:	69e0      	ldr	r0, [r4, #28]
   18ad2:	f001 fff1 	bl	1aab8 <packet_handler_delete>
   18ad6:	2300      	movs	r3, #0
   18ad8:	61e3      	str	r3, [r4, #28]
   18ada:	4620      	mov	r0, r4
   18adc:	2224      	movs	r2, #36	; 0x24
   18ade:	2100      	movs	r1, #0
   18ae0:	f004 fdbf 	bl	1d662 <memset>
   18ae4:	e7d3      	b.n	18a8e <interface_socket_allocate+0x36>
   18ae6:	2501      	movs	r5, #1
   18ae8:	e7d9      	b.n	18a9e <interface_socket_allocate+0x46>
   18aea:	2502      	movs	r5, #2
   18aec:	e7d7      	b.n	18a9e <interface_socket_allocate+0x46>
   18aee:	2503      	movs	r5, #3
   18af0:	e7d5      	b.n	18a9e <interface_socket_allocate+0x46>
   18af2:	2505      	movs	r5, #5
   18af4:	e7d3      	b.n	18a9e <interface_socket_allocate+0x46>
   18af6:	2506      	movs	r5, #6
   18af8:	e7d1      	b.n	18a9e <interface_socket_allocate+0x46>
   18afa:	2507      	movs	r5, #7
   18afc:	e7cf      	b.n	18a9e <interface_socket_allocate+0x46>
   18afe:	bf00      	nop
   18b00:	20026594 	.word	0x20026594

00018b04 <interface_socket_free>:
   18b04:	2807      	cmp	r0, #7
   18b06:	d900      	bls.n	18b0a <interface_socket_free+0x6>
   18b08:	4770      	bx	lr
   18b0a:	b510      	push	{r4, lr}
   18b0c:	4c07      	ldr	r4, [pc, #28]	; (18b2c <interface_socket_free+0x28>)
   18b0e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18b12:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   18b16:	69e0      	ldr	r0, [r4, #28]
   18b18:	b108      	cbz	r0, 18b1e <interface_socket_free+0x1a>
   18b1a:	f001 ffcd 	bl	1aab8 <packet_handler_delete>
   18b1e:	4620      	mov	r0, r4
   18b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18b24:	2224      	movs	r2, #36	; 0x24
   18b26:	2100      	movs	r1, #0
   18b28:	f004 bd9b 	b.w	1d662 <memset>
   18b2c:	20026594 	.word	0x20026594

00018b30 <interface_socket_packet_handler_update>:
   18b30:	2807      	cmp	r0, #7
   18b32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b36:	d81e      	bhi.n	18b76 <interface_socket_packet_handler_update+0x46>
   18b38:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   18b3c:	4e17      	ldr	r6, [pc, #92]	; (18b9c <interface_socket_packet_handler_update+0x6c>)
   18b3e:	eb08 0300 	add.w	r3, r8, r0
   18b42:	009b      	lsls	r3, r3, #2
   18b44:	58f4      	ldr	r4, [r6, r3]
   18b46:	18f5      	adds	r5, r6, r3
   18b48:	b1ac      	cbz	r4, 18b76 <interface_socket_packet_handler_update+0x46>
   18b4a:	460b      	mov	r3, r1
   18b4c:	4604      	mov	r4, r0
   18b4e:	4611      	mov	r1, r2
   18b50:	4618      	mov	r0, r3
   18b52:	462a      	mov	r2, r5
   18b54:	f8d5 901c 	ldr.w	r9, [r5, #28]
   18b58:	f001 ff8e 	bl	1aa78 <packet_handler_create>
   18b5c:	61e8      	str	r0, [r5, #28]
   18b5e:	b1d0      	cbz	r0, 18b96 <interface_socket_packet_handler_update+0x66>
   18b60:	6803      	ldr	r3, [r0, #0]
   18b62:	681b      	ldr	r3, [r3, #0]
   18b64:	4798      	blx	r3
   18b66:	4607      	mov	r7, r0
   18b68:	b948      	cbnz	r0, 18b7e <interface_socket_packet_handler_update+0x4e>
   18b6a:	4648      	mov	r0, r9
   18b6c:	f001 ffa4 	bl	1aab8 <packet_handler_delete>
   18b70:	4638      	mov	r0, r7
   18b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18b76:	2705      	movs	r7, #5
   18b78:	4638      	mov	r0, r7
   18b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18b7e:	69e8      	ldr	r0, [r5, #28]
   18b80:	f001 ff9a 	bl	1aab8 <packet_handler_delete>
   18b84:	eb08 0004 	add.w	r0, r8, r4
   18b88:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   18b8c:	f8c6 901c 	str.w	r9, [r6, #28]
   18b90:	4638      	mov	r0, r7
   18b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18b96:	2704      	movs	r7, #4
   18b98:	e7f4      	b.n	18b84 <interface_socket_packet_handler_update+0x54>
   18b9a:	bf00      	nop
   18b9c:	20026594 	.word	0x20026594

00018ba0 <interface_socket_wait>:
   18ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ba2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18ba6:	4c0e      	ldr	r4, [pc, #56]	; (18be0 <interface_socket_wait+0x40>)
   18ba8:	0080      	lsls	r0, r0, #2
   18baa:	5825      	ldr	r5, [r4, r0]
   18bac:	b083      	sub	sp, #12
   18bae:	4015      	ands	r5, r2
   18bb0:	428d      	cmp	r5, r1
   18bb2:	9301      	str	r3, [sp, #4]
   18bb4:	4404      	add	r4, r0
   18bb6:	d010      	beq.n	18bda <interface_socket_wait+0x3a>
   18bb8:	6863      	ldr	r3, [r4, #4]
   18bba:	b973      	cbnz	r3, 18bda <interface_socket_wait+0x3a>
   18bbc:	460f      	mov	r7, r1
   18bbe:	4616      	mov	r6, r2
   18bc0:	4625      	mov	r5, r4
   18bc2:	e006      	b.n	18bd2 <interface_socket_wait+0x32>
   18bc4:	686b      	ldr	r3, [r5, #4]
   18bc6:	b943      	cbnz	r3, 18bda <interface_socket_wait+0x3a>
   18bc8:	a901      	add	r1, sp, #4
   18bca:	4620      	mov	r0, r4
   18bcc:	f7f8 fe42 	bl	11854 <bsd_os_timedwait>
   18bd0:	b920      	cbnz	r0, 18bdc <interface_socket_wait+0x3c>
   18bd2:	682b      	ldr	r3, [r5, #0]
   18bd4:	4033      	ands	r3, r6
   18bd6:	42bb      	cmp	r3, r7
   18bd8:	d1f4      	bne.n	18bc4 <interface_socket_wait+0x24>
   18bda:	2000      	movs	r0, #0
   18bdc:	b003      	add	sp, #12
   18bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18be0:	20026594 	.word	0x20026594

00018be4 <interface_from_internal_id_search>:
   18be4:	4b23      	ldr	r3, [pc, #140]	; (18c74 <interface_from_internal_id_search+0x90>)
   18be6:	681a      	ldr	r2, [r3, #0]
   18be8:	b112      	cbz	r2, 18bf0 <interface_from_internal_id_search+0xc>
   18bea:	699a      	ldr	r2, [r3, #24]
   18bec:	4282      	cmp	r2, r0
   18bee:	d032      	beq.n	18c56 <interface_from_internal_id_search+0x72>
   18bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18bf2:	b112      	cbz	r2, 18bfa <interface_from_internal_id_search+0x16>
   18bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18bf6:	4282      	cmp	r2, r0
   18bf8:	d02f      	beq.n	18c5a <interface_from_internal_id_search+0x76>
   18bfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18bfc:	b112      	cbz	r2, 18c04 <interface_from_internal_id_search+0x20>
   18bfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18c00:	4282      	cmp	r2, r0
   18c02:	d02c      	beq.n	18c5e <interface_from_internal_id_search+0x7a>
   18c04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18c06:	b11a      	cbz	r2, 18c10 <interface_from_internal_id_search+0x2c>
   18c08:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   18c0c:	4282      	cmp	r2, r0
   18c0e:	d028      	beq.n	18c62 <interface_from_internal_id_search+0x7e>
   18c10:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   18c14:	b11a      	cbz	r2, 18c1e <interface_from_internal_id_search+0x3a>
   18c16:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   18c1a:	4282      	cmp	r2, r0
   18c1c:	d023      	beq.n	18c66 <interface_from_internal_id_search+0x82>
   18c1e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18c22:	b11a      	cbz	r2, 18c2c <interface_from_internal_id_search+0x48>
   18c24:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   18c28:	4282      	cmp	r2, r0
   18c2a:	d01e      	beq.n	18c6a <interface_from_internal_id_search+0x86>
   18c2c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18c30:	b11a      	cbz	r2, 18c3a <interface_from_internal_id_search+0x56>
   18c32:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   18c36:	4282      	cmp	r2, r0
   18c38:	d019      	beq.n	18c6e <interface_from_internal_id_search+0x8a>
   18c3a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18c3e:	b13a      	cbz	r2, 18c50 <interface_from_internal_id_search+0x6c>
   18c40:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   18c44:	4283      	cmp	r3, r0
   18c46:	bf14      	ite	ne
   18c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18c4c:	2007      	moveq	r0, #7
   18c4e:	4770      	bx	lr
   18c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c54:	4770      	bx	lr
   18c56:	2000      	movs	r0, #0
   18c58:	4770      	bx	lr
   18c5a:	2001      	movs	r0, #1
   18c5c:	4770      	bx	lr
   18c5e:	2002      	movs	r0, #2
   18c60:	4770      	bx	lr
   18c62:	2003      	movs	r0, #3
   18c64:	4770      	bx	lr
   18c66:	2004      	movs	r0, #4
   18c68:	4770      	bx	lr
   18c6a:	2005      	movs	r0, #5
   18c6c:	4770      	bx	lr
   18c6e:	2006      	movs	r0, #6
   18c70:	4770      	bx	lr
   18c72:	bf00      	nop
   18c74:	20026594 	.word	0x20026594

00018c78 <interface_socket_from_handle_get>:
   18c78:	2807      	cmp	r0, #7
   18c7a:	d807      	bhi.n	18c8c <interface_socket_from_handle_get+0x14>
   18c7c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18c80:	4b03      	ldr	r3, [pc, #12]	; (18c90 <interface_socket_from_handle_get+0x18>)
   18c82:	0080      	lsls	r0, r0, #2
   18c84:	581a      	ldr	r2, [r3, r0]
   18c86:	b10a      	cbz	r2, 18c8c <interface_socket_from_handle_get+0x14>
   18c88:	4418      	add	r0, r3
   18c8a:	4770      	bx	lr
   18c8c:	2000      	movs	r0, #0
   18c8e:	4770      	bx	lr
   18c90:	20026594 	.word	0x20026594

00018c94 <interface_socket_event_get>:
   18c94:	b119      	cbz	r1, 18c9e <interface_socket_event_get+0xa>
   18c96:	2807      	cmp	r0, #7
   18c98:	d902      	bls.n	18ca0 <interface_socket_event_get+0xc>
   18c9a:	2310      	movs	r3, #16
   18c9c:	600b      	str	r3, [r1, #0]
   18c9e:	4770      	bx	lr
   18ca0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18ca4:	4b07      	ldr	r3, [pc, #28]	; (18cc4 <interface_socket_event_get+0x30>)
   18ca6:	0080      	lsls	r0, r0, #2
   18ca8:	581a      	ldr	r2, [r3, r0]
   18caa:	2a00      	cmp	r2, #0
   18cac:	d0f5      	beq.n	18c9a <interface_socket_event_get+0x6>
   18cae:	581b      	ldr	r3, [r3, r0]
   18cb0:	0c1b      	lsrs	r3, r3, #16
   18cb2:	f003 020a 	and.w	r2, r3, #10
   18cb6:	2a0a      	cmp	r2, #10
   18cb8:	bf14      	ite	ne
   18cba:	f003 030f 	andne.w	r3, r3, #15
   18cbe:	f003 030d 	andeq.w	r3, r3, #13
   18cc2:	e7eb      	b.n	18c9c <interface_socket_event_get+0x8>
   18cc4:	20026594 	.word	0x20026594

00018cc8 <interface_socket_setopt>:
   18cc8:	2807      	cmp	r0, #7
   18cca:	b570      	push	{r4, r5, r6, lr}
   18ccc:	d827      	bhi.n	18d1e <interface_socket_setopt+0x56>
   18cce:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18cd2:	4c16      	ldr	r4, [pc, #88]	; (18d2c <interface_socket_setopt+0x64>)
   18cd4:	0080      	lsls	r0, r0, #2
   18cd6:	5825      	ldr	r5, [r4, r0]
   18cd8:	b30d      	cbz	r5, 18d1e <interface_socket_setopt+0x56>
   18cda:	2901      	cmp	r1, #1
   18cdc:	d119      	bne.n	18d12 <interface_socket_setopt+0x4a>
   18cde:	2a14      	cmp	r2, #20
   18ce0:	d117      	bne.n	18d12 <interface_socket_setopt+0x4a>
   18ce2:	b183      	cbz	r3, 18d06 <interface_socket_setopt+0x3e>
   18ce4:	9a04      	ldr	r2, [sp, #16]
   18ce6:	2a08      	cmp	r2, #8
   18ce8:	d10d      	bne.n	18d06 <interface_socket_setopt+0x3e>
   18cea:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   18cee:	685a      	ldr	r2, [r3, #4]
   18cf0:	4e0f      	ldr	r6, [pc, #60]	; (18d30 <interface_socket_setopt+0x68>)
   18cf2:	6819      	ldr	r1, [r3, #0]
   18cf4:	fba6 2302 	umull	r2, r3, r6, r2
   18cf8:	099b      	lsrs	r3, r3, #6
   18cfa:	fb05 3301 	mla	r3, r5, r1, r3
   18cfe:	4420      	add	r0, r4
   18d00:	6203      	str	r3, [r0, #32]
   18d02:	2000      	movs	r0, #0
   18d04:	bd70      	pop	{r4, r5, r6, pc}
   18d06:	2016      	movs	r0, #22
   18d08:	f7f8 fe38 	bl	1197c <bsd_os_errno_set>
   18d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d10:	bd70      	pop	{r4, r5, r6, pc}
   18d12:	202a      	movs	r0, #42	; 0x2a
   18d14:	f7f8 fe32 	bl	1197c <bsd_os_errno_set>
   18d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d1c:	bd70      	pop	{r4, r5, r6, pc}
   18d1e:	2009      	movs	r0, #9
   18d20:	f7f8 fe2c 	bl	1197c <bsd_os_errno_set>
   18d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d28:	bd70      	pop	{r4, r5, r6, pc}
   18d2a:	bf00      	nop
   18d2c:	20026594 	.word	0x20026594
   18d30:	10624dd3 	.word	0x10624dd3

00018d34 <interface_socket_getopt>:
   18d34:	b570      	push	{r4, r5, r6, lr}
   18d36:	2807      	cmp	r0, #7
   18d38:	9d04      	ldr	r5, [sp, #16]
   18d3a:	d821      	bhi.n	18d80 <interface_socket_getopt+0x4c>
   18d3c:	4c13      	ldr	r4, [pc, #76]	; (18d8c <interface_socket_getopt+0x58>)
   18d3e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18d42:	0080      	lsls	r0, r0, #2
   18d44:	5826      	ldr	r6, [r4, r0]
   18d46:	4404      	add	r4, r0
   18d48:	b1d6      	cbz	r6, 18d80 <interface_socket_getopt+0x4c>
   18d4a:	2901      	cmp	r1, #1
   18d4c:	d112      	bne.n	18d74 <interface_socket_getopt+0x40>
   18d4e:	2a04      	cmp	r2, #4
   18d50:	d110      	bne.n	18d74 <interface_socket_getopt+0x40>
   18d52:	b14b      	cbz	r3, 18d68 <interface_socket_getopt+0x34>
   18d54:	b145      	cbz	r5, 18d68 <interface_socket_getopt+0x34>
   18d56:	682a      	ldr	r2, [r5, #0]
   18d58:	2a04      	cmp	r2, #4
   18d5a:	d105      	bne.n	18d68 <interface_socket_getopt+0x34>
   18d5c:	2200      	movs	r2, #0
   18d5e:	6861      	ldr	r1, [r4, #4]
   18d60:	4610      	mov	r0, r2
   18d62:	6019      	str	r1, [r3, #0]
   18d64:	6062      	str	r2, [r4, #4]
   18d66:	bd70      	pop	{r4, r5, r6, pc}
   18d68:	2016      	movs	r0, #22
   18d6a:	f7f8 fe07 	bl	1197c <bsd_os_errno_set>
   18d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d72:	bd70      	pop	{r4, r5, r6, pc}
   18d74:	202a      	movs	r0, #42	; 0x2a
   18d76:	f7f8 fe01 	bl	1197c <bsd_os_errno_set>
   18d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d7e:	bd70      	pop	{r4, r5, r6, pc}
   18d80:	2009      	movs	r0, #9
   18d82:	f7f8 fdfb 	bl	1197c <bsd_os_errno_set>
   18d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d8a:	bd70      	pop	{r4, r5, r6, pc}
   18d8c:	20026594 	.word	0x20026594

00018d90 <interface_shutdown>:
   18d90:	4b15      	ldr	r3, [pc, #84]	; (18de8 <interface_shutdown+0x58>)
   18d92:	681a      	ldr	r2, [r3, #0]
   18d94:	b10a      	cbz	r2, 18d9a <interface_shutdown+0xa>
   18d96:	2270      	movs	r2, #112	; 0x70
   18d98:	605a      	str	r2, [r3, #4]
   18d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18d9c:	b10a      	cbz	r2, 18da2 <interface_shutdown+0x12>
   18d9e:	2270      	movs	r2, #112	; 0x70
   18da0:	629a      	str	r2, [r3, #40]	; 0x28
   18da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18da4:	b10a      	cbz	r2, 18daa <interface_shutdown+0x1a>
   18da6:	2270      	movs	r2, #112	; 0x70
   18da8:	64da      	str	r2, [r3, #76]	; 0x4c
   18daa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18dac:	b10a      	cbz	r2, 18db2 <interface_shutdown+0x22>
   18dae:	2270      	movs	r2, #112	; 0x70
   18db0:	671a      	str	r2, [r3, #112]	; 0x70
   18db2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   18db6:	b112      	cbz	r2, 18dbe <interface_shutdown+0x2e>
   18db8:	2270      	movs	r2, #112	; 0x70
   18dba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   18dbe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18dc2:	b112      	cbz	r2, 18dca <interface_shutdown+0x3a>
   18dc4:	2270      	movs	r2, #112	; 0x70
   18dc6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   18dca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18dce:	b112      	cbz	r2, 18dd6 <interface_shutdown+0x46>
   18dd0:	2270      	movs	r2, #112	; 0x70
   18dd2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   18dd6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18dda:	b112      	cbz	r2, 18de2 <interface_shutdown+0x52>
   18ddc:	2270      	movs	r2, #112	; 0x70
   18dde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18de2:	2000      	movs	r0, #0
   18de4:	4770      	bx	lr
   18de6:	bf00      	nop
   18de8:	20026594 	.word	0x20026594

00018dec <interface_socket_fcntl>:
   18dec:	2807      	cmp	r0, #7
   18dee:	b510      	push	{r4, lr}
   18df0:	d818      	bhi.n	18e24 <interface_socket_fcntl+0x38>
   18df2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18df6:	4c11      	ldr	r4, [pc, #68]	; (18e3c <interface_socket_fcntl+0x50>)
   18df8:	0083      	lsls	r3, r0, #2
   18dfa:	58e0      	ldr	r0, [r4, r3]
   18dfc:	b190      	cbz	r0, 18e24 <interface_socket_fcntl+0x38>
   18dfe:	2901      	cmp	r1, #1
   18e00:	d005      	beq.n	18e0e <interface_socket_fcntl+0x22>
   18e02:	2902      	cmp	r1, #2
   18e04:	d114      	bne.n	18e30 <interface_socket_fcntl+0x44>
   18e06:	58e0      	ldr	r0, [r4, r3]
   18e08:	f3c0 7000 	ubfx	r0, r0, #28, #1
   18e0c:	bd10      	pop	{r4, pc}
   18e0e:	f012 0001 	ands.w	r0, r2, #1
   18e12:	58e2      	ldr	r2, [r4, r3]
   18e14:	bf1a      	itte	ne
   18e16:	2000      	movne	r0, #0
   18e18:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   18e1c:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   18e20:	50e2      	str	r2, [r4, r3]
   18e22:	bd10      	pop	{r4, pc}
   18e24:	2009      	movs	r0, #9
   18e26:	f7f8 fda9 	bl	1197c <bsd_os_errno_set>
   18e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e2e:	bd10      	pop	{r4, pc}
   18e30:	2016      	movs	r0, #22
   18e32:	f7f8 fda3 	bl	1197c <bsd_os_errno_set>
   18e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e3a:	bd10      	pop	{r4, pc}
   18e3c:	20026594 	.word	0x20026594

00018e40 <bsd_os_application_irq_handler>:
   18e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e44:	4c33      	ldr	r4, [pc, #204]	; (18f14 <bsd_os_application_irq_handler+0xd4>)
   18e46:	f7f8 fe4d 	bl	11ae4 <bsd_os_application_irq_clear>
   18e4a:	f04f 0803 	mov.w	r8, #3
   18e4e:	4d32      	ldr	r5, [pc, #200]	; (18f18 <bsd_os_application_irq_handler+0xd8>)
   18e50:	4f32      	ldr	r7, [pc, #200]	; (18f1c <bsd_os_application_irq_handler+0xdc>)
   18e52:	f104 0680 	add.w	r6, r4, #128	; 0x80
   18e56:	e004      	b.n	18e62 <bsd_os_application_irq_handler+0x22>
   18e58:	2b04      	cmp	r3, #4
   18e5a:	d006      	beq.n	18e6a <bsd_os_application_irq_handler+0x2a>
   18e5c:	3408      	adds	r4, #8
   18e5e:	42b4      	cmp	r4, r6
   18e60:	d03b      	beq.n	18eda <bsd_os_application_irq_handler+0x9a>
   18e62:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18e66:	2b02      	cmp	r3, #2
   18e68:	d1f6      	bne.n	18e58 <bsd_os_application_irq_handler+0x18>
   18e6a:	6820      	ldr	r0, [r4, #0]
   18e6c:	882a      	ldrh	r2, [r5, #0]
   18e6e:	6803      	ldr	r3, [r0, #0]
   18e70:	b29b      	uxth	r3, r3
   18e72:	429a      	cmp	r2, r3
   18e74:	d033      	beq.n	18ede <bsd_os_application_irq_handler+0x9e>
   18e76:	8a2a      	ldrh	r2, [r5, #16]
   18e78:	429a      	cmp	r2, r3
   18e7a:	d032      	beq.n	18ee2 <bsd_os_application_irq_handler+0xa2>
   18e7c:	8c2a      	ldrh	r2, [r5, #32]
   18e7e:	429a      	cmp	r2, r3
   18e80:	d031      	beq.n	18ee6 <bsd_os_application_irq_handler+0xa6>
   18e82:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   18e84:	429a      	cmp	r2, r3
   18e86:	d030      	beq.n	18eea <bsd_os_application_irq_handler+0xaa>
   18e88:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   18e8c:	429a      	cmp	r2, r3
   18e8e:	d036      	beq.n	18efe <bsd_os_application_irq_handler+0xbe>
   18e90:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   18e94:	429a      	cmp	r2, r3
   18e96:	d034      	beq.n	18f02 <bsd_os_application_irq_handler+0xc2>
   18e98:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   18e9c:	429a      	cmp	r2, r3
   18e9e:	d032      	beq.n	18f06 <bsd_os_application_irq_handler+0xc6>
   18ea0:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   18ea4:	429a      	cmp	r2, r3
   18ea6:	d030      	beq.n	18f0a <bsd_os_application_irq_handler+0xca>
   18ea8:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   18eac:	429a      	cmp	r2, r3
   18eae:	d02e      	beq.n	18f0e <bsd_os_application_irq_handler+0xce>
   18eb0:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   18eb4:	429a      	cmp	r2, r3
   18eb6:	bf08      	it	eq
   18eb8:	2309      	moveq	r3, #9
   18eba:	d1cf      	bne.n	18e5c <bsd_os_application_irq_handler+0x1c>
   18ebc:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   18ec0:	685a      	ldr	r2, [r3, #4]
   18ec2:	68d9      	ldr	r1, [r3, #12]
   18ec4:	4790      	blx	r2
   18ec6:	b990      	cbnz	r0, 18eee <bsd_os_application_irq_handler+0xae>
   18ec8:	2201      	movs	r2, #1
   18eca:	6820      	ldr	r0, [r4, #0]
   18ecc:	f804 2c04 	strb.w	r2, [r4, #-4]
   18ed0:	68fb      	ldr	r3, [r7, #12]
   18ed2:	3408      	adds	r4, #8
   18ed4:	4798      	blx	r3
   18ed6:	42b4      	cmp	r4, r6
   18ed8:	d1c3      	bne.n	18e62 <bsd_os_application_irq_handler+0x22>
   18eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ede:	2300      	movs	r3, #0
   18ee0:	e7ec      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18ee2:	2301      	movs	r3, #1
   18ee4:	e7ea      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18ee6:	2302      	movs	r3, #2
   18ee8:	e7e8      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18eea:	2303      	movs	r3, #3
   18eec:	e7e6      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18eee:	2802      	cmp	r0, #2
   18ef0:	bf0a      	itet	eq
   18ef2:	2304      	moveq	r3, #4
   18ef4:	f804 8c04 	strbne.w	r8, [r4, #-4]
   18ef8:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   18efc:	e7ae      	b.n	18e5c <bsd_os_application_irq_handler+0x1c>
   18efe:	2304      	movs	r3, #4
   18f00:	e7dc      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18f02:	2305      	movs	r3, #5
   18f04:	e7da      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18f06:	2306      	movs	r3, #6
   18f08:	e7d8      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18f0a:	2307      	movs	r3, #7
   18f0c:	e7d6      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18f0e:	2308      	movs	r3, #8
   18f10:	e7d4      	b.n	18ebc <bsd_os_application_irq_handler+0x7c>
   18f12:	bf00      	nop
   18f14:	20020ab8 	.word	0x20020ab8
   18f18:	2002097c 	.word	0x2002097c
   18f1c:	20020a1c 	.word	0x20020a1c

00018f20 <rpc_framework_init>:
   18f20:	b508      	push	{r3, lr}
   18f22:	22a0      	movs	r2, #160	; 0xa0
   18f24:	2100      	movs	r1, #0
   18f26:	4802      	ldr	r0, [pc, #8]	; (18f30 <rpc_framework_init+0x10>)
   18f28:	f004 fb9b 	bl	1d662 <memset>
   18f2c:	2000      	movs	r0, #0
   18f2e:	bd08      	pop	{r3, pc}
   18f30:	2002097c 	.word	0x2002097c

00018f34 <rpc_client_register>:
   18f34:	8803      	ldrh	r3, [r0, #0]
   18f36:	2b00      	cmp	r3, #0
   18f38:	d045      	beq.n	18fc6 <rpc_client_register+0x92>
   18f3a:	6842      	ldr	r2, [r0, #4]
   18f3c:	4601      	mov	r1, r0
   18f3e:	2a00      	cmp	r2, #0
   18f40:	d050      	beq.n	18fe4 <rpc_client_register+0xb0>
   18f42:	4a30      	ldr	r2, [pc, #192]	; (19004 <rpc_client_register+0xd0>)
   18f44:	8810      	ldrh	r0, [r2, #0]
   18f46:	4283      	cmp	r3, r0
   18f48:	d03d      	beq.n	18fc6 <rpc_client_register+0x92>
   18f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18f4e:	8a14      	ldrh	r4, [r2, #16]
   18f50:	42a3      	cmp	r3, r4
   18f52:	d035      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f54:	8c15      	ldrh	r5, [r2, #32]
   18f56:	42ab      	cmp	r3, r5
   18f58:	d032      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f5a:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   18f5c:	42b3      	cmp	r3, r6
   18f5e:	d02f      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f60:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   18f64:	42bb      	cmp	r3, r7
   18f66:	d02b      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f68:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   18f6c:	4563      	cmp	r3, ip
   18f6e:	d027      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f70:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   18f74:	4573      	cmp	r3, lr
   18f76:	d023      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f78:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   18f7c:	4543      	cmp	r3, r8
   18f7e:	d01f      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f80:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   18f84:	454b      	cmp	r3, r9
   18f86:	d01b      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f88:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   18f8c:	4553      	cmp	r3, sl
   18f8e:	d017      	beq.n	18fc0 <rpc_client_register+0x8c>
   18f90:	b1e0      	cbz	r0, 18fcc <rpc_client_register+0x98>
   18f92:	b35c      	cbz	r4, 18fec <rpc_client_register+0xb8>
   18f94:	b365      	cbz	r5, 18ff0 <rpc_client_register+0xbc>
   18f96:	b36e      	cbz	r6, 18ff4 <rpc_client_register+0xc0>
   18f98:	b377      	cbz	r7, 18ff8 <rpc_client_register+0xc4>
   18f9a:	f1bc 0f00 	cmp.w	ip, #0
   18f9e:	d02d      	beq.n	18ffc <rpc_client_register+0xc8>
   18fa0:	f1be 0f00 	cmp.w	lr, #0
   18fa4:	d020      	beq.n	18fe8 <rpc_client_register+0xb4>
   18fa6:	f1b8 0f00 	cmp.w	r8, #0
   18faa:	d029      	beq.n	19000 <rpc_client_register+0xcc>
   18fac:	f1b9 0f00 	cmp.w	r9, #0
   18fb0:	d00b      	beq.n	18fca <rpc_client_register+0x96>
   18fb2:	2009      	movs	r0, #9
   18fb4:	f1ba 0f00 	cmp.w	sl, #0
   18fb8:	d008      	beq.n	18fcc <rpc_client_register+0x98>
   18fba:	2004      	movs	r0, #4
   18fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18fc0:	2007      	movs	r0, #7
   18fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18fc6:	2007      	movs	r0, #7
   18fc8:	4770      	bx	lr
   18fca:	2008      	movs	r0, #8
   18fcc:	0100      	lsls	r0, r0, #4
   18fce:	5213      	strh	r3, [r2, r0]
   18fd0:	684b      	ldr	r3, [r1, #4]
   18fd2:	4402      	add	r2, r0
   18fd4:	6053      	str	r3, [r2, #4]
   18fd6:	688b      	ldr	r3, [r1, #8]
   18fd8:	2000      	movs	r0, #0
   18fda:	6093      	str	r3, [r2, #8]
   18fdc:	68cb      	ldr	r3, [r1, #12]
   18fde:	60d3      	str	r3, [r2, #12]
   18fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18fe4:	200e      	movs	r0, #14
   18fe6:	4770      	bx	lr
   18fe8:	2006      	movs	r0, #6
   18fea:	e7ef      	b.n	18fcc <rpc_client_register+0x98>
   18fec:	2001      	movs	r0, #1
   18fee:	e7ed      	b.n	18fcc <rpc_client_register+0x98>
   18ff0:	2002      	movs	r0, #2
   18ff2:	e7eb      	b.n	18fcc <rpc_client_register+0x98>
   18ff4:	2003      	movs	r0, #3
   18ff6:	e7e9      	b.n	18fcc <rpc_client_register+0x98>
   18ff8:	2004      	movs	r0, #4
   18ffa:	e7e7      	b.n	18fcc <rpc_client_register+0x98>
   18ffc:	2005      	movs	r0, #5
   18ffe:	e7e5      	b.n	18fcc <rpc_client_register+0x98>
   19000:	2007      	movs	r0, #7
   19002:	e7e3      	b.n	18fcc <rpc_client_register+0x98>
   19004:	2002097c 	.word	0x2002097c

00019008 <rpc_transport_input>:
   19008:	b538      	push	{r3, r4, r5, lr}
   1900a:	4a82      	ldr	r2, [pc, #520]	; (19214 <rpc_transport_input+0x20c>)
   1900c:	680b      	ldr	r3, [r1, #0]
   1900e:	8810      	ldrh	r0, [r2, #0]
   19010:	b29b      	uxth	r3, r3
   19012:	4298      	cmp	r0, r3
   19014:	d027      	beq.n	19066 <rpc_transport_input+0x5e>
   19016:	8a10      	ldrh	r0, [r2, #16]
   19018:	4298      	cmp	r0, r3
   1901a:	d024      	beq.n	19066 <rpc_transport_input+0x5e>
   1901c:	8c10      	ldrh	r0, [r2, #32]
   1901e:	4298      	cmp	r0, r3
   19020:	d021      	beq.n	19066 <rpc_transport_input+0x5e>
   19022:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   19024:	4298      	cmp	r0, r3
   19026:	d01e      	beq.n	19066 <rpc_transport_input+0x5e>
   19028:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   1902c:	4298      	cmp	r0, r3
   1902e:	d01a      	beq.n	19066 <rpc_transport_input+0x5e>
   19030:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   19034:	4298      	cmp	r0, r3
   19036:	d016      	beq.n	19066 <rpc_transport_input+0x5e>
   19038:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   1903c:	4298      	cmp	r0, r3
   1903e:	d012      	beq.n	19066 <rpc_transport_input+0x5e>
   19040:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   19044:	4298      	cmp	r0, r3
   19046:	d00e      	beq.n	19066 <rpc_transport_input+0x5e>
   19048:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   1904c:	4298      	cmp	r0, r3
   1904e:	d00a      	beq.n	19066 <rpc_transport_input+0x5e>
   19050:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   19054:	429a      	cmp	r2, r3
   19056:	d006      	beq.n	19066 <rpc_transport_input+0x5e>
   19058:	6888      	ldr	r0, [r1, #8]
   1905a:	b118      	cbz	r0, 19064 <rpc_transport_input+0x5c>
   1905c:	4b6e      	ldr	r3, [pc, #440]	; (19218 <rpc_transport_input+0x210>)
   1905e:	691b      	ldr	r3, [r3, #16]
   19060:	4798      	blx	r3
   19062:	2000      	movs	r0, #0
   19064:	bd38      	pop	{r3, r4, r5, pc}
   19066:	6888      	ldr	r0, [r1, #8]
   19068:	2800      	cmp	r0, #0
   1906a:	f000 8098 	beq.w	1919e <rpc_transport_input+0x196>
   1906e:	4a6b      	ldr	r2, [pc, #428]	; (1921c <rpc_transport_input+0x214>)
   19070:	6814      	ldr	r4, [r2, #0]
   19072:	2c00      	cmp	r4, #0
   19074:	d03c      	beq.n	190f0 <rpc_transport_input+0xe8>
   19076:	6894      	ldr	r4, [r2, #8]
   19078:	2c00      	cmp	r4, #0
   1907a:	f000 809a 	beq.w	191b2 <rpc_transport_input+0x1aa>
   1907e:	6914      	ldr	r4, [r2, #16]
   19080:	2c00      	cmp	r4, #0
   19082:	f000 809a 	beq.w	191ba <rpc_transport_input+0x1b2>
   19086:	6994      	ldr	r4, [r2, #24]
   19088:	2c00      	cmp	r4, #0
   1908a:	f000 809a 	beq.w	191c2 <rpc_transport_input+0x1ba>
   1908e:	6a14      	ldr	r4, [r2, #32]
   19090:	2c00      	cmp	r4, #0
   19092:	f000 809a 	beq.w	191ca <rpc_transport_input+0x1c2>
   19096:	6a94      	ldr	r4, [r2, #40]	; 0x28
   19098:	2c00      	cmp	r4, #0
   1909a:	f000 8084 	beq.w	191a6 <rpc_transport_input+0x19e>
   1909e:	6b14      	ldr	r4, [r2, #48]	; 0x30
   190a0:	2c00      	cmp	r4, #0
   190a2:	f000 8098 	beq.w	191d6 <rpc_transport_input+0x1ce>
   190a6:	6b94      	ldr	r4, [r2, #56]	; 0x38
   190a8:	2c00      	cmp	r4, #0
   190aa:	f000 8096 	beq.w	191da <rpc_transport_input+0x1d2>
   190ae:	6c14      	ldr	r4, [r2, #64]	; 0x40
   190b0:	2c00      	cmp	r4, #0
   190b2:	f000 8096 	beq.w	191e2 <rpc_transport_input+0x1da>
   190b6:	6c94      	ldr	r4, [r2, #72]	; 0x48
   190b8:	2c00      	cmp	r4, #0
   190ba:	f000 8096 	beq.w	191ea <rpc_transport_input+0x1e2>
   190be:	6d14      	ldr	r4, [r2, #80]	; 0x50
   190c0:	2c00      	cmp	r4, #0
   190c2:	f000 8096 	beq.w	191f2 <rpc_transport_input+0x1ea>
   190c6:	6d94      	ldr	r4, [r2, #88]	; 0x58
   190c8:	2c00      	cmp	r4, #0
   190ca:	f000 8098 	beq.w	191fe <rpc_transport_input+0x1f6>
   190ce:	6e14      	ldr	r4, [r2, #96]	; 0x60
   190d0:	2c00      	cmp	r4, #0
   190d2:	f000 8098 	beq.w	19206 <rpc_transport_input+0x1fe>
   190d6:	6e94      	ldr	r4, [r2, #104]	; 0x68
   190d8:	2c00      	cmp	r4, #0
   190da:	f000 8096 	beq.w	1920a <rpc_transport_input+0x202>
   190de:	6f14      	ldr	r4, [r2, #112]	; 0x70
   190e0:	2c00      	cmp	r4, #0
   190e2:	f000 8094 	beq.w	1920e <rpc_transport_input+0x206>
   190e6:	6f94      	ldr	r4, [r2, #120]	; 0x78
   190e8:	b10c      	cbz	r4, 190ee <rpc_transport_input+0xe6>
   190ea:	2001      	movs	r0, #1
   190ec:	bd38      	pop	{r3, r4, r5, pc}
   190ee:	240f      	movs	r4, #15
   190f0:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   190f4:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   190f8:	80ab      	strh	r3, [r5, #4]
   190fa:	4b49      	ldr	r3, [pc, #292]	; (19220 <rpc_transport_input+0x218>)
   190fc:	781a      	ldrb	r2, [r3, #0]
   190fe:	2a01      	cmp	r2, #1
   19100:	d053      	beq.n	191aa <rpc_transport_input+0x1a2>
   19102:	7a1a      	ldrb	r2, [r3, #8]
   19104:	2a01      	cmp	r2, #1
   19106:	d041      	beq.n	1918c <rpc_transport_input+0x184>
   19108:	7c1a      	ldrb	r2, [r3, #16]
   1910a:	2a01      	cmp	r2, #1
   1910c:	d04f      	beq.n	191ae <rpc_transport_input+0x1a6>
   1910e:	7e1a      	ldrb	r2, [r3, #24]
   19110:	2a01      	cmp	r2, #1
   19112:	d050      	beq.n	191b6 <rpc_transport_input+0x1ae>
   19114:	f893 2020 	ldrb.w	r2, [r3, #32]
   19118:	2a01      	cmp	r2, #1
   1911a:	d050      	beq.n	191be <rpc_transport_input+0x1b6>
   1911c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   19120:	2a01      	cmp	r2, #1
   19122:	d050      	beq.n	191c6 <rpc_transport_input+0x1be>
   19124:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   19128:	2a01      	cmp	r2, #1
   1912a:	d03a      	beq.n	191a2 <rpc_transport_input+0x19a>
   1912c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   19130:	2a01      	cmp	r2, #1
   19132:	d04c      	beq.n	191ce <rpc_transport_input+0x1c6>
   19134:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   19138:	2a01      	cmp	r2, #1
   1913a:	d04a      	beq.n	191d2 <rpc_transport_input+0x1ca>
   1913c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   19140:	2a01      	cmp	r2, #1
   19142:	d04c      	beq.n	191de <rpc_transport_input+0x1d6>
   19144:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   19148:	2a01      	cmp	r2, #1
   1914a:	d04c      	beq.n	191e6 <rpc_transport_input+0x1de>
   1914c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   19150:	2a01      	cmp	r2, #1
   19152:	d04c      	beq.n	191ee <rpc_transport_input+0x1e6>
   19154:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   19158:	2a01      	cmp	r2, #1
   1915a:	d04c      	beq.n	191f6 <rpc_transport_input+0x1ee>
   1915c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   19160:	2a01      	cmp	r2, #1
   19162:	d04a      	beq.n	191fa <rpc_transport_input+0x1f2>
   19164:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   19168:	2a01      	cmp	r2, #1
   1916a:	d04a      	beq.n	19202 <rpc_transport_input+0x1fa>
   1916c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   19170:	2a01      	cmp	r2, #1
   19172:	d00a      	beq.n	1918a <rpc_transport_input+0x182>
   19174:	2c10      	cmp	r4, #16
   19176:	d0b8      	beq.n	190ea <rpc_transport_input+0xe2>
   19178:	2200      	movs	r2, #0
   1917a:	4b28      	ldr	r3, [pc, #160]	; (1921c <rpc_transport_input+0x214>)
   1917c:	2001      	movs	r0, #1
   1917e:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   19182:	808a      	strh	r2, [r1, #4]
   19184:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   19188:	bd38      	pop	{r3, r4, r5, pc}
   1918a:	220f      	movs	r2, #15
   1918c:	2402      	movs	r4, #2
   1918e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   19192:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   19196:	6041      	str	r1, [r0, #4]
   19198:	f7f8 fc9c 	bl	11ad4 <bsd_os_application_irq_set>
   1919c:	e7a5      	b.n	190ea <rpc_transport_input+0xe2>
   1919e:	2410      	movs	r4, #16
   191a0:	e7ab      	b.n	190fa <rpc_transport_input+0xf2>
   191a2:	2206      	movs	r2, #6
   191a4:	e7f2      	b.n	1918c <rpc_transport_input+0x184>
   191a6:	2405      	movs	r4, #5
   191a8:	e7a2      	b.n	190f0 <rpc_transport_input+0xe8>
   191aa:	2200      	movs	r2, #0
   191ac:	e7ee      	b.n	1918c <rpc_transport_input+0x184>
   191ae:	2202      	movs	r2, #2
   191b0:	e7ec      	b.n	1918c <rpc_transport_input+0x184>
   191b2:	2401      	movs	r4, #1
   191b4:	e79c      	b.n	190f0 <rpc_transport_input+0xe8>
   191b6:	2203      	movs	r2, #3
   191b8:	e7e8      	b.n	1918c <rpc_transport_input+0x184>
   191ba:	2402      	movs	r4, #2
   191bc:	e798      	b.n	190f0 <rpc_transport_input+0xe8>
   191be:	2204      	movs	r2, #4
   191c0:	e7e4      	b.n	1918c <rpc_transport_input+0x184>
   191c2:	2403      	movs	r4, #3
   191c4:	e794      	b.n	190f0 <rpc_transport_input+0xe8>
   191c6:	2205      	movs	r2, #5
   191c8:	e7e0      	b.n	1918c <rpc_transport_input+0x184>
   191ca:	2404      	movs	r4, #4
   191cc:	e790      	b.n	190f0 <rpc_transport_input+0xe8>
   191ce:	2207      	movs	r2, #7
   191d0:	e7dc      	b.n	1918c <rpc_transport_input+0x184>
   191d2:	2208      	movs	r2, #8
   191d4:	e7da      	b.n	1918c <rpc_transport_input+0x184>
   191d6:	2406      	movs	r4, #6
   191d8:	e78a      	b.n	190f0 <rpc_transport_input+0xe8>
   191da:	2407      	movs	r4, #7
   191dc:	e788      	b.n	190f0 <rpc_transport_input+0xe8>
   191de:	2209      	movs	r2, #9
   191e0:	e7d4      	b.n	1918c <rpc_transport_input+0x184>
   191e2:	2408      	movs	r4, #8
   191e4:	e784      	b.n	190f0 <rpc_transport_input+0xe8>
   191e6:	220a      	movs	r2, #10
   191e8:	e7d0      	b.n	1918c <rpc_transport_input+0x184>
   191ea:	2409      	movs	r4, #9
   191ec:	e780      	b.n	190f0 <rpc_transport_input+0xe8>
   191ee:	220b      	movs	r2, #11
   191f0:	e7cc      	b.n	1918c <rpc_transport_input+0x184>
   191f2:	240a      	movs	r4, #10
   191f4:	e77c      	b.n	190f0 <rpc_transport_input+0xe8>
   191f6:	220c      	movs	r2, #12
   191f8:	e7c8      	b.n	1918c <rpc_transport_input+0x184>
   191fa:	220d      	movs	r2, #13
   191fc:	e7c6      	b.n	1918c <rpc_transport_input+0x184>
   191fe:	240b      	movs	r4, #11
   19200:	e776      	b.n	190f0 <rpc_transport_input+0xe8>
   19202:	220e      	movs	r2, #14
   19204:	e7c2      	b.n	1918c <rpc_transport_input+0x184>
   19206:	240c      	movs	r4, #12
   19208:	e772      	b.n	190f0 <rpc_transport_input+0xe8>
   1920a:	240d      	movs	r4, #13
   1920c:	e770      	b.n	190f0 <rpc_transport_input+0xe8>
   1920e:	240e      	movs	r4, #14
   19210:	e76e      	b.n	190f0 <rpc_transport_input+0xe8>
   19212:	bf00      	nop
   19214:	2002097c 	.word	0x2002097c
   19218:	20020a1c 	.word	0x20020a1c
   1921c:	20020a34 	.word	0x20020a34
   19220:	20020ab4 	.word	0x20020ab4

00019224 <rpc_transport_register>:
   19224:	b4f0      	push	{r4, r5, r6, r7}
   19226:	2900      	cmp	r1, #0
   19228:	d052      	beq.n	192d0 <rpc_transport_register+0xac>
   1922a:	2800      	cmp	r0, #0
   1922c:	d050      	beq.n	192d0 <rpc_transport_register+0xac>
   1922e:	6883      	ldr	r3, [r0, #8]
   19230:	2b00      	cmp	r3, #0
   19232:	d04d      	beq.n	192d0 <rpc_transport_register+0xac>
   19234:	6903      	ldr	r3, [r0, #16]
   19236:	2b00      	cmp	r3, #0
   19238:	d04a      	beq.n	192d0 <rpc_transport_register+0xac>
   1923a:	6843      	ldr	r3, [r0, #4]
   1923c:	2b00      	cmp	r3, #0
   1923e:	d047      	beq.n	192d0 <rpc_transport_register+0xac>
   19240:	68c3      	ldr	r3, [r0, #12]
   19242:	2b00      	cmp	r3, #0
   19244:	d044      	beq.n	192d0 <rpc_transport_register+0xac>
   19246:	6803      	ldr	r3, [r0, #0]
   19248:	2b00      	cmp	r3, #0
   1924a:	d041      	beq.n	192d0 <rpc_transport_register+0xac>
   1924c:	6943      	ldr	r3, [r0, #20]
   1924e:	2b00      	cmp	r3, #0
   19250:	d03e      	beq.n	192d0 <rpc_transport_register+0xac>
   19252:	2601      	movs	r6, #1
   19254:	2500      	movs	r5, #0
   19256:	4604      	mov	r4, r0
   19258:	460f      	mov	r7, r1
   1925a:	4a1f      	ldr	r2, [pc, #124]	; (192d8 <rpc_transport_register+0xb4>)
   1925c:	4b1f      	ldr	r3, [pc, #124]	; (192dc <rpc_transport_register+0xb8>)
   1925e:	f8df c080 	ldr.w	ip, [pc, #128]	; 192e0 <rpc_transport_register+0xbc>
   19262:	7416      	strb	r6, [r2, #16]
   19264:	7616      	strb	r6, [r2, #24]
   19266:	f882 6020 	strb.w	r6, [r2, #32]
   1926a:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   1926e:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   19272:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   19276:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   1927a:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   1927e:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   19282:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   19286:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   1928a:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   1928e:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   19292:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   19296:	611d      	str	r5, [r3, #16]
   19298:	619d      	str	r5, [r3, #24]
   1929a:	621d      	str	r5, [r3, #32]
   1929c:	629d      	str	r5, [r3, #40]	; 0x28
   1929e:	631d      	str	r5, [r3, #48]	; 0x30
   192a0:	639d      	str	r5, [r3, #56]	; 0x38
   192a2:	641d      	str	r5, [r3, #64]	; 0x40
   192a4:	649d      	str	r5, [r3, #72]	; 0x48
   192a6:	651d      	str	r5, [r3, #80]	; 0x50
   192a8:	659d      	str	r5, [r3, #88]	; 0x58
   192aa:	661d      	str	r5, [r3, #96]	; 0x60
   192ac:	669d      	str	r5, [r3, #104]	; 0x68
   192ae:	671d      	str	r5, [r3, #112]	; 0x70
   192b0:	679d      	str	r5, [r3, #120]	; 0x78
   192b2:	7016      	strb	r6, [r2, #0]
   192b4:	7216      	strb	r6, [r2, #8]
   192b6:	601d      	str	r5, [r3, #0]
   192b8:	609d      	str	r5, [r3, #8]
   192ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   192bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   192c0:	e894 0003 	ldmia.w	r4, {r0, r1}
   192c4:	e88c 0003 	stmia.w	ip, {r0, r1}
   192c8:	603e      	str	r6, [r7, #0]
   192ca:	4628      	mov	r0, r5
   192cc:	bcf0      	pop	{r4, r5, r6, r7}
   192ce:	4770      	bx	lr
   192d0:	250e      	movs	r5, #14
   192d2:	4628      	mov	r0, r5
   192d4:	bcf0      	pop	{r4, r5, r6, r7}
   192d6:	4770      	bx	lr
   192d8:	20020ab4 	.word	0x20020ab4
   192dc:	20020a34 	.word	0x20020a34
   192e0:	20020a1c 	.word	0x20020a1c

000192e4 <rpc_transport_unregister>:
   192e4:	2800      	cmp	r0, #0
   192e6:	d03a      	beq.n	1935e <rpc_transport_unregister+0x7a>
   192e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   192ec:	4680      	mov	r8, r0
   192ee:	4c1d      	ldr	r4, [pc, #116]	; (19364 <rpc_transport_unregister+0x80>)
   192f0:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   192f4:	68a3      	ldr	r3, [r4, #8]
   192f6:	3410      	adds	r4, #16
   192f8:	b103      	cbz	r3, 192fc <rpc_transport_unregister+0x18>
   192fa:	4798      	blx	r3
   192fc:	42ac      	cmp	r4, r5
   192fe:	d1f9      	bne.n	192f4 <rpc_transport_unregister+0x10>
   19300:	f04f 0901 	mov.w	r9, #1
   19304:	2600      	movs	r6, #0
   19306:	4c18      	ldr	r4, [pc, #96]	; (19368 <rpc_transport_unregister+0x84>)
   19308:	4d18      	ldr	r5, [pc, #96]	; (1936c <rpc_transport_unregister+0x88>)
   1930a:	f8df a064 	ldr.w	sl, [pc, #100]	; 19370 <rpc_transport_unregister+0x8c>
   1930e:	f104 0780 	add.w	r7, r4, #128	; 0x80
   19312:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19316:	2b01      	cmp	r3, #1
   19318:	d005      	beq.n	19326 <rpc_transport_unregister+0x42>
   1931a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1931e:	6820      	ldr	r0, [r4, #0]
   19320:	4798      	blx	r3
   19322:	f804 9c04 	strb.w	r9, [r4, #-4]
   19326:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1932a:	3408      	adds	r4, #8
   1932c:	b128      	cbz	r0, 1933a <rpc_transport_unregister+0x56>
   1932e:	f8da 3010 	ldr.w	r3, [sl, #16]
   19332:	4798      	blx	r3
   19334:	802e      	strh	r6, [r5, #0]
   19336:	f845 6c04 	str.w	r6, [r5, #-4]
   1933a:	42bc      	cmp	r4, r7
   1933c:	f105 0508 	add.w	r5, r5, #8
   19340:	d1e7      	bne.n	19312 <rpc_transport_unregister+0x2e>
   19342:	f8d8 0000 	ldr.w	r0, [r8]
   19346:	2218      	movs	r2, #24
   19348:	3801      	subs	r0, #1
   1934a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1934e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   19352:	2100      	movs	r1, #0
   19354:	f004 f985 	bl	1d662 <memset>
   19358:	2000      	movs	r0, #0
   1935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1935e:	200e      	movs	r0, #14
   19360:	4770      	bx	lr
   19362:	bf00      	nop
   19364:	2002097c 	.word	0x2002097c
   19368:	20020ab8 	.word	0x20020ab8
   1936c:	20020a38 	.word	0x20020a38
   19370:	20020a1c 	.word	0x20020a1c

00019374 <rpc_message_send>:
   19374:	b168      	cbz	r0, 19392 <rpc_message_send+0x1e>
   19376:	b171      	cbz	r1, 19396 <rpc_message_send+0x22>
   19378:	4a09      	ldr	r2, [pc, #36]	; (193a0 <rpc_message_send+0x2c>)
   1937a:	6853      	ldr	r3, [r2, #4]
   1937c:	b16b      	cbz	r3, 1939a <rpc_message_send+0x26>
   1937e:	684b      	ldr	r3, [r1, #4]
   19380:	8008      	strh	r0, [r1, #0]
   19382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19386:	f043 0302 	orr.w	r3, r3, #2
   1938a:	6812      	ldr	r2, [r2, #0]
   1938c:	604b      	str	r3, [r1, #4]
   1938e:	4608      	mov	r0, r1
   19390:	4710      	bx	r2
   19392:	2007      	movs	r0, #7
   19394:	4770      	bx	lr
   19396:	200e      	movs	r0, #14
   19398:	4770      	bx	lr
   1939a:	2008      	movs	r0, #8
   1939c:	4770      	bx	lr
   1939e:	bf00      	nop
   193a0:	20020a1c 	.word	0x20020a1c

000193a4 <rpc_message_alloc>:
   193a4:	b35a      	cbz	r2, 193fe <rpc_message_alloc+0x5a>
   193a6:	b330      	cbz	r0, 193f6 <rpc_message_alloc+0x52>
   193a8:	2300      	movs	r3, #0
   193aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193ae:	4f15      	ldr	r7, [pc, #84]	; (19404 <rpc_message_alloc+0x60>)
   193b0:	6013      	str	r3, [r2, #0]
   193b2:	687b      	ldr	r3, [r7, #4]
   193b4:	b30b      	cbz	r3, 193fa <rpc_message_alloc+0x56>
   193b6:	4615      	mov	r5, r2
   193b8:	460c      	mov	r4, r1
   193ba:	4606      	mov	r6, r0
   193bc:	b959      	cbnz	r1, 193d6 <rpc_message_alloc+0x32>
   193be:	4798      	blx	r3
   193c0:	4603      	mov	r3, r0
   193c2:	b1a8      	cbz	r0, 193f0 <rpc_message_alloc+0x4c>
   193c4:	46a0      	mov	r8, r4
   193c6:	60dc      	str	r4, [r3, #12]
   193c8:	f8c3 8008 	str.w	r8, [r3, #8]
   193cc:	801e      	strh	r6, [r3, #0]
   193ce:	602b      	str	r3, [r5, #0]
   193d0:	2000      	movs	r0, #0
   193d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   193d6:	68bb      	ldr	r3, [r7, #8]
   193d8:	4608      	mov	r0, r1
   193da:	4798      	blx	r3
   193dc:	4680      	mov	r8, r0
   193de:	b138      	cbz	r0, 193f0 <rpc_message_alloc+0x4c>
   193e0:	687b      	ldr	r3, [r7, #4]
   193e2:	4798      	blx	r3
   193e4:	4603      	mov	r3, r0
   193e6:	2800      	cmp	r0, #0
   193e8:	d1ed      	bne.n	193c6 <rpc_message_alloc+0x22>
   193ea:	693b      	ldr	r3, [r7, #16]
   193ec:	4640      	mov	r0, r8
   193ee:	4798      	blx	r3
   193f0:	2004      	movs	r0, #4
   193f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   193f6:	2007      	movs	r0, #7
   193f8:	4770      	bx	lr
   193fa:	2008      	movs	r0, #8
   193fc:	e7f9      	b.n	193f2 <rpc_message_alloc+0x4e>
   193fe:	200e      	movs	r0, #14
   19400:	4770      	bx	lr
   19402:	bf00      	nop
   19404:	20020a1c 	.word	0x20020a1c

00019408 <rpc_message_free>:
   19408:	2800      	cmp	r0, #0
   1940a:	f000 808c 	beq.w	19526 <rpc_message_free+0x11e>
   1940e:	2900      	cmp	r1, #0
   19410:	f000 80e9 	beq.w	195e6 <rpc_message_free+0x1de>
   19414:	b538      	push	{r3, r4, r5, lr}
   19416:	4a83      	ldr	r2, [pc, #524]	; (19624 <rpc_message_free+0x21c>)
   19418:	6853      	ldr	r3, [r2, #4]
   1941a:	2b00      	cmp	r3, #0
   1941c:	f000 8085 	beq.w	1952a <rpc_message_free+0x122>
   19420:	4c81      	ldr	r4, [pc, #516]	; (19628 <rpc_message_free+0x220>)
   19422:	4608      	mov	r0, r1
   19424:	6863      	ldr	r3, [r4, #4]
   19426:	4299      	cmp	r1, r3
   19428:	f000 8085 	beq.w	19536 <rpc_message_free+0x12e>
   1942c:	68e3      	ldr	r3, [r4, #12]
   1942e:	4298      	cmp	r0, r3
   19430:	f000 808e 	beq.w	19550 <rpc_message_free+0x148>
   19434:	6963      	ldr	r3, [r4, #20]
   19436:	4298      	cmp	r0, r3
   19438:	f000 8090 	beq.w	1955c <rpc_message_free+0x154>
   1943c:	69e3      	ldr	r3, [r4, #28]
   1943e:	4298      	cmp	r0, r3
   19440:	f000 8092 	beq.w	19568 <rpc_message_free+0x160>
   19444:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19446:	4298      	cmp	r0, r3
   19448:	f000 8095 	beq.w	19576 <rpc_message_free+0x16e>
   1944c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1944e:	4298      	cmp	r0, r3
   19450:	f000 8098 	beq.w	19584 <rpc_message_free+0x17c>
   19454:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19456:	4298      	cmp	r0, r3
   19458:	f000 809b 	beq.w	19592 <rpc_message_free+0x18a>
   1945c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1945e:	4298      	cmp	r0, r3
   19460:	f000 809e 	beq.w	195a0 <rpc_message_free+0x198>
   19464:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19466:	4298      	cmp	r0, r3
   19468:	f000 80a1 	beq.w	195ae <rpc_message_free+0x1a6>
   1946c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1946e:	4298      	cmp	r0, r3
   19470:	f000 80a4 	beq.w	195bc <rpc_message_free+0x1b4>
   19474:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19476:	4298      	cmp	r0, r3
   19478:	f000 80a7 	beq.w	195ca <rpc_message_free+0x1c2>
   1947c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1947e:	4298      	cmp	r0, r3
   19480:	f000 80aa 	beq.w	195d8 <rpc_message_free+0x1d0>
   19484:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19486:	4298      	cmp	r0, r3
   19488:	f000 80af 	beq.w	195ea <rpc_message_free+0x1e2>
   1948c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1948e:	4298      	cmp	r0, r3
   19490:	f000 80b2 	beq.w	195f8 <rpc_message_free+0x1f0>
   19494:	6f63      	ldr	r3, [r4, #116]	; 0x74
   19496:	4298      	cmp	r0, r3
   19498:	f000 80b5 	beq.w	19606 <rpc_message_free+0x1fe>
   1949c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1949e:	4283      	cmp	r3, r0
   194a0:	f000 80b8 	beq.w	19614 <rpc_message_free+0x20c>
   194a4:	68d3      	ldr	r3, [r2, #12]
   194a6:	4798      	blx	r3
   194a8:	7823      	ldrb	r3, [r4, #0]
   194aa:	2b04      	cmp	r3, #4
   194ac:	d03f      	beq.n	1952e <rpc_message_free+0x126>
   194ae:	7a23      	ldrb	r3, [r4, #8]
   194b0:	2b04      	cmp	r3, #4
   194b2:	d03c      	beq.n	1952e <rpc_message_free+0x126>
   194b4:	7c23      	ldrb	r3, [r4, #16]
   194b6:	2b04      	cmp	r3, #4
   194b8:	d039      	beq.n	1952e <rpc_message_free+0x126>
   194ba:	7e23      	ldrb	r3, [r4, #24]
   194bc:	2b04      	cmp	r3, #4
   194be:	d036      	beq.n	1952e <rpc_message_free+0x126>
   194c0:	f894 3020 	ldrb.w	r3, [r4, #32]
   194c4:	2b04      	cmp	r3, #4
   194c6:	d032      	beq.n	1952e <rpc_message_free+0x126>
   194c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   194cc:	2b04      	cmp	r3, #4
   194ce:	d02e      	beq.n	1952e <rpc_message_free+0x126>
   194d0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   194d4:	2b04      	cmp	r3, #4
   194d6:	d02a      	beq.n	1952e <rpc_message_free+0x126>
   194d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   194dc:	2b04      	cmp	r3, #4
   194de:	d026      	beq.n	1952e <rpc_message_free+0x126>
   194e0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   194e4:	2b04      	cmp	r3, #4
   194e6:	d022      	beq.n	1952e <rpc_message_free+0x126>
   194e8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   194ec:	2b04      	cmp	r3, #4
   194ee:	d01e      	beq.n	1952e <rpc_message_free+0x126>
   194f0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   194f4:	2b04      	cmp	r3, #4
   194f6:	d01a      	beq.n	1952e <rpc_message_free+0x126>
   194f8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   194fc:	2b04      	cmp	r3, #4
   194fe:	d016      	beq.n	1952e <rpc_message_free+0x126>
   19500:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   19504:	2b04      	cmp	r3, #4
   19506:	d012      	beq.n	1952e <rpc_message_free+0x126>
   19508:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   1950c:	2b04      	cmp	r3, #4
   1950e:	d00e      	beq.n	1952e <rpc_message_free+0x126>
   19510:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19514:	2b04      	cmp	r3, #4
   19516:	d00a      	beq.n	1952e <rpc_message_free+0x126>
   19518:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1951c:	2b04      	cmp	r3, #4
   1951e:	bf18      	it	ne
   19520:	2000      	movne	r0, #0
   19522:	d004      	beq.n	1952e <rpc_message_free+0x126>
   19524:	bd38      	pop	{r3, r4, r5, pc}
   19526:	2007      	movs	r0, #7
   19528:	4770      	bx	lr
   1952a:	2008      	movs	r0, #8
   1952c:	bd38      	pop	{r3, r4, r5, pc}
   1952e:	f7f8 fad1 	bl	11ad4 <bsd_os_application_irq_set>
   19532:	2000      	movs	r0, #0
   19534:	bd38      	pop	{r3, r4, r5, pc}
   19536:	7821      	ldrb	r1, [r4, #0]
   19538:	2903      	cmp	r1, #3
   1953a:	f47f af77 	bne.w	1942c <rpc_message_free+0x24>
   1953e:	2100      	movs	r1, #0
   19540:	2501      	movs	r5, #1
   19542:	4618      	mov	r0, r3
   19544:	68d2      	ldr	r2, [r2, #12]
   19546:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   1954a:	4790      	blx	r2
   1954c:	2000      	movs	r0, #0
   1954e:	bd38      	pop	{r3, r4, r5, pc}
   19550:	7a21      	ldrb	r1, [r4, #8]
   19552:	2903      	cmp	r1, #3
   19554:	f47f af6e 	bne.w	19434 <rpc_message_free+0x2c>
   19558:	2101      	movs	r1, #1
   1955a:	e7f1      	b.n	19540 <rpc_message_free+0x138>
   1955c:	7c21      	ldrb	r1, [r4, #16]
   1955e:	2903      	cmp	r1, #3
   19560:	f47f af6c 	bne.w	1943c <rpc_message_free+0x34>
   19564:	2102      	movs	r1, #2
   19566:	e7eb      	b.n	19540 <rpc_message_free+0x138>
   19568:	7e21      	ldrb	r1, [r4, #24]
   1956a:	2903      	cmp	r1, #3
   1956c:	d0e8      	beq.n	19540 <rpc_message_free+0x138>
   1956e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19570:	4298      	cmp	r0, r3
   19572:	f47f af6b 	bne.w	1944c <rpc_message_free+0x44>
   19576:	f894 1020 	ldrb.w	r1, [r4, #32]
   1957a:	2903      	cmp	r1, #3
   1957c:	f47f af66 	bne.w	1944c <rpc_message_free+0x44>
   19580:	2104      	movs	r1, #4
   19582:	e7dd      	b.n	19540 <rpc_message_free+0x138>
   19584:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   19588:	2903      	cmp	r1, #3
   1958a:	f47f af63 	bne.w	19454 <rpc_message_free+0x4c>
   1958e:	2105      	movs	r1, #5
   19590:	e7d6      	b.n	19540 <rpc_message_free+0x138>
   19592:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   19596:	2903      	cmp	r1, #3
   19598:	f47f af60 	bne.w	1945c <rpc_message_free+0x54>
   1959c:	2106      	movs	r1, #6
   1959e:	e7cf      	b.n	19540 <rpc_message_free+0x138>
   195a0:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   195a4:	2903      	cmp	r1, #3
   195a6:	f47f af5d 	bne.w	19464 <rpc_message_free+0x5c>
   195aa:	2107      	movs	r1, #7
   195ac:	e7c8      	b.n	19540 <rpc_message_free+0x138>
   195ae:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   195b2:	2903      	cmp	r1, #3
   195b4:	f47f af5a 	bne.w	1946c <rpc_message_free+0x64>
   195b8:	2108      	movs	r1, #8
   195ba:	e7c1      	b.n	19540 <rpc_message_free+0x138>
   195bc:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   195c0:	2903      	cmp	r1, #3
   195c2:	f47f af57 	bne.w	19474 <rpc_message_free+0x6c>
   195c6:	2109      	movs	r1, #9
   195c8:	e7ba      	b.n	19540 <rpc_message_free+0x138>
   195ca:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   195ce:	2903      	cmp	r1, #3
   195d0:	f47f af54 	bne.w	1947c <rpc_message_free+0x74>
   195d4:	210a      	movs	r1, #10
   195d6:	e7b3      	b.n	19540 <rpc_message_free+0x138>
   195d8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   195dc:	2903      	cmp	r1, #3
   195de:	f47f af51 	bne.w	19484 <rpc_message_free+0x7c>
   195e2:	210b      	movs	r1, #11
   195e4:	e7ac      	b.n	19540 <rpc_message_free+0x138>
   195e6:	200e      	movs	r0, #14
   195e8:	4770      	bx	lr
   195ea:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   195ee:	2903      	cmp	r1, #3
   195f0:	f47f af4c 	bne.w	1948c <rpc_message_free+0x84>
   195f4:	210c      	movs	r1, #12
   195f6:	e7a3      	b.n	19540 <rpc_message_free+0x138>
   195f8:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   195fc:	2903      	cmp	r1, #3
   195fe:	f47f af49 	bne.w	19494 <rpc_message_free+0x8c>
   19602:	210d      	movs	r1, #13
   19604:	e79c      	b.n	19540 <rpc_message_free+0x138>
   19606:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   1960a:	2903      	cmp	r1, #3
   1960c:	f47f af46 	bne.w	1949c <rpc_message_free+0x94>
   19610:	210e      	movs	r1, #14
   19612:	e795      	b.n	19540 <rpc_message_free+0x138>
   19614:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19618:	2b03      	cmp	r3, #3
   1961a:	f47f af43 	bne.w	194a4 <rpc_message_free+0x9c>
   1961e:	4603      	mov	r3, r0
   19620:	210f      	movs	r1, #15
   19622:	e78d      	b.n	19540 <rpc_message_free+0x138>
   19624:	20020a1c 	.word	0x20020a1c
   19628:	20020ab4 	.word	0x20020ab4

0001962c <rpc_message_data_free>:
   1962c:	2800      	cmp	r0, #0
   1962e:	f000 8091 	beq.w	19754 <rpc_message_data_free+0x128>
   19632:	2900      	cmp	r1, #0
   19634:	f000 80e4 	beq.w	19800 <rpc_message_data_free+0x1d4>
   19638:	b538      	push	{r3, r4, r5, lr}
   1963a:	4a81      	ldr	r2, [pc, #516]	; (19840 <rpc_message_data_free+0x214>)
   1963c:	6853      	ldr	r3, [r2, #4]
   1963e:	2b00      	cmp	r3, #0
   19640:	f000 808a 	beq.w	19758 <rpc_message_data_free+0x12c>
   19644:	4b7f      	ldr	r3, [pc, #508]	; (19844 <rpc_message_data_free+0x218>)
   19646:	681c      	ldr	r4, [r3, #0]
   19648:	42a1      	cmp	r1, r4
   1964a:	f000 8087 	beq.w	1975c <rpc_message_data_free+0x130>
   1964e:	689c      	ldr	r4, [r3, #8]
   19650:	42a1      	cmp	r1, r4
   19652:	f000 808f 	beq.w	19774 <rpc_message_data_free+0x148>
   19656:	691c      	ldr	r4, [r3, #16]
   19658:	42a1      	cmp	r1, r4
   1965a:	f000 8091 	beq.w	19780 <rpc_message_data_free+0x154>
   1965e:	699c      	ldr	r4, [r3, #24]
   19660:	42a1      	cmp	r1, r4
   19662:	f000 8093 	beq.w	1978c <rpc_message_data_free+0x160>
   19666:	6a1c      	ldr	r4, [r3, #32]
   19668:	42a1      	cmp	r1, r4
   1966a:	f000 8095 	beq.w	19798 <rpc_message_data_free+0x16c>
   1966e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   19670:	42a1      	cmp	r1, r4
   19672:	f000 8097 	beq.w	197a4 <rpc_message_data_free+0x178>
   19676:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   19678:	42a1      	cmp	r1, r4
   1967a:	f000 8099 	beq.w	197b0 <rpc_message_data_free+0x184>
   1967e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   19680:	42a1      	cmp	r1, r4
   19682:	f000 809b 	beq.w	197bc <rpc_message_data_free+0x190>
   19686:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   19688:	42a1      	cmp	r1, r4
   1968a:	f000 809d 	beq.w	197c8 <rpc_message_data_free+0x19c>
   1968e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   19690:	42a1      	cmp	r1, r4
   19692:	f000 80a0 	beq.w	197d6 <rpc_message_data_free+0x1aa>
   19696:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   19698:	42a1      	cmp	r1, r4
   1969a:	f000 80a3 	beq.w	197e4 <rpc_message_data_free+0x1b8>
   1969e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   196a0:	42a1      	cmp	r1, r4
   196a2:	f000 80a6 	beq.w	197f2 <rpc_message_data_free+0x1c6>
   196a6:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   196a8:	42a1      	cmp	r1, r4
   196aa:	f000 80ab 	beq.w	19804 <rpc_message_data_free+0x1d8>
   196ae:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   196b0:	42a1      	cmp	r1, r4
   196b2:	f000 80ae 	beq.w	19812 <rpc_message_data_free+0x1e6>
   196b6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   196b8:	42a1      	cmp	r1, r4
   196ba:	f000 80b1 	beq.w	19820 <rpc_message_data_free+0x1f4>
   196be:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   196c0:	428c      	cmp	r4, r1
   196c2:	f000 80b4 	beq.w	1982e <rpc_message_data_free+0x202>
   196c6:	6913      	ldr	r3, [r2, #16]
   196c8:	4608      	mov	r0, r1
   196ca:	4798      	blx	r3
   196cc:	4b5e      	ldr	r3, [pc, #376]	; (19848 <rpc_message_data_free+0x21c>)
   196ce:	781a      	ldrb	r2, [r3, #0]
   196d0:	2a04      	cmp	r2, #4
   196d2:	d03b      	beq.n	1974c <rpc_message_data_free+0x120>
   196d4:	7a1a      	ldrb	r2, [r3, #8]
   196d6:	2a04      	cmp	r2, #4
   196d8:	d038      	beq.n	1974c <rpc_message_data_free+0x120>
   196da:	7c1a      	ldrb	r2, [r3, #16]
   196dc:	2a04      	cmp	r2, #4
   196de:	d035      	beq.n	1974c <rpc_message_data_free+0x120>
   196e0:	7e1a      	ldrb	r2, [r3, #24]
   196e2:	2a04      	cmp	r2, #4
   196e4:	d032      	beq.n	1974c <rpc_message_data_free+0x120>
   196e6:	f893 2020 	ldrb.w	r2, [r3, #32]
   196ea:	2a04      	cmp	r2, #4
   196ec:	d02e      	beq.n	1974c <rpc_message_data_free+0x120>
   196ee:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   196f2:	2a04      	cmp	r2, #4
   196f4:	d02a      	beq.n	1974c <rpc_message_data_free+0x120>
   196f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   196fa:	2a04      	cmp	r2, #4
   196fc:	d026      	beq.n	1974c <rpc_message_data_free+0x120>
   196fe:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   19702:	2a04      	cmp	r2, #4
   19704:	d022      	beq.n	1974c <rpc_message_data_free+0x120>
   19706:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1970a:	2a04      	cmp	r2, #4
   1970c:	d01e      	beq.n	1974c <rpc_message_data_free+0x120>
   1970e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   19712:	2a04      	cmp	r2, #4
   19714:	d01a      	beq.n	1974c <rpc_message_data_free+0x120>
   19716:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1971a:	2a04      	cmp	r2, #4
   1971c:	d016      	beq.n	1974c <rpc_message_data_free+0x120>
   1971e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   19722:	2a04      	cmp	r2, #4
   19724:	d012      	beq.n	1974c <rpc_message_data_free+0x120>
   19726:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   1972a:	2a04      	cmp	r2, #4
   1972c:	d00e      	beq.n	1974c <rpc_message_data_free+0x120>
   1972e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   19732:	2a04      	cmp	r2, #4
   19734:	d00a      	beq.n	1974c <rpc_message_data_free+0x120>
   19736:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   1973a:	2a04      	cmp	r2, #4
   1973c:	d006      	beq.n	1974c <rpc_message_data_free+0x120>
   1973e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   19742:	2b04      	cmp	r3, #4
   19744:	bf18      	it	ne
   19746:	2000      	movne	r0, #0
   19748:	d000      	beq.n	1974c <rpc_message_data_free+0x120>
   1974a:	bd38      	pop	{r3, r4, r5, pc}
   1974c:	f7f8 f9c2 	bl	11ad4 <bsd_os_application_irq_set>
   19750:	2000      	movs	r0, #0
   19752:	bd38      	pop	{r3, r4, r5, pc}
   19754:	2007      	movs	r0, #7
   19756:	4770      	bx	lr
   19758:	2008      	movs	r0, #8
   1975a:	bd38      	pop	{r3, r4, r5, pc}
   1975c:	889c      	ldrh	r4, [r3, #4]
   1975e:	4284      	cmp	r4, r0
   19760:	f47f af75 	bne.w	1964e <rpc_message_data_free+0x22>
   19764:	2400      	movs	r4, #0
   19766:	2000      	movs	r0, #0
   19768:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   1976c:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   19770:	80a8      	strh	r0, [r5, #4]
   19772:	e7a8      	b.n	196c6 <rpc_message_data_free+0x9a>
   19774:	899c      	ldrh	r4, [r3, #12]
   19776:	4284      	cmp	r4, r0
   19778:	f47f af6d 	bne.w	19656 <rpc_message_data_free+0x2a>
   1977c:	2401      	movs	r4, #1
   1977e:	e7f2      	b.n	19766 <rpc_message_data_free+0x13a>
   19780:	8a9c      	ldrh	r4, [r3, #20]
   19782:	4284      	cmp	r4, r0
   19784:	f47f af6b 	bne.w	1965e <rpc_message_data_free+0x32>
   19788:	2402      	movs	r4, #2
   1978a:	e7ec      	b.n	19766 <rpc_message_data_free+0x13a>
   1978c:	8b9c      	ldrh	r4, [r3, #28]
   1978e:	4284      	cmp	r4, r0
   19790:	f47f af69 	bne.w	19666 <rpc_message_data_free+0x3a>
   19794:	2403      	movs	r4, #3
   19796:	e7e6      	b.n	19766 <rpc_message_data_free+0x13a>
   19798:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   1979a:	4284      	cmp	r4, r0
   1979c:	f47f af67 	bne.w	1966e <rpc_message_data_free+0x42>
   197a0:	2404      	movs	r4, #4
   197a2:	e7e0      	b.n	19766 <rpc_message_data_free+0x13a>
   197a4:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   197a6:	4284      	cmp	r4, r0
   197a8:	f47f af65 	bne.w	19676 <rpc_message_data_free+0x4a>
   197ac:	2405      	movs	r4, #5
   197ae:	e7da      	b.n	19766 <rpc_message_data_free+0x13a>
   197b0:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   197b2:	4284      	cmp	r4, r0
   197b4:	f47f af63 	bne.w	1967e <rpc_message_data_free+0x52>
   197b8:	2406      	movs	r4, #6
   197ba:	e7d4      	b.n	19766 <rpc_message_data_free+0x13a>
   197bc:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   197be:	4284      	cmp	r4, r0
   197c0:	f47f af61 	bne.w	19686 <rpc_message_data_free+0x5a>
   197c4:	2407      	movs	r4, #7
   197c6:	e7ce      	b.n	19766 <rpc_message_data_free+0x13a>
   197c8:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   197cc:	4284      	cmp	r4, r0
   197ce:	f47f af5e 	bne.w	1968e <rpc_message_data_free+0x62>
   197d2:	2408      	movs	r4, #8
   197d4:	e7c7      	b.n	19766 <rpc_message_data_free+0x13a>
   197d6:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   197da:	4284      	cmp	r4, r0
   197dc:	f47f af5b 	bne.w	19696 <rpc_message_data_free+0x6a>
   197e0:	2409      	movs	r4, #9
   197e2:	e7c0      	b.n	19766 <rpc_message_data_free+0x13a>
   197e4:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   197e8:	4284      	cmp	r4, r0
   197ea:	f47f af58 	bne.w	1969e <rpc_message_data_free+0x72>
   197ee:	240a      	movs	r4, #10
   197f0:	e7b9      	b.n	19766 <rpc_message_data_free+0x13a>
   197f2:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   197f6:	4284      	cmp	r4, r0
   197f8:	f47f af55 	bne.w	196a6 <rpc_message_data_free+0x7a>
   197fc:	240b      	movs	r4, #11
   197fe:	e7b2      	b.n	19766 <rpc_message_data_free+0x13a>
   19800:	200e      	movs	r0, #14
   19802:	4770      	bx	lr
   19804:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   19808:	4284      	cmp	r4, r0
   1980a:	f47f af50 	bne.w	196ae <rpc_message_data_free+0x82>
   1980e:	240c      	movs	r4, #12
   19810:	e7a9      	b.n	19766 <rpc_message_data_free+0x13a>
   19812:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   19816:	4284      	cmp	r4, r0
   19818:	f47f af4d 	bne.w	196b6 <rpc_message_data_free+0x8a>
   1981c:	240d      	movs	r4, #13
   1981e:	e7a2      	b.n	19766 <rpc_message_data_free+0x13a>
   19820:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   19824:	4284      	cmp	r4, r0
   19826:	f47f af4a 	bne.w	196be <rpc_message_data_free+0x92>
   1982a:	240e      	movs	r4, #14
   1982c:	e79b      	b.n	19766 <rpc_message_data_free+0x13a>
   1982e:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   19832:	4284      	cmp	r4, r0
   19834:	bf08      	it	eq
   19836:	240f      	moveq	r4, #15
   19838:	f47f af45 	bne.w	196c6 <rpc_message_data_free+0x9a>
   1983c:	e793      	b.n	19766 <rpc_message_data_free+0x13a>
   1983e:	bf00      	nop
   19840:	20020a1c 	.word	0x20020a1c
   19844:	20020a34 	.word	0x20020a34
   19848:	20020ab4 	.word	0x20020ab4

0001984c <packet_free_cb>:
   1984c:	b510      	push	{r4, lr}
   1984e:	4604      	mov	r4, r0
   19850:	b118      	cbz	r0, 1985a <packet_free_cb+0xe>
   19852:	6800      	ldr	r0, [r0, #0]
   19854:	b108      	cbz	r0, 1985a <packet_free_cb+0xe>
   19856:	f001 f829 	bl	1a8ac <rpc_gnss_client_data_free>
   1985a:	68a0      	ldr	r0, [r4, #8]
   1985c:	b118      	cbz	r0, 19866 <packet_free_cb+0x1a>
   1985e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19862:	f7fa b93b 	b.w	13adc <nrf_free>
   19866:	bd10      	pop	{r4, pc}

00019868 <rpc_gnss_event_handler>:
   19868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1986c:	4b64      	ldr	r3, [pc, #400]	; (19a00 <rpc_gnss_event_handler+0x198>)
   1986e:	4606      	mov	r6, r0
   19870:	6800      	ldr	r0, [r0, #0]
   19872:	881b      	ldrh	r3, [r3, #0]
   19874:	6802      	ldr	r2, [r0, #0]
   19876:	4f63      	ldr	r7, [pc, #396]	; (19a04 <rpc_gnss_event_handler+0x19c>)
   19878:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1987c:	b084      	sub	sp, #16
   1987e:	460d      	mov	r5, r1
   19880:	6038      	str	r0, [r7, #0]
   19882:	d038      	beq.n	198f6 <rpc_gnss_event_handler+0x8e>
   19884:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   19888:	33ff      	adds	r3, #255	; 0xff
   1988a:	b29b      	uxth	r3, r3
   1988c:	2b02      	cmp	r3, #2
   1988e:	d810      	bhi.n	198b2 <rpc_gnss_event_handler+0x4a>
   19890:	4c5d      	ldr	r4, [pc, #372]	; (19a08 <rpc_gnss_event_handler+0x1a0>)
   19892:	6823      	ldr	r3, [r4, #0]
   19894:	075a      	lsls	r2, r3, #29
   19896:	d410      	bmi.n	198ba <rpc_gnss_event_handler+0x52>
   19898:	6823      	ldr	r3, [r4, #0]
   1989a:	079b      	lsls	r3, r3, #30
   1989c:	d503      	bpl.n	198a6 <rpc_gnss_event_handler+0x3e>
   1989e:	f244 0303 	movw	r3, #16387	; 0x4003
   198a2:	429d      	cmp	r5, r3
   198a4:	d009      	beq.n	198ba <rpc_gnss_event_handler+0x52>
   198a6:	6830      	ldr	r0, [r6, #0]
   198a8:	b118      	cbz	r0, 198b2 <rpc_gnss_event_handler+0x4a>
   198aa:	f000 ffff 	bl	1a8ac <rpc_gnss_client_data_free>
   198ae:	2300      	movs	r3, #0
   198b0:	603b      	str	r3, [r7, #0]
   198b2:	2000      	movs	r0, #0
   198b4:	b004      	add	sp, #16
   198b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198ba:	2002      	movs	r0, #2
   198bc:	f7fa f904 	bl	13ac8 <nrf_malloc>
   198c0:	4680      	mov	r8, r0
   198c2:	2800      	cmp	r0, #0
   198c4:	f000 8093 	beq.w	199ee <rpc_gnss_event_handler+0x186>
   198c8:	2302      	movs	r3, #2
   198ca:	8005      	strh	r5, [r0, #0]
   198cc:	6831      	ldr	r1, [r6, #0]
   198ce:	6872      	ldr	r2, [r6, #4]
   198d0:	484e      	ldr	r0, [pc, #312]	; (19a0c <rpc_gnss_event_handler+0x1a4>)
   198d2:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   198d6:	6800      	ldr	r0, [r0, #0]
   198d8:	9303      	str	r3, [sp, #12]
   198da:	6803      	ldr	r3, [r0, #0]
   198dc:	4669      	mov	r1, sp
   198de:	685b      	ldr	r3, [r3, #4]
   198e0:	4798      	blx	r3
   198e2:	3001      	adds	r0, #1
   198e4:	d070      	beq.n	199c8 <rpc_gnss_event_handler+0x160>
   198e6:	2000      	movs	r0, #0
   198e8:	6823      	ldr	r3, [r4, #0]
   198ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   198ee:	6023      	str	r3, [r4, #0]
   198f0:	b004      	add	sp, #16
   198f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198f6:	4c44      	ldr	r4, [pc, #272]	; (19a08 <rpc_gnss_event_handler+0x1a0>)
   198f8:	6823      	ldr	r3, [r4, #0]
   198fa:	01d9      	lsls	r1, r3, #7
   198fc:	d523      	bpl.n	19946 <rpc_gnss_event_handler+0xde>
   198fe:	f242 1302 	movw	r3, #8450	; 0x2102
   19902:	429d      	cmp	r5, r3
   19904:	d11f      	bne.n	19946 <rpc_gnss_event_handler+0xde>
   19906:	6843      	ldr	r3, [r0, #4]
   19908:	b91b      	cbnz	r3, 19912 <rpc_gnss_event_handler+0xaa>
   1990a:	6823      	ldr	r3, [r4, #0]
   1990c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   19910:	6023      	str	r3, [r4, #0]
   19912:	6823      	ldr	r3, [r4, #0]
   19914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19918:	6023      	str	r3, [r4, #0]
   1991a:	6823      	ldr	r3, [r4, #0]
   1991c:	025a      	lsls	r2, r3, #9
   1991e:	d430      	bmi.n	19982 <rpc_gnss_event_handler+0x11a>
   19920:	f242 0305 	movw	r3, #8197	; 0x2005
   19924:	429d      	cmp	r5, r3
   19926:	d12c      	bne.n	19982 <rpc_gnss_event_handler+0x11a>
   19928:	6823      	ldr	r3, [r4, #0]
   1992a:	0299      	lsls	r1, r3, #10
   1992c:	d529      	bpl.n	19982 <rpc_gnss_event_handler+0x11a>
   1992e:	6843      	ldr	r3, [r0, #4]
   19930:	2b00      	cmp	r3, #0
   19932:	d157      	bne.n	199e4 <rpc_gnss_event_handler+0x17c>
   19934:	6823      	ldr	r3, [r4, #0]
   19936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1993a:	6023      	str	r3, [r4, #0]
   1993c:	6823      	ldr	r3, [r4, #0]
   1993e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19942:	6023      	str	r3, [r4, #0]
   19944:	e01d      	b.n	19982 <rpc_gnss_event_handler+0x11a>
   19946:	6823      	ldr	r3, [r4, #0]
   19948:	025b      	lsls	r3, r3, #9
   1994a:	d50e      	bpl.n	1996a <rpc_gnss_event_handler+0x102>
   1994c:	f242 1303 	movw	r3, #8451	; 0x2103
   19950:	429d      	cmp	r5, r3
   19952:	d10a      	bne.n	1996a <rpc_gnss_event_handler+0x102>
   19954:	6843      	ldr	r3, [r0, #4]
   19956:	b91b      	cbnz	r3, 19960 <rpc_gnss_event_handler+0xf8>
   19958:	6823      	ldr	r3, [r4, #0]
   1995a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1995e:	6023      	str	r3, [r4, #0]
   19960:	6823      	ldr	r3, [r4, #0]
   19962:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19966:	6023      	str	r3, [r4, #0]
   19968:	e00b      	b.n	19982 <rpc_gnss_event_handler+0x11a>
   1996a:	f242 0301 	movw	r3, #8193	; 0x2001
   1996e:	429d      	cmp	r5, r3
   19970:	d10c      	bne.n	1998c <rpc_gnss_event_handler+0x124>
   19972:	6843      	ldr	r3, [r0, #4]
   19974:	b92b      	cbnz	r3, 19982 <rpc_gnss_event_handler+0x11a>
   19976:	6823      	ldr	r3, [r4, #0]
   19978:	0c1b      	lsrs	r3, r3, #16
   1997a:	041b      	lsls	r3, r3, #16
   1997c:	f043 0302 	orr.w	r3, r3, #2
   19980:	6023      	str	r3, [r4, #0]
   19982:	f000 ff93 	bl	1a8ac <rpc_gnss_client_data_free>
   19986:	2300      	movs	r3, #0
   19988:	603b      	str	r3, [r7, #0]
   1998a:	e77b      	b.n	19884 <rpc_gnss_event_handler+0x1c>
   1998c:	f242 0304 	movw	r3, #8196	; 0x2004
   19990:	429d      	cmp	r5, r3
   19992:	d1c5      	bne.n	19920 <rpc_gnss_event_handler+0xb8>
   19994:	6843      	ldr	r3, [r0, #4]
   19996:	b993      	cbnz	r3, 199be <rpc_gnss_event_handler+0x156>
   19998:	6823      	ldr	r3, [r4, #0]
   1999a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1999e:	6023      	str	r3, [r4, #0]
   199a0:	6823      	ldr	r3, [r4, #0]
   199a2:	b29b      	uxth	r3, r3
   199a4:	2b03      	cmp	r3, #3
   199a6:	6823      	ldr	r3, [r4, #0]
   199a8:	d016      	beq.n	199d8 <rpc_gnss_event_handler+0x170>
   199aa:	b29b      	uxth	r3, r3
   199ac:	2b04      	cmp	r3, #4
   199ae:	d1d7      	bne.n	19960 <rpc_gnss_event_handler+0xf8>
   199b0:	6823      	ldr	r3, [r4, #0]
   199b2:	0c1b      	lsrs	r3, r3, #16
   199b4:	041b      	lsls	r3, r3, #16
   199b6:	f043 0302 	orr.w	r3, r3, #2
   199ba:	6023      	str	r3, [r4, #0]
   199bc:	e7d0      	b.n	19960 <rpc_gnss_event_handler+0xf8>
   199be:	6823      	ldr	r3, [r4, #0]
   199c0:	b29b      	uxth	r3, r3
   199c2:	2b03      	cmp	r3, #3
   199c4:	d1cc      	bne.n	19960 <rpc_gnss_event_handler+0xf8>
   199c6:	e7f3      	b.n	199b0 <rpc_gnss_event_handler+0x148>
   199c8:	4640      	mov	r0, r8
   199ca:	f7fa f887 	bl	13adc <nrf_free>
   199ce:	6830      	ldr	r0, [r6, #0]
   199d0:	2800      	cmp	r0, #0
   199d2:	f47f af6a 	bne.w	198aa <rpc_gnss_event_handler+0x42>
   199d6:	e76c      	b.n	198b2 <rpc_gnss_event_handler+0x4a>
   199d8:	0c1b      	lsrs	r3, r3, #16
   199da:	041b      	lsls	r3, r3, #16
   199dc:	f043 0304 	orr.w	r3, r3, #4
   199e0:	6023      	str	r3, [r4, #0]
   199e2:	e7bd      	b.n	19960 <rpc_gnss_event_handler+0xf8>
   199e4:	6823      	ldr	r3, [r4, #0]
   199e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   199ea:	6023      	str	r3, [r4, #0]
   199ec:	e7c9      	b.n	19982 <rpc_gnss_event_handler+0x11a>
   199ee:	6830      	ldr	r0, [r6, #0]
   199f0:	2800      	cmp	r0, #0
   199f2:	f43f af5e 	beq.w	198b2 <rpc_gnss_event_handler+0x4a>
   199f6:	f000 ff59 	bl	1a8ac <rpc_gnss_client_data_free>
   199fa:	f8c7 8000 	str.w	r8, [r7]
   199fe:	e758      	b.n	198b2 <rpc_gnss_event_handler+0x4a>
   19a00:	20024e4c 	.word	0x20024e4c
   19a04:	20020b38 	.word	0x20020b38
   19a08:	20020b34 	.word	0x20020b34
   19a0c:	20020b3c 	.word	0x20020b3c

00019a10 <gnss_interface_write>:
   19a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a14:	4a75      	ldr	r2, [pc, #468]	; (19bec <gnss_interface_write+0x1dc>)
   19a16:	b09f      	sub	sp, #124	; 0x7c
   19a18:	4290      	cmp	r0, r2
   19a1a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   19a1c:	f040 80d4 	bne.w	19bc8 <gnss_interface_write+0x1b8>
   19a20:	2900      	cmp	r1, #0
   19a22:	f000 80c9 	beq.w	19bb8 <gnss_interface_write+0x1a8>
   19a26:	2d00      	cmp	r5, #0
   19a28:	f000 80c6 	beq.w	19bb8 <gnss_interface_write+0x1a8>
   19a2c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19a2e:	2a02      	cmp	r2, #2
   19a30:	f040 80c2 	bne.w	19bb8 <gnss_interface_write+0x1a8>
   19a34:	4c6e      	ldr	r4, [pc, #440]	; (19bf0 <gnss_interface_write+0x1e0>)
   19a36:	6822      	ldr	r2, [r4, #0]
   19a38:	b292      	uxth	r2, r2
   19a3a:	2a02      	cmp	r2, #2
   19a3c:	d004      	beq.n	19a48 <gnss_interface_write+0x38>
   19a3e:	6822      	ldr	r2, [r4, #0]
   19a40:	b292      	uxth	r2, r2
   19a42:	2a04      	cmp	r2, #4
   19a44:	f040 80c6 	bne.w	19bd4 <gnss_interface_write+0x1c4>
   19a48:	0798      	lsls	r0, r3, #30
   19a4a:	f100 80c9 	bmi.w	19be0 <gnss_interface_write+0x1d0>
   19a4e:	6820      	ldr	r0, [r4, #0]
   19a50:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   19a54:	d065      	beq.n	19b22 <gnss_interface_write+0x112>
   19a56:	6822      	ldr	r2, [r4, #0]
   19a58:	882b      	ldrh	r3, [r5, #0]
   19a5a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   19a5e:	6022      	str	r2, [r4, #0]
   19a60:	6822      	ldr	r2, [r4, #0]
   19a62:	3b01      	subs	r3, #1
   19a64:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   19a68:	6022      	str	r2, [r4, #0]
   19a6a:	2b07      	cmp	r3, #7
   19a6c:	f200 80a4 	bhi.w	19bb8 <gnss_interface_write+0x1a8>
   19a70:	e8df f003 	tbb	[pc, r3]
   19a74:	696e7378 	.word	0x696e7378
   19a78:	045f5a64 	.word	0x045f5a64
   19a7c:	4608      	mov	r0, r1
   19a7e:	a902      	add	r1, sp, #8
   19a80:	f000 fec8 	bl	1a814 <rpc_gnss_serialize_integrity>
   19a84:	2172      	movs	r1, #114	; 0x72
   19a86:	4668      	mov	r0, sp
   19a88:	f000 fede 	bl	1a848 <rpc_gnss_client_request_alloc>
   19a8c:	4605      	mov	r5, r0
   19a8e:	9800      	ldr	r0, [sp, #0]
   19a90:	2d00      	cmp	r5, #0
   19a92:	d16c      	bne.n	19b6e <gnss_interface_write+0x15e>
   19a94:	2800      	cmp	r0, #0
   19a96:	d071      	beq.n	19b7c <gnss_interface_write+0x16c>
   19a98:	f241 0605 	movw	r6, #4101	; 0x1005
   19a9c:	f04f 0c49 	mov.w	ip, #73	; 0x49
   19aa0:	2272      	movs	r2, #114	; 0x72
   19aa2:	f04f 0e76 	mov.w	lr, #118	; 0x76
   19aa6:	f04f 0943 	mov.w	r9, #67	; 0x43
   19aaa:	f04f 0854 	mov.w	r8, #84	; 0x54
   19aae:	4f51      	ldr	r7, [pc, #324]	; (19bf4 <gnss_interface_write+0x1e4>)
   19ab0:	a91e      	add	r1, sp, #120	; 0x78
   19ab2:	883b      	ldrh	r3, [r7, #0]
   19ab4:	f880 c00f 	strb.w	ip, [r0, #15]
   19ab8:	3301      	adds	r3, #1
   19aba:	b29b      	uxth	r3, r3
   19abc:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   19ac0:	f841 cd74 	str.w	ip, [r1, #-116]!
   19ac4:	7145      	strb	r5, [r0, #5]
   19ac6:	7185      	strb	r5, [r0, #6]
   19ac8:	71c5      	strb	r5, [r0, #7]
   19aca:	7205      	strb	r5, [r0, #8]
   19acc:	7245      	strb	r5, [r0, #9]
   19ace:	7285      	strb	r5, [r0, #10]
   19ad0:	72c5      	strb	r5, [r0, #11]
   19ad2:	7102      	strb	r2, [r0, #4]
   19ad4:	f880 900c 	strb.w	r9, [r0, #12]
   19ad8:	f880 800d 	strb.w	r8, [r0, #13]
   19adc:	f880 e00e 	strb.w	lr, [r0, #14]
   19ae0:	6800      	ldr	r0, [r0, #0]
   19ae2:	803b      	strh	r3, [r7, #0]
   19ae4:	f003 fd93 	bl	1d60e <memcpy>
   19ae8:	4b43      	ldr	r3, [pc, #268]	; (19bf8 <gnss_interface_write+0x1e8>)
   19aea:	4631      	mov	r1, r6
   19aec:	9800      	ldr	r0, [sp, #0]
   19aee:	601d      	str	r5, [r3, #0]
   19af0:	f000 febe 	bl	1a870 <rpc_gnss_client_request_send>
   19af4:	2800      	cmp	r0, #0
   19af6:	d148      	bne.n	19b8a <gnss_interface_write+0x17a>
   19af8:	6823      	ldr	r3, [r4, #0]
   19afa:	0299      	lsls	r1, r3, #10
   19afc:	d50d      	bpl.n	19b1a <gnss_interface_write+0x10a>
   19afe:	4e3f      	ldr	r6, [pc, #252]	; (19bfc <gnss_interface_write+0x1ec>)
   19b00:	4d3a      	ldr	r5, [pc, #232]	; (19bec <gnss_interface_write+0x1dc>)
   19b02:	e001      	b.n	19b08 <gnss_interface_write+0xf8>
   19b04:	2800      	cmp	r0, #0
   19b06:	d150      	bne.n	19baa <gnss_interface_write+0x19a>
   19b08:	4631      	mov	r1, r6
   19b0a:	4628      	mov	r0, r5
   19b0c:	f7f7 fea2 	bl	11854 <bsd_os_timedwait>
   19b10:	6823      	ldr	r3, [r4, #0]
   19b12:	029a      	lsls	r2, r3, #10
   19b14:	d4f6      	bmi.n	19b04 <gnss_interface_write+0xf4>
   19b16:	2800      	cmp	r0, #0
   19b18:	d147      	bne.n	19baa <gnss_interface_write+0x19a>
   19b1a:	6823      	ldr	r3, [r4, #0]
   19b1c:	039b      	lsls	r3, r3, #14
   19b1e:	d53f      	bpl.n	19ba0 <gnss_interface_write+0x190>
   19b20:	2000      	movs	r0, #0
   19b22:	b01f      	add	sp, #124	; 0x7c
   19b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19b28:	4608      	mov	r0, r1
   19b2a:	a902      	add	r1, sp, #8
   19b2c:	f000 fe2a 	bl	1a784 <rpc_gnss_serialize_time_and_sv_tow>
   19b30:	e7a8      	b.n	19a84 <gnss_interface_write+0x74>
   19b32:	4608      	mov	r0, r1
   19b34:	a902      	add	r1, sp, #8
   19b36:	f000 fe4d 	bl	1a7d4 <rpc_gnss_serialize_location>
   19b3a:	e7a3      	b.n	19a84 <gnss_interface_write+0x74>
   19b3c:	4608      	mov	r0, r1
   19b3e:	a902      	add	r1, sp, #8
   19b40:	f000 fe06 	bl	1a750 <rpc_gnss_serialize_nequick>
   19b44:	e79e      	b.n	19a84 <gnss_interface_write+0x74>
   19b46:	4608      	mov	r0, r1
   19b48:	a902      	add	r1, sp, #8
   19b4a:	f000 fddd 	bl	1a708 <rpc_gnss_serialize_klob>
   19b4e:	e799      	b.n	19a84 <gnss_interface_write+0x74>
   19b50:	4608      	mov	r0, r1
   19b52:	a902      	add	r1, sp, #8
   19b54:	f000 fda6 	bl	1a6a4 <rpc_gnss_serialize_alm>
   19b58:	e794      	b.n	19a84 <gnss_interface_write+0x74>
   19b5a:	4608      	mov	r0, r1
   19b5c:	a902      	add	r1, sp, #8
   19b5e:	f000 fd4f 	bl	1a600 <rpc_gnss_serialize_ephe>
   19b62:	e78f      	b.n	19a84 <gnss_interface_write+0x74>
   19b64:	4608      	mov	r0, r1
   19b66:	a902      	add	r1, sp, #8
   19b68:	f000 fd28 	bl	1a5bc <rpc_gnss_serialize_utc>
   19b6c:	e78a      	b.n	19a84 <gnss_interface_write+0x74>
   19b6e:	b128      	cbz	r0, 19b7c <gnss_interface_write+0x16c>
   19b70:	6803      	ldr	r3, [r0, #0]
   19b72:	b11b      	cbz	r3, 19b7c <gnss_interface_write+0x16c>
   19b74:	4618      	mov	r0, r3
   19b76:	f000 fe99 	bl	1a8ac <rpc_gnss_client_data_free>
   19b7a:	9800      	ldr	r0, [sp, #0]
   19b7c:	f000 fe8e 	bl	1a89c <rpc_gnss_client_message_free>
   19b80:	2023      	movs	r0, #35	; 0x23
   19b82:	f7f7 fefb 	bl	1197c <bsd_os_errno_set>
   19b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19b8a:	6823      	ldr	r3, [r4, #0]
   19b8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19b90:	6023      	str	r3, [r4, #0]
   19b92:	6823      	ldr	r3, [r4, #0]
   19b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19b98:	6023      	str	r3, [r4, #0]
   19b9a:	b01f      	add	sp, #124	; 0x7c
   19b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19ba0:	2005      	movs	r0, #5
   19ba2:	6823      	ldr	r3, [r4, #0]
   19ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19ba8:	6023      	str	r3, [r4, #0]
   19baa:	f7f7 fee7 	bl	1197c <bsd_os_errno_set>
   19bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bb2:	b01f      	add	sp, #124	; 0x7c
   19bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19bb8:	2016      	movs	r0, #22
   19bba:	f7f7 fedf 	bl	1197c <bsd_os_errno_set>
   19bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bc2:	b01f      	add	sp, #124	; 0x7c
   19bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19bc8:	2009      	movs	r0, #9
   19bca:	f7f7 fed7 	bl	1197c <bsd_os_errno_set>
   19bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bd2:	e7a6      	b.n	19b22 <gnss_interface_write+0x112>
   19bd4:	2039      	movs	r0, #57	; 0x39
   19bd6:	f7f7 fed1 	bl	1197c <bsd_os_errno_set>
   19bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bde:	e7a0      	b.n	19b22 <gnss_interface_write+0x112>
   19be0:	202d      	movs	r0, #45	; 0x2d
   19be2:	f7f7 fecb 	bl	1197c <bsd_os_errno_set>
   19be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bea:	e79a      	b.n	19b22 <gnss_interface_write+0x112>
   19bec:	49765443 	.word	0x49765443
   19bf0:	20020b34 	.word	0x20020b34
   19bf4:	20024e4c 	.word	0x20024e4c
   19bf8:	20020b38 	.word	0x20020b38
   19bfc:	2002c55c 	.word	0x2002c55c

00019c00 <gnss_interface_read>:
   19c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c04:	4c4a      	ldr	r4, [pc, #296]	; (19d30 <gnss_interface_read+0x130>)
   19c06:	b0b7      	sub	sp, #220	; 0xdc
   19c08:	42a0      	cmp	r0, r4
   19c0a:	f040 81ec 	bne.w	19fe6 <gnss_interface_read+0x3e6>
   19c0e:	4688      	mov	r8, r1
   19c10:	2900      	cmp	r1, #0
   19c12:	f000 81e2 	beq.w	19fda <gnss_interface_read+0x3da>
   19c16:	2ad7      	cmp	r2, #215	; 0xd7
   19c18:	f240 81df 	bls.w	19fda <gnss_interface_read+0x3da>
   19c1c:	4d45      	ldr	r5, [pc, #276]	; (19d34 <gnss_interface_read+0x134>)
   19c1e:	4699      	mov	r9, r3
   19c20:	682b      	ldr	r3, [r5, #0]
   19c22:	b29b      	uxth	r3, r3
   19c24:	2b04      	cmp	r3, #4
   19c26:	d004      	beq.n	19c32 <gnss_interface_read+0x32>
   19c28:	682b      	ldr	r3, [r5, #0]
   19c2a:	b29b      	uxth	r3, r3
   19c2c:	2b02      	cmp	r3, #2
   19c2e:	f040 81e0 	bne.w	19ff2 <gnss_interface_read+0x3f2>
   19c32:	2102      	movs	r1, #2
   19c34:	20b6      	movs	r0, #182	; 0xb6
   19c36:	2400      	movs	r4, #0
   19c38:	682b      	ldr	r3, [r5, #0]
   19c3a:	f10d 020e 	add.w	r2, sp, #14
   19c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19c42:	602b      	str	r3, [r5, #0]
   19c44:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 19d3c <gnss_interface_read+0x13c>
   19c48:	ab08      	add	r3, sp, #32
   19c4a:	4f3b      	ldr	r7, [pc, #236]	; (19d38 <gnss_interface_read+0x138>)
   19c4c:	4e38      	ldr	r6, [pc, #224]	; (19d30 <gnss_interface_read+0x130>)
   19c4e:	9005      	str	r0, [sp, #20]
   19c50:	9107      	str	r1, [sp, #28]
   19c52:	9304      	str	r3, [sp, #16]
   19c54:	9206      	str	r2, [sp, #24]
   19c56:	ea09 0b01 	and.w	fp, r9, r1
   19c5a:	f8da 0000 	ldr.w	r0, [sl]
   19c5e:	464a      	mov	r2, r9
   19c60:	6803      	ldr	r3, [r0, #0]
   19c62:	a904      	add	r1, sp, #16
   19c64:	689b      	ldr	r3, [r3, #8]
   19c66:	4798      	blx	r3
   19c68:	2800      	cmp	r0, #0
   19c6a:	da11      	bge.n	19c90 <gnss_interface_read+0x90>
   19c6c:	f1bb 0f00 	cmp.w	fp, #0
   19c70:	d138      	bne.n	19ce4 <gnss_interface_read+0xe4>
   19c72:	682b      	ldr	r3, [r5, #0]
   19c74:	03d8      	lsls	r0, r3, #15
   19c76:	d4f0      	bmi.n	19c5a <gnss_interface_read+0x5a>
   19c78:	b10c      	cbz	r4, 19c7e <gnss_interface_read+0x7e>
   19c7a:	e7ee      	b.n	19c5a <gnss_interface_read+0x5a>
   19c7c:	b930      	cbnz	r0, 19c8c <gnss_interface_read+0x8c>
   19c7e:	4639      	mov	r1, r7
   19c80:	4630      	mov	r0, r6
   19c82:	f7f7 fde7 	bl	11854 <bsd_os_timedwait>
   19c86:	682b      	ldr	r3, [r5, #0]
   19c88:	03d9      	lsls	r1, r3, #15
   19c8a:	d5f7      	bpl.n	19c7c <gnss_interface_read+0x7c>
   19c8c:	4604      	mov	r4, r0
   19c8e:	e7e4      	b.n	19c5a <gnss_interface_read+0x5a>
   19c90:	f244 0202 	movw	r2, #16386	; 0x4002
   19c94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19c98:	4293      	cmp	r3, r2
   19c9a:	d039      	beq.n	19d10 <gnss_interface_read+0x110>
   19c9c:	f244 0201 	movw	r2, #16385	; 0x4001
   19ca0:	4293      	cmp	r3, r2
   19ca2:	d04d      	beq.n	19d40 <gnss_interface_read+0x140>
   19ca4:	f244 0203 	movw	r2, #16387	; 0x4003
   19ca8:	4293      	cmp	r3, r2
   19caa:	f040 8196 	bne.w	19fda <gnss_interface_read+0x3da>
   19cae:	2201      	movs	r2, #1
   19cb0:	2414      	movs	r4, #20
   19cb2:	9b08      	ldr	r3, [sp, #32]
   19cb4:	f888 2000 	strb.w	r2, [r8]
   19cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19cba:	f8c8 3008 	str.w	r3, [r8, #8]
   19cbe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19cc2:	e9c8 2303 	strd	r2, r3, [r8, #12]
   19cc6:	f8da 0000 	ldr.w	r0, [sl]
   19cca:	6803      	ldr	r3, [r0, #0]
   19ccc:	68db      	ldr	r3, [r3, #12]
   19cce:	4798      	blx	r3
   19cd0:	2800      	cmp	r0, #0
   19cd2:	dd03      	ble.n	19cdc <gnss_interface_read+0xdc>
   19cd4:	682b      	ldr	r3, [r5, #0]
   19cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19cda:	602b      	str	r3, [r5, #0]
   19cdc:	4620      	mov	r0, r4
   19cde:	b037      	add	sp, #220	; 0xdc
   19ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ce4:	1c42      	adds	r2, r0, #1
   19ce6:	4603      	mov	r3, r0
   19ce8:	d1d2      	bne.n	19c90 <gnss_interface_read+0x90>
   19cea:	b93c      	cbnz	r4, 19cfc <gnss_interface_read+0xfc>
   19cec:	461c      	mov	r4, r3
   19cee:	2023      	movs	r0, #35	; 0x23
   19cf0:	f7f7 fe44 	bl	1197c <bsd_os_errno_set>
   19cf4:	4620      	mov	r0, r4
   19cf6:	b037      	add	sp, #220	; 0xdc
   19cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cfc:	9001      	str	r0, [sp, #4]
   19cfe:	4620      	mov	r0, r4
   19d00:	f7f7 fe3c 	bl	1197c <bsd_os_errno_set>
   19d04:	9b01      	ldr	r3, [sp, #4]
   19d06:	461c      	mov	r4, r3
   19d08:	4620      	mov	r0, r4
   19d0a:	b037      	add	sp, #220	; 0xdc
   19d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d10:	a808      	add	r0, sp, #32
   19d12:	f003 fc41 	bl	1d598 <strlen>
   19d16:	2302      	movs	r3, #2
   19d18:	1c44      	adds	r4, r0, #1
   19d1a:	b2a4      	uxth	r4, r4
   19d1c:	f808 3b08 	strb.w	r3, [r8], #8
   19d20:	4622      	mov	r2, r4
   19d22:	a908      	add	r1, sp, #32
   19d24:	4640      	mov	r0, r8
   19d26:	f003 fc72 	bl	1d60e <memcpy>
   19d2a:	3408      	adds	r4, #8
   19d2c:	e7cb      	b.n	19cc6 <gnss_interface_read+0xc6>
   19d2e:	bf00      	nop
   19d30:	49765443 	.word	0x49765443
   19d34:	20020b34 	.word	0x20020b34
   19d38:	2002c55c 	.word	0x2002c55c
   19d3c:	20020b3c 	.word	0x20020b3c
   19d40:	2401      	movs	r4, #1
   19d42:	a809      	add	r0, sp, #36	; 0x24
   19d44:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   19d46:	e9c8 0102 	strd	r0, r1, [r8, #8]
   19d4a:	e9c8 2304 	strd	r2, r3, [r8, #16]
   19d4e:	990d      	ldr	r1, [sp, #52]	; 0x34
   19d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19d52:	f888 4000 	strb.w	r4, [r8]
   19d56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19d58:	f8c8 1018 	str.w	r1, [r8, #24]
   19d5c:	9910      	ldr	r1, [sp, #64]	; 0x40
   19d5e:	f8c8 201c 	str.w	r2, [r8, #28]
   19d62:	f8c8 3020 	str.w	r3, [r8, #32]
   19d66:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   19d6a:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   19d6e:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   19d72:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   19d76:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   19d7a:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   19d7e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   19d82:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   19d86:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   19d8a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   19d8e:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   19d92:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   19d96:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   19d9a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19d9e:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   19da2:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   19da6:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   19daa:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   19dae:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   19db2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19db4:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   19db8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   19dbc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   19dc0:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19dc6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19dca:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   19dce:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   19dd2:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   19dd6:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19dda:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   19dde:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   19de2:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   19de6:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   19dea:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   19dee:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   19df2:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   19df6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   19dfa:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   19dfe:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   19e02:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   19e06:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   19e0a:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   19e0e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   19e12:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   19e16:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   19e1a:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   19e1e:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   19e22:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   19e26:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   19e2a:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   19e2e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   19e32:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   19e36:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   19e3a:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   19e3e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   19e42:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   19e46:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19e48:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   19e4c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19e50:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   19e54:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19e58:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   19e5c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   19e60:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19e64:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   19e68:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   19e6c:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   19e70:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   19e74:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   19e78:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   19e7c:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   19e80:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   19e84:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   19e88:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   19e8c:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   19e90:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   19e94:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   19e98:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   19e9c:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   19ea0:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   19ea4:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   19ea8:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   19eac:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   19eb0:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   19eb4:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   19eb8:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   19ebc:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   19ec0:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   19ec4:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   19ec8:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   19ecc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   19ece:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   19ed2:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   19ed6:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19eda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19edc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19ee0:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   19ee4:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   19ee8:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   19eec:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19ef0:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   19ef4:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   19ef8:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   19efc:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   19f00:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   19f04:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   19f08:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   19f0c:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   19f10:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   19f14:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   19f18:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   19f1c:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   19f20:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   19f24:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   19f28:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   19f2c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   19f30:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   19f34:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   19f38:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   19f3c:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   19f40:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   19f44:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   19f48:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   19f4c:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   19f50:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   19f54:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   19f58:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   19f5c:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   19f60:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   19f62:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19f66:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   19f6a:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   19f6e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19f72:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19f76:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   19f7a:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   19f7e:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   19f82:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   19f86:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   19f8a:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   19f8e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   19f92:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   19f96:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   19f9a:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   19f9e:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   19fa2:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   19fa6:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   19faa:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   19fae:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   19fb2:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   19fb6:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   19fba:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   19fbe:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   19fc2:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   19fc6:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   19fca:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   19fce:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   19fd2:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   19fd6:	24d8      	movs	r4, #216	; 0xd8
   19fd8:	e675      	b.n	19cc6 <gnss_interface_read+0xc6>
   19fda:	2016      	movs	r0, #22
   19fdc:	f7f7 fcce 	bl	1197c <bsd_os_errno_set>
   19fe0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19fe4:	e67a      	b.n	19cdc <gnss_interface_read+0xdc>
   19fe6:	2009      	movs	r0, #9
   19fe8:	f7f7 fcc8 	bl	1197c <bsd_os_errno_set>
   19fec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19ff0:	e674      	b.n	19cdc <gnss_interface_read+0xdc>
   19ff2:	2039      	movs	r0, #57	; 0x39
   19ff4:	f7f7 fcc2 	bl	1197c <bsd_os_errno_set>
   19ff8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19ffc:	e66e      	b.n	19cdc <gnss_interface_read+0xdc>
   19ffe:	bf00      	nop

0001a000 <gnss_interface_setopt>:
   1a000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a004:	f241 1402 	movw	r4, #4354	; 0x1102
   1a008:	4222      	tst	r2, r4
   1a00a:	b086      	sub	sp, #24
   1a00c:	4d9c      	ldr	r5, [pc, #624]	; (1a280 <gnss_interface_setopt+0x280>)
   1a00e:	d004      	beq.n	1a01a <gnss_interface_setopt+0x1a>
   1a010:	682c      	ldr	r4, [r5, #0]
   1a012:	b2a4      	uxth	r4, r4
   1a014:	2c02      	cmp	r4, #2
   1a016:	f040 8104 	bne.w	1a222 <gnss_interface_setopt+0x222>
   1a01a:	682c      	ldr	r4, [r5, #0]
   1a01c:	0264      	lsls	r4, r4, #9
   1a01e:	f100 8128 	bmi.w	1a272 <gnss_interface_setopt+0x272>
   1a022:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a026:	f040 811e 	bne.w	1a266 <gnss_interface_setopt+0x266>
   1a02a:	4996      	ldr	r1, [pc, #600]	; (1a284 <gnss_interface_setopt+0x284>)
   1a02c:	4288      	cmp	r0, r1
   1a02e:	f040 8114 	bne.w	1a25a <gnss_interface_setopt+0x25a>
   1a032:	3a01      	subs	r2, #1
   1a034:	2a08      	cmp	r2, #8
   1a036:	f200 80ec 	bhi.w	1a212 <gnss_interface_setopt+0x212>
   1a03a:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a03e:	0075      	.short	0x0075
   1a040:	00c200d8 	.word	0x00c200d8
   1a044:	008100cc 	.word	0x008100cc
   1a048:	0098008c 	.word	0x0098008c
   1a04c:	000900af 	.word	0x000900af
   1a050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a052:	2a01      	cmp	r2, #1
   1a054:	f040 80dd 	bne.w	1a212 <gnss_interface_setopt+0x212>
   1a058:	f241 1603 	movw	r6, #4355	; 0x1103
   1a05c:	2240      	movs	r2, #64	; 0x40
   1a05e:	4637      	mov	r7, r6
   1a060:	781b      	ldrb	r3, [r3, #0]
   1a062:	9202      	str	r2, [sp, #8]
   1a064:	f88d 3015 	strb.w	r3, [sp, #21]
   1a068:	682b      	ldr	r3, [r5, #0]
   1a06a:	2112      	movs	r1, #18
   1a06c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a070:	4668      	mov	r0, sp
   1a072:	602b      	str	r3, [r5, #0]
   1a074:	f000 fbe8 	bl	1a848 <rpc_gnss_client_request_alloc>
   1a078:	4604      	mov	r4, r0
   1a07a:	9800      	ldr	r0, [sp, #0]
   1a07c:	2c00      	cmp	r4, #0
   1a07e:	f040 80d6 	bne.w	1a22e <gnss_interface_setopt+0x22e>
   1a082:	2800      	cmp	r0, #0
   1a084:	f000 80da 	beq.w	1a23c <gnss_interface_setopt+0x23c>
   1a088:	2212      	movs	r2, #18
   1a08a:	f04f 0876 	mov.w	r8, #118	; 0x76
   1a08e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a092:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1a096:	f04f 0954 	mov.w	r9, #84	; 0x54
   1a09a:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 1a28c <gnss_interface_setopt+0x28c>
   1a09e:	a906      	add	r1, sp, #24
   1a0a0:	f8bc 3000 	ldrh.w	r3, [ip]
   1a0a4:	f880 800e 	strb.w	r8, [r0, #14]
   1a0a8:	3301      	adds	r3, #1
   1a0aa:	b29b      	uxth	r3, r3
   1a0ac:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1a0b0:	f841 6d14 	str.w	r6, [r1, #-20]!
   1a0b4:	7144      	strb	r4, [r0, #5]
   1a0b6:	7184      	strb	r4, [r0, #6]
   1a0b8:	71c4      	strb	r4, [r0, #7]
   1a0ba:	7204      	strb	r4, [r0, #8]
   1a0bc:	7244      	strb	r4, [r0, #9]
   1a0be:	7284      	strb	r4, [r0, #10]
   1a0c0:	72c4      	strb	r4, [r0, #11]
   1a0c2:	7102      	strb	r2, [r0, #4]
   1a0c4:	f880 a00c 	strb.w	sl, [r0, #12]
   1a0c8:	f880 900d 	strb.w	r9, [r0, #13]
   1a0cc:	f880 e00f 	strb.w	lr, [r0, #15]
   1a0d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a290 <gnss_interface_setopt+0x290>
   1a0d4:	6800      	ldr	r0, [r0, #0]
   1a0d6:	f8ac 3000 	strh.w	r3, [ip]
   1a0da:	f003 fa98 	bl	1d60e <memcpy>
   1a0de:	4639      	mov	r1, r7
   1a0e0:	9800      	ldr	r0, [sp, #0]
   1a0e2:	f8c8 4000 	str.w	r4, [r8]
   1a0e6:	f000 fbc3 	bl	1a870 <rpc_gnss_client_request_send>
   1a0ea:	2800      	cmp	r0, #0
   1a0ec:	f040 80ab 	bne.w	1a246 <gnss_interface_setopt+0x246>
   1a0f0:	4f65      	ldr	r7, [pc, #404]	; (1a288 <gnss_interface_setopt+0x288>)
   1a0f2:	4e64      	ldr	r6, [pc, #400]	; (1a284 <gnss_interface_setopt+0x284>)
   1a0f4:	4639      	mov	r1, r7
   1a0f6:	4630      	mov	r0, r6
   1a0f8:	f7f7 fbac 	bl	11854 <bsd_os_timedwait>
   1a0fc:	682c      	ldr	r4, [r5, #0]
   1a0fe:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1a102:	d1f7      	bne.n	1a0f4 <gnss_interface_setopt+0xf4>
   1a104:	f8d8 0000 	ldr.w	r0, [r8]
   1a108:	b118      	cbz	r0, 1a112 <gnss_interface_setopt+0x112>
   1a10a:	f000 fbcf 	bl	1a8ac <rpc_gnss_client_data_free>
   1a10e:	f8c8 4000 	str.w	r4, [r8]
   1a112:	682b      	ldr	r3, [r5, #0]
   1a114:	021b      	lsls	r3, r3, #8
   1a116:	d576      	bpl.n	1a206 <gnss_interface_setopt+0x206>
   1a118:	2000      	movs	r0, #0
   1a11a:	682b      	ldr	r3, [r5, #0]
   1a11c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1a120:	602b      	str	r3, [r5, #0]
   1a122:	b006      	add	sp, #24
   1a124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a12a:	2a02      	cmp	r2, #2
   1a12c:	d171      	bne.n	1a212 <gnss_interface_setopt+0x212>
   1a12e:	2208      	movs	r2, #8
   1a130:	f241 1603 	movw	r6, #4355	; 0x1103
   1a134:	881b      	ldrh	r3, [r3, #0]
   1a136:	9202      	str	r2, [sp, #8]
   1a138:	f8ad 300f 	strh.w	r3, [sp, #15]
   1a13c:	4637      	mov	r7, r6
   1a13e:	e793      	b.n	1a068 <gnss_interface_setopt+0x68>
   1a140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a142:	2a01      	cmp	r2, #1
   1a144:	d165      	bne.n	1a212 <gnss_interface_setopt+0x212>
   1a146:	f241 1603 	movw	r6, #4355	; 0x1103
   1a14a:	781b      	ldrb	r3, [r3, #0]
   1a14c:	9202      	str	r2, [sp, #8]
   1a14e:	f88d 300c 	strb.w	r3, [sp, #12]
   1a152:	4637      	mov	r7, r6
   1a154:	e788      	b.n	1a068 <gnss_interface_setopt+0x68>
   1a156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a158:	2a01      	cmp	r2, #1
   1a15a:	d15a      	bne.n	1a212 <gnss_interface_setopt+0x212>
   1a15c:	2202      	movs	r2, #2
   1a15e:	f241 1603 	movw	r6, #4355	; 0x1103
   1a162:	781b      	ldrb	r3, [r3, #0]
   1a164:	9202      	str	r2, [sp, #8]
   1a166:	f88d 300d 	strb.w	r3, [sp, #13]
   1a16a:	4637      	mov	r7, r6
   1a16c:	e77c      	b.n	1a068 <gnss_interface_setopt+0x68>
   1a16e:	682a      	ldr	r2, [r5, #0]
   1a170:	b292      	uxth	r2, r2
   1a172:	2a02      	cmp	r2, #2
   1a174:	d155      	bne.n	1a222 <gnss_interface_setopt+0x222>
   1a176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a178:	2a04      	cmp	r2, #4
   1a17a:	d14a      	bne.n	1a212 <gnss_interface_setopt+0x212>
   1a17c:	2101      	movs	r1, #1
   1a17e:	f241 0604 	movw	r6, #4100	; 0x1004
   1a182:	682a      	ldr	r2, [r5, #0]
   1a184:	6818      	ldr	r0, [r3, #0]
   1a186:	0c13      	lsrs	r3, r2, #16
   1a188:	041b      	lsls	r3, r3, #16
   1a18a:	f043 0303 	orr.w	r3, r3, #3
   1a18e:	f8cd 0009 	str.w	r0, [sp, #9]
   1a192:	602b      	str	r3, [r5, #0]
   1a194:	f88d 1008 	strb.w	r1, [sp, #8]
   1a198:	4637      	mov	r7, r6
   1a19a:	e765      	b.n	1a068 <gnss_interface_setopt+0x68>
   1a19c:	682b      	ldr	r3, [r5, #0]
   1a19e:	b29b      	uxth	r3, r3
   1a1a0:	2b04      	cmp	r3, #4
   1a1a2:	d13e      	bne.n	1a222 <gnss_interface_setopt+0x222>
   1a1a4:	2300      	movs	r3, #0
   1a1a6:	f241 0604 	movw	r6, #4100	; 0x1004
   1a1aa:	f88d 3008 	strb.w	r3, [sp, #8]
   1a1ae:	f88d 3009 	strb.w	r3, [sp, #9]
   1a1b2:	f88d 300a 	strb.w	r3, [sp, #10]
   1a1b6:	f88d 300b 	strb.w	r3, [sp, #11]
   1a1ba:	f88d 300c 	strb.w	r3, [sp, #12]
   1a1be:	4637      	mov	r7, r6
   1a1c0:	e752      	b.n	1a068 <gnss_interface_setopt+0x68>
   1a1c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1c4:	2a01      	cmp	r2, #1
   1a1c6:	d124      	bne.n	1a212 <gnss_interface_setopt+0x212>
   1a1c8:	781b      	ldrb	r3, [r3, #0]
   1a1ca:	2b01      	cmp	r3, #1
   1a1cc:	d121      	bne.n	1a212 <gnss_interface_setopt+0x212>
   1a1ce:	f241 1603 	movw	r6, #4355	; 0x1103
   1a1d2:	4637      	mov	r7, r6
   1a1d4:	e748      	b.n	1a068 <gnss_interface_setopt+0x68>
   1a1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1d8:	2a02      	cmp	r2, #2
   1a1da:	d11a      	bne.n	1a212 <gnss_interface_setopt+0x212>
   1a1dc:	2220      	movs	r2, #32
   1a1de:	f241 1603 	movw	r6, #4355	; 0x1103
   1a1e2:	881b      	ldrh	r3, [r3, #0]
   1a1e4:	9202      	str	r2, [sp, #8]
   1a1e6:	f8ad 3013 	strh.w	r3, [sp, #19]
   1a1ea:	4637      	mov	r7, r6
   1a1ec:	e73c      	b.n	1a068 <gnss_interface_setopt+0x68>
   1a1ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1f0:	2a02      	cmp	r2, #2
   1a1f2:	d10e      	bne.n	1a212 <gnss_interface_setopt+0x212>
   1a1f4:	2210      	movs	r2, #16
   1a1f6:	f241 1603 	movw	r6, #4355	; 0x1103
   1a1fa:	881b      	ldrh	r3, [r3, #0]
   1a1fc:	9202      	str	r2, [sp, #8]
   1a1fe:	f8ad 3011 	strh.w	r3, [sp, #17]
   1a202:	4637      	mov	r7, r6
   1a204:	e730      	b.n	1a068 <gnss_interface_setopt+0x68>
   1a206:	200e      	movs	r0, #14
   1a208:	f7f7 fbb8 	bl	1197c <bsd_os_errno_set>
   1a20c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a210:	e783      	b.n	1a11a <gnss_interface_setopt+0x11a>
   1a212:	2016      	movs	r0, #22
   1a214:	f7f7 fbb2 	bl	1197c <bsd_os_errno_set>
   1a218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a21c:	b006      	add	sp, #24
   1a21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a222:	200e      	movs	r0, #14
   1a224:	f7f7 fbaa 	bl	1197c <bsd_os_errno_set>
   1a228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a22c:	e779      	b.n	1a122 <gnss_interface_setopt+0x122>
   1a22e:	b128      	cbz	r0, 1a23c <gnss_interface_setopt+0x23c>
   1a230:	6803      	ldr	r3, [r0, #0]
   1a232:	b11b      	cbz	r3, 1a23c <gnss_interface_setopt+0x23c>
   1a234:	4618      	mov	r0, r3
   1a236:	f000 fb39 	bl	1a8ac <rpc_gnss_client_data_free>
   1a23a:	9800      	ldr	r0, [sp, #0]
   1a23c:	f000 fb2e 	bl	1a89c <rpc_gnss_client_message_free>
   1a240:	2023      	movs	r0, #35	; 0x23
   1a242:	f7f7 fb9b 	bl	1197c <bsd_os_errno_set>
   1a246:	682b      	ldr	r3, [r5, #0]
   1a248:	200e      	movs	r0, #14
   1a24a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1a24e:	602b      	str	r3, [r5, #0]
   1a250:	f7f7 fb94 	bl	1197c <bsd_os_errno_set>
   1a254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a258:	e763      	b.n	1a122 <gnss_interface_setopt+0x122>
   1a25a:	2009      	movs	r0, #9
   1a25c:	f7f7 fb8e 	bl	1197c <bsd_os_errno_set>
   1a260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a264:	e75d      	b.n	1a122 <gnss_interface_setopt+0x122>
   1a266:	202a      	movs	r0, #42	; 0x2a
   1a268:	f7f7 fb88 	bl	1197c <bsd_os_errno_set>
   1a26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a270:	e757      	b.n	1a122 <gnss_interface_setopt+0x122>
   1a272:	2073      	movs	r0, #115	; 0x73
   1a274:	f7f7 fb82 	bl	1197c <bsd_os_errno_set>
   1a278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a27c:	e751      	b.n	1a122 <gnss_interface_setopt+0x122>
   1a27e:	bf00      	nop
   1a280:	20020b34 	.word	0x20020b34
   1a284:	49765443 	.word	0x49765443
   1a288:	2002c55c 	.word	0x2002c55c
   1a28c:	20024e4c 	.word	0x20024e4c
   1a290:	20020b38 	.word	0x20020b38

0001a294 <gnss_interface_getopt>:
   1a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a298:	4c81      	ldr	r4, [pc, #516]	; (1a4a0 <gnss_interface_getopt+0x20c>)
   1a29a:	b087      	sub	sp, #28
   1a29c:	6825      	ldr	r5, [r4, #0]
   1a29e:	4698      	mov	r8, r3
   1a2a0:	b2ad      	uxth	r5, r5
   1a2a2:	2d02      	cmp	r5, #2
   1a2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a2a6:	f040 80dd 	bne.w	1a464 <gnss_interface_getopt+0x1d0>
   1a2aa:	6825      	ldr	r5, [r4, #0]
   1a2ac:	03ee      	lsls	r6, r5, #15
   1a2ae:	f100 80eb 	bmi.w	1a488 <gnss_interface_getopt+0x1f4>
   1a2b2:	6825      	ldr	r5, [r4, #0]
   1a2b4:	01ed      	lsls	r5, r5, #7
   1a2b6:	f100 80ed 	bmi.w	1a494 <gnss_interface_getopt+0x200>
   1a2ba:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a2be:	f040 80d7 	bne.w	1a470 <gnss_interface_getopt+0x1dc>
   1a2c2:	4978      	ldr	r1, [pc, #480]	; (1a4a4 <gnss_interface_getopt+0x210>)
   1a2c4:	4288      	cmp	r0, r1
   1a2c6:	f040 80d9 	bne.w	1a47c <gnss_interface_getopt+0x1e8>
   1a2ca:	f1b8 0f00 	cmp.w	r8, #0
   1a2ce:	d00b      	beq.n	1a2e8 <gnss_interface_getopt+0x54>
   1a2d0:	b153      	cbz	r3, 1a2e8 <gnss_interface_getopt+0x54>
   1a2d2:	1e57      	subs	r7, r2, #1
   1a2d4:	2f05      	cmp	r7, #5
   1a2d6:	d807      	bhi.n	1a2e8 <gnss_interface_getopt+0x54>
   1a2d8:	e8df f007 	tbb	[pc, r7]
   1a2dc:	0f030f0f 	.word	0x0f030f0f
   1a2e0:	0303      	.short	0x0303
   1a2e2:	681b      	ldr	r3, [r3, #0]
   1a2e4:	2b01      	cmp	r3, #1
   1a2e6:	d00b      	beq.n	1a300 <gnss_interface_getopt+0x6c>
   1a2e8:	2016      	movs	r0, #22
   1a2ea:	f7f7 fb47 	bl	1197c <bsd_os_errno_set>
   1a2ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a2f2:	4628      	mov	r0, r5
   1a2f4:	b007      	add	sp, #28
   1a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2fa:	681b      	ldr	r3, [r3, #0]
   1a2fc:	2b02      	cmp	r3, #2
   1a2fe:	d1f3      	bne.n	1a2e8 <gnss_interface_getopt+0x54>
   1a300:	6823      	ldr	r3, [r4, #0]
   1a302:	2212      	movs	r2, #18
   1a304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1a308:	2100      	movs	r1, #0
   1a30a:	a801      	add	r0, sp, #4
   1a30c:	6023      	str	r3, [r4, #0]
   1a30e:	f003 f9a8 	bl	1d662 <memset>
   1a312:	2112      	movs	r1, #18
   1a314:	4668      	mov	r0, sp
   1a316:	f000 fa97 	bl	1a848 <rpc_gnss_client_request_alloc>
   1a31a:	4605      	mov	r5, r0
   1a31c:	9800      	ldr	r0, [sp, #0]
   1a31e:	2d00      	cmp	r5, #0
   1a320:	f040 808a 	bne.w	1a438 <gnss_interface_getopt+0x1a4>
   1a324:	2800      	cmp	r0, #0
   1a326:	f000 808e 	beq.w	1a446 <gnss_interface_getopt+0x1b2>
   1a32a:	f241 1602 	movw	r6, #4354	; 0x1102
   1a32e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a332:	2212      	movs	r2, #18
   1a334:	f04f 0976 	mov.w	r9, #118	; 0x76
   1a338:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1a33c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1a340:	f8df c168 	ldr.w	ip, [pc, #360]	; 1a4ac <gnss_interface_getopt+0x218>
   1a344:	f880 e00f 	strb.w	lr, [r0, #15]
   1a348:	f8bc 3000 	ldrh.w	r3, [ip]
   1a34c:	f880 900e 	strb.w	r9, [r0, #14]
   1a350:	3301      	adds	r3, #1
   1a352:	b29b      	uxth	r3, r3
   1a354:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1a358:	f8cd e004 	str.w	lr, [sp, #4]
   1a35c:	7145      	strb	r5, [r0, #5]
   1a35e:	7185      	strb	r5, [r0, #6]
   1a360:	71c5      	strb	r5, [r0, #7]
   1a362:	7205      	strb	r5, [r0, #8]
   1a364:	7245      	strb	r5, [r0, #9]
   1a366:	7285      	strb	r5, [r0, #10]
   1a368:	72c5      	strb	r5, [r0, #11]
   1a36a:	a901      	add	r1, sp, #4
   1a36c:	7102      	strb	r2, [r0, #4]
   1a36e:	f880 b00c 	strb.w	fp, [r0, #12]
   1a372:	f880 a00d 	strb.w	sl, [r0, #13]
   1a376:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1a4b0 <gnss_interface_getopt+0x21c>
   1a37a:	6800      	ldr	r0, [r0, #0]
   1a37c:	f8ac 3000 	strh.w	r3, [ip]
   1a380:	f003 f945 	bl	1d60e <memcpy>
   1a384:	4631      	mov	r1, r6
   1a386:	9800      	ldr	r0, [sp, #0]
   1a388:	f8c9 5000 	str.w	r5, [r9]
   1a38c:	f000 fa70 	bl	1a870 <rpc_gnss_client_request_send>
   1a390:	2800      	cmp	r0, #0
   1a392:	d15d      	bne.n	1a450 <gnss_interface_getopt+0x1bc>
   1a394:	4e44      	ldr	r6, [pc, #272]	; (1a4a8 <gnss_interface_getopt+0x214>)
   1a396:	4d43      	ldr	r5, [pc, #268]	; (1a4a4 <gnss_interface_getopt+0x210>)
   1a398:	4631      	mov	r1, r6
   1a39a:	4628      	mov	r0, r5
   1a39c:	f7f7 fa5a 	bl	11854 <bsd_os_timedwait>
   1a3a0:	6823      	ldr	r3, [r4, #0]
   1a3a2:	01db      	lsls	r3, r3, #7
   1a3a4:	d4f8      	bmi.n	1a398 <gnss_interface_getopt+0x104>
   1a3a6:	f8d9 0000 	ldr.w	r0, [r9]
   1a3aa:	b1d8      	cbz	r0, 1a3e4 <gnss_interface_getopt+0x150>
   1a3ac:	6825      	ldr	r5, [r4, #0]
   1a3ae:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1a3b2:	d00f      	beq.n	1a3d4 <gnss_interface_getopt+0x140>
   1a3b4:	2f05      	cmp	r7, #5
   1a3b6:	d837      	bhi.n	1a428 <gnss_interface_getopt+0x194>
   1a3b8:	e8df f007 	tbb	[pc, r7]
   1a3bc:	2b26201a 	.word	0x2b26201a
   1a3c0:	0331      	.short	0x0331
   1a3c2:	2500      	movs	r5, #0
   1a3c4:	7b43      	ldrb	r3, [r0, #13]
   1a3c6:	f888 3000 	strb.w	r3, [r8]
   1a3ca:	f000 fa6f 	bl	1a8ac <rpc_gnss_client_data_free>
   1a3ce:	2300      	movs	r3, #0
   1a3d0:	f8c9 3000 	str.w	r3, [r9]
   1a3d4:	6823      	ldr	r3, [r4, #0]
   1a3d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a3da:	6023      	str	r3, [r4, #0]
   1a3dc:	4628      	mov	r0, r5
   1a3de:	b007      	add	sp, #28
   1a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3e4:	6823      	ldr	r3, [r4, #0]
   1a3e6:	4605      	mov	r5, r0
   1a3e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a3ec:	6023      	str	r3, [r4, #0]
   1a3ee:	e7f5      	b.n	1a3dc <gnss_interface_getopt+0x148>
   1a3f0:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1a3f4:	2500      	movs	r5, #0
   1a3f6:	f8a8 3000 	strh.w	r3, [r8]
   1a3fa:	e7e6      	b.n	1a3ca <gnss_interface_getopt+0x136>
   1a3fc:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1a400:	2500      	movs	r5, #0
   1a402:	f8a8 3000 	strh.w	r3, [r8]
   1a406:	e7e0      	b.n	1a3ca <gnss_interface_getopt+0x136>
   1a408:	7b83      	ldrb	r3, [r0, #14]
   1a40a:	2500      	movs	r5, #0
   1a40c:	f888 3000 	strb.w	r3, [r8]
   1a410:	e7db      	b.n	1a3ca <gnss_interface_getopt+0x136>
   1a412:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1a416:	2500      	movs	r5, #0
   1a418:	f8a8 3000 	strh.w	r3, [r8]
   1a41c:	e7d5      	b.n	1a3ca <gnss_interface_getopt+0x136>
   1a41e:	7b03      	ldrb	r3, [r0, #12]
   1a420:	2500      	movs	r5, #0
   1a422:	f888 3000 	strb.w	r3, [r8]
   1a426:	e7d0      	b.n	1a3ca <gnss_interface_getopt+0x136>
   1a428:	2016      	movs	r0, #22
   1a42a:	f7f7 faa7 	bl	1197c <bsd_os_errno_set>
   1a42e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a432:	f8d9 0000 	ldr.w	r0, [r9]
   1a436:	e7c8      	b.n	1a3ca <gnss_interface_getopt+0x136>
   1a438:	b128      	cbz	r0, 1a446 <gnss_interface_getopt+0x1b2>
   1a43a:	6803      	ldr	r3, [r0, #0]
   1a43c:	b11b      	cbz	r3, 1a446 <gnss_interface_getopt+0x1b2>
   1a43e:	4618      	mov	r0, r3
   1a440:	f000 fa34 	bl	1a8ac <rpc_gnss_client_data_free>
   1a444:	9800      	ldr	r0, [sp, #0]
   1a446:	f000 fa29 	bl	1a89c <rpc_gnss_client_message_free>
   1a44a:	2023      	movs	r0, #35	; 0x23
   1a44c:	f7f7 fa96 	bl	1197c <bsd_os_errno_set>
   1a450:	6823      	ldr	r3, [r4, #0]
   1a452:	200e      	movs	r0, #14
   1a454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a458:	6023      	str	r3, [r4, #0]
   1a45a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a45e:	f7f7 fa8d 	bl	1197c <bsd_os_errno_set>
   1a462:	e746      	b.n	1a2f2 <gnss_interface_getopt+0x5e>
   1a464:	200e      	movs	r0, #14
   1a466:	f7f7 fa89 	bl	1197c <bsd_os_errno_set>
   1a46a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a46e:	e740      	b.n	1a2f2 <gnss_interface_getopt+0x5e>
   1a470:	202a      	movs	r0, #42	; 0x2a
   1a472:	f7f7 fa83 	bl	1197c <bsd_os_errno_set>
   1a476:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a47a:	e73a      	b.n	1a2f2 <gnss_interface_getopt+0x5e>
   1a47c:	2009      	movs	r0, #9
   1a47e:	f7f7 fa7d 	bl	1197c <bsd_os_errno_set>
   1a482:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a486:	e734      	b.n	1a2f2 <gnss_interface_getopt+0x5e>
   1a488:	2005      	movs	r0, #5
   1a48a:	f7f7 fa77 	bl	1197c <bsd_os_errno_set>
   1a48e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a492:	e72e      	b.n	1a2f2 <gnss_interface_getopt+0x5e>
   1a494:	2073      	movs	r0, #115	; 0x73
   1a496:	f7f7 fa71 	bl	1197c <bsd_os_errno_set>
   1a49a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a49e:	e728      	b.n	1a2f2 <gnss_interface_getopt+0x5e>
   1a4a0:	20020b34 	.word	0x20020b34
   1a4a4:	49765443 	.word	0x49765443
   1a4a8:	2002c55c 	.word	0x2002c55c
   1a4ac:	20024e4c 	.word	0x20024e4c
   1a4b0:	20020b38 	.word	0x20020b38

0001a4b4 <gnss_interface_init>:
   1a4b4:	2100      	movs	r1, #0
   1a4b6:	b538      	push	{r3, r4, r5, lr}
   1a4b8:	4c09      	ldr	r4, [pc, #36]	; (1a4e0 <gnss_interface_init+0x2c>)
   1a4ba:	4d0a      	ldr	r5, [pc, #40]	; (1a4e4 <gnss_interface_init+0x30>)
   1a4bc:	6822      	ldr	r2, [r4, #0]
   1a4be:	480a      	ldr	r0, [pc, #40]	; (1a4e8 <gnss_interface_init+0x34>)
   1a4c0:	4b0a      	ldr	r3, [pc, #40]	; (1a4ec <gnss_interface_init+0x38>)
   1a4c2:	402a      	ands	r2, r5
   1a4c4:	6022      	str	r2, [r4, #0]
   1a4c6:	8001      	strh	r1, [r0, #0]
   1a4c8:	6019      	str	r1, [r3, #0]
   1a4ca:	f000 f9b7 	bl	1a83c <rpc_gnss_client_init>
   1a4ce:	b928      	cbnz	r0, 1a4dc <gnss_interface_init+0x28>
   1a4d0:	6823      	ldr	r3, [r4, #0]
   1a4d2:	402b      	ands	r3, r5
   1a4d4:	f043 0301 	orr.w	r3, r3, #1
   1a4d8:	6023      	str	r3, [r4, #0]
   1a4da:	bd38      	pop	{r3, r4, r5, pc}
   1a4dc:	2003      	movs	r0, #3
   1a4de:	bd38      	pop	{r3, r4, r5, pc}
   1a4e0:	20020b34 	.word	0x20020b34
   1a4e4:	ffff0000 	.word	0xffff0000
   1a4e8:	20024e4c 	.word	0x20024e4c
   1a4ec:	20020b38 	.word	0x20020b38

0001a4f0 <gnss_interface_open>:
   1a4f0:	2801      	cmp	r0, #1
   1a4f2:	b510      	push	{r4, lr}
   1a4f4:	d120      	bne.n	1a538 <gnss_interface_open+0x48>
   1a4f6:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1a4fa:	d11d      	bne.n	1a538 <gnss_interface_open+0x48>
   1a4fc:	2902      	cmp	r1, #2
   1a4fe:	d11b      	bne.n	1a538 <gnss_interface_open+0x48>
   1a500:	4c13      	ldr	r4, [pc, #76]	; (1a550 <gnss_interface_open+0x60>)
   1a502:	6823      	ldr	r3, [r4, #0]
   1a504:	b29b      	uxth	r3, r3
   1a506:	2b01      	cmp	r3, #1
   1a508:	d11c      	bne.n	1a544 <gnss_interface_open+0x54>
   1a50a:	6823      	ldr	r3, [r4, #0]
   1a50c:	4608      	mov	r0, r1
   1a50e:	0c1b      	lsrs	r3, r3, #16
   1a510:	041b      	lsls	r3, r3, #16
   1a512:	f043 0302 	orr.w	r3, r3, #2
   1a516:	2200      	movs	r2, #0
   1a518:	490e      	ldr	r1, [pc, #56]	; (1a554 <gnss_interface_open+0x64>)
   1a51a:	6023      	str	r3, [r4, #0]
   1a51c:	f000 faac 	bl	1aa78 <packet_handler_create>
   1a520:	4a0d      	ldr	r2, [pc, #52]	; (1a558 <gnss_interface_open+0x68>)
   1a522:	6010      	str	r0, [r2, #0]
   1a524:	b170      	cbz	r0, 1a544 <gnss_interface_open+0x54>
   1a526:	6823      	ldr	r3, [r4, #0]
   1a528:	6802      	ldr	r2, [r0, #0]
   1a52a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a52e:	6812      	ldr	r2, [r2, #0]
   1a530:	6023      	str	r3, [r4, #0]
   1a532:	4790      	blx	r2
   1a534:	4809      	ldr	r0, [pc, #36]	; (1a55c <gnss_interface_open+0x6c>)
   1a536:	bd10      	pop	{r4, pc}
   1a538:	2016      	movs	r0, #22
   1a53a:	f7f7 fa1f 	bl	1197c <bsd_os_errno_set>
   1a53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a542:	bd10      	pop	{r4, pc}
   1a544:	200e      	movs	r0, #14
   1a546:	f7f7 fa19 	bl	1197c <bsd_os_errno_set>
   1a54a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a54e:	bd10      	pop	{r4, pc}
   1a550:	20020b34 	.word	0x20020b34
   1a554:	0001984d 	.word	0x0001984d
   1a558:	20020b3c 	.word	0x20020b3c
   1a55c:	49765443 	.word	0x49765443

0001a560 <gnss_interface_close>:
   1a560:	b530      	push	{r4, r5, lr}
   1a562:	4b13      	ldr	r3, [pc, #76]	; (1a5b0 <gnss_interface_close+0x50>)
   1a564:	b083      	sub	sp, #12
   1a566:	4298      	cmp	r0, r3
   1a568:	d11c      	bne.n	1a5a4 <gnss_interface_close+0x44>
   1a56a:	4c12      	ldr	r4, [pc, #72]	; (1a5b4 <gnss_interface_close+0x54>)
   1a56c:	6823      	ldr	r3, [r4, #0]
   1a56e:	b29b      	uxth	r3, r3
   1a570:	2b04      	cmp	r3, #4
   1a572:	d00f      	beq.n	1a594 <gnss_interface_close+0x34>
   1a574:	4d10      	ldr	r5, [pc, #64]	; (1a5b8 <gnss_interface_close+0x58>)
   1a576:	6828      	ldr	r0, [r5, #0]
   1a578:	b118      	cbz	r0, 1a582 <gnss_interface_close+0x22>
   1a57a:	f000 fa9d 	bl	1aab8 <packet_handler_delete>
   1a57e:	2300      	movs	r3, #0
   1a580:	602b      	str	r3, [r5, #0]
   1a582:	2000      	movs	r0, #0
   1a584:	6823      	ldr	r3, [r4, #0]
   1a586:	0c1b      	lsrs	r3, r3, #16
   1a588:	041b      	lsls	r3, r3, #16
   1a58a:	f043 0301 	orr.w	r3, r3, #1
   1a58e:	6023      	str	r3, [r4, #0]
   1a590:	b003      	add	sp, #12
   1a592:	bd30      	pop	{r4, r5, pc}
   1a594:	2300      	movs	r3, #0
   1a596:	2208      	movs	r2, #8
   1a598:	9300      	str	r3, [sp, #0]
   1a59a:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a59e:	f7fc feaf 	bl	17300 <nrf_setsockopt>
   1a5a2:	e7e7      	b.n	1a574 <gnss_interface_close+0x14>
   1a5a4:	2009      	movs	r0, #9
   1a5a6:	f7f7 f9e9 	bl	1197c <bsd_os_errno_set>
   1a5aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5ae:	e7ef      	b.n	1a590 <gnss_interface_close+0x30>
   1a5b0:	49765443 	.word	0x49765443
   1a5b4:	20020b34 	.word	0x20020b34
   1a5b8:	20020b3c 	.word	0x20020b3c

0001a5bc <rpc_gnss_serialize_utc>:
   1a5bc:	4603      	mov	r3, r0
   1a5be:	b1d8      	cbz	r0, 1a5f8 <rpc_gnss_serialize_utc+0x3c>
   1a5c0:	b1d1      	cbz	r1, 1a5f8 <rpc_gnss_serialize_utc+0x3c>
   1a5c2:	2000      	movs	r0, #0
   1a5c4:	2201      	movs	r2, #1
   1a5c6:	7048      	strb	r0, [r1, #1]
   1a5c8:	700a      	strb	r2, [r1, #0]
   1a5ca:	685a      	ldr	r2, [r3, #4]
   1a5cc:	2010      	movs	r0, #16
   1a5ce:	f8c1 2006 	str.w	r2, [r1, #6]
   1a5d2:	681a      	ldr	r2, [r3, #0]
   1a5d4:	f8c1 2002 	str.w	r2, [r1, #2]
   1a5d8:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a5dc:	730a      	strb	r2, [r1, #12]
   1a5de:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a5e2:	73ca      	strb	r2, [r1, #15]
   1a5e4:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a5e8:	738a      	strb	r2, [r1, #14]
   1a5ea:	7a1a      	ldrb	r2, [r3, #8]
   1a5ec:	728a      	strb	r2, [r1, #10]
   1a5ee:	7ada      	ldrb	r2, [r3, #11]
   1a5f0:	734a      	strb	r2, [r1, #13]
   1a5f2:	7a5b      	ldrb	r3, [r3, #9]
   1a5f4:	72cb      	strb	r3, [r1, #11]
   1a5f6:	4770      	bx	lr
   1a5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5fc:	4770      	bx	lr
   1a5fe:	bf00      	nop

0001a600 <rpc_gnss_serialize_ephe>:
   1a600:	4603      	mov	r3, r0
   1a602:	2800      	cmp	r0, #0
   1a604:	d04b      	beq.n	1a69e <rpc_gnss_serialize_ephe+0x9e>
   1a606:	2900      	cmp	r1, #0
   1a608:	d049      	beq.n	1a69e <rpc_gnss_serialize_ephe+0x9e>
   1a60a:	2000      	movs	r0, #0
   1a60c:	2202      	movs	r2, #2
   1a60e:	7048      	strb	r0, [r1, #1]
   1a610:	700a      	strb	r2, [r1, #0]
   1a612:	68da      	ldr	r2, [r3, #12]
   1a614:	2040      	movs	r0, #64	; 0x40
   1a616:	f8c1 200b 	str.w	r2, [r1, #11]
   1a61a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a61e:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a622:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a626:	720a      	strb	r2, [r1, #8]
   1a628:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a62c:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a62e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a632:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a634:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a638:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a63a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a63e:	868a      	strh	r2, [r1, #52]	; 0x34
   1a640:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a644:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a646:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a64a:	870a      	strh	r2, [r1, #56]	; 0x38
   1a64c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a650:	830a      	strh	r2, [r1, #24]
   1a652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a654:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a658:	7c9a      	ldrb	r2, [r3, #18]
   1a65a:	744a      	strb	r2, [r1, #17]
   1a65c:	785a      	ldrb	r2, [r3, #1]
   1a65e:	70ca      	strb	r2, [r1, #3]
   1a660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a662:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a664:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a668:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a66a:	885a      	ldrh	r2, [r3, #2]
   1a66c:	808a      	strh	r2, [r1, #4]
   1a66e:	6a1a      	ldr	r2, [r3, #32]
   1a670:	f8c1 201a 	str.w	r2, [r1, #26]
   1a674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a676:	630a      	str	r2, [r1, #48]	; 0x30
   1a678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a67a:	f8c1 201e 	str.w	r2, [r1, #30]
   1a67e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a680:	628a      	str	r2, [r1, #40]	; 0x28
   1a682:	781a      	ldrb	r2, [r3, #0]
   1a684:	708a      	strb	r2, [r1, #2]
   1a686:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a68a:	73ca      	strb	r2, [r1, #15]
   1a68c:	889a      	ldrh	r2, [r3, #4]
   1a68e:	80ca      	strh	r2, [r1, #6]
   1a690:	8a9a      	ldrh	r2, [r3, #20]
   1a692:	824a      	strh	r2, [r1, #18]
   1a694:	7c5a      	ldrb	r2, [r3, #17]
   1a696:	740a      	strb	r2, [r1, #16]
   1a698:	699b      	ldr	r3, [r3, #24]
   1a69a:	614b      	str	r3, [r1, #20]
   1a69c:	4770      	bx	lr
   1a69e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6a2:	4770      	bx	lr

0001a6a4 <rpc_gnss_serialize_alm>:
   1a6a4:	4603      	mov	r3, r0
   1a6a6:	b360      	cbz	r0, 1a702 <rpc_gnss_serialize_alm+0x5e>
   1a6a8:	b359      	cbz	r1, 1a702 <rpc_gnss_serialize_alm+0x5e>
   1a6aa:	2000      	movs	r0, #0
   1a6ac:	2203      	movs	r2, #3
   1a6ae:	7048      	strb	r0, [r1, #1]
   1a6b0:	700a      	strb	r2, [r1, #0]
   1a6b2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a6b6:	2021      	movs	r0, #33	; 0x21
   1a6b8:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a6bc:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a6c0:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a6c4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a6c8:	810a      	strh	r2, [r1, #8]
   1a6ca:	889a      	ldrh	r2, [r3, #4]
   1a6cc:	80ca      	strh	r2, [r1, #6]
   1a6ce:	78da      	ldrb	r2, [r3, #3]
   1a6d0:	714a      	strb	r2, [r1, #5]
   1a6d2:	699a      	ldr	r2, [r3, #24]
   1a6d4:	f8c1 2019 	str.w	r2, [r1, #25]
   1a6d8:	691a      	ldr	r2, [r3, #16]
   1a6da:	f8c1 2011 	str.w	r2, [r1, #17]
   1a6de:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a6e2:	814a      	strh	r2, [r1, #10]
   1a6e4:	68da      	ldr	r2, [r3, #12]
   1a6e6:	f8c1 200d 	str.w	r2, [r1, #13]
   1a6ea:	7a9a      	ldrb	r2, [r3, #10]
   1a6ec:	730a      	strb	r2, [r1, #12]
   1a6ee:	781a      	ldrb	r2, [r3, #0]
   1a6f0:	708a      	strb	r2, [r1, #2]
   1a6f2:	789a      	ldrb	r2, [r3, #2]
   1a6f4:	710a      	strb	r2, [r1, #4]
   1a6f6:	695a      	ldr	r2, [r3, #20]
   1a6f8:	f8c1 2015 	str.w	r2, [r1, #21]
   1a6fc:	785b      	ldrb	r3, [r3, #1]
   1a6fe:	70cb      	strb	r3, [r1, #3]
   1a700:	4770      	bx	lr
   1a702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a706:	4770      	bx	lr

0001a708 <rpc_gnss_serialize_klob>:
   1a708:	4603      	mov	r3, r0
   1a70a:	b1f0      	cbz	r0, 1a74a <rpc_gnss_serialize_klob+0x42>
   1a70c:	b1e9      	cbz	r1, 1a74a <rpc_gnss_serialize_klob+0x42>
   1a70e:	2000      	movs	r0, #0
   1a710:	2204      	movs	r2, #4
   1a712:	7048      	strb	r0, [r1, #1]
   1a714:	700a      	strb	r2, [r1, #0]
   1a716:	f993 2000 	ldrsb.w	r2, [r3]
   1a71a:	200a      	movs	r0, #10
   1a71c:	708a      	strb	r2, [r1, #2]
   1a71e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a722:	70ca      	strb	r2, [r1, #3]
   1a724:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a728:	710a      	strb	r2, [r1, #4]
   1a72a:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a72e:	714a      	strb	r2, [r1, #5]
   1a730:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a734:	718a      	strb	r2, [r1, #6]
   1a736:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a73a:	71ca      	strb	r2, [r1, #7]
   1a73c:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a740:	720a      	strb	r2, [r1, #8]
   1a742:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a746:	724b      	strb	r3, [r1, #9]
   1a748:	4770      	bx	lr
   1a74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a74e:	4770      	bx	lr

0001a750 <rpc_gnss_serialize_nequick>:
   1a750:	4603      	mov	r3, r0
   1a752:	b198      	cbz	r0, 1a77c <rpc_gnss_serialize_nequick+0x2c>
   1a754:	b191      	cbz	r1, 1a77c <rpc_gnss_serialize_nequick+0x2c>
   1a756:	2000      	movs	r0, #0
   1a758:	2205      	movs	r2, #5
   1a75a:	7048      	strb	r0, [r1, #1]
   1a75c:	700a      	strb	r2, [r1, #0]
   1a75e:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a762:	200a      	movs	r0, #10
   1a764:	804a      	strh	r2, [r1, #2]
   1a766:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a76a:	808a      	strh	r2, [r1, #4]
   1a76c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a770:	80ca      	strh	r2, [r1, #6]
   1a772:	799a      	ldrb	r2, [r3, #6]
   1a774:	720a      	strb	r2, [r1, #8]
   1a776:	79db      	ldrb	r3, [r3, #7]
   1a778:	724b      	strb	r3, [r1, #9]
   1a77a:	4770      	bx	lr
   1a77c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a780:	4770      	bx	lr
   1a782:	bf00      	nop

0001a784 <rpc_gnss_serialize_time_and_sv_tow>:
   1a784:	b310      	cbz	r0, 1a7cc <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a786:	b309      	cbz	r1, 1a7cc <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a788:	b470      	push	{r4, r5, r6}
   1a78a:	2500      	movs	r5, #0
   1a78c:	2606      	movs	r6, #6
   1a78e:	460c      	mov	r4, r1
   1a790:	704d      	strb	r5, [r1, #1]
   1a792:	700e      	strb	r6, [r1, #0]
   1a794:	462b      	mov	r3, r5
   1a796:	8805      	ldrh	r5, [r0, #0]
   1a798:	4602      	mov	r2, r0
   1a79a:	804d      	strh	r5, [r1, #2]
   1a79c:	68c5      	ldr	r5, [r0, #12]
   1a79e:	f8c1 500a 	str.w	r5, [r1, #10]
   1a7a2:	8905      	ldrh	r5, [r0, #8]
   1a7a4:	810d      	strh	r5, [r1, #8]
   1a7a6:	6840      	ldr	r0, [r0, #4]
   1a7a8:	6048      	str	r0, [r1, #4]
   1a7aa:	8a15      	ldrh	r5, [r2, #16]
   1a7ac:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a7b0:	4408      	add	r0, r1
   1a7b2:	81c5      	strh	r5, [r0, #14]
   1a7b4:	7c90      	ldrb	r0, [r2, #18]
   1a7b6:	3301      	adds	r3, #1
   1a7b8:	2b20      	cmp	r3, #32
   1a7ba:	7420      	strb	r0, [r4, #16]
   1a7bc:	f102 0204 	add.w	r2, r2, #4
   1a7c0:	f104 0403 	add.w	r4, r4, #3
   1a7c4:	d1f1      	bne.n	1a7aa <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a7c6:	206e      	movs	r0, #110	; 0x6e
   1a7c8:	bc70      	pop	{r4, r5, r6}
   1a7ca:	4770      	bx	lr
   1a7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a7d0:	4770      	bx	lr
   1a7d2:	bf00      	nop

0001a7d4 <rpc_gnss_serialize_location>:
   1a7d4:	4603      	mov	r3, r0
   1a7d6:	b1c8      	cbz	r0, 1a80c <rpc_gnss_serialize_location+0x38>
   1a7d8:	b1c1      	cbz	r1, 1a80c <rpc_gnss_serialize_location+0x38>
   1a7da:	2000      	movs	r0, #0
   1a7dc:	2207      	movs	r2, #7
   1a7de:	7048      	strb	r0, [r1, #1]
   1a7e0:	700a      	strb	r2, [r1, #0]
   1a7e2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a7e6:	2011      	movs	r0, #17
   1a7e8:	814a      	strh	r2, [r1, #10]
   1a7ea:	7b9a      	ldrb	r2, [r3, #14]
   1a7ec:	740a      	strb	r2, [r1, #16]
   1a7ee:	681a      	ldr	r2, [r3, #0]
   1a7f0:	f8c1 2002 	str.w	r2, [r1, #2]
   1a7f4:	685a      	ldr	r2, [r3, #4]
   1a7f6:	f8c1 2006 	str.w	r2, [r1, #6]
   1a7fa:	7b1a      	ldrb	r2, [r3, #12]
   1a7fc:	738a      	strb	r2, [r1, #14]
   1a7fe:	7b5a      	ldrb	r2, [r3, #13]
   1a800:	73ca      	strb	r2, [r1, #15]
   1a802:	7a9a      	ldrb	r2, [r3, #10]
   1a804:	730a      	strb	r2, [r1, #12]
   1a806:	7adb      	ldrb	r3, [r3, #11]
   1a808:	734b      	strb	r3, [r1, #13]
   1a80a:	4770      	bx	lr
   1a80c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a810:	4770      	bx	lr
   1a812:	bf00      	nop

0001a814 <rpc_gnss_serialize_integrity>:
   1a814:	b148      	cbz	r0, 1a82a <rpc_gnss_serialize_integrity+0x16>
   1a816:	b141      	cbz	r1, 1a82a <rpc_gnss_serialize_integrity+0x16>
   1a818:	2200      	movs	r2, #0
   1a81a:	2308      	movs	r3, #8
   1a81c:	704a      	strb	r2, [r1, #1]
   1a81e:	700b      	strb	r3, [r1, #0]
   1a820:	6803      	ldr	r3, [r0, #0]
   1a822:	2006      	movs	r0, #6
   1a824:	f8c1 3002 	str.w	r3, [r1, #2]
   1a828:	4770      	bx	lr
   1a82a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a82e:	4770      	bx	lr

0001a830 <gnss_client_event_handler>:
   1a830:	f850 1b08 	ldr.w	r1, [r0], #8
   1a834:	0c09      	lsrs	r1, r1, #16
   1a836:	f7ff b817 	b.w	19868 <rpc_gnss_event_handler>
   1a83a:	bf00      	nop

0001a83c <rpc_gnss_client_init>:
   1a83c:	4801      	ldr	r0, [pc, #4]	; (1a844 <rpc_gnss_client_init+0x8>)
   1a83e:	f7fe bb79 	b.w	18f34 <rpc_client_register>
   1a842:	bf00      	nop
   1a844:	0001f870 	.word	0x0001f870

0001a848 <rpc_gnss_client_request_alloc>:
   1a848:	2300      	movs	r3, #0
   1a84a:	b510      	push	{r4, lr}
   1a84c:	b082      	sub	sp, #8
   1a84e:	9301      	str	r3, [sp, #4]
   1a850:	b158      	cbz	r0, 1a86a <rpc_gnss_client_request_alloc+0x22>
   1a852:	4604      	mov	r4, r0
   1a854:	aa01      	add	r2, sp, #4
   1a856:	2007      	movs	r0, #7
   1a858:	f7fe fda4 	bl	193a4 <rpc_message_alloc>
   1a85c:	b918      	cbnz	r0, 1a866 <rpc_gnss_client_request_alloc+0x1e>
   1a85e:	9b01      	ldr	r3, [sp, #4]
   1a860:	b10b      	cbz	r3, 1a866 <rpc_gnss_client_request_alloc+0x1e>
   1a862:	3308      	adds	r3, #8
   1a864:	6023      	str	r3, [r4, #0]
   1a866:	b002      	add	sp, #8
   1a868:	bd10      	pop	{r4, pc}
   1a86a:	2007      	movs	r0, #7
   1a86c:	b002      	add	sp, #8
   1a86e:	bd10      	pop	{r4, pc}

0001a870 <rpc_gnss_client_request_send>:
   1a870:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a878:	d10b      	bne.n	1a892 <rpc_gnss_client_request_send+0x22>
   1a87a:	b160      	cbz	r0, 1a896 <rpc_gnss_client_request_send+0x26>
   1a87c:	4603      	mov	r3, r0
   1a87e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a882:	2007      	movs	r0, #7
   1a884:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a888:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a88c:	4619      	mov	r1, r3
   1a88e:	f7fe bd71 	b.w	19374 <rpc_message_send>
   1a892:	200f      	movs	r0, #15
   1a894:	4770      	bx	lr
   1a896:	2007      	movs	r0, #7
   1a898:	4770      	bx	lr
   1a89a:	bf00      	nop

0001a89c <rpc_gnss_client_message_free>:
   1a89c:	b120      	cbz	r0, 1a8a8 <rpc_gnss_client_message_free+0xc>
   1a89e:	f1a0 0108 	sub.w	r1, r0, #8
   1a8a2:	2007      	movs	r0, #7
   1a8a4:	f7fe bdb0 	b.w	19408 <rpc_message_free>
   1a8a8:	2007      	movs	r0, #7
   1a8aa:	4770      	bx	lr

0001a8ac <rpc_gnss_client_data_free>:
   1a8ac:	b118      	cbz	r0, 1a8b6 <rpc_gnss_client_data_free+0xa>
   1a8ae:	4601      	mov	r1, r0
   1a8b0:	2007      	movs	r0, #7
   1a8b2:	f7fe bebb 	b.w	1962c <rpc_message_data_free>
   1a8b6:	2007      	movs	r0, #7
   1a8b8:	4770      	bx	lr
   1a8ba:	bf00      	nop

0001a8bc <datagram_handler_init>:
   1a8bc:	b510      	push	{r4, lr}
   1a8be:	4604      	mov	r4, r0
   1a8c0:	200c      	movs	r0, #12
   1a8c2:	f7f9 f901 	bl	13ac8 <nrf_malloc>
   1a8c6:	60e0      	str	r0, [r4, #12]
   1a8c8:	b118      	cbz	r0, 1a8d2 <datagram_handler_init+0x16>
   1a8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a8ce:	f7fc bc0d 	b.w	170ec <linked_list_init>
   1a8d2:	2004      	movs	r0, #4
   1a8d4:	bd10      	pop	{r4, pc}
   1a8d6:	bf00      	nop

0001a8d8 <datagram_handler_put>:
   1a8d8:	b570      	push	{r4, r5, r6, lr}
   1a8da:	4606      	mov	r6, r0
   1a8dc:	2014      	movs	r0, #20
   1a8de:	460d      	mov	r5, r1
   1a8e0:	f7f9 f8f2 	bl	13ac8 <nrf_malloc>
   1a8e4:	b178      	cbz	r0, 1a906 <datagram_handler_put+0x2e>
   1a8e6:	682b      	ldr	r3, [r5, #0]
   1a8e8:	4604      	mov	r4, r0
   1a8ea:	6043      	str	r3, [r0, #4]
   1a8ec:	686b      	ldr	r3, [r5, #4]
   1a8ee:	4601      	mov	r1, r0
   1a8f0:	6083      	str	r3, [r0, #8]
   1a8f2:	68eb      	ldr	r3, [r5, #12]
   1a8f4:	60c3      	str	r3, [r0, #12]
   1a8f6:	68ab      	ldr	r3, [r5, #8]
   1a8f8:	6103      	str	r3, [r0, #16]
   1a8fa:	68f0      	ldr	r0, [r6, #12]
   1a8fc:	f7fc fc00 	bl	17100 <linked_list_push>
   1a900:	b920      	cbnz	r0, 1a90c <datagram_handler_put+0x34>
   1a902:	6868      	ldr	r0, [r5, #4]
   1a904:	bd70      	pop	{r4, r5, r6, pc}
   1a906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a90a:	bd70      	pop	{r4, r5, r6, pc}
   1a90c:	4620      	mov	r0, r4
   1a90e:	f7f9 f8e5 	bl	13adc <nrf_free>
   1a912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a916:	bd70      	pop	{r4, r5, r6, pc}

0001a918 <datagram_handler_get>:
   1a918:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a91a:	4606      	mov	r6, r0
   1a91c:	b085      	sub	sp, #20
   1a91e:	68c0      	ldr	r0, [r0, #12]
   1a920:	460c      	mov	r4, r1
   1a922:	4617      	mov	r7, r2
   1a924:	f7fc fc0c 	bl	17140 <linked_list_peek>
   1a928:	2800      	cmp	r0, #0
   1a92a:	d037      	beq.n	1a99c <datagram_handler_get+0x84>
   1a92c:	6882      	ldr	r2, [r0, #8]
   1a92e:	4605      	mov	r5, r0
   1a930:	e9d4 0300 	ldrd	r0, r3, [r4]
   1a934:	429a      	cmp	r2, r3
   1a936:	bf28      	it	cs
   1a938:	461a      	movcs	r2, r3
   1a93a:	6062      	str	r2, [r4, #4]
   1a93c:	b110      	cbz	r0, 1a944 <datagram_handler_get+0x2c>
   1a93e:	6869      	ldr	r1, [r5, #4]
   1a940:	f002 fe65 	bl	1d60e <memcpy>
   1a944:	68a0      	ldr	r0, [r4, #8]
   1a946:	b118      	cbz	r0, 1a950 <datagram_handler_get+0x38>
   1a948:	692b      	ldr	r3, [r5, #16]
   1a94a:	b10b      	cbz	r3, 1a950 <datagram_handler_get+0x38>
   1a94c:	68ea      	ldr	r2, [r5, #12]
   1a94e:	b9e2      	cbnz	r2, 1a98a <datagram_handler_get+0x72>
   1a950:	2300      	movs	r3, #0
   1a952:	60e3      	str	r3, [r4, #12]
   1a954:	073b      	lsls	r3, r7, #28
   1a956:	d502      	bpl.n	1a95e <datagram_handler_get+0x46>
   1a958:	6860      	ldr	r0, [r4, #4]
   1a95a:	b005      	add	sp, #20
   1a95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a95e:	68f0      	ldr	r0, [r6, #12]
   1a960:	f7fc fbe4 	bl	1712c <linked_list_pop>
   1a964:	4605      	mov	r5, r0
   1a966:	2800      	cmp	r0, #0
   1a968:	d0f6      	beq.n	1a958 <datagram_handler_get+0x40>
   1a96a:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a96e:	6902      	ldr	r2, [r0, #16]
   1a970:	9300      	str	r3, [sp, #0]
   1a972:	68c3      	ldr	r3, [r0, #12]
   1a974:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1a978:	9303      	str	r3, [sp, #12]
   1a97a:	4668      	mov	r0, sp
   1a97c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1a980:	4798      	blx	r3
   1a982:	4628      	mov	r0, r5
   1a984:	f7f9 f8aa 	bl	13adc <nrf_free>
   1a988:	e7e6      	b.n	1a958 <datagram_handler_get+0x40>
   1a98a:	68e3      	ldr	r3, [r4, #12]
   1a98c:	429a      	cmp	r2, r3
   1a98e:	bf28      	it	cs
   1a990:	461a      	movcs	r2, r3
   1a992:	60e2      	str	r2, [r4, #12]
   1a994:	6929      	ldr	r1, [r5, #16]
   1a996:	f002 fe3a 	bl	1d60e <memcpy>
   1a99a:	e7db      	b.n	1a954 <datagram_handler_get+0x3c>
   1a99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a9a0:	e7db      	b.n	1a95a <datagram_handler_get+0x42>
   1a9a2:	bf00      	nop

0001a9a4 <datagram_handler_available>:
   1a9a4:	b508      	push	{r3, lr}
   1a9a6:	68c0      	ldr	r0, [r0, #12]
   1a9a8:	f7fc fbca 	bl	17140 <linked_list_peek>
   1a9ac:	b108      	cbz	r0, 1a9b2 <datagram_handler_available+0xe>
   1a9ae:	6880      	ldr	r0, [r0, #8]
   1a9b0:	bd08      	pop	{r3, pc}
   1a9b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a9b6:	bd08      	pop	{r3, pc}

0001a9b8 <datagram_handler_flush>:
   1a9b8:	b530      	push	{r4, r5, lr}
   1a9ba:	4605      	mov	r5, r0
   1a9bc:	68c0      	ldr	r0, [r0, #12]
   1a9be:	b085      	sub	sp, #20
   1a9c0:	b9a8      	cbnz	r0, 1a9ee <datagram_handler_flush+0x36>
   1a9c2:	e01a      	b.n	1a9fa <datagram_handler_flush+0x42>
   1a9c4:	68e8      	ldr	r0, [r5, #12]
   1a9c6:	f7fc fbb1 	bl	1712c <linked_list_pop>
   1a9ca:	4604      	mov	r4, r0
   1a9cc:	b170      	cbz	r0, 1a9ec <datagram_handler_flush+0x34>
   1a9ce:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a9d2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a9d6:	e9cd 0100 	strd	r0, r1, [sp]
   1a9da:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a9de:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a9e2:	4668      	mov	r0, sp
   1a9e4:	4798      	blx	r3
   1a9e6:	4620      	mov	r0, r4
   1a9e8:	f7f9 f878 	bl	13adc <nrf_free>
   1a9ec:	68e8      	ldr	r0, [r5, #12]
   1a9ee:	f7fc fbad 	bl	1714c <linked_list_size_get>
   1a9f2:	2800      	cmp	r0, #0
   1a9f4:	d1e6      	bne.n	1a9c4 <datagram_handler_flush+0xc>
   1a9f6:	b005      	add	sp, #20
   1a9f8:	bd30      	pop	{r4, r5, pc}
   1a9fa:	2008      	movs	r0, #8
   1a9fc:	b005      	add	sp, #20
   1a9fe:	bd30      	pop	{r4, r5, pc}

0001aa00 <datagram_handler_free>:
   1aa00:	b530      	push	{r4, r5, lr}
   1aa02:	4605      	mov	r5, r0
   1aa04:	68c0      	ldr	r0, [r0, #12]
   1aa06:	b085      	sub	sp, #20
   1aa08:	b9a0      	cbnz	r0, 1aa34 <datagram_handler_free+0x34>
   1aa0a:	e01c      	b.n	1aa46 <datagram_handler_free+0x46>
   1aa0c:	f7fc fb8e 	bl	1712c <linked_list_pop>
   1aa10:	4604      	mov	r4, r0
   1aa12:	b170      	cbz	r0, 1aa32 <datagram_handler_free+0x32>
   1aa14:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1aa18:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1aa1c:	e9cd 0100 	strd	r0, r1, [sp]
   1aa20:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aa24:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1aa28:	4668      	mov	r0, sp
   1aa2a:	4798      	blx	r3
   1aa2c:	4620      	mov	r0, r4
   1aa2e:	f7f9 f855 	bl	13adc <nrf_free>
   1aa32:	68e8      	ldr	r0, [r5, #12]
   1aa34:	f7fc fb8a 	bl	1714c <linked_list_size_get>
   1aa38:	4604      	mov	r4, r0
   1aa3a:	68e8      	ldr	r0, [r5, #12]
   1aa3c:	2c00      	cmp	r4, #0
   1aa3e:	d1e5      	bne.n	1aa0c <datagram_handler_free+0xc>
   1aa40:	f7f9 f84c 	bl	13adc <nrf_free>
   1aa44:	60ec      	str	r4, [r5, #12]
   1aa46:	b005      	add	sp, #20
   1aa48:	bd30      	pop	{r4, r5, pc}
   1aa4a:	bf00      	nop

0001aa4c <null_handler_init>:
   1aa4c:	2000      	movs	r0, #0
   1aa4e:	4770      	bx	lr

0001aa50 <null_handler_put>:
   1aa50:	b510      	push	{r4, lr}
   1aa52:	460c      	mov	r4, r1
   1aa54:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1aa58:	4620      	mov	r0, r4
   1aa5a:	4798      	blx	r3
   1aa5c:	6860      	ldr	r0, [r4, #4]
   1aa5e:	bd10      	pop	{r4, pc}

0001aa60 <null_handler_get>:
   1aa60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa64:	4770      	bx	lr
   1aa66:	bf00      	nop

0001aa68 <null_handler_available>:
   1aa68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa6c:	4770      	bx	lr
   1aa6e:	bf00      	nop

0001aa70 <null_handler_flush>:
   1aa70:	2000      	movs	r0, #0
   1aa72:	4770      	bx	lr

0001aa74 <null_handler_free>:
   1aa74:	4770      	bx	lr
   1aa76:	bf00      	nop

0001aa78 <packet_handler_create>:
   1aa78:	2801      	cmp	r0, #1
   1aa7a:	b538      	push	{r3, r4, r5, lr}
   1aa7c:	460d      	mov	r5, r1
   1aa7e:	4614      	mov	r4, r2
   1aa80:	d00d      	beq.n	1aa9e <packet_handler_create+0x26>
   1aa82:	db11      	blt.n	1aaa8 <packet_handler_create+0x30>
   1aa84:	2803      	cmp	r0, #3
   1aa86:	dc0f      	bgt.n	1aaa8 <packet_handler_create+0x30>
   1aa88:	2010      	movs	r0, #16
   1aa8a:	f7f9 f81d 	bl	13ac8 <nrf_malloc>
   1aa8e:	2218      	movs	r2, #24
   1aa90:	b120      	cbz	r0, 1aa9c <packet_handler_create+0x24>
   1aa92:	4b08      	ldr	r3, [pc, #32]	; (1aab4 <packet_handler_create+0x3c>)
   1aa94:	6045      	str	r5, [r0, #4]
   1aa96:	4413      	add	r3, r2
   1aa98:	6084      	str	r4, [r0, #8]
   1aa9a:	6003      	str	r3, [r0, #0]
   1aa9c:	bd38      	pop	{r3, r4, r5, pc}
   1aa9e:	2014      	movs	r0, #20
   1aaa0:	f7f9 f812 	bl	13ac8 <nrf_malloc>
   1aaa4:	2230      	movs	r2, #48	; 0x30
   1aaa6:	e7f3      	b.n	1aa90 <packet_handler_create+0x18>
   1aaa8:	200c      	movs	r0, #12
   1aaaa:	f7f9 f80d 	bl	13ac8 <nrf_malloc>
   1aaae:	2200      	movs	r2, #0
   1aab0:	e7ee      	b.n	1aa90 <packet_handler_create+0x18>
   1aab2:	bf00      	nop
   1aab4:	0001f880 	.word	0x0001f880

0001aab8 <packet_handler_delete>:
   1aab8:	b510      	push	{r4, lr}
   1aaba:	4604      	mov	r4, r0
   1aabc:	6803      	ldr	r3, [r0, #0]
   1aabe:	691b      	ldr	r3, [r3, #16]
   1aac0:	4798      	blx	r3
   1aac2:	6823      	ldr	r3, [r4, #0]
   1aac4:	4620      	mov	r0, r4
   1aac6:	695b      	ldr	r3, [r3, #20]
   1aac8:	4798      	blx	r3
   1aaca:	4620      	mov	r0, r4
   1aacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aad0:	f7f9 b804 	b.w	13adc <nrf_free>

0001aad4 <stream_handler_init>:
   1aad4:	b510      	push	{r4, lr}
   1aad6:	4604      	mov	r4, r0
   1aad8:	200c      	movs	r0, #12
   1aada:	f7f8 fff5 	bl	13ac8 <nrf_malloc>
   1aade:	60e0      	str	r0, [r4, #12]
   1aae0:	b128      	cbz	r0, 1aaee <stream_handler_init+0x1a>
   1aae2:	2300      	movs	r3, #0
   1aae4:	6123      	str	r3, [r4, #16]
   1aae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aaea:	f7fc baff 	b.w	170ec <linked_list_init>
   1aaee:	2004      	movs	r0, #4
   1aaf0:	bd10      	pop	{r4, pc}
   1aaf2:	bf00      	nop

0001aaf4 <stream_handler_put>:
   1aaf4:	b570      	push	{r4, r5, r6, lr}
   1aaf6:	4606      	mov	r6, r0
   1aaf8:	2014      	movs	r0, #20
   1aafa:	460d      	mov	r5, r1
   1aafc:	f7f8 ffe4 	bl	13ac8 <nrf_malloc>
   1ab00:	b178      	cbz	r0, 1ab22 <stream_handler_put+0x2e>
   1ab02:	682b      	ldr	r3, [r5, #0]
   1ab04:	4604      	mov	r4, r0
   1ab06:	6043      	str	r3, [r0, #4]
   1ab08:	686b      	ldr	r3, [r5, #4]
   1ab0a:	4601      	mov	r1, r0
   1ab0c:	6083      	str	r3, [r0, #8]
   1ab0e:	68eb      	ldr	r3, [r5, #12]
   1ab10:	60c3      	str	r3, [r0, #12]
   1ab12:	68ab      	ldr	r3, [r5, #8]
   1ab14:	6103      	str	r3, [r0, #16]
   1ab16:	68f0      	ldr	r0, [r6, #12]
   1ab18:	f7fc faf2 	bl	17100 <linked_list_push>
   1ab1c:	b920      	cbnz	r0, 1ab28 <stream_handler_put+0x34>
   1ab1e:	6868      	ldr	r0, [r5, #4]
   1ab20:	bd70      	pop	{r4, r5, r6, pc}
   1ab22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab26:	bd70      	pop	{r4, r5, r6, pc}
   1ab28:	4620      	mov	r0, r4
   1ab2a:	f7f8 ffd7 	bl	13adc <nrf_free>
   1ab2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab32:	bd70      	pop	{r4, r5, r6, pc}

0001ab34 <stream_handler_get>:
   1ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab38:	4682      	mov	sl, r0
   1ab3a:	b087      	sub	sp, #28
   1ab3c:	68c0      	ldr	r0, [r0, #12]
   1ab3e:	4689      	mov	r9, r1
   1ab40:	4693      	mov	fp, r2
   1ab42:	f7fc fafd 	bl	17140 <linked_list_peek>
   1ab46:	2800      	cmp	r0, #0
   1ab48:	d072      	beq.n	1ac30 <stream_handler_get+0xfc>
   1ab4a:	4605      	mov	r5, r0
   1ab4c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1ab50:	b120      	cbz	r0, 1ab5c <stream_handler_get+0x28>
   1ab52:	692b      	ldr	r3, [r5, #16]
   1ab54:	b113      	cbz	r3, 1ab5c <stream_handler_get+0x28>
   1ab56:	68ea      	ldr	r2, [r5, #12]
   1ab58:	2a00      	cmp	r2, #0
   1ab5a:	d15c      	bne.n	1ac16 <stream_handler_get+0xe2>
   1ab5c:	2300      	movs	r3, #0
   1ab5e:	f8c9 300c 	str.w	r3, [r9, #12]
   1ab62:	f8d9 2000 	ldr.w	r2, [r9]
   1ab66:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1ab6a:	f8da 1010 	ldr.w	r1, [sl, #16]
   1ab6e:	9201      	str	r2, [sp, #4]
   1ab70:	f1b8 0f00 	cmp.w	r8, #0
   1ab74:	d05a      	beq.n	1ac2c <stream_handler_get+0xf8>
   1ab76:	f00b 0308 	and.w	r3, fp, #8
   1ab7a:	2400      	movs	r4, #0
   1ab7c:	9300      	str	r3, [sp, #0]
   1ab7e:	e010      	b.n	1aba2 <stream_handler_get+0x6e>
   1ab80:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ab84:	443b      	add	r3, r7
   1ab86:	f8ca 3010 	str.w	r3, [sl, #16]
   1ab8a:	4628      	mov	r0, r5
   1ab8c:	f7fc fae0 	bl	17150 <linked_list_get_next>
   1ab90:	443c      	add	r4, r7
   1ab92:	4605      	mov	r5, r0
   1ab94:	2800      	cmp	r0, #0
   1ab96:	d038      	beq.n	1ac0a <stream_handler_get+0xd6>
   1ab98:	45a0      	cmp	r8, r4
   1ab9a:	d936      	bls.n	1ac0a <stream_handler_get+0xd6>
   1ab9c:	2100      	movs	r1, #0
   1ab9e:	f8d9 2000 	ldr.w	r2, [r9]
   1aba2:	68ae      	ldr	r6, [r5, #8]
   1aba4:	eba8 0b04 	sub.w	fp, r8, r4
   1aba8:	1a76      	subs	r6, r6, r1
   1abaa:	455e      	cmp	r6, fp
   1abac:	4637      	mov	r7, r6
   1abae:	bf28      	it	cs
   1abb0:	465f      	movcs	r7, fp
   1abb2:	b132      	cbz	r2, 1abc2 <stream_handler_get+0x8e>
   1abb4:	6868      	ldr	r0, [r5, #4]
   1abb6:	9b01      	ldr	r3, [sp, #4]
   1abb8:	4401      	add	r1, r0
   1abba:	463a      	mov	r2, r7
   1abbc:	1918      	adds	r0, r3, r4
   1abbe:	f002 fd26 	bl	1d60e <memcpy>
   1abc2:	9b00      	ldr	r3, [sp, #0]
   1abc4:	2b00      	cmp	r3, #0
   1abc6:	d1e0      	bne.n	1ab8a <stream_handler_get+0x56>
   1abc8:	455e      	cmp	r6, fp
   1abca:	d8d9      	bhi.n	1ab80 <stream_handler_get+0x4c>
   1abcc:	f8da 000c 	ldr.w	r0, [sl, #12]
   1abd0:	f7fc faac 	bl	1712c <linked_list_pop>
   1abd4:	4606      	mov	r6, r0
   1abd6:	b170      	cbz	r0, 1abf6 <stream_handler_get+0xc2>
   1abd8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1abdc:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1abe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1abe4:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1abe8:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1abec:	a802      	add	r0, sp, #8
   1abee:	4798      	blx	r3
   1abf0:	4630      	mov	r0, r6
   1abf2:	f7f8 ff73 	bl	13adc <nrf_free>
   1abf6:	2300      	movs	r3, #0
   1abf8:	4628      	mov	r0, r5
   1abfa:	f8ca 3010 	str.w	r3, [sl, #16]
   1abfe:	f7fc faa7 	bl	17150 <linked_list_get_next>
   1ac02:	443c      	add	r4, r7
   1ac04:	4605      	mov	r5, r0
   1ac06:	2800      	cmp	r0, #0
   1ac08:	d1c6      	bne.n	1ab98 <stream_handler_get+0x64>
   1ac0a:	4620      	mov	r0, r4
   1ac0c:	f8c9 4004 	str.w	r4, [r9, #4]
   1ac10:	b007      	add	sp, #28
   1ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac16:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1ac1a:	429a      	cmp	r2, r3
   1ac1c:	bf28      	it	cs
   1ac1e:	461a      	movcs	r2, r3
   1ac20:	f8c9 200c 	str.w	r2, [r9, #12]
   1ac24:	6929      	ldr	r1, [r5, #16]
   1ac26:	f002 fcf2 	bl	1d60e <memcpy>
   1ac2a:	e79a      	b.n	1ab62 <stream_handler_get+0x2e>
   1ac2c:	4644      	mov	r4, r8
   1ac2e:	e7ec      	b.n	1ac0a <stream_handler_get+0xd6>
   1ac30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac34:	e7ec      	b.n	1ac10 <stream_handler_get+0xdc>
   1ac36:	bf00      	nop

0001ac38 <stream_handler_available>:
   1ac38:	b510      	push	{r4, lr}
   1ac3a:	4604      	mov	r4, r0
   1ac3c:	68c0      	ldr	r0, [r0, #12]
   1ac3e:	f7fc fa7f 	bl	17140 <linked_list_peek>
   1ac42:	b150      	cbz	r0, 1ac5a <stream_handler_available+0x22>
   1ac44:	6924      	ldr	r4, [r4, #16]
   1ac46:	4264      	negs	r4, r4
   1ac48:	6883      	ldr	r3, [r0, #8]
   1ac4a:	441c      	add	r4, r3
   1ac4c:	f7fc fa80 	bl	17150 <linked_list_get_next>
   1ac50:	2800      	cmp	r0, #0
   1ac52:	d1f9      	bne.n	1ac48 <stream_handler_available+0x10>
   1ac54:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1ac58:	bd10      	pop	{r4, pc}
   1ac5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac5e:	bd10      	pop	{r4, pc}

0001ac60 <stream_handler_flush>:
   1ac60:	b530      	push	{r4, r5, lr}
   1ac62:	4605      	mov	r5, r0
   1ac64:	68c0      	ldr	r0, [r0, #12]
   1ac66:	b085      	sub	sp, #20
   1ac68:	b9a8      	cbnz	r0, 1ac96 <stream_handler_flush+0x36>
   1ac6a:	e01a      	b.n	1aca2 <stream_handler_flush+0x42>
   1ac6c:	68e8      	ldr	r0, [r5, #12]
   1ac6e:	f7fc fa5d 	bl	1712c <linked_list_pop>
   1ac72:	4604      	mov	r4, r0
   1ac74:	b170      	cbz	r0, 1ac94 <stream_handler_flush+0x34>
   1ac76:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ac7a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ac7e:	e9cd 0100 	strd	r0, r1, [sp]
   1ac82:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ac86:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ac8a:	4668      	mov	r0, sp
   1ac8c:	4798      	blx	r3
   1ac8e:	4620      	mov	r0, r4
   1ac90:	f7f8 ff24 	bl	13adc <nrf_free>
   1ac94:	68e8      	ldr	r0, [r5, #12]
   1ac96:	f7fc fa59 	bl	1714c <linked_list_size_get>
   1ac9a:	2800      	cmp	r0, #0
   1ac9c:	d1e6      	bne.n	1ac6c <stream_handler_flush+0xc>
   1ac9e:	b005      	add	sp, #20
   1aca0:	bd30      	pop	{r4, r5, pc}
   1aca2:	2008      	movs	r0, #8
   1aca4:	b005      	add	sp, #20
   1aca6:	bd30      	pop	{r4, r5, pc}

0001aca8 <stream_handler_free>:
   1aca8:	b530      	push	{r4, r5, lr}
   1acaa:	4605      	mov	r5, r0
   1acac:	68c0      	ldr	r0, [r0, #12]
   1acae:	b085      	sub	sp, #20
   1acb0:	b9a0      	cbnz	r0, 1acdc <stream_handler_free+0x34>
   1acb2:	e01c      	b.n	1acee <stream_handler_free+0x46>
   1acb4:	f7fc fa3a 	bl	1712c <linked_list_pop>
   1acb8:	4604      	mov	r4, r0
   1acba:	b170      	cbz	r0, 1acda <stream_handler_free+0x32>
   1acbc:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1acc0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1acc4:	e9cd 0100 	strd	r0, r1, [sp]
   1acc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1accc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1acd0:	4668      	mov	r0, sp
   1acd2:	4798      	blx	r3
   1acd4:	4620      	mov	r0, r4
   1acd6:	f7f8 ff01 	bl	13adc <nrf_free>
   1acda:	68e8      	ldr	r0, [r5, #12]
   1acdc:	f7fc fa36 	bl	1714c <linked_list_size_get>
   1ace0:	4604      	mov	r4, r0
   1ace2:	68e8      	ldr	r0, [r5, #12]
   1ace4:	2c00      	cmp	r4, #0
   1ace6:	d1e5      	bne.n	1acb4 <stream_handler_free+0xc>
   1ace8:	f7f8 fef8 	bl	13adc <nrf_free>
   1acec:	60ec      	str	r4, [r5, #12]
   1acee:	b005      	add	sp, #20
   1acf0:	bd30      	pop	{r4, r5, pc}
   1acf2:	bf00      	nop

0001acf4 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1acf4:	4a07      	ldr	r2, [pc, #28]	; (1ad14 <SystemInit+0x20>)
   1acf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1acfa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1acfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1ad02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ad06:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1ad0a:	4b03      	ldr	r3, [pc, #12]	; (1ad18 <SystemInit+0x24>)
   1ad0c:	4a03      	ldr	r2, [pc, #12]	; (1ad1c <SystemInit+0x28>)
   1ad0e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1ad10:	4770      	bx	lr
   1ad12:	bf00      	nop
   1ad14:	e000ed00 	.word	0xe000ed00
   1ad18:	2002c560 	.word	0x2002c560
   1ad1c:	03d09000 	.word	0x03d09000

0001ad20 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   1ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad24:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ad26:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ad28:	2024      	movs	r0, #36	; 0x24
   1ad2a:	4d42      	ldr	r5, [pc, #264]	; (1ae34 <nrfx_uarte_init+0x114>)
   1ad2c:	fb00 5004 	mla	r0, r0, r4, r5
   1ad30:	f890 0020 	ldrb.w	r0, [r0, #32]
   1ad34:	2800      	cmp	r0, #0
   1ad36:	d17a      	bne.n	1ae2e <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   1ad38:	680f      	ldr	r7, [r1, #0]
   1ad3a:	1c7b      	adds	r3, r7, #1
   1ad3c:	d009      	beq.n	1ad52 <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ad3e:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ad40:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   1ad44:	483c      	ldr	r0, [pc, #240]	; (1ae38 <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ad46:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1ad48:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ad4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1ad4e:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   1ad52:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   1ad56:	f891 801b 	ldrb.w	r8, [r1, #27]
   1ad5a:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1ad5e:	bf1f      	itttt	ne
   1ad60:	f04f 0e00 	movne.w	lr, #0
   1ad64:	4834      	ldrne	r0, [pc, #208]	; (1ae38 <nrfx_uarte_init+0x118>)
   1ad66:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   1ad6a:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   1ad6e:	6948      	ldr	r0, [r1, #20]
   1ad70:	6833      	ldr	r3, [r6, #0]
   1ad72:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   1ad76:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   1ad7a:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   1ad7c:	f1be 0f01 	cmp.w	lr, #1
   1ad80:	ea40 0008 	orr.w	r0, r0, r8
   1ad84:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ad88:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   1ad8c:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1ad90:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   1ad94:	d120      	bne.n	1add8 <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   1ad96:	688f      	ldr	r7, [r1, #8]
   1ad98:	1c78      	adds	r0, r7, #1
   1ad9a:	bf1f      	itttt	ne
   1ad9c:	f04f 0e00 	movne.w	lr, #0
   1ada0:	f8df c094 	ldrne.w	ip, [pc, #148]	; 1ae38 <nrfx_uarte_init+0x118>
   1ada4:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   1ada8:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   1adac:	68c8      	ldr	r0, [r1, #12]
   1adae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1adb2:	d00d      	beq.n	1add0 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1adb4:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1adb8:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   1adbc:	f8df e078 	ldr.w	lr, [pc, #120]	; 1ae38 <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1adc0:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   1adc4:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1adc8:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   1adcc:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1add0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1add4:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   1add8:	2324      	movs	r3, #36	; 0x24
   1adda:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   1addc:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   1adde:	18e8      	adds	r0, r5, r3
   1ade0:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   1ade2:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   1ade4:	b192      	cbz	r2, 1ae0c <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ade6:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   1ade8:	6830      	ldr	r0, [r6, #0]
   1adea:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1adee:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1adf2:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1adf6:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   1adfa:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   1adfe:	4b0f      	ldr	r3, [pc, #60]	; (1ae3c <nrfx_uarte_init+0x11c>)
   1ae00:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   1ae04:	f340 3007 	sbfx	r0, r0, #12, #8
   1ae08:	f7f4 fd38 	bl	f87c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ae0c:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   1ae0e:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ae10:	480b      	ldr	r0, [pc, #44]	; (1ae40 <nrfx_uarte_init+0x120>)
   1ae12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   1ae16:	2324      	movs	r3, #36	; 0x24
   1ae18:	2200      	movs	r2, #0
   1ae1a:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   1ae1e:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   1ae22:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   1ae24:	2201      	movs	r2, #1
   1ae26:	f883 2020 	strb.w	r2, [r3, #32]
}
   1ae2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1ae2e:	4805      	ldr	r0, [pc, #20]	; (1ae44 <nrfx_uarte_init+0x124>)
   1ae30:	e7fb      	b.n	1ae2a <nrfx_uarte_init+0x10a>
   1ae32:	bf00      	nop
   1ae34:	20020b40 	.word	0x20020b40
   1ae38:	40842500 	.word	0x40842500
   1ae3c:	00420310 	.word	0x00420310
   1ae40:	0bad0000 	.word	0x0bad0000
   1ae44:	0bad0005 	.word	0x0bad0005

0001ae48 <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1ae48:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   1ae4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   1ae50:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   1ae52:	d12e      	bne.n	1aeb2 <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1ae54:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ae56:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1ae58:	4f19      	ldr	r7, [pc, #100]	; (1aec0 <nrfx_uarte_tx+0x78>)
   1ae5a:	fb04 7405 	mla	r4, r4, r5, r7
   1ae5e:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   1ae60:	bb4e      	cbnz	r6, 1aeb6 <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   1ae62:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   1ae64:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ae66:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   1ae6a:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   1ae6e:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ae70:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ae74:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ae78:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   1ae7a:	60a1      	str	r1, [r4, #8]
   1ae7c:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   1ae7e:	6862      	ldr	r2, [r4, #4]
   1ae80:	b9da      	cbnz	r2, 1aeba <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ae82:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1ae86:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   1ae8a:	b919      	cbnz	r1, 1ae94 <nrfx_uarte_tx+0x4c>
   1ae8c:	2a00      	cmp	r2, #0
   1ae8e:	d0f8      	beq.n	1ae82 <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   1ae90:	480c      	ldr	r0, [pc, #48]	; (1aec4 <nrfx_uarte_tx+0x7c>)
   1ae92:	e008      	b.n	1aea6 <nrfx_uarte_tx+0x5e>
        if (txstopped)
   1ae94:	2a00      	cmp	r2, #0
   1ae96:	d1fb      	bne.n	1ae90 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ae98:	2201      	movs	r2, #1
   1ae9a:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ae9c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   1aea0:	2a00      	cmp	r2, #0
   1aea2:	d0fb      	beq.n	1ae9c <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   1aea4:	4808      	ldr	r0, [pc, #32]	; (1aec8 <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   1aea6:	2324      	movs	r3, #36	; 0x24
   1aea8:	fb03 7505 	mla	r5, r3, r5, r7
   1aeac:	2300      	movs	r3, #0
   1aeae:	616b      	str	r3, [r5, #20]
}
   1aeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   1aeb2:	4806      	ldr	r0, [pc, #24]	; (1aecc <nrfx_uarte_tx+0x84>)
   1aeb4:	e7fc      	b.n	1aeb0 <nrfx_uarte_tx+0x68>
        return err_code;
   1aeb6:	4806      	ldr	r0, [pc, #24]	; (1aed0 <nrfx_uarte_tx+0x88>)
   1aeb8:	e7fa      	b.n	1aeb0 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   1aeba:	4803      	ldr	r0, [pc, #12]	; (1aec8 <nrfx_uarte_tx+0x80>)
   1aebc:	e7f8      	b.n	1aeb0 <nrfx_uarte_tx+0x68>
   1aebe:	bf00      	nop
   1aec0:	20020b40 	.word	0x20020b40
   1aec4:	0bad0008 	.word	0x0bad0008
   1aec8:	0bad0000 	.word	0x0bad0000
   1aecc:	0bad000a 	.word	0x0bad000a
   1aed0:	0bad000b 	.word	0x0bad000b

0001aed4 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1aed4:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1aed6:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1aed8:	4b08      	ldr	r3, [pc, #32]	; (1aefc <z_sys_device_do_config_level+0x28>)
   1aeda:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1aede:	3001      	adds	r0, #1
   1aee0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1aee4:	42a5      	cmp	r5, r4
   1aee6:	d800      	bhi.n	1aeea <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1aee8:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1aeea:	6823      	ldr	r3, [r4, #0]
   1aeec:	4620      	mov	r0, r4
   1aeee:	685b      	ldr	r3, [r3, #4]
   1aef0:	4798      	blx	r3
		if (retval != 0) {
   1aef2:	b100      	cbz	r0, 1aef6 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1aef4:	6066      	str	r6, [r4, #4]
								info++) {
   1aef6:	340c      	adds	r4, #12
   1aef8:	e7f4      	b.n	1aee4 <z_sys_device_do_config_level+0x10>
   1aefa:	bf00      	nop
   1aefc:	0001f8c8 	.word	0x0001f8c8

0001af00 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af00:	4b10      	ldr	r3, [pc, #64]	; (1af44 <z_impl_device_get_binding+0x44>)
{
   1af02:	b570      	push	{r4, r5, r6, lr}
   1af04:	4605      	mov	r5, r0
   1af06:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af08:	4c0f      	ldr	r4, [pc, #60]	; (1af48 <z_impl_device_get_binding+0x48>)
   1af0a:	429c      	cmp	r4, r3
   1af0c:	d104      	bne.n	1af18 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1af0e:	4c0e      	ldr	r4, [pc, #56]	; (1af48 <z_impl_device_get_binding+0x48>)
   1af10:	42b4      	cmp	r4, r6
   1af12:	d109      	bne.n	1af28 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1af14:	2400      	movs	r4, #0
   1af16:	e012      	b.n	1af3e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1af18:	6862      	ldr	r2, [r4, #4]
   1af1a:	b11a      	cbz	r2, 1af24 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1af1c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1af1e:	6812      	ldr	r2, [r2, #0]
   1af20:	42aa      	cmp	r2, r5
   1af22:	d00c      	beq.n	1af3e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af24:	340c      	adds	r4, #12
   1af26:	e7f0      	b.n	1af0a <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1af28:	6863      	ldr	r3, [r4, #4]
   1af2a:	b90b      	cbnz	r3, 1af30 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af2c:	340c      	adds	r4, #12
   1af2e:	e7ef      	b.n	1af10 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1af30:	6823      	ldr	r3, [r4, #0]
   1af32:	4628      	mov	r0, r5
   1af34:	6819      	ldr	r1, [r3, #0]
   1af36:	f002 fb36 	bl	1d5a6 <strcmp>
   1af3a:	2800      	cmp	r0, #0
   1af3c:	d1f6      	bne.n	1af2c <z_impl_device_get_binding+0x2c>
}
   1af3e:	4620      	mov	r0, r4
   1af40:	bd70      	pop	{r4, r5, r6, pc}
   1af42:	bf00      	nop
   1af44:	2002c650 	.word	0x2002c650
   1af48:	2002c56c 	.word	0x2002c56c

0001af4c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1af4c:	4b01      	ldr	r3, [pc, #4]	; (1af54 <z_impl_z_errno+0x8>)
   1af4e:	6898      	ldr	r0, [r3, #8]
}
   1af50:	3054      	adds	r0, #84	; 0x54
   1af52:	4770      	bx	lr
   1af54:	20024d28 	.word	0x20024d28

0001af58 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1af58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1af5c:	4605      	mov	r5, r0
   1af5e:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1af60:	f000 fe9a 	bl	1bc98 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1af64:	2201      	movs	r2, #1
   1af66:	f04f 0300 	mov.w	r3, #0
   1af6a:	4c26      	ldr	r4, [pc, #152]	; (1b004 <z_fatal_error+0xac>)
   1af6c:	f362 0307 	bfi	r3, r2, #0, #8
   1af70:	4a25      	ldr	r2, [pc, #148]	; (1b008 <z_fatal_error+0xb0>)
   1af72:	2d04      	cmp	r5, #4
   1af74:	eba4 0402 	sub.w	r4, r4, r2
   1af78:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1af7c:	bf98      	it	ls
   1af7e:	4a23      	ldrls	r2, [pc, #140]	; (1b00c <z_fatal_error+0xb4>)
   1af80:	f364 138f 	bfi	r3, r4, #6, #10
   1af84:	f8ad 3000 	strh.w	r3, [sp]
   1af88:	4606      	mov	r6, r0
   1af8a:	f04f 0300 	mov.w	r3, #0
   1af8e:	bf94      	ite	ls
   1af90:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1af94:	4a1e      	ldrhi	r2, [pc, #120]	; (1b010 <z_fatal_error+0xb8>)
   1af96:	4629      	mov	r1, r5
   1af98:	481e      	ldr	r0, [pc, #120]	; (1b014 <z_fatal_error+0xbc>)
   1af9a:	f001 fdfb 	bl	1cb94 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1af9e:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1afa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1afa6:	b14b      	cbz	r3, 1afbc <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   1afa8:	f04f 0100 	mov.w	r1, #0
   1afac:	2301      	movs	r3, #1
   1afae:	f363 0107 	bfi	r1, r3, #0, #8
   1afb2:	f364 118f 	bfi	r1, r4, #6, #10
   1afb6:	4818      	ldr	r0, [pc, #96]	; (1b018 <z_fatal_error+0xc0>)
   1afb8:	f001 fdb3 	bl	1cb22 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1afbc:	f04f 0700 	mov.w	r7, #0
   1afc0:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   1afc2:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   1afc4:	f363 0707 	bfi	r7, r3, #0, #8
   1afc8:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   1afcc:	f003 fe69 	bl	1eca2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1afd0:	b1b0      	cbz	r0, 1b000 <z_fatal_error+0xa8>
   1afd2:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1afd4:	4b11      	ldr	r3, [pc, #68]	; (1b01c <z_fatal_error+0xc4>)
   1afd6:	2a00      	cmp	r2, #0
   1afd8:	bf08      	it	eq
   1afda:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1afdc:	f7f3 ff92 	bl	ef04 <log_strdup>
   1afe0:	463b      	mov	r3, r7
   1afe2:	4602      	mov	r2, r0
   1afe4:	4631      	mov	r1, r6
   1afe6:	480e      	ldr	r0, [pc, #56]	; (1b020 <z_fatal_error+0xc8>)
   1afe8:	f001 fdbc 	bl	1cb64 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1afec:	4641      	mov	r1, r8
   1afee:	4628      	mov	r0, r5
   1aff0:	f7f7 fbce 	bl	12790 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   1aff4:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1aff6:	b002      	add	sp, #8
   1aff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1affc:	f7f5 b89e 	b.w	1013c <z_impl_k_thread_abort>
		thread_name = "unknown";
   1b000:	4806      	ldr	r0, [pc, #24]	; (1b01c <z_fatal_error+0xc4>)
   1b002:	e7eb      	b.n	1afdc <z_fatal_error+0x84>
   1b004:	0001f388 	.word	0x0001f388
   1b008:	0001f328 	.word	0x0001f328
   1b00c:	0001f8e0 	.word	0x0001f8e0
   1b010:	00020e55 	.word	0x00020e55
   1b014:	00020e6b 	.word	0x00020e6b
   1b018:	00020e93 	.word	0x00020e93
   1b01c:	00020e63 	.word	0x00020e63
   1b020:	00020eb4 	.word	0x00020eb4

0001b024 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1b024:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1b026:	4d0b      	ldr	r5, [pc, #44]	; (1b054 <idle+0x30>)
	__asm__ volatile(
   1b028:	f04f 0220 	mov.w	r2, #32
   1b02c:	f3ef 8311 	mrs	r3, BASEPRI
   1b030:	f382 8811 	msr	BASEPRI, r2
   1b034:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1b038:	f003 fe8b 	bl	1ed52 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b03c:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1b03e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b040:	2802      	cmp	r0, #2
   1b042:	bfd8      	it	le
   1b044:	4608      	movle	r0, r1
   1b046:	f003 fe94 	bl	1ed72 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1b04a:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1b04c:	f7f4 fca0 	bl	f990 <arch_cpu_idle>
   1b050:	e7ea      	b.n	1b028 <idle+0x4>
   1b052:	bf00      	nop
   1b054:	20024d28 	.word	0x20024d28

0001b058 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b058:	4802      	ldr	r0, [pc, #8]	; (1b064 <z_bss_zero+0xc>)
   1b05a:	4a03      	ldr	r2, [pc, #12]	; (1b068 <z_bss_zero+0x10>)
   1b05c:	2100      	movs	r1, #0
   1b05e:	1a12      	subs	r2, r2, r0
   1b060:	f002 baff 	b.w	1d662 <memset>
   1b064:	20020000 	.word	0x20020000
   1b068:	200266b4 	.word	0x200266b4

0001b06c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1b06c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1b06e:	4806      	ldr	r0, [pc, #24]	; (1b088 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1b070:	4a06      	ldr	r2, [pc, #24]	; (1b08c <z_data_copy+0x20>)
   1b072:	4907      	ldr	r1, [pc, #28]	; (1b090 <z_data_copy+0x24>)
   1b074:	1a12      	subs	r2, r2, r0
   1b076:	f002 faca 	bl	1d60e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b07a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1b07e:	4a05      	ldr	r2, [pc, #20]	; (1b094 <z_data_copy+0x28>)
   1b080:	4905      	ldr	r1, [pc, #20]	; (1b098 <z_data_copy+0x2c>)
   1b082:	4806      	ldr	r0, [pc, #24]	; (1b09c <z_data_copy+0x30>)
   1b084:	f002 bac3 	b.w	1d60e <memcpy>
   1b088:	2002c50c 	.word	0x2002c50c
   1b08c:	2002c75c 	.word	0x2002c75c
   1b090:	00020f1c 	.word	0x00020f1c
   1b094:	00000000 	.word	0x00000000
   1b098:	00020f1c 	.word	0x00020f1c
   1b09c:	20020000 	.word	0x20020000

0001b0a0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1b0a0:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b0a2:	2002      	movs	r0, #2
   1b0a4:	f7ff ff16 	bl	1aed4 <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1b0a8:	4a08      	ldr	r2, [pc, #32]	; (1b0cc <bg_thread_main+0x2c>)
   1b0aa:	4909      	ldr	r1, [pc, #36]	; (1b0d0 <bg_thread_main+0x30>)
   1b0ac:	4809      	ldr	r0, [pc, #36]	; (1b0d4 <bg_thread_main+0x34>)
   1b0ae:	f001 fd05 	bl	1cabc <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1b0b2:	2003      	movs	r0, #3
   1b0b4:	f7ff ff0e 	bl	1aed4 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1b0b8:	f000 ff38 	bl	1bf2c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1b0bc:	f001 f974 	bl	1c3a8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b0c0:	4a05      	ldr	r2, [pc, #20]	; (1b0d8 <bg_thread_main+0x38>)
   1b0c2:	7b13      	ldrb	r3, [r2, #12]
   1b0c4:	f023 0301 	bic.w	r3, r3, #1
   1b0c8:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b0ca:	bd08      	pop	{r3, pc}
   1b0cc:	0001fd81 	.word	0x0001fd81
   1b0d0:	00020ecc 	.word	0x00020ecc
   1b0d4:	00020ed2 	.word	0x00020ed2
   1b0d8:	20020c14 	.word	0x20020c14

0001b0dc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1b0dc:	b580      	push	{r7, lr}
   1b0de:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b0e0:	f7f3 fd84 	bl	ebec <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1b0e4:	4b33      	ldr	r3, [pc, #204]	; (1b1b4 <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b0e6:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b0ea:	2400      	movs	r4, #0
   1b0ec:	23e0      	movs	r3, #224	; 0xe0
   1b0ee:	4d32      	ldr	r5, [pc, #200]	; (1b1b8 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1b0f0:	2701      	movs	r7, #1
   1b0f2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b0f6:	77ec      	strb	r4, [r5, #31]
   1b0f8:	762c      	strb	r4, [r5, #24]
   1b0fa:	766c      	strb	r4, [r5, #25]
   1b0fc:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b0fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1b100:	4e2e      	ldr	r6, [pc, #184]	; (1b1bc <z_cstart+0xe0>)
   1b102:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b106:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b108:	f7f4 fff2 	bl	100f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b10c:	f7f4 fc3a 	bl	f984 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b114:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b116:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1b118:	ab06      	add	r3, sp, #24
   1b11a:	22b0      	movs	r2, #176	; 0xb0
   1b11c:	4621      	mov	r1, r4
   1b11e:	4618      	mov	r0, r3
   1b120:	f002 fa9f 	bl	1d662 <memset>
	_current = &dummy_thread;
   1b124:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b126:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1b128:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b12c:	f7ff fed2 	bl	1aed4 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b130:	4638      	mov	r0, r7
   1b132:	f7ff fecf 	bl	1aed4 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   1b136:	4d22      	ldr	r5, [pc, #136]	; (1b1c0 <z_cstart+0xe4>)
	z_sched_init();
   1b138:	f000 fd2e 	bl	1bb98 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1b13c:	4b21      	ldr	r3, [pc, #132]	; (1b1c4 <z_cstart+0xe8>)
   1b13e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b142:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1b146:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1b14a:	4b1f      	ldr	r3, [pc, #124]	; (1b1c8 <z_cstart+0xec>)
   1b14c:	e9cd 4400 	strd	r4, r4, [sp]
   1b150:	491e      	ldr	r1, [pc, #120]	; (1b1cc <z_cstart+0xf0>)
   1b152:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1b154:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1b156:	f000 fe49 	bl	1bdec <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b15a:	7b6b      	ldrb	r3, [r5, #13]
   1b15c:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b160:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b164:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b166:	d104      	bne.n	1b172 <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1b168:	69ab      	ldr	r3, [r5, #24]
   1b16a:	b913      	cbnz	r3, 1b172 <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   1b16c:	4628      	mov	r0, r5
   1b16e:	f000 fb53 	bl	1b818 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1b172:	4b17      	ldr	r3, [pc, #92]	; (1b1d0 <z_cstart+0xf4>)
   1b174:	2201      	movs	r2, #1
   1b176:	9305      	str	r3, [sp, #20]
   1b178:	230f      	movs	r3, #15
   1b17a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1b17e:	2300      	movs	r3, #0
   1b180:	4d14      	ldr	r5, [pc, #80]	; (1b1d4 <z_cstart+0xf8>)
   1b182:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b186:	9300      	str	r3, [sp, #0]
   1b188:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b18c:	4b12      	ldr	r3, [pc, #72]	; (1b1d8 <z_cstart+0xfc>)
   1b18e:	4913      	ldr	r1, [pc, #76]	; (1b1dc <z_cstart+0x100>)
   1b190:	4628      	mov	r0, r5
   1b192:	f000 fe2b 	bl	1bdec <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b196:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1b198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b19c:	f023 0304 	bic.w	r3, r3, #4
   1b1a0:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b1a2:	4b0f      	ldr	r3, [pc, #60]	; (1b1e0 <z_cstart+0x104>)
   1b1a4:	4909      	ldr	r1, [pc, #36]	; (1b1cc <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   1b1a6:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1b1aa:	4805      	ldr	r0, [pc, #20]	; (1b1c0 <z_cstart+0xe4>)
   1b1ac:	4b06      	ldr	r3, [pc, #24]	; (1b1c8 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1b1ae:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1b1b0:	f7f4 fbbe 	bl	f930 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b1b4:	20028af8 	.word	0x20028af8
   1b1b8:	e000ed00 	.word	0xe000ed00
   1b1bc:	20024d28 	.word	0x20024d28
   1b1c0:	20020c14 	.word	0x20020c14
   1b1c4:	00020efe 	.word	0x00020efe
   1b1c8:	0001b0a1 	.word	0x0001b0a1
   1b1cc:	200271b8 	.word	0x200271b8
   1b1d0:	00020f03 	.word	0x00020f03
   1b1d4:	20020b64 	.word	0x20020b64
   1b1d8:	0001b025 	.word	0x0001b025
   1b1dc:	200281b8 	.word	0x200281b8
   1b1e0:	20024d40 	.word	0x20024d40

0001b1e4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1b1e4:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1b1e6:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b1e8:	4b0a      	ldr	r3, [pc, #40]	; (1b214 <init_mem_slab_module+0x30>)
   1b1ea:	480b      	ldr	r0, [pc, #44]	; (1b218 <init_mem_slab_module+0x34>)
   1b1ec:	4283      	cmp	r3, r0
   1b1ee:	d301      	bcc.n	1b1f4 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1b1f0:	2000      	movs	r0, #0
   1b1f2:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   1b1f4:	2100      	movs	r1, #0
	p = slab->buffer;
   1b1f6:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b1f8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1b1fa:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b1fc:	42a9      	cmp	r1, r5
   1b1fe:	d101      	bne.n	1b204 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b200:	331c      	adds	r3, #28
   1b202:	e7f3      	b.n	1b1ec <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1b204:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b206:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   1b208:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1b20a:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1b20c:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   1b20e:	4432      	add	r2, r6
   1b210:	e7f4      	b.n	1b1fc <init_mem_slab_module+0x18>
   1b212:	bf00      	nop
   1b214:	2002c650 	.word	0x2002c650
   1b218:	2002c66c 	.word	0x2002c66c

0001b21c <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1b21c:	b510      	push	{r4, lr}
   1b21e:	4613      	mov	r3, r2
   1b220:	460c      	mov	r4, r1
   1b222:	f04f 0220 	mov.w	r2, #32
   1b226:	f3ef 8111 	mrs	r1, BASEPRI
   1b22a:	f382 8811 	msr	BASEPRI, r2
   1b22e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1b232:	6942      	ldr	r2, [r0, #20]
   1b234:	b15a      	cbz	r2, 1b24e <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   1b236:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b238:	6813      	ldr	r3, [r2, #0]
   1b23a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b23c:	6983      	ldr	r3, [r0, #24]
   1b23e:	3301      	adds	r3, #1
   1b240:	6183      	str	r3, [r0, #24]
		result = 0;
   1b242:	2000      	movs	r0, #0
	__asm__ volatile(
   1b244:	f381 8811 	msr	BASEPRI, r1
   1b248:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b24c:	e00d      	b.n	1b26a <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1b24e:	b91b      	cbnz	r3, 1b258 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1b250:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b252:	f06f 000b 	mvn.w	r0, #11
   1b256:	e7f5      	b.n	1b244 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b258:	4602      	mov	r2, r0
   1b25a:	4804      	ldr	r0, [pc, #16]	; (1b26c <k_mem_slab_alloc+0x50>)
   1b25c:	f000 fc18 	bl	1ba90 <z_pend_curr>
		if (result == 0) {
   1b260:	b918      	cbnz	r0, 1b26a <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1b262:	4b03      	ldr	r3, [pc, #12]	; (1b270 <k_mem_slab_alloc+0x54>)
   1b264:	689b      	ldr	r3, [r3, #8]
   1b266:	695b      	ldr	r3, [r3, #20]
   1b268:	6023      	str	r3, [r4, #0]
}
   1b26a:	bd10      	pop	{r4, pc}
   1b26c:	20026591 	.word	0x20026591
   1b270:	20024d28 	.word	0x20024d28

0001b274 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b274:	b570      	push	{r4, r5, r6, lr}
   1b276:	4604      	mov	r4, r0
   1b278:	460d      	mov	r5, r1
	__asm__ volatile(
   1b27a:	f04f 0320 	mov.w	r3, #32
   1b27e:	f3ef 8611 	mrs	r6, BASEPRI
   1b282:	f383 8811 	msr	BASEPRI, r3
   1b286:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b28a:	f003 fcb2 	bl	1ebf2 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1b28e:	b180      	cbz	r0, 1b2b2 <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b290:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1b292:	682a      	ldr	r2, [r5, #0]
   1b294:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1b296:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b298:	7b42      	ldrb	r2, [r0, #13]
   1b29a:	06d2      	lsls	r2, r2, #27
   1b29c:	d103      	bne.n	1b2a6 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1b29e:	6983      	ldr	r3, [r0, #24]
   1b2a0:	b90b      	cbnz	r3, 1b2a6 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1b2a2:	f000 fab9 	bl	1b818 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1b2a6:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1b2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b2ac:	4807      	ldr	r0, [pc, #28]	; (1b2cc <k_mem_slab_free+0x58>)
   1b2ae:	f003 bc2a 	b.w	1eb06 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1b2b2:	682b      	ldr	r3, [r5, #0]
   1b2b4:	6962      	ldr	r2, [r4, #20]
   1b2b6:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1b2b8:	682b      	ldr	r3, [r5, #0]
   1b2ba:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1b2bc:	69a3      	ldr	r3, [r4, #24]
   1b2be:	3b01      	subs	r3, #1
   1b2c0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1b2c2:	f386 8811 	msr	BASEPRI, r6
   1b2c6:	f3bf 8f6f 	isb	sy
}
   1b2ca:	bd70      	pop	{r4, r5, r6, pc}
   1b2cc:	20026591 	.word	0x20026591

0001b2d0 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1b2d0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b2d2:	4c07      	ldr	r4, [pc, #28]	; (1b2f0 <init_static_pools+0x20>)
   1b2d4:	4d07      	ldr	r5, [pc, #28]	; (1b2f4 <init_static_pools+0x24>)
   1b2d6:	42ac      	cmp	r4, r5
   1b2d8:	d301      	bcc.n	1b2de <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1b2da:	2000      	movs	r0, #0
   1b2dc:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b2de:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1b2e2:	4620      	mov	r0, r4
   1b2e4:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1b2e8:	f001 f8b1 	bl	1c44e <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b2ec:	341c      	adds	r4, #28
   1b2ee:	e7f2      	b.n	1b2d6 <init_static_pools+0x6>
   1b2f0:	2002c66c 	.word	0x2002c66c
   1b2f4:	2002c688 	.word	0x2002c688

0001b2f8 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1b2fc:	1e1c      	subs	r4, r3, #0
{
   1b2fe:	b085      	sub	sp, #20
   1b300:	4607      	mov	r7, r0
   1b302:	460d      	mov	r5, r1
   1b304:	4692      	mov	sl, r2
	if (timeout > 0) {
   1b306:	dd3b      	ble.n	1b380 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   1b308:	f003 fd51 	bl	1edae <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1b30c:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1b310:	4b1d      	ldr	r3, [pc, #116]	; (1b388 <k_mem_pool_alloc+0x90>)
   1b312:	4e1e      	ldr	r6, [pc, #120]	; (1b38c <k_mem_pool_alloc+0x94>)
   1b314:	1afb      	subs	r3, r7, r3
   1b316:	109b      	asrs	r3, r3, #2
   1b318:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1b31a:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1b31e:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1b320:	ab03      	add	r3, sp, #12
   1b322:	aa02      	add	r2, sp, #8
   1b324:	9500      	str	r5, [sp, #0]
   1b326:	4651      	mov	r1, sl
   1b328:	4638      	mov	r0, r7
   1b32a:	f001 f8d6 	bl	1c4da <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1b32e:	796b      	ldrb	r3, [r5, #5]
   1b330:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1b332:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1b334:	f362 0303 	bfi	r3, r2, #0, #4
   1b338:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1b33a:	686b      	ldr	r3, [r5, #4]
   1b33c:	9a03      	ldr	r2, [sp, #12]
   1b33e:	f362 331f 	bfi	r3, r2, #12, #20
   1b342:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1b344:	b1c8      	cbz	r0, 1b37a <k_mem_pool_alloc+0x82>
   1b346:	b1c4      	cbz	r4, 1b37a <k_mem_pool_alloc+0x82>
   1b348:	f110 0f0c 	cmn.w	r0, #12
   1b34c:	d115      	bne.n	1b37a <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   1b34e:	f04f 0320 	mov.w	r3, #32
   1b352:	f3ef 8011 	mrs	r0, BASEPRI
   1b356:	f383 8811 	msr	BASEPRI, r3
   1b35a:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1b35e:	4622      	mov	r2, r4
   1b360:	4659      	mov	r1, fp
   1b362:	f000 fb71 	bl	1ba48 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1b366:	1c63      	adds	r3, r4, #1
   1b368:	d0da      	beq.n	1b320 <k_mem_pool_alloc+0x28>
   1b36a:	f003 fd20 	bl	1edae <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1b36e:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1b372:	2c00      	cmp	r4, #0
   1b374:	dcd4      	bgt.n	1b320 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1b376:	f06f 000a 	mvn.w	r0, #10
}
   1b37a:	b005      	add	sp, #20
   1b37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1b380:	f04f 0800 	mov.w	r8, #0
   1b384:	e7c4      	b.n	1b310 <k_mem_pool_alloc+0x18>
   1b386:	bf00      	nop
   1b388:	2002c66c 	.word	0x2002c66c
   1b38c:	b6db6db7 	.word	0xb6db6db7

0001b390 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1b390:	b570      	push	{r4, r5, r6, lr}
   1b392:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1b394:	6802      	ldr	r2, [r0, #0]
   1b396:	7841      	ldrb	r1, [r0, #1]
   1b398:	4e11      	ldr	r6, [pc, #68]	; (1b3e0 <k_mem_pool_free_id+0x50>)
   1b39a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1b39e:	00a4      	lsls	r4, r4, #2
   1b3a0:	0b12      	lsrs	r2, r2, #12
   1b3a2:	f001 010f 	and.w	r1, r1, #15
   1b3a6:	1930      	adds	r0, r6, r4
   1b3a8:	f001 f949 	bl	1c63e <z_sys_mem_pool_block_free>
   1b3ac:	f04f 0320 	mov.w	r3, #32
   1b3b0:	f3ef 8511 	mrs	r5, BASEPRI
   1b3b4:	f383 8811 	msr	BASEPRI, r3
   1b3b8:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1b3bc:	f104 0014 	add.w	r0, r4, #20
   1b3c0:	4430      	add	r0, r6
   1b3c2:	f003 fc43 	bl	1ec4c <z_unpend_all>

	if (need_sched != 0) {
   1b3c6:	b128      	cbz	r0, 1b3d4 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   1b3c8:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1b3ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b3ce:	4805      	ldr	r0, [pc, #20]	; (1b3e4 <k_mem_pool_free_id+0x54>)
   1b3d0:	f003 bb99 	b.w	1eb06 <z_reschedule>
	__asm__ volatile(
   1b3d4:	f385 8811 	msr	BASEPRI, r5
   1b3d8:	f3bf 8f6f 	isb	sy
}
   1b3dc:	bd70      	pop	{r4, r5, r6, pc}
   1b3de:	bf00      	nop
   1b3e0:	2002c66c 	.word	0x2002c66c
   1b3e4:	20026591 	.word	0x20026591

0001b3e8 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1b3e8:	4601      	mov	r1, r0
   1b3ea:	4801      	ldr	r0, [pc, #4]	; (1b3f0 <k_malloc+0x8>)
   1b3ec:	f003 ba4d 	b.w	1e88a <k_mem_pool_malloc>
   1b3f0:	2002c66c 	.word	0x2002c66c

0001b3f4 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1b3f4:	4b03      	ldr	r3, [pc, #12]	; (1b404 <z_thread_malloc+0x10>)
{
   1b3f6:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1b3f8:	689b      	ldr	r3, [r3, #8]
   1b3fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1b3fc:	b108      	cbz	r0, 1b402 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1b3fe:	f003 ba44 	b.w	1e88a <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1b402:	4770      	bx	lr
   1b404:	20024d28 	.word	0x20024d28

0001b408 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b40c:	4613      	mov	r3, r2
   1b40e:	4604      	mov	r4, r0
   1b410:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b412:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1b416:	f04f 0220 	mov.w	r2, #32
   1b41a:	f3ef 8611 	mrs	r6, BASEPRI
   1b41e:	f382 8811 	msr	BASEPRI, r2
   1b422:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1b426:	6a01      	ldr	r1, [r0, #32]
   1b428:	68c2      	ldr	r2, [r0, #12]
   1b42a:	4291      	cmp	r1, r2
   1b42c:	d22e      	bcs.n	1b48c <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b42e:	f003 fbe0 	bl	1ebf2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1b432:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1b434:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1b436:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   1b438:	b198      	cbz	r0, 1b462 <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   1b43a:	6940      	ldr	r0, [r0, #20]
   1b43c:	f002 f8e7 	bl	1d60e <memcpy>
   1b440:	2300      	movs	r3, #0
   1b442:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b444:	7b6b      	ldrb	r3, [r5, #13]
   1b446:	06db      	lsls	r3, r3, #27
   1b448:	d104      	bne.n	1b454 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   1b44a:	69ab      	ldr	r3, [r5, #24]
   1b44c:	b913      	cbnz	r3, 1b454 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   1b44e:	4628      	mov	r0, r5
   1b450:	f000 f9e2 	bl	1b818 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b454:	4640      	mov	r0, r8
   1b456:	4631      	mov	r1, r6
   1b458:	f003 fb55 	bl	1eb06 <z_reschedule>
			return 0;
   1b45c:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1b462:	69e0      	ldr	r0, [r4, #28]
   1b464:	f002 f8d3 	bl	1d60e <memcpy>
		result = 0;
   1b468:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1b46a:	69e3      	ldr	r3, [r4, #28]
   1b46c:	68a2      	ldr	r2, [r4, #8]
   1b46e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b470:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b472:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b474:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b476:	bf04      	itt	eq
   1b478:	6923      	ldreq	r3, [r4, #16]
   1b47a:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1b47c:	6a23      	ldr	r3, [r4, #32]
   1b47e:	3301      	adds	r3, #1
   1b480:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1b482:	f386 8811 	msr	BASEPRI, r6
   1b486:	f3bf 8f6f 	isb	sy
	return result;
   1b48a:	e7e8      	b.n	1b45e <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   1b48c:	b14b      	cbz	r3, 1b4a2 <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   1b48e:	4a06      	ldr	r2, [pc, #24]	; (1b4a8 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b490:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   1b492:	6892      	ldr	r2, [r2, #8]
   1b494:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b496:	4602      	mov	r2, r0
   1b498:	4640      	mov	r0, r8
}
   1b49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b49e:	f000 baf7 	b.w	1ba90 <z_pend_curr>
		result = -ENOMSG;
   1b4a2:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1b4a6:	e7ec      	b.n	1b482 <z_impl_k_msgq_put+0x7a>
   1b4a8:	20024d28 	.word	0x20024d28

0001b4ac <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4b0:	4604      	mov	r4, r0
   1b4b2:	4613      	mov	r3, r2
   1b4b4:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b4b6:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1b4ba:	f04f 0220 	mov.w	r2, #32
   1b4be:	f3ef 8611 	mrs	r6, BASEPRI
   1b4c2:	f382 8811 	msr	BASEPRI, r2
   1b4c6:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1b4ca:	6a22      	ldr	r2, [r4, #32]
   1b4cc:	2a00      	cmp	r2, #0
   1b4ce:	d037      	beq.n	1b540 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1b4d0:	68a2      	ldr	r2, [r4, #8]
   1b4d2:	69a1      	ldr	r1, [r4, #24]
   1b4d4:	f002 f89b 	bl	1d60e <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1b4d8:	69a3      	ldr	r3, [r4, #24]
   1b4da:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b4dc:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1b4de:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1b4e0:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1b4e2:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1b4e4:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1b4e6:	bf04      	itt	eq
   1b4e8:	6923      	ldreq	r3, [r4, #16]
   1b4ea:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1b4ec:	6a23      	ldr	r3, [r4, #32]
   1b4ee:	3b01      	subs	r3, #1
   1b4f0:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b4f2:	f003 fb7e 	bl	1ebf2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b4f6:	4605      	mov	r5, r0
   1b4f8:	2800      	cmp	r0, #0
   1b4fa:	d02e      	beq.n	1b55a <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1b4fc:	68a2      	ldr	r2, [r4, #8]
   1b4fe:	6941      	ldr	r1, [r0, #20]
   1b500:	69e0      	ldr	r0, [r4, #28]
   1b502:	f002 f884 	bl	1d60e <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1b506:	69e3      	ldr	r3, [r4, #28]
   1b508:	68a2      	ldr	r2, [r4, #8]
   1b50a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b50c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b50e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b510:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b512:	bf04      	itt	eq
   1b514:	6923      	ldreq	r3, [r4, #16]
   1b516:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1b518:	6a23      	ldr	r3, [r4, #32]
   1b51a:	3301      	adds	r3, #1
   1b51c:	6223      	str	r3, [r4, #32]
   1b51e:	2300      	movs	r3, #0
   1b520:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b522:	7b6b      	ldrb	r3, [r5, #13]
   1b524:	06db      	lsls	r3, r3, #27
   1b526:	d104      	bne.n	1b532 <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   1b528:	69ab      	ldr	r3, [r5, #24]
   1b52a:	b913      	cbnz	r3, 1b532 <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   1b52c:	4628      	mov	r0, r5
   1b52e:	f000 f973 	bl	1b818 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b532:	4638      	mov	r0, r7
   1b534:	4631      	mov	r1, r6
   1b536:	f003 fae6 	bl	1eb06 <z_reschedule>
			return 0;
   1b53a:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1b540:	b14b      	cbz	r3, 1b556 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   1b542:	4a08      	ldr	r2, [pc, #32]	; (1b564 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b544:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   1b546:	6892      	ldr	r2, [r2, #8]
   1b548:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b54a:	4622      	mov	r2, r4
   1b54c:	4631      	mov	r1, r6
}
   1b54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b552:	f000 ba9d 	b.w	1ba90 <z_pend_curr>
		result = -ENOMSG;
   1b556:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1b55a:	f386 8811 	msr	BASEPRI, r6
   1b55e:	f3bf 8f6f 	isb	sy
	return result;
   1b562:	e7eb      	b.n	1b53c <z_impl_k_msgq_get+0x90>
   1b564:	20024d28 	.word	0x20024d28

0001b568 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b56a:	4604      	mov	r4, r0
   1b56c:	460f      	mov	r7, r1
	__asm__ volatile(
   1b56e:	f04f 0320 	mov.w	r3, #32
   1b572:	f3ef 8511 	mrs	r5, BASEPRI
   1b576:	f383 8811 	msr	BASEPRI, r3
   1b57a:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b57e:	68c2      	ldr	r2, [r0, #12]
   1b580:	4930      	ldr	r1, [pc, #192]	; (1b644 <z_impl_k_mutex_lock+0xdc>)
   1b582:	b15a      	cbz	r2, 1b59c <z_impl_k_mutex_lock+0x34>
   1b584:	6880      	ldr	r0, [r0, #8]
   1b586:	688e      	ldr	r6, [r1, #8]
   1b588:	42b0      	cmp	r0, r6
   1b58a:	d015      	beq.n	1b5b8 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1b58c:	b9b7      	cbnz	r7, 1b5bc <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1b58e:	f385 8811 	msr	BASEPRI, r5
   1b592:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b596:	f06f 000f 	mvn.w	r0, #15
   1b59a:	e00c      	b.n	1b5b6 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1b59c:	688b      	ldr	r3, [r1, #8]
   1b59e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b5a2:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   1b5a4:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1b5a6:	3201      	adds	r2, #1
   1b5a8:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1b5aa:	60a3      	str	r3, [r4, #8]
   1b5ac:	f385 8811 	msr	BASEPRI, r5
   1b5b0:	f3bf 8f6f 	isb	sy
		return 0;
   1b5b4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1b5b8:	6923      	ldr	r3, [r4, #16]
   1b5ba:	e7f2      	b.n	1b5a2 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b5bc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b5c0:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1b5c4:	4299      	cmp	r1, r3
   1b5c6:	bfa8      	it	ge
   1b5c8:	4619      	movge	r1, r3
   1b5ca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b5ce:	4299      	cmp	r1, r3
   1b5d0:	da2b      	bge.n	1b62a <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1b5d2:	f000 fa9f 	bl	1bb14 <z_set_prio>
   1b5d6:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b5d8:	463b      	mov	r3, r7
   1b5da:	4622      	mov	r2, r4
   1b5dc:	4629      	mov	r1, r5
   1b5de:	481a      	ldr	r0, [pc, #104]	; (1b648 <z_impl_k_mutex_lock+0xe0>)
   1b5e0:	f000 fa56 	bl	1ba90 <z_pend_curr>
	if (got_mutex == 0) {
   1b5e4:	2800      	cmp	r0, #0
   1b5e6:	d0e6      	beq.n	1b5b6 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1b5e8:	f04f 0320 	mov.w	r3, #32
   1b5ec:	f3ef 8511 	mrs	r5, BASEPRI
   1b5f0:	f383 8811 	msr	BASEPRI, r3
   1b5f4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b5f8:	6823      	ldr	r3, [r4, #0]
   1b5fa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b5fc:	429c      	cmp	r4, r3
   1b5fe:	d007      	beq.n	1b610 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1b600:	b133      	cbz	r3, 1b610 <z_impl_k_mutex_lock+0xa8>
   1b602:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b606:	4299      	cmp	r1, r3
   1b608:	bfa8      	it	ge
   1b60a:	4619      	movge	r1, r3
   1b60c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b610:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b612:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b616:	4299      	cmp	r1, r3
   1b618:	d109      	bne.n	1b62e <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1b61a:	b16e      	cbz	r6, 1b638 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1b61c:	4629      	mov	r1, r5
   1b61e:	480a      	ldr	r0, [pc, #40]	; (1b648 <z_impl_k_mutex_lock+0xe0>)
   1b620:	f003 fa71 	bl	1eb06 <z_reschedule>
	return -EAGAIN;
   1b624:	f06f 000a 	mvn.w	r0, #10
   1b628:	e7c5      	b.n	1b5b6 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1b62a:	2600      	movs	r6, #0
   1b62c:	e7d4      	b.n	1b5d8 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1b62e:	f000 fa71 	bl	1bb14 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b632:	2800      	cmp	r0, #0
   1b634:	d1f2      	bne.n	1b61c <z_impl_k_mutex_lock+0xb4>
   1b636:	e7f0      	b.n	1b61a <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1b638:	f385 8811 	msr	BASEPRI, r5
   1b63c:	f3bf 8f6f 	isb	sy
   1b640:	e7f0      	b.n	1b624 <z_impl_k_mutex_lock+0xbc>
   1b642:	bf00      	nop
   1b644:	20024d28 	.word	0x20024d28
   1b648:	20026591 	.word	0x20026591

0001b64c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b64c:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b64e:	4b1d      	ldr	r3, [pc, #116]	; (1b6c4 <z_impl_k_mutex_unlock+0x78>)
   1b650:	4604      	mov	r4, r0
   1b652:	689a      	ldr	r2, [r3, #8]
   1b654:	7bd3      	ldrb	r3, [r2, #15]
   1b656:	3b01      	subs	r3, #1
   1b658:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1b65a:	68c3      	ldr	r3, [r0, #12]
   1b65c:	2b01      	cmp	r3, #1
   1b65e:	d005      	beq.n	1b66c <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1b660:	3b01      	subs	r3, #1
   1b662:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   1b664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
   1b668:	f000 b8ba 	b.w	1b7e0 <k_sched_unlock>
	__asm__ volatile(
   1b66c:	f04f 0320 	mov.w	r3, #32
   1b670:	f3ef 8511 	mrs	r5, BASEPRI
   1b674:	f383 8811 	msr	BASEPRI, r3
   1b678:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b67c:	6901      	ldr	r1, [r0, #16]
   1b67e:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b680:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b684:	4299      	cmp	r1, r3
   1b686:	d001      	beq.n	1b68c <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   1b688:	f000 fa44 	bl	1bb14 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b68c:	4620      	mov	r0, r4
   1b68e:	f003 fab0 	bl	1ebf2 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b692:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b694:	b180      	cbz	r0, 1b6b8 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b696:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b69a:	6122      	str	r2, [r4, #16]
   1b69c:	2200      	movs	r2, #0
   1b69e:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b6a0:	7b42      	ldrb	r2, [r0, #13]
   1b6a2:	06d2      	lsls	r2, r2, #27
   1b6a4:	d103      	bne.n	1b6ae <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
   1b6a6:	6983      	ldr	r3, [r0, #24]
   1b6a8:	b90b      	cbnz	r3, 1b6ae <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
   1b6aa:	f000 f8b5 	bl	1b818 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1b6ae:	4629      	mov	r1, r5
   1b6b0:	4805      	ldr	r0, [pc, #20]	; (1b6c8 <z_impl_k_mutex_unlock+0x7c>)
   1b6b2:	f003 fa28 	bl	1eb06 <z_reschedule>
   1b6b6:	e7d5      	b.n	1b664 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   1b6b8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b6ba:	f385 8811 	msr	BASEPRI, r5
   1b6be:	f3bf 8f6f 	isb	sy
   1b6c2:	e7cf      	b.n	1b664 <z_impl_k_mutex_unlock+0x18>
   1b6c4:	20024d28 	.word	0x20024d28
   1b6c8:	20026591 	.word	0x20026591

0001b6cc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b6cc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b6ce:	4c08      	ldr	r4, [pc, #32]	; (1b6f0 <z_reset_time_slice+0x24>)
   1b6d0:	6823      	ldr	r3, [r4, #0]
   1b6d2:	b15b      	cbz	r3, 1b6ec <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b6d4:	f7f4 f808 	bl	f6e8 <z_clock_elapsed>
   1b6d8:	6823      	ldr	r3, [r4, #0]
   1b6da:	4a06      	ldr	r2, [pc, #24]	; (1b6f4 <z_reset_time_slice+0x28>)
   1b6dc:	4418      	add	r0, r3
   1b6de:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b6e0:	2100      	movs	r1, #0
	}
}
   1b6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1b6e6:	4618      	mov	r0, r3
   1b6e8:	f003 bb43 	b.w	1ed72 <z_set_timeout_expiry>
}
   1b6ec:	bd10      	pop	{r4, pc}
   1b6ee:	bf00      	nop
   1b6f0:	20024d64 	.word	0x20024d64
   1b6f4:	20024d28 	.word	0x20024d28

0001b6f8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6fa:	460d      	mov	r5, r1
	__asm__ volatile(
   1b6fc:	f04f 0320 	mov.w	r3, #32
   1b700:	f3ef 8411 	mrs	r4, BASEPRI
   1b704:	f383 8811 	msr	BASEPRI, r3
   1b708:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1b70c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b710:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b714:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b716:	2200      	movs	r2, #0
   1b718:	fbe1 6700 	umlal	r6, r7, r1, r0
   1b71c:	4b09      	ldr	r3, [pc, #36]	; (1b744 <k_sched_time_slice_set+0x4c>)
   1b71e:	4630      	mov	r0, r6
   1b720:	611a      	str	r2, [r3, #16]
   1b722:	4639      	mov	r1, r7
   1b724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b728:	2300      	movs	r3, #0
   1b72a:	f7f0 ff35 	bl	c598 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b72e:	4b06      	ldr	r3, [pc, #24]	; (1b748 <k_sched_time_slice_set+0x50>)
   1b730:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b732:	4b06      	ldr	r3, [pc, #24]	; (1b74c <k_sched_time_slice_set+0x54>)
   1b734:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b736:	f7ff ffc9 	bl	1b6cc <z_reset_time_slice>
	__asm__ volatile(
   1b73a:	f384 8811 	msr	BASEPRI, r4
   1b73e:	f3bf 8f6f 	isb	sy
	}
}
   1b742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b744:	20024d28 	.word	0x20024d28
   1b748:	20024d64 	.word	0x20024d64
   1b74c:	20024d60 	.word	0x20024d60

0001b750 <k_sched_lock>:
	__asm__ volatile(
   1b750:	f04f 0320 	mov.w	r3, #32
   1b754:	f3ef 8111 	mrs	r1, BASEPRI
   1b758:	f383 8811 	msr	BASEPRI, r3
   1b75c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b760:	4b04      	ldr	r3, [pc, #16]	; (1b774 <k_sched_lock+0x24>)
   1b762:	689a      	ldr	r2, [r3, #8]
   1b764:	7bd3      	ldrb	r3, [r2, #15]
   1b766:	3b01      	subs	r3, #1
   1b768:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b76a:	f381 8811 	msr	BASEPRI, r1
   1b76e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b772:	4770      	bx	lr
   1b774:	20024d28 	.word	0x20024d28

0001b778 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b778:	4b09      	ldr	r3, [pc, #36]	; (1b7a0 <z_priq_dumb_remove+0x28>)
   1b77a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b77e:	4282      	cmp	r2, r0
   1b780:	d105      	bne.n	1b78e <z_priq_dumb_remove+0x16>
   1b782:	689b      	ldr	r3, [r3, #8]
   1b784:	428b      	cmp	r3, r1
   1b786:	d102      	bne.n	1b78e <z_priq_dumb_remove+0x16>
   1b788:	7b4b      	ldrb	r3, [r1, #13]
   1b78a:	06db      	lsls	r3, r3, #27
   1b78c:	d106      	bne.n	1b79c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b78e:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b792:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b794:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b796:	2300      	movs	r3, #0
	node->prev = NULL;
   1b798:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b79c:	4770      	bx	lr
   1b79e:	bf00      	nop
   1b7a0:	20024d28 	.word	0x20024d28

0001b7a4 <update_cache>:
{
   1b7a4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b7a6:	4c0d      	ldr	r4, [pc, #52]	; (1b7dc <update_cache+0x38>)
{
   1b7a8:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b7aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b7ae:	f003 f9e9 	bl	1eb84 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1b7b2:	4605      	mov	r5, r0
   1b7b4:	b900      	cbnz	r0, 1b7b8 <update_cache+0x14>
   1b7b6:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b7b8:	68a3      	ldr	r3, [r4, #8]
   1b7ba:	b94a      	cbnz	r2, 1b7d0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1b7bc:	7b5a      	ldrb	r2, [r3, #13]
   1b7be:	06d2      	lsls	r2, r2, #27
   1b7c0:	d106      	bne.n	1b7d0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b7c2:	69aa      	ldr	r2, [r5, #24]
   1b7c4:	b922      	cbnz	r2, 1b7d0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1b7c6:	89da      	ldrh	r2, [r3, #14]
   1b7c8:	2a7f      	cmp	r2, #127	; 0x7f
   1b7ca:	d901      	bls.n	1b7d0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1b7cc:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b7ce:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   1b7d0:	429d      	cmp	r5, r3
   1b7d2:	d001      	beq.n	1b7d8 <update_cache+0x34>
			z_reset_time_slice();
   1b7d4:	f7ff ff7a 	bl	1b6cc <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   1b7d8:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b7da:	e7f8      	b.n	1b7ce <update_cache+0x2a>
   1b7dc:	20024d28 	.word	0x20024d28

0001b7e0 <k_sched_unlock>:
{
   1b7e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b7e2:	f04f 0320 	mov.w	r3, #32
   1b7e6:	f3ef 8411 	mrs	r4, BASEPRI
   1b7ea:	f383 8811 	msr	BASEPRI, r3
   1b7ee:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b7f2:	4b08      	ldr	r3, [pc, #32]	; (1b814 <k_sched_unlock+0x34>)
		update_cache(0);
   1b7f4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b7f6:	689a      	ldr	r2, [r3, #8]
   1b7f8:	7bd3      	ldrb	r3, [r2, #15]
   1b7fa:	3301      	adds	r3, #1
   1b7fc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b7fe:	f7ff ffd1 	bl	1b7a4 <update_cache>
	__asm__ volatile(
   1b802:	f384 8811 	msr	BASEPRI, r4
   1b806:	f3bf 8f6f 	isb	sy
}
   1b80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b80e:	f003 b991 	b.w	1eb34 <z_reschedule_unlocked>
   1b812:	bf00      	nop
   1b814:	20024d28 	.word	0x20024d28

0001b818 <z_add_thread_to_ready_q>:
{
   1b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b81a:	f04f 0320 	mov.w	r3, #32
   1b81e:	f3ef 8411 	mrs	r4, BASEPRI
   1b822:	f383 8811 	msr	BASEPRI, r3
   1b826:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1b82a:	4a15      	ldr	r2, [pc, #84]	; (1b880 <z_add_thread_to_ready_q+0x68>)
   1b82c:	4611      	mov	r1, r2
   1b82e:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b832:	428b      	cmp	r3, r1
   1b834:	d01d      	beq.n	1b872 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b836:	b1e3      	cbz	r3, 1b872 <z_add_thread_to_ready_q+0x5a>
   1b838:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b83a:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b83e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b842:	42af      	cmp	r7, r5
   1b844:	dd10      	ble.n	1b868 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   1b846:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b848:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b84c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b84e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b850:	7b43      	ldrb	r3, [r0, #13]
   1b852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b856:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1b858:	2000      	movs	r0, #0
   1b85a:	f7ff ffa3 	bl	1b7a4 <update_cache>
	__asm__ volatile(
   1b85e:	f384 8811 	msr	BASEPRI, r4
   1b862:	f3bf 8f6f 	isb	sy
}
   1b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b868:	42b3      	cmp	r3, r6
   1b86a:	d002      	beq.n	1b872 <z_add_thread_to_ready_q+0x5a>
   1b86c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b86e:	2b00      	cmp	r3, #0
   1b870:	d1e5      	bne.n	1b83e <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   1b872:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b874:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1b876:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1b878:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b87a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b87c:	62d0      	str	r0, [r2, #44]	; 0x2c
   1b87e:	e7e7      	b.n	1b850 <z_add_thread_to_ready_q+0x38>
   1b880:	20024d28 	.word	0x20024d28

0001b884 <z_move_thread_to_end_of_prio_q>:
{
   1b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b886:	4604      	mov	r4, r0
	__asm__ volatile(
   1b888:	f04f 0320 	mov.w	r3, #32
   1b88c:	f3ef 8511 	mrs	r5, BASEPRI
   1b890:	f383 8811 	msr	BASEPRI, r3
   1b894:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b898:	7b43      	ldrb	r3, [r0, #13]
   1b89a:	065a      	lsls	r2, r3, #25
   1b89c:	d503      	bpl.n	1b8a6 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b89e:	4601      	mov	r1, r0
   1b8a0:	4817      	ldr	r0, [pc, #92]	; (1b900 <z_move_thread_to_end_of_prio_q+0x7c>)
   1b8a2:	f7ff ff69 	bl	1b778 <z_priq_dumb_remove>
	return list->head == list;
   1b8a6:	4a17      	ldr	r2, [pc, #92]	; (1b904 <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8a8:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1b8ac:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1b8b0:	428b      	cmp	r3, r1
   1b8b2:	d01f      	beq.n	1b8f4 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8b4:	b1f3      	cbz	r3, 1b8f4 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
   1b8b6:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1b8ba:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b8be:	42b7      	cmp	r7, r6
   1b8c0:	dd13      	ble.n	1b8ea <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1b8c2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b8c4:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1b8c8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b8ca:	605c      	str	r4, [r3, #4]
   1b8cc:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1b8ce:	6890      	ldr	r0, [r2, #8]
   1b8d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b8d4:	7363      	strb	r3, [r4, #13]
   1b8d6:	1b03      	subs	r3, r0, r4
   1b8d8:	4258      	negs	r0, r3
   1b8da:	4158      	adcs	r0, r3
   1b8dc:	f7ff ff62 	bl	1b7a4 <update_cache>
	__asm__ volatile(
   1b8e0:	f385 8811 	msr	BASEPRI, r5
   1b8e4:	f3bf 8f6f 	isb	sy
}
   1b8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b8ea:	4298      	cmp	r0, r3
   1b8ec:	d002      	beq.n	1b8f4 <z_move_thread_to_end_of_prio_q+0x70>
   1b8ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8f0:	2b00      	cmp	r3, #0
   1b8f2:	d1e2      	bne.n	1b8ba <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1b8f4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1b8f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b8fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b8fc:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b8fe:	e7e5      	b.n	1b8cc <z_move_thread_to_end_of_prio_q+0x48>
   1b900:	20024d50 	.word	0x20024d50
   1b904:	20024d28 	.word	0x20024d28

0001b908 <z_time_slice>:
	if (pending_current == _current) {
   1b908:	4a15      	ldr	r2, [pc, #84]	; (1b960 <z_time_slice+0x58>)
   1b90a:	4916      	ldr	r1, [pc, #88]	; (1b964 <z_time_slice+0x5c>)
{
   1b90c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b90e:	680c      	ldr	r4, [r1, #0]
   1b910:	6893      	ldr	r3, [r2, #8]
   1b912:	42a3      	cmp	r3, r4
   1b914:	4614      	mov	r4, r2
   1b916:	d103      	bne.n	1b920 <z_time_slice+0x18>
}
   1b918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b91c:	f7ff bed6 	b.w	1b6cc <z_reset_time_slice>
	pending_current = NULL;
   1b920:	2500      	movs	r5, #0
   1b922:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1b924:	4910      	ldr	r1, [pc, #64]	; (1b968 <z_time_slice+0x60>)
   1b926:	6809      	ldr	r1, [r1, #0]
   1b928:	b1b9      	cbz	r1, 1b95a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b92a:	89d9      	ldrh	r1, [r3, #14]
   1b92c:	297f      	cmp	r1, #127	; 0x7f
   1b92e:	d814      	bhi.n	1b95a <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1b930:	490e      	ldr	r1, [pc, #56]	; (1b96c <z_time_slice+0x64>)
   1b932:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b936:	6809      	ldr	r1, [r1, #0]
   1b938:	428d      	cmp	r5, r1
   1b93a:	db0e      	blt.n	1b95a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   1b93c:	490c      	ldr	r1, [pc, #48]	; (1b970 <z_time_slice+0x68>)
   1b93e:	428b      	cmp	r3, r1
   1b940:	d00b      	beq.n	1b95a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b942:	6999      	ldr	r1, [r3, #24]
   1b944:	b949      	cbnz	r1, 1b95a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b946:	6911      	ldr	r1, [r2, #16]
   1b948:	4281      	cmp	r1, r0
   1b94a:	dc03      	bgt.n	1b954 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b94c:	4618      	mov	r0, r3
   1b94e:	f7ff ff99 	bl	1b884 <z_move_thread_to_end_of_prio_q>
   1b952:	e7e1      	b.n	1b918 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1b954:	1a09      	subs	r1, r1, r0
   1b956:	6111      	str	r1, [r2, #16]
}
   1b958:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b95a:	2300      	movs	r3, #0
   1b95c:	6123      	str	r3, [r4, #16]
   1b95e:	e7fb      	b.n	1b958 <z_time_slice+0x50>
   1b960:	20024d28 	.word	0x20024d28
   1b964:	20024d5c 	.word	0x20024d5c
   1b968:	20024d64 	.word	0x20024d64
   1b96c:	20024d60 	.word	0x20024d60
   1b970:	20020b64 	.word	0x20020b64

0001b974 <z_remove_thread_from_ready_q>:
{
   1b974:	b538      	push	{r3, r4, r5, lr}
   1b976:	4604      	mov	r4, r0
	__asm__ volatile(
   1b978:	f04f 0320 	mov.w	r3, #32
   1b97c:	f3ef 8511 	mrs	r5, BASEPRI
   1b980:	f383 8811 	msr	BASEPRI, r3
   1b984:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b988:	7b43      	ldrb	r3, [r0, #13]
   1b98a:	065a      	lsls	r2, r3, #25
   1b98c:	d507      	bpl.n	1b99e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b98e:	4601      	mov	r1, r0
   1b990:	4809      	ldr	r0, [pc, #36]	; (1b9b8 <z_remove_thread_from_ready_q+0x44>)
   1b992:	f7ff fef1 	bl	1b778 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b996:	7b63      	ldrb	r3, [r4, #13]
   1b998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b99c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b99e:	4b07      	ldr	r3, [pc, #28]	; (1b9bc <z_remove_thread_from_ready_q+0x48>)
   1b9a0:	6898      	ldr	r0, [r3, #8]
   1b9a2:	1b03      	subs	r3, r0, r4
   1b9a4:	4258      	negs	r0, r3
   1b9a6:	4158      	adcs	r0, r3
   1b9a8:	f7ff fefc 	bl	1b7a4 <update_cache>
	__asm__ volatile(
   1b9ac:	f385 8811 	msr	BASEPRI, r5
   1b9b0:	f3bf 8f6f 	isb	sy
}
   1b9b4:	bd38      	pop	{r3, r4, r5, pc}
   1b9b6:	bf00      	nop
   1b9b8:	20024d50 	.word	0x20024d50
   1b9bc:	20024d28 	.word	0x20024d28

0001b9c0 <pend>:
{
   1b9c0:	b570      	push	{r4, r5, r6, lr}
   1b9c2:	4604      	mov	r4, r0
   1b9c4:	460d      	mov	r5, r1
   1b9c6:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1b9c8:	f7ff ffd4 	bl	1b974 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1b9cc:	7b63      	ldrb	r3, [r4, #13]
   1b9ce:	f043 0302 	orr.w	r3, r3, #2
   1b9d2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b9d4:	b17d      	cbz	r5, 1b9f6 <pend+0x36>
	return list->head == list;
   1b9d6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1b9d8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b9da:	429d      	cmp	r5, r3
   1b9dc:	d029      	beq.n	1ba32 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b9de:	b343      	cbz	r3, 1ba32 <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
   1b9e0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1b9e4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b9e8:	4291      	cmp	r1, r2
   1b9ea:	dd1c      	ble.n	1ba26 <pend+0x66>
	node->prev = successor->prev;
   1b9ec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b9ee:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b9f2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b9f4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1b9f6:	1c73      	adds	r3, r6, #1
   1b9f8:	d022      	beq.n	1ba40 <pend+0x80>
   1b9fa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b9fe:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ba02:	2100      	movs	r1, #0
   1ba04:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1ba08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba0c:	fbc5 0106 	smlal	r0, r1, r5, r6
   1ba10:	2300      	movs	r3, #0
   1ba12:	f7f0 fdc1 	bl	c598 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ba16:	490b      	ldr	r1, [pc, #44]	; (1ba44 <pend+0x84>)
   1ba18:	1c42      	adds	r2, r0, #1
   1ba1a:	f104 0018 	add.w	r0, r4, #24
}
   1ba1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ba22:	f000 bb3b 	b.w	1c09c <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1ba26:	6869      	ldr	r1, [r5, #4]
   1ba28:	428b      	cmp	r3, r1
   1ba2a:	d002      	beq.n	1ba32 <pend+0x72>
   1ba2c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba2e:	2b00      	cmp	r3, #0
   1ba30:	d1d8      	bne.n	1b9e4 <pend+0x24>
	node->prev = list->tail;
   1ba32:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1ba34:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1ba36:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1ba38:	686b      	ldr	r3, [r5, #4]
   1ba3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ba3c:	606c      	str	r4, [r5, #4]
   1ba3e:	e7da      	b.n	1b9f6 <pend+0x36>
}
   1ba40:	bd70      	pop	{r4, r5, r6, pc}
   1ba42:	bf00      	nop
   1ba44:	0001eb91 	.word	0x0001eb91

0001ba48 <z_pend_curr_irqlock>:
{
   1ba48:	b570      	push	{r4, r5, r6, lr}
   1ba4a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1ba4c:	4d0e      	ldr	r5, [pc, #56]	; (1ba88 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1ba4e:	4c0f      	ldr	r4, [pc, #60]	; (1ba8c <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   1ba50:	68a8      	ldr	r0, [r5, #8]
   1ba52:	f7ff ffb5 	bl	1b9c0 <pend>
	pending_current = _current;
   1ba56:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   1ba58:	4630      	mov	r0, r6
	pending_current = _current;
   1ba5a:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   1ba5c:	f003 f818 	bl	1ea90 <z_swap_irqlock>
	__asm__ volatile(
   1ba60:	f04f 0220 	mov.w	r2, #32
   1ba64:	f3ef 8311 	mrs	r3, BASEPRI
   1ba68:	f382 8811 	msr	BASEPRI, r2
   1ba6c:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1ba70:	6822      	ldr	r2, [r4, #0]
   1ba72:	68a9      	ldr	r1, [r5, #8]
   1ba74:	4291      	cmp	r1, r2
			pending_current = NULL;
   1ba76:	bf04      	itt	eq
   1ba78:	2200      	moveq	r2, #0
   1ba7a:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1ba7c:	f383 8811 	msr	BASEPRI, r3
   1ba80:	f3bf 8f6f 	isb	sy
}
   1ba84:	bd70      	pop	{r4, r5, r6, pc}
   1ba86:	bf00      	nop
   1ba88:	20024d28 	.word	0x20024d28
   1ba8c:	20024d5c 	.word	0x20024d5c

0001ba90 <z_pend_curr>:
{
   1ba90:	b510      	push	{r4, lr}
   1ba92:	460c      	mov	r4, r1
   1ba94:	4611      	mov	r1, r2
	pending_current = _current;
   1ba96:	4a06      	ldr	r2, [pc, #24]	; (1bab0 <z_pend_curr+0x20>)
   1ba98:	6890      	ldr	r0, [r2, #8]
   1ba9a:	4a06      	ldr	r2, [pc, #24]	; (1bab4 <z_pend_curr+0x24>)
   1ba9c:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1ba9e:	461a      	mov	r2, r3
   1baa0:	f7ff ff8e 	bl	1b9c0 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   1baa4:	4620      	mov	r0, r4
}
   1baa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1baaa:	f002 bff1 	b.w	1ea90 <z_swap_irqlock>
   1baae:	bf00      	nop
   1bab0:	20024d28 	.word	0x20024d28
   1bab4:	20024d5c 	.word	0x20024d5c

0001bab8 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1baba:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1babc:	f003 f973 	bl	1eda6 <z_tick_get_32>
   1bac0:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1bac2:	f04f 0320 	mov.w	r3, #32
   1bac6:	f3ef 8711 	mrs	r7, BASEPRI
   1baca:	f383 8811 	msr	BASEPRI, r3
   1bace:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1bad2:	4d0d      	ldr	r5, [pc, #52]	; (1bb08 <z_tick_sleep.part.19+0x50>)
   1bad4:	4b0d      	ldr	r3, [pc, #52]	; (1bb0c <z_tick_sleep.part.19+0x54>)
   1bad6:	68a8      	ldr	r0, [r5, #8]
   1bad8:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1bada:	f7ff ff4b 	bl	1b974 <z_remove_thread_from_ready_q>
   1bade:	68a8      	ldr	r0, [r5, #8]
   1bae0:	490b      	ldr	r1, [pc, #44]	; (1bb10 <z_tick_sleep.part.19+0x58>)
   1bae2:	4632      	mov	r2, r6
   1bae4:	3018      	adds	r0, #24
   1bae6:	f000 fad9 	bl	1c09c <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1baea:	68aa      	ldr	r2, [r5, #8]
   1baec:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1baee:	7b53      	ldrb	r3, [r2, #13]
   1baf0:	f043 0310 	orr.w	r3, r3, #16
   1baf4:	7353      	strb	r3, [r2, #13]
   1baf6:	f002 ffcb 	bl	1ea90 <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1bafa:	f003 f954 	bl	1eda6 <z_tick_get_32>
   1bafe:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1bb00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1bb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb06:	bf00      	nop
   1bb08:	20024d28 	.word	0x20024d28
   1bb0c:	20024d5c 	.word	0x20024d5c
   1bb10:	0001eb91 	.word	0x0001eb91

0001bb14 <z_set_prio>:
{
   1bb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb18:	4604      	mov	r4, r0
   1bb1a:	f04f 0320 	mov.w	r3, #32
   1bb1e:	f3ef 8911 	mrs	r9, BASEPRI
   1bb22:	f383 8811 	msr	BASEPRI, r3
   1bb26:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   1bb2a:	f002 ffa8 	bl	1ea7e <z_is_thread_ready>
		if (need_sched) {
   1bb2e:	b24e      	sxtb	r6, r1
   1bb30:	4680      	mov	r8, r0
   1bb32:	b360      	cbz	r0, 1bb8e <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1bb34:	4d17      	ldr	r5, [pc, #92]	; (1bb94 <z_set_prio+0x80>)
   1bb36:	4621      	mov	r1, r4
   1bb38:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1bb3c:	4638      	mov	r0, r7
   1bb3e:	f7ff fe1b 	bl	1b778 <z_priq_dumb_remove>
	return list->head == list;
   1bb42:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   1bb44:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb46:	42bb      	cmp	r3, r7
   1bb48:	462a      	mov	r2, r5
   1bb4a:	d019      	beq.n	1bb80 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bb4c:	b1c3      	cbz	r3, 1bb80 <z_set_prio+0x6c>
   1bb4e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1bb50:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1bb54:	42b0      	cmp	r0, r6
   1bb56:	dd0e      	ble.n	1bb76 <z_set_prio+0x62>
	node->prev = successor->prev;
   1bb58:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bb5a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1bb5e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bb60:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1bb62:	2001      	movs	r0, #1
   1bb64:	f7ff fe1e 	bl	1b7a4 <update_cache>
	__asm__ volatile(
   1bb68:	f389 8811 	msr	BASEPRI, r9
   1bb6c:	f3bf 8f6f 	isb	sy
}
   1bb70:	4640      	mov	r0, r8
   1bb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   1bb76:	4299      	cmp	r1, r3
   1bb78:	d002      	beq.n	1bb80 <z_set_prio+0x6c>
   1bb7a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bb7c:	2b00      	cmp	r3, #0
   1bb7e:	d1e7      	bne.n	1bb50 <z_set_prio+0x3c>
	node->prev = list->tail;
   1bb80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1bb82:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   1bb84:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1bb86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1bb88:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bb8a:	62d4      	str	r4, [r2, #44]	; 0x2c
   1bb8c:	e7e9      	b.n	1bb62 <z_set_prio+0x4e>
			thread->base.prio = prio;
   1bb8e:	73a6      	strb	r6, [r4, #14]
   1bb90:	e7ea      	b.n	1bb68 <z_set_prio+0x54>
   1bb92:	bf00      	nop
   1bb94:	20024d28 	.word	0x20024d28

0001bb98 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1bb98:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1bb9a:	4b04      	ldr	r3, [pc, #16]	; (1bbac <z_sched_init+0x14>)
   1bb9c:	4608      	mov	r0, r1
   1bb9e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1bba2:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1bba6:	f7ff bda7 	b.w	1b6f8 <k_sched_time_slice_set>
   1bbaa:	bf00      	nop
   1bbac:	20024d28 	.word	0x20024d28

0001bbb0 <z_impl_k_yield>:
{
   1bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1bbb2:	4c23      	ldr	r4, [pc, #140]	; (1bc40 <z_impl_k_yield+0x90>)
   1bbb4:	4b23      	ldr	r3, [pc, #140]	; (1bc44 <z_impl_k_yield+0x94>)
   1bbb6:	68a2      	ldr	r2, [r4, #8]
   1bbb8:	429a      	cmp	r2, r3
   1bbba:	d029      	beq.n	1bc10 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1bbbc:	f04f 0320 	mov.w	r3, #32
   1bbc0:	f3ef 8611 	mrs	r6, BASEPRI
   1bbc4:	f383 8811 	msr	BASEPRI, r3
   1bbc8:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1bbcc:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1bbd0:	68a1      	ldr	r1, [r4, #8]
   1bbd2:	4628      	mov	r0, r5
   1bbd4:	f7ff fdd0 	bl	1b778 <z_priq_dumb_remove>
	return list->head == list;
   1bbd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1bbda:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbdc:	42aa      	cmp	r2, r5
   1bbde:	d028      	beq.n	1bc32 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bbe0:	b33a      	cbz	r2, 1bc32 <z_impl_k_yield+0x82>
   1bbe2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1bbe4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1bbe8:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1bbec:	428f      	cmp	r7, r1
   1bbee:	dd1b      	ble.n	1bc28 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1bbf0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bbf2:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1bbf6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1bbf8:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1bbfa:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1bbfc:	2001      	movs	r0, #1
   1bbfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1bc02:	735a      	strb	r2, [r3, #13]
   1bc04:	f7ff fdce 	bl	1b7a4 <update_cache>
	__asm__ volatile(
   1bc08:	f386 8811 	msr	BASEPRI, r6
   1bc0c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1bc10:	f04f 0320 	mov.w	r3, #32
   1bc14:	f3ef 8011 	mrs	r0, BASEPRI
   1bc18:	f383 8811 	msr	BASEPRI, r3
   1bc1c:	f3bf 8f6f 	isb	sy
}
   1bc20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   1bc24:	f002 bf34 	b.w	1ea90 <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
   1bc28:	4282      	cmp	r2, r0
   1bc2a:	d002      	beq.n	1bc32 <z_impl_k_yield+0x82>
   1bc2c:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc2e:	2a00      	cmp	r2, #0
   1bc30:	d1da      	bne.n	1bbe8 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1bc32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1bc34:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1bc36:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1bc38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1bc3a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bc3c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bc3e:	e7dc      	b.n	1bbfa <z_impl_k_yield+0x4a>
   1bc40:	20024d28 	.word	0x20024d28
   1bc44:	20020b64 	.word	0x20020b64

0001bc48 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1bc48:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   1bc4a:	1c43      	adds	r3, r0, #1
{
   1bc4c:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1bc4e:	d105      	bne.n	1bc5c <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1bc50:	4b10      	ldr	r3, [pc, #64]	; (1bc94 <z_impl_k_sleep+0x4c>)
   1bc52:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1bc54:	f000 f936 	bl	1bec4 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1bc58:	4620      	mov	r0, r4
   1bc5a:	bd38      	pop	{r3, r4, r5, pc}
   1bc5c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1bc60:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bc64:	2100      	movs	r1, #0
   1bc66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc6a:	fbe5 0104 	umlal	r0, r1, r5, r4
   1bc6e:	2300      	movs	r3, #0
   1bc70:	f7f0 fc92 	bl	c598 <__aeabi_uldivmod>
	if (ticks == 0) {
   1bc74:	4604      	mov	r4, r0
   1bc76:	b948      	cbnz	r0, 1bc8c <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1bc78:	f7ff ff9a 	bl	1bbb0 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1bc7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bc80:	fb84 0100 	smull	r0, r1, r4, r0
   1bc84:	0bc4      	lsrs	r4, r0, #15
   1bc86:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1bc8a:	e7e5      	b.n	1bc58 <z_impl_k_sleep+0x10>
   1bc8c:	f7ff ff14 	bl	1bab8 <z_tick_sleep.part.19>
   1bc90:	4604      	mov	r4, r0
   1bc92:	e7f3      	b.n	1bc7c <z_impl_k_sleep+0x34>
   1bc94:	20024d28 	.word	0x20024d28

0001bc98 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1bc98:	4b01      	ldr	r3, [pc, #4]	; (1bca0 <z_impl_k_current_get+0x8>)
   1bc9a:	6898      	ldr	r0, [r3, #8]
   1bc9c:	4770      	bx	lr
   1bc9e:	bf00      	nop
   1bca0:	20024d28 	.word	0x20024d28

0001bca4 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1bca4:	b570      	push	{r4, r5, r6, lr}
   1bca6:	4604      	mov	r4, r0
   1bca8:	f04f 0320 	mov.w	r3, #32
   1bcac:	f3ef 8611 	mrs	r6, BASEPRI
   1bcb0:	f383 8811 	msr	BASEPRI, r3
   1bcb4:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1bcb8:	f002 ff9b 	bl	1ebf2 <z_unpend_first_thread>
	if (thread != NULL) {
   1bcbc:	4605      	mov	r5, r0
   1bcbe:	b170      	cbz	r0, 1bcde <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bcc0:	7b43      	ldrb	r3, [r0, #13]
   1bcc2:	06db      	lsls	r3, r3, #27
   1bcc4:	d103      	bne.n	1bcce <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1bcc6:	6983      	ldr	r3, [r0, #24]
   1bcc8:	b90b      	cbnz	r3, 1bcce <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1bcca:	f7ff fda5 	bl	1b818 <z_add_thread_to_ready_q>
   1bcce:	2300      	movs	r3, #0
   1bcd0:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1bcd2:	4631      	mov	r1, r6
}
   1bcd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1bcd8:	4807      	ldr	r0, [pc, #28]	; (1bcf8 <z_impl_k_sem_give+0x54>)
   1bcda:	f002 bf14 	b.w	1eb06 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bcde:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1bce2:	429a      	cmp	r2, r3
   1bce4:	bf18      	it	ne
   1bce6:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bce8:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bcea:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bcec:	f104 0010 	add.w	r0, r4, #16
   1bcf0:	f003 f990 	bl	1f014 <z_handle_obj_poll_events>
   1bcf4:	e7ed      	b.n	1bcd2 <z_impl_k_sem_give+0x2e>
   1bcf6:	bf00      	nop
   1bcf8:	20026591 	.word	0x20026591

0001bcfc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1bcfc:	b410      	push	{r4}
   1bcfe:	4602      	mov	r2, r0
   1bd00:	460b      	mov	r3, r1
   1bd02:	f04f 0020 	mov.w	r0, #32
   1bd06:	f3ef 8111 	mrs	r1, BASEPRI
   1bd0a:	f380 8811 	msr	BASEPRI, r0
   1bd0e:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1bd12:	6894      	ldr	r4, [r2, #8]
   1bd14:	b14c      	cbz	r4, 1bd2a <z_impl_k_sem_take+0x2e>
		sem->count--;
   1bd16:	3c01      	subs	r4, #1
   1bd18:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1bd1a:	f381 8811 	msr	BASEPRI, r1
   1bd1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1bd22:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1bd24:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bd28:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1bd2a:	b933      	cbnz	r3, 1bd3a <z_impl_k_sem_take+0x3e>
   1bd2c:	f381 8811 	msr	BASEPRI, r1
   1bd30:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1bd34:	f06f 000f 	mvn.w	r0, #15
   1bd38:	e7f4      	b.n	1bd24 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bd3a:	4802      	ldr	r0, [pc, #8]	; (1bd44 <z_impl_k_sem_take+0x48>)
}
   1bd3c:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bd40:	f7ff bea6 	b.w	1ba90 <z_pend_curr>
   1bd44:	20026591 	.word	0x20026591

0001bd48 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1bd48:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1bd4a:	4c08      	ldr	r4, [pc, #32]	; (1bd6c <k_sys_work_q_init+0x24>)
   1bd4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1bd54:	4906      	ldr	r1, [pc, #24]	; (1bd70 <k_sys_work_q_init+0x28>)
   1bd56:	4620      	mov	r0, r4
   1bd58:	f000 f942 	bl	1bfe0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1bd5c:	4905      	ldr	r1, [pc, #20]	; (1bd74 <k_sys_work_q_init+0x2c>)
   1bd5e:	f104 0010 	add.w	r0, r4, #16
   1bd62:	f002 ff9b 	bl	1ec9c <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1bd66:	2000      	movs	r0, #0
   1bd68:	bd10      	pop	{r4, pc}
   1bd6a:	bf00      	nop
   1bd6c:	20024d68 	.word	0x20024d68
   1bd70:	20028af8 	.word	0x20028af8
   1bd74:	00020f08 	.word	0x00020f08

0001bd78 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   1bd78:	4b09      	ldr	r3, [pc, #36]	; (1bda0 <z_check_stack_sentinel+0x28>)
   1bd7a:	689b      	ldr	r3, [r3, #8]
   1bd7c:	7b5a      	ldrb	r2, [r3, #13]
   1bd7e:	07d2      	lsls	r2, r2, #31
   1bd80:	d40d      	bmi.n	1bd9e <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   1bd82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   1bd84:	681a      	ldr	r2, [r3, #0]
   1bd86:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   1bd8a:	d008      	beq.n	1bd9e <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   1bd8c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   1bd90:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   1bd92:	4040      	eors	r0, r0
   1bd94:	f380 8811 	msr	BASEPRI, r0
   1bd98:	f04f 0002 	mov.w	r0, #2
   1bd9c:	df02      	svc	2
	}
}
   1bd9e:	4770      	bx	lr
   1bda0:	20024d28 	.word	0x20024d28

0001bda4 <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1bda4:	b510      	push	{r4, lr}
   1bda6:	4602      	mov	r2, r0
	__asm__ volatile(
   1bda8:	f04f 0320 	mov.w	r3, #32
   1bdac:	f3ef 8411 	mrs	r4, BASEPRI
   1bdb0:	f383 8811 	msr	BASEPRI, r3
   1bdb4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1bdb8:	7b43      	ldrb	r3, [r0, #13]
   1bdba:	0759      	lsls	r1, r3, #29
   1bdbc:	d404      	bmi.n	1bdc8 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   1bdbe:	f384 8811 	msr	BASEPRI, r4
   1bdc2:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1bdc6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bdc8:	f023 0304 	bic.w	r3, r3, #4
   1bdcc:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1bdce:	f002 ff5c 	bl	1ec8a <z_is_thread_ready>
   1bdd2:	b110      	cbz	r0, 1bdda <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1bdd4:	4610      	mov	r0, r2
   1bdd6:	f7ff fd1f 	bl	1b818 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1bdda:	4621      	mov	r1, r4
}
   1bddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1bde0:	4801      	ldr	r0, [pc, #4]	; (1bde8 <z_impl_k_thread_start+0x44>)
   1bde2:	f002 be90 	b.w	1eb06 <z_reschedule>
   1bde6:	bf00      	nop
   1bde8:	20026591 	.word	0x20026591

0001bdec <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1bdec:	b530      	push	{r4, r5, lr}
   1bdee:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bdf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1bdf2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bdf4:	9504      	str	r5, [sp, #16]
   1bdf6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1bdf8:	9503      	str	r5, [sp, #12]
   1bdfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1bdfc:	9502      	str	r5, [sp, #8]
   1bdfe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1be00:	9501      	str	r5, [sp, #4]
   1be02:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1be04:	9500      	str	r5, [sp, #0]
   1be06:	f7f3 fd6f 	bl	f8e8 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1be0a:	4b03      	ldr	r3, [pc, #12]	; (1be18 <z_setup_new_thread+0x2c>)
   1be0c:	689b      	ldr	r3, [r3, #8]
   1be0e:	b103      	cbz	r3, 1be12 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1be10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1be12:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1be14:	b007      	add	sp, #28
   1be16:	bd30      	pop	{r4, r5, pc}
   1be18:	20024d28 	.word	0x20024d28

0001be1c <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1be1c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be1e:	2600      	movs	r6, #0
{
   1be20:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be22:	9605      	str	r6, [sp, #20]
   1be24:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1be26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be28:	9604      	str	r6, [sp, #16]
   1be2a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   1be2c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be2e:	9603      	str	r6, [sp, #12]
   1be30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1be32:	9602      	str	r6, [sp, #8]
   1be34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1be36:	9601      	str	r6, [sp, #4]
   1be38:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1be3a:	9600      	str	r6, [sp, #0]
   1be3c:	f7ff ffd6 	bl	1bdec <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1be40:	1c6b      	adds	r3, r5, #1
   1be42:	d003      	beq.n	1be4c <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1be44:	b92d      	cbnz	r5, 1be52 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1be46:	4620      	mov	r0, r4
   1be48:	f7ff ffac 	bl	1bda4 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1be4c:	4620      	mov	r0, r4
   1be4e:	b006      	add	sp, #24
   1be50:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1be52:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1be56:	f240 30e7 	movw	r0, #999	; 0x3e7
   1be5a:	2100      	movs	r1, #0
   1be5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1be60:	2300      	movs	r3, #0
   1be62:	fbe6 0105 	umlal	r0, r1, r6, r5
   1be66:	f7f0 fb97 	bl	c598 <__aeabi_uldivmod>
   1be6a:	4903      	ldr	r1, [pc, #12]	; (1be78 <z_impl_k_thread_create+0x5c>)
   1be6c:	1c42      	adds	r2, r0, #1
   1be6e:	f104 0018 	add.w	r0, r4, #24
   1be72:	f000 f913 	bl	1c09c <z_add_timeout>
   1be76:	e7e9      	b.n	1be4c <z_impl_k_thread_create+0x30>
   1be78:	0001eb91 	.word	0x0001eb91

0001be7c <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
   1be7c:	b510      	push	{r4, lr}
   1be7e:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   1be80:	f002 ff03 	bl	1ec8a <z_is_thread_ready>
   1be84:	b110      	cbz	r0, 1be8c <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   1be86:	4620      	mov	r0, r4
   1be88:	f7ff fd74 	bl	1b974 <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1be8c:	f104 0018 	add.w	r0, r4, #24
   1be90:	f002 ff49 	bl	1ed26 <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1be94:	7b63      	ldrb	r3, [r4, #13]
   1be96:	f043 0310 	orr.w	r3, r3, #16
   1be9a:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
   1be9c:	4b08      	ldr	r3, [pc, #32]	; (1bec0 <z_thread_single_suspend+0x44>)
   1be9e:	689b      	ldr	r3, [r3, #8]
   1bea0:	42a3      	cmp	r3, r4
   1bea2:	d10b      	bne.n	1bebc <z_thread_single_suspend+0x40>
	__asm__ volatile(
   1bea4:	f04f 0320 	mov.w	r3, #32
   1bea8:	f3ef 8011 	mrs	r0, BASEPRI
   1beac:	f383 8811 	msr	BASEPRI, r3
   1beb0:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1beb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1beb8:	f002 be30 	b.w	1eb1c <z_reschedule_irqlock>
   1bebc:	bd10      	pop	{r4, pc}
   1bebe:	bf00      	nop
   1bec0:	20024d28 	.word	0x20024d28

0001bec4 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1bec4:	b538      	push	{r3, r4, r5, lr}
   1bec6:	4605      	mov	r5, r0
   1bec8:	f04f 0320 	mov.w	r3, #32
   1becc:	f3ef 8411 	mrs	r4, BASEPRI
   1bed0:	f383 8811 	msr	BASEPRI, r3
   1bed4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1bed8:	f7ff ffd0 	bl	1be7c <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   1bedc:	4b07      	ldr	r3, [pc, #28]	; (1befc <z_impl_k_thread_suspend+0x38>)
   1bede:	689b      	ldr	r3, [r3, #8]
   1bee0:	42ab      	cmp	r3, r5
   1bee2:	d105      	bne.n	1bef0 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1bee4:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1bee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1beea:	4805      	ldr	r0, [pc, #20]	; (1bf00 <z_impl_k_thread_suspend+0x3c>)
   1beec:	f002 be0b 	b.w	1eb06 <z_reschedule>
	__asm__ volatile(
   1bef0:	f384 8811 	msr	BASEPRI, r4
   1bef4:	f3bf 8f6f 	isb	sy
}
   1bef8:	bd38      	pop	{r3, r4, r5, pc}
   1befa:	bf00      	nop
   1befc:	20024d28 	.word	0x20024d28
   1bf00:	20026591 	.word	0x20026591

0001bf04 <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   1bf04:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bf06:	f04f 0320 	mov.w	r3, #32
   1bf0a:	f3ef 8411 	mrs	r4, BASEPRI
   1bf0e:	f383 8811 	msr	BASEPRI, r3
   1bf12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   1bf16:	f002 fed8 	bl	1ecca <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   1bf1a:	4621      	mov	r1, r4
}
   1bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1bf20:	4801      	ldr	r0, [pc, #4]	; (1bf28 <z_impl_k_thread_resume+0x24>)
   1bf22:	f002 bdf0 	b.w	1eb06 <z_reschedule>
   1bf26:	bf00      	nop
   1bf28:	20026591 	.word	0x20026591

0001bf2c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1bf30:	4e28      	ldr	r6, [pc, #160]	; (1bfd4 <z_init_static_threads+0xa8>)
   1bf32:	4d29      	ldr	r5, [pc, #164]	; (1bfd8 <z_init_static_threads+0xac>)
   1bf34:	46b0      	mov	r8, r6
{
   1bf36:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1bf38:	42b5      	cmp	r5, r6
   1bf3a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1bf3e:	d310      	bcc.n	1bf62 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1bf40:	f7ff fc06 	bl	1b750 <k_sched_lock>
   1bf44:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1bf48:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bf4c:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1bf4e:	4c22      	ldr	r4, [pc, #136]	; (1bfd8 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1bf50:	f8df a088 	ldr.w	sl, [pc, #136]	; 1bfdc <z_init_static_threads+0xb0>
   1bf54:	4544      	cmp	r4, r8
   1bf56:	d321      	bcc.n	1bf9c <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1bf58:	b007      	add	sp, #28
   1bf5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1bf5e:	f7ff bc3f 	b.w	1b7e0 <k_sched_unlock>
		z_setup_new_thread(
   1bf62:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1bf66:	9305      	str	r3, [sp, #20]
   1bf68:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1bf6c:	9304      	str	r3, [sp, #16]
   1bf6e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1bf72:	9303      	str	r3, [sp, #12]
   1bf74:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1bf78:	9302      	str	r3, [sp, #8]
   1bf7a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1bf7e:	9301      	str	r3, [sp, #4]
   1bf80:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1bf84:	9300      	str	r3, [sp, #0]
   1bf86:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1bf8a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1bf8e:	f7ff ff2d 	bl	1bdec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1bf92:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1bf96:	64dd      	str	r5, [r3, #76]	; 0x4c
   1bf98:	4625      	mov	r5, r4
   1bf9a:	e7cd      	b.n	1bf38 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1bf9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1bf9e:	1c4b      	adds	r3, r1, #1
   1bfa0:	d004      	beq.n	1bfac <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1bfa2:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1bfa4:	b921      	cbnz	r1, 1bfb0 <z_init_static_threads+0x84>
   1bfa6:	4628      	mov	r0, r5
   1bfa8:	f7ff fefc 	bl	1bda4 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1bfac:	3430      	adds	r4, #48	; 0x30
   1bfae:	e7d1      	b.n	1bf54 <z_init_static_threads+0x28>
   1bfb0:	46b3      	mov	fp, r6
   1bfb2:	46bc      	mov	ip, r7
   1bfb4:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1bfb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bfbc:	2300      	movs	r3, #0
   1bfbe:	4658      	mov	r0, fp
   1bfc0:	4661      	mov	r1, ip
   1bfc2:	f7f0 fae9 	bl	c598 <__aeabi_uldivmod>
   1bfc6:	4651      	mov	r1, sl
   1bfc8:	1c42      	adds	r2, r0, #1
   1bfca:	f105 0018 	add.w	r0, r5, #24
   1bfce:	f000 f865 	bl	1c09c <z_add_timeout>
   1bfd2:	e7eb      	b.n	1bfac <z_init_static_threads+0x80>
   1bfd4:	2002c650 	.word	0x2002c650
   1bfd8:	2002c650 	.word	0x2002c650
   1bfdc:	0001eb91 	.word	0x0001eb91

0001bfe0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1bfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfe4:	4605      	mov	r5, r0
   1bfe6:	b086      	sub	sp, #24
   1bfe8:	460e      	mov	r6, r1
   1bfea:	4617      	mov	r7, r2
   1bfec:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1bfee:	f002 fcd4 	bl	1e99a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1bff2:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bff6:	2000      	movs	r0, #0
   1bff8:	4b09      	ldr	r3, [pc, #36]	; (1c020 <k_work_q_start+0x40>)
   1bffa:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1bffe:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1c002:	e9cd 5000 	strd	r5, r0, [sp]
   1c006:	463a      	mov	r2, r7
   1c008:	4631      	mov	r1, r6
   1c00a:	4620      	mov	r0, r4
   1c00c:	f7ff ff06 	bl	1be1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1c010:	4620      	mov	r0, r4
   1c012:	4904      	ldr	r1, [pc, #16]	; (1c024 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1c014:	b006      	add	sp, #24
   1c016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c01a:	f002 be3f 	b.w	1ec9c <z_impl_k_thread_name_set>
   1c01e:	bf00      	nop
   1c020:	0001c787 	.word	0x0001c787
   1c024:	00020f11 	.word	0x00020f11

0001c028 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1c028:	4b03      	ldr	r3, [pc, #12]	; (1c038 <elapsed+0x10>)
   1c02a:	681b      	ldr	r3, [r3, #0]
   1c02c:	b90b      	cbnz	r3, 1c032 <elapsed+0xa>
   1c02e:	f7f3 bb5b 	b.w	f6e8 <z_clock_elapsed>
}
   1c032:	2000      	movs	r0, #0
   1c034:	4770      	bx	lr
   1c036:	bf00      	nop
   1c038:	20024e28 	.word	0x20024e28

0001c03c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c03c:	6803      	ldr	r3, [r0, #0]
   1c03e:	b140      	cbz	r0, 1c052 <remove_timeout+0x16>
   1c040:	4a07      	ldr	r2, [pc, #28]	; (1c060 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1c042:	6852      	ldr	r2, [r2, #4]
   1c044:	4290      	cmp	r0, r2
   1c046:	d004      	beq.n	1c052 <remove_timeout+0x16>
	if (next(t) != NULL) {
   1c048:	b11b      	cbz	r3, 1c052 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1c04a:	689a      	ldr	r2, [r3, #8]
   1c04c:	6881      	ldr	r1, [r0, #8]
   1c04e:	440a      	add	r2, r1
   1c050:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1c052:	6842      	ldr	r2, [r0, #4]
   1c054:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c056:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c058:	2300      	movs	r3, #0
	node->prev = NULL;
   1c05a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c05e:	4770      	bx	lr
   1c060:	2002c564 	.word	0x2002c564

0001c064 <next_timeout>:
	return list->head == list;
   1c064:	4b0b      	ldr	r3, [pc, #44]	; (1c094 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1c066:	b510      	push	{r4, lr}
   1c068:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c06a:	429c      	cmp	r4, r3
   1c06c:	bf08      	it	eq
   1c06e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1c070:	f7ff ffda 	bl	1c028 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1c074:	b154      	cbz	r4, 1c08c <next_timeout+0x28>
   1c076:	68a3      	ldr	r3, [r4, #8]
   1c078:	1a18      	subs	r0, r3, r0
   1c07a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c07e:	4b06      	ldr	r3, [pc, #24]	; (1c098 <next_timeout+0x34>)
   1c080:	691b      	ldr	r3, [r3, #16]
   1c082:	b113      	cbz	r3, 1c08a <next_timeout+0x26>
   1c084:	4298      	cmp	r0, r3
   1c086:	bfa8      	it	ge
   1c088:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c08a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1c08c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c090:	e7f5      	b.n	1c07e <next_timeout+0x1a>
   1c092:	bf00      	nop
   1c094:	2002c564 	.word	0x2002c564
   1c098:	20024d28 	.word	0x20024d28

0001c09c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1c09c:	b570      	push	{r4, r5, r6, lr}
   1c09e:	4604      	mov	r4, r0
   1c0a0:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c0a2:	60c1      	str	r1, [r0, #12]
   1c0a4:	f04f 0320 	mov.w	r3, #32
   1c0a8:	f3ef 8511 	mrs	r5, BASEPRI
   1c0ac:	f383 8811 	msr	BASEPRI, r3
   1c0b0:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1c0b4:	f7ff ffb8 	bl	1c028 <elapsed>
   1c0b8:	2e01      	cmp	r6, #1
   1c0ba:	bfac      	ite	ge
   1c0bc:	1980      	addge	r0, r0, r6
   1c0be:	3001      	addlt	r0, #1
	return list->head == list;
   1c0c0:	4b16      	ldr	r3, [pc, #88]	; (1c11c <z_add_timeout+0x80>)
   1c0c2:	60a0      	str	r0, [r4, #8]
   1c0c4:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c0c6:	429a      	cmp	r2, r3
   1c0c8:	d001      	beq.n	1c0ce <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c0ca:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1c0cc:	b932      	cbnz	r2, 1c0dc <z_add_timeout+0x40>
	node->prev = list->tail;
   1c0ce:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1c0d0:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1c0d2:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1c0d4:	685a      	ldr	r2, [r3, #4]
   1c0d6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c0d8:	605c      	str	r4, [r3, #4]
   1c0da:	e00a      	b.n	1c0f2 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1c0dc:	6890      	ldr	r0, [r2, #8]
   1c0de:	68a1      	ldr	r1, [r4, #8]
   1c0e0:	4288      	cmp	r0, r1
   1c0e2:	dd15      	ble.n	1c110 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1c0e4:	1a41      	subs	r1, r0, r1
   1c0e6:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1c0e8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1c0ea:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1c0ee:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1c0f0:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1c0f2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c0f4:	429a      	cmp	r2, r3
   1c0f6:	d006      	beq.n	1c106 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c0f8:	4294      	cmp	r4, r2
   1c0fa:	d104      	bne.n	1c106 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1c0fc:	f7ff ffb2 	bl	1c064 <next_timeout>
   1c100:	2100      	movs	r1, #0
   1c102:	f7f3 fa9b 	bl	f63c <z_clock_set_timeout>
	__asm__ volatile(
   1c106:	f385 8811 	msr	BASEPRI, r5
   1c10a:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c10e:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1c110:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1c112:	4296      	cmp	r6, r2
   1c114:	60a1      	str	r1, [r4, #8]
   1c116:	d0da      	beq.n	1c0ce <z_add_timeout+0x32>
   1c118:	6812      	ldr	r2, [r2, #0]
   1c11a:	e7d7      	b.n	1c0cc <z_add_timeout+0x30>
   1c11c:	2002c564 	.word	0x2002c564

0001c120 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1c120:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1c124:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c126:	f7ff fbef 	bl	1b908 <z_time_slice>
	__asm__ volatile(
   1c12a:	f04f 0320 	mov.w	r3, #32
   1c12e:	f3ef 8511 	mrs	r5, BASEPRI
   1c132:	f383 8811 	msr	BASEPRI, r3
   1c136:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c13a:	4f21      	ldr	r7, [pc, #132]	; (1c1c0 <z_clock_announce+0xa0>)
   1c13c:	4e21      	ldr	r6, [pc, #132]	; (1c1c4 <z_clock_announce+0xa4>)
   1c13e:	46b8      	mov	r8, r7
	return list->head == list;
   1c140:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1c1c8 <z_clock_announce+0xa8>
   1c144:	6034      	str	r4, [r6, #0]
   1c146:	f8d9 4000 	ldr.w	r4, [r9]
   1c14a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c14c:	454c      	cmp	r4, r9
   1c14e:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1c152:	d005      	beq.n	1c160 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c154:	b124      	cbz	r4, 1c160 <z_clock_announce+0x40>
   1c156:	68a3      	ldr	r3, [r4, #8]
   1c158:	4293      	cmp	r3, r2
   1c15a:	dd14      	ble.n	1c186 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c15c:	1a9b      	subs	r3, r3, r2
   1c15e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1c160:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c162:	eb1b 0002 	adds.w	r0, fp, r2
   1c166:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1c16a:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1c16e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1c170:	f7ff ff78 	bl	1c064 <next_timeout>
   1c174:	4621      	mov	r1, r4
   1c176:	f7f3 fa61 	bl	f63c <z_clock_set_timeout>
	__asm__ volatile(
   1c17a:	f385 8811 	msr	BASEPRI, r5
   1c17e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c182:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1c186:	eb1b 0003 	adds.w	r0, fp, r3
   1c18a:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1c18e:	1ad3      	subs	r3, r2, r3
   1c190:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1c192:	2300      	movs	r3, #0
		curr_tick += dt;
   1c194:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1c198:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1c19a:	4620      	mov	r0, r4
   1c19c:	f7ff ff4e 	bl	1c03c <remove_timeout>
   1c1a0:	f385 8811 	msr	BASEPRI, r5
   1c1a4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c1a8:	68e3      	ldr	r3, [r4, #12]
   1c1aa:	4798      	blx	r3
	__asm__ volatile(
   1c1ac:	f04f 0320 	mov.w	r3, #32
   1c1b0:	f3ef 8511 	mrs	r5, BASEPRI
   1c1b4:	f383 8811 	msr	BASEPRI, r3
   1c1b8:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c1bc:	e7c3      	b.n	1c146 <z_clock_announce+0x26>
   1c1be:	bf00      	nop
   1c1c0:	20020108 	.word	0x20020108
   1c1c4:	20024e28 	.word	0x20024e28
   1c1c8:	2002c564 	.word	0x2002c564

0001c1cc <z_tick_get>:

s64_t z_tick_get(void)
{
   1c1cc:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1c1d0:	f04f 0320 	mov.w	r3, #32
   1c1d4:	f3ef 8411 	mrs	r4, BASEPRI
   1c1d8:	f383 8811 	msr	BASEPRI, r3
   1c1dc:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1c1e0:	f7f3 fa82 	bl	f6e8 <z_clock_elapsed>
   1c1e4:	4b07      	ldr	r3, [pc, #28]	; (1c204 <z_tick_get+0x38>)
   1c1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1ea:	eb12 0b00 	adds.w	fp, r2, r0
   1c1ee:	f143 0c00 	adc.w	ip, r3, #0
   1c1f2:	4658      	mov	r0, fp
   1c1f4:	4661      	mov	r1, ip
	__asm__ volatile(
   1c1f6:	f384 8811 	msr	BASEPRI, r4
   1c1fa:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c1fe:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1c202:	bf00      	nop
   1c204:	20020108 	.word	0x20020108

0001c208 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1c208:	6a02      	ldr	r2, [r0, #32]
{
   1c20a:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1c20c:	2a00      	cmp	r2, #0
{
   1c20e:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1c210:	dd02      	ble.n	1c218 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c212:	490e      	ldr	r1, [pc, #56]	; (1c24c <z_timer_expiration_handler+0x44>)
   1c214:	f7ff ff42 	bl	1c09c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c218:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c21a:	3301      	adds	r3, #1
   1c21c:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c21e:	69a3      	ldr	r3, [r4, #24]
   1c220:	b10b      	cbz	r3, 1c226 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1c222:	4620      	mov	r0, r4
   1c224:	4798      	blx	r3
	return list->head == list;
   1c226:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c22a:	42a5      	cmp	r5, r4
   1c22c:	d00d      	beq.n	1c24a <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c22e:	b165      	cbz	r5, 1c24a <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1c230:	4628      	mov	r0, r5
   1c232:	f002 fc4f 	bl	1ead4 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c236:	7b6b      	ldrb	r3, [r5, #13]
   1c238:	06db      	lsls	r3, r3, #27
   1c23a:	d104      	bne.n	1c246 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1c23c:	69ab      	ldr	r3, [r5, #24]
   1c23e:	b913      	cbnz	r3, 1c246 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1c240:	4628      	mov	r0, r5
   1c242:	f7ff fae9 	bl	1b818 <z_add_thread_to_ready_q>
   1c246:	2300      	movs	r3, #0
   1c248:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1c24a:	bd38      	pop	{r3, r4, r5, pc}
   1c24c:	0001c209 	.word	0x0001c209

0001c250 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1c250:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c254:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c258:	2700      	movs	r7, #0
   1c25a:	4604      	mov	r4, r0
   1c25c:	4688      	mov	r8, r1
   1c25e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c262:	4630      	mov	r0, r6
   1c264:	4639      	mov	r1, r7
   1c266:	2300      	movs	r3, #0
   1c268:	fbe5 0102 	umlal	r0, r1, r5, r2
   1c26c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c270:	f7f0 f992 	bl	c598 <__aeabi_uldivmod>
   1c274:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1c276:	9000      	str	r0, [sp, #0]
   1c278:	4630      	mov	r0, r6
   1c27a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c27e:	2300      	movs	r3, #0
   1c280:	fbe5 0108 	umlal	r0, r1, r5, r8
   1c284:	f7f0 f988 	bl	c598 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1c288:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1c28a:	4620      	mov	r0, r4
   1c28c:	f002 fd4b 	bl	1ed26 <z_abort_timeout>
	timer->period = period_in_ticks;
   1c290:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c292:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1c294:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1c296:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c298:	9a01      	ldr	r2, [sp, #4]
   1c29a:	4903      	ldr	r1, [pc, #12]	; (1c2a8 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   1c29c:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1c29e:	b002      	add	sp, #8
   1c2a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c2a4:	f7ff befa 	b.w	1c09c <z_add_timeout>
   1c2a8:	0001c209 	.word	0x0001c209

0001c2ac <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1c2ac:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1c2ae:	7b44      	ldrb	r4, [r0, #13]
   1c2b0:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1c2b4:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1c2b6:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1c2b8:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   1c2bc:	2200      	movs	r2, #0
	event->mode = mode;
   1c2be:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1c2c0:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1c2c2:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1c2c4:	4a02      	ldr	r2, [pc, #8]	; (1c2d0 <k_poll_event_init+0x24>)
   1c2c6:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1c2c8:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1c2cc:	bd10      	pop	{r4, pc}
   1c2ce:	bf00      	nop
   1c2d0:	00020fff 	.word	0x00020fff

0001c2d4 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1c2d4:	2301      	movs	r3, #1
{
   1c2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2da:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   1c2dc:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1c2e0:	4b23      	ldr	r3, [pc, #140]	; (1c370 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   1c2e2:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   1c2e4:	689b      	ldr	r3, [r3, #8]
{
   1c2e6:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1c2e8:	9304      	str	r3, [sp, #16]
   1c2ea:	4b22      	ldr	r3, [pc, #136]	; (1c374 <z_impl_k_poll+0xa0>)
   1c2ec:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   1c2ee:	fab2 f382 	clz	r3, r2
   1c2f2:	aa03      	add	r2, sp, #12
   1c2f4:	095b      	lsrs	r3, r3, #5
   1c2f6:	f002 fe33 	bl	1ef60 <register_events>
   1c2fa:	4607      	mov	r7, r0
	__asm__ volatile(
   1c2fc:	f04f 0320 	mov.w	r3, #32
   1c300:	f3ef 8511 	mrs	r5, BASEPRI
   1c304:	f383 8811 	msr	BASEPRI, r3
   1c308:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1c30c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c310:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1c314:	b94b      	cbnz	r3, 1c32a <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1c316:	462a      	mov	r2, r5
   1c318:	4639      	mov	r1, r7
   1c31a:	4630      	mov	r0, r6
   1c31c:	f002 fd88 	bl	1ee30 <clear_event_registrations>
	__asm__ volatile(
   1c320:	f385 8811 	msr	BASEPRI, r5
   1c324:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1c328:	e00b      	b.n	1c342 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1c32a:	2300      	movs	r3, #0
   1c32c:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1c330:	f1b8 0f00 	cmp.w	r8, #0
   1c334:	d109      	bne.n	1c34a <z_impl_k_poll+0x76>
   1c336:	f385 8811 	msr	BASEPRI, r5
   1c33a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c33e:	f06f 040a 	mvn.w	r4, #10
}
   1c342:	4620      	mov	r0, r4
   1c344:	b006      	add	sp, #24
   1c346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c34a:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c34c:	4643      	mov	r3, r8
   1c34e:	4629      	mov	r1, r5
   1c350:	4809      	ldr	r0, [pc, #36]	; (1c378 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c352:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c356:	f7ff fb9b 	bl	1ba90 <z_pend_curr>
   1c35a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c35c:	f04f 0320 	mov.w	r3, #32
   1c360:	f3ef 8511 	mrs	r5, BASEPRI
   1c364:	f383 8811 	msr	BASEPRI, r3
   1c368:	f3bf 8f6f 	isb	sy
   1c36c:	e7d3      	b.n	1c316 <z_impl_k_poll+0x42>
   1c36e:	bf00      	nop
   1c370:	20024d28 	.word	0x20024d28
   1c374:	0001eec1 	.word	0x0001eec1
   1c378:	20026591 	.word	0x20026591

0001c37c <enter_sleep>:

void enter_sleep(u16_t mode)
{
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1c37c:	2803      	cmp	r0, #3
{
   1c37e:	b508      	push	{r3, lr}
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1c380:	d103      	bne.n	1c38a <enter_sleep+0xe>
	if (mode == SHUTDOWN_APP_MODEM) {
		lte_lc_power_off();
	}
	bsd_shutdown();
	nrf_regulators_system_off(NRF_REGULATORS_NS);
}
   1c382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lte_lc_power_off();
   1c386:	f7f6 b9f5 	b.w	12774 <lte_lc_power_off>
	if (mode == SHUTDOWN_APP_MODEM) {
   1c38a:	2801      	cmp	r0, #1
   1c38c:	d101      	bne.n	1c392 <enter_sleep+0x16>
		lte_lc_power_off();
   1c38e:	f7f6 f9f1 	bl	12774 <lte_lc_power_off>
	bsd_shutdown();
   1c392:	f7f8 fb31 	bl	149f8 <bsd_shutdown>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1c396:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1c39a:	2201      	movs	r2, #1
   1c39c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1c3a0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1c3a4:	bf20      	wfe
   1c3a6:	e7fd      	b.n	1c3a4 <enter_sleep+0x28>

0001c3a8 <main>:
		enter_sleep(SHUTDOWN_APP_MODEM);
	}
}
#else
void main(void)
{
   1c3a8:	b508      	push	{r3, lr}
	start_execute();
   1c3aa:	f7f0 fa89 	bl	c8c0 <start_execute>
	
	while(1)
	{
		send_message();
   1c3ae:	f7f1 feef 	bl	e190 <send_message>
   1c3b2:	e7fc      	b.n	1c3ae <main+0x6>

0001c3b4 <uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1c3b4:	6843      	ldr	r3, [r0, #4]
   1c3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c3b8:	b103      	cbz	r3, 1c3bc <uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1c3ba:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   1c3bc:	4770      	bx	lr

0001c3be <slm_at_callback>:
{
   1c3be:	b510      	push	{r4, lr}
   1c3c0:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   1c3c2:	f001 f8e9 	bl	1d598 <strlen>
   1c3c6:	4601      	mov	r1, r0
   1c3c8:	4620      	mov	r0, r4
}
   1c3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   1c3ce:	f7f0 bab3 	b.w	c938 <write_uart_string>

0001c3d2 <response_handler>:
{
   1c3d2:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   1c3d4:	4608      	mov	r0, r1
{
   1c3d6:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   1c3d8:	f001 f8de 	bl	1d598 <strlen>
   1c3dc:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   1c3de:	2901      	cmp	r1, #1
   1c3e0:	dd04      	ble.n	1c3ec <response_handler+0x1a>
		write_uart_string(response, len);
   1c3e2:	4620      	mov	r0, r4
}
   1c3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   1c3e8:	f7f0 baa6 	b.w	c938 <write_uart_string>
}
   1c3ec:	bd10      	pop	{r4, pc}

0001c3ee <z_errno>:
   1c3ee:	f7fe bdad 	b.w	1af4c <z_impl_z_errno>

0001c3f2 <k_sleep>:
	return z_impl_k_sleep(ms);
   1c3f2:	f7ff bc29 	b.w	1bc48 <z_impl_k_sleep>

0001c3f6 <slm_at_tcpip_uninit>:
	return do_socket_close(0);
   1c3f6:	2000      	movs	r0, #0
   1c3f8:	f7f0 bd76 	b.w	cee8 <do_socket_close>

0001c3fc <z_errno>:
   1c3fc:	f7fe bda6 	b.w	1af4c <z_impl_z_errno>

0001c400 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1c400:	b570      	push	{r4, r5, r6, lr}
   1c402:	250c      	movs	r5, #12
   1c404:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1c406:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1c40a:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1c40c:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1c40e:	4610      	mov	r0, r2
   1c410:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1c414:	bfb8      	it	lt
   1c416:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1c418:	2a00      	cmp	r2, #0
   1c41a:	bfb8      	it	lt
   1c41c:	f102 001f 	addlt.w	r0, r2, #31
   1c420:	1140      	asrs	r0, r0, #5
   1c422:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1c426:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1c428:	f002 001f 	and.w	r0, r2, #31
   1c42c:	bd70      	pop	{r4, r5, r6, pc}

0001c42e <pool_irq_lock.isra.2.part.3>:
   1c42e:	f04f 0320 	mov.w	r3, #32
   1c432:	f3ef 8011 	mrs	r0, BASEPRI
   1c436:	f383 8811 	msr	BASEPRI, r3
   1c43a:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1c43e:	4770      	bx	lr

0001c440 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c440:	07c3      	lsls	r3, r0, #31
   1c442:	d503      	bpl.n	1c44c <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1c444:	f381 8811 	msr	BASEPRI, r1
   1c448:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1c44c:	4770      	bx	lr

0001c44e <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1c44e:	23ff      	movs	r3, #255	; 0xff
{
   1c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c454:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1c456:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c458:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1c45a:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1c45c:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c460:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c462:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c464:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1c468:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c46c:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1c46e:	4598      	cmp	r8, r3
   1c470:	dc05      	bgt.n	1c47e <z_sys_mem_pool_base_init+0x30>
   1c472:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1c474:	4619      	mov	r1, r3
   1c476:	428f      	cmp	r7, r1
   1c478:	dc20      	bgt.n	1c4bc <z_sys_mem_pool_base_init+0x6e>
}
   1c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1c47e:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1c482:	fb09 fe03 	mul.w	lr, r9, r3
   1c486:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c48a:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1c48c:	eb0a 040e 	add.w	r4, sl, lr
   1c490:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1c494:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c498:	d805      	bhi.n	1c4a6 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1c49a:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1c49c:	0892      	lsrs	r2, r2, #2
   1c49e:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1c4a2:	3301      	adds	r3, #1
   1c4a4:	e7e3      	b.n	1c46e <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1c4a6:	f115 041f 	adds.w	r4, r5, #31
   1c4aa:	bf48      	it	mi
   1c4ac:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1c4b0:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1c4b2:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1c4b6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1c4ba:	e7ef      	b.n	1c49c <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1c4bc:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1c4be:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1c4c0:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1c4c4:	18ec      	adds	r4, r5, r3
	node->next = list;
   1c4c6:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1c4ca:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1c4cc:	3101      	adds	r1, #1
   1c4ce:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1c4d0:	6895      	ldr	r5, [r2, #8]
   1c4d2:	4433      	add	r3, r6
   1c4d4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c4d6:	6094      	str	r4, [r2, #8]
   1c4d8:	e7cd      	b.n	1c476 <z_sys_mem_pool_base_init+0x28>

0001c4da <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1c4da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4de:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c4e0:	7a84      	ldrb	r4, [r0, #10]
{
   1c4e2:	af00      	add	r7, sp, #0
   1c4e4:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c4e8:	00a3      	lsls	r3, r4, #2
   1c4ea:	3307      	adds	r3, #7
   1c4ec:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c4f0:	ebad 0d03 	sub.w	sp, sp, r3
   1c4f4:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1c4f6:	4653      	mov	r3, sl
   1c4f8:	6842      	ldr	r2, [r0, #4]
{
   1c4fa:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1c4fc:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1c500:	2200      	movs	r2, #0
   1c502:	4294      	cmp	r4, r2
   1c504:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1c508:	dd09      	ble.n	1c51e <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1c50a:	b122      	cbz	r2, 1c516 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c50c:	6818      	ldr	r0, [r3, #0]
   1c50e:	0880      	lsrs	r0, r0, #2
   1c510:	f020 0003 	bic.w	r0, r0, #3
   1c514:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1c516:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1c51a:	4288      	cmp	r0, r1
   1c51c:	d208      	bcs.n	1c530 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1c51e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1c522:	d107      	bne.n	1c534 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1c524:	2300      	movs	r3, #0
   1c526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c528:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1c52a:	f06f 000b 	mvn.w	r0, #11
   1c52e:	e02c      	b.n	1c58a <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1c530:	3201      	adds	r2, #1
   1c532:	e7e6      	b.n	1c502 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c534:	7c28      	ldrb	r0, [r5, #16]
   1c536:	f010 0001 	ands.w	r0, r0, #1
   1c53a:	d001      	beq.n	1c540 <z_sys_mem_pool_block_alloc+0x66>
   1c53c:	f7ff ff77 	bl	1c42e <pool_irq_lock.isra.2.part.3>
   1c540:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1c542:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1c544:	464e      	mov	r6, r9
   1c546:	68ea      	ldr	r2, [r5, #12]
   1c548:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1c54c:	461a      	mov	r2, r3
   1c54e:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c552:	4294      	cmp	r4, r2
   1c554:	d11d      	bne.n	1c592 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1c556:	3e01      	subs	r6, #1
   1c558:	1c72      	adds	r2, r6, #1
   1c55a:	f1a3 030c 	sub.w	r3, r3, #12
   1c55e:	d1f5      	bne.n	1c54c <z_sys_mem_pool_block_alloc+0x72>
   1c560:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1c562:	4641      	mov	r1, r8
   1c564:	7c28      	ldrb	r0, [r5, #16]
   1c566:	f7ff ff6b 	bl	1c440 <pool_irq_unlock.isra.4>
	*data_p = data;
   1c56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c56c:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1c56e:	2c00      	cmp	r4, #0
   1c570:	d0db      	beq.n	1c52a <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1c572:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1c574:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1c576:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c57a:	682b      	ldr	r3, [r5, #0]
   1c57c:	1ae4      	subs	r4, r4, r3
   1c57e:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1c582:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1c586:	687b      	ldr	r3, [r7, #4]
   1c588:	601c      	str	r4, [r3, #0]
}
   1c58a:	371c      	adds	r7, #28
   1c58c:	46bd      	mov	sp, r7
   1c58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1c592:	e9d4 3200 	ldrd	r3, r2, [r4]
   1c596:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c598:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c59a:	2300      	movs	r3, #0
	node->prev = NULL;
   1c59c:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c5a0:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1c5a2:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c5a6:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1c5a8:	f107 0b14 	add.w	fp, r7, #20
   1c5ac:	fb92 f2f1 	sdiv	r2, r2, r1
   1c5b0:	465b      	mov	r3, fp
   1c5b2:	4631      	mov	r1, r6
   1c5b4:	4628      	mov	r0, r5
   1c5b6:	f7ff ff23 	bl	1c400 <get_bit_ptr>
	*word |= (1<<bit);
   1c5ba:	2201      	movs	r2, #1
   1c5bc:	6979      	ldr	r1, [r7, #20]
   1c5be:	fa02 f000 	lsl.w	r0, r2, r0
   1c5c2:	680b      	ldr	r3, [r1, #0]
   1c5c4:	603a      	str	r2, [r7, #0]
   1c5c6:	4303      	orrs	r3, r0
   1c5c8:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1c5ca:	454e      	cmp	r6, r9
   1c5cc:	dac9      	bge.n	1c562 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c5ce:	682a      	ldr	r2, [r5, #0]
   1c5d0:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1c5d4:	1aa2      	subs	r2, r4, r2
   1c5d6:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1c5da:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1c5dc:	465b      	mov	r3, fp
   1c5de:	0092      	lsls	r2, r2, #2
   1c5e0:	4631      	mov	r1, r6
   1c5e2:	4628      	mov	r0, r5
   1c5e4:	f7ff ff0c 	bl	1c400 <get_bit_ptr>
	*word |= (1<<bit);
   1c5e8:	697a      	ldr	r2, [r7, #20]
   1c5ea:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c5ec:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1c5ee:	fa03 f000 	lsl.w	r0, r3, r0
   1c5f2:	6813      	ldr	r3, [r2, #0]
   1c5f4:	4303      	orrs	r3, r0
   1c5f6:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c5f8:	230c      	movs	r3, #12
   1c5fa:	2203      	movs	r2, #3
   1c5fc:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1c600:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c604:	f101 0e04 	add.w	lr, r1, #4
   1c608:	1823      	adds	r3, r4, r0
   1c60a:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1c60c:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1c60e:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1c612:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c614:	688a      	ldr	r2, [r1, #8]
   1c616:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1c618:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1c61a:	608b      	str	r3, [r1, #8]
   1c61c:	3a01      	subs	r2, #1
   1c61e:	4403      	add	r3, r0
   1c620:	60fa      	str	r2, [r7, #12]
   1c622:	d1f3      	bne.n	1c60c <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1c624:	4641      	mov	r1, r8
   1c626:	7c28      	ldrb	r0, [r5, #16]
   1c628:	f7ff ff0a 	bl	1c440 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c62c:	7c2b      	ldrb	r3, [r5, #16]
   1c62e:	07db      	lsls	r3, r3, #31
   1c630:	d503      	bpl.n	1c63a <z_sys_mem_pool_block_alloc+0x160>
   1c632:	f7ff fefc 	bl	1c42e <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1c636:	4680      	mov	r8, r0
   1c638:	e7c7      	b.n	1c5ca <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1c63a:	68f8      	ldr	r0, [r7, #12]
   1c63c:	e7fb      	b.n	1c636 <z_sys_mem_pool_block_alloc+0x15c>

0001c63e <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1c63e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c642:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c644:	7a83      	ldrb	r3, [r0, #10]
{
   1c646:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c648:	009b      	lsls	r3, r3, #2
   1c64a:	3307      	adds	r3, #7
   1c64c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c650:	ebad 0d03 	sub.w	sp, sp, r3
   1c654:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1c656:	6843      	ldr	r3, [r0, #4]
{
   1c658:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1c65a:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1c65c:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1c65e:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1c662:	4281      	cmp	r1, r0
   1c664:	d215      	bcs.n	1c692 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c666:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1c668:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c66a:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1c66e:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c670:	d001      	beq.n	1c676 <z_sys_mem_pool_block_free+0x38>
   1c672:	f7ff fedc 	bl	1c42e <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1c676:	4604      	mov	r4, r0
	while (level >= 0) {
   1c678:	f1b8 0f00 	cmp.w	r8, #0
   1c67c:	da11      	bge.n	1c6a2 <z_sys_mem_pool_block_free+0x64>
	return -1;
   1c67e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1c682:	4621      	mov	r1, r4
   1c684:	7c30      	ldrb	r0, [r6, #16]
   1c686:	f7ff fedb 	bl	1c440 <pool_irq_unlock.isra.4>
}
   1c68a:	3714      	adds	r7, #20
   1c68c:	46bd      	mov	sp, r7
   1c68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c692:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1c694:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c696:	089b      	lsrs	r3, r3, #2
   1c698:	f023 0303 	bic.w	r3, r3, #3
   1c69c:	f844 3f04 	str.w	r3, [r4, #4]!
   1c6a0:	e7df      	b.n	1c662 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1c6a2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c6a6:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1c6a8:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1c6ac:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1c6ae:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c6b0:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1c6b2:	eb03 090a 	add.w	r9, r3, sl
   1c6b6:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c6b8:	4630      	mov	r0, r6
   1c6ba:	f107 030c 	add.w	r3, r7, #12
   1c6be:	f7ff fe9f 	bl	1c400 <get_bit_ptr>
	*word &= ~(1<<bit);
   1c6c2:	2301      	movs	r3, #1
   1c6c4:	68fa      	ldr	r2, [r7, #12]
   1c6c6:	fa03 f000 	lsl.w	r0, r3, r0
   1c6ca:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1c6cc:	6839      	ldr	r1, [r7, #0]
   1c6ce:	ea23 0300 	bic.w	r3, r3, r0
   1c6d2:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1c6d4:	220c      	movs	r2, #12
   1c6d6:	68f3      	ldr	r3, [r6, #12]
   1c6d8:	fb02 3308 	mla	r3, r2, r8, r3
   1c6dc:	1d1a      	adds	r2, r3, #4
   1c6de:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1c6e2:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1c6e4:	4621      	mov	r1, r4
   1c6e6:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1c6ea:	689a      	ldr	r2, [r3, #8]
   1c6ec:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1c6f0:	f8c3 9008 	str.w	r9, [r3, #8]
   1c6f4:	7c30      	ldrb	r0, [r6, #16]
   1c6f6:	f7ff fea3 	bl	1c440 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c6fa:	7c30      	ldrb	r0, [r6, #16]
   1c6fc:	f010 0001 	ands.w	r0, r0, #1
   1c700:	d001      	beq.n	1c706 <z_sys_mem_pool_block_free+0xc8>
   1c702:	f7ff fe94 	bl	1c42e <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1c706:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c708:	f1b8 0f00 	cmp.w	r8, #0
   1c70c:	d0b9      	beq.n	1c682 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1c70e:	f107 030c 	add.w	r3, r7, #12
   1c712:	462a      	mov	r2, r5
   1c714:	4641      	mov	r1, r8
   1c716:	4630      	mov	r0, r6
   1c718:	f7ff fe72 	bl	1c400 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1c71c:	68fb      	ldr	r3, [r7, #12]
   1c71e:	2800      	cmp	r0, #0
   1c720:	bfb8      	it	lt
   1c722:	3003      	addlt	r0, #3
   1c724:	681b      	ldr	r3, [r3, #0]
   1c726:	f020 0003 	bic.w	r0, r0, #3
   1c72a:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c72e:	f010 000f 	ands.w	r0, r0, #15
   1c732:	d1a6      	bne.n	1c682 <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1c734:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1c736:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1c73a:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1c73c:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1c740:	4353      	muls	r3, r2
   1c742:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1c744:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1c746:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1c748:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1c74c:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1c750:	2804      	cmp	r0, #4
   1c752:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1c756:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1c75a:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1c75e:	f8c1 c004 	str.w	ip, [r1, #4]
   1c762:	d1ea      	bne.n	1c73a <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1c764:	2d00      	cmp	r5, #0
   1c766:	bfb8      	it	lt
   1c768:	3503      	addlt	r5, #3
		level = level - 1;
   1c76a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1c76e:	10ad      	asrs	r5, r5, #2
   1c770:	e782      	b.n	1c678 <z_sys_mem_pool_block_free+0x3a>

0001c772 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c772:	4604      	mov	r4, r0
   1c774:	b508      	push	{r3, lr}
   1c776:	4608      	mov	r0, r1
   1c778:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c77a:	461a      	mov	r2, r3
   1c77c:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c77e:	f7ff fa8b 	bl	1bc98 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c782:	f7f3 fcdb 	bl	1013c <z_impl_k_thread_abort>

0001c786 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c786:	b510      	push	{r4, lr}
   1c788:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c78a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c78e:	4620      	mov	r0, r4
   1c790:	f002 f910 	bl	1e9b4 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c794:	4603      	mov	r3, r0
   1c796:	2800      	cmp	r0, #0
   1c798:	d0f7      	beq.n	1c78a <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1c79a:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c79c:	3308      	adds	r3, #8
   1c79e:	e8d3 1fef 	ldaex	r1, [r3]
   1c7a2:	f021 0c01 	bic.w	ip, r1, #1
   1c7a6:	e8c3 cfee 	stlex	lr, ip, [r3]
   1c7aa:	f1be 0f00 	cmp.w	lr, #0
   1c7ae:	d1f6      	bne.n	1c79e <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c7b0:	07cb      	lsls	r3, r1, #31
   1c7b2:	d500      	bpl.n	1c7b6 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c7b4:	4790      	blx	r2
	z_impl_k_yield();
   1c7b6:	f7ff f9fb 	bl	1bbb0 <z_impl_k_yield>
   1c7ba:	e7e6      	b.n	1c78a <z_work_q_main+0x4>

0001c7bc <arch_printk_char_out>:
}
   1c7bc:	2000      	movs	r0, #0
   1c7be:	4770      	bx	lr

0001c7c0 <print_err>:
{
   1c7c0:	b570      	push	{r4, r5, r6, lr}
   1c7c2:	460d      	mov	r5, r1
   1c7c4:	4604      	mov	r4, r0
	out('E', ctx);
   1c7c6:	2045      	movs	r0, #69	; 0x45
   1c7c8:	47a0      	blx	r4
	out('R', ctx);
   1c7ca:	4629      	mov	r1, r5
   1c7cc:	2052      	movs	r0, #82	; 0x52
   1c7ce:	47a0      	blx	r4
	out('R', ctx);
   1c7d0:	4629      	mov	r1, r5
   1c7d2:	4623      	mov	r3, r4
}
   1c7d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1c7d8:	2052      	movs	r0, #82	; 0x52
   1c7da:	4718      	bx	r3

0001c7dc <z_vprintk>:
{
   1c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1c7e0:	f04f 0800 	mov.w	r8, #0
{
   1c7e4:	4606      	mov	r6, r0
   1c7e6:	460f      	mov	r7, r1
	int min_width = -1;
   1c7e8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1c7ec:	46c1      	mov	r9, r8
{
   1c7ee:	b08b      	sub	sp, #44	; 0x2c
   1c7f0:	461c      	mov	r4, r3
	while (*fmt) {
   1c7f2:	1e53      	subs	r3, r2, #1
   1c7f4:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1c7f6:	2500      	movs	r5, #0
					break;
   1c7f8:	e005      	b.n	1c806 <z_vprintk+0x2a>
		if (!might_format) {
   1c7fa:	b96d      	cbnz	r5, 1c818 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1c7fc:	2825      	cmp	r0, #37	; 0x25
   1c7fe:	f000 814f 	beq.w	1caa0 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1c802:	4639      	mov	r1, r7
   1c804:	47b0      	blx	r6
	while (*fmt) {
   1c806:	9b02      	ldr	r3, [sp, #8]
   1c808:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1c80c:	9302      	str	r3, [sp, #8]
   1c80e:	2800      	cmp	r0, #0
   1c810:	d1f3      	bne.n	1c7fa <z_vprintk+0x1e>
}
   1c812:	b00b      	add	sp, #44	; 0x2c
   1c814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1c818:	2864      	cmp	r0, #100	; 0x64
   1c81a:	d06e      	beq.n	1c8fa <z_vprintk+0x11e>
   1c81c:	d81a      	bhi.n	1c854 <z_vprintk+0x78>
   1c81e:	2839      	cmp	r0, #57	; 0x39
   1c820:	d80a      	bhi.n	1c838 <z_vprintk+0x5c>
   1c822:	2831      	cmp	r0, #49	; 0x31
   1c824:	d260      	bcs.n	1c8e8 <z_vprintk+0x10c>
   1c826:	282d      	cmp	r0, #45	; 0x2d
   1c828:	f000 8140 	beq.w	1caac <z_vprintk+0x2d0>
   1c82c:	2830      	cmp	r0, #48	; 0x30
   1c82e:	d04c      	beq.n	1c8ca <z_vprintk+0xee>
   1c830:	2825      	cmp	r0, #37	; 0x25
   1c832:	d107      	bne.n	1c844 <z_vprintk+0x68>
				out((int)'%', ctx);
   1c834:	4639      	mov	r1, r7
   1c836:	e00b      	b.n	1c850 <z_vprintk+0x74>
			switch (*fmt) {
   1c838:	2858      	cmp	r0, #88	; 0x58
   1c83a:	f000 80bb 	beq.w	1c9b4 <z_vprintk+0x1d8>
   1c83e:	2863      	cmp	r0, #99	; 0x63
   1c840:	f000 812a 	beq.w	1ca98 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1c844:	4639      	mov	r1, r7
   1c846:	2025      	movs	r0, #37	; 0x25
   1c848:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1c84a:	4639      	mov	r1, r7
   1c84c:	9b02      	ldr	r3, [sp, #8]
   1c84e:	7818      	ldrb	r0, [r3, #0]
   1c850:	47b0      	blx	r6
   1c852:	e7d0      	b.n	1c7f6 <z_vprintk+0x1a>
			switch (*fmt) {
   1c854:	2870      	cmp	r0, #112	; 0x70
   1c856:	f000 80a3 	beq.w	1c9a0 <z_vprintk+0x1c4>
   1c85a:	d811      	bhi.n	1c880 <z_vprintk+0xa4>
   1c85c:	2869      	cmp	r0, #105	; 0x69
   1c85e:	d04c      	beq.n	1c8fa <z_vprintk+0x11e>
   1c860:	286c      	cmp	r0, #108	; 0x6c
   1c862:	d105      	bne.n	1c870 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1c864:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c868:	d12a      	bne.n	1c8c0 <z_vprintk+0xe4>
					length_mod = 'L';
   1c86a:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1c86e:	e7ca      	b.n	1c806 <z_vprintk+0x2a>
			switch (*fmt) {
   1c870:	2868      	cmp	r0, #104	; 0x68
   1c872:	d1e7      	bne.n	1c844 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1c874:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1c878:	d122      	bne.n	1c8c0 <z_vprintk+0xe4>
					length_mod = 'H';
   1c87a:	f04f 0848 	mov.w	r8, #72	; 0x48
   1c87e:	e7c2      	b.n	1c806 <z_vprintk+0x2a>
			switch (*fmt) {
   1c880:	2875      	cmp	r0, #117	; 0x75
   1c882:	d071      	beq.n	1c968 <z_vprintk+0x18c>
   1c884:	d818      	bhi.n	1c8b8 <z_vprintk+0xdc>
   1c886:	2873      	cmp	r0, #115	; 0x73
   1c888:	d1dc      	bne.n	1c844 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1c88a:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1c88e:	46ab      	mov	fp, r5
   1c890:	465b      	mov	r3, fp
   1c892:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1c896:	2800      	cmp	r0, #0
   1c898:	f040 80fb 	bne.w	1ca92 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1c89c:	f1b9 0f03 	cmp.w	r9, #3
   1c8a0:	f040 810a 	bne.w	1cab8 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1c8a4:	1b5d      	subs	r5, r3, r5
   1c8a6:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1c8aa:	2d00      	cmp	r5, #0
   1c8ac:	dda3      	ble.n	1c7f6 <z_vprintk+0x1a>
						out(' ', ctx);
   1c8ae:	4639      	mov	r1, r7
   1c8b0:	2020      	movs	r0, #32
   1c8b2:	47b0      	blx	r6
   1c8b4:	3d01      	subs	r5, #1
   1c8b6:	e7f8      	b.n	1c8aa <z_vprintk+0xce>
			switch (*fmt) {
   1c8b8:	2878      	cmp	r0, #120	; 0x78
   1c8ba:	d07b      	beq.n	1c9b4 <z_vprintk+0x1d8>
   1c8bc:	287a      	cmp	r0, #122	; 0x7a
   1c8be:	d1c1      	bne.n	1c844 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1c8c0:	f1b8 0f00 	cmp.w	r8, #0
   1c8c4:	d1be      	bne.n	1c844 <z_vprintk+0x68>
   1c8c6:	4680      	mov	r8, r0
   1c8c8:	e79d      	b.n	1c806 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1c8ca:	f1ba 0f00 	cmp.w	sl, #0
   1c8ce:	da0e      	bge.n	1c8ee <z_vprintk+0x112>
   1c8d0:	f1b9 0f00 	cmp.w	r9, #0
   1c8d4:	f000 80ed 	beq.w	1cab2 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1c8d8:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1c8dc:	f1b9 0f00 	cmp.w	r9, #0
   1c8e0:	bf08      	it	eq
   1c8e2:	f04f 0902 	moveq.w	r9, #2
   1c8e6:	e78e      	b.n	1c806 <z_vprintk+0x2a>
				if (min_width < 0) {
   1c8e8:	f1ba 0f00 	cmp.w	sl, #0
   1c8ec:	dbf4      	blt.n	1c8d8 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1c8ee:	230a      	movs	r3, #10
   1c8f0:	fb03 0a0a 	mla	sl, r3, sl, r0
   1c8f4:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1c8f8:	e7f0      	b.n	1c8dc <z_vprintk+0x100>
				if (length_mod == 'z') {
   1c8fa:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c8fe:	d102      	bne.n	1c906 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1c900:	f854 5b04 	ldr.w	r5, [r4], #4
   1c904:	e01f      	b.n	1c946 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1c906:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c90a:	d0f9      	beq.n	1c900 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1c90c:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c910:	d1f6      	bne.n	1c900 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1c912:	3407      	adds	r4, #7
   1c914:	f024 0407 	bic.w	r4, r4, #7
   1c918:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1c91c:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1c920:	9106      	str	r1, [sp, #24]
   1c922:	f143 0100 	adc.w	r1, r3, #0
   1c926:	9107      	str	r1, [sp, #28]
   1c928:	2100      	movs	r1, #0
   1c92a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1c92e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c932:	4561      	cmp	r1, ip
   1c934:	bf08      	it	eq
   1c936:	4558      	cmpeq	r0, fp
   1c938:	d204      	bcs.n	1c944 <z_vprintk+0x168>
						print_err(out, ctx);
   1c93a:	4639      	mov	r1, r7
   1c93c:	4630      	mov	r0, r6
   1c93e:	f7ff ff3f 	bl	1c7c0 <print_err>
						break;
   1c942:	e758      	b.n	1c7f6 <z_vprintk+0x1a>
					d = lld;
   1c944:	4615      	mov	r5, r2
				if (d < 0) {
   1c946:	2d00      	cmp	r5, #0
   1c948:	da05      	bge.n	1c956 <z_vprintk+0x17a>
					out((int)'-', ctx);
   1c94a:	4639      	mov	r1, r7
   1c94c:	202d      	movs	r0, #45	; 0x2d
   1c94e:	47b0      	blx	r6
					d = -d;
   1c950:	426d      	negs	r5, r5
					min_width--;
   1c952:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1c956:	464b      	mov	r3, r9
   1c958:	462a      	mov	r2, r5
   1c95a:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1c95e:	4639      	mov	r1, r7
   1c960:	4630      	mov	r0, r6
   1c962:	f7f2 f89f 	bl	eaa4 <_printk_dec_ulong>
				break;
   1c966:	e746      	b.n	1c7f6 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1c968:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c96c:	d102      	bne.n	1c974 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1c96e:	f854 2b04 	ldr.w	r2, [r4], #4
   1c972:	e011      	b.n	1c998 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1c974:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c978:	d0f9      	beq.n	1c96e <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1c97a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c97e:	d1f6      	bne.n	1c96e <z_vprintk+0x192>
					if (llu > ~0UL) {
   1c980:	2100      	movs	r1, #0
   1c982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1c986:	3407      	adds	r4, #7
   1c988:	f024 0407 	bic.w	r4, r4, #7
   1c98c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1c990:	4299      	cmp	r1, r3
   1c992:	bf08      	it	eq
   1c994:	4290      	cmpeq	r0, r2
   1c996:	d3d0      	bcc.n	1c93a <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1c998:	f8cd a000 	str.w	sl, [sp]
   1c99c:	464b      	mov	r3, r9
   1c99e:	e7de      	b.n	1c95e <z_vprintk+0x182>
				out('0', ctx);
   1c9a0:	4639      	mov	r1, r7
   1c9a2:	2030      	movs	r0, #48	; 0x30
   1c9a4:	47b0      	blx	r6
				out('x', ctx);
   1c9a6:	4639      	mov	r1, r7
   1c9a8:	2078      	movs	r0, #120	; 0x78
   1c9aa:	47b0      	blx	r6
					min_width = 8;
   1c9ac:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1c9b0:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1c9b4:	9b02      	ldr	r3, [sp, #8]
   1c9b6:	781b      	ldrb	r3, [r3, #0]
   1c9b8:	2b70      	cmp	r3, #112	; 0x70
   1c9ba:	d104      	bne.n	1c9c6 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1c9bc:	f854 3b04 	ldr.w	r3, [r4], #4
   1c9c0:	9304      	str	r3, [sp, #16]
   1c9c2:	2300      	movs	r3, #0
   1c9c4:	e00d      	b.n	1c9e2 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1c9c6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c9ca:	d0f7      	beq.n	1c9bc <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1c9cc:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c9d0:	d1f4      	bne.n	1c9bc <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1c9d2:	3407      	adds	r4, #7
   1c9d4:	f024 0307 	bic.w	r3, r4, #7
   1c9d8:	461c      	mov	r4, r3
   1c9da:	f854 2b08 	ldr.w	r2, [r4], #8
   1c9de:	685b      	ldr	r3, [r3, #4]
   1c9e0:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1c9e2:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1c9e4:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1c9e6:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1c9ea:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1c9ec:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1c9ee:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1c9f2:	9804      	ldr	r0, [sp, #16]
   1c9f4:	f1cb 0c20 	rsb	ip, fp, #32
   1c9f8:	f1ab 0120 	sub.w	r1, fp, #32
   1c9fc:	fa20 f00b 	lsr.w	r0, r0, fp
   1ca00:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ca04:	ea40 000c 	orr.w	r0, r0, ip
   1ca08:	fa23 f101 	lsr.w	r1, r3, r1
   1ca0c:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1ca0e:	f010 000f 	ands.w	r0, r0, #15
   1ca12:	d106      	bne.n	1ca22 <z_vprintk+0x246>
   1ca14:	9905      	ldr	r1, [sp, #20]
   1ca16:	b911      	cbnz	r1, 1ca1e <z_vprintk+0x242>
   1ca18:	f1bb 0f00 	cmp.w	fp, #0
   1ca1c:	d122      	bne.n	1ca64 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1ca1e:	2130      	movs	r1, #48	; 0x30
   1ca20:	e003      	b.n	1ca2a <z_vprintk+0x24e>
   1ca22:	2809      	cmp	r0, #9
   1ca24:	bf8c      	ite	hi
   1ca26:	2157      	movhi	r1, #87	; 0x57
   1ca28:	2130      	movls	r1, #48	; 0x30
   1ca2a:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1ca2c:	b240      	sxtb	r0, r0
   1ca2e:	4639      	mov	r1, r7
   1ca30:	9308      	str	r3, [sp, #32]
   1ca32:	9205      	str	r2, [sp, #20]
   1ca34:	47b0      	blx	r6
			digits++;
   1ca36:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1ca38:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1ca3a:	3301      	adds	r3, #1
   1ca3c:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1ca3e:	9b08      	ldr	r3, [sp, #32]
   1ca40:	f1bb 0f00 	cmp.w	fp, #0
   1ca44:	d123      	bne.n	1ca8e <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1ca46:	f1b9 0f03 	cmp.w	r9, #3
   1ca4a:	f47f aed4 	bne.w	1c7f6 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1ca4e:	9b03      	ldr	r3, [sp, #12]
   1ca50:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1ca54:	2d00      	cmp	r5, #0
   1ca56:	f77f aece 	ble.w	1c7f6 <z_vprintk+0x1a>
			out(' ', ctx);
   1ca5a:	4639      	mov	r1, r7
   1ca5c:	2020      	movs	r0, #32
   1ca5e:	47b0      	blx	r6
   1ca60:	3d01      	subs	r5, #1
   1ca62:	e7f7      	b.n	1ca54 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1ca64:	1e51      	subs	r1, r2, #1
   1ca66:	4592      	cmp	sl, r2
   1ca68:	9108      	str	r1, [sp, #32]
   1ca6a:	db07      	blt.n	1ca7c <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1ca6c:	f1b9 0f01 	cmp.w	r9, #1
   1ca70:	d106      	bne.n	1ca80 <z_vprintk+0x2a4>
				out('0', ctx);
   1ca72:	4639      	mov	r1, r7
   1ca74:	2030      	movs	r0, #48	; 0x30
   1ca76:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1ca78:	47b0      	blx	r6
   1ca7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1ca7c:	9a08      	ldr	r2, [sp, #32]
   1ca7e:	e7b6      	b.n	1c9ee <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1ca80:	f1b9 0f02 	cmp.w	r9, #2
   1ca84:	d1fa      	bne.n	1ca7c <z_vprintk+0x2a0>
   1ca86:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1ca88:	4639      	mov	r1, r7
   1ca8a:	2020      	movs	r0, #32
   1ca8c:	e7f4      	b.n	1ca78 <z_vprintk+0x29c>
			found_largest_digit = 1;
   1ca8e:	9505      	str	r5, [sp, #20]
   1ca90:	e7ad      	b.n	1c9ee <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1ca92:	4639      	mov	r1, r7
   1ca94:	47b0      	blx	r6
   1ca96:	e6fb      	b.n	1c890 <z_vprintk+0xb4>
				out(c, ctx);
   1ca98:	4639      	mov	r1, r7
   1ca9a:	f854 0b04 	ldr.w	r0, [r4], #4
   1ca9e:	e6d7      	b.n	1c850 <z_vprintk+0x74>
				length_mod = 0;
   1caa0:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1caa2:	46a9      	mov	r9, r5
				min_width = -1;
   1caa4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1caa8:	2501      	movs	r5, #1
   1caaa:	e6ac      	b.n	1c806 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1caac:	f04f 0903 	mov.w	r9, #3
   1cab0:	e6a9      	b.n	1c806 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1cab2:	f04f 0901 	mov.w	r9, #1
   1cab6:	e6a6      	b.n	1c806 <z_vprintk+0x2a>
			might_format = 0;
   1cab8:	4605      	mov	r5, r0
		++fmt;
   1caba:	e6a4      	b.n	1c806 <z_vprintk+0x2a>

0001cabc <printk>:
{
   1cabc:	b40f      	push	{r0, r1, r2, r3}
   1cabe:	b507      	push	{r0, r1, r2, lr}
   1cac0:	a904      	add	r1, sp, #16
   1cac2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1cac6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1cac8:	f7f2 f83e 	bl	eb48 <vprintk>
}
   1cacc:	b003      	add	sp, #12
   1cace:	f85d eb04 	ldr.w	lr, [sp], #4
   1cad2:	b004      	add	sp, #16
   1cad4:	4770      	bx	lr

0001cad6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   1cad6:	4770      	bx	lr

0001cad8 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1cad8:	f7fe b90c 	b.w	1acf4 <SystemInit>

0001cadc <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1cadc:	2300      	movs	r3, #0
	list->head = NULL;
   1cade:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cae2:	4770      	bx	lr

0001cae4 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1cae4:	6803      	ldr	r3, [r0, #0]
   1cae6:	b923      	cbnz	r3, 1caf2 <log_list_add_tail+0xe>
		list->head = msg;
   1cae8:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1caea:	2300      	movs	r3, #0
	list->tail = msg;
   1caec:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1caee:	600b      	str	r3, [r1, #0]
}
   1caf0:	4770      	bx	lr
		list->tail->next = msg;
   1caf2:	6843      	ldr	r3, [r0, #4]
   1caf4:	6019      	str	r1, [r3, #0]
   1caf6:	e7f8      	b.n	1caea <log_list_add_tail+0x6>

0001caf8 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1caf8:	6800      	ldr	r0, [r0, #0]
   1cafa:	4770      	bx	lr

0001cafc <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1cafc:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1cafe:	b10b      	cbz	r3, 1cb04 <log_list_head_get+0x8>
		list->head = list->head->next;
   1cb00:	681a      	ldr	r2, [r3, #0]
   1cb02:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1cb04:	4618      	mov	r0, r3
   1cb06:	4770      	bx	lr

0001cb08 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1cb08:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cb0a:	f7f2 fa73 	bl	eff4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1cb0e:	b118      	cbz	r0, 1cb18 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1cb10:	2301      	movs	r3, #1
   1cb12:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1cb14:	2300      	movs	r3, #0
   1cb16:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1cb18:	bd08      	pop	{r3, pc}

0001cb1a <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1cb1a:	f7f2 bdff 	b.w	f71c <z_timer_cycle_get_32>

0001cb1e <dummy_timestamp>:
   1cb1e:	2000      	movs	r0, #0
   1cb20:	4770      	bx	lr

0001cb22 <log_0>:
{
   1cb22:	b538      	push	{r3, r4, r5, lr}
   1cb24:	4605      	mov	r5, r0
   1cb26:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1cb28:	f7ff ffee 	bl	1cb08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb2c:	b128      	cbz	r0, 1cb3a <log_0+0x18>
		msg->str = str;
   1cb2e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1cb30:	4621      	mov	r1, r4
}
   1cb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1cb36:	f7f2 b8ed 	b.w	ed14 <msg_finalize>
}
   1cb3a:	bd38      	pop	{r3, r4, r5, pc}

0001cb3c <log_1>:
{
   1cb3c:	b570      	push	{r4, r5, r6, lr}
   1cb3e:	4604      	mov	r4, r0
   1cb40:	460e      	mov	r6, r1
   1cb42:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cb44:	f7ff ffe0 	bl	1cb08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb48:	b158      	cbz	r0, 1cb62 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1cb4a:	2201      	movs	r2, #1
		msg->str = str;
   1cb4c:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1cb4e:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1cb50:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1cb52:	f362 1407 	bfi	r4, r2, #4, #4
   1cb56:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1cb58:	4629      	mov	r1, r5
}
   1cb5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1cb5e:	f7f2 b8d9 	b.w	ed14 <msg_finalize>
}
   1cb62:	bd70      	pop	{r4, r5, r6, pc}

0001cb64 <log_2>:
{
   1cb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb68:	4605      	mov	r5, r0
   1cb6a:	4688      	mov	r8, r1
   1cb6c:	4617      	mov	r7, r2
   1cb6e:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cb70:	f7ff ffca 	bl	1cb08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb74:	b160      	cbz	r0, 1cb90 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1cb76:	2302      	movs	r3, #2
		msg->str = str;
   1cb78:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1cb7a:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cb7c:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1cb80:	f363 1507 	bfi	r5, r3, #4, #4
   1cb84:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1cb86:	4631      	mov	r1, r6
}
   1cb88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1cb8c:	f7f2 b8c2 	b.w	ed14 <msg_finalize>
}
   1cb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cb94 <log_3>:
{
   1cb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb98:	4605      	mov	r5, r0
   1cb9a:	4689      	mov	r9, r1
   1cb9c:	4690      	mov	r8, r2
   1cb9e:	461f      	mov	r7, r3
   1cba0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cba4:	f7ff ffb0 	bl	1cb08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cba8:	b168      	cbz	r0, 1cbc6 <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1cbaa:	2303      	movs	r3, #3
		msg->str = str;
   1cbac:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1cbae:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cbb0:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1cbb4:	f363 1507 	bfi	r5, r3, #4, #4
   1cbb8:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   1cbba:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   1cbbc:	4631      	mov	r1, r6
}
   1cbbe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1cbc2:	f7f2 b8a7 	b.w	ed14 <msg_finalize>
}
   1cbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cbca <log_n>:
{
   1cbca:	b510      	push	{r4, lr}
   1cbcc:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1cbce:	f000 f893 	bl	1ccf8 <log_msg_create_n>
		if (msg == NULL) {
   1cbd2:	b120      	cbz	r0, 1cbde <log_n+0x14>
		msg_finalize(msg, src_level);
   1cbd4:	4621      	mov	r1, r4
}
   1cbd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1cbda:	f7f2 b89b 	b.w	ed14 <msg_finalize>
}
   1cbde:	bd10      	pop	{r4, pc}

0001cbe0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1cbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cbe4:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1cbe6:	8903      	ldrh	r3, [r0, #8]
{
   1cbe8:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   1cbea:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1cbec:	42a3      	cmp	r3, r4
{
   1cbee:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1cbf2:	d803      	bhi.n	1cbfc <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   1cbf4:	2300      	movs	r3, #0
   1cbf6:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1cbf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1cbfc:	6811      	ldr	r1, [r2, #0]
   1cbfe:	4421      	add	r1, r4
   1cc00:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1cc02:	bf84      	itt	hi
   1cc04:	1b19      	subhi	r1, r3, r4
   1cc06:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cc08:	2b0c      	cmp	r3, #12
	req_len = *length;
   1cc0a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cc0e:	d928      	bls.n	1cc62 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1cc10:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1cc12:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1cc16:	d82b      	bhi.n	1cc70 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1cc18:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1cc1a:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cc1c:	454b      	cmp	r3, r9
   1cc1e:	bf28      	it	cs
   1cc20:	464b      	movcs	r3, r9
   1cc22:	4420      	add	r0, r4
   1cc24:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cc26:	461a      	mov	r2, r3
		if (put_op) {
   1cc28:	b1ff      	cbz	r7, 1cc6a <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cc2a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1cc2c:	f000 fcef 	bl	1d60e <memcpy>
		req_len -= cpy_len;
   1cc30:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1cc34:	442e      	add	r6, r5
	while (req_len > 0) {
   1cc36:	f1b9 0f00 	cmp.w	r9, #0
   1cc3a:	d0dd      	beq.n	1cbf8 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1cc3c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cc40:	454d      	cmp	r5, r9
   1cc42:	bf28      	it	cs
   1cc44:	464d      	movcs	r5, r9
		if (put_op) {
   1cc46:	1d20      	adds	r0, r4, #4
   1cc48:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1cc4a:	462a      	mov	r2, r5
		if (put_op) {
   1cc4c:	b1bf      	cbz	r7, 1cc7e <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   1cc4e:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1cc50:	f000 fcdd 	bl	1d60e <memcpy>
		req_len -= cpy_len;
   1cc54:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1cc58:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1cc5c:	442e      	add	r6, r5
		offset = 0;
   1cc5e:	2400      	movs	r4, #0
   1cc60:	e7e9      	b.n	1cc36 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1cc62:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1cc64:	f04f 0800 	mov.w	r8, #0
   1cc68:	e7d8      	b.n	1cc1c <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1cc6a:	4601      	mov	r1, r0
   1cc6c:	4630      	mov	r0, r6
   1cc6e:	e7dd      	b.n	1cc2c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1cc70:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1cc72:	2c1b      	cmp	r4, #27
   1cc74:	d9df      	bls.n	1cc36 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1cc76:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1cc7a:	3c1c      	subs	r4, #28
   1cc7c:	e7f9      	b.n	1cc72 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1cc7e:	4601      	mov	r1, r0
   1cc80:	4630      	mov	r0, r6
   1cc82:	e7e5      	b.n	1cc50 <log_msg_hexdump_data_op+0x70>

0001cc84 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cc84:	3004      	adds	r0, #4
   1cc86:	e8d0 3fef 	ldaex	r3, [r0]
   1cc8a:	3301      	adds	r3, #1
   1cc8c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1cc90:	2a00      	cmp	r2, #0
   1cc92:	d1f8      	bne.n	1cc86 <log_msg_get+0x2>
}
   1cc94:	4770      	bx	lr

0001cc96 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1cc96:	7a40      	ldrb	r0, [r0, #9]
}
   1cc98:	0900      	lsrs	r0, r0, #4
   1cc9a:	4770      	bx	lr

0001cc9c <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1cc9c:	7a43      	ldrb	r3, [r0, #9]
   1cc9e:	091b      	lsrs	r3, r3, #4
   1cca0:	428b      	cmp	r3, r1
   1cca2:	d916      	bls.n	1ccd2 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cca4:	2b03      	cmp	r3, #3
   1cca6:	d803      	bhi.n	1ccb0 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1cca8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ccac:	6948      	ldr	r0, [r1, #20]
   1ccae:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1ccb0:	2901      	cmp	r1, #1
   1ccb2:	d803      	bhi.n	1ccbc <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1ccb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ccb8:	6988      	ldr	r0, [r1, #24]
   1ccba:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1ccbc:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1ccbe:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1ccc0:	2906      	cmp	r1, #6
   1ccc2:	d803      	bhi.n	1cccc <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1ccc4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1ccc8:	6848      	ldr	r0, [r1, #4]
   1ccca:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1cccc:	3907      	subs	r1, #7
		cont = cont->next;
   1ccce:	681b      	ldr	r3, [r3, #0]
   1ccd0:	e7f6      	b.n	1ccc0 <log_msg_arg_get+0x24>
		return 0;
   1ccd2:	2000      	movs	r0, #0
}
   1ccd4:	4770      	bx	lr

0001ccd6 <log_msg_put>:
{
   1ccd6:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ccd8:	1d02      	adds	r2, r0, #4
   1ccda:	e8d2 1fef 	ldaex	r1, [r2]
   1ccde:	3901      	subs	r1, #1
   1cce0:	e8c2 1fec 	stlex	ip, r1, [r2]
   1cce4:	f1bc 0f00 	cmp.w	ip, #0
   1cce8:	d1f7      	bne.n	1ccda <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1ccea:	685b      	ldr	r3, [r3, #4]
   1ccec:	b90b      	cbnz	r3, 1ccf2 <log_msg_put+0x1c>
		msg_free(msg);
   1ccee:	f7f2 b993 	b.w	f018 <msg_free>
}
   1ccf2:	4770      	bx	lr

0001ccf4 <log_msg_str_get>:
}
   1ccf4:	6900      	ldr	r0, [r0, #16]
   1ccf6:	4770      	bx	lr

0001ccf8 <log_msg_create_n>:
{
   1ccf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccfc:	4682      	mov	sl, r0
   1ccfe:	4688      	mov	r8, r1
   1cd00:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cd02:	f7f2 f977 	bl	eff4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1cd06:	4604      	mov	r4, r0
   1cd08:	b330      	cbz	r0, 1cd58 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1cd0a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1cd0c:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd0e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1cd10:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1cd12:	8106      	strh	r6, [r0, #8]
   1cd14:	d909      	bls.n	1cd2a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1cd16:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cd18:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1cd1c:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1cd1e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1cd22:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1cd24:	f1b9 0f00 	cmp.w	r9, #0
   1cd28:	dc0e      	bgt.n	1cd48 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1cd2a:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd2c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1cd2e:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1cd32:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1cd36:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd38:	d818      	bhi.n	1cd6c <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1cd3a:	00aa      	lsls	r2, r5, #2
   1cd3c:	4641      	mov	r1, r8
   1cd3e:	f104 0014 	add.w	r0, r4, #20
   1cd42:	f000 fc64 	bl	1d60e <memcpy>
		nargs  = 0U;
   1cd46:	e007      	b.n	1cd58 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1cd48:	f7f2 f954 	bl	eff4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1cd4c:	4607      	mov	r7, r0
   1cd4e:	b930      	cbnz	r0, 1cd5e <log_msg_create_n+0x66>
			msg_free(msg);
   1cd50:	4620      	mov	r0, r4
   1cd52:	f7f2 f961 	bl	f018 <msg_free>
			return NULL;
   1cd56:	463c      	mov	r4, r7
}
   1cd58:	4620      	mov	r0, r4
   1cd5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1cd5e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1cd62:	f1a9 0907 	sub.w	r9, r9, #7
   1cd66:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1cd68:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1cd6a:	e7db      	b.n	1cd24 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1cd6c:	4641      	mov	r1, r8
   1cd6e:	2208      	movs	r2, #8
   1cd70:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1cd74:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1cd76:	f000 fc4a 	bl	1d60e <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cd7a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1cd7c:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1cd80:	2d07      	cmp	r5, #7
   1cd82:	462e      	mov	r6, r5
   1cd84:	bf28      	it	cs
   1cd86:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1cd88:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1cd8c:	4641      	mov	r1, r8
   1cd8e:	1d38      	adds	r0, r7, #4
   1cd90:	464a      	mov	r2, r9
   1cd92:	f000 fc3c 	bl	1d60e <memcpy>
	while (nargs != 0U) {
   1cd96:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1cd98:	44c8      	add	r8, r9
		cont = cont->next;
   1cd9a:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1cd9c:	d1f0      	bne.n	1cd80 <log_msg_create_n+0x88>
   1cd9e:	e7db      	b.n	1cd58 <log_msg_create_n+0x60>

0001cda0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1cda0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1cda2:	2400      	movs	r4, #0
   1cda4:	9400      	str	r4, [sp, #0]
   1cda6:	f7ff ff1b 	bl	1cbe0 <log_msg_hexdump_data_op>
}
   1cdaa:	b002      	add	sp, #8
   1cdac:	bd10      	pop	{r4, pc}

0001cdae <buffer_write>:
{
   1cdae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cdb0:	4606      	mov	r6, r0
   1cdb2:	460d      	mov	r5, r1
   1cdb4:	4614      	mov	r4, r2
   1cdb6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1cdb8:	4621      	mov	r1, r4
   1cdba:	4628      	mov	r0, r5
   1cdbc:	463a      	mov	r2, r7
   1cdbe:	47b0      	blx	r6
	} while (len != 0);
   1cdc0:	1a24      	subs	r4, r4, r0
		buf += processed;
   1cdc2:	4405      	add	r5, r0
	} while (len != 0);
   1cdc4:	d1f8      	bne.n	1cdb8 <buffer_write+0xa>
}
   1cdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cdc8 <std_print>:
{
   1cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cdcc:	b08e      	sub	sp, #56	; 0x38
   1cdce:	af0e      	add	r7, sp, #56	; 0x38
   1cdd0:	4681      	mov	r9, r0
   1cdd2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1cdd4:	f7ff ff8e 	bl	1ccf4 <log_msg_str_get>
   1cdd8:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1cdda:	4648      	mov	r0, r9
   1cddc:	f7ff ff5b 	bl	1cc96 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1cde0:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1cde4:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1cde6:	0083      	lsls	r3, r0, #2
   1cde8:	3307      	adds	r3, #7
   1cdea:	f023 0307 	bic.w	r3, r3, #7
   1cdee:	ebad 0d03 	sub.w	sp, sp, r3
   1cdf2:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1cdf4:	45d0      	cmp	r8, sl
   1cdf6:	d116      	bne.n	1ce26 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1cdf8:	4648      	mov	r0, r9
   1cdfa:	f7ff ff4c 	bl	1cc96 <log_msg_nargs_get>
   1cdfe:	280f      	cmp	r0, #15
   1ce00:	d81e      	bhi.n	1ce40 <std_print+0x78>
   1ce02:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ce06:	0019      	.short	0x0019
   1ce08:	00260020 	.word	0x00260020
   1ce0c:	0036002d 	.word	0x0036002d
   1ce10:	004e0041 	.word	0x004e0041
   1ce14:	006e005d 	.word	0x006e005d
   1ce18:	00960081 	.word	0x00960081
   1ce1c:	00c600ad 	.word	0x00c600ad
   1ce20:	00fe00e1 	.word	0x00fe00e1
   1ce24:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1ce26:	4641      	mov	r1, r8
   1ce28:	4648      	mov	r0, r9
   1ce2a:	f7ff ff37 	bl	1cc9c <log_msg_arg_get>
   1ce2e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1ce32:	f108 0801 	add.w	r8, r8, #1
   1ce36:	e7dd      	b.n	1cdf4 <std_print+0x2c>
		print_formatted(log_output, str);
   1ce38:	4631      	mov	r1, r6
   1ce3a:	4628      	mov	r0, r5
   1ce3c:	f7f2 f91e 	bl	f07c <print_formatted>
}
   1ce40:	46bd      	mov	sp, r7
   1ce42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1ce46:	6822      	ldr	r2, [r4, #0]
   1ce48:	4631      	mov	r1, r6
   1ce4a:	4628      	mov	r0, r5
   1ce4c:	f7f2 f916 	bl	f07c <print_formatted>
		break;
   1ce50:	e7f6      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1ce52:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ce56:	4631      	mov	r1, r6
   1ce58:	4628      	mov	r0, r5
   1ce5a:	f7f2 f90f 	bl	f07c <print_formatted>
		break;
   1ce5e:	e7ef      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1ce60:	68a3      	ldr	r3, [r4, #8]
   1ce62:	4631      	mov	r1, r6
   1ce64:	9300      	str	r3, [sp, #0]
   1ce66:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ce6a:	4628      	mov	r0, r5
   1ce6c:	f7f2 f906 	bl	f07c <print_formatted>
		break;
   1ce70:	e7e6      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ce72:	68e3      	ldr	r3, [r4, #12]
   1ce74:	4631      	mov	r1, r6
   1ce76:	9301      	str	r3, [sp, #4]
   1ce78:	68a3      	ldr	r3, [r4, #8]
   1ce7a:	4628      	mov	r0, r5
   1ce7c:	9300      	str	r3, [sp, #0]
   1ce7e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ce82:	f7f2 f8fb 	bl	f07c <print_formatted>
		break;
   1ce86:	e7db      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ce88:	6923      	ldr	r3, [r4, #16]
   1ce8a:	4631      	mov	r1, r6
   1ce8c:	9302      	str	r3, [sp, #8]
   1ce8e:	68e3      	ldr	r3, [r4, #12]
   1ce90:	4628      	mov	r0, r5
   1ce92:	9301      	str	r3, [sp, #4]
   1ce94:	68a3      	ldr	r3, [r4, #8]
   1ce96:	9300      	str	r3, [sp, #0]
   1ce98:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ce9c:	f7f2 f8ee 	bl	f07c <print_formatted>
		break;
   1cea0:	e7ce      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cea2:	6963      	ldr	r3, [r4, #20]
   1cea4:	4631      	mov	r1, r6
   1cea6:	9303      	str	r3, [sp, #12]
   1cea8:	6923      	ldr	r3, [r4, #16]
   1ceaa:	4628      	mov	r0, r5
   1ceac:	9302      	str	r3, [sp, #8]
   1ceae:	68e3      	ldr	r3, [r4, #12]
   1ceb0:	9301      	str	r3, [sp, #4]
   1ceb2:	68a3      	ldr	r3, [r4, #8]
   1ceb4:	9300      	str	r3, [sp, #0]
   1ceb6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ceba:	f7f2 f8df 	bl	f07c <print_formatted>
		break;
   1cebe:	e7bf      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cec0:	69a3      	ldr	r3, [r4, #24]
   1cec2:	4631      	mov	r1, r6
   1cec4:	9304      	str	r3, [sp, #16]
   1cec6:	6963      	ldr	r3, [r4, #20]
   1cec8:	4628      	mov	r0, r5
   1ceca:	9303      	str	r3, [sp, #12]
   1cecc:	6923      	ldr	r3, [r4, #16]
   1cece:	9302      	str	r3, [sp, #8]
   1ced0:	68e3      	ldr	r3, [r4, #12]
   1ced2:	9301      	str	r3, [sp, #4]
   1ced4:	68a3      	ldr	r3, [r4, #8]
   1ced6:	9300      	str	r3, [sp, #0]
   1ced8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cedc:	f7f2 f8ce 	bl	f07c <print_formatted>
		break;
   1cee0:	e7ae      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cee2:	69e3      	ldr	r3, [r4, #28]
   1cee4:	4631      	mov	r1, r6
   1cee6:	9305      	str	r3, [sp, #20]
   1cee8:	69a3      	ldr	r3, [r4, #24]
   1ceea:	4628      	mov	r0, r5
   1ceec:	9304      	str	r3, [sp, #16]
   1ceee:	6963      	ldr	r3, [r4, #20]
   1cef0:	9303      	str	r3, [sp, #12]
   1cef2:	6923      	ldr	r3, [r4, #16]
   1cef4:	9302      	str	r3, [sp, #8]
   1cef6:	68e3      	ldr	r3, [r4, #12]
   1cef8:	9301      	str	r3, [sp, #4]
   1cefa:	68a3      	ldr	r3, [r4, #8]
   1cefc:	9300      	str	r3, [sp, #0]
   1cefe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf02:	f7f2 f8bb 	bl	f07c <print_formatted>
		break;
   1cf06:	e79b      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf08:	6a23      	ldr	r3, [r4, #32]
   1cf0a:	4631      	mov	r1, r6
   1cf0c:	9306      	str	r3, [sp, #24]
   1cf0e:	69e3      	ldr	r3, [r4, #28]
   1cf10:	4628      	mov	r0, r5
   1cf12:	9305      	str	r3, [sp, #20]
   1cf14:	69a3      	ldr	r3, [r4, #24]
   1cf16:	9304      	str	r3, [sp, #16]
   1cf18:	6963      	ldr	r3, [r4, #20]
   1cf1a:	9303      	str	r3, [sp, #12]
   1cf1c:	6923      	ldr	r3, [r4, #16]
   1cf1e:	9302      	str	r3, [sp, #8]
   1cf20:	68e3      	ldr	r3, [r4, #12]
   1cf22:	9301      	str	r3, [sp, #4]
   1cf24:	68a3      	ldr	r3, [r4, #8]
   1cf26:	9300      	str	r3, [sp, #0]
   1cf28:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf2c:	f7f2 f8a6 	bl	f07c <print_formatted>
		break;
   1cf30:	e786      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cf34:	4631      	mov	r1, r6
   1cf36:	9307      	str	r3, [sp, #28]
   1cf38:	6a23      	ldr	r3, [r4, #32]
   1cf3a:	4628      	mov	r0, r5
   1cf3c:	9306      	str	r3, [sp, #24]
   1cf3e:	69e3      	ldr	r3, [r4, #28]
   1cf40:	9305      	str	r3, [sp, #20]
   1cf42:	69a3      	ldr	r3, [r4, #24]
   1cf44:	9304      	str	r3, [sp, #16]
   1cf46:	6963      	ldr	r3, [r4, #20]
   1cf48:	9303      	str	r3, [sp, #12]
   1cf4a:	6923      	ldr	r3, [r4, #16]
   1cf4c:	9302      	str	r3, [sp, #8]
   1cf4e:	68e3      	ldr	r3, [r4, #12]
   1cf50:	9301      	str	r3, [sp, #4]
   1cf52:	68a3      	ldr	r3, [r4, #8]
   1cf54:	9300      	str	r3, [sp, #0]
   1cf56:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf5a:	f7f2 f88f 	bl	f07c <print_formatted>
		break;
   1cf5e:	e76f      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cf62:	4631      	mov	r1, r6
   1cf64:	9308      	str	r3, [sp, #32]
   1cf66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cf68:	4628      	mov	r0, r5
   1cf6a:	9307      	str	r3, [sp, #28]
   1cf6c:	6a23      	ldr	r3, [r4, #32]
   1cf6e:	9306      	str	r3, [sp, #24]
   1cf70:	69e3      	ldr	r3, [r4, #28]
   1cf72:	9305      	str	r3, [sp, #20]
   1cf74:	69a3      	ldr	r3, [r4, #24]
   1cf76:	9304      	str	r3, [sp, #16]
   1cf78:	6963      	ldr	r3, [r4, #20]
   1cf7a:	9303      	str	r3, [sp, #12]
   1cf7c:	6923      	ldr	r3, [r4, #16]
   1cf7e:	9302      	str	r3, [sp, #8]
   1cf80:	68e3      	ldr	r3, [r4, #12]
   1cf82:	9301      	str	r3, [sp, #4]
   1cf84:	68a3      	ldr	r3, [r4, #8]
   1cf86:	9300      	str	r3, [sp, #0]
   1cf88:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf8c:	f7f2 f876 	bl	f07c <print_formatted>
		break;
   1cf90:	e756      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cf94:	4631      	mov	r1, r6
   1cf96:	9309      	str	r3, [sp, #36]	; 0x24
   1cf98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cf9a:	4628      	mov	r0, r5
   1cf9c:	9308      	str	r3, [sp, #32]
   1cf9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cfa0:	9307      	str	r3, [sp, #28]
   1cfa2:	6a23      	ldr	r3, [r4, #32]
   1cfa4:	9306      	str	r3, [sp, #24]
   1cfa6:	69e3      	ldr	r3, [r4, #28]
   1cfa8:	9305      	str	r3, [sp, #20]
   1cfaa:	69a3      	ldr	r3, [r4, #24]
   1cfac:	9304      	str	r3, [sp, #16]
   1cfae:	6963      	ldr	r3, [r4, #20]
   1cfb0:	9303      	str	r3, [sp, #12]
   1cfb2:	6923      	ldr	r3, [r4, #16]
   1cfb4:	9302      	str	r3, [sp, #8]
   1cfb6:	68e3      	ldr	r3, [r4, #12]
   1cfb8:	9301      	str	r3, [sp, #4]
   1cfba:	68a3      	ldr	r3, [r4, #8]
   1cfbc:	9300      	str	r3, [sp, #0]
   1cfbe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cfc2:	f7f2 f85b 	bl	f07c <print_formatted>
		break;
   1cfc6:	e73b      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cfc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cfca:	4631      	mov	r1, r6
   1cfcc:	930a      	str	r3, [sp, #40]	; 0x28
   1cfce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cfd0:	4628      	mov	r0, r5
   1cfd2:	9309      	str	r3, [sp, #36]	; 0x24
   1cfd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cfd6:	9308      	str	r3, [sp, #32]
   1cfd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cfda:	9307      	str	r3, [sp, #28]
   1cfdc:	6a23      	ldr	r3, [r4, #32]
   1cfde:	9306      	str	r3, [sp, #24]
   1cfe0:	69e3      	ldr	r3, [r4, #28]
   1cfe2:	9305      	str	r3, [sp, #20]
   1cfe4:	69a3      	ldr	r3, [r4, #24]
   1cfe6:	9304      	str	r3, [sp, #16]
   1cfe8:	6963      	ldr	r3, [r4, #20]
   1cfea:	9303      	str	r3, [sp, #12]
   1cfec:	6923      	ldr	r3, [r4, #16]
   1cfee:	9302      	str	r3, [sp, #8]
   1cff0:	68e3      	ldr	r3, [r4, #12]
   1cff2:	9301      	str	r3, [sp, #4]
   1cff4:	68a3      	ldr	r3, [r4, #8]
   1cff6:	9300      	str	r3, [sp, #0]
   1cff8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cffc:	f7f2 f83e 	bl	f07c <print_formatted>
		break;
   1d000:	e71e      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d002:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d004:	4631      	mov	r1, r6
   1d006:	930b      	str	r3, [sp, #44]	; 0x2c
   1d008:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d00a:	4628      	mov	r0, r5
   1d00c:	930a      	str	r3, [sp, #40]	; 0x28
   1d00e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d010:	9309      	str	r3, [sp, #36]	; 0x24
   1d012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d014:	9308      	str	r3, [sp, #32]
   1d016:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d018:	9307      	str	r3, [sp, #28]
   1d01a:	6a23      	ldr	r3, [r4, #32]
   1d01c:	9306      	str	r3, [sp, #24]
   1d01e:	69e3      	ldr	r3, [r4, #28]
   1d020:	9305      	str	r3, [sp, #20]
   1d022:	69a3      	ldr	r3, [r4, #24]
   1d024:	9304      	str	r3, [sp, #16]
   1d026:	6963      	ldr	r3, [r4, #20]
   1d028:	9303      	str	r3, [sp, #12]
   1d02a:	6923      	ldr	r3, [r4, #16]
   1d02c:	9302      	str	r3, [sp, #8]
   1d02e:	68e3      	ldr	r3, [r4, #12]
   1d030:	9301      	str	r3, [sp, #4]
   1d032:	68a3      	ldr	r3, [r4, #8]
   1d034:	9300      	str	r3, [sp, #0]
   1d036:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d03a:	f7f2 f81f 	bl	f07c <print_formatted>
		break;
   1d03e:	e6ff      	b.n	1ce40 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d042:	4631      	mov	r1, r6
   1d044:	930c      	str	r3, [sp, #48]	; 0x30
   1d046:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d048:	4628      	mov	r0, r5
   1d04a:	930b      	str	r3, [sp, #44]	; 0x2c
   1d04c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d04e:	930a      	str	r3, [sp, #40]	; 0x28
   1d050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d052:	9309      	str	r3, [sp, #36]	; 0x24
   1d054:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d056:	9308      	str	r3, [sp, #32]
   1d058:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d05a:	9307      	str	r3, [sp, #28]
   1d05c:	6a23      	ldr	r3, [r4, #32]
   1d05e:	9306      	str	r3, [sp, #24]
   1d060:	69e3      	ldr	r3, [r4, #28]
   1d062:	9305      	str	r3, [sp, #20]
   1d064:	69a3      	ldr	r3, [r4, #24]
   1d066:	9304      	str	r3, [sp, #16]
   1d068:	6963      	ldr	r3, [r4, #20]
   1d06a:	9303      	str	r3, [sp, #12]
   1d06c:	6923      	ldr	r3, [r4, #16]
   1d06e:	9302      	str	r3, [sp, #8]
   1d070:	68e3      	ldr	r3, [r4, #12]
   1d072:	9301      	str	r3, [sp, #4]
   1d074:	68a3      	ldr	r3, [r4, #8]
   1d076:	9300      	str	r3, [sp, #0]
   1d078:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d07c:	f7f1 fffe 	bl	f07c <print_formatted>
}
   1d080:	e6de      	b.n	1ce40 <std_print+0x78>

0001d082 <log_output_flush>:
		     log_output->control_block->offset,
   1d082:	6842      	ldr	r2, [r0, #4]
{
   1d084:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1d086:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1d08a:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1d08c:	6881      	ldr	r1, [r0, #8]
   1d08e:	6800      	ldr	r0, [r0, #0]
   1d090:	f7ff fe8d 	bl	1cdae <buffer_write>
	log_output->control_block->offset = 0;
   1d094:	2200      	movs	r2, #0
   1d096:	6863      	ldr	r3, [r4, #4]
   1d098:	601a      	str	r2, [r3, #0]
}
   1d09a:	bd10      	pop	{r4, pc}

0001d09c <out_func>:
{
   1d09c:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1d09e:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1d0a2:	681b      	ldr	r3, [r3, #0]
   1d0a4:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1d0a6:	684a      	ldr	r2, [r1, #4]
   1d0a8:	6813      	ldr	r3, [r2, #0]
   1d0aa:	3301      	adds	r3, #1
   1d0ac:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   1d0ae:	68ca      	ldr	r2, [r1, #12]
   1d0b0:	4293      	cmp	r3, r2
   1d0b2:	d102      	bne.n	1d0ba <out_func+0x1e>
		log_output_flush(out_ctx);
   1d0b4:	4608      	mov	r0, r1
   1d0b6:	f7ff ffe4 	bl	1d082 <log_output_flush>
}
   1d0ba:	2000      	movs	r0, #0
   1d0bc:	bd08      	pop	{r3, pc}

0001d0be <char_out>:
{
   1d0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d0c0:	460d      	mov	r5, r1
   1d0c2:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1d0c4:	4604      	mov	r4, r0
   1d0c6:	1847      	adds	r7, r0, r1
   1d0c8:	42bc      	cmp	r4, r7
   1d0ca:	d101      	bne.n	1d0d0 <char_out+0x12>
}
   1d0cc:	4628      	mov	r0, r5
   1d0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1d0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1d0d4:	6873      	ldr	r3, [r6, #4]
   1d0d6:	4630      	mov	r0, r6
   1d0d8:	685b      	ldr	r3, [r3, #4]
   1d0da:	4798      	blx	r3
   1d0dc:	e7f4      	b.n	1d0c8 <char_out+0xa>

0001d0de <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   1d0de:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   1d0e0:	7a5a      	ldrb	r2, [r3, #9]
   1d0e2:	b932      	cbnz	r2, 1d0f2 <get_status+0x14>
	if (data->ref > 0) {
   1d0e4:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1d0e8:	2800      	cmp	r0, #0
   1d0ea:	bfcc      	ite	gt
   1d0ec:	2000      	movgt	r0, #0
   1d0ee:	2001      	movle	r0, #1
   1d0f0:	4770      	bx	lr
   1d0f2:	2002      	movs	r0, #2
}
   1d0f4:	4770      	bx	lr

0001d0f6 <clock_stop>:
	const struct nrf_clock_control_config *config =
   1d0f6:	6802      	ldr	r2, [r0, #0]
{
   1d0f8:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   1d0fa:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   1d0fc:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   1d0fe:	f04f 0320 	mov.w	r3, #32
   1d102:	f3ef 8511 	mrs	r5, BASEPRI
   1d106:	f383 8811 	msr	BASEPRI, r3
   1d10a:	f3bf 8f6f 	isb	sy
	data->ref--;
   1d10e:	7a23      	ldrb	r3, [r4, #8]
   1d110:	3b01      	subs	r3, #1
   1d112:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   1d114:	2b00      	cmp	r3, #0
	data->ref--;
   1d116:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   1d118:	d11c      	bne.n	1d154 <clock_stop+0x5e>
	list->tail = NULL;
   1d11a:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   1d11e:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   1d120:	b9a3      	cbnz	r3, 1d14c <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d122:	2201      	movs	r2, #1
   1d124:	7af3      	ldrb	r3, [r6, #11]
   1d126:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d12a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d12e:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d130:	2200      	movs	r2, #0
   1d132:	8933      	ldrh	r3, [r6, #8]
   1d134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d138:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d13c:	601a      	str	r2, [r3, #0]
		data->started = false;
   1d13e:	2000      	movs	r0, #0
   1d140:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1d142:	f385 8811 	msr	BASEPRI, r5
   1d146:	f3bf 8f6f 	isb	sy
}
   1d14a:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   1d14c:	4798      	blx	r3
   1d14e:	2800      	cmp	r0, #0
   1d150:	d1e7      	bne.n	1d122 <clock_stop+0x2c>
   1d152:	e7f4      	b.n	1d13e <clock_stop+0x48>
	} else if (data->ref < 0) {
   1d154:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   1d158:	bfbc      	itt	lt
   1d15a:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   1d15c:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   1d160:	e7ef      	b.n	1d142 <clock_stop+0x4c>

0001d162 <clock_async_start>:
{
   1d162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1d164:	6803      	ldr	r3, [r0, #0]
{
   1d166:	4606      	mov	r6, r0
   1d168:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   1d16a:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1d16c:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   1d16e:	f04f 0320 	mov.w	r3, #32
   1d172:	f3ef 8211 	mrs	r2, BASEPRI
   1d176:	f383 8811 	msr	BASEPRI, r3
   1d17a:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1d17e:	7a2b      	ldrb	r3, [r5, #8]
   1d180:	3301      	adds	r3, #1
   1d182:	b25b      	sxtb	r3, r3
   1d184:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1d186:	f382 8811 	msr	BASEPRI, r2
   1d18a:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1d18e:	7a6a      	ldrb	r2, [r5, #9]
   1d190:	b132      	cbz	r2, 1d1a0 <clock_async_start+0x3e>
		if (data) {
   1d192:	b90c      	cbnz	r4, 1d198 <clock_async_start+0x36>
	return 0;
   1d194:	2000      	movs	r0, #0
}
   1d196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1d198:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1d19c:	4798      	blx	r3
   1d19e:	e7f9      	b.n	1d194 <clock_async_start+0x32>
		if (ref == 1) {
   1d1a0:	2b01      	cmp	r3, #1
   1d1a2:	d108      	bne.n	1d1b6 <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   1d1a4:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1d1a6:	b943      	cbnz	r3, 1d1ba <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d1a8:	2201      	movs	r2, #1
   1d1aa:	7abb      	ldrb	r3, [r7, #10]
   1d1ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d1b0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d1b4:	601a      	str	r2, [r3, #0]
		if (data) {
   1d1b6:	b94c      	cbnz	r4, 1d1cc <clock_async_start+0x6a>
   1d1b8:	e7ec      	b.n	1d194 <clock_async_start+0x32>
					config->start_handler(dev) : true;
   1d1ba:	4798      	blx	r3
   1d1bc:	2800      	cmp	r0, #0
   1d1be:	d1f3      	bne.n	1d1a8 <clock_async_start+0x46>
			} else if (data) {
   1d1c0:	2c00      	cmp	r4, #0
   1d1c2:	d0e7      	beq.n	1d194 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   1d1c4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1d1c8:	4630      	mov	r0, r6
   1d1ca:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1d1cc:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1d1ce:	429c      	cmp	r4, r3
   1d1d0:	d00d      	beq.n	1d1ee <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d1d2:	b113      	cbz	r3, 1d1da <clock_async_start+0x78>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d1d4:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1d1d6:	2b00      	cmp	r3, #0
   1d1d8:	d1f9      	bne.n	1d1ce <clock_async_start+0x6c>
	parent->next = child;
   1d1da:	2000      	movs	r0, #0
   1d1dc:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d1de:	686b      	ldr	r3, [r5, #4]
   1d1e0:	b913      	cbnz	r3, 1d1e8 <clock_async_start+0x86>
	list->head = node;
   1d1e2:	e9c5 4400 	strd	r4, r4, [r5]
   1d1e6:	e7d5      	b.n	1d194 <clock_async_start+0x32>
	parent->next = child;
   1d1e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d1ea:	606c      	str	r4, [r5, #4]
   1d1ec:	e7d3      	b.n	1d196 <clock_async_start+0x34>
				return -EALREADY;
   1d1ee:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d1f2:	e7d0      	b.n	1d196 <clock_async_start+0x34>

0001d1f4 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1d1f4:	2200      	movs	r2, #0
   1d1f6:	f7ff bfb4 	b.w	1d162 <clock_async_start>

0001d1fa <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1d1fa:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   1d1fc:	2000      	movs	r0, #0
	list->tail = NULL;
   1d1fe:	e9c3 0000 	strd	r0, r0, [r3]
}
   1d202:	4770      	bx	lr

0001d204 <clkstarted_handle>:
{
   1d204:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   1d206:	6884      	ldr	r4, [r0, #8]
{
   1d208:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   1d20a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d20c:	b12b      	cbz	r3, 1d21a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d20e:	6861      	ldr	r1, [r4, #4]
   1d210:	681a      	ldr	r2, [r3, #0]
   1d212:	428b      	cmp	r3, r1
	list->head = node;
   1d214:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1d216:	bf08      	it	eq
   1d218:	6062      	streq	r2, [r4, #4]
	data->started = true;
   1d21a:	2201      	movs	r2, #1
   1d21c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   1d21e:	b903      	cbnz	r3, 1d222 <clkstarted_handle+0x1e>
}
   1d220:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1d222:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1d226:	4628      	mov	r0, r5
   1d228:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   1d22a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d22c:	2b00      	cmp	r3, #0
   1d22e:	d0f7      	beq.n	1d220 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d230:	6861      	ldr	r1, [r4, #4]
   1d232:	681a      	ldr	r2, [r3, #0]
   1d234:	428b      	cmp	r3, r1
	list->head = node;
   1d236:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1d238:	bf08      	it	eq
   1d23a:	6062      	streq	r2, [r4, #4]
   1d23c:	e7ef      	b.n	1d21e <clkstarted_handle+0x1a>

0001d23e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d23e:	4770      	bx	lr

0001d240 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1d240:	4770      	bx	lr

0001d242 <z_irq_spurious>:
	z_arm_reserved();
   1d242:	f7f2 bbab 	b.w	f99c <z_arm_bus_fault>

0001d246 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d246:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1d248:	6800      	ldr	r0, [r0, #0]
   1d24a:	f7f2 bbb1 	b.w	f9b0 <z_arm_fatal_error>

0001d24e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d24e:	b508      	push	{r3, lr}
	handler();
   1d250:	f7f2 fc48 	bl	fae4 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1d254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1d258:	f7f2 ba7a 	b.w	f750 <z_arm_exc_exit>

0001d25c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1d25c:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1d25e:	2100      	movs	r1, #0
   1d260:	a801      	add	r0, sp, #4
   1d262:	f7f3 f953 	bl	1050c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1d266:	b003      	add	sp, #12
   1d268:	f85d fb04 	ldr.w	pc, [sp], #4

0001d26c <mpu_configure_region>:
{
   1d26c:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1d26e:	684b      	ldr	r3, [r1, #4]
{
   1d270:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1d272:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1d274:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1d278:	890d      	ldrh	r5, [r1, #8]
   1d27a:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1d27c:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d27e:	f024 041f 	bic.w	r4, r4, #31
   1d282:	3b01      	subs	r3, #1
   1d284:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1d286:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1d28a:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d28e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1d292:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1d294:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d298:	9303      	str	r3, [sp, #12]
   1d29a:	4604      	mov	r4, r0
   1d29c:	d905      	bls.n	1d2aa <mpu_configure_region+0x3e>
   1d29e:	f7f2 ffb7 	bl	10210 <region_allocate_and_init.part.0>
   1d2a2:	4604      	mov	r4, r0
}
   1d2a4:	4620      	mov	r0, r4
   1d2a6:	b005      	add	sp, #20
   1d2a8:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1d2aa:	4669      	mov	r1, sp
   1d2ac:	f7f2 ff98 	bl	101e0 <region_init>
	return region_allocate_and_init(index,
   1d2b0:	e7f8      	b.n	1d2a4 <mpu_configure_region+0x38>

0001d2b2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1d2b2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1d2b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d2ba:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1d2bc:	bf08      	it	eq
   1d2be:	f06f 0015 	mvneq.w	r0, #21
   1d2c2:	4770      	bx	lr

0001d2c4 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1d2c4:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1d2c6:	7802      	ldrb	r2, [r0, #0]
   1d2c8:	4603      	mov	r3, r0
   1d2ca:	2a20      	cmp	r2, #32
   1d2cc:	f100 0001 	add.w	r0, r0, #1
   1d2d0:	d0f9      	beq.n	1d2c6 <atoi+0x2>
   1d2d2:	f1a2 0109 	sub.w	r1, r2, #9
   1d2d6:	2904      	cmp	r1, #4
   1d2d8:	d9f5      	bls.n	1d2c6 <atoi+0x2>
		s++;
	}
	switch (*s) {
   1d2da:	2a2b      	cmp	r2, #43	; 0x2b
   1d2dc:	d008      	beq.n	1d2f0 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1d2de:	2a2d      	cmp	r2, #45	; 0x2d
   1d2e0:	bf0a      	itet	eq
   1d2e2:	4603      	moveq	r3, r0
   1d2e4:	2100      	movne	r1, #0
   1d2e6:	2101      	moveq	r1, #1
   1d2e8:	3b01      	subs	r3, #1
	int neg = 0;
   1d2ea:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1d2ec:	250a      	movs	r5, #10
   1d2ee:	e006      	b.n	1d2fe <atoi+0x3a>
		s++;
   1d2f0:	4603      	mov	r3, r0
	int neg = 0;
   1d2f2:	2100      	movs	r1, #0
   1d2f4:	e7f8      	b.n	1d2e8 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1d2f6:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1d2fa:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1d2fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d302:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1d306:	2c09      	cmp	r4, #9
   1d308:	d9f5      	bls.n	1d2f6 <atoi+0x32>
	}
	return neg ? n : -n;
   1d30a:	b901      	cbnz	r1, 1d30e <atoi+0x4a>
   1d30c:	4240      	negs	r0, r0
}
   1d30e:	bd30      	pop	{r4, r5, pc}

0001d310 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1d310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d314:	4684      	mov	ip, r0
   1d316:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d318:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1d31a:	462c      	mov	r4, r5
   1d31c:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d320:	2b20      	cmp	r3, #32
   1d322:	d036      	beq.n	1d392 <strtol+0x82>
   1d324:	f1a3 0109 	sub.w	r1, r3, #9
   1d328:	2904      	cmp	r1, #4
   1d32a:	d932      	bls.n	1d392 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1d32c:	2b2d      	cmp	r3, #45	; 0x2d
   1d32e:	d132      	bne.n	1d396 <strtol+0x86>
		neg = 1;
   1d330:	2101      	movs	r1, #1
		c = *s++;
   1d332:	786b      	ldrb	r3, [r5, #1]
   1d334:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d336:	2a00      	cmp	r2, #0
   1d338:	d05c      	beq.n	1d3f4 <strtol+0xe4>
   1d33a:	2a10      	cmp	r2, #16
   1d33c:	d109      	bne.n	1d352 <strtol+0x42>
   1d33e:	2b30      	cmp	r3, #48	; 0x30
   1d340:	d107      	bne.n	1d352 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d342:	7823      	ldrb	r3, [r4, #0]
   1d344:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d348:	2b58      	cmp	r3, #88	; 0x58
   1d34a:	d14e      	bne.n	1d3ea <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1d34c:	2210      	movs	r2, #16
		c = s[1];
   1d34e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d350:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1d352:	2900      	cmp	r1, #0
   1d354:	bf14      	ite	ne
   1d356:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1d35a:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d35e:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1d360:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1d364:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1d366:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d36a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d36e:	2d09      	cmp	r5, #9
   1d370:	d817      	bhi.n	1d3a2 <strtol+0x92>
			c -= '0';
   1d372:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d374:	429a      	cmp	r2, r3
   1d376:	dd24      	ble.n	1d3c2 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d378:	1c75      	adds	r5, r6, #1
   1d37a:	d007      	beq.n	1d38c <strtol+0x7c>
   1d37c:	4570      	cmp	r0, lr
   1d37e:	d81d      	bhi.n	1d3bc <strtol+0xac>
   1d380:	d101      	bne.n	1d386 <strtol+0x76>
   1d382:	454b      	cmp	r3, r9
   1d384:	dc1a      	bgt.n	1d3bc <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1d386:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d388:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d38c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d390:	e7eb      	b.n	1d36a <strtol+0x5a>
{
   1d392:	4625      	mov	r5, r4
   1d394:	e7c1      	b.n	1d31a <strtol+0xa>
	} else if (c == '+') {
   1d396:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d398:	bf04      	itt	eq
   1d39a:	1cac      	addeq	r4, r5, #2
   1d39c:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d39e:	2100      	movs	r1, #0
   1d3a0:	e7c9      	b.n	1d336 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d3a2:	f043 0520 	orr.w	r5, r3, #32
   1d3a6:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d3a8:	2d19      	cmp	r5, #25
   1d3aa:	d80a      	bhi.n	1d3c2 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d3ac:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d3b0:	2d1a      	cmp	r5, #26
   1d3b2:	bf34      	ite	cc
   1d3b4:	2537      	movcc	r5, #55	; 0x37
   1d3b6:	2557      	movcs	r5, #87	; 0x57
   1d3b8:	1b5b      	subs	r3, r3, r5
   1d3ba:	e7db      	b.n	1d374 <strtol+0x64>
			any = -1;
   1d3bc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d3c0:	e7e4      	b.n	1d38c <strtol+0x7c>
		}
	}

	if (any < 0) {
   1d3c2:	1c73      	adds	r3, r6, #1
   1d3c4:	d107      	bne.n	1d3d6 <strtol+0xc6>
   1d3c6:	f7fd fdc1 	bl	1af4c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1d3ca:	2326      	movs	r3, #38	; 0x26
   1d3cc:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1d3ce:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1d3d0:	b937      	cbnz	r7, 1d3e0 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1d3d6:	b101      	cbz	r1, 1d3da <strtol+0xca>
		acc = -acc;
   1d3d8:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d3da:	2f00      	cmp	r7, #0
   1d3dc:	d0f9      	beq.n	1d3d2 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d3de:	b10e      	cbz	r6, 1d3e4 <strtol+0xd4>
   1d3e0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d3e4:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d3e8:	e7f3      	b.n	1d3d2 <strtol+0xc2>
	if (base == 0) {
   1d3ea:	2330      	movs	r3, #48	; 0x30
   1d3ec:	2a00      	cmp	r2, #0
   1d3ee:	d1b0      	bne.n	1d352 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1d3f0:	2208      	movs	r2, #8
   1d3f2:	e7ae      	b.n	1d352 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1d3f4:	2b30      	cmp	r3, #48	; 0x30
   1d3f6:	d0a4      	beq.n	1d342 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1d3f8:	220a      	movs	r2, #10
   1d3fa:	e7aa      	b.n	1d352 <strtol+0x42>

0001d3fc <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1d3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d400:	4684      	mov	ip, r0
   1d402:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d404:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1d406:	462c      	mov	r4, r5
   1d408:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d40c:	2b20      	cmp	r3, #32
   1d40e:	d035      	beq.n	1d47c <strtoul+0x80>
   1d410:	f1a3 0109 	sub.w	r1, r3, #9
   1d414:	2904      	cmp	r1, #4
   1d416:	d931      	bls.n	1d47c <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1d418:	2b2d      	cmp	r3, #45	; 0x2d
   1d41a:	d131      	bne.n	1d480 <strtoul+0x84>
		neg = 1;
   1d41c:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1d420:	786b      	ldrb	r3, [r5, #1]
   1d422:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d424:	2a00      	cmp	r2, #0
   1d426:	d05e      	beq.n	1d4e6 <strtoul+0xea>
   1d428:	2a10      	cmp	r2, #16
   1d42a:	d109      	bne.n	1d440 <strtoul+0x44>
   1d42c:	2b30      	cmp	r3, #48	; 0x30
   1d42e:	d107      	bne.n	1d440 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d430:	7823      	ldrb	r3, [r4, #0]
   1d432:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d436:	2b58      	cmp	r3, #88	; 0x58
   1d438:	d150      	bne.n	1d4dc <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1d43a:	2210      	movs	r2, #16
		c = s[1];
   1d43c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d43e:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1d440:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d444:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d448:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d44a:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1d44e:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d450:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d454:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d458:	2d09      	cmp	r5, #9
   1d45a:	d818      	bhi.n	1d48e <strtoul+0x92>
			c -= '0';
   1d45c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d45e:	429a      	cmp	r2, r3
   1d460:	dd25      	ble.n	1d4ae <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d462:	2e00      	cmp	r6, #0
   1d464:	db20      	blt.n	1d4a8 <strtoul+0xac>
   1d466:	4288      	cmp	r0, r1
   1d468:	d81e      	bhi.n	1d4a8 <strtoul+0xac>
   1d46a:	d101      	bne.n	1d470 <strtoul+0x74>
   1d46c:	4543      	cmp	r3, r8
   1d46e:	dc1b      	bgt.n	1d4a8 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1d470:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d472:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d476:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d47a:	e7eb      	b.n	1d454 <strtoul+0x58>
{
   1d47c:	4625      	mov	r5, r4
   1d47e:	e7c2      	b.n	1d406 <strtoul+0xa>
	} else if (c == '+') {
   1d480:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d482:	bf04      	itt	eq
   1d484:	1cac      	addeq	r4, r5, #2
   1d486:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d488:	f04f 0e00 	mov.w	lr, #0
   1d48c:	e7ca      	b.n	1d424 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d48e:	f043 0520 	orr.w	r5, r3, #32
   1d492:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d494:	2d19      	cmp	r5, #25
   1d496:	d80a      	bhi.n	1d4ae <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d498:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d49c:	2d1a      	cmp	r5, #26
   1d49e:	bf34      	ite	cc
   1d4a0:	2537      	movcc	r5, #55	; 0x37
   1d4a2:	2557      	movcs	r5, #87	; 0x57
   1d4a4:	1b5b      	subs	r3, r3, r5
   1d4a6:	e7da      	b.n	1d45e <strtoul+0x62>
			any = -1;
   1d4a8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d4ac:	e7e3      	b.n	1d476 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1d4ae:	2e00      	cmp	r6, #0
   1d4b0:	da08      	bge.n	1d4c4 <strtoul+0xc8>
   1d4b2:	f7fd fd4b 	bl	1af4c <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1d4b6:	2326      	movs	r3, #38	; 0x26
   1d4b8:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1d4ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1d4be:	b947      	cbnz	r7, 1d4d2 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1d4c4:	f1be 0f00 	cmp.w	lr, #0
   1d4c8:	d000      	beq.n	1d4cc <strtoul+0xd0>
		acc = -acc;
   1d4ca:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d4cc:	2f00      	cmp	r7, #0
   1d4ce:	d0f7      	beq.n	1d4c0 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d4d0:	b10e      	cbz	r6, 1d4d6 <strtoul+0xda>
   1d4d2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d4d6:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d4da:	e7f1      	b.n	1d4c0 <strtoul+0xc4>
	if (base == 0) {
   1d4dc:	2330      	movs	r3, #48	; 0x30
   1d4de:	2a00      	cmp	r2, #0
   1d4e0:	d1ae      	bne.n	1d440 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1d4e2:	2208      	movs	r2, #8
   1d4e4:	e7ac      	b.n	1d440 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1d4e6:	2b30      	cmp	r3, #48	; 0x30
   1d4e8:	d0a2      	beq.n	1d430 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1d4ea:	220a      	movs	r2, #10
   1d4ec:	e7a8      	b.n	1d440 <strtoul+0x44>

0001d4ee <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1d4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1d4f2:	780f      	ldrb	r7, [r1, #0]
{
   1d4f4:	4605      	mov	r5, r0
	if (c != 0) {
   1d4f6:	b187      	cbz	r7, 1d51a <strstr+0x2c>
	c = *find++;
   1d4f8:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1d4fa:	4620      	mov	r0, r4
   1d4fc:	f000 f84c 	bl	1d598 <strlen>
   1d500:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1d502:	462e      	mov	r6, r5
   1d504:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1d508:	b163      	cbz	r3, 1d524 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1d50a:	429f      	cmp	r7, r3
   1d50c:	d108      	bne.n	1d520 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1d50e:	4642      	mov	r2, r8
   1d510:	4621      	mov	r1, r4
   1d512:	4630      	mov	r0, r6
   1d514:	f000 f853 	bl	1d5be <strncmp>
   1d518:	b910      	cbnz	r0, 1d520 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1d51a:	4628      	mov	r0, r5
   1d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1d520:	4635      	mov	r5, r6
   1d522:	e7ee      	b.n	1d502 <strstr+0x14>
					return NULL;
   1d524:	461d      	mov	r5, r3
   1d526:	e7f8      	b.n	1d51a <strstr+0x2c>

0001d528 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1d528:	4603      	mov	r3, r0
   1d52a:	3901      	subs	r1, #1
   1d52c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d530:	b90a      	cbnz	r2, 1d536 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1d532:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1d534:	4770      	bx	lr
		*d = *s;
   1d536:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1d53a:	e7f7      	b.n	1d52c <strcpy+0x4>

0001d53c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1d53c:	b570      	push	{r4, r5, r6, lr}
   1d53e:	4605      	mov	r5, r0
   1d540:	3901      	subs	r1, #1
   1d542:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1d544:	b142      	cbz	r2, 1d558 <strncpy+0x1c>
   1d546:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1d54a:	1e56      	subs	r6, r2, #1
   1d54c:	b92b      	cbnz	r3, 1d55a <strncpy+0x1e>
   1d54e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1d550:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1d554:	42a2      	cmp	r2, r4
   1d556:	d1fb      	bne.n	1d550 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1d558:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1d55a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1d55e:	4632      	mov	r2, r6
   1d560:	e7ef      	b.n	1d542 <strncpy+0x6>

0001d562 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1d562:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1d564:	7802      	ldrb	r2, [r0, #0]
   1d566:	4603      	mov	r3, r0
   1d568:	428a      	cmp	r2, r1
   1d56a:	f100 0001 	add.w	r0, r0, #1
   1d56e:	d004      	beq.n	1d57a <strchr+0x18>
   1d570:	2a00      	cmp	r2, #0
   1d572:	d1f7      	bne.n	1d564 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1d574:	2900      	cmp	r1, #0
   1d576:	bf18      	it	ne
   1d578:	2300      	movne	r3, #0
}
   1d57a:	4618      	mov	r0, r3
   1d57c:	4770      	bx	lr

0001d57e <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   1d57e:	2300      	movs	r3, #0
{
   1d580:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   1d582:	b2c9      	uxtb	r1, r1
   1d584:	4604      	mov	r4, r0
   1d586:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d58a:	428a      	cmp	r2, r1
   1d58c:	bf08      	it	eq
   1d58e:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   1d590:	2a00      	cmp	r2, #0
   1d592:	d1f7      	bne.n	1d584 <strrchr+0x6>

	return match;
}
   1d594:	4618      	mov	r0, r3
   1d596:	bd10      	pop	{r4, pc}

0001d598 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1d598:	2300      	movs	r3, #0

	while (*s != '\0') {
   1d59a:	5cc2      	ldrb	r2, [r0, r3]
   1d59c:	b90a      	cbnz	r2, 1d5a2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d59e:	4618      	mov	r0, r3
   1d5a0:	4770      	bx	lr
		n++;
   1d5a2:	3301      	adds	r3, #1
   1d5a4:	e7f9      	b.n	1d59a <strlen+0x2>

0001d5a6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d5a6:	3801      	subs	r0, #1
   1d5a8:	3901      	subs	r1, #1
   1d5aa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d5ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d5b2:	4293      	cmp	r3, r2
   1d5b4:	d101      	bne.n	1d5ba <strcmp+0x14>
   1d5b6:	2b00      	cmp	r3, #0
   1d5b8:	d1f7      	bne.n	1d5aa <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d5ba:	1a98      	subs	r0, r3, r2
   1d5bc:	4770      	bx	lr

0001d5be <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1d5be:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1d5c0:	2400      	movs	r4, #0
   1d5c2:	42a2      	cmp	r2, r4
   1d5c4:	d008      	beq.n	1d5d8 <strncmp+0x1a>
   1d5c6:	5d03      	ldrb	r3, [r0, r4]
   1d5c8:	5d0d      	ldrb	r5, [r1, r4]
   1d5ca:	42ab      	cmp	r3, r5
   1d5cc:	d102      	bne.n	1d5d4 <strncmp+0x16>
   1d5ce:	3401      	adds	r4, #1
   1d5d0:	2b00      	cmp	r3, #0
   1d5d2:	d1f6      	bne.n	1d5c2 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1d5d4:	1b58      	subs	r0, r3, r5
   1d5d6:	e000      	b.n	1d5da <strncmp+0x1c>
   1d5d8:	2000      	movs	r0, #0
}
   1d5da:	bd30      	pop	{r4, r5, pc}

0001d5dc <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   1d5dc:	b510      	push	{r4, lr}
   1d5de:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   1d5e0:	f7ff ffda 	bl	1d598 <strlen>
   1d5e4:	4420      	add	r0, r4
   1d5e6:	f7ff ff9f 	bl	1d528 <strcpy>
	return dest;
}
   1d5ea:	4620      	mov	r0, r4
   1d5ec:	bd10      	pop	{r4, pc}

0001d5ee <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d5ee:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d5f0:	b15a      	cbz	r2, 1d60a <memcmp+0x1c>
   1d5f2:	3901      	subs	r1, #1
   1d5f4:	1884      	adds	r4, r0, r2
   1d5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d5fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d5fe:	42a0      	cmp	r0, r4
   1d600:	d001      	beq.n	1d606 <memcmp+0x18>
   1d602:	429a      	cmp	r2, r3
   1d604:	d0f7      	beq.n	1d5f6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d606:	1ad0      	subs	r0, r2, r3
}
   1d608:	bd10      	pop	{r4, pc}
		return 0;
   1d60a:	4610      	mov	r0, r2
   1d60c:	e7fc      	b.n	1d608 <memcmp+0x1a>

0001d60e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d60e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d610:	ea81 0400 	eor.w	r4, r1, r0
   1d614:	07a5      	lsls	r5, r4, #30
   1d616:	4603      	mov	r3, r0
   1d618:	d00b      	beq.n	1d632 <memcpy+0x24>
   1d61a:	3b01      	subs	r3, #1
   1d61c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d61e:	4291      	cmp	r1, r2
   1d620:	d11a      	bne.n	1d658 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d622:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d624:	2a00      	cmp	r2, #0
   1d626:	d0fc      	beq.n	1d622 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d628:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1d62c:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1d62e:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1d632:	079c      	lsls	r4, r3, #30
   1d634:	d1f6      	bne.n	1d624 <memcpy+0x16>
   1d636:	0895      	lsrs	r5, r2, #2
   1d638:	00ac      	lsls	r4, r5, #2
   1d63a:	1f1e      	subs	r6, r3, #4
   1d63c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d63e:	42b9      	cmp	r1, r7
   1d640:	d105      	bne.n	1d64e <memcpy+0x40>
   1d642:	f06f 0603 	mvn.w	r6, #3
   1d646:	4423      	add	r3, r4
   1d648:	fb06 2205 	mla	r2, r6, r5, r2
   1d64c:	e7e5      	b.n	1d61a <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d64e:	f851 cb04 	ldr.w	ip, [r1], #4
   1d652:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1d656:	e7f2      	b.n	1d63e <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1d658:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d65c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d660:	e7dd      	b.n	1d61e <memcpy+0x10>

0001d662 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1d662:	4603      	mov	r3, r0
{
   1d664:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1d666:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d668:	079c      	lsls	r4, r3, #30
   1d66a:	d110      	bne.n	1d68e <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d66c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d670:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d674:	0894      	lsrs	r4, r2, #2
   1d676:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1d67a:	42b3      	cmp	r3, r6
   1d67c:	d10d      	bne.n	1d69a <memset+0x38>
   1d67e:	f06f 0503 	mvn.w	r5, #3
   1d682:	fb05 2404 	mla	r4, r5, r4, r2
   1d686:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d688:	42a3      	cmp	r3, r4
   1d68a:	d109      	bne.n	1d6a0 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d68c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d68e:	2a00      	cmp	r2, #0
   1d690:	d0fc      	beq.n	1d68c <memset+0x2a>
		*(d_byte++) = c_byte;
   1d692:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d696:	3a01      	subs	r2, #1
   1d698:	e7e6      	b.n	1d668 <memset+0x6>
		*(d_word++) = c_word;
   1d69a:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1d69e:	e7ec      	b.n	1d67a <memset+0x18>
		*(d_byte++) = c_byte;
   1d6a0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d6a4:	e7f0      	b.n	1d688 <memset+0x26>

0001d6a6 <_to_x>:
{
   1d6a6:	4603      	mov	r3, r0
   1d6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1d6aa:	fbb1 f7f2 	udiv	r7, r1, r2
   1d6ae:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d6b2:	2d09      	cmp	r5, #9
   1d6b4:	bf8c      	ite	hi
   1d6b6:	2627      	movhi	r6, #39	; 0x27
   1d6b8:	2600      	movls	r6, #0
   1d6ba:	461c      	mov	r4, r3
   1d6bc:	3530      	adds	r5, #48	; 0x30
   1d6be:	4435      	add	r5, r6
	} while (n);
   1d6c0:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d6c2:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1d6c6:	d206      	bcs.n	1d6d6 <_to_x+0x30>
	*buf = 0;
   1d6c8:	2200      	movs	r2, #0
   1d6ca:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1d6cc:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1d6ce:	4283      	cmp	r3, r0
   1d6d0:	d804      	bhi.n	1d6dc <_to_x+0x36>
}
   1d6d2:	4620      	mov	r0, r4
   1d6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1d6d6:	4639      	mov	r1, r7
   1d6d8:	4623      	mov	r3, r4
   1d6da:	e7e6      	b.n	1d6aa <_to_x+0x4>
		char tmp = *buf;
   1d6dc:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1d6de:	7801      	ldrb	r1, [r0, #0]
   1d6e0:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1d6e4:	f800 2b01 	strb.w	r2, [r0], #1
   1d6e8:	e7f1      	b.n	1d6ce <_to_x+0x28>

0001d6ea <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1d6ea:	2100      	movs	r1, #0
{
   1d6ec:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1d6ee:	e9d0 6500 	ldrd	r6, r5, [r0]
   1d6f2:	0872      	lsrs	r2, r6, #1
   1d6f4:	f006 0301 	and.w	r3, r6, #1
   1d6f8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1d6fc:	189b      	adds	r3, r3, r2
   1d6fe:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1d702:	eb44 0101 	adc.w	r1, r4, r1
   1d706:	e9c0 3100 	strd	r3, r1, [r0]
}
   1d70a:	bd70      	pop	{r4, r5, r6, pc}

0001d70c <_ldiv5>:
{
   1d70c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1d710:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d714:	2705      	movs	r7, #5
	rem += 2U;
   1d716:	3302      	adds	r3, #2
   1d718:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d71c:	fbb2 fef7 	udiv	lr, r2, r7
   1d720:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1d724:	fb07 f10e 	mul.w	r1, r7, lr
   1d728:	ebb3 060c 	subs.w	r6, r3, ip
   1d72c:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1d730:	08f2      	lsrs	r2, r6, #3
   1d732:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d736:	fbb2 f1f7 	udiv	r1, r2, r7
   1d73a:	00ca      	lsls	r2, r1, #3
		quot += q;
   1d73c:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d740:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1d744:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1d748:	fba2 2307 	umull	r2, r3, r2, r7
   1d74c:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d74e:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1d752:	eb18 0403 	adds.w	r4, r8, r3
   1d756:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1d75a:	e9c0 4500 	strd	r4, r5, [r0]
}
   1d75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d762 <_get_digit>:
	if (*digit_count > 0) {
   1d762:	680b      	ldr	r3, [r1, #0]
{
   1d764:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1d766:	2b00      	cmp	r3, #0
   1d768:	dd10      	ble.n	1d78c <_get_digit+0x2a>
		*digit_count -= 1;
   1d76a:	3b01      	subs	r3, #1
   1d76c:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1d76e:	210a      	movs	r1, #10
   1d770:	6802      	ldr	r2, [r0, #0]
   1d772:	6844      	ldr	r4, [r0, #4]
   1d774:	fba2 5601 	umull	r5, r6, r2, r1
   1d778:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1d77c:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d780:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d784:	0f31      	lsrs	r1, r6, #28
   1d786:	3130      	adds	r1, #48	; 0x30
}
   1d788:	4608      	mov	r0, r1
   1d78a:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d78c:	2130      	movs	r1, #48	; 0x30
   1d78e:	e7fb      	b.n	1d788 <_get_digit+0x26>

0001d790 <_stdout_hook_default>:
}
   1d790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d794:	4770      	bx	lr

0001d796 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1d796:	684b      	ldr	r3, [r1, #4]
   1d798:	2b01      	cmp	r3, #1
   1d79a:	dd07      	ble.n	1d7ac <sprintf_out+0x16>
		*(p->ptr) = c;
   1d79c:	680b      	ldr	r3, [r1, #0]
   1d79e:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1d7a0:	680b      	ldr	r3, [r1, #0]
   1d7a2:	3301      	adds	r3, #1
   1d7a4:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1d7a6:	684b      	ldr	r3, [r1, #4]
   1d7a8:	3b01      	subs	r3, #1
   1d7aa:	604b      	str	r3, [r1, #4]
}
   1d7ac:	2000      	movs	r0, #0
   1d7ae:	4770      	bx	lr

0001d7b0 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1d7b0:	b508      	push	{r3, lr}
	net_if_init();
   1d7b2:	f7f3 fbc5 	bl	10f40 <net_if_init>
	net_if_post_init();
   1d7b6:	f7f3 fbd7 	bl	10f68 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1d7ba:	2000      	movs	r0, #0
   1d7bc:	bd08      	pop	{r3, pc}

0001d7be <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d7be:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d7c2:	4108      	asrs	r0, r1
}
   1d7c4:	f000 0001 	and.w	r0, r0, #1
   1d7c8:	4770      	bx	lr

0001d7ca <l2_flags_get>:
	if (!iface) {
   1d7ca:	b128      	cbz	r0, 1d7d8 <l2_flags_get+0xe>
	return iface->if_dev->l2;
   1d7cc:	6803      	ldr	r3, [r0, #0]
   1d7ce:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1d7d0:	b113      	cbz	r3, 1d7d8 <l2_flags_get+0xe>
   1d7d2:	68db      	ldr	r3, [r3, #12]
   1d7d4:	b103      	cbz	r3, 1d7d8 <l2_flags_get+0xe>
		flags = net_if_l2(iface)->get_flags(iface);
   1d7d6:	4718      	bx	r3
}
   1d7d8:	2000      	movs	r0, #0
   1d7da:	4770      	bx	lr

0001d7dc <net_if_up>:
{
   1d7dc:	b510      	push	{r4, lr}
   1d7de:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1d7e0:	6800      	ldr	r0, [r0, #0]
   1d7e2:	2100      	movs	r1, #0
   1d7e4:	300c      	adds	r0, #12
   1d7e6:	f7ff ffea 	bl	1d7be <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d7ea:	b9d8      	cbnz	r0, 1d824 <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   1d7ec:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d7ee:	7e9a      	ldrb	r2, [r3, #26]
   1d7f0:	b14a      	cbz	r2, 1d806 <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d7f2:	330c      	adds	r3, #12
   1d7f4:	e8d3 2fef 	ldaex	r2, [r3]
   1d7f8:	f042 0201 	orr.w	r2, r2, #1
   1d7fc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d800:	2900      	cmp	r1, #0
   1d802:	d1f7      	bne.n	1d7f4 <net_if_up+0x18>
}
   1d804:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   1d806:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d808:	b973      	cbnz	r3, 1d828 <net_if_up+0x4c>
   1d80a:	6823      	ldr	r3, [r4, #0]
   1d80c:	330c      	adds	r3, #12
   1d80e:	e8d3 2fef 	ldaex	r2, [r3]
   1d812:	f042 0201 	orr.w	r2, r2, #1
   1d816:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d81a:	2900      	cmp	r1, #0
   1d81c:	d1f7      	bne.n	1d80e <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d81e:	4620      	mov	r0, r4
   1d820:	f7ff ffd3 	bl	1d7ca <l2_flags_get>
		return 0;
   1d824:	2000      	movs	r0, #0
   1d826:	e7ed      	b.n	1d804 <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d828:	689b      	ldr	r3, [r3, #8]
   1d82a:	2b00      	cmp	r3, #0
   1d82c:	d0ed      	beq.n	1d80a <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   1d82e:	2101      	movs	r1, #1
   1d830:	4620      	mov	r0, r4
   1d832:	4798      	blx	r3
	if (status < 0) {
   1d834:	2800      	cmp	r0, #0
   1d836:	dae8      	bge.n	1d80a <net_if_up+0x2e>
   1d838:	e7e4      	b.n	1d804 <net_if_up+0x28>

0001d83a <net_byte_to_hex>:
{
   1d83a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d83c:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   1d83e:	b1b3      	cbz	r3, 1d86e <net_byte_to_hex+0x34>
		if (val < 10) {
   1d840:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   1d842:	b274      	sxtb	r4, r6
   1d844:	bf86      	itte	hi
   1d846:	f1a2 030a 	subhi.w	r3, r2, #10
   1d84a:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   1d84c:	3430      	addls	r4, #48	; 0x30
   1d84e:	1c45      	adds	r5, r0, #1
   1d850:	7004      	strb	r4, [r0, #0]
   1d852:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1d856:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1d858:	b24b      	sxtb	r3, r1
   1d85a:	bf83      	ittte	hi
   1d85c:	3a0a      	subhi	r2, #10
   1d85e:	189b      	addhi	r3, r3, r2
   1d860:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   1d862:	3330      	addls	r3, #48	; 0x30
   1d864:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   1d866:	2300      	movs	r3, #0
   1d868:	706b      	strb	r3, [r5, #1]
   1d86a:	1c68      	adds	r0, r5, #1
}
   1d86c:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   1d86e:	2e00      	cmp	r6, #0
   1d870:	d1e6      	bne.n	1d840 <net_byte_to_hex+0x6>
   1d872:	4605      	mov	r5, r0
   1d874:	e7ed      	b.n	1d852 <net_byte_to_hex+0x18>

0001d876 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   1d876:	2801      	cmp	r0, #1
{
   1d878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d87c:	460c      	mov	r4, r1
   1d87e:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d880:	d128      	bne.n	1d8d4 <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   1d882:	4608      	mov	r0, r1
   1d884:	f7ff fe88 	bl	1d598 <strlen>
		for (i = 0; i < len; i++) {
   1d888:	4623      	mov	r3, r4
   1d88a:	4420      	add	r0, r4
   1d88c:	4298      	cmp	r0, r3
   1d88e:	d114      	bne.n	1d8ba <z_impl_net_addr_pton+0x44>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   1d890:	4630      	mov	r0, r6
   1d892:	2204      	movs	r2, #4
   1d894:	2100      	movs	r1, #0
   1d896:	f7ff fee4 	bl	1d662 <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d89a:	1e75      	subs	r5, r6, #1
   1d89c:	3603      	adds	r6, #3
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d89e:	4620      	mov	r0, r4
   1d8a0:	220a      	movs	r2, #10
   1d8a2:	a901      	add	r1, sp, #4
   1d8a4:	f7ff fd34 	bl	1d310 <strtol>

			src = ++endptr;
   1d8a8:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d8aa:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d8ae:	42b5      	cmp	r5, r6
			src = ++endptr;
   1d8b0:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d8b4:	d1f3      	bne.n	1d89e <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   1d8b6:	2000      	movs	r0, #0
   1d8b8:	e009      	b.n	1d8ce <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d8be:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d8c2:	2909      	cmp	r1, #9
   1d8c4:	d9e2      	bls.n	1d88c <z_impl_net_addr_pton+0x16>
   1d8c6:	2a2e      	cmp	r2, #46	; 0x2e
   1d8c8:	d0e0      	beq.n	1d88c <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   1d8ca:	f06f 0015 	mvn.w	r0, #21
}
   1d8ce:	b003      	add	sp, #12
   1d8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   1d8d4:	2802      	cmp	r0, #2
   1d8d6:	d1f8      	bne.n	1d8ca <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d8d8:	212e      	movs	r1, #46	; 0x2e
   1d8da:	4620      	mov	r0, r4
   1d8dc:	f7ff fe41 	bl	1d562 <strchr>
		if (*src == ':') {
   1d8e0:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d8e2:	2800      	cmp	r0, #0
   1d8e4:	bf14      	ite	ne
   1d8e6:	2706      	movne	r7, #6
   1d8e8:	2708      	moveq	r7, #8
		if (*src == ':') {
   1d8ea:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1d8ec:	bf08      	it	eq
   1d8ee:	3401      	addeq	r4, #1
		len = strlen(src);
   1d8f0:	4620      	mov	r0, r4
   1d8f2:	f7ff fe51 	bl	1d598 <strlen>
		for (i = 0; i < len; i++) {
   1d8f6:	2300      	movs	r3, #0
   1d8f8:	4283      	cmp	r3, r0
   1d8fa:	db21      	blt.n	1d940 <z_impl_net_addr_pton+0xca>
		for (i = 0; i < expected_groups; i++) {
   1d8fc:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d8fe:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   1d900:	2c00      	cmp	r4, #0
   1d902:	d0e2      	beq.n	1d8ca <z_impl_net_addr_pton+0x54>
   1d904:	7823      	ldrb	r3, [r4, #0]
   1d906:	2b00      	cmp	r3, #0
   1d908:	d0df      	beq.n	1d8ca <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
   1d90a:	2b3a      	cmp	r3, #58	; 0x3a
   1d90c:	d02d      	beq.n	1d96a <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d90e:	2210      	movs	r2, #16
   1d910:	2100      	movs	r1, #0
   1d912:	4620      	mov	r0, r4
   1d914:	f7ff fcfc 	bl	1d310 <strtol>
   1d918:	2210      	movs	r2, #16
   1d91a:	4680      	mov	r8, r0
   1d91c:	2100      	movs	r1, #0
   1d91e:	4620      	mov	r0, r4
   1d920:	f7ff fcf6 	bl	1d310 <strtol>
   1d924:	f3c8 2807 	ubfx	r8, r8, #8, #8
   1d928:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   1d92c:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   1d930:	213a      	movs	r1, #58	; 0x3a
   1d932:	4620      	mov	r0, r4
   1d934:	f7ff fe15 	bl	1d562 <strchr>
				if (src) {
   1d938:	4604      	mov	r4, r0
   1d93a:	b178      	cbz	r0, 1d95c <z_impl_net_addr_pton+0xe6>
			src++;
   1d93c:	3401      	adds	r4, #1
   1d93e:	e010      	b.n	1d962 <z_impl_net_addr_pton+0xec>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d940:	5ce2      	ldrb	r2, [r4, r3]
   1d942:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d946:	290a      	cmp	r1, #10
   1d948:	d906      	bls.n	1d958 <z_impl_net_addr_pton+0xe2>
   1d94a:	f022 0120 	bic.w	r1, r2, #32
   1d94e:	3941      	subs	r1, #65	; 0x41
   1d950:	2905      	cmp	r1, #5
   1d952:	d901      	bls.n	1d958 <z_impl_net_addr_pton+0xe2>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d954:	2a2e      	cmp	r2, #46	; 0x2e
   1d956:	d1b8      	bne.n	1d8ca <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
   1d958:	3301      	adds	r3, #1
   1d95a:	e7cd      	b.n	1d8f8 <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
   1d95c:	1e7b      	subs	r3, r7, #1
   1d95e:	42ab      	cmp	r3, r5
   1d960:	dcb3      	bgt.n	1d8ca <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
   1d962:	3501      	adds	r5, #1
   1d964:	42af      	cmp	r7, r5
   1d966:	dccb      	bgt.n	1d900 <z_impl_net_addr_pton+0x8a>
   1d968:	e013      	b.n	1d992 <z_impl_net_addr_pton+0x11c>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d96a:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   1d96e:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   1d972:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   1d976:	3501      	adds	r5, #1
   1d978:	42af      	cmp	r7, r5
   1d97a:	dcf6      	bgt.n	1d96a <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
   1d97c:	213a      	movs	r1, #58	; 0x3a
   1d97e:	4620      	mov	r0, r4
   1d980:	f7ff fdfd 	bl	1d57e <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d984:	42a0      	cmp	r0, r4
   1d986:	d11f      	bne.n	1d9c8 <z_impl_net_addr_pton+0x152>
   1d988:	2f06      	cmp	r7, #6
   1d98a:	d001      	beq.n	1d990 <z_impl_net_addr_pton+0x11a>
   1d98c:	7863      	ldrb	r3, [r4, #1]
   1d98e:	bb63      	cbnz	r3, 1d9ea <z_impl_net_addr_pton+0x174>
				src++;
   1d990:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   1d992:	2f06      	cmp	r7, #6
   1d994:	d18f      	bne.n	1d8b6 <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   1d996:	2500      	movs	r5, #0
   1d998:	360c      	adds	r6, #12
				if (!src || !*src) {
   1d99a:	2c00      	cmp	r4, #0
   1d99c:	d095      	beq.n	1d8ca <z_impl_net_addr_pton+0x54>
   1d99e:	7823      	ldrb	r3, [r4, #0]
   1d9a0:	2b00      	cmp	r3, #0
   1d9a2:	d092      	beq.n	1d8ca <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d9a4:	220a      	movs	r2, #10
   1d9a6:	2100      	movs	r1, #0
   1d9a8:	4620      	mov	r0, r4
   1d9aa:	f7ff fcb1 	bl	1d310 <strtol>
				src = strchr(src, '.');
   1d9ae:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d9b0:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   1d9b4:	4620      	mov	r0, r4
   1d9b6:	f7ff fdd4 	bl	1d562 <strchr>
				if (src) {
   1d9ba:	4604      	mov	r4, r0
   1d9bc:	b1b8      	cbz	r0, 1d9ee <z_impl_net_addr_pton+0x178>
					src++;
   1d9be:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   1d9c0:	3501      	adds	r5, #1
   1d9c2:	2d04      	cmp	r5, #4
   1d9c4:	d1e9      	bne.n	1d99a <z_impl_net_addr_pton+0x124>
   1d9c6:	e776      	b.n	1d8b6 <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
   1d9c8:	2f06      	cmp	r7, #6
   1d9ca:	d100      	bne.n	1d9ce <z_impl_net_addr_pton+0x158>
				tmp--;
   1d9cc:	3801      	subs	r0, #1
			i = expected_groups - 1;
   1d9ce:	1e7d      	subs	r5, r7, #1
   1d9d0:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1d9d2:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1d9d6:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1d9d8:	bf08      	it	eq
   1d9da:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   1d9de:	2d00      	cmp	r5, #0
   1d9e0:	f6ff af73 	blt.w	1d8ca <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
   1d9e4:	42a0      	cmp	r0, r4
   1d9e6:	d1f4      	bne.n	1d9d2 <z_impl_net_addr_pton+0x15c>
   1d9e8:	e7a8      	b.n	1d93c <z_impl_net_addr_pton+0xc6>
   1d9ea:	4620      	mov	r0, r4
   1d9ec:	e7ef      	b.n	1d9ce <z_impl_net_addr_pton+0x158>
					if (i < 3) {
   1d9ee:	2d03      	cmp	r5, #3
   1d9f0:	f47f af6b 	bne.w	1d8ca <z_impl_net_addr_pton+0x54>
   1d9f4:	e7e4      	b.n	1d9c0 <z_impl_net_addr_pton+0x14a>

0001d9f6 <gpio_nrfx_write>:
{
   1d9f6:	b510      	push	{r4, lr}
	return port->config->config_info;
   1d9f8:	6804      	ldr	r4, [r0, #0]
   1d9fa:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d9fc:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d9fe:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da00:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1da02:	69c0      	ldr	r0, [r0, #28]
   1da04:	d103      	bne.n	1da0e <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1da06:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1da08:	6060      	str	r0, [r4, #4]
}
   1da0a:	2000      	movs	r0, #0
   1da0c:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1da0e:	3300      	adds	r3, #0
   1da10:	f04f 0101 	mov.w	r1, #1
   1da14:	bf18      	it	ne
   1da16:	2301      	movne	r3, #1
   1da18:	40d0      	lsrs	r0, r2
   1da1a:	f000 0001 	and.w	r0, r0, #1
   1da1e:	4091      	lsls	r1, r2
   1da20:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1da22:	bf14      	ite	ne
   1da24:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1da26:	60e1      	streq	r1, [r4, #12]
   1da28:	e7ef      	b.n	1da0a <gpio_nrfx_write+0x14>

0001da2a <gpio_nrfx_read>:
{
   1da2a:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1da2c:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1da2e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da30:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1da32:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da34:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1da36:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1da38:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1da3a:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1da3c:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1da3e:	ea80 0004 	eor.w	r0, r0, r4
   1da42:	ea84 0405 	eor.w	r4, r4, r5
   1da46:	ea04 0406 	and.w	r4, r4, r6
   1da4a:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1da4e:	bf1c      	itt	ne
   1da50:	40d0      	lsrne	r0, r2
   1da52:	f000 0001 	andne.w	r0, r0, #1
   1da56:	6018      	str	r0, [r3, #0]
}
   1da58:	2000      	movs	r0, #0
   1da5a:	bd70      	pop	{r4, r5, r6, pc}

0001da5c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1da5c:	6883      	ldr	r3, [r0, #8]
{
   1da5e:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1da60:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1da62:	b158      	cbz	r0, 1da7c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1da64:	2400      	movs	r4, #0
   1da66:	4281      	cmp	r1, r0
   1da68:	d113      	bne.n	1da92 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1da6a:	6808      	ldr	r0, [r1, #0]
   1da6c:	b95c      	cbnz	r4, 1da86 <gpio_nrfx_manage_callback+0x2a>
   1da6e:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1da70:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1da72:	42a1      	cmp	r1, r4
   1da74:	d100      	bne.n	1da78 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1da76:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1da78:	2000      	movs	r0, #0
   1da7a:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1da7c:	b972      	cbnz	r2, 1da9c <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1da7e:	2000      	movs	r0, #0
}
   1da80:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1da82:	4628      	mov	r0, r5
   1da84:	e7ef      	b.n	1da66 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1da86:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1da88:	6858      	ldr	r0, [r3, #4]
   1da8a:	4281      	cmp	r1, r0
	list->tail = node;
   1da8c:	bf08      	it	eq
   1da8e:	605c      	streq	r4, [r3, #4]
   1da90:	e7f2      	b.n	1da78 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1da92:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1da94:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1da96:	2d00      	cmp	r5, #0
   1da98:	d1f3      	bne.n	1da82 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1da9a:	b13a      	cbz	r2, 1daac <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1da9c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1da9e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1daa0:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1daa2:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1daa4:	2800      	cmp	r0, #0
   1daa6:	d1ea      	bne.n	1da7e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1daa8:	6059      	str	r1, [r3, #4]
   1daaa:	e7e9      	b.n	1da80 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1daac:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1dab0:	e7e6      	b.n	1da80 <gpio_nrfx_manage_callback+0x24>

0001dab2 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1dab2:	2901      	cmp	r1, #1
{
   1dab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1dab8:	bf18      	it	ne
   1daba:	b2d4      	uxtbne	r4, r2
{
   1dabc:	4606      	mov	r6, r0
		to_pin   = pin;
   1dabe:	bf12      	itee	ne
   1dac0:	4625      	movne	r5, r4
		to_pin   = 31U;
   1dac2:	251f      	moveq	r5, #31
		from_pin = 0U;
   1dac4:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1dac6:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1daca:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1dacc:	42ac      	cmp	r4, r5
   1dace:	d902      	bls.n	1dad6 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1dad0:	2000      	movs	r0, #0
}
   1dad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1dad6:	68fb      	ldr	r3, [r7, #12]
   1dad8:	fa08 f204 	lsl.w	r2, r8, r4
   1dadc:	ea23 0302 	bic.w	r3, r3, r2
   1dae0:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1dae2:	4621      	mov	r1, r4
   1dae4:	4630      	mov	r0, r6
   1dae6:	f7f3 fb47 	bl	11178 <gpiote_pin_int_cfg>
		if (res != 0) {
   1daea:	2800      	cmp	r0, #0
   1daec:	d1f1      	bne.n	1dad2 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1daee:	3401      	adds	r4, #1
   1daf0:	b2e4      	uxtb	r4, r4
   1daf2:	e7eb      	b.n	1dacc <gpio_nrfx_pin_disable_callback+0x1a>

0001daf4 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1daf4:	2901      	cmp	r1, #1
{
   1daf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1dafa:	bf18      	it	ne
   1dafc:	b2d4      	uxtbne	r4, r2
{
   1dafe:	4606      	mov	r6, r0
		to_pin   = pin;
   1db00:	bf12      	itee	ne
   1db02:	4625      	movne	r5, r4
		to_pin   = 31U;
   1db04:	251f      	moveq	r5, #31
		from_pin = 0U;
   1db06:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db08:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1db0c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db0e:	42ac      	cmp	r4, r5
   1db10:	d902      	bls.n	1db18 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1db12:	2000      	movs	r0, #0
}
   1db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db18:	68fb      	ldr	r3, [r7, #12]
   1db1a:	fa08 f204 	lsl.w	r2, r8, r4
   1db1e:	4313      	orrs	r3, r2
   1db20:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1db22:	4621      	mov	r1, r4
   1db24:	4630      	mov	r0, r6
   1db26:	f7f3 fb27 	bl	11178 <gpiote_pin_int_cfg>
		if (res != 0) {
   1db2a:	2800      	cmp	r0, #0
   1db2c:	d1f2      	bne.n	1db14 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db2e:	3401      	adds	r4, #1
   1db30:	b2e4      	uxtb	r4, r4
   1db32:	e7ec      	b.n	1db0e <gpio_nrfx_pin_enable_callback+0x1a>

0001db34 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1db34:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1db36:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1db38:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1db3a:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   1db3c:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1db3e:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1db40:	b159      	cbz	r1, 1db5a <uarte_nrfx_isr_int+0x26>
   1db42:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1db46:	b141      	cbz	r1, 1db5a <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1db48:	f44f 7180 	mov.w	r1, #256	; 0x100
   1db4c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1db50:	2101      	movs	r1, #1
   1db52:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1db54:	2300      	movs	r3, #0
   1db56:	7393      	strb	r3, [r2, #14]
		return;
   1db58:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db5a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1db5e:	b111      	cbz	r1, 1db66 <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db60:	2100      	movs	r1, #0
   1db62:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1db66:	6813      	ldr	r3, [r2, #0]
   1db68:	b10b      	cbz	r3, 1db6e <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1db6a:	6850      	ldr	r0, [r2, #4]
   1db6c:	4718      	bx	r3
}
   1db6e:	4770      	bx	lr

0001db70 <uarte_nrfx_config_get>:
{
   1db70:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1db72:	6882      	ldr	r2, [r0, #8]
   1db74:	e892 0003 	ldmia.w	r2, {r0, r1}
   1db78:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1db7c:	2000      	movs	r0, #0
   1db7e:	4770      	bx	lr

0001db80 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1db80:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1db82:	689b      	ldr	r3, [r3, #8]
   1db84:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1db86:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1db8a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1db8e:	4770      	bx	lr

0001db90 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1db90:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1db92:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1db94:	689b      	ldr	r3, [r3, #8]
   1db96:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db98:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1db9c:	b138      	cbz	r0, 1dbae <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1db9e:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dba0:	2000      	movs	r0, #0
   1dba2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dba4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dba6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbaa:	601a      	str	r2, [r3, #0]
	return 0;
   1dbac:	4770      	bx	lr
		return -1;
   1dbae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1dbb2:	4770      	bx	lr

0001dbb4 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbb4:	2200      	movs	r2, #0
	return dev->config->config_info;
   1dbb6:	6803      	ldr	r3, [r0, #0]
{
   1dbb8:	b082      	sub	sp, #8
	return config->uarte_regs;
   1dbba:	689b      	ldr	r3, [r3, #8]
{
   1dbbc:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1dbc0:	681b      	ldr	r3, [r3, #0]
   1dbc2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1dbc6:	f10d 0207 	add.w	r2, sp, #7
   1dbca:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1dbce:	2201      	movs	r2, #1
   1dbd0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbd4:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbd6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dbda:	2900      	cmp	r1, #0
   1dbdc:	d0fb      	beq.n	1dbd6 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbde:	60da      	str	r2, [r3, #12]
}
   1dbe0:	b002      	add	sp, #8
   1dbe2:	4770      	bx	lr

0001dbe4 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1dbe4:	6803      	ldr	r3, [r0, #0]
{
   1dbe6:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1dbe8:	689b      	ldr	r3, [r3, #8]
   1dbea:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dbf0:	b1bb      	cbz	r3, 1dc22 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1dbf2:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1dbf4:	68ab      	ldr	r3, [r5, #8]
   1dbf6:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbf8:	2300      	movs	r3, #0
   1dbfa:	4290      	cmp	r0, r2
   1dbfc:	bfa8      	it	ge
   1dbfe:	4610      	movge	r0, r2
   1dc00:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1dc04:	68aa      	ldr	r2, [r5, #8]
   1dc06:	4283      	cmp	r3, r0
   1dc08:	6892      	ldr	r2, [r2, #8]
   1dc0a:	db06      	blt.n	1dc1a <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc0c:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1dc0e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1dc12:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc16:	60a3      	str	r3, [r4, #8]
}
   1dc18:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1dc1a:	5cce      	ldrb	r6, [r1, r3]
   1dc1c:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1dc1e:	3301      	adds	r3, #1
   1dc20:	e7f0      	b.n	1dc04 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1dc22:	4618      	mov	r0, r3
   1dc24:	e7f8      	b.n	1dc18 <uarte_nrfx_fifo_fill+0x34>

0001dc26 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1dc26:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dc28:	689b      	ldr	r3, [r3, #8]
   1dc2a:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc2c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1dc30:	b143      	cbz	r3, 1dc44 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1dc32:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc34:	2000      	movs	r0, #0
   1dc36:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc3a:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1dc3c:	7b1b      	ldrb	r3, [r3, #12]
   1dc3e:	700b      	strb	r3, [r1, #0]
   1dc40:	6010      	str	r0, [r2, #0]
   1dc42:	4770      	bx	lr
	int num_rx = 0;
   1dc44:	4618      	mov	r0, r3
}
   1dc46:	4770      	bx	lr

0001dc48 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1dc48:	2100      	movs	r1, #0
	return dev->config->config_info;
   1dc4a:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1dc4c:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1dc4e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   1dc50:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1dc52:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1dc54:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1dc56:	f44f 7280 	mov.w	r2, #256	; 0x100
   1dc5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dc5e:	4770      	bx	lr

0001dc60 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1dc60:	2201      	movs	r2, #1
   1dc62:	6883      	ldr	r3, [r0, #8]
   1dc64:	689b      	ldr	r3, [r3, #8]
   1dc66:	739a      	strb	r2, [r3, #14]
}
   1dc68:	4770      	bx	lr

0001dc6a <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1dc6a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dc6c:	689b      	ldr	r3, [r3, #8]
   1dc6e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc70:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1dc74:	b118      	cbz	r0, 1dc7e <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1dc76:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1dc7a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1dc7e:	4770      	bx	lr

0001dc80 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1dc80:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dc82:	689b      	ldr	r3, [r3, #8]
   1dc84:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc86:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1dc8a:	3000      	adds	r0, #0
   1dc8c:	bf18      	it	ne
   1dc8e:	2001      	movne	r0, #1
   1dc90:	4770      	bx	lr

0001dc92 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1dc92:	2210      	movs	r2, #16
	return dev->config->config_info;
   1dc94:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dc96:	689b      	ldr	r3, [r3, #8]
   1dc98:	681b      	ldr	r3, [r3, #0]
   1dc9a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dc9e:	4770      	bx	lr

0001dca0 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1dca0:	2210      	movs	r2, #16
	return dev->config->config_info;
   1dca2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dca4:	689b      	ldr	r3, [r3, #8]
   1dca6:	681b      	ldr	r3, [r3, #0]
   1dca8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dcac:	4770      	bx	lr

0001dcae <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1dcae:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1dcb2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcb4:	689b      	ldr	r3, [r3, #8]
   1dcb6:	681b      	ldr	r3, [r3, #0]
   1dcb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dcbc:	4770      	bx	lr

0001dcbe <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1dcbe:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1dcc2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcc4:	689b      	ldr	r3, [r3, #8]
   1dcc6:	681b      	ldr	r3, [r3, #0]
   1dcc8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dccc:	4770      	bx	lr

0001dcce <uarte_nrfx_irq_update>:
}
   1dcce:	2001      	movs	r0, #1
   1dcd0:	4770      	bx	lr

0001dcd2 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1dcd2:	6883      	ldr	r3, [r0, #8]
   1dcd4:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1dcd6:	e9c3 1200 	strd	r1, r2, [r3]
}
   1dcda:	4770      	bx	lr

0001dcdc <uarte_nrfx_irq_is_pending>:
{
   1dcdc:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1dcde:	6803      	ldr	r3, [r0, #0]
{
   1dce0:	4602      	mov	r2, r0
	return config->uarte_regs;
   1dce2:	689b      	ldr	r3, [r3, #8]
   1dce4:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1dce6:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1dcea:	05db      	lsls	r3, r3, #23
   1dcec:	d405      	bmi.n	1dcfa <uarte_nrfx_irq_is_pending+0x1e>
   1dcee:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1dcf2:	f010 0010 	ands.w	r0, r0, #16
   1dcf6:	d106      	bne.n	1dd06 <uarte_nrfx_irq_is_pending+0x2a>
}
   1dcf8:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1dcfa:	f7ff ffb6 	bl	1dc6a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1dcfe:	2800      	cmp	r0, #0
   1dd00:	d0f5      	beq.n	1dcee <uarte_nrfx_irq_is_pending+0x12>
		||
   1dd02:	2001      	movs	r0, #1
   1dd04:	e7f8      	b.n	1dcf8 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1dd06:	4610      	mov	r0, r2
   1dd08:	f7ff ffba 	bl	1dc80 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1dd0c:	3000      	adds	r0, #0
   1dd0e:	bf18      	it	ne
   1dd10:	2001      	movne	r0, #1
   1dd12:	e7f1      	b.n	1dcf8 <uarte_nrfx_irq_is_pending+0x1c>

0001dd14 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1dd14:	2000      	movs	r0, #0
   1dd16:	4770      	bx	lr

0001dd18 <entropy_cc310_rng_get_entropy>:
{
   1dd18:	b513      	push	{r0, r1, r4, lr}
   1dd1a:	4614      	mov	r4, r2
   1dd1c:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1dd1e:	aa01      	add	r2, sp, #4
   1dd20:	4621      	mov	r1, r4
   1dd22:	f7ea f965 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1dd26:	9b01      	ldr	r3, [sp, #4]
   1dd28:	429c      	cmp	r4, r3
}
   1dd2a:	bf18      	it	ne
   1dd2c:	f06f 0015 	mvnne.w	r0, #21
   1dd30:	b002      	add	sp, #8
   1dd32:	bd10      	pop	{r4, pc}

0001dd34 <z_errno>:
   1dd34:	f7fd b90a 	b.w	1af4c <z_impl_z_errno>

0001dd38 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1dd38:	4668      	mov	r0, sp
   1dd3a:	f020 0107 	bic.w	r1, r0, #7
   1dd3e:	468d      	mov	sp, r1
   1dd40:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1dd42:	f7f7 f81b 	bl	14d7c <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1dd46:	f7f1 fdc1 	bl	f8cc <_arch_isr_direct_pm>
   1dd4a:	f7f1 fd01 	bl	f750 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1dd4e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1dd52:	4685      	mov	sp, r0
   1dd54:	4770      	bx	lr

0001dd56 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1dd56:	4668      	mov	r0, sp
   1dd58:	f020 0107 	bic.w	r1, r0, #7
   1dd5c:	468d      	mov	sp, r1
   1dd5e:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1dd60:	f7f7 fc10 	bl	15584 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1dd64:	f7f1 fdb2 	bl	f8cc <_arch_isr_direct_pm>
   1dd68:	f7f1 fcf2 	bl	f750 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1dd6c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1dd70:	4685      	mov	sp, r0
   1dd72:	4770      	bx	lr

0001dd74 <trace_task_create>:
{
   1dd74:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1dd76:	201d      	movs	r0, #29
   1dd78:	2200      	movs	r2, #0
   1dd7a:	2106      	movs	r1, #6
   1dd7c:	f7f1 fd8e 	bl	f89c <z_arm_irq_priority_set>
}
   1dd80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1dd84:	201d      	movs	r0, #29
   1dd86:	f7f1 bd79 	b.w	f87c <arch_irq_enable>

0001dd8a <read_task_create>:
{
   1dd8a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1dd8c:	201c      	movs	r0, #28
   1dd8e:	2200      	movs	r2, #0
   1dd90:	2106      	movs	r1, #6
   1dd92:	f7f1 fd83 	bl	f89c <z_arm_irq_priority_set>
}
   1dd96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1dd9a:	201c      	movs	r0, #28
   1dd9c:	f7f1 bd6e 	b.w	f87c <arch_irq_enable>

0001dda0 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1dda0:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1dda4:	bf18      	it	ne
   1dda6:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1dda8:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1ddaa:	bf48      	it	mi
   1ddac:	f043 0308 	orrmi.w	r3, r3, #8
}
   1ddb0:	4618      	mov	r0, r3
   1ddb2:	4770      	bx	lr

0001ddb4 <z_to_nrf_family>:
	switch (z_family) {
   1ddb4:	2803      	cmp	r0, #3
   1ddb6:	d00f      	beq.n	1ddd8 <z_to_nrf_family+0x24>
   1ddb8:	d808      	bhi.n	1ddcc <z_to_nrf_family+0x18>
   1ddba:	2801      	cmp	r0, #1
   1ddbc:	d00e      	beq.n	1dddc <z_to_nrf_family+0x28>
   1ddbe:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1ddc0:	bf08      	it	eq
   1ddc2:	200a      	moveq	r0, #10
   1ddc4:	bf18      	it	ne
   1ddc6:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1ddca:	4770      	bx	lr
	switch (z_family) {
   1ddcc:	2866      	cmp	r0, #102	; 0x66
   1ddce:	d006      	beq.n	1ddde <z_to_nrf_family+0x2a>
   1ddd0:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1ddd2:	bf08      	it	eq
   1ddd4:	2001      	moveq	r0, #1
   1ddd6:	e7f5      	b.n	1ddc4 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1ddd8:	2005      	movs	r0, #5
   1ddda:	4770      	bx	lr
		return NRF_AF_INET;
   1dddc:	2002      	movs	r0, #2
}
   1ddde:	4770      	bx	lr

0001dde0 <z_to_nrf_protocol>:
	switch (proto) {
   1dde0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1dde4:	d01d      	beq.n	1de22 <z_to_nrf_protocol+0x42>
   1dde6:	dc08      	bgt.n	1ddfa <z_to_nrf_protocol+0x1a>
   1dde8:	2806      	cmp	r0, #6
   1ddea:	d01d      	beq.n	1de28 <z_to_nrf_protocol+0x48>
   1ddec:	2811      	cmp	r0, #17
   1ddee:	d01d      	beq.n	1de2c <z_to_nrf_protocol+0x4c>
   1ddf0:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1ddf2:	bf18      	it	ne
   1ddf4:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1ddf8:	4770      	bx	lr
	switch (proto) {
   1ddfa:	f240 2301 	movw	r3, #513	; 0x201
   1ddfe:	4298      	cmp	r0, r3
   1de00:	d015      	beq.n	1de2e <z_to_nrf_protocol+0x4e>
   1de02:	dc06      	bgt.n	1de12 <z_to_nrf_protocol+0x32>
   1de04:	f240 1311 	movw	r3, #273	; 0x111
   1de08:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1de0a:	bf08      	it	eq
   1de0c:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1de10:	e7ef      	b.n	1ddf2 <z_to_nrf_protocol+0x12>
	switch (proto) {
   1de12:	f240 2302 	movw	r3, #514	; 0x202
   1de16:	4298      	cmp	r0, r3
   1de18:	d009      	beq.n	1de2e <z_to_nrf_protocol+0x4e>
   1de1a:	f240 2303 	movw	r3, #515	; 0x203
   1de1e:	4298      	cmp	r0, r3
   1de20:	e7e7      	b.n	1ddf2 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1de22:	f44f 7082 	mov.w	r0, #260	; 0x104
   1de26:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1de28:	2001      	movs	r0, #1
   1de2a:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1de2c:	2002      	movs	r0, #2
}
   1de2e:	4770      	bx	lr

0001de30 <nrf91_bsdlib_socket_offload_init>:
}
   1de30:	2000      	movs	r0, #0
   1de32:	4770      	bx	lr

0001de34 <z_errno>:
   1de34:	f7fd b88a 	b.w	1af4c <z_impl_z_errno>

0001de38 <nrf91_socket_offload_freeaddrinfo>:
{
   1de38:	b538      	push	{r3, r4, r5, lr}
   1de3a:	4604      	mov	r4, r0
	while (next != NULL) {
   1de3c:	b904      	cbnz	r4, 1de40 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1de3e:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1de40:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1de42:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1de44:	f000 fd35 	bl	1e8b2 <k_free>
		k_free(this);
   1de48:	4620      	mov	r0, r4
   1de4a:	f000 fd32 	bl	1e8b2 <k_free>
		next = next->ai_next;
   1de4e:	462c      	mov	r4, r5
   1de50:	e7f4      	b.n	1de3c <nrf91_socket_offload_freeaddrinfo+0x4>

0001de52 <z_to_nrf_addrinfo_hints>:
{
   1de52:	b538      	push	{r3, r4, r5, lr}
   1de54:	460c      	mov	r4, r1
   1de56:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1de58:	2220      	movs	r2, #32
   1de5a:	2100      	movs	r1, #0
   1de5c:	4620      	mov	r0, r4
   1de5e:	f7ff fc00 	bl	1d662 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1de62:	2300      	movs	r3, #0
   1de64:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1de66:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1de68:	2b03      	cmp	r3, #3
   1de6a:	d003      	beq.n	1de74 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1de6c:	2b04      	cmp	r3, #4
   1de6e:	bf08      	it	eq
   1de70:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1de74:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1de76:	88a8      	ldrh	r0, [r5, #4]
   1de78:	f7ff ff9c 	bl	1ddb4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1de7c:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1de80:	d00b      	beq.n	1de9a <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1de82:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1de84:	68e8      	ldr	r0, [r5, #12]
   1de86:	f7ff ffab 	bl	1dde0 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1de8a:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1de8e:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1de90:	d003      	beq.n	1de9a <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1de92:	69a8      	ldr	r0, [r5, #24]
   1de94:	b108      	cbz	r0, 1de9a <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1de96:	61a0      	str	r0, [r4, #24]
	return 0;
   1de98:	2000      	movs	r0, #0
}
   1de9a:	bd38      	pop	{r3, r4, r5, pc}

0001de9c <nrf91_socket_offload_send>:
{
   1de9c:	b570      	push	{r4, r5, r6, lr}
   1de9e:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1dea0:	4618      	mov	r0, r3
{
   1dea2:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1dea4:	f7ff ff7c 	bl	1dda0 <z_to_nrf_flags>
   1dea8:	462a      	mov	r2, r5
   1deaa:	4603      	mov	r3, r0
   1deac:	4620      	mov	r0, r4
}
   1deae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1deb2:	f7f9 b98b 	b.w	171cc <nrf_send>

0001deb6 <nrf91_socket_offload_recv>:
{
   1deb6:	b570      	push	{r4, r5, r6, lr}
   1deb8:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1deba:	4618      	mov	r0, r3
{
   1debc:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1debe:	f7ff ff6f 	bl	1dda0 <z_to_nrf_flags>
   1dec2:	462a      	mov	r2, r5
   1dec4:	4603      	mov	r3, r0
   1dec6:	4620      	mov	r0, r4
}
   1dec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1decc:	f7f9 b9b4 	b.w	17238 <nrf_recv>

0001ded0 <nrf91_socket_offload_getsockopt>:
{
   1ded0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ded4:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1ded6:	2300      	movs	r3, #0
{
   1ded8:	b086      	sub	sp, #24
   1deda:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1dede:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1dee2:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1dee6:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1deea:	4607      	mov	r7, r0
   1deec:	460c      	mov	r4, r1
   1deee:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1def0:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1def2:	d002      	beq.n	1defa <nrf91_socket_offload_getsockopt+0x2a>
   1def4:	dc2b      	bgt.n	1df4e <nrf91_socket_offload_getsockopt+0x7e>
   1def6:	2901      	cmp	r1, #1
   1def8:	d13d      	bne.n	1df76 <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1defa:	aa02      	add	r2, sp, #8
   1defc:	4631      	mov	r1, r6
   1defe:	4620      	mov	r0, r4
   1df00:	f7f3 fe58 	bl	11bb4 <z_to_nrf_optname>
   1df04:	2800      	cmp	r0, #0
   1df06:	db36      	blt.n	1df76 <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1df08:	2c01      	cmp	r4, #1
   1df0a:	d128      	bne.n	1df5e <nrf91_socket_offload_getsockopt+0x8e>
   1df0c:	2e14      	cmp	r6, #20
   1df0e:	d126      	bne.n	1df5e <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1df10:	2308      	movs	r3, #8
   1df12:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1df14:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1df16:	aa03      	add	r2, sp, #12
   1df18:	9200      	str	r2, [sp, #0]
   1df1a:	4638      	mov	r0, r7
   1df1c:	9a02      	ldr	r2, [sp, #8]
   1df1e:	4621      	mov	r1, r4
   1df20:	f7f9 fa0a 	bl	17338 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1df24:	4607      	mov	r7, r0
   1df26:	b970      	cbnz	r0, 1df46 <nrf91_socket_offload_getsockopt+0x76>
   1df28:	b16d      	cbz	r5, 1df46 <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1df2a:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1df2c:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1df2e:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1df32:	d108      	bne.n	1df46 <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1df34:	2e04      	cmp	r6, #4
   1df36:	d114      	bne.n	1df62 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1df38:	6828      	ldr	r0, [r5, #0]
   1df3a:	f7f3 fd1f 	bl	1197c <bsd_os_errno_set>
				*(int *)optval = errno;
   1df3e:	f7ff ff79 	bl	1de34 <z_errno>
   1df42:	6803      	ldr	r3, [r0, #0]
   1df44:	602b      	str	r3, [r5, #0]
}
   1df46:	4638      	mov	r0, r7
   1df48:	b006      	add	sp, #24
   1df4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1df4e:	f240 2302 	movw	r3, #514	; 0x202
   1df52:	4299      	cmp	r1, r3
   1df54:	d0d1      	beq.n	1defa <nrf91_socket_offload_getsockopt+0x2a>
   1df56:	f240 2303 	movw	r3, #515	; 0x203
   1df5a:	4299      	cmp	r1, r3
   1df5c:	e7cc      	b.n	1def8 <nrf91_socket_offload_getsockopt+0x28>
   1df5e:	462b      	mov	r3, r5
   1df60:	e7d9      	b.n	1df16 <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1df62:	2e14      	cmp	r6, #20
   1df64:	d1ef      	bne.n	1df46 <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1df66:	9b04      	ldr	r3, [sp, #16]
   1df68:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1df6a:	9b05      	ldr	r3, [sp, #20]
   1df6c:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1df6e:	2308      	movs	r3, #8
   1df70:	f8c8 3000 	str.w	r3, [r8]
   1df74:	e7e7      	b.n	1df46 <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1df76:	f7ff ff5d 	bl	1de34 <z_errno>
   1df7a:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1df7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1df80:	6003      	str	r3, [r0, #0]
	return retval;
   1df82:	e7e0      	b.n	1df46 <nrf91_socket_offload_getsockopt+0x76>

0001df84 <nrf91_socket_offload_poll>:
{
   1df84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df86:	b091      	sub	sp, #68	; 0x44
   1df88:	4605      	mov	r5, r0
   1df8a:	460c      	mov	r4, r1
   1df8c:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1df8e:	2100      	movs	r1, #0
   1df90:	2240      	movs	r2, #64	; 0x40
   1df92:	4668      	mov	r0, sp
   1df94:	f7ff fb65 	bl	1d662 <memset>
	for (int i = 0; i < nfds; i++) {
   1df98:	466a      	mov	r2, sp
   1df9a:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1df9c:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1df9e:	42a1      	cmp	r1, r4
   1dfa0:	db0c      	blt.n	1dfbc <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1dfa2:	4632      	mov	r2, r6
   1dfa4:	4621      	mov	r1, r4
   1dfa6:	4668      	mov	r0, sp
   1dfa8:	f7f9 f9e6 	bl	17378 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1dfac:	2200      	movs	r2, #0
   1dfae:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1dfb0:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1dfb2:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1dfb4:	42a2      	cmp	r2, r4
   1dfb6:	db1a      	blt.n	1dfee <nrf91_socket_offload_poll+0x6a>
}
   1dfb8:	b011      	add	sp, #68	; 0x44
   1dfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1dfbc:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1dfc0:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1dfc4:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1dfc6:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1dfc8:	bf48      	it	mi
   1dfca:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1dfcc:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1dfd0:	bf44      	itt	mi
   1dfd2:	f043 0301 	orrmi.w	r3, r3, #1
   1dfd6:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1dfd8:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1dfda:	bf48      	it	mi
   1dfdc:	8893      	ldrhmi	r3, [r2, #4]
   1dfde:	f102 0208 	add.w	r2, r2, #8
   1dfe2:	bf44      	itt	mi
   1dfe4:	f043 0302 	orrmi.w	r3, r3, #2
   1dfe8:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1dfec:	e7d7      	b.n	1df9e <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1dfee:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1dff2:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1dff4:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1dff6:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1dff8:	bf48      	it	mi
   1dffa:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1dffc:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1dffe:	bf48      	it	mi
   1e000:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1e002:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1e006:	bf44      	itt	mi
   1e008:	f045 0504 	orrmi.w	r5, r5, #4
   1e00c:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1e00e:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1e010:	bf48      	it	mi
   1e012:	88dd      	ldrhmi	r5, [r3, #6]
   1e014:	f103 0308 	add.w	r3, r3, #8
   1e018:	bf44      	itt	mi
   1e01a:	f045 0508 	orrmi.w	r5, r5, #8
   1e01e:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1e022:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1e024:	bf42      	ittt	mi
   1e026:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1e02a:	f045 0520 	orrmi.w	r5, r5, #32
   1e02e:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1e032:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1e034:	bf42      	ittt	mi
   1e036:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1e03a:	f041 0110 	orrmi.w	r1, r1, #16
   1e03e:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1e042:	e7b7      	b.n	1dfb4 <nrf91_socket_offload_poll+0x30>

0001e044 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1e044:	f7f9 b924 	b.w	17290 <nrf_listen>

0001e048 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1e048:	f7f9 b896 	b.w	17178 <nrf_close>

0001e04c <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1e04c:	2903      	cmp	r1, #3
{
   1e04e:	b508      	push	{r3, lr}
	switch (cmd) {
   1e050:	d00b      	beq.n	1e06a <nrf91_socket_offload_fcntl+0x1e>
   1e052:	2904      	cmp	r1, #4
   1e054:	d111      	bne.n	1e07a <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1e056:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1e058:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1e05c:	d10d      	bne.n	1e07a <nrf91_socket_offload_fcntl+0x2e>
}
   1e05e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e062:	1392      	asrs	r2, r2, #14
   1e064:	2101      	movs	r1, #1
   1e066:	f7f9 b989 	b.w	1737c <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1e06a:	2200      	movs	r2, #0
   1e06c:	2102      	movs	r1, #2
   1e06e:	f7f9 f985 	bl	1737c <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1e072:	0380      	lsls	r0, r0, #14
   1e074:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1e078:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1e07a:	f7ff fedb 	bl	1de34 <z_errno>
   1e07e:	2316      	movs	r3, #22
   1e080:	6003      	str	r3, [r0, #0]
	return retval;
   1e082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e086:	e7f7      	b.n	1e078 <nrf91_socket_offload_fcntl+0x2c>

0001e088 <nrf91_socket_offload_recvfrom>:
{
   1e088:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e08a:	4605      	mov	r5, r0
   1e08c:	b08d      	sub	sp, #52	; 0x34
   1e08e:	4618      	mov	r0, r3
   1e090:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1e094:	4617      	mov	r7, r2
	if (from == NULL) {
   1e096:	f7ff fe83 	bl	1dda0 <z_to_nrf_flags>
   1e09a:	4603      	mov	r3, r0
   1e09c:	b94c      	cbnz	r4, 1e0b2 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e09e:	4628      	mov	r0, r5
   1e0a0:	e9cd 4400 	strd	r4, r4, [sp]
   1e0a4:	463a      	mov	r2, r7
   1e0a6:	f7f9 f8ab 	bl	17200 <nrf_recvfrom>
   1e0aa:	4605      	mov	r5, r0
}
   1e0ac:	4628      	mov	r0, r5
   1e0ae:	b00d      	add	sp, #52	; 0x34
   1e0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1e0b2:	2224      	movs	r2, #36	; 0x24
   1e0b4:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e0b6:	aa02      	add	r2, sp, #8
   1e0b8:	9201      	str	r2, [sp, #4]
   1e0ba:	aa03      	add	r2, sp, #12
   1e0bc:	9200      	str	r2, [sp, #0]
   1e0be:	4628      	mov	r0, r5
   1e0c0:	463a      	mov	r2, r7
   1e0c2:	f7f9 f89d 	bl	17200 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e0c6:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e0c8:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e0ca:	2b02      	cmp	r3, #2
   1e0cc:	d109      	bne.n	1e0e2 <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1e0ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e0d2:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e0d4:	2301      	movs	r3, #1
   1e0d6:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e0d8:	9b06      	ldr	r3, [sp, #24]
   1e0da:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1e0dc:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1e0de:	6033      	str	r3, [r6, #0]
	return retval;
   1e0e0:	e7e4      	b.n	1e0ac <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1e0e2:	2b0a      	cmp	r3, #10
   1e0e4:	d1e2      	bne.n	1e0ac <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1e0e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1e0ea:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1e0ec:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1e0ee:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e0f0:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1e0f2:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e0f6:	a907      	add	r1, sp, #28
   1e0f8:	f7ff fa89 	bl	1d60e <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e0fe:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1e100:	2318      	movs	r3, #24
   1e102:	e7ec      	b.n	1e0de <nrf91_socket_offload_recvfrom+0x56>

0001e104 <nrf91_socket_offload_connect>:
{
   1e104:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e106:	880b      	ldrh	r3, [r1, #0]
{
   1e108:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e10a:	2b01      	cmp	r3, #1
{
   1e10c:	4606      	mov	r6, r0
   1e10e:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e110:	d10e      	bne.n	1e130 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e112:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e114:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e116:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e11a:	2302      	movs	r3, #2
   1e11c:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e11e:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e120:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e124:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1e126:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e128:	f7f9 f8a0 	bl	1726c <nrf_connect>
}
   1e12c:	b00a      	add	sp, #40	; 0x28
   1e12e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e130:	2b02      	cmp	r3, #2
   1e132:	d112      	bne.n	1e15a <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e134:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e136:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e138:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e13c:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e13e:	2210      	movs	r2, #16
   1e140:	3104      	adds	r1, #4
   1e142:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e144:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e146:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e14a:	f7ff fa60 	bl	1d60e <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e14e:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e150:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e152:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e154:	a901      	add	r1, sp, #4
   1e156:	4630      	mov	r0, r6
   1e158:	e7e6      	b.n	1e128 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1e15a:	f7f9 f887 	bl	1726c <nrf_connect>
		if (retval < 0) {
   1e15e:	2800      	cmp	r0, #0
   1e160:	dae4      	bge.n	1e12c <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1e162:	f7ff fe67 	bl	1de34 <z_errno>
   1e166:	2323      	movs	r3, #35	; 0x23
   1e168:	6003      	str	r3, [r0, #0]
   1e16a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e16e:	e7dd      	b.n	1e12c <nrf91_socket_offload_connect+0x28>

0001e170 <nrf91_socket_offload_socket>:
{
   1e170:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1e172:	b280      	uxth	r0, r0
   1e174:	f7ff fe1e 	bl	1ddb4 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1e178:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1e17c:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1e17e:	d106      	bne.n	1e18e <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1e180:	f7ff fe58 	bl	1de34 <z_errno>
   1e184:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1e186:	6003      	str	r3, [r0, #0]
}
   1e188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e18c:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1e18e:	2903      	cmp	r1, #3
   1e190:	d003      	beq.n	1e19a <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1e192:	2904      	cmp	r1, #4
   1e194:	bf08      	it	eq
   1e196:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1e19a:	4610      	mov	r0, r2
   1e19c:	f7ff fe20 	bl	1dde0 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1e1a0:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1e1a4:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1e1a6:	d103      	bne.n	1e1b0 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1e1a8:	f7ff fe44 	bl	1de34 <z_errno>
   1e1ac:	232b      	movs	r3, #43	; 0x2b
   1e1ae:	e7ea      	b.n	1e186 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1e1b0:	4620      	mov	r0, r4
}
   1e1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1e1b6:	f7f8 bfcd 	b.w	17154 <nrf_socket>

0001e1ba <nrf91_socket_offload_accept>:
{
   1e1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1e1bc:	2708      	movs	r7, #8
{
   1e1be:	b085      	sub	sp, #20
   1e1c0:	460c      	mov	r4, r1
   1e1c2:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1e1c4:	eb0d 0107 	add.w	r1, sp, r7
   1e1c8:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1e1ca:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1e1cc:	f7f9 f870 	bl	172b0 <nrf_accept>
	if (retval < 0) {
   1e1d0:	1e05      	subs	r5, r0, #0
   1e1d2:	db23      	blt.n	1e21c <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1e1d4:	9b03      	ldr	r3, [sp, #12]
   1e1d6:	2b02      	cmp	r3, #2
   1e1d8:	d10a      	bne.n	1e1f0 <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1e1da:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1e1de:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1e1e0:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e1e2:	2301      	movs	r3, #1
   1e1e4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e1e6:	9b05      	ldr	r3, [sp, #20]
   1e1e8:	6063      	str	r3, [r4, #4]
}
   1e1ea:	4628      	mov	r0, r5
   1e1ec:	b005      	add	sp, #20
   1e1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1e1f0:	2b0a      	cmp	r3, #10
   1e1f2:	d10f      	bne.n	1e214 <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1e1f4:	2318      	movs	r3, #24
   1e1f6:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1e1f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1e1fc:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1e1fe:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1e200:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e202:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1e204:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e208:	a906      	add	r1, sp, #24
   1e20a:	f7ff fa00 	bl	1d60e <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e210:	7523      	strb	r3, [r4, #20]
   1e212:	e7ea      	b.n	1e1ea <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1e214:	f7ff fe0e 	bl	1de34 <z_errno>
   1e218:	2323      	movs	r3, #35	; 0x23
   1e21a:	6003      	str	r3, [r0, #0]
		return -1;
   1e21c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e220:	e7e3      	b.n	1e1ea <nrf91_socket_offload_accept+0x30>

0001e222 <nrf91_socket_offload_getaddrinfo>:
{
   1e222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e226:	4614      	mov	r4, r2
   1e228:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1e22a:	2100      	movs	r1, #0
{
   1e22c:	b093      	sub	sp, #76	; 0x4c
   1e22e:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e230:	2220      	movs	r2, #32
   1e232:	a802      	add	r0, sp, #8
{
   1e234:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1e236:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e238:	f7ff fa13 	bl	1d662 <memset>
	if (hints != NULL) {
   1e23c:	b194      	cbz	r4, 1e264 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1e23e:	a902      	add	r1, sp, #8
   1e240:	4620      	mov	r0, r4
   1e242:	f7ff fe06 	bl	1de52 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1e246:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1e24a:	f000 80bf 	beq.w	1e3cc <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1e24e:	302f      	adds	r0, #47	; 0x2f
   1e250:	f000 80bf 	beq.w	1e3d2 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1e254:	69e0      	ldr	r0, [r4, #28]
   1e256:	b120      	cbz	r0, 1e262 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1e258:	ac0a      	add	r4, sp, #40	; 0x28
   1e25a:	4621      	mov	r1, r4
   1e25c:	f7ff fdf9 	bl	1de52 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1e260:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1e262:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1e264:	4631      	mov	r1, r6
   1e266:	4628      	mov	r0, r5
   1e268:	ab01      	add	r3, sp, #4
   1e26a:	4622      	mov	r2, r4
   1e26c:	f7f9 f880 	bl	17370 <nrf_getaddrinfo>
	*res = NULL;
   1e270:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1e272:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1e274:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1e278:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e27c:	4605      	mov	r5, r0
   1e27e:	2800      	cmp	r0, #0
   1e280:	d04a      	beq.n	1e318 <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1e282:	f8d8 0000 	ldr.w	r0, [r8]
   1e286:	f7ff fdd7 	bl	1de38 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1e28a:	2300      	movs	r3, #0
   1e28c:	f8c8 3000 	str.w	r3, [r8]
   1e290:	e044      	b.n	1e31c <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1e292:	2020      	movs	r0, #32
   1e294:	f7fd f8a8 	bl	1b3e8 <k_malloc>
		if (next_z_res == NULL) {
   1e298:	4604      	mov	r4, r0
   1e29a:	2800      	cmp	r0, #0
   1e29c:	f000 8091 	beq.w	1e3c2 <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1e2a0:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e2a2:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1e2a4:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1e2a6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1e2aa:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e2ac:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1e2ae:	d03c      	beq.n	1e32a <nrf91_socket_offload_getaddrinfo+0x108>
   1e2b0:	dc09      	bgt.n	1e2c6 <nrf91_socket_offload_getaddrinfo+0xa4>
   1e2b2:	2a01      	cmp	r2, #1
   1e2b4:	d03b      	beq.n	1e32e <nrf91_socket_offload_getaddrinfo+0x10c>
   1e2b6:	2a02      	cmp	r2, #2
   1e2b8:	d03b      	beq.n	1e332 <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1e2ba:	4620      	mov	r0, r4
   1e2bc:	f000 faf9 	bl	1e8b2 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1e2c0:	f06f 0508 	mvn.w	r5, #8
   1e2c4:	e7dd      	b.n	1e282 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1e2c6:	2a0a      	cmp	r2, #10
   1e2c8:	d035      	beq.n	1e336 <nrf91_socket_offload_getaddrinfo+0x114>
   1e2ca:	2a66      	cmp	r2, #102	; 0x66
   1e2cc:	d1f5      	bne.n	1e2ba <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1e2ce:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1e2d0:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e2d2:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1e2d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1e2d8:	d04e      	beq.n	1e378 <nrf91_socket_offload_getaddrinfo+0x156>
   1e2da:	dc2e      	bgt.n	1e33a <nrf91_socket_offload_getaddrinfo+0x118>
   1e2dc:	2b01      	cmp	r3, #1
   1e2de:	d050      	beq.n	1e382 <nrf91_socket_offload_getaddrinfo+0x160>
   1e2e0:	2b02      	cmp	r3, #2
   1e2e2:	d04c      	beq.n	1e37e <nrf91_socket_offload_getaddrinfo+0x15c>
   1e2e4:	2b00      	cmp	r3, #0
   1e2e6:	d130      	bne.n	1e34a <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e2e8:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e2ea:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e2ec:	d14b      	bne.n	1e386 <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1e2ee:	2008      	movs	r0, #8
   1e2f0:	f7fd f87a 	bl	1b3e8 <k_malloc>
   1e2f4:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e2f6:	2800      	cmp	r0, #0
   1e2f8:	d060      	beq.n	1e3bc <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1e2fa:	2308      	movs	r3, #8
   1e2fc:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1e2fe:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1e300:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e302:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1e304:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1e306:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e308:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1e30a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1e30c:	2f00      	cmp	r7, #0
   1e30e:	d15b      	bne.n	1e3c8 <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1e310:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1e314:	4627      	mov	r7, r4
   1e316:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e318:	2e00      	cmp	r6, #0
   1e31a:	d1ba      	bne.n	1e292 <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1e31c:	9801      	ldr	r0, [sp, #4]
   1e31e:	f7f9 f829 	bl	17374 <nrf_freeaddrinfo>
}
   1e322:	4628      	mov	r0, r5
   1e324:	b013      	add	sp, #76	; 0x4c
   1e326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1e32a:	2303      	movs	r3, #3
   1e32c:	e7d0      	b.n	1e2d0 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1e32e:	2367      	movs	r3, #103	; 0x67
   1e330:	e7ce      	b.n	1e2d0 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1e332:	2301      	movs	r3, #1
   1e334:	e7cc      	b.n	1e2d0 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1e336:	2302      	movs	r3, #2
   1e338:	e7ca      	b.n	1e2d0 <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1e33a:	f240 2101 	movw	r1, #513	; 0x201
   1e33e:	428b      	cmp	r3, r1
   1e340:	d0d2      	beq.n	1e2e8 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e342:	dc0d      	bgt.n	1e360 <nrf91_socket_offload_getaddrinfo+0x13e>
   1e344:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1e348:	d013      	beq.n	1e372 <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e34a:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1e34e:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1e350:	2300      	movs	r3, #0
   1e352:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1e354:	4620      	mov	r0, r4
   1e356:	f000 faac 	bl	1e8b2 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1e35a:	f06f 0506 	mvn.w	r5, #6
   1e35e:	e790      	b.n	1e282 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1e360:	f240 2102 	movw	r1, #514	; 0x202
   1e364:	428b      	cmp	r3, r1
   1e366:	d0bf      	beq.n	1e2e8 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e368:	f240 2103 	movw	r1, #515	; 0x203
   1e36c:	428b      	cmp	r3, r1
   1e36e:	d0bb      	beq.n	1e2e8 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e370:	e7eb      	b.n	1e34a <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e372:	f240 1311 	movw	r3, #273	; 0x111
   1e376:	e7b7      	b.n	1e2e8 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e378:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e37c:	e7b4      	b.n	1e2e8 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e37e:	2311      	movs	r3, #17
   1e380:	e7b2      	b.n	1e2e8 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e382:	2306      	movs	r3, #6
   1e384:	e7b0      	b.n	1e2e8 <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1e386:	2a0a      	cmp	r2, #10
   1e388:	d1e4      	bne.n	1e354 <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e38a:	2018      	movs	r0, #24
   1e38c:	f7fd f82c 	bl	1b3e8 <k_malloc>
   1e390:	4682      	mov	sl, r0
   1e392:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e394:	b190      	cbz	r0, 1e3bc <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e396:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e398:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1e39a:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e39e:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1e3a0:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e3a4:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1e3a8:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1e3aa:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e3ae:	f7ff f92e 	bl	1d60e <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e3b2:	f8db 3020 	ldr.w	r3, [fp, #32]
   1e3b6:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1e3ba:	e7a7      	b.n	1e30c <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1e3bc:	4620      	mov	r0, r4
   1e3be:	f000 fa78 	bl	1e8b2 <k_free>
			retval = DNS_EAI_MEMORY;
   1e3c2:	f06f 0509 	mvn.w	r5, #9
   1e3c6:	e75c      	b.n	1e282 <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1e3c8:	61fc      	str	r4, [r7, #28]
   1e3ca:	e7a3      	b.n	1e314 <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1e3cc:	f06f 0506 	mvn.w	r5, #6
   1e3d0:	e7a7      	b.n	1e322 <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1e3d2:	f06f 0508 	mvn.w	r5, #8
   1e3d6:	e7a4      	b.n	1e322 <nrf91_socket_offload_getaddrinfo+0x100>

0001e3d8 <nrf91_socket_offload_setsockopt>:
{
   1e3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1e3dc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1e3e0:	b086      	sub	sp, #24
   1e3e2:	4680      	mov	r8, r0
   1e3e4:	460c      	mov	r4, r1
   1e3e6:	4617      	mov	r7, r2
   1e3e8:	461d      	mov	r5, r3
   1e3ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1e3ec:	d002      	beq.n	1e3f4 <nrf91_socket_offload_setsockopt+0x1c>
   1e3ee:	dc1c      	bgt.n	1e42a <nrf91_socket_offload_setsockopt+0x52>
   1e3f0:	2901      	cmp	r1, #1
   1e3f2:	d122      	bne.n	1e43a <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1e3f4:	aa03      	add	r2, sp, #12
   1e3f6:	4639      	mov	r1, r7
   1e3f8:	4620      	mov	r0, r4
   1e3fa:	f7f3 fbdb 	bl	11bb4 <z_to_nrf_optname>
   1e3fe:	2800      	cmp	r0, #0
   1e400:	db1b      	blt.n	1e43a <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1e402:	2c01      	cmp	r4, #1
   1e404:	d107      	bne.n	1e416 <nrf91_socket_offload_setsockopt+0x3e>
   1e406:	2f14      	cmp	r7, #20
   1e408:	d105      	bne.n	1e416 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1e40a:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1e40c:	682b      	ldr	r3, [r5, #0]
   1e40e:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e410:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1e412:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e414:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1e416:	9600      	str	r6, [sp, #0]
   1e418:	462b      	mov	r3, r5
   1e41a:	9a03      	ldr	r2, [sp, #12]
   1e41c:	4621      	mov	r1, r4
   1e41e:	4640      	mov	r0, r8
   1e420:	f7f8 ff6e 	bl	17300 <nrf_setsockopt>
}
   1e424:	b006      	add	sp, #24
   1e426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1e42a:	f240 2302 	movw	r3, #514	; 0x202
   1e42e:	4299      	cmp	r1, r3
   1e430:	d0e0      	beq.n	1e3f4 <nrf91_socket_offload_setsockopt+0x1c>
   1e432:	f240 2303 	movw	r3, #515	; 0x203
   1e436:	4299      	cmp	r1, r3
   1e438:	e7db      	b.n	1e3f2 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1e43a:	f7ff fcfb 	bl	1de34 <z_errno>
   1e43e:	232a      	movs	r3, #42	; 0x2a
   1e440:	6003      	str	r3, [r0, #0]
   1e442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e446:	e7ed      	b.n	1e424 <nrf91_socket_offload_setsockopt+0x4c>

0001e448 <nrf91_socket_offload_sendto>:
{
   1e448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e44c:	b08d      	sub	sp, #52	; 0x34
   1e44e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1e450:	4605      	mov	r5, r0
   1e452:	460e      	mov	r6, r1
   1e454:	4617      	mov	r7, r2
   1e456:	4698      	mov	r8, r3
	if (to == NULL) {
   1e458:	b96c      	cbnz	r4, 1e476 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e45a:	4618      	mov	r0, r3
   1e45c:	f7ff fca0 	bl	1dda0 <z_to_nrf_flags>
   1e460:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e464:	4603      	mov	r3, r0
   1e466:	463a      	mov	r2, r7
   1e468:	4631      	mov	r1, r6
   1e46a:	4628      	mov	r0, r5
   1e46c:	f7f8 fe92 	bl	17194 <nrf_sendto>
}
   1e470:	b00d      	add	sp, #52	; 0x34
   1e472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1e476:	8823      	ldrh	r3, [r4, #0]
   1e478:	2b01      	cmp	r3, #1
   1e47a:	d110      	bne.n	1e49e <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1e47c:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e47e:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1e480:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1e484:	2302      	movs	r3, #2
   1e486:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e488:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e48a:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e48c:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e490:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e492:	f7ff fc85 	bl	1dda0 <z_to_nrf_flags>
   1e496:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e498:	ab03      	add	r3, sp, #12
   1e49a:	9300      	str	r3, [sp, #0]
   1e49c:	e7e2      	b.n	1e464 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1e49e:	2b02      	cmp	r3, #2
   1e4a0:	d115      	bne.n	1e4ce <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1e4a2:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e4a4:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e4a8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e4ac:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e4ae:	2210      	movs	r2, #16
   1e4b0:	1d21      	adds	r1, r4, #4
   1e4b2:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1e4b4:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e4b6:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e4ba:	f7ff f8a8 	bl	1d60e <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e4be:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e4c0:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e4c2:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e4c4:	f7ff fc6c 	bl	1dda0 <z_to_nrf_flags>
   1e4c8:	f8cd 9004 	str.w	r9, [sp, #4]
   1e4cc:	e7e4      	b.n	1e498 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1e4ce:	f7ff fcb1 	bl	1de34 <z_errno>
   1e4d2:	2323      	movs	r3, #35	; 0x23
   1e4d4:	6003      	str	r3, [r0, #0]
	return retval;
   1e4d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4da:	e7c9      	b.n	1e470 <nrf91_socket_offload_sendto+0x28>

0001e4dc <nrf91_socket_offload_bind>:
{
   1e4dc:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e4de:	880b      	ldrh	r3, [r1, #0]
{
   1e4e0:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e4e2:	2b01      	cmp	r3, #1
{
   1e4e4:	4606      	mov	r6, r0
   1e4e6:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e4e8:	d10e      	bne.n	1e508 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e4ea:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e4ec:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e4ee:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e4f2:	2302      	movs	r3, #2
   1e4f4:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e4f6:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e4f8:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e4fc:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1e4fe:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e500:	f7f8 feec 	bl	172dc <nrf_bind>
}
   1e504:	b00a      	add	sp, #40	; 0x28
   1e506:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e508:	2b02      	cmp	r3, #2
   1e50a:	d112      	bne.n	1e532 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e50c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e50e:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e510:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e514:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e516:	2210      	movs	r2, #16
   1e518:	3104      	adds	r1, #4
   1e51a:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e51c:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e51e:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e522:	f7ff f874 	bl	1d60e <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e526:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e528:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e52a:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e52c:	a901      	add	r1, sp, #4
   1e52e:	4630      	mov	r0, r6
   1e530:	e7e6      	b.n	1e500 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1e532:	f7ff fc7f 	bl	1de34 <z_errno>
   1e536:	2323      	movs	r3, #35	; 0x23
   1e538:	6003      	str	r3, [r0, #0]
   1e53a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e53e:	e7e1      	b.n	1e504 <nrf91_socket_offload_bind+0x28>

0001e540 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1e540:	280d      	cmp	r0, #13
   1e542:	d004      	beq.n	1e54e <is_lfcr+0xe>
   1e544:	f1a0 030a 	sub.w	r3, r0, #10
   1e548:	4258      	negs	r0, r3
   1e54a:	4158      	adcs	r0, r3
   1e54c:	4770      	bx	lr
		return true;
   1e54e:	2001      	movs	r0, #1
}
   1e550:	4770      	bx	lr

0001e552 <skip_command_prefix>:
{
   1e552:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1e554:	6802      	ldr	r2, [r0, #0]
{
   1e556:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1e558:	1c93      	adds	r3, r2, #2
   1e55a:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1e55c:	7894      	ldrb	r4, [r2, #2]
   1e55e:	4620      	mov	r0, r4
   1e560:	f7ff ffee 	bl	1e540 <is_lfcr>
   1e564:	b910      	cbnz	r0, 1e56c <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e566:	b10c      	cbz	r4, 1e56c <skip_command_prefix+0x1a>
	(*cmd)++;
   1e568:	3203      	adds	r2, #3
   1e56a:	600a      	str	r2, [r1, #0]
}
   1e56c:	bd10      	pop	{r4, pc}

0001e56e <is_valid_notification_char>:
	return (int)((chr >= (int)'a' && chr <=
   1e56e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e572:	2b19      	cmp	r3, #25
   1e574:	bf98      	it	ls
   1e576:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1e578:	3841      	subs	r0, #65	; 0x41
   1e57a:	b2c0      	uxtb	r0, r0
}
   1e57c:	2819      	cmp	r0, #25
   1e57e:	bf8c      	ite	hi
   1e580:	2000      	movhi	r0, #0
   1e582:	2001      	movls	r0, #1
   1e584:	4770      	bx	lr

0001e586 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e586:	b510      	push	{r4, lr}
   1e588:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e58a:	f7ff f805 	bl	1d598 <strlen>
   1e58e:	2801      	cmp	r0, #1
   1e590:	d91e      	bls.n	1e5d0 <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1e592:	7823      	ldrb	r3, [r4, #0]
   1e594:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e598:	2a19      	cmp	r2, #25
   1e59a:	bf98      	it	ls
   1e59c:	3b20      	subls	r3, #32
   1e59e:	2b41      	cmp	r3, #65	; 0x41
   1e5a0:	d116      	bne.n	1e5d0 <is_command+0x4a>
   1e5a2:	7863      	ldrb	r3, [r4, #1]
   1e5a4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e5a8:	2a19      	cmp	r2, #25
   1e5aa:	bf98      	it	ls
   1e5ac:	3b20      	subls	r3, #32
   1e5ae:	2b54      	cmp	r3, #84	; 0x54
   1e5b0:	d10e      	bne.n	1e5d0 <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e5b2:	78a2      	ldrb	r2, [r4, #2]
   1e5b4:	2a25      	cmp	r2, #37	; 0x25
   1e5b6:	d00d      	beq.n	1e5d4 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1e5b8:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e5bc:	2b23      	cmp	r3, #35	; 0x23
   1e5be:	d009      	beq.n	1e5d4 <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e5c0:	4610      	mov	r0, r2
   1e5c2:	f7ff ffbd 	bl	1e540 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e5c6:	b910      	cbnz	r0, 1e5ce <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e5c8:	fab2 f082 	clz	r0, r2
   1e5cc:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e5ce:	bd10      	pop	{r4, pc}
		return false;
   1e5d0:	2000      	movs	r0, #0
   1e5d2:	e7fc      	b.n	1e5ce <is_command+0x48>
		return true;
   1e5d4:	2001      	movs	r0, #1
   1e5d6:	e7fa      	b.n	1e5ce <is_command+0x48>

0001e5d8 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1e5d8:	6813      	ldr	r3, [r2, #0]
   1e5da:	f7f4 b83f 	b.w	1265c <at_parser_max_params_from_str>

0001e5de <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   1e5de:	b507      	push	{r0, r1, r2, lr}
   1e5e0:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   1e5e2:	f7ff ffd0 	bl	1e586 <is_command>
   1e5e6:	b178      	cbz	r0, 1e608 <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   1e5e8:	a801      	add	r0, sp, #4
   1e5ea:	f7ff ffb2 	bl	1e552 <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   1e5ee:	9901      	ldr	r1, [sp, #4]
   1e5f0:	780a      	ldrb	r2, [r1, #0]
   1e5f2:	4610      	mov	r0, r2
   1e5f4:	f7ff ffbb 	bl	1e56e <is_valid_notification_char>
   1e5f8:	b948      	cbnz	r0, 1e60e <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   1e5fa:	2a3d      	cmp	r2, #61	; 0x3d
   1e5fc:	d114      	bne.n	1e628 <at_parser_cmd_type_get+0x4a>
   1e5fe:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   1e600:	2b3f      	cmp	r3, #63	; 0x3f
   1e602:	bf14      	ite	ne
   1e604:	2001      	movne	r0, #1
   1e606:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   1e608:	b003      	add	sp, #12
   1e60a:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   1e60e:	3101      	adds	r1, #1
   1e610:	9101      	str	r1, [sp, #4]
   1e612:	e7ec      	b.n	1e5ee <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   1e614:	4610      	mov	r0, r2
   1e616:	f7ff ff93 	bl	1e540 <is_lfcr>
   1e61a:	b918      	cbnz	r0, 1e624 <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   1e61c:	fab2 f082 	clz	r0, r2
   1e620:	0940      	lsrs	r0, r0, #5
   1e622:	e7f1      	b.n	1e608 <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   1e624:	2001      	movs	r0, #1
   1e626:	e7ef      	b.n	1e608 <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   1e628:	2a3f      	cmp	r2, #63	; 0x3f
   1e62a:	d1f3      	bne.n	1e614 <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   1e62c:	2002      	movs	r0, #2
   1e62e:	e7eb      	b.n	1e608 <at_parser_cmd_type_get+0x2a>

0001e630 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1e630:	6803      	ldr	r3, [r0, #0]
   1e632:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1e634:	bf83      	ittte	hi
   1e636:	230c      	movhi	r3, #12
   1e638:	6840      	ldrhi	r0, [r0, #4]
   1e63a:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1e63e:	2000      	movls	r0, #0
}
   1e640:	4770      	bx	lr

0001e642 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1e642:	7803      	ldrb	r3, [r0, #0]
   1e644:	2b01      	cmp	r3, #1
   1e646:	d006      	beq.n	1e656 <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1e648:	2b02      	cmp	r3, #2
   1e64a:	d006      	beq.n	1e65a <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e64c:	3b03      	subs	r3, #3
   1e64e:	2b01      	cmp	r3, #1
   1e650:	d805      	bhi.n	1e65e <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1e652:	6840      	ldr	r0, [r0, #4]
   1e654:	4770      	bx	lr
		return sizeof(u16_t);
   1e656:	2002      	movs	r0, #2
   1e658:	4770      	bx	lr
		return sizeof(u32_t);
   1e65a:	2004      	movs	r0, #4
   1e65c:	4770      	bx	lr
	}

	return 0;
   1e65e:	2000      	movs	r0, #0
}
   1e660:	4770      	bx	lr

0001e662 <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e662:	7803      	ldrb	r3, [r0, #0]
{
   1e664:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e666:	3b03      	subs	r3, #3
   1e668:	2b01      	cmp	r3, #1
{
   1e66a:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e66c:	d802      	bhi.n	1e674 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1e66e:	6880      	ldr	r0, [r0, #8]
   1e670:	f000 f91f 	bl	1e8b2 <k_free>
	param->value.int_val = 0;
   1e674:	2300      	movs	r3, #0
   1e676:	60a3      	str	r3, [r4, #8]
}
   1e678:	bd10      	pop	{r4, pc}

0001e67a <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1e67a:	b538      	push	{r3, r4, r5, lr}
   1e67c:	460d      	mov	r5, r1
	if (list == NULL) {
   1e67e:	4604      	mov	r4, r0
   1e680:	b140      	cbz	r0, 1e694 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1e682:	210c      	movs	r1, #12
   1e684:	4628      	mov	r0, r5
   1e686:	f000 f919 	bl	1e8bc <k_calloc>
   1e68a:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1e68c:	b128      	cbz	r0, 1e69a <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1e68e:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1e690:	6025      	str	r5, [r4, #0]
}
   1e692:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e694:	f06f 0015 	mvn.w	r0, #21
   1e698:	e7fb      	b.n	1e692 <at_params_list_init+0x18>
		return -ENOMEM;
   1e69a:	f06f 000b 	mvn.w	r0, #11
   1e69e:	e7f8      	b.n	1e692 <at_params_list_init+0x18>

0001e6a0 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1e6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   1e6a2:	4605      	mov	r5, r0
   1e6a4:	b130      	cbz	r0, 1e6b4 <at_params_list_clear+0x14>
   1e6a6:	6843      	ldr	r3, [r0, #4]
   1e6a8:	b123      	cbz	r3, 1e6b4 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1e6aa:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1e6ac:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1e6ae:	682b      	ldr	r3, [r5, #0]
   1e6b0:	429c      	cmp	r4, r3
   1e6b2:	d300      	bcc.n	1e6b6 <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   1e6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   1e6b6:	686e      	ldr	r6, [r5, #4]
   1e6b8:	fb07 6604 	mla	r6, r7, r4, r6
   1e6bc:	4630      	mov	r0, r6
   1e6be:	f7ff ffd0 	bl	1e662 <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1e6c2:	220c      	movs	r2, #12
   1e6c4:	2100      	movs	r1, #0
   1e6c6:	4630      	mov	r0, r6
   1e6c8:	f7fe ffcb 	bl	1d662 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1e6cc:	3401      	adds	r4, #1
   1e6ce:	e7ee      	b.n	1e6ae <at_params_list_clear+0xe>

0001e6d0 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1e6d0:	b538      	push	{r3, r4, r5, lr}
   1e6d2:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e6d4:	b160      	cbz	r0, 1e6f0 <at_params_short_put+0x20>
   1e6d6:	6843      	ldr	r3, [r0, #4]
   1e6d8:	b153      	cbz	r3, 1e6f0 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e6da:	f7ff ffa9 	bl	1e630 <at_params_get>

	if (param == NULL) {
   1e6de:	4604      	mov	r4, r0
   1e6e0:	b130      	cbz	r0, 1e6f0 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e6e2:	f7ff ffbe 	bl	1e662 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e6e6:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   1e6e8:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e6ea:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1e6ec:	60a5      	str	r5, [r4, #8]
}
   1e6ee:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e6f0:	f06f 0015 	mvn.w	r0, #21
   1e6f4:	e7fb      	b.n	1e6ee <at_params_short_put+0x1e>

0001e6f6 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1e6f6:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e6f8:	b160      	cbz	r0, 1e714 <at_params_empty_put+0x1e>
   1e6fa:	6843      	ldr	r3, [r0, #4]
   1e6fc:	b153      	cbz	r3, 1e714 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e6fe:	f7ff ff97 	bl	1e630 <at_params_get>

	if (param == NULL) {
   1e702:	4604      	mov	r4, r0
   1e704:	b130      	cbz	r0, 1e714 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1e706:	f7ff ffac 	bl	1e662 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1e70a:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1e70c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1e70e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1e710:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1e712:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e714:	f06f 0015 	mvn.w	r0, #21
   1e718:	e7fb      	b.n	1e712 <at_params_empty_put+0x1c>

0001e71a <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1e71a:	b538      	push	{r3, r4, r5, lr}
   1e71c:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e71e:	b160      	cbz	r0, 1e73a <at_params_int_put+0x20>
   1e720:	6843      	ldr	r3, [r0, #4]
   1e722:	b153      	cbz	r3, 1e73a <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e724:	f7ff ff84 	bl	1e630 <at_params_get>

	if (param == NULL) {
   1e728:	4604      	mov	r4, r0
   1e72a:	b130      	cbz	r0, 1e73a <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e72c:	f7ff ff99 	bl	1e662 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1e730:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1e732:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e734:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1e736:	60a5      	str	r5, [r4, #8]
}
   1e738:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e73a:	f06f 0015 	mvn.w	r0, #21
   1e73e:	e7fb      	b.n	1e738 <at_params_int_put+0x1e>

0001e740 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e742:	4616      	mov	r6, r2
   1e744:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1e746:	b1c0      	cbz	r0, 1e77a <at_params_string_put+0x3a>
   1e748:	6843      	ldr	r3, [r0, #4]
   1e74a:	b1b3      	cbz	r3, 1e77a <at_params_string_put+0x3a>
   1e74c:	b1aa      	cbz	r2, 1e77a <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e74e:	f7ff ff6f 	bl	1e630 <at_params_get>

	if (param == NULL) {
   1e752:	4604      	mov	r4, r0
   1e754:	b188      	cbz	r0, 1e77a <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1e756:	1c68      	adds	r0, r5, #1
   1e758:	f7fc fe46 	bl	1b3e8 <k_malloc>

	if (param_value == NULL) {
   1e75c:	4607      	mov	r7, r0
   1e75e:	b178      	cbz	r0, 1e780 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1e760:	462a      	mov	r2, r5
   1e762:	4631      	mov	r1, r6
   1e764:	f7fe ff53 	bl	1d60e <memcpy>

	at_param_clear(param);
   1e768:	4620      	mov	r0, r4
   1e76a:	f7ff ff7a 	bl	1e662 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1e76e:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1e770:	2000      	movs	r0, #0
	param->size = str_len;
   1e772:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1e774:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1e776:	60a7      	str	r7, [r4, #8]
}
   1e778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e77a:	f06f 0015 	mvn.w	r0, #21
   1e77e:	e7fb      	b.n	1e778 <at_params_string_put+0x38>
		return -ENOMEM;
   1e780:	f06f 000b 	mvn.w	r0, #11
   1e784:	e7f8      	b.n	1e778 <at_params_string_put+0x38>

0001e786 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1e786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e788:	4616      	mov	r6, r2
   1e78a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1e78c:	b1c0      	cbz	r0, 1e7c0 <at_params_array_put+0x3a>
   1e78e:	6843      	ldr	r3, [r0, #4]
   1e790:	b1b3      	cbz	r3, 1e7c0 <at_params_array_put+0x3a>
   1e792:	b1aa      	cbz	r2, 1e7c0 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e794:	f7ff ff4c 	bl	1e630 <at_params_get>

	if (param == NULL) {
   1e798:	4604      	mov	r4, r0
   1e79a:	b188      	cbz	r0, 1e7c0 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1e79c:	4628      	mov	r0, r5
   1e79e:	f7fc fe23 	bl	1b3e8 <k_malloc>

	if (param_value == NULL) {
   1e7a2:	4607      	mov	r7, r0
   1e7a4:	b178      	cbz	r0, 1e7c6 <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1e7a6:	462a      	mov	r2, r5
   1e7a8:	4631      	mov	r1, r6
   1e7aa:	f7fe ff30 	bl	1d60e <memcpy>

	at_param_clear(param);
   1e7ae:	4620      	mov	r0, r4
   1e7b0:	f7ff ff57 	bl	1e662 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1e7b4:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1e7b6:	2000      	movs	r0, #0
	param->size = array_len;
   1e7b8:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1e7ba:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1e7bc:	60a7      	str	r7, [r4, #8]
}
   1e7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e7c0:	f06f 0015 	mvn.w	r0, #21
   1e7c4:	e7fb      	b.n	1e7be <at_params_array_put+0x38>
		return -ENOMEM;
   1e7c6:	f06f 000b 	mvn.w	r0, #11
   1e7ca:	e7f8      	b.n	1e7be <at_params_array_put+0x38>

0001e7cc <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   1e7cc:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1e7ce:	b160      	cbz	r0, 1e7ea <at_params_short_get+0x1e>
   1e7d0:	6843      	ldr	r3, [r0, #4]
   1e7d2:	b153      	cbz	r3, 1e7ea <at_params_short_get+0x1e>
   1e7d4:	b14a      	cbz	r2, 1e7ea <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e7d6:	f7ff ff2b 	bl	1e630 <at_params_get>

	if (param == NULL) {
   1e7da:	b130      	cbz	r0, 1e7ea <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   1e7dc:	7803      	ldrb	r3, [r0, #0]
   1e7de:	2b01      	cmp	r3, #1
   1e7e0:	d103      	bne.n	1e7ea <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   1e7e2:	6883      	ldr	r3, [r0, #8]
	return 0;
   1e7e4:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   1e7e6:	8013      	strh	r3, [r2, #0]
}
   1e7e8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e7ea:	f06f 0015 	mvn.w	r0, #21
   1e7ee:	e7fb      	b.n	1e7e8 <at_params_short_get+0x1c>

0001e7f0 <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1e7f0:	b570      	push	{r4, r5, r6, lr}
   1e7f2:	4616      	mov	r6, r2
   1e7f4:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1e7f6:	b1c0      	cbz	r0, 1e82a <at_params_string_get+0x3a>
   1e7f8:	6843      	ldr	r3, [r0, #4]
   1e7fa:	b1b3      	cbz	r3, 1e82a <at_params_string_get+0x3a>
   1e7fc:	b1aa      	cbz	r2, 1e82a <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1e7fe:	b1a4      	cbz	r4, 1e82a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e800:	f7ff ff16 	bl	1e630 <at_params_get>

	if (param == NULL) {
   1e804:	4601      	mov	r1, r0
   1e806:	b180      	cbz	r0, 1e82a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1e808:	7803      	ldrb	r3, [r0, #0]
   1e80a:	2b03      	cmp	r3, #3
   1e80c:	d10d      	bne.n	1e82a <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1e80e:	f7ff ff18 	bl	1e642 <at_param_size>

	if (*len < param_len) {
   1e812:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1e814:	4605      	mov	r5, r0
	if (*len < param_len) {
   1e816:	4283      	cmp	r3, r0
   1e818:	d30a      	bcc.n	1e830 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1e81a:	4602      	mov	r2, r0
   1e81c:	6889      	ldr	r1, [r1, #8]
   1e81e:	4630      	mov	r0, r6
   1e820:	f7fe fef5 	bl	1d60e <memcpy>
	*len = param_len;

	return 0;
   1e824:	2000      	movs	r0, #0
	*len = param_len;
   1e826:	6025      	str	r5, [r4, #0]
}
   1e828:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e82a:	f06f 0015 	mvn.w	r0, #21
   1e82e:	e7fb      	b.n	1e828 <at_params_string_get+0x38>
		return -ENOMEM;
   1e830:	f06f 000b 	mvn.w	r0, #11
   1e834:	e7f8      	b.n	1e828 <at_params_string_get+0x38>

0001e836 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   1e836:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e838:	4604      	mov	r4, r0
   1e83a:	b178      	cbz	r0, 1e85c <at_params_valid_count_get+0x26>
   1e83c:	6840      	ldr	r0, [r0, #4]
   1e83e:	b168      	cbz	r0, 1e85c <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   1e840:	6822      	ldr	r2, [r4, #0]
   1e842:	b14a      	cbz	r2, 1e858 <at_params_valid_count_get+0x22>
   1e844:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e846:	7803      	ldrb	r3, [r0, #0]
   1e848:	b133      	cbz	r3, 1e858 <at_params_valid_count_get+0x22>
		valid_i += 1;
   1e84a:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   1e84c:	4611      	mov	r1, r2
   1e84e:	4620      	mov	r0, r4
   1e850:	f7ff feee 	bl	1e630 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e854:	2800      	cmp	r0, #0
   1e856:	d1f6      	bne.n	1e846 <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   1e858:	4610      	mov	r0, r2
   1e85a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e85c:	f06f 0215 	mvn.w	r2, #21
   1e860:	e7fa      	b.n	1e858 <at_params_valid_count_get+0x22>

0001e862 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1e862:	f7fe bced 	b.w	1d240 <z_clock_idle_exit>

0001e866 <k_mem_slab_init>:
{
   1e866:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1e868:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1e86a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   1e86e:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1e872:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e874:	42a3      	cmp	r3, r4
   1e876:	d102      	bne.n	1e87e <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   1e878:	e9c0 0000 	strd	r0, r0, [r0]
}
   1e87c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1e87e:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e880:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1e882:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1e884:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1e886:	4411      	add	r1, r2
   1e888:	e7f4      	b.n	1e874 <k_mem_slab_init+0xe>

0001e88a <k_mem_pool_malloc>:
{
   1e88a:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e88c:	2404      	movs	r4, #4
   1e88e:	190a      	adds	r2, r1, r4
   1e890:	d204      	bcs.n	1e89c <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1e892:	2300      	movs	r3, #0
   1e894:	4669      	mov	r1, sp
   1e896:	f7fc fd2f 	bl	1b2f8 <k_mem_pool_alloc>
   1e89a:	b110      	cbz	r0, 1e8a2 <k_mem_pool_malloc+0x18>
		return NULL;
   1e89c:	2000      	movs	r0, #0
}
   1e89e:	b002      	add	sp, #8
   1e8a0:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1e8a2:	4622      	mov	r2, r4
   1e8a4:	a901      	add	r1, sp, #4
   1e8a6:	9800      	ldr	r0, [sp, #0]
   1e8a8:	f7fe feb1 	bl	1d60e <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1e8ac:	9800      	ldr	r0, [sp, #0]
   1e8ae:	3004      	adds	r0, #4
   1e8b0:	e7f5      	b.n	1e89e <k_mem_pool_malloc+0x14>

0001e8b2 <k_free>:
	if (ptr != NULL) {
   1e8b2:	b110      	cbz	r0, 1e8ba <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1e8b4:	3804      	subs	r0, #4
   1e8b6:	f7fc bd6b 	b.w	1b390 <k_mem_pool_free_id>
}
   1e8ba:	4770      	bx	lr

0001e8bc <k_calloc>:
{
   1e8bc:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1e8be:	fba0 4501 	umull	r4, r5, r0, r1
   1e8c2:	b935      	cbnz	r5, 1e8d2 <k_calloc+0x16>
	ret = k_malloc(bounds);
   1e8c4:	4620      	mov	r0, r4
   1e8c6:	f7fc fd8f 	bl	1b3e8 <k_malloc>
	if (ret != NULL) {
   1e8ca:	4606      	mov	r6, r0
   1e8cc:	b918      	cbnz	r0, 1e8d6 <k_calloc+0x1a>
}
   1e8ce:	4630      	mov	r0, r6
   1e8d0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1e8d2:	2600      	movs	r6, #0
   1e8d4:	e7fb      	b.n	1e8ce <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1e8d6:	4622      	mov	r2, r4
   1e8d8:	4629      	mov	r1, r5
   1e8da:	f7fe fec2 	bl	1d662 <memset>
   1e8de:	e7f6      	b.n	1e8ce <k_calloc+0x12>

0001e8e0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1e8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8e4:	4604      	mov	r4, r0
   1e8e6:	460f      	mov	r7, r1
   1e8e8:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e8ea:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e8ee:	f04f 0220 	mov.w	r2, #32
   1e8f2:	f3ef 8611 	mrs	r6, BASEPRI
   1e8f6:	f382 8811 	msr	BASEPRI, r2
   1e8fa:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1e8fe:	b1db      	cbz	r3, 1e938 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1e900:	2008      	movs	r0, #8
   1e902:	f7fc fd77 	bl	1b3f4 <z_thread_malloc>
		if (anode == NULL) {
   1e906:	b938      	cbnz	r0, 1e918 <queue_insert+0x38>
	__asm__ volatile(
   1e908:	f386 8811 	msr	BASEPRI, r6
   1e90c:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1e910:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1e914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1e918:	2301      	movs	r3, #1
		anode->data = data;
   1e91a:	f8c0 8004 	str.w	r8, [r0, #4]
   1e91e:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1e920:	6803      	ldr	r3, [r0, #0]
   1e922:	f003 0203 	and.w	r2, r3, #3
   1e926:	b95f      	cbnz	r7, 1e940 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e928:	6823      	ldr	r3, [r4, #0]
   1e92a:	4313      	orrs	r3, r2
   1e92c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e92e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e930:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e932:	b973      	cbnz	r3, 1e952 <queue_insert+0x72>
	list->tail = node;
   1e934:	6060      	str	r0, [r4, #4]
   1e936:	e00c      	b.n	1e952 <queue_insert+0x72>
	node->next_and_flags = flags;
   1e938:	f8c8 3000 	str.w	r3, [r8]
   1e93c:	4640      	mov	r0, r8
   1e93e:	e7ef      	b.n	1e920 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e940:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e942:	f033 0303 	bics.w	r3, r3, #3
   1e946:	d114      	bne.n	1e972 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e948:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1e94a:	6862      	ldr	r2, [r4, #4]
   1e94c:	b95a      	cbnz	r2, 1e966 <queue_insert+0x86>
	list->head = node;
   1e94e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e952:	2104      	movs	r1, #4
   1e954:	4628      	mov	r0, r5
   1e956:	f000 fb5d 	bl	1f014 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e95a:	4628      	mov	r0, r5
   1e95c:	4631      	mov	r1, r6
   1e95e:	f000 f8d2 	bl	1eb06 <z_reschedule>
	return 0;
   1e962:	2000      	movs	r0, #0
   1e964:	e7d6      	b.n	1e914 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e966:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e968:	f003 0303 	and.w	r3, r3, #3
   1e96c:	4303      	orrs	r3, r0
   1e96e:	6013      	str	r3, [r2, #0]
   1e970:	e7e0      	b.n	1e934 <queue_insert+0x54>
   1e972:	4313      	orrs	r3, r2
   1e974:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e976:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e978:	f003 0303 	and.w	r3, r3, #3
   1e97c:	4318      	orrs	r0, r3
   1e97e:	6038      	str	r0, [r7, #0]
   1e980:	e7e7      	b.n	1e952 <queue_insert+0x72>

0001e982 <z_queue_node_peek>:
{
   1e982:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1e984:	4604      	mov	r4, r0
   1e986:	b130      	cbz	r0, 1e996 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e988:	6802      	ldr	r2, [r0, #0]
   1e98a:	0793      	lsls	r3, r2, #30
   1e98c:	d003      	beq.n	1e996 <z_queue_node_peek+0x14>
		ret = anode->data;
   1e98e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e990:	b109      	cbz	r1, 1e996 <z_queue_node_peek+0x14>
			k_free(anode);
   1e992:	f7ff ff8e 	bl	1e8b2 <k_free>
}
   1e996:	4620      	mov	r0, r4
   1e998:	bd10      	pop	{r4, pc}

0001e99a <z_impl_k_queue_init>:
	list->head = NULL;
   1e99a:	2300      	movs	r3, #0
	list->tail = NULL;
   1e99c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1e9a0:	f100 0308 	add.w	r3, r0, #8
   1e9a4:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1e9a8:	4770      	bx	lr

0001e9aa <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1e9aa:	460a      	mov	r2, r1
   1e9ac:	2300      	movs	r3, #0
   1e9ae:	6841      	ldr	r1, [r0, #4]
   1e9b0:	f7ff bf96 	b.w	1e8e0 <queue_insert>

0001e9b4 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1e9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e9b8:	4604      	mov	r4, r0
   1e9ba:	b086      	sub	sp, #24
   1e9bc:	460d      	mov	r5, r1
	__asm__ volatile(
   1e9be:	f04f 0320 	mov.w	r3, #32
   1e9c2:	f3ef 8711 	mrs	r7, BASEPRI
   1e9c6:	f383 8811 	msr	BASEPRI, r3
   1e9ca:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1e9ce:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e9d0:	b188      	cbz	r0, 1e9f6 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e9d2:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e9d4:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e9d6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e9da:	4290      	cmp	r0, r2
	list->head = node;
   1e9dc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1e9de:	bf08      	it	eq
   1e9e0:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e9e2:	2101      	movs	r1, #1
   1e9e4:	f7ff ffcd 	bl	1e982 <z_queue_node_peek>
	__asm__ volatile(
   1e9e8:	f387 8811 	msr	BASEPRI, r7
   1e9ec:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1e9f0:	b006      	add	sp, #24
   1e9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1e9f6:	2900      	cmp	r1, #0
   1e9f8:	d0f6      	beq.n	1e9e8 <z_impl_k_queue_get+0x34>
   1e9fa:	f387 8811 	msr	BASEPRI, r7
   1e9fe:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1ea02:	2104      	movs	r1, #4
   1ea04:	4602      	mov	r2, r0
   1ea06:	4623      	mov	r3, r4
   1ea08:	eb0d 0001 	add.w	r0, sp, r1
   1ea0c:	f7fd fc4e 	bl	1c2ac <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1ea10:	1c6a      	adds	r2, r5, #1
   1ea12:	d002      	beq.n	1ea1a <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1ea14:	f000 f9cb 	bl	1edae <z_impl_k_uptime_get>
   1ea18:	4606      	mov	r6, r0
{
   1ea1a:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1ea1c:	9b04      	ldr	r3, [sp, #16]
   1ea1e:	f36f 3310 	bfc	r3, #12, #5
   1ea22:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1ea24:	2101      	movs	r1, #1
   1ea26:	1bea      	subs	r2, r5, r7
   1ea28:	a801      	add	r0, sp, #4
   1ea2a:	f7fd fc53 	bl	1c2d4 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1ea2e:	b118      	cbz	r0, 1ea38 <z_impl_k_queue_get+0x84>
   1ea30:	300b      	adds	r0, #11
   1ea32:	d001      	beq.n	1ea38 <z_impl_k_queue_get+0x84>
			return NULL;
   1ea34:	2000      	movs	r0, #0
   1ea36:	e7db      	b.n	1e9f0 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1ea38:	f04f 0320 	mov.w	r3, #32
   1ea3c:	f3ef 8811 	mrs	r8, BASEPRI
   1ea40:	f383 8811 	msr	BASEPRI, r3
   1ea44:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1ea48:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1ea4a:	b138      	cbz	r0, 1ea5c <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea4c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ea4e:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea50:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ea54:	4290      	cmp	r0, r2
	list->head = node;
   1ea56:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1ea58:	bf08      	it	eq
   1ea5a:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1ea5c:	2101      	movs	r1, #1
   1ea5e:	f7ff ff90 	bl	1e982 <z_queue_node_peek>
	__asm__ volatile(
   1ea62:	f388 8811 	msr	BASEPRI, r8
   1ea66:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1ea6a:	2800      	cmp	r0, #0
   1ea6c:	d1c0      	bne.n	1e9f0 <z_impl_k_queue_get+0x3c>
   1ea6e:	1c6b      	adds	r3, r5, #1
   1ea70:	d0d4      	beq.n	1ea1c <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1ea72:	f000 f99c 	bl	1edae <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1ea76:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1ea78:	42bd      	cmp	r5, r7
   1ea7a:	dacf      	bge.n	1ea1c <z_impl_k_queue_get+0x68>
   1ea7c:	e7da      	b.n	1ea34 <z_impl_k_queue_get+0x80>

0001ea7e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ea7e:	7b43      	ldrb	r3, [r0, #13]
   1ea80:	06db      	lsls	r3, r3, #27
   1ea82:	bf03      	ittte	eq
   1ea84:	6980      	ldreq	r0, [r0, #24]
   1ea86:	fab0 f080 	clzeq	r0, r0
   1ea8a:	0940      	lsreq	r0, r0, #5
   1ea8c:	2000      	movne	r0, #0
}
   1ea8e:	4770      	bx	lr

0001ea90 <z_swap_irqlock>:
{
   1ea90:	b510      	push	{r4, lr}
   1ea92:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   1ea94:	f7fd f970 	bl	1bd78 <z_check_stack_sentinel>
	ret = arch_swap(key);
   1ea98:	4620      	mov	r0, r4
}
   1ea9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1ea9e:	f7f0 be6b 	b.w	f778 <arch_swap>

0001eaa2 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1eaa2:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1eaa6:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1eaaa:	4298      	cmp	r0, r3
   1eaac:	bfac      	ite	ge
   1eaae:	2000      	movge	r0, #0
   1eab0:	2001      	movlt	r0, #1
   1eab2:	4770      	bx	lr

0001eab4 <z_find_first_thread_to_unpend>:
{
   1eab4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eab6:	f04f 0320 	mov.w	r3, #32
   1eaba:	f3ef 8411 	mrs	r4, BASEPRI
   1eabe:	f383 8811 	msr	BASEPRI, r3
   1eac2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1eac6:	f000 f85d 	bl	1eb84 <z_priq_dumb_best>
	__asm__ volatile(
   1eaca:	f384 8811 	msr	BASEPRI, r4
   1eace:	f3bf 8f6f 	isb	sy
}
   1ead2:	bd10      	pop	{r4, pc}

0001ead4 <z_unpend_thread_no_timeout>:
{
   1ead4:	b538      	push	{r3, r4, r5, lr}
   1ead6:	4604      	mov	r4, r0
	__asm__ volatile(
   1ead8:	f04f 0320 	mov.w	r3, #32
   1eadc:	f3ef 8511 	mrs	r5, BASEPRI
   1eae0:	f383 8811 	msr	BASEPRI, r3
   1eae4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1eae8:	4601      	mov	r1, r0
   1eaea:	6880      	ldr	r0, [r0, #8]
   1eaec:	f7fc fe44 	bl	1b778 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1eaf0:	7b63      	ldrb	r3, [r4, #13]
   1eaf2:	f023 0302 	bic.w	r3, r3, #2
   1eaf6:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1eaf8:	f385 8811 	msr	BASEPRI, r5
   1eafc:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1eb00:	2300      	movs	r3, #0
   1eb02:	60a3      	str	r3, [r4, #8]
}
   1eb04:	bd38      	pop	{r3, r4, r5, pc}

0001eb06 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eb06:	b921      	cbnz	r1, 1eb12 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1eb08:	f3ef 8005 	mrs	r0, IPSR
   1eb0c:	b908      	cbnz	r0, 1eb12 <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   1eb0e:	f7ff bfbf 	b.w	1ea90 <z_swap_irqlock>
   1eb12:	f381 8811 	msr	BASEPRI, r1
   1eb16:	f3bf 8f6f 	isb	sy
}
   1eb1a:	4770      	bx	lr

0001eb1c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eb1c:	4603      	mov	r3, r0
   1eb1e:	b920      	cbnz	r0, 1eb2a <z_reschedule_irqlock+0xe>
   1eb20:	f3ef 8205 	mrs	r2, IPSR
   1eb24:	b90a      	cbnz	r2, 1eb2a <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   1eb26:	f7ff bfb3 	b.w	1ea90 <z_swap_irqlock>
   1eb2a:	f383 8811 	msr	BASEPRI, r3
   1eb2e:	f3bf 8f6f 	isb	sy
}
   1eb32:	4770      	bx	lr

0001eb34 <z_reschedule_unlocked>:
	__asm__ volatile(
   1eb34:	f04f 0320 	mov.w	r3, #32
   1eb38:	f3ef 8011 	mrs	r0, BASEPRI
   1eb3c:	f383 8811 	msr	BASEPRI, r3
   1eb40:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1eb44:	f7ff bfea 	b.w	1eb1c <z_reschedule_irqlock>

0001eb48 <z_unpend_thread>:
{
   1eb48:	b538      	push	{r3, r4, r5, lr}
   1eb4a:	4604      	mov	r4, r0
   1eb4c:	f04f 0320 	mov.w	r3, #32
   1eb50:	f3ef 8511 	mrs	r5, BASEPRI
   1eb54:	f383 8811 	msr	BASEPRI, r3
   1eb58:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1eb5c:	4601      	mov	r1, r0
   1eb5e:	6880      	ldr	r0, [r0, #8]
   1eb60:	f7fc fe0a 	bl	1b778 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1eb64:	7b63      	ldrb	r3, [r4, #13]
   1eb66:	f023 0302 	bic.w	r3, r3, #2
   1eb6a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1eb6c:	f385 8811 	msr	BASEPRI, r5
   1eb70:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1eb74:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1eb76:	f104 0018 	add.w	r0, r4, #24
   1eb7a:	60a3      	str	r3, [r4, #8]
}
   1eb7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1eb80:	f000 b8d1 	b.w	1ed26 <z_abort_timeout>

0001eb84 <z_priq_dumb_best>:
	return list->head == list;
   1eb84:	6803      	ldr	r3, [r0, #0]
}
   1eb86:	4298      	cmp	r0, r3
   1eb88:	bf14      	ite	ne
   1eb8a:	4618      	movne	r0, r3
   1eb8c:	2000      	moveq	r0, #0
   1eb8e:	4770      	bx	lr

0001eb90 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1eb90:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1eb94:	b570      	push	{r4, r5, r6, lr}
   1eb96:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   1eb98:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1eb9c:	b1cb      	cbz	r3, 1ebd2 <z_thread_timeout+0x42>
	__asm__ volatile(
   1eb9e:	f04f 0320 	mov.w	r3, #32
   1eba2:	f3ef 8611 	mrs	r6, BASEPRI
   1eba6:	f383 8811 	msr	BASEPRI, r3
   1ebaa:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ebae:	4629      	mov	r1, r5
   1ebb0:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1ebb4:	f7fc fde0 	bl	1b778 <z_priq_dumb_remove>
   1ebb8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1ebbc:	f023 0302 	bic.w	r3, r3, #2
   1ebc0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1ebc4:	f386 8811 	msr	BASEPRI, r6
   1ebc8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1ebcc:	2300      	movs	r3, #0
   1ebce:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ebd2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1ebd6:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ebd8:	f023 0314 	bic.w	r3, r3, #20
   1ebdc:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1ebe0:	f7ff ff4d 	bl	1ea7e <z_is_thread_ready>
   1ebe4:	b120      	cbz	r0, 1ebf0 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1ebe6:	4628      	mov	r0, r5
}
   1ebe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ebec:	f7fc be14 	b.w	1b818 <z_add_thread_to_ready_q>
   1ebf0:	bd70      	pop	{r4, r5, r6, pc}

0001ebf2 <z_unpend_first_thread>:
{
   1ebf2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ebf4:	f04f 0320 	mov.w	r3, #32
   1ebf8:	f3ef 8211 	mrs	r2, BASEPRI
   1ebfc:	f383 8811 	msr	BASEPRI, r3
   1ec00:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1ec04:	f7ff ffbe 	bl	1eb84 <z_priq_dumb_best>
   1ec08:	4604      	mov	r4, r0
	__asm__ volatile(
   1ec0a:	f382 8811 	msr	BASEPRI, r2
   1ec0e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1ec12:	b1c8      	cbz	r0, 1ec48 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1ec14:	f04f 0320 	mov.w	r3, #32
   1ec18:	f3ef 8511 	mrs	r5, BASEPRI
   1ec1c:	f383 8811 	msr	BASEPRI, r3
   1ec20:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ec24:	4601      	mov	r1, r0
   1ec26:	6880      	ldr	r0, [r0, #8]
   1ec28:	f7fc fda6 	bl	1b778 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ec2c:	7b63      	ldrb	r3, [r4, #13]
   1ec2e:	f023 0302 	bic.w	r3, r3, #2
   1ec32:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1ec34:	f385 8811 	msr	BASEPRI, r5
   1ec38:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1ec3c:	2300      	movs	r3, #0
   1ec3e:	f104 0018 	add.w	r0, r4, #24
   1ec42:	60a3      	str	r3, [r4, #8]
   1ec44:	f000 f86f 	bl	1ed26 <z_abort_timeout>
}
   1ec48:	4620      	mov	r0, r4
   1ec4a:	bd38      	pop	{r3, r4, r5, pc}

0001ec4c <z_unpend_all>:
{
   1ec4c:	b570      	push	{r4, r5, r6, lr}
   1ec4e:	4606      	mov	r6, r0
	int need_sched = 0;
   1ec50:	2500      	movs	r5, #0
   1ec52:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ec54:	42a6      	cmp	r6, r4
   1ec56:	d000      	beq.n	1ec5a <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   1ec58:	b90c      	cbnz	r4, 1ec5e <z_unpend_all+0x12>
}
   1ec5a:	4628      	mov	r0, r5
   1ec5c:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   1ec5e:	4620      	mov	r0, r4
   1ec60:	f7ff ff72 	bl	1eb48 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1ec64:	4620      	mov	r0, r4
   1ec66:	f7ff ff0a 	bl	1ea7e <z_is_thread_ready>
		need_sched = 1;
   1ec6a:	2501      	movs	r5, #1
   1ec6c:	2800      	cmp	r0, #0
   1ec6e:	d0f0      	beq.n	1ec52 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1ec70:	4620      	mov	r0, r4
   1ec72:	f7fc fdd1 	bl	1b818 <z_add_thread_to_ready_q>
   1ec76:	e7ec      	b.n	1ec52 <z_unpend_all+0x6>

0001ec78 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1ec78:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1ec7c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1ec80:	e9c0 0000 	strd	r0, r0, [r0]
   1ec84:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1ec88:	4770      	bx	lr

0001ec8a <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ec8a:	7b43      	ldrb	r3, [r0, #13]
   1ec8c:	06db      	lsls	r3, r3, #27
   1ec8e:	bf03      	ittte	eq
   1ec90:	6980      	ldreq	r0, [r0, #24]
   1ec92:	fab0 f080 	clzeq	r0, r0
   1ec96:	0940      	lsreq	r0, r0, #5
   1ec98:	2000      	movne	r0, #0
}
   1ec9a:	4770      	bx	lr

0001ec9c <z_impl_k_thread_name_set>:
}
   1ec9c:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1eca0:	4770      	bx	lr

0001eca2 <k_thread_name_get>:
}
   1eca2:	2000      	movs	r0, #0
   1eca4:	4770      	bx	lr

0001eca6 <z_new_thread_init>:
{
   1eca6:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   1eca8:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   1ecac:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1ecae:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1ecb0:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1ecb2:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1ecb4:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1ecb6:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1ecb8:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1ecba:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1ecbc:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1ecc0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1ecc4:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1ecc8:	bd10      	pop	{r4, pc}

0001ecca <z_thread_single_resume>:
{
   1ecca:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1eccc:	7b43      	ldrb	r3, [r0, #13]
   1ecce:	4602      	mov	r2, r0
   1ecd0:	f023 0310 	bic.w	r3, r3, #16
   1ecd4:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1ecd6:	f7ff ffd8 	bl	1ec8a <z_is_thread_ready>
   1ecda:	b120      	cbz	r0, 1ece6 <z_thread_single_resume+0x1c>
}
   1ecdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   1ece0:	4610      	mov	r0, r2
   1ece2:	f7fc bd99 	b.w	1b818 <z_add_thread_to_ready_q>
   1ece6:	bd08      	pop	{r3, pc}

0001ece8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1ece8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ecea:	b510      	push	{r4, lr}
   1ecec:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1ecee:	b103      	cbz	r3, 1ecf2 <z_thread_single_abort+0xa>
		thread->fn_abort();
   1ecf0:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1ecf2:	4620      	mov	r0, r4
   1ecf4:	f7ff ffc9 	bl	1ec8a <z_is_thread_ready>
   1ecf8:	b138      	cbz	r0, 1ed0a <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1ecfa:	4620      	mov	r0, r4
   1ecfc:	f7fc fe3a 	bl	1b974 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1ed00:	7b63      	ldrb	r3, [r4, #13]
   1ed02:	f043 0308 	orr.w	r3, r3, #8
   1ed06:	7363      	strb	r3, [r4, #13]
}
   1ed08:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1ed0a:	7b63      	ldrb	r3, [r4, #13]
   1ed0c:	079b      	lsls	r3, r3, #30
   1ed0e:	d502      	bpl.n	1ed16 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   1ed10:	4620      	mov	r0, r4
   1ed12:	f7ff fedf 	bl	1ead4 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   1ed16:	69a3      	ldr	r3, [r4, #24]
   1ed18:	2b00      	cmp	r3, #0
   1ed1a:	d0f1      	beq.n	1ed00 <z_thread_single_abort+0x18>
   1ed1c:	f104 0018 	add.w	r0, r4, #24
   1ed20:	f000 f801 	bl	1ed26 <z_abort_timeout>
   1ed24:	e7ec      	b.n	1ed00 <z_thread_single_abort+0x18>

0001ed26 <z_abort_timeout>:
{
   1ed26:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ed28:	f04f 0220 	mov.w	r2, #32
   1ed2c:	f3ef 8411 	mrs	r4, BASEPRI
   1ed30:	f382 8811 	msr	BASEPRI, r2
   1ed34:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1ed38:	6803      	ldr	r3, [r0, #0]
   1ed3a:	b13b      	cbz	r3, 1ed4c <z_abort_timeout+0x26>
			remove_timeout(to);
   1ed3c:	f7fd f97e 	bl	1c03c <remove_timeout>
			ret = 0;
   1ed40:	2000      	movs	r0, #0
	__asm__ volatile(
   1ed42:	f384 8811 	msr	BASEPRI, r4
   1ed46:	f3bf 8f6f 	isb	sy
}
   1ed4a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1ed4c:	f06f 0015 	mvn.w	r0, #21
   1ed50:	e7f7      	b.n	1ed42 <z_abort_timeout+0x1c>

0001ed52 <z_get_next_timeout_expiry>:
{
   1ed52:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ed54:	f04f 0320 	mov.w	r3, #32
   1ed58:	f3ef 8411 	mrs	r4, BASEPRI
   1ed5c:	f383 8811 	msr	BASEPRI, r3
   1ed60:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1ed64:	f7fd f97e 	bl	1c064 <next_timeout>
	__asm__ volatile(
   1ed68:	f384 8811 	msr	BASEPRI, r4
   1ed6c:	f3bf 8f6f 	isb	sy
}
   1ed70:	bd10      	pop	{r4, pc}

0001ed72 <z_set_timeout_expiry>:
{
   1ed72:	b570      	push	{r4, r5, r6, lr}
   1ed74:	4604      	mov	r4, r0
   1ed76:	460e      	mov	r6, r1
	__asm__ volatile(
   1ed78:	f04f 0320 	mov.w	r3, #32
   1ed7c:	f3ef 8511 	mrs	r5, BASEPRI
   1ed80:	f383 8811 	msr	BASEPRI, r3
   1ed84:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1ed88:	f7fd f96c 	bl	1c064 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1ed8c:	2801      	cmp	r0, #1
   1ed8e:	dd05      	ble.n	1ed9c <z_set_timeout_expiry+0x2a>
   1ed90:	42a0      	cmp	r0, r4
   1ed92:	dd03      	ble.n	1ed9c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1ed94:	4631      	mov	r1, r6
   1ed96:	4620      	mov	r0, r4
   1ed98:	f7f0 fc50 	bl	f63c <z_clock_set_timeout>
	__asm__ volatile(
   1ed9c:	f385 8811 	msr	BASEPRI, r5
   1eda0:	f3bf 8f6f 	isb	sy
}
   1eda4:	bd70      	pop	{r4, r5, r6, pc}

0001eda6 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1eda6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1eda8:	f7fd fa10 	bl	1c1cc <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1edac:	bd08      	pop	{r3, pc}

0001edae <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1edae:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1edb0:	f7fd fa0c 	bl	1c1cc <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1edb4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1edb8:	fba0 2304 	umull	r2, r3, r0, r4
   1edbc:	fb04 3301 	mla	r3, r4, r1, r3
   1edc0:	0bd0      	lsrs	r0, r2, #15
}
   1edc2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1edc6:	0bd9      	lsrs	r1, r3, #15
   1edc8:	bd10      	pop	{r4, pc}

0001edca <k_timer_init>:
	timer->status = 0U;
   1edca:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1edcc:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1edd0:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1edd4:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1edd6:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1edda:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1edde:	6283      	str	r3, [r0, #40]	; 0x28
}
   1ede0:	4770      	bx	lr

0001ede2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1ede2:	b510      	push	{r4, lr}
   1ede4:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1ede6:	f7ff ff9e 	bl	1ed26 <z_abort_timeout>

	if (inactive) {
   1edea:	bb00      	cbnz	r0, 1ee2e <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1edec:	69e3      	ldr	r3, [r4, #28]
   1edee:	b10b      	cbz	r3, 1edf4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1edf0:	4620      	mov	r0, r4
   1edf2:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1edf4:	f104 0010 	add.w	r0, r4, #16
   1edf8:	2100      	movs	r1, #0
   1edfa:	f7ff fe5b 	bl	1eab4 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1edfe:	4604      	mov	r4, r0
   1ee00:	b1a8      	cbz	r0, 1ee2e <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1ee02:	f7ff fe67 	bl	1ead4 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ee06:	7b63      	ldrb	r3, [r4, #13]
   1ee08:	06db      	lsls	r3, r3, #27
   1ee0a:	d104      	bne.n	1ee16 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1ee0c:	69a3      	ldr	r3, [r4, #24]
   1ee0e:	b913      	cbnz	r3, 1ee16 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1ee10:	4620      	mov	r0, r4
   1ee12:	f7fc fd01 	bl	1b818 <z_add_thread_to_ready_q>
	__asm__ volatile(
   1ee16:	f04f 0320 	mov.w	r3, #32
   1ee1a:	f3ef 8011 	mrs	r0, BASEPRI
   1ee1e:	f383 8811 	msr	BASEPRI, r3
   1ee22:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1ee26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ee2a:	f7ff be77 	b.w	1eb1c <z_reschedule_irqlock>
   1ee2e:	bd10      	pop	{r4, pc}

0001ee30 <clear_event_registrations>:
	while (num_events--) {
   1ee30:	2314      	movs	r3, #20
{
   1ee32:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1ee34:	2400      	movs	r4, #0
   1ee36:	2601      	movs	r6, #1
   1ee38:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1ee3c:	4281      	cmp	r1, r0
   1ee3e:	d100      	bne.n	1ee42 <clear_event_registrations+0x12>
}
   1ee40:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1ee42:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1ee46:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1ee4a:	f003 030f 	and.w	r3, r3, #15
   1ee4e:	2b04      	cmp	r3, #4
   1ee50:	d80d      	bhi.n	1ee6e <clear_event_registrations+0x3e>
   1ee52:	fa06 f303 	lsl.w	r3, r6, r3
   1ee56:	f013 0f16 	tst.w	r3, #22
   1ee5a:	d008      	beq.n	1ee6e <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1ee5c:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1ee60:	b12b      	cbz	r3, 1ee6e <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1ee62:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1ee66:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1ee68:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1ee6a:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1ee6e:	f382 8811 	msr	BASEPRI, r2
   1ee72:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ee76:	f04f 0320 	mov.w	r3, #32
   1ee7a:	f3ef 8211 	mrs	r2, BASEPRI
   1ee7e:	f383 8811 	msr	BASEPRI, r3
   1ee82:	f3bf 8f6f 	isb	sy
   1ee86:	3914      	subs	r1, #20
   1ee88:	e7d8      	b.n	1ee3c <clear_event_registrations+0xc>

0001ee8a <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1ee8a:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1ee8c:	6884      	ldr	r4, [r0, #8]
{
   1ee8e:	4605      	mov	r5, r0
   1ee90:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1ee92:	b19c      	cbz	r4, 1eebc <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1ee94:	68a3      	ldr	r3, [r4, #8]
   1ee96:	b95b      	cbnz	r3, 1eeb0 <signal_poll_event+0x26>
	int retcode = 0;
   1ee98:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1ee9a:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1ee9c:	2300      	movs	r3, #0
   1ee9e:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1eea0:	68eb      	ldr	r3, [r5, #12]
   1eea2:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1eea6:	4316      	orrs	r6, r2
   1eea8:	f366 3310 	bfi	r3, r6, #12, #5
   1eeac:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1eeae:	e004      	b.n	1eeba <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1eeb0:	4798      	blx	r3
		poller->is_polling = false;
   1eeb2:	2300      	movs	r3, #0
		if (retcode < 0) {
   1eeb4:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1eeb6:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1eeb8:	daf0      	bge.n	1ee9c <signal_poll_event+0x12>
}
   1eeba:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1eebc:	4620      	mov	r0, r4
   1eebe:	e7ed      	b.n	1ee9c <signal_poll_event+0x12>

0001eec0 <k_poll_poller_cb>:
{
   1eec0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1eec2:	6883      	ldr	r3, [r0, #8]
{
   1eec4:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1eec6:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1eec8:	7b63      	ldrb	r3, [r4, #13]
   1eeca:	079a      	lsls	r2, r3, #30
   1eecc:	d401      	bmi.n	1eed2 <k_poll_poller_cb+0x12>
		return 0;
   1eece:	2000      	movs	r0, #0
}
   1eed0:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1eed2:	6a23      	ldr	r3, [r4, #32]
   1eed4:	3302      	adds	r3, #2
   1eed6:	d012      	beq.n	1eefe <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1eed8:	4620      	mov	r0, r4
   1eeda:	f7ff fe35 	bl	1eb48 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1eede:	2d08      	cmp	r5, #8
   1eee0:	bf0c      	ite	eq
   1eee2:	f06f 0303 	mvneq.w	r3, #3
   1eee6:	2300      	movne	r3, #0
   1eee8:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1eeea:	7b63      	ldrb	r3, [r4, #13]
   1eeec:	06db      	lsls	r3, r3, #27
   1eeee:	d1ee      	bne.n	1eece <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1eef0:	69a5      	ldr	r5, [r4, #24]
   1eef2:	2d00      	cmp	r5, #0
   1eef4:	d1eb      	bne.n	1eece <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1eef6:	4620      	mov	r0, r4
   1eef8:	f7fc fc8e 	bl	1b818 <z_add_thread_to_ready_q>
	return 0;
   1eefc:	e7e7      	b.n	1eece <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1eefe:	f06f 000a 	mvn.w	r0, #10
   1ef02:	e7e5      	b.n	1eed0 <k_poll_poller_cb+0x10>

0001ef04 <add_event>:
{
   1ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef06:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ef08:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ef0c:	4290      	cmp	r0, r2
   1ef0e:	4604      	mov	r4, r0
   1ef10:	460d      	mov	r5, r1
   1ef12:	d106      	bne.n	1ef22 <add_event+0x1e>
	node->prev = list->tail;
   1ef14:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1ef16:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1ef18:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1ef1a:	6863      	ldr	r3, [r4, #4]
   1ef1c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ef1e:	6065      	str	r5, [r4, #4]
}
   1ef20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ef22:	2b00      	cmp	r3, #0
   1ef24:	d0f6      	beq.n	1ef14 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1ef26:	689b      	ldr	r3, [r3, #8]
   1ef28:	6879      	ldr	r1, [r7, #4]
   1ef2a:	6858      	ldr	r0, [r3, #4]
   1ef2c:	f7ff fdb9 	bl	1eaa2 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ef30:	2800      	cmp	r0, #0
   1ef32:	d1ef      	bne.n	1ef14 <add_event+0x10>
	return list->head == list;
   1ef34:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef36:	42b4      	cmp	r4, r6
   1ef38:	d0ec      	beq.n	1ef14 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ef3a:	2e00      	cmp	r6, #0
   1ef3c:	d0ea      	beq.n	1ef14 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1ef3e:	68b3      	ldr	r3, [r6, #8]
   1ef40:	6878      	ldr	r0, [r7, #4]
   1ef42:	6859      	ldr	r1, [r3, #4]
   1ef44:	f7ff fdad 	bl	1eaa2 <z_is_t1_higher_prio_than_t2>
   1ef48:	b128      	cbz	r0, 1ef56 <add_event+0x52>
	node->prev = successor->prev;
   1ef4a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ef4c:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1ef50:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ef52:	6075      	str	r5, [r6, #4]
			return;
   1ef54:	e7e4      	b.n	1ef20 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1ef56:	6863      	ldr	r3, [r4, #4]
   1ef58:	429e      	cmp	r6, r3
   1ef5a:	d0db      	beq.n	1ef14 <add_event+0x10>
   1ef5c:	6836      	ldr	r6, [r6, #0]
   1ef5e:	e7ec      	b.n	1ef3a <add_event+0x36>

0001ef60 <register_events>:
{
   1ef60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1ef64:	f04f 0b00 	mov.w	fp, #0
{
   1ef68:	4688      	mov	r8, r1
   1ef6a:	4615      	mov	r5, r2
   1ef6c:	4699      	mov	r9, r3
   1ef6e:	4604      	mov	r4, r0
	int events_registered = 0;
   1ef70:	465e      	mov	r6, fp
	event->poller = NULL;
   1ef72:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1ef74:	45c3      	cmp	fp, r8
   1ef76:	db02      	blt.n	1ef7e <register_events+0x1e>
}
   1ef78:	4630      	mov	r0, r6
   1ef7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef7e:	f04f 0320 	mov.w	r3, #32
   1ef82:	f3ef 8a11 	mrs	sl, BASEPRI
   1ef86:	f383 8811 	msr	BASEPRI, r3
   1ef8a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1ef8e:	7b63      	ldrb	r3, [r4, #13]
   1ef90:	f003 030f 	and.w	r3, r3, #15
   1ef94:	2b02      	cmp	r3, #2
   1ef96:	d005      	beq.n	1efa4 <register_events+0x44>
   1ef98:	2b04      	cmp	r3, #4
   1ef9a:	d006      	beq.n	1efaa <register_events+0x4a>
   1ef9c:	2b01      	cmp	r3, #1
   1ef9e:	d118      	bne.n	1efd2 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1efa0:	6922      	ldr	r2, [r4, #16]
   1efa2:	e000      	b.n	1efa6 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1efa4:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1efa6:	6892      	ldr	r2, [r2, #8]
   1efa8:	e001      	b.n	1efae <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1efaa:	6922      	ldr	r2, [r4, #16]
   1efac:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1efae:	b182      	cbz	r2, 1efd2 <register_events+0x72>
	event->state |= state;
   1efb0:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1efb2:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1efb4:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1efb8:	430b      	orrs	r3, r1
   1efba:	f363 3210 	bfi	r2, r3, #12, #5
   1efbe:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1efc0:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1efc2:	f38a 8811 	msr	BASEPRI, sl
   1efc6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1efca:	f10b 0b01 	add.w	fp, fp, #1
   1efce:	3414      	adds	r4, #20
   1efd0:	e7d0      	b.n	1ef74 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1efd2:	f1b9 0f00 	cmp.w	r9, #0
   1efd6:	d1f4      	bne.n	1efc2 <register_events+0x62>
   1efd8:	782b      	ldrb	r3, [r5, #0]
   1efda:	2b00      	cmp	r3, #0
   1efdc:	d0f1      	beq.n	1efc2 <register_events+0x62>
	switch (event->type) {
   1efde:	7b63      	ldrb	r3, [r4, #13]
   1efe0:	f003 030f 	and.w	r3, r3, #15
   1efe4:	2b02      	cmp	r3, #2
   1efe6:	d007      	beq.n	1eff8 <register_events+0x98>
   1efe8:	2b04      	cmp	r3, #4
   1efea:	d00e      	beq.n	1f00a <register_events+0xaa>
   1efec:	2b01      	cmp	r3, #1
   1efee:	d109      	bne.n	1f004 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1eff0:	462a      	mov	r2, r5
   1eff2:	4621      	mov	r1, r4
   1eff4:	6920      	ldr	r0, [r4, #16]
   1eff6:	e003      	b.n	1f000 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1eff8:	462a      	mov	r2, r5
   1effa:	4621      	mov	r1, r4
   1effc:	6920      	ldr	r0, [r4, #16]
   1effe:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1f000:	f7ff ff80 	bl	1ef04 <add_event>
	event->poller = poller;
   1f004:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1f006:	3601      	adds	r6, #1
   1f008:	e7db      	b.n	1efc2 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1f00a:	6920      	ldr	r0, [r4, #16]
   1f00c:	462a      	mov	r2, r5
   1f00e:	4621      	mov	r1, r4
   1f010:	3008      	adds	r0, #8
   1f012:	e7f5      	b.n	1f000 <register_events+0xa0>

0001f014 <z_handle_obj_poll_events>:
	return list->head == list;
   1f014:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f016:	4298      	cmp	r0, r3
   1f018:	d009      	beq.n	1f02e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1f01a:	e9d3 2000 	ldrd	r2, r0, [r3]
   1f01e:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1f020:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1f022:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1f024:	4618      	mov	r0, r3
	node->prev = NULL;
   1f026:	e9c3 2200 	strd	r2, r2, [r3]
   1f02a:	f7ff bf2e 	b.w	1ee8a <signal_poll_event>
	}
}
   1f02e:	4770      	bx	lr

0001f030 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1f030:	4770      	bx	lr
