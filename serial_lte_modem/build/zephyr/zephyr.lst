
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	200281b8 	.word	0x200281b8
    c004:	0000fbc5 	.word	0x0000fbc5
    c008:	0001d297 	.word	0x0001d297
    c00c:	0000f9e5 	.word	0x0000f9e5
    c010:	0000f9e5 	.word	0x0000f9e5
    c014:	0000f9e5 	.word	0x0000f9e5
    c018:	0000f9e5 	.word	0x0000f9e5
    c01c:	0000f9e5 	.word	0x0000f9e5
    c020:	0000f9e5 	.word	0x0000f9e5
    c024:	0000f9e5 	.word	0x0000f9e5
    c028:	0000f9e5 	.word	0x0000f9e5
    c02c:	0000f8a5 	.word	0x0000f8a5
    c030:	0000f9e5 	.word	0x0000f9e5
    c034:	0000f9e5 	.word	0x0000f9e5
    c038:	0000f7f5 	.word	0x0000f7f5
    c03c:	0001d287 	.word	0x0001d287

0000c040 <_irq_vector_table>:
    c040:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c050:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c060:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c070:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c080:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c090:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c0a0:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c0b0:	00011855 0001dd81 0000fb85 0000fb85     U...............
    c0c0:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c0d0:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c0e0:	0000fb85 0000fb85 0001dd9f 0000fb85     ................
    c0f0:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c100:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c110:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c120:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c130:	0000fb85 0000fb85 0000fb85 0000fb85     ................
    c140:	0000fb85                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 000151d0     ...(L....[...Q..
    c210:	00000001 0000c000 2002c508 0001280d     ........... .(..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_drsub>:
    c220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c224:	e002      	b.n	c22c <__adddf3>
    c226:	bf00      	nop

0000c228 <__aeabi_dsub>:
    c228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c22c <__adddf3>:
    c22c:	b530      	push	{r4, r5, lr}
    c22e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c232:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c236:	ea94 0f05 	teq	r4, r5
    c23a:	bf08      	it	eq
    c23c:	ea90 0f02 	teqeq	r0, r2
    c240:	bf1f      	itttt	ne
    c242:	ea54 0c00 	orrsne.w	ip, r4, r0
    c246:	ea55 0c02 	orrsne.w	ip, r5, r2
    c24a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c24e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c252:	f000 80e2 	beq.w	c41a <__adddf3+0x1ee>
    c256:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c25a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c25e:	bfb8      	it	lt
    c260:	426d      	neglt	r5, r5
    c262:	dd0c      	ble.n	c27e <__adddf3+0x52>
    c264:	442c      	add	r4, r5
    c266:	ea80 0202 	eor.w	r2, r0, r2
    c26a:	ea81 0303 	eor.w	r3, r1, r3
    c26e:	ea82 0000 	eor.w	r0, r2, r0
    c272:	ea83 0101 	eor.w	r1, r3, r1
    c276:	ea80 0202 	eor.w	r2, r0, r2
    c27a:	ea81 0303 	eor.w	r3, r1, r3
    c27e:	2d36      	cmp	r5, #54	; 0x36
    c280:	bf88      	it	hi
    c282:	bd30      	pophi	{r4, r5, pc}
    c284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c288:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c28c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c294:	d002      	beq.n	c29c <__adddf3+0x70>
    c296:	4240      	negs	r0, r0
    c298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c29c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2a8:	d002      	beq.n	c2b0 <__adddf3+0x84>
    c2aa:	4252      	negs	r2, r2
    c2ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2b0:	ea94 0f05 	teq	r4, r5
    c2b4:	f000 80a7 	beq.w	c406 <__adddf3+0x1da>
    c2b8:	f1a4 0401 	sub.w	r4, r4, #1
    c2bc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2c0:	db0d      	blt.n	c2de <__adddf3+0xb2>
    c2c2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2c6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ca:	1880      	adds	r0, r0, r2
    c2cc:	f141 0100 	adc.w	r1, r1, #0
    c2d0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2d4:	1880      	adds	r0, r0, r2
    c2d6:	fa43 f305 	asr.w	r3, r3, r5
    c2da:	4159      	adcs	r1, r3
    c2dc:	e00e      	b.n	c2fc <__adddf3+0xd0>
    c2de:	f1a5 0520 	sub.w	r5, r5, #32
    c2e2:	f10e 0e20 	add.w	lr, lr, #32
    c2e6:	2a01      	cmp	r2, #1
    c2e8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c2ec:	bf28      	it	cs
    c2ee:	f04c 0c02 	orrcs.w	ip, ip, #2
    c2f2:	fa43 f305 	asr.w	r3, r3, r5
    c2f6:	18c0      	adds	r0, r0, r3
    c2f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c2fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c300:	d507      	bpl.n	c312 <__adddf3+0xe6>
    c302:	f04f 0e00 	mov.w	lr, #0
    c306:	f1dc 0c00 	rsbs	ip, ip, #0
    c30a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c30e:	eb6e 0101 	sbc.w	r1, lr, r1
    c312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c316:	d31b      	bcc.n	c350 <__adddf3+0x124>
    c318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c31c:	d30c      	bcc.n	c338 <__adddf3+0x10c>
    c31e:	0849      	lsrs	r1, r1, #1
    c320:	ea5f 0030 	movs.w	r0, r0, rrx
    c324:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c328:	f104 0401 	add.w	r4, r4, #1
    c32c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c334:	f080 809a 	bcs.w	c46c <__adddf3+0x240>
    c338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c33c:	bf08      	it	eq
    c33e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c342:	f150 0000 	adcs.w	r0, r0, #0
    c346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c34a:	ea41 0105 	orr.w	r1, r1, r5
    c34e:	bd30      	pop	{r4, r5, pc}
    c350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c354:	4140      	adcs	r0, r0
    c356:	eb41 0101 	adc.w	r1, r1, r1
    c35a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c35e:	f1a4 0401 	sub.w	r4, r4, #1
    c362:	d1e9      	bne.n	c338 <__adddf3+0x10c>
    c364:	f091 0f00 	teq	r1, #0
    c368:	bf04      	itt	eq
    c36a:	4601      	moveq	r1, r0
    c36c:	2000      	moveq	r0, #0
    c36e:	fab1 f381 	clz	r3, r1
    c372:	bf08      	it	eq
    c374:	3320      	addeq	r3, #32
    c376:	f1a3 030b 	sub.w	r3, r3, #11
    c37a:	f1b3 0220 	subs.w	r2, r3, #32
    c37e:	da0c      	bge.n	c39a <__adddf3+0x16e>
    c380:	320c      	adds	r2, #12
    c382:	dd08      	ble.n	c396 <__adddf3+0x16a>
    c384:	f102 0c14 	add.w	ip, r2, #20
    c388:	f1c2 020c 	rsb	r2, r2, #12
    c38c:	fa01 f00c 	lsl.w	r0, r1, ip
    c390:	fa21 f102 	lsr.w	r1, r1, r2
    c394:	e00c      	b.n	c3b0 <__adddf3+0x184>
    c396:	f102 0214 	add.w	r2, r2, #20
    c39a:	bfd8      	it	le
    c39c:	f1c2 0c20 	rsble	ip, r2, #32
    c3a0:	fa01 f102 	lsl.w	r1, r1, r2
    c3a4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3a8:	bfdc      	itt	le
    c3aa:	ea41 010c 	orrle.w	r1, r1, ip
    c3ae:	4090      	lslle	r0, r2
    c3b0:	1ae4      	subs	r4, r4, r3
    c3b2:	bfa2      	ittt	ge
    c3b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3b8:	4329      	orrge	r1, r5
    c3ba:	bd30      	popge	{r4, r5, pc}
    c3bc:	ea6f 0404 	mvn.w	r4, r4
    c3c0:	3c1f      	subs	r4, #31
    c3c2:	da1c      	bge.n	c3fe <__adddf3+0x1d2>
    c3c4:	340c      	adds	r4, #12
    c3c6:	dc0e      	bgt.n	c3e6 <__adddf3+0x1ba>
    c3c8:	f104 0414 	add.w	r4, r4, #20
    c3cc:	f1c4 0220 	rsb	r2, r4, #32
    c3d0:	fa20 f004 	lsr.w	r0, r0, r4
    c3d4:	fa01 f302 	lsl.w	r3, r1, r2
    c3d8:	ea40 0003 	orr.w	r0, r0, r3
    c3dc:	fa21 f304 	lsr.w	r3, r1, r4
    c3e0:	ea45 0103 	orr.w	r1, r5, r3
    c3e4:	bd30      	pop	{r4, r5, pc}
    c3e6:	f1c4 040c 	rsb	r4, r4, #12
    c3ea:	f1c4 0220 	rsb	r2, r4, #32
    c3ee:	fa20 f002 	lsr.w	r0, r0, r2
    c3f2:	fa01 f304 	lsl.w	r3, r1, r4
    c3f6:	ea40 0003 	orr.w	r0, r0, r3
    c3fa:	4629      	mov	r1, r5
    c3fc:	bd30      	pop	{r4, r5, pc}
    c3fe:	fa21 f004 	lsr.w	r0, r1, r4
    c402:	4629      	mov	r1, r5
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f094 0f00 	teq	r4, #0
    c40a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c40e:	bf06      	itte	eq
    c410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c414:	3401      	addeq	r4, #1
    c416:	3d01      	subne	r5, #1
    c418:	e74e      	b.n	c2b8 <__adddf3+0x8c>
    c41a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c41e:	bf18      	it	ne
    c420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c424:	d029      	beq.n	c47a <__adddf3+0x24e>
    c426:	ea94 0f05 	teq	r4, r5
    c42a:	bf08      	it	eq
    c42c:	ea90 0f02 	teqeq	r0, r2
    c430:	d005      	beq.n	c43e <__adddf3+0x212>
    c432:	ea54 0c00 	orrs.w	ip, r4, r0
    c436:	bf04      	itt	eq
    c438:	4619      	moveq	r1, r3
    c43a:	4610      	moveq	r0, r2
    c43c:	bd30      	pop	{r4, r5, pc}
    c43e:	ea91 0f03 	teq	r1, r3
    c442:	bf1e      	ittt	ne
    c444:	2100      	movne	r1, #0
    c446:	2000      	movne	r0, #0
    c448:	bd30      	popne	{r4, r5, pc}
    c44a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c44e:	d105      	bne.n	c45c <__adddf3+0x230>
    c450:	0040      	lsls	r0, r0, #1
    c452:	4149      	adcs	r1, r1
    c454:	bf28      	it	cs
    c456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c45a:	bd30      	pop	{r4, r5, pc}
    c45c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c460:	bf3c      	itt	cc
    c462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c466:	bd30      	popcc	{r4, r5, pc}
    c468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c46c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c474:	f04f 0000 	mov.w	r0, #0
    c478:	bd30      	pop	{r4, r5, pc}
    c47a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c47e:	bf1a      	itte	ne
    c480:	4619      	movne	r1, r3
    c482:	4610      	movne	r0, r2
    c484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c488:	bf1c      	itt	ne
    c48a:	460b      	movne	r3, r1
    c48c:	4602      	movne	r2, r0
    c48e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c492:	bf06      	itte	eq
    c494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c498:	ea91 0f03 	teqeq	r1, r3
    c49c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4a0:	bd30      	pop	{r4, r5, pc}
    c4a2:	bf00      	nop

0000c4a4 <__aeabi_ui2d>:
    c4a4:	f090 0f00 	teq	r0, #0
    c4a8:	bf04      	itt	eq
    c4aa:	2100      	moveq	r1, #0
    c4ac:	4770      	bxeq	lr
    c4ae:	b530      	push	{r4, r5, lr}
    c4b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4b8:	f04f 0500 	mov.w	r5, #0
    c4bc:	f04f 0100 	mov.w	r1, #0
    c4c0:	e750      	b.n	c364 <__adddf3+0x138>
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_i2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4dc:	bf48      	it	mi
    c4de:	4240      	negmi	r0, r0
    c4e0:	f04f 0100 	mov.w	r1, #0
    c4e4:	e73e      	b.n	c364 <__adddf3+0x138>
    c4e6:	bf00      	nop

0000c4e8 <__aeabi_f2d>:
    c4e8:	0042      	lsls	r2, r0, #1
    c4ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c4ee:	ea4f 0131 	mov.w	r1, r1, rrx
    c4f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c4f6:	bf1f      	itttt	ne
    c4f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c4fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c504:	4770      	bxne	lr
    c506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c50a:	bf08      	it	eq
    c50c:	4770      	bxeq	lr
    c50e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c512:	bf04      	itt	eq
    c514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c518:	4770      	bxeq	lr
    c51a:	b530      	push	{r4, r5, lr}
    c51c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c528:	e71c      	b.n	c364 <__adddf3+0x138>
    c52a:	bf00      	nop

0000c52c <__aeabi_ul2d>:
    c52c:	ea50 0201 	orrs.w	r2, r0, r1
    c530:	bf08      	it	eq
    c532:	4770      	bxeq	lr
    c534:	b530      	push	{r4, r5, lr}
    c536:	f04f 0500 	mov.w	r5, #0
    c53a:	e00a      	b.n	c552 <__aeabi_l2d+0x16>

0000c53c <__aeabi_l2d>:
    c53c:	ea50 0201 	orrs.w	r2, r0, r1
    c540:	bf08      	it	eq
    c542:	4770      	bxeq	lr
    c544:	b530      	push	{r4, r5, lr}
    c546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c54a:	d502      	bpl.n	c552 <__aeabi_l2d+0x16>
    c54c:	4240      	negs	r0, r0
    c54e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c552:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c556:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c55a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c55e:	f43f aed8 	beq.w	c312 <__adddf3+0xe6>
    c562:	f04f 0203 	mov.w	r2, #3
    c566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c56a:	bf18      	it	ne
    c56c:	3203      	addne	r2, #3
    c56e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c572:	bf18      	it	ne
    c574:	3203      	addne	r2, #3
    c576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c57a:	f1c2 0320 	rsb	r3, r2, #32
    c57e:	fa00 fc03 	lsl.w	ip, r0, r3
    c582:	fa20 f002 	lsr.w	r0, r0, r2
    c586:	fa01 fe03 	lsl.w	lr, r1, r3
    c58a:	ea40 000e 	orr.w	r0, r0, lr
    c58e:	fa21 f102 	lsr.w	r1, r1, r2
    c592:	4414      	add	r4, r2
    c594:	e6bd      	b.n	c312 <__adddf3+0xe6>
    c596:	bf00      	nop

0000c598 <__aeabi_uldivmod>:
    c598:	b953      	cbnz	r3, c5b0 <__aeabi_uldivmod+0x18>
    c59a:	b94a      	cbnz	r2, c5b0 <__aeabi_uldivmod+0x18>
    c59c:	2900      	cmp	r1, #0
    c59e:	bf08      	it	eq
    c5a0:	2800      	cmpeq	r0, #0
    c5a2:	bf1c      	itt	ne
    c5a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c5a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c5ac:	f000 b970 	b.w	c890 <__aeabi_idiv0>
    c5b0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5b8:	f000 f806 	bl	c5c8 <__udivmoddi4>
    c5bc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5c4:	b004      	add	sp, #16
    c5c6:	4770      	bx	lr

0000c5c8 <__udivmoddi4>:
    c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c5ce:	4604      	mov	r4, r0
    c5d0:	4689      	mov	r9, r1
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	f040 8083 	bne.w	c6de <__udivmoddi4+0x116>
    c5d8:	428a      	cmp	r2, r1
    c5da:	4615      	mov	r5, r2
    c5dc:	d945      	bls.n	c66a <__udivmoddi4+0xa2>
    c5de:	fab2 f282 	clz	r2, r2
    c5e2:	b14a      	cbz	r2, c5f8 <__udivmoddi4+0x30>
    c5e4:	f1c2 0720 	rsb	r7, r2, #32
    c5e8:	fa01 f302 	lsl.w	r3, r1, r2
    c5ec:	4095      	lsls	r5, r2
    c5ee:	4094      	lsls	r4, r2
    c5f0:	fa20 f707 	lsr.w	r7, r0, r7
    c5f4:	ea47 0903 	orr.w	r9, r7, r3
    c5f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c5fc:	0c23      	lsrs	r3, r4, #16
    c5fe:	fa1f f885 	uxth.w	r8, r5
    c602:	fbb9 fcfe 	udiv	ip, r9, lr
    c606:	fb0e 991c 	mls	r9, lr, ip, r9
    c60a:	fb0c f108 	mul.w	r1, ip, r8
    c60e:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c612:	4299      	cmp	r1, r3
    c614:	d90a      	bls.n	c62c <__udivmoddi4+0x64>
    c616:	18eb      	adds	r3, r5, r3
    c618:	bf2c      	ite	cs
    c61a:	2001      	movcs	r0, #1
    c61c:	2000      	movcc	r0, #0
    c61e:	4299      	cmp	r1, r3
    c620:	d902      	bls.n	c628 <__udivmoddi4+0x60>
    c622:	2800      	cmp	r0, #0
    c624:	f000 811d 	beq.w	c862 <__udivmoddi4+0x29a>
    c628:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c62c:	1a59      	subs	r1, r3, r1
    c62e:	b2a3      	uxth	r3, r4
    c630:	fbb1 f0fe 	udiv	r0, r1, lr
    c634:	fb0e 1110 	mls	r1, lr, r0, r1
    c638:	fb00 f808 	mul.w	r8, r0, r8
    c63c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c640:	45a0      	cmp	r8, r4
    c642:	d905      	bls.n	c650 <__udivmoddi4+0x88>
    c644:	192c      	adds	r4, r5, r4
    c646:	d202      	bcs.n	c64e <__udivmoddi4+0x86>
    c648:	45a0      	cmp	r8, r4
    c64a:	f200 810e 	bhi.w	c86a <__udivmoddi4+0x2a2>
    c64e:	3801      	subs	r0, #1
    c650:	eba4 0408 	sub.w	r4, r4, r8
    c654:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c658:	2700      	movs	r7, #0
    c65a:	b11e      	cbz	r6, c664 <__udivmoddi4+0x9c>
    c65c:	40d4      	lsrs	r4, r2
    c65e:	2300      	movs	r3, #0
    c660:	e9c6 4300 	strd	r4, r3, [r6]
    c664:	4639      	mov	r1, r7
    c666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c66a:	2a00      	cmp	r2, #0
    c66c:	d051      	beq.n	c712 <__udivmoddi4+0x14a>
    c66e:	fab2 f282 	clz	r2, r2
    c672:	2a00      	cmp	r2, #0
    c674:	f040 80af 	bne.w	c7d6 <__udivmoddi4+0x20e>
    c678:	1b49      	subs	r1, r1, r5
    c67a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c67e:	fa1f f885 	uxth.w	r8, r5
    c682:	2701      	movs	r7, #1
    c684:	0c23      	lsrs	r3, r4, #16
    c686:	fbb1 fcfe 	udiv	ip, r1, lr
    c68a:	fb0e 111c 	mls	r1, lr, ip, r1
    c68e:	fb08 f00c 	mul.w	r0, r8, ip
    c692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c696:	4298      	cmp	r0, r3
    c698:	d90a      	bls.n	c6b0 <__udivmoddi4+0xe8>
    c69a:	18eb      	adds	r3, r5, r3
    c69c:	bf2c      	ite	cs
    c69e:	2101      	movcs	r1, #1
    c6a0:	2100      	movcc	r1, #0
    c6a2:	4298      	cmp	r0, r3
    c6a4:	d902      	bls.n	c6ac <__udivmoddi4+0xe4>
    c6a6:	2900      	cmp	r1, #0
    c6a8:	f000 80d7 	beq.w	c85a <__udivmoddi4+0x292>
    c6ac:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c6b0:	1a19      	subs	r1, r3, r0
    c6b2:	b2a3      	uxth	r3, r4
    c6b4:	fbb1 f0fe 	udiv	r0, r1, lr
    c6b8:	fb0e 1110 	mls	r1, lr, r0, r1
    c6bc:	fb08 f800 	mul.w	r8, r8, r0
    c6c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c6c4:	45a0      	cmp	r8, r4
    c6c6:	d905      	bls.n	c6d4 <__udivmoddi4+0x10c>
    c6c8:	192c      	adds	r4, r5, r4
    c6ca:	d202      	bcs.n	c6d2 <__udivmoddi4+0x10a>
    c6cc:	45a0      	cmp	r8, r4
    c6ce:	f200 80c1 	bhi.w	c854 <__udivmoddi4+0x28c>
    c6d2:	3801      	subs	r0, #1
    c6d4:	eba4 0408 	sub.w	r4, r4, r8
    c6d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6dc:	e7bd      	b.n	c65a <__udivmoddi4+0x92>
    c6de:	428b      	cmp	r3, r1
    c6e0:	d908      	bls.n	c6f4 <__udivmoddi4+0x12c>
    c6e2:	2e00      	cmp	r6, #0
    c6e4:	d074      	beq.n	c7d0 <__udivmoddi4+0x208>
    c6e6:	2700      	movs	r7, #0
    c6e8:	e9c6 0100 	strd	r0, r1, [r6]
    c6ec:	4638      	mov	r0, r7
    c6ee:	4639      	mov	r1, r7
    c6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6f4:	fab3 f783 	clz	r7, r3
    c6f8:	b967      	cbnz	r7, c714 <__udivmoddi4+0x14c>
    c6fa:	428b      	cmp	r3, r1
    c6fc:	f0c0 80a4 	bcc.w	c848 <__udivmoddi4+0x280>
    c700:	4282      	cmp	r2, r0
    c702:	f240 80a1 	bls.w	c848 <__udivmoddi4+0x280>
    c706:	4638      	mov	r0, r7
    c708:	2e00      	cmp	r6, #0
    c70a:	d0ab      	beq.n	c664 <__udivmoddi4+0x9c>
    c70c:	e9c6 4900 	strd	r4, r9, [r6]
    c710:	e7a8      	b.n	c664 <__udivmoddi4+0x9c>
    c712:	deff      	udf	#255	; 0xff
    c714:	f1c7 0520 	rsb	r5, r7, #32
    c718:	40bb      	lsls	r3, r7
    c71a:	fa02 fc07 	lsl.w	ip, r2, r7
    c71e:	fa01 f407 	lsl.w	r4, r1, r7
    c722:	40ea      	lsrs	r2, r5
    c724:	fa20 f805 	lsr.w	r8, r0, r5
    c728:	40e9      	lsrs	r1, r5
    c72a:	fa00 fe07 	lsl.w	lr, r0, r7
    c72e:	431a      	orrs	r2, r3
    c730:	ea48 0404 	orr.w	r4, r8, r4
    c734:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c738:	0c20      	lsrs	r0, r4, #16
    c73a:	fa1f f982 	uxth.w	r9, r2
    c73e:	fbb1 faf8 	udiv	sl, r1, r8
    c742:	fb08 111a 	mls	r1, r8, sl, r1
    c746:	fb0a fb09 	mul.w	fp, sl, r9
    c74a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c74e:	458b      	cmp	fp, r1
    c750:	d90a      	bls.n	c768 <__udivmoddi4+0x1a0>
    c752:	1851      	adds	r1, r2, r1
    c754:	bf2c      	ite	cs
    c756:	2301      	movcs	r3, #1
    c758:	2300      	movcc	r3, #0
    c75a:	458b      	cmp	fp, r1
    c75c:	d902      	bls.n	c764 <__udivmoddi4+0x19c>
    c75e:	2b00      	cmp	r3, #0
    c760:	f000 8088 	beq.w	c874 <__udivmoddi4+0x2ac>
    c764:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c768:	eba1 010b 	sub.w	r1, r1, fp
    c76c:	b2a4      	uxth	r4, r4
    c76e:	fbb1 f0f8 	udiv	r0, r1, r8
    c772:	fb08 1110 	mls	r1, r8, r0, r1
    c776:	fb00 f909 	mul.w	r9, r0, r9
    c77a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c77e:	4589      	cmp	r9, r1
    c780:	d904      	bls.n	c78c <__udivmoddi4+0x1c4>
    c782:	1851      	adds	r1, r2, r1
    c784:	d201      	bcs.n	c78a <__udivmoddi4+0x1c2>
    c786:	4589      	cmp	r9, r1
    c788:	d87b      	bhi.n	c882 <__udivmoddi4+0x2ba>
    c78a:	3801      	subs	r0, #1
    c78c:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c790:	eba1 0109 	sub.w	r1, r1, r9
    c794:	fba0 890c 	umull	r8, r9, r0, ip
    c798:	4549      	cmp	r1, r9
    c79a:	4644      	mov	r4, r8
    c79c:	464b      	mov	r3, r9
    c79e:	d302      	bcc.n	c7a6 <__udivmoddi4+0x1de>
    c7a0:	d106      	bne.n	c7b0 <__udivmoddi4+0x1e8>
    c7a2:	45c6      	cmp	lr, r8
    c7a4:	d204      	bcs.n	c7b0 <__udivmoddi4+0x1e8>
    c7a6:	3801      	subs	r0, #1
    c7a8:	ebb8 040c 	subs.w	r4, r8, ip
    c7ac:	eb69 0302 	sbc.w	r3, r9, r2
    c7b0:	2e00      	cmp	r6, #0
    c7b2:	d05d      	beq.n	c870 <__udivmoddi4+0x2a8>
    c7b4:	ebbe 0204 	subs.w	r2, lr, r4
    c7b8:	eb61 0103 	sbc.w	r1, r1, r3
    c7bc:	fa01 f505 	lsl.w	r5, r1, r5
    c7c0:	fa22 f307 	lsr.w	r3, r2, r7
    c7c4:	40f9      	lsrs	r1, r7
    c7c6:	2700      	movs	r7, #0
    c7c8:	431d      	orrs	r5, r3
    c7ca:	e9c6 5100 	strd	r5, r1, [r6]
    c7ce:	e749      	b.n	c664 <__udivmoddi4+0x9c>
    c7d0:	4637      	mov	r7, r6
    c7d2:	4630      	mov	r0, r6
    c7d4:	e746      	b.n	c664 <__udivmoddi4+0x9c>
    c7d6:	f1c2 0020 	rsb	r0, r2, #32
    c7da:	4095      	lsls	r5, r2
    c7dc:	fa01 f702 	lsl.w	r7, r1, r2
    c7e0:	fa21 f300 	lsr.w	r3, r1, r0
    c7e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7e8:	fa24 f100 	lsr.w	r1, r4, r0
    c7ec:	fa1f f885 	uxth.w	r8, r5
    c7f0:	4094      	lsls	r4, r2
    c7f2:	4339      	orrs	r1, r7
    c7f4:	fbb3 f0fe 	udiv	r0, r3, lr
    c7f8:	0c0f      	lsrs	r7, r1, #16
    c7fa:	fb0e 3310 	mls	r3, lr, r0, r3
    c7fe:	fb00 fc08 	mul.w	ip, r0, r8
    c802:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c806:	459c      	cmp	ip, r3
    c808:	d907      	bls.n	c81a <__udivmoddi4+0x252>
    c80a:	18eb      	adds	r3, r5, r3
    c80c:	bf2c      	ite	cs
    c80e:	2701      	movcs	r7, #1
    c810:	2700      	movcc	r7, #0
    c812:	459c      	cmp	ip, r3
    c814:	d900      	bls.n	c818 <__udivmoddi4+0x250>
    c816:	b38f      	cbz	r7, c87c <__udivmoddi4+0x2b4>
    c818:	3801      	subs	r0, #1
    c81a:	eba3 030c 	sub.w	r3, r3, ip
    c81e:	b289      	uxth	r1, r1
    c820:	fbb3 f7fe 	udiv	r7, r3, lr
    c824:	fb0e 3317 	mls	r3, lr, r7, r3
    c828:	fb07 fc08 	mul.w	ip, r7, r8
    c82c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c830:	458c      	cmp	ip, r1
    c832:	d904      	bls.n	c83e <__udivmoddi4+0x276>
    c834:	1869      	adds	r1, r5, r1
    c836:	d201      	bcs.n	c83c <__udivmoddi4+0x274>
    c838:	458c      	cmp	ip, r1
    c83a:	d825      	bhi.n	c888 <__udivmoddi4+0x2c0>
    c83c:	3f01      	subs	r7, #1
    c83e:	eba1 010c 	sub.w	r1, r1, ip
    c842:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c846:	e71d      	b.n	c684 <__udivmoddi4+0xbc>
    c848:	1a84      	subs	r4, r0, r2
    c84a:	eb61 0303 	sbc.w	r3, r1, r3
    c84e:	2001      	movs	r0, #1
    c850:	4699      	mov	r9, r3
    c852:	e759      	b.n	c708 <__udivmoddi4+0x140>
    c854:	3802      	subs	r0, #2
    c856:	442c      	add	r4, r5
    c858:	e73c      	b.n	c6d4 <__udivmoddi4+0x10c>
    c85a:	f1ac 0c02 	sub.w	ip, ip, #2
    c85e:	442b      	add	r3, r5
    c860:	e726      	b.n	c6b0 <__udivmoddi4+0xe8>
    c862:	f1ac 0c02 	sub.w	ip, ip, #2
    c866:	442b      	add	r3, r5
    c868:	e6e0      	b.n	c62c <__udivmoddi4+0x64>
    c86a:	3802      	subs	r0, #2
    c86c:	442c      	add	r4, r5
    c86e:	e6ef      	b.n	c650 <__udivmoddi4+0x88>
    c870:	4637      	mov	r7, r6
    c872:	e6f7      	b.n	c664 <__udivmoddi4+0x9c>
    c874:	f1aa 0a02 	sub.w	sl, sl, #2
    c878:	4411      	add	r1, r2
    c87a:	e775      	b.n	c768 <__udivmoddi4+0x1a0>
    c87c:	3802      	subs	r0, #2
    c87e:	442b      	add	r3, r5
    c880:	e7cb      	b.n	c81a <__udivmoddi4+0x252>
    c882:	3802      	subs	r0, #2
    c884:	4411      	add	r1, r2
    c886:	e781      	b.n	c78c <__udivmoddi4+0x1c4>
    c888:	3f02      	subs	r7, #2
    c88a:	4429      	add	r1, r5
    c88c:	e7d7      	b.n	c83e <__udivmoddi4+0x276>
    c88e:	bf00      	nop

0000c890 <__aeabi_idiv0>:
    c890:	4770      	bx	lr
    c892:	bf00      	nop

0000c894 <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    c894:	2301      	movs	r3, #1
    c896:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c89a:	4906      	ldr	r1, [pc, #24]	; (c8b4 <bsd_recoverable_error_handler+0x20>)
    c89c:	f363 0207 	bfi	r2, r3, #0, #8
    c8a0:	4b05      	ldr	r3, [pc, #20]	; (c8b8 <bsd_recoverable_error_handler+0x24>)
    c8a2:	1a5b      	subs	r3, r3, r1
    c8a4:	08db      	lsrs	r3, r3, #3
    c8a6:	4601      	mov	r1, r0
    c8a8:	f363 128f 	bfi	r2, r3, #6, #10
    c8ac:	4803      	ldr	r0, [pc, #12]	; (c8bc <bsd_recoverable_error_handler+0x28>)
    c8ae:	f010 b969 	b.w	1cb84 <log_1>
    c8b2:	bf00      	nop
    c8b4:	0001f370 	.word	0x0001f370
    c8b8:	0001f370 	.word	0x0001f370
    c8bc:	0001f93c 	.word	0x0001f93c

0000c8c0 <start_execute>:

void start_execute(void)
{
	int err;

	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c8c0:	2303      	movs	r3, #3
    c8c2:	f04f 0100 	mov.w	r1, #0
{
    c8c6:	b510      	push	{r4, lr}
	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c8c8:	f363 0107 	bfi	r1, r3, #0, #8
    c8cc:	4c14      	ldr	r4, [pc, #80]	; (c920 <start_execute+0x60>)
    c8ce:	4b15      	ldr	r3, [pc, #84]	; (c924 <start_execute+0x64>)
    c8d0:	4815      	ldr	r0, [pc, #84]	; (c928 <start_execute+0x68>)
    c8d2:	1ae4      	subs	r4, r4, r3
    c8d4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c8d8:	f364 118f 	bfi	r1, r4, #6, #10
    c8dc:	f010 f945 	bl	1cb6a <log_0>
	err = slm_at_host_init();
    c8e0:	f000 f902 	bl	cae8 <slm_at_host_init>
	if (err != 0) {
    c8e4:	4601      	mov	r1, r0
    c8e6:	b158      	cbz	r0, c900 <start_execute+0x40>
		LOG_ERR("Failed to init at_host: %d", err);
    c8e8:	f04f 0200 	mov.w	r2, #0
    c8ec:	2301      	movs	r3, #1
    c8ee:	480f      	ldr	r0, [pc, #60]	; (c92c <start_execute+0x6c>)
    c8f0:	f363 0207 	bfi	r2, r3, #0, #8
    c8f4:	f364 128f 	bfi	r2, r4, #6, #10
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
}
    c8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    c8fc:	f010 b942 	b.w	1cb84 <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    c900:	2108      	movs	r1, #8
    c902:	480b      	ldr	r0, [pc, #44]	; (c930 <start_execute+0x70>)
    c904:	f011 fedd 	bl	1e6c2 <at_params_list_init>
	if (err) {
    c908:	4601      	mov	r1, r0
    c90a:	b140      	cbz	r0, c91e <start_execute+0x5e>
		LOG_ERR("Failed to init AT Parser: %d", err);
    c90c:	f04f 0200 	mov.w	r2, #0
    c910:	2301      	movs	r3, #1
    c912:	f363 0207 	bfi	r2, r3, #0, #8
    c916:	f364 128f 	bfi	r2, r4, #6, #10
    c91a:	4806      	ldr	r0, [pc, #24]	; (c934 <start_execute+0x74>)
    c91c:	e7ec      	b.n	c8f8 <start_execute+0x38>
}
    c91e:	bd10      	pop	{r4, pc}
    c920:	0001f370 	.word	0x0001f370
    c924:	0001f370 	.word	0x0001f370
    c928:	0001f959 	.word	0x0001f959
    c92c:	0001f978 	.word	0x0001f978
    c930:	20020110 	.word	0x20020110
    c934:	0001f993 	.word	0x0001f993

0000c938 <write_uart_string>:

/* forward declaration */
void slm_at_host_uninit(void);

static inline void write_uart_string(char *str, size_t len)
{
    c938:	b570      	push	{r4, r5, r6, lr}
    c93a:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    c93c:	4e05      	ldr	r6, [pc, #20]	; (c954 <write_uart_string+0x1c>)
    c93e:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    c940:	42ac      	cmp	r4, r5
    c942:	d100      	bne.n	c946 <write_uart_string+0xe>
	}
}
    c944:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    c946:	6830      	ldr	r0, [r6, #0]
    c948:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    c94c:	6843      	ldr	r3, [r0, #4]
    c94e:	685b      	ldr	r3, [r3, #4]
    c950:	4798      	blx	r3
    c952:	e7f5      	b.n	c940 <write_uart_string+0x8>
    c954:	2002012c 	.word	0x2002012c

0000c958 <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    c958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c95c:	4607      	mov	r7, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    c95e:	6843      	ldr	r3, [r0, #4]
    c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c962:	b103      	cbz	r3, c966 <isr+0xe>
		return api->irq_update(dev);
    c964:	4798      	blx	r3
	if (api->irq_rx_ready) {
    c966:	687b      	ldr	r3, [r7, #4]
    c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c96a:	b19b      	cbz	r3, c994 <isr+0x3c>
		return api->irq_rx_ready(dev);
    c96c:	4638      	mov	r0, r7
    c96e:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    c970:	b180      	cbz	r0, c994 <isr+0x3c>
    c972:	4d4f      	ldr	r5, [pc, #316]	; (cab0 <isr+0x158>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c974:	4b4f      	ldr	r3, [pc, #316]	; (cab4 <isr+0x15c>)
	cmd_len += 1;
    c976:	4e50      	ldr	r6, [pc, #320]	; (cab8 <isr+0x160>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c978:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    c97a:	f8df b168 	ldr.w	fp, [pc, #360]	; cae4 <isr+0x18c>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c97e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    c982:	687b      	ldr	r3, [r7, #4]
    c984:	699b      	ldr	r3, [r3, #24]
    c986:	b12b      	cbz	r3, c994 <isr+0x3c>
		return api->fifo_read(dev, rx_data, size);
    c988:	2201      	movs	r2, #1
    c98a:	f10d 0107 	add.w	r1, sp, #7
    c98e:	4638      	mov	r0, r7
    c990:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    c992:	b910      	cbnz	r0, c99a <isr+0x42>
		uart_rx_handler(character);
	}
}
    c994:	b003      	add	sp, #12
    c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    c99a:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    c99c:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
    c9a0:	1c54      	adds	r4, r2, #1
	switch (character) {
    c9a2:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    c9a4:	6034      	str	r4, [r6, #0]
	switch (character) {
    c9a6:	d019      	beq.n	c9dc <isr+0x84>
    c9a8:	297f      	cmp	r1, #127	; 0x7f
    c9aa:	d001      	beq.n	c9b0 <isr+0x58>
    c9ac:	2908      	cmp	r1, #8
    c9ae:	d11b      	bne.n	c9e8 <isr+0x90>
		pos = pos ? pos - 1 : 0;
    c9b0:	b102      	cbz	r2, c9b4 <isr+0x5c>
    c9b2:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9b4:	2c02      	cmp	r4, #2
    c9b6:	bf38      	it	cc
    c9b8:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    c9ba:	2000      	movs	r0, #0
    c9bc:	4b3f      	ldr	r3, [pc, #252]	; (cabc <isr+0x164>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9be:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    c9c0:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c9c2:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    c9c4:	f89b 3000 	ldrb.w	r3, [fp]
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d1da      	bne.n	c982 <isr+0x2a>
	switch (term_mode) {
    c9cc:	4b3c      	ldr	r3, [pc, #240]	; (cac0 <isr+0x168>)
    c9ce:	781b      	ldrb	r3, [r3, #0]
    c9d0:	2b03      	cmp	r3, #3
    c9d2:	d85e      	bhi.n	ca92 <isr+0x13a>
    c9d4:	e8df f003 	tbb	[pc, r3]
    c9d8:	554d2f2f 	.word	0x554d2f2f
		inside_quotes = !inside_quotes;
    c9dc:	f89b 3000 	ldrb.w	r3, [fp]
    c9e0:	f083 0301 	eor.w	r3, r3, #1
    c9e4:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    c9e8:	f640 238c 	movw	r3, #2700	; 0xa8c
    c9ec:	429c      	cmp	r4, r3
    c9ee:	d90f      	bls.n	ca10 <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    c9f0:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    c9f4:	f042 0201 	orr.w	r2, r2, #1
    c9f8:	f362 0807 	bfi	r8, r2, #0, #8
    c9fc:	f365 188f 	bfi	r8, r5, #6, #10
    ca00:	4642      	mov	r2, r8
    ca02:	4830      	ldr	r0, [pc, #192]	; (cac4 <isr+0x16c>)
    ca04:	f010 f8be 	bl	1cb84 <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    ca08:	f640 238c 	movw	r3, #2700	; 0xa8c
	cmd_len = 0;
    ca0c:	6033      	str	r3, [r6, #0]
    ca0e:	e7b8      	b.n	c982 <isr+0x2a>
		} else if (cmd_len < 1) {
    ca10:	b974      	cbnz	r4, ca30 <isr+0xd8>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    ca12:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    ca16:	f043 0301 	orr.w	r3, r3, #1
    ca1a:	f363 0907 	bfi	r9, r3, #0, #8
    ca1e:	f365 198f 	bfi	r9, r5, #6, #10
    ca22:	464a      	mov	r2, r9
    ca24:	4621      	mov	r1, r4
    ca26:	4828      	ldr	r0, [pc, #160]	; (cac8 <isr+0x170>)
    ca28:	f010 f8ac 	bl	1cb84 <log_1>
			cmd_len = 0;
    ca2c:	6034      	str	r4, [r6, #0]
			return;
    ca2e:	e7a8      	b.n	c982 <isr+0x2a>
		at_buf[pos] = character;
    ca30:	4b22      	ldr	r3, [pc, #136]	; (cabc <isr+0x164>)
    ca32:	5499      	strb	r1, [r3, r2]
		break;
    ca34:	e7c6      	b.n	c9c4 <isr+0x6c>
		if (character == termination[term_mode]) {
    ca36:	4a25      	ldr	r2, [pc, #148]	; (cacc <isr+0x174>)
    ca38:	5cd3      	ldrb	r3, [r2, r3]
    ca3a:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    ca3c:	d1a1      	bne.n	c982 <isr+0x2a>
	uart_irq_rx_disable(uart_dev);
    ca3e:	4b24      	ldr	r3, [pc, #144]	; (cad0 <isr+0x178>)
    ca40:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    ca42:	6843      	ldr	r3, [r0, #4]
    ca44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ca46:	b103      	cbz	r3, ca4a <isr+0xf2>
		api->irq_rx_disable(dev);
    ca48:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca4a:	4922      	ldr	r1, [pc, #136]	; (cad4 <isr+0x17c>)
    ca4c:	e8d1 3fef 	ldaex	r3, [r1]
    ca50:	f043 0201 	orr.w	r2, r3, #1
    ca54:	e8c1 2fe0 	stlex	r0, r2, [r1]
    ca58:	2800      	cmp	r0, #0
    ca5a:	d1f7      	bne.n	ca4c <isr+0xf4>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ca5c:	07db      	lsls	r3, r3, #31
    ca5e:	d403      	bmi.n	ca68 <isr+0x110>
		k_queue_append(&work_q->queue, work);
    ca60:	3908      	subs	r1, #8
    ca62:	481d      	ldr	r0, [pc, #116]	; (cad8 <isr+0x180>)
    ca64:	f011 ffc5 	bl	1e9f2 <k_queue_append>
	at_buf_len = cmd_len;
    ca68:	4b1c      	ldr	r3, [pc, #112]	; (cadc <isr+0x184>)
    ca6a:	6832      	ldr	r2, [r6, #0]
    ca6c:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    ca6e:	2300      	movs	r3, #0
    ca70:	e7cc      	b.n	ca0c <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    ca72:	4b12      	ldr	r3, [pc, #72]	; (cabc <isr+0x164>)
    ca74:	441a      	add	r2, r3
    ca76:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d081      	beq.n	c982 <isr+0x2a>
    ca7e:	290a      	cmp	r1, #10
    ca80:	e7dc      	b.n	ca3c <isr+0xe4>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    ca82:	4b0e      	ldr	r3, [pc, #56]	; (cabc <isr+0x164>)
    ca84:	441a      	add	r2, r3
    ca86:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    ca8a:	2b0d      	cmp	r3, #13
    ca8c:	f47f af79 	bne.w	c982 <isr+0x2a>
    ca90:	e7f5      	b.n	ca7e <isr+0x126>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    ca92:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    ca96:	f042 0201 	orr.w	r2, r2, #1
    ca9a:	f362 0a07 	bfi	sl, r2, #0, #8
    ca9e:	f365 1a8f 	bfi	sl, r5, #6, #10
    caa2:	4652      	mov	r2, sl
    caa4:	4619      	mov	r1, r3
    caa6:	480e      	ldr	r0, [pc, #56]	; (cae0 <isr+0x188>)
    caa8:	f010 f86c 	bl	1cb84 <log_1>
    caac:	e769      	b.n	c982 <isr+0x2a>
    caae:	bf00      	nop
    cab0:	0001f380 	.word	0x0001f380
    cab4:	0001f370 	.word	0x0001f370
    cab8:	2002011c 	.word	0x2002011c
    cabc:	20024e4e 	.word	0x20024e4e
    cac0:	20026367 	.word	0x20026367
    cac4:	0001fa54 	.word	0x0001fa54
    cac8:	0001fa74 	.word	0x0001fa74
    cacc:	0001fbf5 	.word	0x0001fbf5
    cad0:	2002012c 	.word	0x2002012c
    cad4:	20020128 	.word	0x20020128
    cad8:	20024d68 	.word	0x20024d68
    cadc:	20020118 	.word	0x20020118
    cae0:	0001fa92 	.word	0x0001fa92
    cae4:	20026366 	.word	0x20026366

0000cae8 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    cae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    caea:	2203      	movs	r2, #3
    caec:	4b49      	ldr	r3, [pc, #292]	; (cc14 <slm_at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    caee:	494a      	ldr	r1, [pc, #296]	; (cc18 <slm_at_host_init+0x130>)
    caf0:	2000      	movs	r0, #0
		term_mode = mode;
    caf2:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    caf4:	f005 fbfa 	bl	122ec <at_notif_register_handler>
	if (err != 0) {
    caf8:	4c48      	ldr	r4, [pc, #288]	; (cc1c <slm_at_host_init+0x134>)
    cafa:	4b49      	ldr	r3, [pc, #292]	; (cc20 <slm_at_host_init+0x138>)
    cafc:	4605      	mov	r5, r0
    cafe:	1ae4      	subs	r4, r4, r3
    cb00:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    cb04:	b168      	cbz	r0, cb22 <slm_at_host_init+0x3a>
		LOG_ERR("Can't register handler err=%d", err);
    cb06:	f04f 0200 	mov.w	r2, #0
    cb0a:	2301      	movs	r3, #1
    cb0c:	f363 0207 	bfi	r2, r3, #0, #8
    cb10:	4601      	mov	r1, r0
    cb12:	f364 128f 	bfi	r2, r4, #6, #10
    cb16:	4843      	ldr	r0, [pc, #268]	; (cc24 <slm_at_host_init+0x13c>)
    cb18:	f010 f834 	bl	1cb84 <log_1>
		return -EFAULT;
	}
#endif
	LOG_DBG("at_host init done");
	return err;
}
    cb1c:	4628      	mov	r0, r5
    cb1e:	b003      	add	sp, #12
    cb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    cb22:	4841      	ldr	r0, [pc, #260]	; (cc28 <slm_at_host_init+0x140>)
    cb24:	f00e fa10 	bl	1af48 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    cb28:	4d40      	ldr	r5, [pc, #256]	; (cc2c <slm_at_host_init+0x144>)
    cb2a:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
    cb2c:	b1e8      	cbz	r0, cb6a <slm_at_host_init+0x82>
			LOG_ERR("UART check failed: %d. "
    cb2e:	4f40      	ldr	r7, [pc, #256]	; (cc30 <slm_at_host_init+0x148>)
		err = uart_err_check(uart_dev);
    cb30:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
    cb32:	6843      	ldr	r3, [r0, #4]
    cb34:	689b      	ldr	r3, [r3, #8]
    cb36:	2b00      	cmp	r3, #0
    cb38:	d048      	beq.n	cbcc <slm_at_host_init+0xe4>
		return api->err_check(dev);
    cb3a:	4798      	blx	r3
		if (err) {
    cb3c:	4601      	mov	r1, r0
    cb3e:	2800      	cmp	r0, #0
    cb40:	d044      	beq.n	cbcc <slm_at_host_init+0xe4>
			LOG_ERR("UART check failed: %d. "
    cb42:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    cb46:	f043 0301 	orr.w	r3, r3, #1
    cb4a:	f363 0607 	bfi	r6, r3, #0, #8
    cb4e:	f364 168f 	bfi	r6, r4, #6, #10
    cb52:	4632      	mov	r2, r6
    cb54:	4638      	mov	r0, r7
    cb56:	f010 f815 	bl	1cb84 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    cb5a:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
    cb5c:	6843      	ldr	r3, [r0, #4]
    cb5e:	699b      	ldr	r3, [r3, #24]
    cb60:	b9eb      	cbnz	r3, cb9e <slm_at_host_init+0xb6>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    cb62:	200a      	movs	r0, #10
    cb64:	f00f f894 	bl	1bc90 <z_impl_k_sleep>
    cb68:	e7e2      	b.n	cb30 <slm_at_host_init+0x48>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    cb6a:	2301      	movs	r3, #1
    cb6c:	f04f 0200 	mov.w	r2, #0
    cb70:	f363 0207 	bfi	r2, r3, #0, #8
    cb74:	f364 128f 	bfi	r2, r4, #6, #10
    cb78:	492b      	ldr	r1, [pc, #172]	; (cc28 <slm_at_host_init+0x140>)
    cb7a:	482e      	ldr	r0, [pc, #184]	; (cc34 <slm_at_host_init+0x14c>)
    cb7c:	f010 f802 	bl	1cb84 <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    cb80:	f04f 0200 	mov.w	r2, #0
    cb84:	2301      	movs	r3, #1
    cb86:	f06f 0115 	mvn.w	r1, #21
    cb8a:	f363 0207 	bfi	r2, r3, #0, #8
    cb8e:	482a      	ldr	r0, [pc, #168]	; (cc38 <slm_at_host_init+0x150>)
    cb90:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("GPS could not be initialized: %d", err);
    cb94:	f00f fff6 	bl	1cb84 <log_1>
		return -EFAULT;
    cb98:	f06f 050d 	mvn.w	r5, #13
    cb9c:	e7be      	b.n	cb1c <slm_at_host_init+0x34>
		return api->fifo_read(dev, rx_data, size);
    cb9e:	2201      	movs	r2, #1
    cba0:	f10d 0107 	add.w	r1, sp, #7
    cba4:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    cba6:	2800      	cmp	r0, #0
    cba8:	d1d7      	bne.n	cb5a <slm_at_host_init+0x72>
    cbaa:	e7da      	b.n	cb62 <slm_at_host_init+0x7a>
	err = slm_at_gps_init(slm_at_callback);
    cbac:	4823      	ldr	r0, [pc, #140]	; (cc3c <slm_at_host_init+0x154>)
    cbae:	f001 feeb 	bl	e988 <slm_at_gps_init>
	if (err) {
    cbb2:	4605      	mov	r5, r0
    cbb4:	2800      	cmp	r0, #0
    cbb6:	d0b1      	beq.n	cb1c <slm_at_host_init+0x34>
		LOG_ERR("GPS could not be initialized: %d", err);
    cbb8:	f04f 0200 	mov.w	r2, #0
    cbbc:	2301      	movs	r3, #1
    cbbe:	f363 0207 	bfi	r2, r3, #0, #8
    cbc2:	4601      	mov	r1, r0
    cbc4:	f364 128f 	bfi	r2, r4, #6, #10
    cbc8:	481d      	ldr	r0, [pc, #116]	; (cc40 <slm_at_host_init+0x158>)
    cbca:	e7e3      	b.n	cb94 <slm_at_host_init+0xac>
	uart_irq_callback_set(uart_dev, isr);
    cbcc:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    cbce:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    cbd0:	b123      	cbz	r3, cbdc <slm_at_host_init+0xf4>
    cbd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    cbd4:	b113      	cbz	r3, cbdc <slm_at_host_init+0xf4>
		api->irq_callback_set(dev, cb, user_data);
    cbd6:	491b      	ldr	r1, [pc, #108]	; (cc44 <slm_at_host_init+0x15c>)
    cbd8:	4610      	mov	r0, r2
    cbda:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    cbdc:	2200      	movs	r2, #0
    cbde:	4b1a      	ldr	r3, [pc, #104]	; (cc48 <slm_at_host_init+0x160>)
    cbe0:	491a      	ldr	r1, [pc, #104]	; (cc4c <slm_at_host_init+0x164>)
	uart_irq_rx_enable(uart_dev);
    cbe2:	6828      	ldr	r0, [r5, #0]
    cbe4:	e9c3 1201 	strd	r1, r2, [r3, #4]
    cbe8:	601a      	str	r2, [r3, #0]
    cbea:	f00f fc07 	bl	1c3fc <uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    cbee:	2107      	movs	r1, #7
    cbf0:	4817      	ldr	r0, [pc, #92]	; (cc50 <slm_at_host_init+0x168>)
    cbf2:	f7ff fea1 	bl	c938 <write_uart_string>
	err = slm_at_tcpip_init(slm_at_callback);
    cbf6:	4811      	ldr	r0, [pc, #68]	; (cc3c <slm_at_host_init+0x154>)
    cbf8:	f001 fa1c 	bl	e034 <slm_at_tcpip_init>
	if (err) {
    cbfc:	4601      	mov	r1, r0
    cbfe:	2800      	cmp	r0, #0
    cc00:	d0d4      	beq.n	cbac <slm_at_host_init+0xc4>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    cc02:	f04f 0200 	mov.w	r2, #0
    cc06:	2301      	movs	r3, #1
    cc08:	f363 0207 	bfi	r2, r3, #0, #8
    cc0c:	f364 128f 	bfi	r2, r4, #6, #10
    cc10:	4810      	ldr	r0, [pc, #64]	; (cc54 <slm_at_host_init+0x16c>)
    cc12:	e7bf      	b.n	cb94 <slm_at_host_init+0xac>
    cc14:	20026367 	.word	0x20026367
    cc18:	0001c41b 	.word	0x0001c41b
    cc1c:	0001f380 	.word	0x0001f380
    cc20:	0001f370 	.word	0x0001f370
    cc24:	0001faaf 	.word	0x0001faaf
    cc28:	0001facd 	.word	0x0001facd
    cc2c:	2002012c 	.word	0x2002012c
    cc30:	0001fb04 	.word	0x0001fb04
    cc34:	0001fad4 	.word	0x0001fad4
    cc38:	0001fae4 	.word	0x0001fae4
    cc3c:	0001c407 	.word	0x0001c407
    cc40:	0001fb64 	.word	0x0001fb64
    cc44:	0000c959 	.word	0x0000c959
    cc48:	20020120 	.word	0x20020120
    cc4c:	0000cce9 	.word	0x0000cce9
    cc50:	0001fb39 	.word	0x0001fb39
    cc54:	0001fb41 	.word	0x0001fb41

0000cc58 <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
    cc58:	b508      	push	{r3, lr}
	int err;

#if defined(CONFIG_SLM_TCPIP_AT_MODE)
	/* Uninitialize the TCPIP module */
	err = slm_at_tcpip_uninit();
    cc5a:	f00f fbf0 	bl	1c43e <slm_at_tcpip_uninit>
	if (err) {
    cc5e:	4601      	mov	r1, r0
    cc60:	b168      	cbz	r0, cc7e <slm_at_host_uninit+0x26>
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
    cc62:	2302      	movs	r3, #2
    cc64:	f04f 0200 	mov.w	r2, #0
    cc68:	4819      	ldr	r0, [pc, #100]	; (ccd0 <slm_at_host_uninit+0x78>)
    cc6a:	f363 0207 	bfi	r2, r3, #0, #8
    cc6e:	4b19      	ldr	r3, [pc, #100]	; (ccd4 <slm_at_host_uninit+0x7c>)
    cc70:	1a1b      	subs	r3, r3, r0
    cc72:	08db      	lsrs	r3, r3, #3
    cc74:	f363 128f 	bfi	r2, r3, #6, #10
    cc78:	4817      	ldr	r0, [pc, #92]	; (ccd8 <slm_at_host_uninit+0x80>)
    cc7a:	f00f ff83 	bl	1cb84 <log_1>
	}
#endif
#if defined(CONFIG_SLM_GPS_AT_MODE)
	/* Uninitialize the GPS module */
	err = slm_at_gps_uninit();
    cc7e:	f001 ff1d 	bl	eabc <slm_at_gps_uninit>
	if (err) {
    cc82:	4601      	mov	r1, r0
    cc84:	b168      	cbz	r0, cca2 <slm_at_host_uninit+0x4a>
		LOG_WRN("GPS could not be uninitialized: %d", err);
    cc86:	2302      	movs	r3, #2
    cc88:	f04f 0200 	mov.w	r2, #0
    cc8c:	4810      	ldr	r0, [pc, #64]	; (ccd0 <slm_at_host_uninit+0x78>)
    cc8e:	f363 0207 	bfi	r2, r3, #0, #8
    cc92:	4b10      	ldr	r3, [pc, #64]	; (ccd4 <slm_at_host_uninit+0x7c>)
    cc94:	1a1b      	subs	r3, r3, r0
    cc96:	08db      	lsrs	r3, r3, #3
    cc98:	f363 128f 	bfi	r2, r3, #6, #10
    cc9c:	480f      	ldr	r0, [pc, #60]	; (ccdc <slm_at_host_uninit+0x84>)
    cc9e:	f00f ff71 	bl	1cb84 <log_1>
	}
#endif
	err = at_notif_deregister_handler(NULL, response_handler);
    cca2:	490f      	ldr	r1, [pc, #60]	; (cce0 <slm_at_host_uninit+0x88>)
    cca4:	2000      	movs	r0, #0
    cca6:	f005 fb71 	bl	1238c <at_notif_deregister_handler>
	if (err != 0) {
    ccaa:	4601      	mov	r1, r0
    ccac:	b178      	cbz	r0, ccce <slm_at_host_uninit+0x76>
		LOG_WRN("Can't deregister handler err=%d", err);
    ccae:	2302      	movs	r3, #2
    ccb0:	f04f 0200 	mov.w	r2, #0
    ccb4:	4806      	ldr	r0, [pc, #24]	; (ccd0 <slm_at_host_uninit+0x78>)
    ccb6:	f363 0207 	bfi	r2, r3, #0, #8
    ccba:	4b06      	ldr	r3, [pc, #24]	; (ccd4 <slm_at_host_uninit+0x7c>)
    ccbc:	1a1b      	subs	r3, r3, r0
    ccbe:	08db      	lsrs	r3, r3, #3
    ccc0:	f363 128f 	bfi	r2, r3, #6, #10
    ccc4:	4807      	ldr	r0, [pc, #28]	; (cce4 <slm_at_host_uninit+0x8c>)
	if (err != 0) {
		LOG_WRN("Can't power off uart err=%d", err);
	}
#endif
	LOG_DBG("at_host uninit done");
}
    ccc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_WRN("Can't deregister handler err=%d", err);
    ccca:	f00f bf5b 	b.w	1cb84 <log_1>
}
    ccce:	bd08      	pop	{r3, pc}
    ccd0:	0001f370 	.word	0x0001f370
    ccd4:	0001f380 	.word	0x0001f380
    ccd8:	0001fb85 	.word	0x0001fb85
    ccdc:	0001fbaa 	.word	0x0001fbaa
    cce0:	0001c41b 	.word	0x0001c41b
    cce4:	0001fbcd 	.word	0x0001fbcd

0000cce8 <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    cce8:	4a68      	ldr	r2, [pc, #416]	; (ce8c <cmd_send+0x1a4>)
    ccea:	4b69      	ldr	r3, [pc, #420]	; (ce90 <cmd_send+0x1a8>)
    ccec:	6811      	ldr	r1, [r2, #0]
    ccee:	f640 228b 	movw	r2, #2699	; 0xa8b
    ccf2:	4291      	cmp	r1, r2
    ccf4:	bf28      	it	cs
    ccf6:	4611      	movcs	r1, r2
    ccf8:	2200      	movs	r2, #0
{
    ccfa:	b530      	push	{r4, r5, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    ccfc:	461c      	mov	r4, r3
    ccfe:	4865      	ldr	r0, [pc, #404]	; (ce94 <cmd_send+0x1ac>)
{
    cd00:	b087      	sub	sp, #28
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    cd02:	545a      	strb	r2, [r3, r1]
static inline bool slm_at_cmd_cmp(const char *cmd,
				const char *slm_cmd,
				u8_t length)
{
	for (int i = 0; i < length; i++) {
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    cd04:	f814 1b01 	ldrb.w	r1, [r4], #1
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
    cd08:	f1a1 0561 	sub.w	r5, r1, #97	; 0x61
    cd0c:	2d19      	cmp	r5, #25
    cd0e:	f810 5b01 	ldrb.w	r5, [r0], #1
    cd12:	bf98      	it	ls
    cd14:	3920      	subls	r1, #32
    cd16:	428d      	cmp	r5, r1
    cd18:	d105      	bne.n	cd26 <cmd_send+0x3e>
	for (int i = 0; i < length; i++) {
    cd1a:	3201      	adds	r2, #1
    cd1c:	2a0a      	cmp	r2, #10
    cd1e:	d1f1      	bne.n	cd04 <cmd_send+0x1c>
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    cd20:	2110      	movs	r1, #16
    cd22:	485d      	ldr	r0, [pc, #372]	; (ce98 <cmd_send+0x1b0>)
    cd24:	e079      	b.n	ce1a <cmd_send+0x132>
    cd26:	2100      	movs	r1, #0
    cd28:	485c      	ldr	r0, [pc, #368]	; (ce9c <cmd_send+0x1b4>)
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    cd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
    cd2e:	f1a2 0461 	sub.w	r4, r2, #97	; 0x61
    cd32:	2c19      	cmp	r4, #25
    cd34:	f810 4b01 	ldrb.w	r4, [r0], #1
    cd38:	bf98      	it	ls
    cd3a:	3a20      	subls	r2, #32
    cd3c:	4294      	cmp	r4, r2
    cd3e:	d17a      	bne.n	ce36 <cmd_send+0x14e>
	for (int i = 0; i < length; i++) {
    cd40:	3101      	adds	r1, #1
    cd42:	2909      	cmp	r1, #9
    cd44:	d1f1      	bne.n	cd2a <cmd_send+0x42>
	ret = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    cd46:	4a56      	ldr	r2, [pc, #344]	; (cea0 <cmd_send+0x1b8>)
    cd48:	2100      	movs	r1, #0
    cd4a:	4851      	ldr	r0, [pc, #324]	; (ce90 <cmd_send+0x1a8>)
    cd4c:	f011 fc68 	bl	1e620 <at_parser_params_from_str>
	if (ret < 0) {
    cd50:	1e04      	subs	r4, r0, #0
    cd52:	da18      	bge.n	cd86 <cmd_send+0x9e>
		LOG_ERR("Failed to parse AT command %d", ret);
    cd54:	2301      	movs	r3, #1
    cd56:	f04f 0200 	mov.w	r2, #0
    cd5a:	4952      	ldr	r1, [pc, #328]	; (cea4 <cmd_send+0x1bc>)
    cd5c:	f363 0207 	bfi	r2, r3, #0, #8
    cd60:	4b51      	ldr	r3, [pc, #324]	; (cea8 <cmd_send+0x1c0>)
    cd62:	4852      	ldr	r0, [pc, #328]	; (ceac <cmd_send+0x1c4>)
    cd64:	1a5b      	subs	r3, r3, r1
    cd66:	08db      	lsrs	r3, r3, #3
    cd68:	f363 128f 	bfi	r2, r3, #6, #10
    cd6c:	4621      	mov	r1, r4
    cd6e:	f00f ff09 	bl	1cb84 <log_1>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    cd72:	2108      	movs	r1, #8
    cd74:	484e      	ldr	r0, [pc, #312]	; (ceb0 <cmd_send+0x1c8>)
		write_uart_string(str, ++chars);
    cd76:	f7ff fddf 	bl	c938 <write_uart_string>
	uart_irq_rx_enable(uart_dev);
    cd7a:	4b4e      	ldr	r3, [pc, #312]	; (ceb4 <cmd_send+0x1cc>)
    cd7c:	6818      	ldr	r0, [r3, #0]
    cd7e:	f00f fb3d 	bl	1c3fc <uart_irq_rx_enable>
}
    cd82:	b007      	add	sp, #28
    cd84:	bd30      	pop	{r4, r5, pc}
	type = at_parser_cmd_type_get(at_cmd);
    cd86:	4842      	ldr	r0, [pc, #264]	; (ce90 <cmd_send+0x1a8>)
    cd88:	f011 fc4d 	bl	1e626 <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    cd8c:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
    cd8e:	4605      	mov	r5, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    cd90:	d12c      	bne.n	cdec <cmd_send+0x104>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    cd92:	4843      	ldr	r0, [pc, #268]	; (cea0 <cmd_send+0x1b8>)
    cd94:	f011 fd73 	bl	1e87e <at_params_valid_count_get>
    cd98:	2801      	cmp	r0, #1
    cd9a:	d80e      	bhi.n	cdba <cmd_send+0xd2>
			LOG_ERR("AT parameter error");
    cd9c:	2301      	movs	r3, #1
    cd9e:	f04f 0100 	mov.w	r1, #0
    cda2:	4a40      	ldr	r2, [pc, #256]	; (cea4 <cmd_send+0x1bc>)
    cda4:	f363 0107 	bfi	r1, r3, #0, #8
    cda8:	4b3f      	ldr	r3, [pc, #252]	; (cea8 <cmd_send+0x1c0>)
    cdaa:	4843      	ldr	r0, [pc, #268]	; (ceb8 <cmd_send+0x1d0>)
    cdac:	1a9b      	subs	r3, r3, r2
    cdae:	08db      	lsrs	r3, r3, #3
    cdb0:	f363 118f 	bfi	r1, r3, #6, #10
    cdb4:	f00f fed9 	bl	1cb6a <log_0>
		if (err == 0) {
    cdb8:	e7db      	b.n	cd72 <cmd_send+0x8a>
		ret = at_params_short_get(&m_param_list, 1, &shutdown_mode);
    cdba:	aa02      	add	r2, sp, #8
    cdbc:	4629      	mov	r1, r5
    cdbe:	4838      	ldr	r0, [pc, #224]	; (cea0 <cmd_send+0x1b8>)
    cdc0:	f011 fd28 	bl	1e814 <at_params_short_get>
		if (ret < 0) {
    cdc4:	2800      	cmp	r0, #0
    cdc6:	dbe9      	blt.n	cd9c <cmd_send+0xb4>
		switch (shutdown_mode) {
    cdc8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d0e5      	beq.n	cd9c <cmd_send+0xb4>
    cdd0:	2b02      	cmp	r3, #2
    cdd2:	d908      	bls.n	cde6 <cmd_send+0xfe>
    cdd4:	2b03      	cmp	r3, #3
    cdd6:	d1e1      	bne.n	cd9c <cmd_send+0xb4>
			enter_sleep(shutdown_mode);
    cdd8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    cddc:	f00f faf2 	bl	1c3c4 <enter_sleep>
		write_uart_string(OK_STR, sizeof(OK_STR));
    cde0:	2105      	movs	r1, #5
    cde2:	4836      	ldr	r0, [pc, #216]	; (cebc <cmd_send+0x1d4>)
    cde4:	e7c7      	b.n	cd76 <cmd_send+0x8e>
			slm_at_host_uninit();
    cde6:	f7ff ff37 	bl	cc58 <slm_at_host_uninit>
    cdea:	e7f5      	b.n	cdd8 <cmd_send+0xf0>
		if (err == 0) {
    cdec:	2c00      	cmp	r4, #0
    cdee:	d1c0      	bne.n	cd72 <cmd_send+0x8a>
    cdf0:	e7f6      	b.n	cde0 <cmd_send+0xf8>
	switch (state) {
    cdf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cdf6:	2b03      	cmp	r3, #3
    cdf8:	d8bf      	bhi.n	cd7a <cmd_send+0x92>
    cdfa:	a201      	add	r2, pc, #4	; (adr r2, ce00 <cmd_send+0x118>)
    cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce00:	0000ce11 	.word	0x0000ce11
    ce04:	0000cd73 	.word	0x0000cd73
    ce08:	0000ce21 	.word	0x0000ce21
    ce0c:	0000ce31 	.word	0x0000ce31
		write_uart_string(buf, strlen(buf));
    ce10:	482b      	ldr	r0, [pc, #172]	; (cec0 <cmd_send+0x1d8>)
    ce12:	f010 fbe5 	bl	1d5e0 <strlen>
    ce16:	4601      	mov	r1, r0
    ce18:	4829      	ldr	r0, [pc, #164]	; (cec0 <cmd_send+0x1d8>)
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    ce1a:	f7ff fd8d 	bl	c938 <write_uart_string>
    ce1e:	e7df      	b.n	cde0 <cmd_send+0xf8>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    ce20:	460a      	mov	r2, r1
    ce22:	4928      	ldr	r1, [pc, #160]	; (cec4 <cmd_send+0x1dc>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    ce24:	a802      	add	r0, sp, #8
    ce26:	f004 f897 	bl	10f58 <sprintf>
		write_uart_string(str, ++chars);
    ce2a:	1c41      	adds	r1, r0, #1
    ce2c:	a802      	add	r0, sp, #8
    ce2e:	e7a2      	b.n	cd76 <cmd_send+0x8e>
		chars = sprintf(str, "+CME: %d\r\n", err);
    ce30:	460a      	mov	r2, r1
    ce32:	4925      	ldr	r1, [pc, #148]	; (cec8 <cmd_send+0x1e0>)
    ce34:	e7f6      	b.n	ce24 <cmd_send+0x13c>
	err = slm_at_tcpip_parse(at_buf);
    ce36:	4816      	ldr	r0, [pc, #88]	; (ce90 <cmd_send+0x1a8>)
    ce38:	f000 fe52 	bl	dae0 <slm_at_tcpip_parse>
	if (err == 0) {
    ce3c:	2800      	cmp	r0, #0
    ce3e:	d0cf      	beq.n	cde0 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    ce40:	3023      	adds	r0, #35	; 0x23
    ce42:	d196      	bne.n	cd72 <cmd_send+0x8a>
	err = slm_at_gps_parse(at_buf);
    ce44:	4812      	ldr	r0, [pc, #72]	; (ce90 <cmd_send+0x1a8>)
    ce46:	f001 fd5d 	bl	e904 <slm_at_gps_parse>
	if (err == 0) {
    ce4a:	2800      	cmp	r0, #0
    ce4c:	d0c8      	beq.n	cde0 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    ce4e:	3023      	adds	r0, #35	; 0x23
    ce50:	d18f      	bne.n	cd72 <cmd_send+0x8a>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    ce52:	491b      	ldr	r1, [pc, #108]	; (cec0 <cmd_send+0x1d8>)
    ce54:	f10d 0307 	add.w	r3, sp, #7
    ce58:	f640 228c 	movw	r2, #2700	; 0xa8c
    ce5c:	480c      	ldr	r0, [pc, #48]	; (ce90 <cmd_send+0x1a8>)
    ce5e:	f005 f9a1 	bl	121a4 <at_cmd_write>
	if (err < 0) {
    ce62:	1e01      	subs	r1, r0, #0
    ce64:	dac5      	bge.n	cdf2 <cmd_send+0x10a>
		LOG_ERR("Could not send AT command to modem: %d", err);
    ce66:	2301      	movs	r3, #1
    ce68:	f04f 0200 	mov.w	r2, #0
    ce6c:	480d      	ldr	r0, [pc, #52]	; (cea4 <cmd_send+0x1bc>)
    ce6e:	f363 0207 	bfi	r2, r3, #0, #8
    ce72:	4b0d      	ldr	r3, [pc, #52]	; (cea8 <cmd_send+0x1c0>)
    ce74:	1a1b      	subs	r3, r3, r0
    ce76:	08db      	lsrs	r3, r3, #3
    ce78:	f363 128f 	bfi	r2, r3, #6, #10
    ce7c:	4813      	ldr	r0, [pc, #76]	; (cecc <cmd_send+0x1e4>)
    ce7e:	f00f fe81 	bl	1cb84 <log_1>
		state = AT_CMD_ERROR;
    ce82:	2301      	movs	r3, #1
    ce84:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (state) {
    ce88:	e773      	b.n	cd72 <cmd_send+0x8a>
    ce8a:	bf00      	nop
    ce8c:	20020118 	.word	0x20020118
    ce90:	20024e4e 	.word	0x20024e4e
    ce94:	0001f9b4 	.word	0x0001f9b4
    ce98:	0001fa44 	.word	0x0001fa44
    ce9c:	0001f9bf 	.word	0x0001f9bf
    cea0:	20020110 	.word	0x20020110
    cea4:	0001f370 	.word	0x0001f370
    cea8:	0001f380 	.word	0x0001f380
    ceac:	0001f9c9 	.word	0x0001f9c9
    ceb0:	0001f9ff 	.word	0x0001f9ff
    ceb4:	2002012c 	.word	0x2002012c
    ceb8:	0001f9e7 	.word	0x0001f9e7
    cebc:	0001f9fa 	.word	0x0001f9fa
    cec0:	200258da 	.word	0x200258da
    cec4:	0001fa2e 	.word	0x0001fa2e
    cec8:	0001fa39 	.word	0x0001fa39
    cecc:	0001fa07 	.word	0x0001fa07

0000ced0 <socket>:
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    ced0:	4b01      	ldr	r3, [pc, #4]	; (ced8 <socket+0x8>)
    ced2:	681b      	ldr	r3, [r3, #0]
    ced4:	681b      	ldr	r3, [r3, #0]
    ced6:	4718      	bx	r3
    ced8:	20020344 	.word	0x20020344

0000cedc <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    cedc:	4b01      	ldr	r3, [pc, #4]	; (cee4 <close+0x8>)
    cede:	681b      	ldr	r3, [r3, #0]
    cee0:	685b      	ldr	r3, [r3, #4]
    cee2:	4718      	bx	r3
    cee4:	20020344 	.word	0x20020344

0000cee8 <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    cee8:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    ceea:	4c18      	ldr	r4, [pc, #96]	; (cf4c <do_socket_close+0x64>)
{
    ceec:	4606      	mov	r6, r0
	if (client.sock > 0) {
    ceee:	6820      	ldr	r0, [r4, #0]
    cef0:	2800      	cmp	r0, #0
    cef2:	dd29      	ble.n	cf48 <do_socket_close+0x60>
		ret = close(client.sock);
    cef4:	f7ff fff2 	bl	cedc <close>
		if (ret < 0) {
    cef8:	1e05      	subs	r5, r0, #0
    cefa:	da16      	bge.n	cf2a <do_socket_close+0x42>
			LOG_WRN("close() failed: %d", -errno);
    cefc:	2302      	movs	r3, #2
    cefe:	f04f 0500 	mov.w	r5, #0
    cf02:	4a13      	ldr	r2, [pc, #76]	; (cf50 <do_socket_close+0x68>)
    cf04:	f363 0507 	bfi	r5, r3, #0, #8
    cf08:	4b12      	ldr	r3, [pc, #72]	; (cf54 <do_socket_close+0x6c>)
    cf0a:	1a9b      	subs	r3, r3, r2
    cf0c:	08db      	lsrs	r3, r3, #3
    cf0e:	f363 158f 	bfi	r5, r3, #6, #10
    cf12:	f00f fa90 	bl	1c436 <z_errno>
    cf16:	6801      	ldr	r1, [r0, #0]
    cf18:	462a      	mov	r2, r5
    cf1a:	4249      	negs	r1, r1
    cf1c:	480e      	ldr	r0, [pc, #56]	; (cf58 <do_socket_close+0x70>)
    cf1e:	f00f fe31 	bl	1cb84 <log_1>
			ret = -errno;
    cf22:	f00f fa88 	bl	1c436 <z_errno>
    cf26:	6805      	ldr	r5, [r0, #0]
    cf28:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    cf2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf2e:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    cf30:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cf32:	4632      	mov	r2, r6
    cf34:	4909      	ldr	r1, [pc, #36]	; (cf5c <do_socket_close+0x74>)
    cf36:	480a      	ldr	r0, [pc, #40]	; (cf60 <do_socket_close+0x78>)
		client.ip_proto = IPPROTO_IP;
    cf38:	80a3      	strh	r3, [r4, #4]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cf3a:	f004 f80d 	bl	10f58 <sprintf>
		client.callback(buf);
    cf3e:	68a3      	ldr	r3, [r4, #8]
    cf40:	4807      	ldr	r0, [pc, #28]	; (cf60 <do_socket_close+0x78>)
    cf42:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    cf44:	4628      	mov	r0, r5
    cf46:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    cf48:	2500      	movs	r5, #0
	return ret;
    cf4a:	e7fb      	b.n	cf44 <do_socket_close+0x5c>
    cf4c:	20020130 	.word	0x20020130
    cf50:	0001f370 	.word	0x0001f370
    cf54:	0001f3e8 	.word	0x0001f3e8
    cf58:	0001fc11 	.word	0x0001fc11
    cf5c:	0001fc24 	.word	0x0001fc24
    cf60:	20026368 	.word	0x20026368

0000cf64 <do_socket_open>:
	if (type == SOCK_STREAM) {
    cf64:	2801      	cmp	r0, #1
{
    cf66:	b538      	push	{r3, r4, r5, lr}
    cf68:	4601      	mov	r1, r0
    cf6a:	4c21      	ldr	r4, [pc, #132]	; (cff0 <do_socket_open+0x8c>)
	if (type == SOCK_STREAM) {
    cf6c:	d12d      	bne.n	cfca <do_socket_open+0x66>
		client.sock = socket(AF_INET, SOCK_STREAM,
    cf6e:	2206      	movs	r2, #6
    cf70:	f7ff ffae 	bl	ced0 <socket>
		client.ip_proto = IPPROTO_TCP;
    cf74:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    cf76:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cf78:	7123      	strb	r3, [r4, #4]
	if (client.sock < 0) {
    cf7a:	6822      	ldr	r2, [r4, #0]
    cf7c:	2a00      	cmp	r2, #0
    cf7e:	da2d      	bge.n	cfdc <do_socket_open+0x78>
		LOG_ERR("socket() failed: %d", -errno);
    cf80:	2301      	movs	r3, #1
    cf82:	f04f 0500 	mov.w	r5, #0
    cf86:	4a1b      	ldr	r2, [pc, #108]	; (cff4 <do_socket_open+0x90>)
    cf88:	f363 0507 	bfi	r5, r3, #0, #8
    cf8c:	4b1a      	ldr	r3, [pc, #104]	; (cff8 <do_socket_open+0x94>)
    cf8e:	1a9b      	subs	r3, r3, r2
    cf90:	08db      	lsrs	r3, r3, #3
    cf92:	f363 158f 	bfi	r5, r3, #6, #10
    cf96:	f00f fa4e 	bl	1c436 <z_errno>
    cf9a:	6801      	ldr	r1, [r0, #0]
    cf9c:	462a      	mov	r2, r5
    cf9e:	4249      	negs	r1, r1
    cfa0:	4816      	ldr	r0, [pc, #88]	; (cffc <do_socket_open+0x98>)
    cfa2:	f00f fdef 	bl	1cb84 <log_1>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    cfa6:	f00f fa46 	bl	1c436 <z_errno>
    cfaa:	6802      	ldr	r2, [r0, #0]
    cfac:	4914      	ldr	r1, [pc, #80]	; (d000 <do_socket_open+0x9c>)
    cfae:	4252      	negs	r2, r2
    cfb0:	4814      	ldr	r0, [pc, #80]	; (d004 <do_socket_open+0xa0>)
    cfb2:	f003 ffd1 	bl	10f58 <sprintf>
		client.callback(buf);
    cfb6:	68a3      	ldr	r3, [r4, #8]
    cfb8:	4812      	ldr	r0, [pc, #72]	; (d004 <do_socket_open+0xa0>)
    cfba:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    cfbc:	2300      	movs	r3, #0
    cfbe:	7123      	strb	r3, [r4, #4]
		ret = -errno;
    cfc0:	f00f fa39 	bl	1c436 <z_errno>
    cfc4:	6800      	ldr	r0, [r0, #0]
    cfc6:	4240      	negs	r0, r0
}
    cfc8:	bd38      	pop	{r3, r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    cfca:	2802      	cmp	r0, #2
    cfcc:	d1d5      	bne.n	cf7a <do_socket_open+0x16>
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cfce:	2211      	movs	r2, #17
    cfd0:	2001      	movs	r0, #1
    cfd2:	f7ff ff7d 	bl	ced0 <socket>
		client.ip_proto = IPPROTO_UDP;
    cfd6:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cfd8:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cfda:	e7cd      	b.n	cf78 <do_socket_open+0x14>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    cfdc:	7923      	ldrb	r3, [r4, #4]
    cfde:	490a      	ldr	r1, [pc, #40]	; (d008 <do_socket_open+0xa4>)
    cfe0:	4808      	ldr	r0, [pc, #32]	; (d004 <do_socket_open+0xa0>)
    cfe2:	f003 ffb9 	bl	10f58 <sprintf>
		client.callback(buf);
    cfe6:	4807      	ldr	r0, [pc, #28]	; (d004 <do_socket_open+0xa0>)
    cfe8:	68a3      	ldr	r3, [r4, #8]
    cfea:	4798      	blx	r3
	int ret = 0;
    cfec:	2000      	movs	r0, #0
	return ret;
    cfee:	e7eb      	b.n	cfc8 <do_socket_open+0x64>
    cff0:	20020130 	.word	0x20020130
    cff4:	0001f370 	.word	0x0001f370
    cff8:	0001f3e8 	.word	0x0001f3e8
    cffc:	0001fc33 	.word	0x0001fc33
    d000:	0001fc24 	.word	0x0001fc24
    d004:	20026368 	.word	0x20026368
    d008:	0001fc47 	.word	0x0001fc47

0000d00c <handle_at_socket>:
static int handle_at_socket(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    d00c:	2801      	cmp	r0, #1
{
    d00e:	b513      	push	{r0, r1, r4, lr}
    d010:	4604      	mov	r4, r0
	switch (cmd_type) {
    d012:	d004      	beq.n	d01e <handle_at_socket+0x12>
    d014:	2802      	cmp	r0, #2
    d016:	d050      	beq.n	d0ba <handle_at_socket+0xae>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    d018:	f06f 0415 	mvn.w	r4, #21
    d01c:	e02e      	b.n	d07c <handle_at_socket+0x70>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d01e:	4830      	ldr	r0, [pc, #192]	; (d0e0 <handle_at_socket+0xd4>)
    d020:	f011 fc2d 	bl	1e87e <at_params_valid_count_get>
    d024:	2801      	cmp	r0, #1
    d026:	d9f7      	bls.n	d018 <handle_at_socket+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    d028:	4621      	mov	r1, r4
    d02a:	aa01      	add	r2, sp, #4
    d02c:	482c      	ldr	r0, [pc, #176]	; (d0e0 <handle_at_socket+0xd4>)
    d02e:	f011 fbf1 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    d032:	1e04      	subs	r4, r0, #0
    d034:	db22      	blt.n	d07c <handle_at_socket+0x70>
			return err;
		}
		if (op == 1) {
    d036:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d03a:	2801      	cmp	r0, #1
    d03c:	d127      	bne.n	d08e <handle_at_socket+0x82>
			u16_t type;

			if (at_params_valid_count_get(&m_param_list) < 3) {
    d03e:	4828      	ldr	r0, [pc, #160]	; (d0e0 <handle_at_socket+0xd4>)
    d040:	f011 fc1d 	bl	1e87e <at_params_valid_count_get>
    d044:	2802      	cmp	r0, #2
    d046:	d9e7      	bls.n	d018 <handle_at_socket+0xc>
				return -EINVAL;
			}
			err = at_params_short_get(&m_param_list, 2, &type);
    d048:	f10d 0206 	add.w	r2, sp, #6
    d04c:	2102      	movs	r1, #2
    d04e:	4824      	ldr	r0, [pc, #144]	; (d0e0 <handle_at_socket+0xd4>)
    d050:	f011 fbe0 	bl	1e814 <at_params_short_get>
			if (err < 0) {
    d054:	1e04      	subs	r4, r0, #0
    d056:	db11      	blt.n	d07c <handle_at_socket+0x70>
				return err;
			}
			if (client.sock > 0) {
    d058:	4b22      	ldr	r3, [pc, #136]	; (d0e4 <handle_at_socket+0xd8>)
    d05a:	681b      	ldr	r3, [r3, #0]
    d05c:	2b00      	cmp	r3, #0
    d05e:	dd10      	ble.n	d082 <handle_at_socket+0x76>
				LOG_WRN("Socket is already opened");
    d060:	2302      	movs	r3, #2
    d062:	f04f 0100 	mov.w	r1, #0
    d066:	4a20      	ldr	r2, [pc, #128]	; (d0e8 <handle_at_socket+0xdc>)
    d068:	f363 0107 	bfi	r1, r3, #0, #8
    d06c:	4b1f      	ldr	r3, [pc, #124]	; (d0ec <handle_at_socket+0xe0>)
    d06e:	4820      	ldr	r0, [pc, #128]	; (d0f0 <handle_at_socket+0xe4>)
    d070:	1a9b      	subs	r3, r3, r2
    d072:	08db      	lsrs	r3, r3, #3
    d074:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_socket_open(type);
			}
		} else if (op == 0) {
			if (client.sock < 0) {
				LOG_WRN("Socket is not opened yet");
    d078:	f00f fd77 	bl	1cb6a <log_0>
	default:
		break;
	}

	return err;
}
    d07c:	4620      	mov	r0, r4
    d07e:	b002      	add	sp, #8
    d080:	bd10      	pop	{r4, pc}
				err = do_socket_open(type);
    d082:	f89d 0006 	ldrb.w	r0, [sp, #6]
    d086:	f7ff ff6d 	bl	cf64 <do_socket_open>
				err = do_socket_close(0);
    d08a:	4604      	mov	r4, r0
    d08c:	e7f6      	b.n	d07c <handle_at_socket+0x70>
		} else if (op == 0) {
    d08e:	2800      	cmp	r0, #0
    d090:	d1f4      	bne.n	d07c <handle_at_socket+0x70>
			if (client.sock < 0) {
    d092:	4b14      	ldr	r3, [pc, #80]	; (d0e4 <handle_at_socket+0xd8>)
    d094:	681b      	ldr	r3, [r3, #0]
    d096:	2b00      	cmp	r3, #0
    d098:	da0c      	bge.n	d0b4 <handle_at_socket+0xa8>
				LOG_WRN("Socket is not opened yet");
    d09a:	2302      	movs	r3, #2
    d09c:	f04f 0100 	mov.w	r1, #0
    d0a0:	4a11      	ldr	r2, [pc, #68]	; (d0e8 <handle_at_socket+0xdc>)
    d0a2:	f363 0107 	bfi	r1, r3, #0, #8
    d0a6:	4b11      	ldr	r3, [pc, #68]	; (d0ec <handle_at_socket+0xe0>)
    d0a8:	4812      	ldr	r0, [pc, #72]	; (d0f4 <handle_at_socket+0xe8>)
    d0aa:	1a9b      	subs	r3, r3, r2
    d0ac:	08db      	lsrs	r3, r3, #3
    d0ae:	f363 118f 	bfi	r1, r3, #6, #10
    d0b2:	e7e1      	b.n	d078 <handle_at_socket+0x6c>
				err = do_socket_close(0);
    d0b4:	f7ff ff18 	bl	cee8 <do_socket_close>
    d0b8:	e7e7      	b.n	d08a <handle_at_socket+0x7e>
		if (client.sock != INVALID_SOCKET) {
    d0ba:	4c0a      	ldr	r4, [pc, #40]	; (d0e4 <handle_at_socket+0xd8>)
    d0bc:	6822      	ldr	r2, [r4, #0]
    d0be:	1c53      	adds	r3, r2, #1
    d0c0:	d009      	beq.n	d0d6 <handle_at_socket+0xca>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    d0c2:	7923      	ldrb	r3, [r4, #4]
    d0c4:	490c      	ldr	r1, [pc, #48]	; (d0f8 <handle_at_socket+0xec>)
    d0c6:	480d      	ldr	r0, [pc, #52]	; (d0fc <handle_at_socket+0xf0>)
    d0c8:	f003 ff46 	bl	10f58 <sprintf>
		client.callback(buf);
    d0cc:	68a3      	ldr	r3, [r4, #8]
    d0ce:	480b      	ldr	r0, [pc, #44]	; (d0fc <handle_at_socket+0xf0>)
    d0d0:	4798      	blx	r3
		err = 0;
    d0d2:	2400      	movs	r4, #0
		break;
    d0d4:	e7d2      	b.n	d07c <handle_at_socket+0x70>
			sprintf(buf, "#XSOCKET: 0\r\n");
    d0d6:	490a      	ldr	r1, [pc, #40]	; (d100 <handle_at_socket+0xf4>)
    d0d8:	4808      	ldr	r0, [pc, #32]	; (d0fc <handle_at_socket+0xf0>)
    d0da:	f003 ff3d 	bl	10f58 <sprintf>
    d0de:	e7f5      	b.n	d0cc <handle_at_socket+0xc0>
    d0e0:	20020110 	.word	0x20020110
    d0e4:	20020130 	.word	0x20020130
    d0e8:	0001f370 	.word	0x0001f370
    d0ec:	0001f3e8 	.word	0x0001f3e8
    d0f0:	0001fd5d 	.word	0x0001fd5d
    d0f4:	0001fd76 	.word	0x0001fd76
    d0f8:	0001fc47 	.word	0x0001fc47
    d0fc:	20026368 	.word	0x20026368
    d100:	0001fd8f 	.word	0x0001fd8f

0000d104 <send.constprop.11>:
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    d104:	4b04      	ldr	r3, [pc, #16]	; (d118 <send.constprop.11+0x14>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    d106:	b410      	push	{r4}
	return socket_ops->send(sock, buf, len, flags);
    d108:	681b      	ldr	r3, [r3, #0]
    d10a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d10c:	2300      	movs	r3, #0
    d10e:	46a4      	mov	ip, r4
}
    d110:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->send(sock, buf, len, flags);
    d114:	4760      	bx	ip
    d116:	bf00      	nop
    d118:	20020344 	.word	0x20020344

0000d11c <handle_at_tcp_send>:
 */
static int handle_at_tcp_send(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    d11c:	f44f 7310 	mov.w	r3, #576	; 0x240
{
    d120:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (!client.connected) {
    d122:	4d2f      	ldr	r5, [pc, #188]	; (d1e0 <handle_at_tcp_send+0xc4>)
{
    d124:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    d128:	9301      	str	r3, [sp, #4]
	if (!client.connected) {
    d12a:	796b      	ldrb	r3, [r5, #5]
{
    d12c:	4604      	mov	r4, r0
	if (!client.connected) {
    d12e:	b993      	cbnz	r3, d156 <handle_at_tcp_send+0x3a>
		LOG_ERR("TCP not connected yet");
    d130:	2301      	movs	r3, #1
    d132:	f04f 0100 	mov.w	r1, #0
    d136:	4a2b      	ldr	r2, [pc, #172]	; (d1e4 <handle_at_tcp_send+0xc8>)
    d138:	f363 0107 	bfi	r1, r3, #0, #8
    d13c:	4b2a      	ldr	r3, [pc, #168]	; (d1e8 <handle_at_tcp_send+0xcc>)
    d13e:	482b      	ldr	r0, [pc, #172]	; (d1ec <handle_at_tcp_send+0xd0>)
    d140:	1a9b      	subs	r3, r3, r2
    d142:	08db      	lsrs	r3, r3, #3
    d144:	f363 118f 	bfi	r1, r3, #6, #10
    d148:	f00f fd0f 	bl	1cb6a <log_0>
	int err = -EINVAL;
    d14c:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d150:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (cmd_type) {
    d156:	2801      	cmp	r0, #1
    d158:	d1f8      	bne.n	d14c <handle_at_tcp_send+0x30>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d15a:	4825      	ldr	r0, [pc, #148]	; (d1f0 <handle_at_tcp_send+0xd4>)
    d15c:	f011 fb8f 	bl	1e87e <at_params_valid_count_get>
    d160:	2801      	cmp	r0, #1
    d162:	d9f3      	bls.n	d14c <handle_at_tcp_send+0x30>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    d164:	ae02      	add	r6, sp, #8
    d166:	ab01      	add	r3, sp, #4
    d168:	4632      	mov	r2, r6
    d16a:	4621      	mov	r1, r4
    d16c:	4820      	ldr	r0, [pc, #128]	; (d1f0 <handle_at_tcp_send+0xd4>)
    d16e:	f011 fb63 	bl	1e838 <at_params_string_get>
		if (err < 0) {
    d172:	2800      	cmp	r0, #0
    d174:	dbec      	blt.n	d150 <handle_at_tcp_send+0x34>
		data[size] = '\0';
    d176:	2400      	movs	r4, #0
    d178:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    d17a:	4630      	mov	r0, r6
		data[size] = '\0';
    d17c:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    d17e:	f010 fa2f 	bl	1d5e0 <strlen>
    d182:	4607      	mov	r7, r0
	while (offset < datalen) {
    d184:	42a7      	cmp	r7, r4
    d186:	d91f      	bls.n	d1c8 <handle_at_tcp_send+0xac>
		ret = send(client.sock, data + offset,
    d188:	1b3a      	subs	r2, r7, r4
    d18a:	1931      	adds	r1, r6, r4
    d18c:	6828      	ldr	r0, [r5, #0]
    d18e:	f7ff ffb9 	bl	d104 <send.constprop.11>
		if (ret < 0) {
    d192:	2800      	cmp	r0, #0
    d194:	da22      	bge.n	d1dc <handle_at_tcp_send+0xc0>
			do_socket_close(-errno);
    d196:	f00f f94e 	bl	1c436 <z_errno>
    d19a:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    d19c:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    d1a0:	4240      	negs	r0, r0
    d1a2:	f7ff fea1 	bl	cee8 <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    d1a6:	2302      	movs	r3, #2
    d1a8:	4a0e      	ldr	r2, [pc, #56]	; (d1e4 <handle_at_tcp_send+0xc8>)
    d1aa:	f363 0607 	bfi	r6, r3, #0, #8
    d1ae:	4b0e      	ldr	r3, [pc, #56]	; (d1e8 <handle_at_tcp_send+0xcc>)
    d1b0:	1a9b      	subs	r3, r3, r2
    d1b2:	08db      	lsrs	r3, r3, #3
    d1b4:	f363 168f 	bfi	r6, r3, #6, #10
    d1b8:	f00f f93d 	bl	1c436 <z_errno>
    d1bc:	6801      	ldr	r1, [r0, #0]
    d1be:	4632      	mov	r2, r6
    d1c0:	4249      	negs	r1, r1
    d1c2:	480c      	ldr	r0, [pc, #48]	; (d1f4 <handle_at_tcp_send+0xd8>)
    d1c4:	f00f fcde 	bl	1cb84 <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    d1c8:	4622      	mov	r2, r4
    d1ca:	490b      	ldr	r1, [pc, #44]	; (d1f8 <handle_at_tcp_send+0xdc>)
    d1cc:	480b      	ldr	r0, [pc, #44]	; (d1fc <handle_at_tcp_send+0xe0>)
    d1ce:	f003 fec3 	bl	10f58 <sprintf>
	client.callback(buf);
    d1d2:	480a      	ldr	r0, [pc, #40]	; (d1fc <handle_at_tcp_send+0xe0>)
    d1d4:	68ab      	ldr	r3, [r5, #8]
    d1d6:	4798      	blx	r3
		err = do_tcp_send(data);
    d1d8:	2000      	movs	r0, #0
		break;
    d1da:	e7b9      	b.n	d150 <handle_at_tcp_send+0x34>
		offset += ret;
    d1dc:	4404      	add	r4, r0
    d1de:	e7d1      	b.n	d184 <handle_at_tcp_send+0x68>
    d1e0:	20020130 	.word	0x20020130
    d1e4:	0001f370 	.word	0x0001f370
    d1e8:	0001f3e8 	.word	0x0001f3e8
    d1ec:	0001fdf0 	.word	0x0001fdf0
    d1f0:	20020110 	.word	0x20020110
    d1f4:	0001fe06 	.word	0x0001fe06
    d1f8:	0001fe18 	.word	0x0001fe18
    d1fc:	20026368 	.word	0x20026368

0000d200 <recv.constprop.13>:
	return socket_ops->recv(sock, buf, max_len, flags);
    d200:	4b04      	ldr	r3, [pc, #16]	; (d214 <recv.constprop.13+0x14>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    d202:	b410      	push	{r4}
	return socket_ops->recv(sock, buf, max_len, flags);
    d204:	681b      	ldr	r3, [r3, #0]
    d206:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    d208:	2300      	movs	r3, #0
    d20a:	46a4      	mov	ip, r4
}
    d20c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->recv(sock, buf, max_len, flags);
    d210:	4760      	bx	ip
    d212:	bf00      	nop
    d214:	20020344 	.word	0x20020344

0000d218 <handle_at_bind>:
{
    d218:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
    d21a:	4d2d      	ldr	r5, [pc, #180]	; (d2d0 <handle_at_bind+0xb8>)
{
    d21c:	b085      	sub	sp, #20
	if (client.sock < 0) {
    d21e:	682b      	ldr	r3, [r5, #0]
{
    d220:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d222:	2b00      	cmp	r3, #0
    d224:	da11      	bge.n	d24a <handle_at_bind+0x32>
		LOG_ERR("Socket not opened yet");
    d226:	2301      	movs	r3, #1
    d228:	f04f 0100 	mov.w	r1, #0
    d22c:	4a29      	ldr	r2, [pc, #164]	; (d2d4 <handle_at_bind+0xbc>)
    d22e:	f363 0107 	bfi	r1, r3, #0, #8
    d232:	4b29      	ldr	r3, [pc, #164]	; (d2d8 <handle_at_bind+0xc0>)
    d234:	4829      	ldr	r0, [pc, #164]	; (d2dc <handle_at_bind+0xc4>)
    d236:	1a9b      	subs	r3, r3, r2
    d238:	08db      	lsrs	r3, r3, #3
    d23a:	f363 118f 	bfi	r1, r3, #6, #10
    d23e:	f00f fc94 	bl	1cb6a <log_0>
	int err = -EINVAL;
    d242:	f06f 0015 	mvn.w	r0, #21
}
    d246:	b005      	add	sp, #20
    d248:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
    d24a:	2801      	cmp	r0, #1
    d24c:	d1f9      	bne.n	d242 <handle_at_bind+0x2a>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    d24e:	4824      	ldr	r0, [pc, #144]	; (d2e0 <handle_at_bind+0xc8>)
    d250:	f011 fb15 	bl	1e87e <at_params_valid_count_get>
    d254:	2801      	cmp	r0, #1
    d256:	d9f4      	bls.n	d242 <handle_at_bind+0x2a>
		err = at_params_short_get(&m_param_list, 1, &port);
    d258:	f10d 0206 	add.w	r2, sp, #6
    d25c:	4621      	mov	r1, r4
    d25e:	4820      	ldr	r0, [pc, #128]	; (d2e0 <handle_at_bind+0xc8>)
    d260:	f011 fad8 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    d264:	2800      	cmp	r0, #0
    d266:	dbee      	blt.n	d246 <handle_at_bind+0x2e>
		err = do_bind(port);
    d268:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	local.sin_family = AF_INET;
    d26c:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
    d270:	0213      	lsls	r3, r2, #8
    d272:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    d276:	2400      	movs	r4, #0
	return socket_ops->bind(sock, addr, addrlen);
    d278:	2208      	movs	r2, #8
	local.sin_port = htons(port);
    d27a:	f8ad 300a 	strh.w	r3, [sp, #10]
    d27e:	4b19      	ldr	r3, [pc, #100]	; (d2e4 <handle_at_bind+0xcc>)
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    d280:	9403      	str	r4, [sp, #12]
    d282:	681b      	ldr	r3, [r3, #0]
    d284:	eb0d 0102 	add.w	r1, sp, r2
    d288:	68db      	ldr	r3, [r3, #12]
    d28a:	6828      	ldr	r0, [r5, #0]
    d28c:	4798      	blx	r3
	if (ret < 0) {
    d28e:	42a0      	cmp	r0, r4
    d290:	da1b      	bge.n	d2ca <handle_at_bind+0xb2>
		LOG_ERR("bind() failed: %d", -errno);
    d292:	2301      	movs	r3, #1
    d294:	4a0f      	ldr	r2, [pc, #60]	; (d2d4 <handle_at_bind+0xbc>)
    d296:	f363 0407 	bfi	r4, r3, #0, #8
    d29a:	4b0f      	ldr	r3, [pc, #60]	; (d2d8 <handle_at_bind+0xc0>)
    d29c:	1a9b      	subs	r3, r3, r2
    d29e:	08db      	lsrs	r3, r3, #3
    d2a0:	f363 148f 	bfi	r4, r3, #6, #10
    d2a4:	f00f f8c7 	bl	1c436 <z_errno>
    d2a8:	6801      	ldr	r1, [r0, #0]
    d2aa:	4622      	mov	r2, r4
    d2ac:	4249      	negs	r1, r1
    d2ae:	480e      	ldr	r0, [pc, #56]	; (d2e8 <handle_at_bind+0xd0>)
    d2b0:	f00f fc68 	bl	1cb84 <log_1>
		do_socket_close(-errno);
    d2b4:	f00f f8bf 	bl	1c436 <z_errno>
    d2b8:	6800      	ldr	r0, [r0, #0]
    d2ba:	4240      	negs	r0, r0
    d2bc:	f7ff fe14 	bl	cee8 <do_socket_close>
		return -errno;
    d2c0:	f00f f8b9 	bl	1c436 <z_errno>
    d2c4:	6800      	ldr	r0, [r0, #0]
    d2c6:	4240      	negs	r0, r0
    d2c8:	e7bd      	b.n	d246 <handle_at_bind+0x2e>
	return 0;
    d2ca:	4620      	mov	r0, r4
		break;
    d2cc:	e7bb      	b.n	d246 <handle_at_bind+0x2e>
    d2ce:	bf00      	nop
    d2d0:	20020130 	.word	0x20020130
    d2d4:	0001f370 	.word	0x0001f370
    d2d8:	0001f3e8 	.word	0x0001f3e8
    d2dc:	0001fd35 	.word	0x0001fd35
    d2e0:	20020110 	.word	0x20020110
    d2e4:	20020344 	.word	0x20020344
    d2e8:	0001fd4b 	.word	0x0001fd4b

0000d2ec <parse_host_by_name>:
{
    d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2f0:	4614      	mov	r4, r2
    d2f2:	4680      	mov	r8, r0
	struct addrinfo hints = {
    d2f4:	2501      	movs	r5, #1
{
    d2f6:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    d2f8:	4f24      	ldr	r7, [pc, #144]	; (d38c <parse_host_by_name+0xa0>)
	struct addrinfo hints = {
    d2fa:	2220      	movs	r2, #32
{
    d2fc:	460e      	mov	r6, r1
	struct addrinfo hints = {
    d2fe:	a806      	add	r0, sp, #24
    d300:	2100      	movs	r1, #0
    d302:	f010 f9d2 	bl	1d6aa <memset>
    d306:	683b      	ldr	r3, [r7, #0]
    d308:	e9cd 5407 	strd	r5, r4, [sp, #28]
    d30c:	aa06      	add	r2, sp, #24
    d30e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    d310:	2100      	movs	r1, #0
    d312:	ab01      	add	r3, sp, #4
    d314:	4640      	mov	r0, r8
    d316:	47a0      	blx	r4
	if (err) {
    d318:	4604      	mov	r4, r0
    d31a:	b188      	cbz	r0, d340 <parse_host_by_name+0x54>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    d31c:	f04f 0200 	mov.w	r2, #0
    d320:	491b      	ldr	r1, [pc, #108]	; (d390 <parse_host_by_name+0xa4>)
    d322:	4b1c      	ldr	r3, [pc, #112]	; (d394 <parse_host_by_name+0xa8>)
    d324:	f365 0207 	bfi	r2, r5, #0, #8
    d328:	1a5b      	subs	r3, r3, r1
    d32a:	08db      	lsrs	r3, r3, #3
    d32c:	4601      	mov	r1, r0
    d32e:	f363 128f 	bfi	r2, r3, #6, #10
    d332:	4819      	ldr	r0, [pc, #100]	; (d398 <parse_host_by_name+0xac>)
    d334:	f00f fc26 	bl	1cb84 <log_1>
}
    d338:	4620      	mov	r0, r4
    d33a:	b00e      	add	sp, #56	; 0x38
    d33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    d340:	9b01      	ldr	r3, [sp, #4]
    d342:	b983      	cbnz	r3, d366 <parse_host_by_name+0x7a>
		LOG_ERR("ERROR: Address not found\n");
    d344:	2301      	movs	r3, #1
    d346:	f04f 0100 	mov.w	r1, #0
    d34a:	4a11      	ldr	r2, [pc, #68]	; (d390 <parse_host_by_name+0xa4>)
    d34c:	f363 0107 	bfi	r1, r3, #0, #8
    d350:	4b10      	ldr	r3, [pc, #64]	; (d394 <parse_host_by_name+0xa8>)
    d352:	4812      	ldr	r0, [pc, #72]	; (d39c <parse_host_by_name+0xb0>)
    d354:	1a9b      	subs	r3, r3, r2
    d356:	08db      	lsrs	r3, r3, #3
    d358:	f363 118f 	bfi	r1, r3, #6, #10
    d35c:	f00f fc05 	bl	1cb6a <log_0>
		return -ENOENT;
    d360:	f06f 0401 	mvn.w	r4, #1
    d364:	e7e8      	b.n	d338 <parse_host_by_name+0x4c>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    d366:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    d368:	490d      	ldr	r1, [pc, #52]	; (d3a0 <parse_host_by_name+0xb4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    d36a:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    d36c:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    d36e:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    d370:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    d372:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    d374:	2310      	movs	r3, #16
    d376:	aa02      	add	r2, sp, #8
    d378:	3104      	adds	r1, #4
    d37a:	4628      	mov	r0, r5
    d37c:	f003 fe2e 	bl	10fdc <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    d380:	683b      	ldr	r3, [r7, #0]
    d382:	9801      	ldr	r0, [sp, #4]
    d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d386:	4798      	blx	r3
    d388:	e7d6      	b.n	d338 <parse_host_by_name+0x4c>
    d38a:	bf00      	nop
    d38c:	20020344 	.word	0x20020344
    d390:	0001f370 	.word	0x0001f370
    d394:	0001f3e8 	.word	0x0001f3e8
    d398:	0001ff08 	.word	0x0001ff08
    d39c:	0001ff25 	.word	0x0001ff25
    d3a0:	20024e2c 	.word	0x20024e2c

0000d3a4 <parse_host_by_ipv4>:
{
    d3a4:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    d3a6:	2301      	movs	r3, #1
    d3a8:	4a06      	ldr	r2, [pc, #24]	; (d3c4 <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    d3aa:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    d3ac:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    d3ae:	8051      	strh	r1, [r2, #2]
	return z_impl_net_addr_pton(family, src, dst);
    d3b0:	4601      	mov	r1, r0
    d3b2:	3204      	adds	r2, #4
    d3b4:	4618      	mov	r0, r3
    d3b6:	f010 fa82 	bl	1d8be <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    d3ba:	2800      	cmp	r0, #0
}
    d3bc:	bf18      	it	ne
    d3be:	f06f 0015 	mvnne.w	r0, #21
    d3c2:	bd08      	pop	{r3, pc}
    d3c4:	20024e2c 	.word	0x20024e2c

0000d3c8 <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    d3c8:	2380      	movs	r3, #128	; 0x80
{
    d3ca:	b570      	push	{r4, r5, r6, lr}
    d3cc:	b0a2      	sub	sp, #136	; 0x88
	int size = TCPIP_MAX_URL;
    d3ce:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    d3d0:	4b4f      	ldr	r3, [pc, #316]	; (d510 <handle_at_tcp_conn+0x148>)
{
    d3d2:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d3d4:	681a      	ldr	r2, [r3, #0]
    d3d6:	461e      	mov	r6, r3
    d3d8:	2a00      	cmp	r2, #0
    d3da:	da10      	bge.n	d3fe <handle_at_tcp_conn+0x36>
		LOG_ERR("Socket not opened yet");
    d3dc:	2301      	movs	r3, #1
    d3de:	f04f 0100 	mov.w	r1, #0
    d3e2:	4a4c      	ldr	r2, [pc, #304]	; (d514 <handle_at_tcp_conn+0x14c>)
    d3e4:	f363 0107 	bfi	r1, r3, #0, #8
    d3e8:	4b4b      	ldr	r3, [pc, #300]	; (d518 <handle_at_tcp_conn+0x150>)
    d3ea:	484c      	ldr	r0, [pc, #304]	; (d51c <handle_at_tcp_conn+0x154>)
    d3ec:	1a9b      	subs	r3, r3, r2
    d3ee:	08db      	lsrs	r3, r3, #3
    d3f0:	f363 118f 	bfi	r1, r3, #6, #10
    d3f4:	f00f fbb9 	bl	1cb6a <log_0>
			return -EINVAL;
    d3f8:	f06f 0415 	mvn.w	r4, #21
    d3fc:	e045      	b.n	d48a <handle_at_tcp_conn+0xc2>
	switch (cmd_type) {
    d3fe:	2801      	cmp	r0, #1
    d400:	d009      	beq.n	d416 <handle_at_tcp_conn+0x4e>
    d402:	2802      	cmp	r0, #2
    d404:	d1f8      	bne.n	d3f8 <handle_at_tcp_conn+0x30>
		if (client.connected) {
    d406:	795c      	ldrb	r4, [r3, #5]
    d408:	689a      	ldr	r2, [r3, #8]
    d40a:	2c00      	cmp	r4, #0
    d40c:	d076      	beq.n	d4fc <handle_at_tcp_conn+0x134>
			client.callback("+XTCPCONN: 1\r\n");
    d40e:	4844      	ldr	r0, [pc, #272]	; (d520 <handle_at_tcp_conn+0x158>)
    d410:	4790      	blx	r2
		err = 0;
    d412:	2400      	movs	r4, #0
    d414:	e039      	b.n	d48a <handle_at_tcp_conn+0xc2>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d416:	4843      	ldr	r0, [pc, #268]	; (d524 <handle_at_tcp_conn+0x15c>)
    d418:	f011 fa31 	bl	1e87e <at_params_valid_count_get>
    d41c:	2802      	cmp	r0, #2
    d41e:	d9eb      	bls.n	d3f8 <handle_at_tcp_conn+0x30>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d420:	4621      	mov	r1, r4
    d422:	ab01      	add	r3, sp, #4
    d424:	aa02      	add	r2, sp, #8
    d426:	483f      	ldr	r0, [pc, #252]	; (d524 <handle_at_tcp_conn+0x15c>)
    d428:	f011 fa06 	bl	1e838 <at_params_string_get>
		if (err < 0) {
    d42c:	1e04      	subs	r4, r0, #0
    d42e:	db2c      	blt.n	d48a <handle_at_tcp_conn+0xc2>
		url[size] = '\0';
    d430:	2500      	movs	r5, #0
    d432:	9b01      	ldr	r3, [sp, #4]
    d434:	aa22      	add	r2, sp, #136	; 0x88
    d436:	4413      	add	r3, r2
		err = at_params_short_get(&m_param_list, 2, &port);
    d438:	2102      	movs	r1, #2
    d43a:	f10d 0202 	add.w	r2, sp, #2
    d43e:	4839      	ldr	r0, [pc, #228]	; (d524 <handle_at_tcp_conn+0x15c>)
		url[size] = '\0';
    d440:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    d444:	f011 f9e6 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    d448:	1e04      	subs	r4, r0, #0
    d44a:	db1e      	blt.n	d48a <handle_at_tcp_conn+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
    d44c:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    d44e:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    d452:	f010 f8c5 	bl	1d5e0 <strlen>
	for (index = 0; index < length; index++) {
    d456:	462b      	mov	r3, r5
    d458:	a902      	add	r1, sp, #8
    d45a:	b2c0      	uxtb	r0, r0
    d45c:	4283      	cmp	r3, r0
    d45e:	db17      	blt.n	d490 <handle_at_tcp_conn+0xc8>
		ret = parse_host_by_ipv4(url, port);
    d460:	4621      	mov	r1, r4
    d462:	a802      	add	r0, sp, #8
    d464:	f7ff ff9e 	bl	d3a4 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d468:	4604      	mov	r4, r0
	if (ret) {
    d46a:	b1d4      	cbz	r4, d4a2 <handle_at_tcp_conn+0xda>
		LOG_ERR("Parse failed: %d", ret);
    d46c:	2301      	movs	r3, #1
    d46e:	f04f 0200 	mov.w	r2, #0
    d472:	4928      	ldr	r1, [pc, #160]	; (d514 <handle_at_tcp_conn+0x14c>)
    d474:	f363 0207 	bfi	r2, r3, #0, #8
    d478:	4b27      	ldr	r3, [pc, #156]	; (d518 <handle_at_tcp_conn+0x150>)
    d47a:	482b      	ldr	r0, [pc, #172]	; (d528 <handle_at_tcp_conn+0x160>)
    d47c:	1a5b      	subs	r3, r3, r1
    d47e:	08db      	lsrs	r3, r3, #3
    d480:	f363 128f 	bfi	r2, r3, #6, #10
    d484:	4621      	mov	r1, r4
    d486:	f00f fb7d 	bl	1cb84 <log_1>
}
    d48a:	4620      	mov	r0, r4
    d48c:	b022      	add	sp, #136	; 0x88
    d48e:	bd70      	pop	{r4, r5, r6, pc}
		char ch = *(address + index);
    d490:	f811 2b01 	ldrb.w	r2, [r1], #1
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d494:	2a2e      	cmp	r2, #46	; 0x2e
    d496:	d002      	beq.n	d49e <handle_at_tcp_conn+0xd6>
    d498:	3a30      	subs	r2, #48	; 0x30
    d49a:	2a09      	cmp	r2, #9
    d49c:	d831      	bhi.n	d502 <handle_at_tcp_conn+0x13a>
	for (index = 0; index < length; index++) {
    d49e:	3301      	adds	r3, #1
    d4a0:	e7dc      	b.n	d45c <handle_at_tcp_conn+0x94>
	return socket_ops->connect(sock, addr, addrlen);
    d4a2:	4b22      	ldr	r3, [pc, #136]	; (d52c <handle_at_tcp_conn+0x164>)
    d4a4:	2208      	movs	r2, #8
    d4a6:	681b      	ldr	r3, [r3, #0]
    d4a8:	4921      	ldr	r1, [pc, #132]	; (d530 <handle_at_tcp_conn+0x168>)
    d4aa:	695b      	ldr	r3, [r3, #20]
    d4ac:	6830      	ldr	r0, [r6, #0]
    d4ae:	4798      	blx	r3
	if (ret < 0) {
    d4b0:	2800      	cmp	r0, #0
    d4b2:	da1d      	bge.n	d4f0 <handle_at_tcp_conn+0x128>
		LOG_ERR("connect() failed: %d", -errno);
    d4b4:	2301      	movs	r3, #1
    d4b6:	f04f 0400 	mov.w	r4, #0
    d4ba:	4a16      	ldr	r2, [pc, #88]	; (d514 <handle_at_tcp_conn+0x14c>)
    d4bc:	f363 0407 	bfi	r4, r3, #0, #8
    d4c0:	4b15      	ldr	r3, [pc, #84]	; (d518 <handle_at_tcp_conn+0x150>)
    d4c2:	1a9b      	subs	r3, r3, r2
    d4c4:	08db      	lsrs	r3, r3, #3
    d4c6:	f363 148f 	bfi	r4, r3, #6, #10
    d4ca:	f00e ffb4 	bl	1c436 <z_errno>
    d4ce:	6801      	ldr	r1, [r0, #0]
    d4d0:	4622      	mov	r2, r4
    d4d2:	4249      	negs	r1, r1
    d4d4:	4817      	ldr	r0, [pc, #92]	; (d534 <handle_at_tcp_conn+0x16c>)
    d4d6:	f00f fb55 	bl	1cb84 <log_1>
		do_socket_close(-errno);
    d4da:	f00e ffac 	bl	1c436 <z_errno>
    d4de:	6800      	ldr	r0, [r0, #0]
    d4e0:	4240      	negs	r0, r0
    d4e2:	f7ff fd01 	bl	cee8 <do_socket_close>
		return -errno;
    d4e6:	f00e ffa6 	bl	1c436 <z_errno>
    d4ea:	6804      	ldr	r4, [r0, #0]
    d4ec:	4264      	negs	r4, r4
    d4ee:	e7cc      	b.n	d48a <handle_at_tcp_conn+0xc2>
	client.connected = true;
    d4f0:	2301      	movs	r3, #1
	client.callback("#XTCPCONN: 1\r\n");
    d4f2:	4811      	ldr	r0, [pc, #68]	; (d538 <handle_at_tcp_conn+0x170>)
	client.connected = true;
    d4f4:	7173      	strb	r3, [r6, #5]
	client.callback("#XTCPCONN: 1\r\n");
    d4f6:	68b3      	ldr	r3, [r6, #8]
    d4f8:	4798      	blx	r3
	return 0;
    d4fa:	e7c6      	b.n	d48a <handle_at_tcp_conn+0xc2>
			client.callback("+XTCPCONN: 0\r\n");
    d4fc:	480f      	ldr	r0, [pc, #60]	; (d53c <handle_at_tcp_conn+0x174>)
    d4fe:	4790      	blx	r2
    d500:	e7c3      	b.n	d48a <handle_at_tcp_conn+0xc2>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d502:	2201      	movs	r2, #1
    d504:	4621      	mov	r1, r4
    d506:	a802      	add	r0, sp, #8
    d508:	f7ff fef0 	bl	d2ec <parse_host_by_name>
    d50c:	e7ac      	b.n	d468 <handle_at_tcp_conn+0xa0>
    d50e:	bf00      	nop
    d510:	20020130 	.word	0x20020130
    d514:	0001f370 	.word	0x0001f370
    d518:	0001f3e8 	.word	0x0001f3e8
    d51c:	0001fd35 	.word	0x0001fd35
    d520:	0001fdd2 	.word	0x0001fdd2
    d524:	20020110 	.word	0x20020110
    d528:	0001fd9d 	.word	0x0001fd9d
    d52c:	20020344 	.word	0x20020344
    d530:	20024e2c 	.word	0x20024e2c
    d534:	0001fdae 	.word	0x0001fdae
    d538:	0001fdc3 	.word	0x0001fdc3
    d53c:	0001fde1 	.word	0x0001fde1

0000d540 <do_tcp_receive>:
	struct timeval tmo = {
    d540:	2300      	movs	r3, #0
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    d542:	2208      	movs	r2, #8
{
    d544:	b5f0      	push	{r4, r5, r6, r7, lr}
    d546:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	struct timeval tmo = {
    d54a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    d54e:	4b3f      	ldr	r3, [pc, #252]	; (d64c <do_tcp_receive+0x10c>)
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    d550:	4d3f      	ldr	r5, [pc, #252]	; (d650 <do_tcp_receive+0x110>)
    d552:	681b      	ldr	r3, [r3, #0]
    d554:	9200      	str	r2, [sp, #0]
    d556:	69dc      	ldr	r4, [r3, #28]
{
    d558:	4607      	mov	r7, r0
    d55a:	eb0d 0302 	add.w	r3, sp, r2
    d55e:	2101      	movs	r1, #1
    d560:	2214      	movs	r2, #20
    d562:	6828      	ldr	r0, [r5, #0]
    d564:	47a0      	blx	r4
	if (ret < 0) {
    d566:	1e04      	subs	r4, r0, #0
    d568:	da1c      	bge.n	d5a4 <do_tcp_receive+0x64>
		do_socket_close(-errno);
    d56a:	f00e ff64 	bl	1c436 <z_errno>
    d56e:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    d570:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    d574:	4240      	negs	r0, r0
    d576:	f7ff fcb7 	bl	cee8 <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    d57a:	2301      	movs	r3, #1
    d57c:	4a35      	ldr	r2, [pc, #212]	; (d654 <do_tcp_receive+0x114>)
    d57e:	f363 0507 	bfi	r5, r3, #0, #8
    d582:	4b35      	ldr	r3, [pc, #212]	; (d658 <do_tcp_receive+0x118>)
    d584:	1a9b      	subs	r3, r3, r2
    d586:	08db      	lsrs	r3, r3, #3
    d588:	f363 158f 	bfi	r5, r3, #6, #10
    d58c:	f00e ff53 	bl	1c436 <z_errno>
    d590:	6801      	ldr	r1, [r0, #0]
    d592:	462a      	mov	r2, r5
    d594:	4249      	negs	r1, r1
    d596:	4831      	ldr	r0, [pc, #196]	; (d65c <do_tcp_receive+0x11c>)
    d598:	f00f faf4 	bl	1cb84 <log_1>
}
    d59c:	4620      	mov	r0, r4
    d59e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length > NET_IPV4_MTU) {
    d5a4:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
    d5a8:	ae04      	add	r6, sp, #16
		ret = recv(client.sock, data, NET_IPV4_MTU, 0);
    d5aa:	bf8c      	ite	hi
    d5ac:	f44f 7210 	movhi.w	r2, #576	; 0x240
		ret = recv(client.sock, data, length, 0);
    d5b0:	463a      	movls	r2, r7
    d5b2:	6828      	ldr	r0, [r5, #0]
    d5b4:	4631      	mov	r1, r6
    d5b6:	f7ff fe23 	bl	d200 <recv.constprop.13>
	if (ret < 0) {
    d5ba:	2800      	cmp	r0, #0
		ret = recv(client.sock, data, length, 0);
    d5bc:	4604      	mov	r4, r0
	if (ret < 0) {
    d5be:	da1d      	bge.n	d5fc <do_tcp_receive+0xbc>
		LOG_WRN("recv() error: %d", -errno);
    d5c0:	2302      	movs	r3, #2
    d5c2:	f04f 0400 	mov.w	r4, #0
    d5c6:	4a23      	ldr	r2, [pc, #140]	; (d654 <do_tcp_receive+0x114>)
    d5c8:	f363 0407 	bfi	r4, r3, #0, #8
    d5cc:	4b22      	ldr	r3, [pc, #136]	; (d658 <do_tcp_receive+0x118>)
    d5ce:	1a9b      	subs	r3, r3, r2
    d5d0:	08db      	lsrs	r3, r3, #3
    d5d2:	f363 148f 	bfi	r4, r3, #6, #10
    d5d6:	f00e ff2e 	bl	1c436 <z_errno>
    d5da:	6801      	ldr	r1, [r0, #0]
    d5dc:	4622      	mov	r2, r4
    d5de:	4249      	negs	r1, r1
    d5e0:	481f      	ldr	r0, [pc, #124]	; (d660 <do_tcp_receive+0x120>)
    d5e2:	f00f facf 	bl	1cb84 <log_1>
		do_socket_close(-errno);
    d5e6:	f00e ff26 	bl	1c436 <z_errno>
    d5ea:	6800      	ldr	r0, [r0, #0]
    d5ec:	4240      	negs	r0, r0
    d5ee:	f7ff fc7b 	bl	cee8 <do_socket_close>
		ret = -errno;
    d5f2:	f00e ff20 	bl	1c436 <z_errno>
    d5f6:	6804      	ldr	r4, [r0, #0]
    d5f8:	4264      	negs	r4, r4
    d5fa:	e7cf      	b.n	d59c <do_tcp_receive+0x5c>
	} else if (ret == 0) {
    d5fc:	d111      	bne.n	d622 <do_tcp_receive+0xe2>
		LOG_WRN("recv() return 0");
    d5fe:	2302      	movs	r3, #2
    d600:	f04f 0100 	mov.w	r1, #0
    d604:	4a13      	ldr	r2, [pc, #76]	; (d654 <do_tcp_receive+0x114>)
    d606:	f363 0107 	bfi	r1, r3, #0, #8
    d60a:	4b13      	ldr	r3, [pc, #76]	; (d658 <do_tcp_receive+0x118>)
    d60c:	4815      	ldr	r0, [pc, #84]	; (d664 <do_tcp_receive+0x124>)
    d60e:	1a9b      	subs	r3, r3, r2
    d610:	08db      	lsrs	r3, r3, #3
    d612:	f363 118f 	bfi	r1, r3, #6, #10
    d616:	f00f faa8 	bl	1cb6a <log_0>
		do_socket_close(0);
    d61a:	4620      	mov	r0, r4
    d61c:	f7ff fc64 	bl	cee8 <do_socket_close>
    d620:	e7bc      	b.n	d59c <do_tcp_receive+0x5c>
		data[ret] = '\0';
    d622:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    d624:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d626:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    d628:	480f      	ldr	r0, [pc, #60]	; (d668 <do_tcp_receive+0x128>)
    d62a:	4798      	blx	r3
		client.callback(data);
    d62c:	68ab      	ldr	r3, [r5, #8]
    d62e:	4630      	mov	r0, r6
    d630:	4798      	blx	r3
		client.callback("\r\n");
    d632:	68ab      	ldr	r3, [r5, #8]
    d634:	480d      	ldr	r0, [pc, #52]	; (d66c <do_tcp_receive+0x12c>)
    d636:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    d638:	4622      	mov	r2, r4
    d63a:	490d      	ldr	r1, [pc, #52]	; (d670 <do_tcp_receive+0x130>)
    d63c:	480d      	ldr	r0, [pc, #52]	; (d674 <do_tcp_receive+0x134>)
    d63e:	f003 fc8b 	bl	10f58 <sprintf>
		client.callback(buf);
    d642:	68ab      	ldr	r3, [r5, #8]
    d644:	480b      	ldr	r0, [pc, #44]	; (d674 <do_tcp_receive+0x134>)
    d646:	4798      	blx	r3
		ret = 0;
    d648:	463c      	mov	r4, r7
    d64a:	e7a7      	b.n	d59c <do_tcp_receive+0x5c>
    d64c:	20020344 	.word	0x20020344
    d650:	20020130 	.word	0x20020130
    d654:	0001f370 	.word	0x0001f370
    d658:	0001f3e8 	.word	0x0001f3e8
    d65c:	0001fc5a 	.word	0x0001fc5a
    d660:	0001fc71 	.word	0x0001fc71
    d664:	0001fc82 	.word	0x0001fc82
    d668:	0001fc92 	.word	0x0001fc92
    d66c:	0001fded 	.word	0x0001fded
    d670:	0001fc9e 	.word	0x0001fc9e
    d674:	20026368 	.word	0x20026368

0000d678 <handle_at_tcp_recv>:
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t length, time;

	if (!client.connected) {
    d678:	4b19      	ldr	r3, [pc, #100]	; (d6e0 <handle_at_tcp_recv+0x68>)
{
    d67a:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    d67c:	795b      	ldrb	r3, [r3, #5]
{
    d67e:	4604      	mov	r4, r0
	if (!client.connected) {
    d680:	b98b      	cbnz	r3, d6a6 <handle_at_tcp_recv+0x2e>
		LOG_ERR("TCP not connected yet");
    d682:	2301      	movs	r3, #1
    d684:	f04f 0100 	mov.w	r1, #0
    d688:	4a16      	ldr	r2, [pc, #88]	; (d6e4 <handle_at_tcp_recv+0x6c>)
    d68a:	f363 0107 	bfi	r1, r3, #0, #8
    d68e:	4b16      	ldr	r3, [pc, #88]	; (d6e8 <handle_at_tcp_recv+0x70>)
    d690:	4816      	ldr	r0, [pc, #88]	; (d6ec <handle_at_tcp_recv+0x74>)
    d692:	1a9b      	subs	r3, r3, r2
    d694:	08db      	lsrs	r3, r3, #3
    d696:	f363 118f 	bfi	r1, r3, #6, #10
    d69a:	f00f fa66 	bl	1cb6a <log_0>
	int err = -EINVAL;
    d69e:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d6a2:	b002      	add	sp, #8
    d6a4:	bd10      	pop	{r4, pc}
	switch (cmd_type) {
    d6a6:	2801      	cmp	r0, #1
    d6a8:	d1f9      	bne.n	d69e <handle_at_tcp_recv+0x26>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d6aa:	4811      	ldr	r0, [pc, #68]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ac:	f011 f8e7 	bl	1e87e <at_params_valid_count_get>
    d6b0:	2802      	cmp	r0, #2
    d6b2:	d9f4      	bls.n	d69e <handle_at_tcp_recv+0x26>
		err = at_params_short_get(&m_param_list, 1, &length);
    d6b4:	aa01      	add	r2, sp, #4
    d6b6:	4621      	mov	r1, r4
    d6b8:	480d      	ldr	r0, [pc, #52]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ba:	f011 f8ab 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    d6be:	2800      	cmp	r0, #0
    d6c0:	dbef      	blt.n	d6a2 <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 2, &time);
    d6c2:	f10d 0206 	add.w	r2, sp, #6
    d6c6:	2102      	movs	r1, #2
    d6c8:	4809      	ldr	r0, [pc, #36]	; (d6f0 <handle_at_tcp_recv+0x78>)
    d6ca:	f011 f8a3 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    d6ce:	2800      	cmp	r0, #0
    d6d0:	dbe7      	blt.n	d6a2 <handle_at_tcp_recv+0x2a>
		err = do_tcp_receive(length, time);
    d6d2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    d6d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d6da:	f7ff ff31 	bl	d540 <do_tcp_receive>
		break;
    d6de:	e7e0      	b.n	d6a2 <handle_at_tcp_recv+0x2a>
    d6e0:	20020130 	.word	0x20020130
    d6e4:	0001f370 	.word	0x0001f370
    d6e8:	0001f3e8 	.word	0x0001f3e8
    d6ec:	0001fdf0 	.word	0x0001fdf0
    d6f0:	20020110 	.word	0x20020110

0000d6f4 <do_udp_init>:
{
    d6f4:	b538      	push	{r3, r4, r5, lr}
    d6f6:	4604      	mov	r4, r0
    d6f8:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    d6fa:	f00f ff71 	bl	1d5e0 <strlen>
	for (index = 0; index < length; index++) {
    d6fe:	2300      	movs	r3, #0
    d700:	b2c0      	uxtb	r0, r0
    d702:	4283      	cmp	r3, r0
    d704:	db16      	blt.n	d734 <do_udp_init+0x40>
		ret = parse_host_by_ipv4(url, port);
    d706:	4629      	mov	r1, r5
    d708:	4620      	mov	r0, r4
    d70a:	f7ff fe4b 	bl	d3a4 <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d70e:	4604      	mov	r4, r0
	if (ret) {
    d710:	b174      	cbz	r4, d730 <do_udp_init+0x3c>
		LOG_ERR("Parse failed: %d", ret);
    d712:	2301      	movs	r3, #1
    d714:	f04f 0200 	mov.w	r2, #0
    d718:	490d      	ldr	r1, [pc, #52]	; (d750 <do_udp_init+0x5c>)
    d71a:	f363 0207 	bfi	r2, r3, #0, #8
    d71e:	4b0d      	ldr	r3, [pc, #52]	; (d754 <do_udp_init+0x60>)
    d720:	480d      	ldr	r0, [pc, #52]	; (d758 <do_udp_init+0x64>)
    d722:	1a5b      	subs	r3, r3, r1
    d724:	08db      	lsrs	r3, r3, #3
    d726:	f363 128f 	bfi	r2, r3, #6, #10
    d72a:	4621      	mov	r1, r4
    d72c:	f00f fa2a 	bl	1cb84 <log_1>
}
    d730:	4620      	mov	r0, r4
    d732:	bd38      	pop	{r3, r4, r5, pc}
		char ch = *(address + index);
    d734:	5ce2      	ldrb	r2, [r4, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d736:	2a2e      	cmp	r2, #46	; 0x2e
    d738:	d002      	beq.n	d740 <do_udp_init+0x4c>
    d73a:	3a30      	subs	r2, #48	; 0x30
    d73c:	2a09      	cmp	r2, #9
    d73e:	d801      	bhi.n	d744 <do_udp_init+0x50>
	for (index = 0; index < length; index++) {
    d740:	3301      	adds	r3, #1
    d742:	e7de      	b.n	d702 <do_udp_init+0xe>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d744:	2202      	movs	r2, #2
    d746:	4629      	mov	r1, r5
    d748:	4620      	mov	r0, r4
    d74a:	f7ff fdcf 	bl	d2ec <parse_host_by_name>
    d74e:	e7de      	b.n	d70e <do_udp_init+0x1a>
    d750:	0001f370 	.word	0x0001f370
    d754:	0001f3e8 	.word	0x0001f3e8
    d758:	0001fd9d 	.word	0x0001fd9d

0000d75c <handle_at_udp_recvfrom>:
 */
static int handle_at_udp_recvfrom(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    d75c:	2380      	movs	r3, #128	; 0x80
{
    d75e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d762:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	int size = TCPIP_MAX_URL;
    d766:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    d768:	4b69      	ldr	r3, [pc, #420]	; (d910 <handle_at_udp_recvfrom+0x1b4>)
{
    d76a:	4680      	mov	r8, r0
	if (client.sock < 0) {
    d76c:	681a      	ldr	r2, [r3, #0]
    d76e:	461d      	mov	r5, r3
    d770:	2a00      	cmp	r2, #0
    d772:	da14      	bge.n	d79e <handle_at_udp_recvfrom+0x42>
		LOG_ERR("Socket not opened yet");
    d774:	2301      	movs	r3, #1
    d776:	f04f 0100 	mov.w	r1, #0
    d77a:	4a66      	ldr	r2, [pc, #408]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d77c:	f363 0107 	bfi	r1, r3, #0, #8
    d780:	4b65      	ldr	r3, [pc, #404]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d782:	4866      	ldr	r0, [pc, #408]	; (d91c <handle_at_udp_recvfrom+0x1c0>)
    d784:	1a9b      	subs	r3, r3, r2
    d786:	08db      	lsrs	r3, r3, #3
    d788:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    d78c:	f00f f9ed 	bl	1cb6a <log_0>
		return err;
    d790:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    d794:	4620      	mov	r0, r4
    d796:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    d79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d79e:	791b      	ldrb	r3, [r3, #4]
    d7a0:	2b11      	cmp	r3, #17
    d7a2:	d00c      	beq.n	d7be <handle_at_udp_recvfrom+0x62>
		LOG_ERR("Invalid socket");
    d7a4:	2301      	movs	r3, #1
    d7a6:	f04f 0100 	mov.w	r1, #0
    d7aa:	4a5a      	ldr	r2, [pc, #360]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d7ac:	f363 0107 	bfi	r1, r3, #0, #8
    d7b0:	4b59      	ldr	r3, [pc, #356]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d7b2:	485b      	ldr	r0, [pc, #364]	; (d920 <handle_at_udp_recvfrom+0x1c4>)
    d7b4:	1a9b      	subs	r3, r3, r2
    d7b6:	08db      	lsrs	r3, r3, #3
    d7b8:	f363 118f 	bfi	r1, r3, #6, #10
    d7bc:	e7e6      	b.n	d78c <handle_at_udp_recvfrom+0x30>
	switch (cmd_type) {
    d7be:	2801      	cmp	r0, #1
    d7c0:	d1e6      	bne.n	d790 <handle_at_udp_recvfrom+0x34>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    d7c2:	4858      	ldr	r0, [pc, #352]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7c4:	f011 f85b 	bl	1e87e <at_params_valid_count_get>
    d7c8:	2804      	cmp	r0, #4
    d7ca:	d9e1      	bls.n	d790 <handle_at_udp_recvfrom+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d7cc:	af08      	add	r7, sp, #32
    d7ce:	ab04      	add	r3, sp, #16
    d7d0:	463a      	mov	r2, r7
    d7d2:	4641      	mov	r1, r8
    d7d4:	4853      	ldr	r0, [pc, #332]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7d6:	f011 f82f 	bl	1e838 <at_params_string_get>
		if (err < 0) {
    d7da:	1e04      	subs	r4, r0, #0
    d7dc:	dbda      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		url[size] = '\0';
    d7de:	f04f 0a00 	mov.w	sl, #0
    d7e2:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    d7e4:	f10d 020a 	add.w	r2, sp, #10
    d7e8:	2102      	movs	r1, #2
    d7ea:	484e      	ldr	r0, [pc, #312]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
		url[size] = '\0';
    d7ec:	f807 a003 	strb.w	sl, [r7, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d7f0:	f011 f810 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    d7f4:	1e04      	subs	r4, r0, #0
    d7f6:	dbcd      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 3, &length);
    d7f8:	aa03      	add	r2, sp, #12
    d7fa:	2103      	movs	r1, #3
    d7fc:	4849      	ldr	r0, [pc, #292]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d7fe:	f011 f809 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    d802:	1e04      	subs	r4, r0, #0
    d804:	dbc6      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 4, &time);
    d806:	f10d 020e 	add.w	r2, sp, #14
    d80a:	2104      	movs	r1, #4
    d80c:	4845      	ldr	r0, [pc, #276]	; (d924 <handle_at_udp_recvfrom+0x1c8>)
    d80e:	f011 f801 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    d812:	1e04      	subs	r4, r0, #0
    d814:	dbbe      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
	int sockaddr_len = sizeof(struct sockaddr);
    d816:	2218      	movs	r2, #24
		err = do_udp_recvfrom(url, port, length, time);
    d818:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	int sockaddr_len = sizeof(struct sockaddr);
    d81c:	ae05      	add	r6, sp, #20
	ret = do_udp_init(url, port);
    d81e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    d822:	4638      	mov	r0, r7
		err = do_udp_recvfrom(url, port, length, time);
    d824:	f8bd 900c 	ldrh.w	r9, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    d828:	6032      	str	r2, [r6, #0]
	struct timeval tmo = {
    d82a:	e9cd 3a06 	strd	r3, sl, [sp, #24]
	ret = do_udp_init(url, port);
    d82e:	f7ff ff61 	bl	d6f4 <do_udp_init>
	if (ret < 0) {
    d832:	1e04      	subs	r4, r0, #0
    d834:	dbae      	blt.n	d794 <handle_at_udp_recvfrom+0x38>
    d836:	2208      	movs	r2, #8
    d838:	4f3b      	ldr	r7, [pc, #236]	; (d928 <handle_at_udp_recvfrom+0x1cc>)
    d83a:	4641      	mov	r1, r8
    d83c:	683b      	ldr	r3, [r7, #0]
    d83e:	9200      	str	r2, [sp, #0]
    d840:	69dc      	ldr	r4, [r3, #28]
    d842:	2214      	movs	r2, #20
    d844:	ab06      	add	r3, sp, #24
    d846:	6828      	ldr	r0, [r5, #0]
    d848:	47a0      	blx	r4
	if (ret < 0) {
    d84a:	1e04      	subs	r4, r0, #0
    d84c:	da19      	bge.n	d882 <handle_at_udp_recvfrom+0x126>
		LOG_ERR("setsockopt() error: %d", -errno);
    d84e:	2301      	movs	r3, #1
    d850:	f04f 0500 	mov.w	r5, #0
    d854:	4a2f      	ldr	r2, [pc, #188]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d856:	f363 0507 	bfi	r5, r3, #0, #8
    d85a:	4b2f      	ldr	r3, [pc, #188]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d85c:	1a9b      	subs	r3, r3, r2
    d85e:	08db      	lsrs	r3, r3, #3
    d860:	f363 158f 	bfi	r5, r3, #6, #10
    d864:	f00e fde7 	bl	1c436 <z_errno>
    d868:	6801      	ldr	r1, [r0, #0]
    d86a:	462a      	mov	r2, r5
    d86c:	4249      	negs	r1, r1
    d86e:	482f      	ldr	r0, [pc, #188]	; (d92c <handle_at_udp_recvfrom+0x1d0>)
    d870:	f00f f988 	bl	1cb84 <log_1>
		do_socket_close(-errno);
    d874:	f00e fddf 	bl	1c436 <z_errno>
    d878:	6800      	ldr	r0, [r0, #0]
    d87a:	4240      	negs	r0, r0
    d87c:	f7ff fb34 	bl	cee8 <do_socket_close>
		return ret;
    d880:	e788      	b.n	d794 <handle_at_udp_recvfrom+0x38>
	if (length > NET_IPV4_MTU) {
    d882:	683b      	ldr	r3, [r7, #0]
    d884:	f5b9 7f10 	cmp.w	r9, #576	; 0x240
    d888:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d88a:	4b29      	ldr	r3, [pc, #164]	; (d930 <handle_at_udp_recvfrom+0x1d4>)
    d88c:	af28      	add	r7, sp, #160	; 0xa0
    d88e:	6828      	ldr	r0, [r5, #0]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    d890:	bf88      	it	hi
    d892:	f44f 7210 	movhi.w	r2, #576	; 0x240
    d896:	9601      	str	r6, [sp, #4]
    d898:	9300      	str	r3, [sp, #0]
    d89a:	bf98      	it	ls
    d89c:	fa0f f289 	sxthls.w	r2, r9
    d8a0:	2300      	movs	r3, #0
    d8a2:	4639      	mov	r1, r7
    d8a4:	47a0      	blx	r4
	if (ret < 0) {
    d8a6:	2800      	cmp	r0, #0
    d8a8:	4606      	mov	r6, r0
    d8aa:	da1d      	bge.n	d8e8 <handle_at_udp_recvfrom+0x18c>
		LOG_WRN("recvfrom() error: %d", -errno);
    d8ac:	2302      	movs	r3, #2
    d8ae:	f04f 0400 	mov.w	r4, #0
    d8b2:	4a18      	ldr	r2, [pc, #96]	; (d914 <handle_at_udp_recvfrom+0x1b8>)
    d8b4:	f363 0407 	bfi	r4, r3, #0, #8
    d8b8:	4b17      	ldr	r3, [pc, #92]	; (d918 <handle_at_udp_recvfrom+0x1bc>)
    d8ba:	1a9b      	subs	r3, r3, r2
    d8bc:	08db      	lsrs	r3, r3, #3
    d8be:	f363 148f 	bfi	r4, r3, #6, #10
    d8c2:	f00e fdb8 	bl	1c436 <z_errno>
    d8c6:	6801      	ldr	r1, [r0, #0]
    d8c8:	4622      	mov	r2, r4
    d8ca:	4249      	negs	r1, r1
    d8cc:	4819      	ldr	r0, [pc, #100]	; (d934 <handle_at_udp_recvfrom+0x1d8>)
    d8ce:	f00f f959 	bl	1cb84 <log_1>
		do_socket_close(-errno);
    d8d2:	f00e fdb0 	bl	1c436 <z_errno>
    d8d6:	6800      	ldr	r0, [r0, #0]
    d8d8:	4240      	negs	r0, r0
    d8da:	f7ff fb05 	bl	cee8 <do_socket_close>
		ret = -errno;
    d8de:	f00e fdaa 	bl	1c436 <z_errno>
    d8e2:	6804      	ldr	r4, [r0, #0]
    d8e4:	4264      	negs	r4, r4
    d8e6:	e755      	b.n	d794 <handle_at_udp_recvfrom+0x38>
		data[ret] = '\0';
    d8e8:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    d8ea:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d8ec:	543c      	strb	r4, [r7, r0]
		client.callback("#XUDPRECV: ");
    d8ee:	4812      	ldr	r0, [pc, #72]	; (d938 <handle_at_udp_recvfrom+0x1dc>)
    d8f0:	4798      	blx	r3
		client.callback(data);
    d8f2:	68ab      	ldr	r3, [r5, #8]
    d8f4:	4638      	mov	r0, r7
    d8f6:	4798      	blx	r3
		client.callback("\r\n");
    d8f8:	68ab      	ldr	r3, [r5, #8]
    d8fa:	4810      	ldr	r0, [pc, #64]	; (d93c <handle_at_udp_recvfrom+0x1e0>)
    d8fc:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    d8fe:	4632      	mov	r2, r6
    d900:	490f      	ldr	r1, [pc, #60]	; (d940 <handle_at_udp_recvfrom+0x1e4>)
    d902:	4810      	ldr	r0, [pc, #64]	; (d944 <handle_at_udp_recvfrom+0x1e8>)
    d904:	f003 fb28 	bl	10f58 <sprintf>
		client.callback(buf);
    d908:	68ab      	ldr	r3, [r5, #8]
    d90a:	480e      	ldr	r0, [pc, #56]	; (d944 <handle_at_udp_recvfrom+0x1e8>)
    d90c:	4798      	blx	r3
		break;
    d90e:	e741      	b.n	d794 <handle_at_udp_recvfrom+0x38>
    d910:	20020130 	.word	0x20020130
    d914:	0001f370 	.word	0x0001f370
    d918:	0001f3e8 	.word	0x0001f3e8
    d91c:	0001fd35 	.word	0x0001fd35
    d920:	0001fe28 	.word	0x0001fe28
    d924:	20020110 	.word	0x20020110
    d928:	20020344 	.word	0x20020344
    d92c:	0001fc5a 	.word	0x0001fc5a
    d930:	20024e2c 	.word	0x20024e2c
    d934:	0001fe37 	.word	0x0001fe37
    d938:	0001fe4c 	.word	0x0001fe4c
    d93c:	0001fded 	.word	0x0001fded
    d940:	0001fe58 	.word	0x0001fe58
    d944:	20026368 	.word	0x20026368

0000d948 <do_udp_sendto>:
{
    d948:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d94c:	4604      	mov	r4, r0
	u32_t datalen = strlen(data);
    d94e:	4610      	mov	r0, r2
{
    d950:	460d      	mov	r5, r1
    d952:	4617      	mov	r7, r2
	u32_t datalen = strlen(data);
    d954:	f00f fe44 	bl	1d5e0 <strlen>
	ret = do_udp_init(url, port);
    d958:	4629      	mov	r1, r5
	u32_t datalen = strlen(data);
    d95a:	4606      	mov	r6, r0
	ret = do_udp_init(url, port);
    d95c:	4620      	mov	r0, r4
    d95e:	f7ff fec9 	bl	d6f4 <do_udp_init>
	if (ret < 0) {
    d962:	2800      	cmp	r0, #0
    d964:	db3c      	blt.n	d9e0 <do_udp_sendto+0x98>
	u32_t offset = 0;
    d966:	2400      	movs	r4, #0
    d968:	4d20      	ldr	r5, [pc, #128]	; (d9ec <do_udp_sendto+0xa4>)
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    d96a:	f8df 8098 	ldr.w	r8, [pc, #152]	; da04 <do_udp_sendto+0xbc>
    d96e:	f8df 9098 	ldr.w	r9, [pc, #152]	; da08 <do_udp_sendto+0xc0>
	while (offset < datalen) {
    d972:	42a6      	cmp	r6, r4
    d974:	d809      	bhi.n	d98a <do_udp_sendto+0x42>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    d976:	4622      	mov	r2, r4
    d978:	491d      	ldr	r1, [pc, #116]	; (d9f0 <do_udp_sendto+0xa8>)
    d97a:	481e      	ldr	r0, [pc, #120]	; (d9f4 <do_udp_sendto+0xac>)
    d97c:	f003 faec 	bl	10f58 <sprintf>
	client.callback(buf);
    d980:	481c      	ldr	r0, [pc, #112]	; (d9f4 <do_udp_sendto+0xac>)
    d982:	68ab      	ldr	r3, [r5, #8]
    d984:	4798      	blx	r3
	return 0;
    d986:	2000      	movs	r0, #0
    d988:	e02a      	b.n	d9e0 <do_udp_sendto+0x98>
    d98a:	2208      	movs	r2, #8
    d98c:	e9cd 9200 	strd	r9, r2, [sp]
    d990:	f8d8 3000 	ldr.w	r3, [r8]
    d994:	1b32      	subs	r2, r6, r4
    d996:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
    d99a:	1939      	adds	r1, r7, r4
    d99c:	2300      	movs	r3, #0
    d99e:	6828      	ldr	r0, [r5, #0]
    d9a0:	47d0      	blx	sl
		if (ret <= 0) {
    d9a2:	2800      	cmp	r0, #0
    d9a4:	dc1f      	bgt.n	d9e6 <do_udp_sendto+0x9e>
			LOG_ERR("sendto() failed: %d", -errno);
    d9a6:	2301      	movs	r3, #1
    d9a8:	f04f 0400 	mov.w	r4, #0
    d9ac:	4a12      	ldr	r2, [pc, #72]	; (d9f8 <do_udp_sendto+0xb0>)
    d9ae:	f363 0407 	bfi	r4, r3, #0, #8
    d9b2:	4b12      	ldr	r3, [pc, #72]	; (d9fc <do_udp_sendto+0xb4>)
    d9b4:	1a9b      	subs	r3, r3, r2
    d9b6:	08db      	lsrs	r3, r3, #3
    d9b8:	f363 148f 	bfi	r4, r3, #6, #10
    d9bc:	f00e fd3b 	bl	1c436 <z_errno>
    d9c0:	6801      	ldr	r1, [r0, #0]
    d9c2:	4622      	mov	r2, r4
    d9c4:	4249      	negs	r1, r1
    d9c6:	480e      	ldr	r0, [pc, #56]	; (da00 <do_udp_sendto+0xb8>)
    d9c8:	f00f f8dc 	bl	1cb84 <log_1>
			do_socket_close(-errno);
    d9cc:	f00e fd33 	bl	1c436 <z_errno>
    d9d0:	6800      	ldr	r0, [r0, #0]
    d9d2:	4240      	negs	r0, r0
    d9d4:	f7ff fa88 	bl	cee8 <do_socket_close>
			return -errno;
    d9d8:	f00e fd2d 	bl	1c436 <z_errno>
    d9dc:	6800      	ldr	r0, [r0, #0]
    d9de:	4240      	negs	r0, r0
}
    d9e0:	b002      	add	sp, #8
    d9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		offset += ret;
    d9e6:	4404      	add	r4, r0
    d9e8:	e7c3      	b.n	d972 <do_udp_sendto+0x2a>
    d9ea:	bf00      	nop
    d9ec:	20020130 	.word	0x20020130
    d9f0:	0001fcc2 	.word	0x0001fcc2
    d9f4:	20026368 	.word	0x20026368
    d9f8:	0001f370 	.word	0x0001f370
    d9fc:	0001f3e8 	.word	0x0001f3e8
    da00:	0001fcae 	.word	0x0001fcae
    da04:	20020344 	.word	0x20020344
    da08:	20024e2c 	.word	0x20024e2c

0000da0c <handle_at_udp_sendto>:
{
    da0c:	b570      	push	{r4, r5, r6, lr}
	if (client.sock < 0) {
    da0e:	4b2e      	ldr	r3, [pc, #184]	; (dac8 <handle_at_udp_sendto+0xbc>)
{
    da10:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
	if (client.sock < 0) {
    da14:	681a      	ldr	r2, [r3, #0]
{
    da16:	4605      	mov	r5, r0
	if (client.sock < 0) {
    da18:	2a00      	cmp	r2, #0
    da1a:	da12      	bge.n	da42 <handle_at_udp_sendto+0x36>
		LOG_ERR("Socket not opened yet");
    da1c:	2301      	movs	r3, #1
    da1e:	f04f 0100 	mov.w	r1, #0
    da22:	4a2a      	ldr	r2, [pc, #168]	; (dacc <handle_at_udp_sendto+0xc0>)
    da24:	f363 0107 	bfi	r1, r3, #0, #8
    da28:	4b29      	ldr	r3, [pc, #164]	; (dad0 <handle_at_udp_sendto+0xc4>)
    da2a:	482a      	ldr	r0, [pc, #168]	; (dad4 <handle_at_udp_sendto+0xc8>)
    da2c:	1a9b      	subs	r3, r3, r2
    da2e:	08db      	lsrs	r3, r3, #3
    da30:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Invalid socket");
    da34:	f00f f899 	bl	1cb6a <log_0>
		return err;
    da38:	f06f 0015 	mvn.w	r0, #21
}
    da3c:	f50d 7d32 	add.w	sp, sp, #712	; 0x2c8
    da40:	bd70      	pop	{r4, r5, r6, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    da42:	791b      	ldrb	r3, [r3, #4]
    da44:	2b11      	cmp	r3, #17
    da46:	d00c      	beq.n	da62 <handle_at_udp_sendto+0x56>
		LOG_ERR("Invalid socket");
    da48:	2301      	movs	r3, #1
    da4a:	f04f 0100 	mov.w	r1, #0
    da4e:	4a1f      	ldr	r2, [pc, #124]	; (dacc <handle_at_udp_sendto+0xc0>)
    da50:	f363 0107 	bfi	r1, r3, #0, #8
    da54:	4b1e      	ldr	r3, [pc, #120]	; (dad0 <handle_at_udp_sendto+0xc4>)
    da56:	4820      	ldr	r0, [pc, #128]	; (dad8 <handle_at_udp_sendto+0xcc>)
    da58:	1a9b      	subs	r3, r3, r2
    da5a:	08db      	lsrs	r3, r3, #3
    da5c:	f363 118f 	bfi	r1, r3, #6, #10
    da60:	e7e8      	b.n	da34 <handle_at_udp_sendto+0x28>
	switch (cmd_type) {
    da62:	2801      	cmp	r0, #1
    da64:	d1e8      	bne.n	da38 <handle_at_udp_sendto+0x2c>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    da66:	481d      	ldr	r0, [pc, #116]	; (dadc <handle_at_udp_sendto+0xd0>)
    da68:	f010 ff09 	bl	1e87e <at_params_valid_count_get>
    da6c:	2803      	cmp	r0, #3
    da6e:	d9e3      	bls.n	da38 <handle_at_udp_sendto+0x2c>
		size = TCPIP_MAX_URL;
    da70:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    da72:	ac02      	add	r4, sp, #8
		size = TCPIP_MAX_URL;
    da74:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    da76:	4622      	mov	r2, r4
    da78:	ab01      	add	r3, sp, #4
    da7a:	4629      	mov	r1, r5
    da7c:	4817      	ldr	r0, [pc, #92]	; (dadc <handle_at_udp_sendto+0xd0>)
    da7e:	f010 fedb 	bl	1e838 <at_params_string_get>
		if (err < 0) {
    da82:	2800      	cmp	r0, #0
    da84:	dbda      	blt.n	da3c <handle_at_udp_sendto+0x30>
		url[size] = '\0';
    da86:	2600      	movs	r6, #0
    da88:	9b01      	ldr	r3, [sp, #4]
		err = at_params_short_get(&m_param_list, 2, &port);
    da8a:	f10d 0202 	add.w	r2, sp, #2
    da8e:	2102      	movs	r1, #2
    da90:	4812      	ldr	r0, [pc, #72]	; (dadc <handle_at_udp_sendto+0xd0>)
		url[size] = '\0';
    da92:	54e6      	strb	r6, [r4, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    da94:	f010 febe 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    da98:	2800      	cmp	r0, #0
    da9a:	dbcf      	blt.n	da3c <handle_at_udp_sendto+0x30>
		size = NET_IPV4_MTU;
    da9c:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    daa0:	ad22      	add	r5, sp, #136	; 0x88
		size = NET_IPV4_MTU;
    daa2:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    daa4:	462a      	mov	r2, r5
    daa6:	ab01      	add	r3, sp, #4
    daa8:	2103      	movs	r1, #3
    daaa:	480c      	ldr	r0, [pc, #48]	; (dadc <handle_at_udp_sendto+0xd0>)
    daac:	f010 fec4 	bl	1e838 <at_params_string_get>
		if (err < 0) {
    dab0:	2800      	cmp	r0, #0
    dab2:	dbc3      	blt.n	da3c <handle_at_udp_sendto+0x30>
		data[size] = '\0';
    dab4:	9b01      	ldr	r3, [sp, #4]
		err = do_udp_sendto(url, port, data);
    dab6:	462a      	mov	r2, r5
    dab8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    dabc:	4620      	mov	r0, r4
		data[size] = '\0';
    dabe:	54ee      	strb	r6, [r5, r3]
		err = do_udp_sendto(url, port, data);
    dac0:	f7ff ff42 	bl	d948 <do_udp_sendto>
		break;
    dac4:	e7ba      	b.n	da3c <handle_at_udp_sendto+0x30>
    dac6:	bf00      	nop
    dac8:	20020130 	.word	0x20020130
    dacc:	0001f370 	.word	0x0001f370
    dad0:	0001f3e8 	.word	0x0001f3e8
    dad4:	0001fd35 	.word	0x0001fd35
    dad8:	0001fe28 	.word	0x0001fe28
    dadc:	20020110 	.word	0x20020110

0000dae0 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
    dae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dae4:	4d20      	ldr	r5, [pc, #128]	; (db68 <slm_at_tcpip_parse+0x88>)
    dae6:	4606      	mov	r6, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    dae8:	2400      	movs	r4, #0
    daea:	46a8      	mov	r8, r5
		u8_t cmd_len = strlen(m_tcpip_at_list[i].string);
    daec:	686f      	ldr	r7, [r5, #4]
    daee:	4638      	mov	r0, r7
    daf0:	f00f fd76 	bl	1d5e0 <strlen>
    daf4:	2300      	movs	r3, #0
    daf6:	b2c0      	uxtb	r0, r0
    daf8:	4283      	cmp	r3, r0
    dafa:	db18      	blt.n	db2e <slm_at_tcpip_parse+0x4e>

		if (slm_at_cmd_cmp(at_cmd, m_tcpip_at_list[i].string,
			cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    dafc:	2100      	movs	r1, #0
    dafe:	4a1b      	ldr	r2, [pc, #108]	; (db6c <slm_at_tcpip_parse+0x8c>)
    db00:	4630      	mov	r0, r6
    db02:	f010 fd8d 	bl	1e620 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    db06:	1e01      	subs	r1, r0, #0
    db08:	da1c      	bge.n	db44 <slm_at_tcpip_parse+0x64>
				LOG_ERR("Failed to parse AT command %d", ret);
    db0a:	2301      	movs	r3, #1
    db0c:	f04f 0200 	mov.w	r2, #0
    db10:	4817      	ldr	r0, [pc, #92]	; (db70 <slm_at_tcpip_parse+0x90>)
    db12:	f363 0207 	bfi	r2, r3, #0, #8
    db16:	4b17      	ldr	r3, [pc, #92]	; (db74 <slm_at_tcpip_parse+0x94>)
    db18:	1a1b      	subs	r3, r3, r0
    db1a:	08db      	lsrs	r3, r3, #3
    db1c:	4816      	ldr	r0, [pc, #88]	; (db78 <slm_at_tcpip_parse+0x98>)
    db1e:	f363 128f 	bfi	r2, r3, #6, #10
    db22:	f00f f82f 	bl	1cb84 <log_1>
				return -EINVAL;
    db26:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    db2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    db2e:	5cf2      	ldrb	r2, [r6, r3]
    db30:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    db34:	2919      	cmp	r1, #25
    db36:	5cf9      	ldrb	r1, [r7, r3]
    db38:	bf98      	it	ls
    db3a:	3a20      	subls	r2, #32
    db3c:	4291      	cmp	r1, r2
    db3e:	d10b      	bne.n	db58 <slm_at_tcpip_parse+0x78>
	for (int i = 0; i < length; i++) {
    db40:	3301      	adds	r3, #1
    db42:	e7d9      	b.n	daf8 <slm_at_tcpip_parse+0x18>
			type = at_parser_cmd_type_get(at_cmd);
    db44:	4630      	mov	r0, r6
    db46:	f010 fd6e 	bl	1e626 <at_parser_cmd_type_get>
			ret = m_tcpip_at_list[i].handler(type);
    db4a:	230c      	movs	r3, #12
    db4c:	fb03 8404 	mla	r4, r3, r4, r8
    db50:	68a3      	ldr	r3, [r4, #8]
}
    db52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = m_tcpip_at_list[i].handler(type);
    db56:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    db58:	3401      	adds	r4, #1
    db5a:	2c07      	cmp	r4, #7
    db5c:	f105 050c 	add.w	r5, r5, #12
    db60:	d1c4      	bne.n	daec <slm_at_tcpip_parse+0xc>
	int ret = -ENOTSUP;
    db62:	f06f 0022 	mvn.w	r0, #34	; 0x22
    db66:	e7e0      	b.n	db2a <slm_at_tcpip_parse+0x4a>
    db68:	0001f428 	.word	0x0001f428
    db6c:	20020110 	.word	0x20020110
    db70:	0001f370 	.word	0x0001f370
    db74:	0001f3e8 	.word	0x0001f3e8
    db78:	0001f9c9 	.word	0x0001f9c9

0000db7c <enable_PSM>:

	return 0;
}

void enable_PSM(void)
{
    db7c:	b510      	push	{r4, lr}
    db7e:	b0a6      	sub	sp, #152	; 0x98
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    db80:	2296      	movs	r2, #150	; 0x96
    db82:	2100      	movs	r1, #0
    db84:	4668      	mov	r0, sp
    db86:	f00f fd90 	bl	1d6aa <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    db8a:	f240 2201 	movw	r2, #513	; 0x201
    db8e:	2100      	movs	r1, #0
    db90:	2066      	movs	r0, #102	; 0x66
    db92:	f7ff f99d 	bl	ced0 <socket>
	if (at_sock < 0) {
    db96:	1e04      	subs	r4, r0, #0
    db98:	da0d      	bge.n	dbb6 <enable_PSM+0x3a>
		LOG_ERR("Socket could not be opended.");
    db9a:	2301      	movs	r3, #1
    db9c:	f04f 0100 	mov.w	r1, #0
    dba0:	4a24      	ldr	r2, [pc, #144]	; (dc34 <enable_PSM+0xb8>)
    dba2:	f363 0107 	bfi	r1, r3, #0, #8
    dba6:	4b24      	ldr	r3, [pc, #144]	; (dc38 <enable_PSM+0xbc>)
    dba8:	4824      	ldr	r0, [pc, #144]	; (dc3c <enable_PSM+0xc0>)
    dbaa:	1a9b      	subs	r3, r3, r2
    dbac:	08db      	lsrs	r3, r3, #3
    dbae:	f363 118f 	bfi	r1, r3, #6, #10
    dbb2:	f00e ffda 	bl	1cb6a <log_0>
	}
	bytes_sent = send(at_sock, AT_CPSMS1, strlen(AT_CPSMS1), 0);
    dbb6:	4822      	ldr	r0, [pc, #136]	; (dc40 <enable_PSM+0xc4>)
    dbb8:	f00f fd12 	bl	1d5e0 <strlen>
    dbbc:	4920      	ldr	r1, [pc, #128]	; (dc40 <enable_PSM+0xc4>)
    dbbe:	4602      	mov	r2, r0
    dbc0:	4620      	mov	r0, r4
    dbc2:	f7ff fa9f 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    dbc6:	2800      	cmp	r0, #0
    dbc8:	da10      	bge.n	dbec <enable_PSM+0x70>
		LOG_INF("CPSM send error");
    dbca:	2303      	movs	r3, #3
    dbcc:	f04f 0100 	mov.w	r1, #0
    dbd0:	4a18      	ldr	r2, [pc, #96]	; (dc34 <enable_PSM+0xb8>)
    dbd2:	f363 0107 	bfi	r1, r3, #0, #8
    dbd6:	4b18      	ldr	r3, [pc, #96]	; (dc38 <enable_PSM+0xbc>)
    dbd8:	481a      	ldr	r0, [pc, #104]	; (dc44 <enable_PSM+0xc8>)
    dbda:	1a9b      	subs	r3, r3, r2
    dbdc:	08db      	lsrs	r3, r3, #3
    dbde:	f363 118f 	bfi	r1, r3, #6, #10
    dbe2:	f00e ffc2 	bl	1cb6a <log_0>
		close(at_sock);
    dbe6:	4620      	mov	r0, r4
    dbe8:	f7ff f978 	bl	cedc <close>
	}
	do {
		bytes_received = recv(at_sock, buffer, 100, 0);
    dbec:	2264      	movs	r2, #100	; 0x64
    dbee:	4669      	mov	r1, sp
    dbf0:	4620      	mov	r0, r4
    dbf2:	f7ff fb05 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    dbf6:	2800      	cmp	r0, #0
    dbf8:	d0f8      	beq.n	dbec <enable_PSM+0x70>
	if(strstr(buffer, "OK") != NULL)
    dbfa:	4913      	ldr	r1, [pc, #76]	; (dc48 <enable_PSM+0xcc>)
    dbfc:	4668      	mov	r0, sp
    dbfe:	f00f fc9a 	bl	1d536 <strstr>
    dc02:	b168      	cbz	r0, dc20 <enable_PSM+0xa4>
	{
		LOG_INF("PSM enabled!");
    dc04:	2303      	movs	r3, #3
    dc06:	f04f 0100 	mov.w	r1, #0
    dc0a:	4a0a      	ldr	r2, [pc, #40]	; (dc34 <enable_PSM+0xb8>)
    dc0c:	f363 0107 	bfi	r1, r3, #0, #8
    dc10:	4b09      	ldr	r3, [pc, #36]	; (dc38 <enable_PSM+0xbc>)
    dc12:	480e      	ldr	r0, [pc, #56]	; (dc4c <enable_PSM+0xd0>)
    dc14:	1a9b      	subs	r3, r3, r2
    dc16:	08db      	lsrs	r3, r3, #3
    dc18:	f363 118f 	bfi	r1, r3, #6, #10
    dc1c:	f00e ffa5 	bl	1cb6a <log_0>
	}
	k_sleep(K_SECONDS(3));
    dc20:	f640 30b8 	movw	r0, #3000	; 0xbb8
    dc24:	f00e fc09 	bl	1c43a <k_sleep>
	close(at_sock);
    dc28:	4620      	mov	r0, r4
    dc2a:	f7ff f957 	bl	cedc <close>
}
    dc2e:	b026      	add	sp, #152	; 0x98
    dc30:	bd10      	pop	{r4, pc}
    dc32:	bf00      	nop
    dc34:	0001f370 	.word	0x0001f370
    dc38:	0001f3e8 	.word	0x0001f3e8
    dc3c:	0001fcd4 	.word	0x0001fcd4
    dc40:	0001fcf1 	.word	0x0001fcf1
    dc44:	0001fd18 	.word	0x0001fd18
    dc48:	000201e1 	.word	0x000201e1
    dc4c:	0001fd28 	.word	0x0001fd28

0000dc50 <disable_PSM>:

void disable_PSM(void)
{
    dc50:	b510      	push	{r4, lr}
    dc52:	b0a6      	sub	sp, #152	; 0x98
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    dc54:	2296      	movs	r2, #150	; 0x96
    dc56:	2100      	movs	r1, #0
    dc58:	4668      	mov	r0, sp
    dc5a:	f00f fd26 	bl	1d6aa <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dc5e:	f240 2201 	movw	r2, #513	; 0x201
    dc62:	2100      	movs	r1, #0
    dc64:	2066      	movs	r0, #102	; 0x66
    dc66:	f7ff f933 	bl	ced0 <socket>
	if (at_sock < 0) {
    dc6a:	1e04      	subs	r4, r0, #0
    dc6c:	da0d      	bge.n	dc8a <disable_PSM+0x3a>
		LOG_ERR("Socket could not be opended.");
    dc6e:	2301      	movs	r3, #1
    dc70:	f04f 0100 	mov.w	r1, #0
    dc74:	4a24      	ldr	r2, [pc, #144]	; (dd08 <disable_PSM+0xb8>)
    dc76:	f363 0107 	bfi	r1, r3, #0, #8
    dc7a:	4b24      	ldr	r3, [pc, #144]	; (dd0c <disable_PSM+0xbc>)
    dc7c:	4824      	ldr	r0, [pc, #144]	; (dd10 <disable_PSM+0xc0>)
    dc7e:	1a9b      	subs	r3, r3, r2
    dc80:	08db      	lsrs	r3, r3, #3
    dc82:	f363 118f 	bfi	r1, r3, #6, #10
    dc86:	f00e ff70 	bl	1cb6a <log_0>
	}
	bytes_sent = send(at_sock, AT_CPSMS0, strlen(AT_CPSMS0), 0);
    dc8a:	4822      	ldr	r0, [pc, #136]	; (dd14 <disable_PSM+0xc4>)
    dc8c:	f00f fca8 	bl	1d5e0 <strlen>
    dc90:	4920      	ldr	r1, [pc, #128]	; (dd14 <disable_PSM+0xc4>)
    dc92:	4602      	mov	r2, r0
    dc94:	4620      	mov	r0, r4
    dc96:	f7ff fa35 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    dc9a:	2800      	cmp	r0, #0
    dc9c:	da10      	bge.n	dcc0 <disable_PSM+0x70>
		LOG_INF("CPSM send error");
    dc9e:	2303      	movs	r3, #3
    dca0:	f04f 0100 	mov.w	r1, #0
    dca4:	4a18      	ldr	r2, [pc, #96]	; (dd08 <disable_PSM+0xb8>)
    dca6:	f363 0107 	bfi	r1, r3, #0, #8
    dcaa:	4b18      	ldr	r3, [pc, #96]	; (dd0c <disable_PSM+0xbc>)
    dcac:	481a      	ldr	r0, [pc, #104]	; (dd18 <disable_PSM+0xc8>)
    dcae:	1a9b      	subs	r3, r3, r2
    dcb0:	08db      	lsrs	r3, r3, #3
    dcb2:	f363 118f 	bfi	r1, r3, #6, #10
    dcb6:	f00e ff58 	bl	1cb6a <log_0>
		close(at_sock);
    dcba:	4620      	mov	r0, r4
    dcbc:	f7ff f90e 	bl	cedc <close>
	}
	do {
		bytes_received = recv(at_sock, buffer, 100, 0);
    dcc0:	2264      	movs	r2, #100	; 0x64
    dcc2:	4669      	mov	r1, sp
    dcc4:	4620      	mov	r0, r4
    dcc6:	f7ff fa9b 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    dcca:	2800      	cmp	r0, #0
    dccc:	d0f8      	beq.n	dcc0 <disable_PSM+0x70>
	if(strstr(buffer, "OK") != NULL)
    dcce:	4913      	ldr	r1, [pc, #76]	; (dd1c <disable_PSM+0xcc>)
    dcd0:	4668      	mov	r0, sp
    dcd2:	f00f fc30 	bl	1d536 <strstr>
    dcd6:	b168      	cbz	r0, dcf4 <disable_PSM+0xa4>
	{
		LOG_INF("PSM disabled!");
    dcd8:	2303      	movs	r3, #3
    dcda:	f04f 0100 	mov.w	r1, #0
    dcde:	4a0a      	ldr	r2, [pc, #40]	; (dd08 <disable_PSM+0xb8>)
    dce0:	f363 0107 	bfi	r1, r3, #0, #8
    dce4:	4b09      	ldr	r3, [pc, #36]	; (dd0c <disable_PSM+0xbc>)
    dce6:	480e      	ldr	r0, [pc, #56]	; (dd20 <disable_PSM+0xd0>)
    dce8:	1a9b      	subs	r3, r3, r2
    dcea:	08db      	lsrs	r3, r3, #3
    dcec:	f363 118f 	bfi	r1, r3, #6, #10
    dcf0:	f00e ff3b 	bl	1cb6a <log_0>
	}
	k_sleep(K_SECONDS(3));
    dcf4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    dcf8:	f00e fb9f 	bl	1c43a <k_sleep>
	close(at_sock);
    dcfc:	4620      	mov	r0, r4
    dcfe:	f7ff f8ed 	bl	cedc <close>
}
    dd02:	b026      	add	sp, #152	; 0x98
    dd04:	bd10      	pop	{r4, pc}
    dd06:	bf00      	nop
    dd08:	0001f370 	.word	0x0001f370
    dd0c:	0001f3e8 	.word	0x0001f3e8
    dd10:	0001fcd4 	.word	0x0001fcd4
    dd14:	0001fbf8 	.word	0x0001fbf8
    dd18:	0001fd18 	.word	0x0001fd18
    dd1c:	000201e1 	.word	0x000201e1
    dd20:	0001fc03 	.word	0x0001fc03

0000dd24 <request_nb_iot_network_stats>:


int request_nb_iot_network_stats()
{
	LOG_INF("Requesting NB-IoT network stats...");
    dd24:	2303      	movs	r3, #3
    dd26:	f04f 0100 	mov.w	r1, #0
{
    dd2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Requesting NB-IoT network stats...");
    dd2e:	f363 0107 	bfi	r1, r3, #0, #8
    dd32:	4ca6      	ldr	r4, [pc, #664]	; (dfcc <request_nb_iot_network_stats+0x2a8>)
    dd34:	4ba6      	ldr	r3, [pc, #664]	; (dfd0 <request_nb_iot_network_stats+0x2ac>)
{
    dd36:	b0a9      	sub	sp, #164	; 0xa4
	LOG_INF("Requesting NB-IoT network stats...");
    dd38:	1ae4      	subs	r4, r4, r3
    dd3a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    dd3e:	f364 118f 	bfi	r1, r4, #6, #10
    dd42:	48a4      	ldr	r0, [pc, #656]	; (dfd4 <request_nb_iot_network_stats+0x2b0>)
    dd44:	f00e ff11 	bl	1cb6a <log_0>

	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    dd48:	2296      	movs	r2, #150	; 0x96
    dd4a:	2100      	movs	r1, #0
    dd4c:	a802      	add	r0, sp, #8
    dd4e:	f00f fcac 	bl	1d6aa <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dd52:	f240 2201 	movw	r2, #513	; 0x201
    dd56:	2100      	movs	r1, #0
    dd58:	2066      	movs	r0, #102	; 0x66
    dd5a:	f7ff f8b9 	bl	ced0 <socket>
	if (at_sock < 0) {
    dd5e:	1e05      	subs	r5, r0, #0
    dd60:	db16      	blt.n	dd90 <request_nb_iot_network_stats+0x6c>
		return -1;
	}

	// Get and parse current cell ID: AT+CEREG?
	bytes_sent = send(at_sock, AT_CEREG, strlen(AT_CEREG), 0);
    dd62:	489d      	ldr	r0, [pc, #628]	; (dfd8 <request_nb_iot_network_stats+0x2b4>)
    dd64:	f00f fc3c 	bl	1d5e0 <strlen>
    dd68:	499b      	ldr	r1, [pc, #620]	; (dfd8 <request_nb_iot_network_stats+0x2b4>)
    dd6a:	4602      	mov	r2, r0
    dd6c:	4628      	mov	r0, r5
    dd6e:	f7ff f9c9 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    dd72:	2800      	cmp	r0, #0
    dd74:	da0f      	bge.n	dd96 <request_nb_iot_network_stats+0x72>
		LOG_INF("CEREG send error");
    dd76:	f04f 0100 	mov.w	r1, #0
    dd7a:	2303      	movs	r3, #3
    dd7c:	4897      	ldr	r0, [pc, #604]	; (dfdc <request_nb_iot_network_stats+0x2b8>)
    dd7e:	f363 0107 	bfi	r1, r3, #0, #8
    dd82:	f364 118f 	bfi	r1, r4, #6, #10
			neighbors[0] = '\0';
		}	
	}
	else if (strstr(buffer, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting neighbor data!");
    dd86:	f00e fef0 	bl	1cb6a <log_0>
		close(at_sock);
    dd8a:	4628      	mov	r0, r5
    dd8c:	f7ff f8a6 	bl	cedc <close>
		return -1;
    dd90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd94:	e0f5      	b.n	df82 <request_nb_iot_network_stats+0x25e>
		bytes_received = recv(at_sock, buffer, 100, 0);
    dd96:	2264      	movs	r2, #100	; 0x64
    dd98:	a902      	add	r1, sp, #8
    dd9a:	4628      	mov	r0, r5
    dd9c:	f7ff fa30 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    dda0:	2800      	cmp	r0, #0
    dda2:	d0f8      	beq.n	dd96 <request_nb_iot_network_stats+0x72>
	if(strstr(buffer, "OK") != NULL)
    dda4:	498e      	ldr	r1, [pc, #568]	; (dfe0 <request_nb_iot_network_stats+0x2bc>)
    dda6:	a802      	add	r0, sp, #8
    dda8:	f00f fbc5 	bl	1d536 <strstr>
    ddac:	b370      	cbz	r0, de0c <request_nb_iot_network_stats+0xe8>
		char* pos = strstr(buffer, "\",\"")+3;		
    ddae:	498d      	ldr	r1, [pc, #564]	; (dfe4 <request_nb_iot_network_stats+0x2c0>)
    ddb0:	a802      	add	r0, sp, #8
    ddb2:	f00f fbc0 	bl	1d536 <strstr>
    ddb6:	4a8c      	ldr	r2, [pc, #560]	; (dfe8 <request_nb_iot_network_stats+0x2c4>)
    ddb8:	1c83      	adds	r3, r0, #2
    ddba:	300a      	adds	r0, #10
			current_cell_id[i] = pos[i];
    ddbc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		for(uint8_t i=0; i<8; i++)
    ddc0:	4298      	cmp	r0, r3
			current_cell_id[i] = pos[i];
    ddc2:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint8_t i=0; i<8; i++)
    ddc6:	d1f9      	bne.n	ddbc <request_nb_iot_network_stats+0x98>
		LOG_INF("Current cell ID = %s", current_cell_id);
    ddc8:	f04f 0200 	mov.w	r2, #0
    ddcc:	2303      	movs	r3, #3
    ddce:	f363 0207 	bfi	r2, r3, #0, #8
    ddd2:	f364 128f 	bfi	r2, r4, #6, #10
    ddd6:	4984      	ldr	r1, [pc, #528]	; (dfe8 <request_nb_iot_network_stats+0x2c4>)
    ddd8:	4884      	ldr	r0, [pc, #528]	; (dfec <request_nb_iot_network_stats+0x2c8>)
    ddda:	f00e fed3 	bl	1cb84 <log_1>
	k_sleep(K_SECONDS(1));
    ddde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    dde2:	f00e fb2a 	bl	1c43a <k_sleep>
	bytes_sent = send(at_sock, AT_CESQ, strlen(AT_CESQ), 0);
    dde6:	4882      	ldr	r0, [pc, #520]	; (dff0 <request_nb_iot_network_stats+0x2cc>)
    dde8:	f00f fbfa 	bl	1d5e0 <strlen>
    ddec:	4980      	ldr	r1, [pc, #512]	; (dff0 <request_nb_iot_network_stats+0x2cc>)
    ddee:	4602      	mov	r2, r0
    ddf0:	4628      	mov	r0, r5
    ddf2:	f7ff f987 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    ddf6:	2800      	cmp	r0, #0
    ddf8:	da17      	bge.n	de2a <request_nb_iot_network_stats+0x106>
		LOG_INF("CESQ send error");
    ddfa:	f04f 0100 	mov.w	r1, #0
    ddfe:	2303      	movs	r3, #3
    de00:	f363 0107 	bfi	r1, r3, #0, #8
    de04:	f364 118f 	bfi	r1, r4, #6, #10
    de08:	487a      	ldr	r0, [pc, #488]	; (dff4 <request_nb_iot_network_stats+0x2d0>)
    de0a:	e7bc      	b.n	dd86 <request_nb_iot_network_stats+0x62>
	else if (strstr(buffer, "ERROR") != NULL) 
    de0c:	497a      	ldr	r1, [pc, #488]	; (dff8 <request_nb_iot_network_stats+0x2d4>)
    de0e:	a802      	add	r0, sp, #8
    de10:	f00f fb91 	bl	1d536 <strstr>
    de14:	2800      	cmp	r0, #0
    de16:	d0e2      	beq.n	ddde <request_nb_iot_network_stats+0xba>
		LOG_ERR("Error while getting current cell ID!");
    de18:	f04f 0100 	mov.w	r1, #0
    de1c:	2301      	movs	r3, #1
    de1e:	f363 0107 	bfi	r1, r3, #0, #8
    de22:	f364 118f 	bfi	r1, r4, #6, #10
    de26:	4875      	ldr	r0, [pc, #468]	; (dffc <request_nb_iot_network_stats+0x2d8>)
    de28:	e7ad      	b.n	dd86 <request_nb_iot_network_stats+0x62>
		bytes_received = recv(at_sock, buffer, 100, 0);
    de2a:	2264      	movs	r2, #100	; 0x64
    de2c:	a902      	add	r1, sp, #8
    de2e:	4628      	mov	r0, r5
    de30:	f7ff f9e6 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    de34:	2800      	cmp	r0, #0
    de36:	d0f8      	beq.n	de2a <request_nb_iot_network_stats+0x106>
	if(strstr(buffer, "OK") != NULL)
    de38:	4969      	ldr	r1, [pc, #420]	; (dfe0 <request_nb_iot_network_stats+0x2bc>)
    de3a:	a802      	add	r0, sp, #8
    de3c:	f00f fb7b 	bl	1d536 <strstr>
    de40:	2800      	cmp	r0, #0
    de42:	d03e      	beq.n	dec2 <request_nb_iot_network_stats+0x19e>
		char *pos1 = strrchr(buffer, ',') + 1;
    de44:	212c      	movs	r1, #44	; 0x2c
    de46:	a802      	add	r0, sp, #8
    de48:	f00f fbbd 	bl	1d5c6 <strrchr>
    de4c:	1c46      	adds	r6, r0, #1
		char *pos2 = strstr(pos1, "\n");
    de4e:	496c      	ldr	r1, [pc, #432]	; (e000 <request_nb_iot_network_stats+0x2dc>)
    de50:	4630      	mov	r0, r6
    de52:	f00f fb70 	bl	1d536 <strstr>
    de56:	4680      	mov	r8, r0
		memcpy(rsrp, pos1, strlen(pos1)-strlen(pos2));
    de58:	4630      	mov	r0, r6
    de5a:	f00f fbc1 	bl	1d5e0 <strlen>
    de5e:	4607      	mov	r7, r0
    de60:	4640      	mov	r0, r8
    de62:	f00f fbbd 	bl	1d5e0 <strlen>
    de66:	4631      	mov	r1, r6
    de68:	1a3a      	subs	r2, r7, r0
    de6a:	4668      	mov	r0, sp
    de6c:	f00f fbf3 	bl	1d656 <memcpy>
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    de70:	220a      	movs	r2, #10
    de72:	a901      	add	r1, sp, #4
    de74:	4668      	mov	r0, sp
    de76:	f00f fa6f 	bl	1d358 <strtol>
    de7a:	4b62      	ldr	r3, [pc, #392]	; (e004 <request_nb_iot_network_stats+0x2e0>)
		LOG_INF("Current RSRP = %d", current_rsrp);
    de7c:	f04f 0200 	mov.w	r2, #0
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    de80:	7018      	strb	r0, [r3, #0]
		LOG_INF("Current RSRP = %d", current_rsrp);
    de82:	2303      	movs	r3, #3
    de84:	f363 0207 	bfi	r2, r3, #0, #8
    de88:	b2c1      	uxtb	r1, r0
    de8a:	f364 128f 	bfi	r2, r4, #6, #10
    de8e:	485e      	ldr	r0, [pc, #376]	; (e008 <request_nb_iot_network_stats+0x2e4>)
    de90:	f00e fe78 	bl	1cb84 <log_1>
	k_sleep(K_SECONDS(1));
    de94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    de98:	f00e facf 	bl	1c43a <k_sleep>
	bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    de9c:	485b      	ldr	r0, [pc, #364]	; (e00c <request_nb_iot_network_stats+0x2e8>)
    de9e:	f00f fb9f 	bl	1d5e0 <strlen>
    dea2:	495a      	ldr	r1, [pc, #360]	; (e00c <request_nb_iot_network_stats+0x2e8>)
    dea4:	4602      	mov	r2, r0
    dea6:	4628      	mov	r0, r5
    dea8:	f7ff f92c 	bl	d104 <send.constprop.11>
	if (bytes_sent < 0) {
    deac:	2800      	cmp	r0, #0
    deae:	da17      	bge.n	dee0 <request_nb_iot_network_stats+0x1bc>
		LOG_INF("NBRGRSRP send error");
    deb0:	f04f 0100 	mov.w	r1, #0
    deb4:	2303      	movs	r3, #3
    deb6:	f363 0107 	bfi	r1, r3, #0, #8
    deba:	f364 118f 	bfi	r1, r4, #6, #10
    debe:	4854      	ldr	r0, [pc, #336]	; (e010 <request_nb_iot_network_stats+0x2ec>)
    dec0:	e761      	b.n	dd86 <request_nb_iot_network_stats+0x62>
	else if (strstr(buffer, "ERROR") != NULL) 
    dec2:	494d      	ldr	r1, [pc, #308]	; (dff8 <request_nb_iot_network_stats+0x2d4>)
    dec4:	a802      	add	r0, sp, #8
    dec6:	f00f fb36 	bl	1d536 <strstr>
    deca:	2800      	cmp	r0, #0
    decc:	d0e2      	beq.n	de94 <request_nb_iot_network_stats+0x170>
		LOG_ERR("Error while getting current RSRP!");
    dece:	f04f 0100 	mov.w	r1, #0
    ded2:	2301      	movs	r3, #1
    ded4:	f363 0107 	bfi	r1, r3, #0, #8
    ded8:	f364 118f 	bfi	r1, r4, #6, #10
    dedc:	484d      	ldr	r0, [pc, #308]	; (e014 <request_nb_iot_network_stats+0x2f0>)
    dede:	e752      	b.n	dd86 <request_nb_iot_network_stats+0x62>
		bytes_received = recv(at_sock, buffer, 150, 0);
    dee0:	2296      	movs	r2, #150	; 0x96
    dee2:	a902      	add	r1, sp, #8
    dee4:	4628      	mov	r0, r5
    dee6:	f7ff f98b 	bl	d200 <recv.constprop.13>
	} while (bytes_received == 0);
    deea:	2800      	cmp	r0, #0
    deec:	d0f8      	beq.n	dee0 <request_nb_iot_network_stats+0x1bc>
	if(strstr(buffer, "OK") != NULL)
    deee:	493c      	ldr	r1, [pc, #240]	; (dfe0 <request_nb_iot_network_stats+0x2bc>)
    def0:	a802      	add	r0, sp, #8
    def2:	f00f fb20 	bl	1d536 <strstr>
    def6:	2800      	cmp	r0, #0
    def8:	d058      	beq.n	dfac <request_nb_iot_network_stats+0x288>
		if(strstr(buffer, "NBRGRSRP") != NULL)
    defa:	4947      	ldr	r1, [pc, #284]	; (e018 <request_nb_iot_network_stats+0x2f4>)
    defc:	a802      	add	r0, sp, #8
    defe:	f00f fb1a 	bl	1d536 <strstr>
    df02:	4606      	mov	r6, r0
    df04:	2800      	cmp	r0, #0
    df06:	d044      	beq.n	df92 <request_nb_iot_network_stats+0x26e>
			char* pos1 = strstr(buffer, "\%NBRGRSRP: ") + strlen("\%NBRGRSRP: ");
    df08:	4944      	ldr	r1, [pc, #272]	; (e01c <request_nb_iot_network_stats+0x2f8>)
    df0a:	a802      	add	r0, sp, #8
    df0c:	f00f fb13 	bl	1d536 <strstr>
    df10:	4607      	mov	r7, r0
    df12:	4842      	ldr	r0, [pc, #264]	; (e01c <request_nb_iot_network_stats+0x2f8>)
    df14:	f00f fb64 	bl	1d5e0 <strlen>
    df18:	4407      	add	r7, r0
			char* pos2 = strstr(pos1, "\n");
    df1a:	4939      	ldr	r1, [pc, #228]	; (e000 <request_nb_iot_network_stats+0x2dc>)
    df1c:	4638      	mov	r0, r7
    df1e:	f00f fb0a 	bl	1d536 <strstr>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    df22:	2600      	movs	r6, #0
			char* pos2 = strstr(pos1, "\n");
    df24:	4681      	mov	r9, r0
				neighbors[i] = pos1[i];
    df26:	f8df b0f8 	ldr.w	fp, [pc, #248]	; e020 <request_nb_iot_network_stats+0x2fc>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    df2a:	4638      	mov	r0, r7
    df2c:	f00f fb58 	bl	1d5e0 <strlen>
    df30:	4680      	mov	r8, r0
    df32:	4648      	mov	r0, r9
    df34:	f00f fb54 	bl	1d5e0 <strlen>
    df38:	fa5f fa86 	uxtb.w	sl, r6
    df3c:	eba8 0000 	sub.w	r0, r8, r0
    df40:	4582      	cmp	sl, r0
    df42:	f106 0601 	add.w	r6, r6, #1
    df46:	d31f      	bcc.n	df88 <request_nb_iot_network_stats+0x264>
			LOG_INF("Neighbors = %s", neighbors);
    df48:	f04f 0200 	mov.w	r2, #0
    df4c:	2303      	movs	r3, #3
    df4e:	f363 0207 	bfi	r2, r3, #0, #8
    df52:	f364 128f 	bfi	r2, r4, #6, #10
    df56:	4932      	ldr	r1, [pc, #200]	; (e020 <request_nb_iot_network_stats+0x2fc>)
    df58:	4832      	ldr	r0, [pc, #200]	; (e024 <request_nb_iot_network_stats+0x300>)
    df5a:	f00e fe13 	bl	1cb84 <log_1>
		return -1;
	}
	k_sleep(K_SECONDS(1));
    df5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    df62:	f00e fa6a 	bl	1c43a <k_sleep>
	close(at_sock);
    df66:	4628      	mov	r0, r5
    df68:	f7fe ffb8 	bl	cedc <close>
	LOG_INF("NB-IoT network stats requested.");
    df6c:	2303      	movs	r3, #3
    df6e:	f04f 0100 	mov.w	r1, #0
    df72:	f363 0107 	bfi	r1, r3, #0, #8
    df76:	482c      	ldr	r0, [pc, #176]	; (e028 <request_nb_iot_network_stats+0x304>)
    df78:	f364 118f 	bfi	r1, r4, #6, #10
    df7c:	f00e fdf5 	bl	1cb6a <log_0>
	
	return 0;
    df80:	2000      	movs	r0, #0
}
    df82:	b029      	add	sp, #164	; 0xa4
    df84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				neighbors[i] = pos1[i];
    df88:	f817 300a 	ldrb.w	r3, [r7, sl]
    df8c:	f80b 300a 	strb.w	r3, [fp, sl]
    df90:	e7cb      	b.n	df2a <request_nb_iot_network_stats+0x206>
			LOG_INF("No neighbors found.");
    df92:	2303      	movs	r3, #3
    df94:	f04f 0100 	mov.w	r1, #0
    df98:	f363 0107 	bfi	r1, r3, #0, #8
    df9c:	f364 118f 	bfi	r1, r4, #6, #10
    dfa0:	4822      	ldr	r0, [pc, #136]	; (e02c <request_nb_iot_network_stats+0x308>)
    dfa2:	f00e fde2 	bl	1cb6a <log_0>
			neighbors[0] = '\0';
    dfa6:	4b1e      	ldr	r3, [pc, #120]	; (e020 <request_nb_iot_network_stats+0x2fc>)
    dfa8:	701e      	strb	r6, [r3, #0]
    dfaa:	e7d8      	b.n	df5e <request_nb_iot_network_stats+0x23a>
	else if (strstr(buffer, "ERROR") != NULL) 
    dfac:	4912      	ldr	r1, [pc, #72]	; (dff8 <request_nb_iot_network_stats+0x2d4>)
    dfae:	a802      	add	r0, sp, #8
    dfb0:	f00f fac1 	bl	1d536 <strstr>
    dfb4:	2800      	cmp	r0, #0
    dfb6:	d0d2      	beq.n	df5e <request_nb_iot_network_stats+0x23a>
		LOG_ERR("Error while getting neighbor data!");
    dfb8:	f04f 0100 	mov.w	r1, #0
    dfbc:	2301      	movs	r3, #1
    dfbe:	f363 0107 	bfi	r1, r3, #0, #8
    dfc2:	f364 118f 	bfi	r1, r4, #6, #10
    dfc6:	481a      	ldr	r0, [pc, #104]	; (e030 <request_nb_iot_network_stats+0x30c>)
    dfc8:	e6dd      	b.n	dd86 <request_nb_iot_network_stats+0x62>
    dfca:	bf00      	nop
    dfcc:	0001f3e8 	.word	0x0001f3e8
    dfd0:	0001f370 	.word	0x0001f370
    dfd4:	0001ff3f 	.word	0x0001ff3f
    dfd8:	0001ff62 	.word	0x0001ff62
    dfdc:	0001ff6c 	.word	0x0001ff6c
    dfe0:	000201e1 	.word	0x000201e1
    dfe4:	0001ff7d 	.word	0x0001ff7d
    dfe8:	20026494 	.word	0x20026494
    dfec:	0001ff81 	.word	0x0001ff81
    dff0:	0001ffc1 	.word	0x0001ffc1
    dff4:	0001ffc9 	.word	0x0001ffc9
    dff8:	0001ff96 	.word	0x0001ff96
    dffc:	0001ff9c 	.word	0x0001ff9c
    e000:	0001fdee 	.word	0x0001fdee
    e004:	2002649e 	.word	0x2002649e
    e008:	0001ffd9 	.word	0x0001ffd9
    e00c:	0002000d 	.word	0x0002000d
    e010:	00020019 	.word	0x00020019
    e014:	0001ffeb 	.word	0x0001ffeb
    e018:	00020010 	.word	0x00020010
    e01c:	0002002d 	.word	0x0002002d
    e020:	2002649f 	.word	0x2002649f
    e024:	00020039 	.word	0x00020039
    e028:	0002007f 	.word	0x0002007f
    e02c:	00020048 	.word	0x00020048
    e030:	0002005c 	.word	0x0002005c

0000e034 <slm_at_tcpip_init>:


/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e038:	4a52      	ldr	r2, [pc, #328]	; (e184 <slm_at_tcpip_init+0x150>)
    e03a:	4c53      	ldr	r4, [pc, #332]	; (e188 <slm_at_tcpip_init+0x154>)
    e03c:	b0a7      	sub	sp, #156	; 0x9c
    e03e:	1aa4      	subs	r4, r4, r2
    e040:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e044:	b978      	cbnz	r0, e066 <slm_at_tcpip_init+0x32>
		LOG_ERR("No callback");
    e046:	2301      	movs	r3, #1
    e048:	f04f 0100 	mov.w	r1, #0
    e04c:	f363 0107 	bfi	r1, r3, #0, #8
    e050:	f364 118f 	bfi	r1, r4, #6, #10
    e054:	484d      	ldr	r0, [pc, #308]	; (e18c <slm_at_tcpip_init+0x158>)
    e056:	f00e fd88 	bl	1cb6a <log_0>
		return -EINVAL;
    e05a:	f06f 0815 	mvn.w	r8, #21
	}
	
	////////////////////////////////////////////////////////////////////

	
}
    e05e:	4640      	mov	r0, r8
    e060:	b027      	add	sp, #156	; 0x9c
    e062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.ip_proto = IPPROTO_IP;
    e066:	2500      	movs	r5, #0
	client.sock = INVALID_SOCKET;
    e068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e06c:	4a48      	ldr	r2, [pc, #288]	; (e190 <slm_at_tcpip_init+0x15c>)
    e06e:	6011      	str	r1, [r2, #0]
	client.callback = callback;
    e070:	6090      	str	r0, [r2, #8]
	client.ip_proto = IPPROTO_IP;
    e072:	8095      	strh	r5, [r2, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    e074:	f04f 0100 	mov.w	r1, #0
    e078:	2203      	movs	r2, #3
    e07a:	f362 0107 	bfi	r1, r2, #0, #8
    e07e:	f364 118f 	bfi	r1, r4, #6, #10
    e082:	4844      	ldr	r0, [pc, #272]	; (e194 <slm_at_tcpip_init+0x160>)
    e084:	f00e fd71 	bl	1cb6a <log_0>
	char buffer[150] = {0};
    e088:	2296      	movs	r2, #150	; 0x96
    e08a:	4629      	mov	r1, r5
    e08c:	4668      	mov	r0, sp
    e08e:	f00f fb0c 	bl	1d6aa <memset>
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    e092:	f240 2201 	movw	r2, #513	; 0x201
    e096:	4629      	mov	r1, r5
    e098:	2066      	movs	r0, #102	; 0x66
    e09a:	f7fe ff19 	bl	ced0 <socket>
	if (at_sock < 0) {
    e09e:	1e06      	subs	r6, r0, #0
    e0a0:	db26      	blt.n	e0f0 <slm_at_tcpip_init+0xbc>
    e0a2:	4f3d      	ldr	r7, [pc, #244]	; (e198 <slm_at_tcpip_init+0x164>)
		if (memcmp(buffer, "OK", 2) != 0) {
    e0a4:	f8df a108 	ldr.w	sl, [pc, #264]	; e1b0 <slm_at_tcpip_init+0x17c>
		LOG_INF("%s",nb_init_at_commands[i]);
    e0a8:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
    e0ac:	f042 0203 	orr.w	r2, r2, #3
    e0b0:	f362 0b07 	bfi	fp, r2, #0, #8
    e0b4:	f364 1b8f 	bfi	fp, r4, #6, #10
    e0b8:	465a      	mov	r2, fp
    e0ba:	4639      	mov	r1, r7
    e0bc:	4837      	ldr	r0, [pc, #220]	; (e19c <slm_at_tcpip_init+0x168>)
    e0be:	f00e fd61 	bl	1cb84 <log_1>
		bytes_sent = send(at_sock, nb_init_at_commands[i],
    e0c2:	4638      	mov	r0, r7
    e0c4:	f00f fa8c 	bl	1d5e0 <strlen>
    e0c8:	4639      	mov	r1, r7
    e0ca:	4602      	mov	r2, r0
    e0cc:	4630      	mov	r0, r6
    e0ce:	f7ff f819 	bl	d104 <send.constprop.11>
		if (bytes_sent < 0) {
    e0d2:	2800      	cmp	r0, #0
    e0d4:	da19      	bge.n	e10a <slm_at_tcpip_init+0xd6>
			LOG_INF("NO BYTES SENT");
    e0d6:	f04f 0100 	mov.w	r1, #0
    e0da:	2303      	movs	r3, #3
    e0dc:	4830      	ldr	r0, [pc, #192]	; (e1a0 <slm_at_tcpip_init+0x16c>)
    e0de:	f363 0107 	bfi	r1, r3, #0, #8
    e0e2:	f364 118f 	bfi	r1, r4, #6, #10
			LOG_INF("NOK");
    e0e6:	f00e fd40 	bl	1cb6a <log_0>
			close(at_sock);
    e0ea:	4630      	mov	r0, r6
    e0ec:	f7fe fef6 	bl	cedc <close>
		LOG_ERR("Could not init nb-iot parameters!");
    e0f0:	2301      	movs	r3, #1
    e0f2:	f04f 0100 	mov.w	r1, #0
    e0f6:	f363 0107 	bfi	r1, r3, #0, #8
    e0fa:	f364 118f 	bfi	r1, r4, #6, #10
    e0fe:	4829      	ldr	r0, [pc, #164]	; (e1a4 <slm_at_tcpip_init+0x170>)
    e100:	f00e fd33 	bl	1cb6a <log_0>
		return -1;
    e104:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    e108:	e7a9      	b.n	e05e <slm_at_tcpip_init+0x2a>
			bytes_received = recv(at_sock, buffer, 2, 0);
    e10a:	2202      	movs	r2, #2
    e10c:	4669      	mov	r1, sp
    e10e:	4630      	mov	r0, r6
    e110:	f7ff f876 	bl	d200 <recv.constprop.13>
		} while (bytes_received == 0);
    e114:	2800      	cmp	r0, #0
    e116:	d0f8      	beq.n	e10a <slm_at_tcpip_init+0xd6>
		if (memcmp(buffer, "OK", 2) != 0) {
    e118:	2202      	movs	r2, #2
    e11a:	4651      	mov	r1, sl
    e11c:	4668      	mov	r0, sp
    e11e:	f00f fa8a 	bl	1d636 <memcmp>
    e122:	4680      	mov	r8, r0
    e124:	b140      	cbz	r0, e138 <slm_at_tcpip_init+0x104>
			LOG_INF("NOK");
    e126:	f04f 0100 	mov.w	r1, #0
    e12a:	2303      	movs	r3, #3
    e12c:	f363 0107 	bfi	r1, r3, #0, #8
    e130:	f364 118f 	bfi	r1, r4, #6, #10
    e134:	481c      	ldr	r0, [pc, #112]	; (e1a8 <slm_at_tcpip_init+0x174>)
    e136:	e7d6      	b.n	e0e6 <slm_at_tcpip_init+0xb2>
			LOG_INF("OK");
    e138:	f029 023f 	bic.w	r2, r9, #63	; 0x3f
    e13c:	f042 0203 	orr.w	r2, r2, #3
    e140:	f362 0907 	bfi	r9, r2, #0, #8
    e144:	f364 198f 	bfi	r9, r4, #6, #10
    e148:	4649      	mov	r1, r9
    e14a:	4650      	mov	r0, sl
    e14c:	f00e fd0d 	bl	1cb6a <log_0>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e150:	3501      	adds	r5, #1
		k_sleep(K_SECONDS(3));
    e152:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e156:	f00e f970 	bl	1c43a <k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    e15a:	2d04      	cmp	r5, #4
    e15c:	f107 0728 	add.w	r7, r7, #40	; 0x28
    e160:	d1a2      	bne.n	e0a8 <slm_at_tcpip_init+0x74>
	close(at_sock);
    e162:	4630      	mov	r0, r6
    e164:	f7fe feba 	bl	cedc <close>
	LOG_INF("NB-IoT Parameters Initialized");
    e168:	2303      	movs	r3, #3
    e16a:	f04f 0100 	mov.w	r1, #0
    e16e:	f363 0107 	bfi	r1, r3, #0, #8
    e172:	f364 118f 	bfi	r1, r4, #6, #10
    e176:	480d      	ldr	r0, [pc, #52]	; (e1ac <slm_at_tcpip_init+0x178>)
    e178:	f00e fcf7 	bl	1cb6a <log_0>
		do_socket_open(2);
    e17c:	2002      	movs	r0, #2
    e17e:	f7fe fef1 	bl	cf64 <do_socket_open>
		return 0;
    e182:	e76c      	b.n	e05e <slm_at_tcpip_init+0x2a>
    e184:	0001f370 	.word	0x0001f370
    e188:	0001f3e8 	.word	0x0001f3e8
    e18c:	000201a7 	.word	0x000201a7
    e190:	20020130 	.word	0x20020130
    e194:	000201b3 	.word	0x000201b3
    e198:	0001fe68 	.word	0x0001fe68
    e19c:	00020d9c 	.word	0x00020d9c
    e1a0:	000201d2 	.word	0x000201d2
    e1a4:	00020202 	.word	0x00020202
    e1a8:	000201e0 	.word	0x000201e0
    e1ac:	000201e4 	.word	0x000201e4
    e1b0:	000201e1 	.word	0x000201e1

0000e1b4 <send_message>:
/** If GPS has fix, save GPS data and toggle PSM to request network stats:
 *  Cell ID and RSRP of serving cell and neighbors (if available).
 */
void send_message(void)
{
	LOG_INF("--------BEGIN-----------");
    e1b4:	2303      	movs	r3, #3
    e1b6:	f04f 0100 	mov.w	r1, #0
{
    e1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("--------BEGIN-----------");
    e1be:	f363 0107 	bfi	r1, r3, #0, #8
    e1c2:	4c64      	ldr	r4, [pc, #400]	; (e354 <send_message+0x1a0>)
    e1c4:	4b64      	ldr	r3, [pc, #400]	; (e358 <send_message+0x1a4>)
	// Wait for GPS fix
	while(!notified)
    e1c6:	4e65      	ldr	r6, [pc, #404]	; (e35c <send_message+0x1a8>)
	LOG_INF("--------BEGIN-----------");
    e1c8:	1ae4      	subs	r4, r4, r3
    e1ca:	f3c4 04c9 	ubfx	r4, r4, #3, #10
{
    e1ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
	LOG_INF("--------BEGIN-----------");
    e1d2:	f364 118f 	bfi	r1, r4, #6, #10
    e1d6:	4862      	ldr	r0, [pc, #392]	; (e360 <send_message+0x1ac>)
    e1d8:	f00e fcc7 	bl	1cb6a <log_0>
    e1dc:	4637      	mov	r7, r6
	{
		k_sleep(K_SECONDS(1));
		LOG_INF("waiting for GPS fix");
    e1de:	f8df 81bc 	ldr.w	r8, [pc, #444]	; e39c <send_message+0x1e8>
	while(!notified)
    e1e2:	7833      	ldrb	r3, [r6, #0]
    e1e4:	2b00      	cmp	r3, #0
    e1e6:	f000 8098 	beq.w	e31a <send_message+0x166>
	}
	LOG_INF("GPS client running = %d", gps_client_inst.running);
    e1ea:	2303      	movs	r3, #3
    e1ec:	f04f 0200 	mov.w	r2, #0
    e1f0:	4e5c      	ldr	r6, [pc, #368]	; (e364 <send_message+0x1b0>)
    e1f2:	f363 0207 	bfi	r2, r3, #0, #8
    e1f6:	f364 128f 	bfi	r2, r4, #6, #10
    e1fa:	79b1      	ldrb	r1, [r6, #6]
    e1fc:	485a      	ldr	r0, [pc, #360]	; (e368 <send_message+0x1b4>)
    e1fe:	f00e fcc1 	bl	1cb84 <log_1>
	LOG_INF("GPS client has fix = %d", gps_client_inst.has_fix);
    e202:	2303      	movs	r3, #3
    e204:	f04f 0200 	mov.w	r2, #0

	// Get GPS data
	char gps_buf[100];
	sprintf(gps_buf, "%f;%f;%f;%f;%04u-%02u-%02u %02u:%02u:%02u", 
    e208:	4d58      	ldr	r5, [pc, #352]	; (e36c <send_message+0x1b8>)
	LOG_INF("GPS client has fix = %d", gps_client_inst.has_fix);
    e20a:	f363 0207 	bfi	r2, r3, #0, #8
    e20e:	f364 128f 	bfi	r2, r4, #6, #10
    e212:	79f1      	ldrb	r1, [r6, #7]
    e214:	4856      	ldr	r0, [pc, #344]	; (e370 <send_message+0x1bc>)
    e216:	f00e fcb5 	bl	1cb84 <log_1>
	sprintf(gps_buf, "%f;%f;%f;%f;%04u-%02u-%02u %02u:%02u:%02u", 
    e21a:	7fab      	ldrb	r3, [r5, #30]
    e21c:	930b      	str	r3, [sp, #44]	; 0x2c
    e21e:	7f6b      	ldrb	r3, [r5, #29]
    e220:	930a      	str	r3, [sp, #40]	; 0x28
    e222:	7f2b      	ldrb	r3, [r5, #28]
    e224:	9309      	str	r3, [sp, #36]	; 0x24
    e226:	7eeb      	ldrb	r3, [r5, #27]
    e228:	9308      	str	r3, [sp, #32]
    e22a:	7eab      	ldrb	r3, [r5, #26]
    e22c:	9307      	str	r3, [sp, #28]
    e22e:	8b2b      	ldrh	r3, [r5, #24]
    e230:	9306      	str	r3, [sp, #24]
    e232:	6968      	ldr	r0, [r5, #20]
    e234:	f7fe f958 	bl	c4e8 <__aeabi_f2d>
    e238:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e23c:	6928      	ldr	r0, [r5, #16]
    e23e:	f7fe f953 	bl	c4e8 <__aeabi_f2d>
    e242:	e9cd 0102 	strd	r0, r1, [sp, #8]
    e246:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    e24a:	e9cd 2300 	strd	r2, r3, [sp]
    e24e:	4949      	ldr	r1, [pc, #292]	; (e374 <send_message+0x1c0>)
    e250:	e9d5 2300 	ldrd	r2, r3, [r5]
    e254:	a80c      	add	r0, sp, #48	; 0x30
    e256:	f002 fe7f 	bl	10f58 <sprintf>
		current_location.datetime.day,
		current_location.datetime.hour,
		current_location.datetime.minute,
		current_location.datetime.seconds);

	gps_client_inst.callback(strcat(gps_buf, "\r\n"));
    e25a:	4947      	ldr	r1, [pc, #284]	; (e378 <send_message+0x1c4>)
    e25c:	a80c      	add	r0, sp, #48	; 0x30
    e25e:	68b5      	ldr	r5, [r6, #8]
    e260:	f00f f9e0 	bl	1d624 <strcat>
    e264:	47a8      	blx	r5
	
	disable_PSM();
    e266:	f7ff fcf3 	bl	dc50 <disable_PSM>
	k_sleep(K_SECONDS(3));
    e26a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e26e:	f00e f8e4 	bl	1c43a <k_sleep>

	// Request ID and RSRSP of current and neighboring cells (if available)
	int error = request_nb_iot_network_stats();
    e272:	f7ff fd57 	bl	dd24 <request_nb_iot_network_stats>
	if(error == 0)
    e276:	4601      	mov	r1, r0
    e278:	2800      	cmp	r0, #0
    e27a:	d15f      	bne.n	e33c <send_message+0x188>
	{
		// Put all data in a buffer
		char payloadstring[500] = {0};
    e27c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    e280:	a825      	add	r0, sp, #148	; 0x94
    e282:	f00f fa12 	bl	1d6aa <memset>

		strcat(payloadstring, current_cell_id);
    e286:	493d      	ldr	r1, [pc, #244]	; (e37c <send_message+0x1c8>)
    e288:	a825      	add	r0, sp, #148	; 0x94
    e28a:	f00f f9cb 	bl	1d624 <strcat>
		strcat(payloadstring, ";");
    e28e:	493c      	ldr	r1, [pc, #240]	; (e380 <send_message+0x1cc>)
    e290:	a825      	add	r0, sp, #148	; 0x94
    e292:	f00f f9c7 	bl	1d624 <strcat>

		char* rsrp = (char*) &current_rsrp;
		strcat(payloadstring, rsrp);
    e296:	493b      	ldr	r1, [pc, #236]	; (e384 <send_message+0x1d0>)
    e298:	a825      	add	r0, sp, #148	; 0x94
    e29a:	f00f f9c3 	bl	1d624 <strcat>
		strcat(payloadstring, ";");
    e29e:	4938      	ldr	r1, [pc, #224]	; (e380 <send_message+0x1cc>)
    e2a0:	a825      	add	r0, sp, #148	; 0x94
    e2a2:	f00f f9bf 	bl	1d624 <strcat>

		if(neighbors[0] != '\0')
    e2a6:	4938      	ldr	r1, [pc, #224]	; (e388 <send_message+0x1d4>)
    e2a8:	780b      	ldrb	r3, [r1, #0]
    e2aa:	b113      	cbz	r3, e2b2 <send_message+0xfe>
			strcat(payloadstring, neighbors);
    e2ac:	a825      	add	r0, sp, #148	; 0x94
    e2ae:	f00f f9b9 	bl	1d624 <strcat>
		strcat(payloadstring, ";");
    e2b2:	4933      	ldr	r1, [pc, #204]	; (e380 <send_message+0x1cc>)
    e2b4:	a825      	add	r0, sp, #148	; 0x94
    e2b6:	f00f f9b5 	bl	1d624 <strcat>
		
		strcat(payloadstring, gps_buf);
    e2ba:	a90c      	add	r1, sp, #48	; 0x30
    e2bc:	a825      	add	r0, sp, #148	; 0x94
    e2be:	f00f f9b1 	bl	1d624 <strcat>

		// Send message to UDP server
		do_udp_sendto("nbiot.idlab.uantwerpen.be", 1270, payloadstring); // TODO change UDP port
    e2c2:	aa25      	add	r2, sp, #148	; 0x94
    e2c4:	f240 41f6 	movw	r1, #1270	; 0x4f6
    e2c8:	4830      	ldr	r0, [pc, #192]	; (e38c <send_message+0x1d8>)
    e2ca:	f7ff fb3d 	bl	d948 <do_udp_sendto>
		LOG_INF("MESSAGE SENT: \"%s\" (LENGTH = %d)", payloadstring, strlen(payloadstring));
    e2ce:	f04f 0500 	mov.w	r5, #0
    e2d2:	2303      	movs	r3, #3
    e2d4:	a825      	add	r0, sp, #148	; 0x94
    e2d6:	f363 0507 	bfi	r5, r3, #0, #8
    e2da:	f00f f981 	bl	1d5e0 <strlen>
    e2de:	f364 158f 	bfi	r5, r4, #6, #10
    e2e2:	4602      	mov	r2, r0
    e2e4:	462b      	mov	r3, r5
    e2e6:	a925      	add	r1, sp, #148	; 0x94
    e2e8:	4829      	ldr	r0, [pc, #164]	; (e390 <send_message+0x1dc>)
    e2ea:	f00e fc5f 	bl	1cbac <log_2>

		enable_PSM();
    e2ee:	f7ff fc45 	bl	db7c <enable_PSM>

	} else 
	{
		LOG_ERR("Unexpected ERROR, try rebooting the device.");
	}
	notified = 0;
    e2f2:	2300      	movs	r3, #0
	LOG_INF("---------END-----------");
    e2f4:	f04f 0100 	mov.w	r1, #0
	notified = 0;
    e2f8:	703b      	strb	r3, [r7, #0]
	LOG_INF("---------END-----------");
    e2fa:	2303      	movs	r3, #3
    e2fc:	f363 0107 	bfi	r1, r3, #0, #8
    e300:	f364 118f 	bfi	r1, r4, #6, #10
    e304:	4823      	ldr	r0, [pc, #140]	; (e394 <send_message+0x1e0>)
    e306:	f00e fc30 	bl	1cb6a <log_0>
	k_sleep(K_SECONDS(3));
    e30a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    e30e:	f00e f894 	bl	1c43a <k_sleep>
}
    e312:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
    e316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_sleep(K_SECONDS(1));
    e31a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    e31e:	f00e f88c 	bl	1c43a <k_sleep>
		LOG_INF("waiting for GPS fix");
    e322:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
    e326:	f043 0303 	orr.w	r3, r3, #3
    e32a:	f363 0507 	bfi	r5, r3, #0, #8
    e32e:	f364 158f 	bfi	r5, r4, #6, #10
    e332:	4629      	mov	r1, r5
    e334:	4640      	mov	r0, r8
    e336:	f00e fc18 	bl	1cb6a <log_0>
    e33a:	e752      	b.n	e1e2 <send_message+0x2e>
		LOG_ERR("Unexpected ERROR, try rebooting the device.");
    e33c:	2301      	movs	r3, #1
    e33e:	f04f 0100 	mov.w	r1, #0
    e342:	f363 0107 	bfi	r1, r3, #0, #8
    e346:	f364 118f 	bfi	r1, r4, #6, #10
    e34a:	4813      	ldr	r0, [pc, #76]	; (e398 <send_message+0x1e4>)
    e34c:	f00e fc0d 	bl	1cb6a <log_0>
    e350:	e7cf      	b.n	e2f2 <send_message+0x13e>
    e352:	bf00      	nop
    e354:	0001f3e8 	.word	0x0001f3e8
    e358:	0001f370 	.word	0x0001f370
    e35c:	20026544 	.word	0x20026544
    e360:	0002009f 	.word	0x0002009f
    e364:	2002013c 	.word	0x2002013c
    e368:	000200cc 	.word	0x000200cc
    e36c:	20020000 	.word	0x20020000
    e370:	000200e4 	.word	0x000200e4
    e374:	000200fc 	.word	0x000200fc
    e378:	0001fded 	.word	0x0001fded
    e37c:	20026494 	.word	0x20026494
    e380:	00020126 	.word	0x00020126
    e384:	2002649e 	.word	0x2002649e
    e388:	2002649f 	.word	0x2002649f
    e38c:	00020128 	.word	0x00020128
    e390:	00020142 	.word	0x00020142
    e394:	0002018f 	.word	0x0002018f
    e398:	00020163 	.word	0x00020163
    e39c:	000200b8 	.word	0x000200b8

0000e3a0 <close>:
	return socket_ops->close(sock);
    e3a0:	4b01      	ldr	r3, [pc, #4]	; (e3a8 <close+0x8>)
    e3a2:	681b      	ldr	r3, [r3, #0]
    e3a4:	685b      	ldr	r3, [r3, #4]
    e3a6:	4718      	bx	r3
    e3a8:	20020344 	.word	0x20020344

0000e3ac <do_gps_stop>:

	return -errno;
}

static int do_gps_stop(void)
{
    e3ac:	b530      	push	{r4, r5, lr}
	int ret = 0;
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e3ae:	2400      	movs	r4, #0

	if (gps_client_inst.sock != INVALID_SOCKET) {
    e3b0:	4d1a      	ldr	r5, [pc, #104]	; (e41c <do_gps_stop+0x70>)
{
    e3b2:	b085      	sub	sp, #20
	if (gps_client_inst.sock != INVALID_SOCKET) {
    e3b4:	6828      	ldr	r0, [r5, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e3b6:	9403      	str	r4, [sp, #12]
	if (gps_client_inst.sock != INVALID_SOCKET) {
    e3b8:	1c43      	adds	r3, r0, #1
    e3ba:	d020      	beq.n	e3fe <do_gps_stop+0x52>
		ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e3bc:	2304      	movs	r3, #4
    e3be:	2208      	movs	r2, #8
    e3c0:	9300      	str	r3, [sp, #0]
    e3c2:	f44f 7101 	mov.w	r1, #516	; 0x204
    e3c6:	ab03      	add	r3, sp, #12
    e3c8:	f008 ffbe 	bl	17348 <nrf_setsockopt>
			NRF_SO_GNSS_STOP, &delete_mask, sizeof(delete_mask));
		if (ret != 0) {
    e3cc:	4604      	mov	r4, r0
    e3ce:	b1c8      	cbz	r0, e404 <do_gps_stop+0x58>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    e3d0:	2301      	movs	r3, #1
    e3d2:	f04f 0400 	mov.w	r4, #0
    e3d6:	4a12      	ldr	r2, [pc, #72]	; (e420 <do_gps_stop+0x74>)
    e3d8:	f363 0407 	bfi	r4, r3, #0, #8
    e3dc:	4b11      	ldr	r3, [pc, #68]	; (e424 <do_gps_stop+0x78>)
    e3de:	1a9b      	subs	r3, r3, r2
    e3e0:	08db      	lsrs	r3, r3, #3
    e3e2:	f363 148f 	bfi	r4, r3, #6, #10
    e3e6:	f00e f82d 	bl	1c444 <z_errno>
    e3ea:	6801      	ldr	r1, [r0, #0]
    e3ec:	4622      	mov	r2, r4
    e3ee:	4249      	negs	r1, r1
    e3f0:	480d      	ldr	r0, [pc, #52]	; (e428 <do_gps_stop+0x7c>)
    e3f2:	f00e fbc7 	bl	1cb84 <log_1>
			ret = -errno;
    e3f6:	f00e f825 	bl	1c444 <z_errno>
    e3fa:	6804      	ldr	r4, [r0, #0]
    e3fc:	4264      	negs	r4, r4
		}

	}

	return ret;
}
    e3fe:	4620      	mov	r0, r4
    e400:	b005      	add	sp, #20
    e402:	bd30      	pop	{r4, r5, pc}
			k_thread_suspend(gps_thread_id);
    e404:	4b09      	ldr	r3, [pc, #36]	; (e42c <do_gps_stop+0x80>)
    e406:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
    e408:	f00d fd80 	bl	1bf0c <z_impl_k_thread_suspend>
			nrf_close(gps_client_inst.sock);
    e40c:	6828      	ldr	r0, [r5, #0]
    e40e:	f008 fed7 	bl	171c0 <nrf_close>
			gps_client_inst.running = false;
    e412:	71ac      	strb	r4, [r5, #6]
			gps_client_inst.callback("#XGPSRUN: 0\r\n");
    e414:	68ab      	ldr	r3, [r5, #8]
    e416:	4806      	ldr	r0, [pc, #24]	; (e430 <do_gps_stop+0x84>)
    e418:	4798      	blx	r3
			LOG_DBG("GPS stopped");
    e41a:	e7f0      	b.n	e3fe <do_gps_stop+0x52>
    e41c:	2002013c 	.word	0x2002013c
    e420:	0001f370 	.word	0x0001f370
    e424:	0001f3a8 	.word	0x0001f3a8
    e428:	00020368 	.word	0x00020368
    e42c:	200201f8 	.word	0x200201f8
    e430:	00020385 	.word	0x00020385

0000e434 <do_gps_start>:
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e434:	2300      	movs	r3, #0
{
    e436:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e438:	2701      	movs	r7, #1
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e43a:	4d70      	ldr	r5, [pc, #448]	; (e5fc <do_gps_start+0x1c8>)
{
    e43c:	b08b      	sub	sp, #44	; 0x2c
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e43e:	f8ad 301e 	strh.w	r3, [sp, #30]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    e442:	9309      	str	r3, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e444:	88ab      	ldrh	r3, [r5, #4]
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e446:	f44f 7201 	mov.w	r2, #516	; 0x204
    e44a:	2102      	movs	r1, #2
    e44c:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e44e:	f8ad 7020 	strh.w	r7, [sp, #32]
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e452:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e456:	f008 fea1 	bl	1719c <nrf_socket>
	if (gps_client_inst.sock < 0) {
    e45a:	2800      	cmp	r0, #0
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e45c:	6028      	str	r0, [r5, #0]
	if (gps_client_inst.sock < 0) {
    e45e:	da31      	bge.n	e4c4 <do_gps_start+0x90>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    e460:	f04f 0400 	mov.w	r4, #0
    e464:	4a66      	ldr	r2, [pc, #408]	; (e600 <do_gps_start+0x1cc>)
    e466:	4b67      	ldr	r3, [pc, #412]	; (e604 <do_gps_start+0x1d0>)
    e468:	f367 0407 	bfi	r4, r7, #0, #8
    e46c:	1a9b      	subs	r3, r3, r2
    e46e:	08db      	lsrs	r3, r3, #3
    e470:	f363 148f 	bfi	r4, r3, #6, #10
    e474:	f00d ffe6 	bl	1c444 <z_errno>
    e478:	6801      	ldr	r1, [r0, #0]
    e47a:	4622      	mov	r2, r4
    e47c:	4249      	negs	r1, r1
    e47e:	4862      	ldr	r0, [pc, #392]	; (e608 <do_gps_start+0x1d4>)
    e480:	f00e fb80 	bl	1cb84 <log_1>
	int ret = -EINVAL;
    e484:	f06f 0415 	mvn.w	r4, #21
	LOG_ERR("GPS start failed: %d", ret);
    e488:	2301      	movs	r3, #1
    e48a:	f04f 0200 	mov.w	r2, #0
    e48e:	495c      	ldr	r1, [pc, #368]	; (e600 <do_gps_start+0x1cc>)
    e490:	f363 0207 	bfi	r2, r3, #0, #8
    e494:	4b5b      	ldr	r3, [pc, #364]	; (e604 <do_gps_start+0x1d0>)
    e496:	485d      	ldr	r0, [pc, #372]	; (e60c <do_gps_start+0x1d8>)
    e498:	1a5b      	subs	r3, r3, r1
    e49a:	08db      	lsrs	r3, r3, #3
    e49c:	f363 128f 	bfi	r2, r3, #6, #10
    e4a0:	4621      	mov	r1, r4
    e4a2:	f00e fb6f 	bl	1cb84 <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    e4a6:	4622      	mov	r2, r4
    e4a8:	4959      	ldr	r1, [pc, #356]	; (e610 <do_gps_start+0x1dc>)
    e4aa:	485a      	ldr	r0, [pc, #360]	; (e614 <do_gps_start+0x1e0>)
    e4ac:	f002 fd54 	bl	10f58 <sprintf>
	gps_client_inst.callback(buf);
    e4b0:	68ab      	ldr	r3, [r5, #8]
    e4b2:	4858      	ldr	r0, [pc, #352]	; (e614 <do_gps_start+0x1e0>)
    e4b4:	4798      	blx	r3
	gps_client_inst.running = false;
    e4b6:	2300      	movs	r3, #0
    e4b8:	71ab      	strb	r3, [r5, #6]
	return -errno;
    e4ba:	f00d ffc3 	bl	1c444 <z_errno>
    e4be:	6804      	ldr	r4, [r0, #0]
    e4c0:	4264      	negs	r4, r4
    e4c2:	e088      	b.n	e5d6 <do_gps_start+0x1a2>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    e4c4:	2602      	movs	r6, #2
    e4c6:	f10d 031e 	add.w	r3, sp, #30
    e4ca:	9600      	str	r6, [sp, #0]
    e4cc:	4632      	mov	r2, r6
    e4ce:	f44f 7101 	mov.w	r1, #516	; 0x204
    e4d2:	f008 ff39 	bl	17348 <nrf_setsockopt>
	if (ret != 0) {
    e4d6:	4604      	mov	r4, r0
    e4d8:	b198      	cbz	r0, e502 <do_gps_start+0xce>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    e4da:	2301      	movs	r3, #1
    e4dc:	f04f 0600 	mov.w	r6, #0
    e4e0:	4a47      	ldr	r2, [pc, #284]	; (e600 <do_gps_start+0x1cc>)
    e4e2:	f363 0607 	bfi	r6, r3, #0, #8
    e4e6:	4b47      	ldr	r3, [pc, #284]	; (e604 <do_gps_start+0x1d0>)
    e4e8:	1a9b      	subs	r3, r3, r2
    e4ea:	08db      	lsrs	r3, r3, #3
    e4ec:	f363 168f 	bfi	r6, r3, #6, #10
    e4f0:	f00d ffa8 	bl	1c444 <z_errno>
    e4f4:	4632      	mov	r2, r6
    e4f6:	6801      	ldr	r1, [r0, #0]
    e4f8:	4847      	ldr	r0, [pc, #284]	; (e618 <do_gps_start+0x1e4>)
    e4fa:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e4fc:	f00e fb42 	bl	1cb84 <log_1>
		goto error;
    e500:	e7c2      	b.n	e488 <do_gps_start+0x54>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e502:	9600      	str	r6, [sp, #0]
    e504:	ab08      	add	r3, sp, #32
    e506:	463a      	mov	r2, r7
    e508:	f44f 7101 	mov.w	r1, #516	; 0x204
    e50c:	6828      	ldr	r0, [r5, #0]
    e50e:	f008 ff1b 	bl	17348 <nrf_setsockopt>
	if (ret != 0) {
    e512:	4604      	mov	r4, r0
    e514:	b188      	cbz	r0, e53a <do_gps_start+0x106>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    e516:	2301      	movs	r3, #1
    e518:	f04f 0600 	mov.w	r6, #0
    e51c:	4a38      	ldr	r2, [pc, #224]	; (e600 <do_gps_start+0x1cc>)
    e51e:	f363 0607 	bfi	r6, r3, #0, #8
    e522:	4b38      	ldr	r3, [pc, #224]	; (e604 <do_gps_start+0x1d0>)
    e524:	1a9b      	subs	r3, r3, r2
    e526:	08db      	lsrs	r3, r3, #3
    e528:	f363 168f 	bfi	r6, r3, #6, #10
    e52c:	f00d ff8a 	bl	1c444 <z_errno>
    e530:	6801      	ldr	r1, [r0, #0]
    e532:	4632      	mov	r2, r6
    e534:	4249      	negs	r1, r1
    e536:	4839      	ldr	r0, [pc, #228]	; (e61c <do_gps_start+0x1e8>)
    e538:	e7e0      	b.n	e4fc <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    e53a:	9600      	str	r6, [sp, #0]
    e53c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    e540:	2204      	movs	r2, #4
    e542:	f44f 7101 	mov.w	r1, #516	; 0x204
    e546:	6828      	ldr	r0, [r5, #0]
    e548:	f008 fefe 	bl	17348 <nrf_setsockopt>
	if (ret != 0) {
    e54c:	4604      	mov	r4, r0
    e54e:	b188      	cbz	r0, e574 <do_gps_start+0x140>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    e550:	2301      	movs	r3, #1
    e552:	f04f 0600 	mov.w	r6, #0
    e556:	4a2a      	ldr	r2, [pc, #168]	; (e600 <do_gps_start+0x1cc>)
    e558:	f363 0607 	bfi	r6, r3, #0, #8
    e55c:	4b29      	ldr	r3, [pc, #164]	; (e604 <do_gps_start+0x1d0>)
    e55e:	1a9b      	subs	r3, r3, r2
    e560:	08db      	lsrs	r3, r3, #3
    e562:	f363 168f 	bfi	r6, r3, #6, #10
    e566:	f00d ff6d 	bl	1c444 <z_errno>
    e56a:	6801      	ldr	r1, [r0, #0]
    e56c:	4632      	mov	r2, r6
    e56e:	4249      	negs	r1, r1
    e570:	482b      	ldr	r0, [pc, #172]	; (e620 <do_gps_start+0x1ec>)
    e572:	e7c3      	b.n	e4fc <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    e574:	2304      	movs	r3, #4
    e576:	2207      	movs	r2, #7
    e578:	9300      	str	r3, [sp, #0]
    e57a:	f44f 7101 	mov.w	r1, #516	; 0x204
    e57e:	ab09      	add	r3, sp, #36	; 0x24
    e580:	6828      	ldr	r0, [r5, #0]
    e582:	f008 fee1 	bl	17348 <nrf_setsockopt>
	if (ret != 0) {
    e586:	4604      	mov	r4, r0
    e588:	b188      	cbz	r0, e5ae <do_gps_start+0x17a>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e58a:	2301      	movs	r3, #1
    e58c:	f04f 0600 	mov.w	r6, #0
    e590:	4a1b      	ldr	r2, [pc, #108]	; (e600 <do_gps_start+0x1cc>)
    e592:	f363 0607 	bfi	r6, r3, #0, #8
    e596:	4b1b      	ldr	r3, [pc, #108]	; (e604 <do_gps_start+0x1d0>)
    e598:	1a9b      	subs	r3, r3, r2
    e59a:	08db      	lsrs	r3, r3, #3
    e59c:	f363 168f 	bfi	r6, r3, #6, #10
    e5a0:	f00d ff50 	bl	1c444 <z_errno>
    e5a4:	6801      	ldr	r1, [r0, #0]
    e5a6:	4632      	mov	r2, r6
    e5a8:	4249      	negs	r1, r1
    e5aa:	481e      	ldr	r0, [pc, #120]	; (e624 <do_gps_start+0x1f0>)
    e5ac:	e7a6      	b.n	e4fc <do_gps_start+0xc8>
	if (gps_thread_id != NULL) {
    e5ae:	4e1e      	ldr	r6, [pc, #120]	; (e628 <do_gps_start+0x1f4>)
    e5b0:	6830      	ldr	r0, [r6, #0]
    e5b2:	b198      	cbz	r0, e5dc <do_gps_start+0x1a8>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    e5b4:	f00d fcca 	bl	1bf4c <z_impl_k_thread_resume>
	gps_client_inst.running = true;
    e5b8:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e5ba:	88aa      	ldrh	r2, [r5, #4]
    e5bc:	491b      	ldr	r1, [pc, #108]	; (e62c <do_gps_start+0x1f8>)
    e5be:	4815      	ldr	r0, [pc, #84]	; (e614 <do_gps_start+0x1e0>)
	gps_client_inst.running = true;
    e5c0:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e5c2:	f002 fcc9 	bl	10f58 <sprintf>
	gps_client_inst.callback(buf);
    e5c6:	68ab      	ldr	r3, [r5, #8]
    e5c8:	4812      	ldr	r0, [pc, #72]	; (e614 <do_gps_start+0x1e0>)
    e5ca:	4798      	blx	r3
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    e5cc:	f010 fc13 	bl	1edf6 <z_impl_k_uptime_get>
	ttft_start = k_uptime_get();
    e5d0:	4b17      	ldr	r3, [pc, #92]	; (e630 <do_gps_start+0x1fc>)
    e5d2:	e9c3 0100 	strd	r0, r1, [r3]
}
    e5d6:	4620      	mov	r0, r4
    e5d8:	b00b      	add	sp, #44	; 0x2c
    e5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e5dc:	230e      	movs	r3, #14
    e5de:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e5e2:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e5e6:	e9cd 4400 	strd	r4, r4, [sp]
    e5ea:	4b12      	ldr	r3, [pc, #72]	; (e634 <do_gps_start+0x200>)
    e5ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e5f0:	4911      	ldr	r1, [pc, #68]	; (e638 <do_gps_start+0x204>)
    e5f2:	4812      	ldr	r0, [pc, #72]	; (e63c <do_gps_start+0x208>)
    e5f4:	f00d fc36 	bl	1be64 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    e5f8:	6030      	str	r0, [r6, #0]
    e5fa:	e7dd      	b.n	e5b8 <do_gps_start+0x184>
    e5fc:	2002013c 	.word	0x2002013c
    e600:	0001f370 	.word	0x0001f370
    e604:	0001f3a8 	.word	0x0001f3a8
    e608:	00020280 	.word	0x00020280
    e60c:	00020344 	.word	0x00020344
    e610:	00020359 	.word	0x00020359
    e614:	20026503 	.word	0x20026503
    e618:	000202a0 	.word	0x000202a0
    e61c:	000202c8 	.word	0x000202c8
    e620:	000202f3 	.word	0x000202f3
    e624:	00020315 	.word	0x00020315
    e628:	200201f8 	.word	0x200201f8
    e62c:	00020333 	.word	0x00020333
    e630:	20020100 	.word	0x20020100
    e634:	0000e735 	.word	0x0000e735
    e638:	200266b8 	.word	0x200266b8
    e63c:	20020148 	.word	0x20020148

0000e640 <handle_at_gpsrun>:
static int handle_at_gpsrun(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    e640:	2801      	cmp	r0, #1
{
    e642:	b513      	push	{r0, r1, r4, lr}
    e644:	4604      	mov	r4, r0
	switch (cmd_type) {
    e646:	d004      	beq.n	e652 <handle_at_gpsrun+0x12>
    e648:	2802      	cmp	r0, #2
    e64a:	d04c      	beq.n	e6e6 <handle_at_gpsrun+0xa6>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    e64c:	f06f 0415 	mvn.w	r4, #21
    e650:	e02d      	b.n	e6ae <handle_at_gpsrun+0x6e>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    e652:	482e      	ldr	r0, [pc, #184]	; (e70c <handle_at_gpsrun+0xcc>)
    e654:	f010 f913 	bl	1e87e <at_params_valid_count_get>
    e658:	2801      	cmp	r0, #1
    e65a:	d9f7      	bls.n	e64c <handle_at_gpsrun+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    e65c:	4621      	mov	r1, r4
    e65e:	f10d 0206 	add.w	r2, sp, #6
    e662:	482a      	ldr	r0, [pc, #168]	; (e70c <handle_at_gpsrun+0xcc>)
    e664:	f010 f8d6 	bl	1e814 <at_params_short_get>
		if (err < 0) {
    e668:	1e04      	subs	r4, r0, #0
    e66a:	db20      	blt.n	e6ae <handle_at_gpsrun+0x6e>
			return err;
		}
		if (op == 1) {
    e66c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e670:	2b01      	cmp	r3, #1
    e672:	d123      	bne.n	e6bc <handle_at_gpsrun+0x7c>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    e674:	4825      	ldr	r0, [pc, #148]	; (e70c <handle_at_gpsrun+0xcc>)
    e676:	f010 f902 	bl	1e87e <at_params_valid_count_get>
    e67a:	2802      	cmp	r0, #2
    e67c:	d906      	bls.n	e68c <handle_at_gpsrun+0x4c>
				err = at_params_short_get(&m_param_list, 2,
    e67e:	4a24      	ldr	r2, [pc, #144]	; (e710 <handle_at_gpsrun+0xd0>)
    e680:	2102      	movs	r1, #2
    e682:	4822      	ldr	r0, [pc, #136]	; (e70c <handle_at_gpsrun+0xcc>)
    e684:	f010 f8c6 	bl	1e814 <at_params_short_get>
							&gps_client_inst.mask);
				if (err < 0) {
    e688:	1e04      	subs	r4, r0, #0
    e68a:	db10      	blt.n	e6ae <handle_at_gpsrun+0x6e>
					return err;
				}
			}
			if (gps_client_inst.running) {
    e68c:	4b21      	ldr	r3, [pc, #132]	; (e714 <handle_at_gpsrun+0xd4>)
    e68e:	799b      	ldrb	r3, [r3, #6]
    e690:	b183      	cbz	r3, e6b4 <handle_at_gpsrun+0x74>
				LOG_WRN("GPS is running");
    e692:	2302      	movs	r3, #2
    e694:	f04f 0100 	mov.w	r1, #0
    e698:	4a1f      	ldr	r2, [pc, #124]	; (e718 <handle_at_gpsrun+0xd8>)
    e69a:	f363 0107 	bfi	r1, r3, #0, #8
    e69e:	4b1f      	ldr	r3, [pc, #124]	; (e71c <handle_at_gpsrun+0xdc>)
    e6a0:	481f      	ldr	r0, [pc, #124]	; (e720 <handle_at_gpsrun+0xe0>)
    e6a2:	1a9b      	subs	r3, r3, r2
    e6a4:	08db      	lsrs	r3, r3, #3
    e6a6:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_gps_start();
			}
		} else if (op == 0) {
			if (!gps_client_inst.running) {
				LOG_WRN("GPS is not running");
    e6aa:	f00e fa5e 	bl	1cb6a <log_0>
	default:
		break;
	}

	return err;
}
    e6ae:	4620      	mov	r0, r4
    e6b0:	b002      	add	sp, #8
    e6b2:	bd10      	pop	{r4, pc}
				err = do_gps_start();
    e6b4:	f7ff febe 	bl	e434 <do_gps_start>
				err = do_gps_stop();
    e6b8:	4604      	mov	r4, r0
    e6ba:	e7f8      	b.n	e6ae <handle_at_gpsrun+0x6e>
		} else if (op == 0) {
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d1f6      	bne.n	e6ae <handle_at_gpsrun+0x6e>
			if (!gps_client_inst.running) {
    e6c0:	4b14      	ldr	r3, [pc, #80]	; (e714 <handle_at_gpsrun+0xd4>)
    e6c2:	799b      	ldrb	r3, [r3, #6]
    e6c4:	b963      	cbnz	r3, e6e0 <handle_at_gpsrun+0xa0>
				LOG_WRN("GPS is not running");
    e6c6:	2302      	movs	r3, #2
    e6c8:	f04f 0100 	mov.w	r1, #0
    e6cc:	4a12      	ldr	r2, [pc, #72]	; (e718 <handle_at_gpsrun+0xd8>)
    e6ce:	f363 0107 	bfi	r1, r3, #0, #8
    e6d2:	4b12      	ldr	r3, [pc, #72]	; (e71c <handle_at_gpsrun+0xdc>)
    e6d4:	4813      	ldr	r0, [pc, #76]	; (e724 <handle_at_gpsrun+0xe4>)
    e6d6:	1a9b      	subs	r3, r3, r2
    e6d8:	08db      	lsrs	r3, r3, #3
    e6da:	f363 118f 	bfi	r1, r3, #6, #10
    e6de:	e7e4      	b.n	e6aa <handle_at_gpsrun+0x6a>
				err = do_gps_stop();
    e6e0:	f7ff fe64 	bl	e3ac <do_gps_stop>
    e6e4:	e7e8      	b.n	e6b8 <handle_at_gpsrun+0x78>
		if (gps_client_inst.running) {
    e6e6:	4c0b      	ldr	r4, [pc, #44]	; (e714 <handle_at_gpsrun+0xd4>)
    e6e8:	79a3      	ldrb	r3, [r4, #6]
    e6ea:	b14b      	cbz	r3, e700 <handle_at_gpsrun+0xc0>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e6ec:	88a2      	ldrh	r2, [r4, #4]
    e6ee:	490e      	ldr	r1, [pc, #56]	; (e728 <handle_at_gpsrun+0xe8>)
    e6f0:	480e      	ldr	r0, [pc, #56]	; (e72c <handle_at_gpsrun+0xec>)
    e6f2:	f002 fc31 	bl	10f58 <sprintf>
		gps_client_inst.callback(buf);
    e6f6:	68a3      	ldr	r3, [r4, #8]
    e6f8:	480c      	ldr	r0, [pc, #48]	; (e72c <handle_at_gpsrun+0xec>)
    e6fa:	4798      	blx	r3
		err = 0;
    e6fc:	2400      	movs	r4, #0
		break;
    e6fe:	e7d6      	b.n	e6ae <handle_at_gpsrun+0x6e>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    e700:	490b      	ldr	r1, [pc, #44]	; (e730 <handle_at_gpsrun+0xf0>)
    e702:	480a      	ldr	r0, [pc, #40]	; (e72c <handle_at_gpsrun+0xec>)
    e704:	f002 fc28 	bl	10f58 <sprintf>
    e708:	e7f5      	b.n	e6f6 <handle_at_gpsrun+0xb6>
    e70a:	bf00      	nop
    e70c:	20020110 	.word	0x20020110
    e710:	20020140 	.word	0x20020140
    e714:	2002013c 	.word	0x2002013c
    e718:	0001f370 	.word	0x0001f370
    e71c:	0001f3a8 	.word	0x0001f3a8
    e720:	000204b4 	.word	0x000204b4
    e724:	000204c3 	.word	0x000204c3
    e728:	00020333 	.word	0x00020333
    e72c:	20026503 	.word	0x20026503
    e730:	00020385 	.word	0x00020385

0000e734 <gps_thread_fn>:
{
    e734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e738:	4f62      	ldr	r7, [pc, #392]	; (e8c4 <gps_thread_fn+0x190>)
    e73a:	4e63      	ldr	r6, [pc, #396]	; (e8c8 <gps_thread_fn+0x194>)
    e73c:	463d      	mov	r5, r7
	LOG_INF("NOTIFY!");
    e73e:	4b63      	ldr	r3, [pc, #396]	; (e8cc <gps_thread_fn+0x198>)
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e740:	4c63      	ldr	r4, [pc, #396]	; (e8d0 <gps_thread_fn+0x19c>)
	LOG_INF("NOTIFY!");
    e742:	1af6      	subs	r6, r6, r3
    e744:	f3c6 06c9 	ubfx	r6, r6, #3, #10
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e748:	2300      	movs	r3, #0
    e74a:	22d8      	movs	r2, #216	; 0xd8
    e74c:	4960      	ldr	r1, [pc, #384]	; (e8d0 <gps_thread_fn+0x19c>)
    e74e:	6838      	ldr	r0, [r7, #0]
    e750:	f008 fd96 	bl	17280 <nrf_recv>
    e754:	2800      	cmp	r0, #0
    e756:	dc21      	bgt.n	e79c <gps_thread_fn+0x68>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    e758:	2301      	movs	r3, #1
    e75a:	f04f 0400 	mov.w	r4, #0
    e75e:	f363 0407 	bfi	r4, r3, #0, #8
    e762:	f00d fe6f 	bl	1c444 <z_errno>
    e766:	6801      	ldr	r1, [r0, #0]
    e768:	f366 148f 	bfi	r4, r6, #6, #10
    e76c:	4622      	mov	r2, r4
    e76e:	4249      	negs	r1, r1
    e770:	4858      	ldr	r0, [pc, #352]	; (e8d4 <gps_thread_fn+0x1a0>)
    e772:	f00e fa07 	bl	1cb84 <log_1>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    e776:	f00d fe65 	bl	1c444 <z_errno>
    e77a:	6802      	ldr	r2, [r0, #0]
    e77c:	4956      	ldr	r1, [pc, #344]	; (e8d8 <gps_thread_fn+0x1a4>)
    e77e:	4252      	negs	r2, r2
    e780:	4856      	ldr	r0, [pc, #344]	; (e8dc <gps_thread_fn+0x1a8>)
    e782:	f002 fbe9 	bl	10f58 <sprintf>
			gps_client_inst.callback(buf);
    e786:	68bb      	ldr	r3, [r7, #8]
    e788:	4854      	ldr	r0, [pc, #336]	; (e8dc <gps_thread_fn+0x1a8>)
    e78a:	4798      	blx	r3
			nrf_close(gps_client_inst.sock);
    e78c:	6838      	ldr	r0, [r7, #0]
    e78e:	f008 fd17 	bl	171c0 <nrf_close>
			gps_client_inst.running = false;
    e792:	2300      	movs	r3, #0
    e794:	71bb      	strb	r3, [r7, #6]
}
    e796:	b004      	add	sp, #16
    e798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || gps_client_inst.has_fix) {
    e79c:	7823      	ldrb	r3, [r4, #0]
    e79e:	2b01      	cmp	r3, #1
    e7a0:	d1d2      	bne.n	e748 <gps_thread_fn+0x14>
    e7a2:	79f9      	ldrb	r1, [r7, #7]
    e7a4:	2900      	cmp	r1, #0
    e7a6:	d055      	beq.n	e854 <gps_thread_fn+0x120>
			if (IS_FIX(gps_data.pvt.flags)) {
    e7a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e7ac:	07db      	lsls	r3, r3, #31
    e7ae:	d5cb      	bpl.n	e748 <gps_thread_fn+0x14>
	notified = 1;
    e7b0:	f04f 0901 	mov.w	r9, #1
	LOG_INF("NOTIFY!");
    e7b4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    e7b8:	f043 0303 	orr.w	r3, r3, #3
    e7bc:	f363 0807 	bfi	r8, r3, #0, #8
    e7c0:	f366 188f 	bfi	r8, r6, #6, #10
    e7c4:	4641      	mov	r1, r8
    e7c6:	4846      	ldr	r0, [pc, #280]	; (e8e0 <gps_thread_fn+0x1ac>)
    e7c8:	f00e f9cf 	bl	1cb6a <log_0>
	current_location.lat = gps_data.pvt.latitude;
    e7cc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
	notified = 1;
    e7d0:	4b44      	ldr	r3, [pc, #272]	; (e8e4 <gps_thread_fn+0x1b0>)
	current_location.alt = gps_data.pvt.altitude;
    e7d2:	69a2      	ldr	r2, [r4, #24]
	notified = 1;
    e7d4:	f883 9000 	strb.w	r9, [r3]
	current_location.lat = gps_data.pvt.latitude;
    e7d8:	4b43      	ldr	r3, [pc, #268]	; (e8e8 <gps_thread_fn+0x1b4>)
	current_location.alt = gps_data.pvt.altitude;
    e7da:	611a      	str	r2, [r3, #16]
	current_location.hdop = gps_data.pvt.hdop;
    e7dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	current_location.lat = gps_data.pvt.latitude;
    e7de:	e9c3 0100 	strd	r0, r1, [r3]
	current_location.lon = gps_data.pvt.longitude;
    e7e2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
	current_location.hdop = gps_data.pvt.hdop;
    e7e6:	615a      	str	r2, [r3, #20]
	current_location.datetime = gps_data.pvt.datetime;
    e7e8:	4a40      	ldr	r2, [pc, #256]	; (e8ec <gps_thread_fn+0x1b8>)
	current_location.lon = gps_data.pvt.longitude;
    e7ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
	current_location.datetime = gps_data.pvt.datetime;
    e7ee:	ca07      	ldmia	r2, {r0, r1, r2}
    e7f0:	3318      	adds	r3, #24
    e7f2:	c303      	stmia	r3!, {r0, r1}
	gps_client_inst.callback(buf);
    e7f4:	4839      	ldr	r0, [pc, #228]	; (e8dc <gps_thread_fn+0x1a8>)
	current_location.datetime = gps_data.pvt.datetime;
    e7f6:	801a      	strh	r2, [r3, #0]
	gps_client_inst.callback(buf);
    e7f8:	68ab      	ldr	r3, [r5, #8]
    e7fa:	4798      	blx	r3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    e7fc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e800:	493b      	ldr	r1, [pc, #236]	; (e8f0 <gps_thread_fn+0x1bc>)
    e802:	9303      	str	r3, [sp, #12]
    e804:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    e808:	4834      	ldr	r0, [pc, #208]	; (e8dc <gps_thread_fn+0x1a8>)
    e80a:	9302      	str	r3, [sp, #8]
    e80c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e810:	9301      	str	r3, [sp, #4]
    e812:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    e816:	9300      	str	r3, [sp, #0]
    e818:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e81c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e81e:	f002 fb9b 	bl	10f58 <sprintf>
	gps_client_inst.callback(buf);
    e822:	68ab      	ldr	r3, [r5, #8]
    e824:	482d      	ldr	r0, [pc, #180]	; (e8dc <gps_thread_fn+0x1a8>)
    e826:	4798      	blx	r3
				if (!gps_client_inst.has_fix) {
    e828:	79eb      	ldrb	r3, [r5, #7]
    e82a:	2b00      	cmp	r3, #0
    e82c:	d18c      	bne.n	e748 <gps_thread_fn+0x14>
	return z_impl_k_uptime_get();
    e82e:	f010 fae2 	bl	1edf6 <z_impl_k_uptime_get>
						(int)(now - ttft_start)/1000);
    e832:	4b30      	ldr	r3, [pc, #192]	; (e8f4 <gps_thread_fn+0x1c0>)
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e834:	4930      	ldr	r1, [pc, #192]	; (e8f8 <gps_thread_fn+0x1c4>)
						(int)(now - ttft_start)/1000);
    e836:	681a      	ldr	r2, [r3, #0]
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
						(int)(now - ttft_start)/1000);
    e83c:	1a82      	subs	r2, r0, r2
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e83e:	fb92 f2f3 	sdiv	r2, r2, r3
    e842:	4826      	ldr	r0, [pc, #152]	; (e8dc <gps_thread_fn+0x1a8>)
    e844:	f002 fb88 	bl	10f58 <sprintf>
					gps_client_inst.callback(buf);
    e848:	68ab      	ldr	r3, [r5, #8]
    e84a:	4824      	ldr	r0, [pc, #144]	; (e8dc <gps_thread_fn+0x1a8>)
    e84c:	4798      	blx	r3
					gps_client_inst.has_fix = true;
    e84e:	f885 9007 	strb.w	r9, [r5, #7]
    e852:	e779      	b.n	e748 <gps_thread_fn+0x14>
	u8_t in_fix = 0;
    e854:	460b      	mov	r3, r1
	u8_t tracked = 0;
    e856:	4689      	mov	r9, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e858:	4608      	mov	r0, r1
    e85a:	4a1d      	ldr	r2, [pc, #116]	; (e8d0 <gps_thread_fn+0x19c>)
		if ((gps_data.pvt.sv[i].sv > 0) &&
    e85c:	f8b2 c046 	ldrh.w	ip, [r2, #70]	; 0x46
    e860:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    e864:	f1bc 0f1f 	cmp.w	ip, #31
    e868:	d810      	bhi.n	e88c <gps_thread_fn+0x158>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e86a:	f892 c050 	ldrb.w	ip, [r2, #80]	; 0x50
			tracked++;
    e86e:	f109 0901 	add.w	r9, r9, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e872:	f01c 0f01 	tst.w	ip, #1
				in_fix++;
    e876:	bf1c      	itt	ne
    e878:	3301      	addne	r3, #1
    e87a:	b2db      	uxtbne	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    e87c:	f01c 0f08 	tst.w	ip, #8
				unhealthy++;
    e880:	bf18      	it	ne
    e882:	3101      	addne	r1, #1
			tracked++;
    e884:	fa5f f989 	uxtb.w	r9, r9
				unhealthy++;
    e888:	bf18      	it	ne
    e88a:	b2c9      	uxtbne	r1, r1
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e88c:	3001      	adds	r0, #1
    e88e:	280c      	cmp	r0, #12
    e890:	f102 020c 	add.w	r2, r2, #12
    e894:	d1e2      	bne.n	e85c <gps_thread_fn+0x128>
	if (last_tracked != tracked) {
    e896:	f8df a068 	ldr.w	sl, [pc, #104]	; e900 <gps_thread_fn+0x1cc>
    e89a:	f89a 2000 	ldrb.w	r2, [sl]
    e89e:	454a      	cmp	r2, r9
    e8a0:	d082      	beq.n	e7a8 <gps_thread_fn+0x74>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    e8a2:	9100      	str	r1, [sp, #0]
    e8a4:	464a      	mov	r2, r9
    e8a6:	4915      	ldr	r1, [pc, #84]	; (e8fc <gps_thread_fn+0x1c8>)
    e8a8:	480c      	ldr	r0, [pc, #48]	; (e8dc <gps_thread_fn+0x1a8>)
    e8aa:	f002 fb55 	bl	10f58 <sprintf>
		gps_client_inst.callback(buf);
    e8ae:	68ab      	ldr	r3, [r5, #8]
    e8b0:	480a      	ldr	r0, [pc, #40]	; (e8dc <gps_thread_fn+0x1a8>)
    e8b2:	4798      	blx	r3
		switch (gps_data.data_id) {
    e8b4:	7823      	ldrb	r3, [r4, #0]
		last_tracked = tracked;
    e8b6:	f88a 9000 	strb.w	r9, [sl]
		switch (gps_data.data_id) {
    e8ba:	2b01      	cmp	r3, #1
    e8bc:	f43f af74 	beq.w	e7a8 <gps_thread_fn+0x74>
    e8c0:	e742      	b.n	e748 <gps_thread_fn+0x14>
    e8c2:	bf00      	nop
    e8c4:	2002013c 	.word	0x2002013c
    e8c8:	0001f3a8 	.word	0x0001f3a8
    e8cc:	0001f370 	.word	0x0001f370
    e8d0:	20020028 	.word	0x20020028
    e8d4:	00020433 	.word	0x00020433
    e8d8:	00020359 	.word	0x00020359
    e8dc:	20026503 	.word	0x20026503
    e8e0:	00020472 	.word	0x00020472
    e8e4:	20026544 	.word	0x20026544
    e8e8:	20020000 	.word	0x20020000
    e8ec:	20020050 	.word	0x20020050
    e8f0:	0002047a 	.word	0x0002047a
    e8f4:	20020100 	.word	0x20020100
    e8f8:	000204a2 	.word	0x000204a2
    e8fc:	00020446 	.word	0x00020446
    e900:	20026543 	.word	0x20026543

0000e904 <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const char *at_cmd)
{
    e904:	b538      	push	{r3, r4, r5, lr}
    e906:	4604      	mov	r4, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_gps_at_list[i].string);
    e908:	481a      	ldr	r0, [pc, #104]	; (e974 <slm_at_gps_parse+0x70>)
    e90a:	f00e fe69 	bl	1d5e0 <strlen>
    e90e:	2300      	movs	r3, #0
    e910:	4918      	ldr	r1, [pc, #96]	; (e974 <slm_at_gps_parse+0x70>)
    e912:	b2c0      	uxtb	r0, r0
    e914:	4283      	cmp	r3, r0
    e916:	db17      	blt.n	e948 <slm_at_gps_parse+0x44>

		if (slm_at_cmd_cmp(at_cmd, m_gps_at_list[i].string, cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    e918:	2100      	movs	r1, #0
    e91a:	4a17      	ldr	r2, [pc, #92]	; (e978 <slm_at_gps_parse+0x74>)
    e91c:	4620      	mov	r0, r4
    e91e:	f00f fe7f 	bl	1e620 <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    e922:	1e01      	subs	r1, r0, #0
    e924:	da1c      	bge.n	e960 <slm_at_gps_parse+0x5c>
				LOG_ERR("Failed to parse AT command %d", ret);
    e926:	2301      	movs	r3, #1
    e928:	f04f 0200 	mov.w	r2, #0
    e92c:	4813      	ldr	r0, [pc, #76]	; (e97c <slm_at_gps_parse+0x78>)
    e92e:	f363 0207 	bfi	r2, r3, #0, #8
    e932:	4b13      	ldr	r3, [pc, #76]	; (e980 <slm_at_gps_parse+0x7c>)
    e934:	1a1b      	subs	r3, r3, r0
    e936:	08db      	lsrs	r3, r3, #3
    e938:	4812      	ldr	r0, [pc, #72]	; (e984 <slm_at_gps_parse+0x80>)
    e93a:	f363 128f 	bfi	r2, r3, #6, #10
    e93e:	f00e f921 	bl	1cb84 <log_1>
				return -EINVAL;
    e942:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    e946:	bd38      	pop	{r3, r4, r5, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    e948:	5ce2      	ldrb	r2, [r4, r3]
    e94a:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
    e94e:	2d19      	cmp	r5, #25
    e950:	f811 5b01 	ldrb.w	r5, [r1], #1
    e954:	bf98      	it	ls
    e956:	3a20      	subls	r2, #32
    e958:	4295      	cmp	r5, r2
    e95a:	d108      	bne.n	e96e <slm_at_gps_parse+0x6a>
	for (int i = 0; i < length; i++) {
    e95c:	3301      	adds	r3, #1
    e95e:	e7d9      	b.n	e914 <slm_at_gps_parse+0x10>
			type = at_parser_cmd_type_get(at_cmd);
    e960:	4620      	mov	r0, r4
    e962:	f00f fe60 	bl	1e626 <at_parser_cmd_type_get>
}
    e966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_gps_at_list[i].handler(type);
    e96a:	f7ff be69 	b.w	e640 <handle_at_gpsrun>
	int ret = -ENOTSUP;
    e96e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e972:	e7e8      	b.n	e946 <slm_at_gps_parse+0x42>
    e974:	000204fa 	.word	0x000204fa
    e978:	20020110 	.word	0x20020110
    e97c:	0001f370 	.word	0x0001f370
    e980:	0001f3a8 	.word	0x0001f3a8
    e984:	0001f9c9 	.word	0x0001f9c9

0000e988 <slm_at_gps_init>:
///////////////////////////////////////////////////////////////////////////

/**@brief API to initialize GPS AT commands handler
 */
int slm_at_gps_init(at_cmd_handler_t callback)
{
    e988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e98c:	4b40      	ldr	r3, [pc, #256]	; (ea90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>)
    e98e:	4c41      	ldr	r4, [pc, #260]	; (ea94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>)
    e990:	1ae4      	subs	r4, r4, r3
    e992:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e996:	b970      	cbnz	r0, e9b6 <slm_at_gps_init+0x2e>
		LOG_ERR("No callback");
    e998:	2301      	movs	r3, #1
    e99a:	f04f 0100 	mov.w	r1, #0
    e99e:	f363 0107 	bfi	r1, r3, #0, #8
    e9a2:	483d      	ldr	r0, [pc, #244]	; (ea98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x38>)
    e9a4:	f364 118f 	bfi	r1, r4, #6, #10
    e9a8:	f00e f8df 	bl	1cb6a <log_0>
		return -EINVAL;
    e9ac:	f06f 0015 	mvn.w	r0, #21
	enable_gps();
	do_gps_start();
	//////////////////////////////////////////////////////////////////////

	return 0;
}
    e9b0:	b003      	add	sp, #12
    e9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e9b6:	2201      	movs	r2, #1
    e9b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	gps_thread_id = NULL;
    e9bc:	2500      	movs	r5, #0
	gps_client_inst.sock = INVALID_SOCKET;
    e9be:	4b37      	ldr	r3, [pc, #220]	; (ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>)
	return socket_ops->socket(family, type, proto);
    e9c0:	4f37      	ldr	r7, [pc, #220]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e9c2:	e9c3 1200 	strd	r1, r2, [r3]
	gps_client_inst.callback = callback;
    e9c6:	6098      	str	r0, [r3, #8]
	gps_thread_id = NULL;
    e9c8:	4b36      	ldr	r3, [pc, #216]	; (eaa4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44>)
	LOG_INF("Initializing GPS Module");
    e9ca:	f04f 0100 	mov.w	r1, #0
	gps_thread_id = NULL;
    e9ce:	601d      	str	r5, [r3, #0]
	LOG_INF("Initializing GPS Module");
    e9d0:	2303      	movs	r3, #3
    e9d2:	f363 0107 	bfi	r1, r3, #0, #8
    e9d6:	f364 118f 	bfi	r1, r4, #6, #10
    e9da:	4833      	ldr	r0, [pc, #204]	; (eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    e9dc:	f00e f8c5 	bl	1cb6a <log_0>
    e9e0:	683b      	ldr	r3, [r7, #0]
    e9e2:	f240 2201 	movw	r2, #513	; 0x201
    e9e6:	681b      	ldr	r3, [r3, #0]
    e9e8:	4629      	mov	r1, r5
    e9ea:	2066      	movs	r0, #102	; 0x66
    e9ec:	4798      	blx	r3
	if (at_sock < 0) {
    e9ee:	1e06      	subs	r6, r0, #0
    e9f0:	46b8      	mov	r8, r7
    e9f2:	db20      	blt.n	ea36 <slm_at_gps_init+0xae>
    e9f4:	4f2d      	ldr	r7, [pc, #180]	; (eaac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>)
		if (memcmp(buf, "OK", 2) != 0) {
    e9f6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
		LOG_INF("%s",gps_at_commands[i]);
    e9fa:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    e9fe:	f043 0303 	orr.w	r3, r3, #3
    ea02:	f363 0907 	bfi	r9, r3, #0, #8
    ea06:	f364 198f 	bfi	r9, r4, #6, #10
    ea0a:	464a      	mov	r2, r9
    ea0c:	4639      	mov	r1, r7
    ea0e:	4828      	ldr	r0, [pc, #160]	; (eab0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    ea10:	f00e f8b8 	bl	1cb84 <log_1>
		bytes_sent = send(at_sock, gps_at_commands[i],
    ea14:	4638      	mov	r0, r7
    ea16:	f00e fde3 	bl	1d5e0 <strlen>
	return socket_ops->send(sock, buf, len, flags);
    ea1a:	f8d8 3000 	ldr.w	r3, [r8]
    ea1e:	4602      	mov	r2, r0
    ea20:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    ea24:	4639      	mov	r1, r7
    ea26:	2300      	movs	r3, #0
    ea28:	4630      	mov	r0, r6
    ea2a:	47d8      	blx	fp
		if (bytes_sent < 0) {
    ea2c:	2800      	cmp	r0, #0
    ea2e:	da06      	bge.n	ea3e <slm_at_gps_init+0xb6>
			close(at_sock);
    ea30:	4630      	mov	r0, r6
    ea32:	f7ff fcb5 	bl	e3a0 <close>
	do_gps_start();
    ea36:	f7ff fcfd 	bl	e434 <do_gps_start>
	return 0;
    ea3a:	2000      	movs	r0, #0
    ea3c:	e7b8      	b.n	e9b0 <slm_at_gps_init+0x28>
	return socket_ops->recv(sock, buf, max_len, flags);
    ea3e:	f8d8 3000 	ldr.w	r3, [r8]
    ea42:	2202      	movs	r2, #2
    ea44:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    ea48:	a901      	add	r1, sp, #4
    ea4a:	2300      	movs	r3, #0
    ea4c:	4630      	mov	r0, r6
    ea4e:	47d8      	blx	fp
		} while (bytes_received == 0);
    ea50:	2800      	cmp	r0, #0
    ea52:	d0f4      	beq.n	ea3e <slm_at_gps_init+0xb6>
		if (memcmp(buf, "OK", 2) != 0) {
    ea54:	2202      	movs	r2, #2
    ea56:	4651      	mov	r1, sl
    ea58:	a801      	add	r0, sp, #4
    ea5a:	f00e fdec 	bl	1d636 <memcmp>
    ea5e:	2800      	cmp	r0, #0
    ea60:	d1e6      	bne.n	ea30 <slm_at_gps_init+0xa8>
	return z_impl_k_sleep(ms);
    ea62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    ea66:	3501      	adds	r5, #1
    ea68:	f00d f912 	bl	1bc90 <z_impl_k_sleep>
    ea6c:	2d04      	cmp	r5, #4
    ea6e:	f107 0728 	add.w	r7, r7, #40	; 0x28
    ea72:	d1c2      	bne.n	e9fa <slm_at_gps_init+0x72>
	close(at_sock);
    ea74:	4630      	mov	r0, r6
    ea76:	f7ff fc93 	bl	e3a0 <close>
	LOG_INF("GPS Enabled");
    ea7a:	2303      	movs	r3, #3
    ea7c:	f04f 0100 	mov.w	r1, #0
    ea80:	f363 0107 	bfi	r1, r3, #0, #8
    ea84:	f364 118f 	bfi	r1, r4, #6, #10
    ea88:	480a      	ldr	r0, [pc, #40]	; (eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    ea8a:	f00e f86e 	bl	1cb6a <log_0>
	return 0;
    ea8e:	e7d2      	b.n	ea36 <slm_at_gps_init+0xae>
    ea90:	0001f370 	.word	0x0001f370
    ea94:	0001f3a8 	.word	0x0001f3a8
    ea98:	000201a7 	.word	0x000201a7
    ea9c:	2002013c 	.word	0x2002013c
    eaa0:	20020344 	.word	0x20020344
    eaa4:	200201f8 	.word	0x200201f8
    eaa8:	000204d6 	.word	0x000204d6
    eaac:	00020393 	.word	0x00020393
    eab0:	00020d9c 	.word	0x00020d9c
    eab4:	000204ee 	.word	0x000204ee
    eab8:	000201e1 	.word	0x000201e1

0000eabc <slm_at_gps_uninit>:

/**@brief API to uninitialize GPS AT commands handler
 */
int slm_at_gps_uninit(void)
{
    eabc:	b510      	push	{r4, lr}
	if (gps_thread_id != NULL) {
    eabe:	4c06      	ldr	r4, [pc, #24]	; (ead8 <slm_at_gps_uninit+0x1c>)
    eac0:	6823      	ldr	r3, [r4, #0]
    eac2:	b133      	cbz	r3, ead2 <slm_at_gps_uninit+0x16>
		do_gps_stop();
    eac4:	f7ff fc72 	bl	e3ac <do_gps_stop>
		k_thread_abort(gps_thread_id);
    eac8:	6820      	ldr	r0, [r4, #0]
	z_impl_k_thread_abort(thread);
    eaca:	f001 fb5b 	bl	10184 <z_impl_k_thread_abort>
		gps_thread_id = NULL;
    eace:	2300      	movs	r3, #0
    ead0:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    ead2:	2000      	movs	r0, #0
    ead4:	bd10      	pop	{r4, pc}
    ead6:	bf00      	nop
    ead8:	200201f8 	.word	0x200201f8

0000eadc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    eadc:	680b      	ldr	r3, [r1, #0]
    eade:	3301      	adds	r3, #1
    eae0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    eae2:	4b01      	ldr	r3, [pc, #4]	; (eae8 <char_out+0xc>)
    eae4:	681b      	ldr	r3, [r3, #0]
    eae6:	4718      	bx	r3
    eae8:	2002c50c 	.word	0x2002c50c

0000eaec <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eaf0:	b085      	sub	sp, #20
    eaf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    eaf4:	469b      	mov	fp, r3
    eaf6:	2c01      	cmp	r4, #1
    eaf8:	bfb8      	it	lt
    eafa:	2401      	movlt	r4, #1
    eafc:	2b01      	cmp	r3, #1
    eafe:	bf0c      	ite	eq
    eb00:	2330      	moveq	r3, #48	; 0x30
    eb02:	2320      	movne	r3, #32
    eb04:	4616      	mov	r6, r2
    eb06:	4682      	mov	sl, r0
    eb08:	4688      	mov	r8, r1
    eb0a:	2501      	movs	r5, #1
    eb0c:	270a      	movs	r7, #10
    eb0e:	2200      	movs	r2, #0
    eb10:	f8df 906c 	ldr.w	r9, [pc, #108]	; eb80 <_printk_dec_ulong+0x94>
    eb14:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    eb16:	fbb6 f3f9 	udiv	r3, r6, r9
    eb1a:	9301      	str	r3, [sp, #4]
    eb1c:	b90a      	cbnz	r2, eb22 <_printk_dec_ulong+0x36>
    eb1e:	45b1      	cmp	r9, r6
    eb20:	d81c      	bhi.n	eb5c <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    eb22:	9b01      	ldr	r3, [sp, #4]
    eb24:	4641      	mov	r1, r8
    eb26:	f103 0030 	add.w	r0, r3, #48	; 0x30
    eb2a:	47d0      	blx	sl
			found_largest_digit = 1;
    eb2c:	2201      	movs	r2, #1
			digits++;
    eb2e:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    eb30:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    eb32:	3f01      	subs	r7, #1
		remainder %= pos;
    eb34:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    eb38:	230a      	movs	r3, #10
	while (pos >= 10) {
    eb3a:	2f01      	cmp	r7, #1
		pos /= 10;
    eb3c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    eb40:	d1e9      	bne.n	eb16 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    eb42:	4641      	mov	r1, r8
    eb44:	f106 0030 	add.w	r0, r6, #48	; 0x30
    eb48:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    eb4a:	f1bb 0f03 	cmp.w	fp, #3
    eb4e:	d102      	bne.n	eb56 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    eb50:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    eb52:	2c00      	cmp	r4, #0
    eb54:	dc0e      	bgt.n	eb74 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    eb56:	b005      	add	sp, #20
    eb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    eb5c:	42bc      	cmp	r4, r7
    eb5e:	dbe7      	blt.n	eb30 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    eb60:	f1bb 0f02 	cmp.w	fp, #2
    eb64:	d8e4      	bhi.n	eb30 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    eb66:	4641      	mov	r1, r8
    eb68:	9802      	ldr	r0, [sp, #8]
    eb6a:	9203      	str	r2, [sp, #12]
			digits++;
    eb6c:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    eb6e:	47d0      	blx	sl
			digits++;
    eb70:	9a03      	ldr	r2, [sp, #12]
    eb72:	e7dd      	b.n	eb30 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    eb74:	4641      	mov	r1, r8
    eb76:	2020      	movs	r0, #32
    eb78:	47d0      	blx	sl
    eb7a:	3c01      	subs	r4, #1
    eb7c:	e7e9      	b.n	eb52 <_printk_dec_ulong+0x66>
    eb7e:	bf00      	nop
    eb80:	3b9aca00 	.word	0x3b9aca00

0000eb84 <__printk_hook_install>:
	_char_out = fn;
    eb84:	4b01      	ldr	r3, [pc, #4]	; (eb8c <__printk_hook_install+0x8>)
    eb86:	6018      	str	r0, [r3, #0]
}
    eb88:	4770      	bx	lr
    eb8a:	bf00      	nop
    eb8c:	2002c50c 	.word	0x2002c50c

0000eb90 <vprintk>:
	struct out_context ctx = { 0 };
    eb90:	2300      	movs	r3, #0
{
    eb92:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    eb94:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    eb96:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    eb98:	4803      	ldr	r0, [pc, #12]	; (eba8 <vprintk+0x18>)
    eb9a:	460b      	mov	r3, r1
    eb9c:	a901      	add	r1, sp, #4
    eb9e:	f00d fe41 	bl	1c824 <z_vprintk>
}
    eba2:	b003      	add	sp, #12
    eba4:	f85d fb04 	ldr.w	pc, [sp], #4
    eba8:	0000eadd 	.word	0x0000eadd

0000ebac <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    ebac:	f04f 0220 	mov.w	r2, #32
    ebb0:	f3ef 8311 	mrs	r3, BASEPRI
    ebb4:	f382 8811 	msr	BASEPRI, r2
    ebb8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    ebbc:	2101      	movs	r1, #1
    ebbe:	4a04      	ldr	r2, [pc, #16]	; (ebd0 <nordicsemi_nrf91_init+0x24>)
    ebc0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ebc4:	f383 8811 	msr	BASEPRI, r3
    ebc8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    ebcc:	2000      	movs	r0, #0
    ebce:	4770      	bx	lr
    ebd0:	40039000 	.word	0x40039000

0000ebd4 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    ebd4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    ebd6:	2200      	movs	r2, #0
{
    ebd8:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    ebda:	490d      	ldr	r1, [pc, #52]	; (ec10 <enable_logger+0x3c>)
    ebdc:	480d      	ldr	r0, [pc, #52]	; (ec14 <enable_logger+0x40>)
    ebde:	f010 f918 	bl	1ee12 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ebe2:	2400      	movs	r4, #0
    ebe4:	230e      	movs	r3, #14
    ebe6:	4d0c      	ldr	r5, [pc, #48]	; (ec18 <enable_logger+0x44>)
    ebe8:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ebec:	e9cd 4404 	strd	r4, r4, [sp, #16]
    ebf0:	e9cd 4400 	strd	r4, r4, [sp]
    ebf4:	4b09      	ldr	r3, [pc, #36]	; (ec1c <enable_logger+0x48>)
    ebf6:	f44f 7240 	mov.w	r2, #768	; 0x300
    ebfa:	4909      	ldr	r1, [pc, #36]	; (ec20 <enable_logger+0x4c>)
    ebfc:	4628      	mov	r0, r5
    ebfe:	f00d f931 	bl	1be64 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    ec02:	4908      	ldr	r1, [pc, #32]	; (ec24 <enable_logger+0x50>)
    ec04:	4628      	mov	r0, r5
    ec06:	f010 f86d 	bl	1ece4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    ec0a:	4620      	mov	r0, r4
    ec0c:	b007      	add	sp, #28
    ec0e:	bd30      	pop	{r4, r5, pc}
    ec10:	0000ec29 	.word	0x0000ec29
    ec14:	20020210 	.word	0x20020210
    ec18:	20020258 	.word	0x20020258
    ec1c:	0000ef09 	.word	0x0000ef09
    ec20:	20026ab8 	.word	0x20026ab8
    ec24:	0002051c 	.word	0x0002051c

0000ec28 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ec28:	4801      	ldr	r0, [pc, #4]	; (ec30 <log_process_thread_timer_expiry_fn+0x8>)
    ec2a:	f00d b85f 	b.w	1bcec <z_impl_k_sem_give>
    ec2e:	bf00      	nop
    ec30:	2002c688 	.word	0x2002c688

0000ec34 <log_core_init>:
{
    ec34:	b508      	push	{r3, lr}
		log_msg_pool_init();
    ec36:	f000 f9df 	bl	eff8 <log_msg_pool_init>
		log_list_init(&list);
    ec3a:	4809      	ldr	r0, [pc, #36]	; (ec60 <log_core_init+0x2c>)
    ec3c:	f00d ff72 	bl	1cb24 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    ec40:	2304      	movs	r3, #4
    ec42:	2234      	movs	r2, #52	; 0x34
    ec44:	4807      	ldr	r0, [pc, #28]	; (ec64 <log_core_init+0x30>)
    ec46:	4908      	ldr	r1, [pc, #32]	; (ec68 <log_core_init+0x34>)
    ec48:	f00f fe31 	bl	1e8ae <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    ec4c:	4b07      	ldr	r3, [pc, #28]	; (ec6c <log_core_init+0x38>)
    ec4e:	4a08      	ldr	r2, [pc, #32]	; (ec70 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    ec50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    ec54:	601a      	str	r2, [r3, #0]
}
    ec56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    ec5a:	f000 bbfd 	b.w	f458 <log_output_timestamp_freq_set>
    ec5e:	bf00      	nop
    ec60:	20020208 	.word	0x20020208
    ec64:	2002023c 	.word	0x2002023c
    ec68:	2002aaf8 	.word	0x2002aaf8
    ec6c:	2002c510 	.word	0x2002c510
    ec70:	0001cb63 	.word	0x0001cb63

0000ec74 <dropped_notify>:
{
    ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ec76:	2500      	movs	r5, #0
    ec78:	4b0c      	ldr	r3, [pc, #48]	; (ecac <dropped_notify+0x38>)
    ec7a:	e8d3 7fef 	ldaex	r7, [r3]
    ec7e:	e8c3 5fe2 	stlex	r2, r5, [r3]
    ec82:	2a00      	cmp	r2, #0
    ec84:	d1f9      	bne.n	ec7a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    ec86:	4c0a      	ldr	r4, [pc, #40]	; (ecb0 <dropped_notify+0x3c>)
    ec88:	4e0a      	ldr	r6, [pc, #40]	; (ecb4 <dropped_notify+0x40>)
    ec8a:	1b36      	subs	r6, r6, r4
    ec8c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ec8e:	42b5      	cmp	r5, r6
    ec90:	db00      	blt.n	ec94 <dropped_notify+0x20>
}
    ec92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ec94:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ec96:	795b      	ldrb	r3, [r3, #5]
    ec98:	b12b      	cbz	r3, eca6 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    ec9a:	6823      	ldr	r3, [r4, #0]
    ec9c:	68db      	ldr	r3, [r3, #12]
    ec9e:	b113      	cbz	r3, eca6 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    eca0:	4639      	mov	r1, r7
    eca2:	4620      	mov	r0, r4
    eca4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    eca6:	3501      	adds	r5, #1
    eca8:	3410      	adds	r4, #16
    ecaa:	e7f0      	b.n	ec8e <dropped_notify+0x1a>
    ecac:	20020200 	.word	0x20020200
    ecb0:	0001f3f8 	.word	0x0001f3f8
    ecb4:	0001f408 	.word	0x0001f408

0000ecb8 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    ecb8:	4b22      	ldr	r3, [pc, #136]	; (ed44 <z_impl_log_process+0x8c>)
{
    ecba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!backend_attached && !bypass) {
    ecbe:	781b      	ldrb	r3, [r3, #0]
{
    ecc0:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    ecc2:	b903      	cbnz	r3, ecc6 <z_impl_log_process+0xe>
    ecc4:	b340      	cbz	r0, ed18 <z_impl_log_process+0x60>
	__asm__ volatile(
    ecc6:	f04f 0320 	mov.w	r3, #32
    ecca:	f3ef 8411 	mrs	r4, BASEPRI
    ecce:	f383 8811 	msr	BASEPRI, r3
    ecd2:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ecd6:	481c      	ldr	r0, [pc, #112]	; (ed48 <z_impl_log_process+0x90>)
    ecd8:	f00d ff34 	bl	1cb44 <log_list_head_get>
    ecdc:	4607      	mov	r7, r0
	__asm__ volatile(
    ecde:	f384 8811 	msr	BASEPRI, r4
    ece2:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ece6:	b158      	cbz	r0, ed00 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ece8:	4b18      	ldr	r3, [pc, #96]	; (ed4c <z_impl_log_process+0x94>)
    ecea:	e8d3 2fef 	ldaex	r2, [r3]
    ecee:	3a01      	subs	r2, #1
    ecf0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ecf4:	2900      	cmp	r1, #0
    ecf6:	d1f8      	bne.n	ecea <z_impl_log_process+0x32>
	if (!bypass) {
    ecf8:	b18d      	cbz	r5, ed1e <z_impl_log_process+0x66>
	log_msg_put(msg);
    ecfa:	4638      	mov	r0, r7
    ecfc:	f00e f80f 	bl	1cd1e <log_msg_put>
	if (!bypass && dropped_cnt) {
    ed00:	b925      	cbnz	r5, ed0c <z_impl_log_process+0x54>
    ed02:	4b13      	ldr	r3, [pc, #76]	; (ed50 <z_impl_log_process+0x98>)
    ed04:	681b      	ldr	r3, [r3, #0]
    ed06:	b10b      	cbz	r3, ed0c <z_impl_log_process+0x54>
		dropped_notify();
    ed08:	f7ff ffb4 	bl	ec74 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ed0c:	480e      	ldr	r0, [pc, #56]	; (ed48 <z_impl_log_process+0x90>)
    ed0e:	f00d ff17 	bl	1cb40 <log_list_head_peek>
    ed12:	1c05      	adds	r5, r0, #0
    ed14:	bf18      	it	ne
    ed16:	2501      	movne	r5, #1
}
    ed18:	4628      	mov	r0, r5
    ed1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (int i = 0; i < log_backend_count_get(); i++) {
    ed1e:	46a8      	mov	r8, r5
	return __log_backends_end - __log_backends_start;
    ed20:	4c0c      	ldr	r4, [pc, #48]	; (ed54 <z_impl_log_process+0x9c>)
    ed22:	4e0d      	ldr	r6, [pc, #52]	; (ed58 <z_impl_log_process+0xa0>)
    ed24:	1b36      	subs	r6, r6, r4
    ed26:	1136      	asrs	r6, r6, #4
    ed28:	45b0      	cmp	r8, r6
    ed2a:	dae6      	bge.n	ecfa <z_impl_log_process+0x42>
	return backend->cb->active;
    ed2c:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    ed2e:	795b      	ldrb	r3, [r3, #5]
    ed30:	b123      	cbz	r3, ed3c <z_impl_log_process+0x84>
	backend->api->put(backend, msg);
    ed32:	6823      	ldr	r3, [r4, #0]
    ed34:	4639      	mov	r1, r7
    ed36:	681b      	ldr	r3, [r3, #0]
    ed38:	4620      	mov	r0, r4
    ed3a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    ed3c:	f108 0801 	add.w	r8, r8, #1
    ed40:	3410      	adds	r4, #16
    ed42:	e7f1      	b.n	ed28 <z_impl_log_process+0x70>
    ed44:	20026545 	.word	0x20026545
    ed48:	20020208 	.word	0x20020208
    ed4c:	200201fc 	.word	0x200201fc
    ed50:	20020200 	.word	0x20020200
    ed54:	0001f3f8 	.word	0x0001f3f8
    ed58:	0001f408 	.word	0x0001f408

0000ed5c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    ed5c:	4b24      	ldr	r3, [pc, #144]	; (edf0 <msg_finalize+0x94>)
{
    ed5e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    ed60:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    ed62:	8141      	strh	r1, [r0, #10]
{
    ed64:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    ed66:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ed68:	4c22      	ldr	r4, [pc, #136]	; (edf4 <msg_finalize+0x98>)
    ed6a:	60e8      	str	r0, [r5, #12]
    ed6c:	e8d4 3fef 	ldaex	r3, [r4]
    ed70:	3301      	adds	r3, #1
    ed72:	e8c4 3fe2 	stlex	r2, r3, [r4]
    ed76:	2a00      	cmp	r2, #0
    ed78:	d1f8      	bne.n	ed6c <msg_finalize+0x10>
	__asm__ volatile(
    ed7a:	f04f 0320 	mov.w	r3, #32
    ed7e:	f3ef 8611 	mrs	r6, BASEPRI
    ed82:	f383 8811 	msr	BASEPRI, r3
    ed86:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    ed8a:	481b      	ldr	r0, [pc, #108]	; (edf8 <msg_finalize+0x9c>)
    ed8c:	4629      	mov	r1, r5
    ed8e:	f00d fecd 	bl	1cb2c <log_list_add_tail>
	__asm__ volatile(
    ed92:	f386 8811 	msr	BASEPRI, r6
    ed96:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    ed9a:	4b18      	ldr	r3, [pc, #96]	; (edfc <msg_finalize+0xa0>)
    ed9c:	781a      	ldrb	r2, [r3, #0]
    ed9e:	b17a      	cbz	r2, edc0 <msg_finalize+0x64>
	__asm__ volatile(
    eda0:	f04f 0320 	mov.w	r3, #32
    eda4:	f3ef 8411 	mrs	r4, BASEPRI
    eda8:	f383 8811 	msr	BASEPRI, r3
    edac:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    edb0:	2000      	movs	r0, #0
    edb2:	f7ff ff81 	bl	ecb8 <z_impl_log_process>
	__asm__ volatile(
    edb6:	f384 8811 	msr	BASEPRI, r4
    edba:	f3bf 8f6f 	isb	sy
}
    edbe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    edc0:	490f      	ldr	r1, [pc, #60]	; (ee00 <msg_finalize+0xa4>)
    edc2:	6823      	ldr	r3, [r4, #0]
    edc4:	6809      	ldr	r1, [r1, #0]
    edc6:	2900      	cmp	r1, #0
    edc8:	d0f9      	beq.n	edbe <msg_finalize+0x62>
    edca:	2b01      	cmp	r3, #1
    edcc:	d106      	bne.n	eddc <msg_finalize+0x80>
}
    edce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    edd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    edd6:	480b      	ldr	r0, [pc, #44]	; (ee04 <msg_finalize+0xa8>)
    edd8:	f00d ba5e 	b.w	1c298 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    eddc:	2b0a      	cmp	r3, #10
    edde:	d1ee      	bne.n	edbe <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    ede0:	4808      	ldr	r0, [pc, #32]	; (ee04 <msg_finalize+0xa8>)
    ede2:	f010 f822 	bl	1ee2a <z_impl_k_timer_stop>
}
    ede6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    edea:	4807      	ldr	r0, [pc, #28]	; (ee08 <msg_finalize+0xac>)
    edec:	f00c bf7e 	b.w	1bcec <z_impl_k_sem_give>
    edf0:	2002c510 	.word	0x2002c510
    edf4:	200201fc 	.word	0x200201fc
    edf8:	20020208 	.word	0x20020208
    edfc:	20026546 	.word	0x20026546
    ee00:	20020308 	.word	0x20020308
    ee04:	20020210 	.word	0x20020210
    ee08:	2002c688 	.word	0x2002c688

0000ee0c <log_dropped>:
    ee0c:	4b04      	ldr	r3, [pc, #16]	; (ee20 <log_dropped+0x14>)
    ee0e:	e8d3 2fef 	ldaex	r2, [r3]
    ee12:	3201      	adds	r2, #1
    ee14:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ee18:	2900      	cmp	r1, #0
    ee1a:	d1f8      	bne.n	ee0e <log_dropped+0x2>
}
    ee1c:	4770      	bx	lr
    ee1e:	bf00      	nop
    ee20:	20020200 	.word	0x20020200

0000ee24 <log_source_name_get>:
    ee24:	4a04      	ldr	r2, [pc, #16]	; (ee38 <log_source_name_get+0x14>)
    ee26:	4b05      	ldr	r3, [pc, #20]	; (ee3c <log_source_name_get+0x18>)
    ee28:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    ee2a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    ee2e:	bf34      	ite	cc
    ee30:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    ee34:	2000      	movcs	r0, #0
}
    ee36:	4770      	bx	lr
    ee38:	0001f370 	.word	0x0001f370
    ee3c:	0001f3f8 	.word	0x0001f3f8

0000ee40 <log_backend_enable>:
	id += backend - log_backend_get(0);
    ee40:	4b09      	ldr	r3, [pc, #36]	; (ee68 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    ee42:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    ee44:	1ac3      	subs	r3, r0, r3
    ee46:	111b      	asrs	r3, r3, #4
    ee48:	3301      	adds	r3, #1
{
    ee4a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    ee4c:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    ee4e:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    ee50:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    ee52:	4c06      	ldr	r4, [pc, #24]	; (ee6c <log_backend_enable+0x2c>)
    ee54:	715a      	strb	r2, [r3, #5]
    ee56:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    ee58:	6019      	str	r1, [r3, #0]
    ee5a:	b912      	cbnz	r2, ee62 <log_backend_enable+0x22>
    ee5c:	4804      	ldr	r0, [pc, #16]	; (ee70 <log_backend_enable+0x30>)
    ee5e:	f00c ff45 	bl	1bcec <z_impl_k_sem_give>
	backend_attached = true;
    ee62:	2301      	movs	r3, #1
    ee64:	7023      	strb	r3, [r4, #0]
}
    ee66:	bd10      	pop	{r4, pc}
    ee68:	0001f3f8 	.word	0x0001f3f8
    ee6c:	20026545 	.word	0x20026545
    ee70:	2002c688 	.word	0x2002c688

0000ee74 <log_init>:
{
    ee74:	b570      	push	{r4, r5, r6, lr}
    ee76:	4b0f      	ldr	r3, [pc, #60]	; (eeb4 <log_init+0x40>)
    ee78:	e8d3 5fef 	ldaex	r5, [r3]
    ee7c:	1c6a      	adds	r2, r5, #1
    ee7e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ee82:	2900      	cmp	r1, #0
    ee84:	d1f8      	bne.n	ee78 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    ee86:	b92d      	cbnz	r5, ee94 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    ee88:	4c0b      	ldr	r4, [pc, #44]	; (eeb8 <log_init+0x44>)
    ee8a:	4e0c      	ldr	r6, [pc, #48]	; (eebc <log_init+0x48>)
    ee8c:	1b36      	subs	r6, r6, r4
    ee8e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    ee90:	42b5      	cmp	r5, r6
    ee92:	db00      	blt.n	ee96 <log_init+0x22>
}
    ee94:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    ee96:	7b23      	ldrb	r3, [r4, #12]
    ee98:	b143      	cbz	r3, eeac <log_init+0x38>
			if (backend->api->init != NULL) {
    ee9a:	6823      	ldr	r3, [r4, #0]
    ee9c:	695b      	ldr	r3, [r3, #20]
    ee9e:	b103      	cbz	r3, eea2 <log_init+0x2e>
				backend->api->init();
    eea0:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    eea2:	2204      	movs	r2, #4
    eea4:	2100      	movs	r1, #0
    eea6:	4620      	mov	r0, r4
    eea8:	f7ff ffca 	bl	ee40 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    eeac:	3501      	adds	r5, #1
    eeae:	3410      	adds	r4, #16
    eeb0:	e7ee      	b.n	ee90 <log_init+0x1c>
    eeb2:	bf00      	nop
    eeb4:	20020204 	.word	0x20020204
    eeb8:	0001f3f8 	.word	0x0001f3f8
    eebc:	0001f408 	.word	0x0001f408

0000eec0 <z_impl_log_panic>:
{
    eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    eec2:	4f0e      	ldr	r7, [pc, #56]	; (eefc <z_impl_log_panic+0x3c>)
    eec4:	783d      	ldrb	r5, [r7, #0]
    eec6:	b975      	cbnz	r5, eee6 <z_impl_log_panic+0x26>
	log_init();
    eec8:	f7ff ffd4 	bl	ee74 <log_init>
    eecc:	4c0c      	ldr	r4, [pc, #48]	; (ef00 <z_impl_log_panic+0x40>)
    eece:	4e0d      	ldr	r6, [pc, #52]	; (ef04 <z_impl_log_panic+0x44>)
    eed0:	1b36      	subs	r6, r6, r4
    eed2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    eed4:	42b5      	cmp	r5, r6
    eed6:	db07      	blt.n	eee8 <z_impl_log_panic+0x28>
    eed8:	2000      	movs	r0, #0
    eeda:	f7ff feed 	bl	ecb8 <z_impl_log_process>
		while (log_process(false) == true) {
    eede:	2800      	cmp	r0, #0
    eee0:	d1fa      	bne.n	eed8 <z_impl_log_panic+0x18>
	panic_mode = true;
    eee2:	2301      	movs	r3, #1
    eee4:	703b      	strb	r3, [r7, #0]
}
    eee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    eee8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    eeea:	795b      	ldrb	r3, [r3, #5]
    eeec:	b11b      	cbz	r3, eef6 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    eeee:	6823      	ldr	r3, [r4, #0]
    eef0:	4620      	mov	r0, r4
    eef2:	691b      	ldr	r3, [r3, #16]
    eef4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    eef6:	3501      	adds	r5, #1
    eef8:	3410      	adds	r4, #16
    eefa:	e7eb      	b.n	eed4 <z_impl_log_panic+0x14>
    eefc:	20026546 	.word	0x20026546
    ef00:	0001f3f8 	.word	0x0001f3f8
    ef04:	0001f408 	.word	0x0001f408

0000ef08 <log_process_thread_func>:
{
    ef08:	b508      	push	{r3, lr}
	log_init();
    ef0a:	f7ff ffb3 	bl	ee74 <log_init>
	return z_impl_k_current_get();
    ef0e:	f00c fee7 	bl	1bce0 <z_impl_k_current_get>
	proc_tid = process_tid;
    ef12:	4b0b      	ldr	r3, [pc, #44]	; (ef40 <log_process_thread_func+0x38>)
    ef14:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ef16:	b130      	cbz	r0, ef26 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ef18:	4b0a      	ldr	r3, [pc, #40]	; (ef44 <log_process_thread_func+0x3c>)
	    process_tid &&
    ef1a:	681b      	ldr	r3, [r3, #0]
    ef1c:	2b09      	cmp	r3, #9
    ef1e:	dd02      	ble.n	ef26 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ef20:	4809      	ldr	r0, [pc, #36]	; (ef48 <log_process_thread_func+0x40>)
    ef22:	f00c fee3 	bl	1bcec <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ef26:	4c08      	ldr	r4, [pc, #32]	; (ef48 <log_process_thread_func+0x40>)
    ef28:	2000      	movs	r0, #0
    ef2a:	f7ff fec5 	bl	ecb8 <z_impl_log_process>
		if (log_process(false) == false) {
    ef2e:	2800      	cmp	r0, #0
    ef30:	d1fa      	bne.n	ef28 <log_process_thread_func+0x20>
    ef32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ef36:	4620      	mov	r0, r4
    ef38:	f00c ff04 	bl	1bd44 <z_impl_k_sem_take>
    ef3c:	e7f4      	b.n	ef28 <log_process_thread_func+0x20>
    ef3e:	bf00      	nop
    ef40:	20020308 	.word	0x20020308
    ef44:	200201fc 	.word	0x200201fc
    ef48:	2002c688 	.word	0x2002c688

0000ef4c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    ef4c:	4b14      	ldr	r3, [pc, #80]	; (efa0 <log_strdup+0x54>)
{
    ef4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    ef50:	4298      	cmp	r0, r3
{
    ef52:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ef54:	d302      	bcc.n	ef5c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    ef56:	4b13      	ldr	r3, [pc, #76]	; (efa4 <log_strdup+0x58>)
    ef58:	4298      	cmp	r0, r3
    ef5a:	d31b      	bcc.n	ef94 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    ef5c:	2200      	movs	r2, #0
    ef5e:	a901      	add	r1, sp, #4
    ef60:	4811      	ldr	r0, [pc, #68]	; (efa8 <log_strdup+0x5c>)
    ef62:	f00c f97f 	bl	1b264 <k_mem_slab_alloc>
	if (err != 0) {
    ef66:	4605      	mov	r5, r0
    ef68:	b9b8      	cbnz	r0, ef9a <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ef6a:	2201      	movs	r2, #1
    ef6c:	9b01      	ldr	r3, [sp, #4]
    ef6e:	e8d3 1fef 	ldaex	r1, [r3]
    ef72:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ef76:	2800      	cmp	r0, #0
    ef78:	d1f9      	bne.n	ef6e <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    ef7a:	9801      	ldr	r0, [sp, #4]
    ef7c:	4621      	mov	r1, r4
    ef7e:	222d      	movs	r2, #45	; 0x2d
    ef80:	3004      	adds	r0, #4
    ef82:	f00e faff 	bl	1d584 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ef86:	237e      	movs	r3, #126	; 0x7e
    ef88:	9c01      	ldr	r4, [sp, #4]
    ef8a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    ef8e:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    ef92:	3404      	adds	r4, #4
}
    ef94:	4620      	mov	r0, r4
    ef96:	b003      	add	sp, #12
    ef98:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    ef9a:	4c04      	ldr	r4, [pc, #16]	; (efac <log_strdup+0x60>)
    ef9c:	e7fa      	b.n	ef94 <log_strdup+0x48>
    ef9e:	bf00      	nop
    efa0:	0001f084 	.word	0x0001f084
    efa4:	00020f80 	.word	0x00020f80
    efa8:	2002023c 	.word	0x2002023c
    efac:	00020524 	.word	0x00020524

0000efb0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    efb0:	b148      	cbz	r0, efc6 <log_is_strdup+0x16>
    efb2:	4b05      	ldr	r3, [pc, #20]	; (efc8 <log_is_strdup+0x18>)
    efb4:	4298      	cmp	r0, r3
    efb6:	d305      	bcc.n	efc4 <log_is_strdup+0x14>
    efb8:	33d0      	adds	r3, #208	; 0xd0
    efba:	4298      	cmp	r0, r3
    efbc:	bf2c      	ite	cs
    efbe:	2000      	movcs	r0, #0
    efc0:	2001      	movcc	r0, #1
    efc2:	4770      	bx	lr
    efc4:	2000      	movs	r0, #0
}
    efc6:	4770      	bx	lr
    efc8:	2002aaf8 	.word	0x2002aaf8

0000efcc <log_free>:
{
    efcc:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    efce:	3804      	subs	r0, #4
    efd0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    efd2:	e8d0 3fef 	ldaex	r3, [r0]
    efd6:	1e5a      	subs	r2, r3, #1
    efd8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    efdc:	2900      	cmp	r1, #0
    efde:	d1f8      	bne.n	efd2 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    efe0:	2b01      	cmp	r3, #1
    efe2:	d103      	bne.n	efec <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    efe4:	a901      	add	r1, sp, #4
    efe6:	4803      	ldr	r0, [pc, #12]	; (eff4 <log_free+0x28>)
    efe8:	f00c f968 	bl	1b2bc <k_mem_slab_free>
}
    efec:	b003      	add	sp, #12
    efee:	f85d fb04 	ldr.w	pc, [sp], #4
    eff2:	bf00      	nop
    eff4:	2002023c 	.word	0x2002023c

0000eff8 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    eff8:	2320      	movs	r3, #32
    effa:	4902      	ldr	r1, [pc, #8]	; (f004 <log_msg_pool_init+0xc>)
    effc:	461a      	mov	r2, r3
    effe:	4802      	ldr	r0, [pc, #8]	; (f008 <log_msg_pool_init+0x10>)
    f000:	f00f bc55 	b.w	1e8ae <k_mem_slab_init>
    f004:	2002abc8 	.word	0x2002abc8
    f008:	2002030c 	.word	0x2002030c

0000f00c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    f00c:	2300      	movs	r3, #0
{
    f00e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    f010:	4d09      	ldr	r5, [pc, #36]	; (f038 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    f012:	9301      	str	r3, [sp, #4]
    f014:	2001      	movs	r0, #1
    f016:	f7ff fe4f 	bl	ecb8 <z_impl_log_process>
    f01a:	4604      	mov	r4, r0
			log_dropped();
    f01c:	f7ff fef6 	bl	ee0c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    f020:	2200      	movs	r2, #0
    f022:	a901      	add	r1, sp, #4
    f024:	4628      	mov	r0, r5
    f026:	f00c f91d 	bl	1b264 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    f02a:	b108      	cbz	r0, f030 <log_msg_no_space_handle+0x24>
    f02c:	2c00      	cmp	r4, #0
    f02e:	d1f1      	bne.n	f014 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    f030:	9801      	ldr	r0, [sp, #4]
    f032:	b003      	add	sp, #12
    f034:	bd30      	pop	{r4, r5, pc}
    f036:	bf00      	nop
    f038:	2002030c 	.word	0x2002030c

0000f03c <log_msg_chunk_alloc>:
{
    f03c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    f03e:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f040:	a901      	add	r1, sp, #4
    f042:	4806      	ldr	r0, [pc, #24]	; (f05c <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    f044:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f046:	f00c f90d 	bl	1b264 <k_mem_slab_alloc>
	if (err != 0) {
    f04a:	b110      	cbz	r0, f052 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    f04c:	f7ff ffde 	bl	f00c <log_msg_no_space_handle>
    f050:	9001      	str	r0, [sp, #4]
}
    f052:	9801      	ldr	r0, [sp, #4]
    f054:	b003      	add	sp, #12
    f056:	f85d fb04 	ldr.w	pc, [sp], #4
    f05a:	bf00      	nop
    f05c:	2002030c 	.word	0x2002030c

0000f060 <msg_free>:
{
    f060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f062:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    f064:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    f066:	f014 0401 	ands.w	r4, r4, #1
{
    f06a:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    f06c:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    f070:	d00e      	beq.n	f090 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    f072:	9b01      	ldr	r3, [sp, #4]
    f074:	7a1a      	ldrb	r2, [r3, #8]
    f076:	0792      	lsls	r2, r2, #30
    f078:	d504      	bpl.n	f084 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    f07a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f07c:	4c10      	ldr	r4, [pc, #64]	; (f0c0 <msg_free+0x60>)
    f07e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    f080:	9b03      	ldr	r3, [sp, #12]
    f082:	b9b3      	cbnz	r3, f0b2 <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f084:	a901      	add	r1, sp, #4
    f086:	480e      	ldr	r0, [pc, #56]	; (f0c0 <msg_free+0x60>)
    f088:	f00c f918 	bl	1b2bc <k_mem_slab_free>
}
    f08c:	b004      	add	sp, #16
    f08e:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    f090:	2d00      	cmp	r5, #0
    f092:	d0ee      	beq.n	f072 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    f094:	42a5      	cmp	r5, r4
    f096:	9801      	ldr	r0, [sp, #4]
    f098:	d9eb      	bls.n	f072 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    f09a:	4621      	mov	r1, r4
    f09c:	f00d fe22 	bl	1cce4 <log_msg_arg_get>
    f0a0:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    f0a2:	f7ff ff85 	bl	efb0 <log_is_strdup>
    f0a6:	b110      	cbz	r0, f0ae <msg_free+0x4e>
				log_free(buf);
    f0a8:	4630      	mov	r0, r6
    f0aa:	f7ff ff8f 	bl	efcc <log_free>
		for (i = 0; i < nargs; i++) {
    f0ae:	3401      	adds	r4, #1
    f0b0:	e7f0      	b.n	f094 <msg_free+0x34>
		next = cont->next;
    f0b2:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f0b4:	a903      	add	r1, sp, #12
    f0b6:	4620      	mov	r0, r4
    f0b8:	f00c f900 	bl	1b2bc <k_mem_slab_free>
		cont = next;
    f0bc:	9503      	str	r5, [sp, #12]
    f0be:	e7df      	b.n	f080 <msg_free+0x20>
    f0c0:	2002030c 	.word	0x2002030c

0000f0c4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    f0c4:	b40e      	push	{r1, r2, r3}
    f0c6:	b503      	push	{r0, r1, lr}
    f0c8:	ab03      	add	r3, sp, #12
    f0ca:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f0ce:	4601      	mov	r1, r0
    f0d0:	4804      	ldr	r0, [pc, #16]	; (f0e4 <print_formatted+0x20>)
	va_start(args, fmt);
    f0d2:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f0d4:	f00d fba6 	bl	1c824 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    f0d8:	2000      	movs	r0, #0
    f0da:	b002      	add	sp, #8
    f0dc:	f85d eb04 	ldr.w	lr, [sp], #4
    f0e0:	b003      	add	sp, #12
    f0e2:	4770      	bx	lr
    f0e4:	0001d0e5 	.word	0x0001d0e5

0000f0e8 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    f0ec:	f011 0402 	ands.w	r4, r1, #2
{
    f0f0:	b085      	sub	sp, #20
    f0f2:	4606      	mov	r6, r0
    f0f4:	4690      	mov	r8, r2
    f0f6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f0fa:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f0fe:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    f102:	d007      	beq.n	f114 <prefix_print+0x2c>
	if (!format) {
    f104:	f011 0f44 	tst.w	r1, #68	; 0x44
    f108:	d137      	bne.n	f17a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    f10a:	461a      	mov	r2, r3
    f10c:	4932      	ldr	r1, [pc, #200]	; (f1d8 <prefix_print+0xf0>)
    f10e:	f7ff ffd9 	bl	f0c4 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    f112:	4604      	mov	r4, r0
	if (color) {
    f114:	f1b9 0f00 	cmp.w	r9, #0
    f118:	d00a      	beq.n	f130 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    f11a:	4b30      	ldr	r3, [pc, #192]	; (f1dc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    f11c:	4930      	ldr	r1, [pc, #192]	; (f1e0 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    f11e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    f122:	4b30      	ldr	r3, [pc, #192]	; (f1e4 <prefix_print+0xfc>)
    f124:	4630      	mov	r0, r6
    f126:	2a00      	cmp	r2, #0
    f128:	bf08      	it	eq
    f12a:	461a      	moveq	r2, r3
    f12c:	f7ff ffca 	bl	f0c4 <print_formatted>
	if (level_on) {
    f130:	b13d      	cbz	r5, f142 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    f132:	4b2d      	ldr	r3, [pc, #180]	; (f1e8 <prefix_print+0x100>)
    f134:	492d      	ldr	r1, [pc, #180]	; (f1ec <prefix_print+0x104>)
    f136:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    f13a:	4630      	mov	r0, r6
    f13c:	f7ff ffc2 	bl	f0c4 <print_formatted>
    f140:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    f142:	f1b8 0f00 	cmp.w	r8, #0
    f146:	d044      	beq.n	f1d2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f148:	2301      	movs	r3, #1
    f14a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    f14e:	4b28      	ldr	r3, [pc, #160]	; (f1f0 <prefix_print+0x108>)
    f150:	f017 0f10 	tst.w	r7, #16
    f154:	4f27      	ldr	r7, [pc, #156]	; (f1f4 <prefix_print+0x10c>)
    f156:	bf18      	it	ne
    f158:	461f      	movne	r7, r3
    f15a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f15e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f162:	f7ff fe5f 	bl	ee24 <log_source_name_get>
    f166:	4639      	mov	r1, r7
    f168:	4602      	mov	r2, r0
    f16a:	4630      	mov	r0, r6
    f16c:	f7ff ffaa 	bl	f0c4 <print_formatted>
    f170:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    f172:	4420      	add	r0, r4
    f174:	b005      	add	sp, #20
    f176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    f17a:	4a1f      	ldr	r2, [pc, #124]	; (f1f8 <prefix_print+0x110>)
    f17c:	6811      	ldr	r1, [r2, #0]
    f17e:	b331      	cbz	r1, f1ce <prefix_print+0xe6>
		timestamp /= timestamp_div;
    f180:	4a1e      	ldr	r2, [pc, #120]	; (f1fc <prefix_print+0x114>)
    f182:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    f186:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    f188:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f18c:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    f190:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    f194:	fbb4 f2fe 	udiv	r2, r4, lr
    f198:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    f19c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    f1a0:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1a4:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    f1a8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1ac:	fb01 441b 	mls	r4, r1, fp, r4
    f1b0:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    f1b4:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f1b8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    f1bc:	e9cd b101 	strd	fp, r1, [sp, #4]
    f1c0:	fb0a e113 	mls	r1, sl, r3, lr
    f1c4:	9100      	str	r1, [sp, #0]
    f1c6:	490e      	ldr	r1, [pc, #56]	; (f200 <prefix_print+0x118>)
    f1c8:	f7ff ff7c 	bl	f0c4 <print_formatted>
    f1cc:	e7a1      	b.n	f112 <prefix_print+0x2a>
		length = 0;
    f1ce:	4608      	mov	r0, r1
    f1d0:	e79f      	b.n	f112 <prefix_print+0x2a>
	total += print_formatted(log_output,
    f1d2:	4f08      	ldr	r7, [pc, #32]	; (f1f4 <prefix_print+0x10c>)
    f1d4:	e7c1      	b.n	f15a <prefix_print+0x72>
    f1d6:	bf00      	nop
    f1d8:	00020589 	.word	0x00020589
    f1dc:	0001f4a4 	.word	0x0001f4a4
    f1e0:	00020d9c 	.word	0x00020d9c
    f1e4:	0002057b 	.word	0x0002057b
    f1e8:	0001f4b8 	.word	0x0001f4b8
    f1ec:	000205ae 	.word	0x000205ae
    f1f0:	00020585 	.word	0x00020585
    f1f4:	00020580 	.word	0x00020580
    f1f8:	20020328 	.word	0x20020328
    f1fc:	2002032c 	.word	0x2002032c
    f200:	00020592 	.word	0x00020592

0000f204 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    f204:	b538      	push	{r3, r4, r5, lr}
    f206:	460c      	mov	r4, r1
	if (color) {
    f208:	07e1      	lsls	r1, r4, #31
{
    f20a:	4605      	mov	r5, r0
	if (color) {
    f20c:	d503      	bpl.n	f216 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    f20e:	4a08      	ldr	r2, [pc, #32]	; (f230 <postfix_print+0x2c>)
    f210:	4908      	ldr	r1, [pc, #32]	; (f234 <postfix_print+0x30>)
    f212:	f7ff ff57 	bl	f0c4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f216:	06e2      	lsls	r2, r4, #27
    f218:	d408      	bmi.n	f22c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f21a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f21c:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    f21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    f222:	bf4c      	ite	mi
    f224:	4904      	ldrmi	r1, [pc, #16]	; (f238 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f226:	4905      	ldrpl	r1, [pc, #20]	; (f23c <postfix_print+0x38>)
    f228:	f7ff bf4c 	b.w	f0c4 <print_formatted>
}
    f22c:	bd38      	pop	{r3, r4, r5, pc}
    f22e:	bf00      	nop
    f230:	0002057b 	.word	0x0002057b
    f234:	00020d9c 	.word	0x00020d9c
    f238:	0001fdee 	.word	0x0001fdee
    f23c:	0001fded 	.word	0x0001fded

0000f240 <hexdump_line_print>:
{
    f240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f244:	4698      	mov	r8, r3
    f246:	9b08      	ldr	r3, [sp, #32]
    f248:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f24a:	06dd      	lsls	r5, r3, #27
{
    f24c:	460e      	mov	r6, r1
    f24e:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f250:	d405      	bmi.n	f25e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f252:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f254:	bf4c      	ite	mi
    f256:	4929      	ldrmi	r1, [pc, #164]	; (f2fc <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    f258:	4929      	ldrpl	r1, [pc, #164]	; (f300 <hexdump_line_print+0xc0>)
    f25a:	f7ff ff33 	bl	f0c4 <print_formatted>
{
    f25e:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    f260:	f8df 90a4 	ldr.w	r9, [pc, #164]	; f308 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    f264:	4545      	cmp	r5, r8
    f266:	db2a      	blt.n	f2be <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f268:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    f26a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f30c <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    f26e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f310 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    f272:	f8df a094 	ldr.w	sl, [pc, #148]	; f308 <hexdump_line_print+0xc8>
		if (i < length) {
    f276:	42bd      	cmp	r5, r7
    f278:	d22e      	bcs.n	f2d8 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    f27a:	5d72      	ldrb	r2, [r6, r5]
    f27c:	4649      	mov	r1, r9
    f27e:	4620      	mov	r0, r4
    f280:	f7ff ff20 	bl	f0c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f284:	3501      	adds	r5, #1
    f286:	2d10      	cmp	r5, #16
    f288:	d11f      	bne.n	f2ca <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    f28a:	491e      	ldr	r1, [pc, #120]	; (f304 <hexdump_line_print+0xc4>)
    f28c:	4620      	mov	r0, r4
    f28e:	f7ff ff19 	bl	f0c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f292:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    f294:	f8df 8070 	ldr.w	r8, [pc, #112]	; f308 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    f298:	f8df 9078 	ldr.w	r9, [pc, #120]	; f314 <hexdump_line_print+0xd4>
		if (i < length) {
    f29c:	42af      	cmp	r7, r5
    f29e:	d927      	bls.n	f2f0 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    f2a0:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    f2a2:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    f2a4:	f1a2 0320 	sub.w	r3, r2, #32
    f2a8:	2b5f      	cmp	r3, #95	; 0x5f
    f2aa:	bf28      	it	cs
    f2ac:	222e      	movcs	r2, #46	; 0x2e
    f2ae:	4620      	mov	r0, r4
    f2b0:	f7ff ff08 	bl	f0c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f2b4:	3501      	adds	r5, #1
    f2b6:	2d10      	cmp	r5, #16
    f2b8:	d113      	bne.n	f2e2 <hexdump_line_print+0xa2>
}
    f2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f2be:	4649      	mov	r1, r9
    f2c0:	4620      	mov	r0, r4
    f2c2:	f7ff feff 	bl	f0c4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f2c6:	3501      	adds	r5, #1
    f2c8:	e7cc      	b.n	f264 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    f2ca:	076a      	lsls	r2, r5, #29
    f2cc:	d1d3      	bne.n	f276 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    f2ce:	4651      	mov	r1, sl
    f2d0:	4620      	mov	r0, r4
    f2d2:	f7ff fef7 	bl	f0c4 <print_formatted>
    f2d6:	e7ce      	b.n	f276 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    f2d8:	4641      	mov	r1, r8
    f2da:	4620      	mov	r0, r4
    f2dc:	f7ff fef2 	bl	f0c4 <print_formatted>
    f2e0:	e7d0      	b.n	f284 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    f2e2:	076b      	lsls	r3, r5, #29
    f2e4:	d1da      	bne.n	f29c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f2e6:	4641      	mov	r1, r8
    f2e8:	4620      	mov	r0, r4
    f2ea:	f7ff feeb 	bl	f0c4 <print_formatted>
    f2ee:	e7d5      	b.n	f29c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f2f0:	4641      	mov	r1, r8
    f2f2:	4620      	mov	r0, r4
    f2f4:	f7ff fee6 	bl	f0c4 <print_formatted>
    f2f8:	e7dc      	b.n	f2b4 <hexdump_line_print+0x74>
    f2fa:	bf00      	nop
    f2fc:	0001fdee 	.word	0x0001fdee
    f300:	0001fded 	.word	0x0001fded
    f304:	0002054c 	.word	0x0002054c
    f308:	0002054a 	.word	0x0002054a
    f30c:	00020548 	.word	0x00020548
    f310:	00020542 	.word	0x00020542
    f314:	0002054e 	.word	0x0002054e

0000f318 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    f318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    f31c:	7a8b      	ldrb	r3, [r1, #10]
    f31e:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f320:	f013 0407 	ands.w	r4, r3, #7
{
    f324:	b08a      	sub	sp, #40	; 0x28
    f326:	4605      	mov	r5, r0
    f328:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f32a:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f32c:	d01c      	beq.n	f368 <log_output_msg_process+0x50>
    f32e:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    f330:	8949      	ldrh	r1, [r1, #10]
    f332:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f336:	0989      	lsrs	r1, r1, #6
    f338:	9102      	str	r1, [sp, #8]
    f33a:	e9cd 4300 	strd	r4, r3, [sp]
    f33e:	f002 0201 	and.w	r2, r2, #1
    f342:	68f3      	ldr	r3, [r6, #12]
    f344:	4639      	mov	r1, r7
    f346:	f7ff fecf 	bl	f0e8 <prefix_print>
    f34a:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f34c:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f34e:	07da      	lsls	r2, r3, #31
    f350:	d40c      	bmi.n	f36c <log_output_msg_process+0x54>
		std_print(msg, log_output);
    f352:	4629      	mov	r1, r5
    f354:	4630      	mov	r0, r6
    f356:	f00d fd5b 	bl	1ce10 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f35a:	b34c      	cbz	r4, f3b0 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    f35c:	4622      	mov	r2, r4
    f35e:	4639      	mov	r1, r7
    f360:	4628      	mov	r0, r5
    f362:	f7ff ff4f 	bl	f204 <postfix_print>
    f366:	e023      	b.n	f3b0 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f368:	46a1      	mov	r9, r4
    f36a:	e7ef      	b.n	f34c <log_output_msg_process+0x34>
	} else if (raw_string) {
    f36c:	bb34      	cbnz	r4, f3bc <log_output_msg_process+0xa4>
	size_t offset = 0;
    f36e:	4627      	mov	r7, r4
		length = log_output->size;
    f370:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f372:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f374:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f376:	68a9      	ldr	r1, [r5, #8]
    f378:	463b      	mov	r3, r7
    f37a:	4630      	mov	r0, r6
    f37c:	f00d fd34 	bl	1cde8 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f380:	9a06      	ldr	r2, [sp, #24]
    f382:	686b      	ldr	r3, [r5, #4]
    f384:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f386:	b13a      	cbz	r2, f398 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    f388:	68ab      	ldr	r3, [r5, #8]
    f38a:	4413      	add	r3, r2
    f38c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    f390:	f1a4 030a 	sub.w	r3, r4, #10
    f394:	425c      	negs	r4, r3
    f396:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    f398:	4628      	mov	r0, r5
    f39a:	f00d fe96 	bl	1d0ca <log_output_flush>
		offset += length;
    f39e:	9b06      	ldr	r3, [sp, #24]
    f3a0:	441f      	add	r7, r3
	} while (length > 0);
    f3a2:	2b00      	cmp	r3, #0
    f3a4:	d1e4      	bne.n	f370 <log_output_msg_process+0x58>
	if (eol) {
    f3a6:	b11c      	cbz	r4, f3b0 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    f3a8:	4914      	ldr	r1, [pc, #80]	; (f3fc <log_output_msg_process+0xe4>)
    f3aa:	4628      	mov	r0, r5
    f3ac:	f7ff fe8a 	bl	f0c4 <print_formatted>
	}

	log_output_flush(log_output);
    f3b0:	4628      	mov	r0, r5
    f3b2:	f00d fe8a 	bl	1d0ca <log_output_flush>
}
    f3b6:	b00a      	add	sp, #40	; 0x28
    f3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    f3bc:	4630      	mov	r0, r6
    f3be:	f00d fcbd 	bl	1cd3c <log_msg_str_get>
    f3c2:	490f      	ldr	r1, [pc, #60]	; (f400 <log_output_msg_process+0xe8>)
    f3c4:	4602      	mov	r2, r0
    f3c6:	4628      	mov	r0, r5
    f3c8:	f7ff fe7c 	bl	f0c4 <print_formatted>
	u32_t offset = 0U;
    f3cc:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    f3d0:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f3d4:	aa05      	add	r2, sp, #20
    f3d6:	4643      	mov	r3, r8
    f3d8:	a906      	add	r1, sp, #24
    f3da:	4630      	mov	r0, r6
		length = sizeof(buf);
    f3dc:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f3e0:	f00d fd02 	bl	1cde8 <log_msg_hexdump_data_get>
		if (length) {
    f3e4:	9a05      	ldr	r2, [sp, #20]
    f3e6:	2a00      	cmp	r2, #0
    f3e8:	d0b8      	beq.n	f35c <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    f3ea:	464b      	mov	r3, r9
    f3ec:	9700      	str	r7, [sp, #0]
    f3ee:	a906      	add	r1, sp, #24
    f3f0:	4628      	mov	r0, r5
    f3f2:	f7ff ff25 	bl	f240 <hexdump_line_print>
			offset += length;
    f3f6:	9b05      	ldr	r3, [sp, #20]
    f3f8:	4498      	add	r8, r3
    f3fa:	e7eb      	b.n	f3d4 <log_output_msg_process+0xbc>
    f3fc:	00020551 	.word	0x00020551
    f400:	00020d9c 	.word	0x00020d9c

0000f404 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    f404:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    f406:	e9d0 4300 	ldrd	r4, r3, [r0]
    f40a:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    f40c:	f242 730f 	movw	r3, #9999	; 0x270f
    f410:	428b      	cmp	r3, r1
    f412:	bf28      	it	cs
    f414:	460b      	movcs	r3, r1
    f416:	4a0d      	ldr	r2, [pc, #52]	; (f44c <log_output_dropped_process+0x48>)
    f418:	2105      	movs	r1, #5
    f41a:	4668      	mov	r0, sp
    f41c:	f001 fd84 	bl	10f28 <snprintf>
    f420:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    f422:	462b      	mov	r3, r5
    f424:	4620      	mov	r0, r4
    f426:	220b      	movs	r2, #11
    f428:	4909      	ldr	r1, [pc, #36]	; (f450 <log_output_dropped_process+0x4c>)
    f42a:	f00d fce4 	bl	1cdf6 <buffer_write>
	buffer_write(outf, buf, len, dev);
    f42e:	462b      	mov	r3, r5
    f430:	4632      	mov	r2, r6
    f432:	4669      	mov	r1, sp
    f434:	4620      	mov	r0, r4
    f436:	f00d fcde 	bl	1cdf6 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    f43a:	462b      	mov	r3, r5
    f43c:	221b      	movs	r2, #27
    f43e:	4905      	ldr	r1, [pc, #20]	; (f454 <log_output_dropped_process+0x50>)
    f440:	4620      	mov	r0, r4
    f442:	f00d fcd8 	bl	1cdf6 <buffer_write>
}
    f446:	b002      	add	sp, #8
    f448:	bd70      	pop	{r4, r5, r6, pc}
    f44a:	bf00      	nop
    f44c:	00020443 	.word	0x00020443
    f450:	0002056f 	.word	0x0002056f
    f454:	00020553 	.word	0x00020553

0000f458 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    f458:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f45a:	2100      	movs	r1, #0
	timestamp_div = 1U;
    f45c:	4a07      	ldr	r2, [pc, #28]	; (f47c <log_output_timestamp_freq_set+0x24>)
{
    f45e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    f460:	4c07      	ldr	r4, [pc, #28]	; (f480 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f462:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f464:	42a0      	cmp	r0, r4
    f466:	d804      	bhi.n	f472 <log_output_timestamp_freq_set+0x1a>
    f468:	b101      	cbz	r1, f46c <log_output_timestamp_freq_set+0x14>
    f46a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f46c:	4b05      	ldr	r3, [pc, #20]	; (f484 <log_output_timestamp_freq_set+0x2c>)
    f46e:	6018      	str	r0, [r3, #0]
}
    f470:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    f472:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f474:	005b      	lsls	r3, r3, #1
    f476:	2101      	movs	r1, #1
    f478:	e7f4      	b.n	f464 <log_output_timestamp_freq_set+0xc>
    f47a:	bf00      	nop
    f47c:	2002032c 	.word	0x2002032c
    f480:	000f4240 	.word	0x000f4240
    f484:	20020328 	.word	0x20020328

0000f488 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    f488:	4801      	ldr	r0, [pc, #4]	; (f490 <panic+0x8>)
    f48a:	f00d be1e 	b.w	1d0ca <log_output_flush>
    f48e:	bf00      	nop
    f490:	0001f4e4 	.word	0x0001f4e4

0000f494 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    f494:	4801      	ldr	r0, [pc, #4]	; (f49c <dropped+0x8>)
    f496:	f7ff bfb5 	b.w	f404 <log_output_dropped_process>
    f49a:	bf00      	nop
    f49c:	0001f4e4 	.word	0x0001f4e4

0000f4a0 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    f4a0:	b508      	push	{r3, lr}
    f4a2:	4803      	ldr	r0, [pc, #12]	; (f4b0 <log_backend_uart_init+0x10>)
    f4a4:	f00b fd50 	bl	1af48 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    f4a8:	4b02      	ldr	r3, [pc, #8]	; (f4b4 <log_backend_uart_init+0x14>)
    f4aa:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    f4ac:	bd08      	pop	{r3, pc}
    f4ae:	bf00      	nop
    f4b0:	0001facd 	.word	0x0001facd
    f4b4:	20020338 	.word	0x20020338

0000f4b8 <put>:
{
    f4b8:	b510      	push	{r4, lr}
    f4ba:	460c      	mov	r4, r1
	log_msg_get(msg);
    f4bc:	4608      	mov	r0, r1
    f4be:	f00d fc05 	bl	1cccc <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    f4c2:	4621      	mov	r1, r4
    f4c4:	4804      	ldr	r0, [pc, #16]	; (f4d8 <put+0x20>)
    f4c6:	220f      	movs	r2, #15
    f4c8:	f7ff ff26 	bl	f318 <log_output_msg_process>
	log_msg_put(msg);
    f4cc:	4620      	mov	r0, r4
}
    f4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4d2:	f00d bc24 	b.w	1cd1e <log_msg_put>
    f4d6:	bf00      	nop
    f4d8:	0001f4e4 	.word	0x0001f4e4

0000f4dc <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    f4dc:	4b01      	ldr	r3, [pc, #4]	; (f4e4 <socket_offload_register+0x8>)
    f4de:	6018      	str	r0, [r3, #0]
}
    f4e0:	4770      	bx	lr
    f4e2:	bf00      	nop
    f4e4:	20020344 	.word	0x20020344

0000f4e8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    f4e8:	280a      	cmp	r0, #10
{
    f4ea:	b538      	push	{r3, r4, r5, lr}
    f4ec:	4604      	mov	r4, r0
    f4ee:	4d07      	ldr	r5, [pc, #28]	; (f50c <console_out+0x24>)
	if ('\n' == c) {
    f4f0:	d104      	bne.n	f4fc <console_out+0x14>
    f4f2:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    f4f4:	6843      	ldr	r3, [r0, #4]
    f4f6:	210d      	movs	r1, #13
    f4f8:	685b      	ldr	r3, [r3, #4]
    f4fa:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    f4fc:	6828      	ldr	r0, [r5, #0]
    f4fe:	6843      	ldr	r3, [r0, #4]
    f500:	b2e1      	uxtb	r1, r4
    f502:	685b      	ldr	r3, [r3, #4]
    f504:	4798      	blx	r3

	return c;
}
    f506:	4620      	mov	r0, r4
    f508:	bd38      	pop	{r3, r4, r5, pc}
    f50a:	bf00      	nop
    f50c:	20020348 	.word	0x20020348

0000f510 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    f510:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    f512:	4c04      	ldr	r4, [pc, #16]	; (f524 <uart_console_hook_install+0x14>)
    f514:	4620      	mov	r0, r4
    f516:	f001 fd01 	bl	10f1c <__stdout_hook_install>
	__printk_hook_install(console_out);
    f51a:	4620      	mov	r0, r4
}
    f51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    f520:	f7ff bb30 	b.w	eb84 <__printk_hook_install>
    f524:	0000f4e9 	.word	0x0000f4e9

0000f528 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    f528:	b508      	push	{r3, lr}
    f52a:	4804      	ldr	r0, [pc, #16]	; (f53c <uart_console_init+0x14>)
    f52c:	f00b fd0c 	bl	1af48 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f530:	4b03      	ldr	r3, [pc, #12]	; (f540 <uart_console_init+0x18>)
    f532:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    f534:	f7ff ffec 	bl	f510 <uart_console_hook_install>

	return 0;
}
    f538:	2000      	movs	r0, #0
    f53a:	bd08      	pop	{r3, pc}
    f53c:	0001facd 	.word	0x0001facd
    f540:	20020348 	.word	0x20020348

0000f544 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    f544:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f546:	2200      	movs	r2, #0
{
    f548:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f54a:	2101      	movs	r1, #1
    f54c:	2005      	movs	r0, #5
    f54e:	f000 f9c9 	bl	f8e4 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    f552:	2005      	movs	r0, #5
    f554:	f000 f9b6 	bl	f8c4 <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    f558:	2202      	movs	r2, #2
    f55a:	4b05      	ldr	r3, [pc, #20]	; (f570 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f55c:	2000      	movs	r0, #0
    f55e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    f562:	2203      	movs	r2, #3
    f564:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    f568:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    f56a:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    f56e:	bd10      	pop	{r4, pc}
    f570:	40005000 	.word	0x40005000

0000f574 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    f574:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f576:	4b10      	ldr	r3, [pc, #64]	; (f5b8 <nrf_power_clock_isr+0x44>)
    f578:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f57a:	b162      	cbz	r2, f596 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    f57c:	4a0f      	ldr	r2, [pc, #60]	; (f5bc <nrf_power_clock_isr+0x48>)
    f57e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f582:	07d1      	lsls	r1, r2, #31
    f584:	d507      	bpl.n	f596 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f586:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    f588:	480d      	ldr	r0, [pc, #52]	; (f5c0 <nrf_power_clock_isr+0x4c>)
    f58a:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    f58c:	6883      	ldr	r3, [r0, #8]
    f58e:	7a5b      	ldrb	r3, [r3, #9]
    f590:	b90b      	cbnz	r3, f596 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    f592:	f00d fe5b 	bl	1d24c <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f596:	4b0b      	ldr	r3, [pc, #44]	; (f5c4 <nrf_power_clock_isr+0x50>)
    f598:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f59a:	b15a      	cbz	r2, f5b4 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    f59c:	4a07      	ldr	r2, [pc, #28]	; (f5bc <nrf_power_clock_isr+0x48>)
    f59e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f5a2:	0792      	lsls	r2, r2, #30
    f5a4:	d506      	bpl.n	f5b4 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f5a6:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    f5a8:	4807      	ldr	r0, [pc, #28]	; (f5c8 <nrf_power_clock_isr+0x54>)
    f5aa:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    f5ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    f5b0:	f00d be4c 	b.w	1d24c <clkstarted_handle>
}
    f5b4:	bd08      	pop	{r3, pc}
    f5b6:	bf00      	nop
    f5b8:	40005100 	.word	0x40005100
    f5bc:	40005000 	.word	0x40005000
    f5c0:	2002c59c 	.word	0x2002c59c
    f5c4:	40005104 	.word	0x40005104
    f5c8:	2002c5a8 	.word	0x2002c5a8

0000f5cc <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    f5cc:	2200      	movs	r2, #0
    f5ce:	4b0d      	ldr	r3, [pc, #52]	; (f604 <rtc1_nrf_isr+0x38>)
    f5d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    f5d4:	f04f 0220 	mov.w	r2, #32
    f5d8:	f3ef 8111 	mrs	r1, BASEPRI
    f5dc:	f382 8811 	msr	BASEPRI, r2
    f5e0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f5e4:	4a08      	ldr	r2, [pc, #32]	; (f608 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f5e6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    f5ea:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f5ec:	1ac0      	subs	r0, r0, r3
    f5ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f5f2:	4403      	add	r3, r0
    f5f4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    f5f6:	f381 8811 	msr	BASEPRI, r1
    f5fa:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    f5fe:	f00c bdb3 	b.w	1c168 <z_clock_announce>
    f602:	bf00      	nop
    f604:	40015000 	.word	0x40015000
    f608:	20020364 	.word	0x20020364

0000f60c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    f60c:	b570      	push	{r4, r5, r6, lr}
    f60e:	4818      	ldr	r0, [pc, #96]	; (f670 <z_clock_driver_init+0x64>)
    f610:	f00b fc9a 	bl	1af48 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    f614:	b348      	cbz	r0, f66a <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    f616:	6843      	ldr	r3, [r0, #4]
    f618:	2100      	movs	r1, #0
    f61a:	681b      	ldr	r3, [r3, #0]
    f61c:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    f61e:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f620:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    f622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f626:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    f62a:	4d12      	ldr	r5, [pc, #72]	; (f674 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    f62c:	4631      	mov	r1, r6
    f62e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    f632:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    f636:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f63a:	4b0f      	ldr	r3, [pc, #60]	; (f678 <z_clock_driver_init+0x6c>)
    f63c:	2015      	movs	r0, #21
    f63e:	601c      	str	r4, [r3, #0]
    f640:	4b0e      	ldr	r3, [pc, #56]	; (f67c <z_clock_driver_init+0x70>)
    f642:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f646:	4622      	mov	r2, r4
    f648:	f000 f94c 	bl	f8e4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    f64c:	2015      	movs	r0, #21
    f64e:	f000 f939 	bl	f8c4 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    f652:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f654:	4b0a      	ldr	r3, [pc, #40]	; (f680 <z_clock_driver_init+0x74>)
    f656:	601e      	str	r6, [r3, #0]
    f658:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    f65a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    f65e:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f660:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f664:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    f668:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    f66a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f66e:	e7fb      	b.n	f668 <z_clock_driver_init+0x5c>
    f670:	000205eb 	.word	0x000205eb
    f674:	40015000 	.word	0x40015000
    f678:	40015140 	.word	0x40015140
    f67c:	e000e100 	.word	0xe000e100
    f680:	40015008 	.word	0x40015008

0000f684 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    f684:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    f686:	4c25      	ldr	r4, [pc, #148]	; (f71c <z_clock_set_timeout+0x98>)
    f688:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f68c:	bf08      	it	eq
    f68e:	4620      	moveq	r0, r4
	__asm__ volatile(
    f690:	f04f 0320 	mov.w	r3, #32
    f694:	f3ef 8511 	mrs	r5, BASEPRI
    f698:	f383 8811 	msr	BASEPRI, r3
    f69c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f6a0:	4b1f      	ldr	r3, [pc, #124]	; (f720 <z_clock_set_timeout+0x9c>)
    f6a2:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    f6a6:	4b1f      	ldr	r3, [pc, #124]	; (f724 <z_clock_set_timeout+0xa0>)
    f6a8:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    f6aa:	1aca      	subs	r2, r1, r3
    f6ac:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    f6b0:	0212      	lsls	r2, r2, #8
    f6b2:	d41a      	bmi.n	f6ea <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    f6b4:	1e42      	subs	r2, r0, #1
    f6b6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f6ba:	42a2      	cmp	r2, r4
    f6bc:	bfa8      	it	ge
    f6be:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    f6c0:	1c70      	adds	r0, r6, #1
    f6c2:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    f6c4:	42a0      	cmp	r0, r4
    f6c6:	bf94      	ite	ls
    f6c8:	1818      	addls	r0, r3, r0
    f6ca:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    f6cc:	1a41      	subs	r1, r0, r1
    f6ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f6d2:	4a13      	ldr	r2, [pc, #76]	; (f720 <z_clock_set_timeout+0x9c>)
    f6d4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    f6d8:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    f6da:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    f6de:	d906      	bls.n	f6ee <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    f6e0:	f385 8811 	msr	BASEPRI, r5
    f6e4:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    f6e8:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    f6ea:	2200      	movs	r2, #0
    f6ec:	e7e8      	b.n	f6c0 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    f6ee:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    f6f2:	490d      	ldr	r1, [pc, #52]	; (f728 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    f6f4:	1ac3      	subs	r3, r0, r3
    f6f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    f6fa:	1e5c      	subs	r4, r3, #1
    f6fc:	428c      	cmp	r4, r1
    f6fe:	d905      	bls.n	f70c <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f700:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f704:	4b09      	ldr	r3, [pc, #36]	; (f72c <z_clock_set_timeout+0xa8>)
    f706:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f70a:	e7e9      	b.n	f6e0 <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    f70c:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    f70e:	bf02      	ittt	eq
    f710:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f712:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f716:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    f71a:	e7e1      	b.n	f6e0 <z_clock_set_timeout+0x5c>
    f71c:	00fffffe 	.word	0x00fffffe
    f720:	40015000 	.word	0x40015000
    f724:	20020364 	.word	0x20020364
    f728:	007ffffe 	.word	0x007ffffe
    f72c:	e000e100 	.word	0xe000e100

0000f730 <z_clock_elapsed>:
	__asm__ volatile(
    f730:	f04f 0220 	mov.w	r2, #32
    f734:	f3ef 8311 	mrs	r3, BASEPRI
    f738:	f382 8811 	msr	BASEPRI, r2
    f73c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f740:	4a06      	ldr	r2, [pc, #24]	; (f75c <z_clock_elapsed+0x2c>)
    f742:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f746:	4a06      	ldr	r2, [pc, #24]	; (f760 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f748:	6812      	ldr	r2, [r2, #0]
    f74a:	1a80      	subs	r0, r0, r2
    f74c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f750:	f383 8811 	msr	BASEPRI, r3
    f754:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f758:	4770      	bx	lr
    f75a:	bf00      	nop
    f75c:	40015000 	.word	0x40015000
    f760:	20020364 	.word	0x20020364

0000f764 <z_timer_cycle_get_32>:
	__asm__ volatile(
    f764:	f04f 0320 	mov.w	r3, #32
    f768:	f3ef 8211 	mrs	r2, BASEPRI
    f76c:	f383 8811 	msr	BASEPRI, r3
    f770:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    f774:	4906      	ldr	r1, [pc, #24]	; (f790 <z_timer_cycle_get_32+0x2c>)
    f776:	4b07      	ldr	r3, [pc, #28]	; (f794 <z_timer_cycle_get_32+0x30>)
    f778:	6808      	ldr	r0, [r1, #0]
    f77a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    f77e:	f382 8811 	msr	BASEPRI, r2
    f782:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    f786:	1a1b      	subs	r3, r3, r0
    f788:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    f78c:	4418      	add	r0, r3
    f78e:	4770      	bx	lr
    f790:	20020364 	.word	0x20020364
    f794:	40015000 	.word	0x40015000

0000f798 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    f798:	4807      	ldr	r0, [pc, #28]	; (f7b8 <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    f79a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    f79c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    f79e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    f7a0:	d003      	beq.n	f7aa <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    f7a2:	4906      	ldr	r1, [pc, #24]	; (f7bc <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    f7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    f7a8:	600a      	str	r2, [r1, #0]

0000f7aa <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    f7aa:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    f7ac:	f00c fb08 	bl	1bdc0 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    f7b0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    f7b4:	4770      	bx	lr
    f7b6:	0000      	.short	0x0000
    ldr r0, =_kernel
    f7b8:	20024d28 	.word	0x20024d28
    ldr r1, =_SCS_ICSR
    f7bc:	e000ed04 	.word	0xe000ed04

0000f7c0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    f7c0:	4a09      	ldr	r2, [pc, #36]	; (f7e8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f7c2:	490a      	ldr	r1, [pc, #40]	; (f7ec <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f7c4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f7c6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    f7c8:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    f7ca:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f7cc:	4908      	ldr	r1, [pc, #32]	; (f7f0 <arch_swap+0x30>)
    f7ce:	684b      	ldr	r3, [r1, #4]
    f7d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f7d4:	604b      	str	r3, [r1, #4]
    f7d6:	2300      	movs	r3, #0
    f7d8:	f383 8811 	msr	BASEPRI, r3
    f7dc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f7e0:	6893      	ldr	r3, [r2, #8]
}
    f7e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f7e4:	4770      	bx	lr
    f7e6:	bf00      	nop
    f7e8:	20024d28 	.word	0x20024d28
    f7ec:	0001f924 	.word	0x0001f924
    f7f0:	e000ed00 	.word	0xe000ed00

0000f7f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f7f4:	4929      	ldr	r1, [pc, #164]	; (f89c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f7f6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f7f8:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    f7fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f7fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f802:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    f806:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f80a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    f80e:	d004      	beq.n	f81a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    f810:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    f814:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    f818:	e007      	b.n	f82a <out_fp_endif>

0000f81a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    f81a:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    f81e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    f822:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    f826:	f050 0004 	orrs.w	r0, r0, #4

0000f82a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    f82a:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f82e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f830:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    f834:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    f838:	4f19      	ldr	r7, [pc, #100]	; (f8a0 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    f83a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    f83e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    f840:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    f842:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    f844:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    f846:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    f848:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    f84a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    f84e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    f852:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    f856:	d105      	bne.n	f864 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    f858:	2300      	movs	r3, #0
    vmsr fpscr, r3
    f85a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f85e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    f862:	e005      	b.n	f870 <in_fp_endif>

0000f864 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    f864:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    f868:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    f86c:	ec90 8a10 	vldmia	r0, {s16-s31}

0000f870 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    f870:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    f874:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    f878:	f383 8814 	msr	CONTROL, r3
    isb
    f87c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    f880:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    f882:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    f884:	f00d fd0e 	bl	1d2a4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    f888:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    f88c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    f890:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    f894:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    f898:	4770      	bx	lr
    f89a:	0000      	.short	0x0000
    ldr r1, =_kernel
    f89c:	20024d28 	.word	0x20024d28
    ldr v4, =_SCS_ICSR
    f8a0:	e000ed04 	.word	0xe000ed04

0000f8a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    f8a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    f8a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    f8aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f8ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f8b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f8b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f8b8:	2902      	cmp	r1, #2
    beq _oops
    f8ba:	d0ff      	beq.n	f8bc <_oops>

0000f8bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f8bc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    f8be:	f00d fce6 	bl	1d28e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    f8c2:	bd01      	pop	{r0, pc}

0000f8c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    f8c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    f8c6:	2b00      	cmp	r3, #0
    f8c8:	db08      	blt.n	f8dc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f8ca:	2201      	movs	r2, #1
    f8cc:	f000 001f 	and.w	r0, r0, #31
    f8d0:	fa02 f000 	lsl.w	r0, r2, r0
    f8d4:	4a02      	ldr	r2, [pc, #8]	; (f8e0 <arch_irq_enable+0x1c>)
    f8d6:	095b      	lsrs	r3, r3, #5
    f8d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    f8dc:	4770      	bx	lr
    f8de:	bf00      	nop
    f8e0:	e000e100 	.word	0xe000e100

0000f8e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f8e4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f8e6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    f8e8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8ec:	bfa8      	it	ge
    f8ee:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    f8f2:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8f6:	bfb8      	it	lt
    f8f8:	4b05      	ldrlt	r3, [pc, #20]	; (f910 <z_arm_irq_priority_set+0x2c>)
    f8fa:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f8fc:	bfab      	itete	ge
    f8fe:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f902:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f906:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f90a:	5419      	strblt	r1, [r3, r0]
}
    f90c:	4770      	bx	lr
    f90e:	bf00      	nop
    f910:	e000ed14 	.word	0xe000ed14

0000f914 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    f914:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    f916:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    f918:	4b04      	ldr	r3, [pc, #16]	; (f92c <_arch_isr_direct_pm+0x18>)
    f91a:	6a18      	ldr	r0, [r3, #32]
    f91c:	b118      	cbz	r0, f926 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    f91e:	2200      	movs	r2, #0
    f920:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    f922:	f00e ffc2 	bl	1e8aa <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    f926:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    f928:	bd08      	pop	{r3, pc}
    f92a:	bf00      	nop
    f92c:	20024d28 	.word	0x20024d28

0000f930 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    f930:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f932:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    f936:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f938:	9300      	str	r3, [sp, #0]
    f93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    f93c:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f93e:	f00f f9d6 	bl	1ecee <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    f942:	4a0c      	ldr	r2, [pc, #48]	; (f974 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    f944:	f1a4 0320 	sub.w	r3, r4, #32
    f948:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    f94c:	f022 0201 	bic.w	r2, r2, #1
    f950:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f952:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    f954:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f956:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    f958:	9a07      	ldr	r2, [sp, #28]
    f95a:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    f95c:	9a08      	ldr	r2, [sp, #32]
    f95e:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    f960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    f964:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    f966:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    f968:	2300      	movs	r3, #0
    f96a:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    f96c:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f970:	b002      	add	sp, #8
    f972:	bd70      	pop	{r4, r5, r6, pc}
    f974:	0001c7bb 	.word	0x0001c7bb

0000f978 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    f978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f97c:	461f      	mov	r7, r3
    f97e:	4606      	mov	r6, r0
    f980:	460c      	mov	r4, r1
    f982:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f984:	2300      	movs	r3, #0
    f986:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    f98a:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    f98e:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    f992:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    f996:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f99a:	f000 fc1b 	bl	101d4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    f99e:	4b0a      	ldr	r3, [pc, #40]	; (f9c8 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    f9a0:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f9a2:	4630      	mov	r0, r6
	_current = main_thread;
    f9a4:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    f9a6:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f9aa:	f00d fc7b 	bl	1d2a4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f9ae:	4638      	mov	r0, r7
    f9b0:	f384 8809 	msr	PSP, r4
    f9b4:	2100      	movs	r1, #0
    f9b6:	b663      	cpsie	if
    f9b8:	f381 8811 	msr	BASEPRI, r1
    f9bc:	f3bf 8f6f 	isb	sy
    f9c0:	2200      	movs	r2, #0
    f9c2:	2300      	movs	r3, #0
    f9c4:	f00c fef9 	bl	1c7ba <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f9c8:	20024d28 	.word	0x20024d28

0000f9cc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    f9cc:	4901      	ldr	r1, [pc, #4]	; (f9d4 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    f9ce:	2210      	movs	r2, #16
	str r2, [r1]
    f9d0:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    f9d2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    f9d4:	e000ed10 	.word	0xe000ed10

0000f9d8 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    f9d8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    f9da:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    f9de:	bf30      	wfi

	bx lr
    f9e0:	4770      	bx	lr
    f9e2:	bf00      	nop

0000f9e4 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    f9e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f9e8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    f9ec:	4672      	mov	r2, lr

	push {r0, lr}
    f9ee:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    f9f0:	f000 fab0 	bl	ff54 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    f9f4:	bd01      	pop	{r0, pc}
    f9f6:	bf00      	nop

0000f9f8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9fc:	4681      	mov	r9, r0
    f9fe:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    fa00:	460c      	mov	r4, r1
    fa02:	2900      	cmp	r1, #0
    fa04:	d07a      	beq.n	fafc <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    fa06:	2201      	movs	r2, #1
    fa08:	f04f 0300 	mov.w	r3, #0
    fa0c:	4d3f      	ldr	r5, [pc, #252]	; (fb0c <z_arm_fatal_error+0x114>)
    fa0e:	f362 0307 	bfi	r3, r2, #0, #8
    fa12:	4a3f      	ldr	r2, [pc, #252]	; (fb10 <z_arm_fatal_error+0x118>)
    fa14:	483f      	ldr	r0, [pc, #252]	; (fb14 <z_arm_fatal_error+0x11c>)
    fa16:	1aad      	subs	r5, r5, r2
    fa18:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    fa1c:	f365 138f 	bfi	r3, r5, #6, #10
    fa20:	f8ad 3000 	strh.w	r3, [sp]
    fa24:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    fa28:	6809      	ldr	r1, [r1, #0]
    fa2a:	f00d f8d7 	bl	1cbdc <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    fa2e:	2201      	movs	r2, #1
    fa30:	f04f 0300 	mov.w	r3, #0
    fa34:	f362 0307 	bfi	r3, r2, #0, #8
    fa38:	f365 138f 	bfi	r3, r5, #6, #10
    fa3c:	f8ad 3000 	strh.w	r3, [sp]
    fa40:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    fa44:	68e1      	ldr	r1, [r4, #12]
    fa46:	4834      	ldr	r0, [pc, #208]	; (fb18 <z_arm_fatal_error+0x120>)
    fa48:	f00d f8c8 	bl	1cbdc <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    fa4c:	2301      	movs	r3, #1
    fa4e:	f04f 0200 	mov.w	r2, #0
    fa52:	f363 0207 	bfi	r2, r3, #0, #8
    fa56:	f365 128f 	bfi	r2, r5, #6, #10
    fa5a:	69e1      	ldr	r1, [r4, #28]
    fa5c:	482f      	ldr	r0, [pc, #188]	; (fb1c <z_arm_fatal_error+0x124>)
    fa5e:	f00d f891 	bl	1cb84 <log_1>
	for (int i = 0; i < 16; i += 4) {
    fa62:	4627      	mov	r7, r4
    fa64:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fa66:	f8df a0c0 	ldr.w	sl, [pc, #192]	; fb28 <z_arm_fatal_error+0x130>
    fa6a:	edd7 7a08 	vldr	s15, [r7, #32]
    fa6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa72:	edcd 7a03 	vstr	s15, [sp, #12]
    fa76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    fa7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa7e:	edcd 7a05 	vstr	s15, [sp, #20]
    fa82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    fa86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa8a:	edcd 7a07 	vstr	s15, [sp, #28]
    fa8e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    fa92:	2208      	movs	r2, #8
    fa94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fa98:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    fa9c:	f043 0301 	orr.w	r3, r3, #1
    faa0:	f363 0807 	bfi	r8, r3, #0, #8
    faa4:	1c73      	adds	r3, r6, #1
    faa6:	9304      	str	r3, [sp, #16]
    faa8:	1cb3      	adds	r3, r6, #2
    faaa:	9306      	str	r3, [sp, #24]
    faac:	f365 188f 	bfi	r8, r5, #6, #10
    fab0:	1cf3      	adds	r3, r6, #3
    fab2:	9602      	str	r6, [sp, #8]
    fab4:	9308      	str	r3, [sp, #32]
    fab6:	eb0d 0102 	add.w	r1, sp, r2
    faba:	4643      	mov	r3, r8
    fabc:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    fabe:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fac0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    fac4:	f00d f8a5 	bl	1cc12 <log_n>
	for (int i = 0; i < 16; i += 4) {
    fac8:	2e10      	cmp	r6, #16
    faca:	f107 0710 	add.w	r7, r7, #16
    face:	d1cc      	bne.n	fa6a <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    fad0:	2301      	movs	r3, #1
    fad2:	f04f 0200 	mov.w	r2, #0
    fad6:	f363 0207 	bfi	r2, r3, #0, #8
    fada:	f365 128f 	bfi	r2, r5, #6, #10
    fade:	6e21      	ldr	r1, [r4, #96]	; 0x60
    fae0:	480f      	ldr	r0, [pc, #60]	; (fb20 <z_arm_fatal_error+0x128>)
    fae2:	f00d f84f 	bl	1cb84 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    fae6:	f04f 0200 	mov.w	r2, #0
    faea:	2301      	movs	r3, #1
    faec:	f363 0207 	bfi	r2, r3, #0, #8
    faf0:	f365 128f 	bfi	r2, r5, #6, #10
    faf4:	69a1      	ldr	r1, [r4, #24]
    faf6:	480b      	ldr	r0, [pc, #44]	; (fb24 <z_arm_fatal_error+0x12c>)
    faf8:	f00d f844 	bl	1cb84 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fafc:	4621      	mov	r1, r4
    fafe:	4648      	mov	r0, r9
    fb00:	f00b fa4e 	bl	1afa0 <z_fatal_error>
}
    fb04:	b00a      	add	sp, #40	; 0x28
    fb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fb0a:	bf00      	nop
    fb0c:	0001f3d0 	.word	0x0001f3d0
    fb10:	0001f370 	.word	0x0001f370
    fb14:	00020617 	.word	0x00020617
    fb18:	00020646 	.word	0x00020646
    fb1c:	00020675 	.word	0x00020675
    fb20:	000206c7 	.word	0x000206c7
    fb24:	000206d6 	.word	0x000206d6
    fb28:	00020684 	.word	0x00020684

0000fb2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    fb2c:	bf30      	wfi
    b z_SysNmiOnReset
    fb2e:	f7ff bffd 	b.w	fb2c <z_SysNmiOnReset>
    fb32:	bf00      	nop

0000fb34 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fb34:	4a11      	ldr	r2, [pc, #68]	; (fb7c <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    fb36:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fb38:	4b11      	ldr	r3, [pc, #68]	; (fb80 <z_arm_prep_c+0x4c>)
    fb3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    fb3e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fb40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fb44:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    fb48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fb4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    fb50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    fb54:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    fb58:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    fb5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fb60:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fb64:	2300      	movs	r3, #0
    fb66:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    fb6a:	f00b fa99 	bl	1b0a0 <z_bss_zero>
	z_data_copy();
    fb6e:	f00b faa1 	bl	1b0b4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    fb72:	f000 fafb 	bl	1016c <z_arm_int_lib_init>
	z_cstart();
    fb76:	f00b fad5 	bl	1b124 <z_cstart>
    fb7a:	bf00      	nop
    fb7c:	0000c000 	.word	0x0000c000
    fb80:	e000ed00 	.word	0xe000ed00

0000fb84 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    fb84:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    fb86:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    fb88:	4a0b      	ldr	r2, [pc, #44]	; (fbb8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    fb8a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    fb8c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    fb8e:	bf1e      	ittt	ne
	movne	r1, #0
    fb90:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    fb92:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    fb94:	f00e fe89 	blne	1e8aa <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    fb98:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    fb9a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    fb9e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    fba2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    fba6:	4905      	ldr	r1, [pc, #20]	; (fbbc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    fba8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    fbaa:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    fbac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    fbae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    fbb2:	4903      	ldr	r1, [pc, #12]	; (fbc0 <_isr_wrapper+0x3c>)
	bx r1
    fbb4:	4708      	bx	r1
    fbb6:	0000      	.short	0x0000
	ldr r2, =_kernel
    fbb8:	20024d28 	.word	0x20024d28
	ldr r1, =_sw_isr_table
    fbbc:	0001f084 	.word	0x0001f084
	ldr r1, =z_arm_int_exit
    fbc0:	0000f799 	.word	0x0000f799

0000fbc4 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    fbc4:	f00c ffac 	bl	1cb20 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fbc8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fbca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    fbce:	4808      	ldr	r0, [pc, #32]	; (fbf0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    fbd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    fbd4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    fbd6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    fbda:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    fbde:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    fbe0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    fbe2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    fbe6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    fbea:	f7ff ffa3 	bl	fb34 <z_arm_prep_c>
    fbee:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    fbf0:	200282f8 	.word	0x200282f8

0000fbf4 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    fbf4:	2301      	movs	r3, #1
    fbf6:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    fbfa:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    fbfc:	f363 0107 	bfi	r1, r3, #0, #8
    fc00:	4c3a      	ldr	r4, [pc, #232]	; (fcec <usage_fault.isra.2+0xf8>)
    fc02:	4b3b      	ldr	r3, [pc, #236]	; (fcf0 <usage_fault.isra.2+0xfc>)
    fc04:	483b      	ldr	r0, [pc, #236]	; (fcf4 <usage_fault.isra.2+0x100>)
    fc06:	1ae4      	subs	r4, r4, r3
    fc08:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fc0c:	f364 118f 	bfi	r1, r4, #6, #10
    fc10:	f00c ffab 	bl	1cb6a <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    fc14:	4b38      	ldr	r3, [pc, #224]	; (fcf8 <usage_fault.isra.2+0x104>)
    fc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc18:	0199      	lsls	r1, r3, #6
    fc1a:	d509      	bpl.n	fc30 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    fc1c:	f04f 0100 	mov.w	r1, #0
    fc20:	2301      	movs	r3, #1
    fc22:	f363 0107 	bfi	r1, r3, #0, #8
    fc26:	f364 118f 	bfi	r1, r4, #6, #10
    fc2a:	4834      	ldr	r0, [pc, #208]	; (fcfc <usage_fault.isra.2+0x108>)
    fc2c:	f00c ff9d 	bl	1cb6a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    fc30:	4b31      	ldr	r3, [pc, #196]	; (fcf8 <usage_fault.isra.2+0x104>)
    fc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc34:	01da      	lsls	r2, r3, #7
    fc36:	d509      	bpl.n	fc4c <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    fc38:	f04f 0100 	mov.w	r1, #0
    fc3c:	2301      	movs	r3, #1
    fc3e:	f363 0107 	bfi	r1, r3, #0, #8
    fc42:	f364 118f 	bfi	r1, r4, #6, #10
    fc46:	482e      	ldr	r0, [pc, #184]	; (fd00 <usage_fault.isra.2+0x10c>)
    fc48:	f00c ff8f 	bl	1cb6a <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    fc4c:	4b2a      	ldr	r3, [pc, #168]	; (fcf8 <usage_fault.isra.2+0x104>)
    fc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc50:	02db      	lsls	r3, r3, #11
    fc52:	d509      	bpl.n	fc68 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    fc54:	f04f 0100 	mov.w	r1, #0
    fc58:	2301      	movs	r3, #1
    fc5a:	f363 0107 	bfi	r1, r3, #0, #8
    fc5e:	f364 118f 	bfi	r1, r4, #6, #10
    fc62:	4828      	ldr	r0, [pc, #160]	; (fd04 <usage_fault.isra.2+0x110>)
    fc64:	f00c ff81 	bl	1cb6a <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    fc68:	4b23      	ldr	r3, [pc, #140]	; (fcf8 <usage_fault.isra.2+0x104>)
    fc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc6c:	0318      	lsls	r0, r3, #12
    fc6e:	d509      	bpl.n	fc84 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    fc70:	f04f 0100 	mov.w	r1, #0
    fc74:	2301      	movs	r3, #1
    fc76:	f363 0107 	bfi	r1, r3, #0, #8
    fc7a:	f364 118f 	bfi	r1, r4, #6, #10
    fc7e:	4822      	ldr	r0, [pc, #136]	; (fd08 <usage_fault.isra.2+0x114>)
    fc80:	f00c ff73 	bl	1cb6a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    fc84:	4b1c      	ldr	r3, [pc, #112]	; (fcf8 <usage_fault.isra.2+0x104>)
    fc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc88:	0359      	lsls	r1, r3, #13
    fc8a:	d509      	bpl.n	fca0 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    fc8c:	f04f 0100 	mov.w	r1, #0
    fc90:	2301      	movs	r3, #1
    fc92:	f363 0107 	bfi	r1, r3, #0, #8
    fc96:	f364 118f 	bfi	r1, r4, #6, #10
    fc9a:	481c      	ldr	r0, [pc, #112]	; (fd0c <usage_fault.isra.2+0x118>)
    fc9c:	f00c ff65 	bl	1cb6a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    fca0:	4b15      	ldr	r3, [pc, #84]	; (fcf8 <usage_fault.isra.2+0x104>)
    fca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fca4:	039a      	lsls	r2, r3, #14
    fca6:	d509      	bpl.n	fcbc <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    fca8:	f04f 0100 	mov.w	r1, #0
    fcac:	2301      	movs	r3, #1
    fcae:	f363 0107 	bfi	r1, r3, #0, #8
    fcb2:	f364 118f 	bfi	r1, r4, #6, #10
    fcb6:	4816      	ldr	r0, [pc, #88]	; (fd10 <usage_fault.isra.2+0x11c>)
    fcb8:	f00c ff57 	bl	1cb6a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    fcbc:	4b0e      	ldr	r3, [pc, #56]	; (fcf8 <usage_fault.isra.2+0x104>)
    fcbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fcc0:	03db      	lsls	r3, r3, #15
    fcc2:	d509      	bpl.n	fcd8 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    fcc4:	f04f 0100 	mov.w	r1, #0
    fcc8:	2301      	movs	r3, #1
    fcca:	f363 0107 	bfi	r1, r3, #0, #8
    fcce:	f364 118f 	bfi	r1, r4, #6, #10
    fcd2:	4810      	ldr	r0, [pc, #64]	; (fd14 <usage_fault.isra.2+0x120>)
    fcd4:	f00c ff49 	bl	1cb6a <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fcd8:	4a07      	ldr	r2, [pc, #28]	; (fcf8 <usage_fault.isra.2+0x104>)

	return reason;
}
    fcda:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fcdc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fcde:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    fce2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    fce6:	6293      	str	r3, [r2, #40]	; 0x28
}
    fce8:	bd10      	pop	{r4, pc}
    fcea:	bf00      	nop
    fcec:	0001f3d0 	.word	0x0001f3d0
    fcf0:	0001f370 	.word	0x0001f370
    fcf4:	00020864 	.word	0x00020864
    fcf8:	e000ed00 	.word	0xe000ed00
    fcfc:	0002087c 	.word	0x0002087c
    fd00:	0002088f 	.word	0x0002088f
    fd04:	000208a9 	.word	0x000208a9
    fd08:	000208d3 	.word	0x000208d3
    fd0c:	000208f1 	.word	0x000208f1
    fd10:	00020916 	.word	0x00020916
    fd14:	00020930 	.word	0x00020930

0000fd18 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    fd1a:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fd1c:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    fd1e:	f04f 0100 	mov.w	r1, #0
    fd22:	4c37      	ldr	r4, [pc, #220]	; (fe00 <mem_manage_fault.isra.4+0xe8>)
    fd24:	f363 0107 	bfi	r1, r3, #0, #8
    fd28:	4b36      	ldr	r3, [pc, #216]	; (fe04 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fd2a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    fd2c:	1ae4      	subs	r4, r4, r3
    fd2e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fd32:	f364 118f 	bfi	r1, r4, #6, #10
    fd36:	4834      	ldr	r0, [pc, #208]	; (fe08 <mem_manage_fault.isra.4+0xf0>)
    fd38:	f00c ff17 	bl	1cb6a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    fd3c:	4b33      	ldr	r3, [pc, #204]	; (fe0c <mem_manage_fault.isra.4+0xf4>)
    fd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd40:	06d9      	lsls	r1, r3, #27
    fd42:	d509      	bpl.n	fd58 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    fd44:	f04f 0100 	mov.w	r1, #0
    fd48:	2301      	movs	r3, #1
    fd4a:	f363 0107 	bfi	r1, r3, #0, #8
    fd4e:	f364 118f 	bfi	r1, r4, #6, #10
    fd52:	482f      	ldr	r0, [pc, #188]	; (fe10 <mem_manage_fault.isra.4+0xf8>)
    fd54:	f00c ff09 	bl	1cb6a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    fd58:	4b2c      	ldr	r3, [pc, #176]	; (fe0c <mem_manage_fault.isra.4+0xf4>)
    fd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd5c:	071a      	lsls	r2, r3, #28
    fd5e:	d509      	bpl.n	fd74 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    fd60:	f04f 0100 	mov.w	r1, #0
    fd64:	2301      	movs	r3, #1
    fd66:	f363 0107 	bfi	r1, r3, #0, #8
    fd6a:	f364 118f 	bfi	r1, r4, #6, #10
    fd6e:	4829      	ldr	r0, [pc, #164]	; (fe14 <mem_manage_fault.isra.4+0xfc>)
    fd70:	f00c fefb 	bl	1cb6a <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    fd74:	4d25      	ldr	r5, [pc, #148]	; (fe0c <mem_manage_fault.isra.4+0xf4>)
    fd76:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fd78:	079b      	lsls	r3, r3, #30
    fd7a:	d51c      	bpl.n	fdb6 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    fd7c:	2301      	movs	r3, #1
    fd7e:	f04f 0100 	mov.w	r1, #0
    fd82:	f363 0107 	bfi	r1, r3, #0, #8
    fd86:	f364 118f 	bfi	r1, r4, #6, #10
    fd8a:	4823      	ldr	r0, [pc, #140]	; (fe18 <mem_manage_fault.isra.4+0x100>)
    fd8c:	f00c feed 	bl	1cb6a <log_0>
		mmfar = SCB->MMFAR;
    fd90:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    fd92:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fd94:	0618      	lsls	r0, r3, #24
    fd96:	d50e      	bpl.n	fdb6 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    fd98:	f04f 0200 	mov.w	r2, #0
    fd9c:	2301      	movs	r3, #1
    fd9e:	f363 0207 	bfi	r2, r3, #0, #8
    fda2:	f364 128f 	bfi	r2, r4, #6, #10
    fda6:	481d      	ldr	r0, [pc, #116]	; (fe1c <mem_manage_fault.isra.4+0x104>)
    fda8:	f00c feec 	bl	1cb84 <log_1>
			if (from_hard_fault) {
    fdac:	b11f      	cbz	r7, fdb6 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    fdae:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fdb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    fdb4:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    fdb6:	4b15      	ldr	r3, [pc, #84]	; (fe0c <mem_manage_fault.isra.4+0xf4>)
    fdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fdba:	07da      	lsls	r2, r3, #31
    fdbc:	d509      	bpl.n	fdd2 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    fdbe:	f04f 0100 	mov.w	r1, #0
    fdc2:	2301      	movs	r3, #1
    fdc4:	f363 0107 	bfi	r1, r3, #0, #8
    fdc8:	f364 118f 	bfi	r1, r4, #6, #10
    fdcc:	4814      	ldr	r0, [pc, #80]	; (fe20 <mem_manage_fault.isra.4+0x108>)
    fdce:	f00c fecc 	bl	1cb6a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    fdd2:	4b0e      	ldr	r3, [pc, #56]	; (fe0c <mem_manage_fault.isra.4+0xf4>)
    fdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fdd6:	069b      	lsls	r3, r3, #26
    fdd8:	d509      	bpl.n	fdee <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    fdda:	f04f 0100 	mov.w	r1, #0
    fdde:	2301      	movs	r3, #1
    fde0:	f363 0107 	bfi	r1, r3, #0, #8
    fde4:	f364 118f 	bfi	r1, r4, #6, #10
    fde8:	480e      	ldr	r0, [pc, #56]	; (fe24 <mem_manage_fault.isra.4+0x10c>)
    fdea:	f00c febe 	bl	1cb6a <log_0>
	*recoverable = memory_fault_recoverable(esf);
    fdee:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    fdf0:	4b06      	ldr	r3, [pc, #24]	; (fe0c <mem_manage_fault.isra.4+0xf4>)
    fdf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    fdf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fdf6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    fdfa:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    fdfc:	7030      	strb	r0, [r6, #0]
}
    fdfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe00:	0001f3d0 	.word	0x0001f3d0
    fe04:	0001f370 	.word	0x0001f370
    fe08:	0002078c 	.word	0x0002078c
    fe0c:	e000ed00 	.word	0xe000ed00
    fe10:	000207a2 	.word	0x000207a2
    fe14:	000207d5 	.word	0x000207d5
    fe18:	000207e8 	.word	0x000207e8
    fe1c:	00020800 	.word	0x00020800
    fe20:	00020816 	.word	0x00020816
    fe24:	00020835 	.word	0x00020835

0000fe28 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fe28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    fe2a:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fe2c:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    fe2e:	f04f 0100 	mov.w	r1, #0
    fe32:	4c3d      	ldr	r4, [pc, #244]	; (ff28 <bus_fault.isra.5+0x100>)
    fe34:	f363 0107 	bfi	r1, r3, #0, #8
    fe38:	4b3c      	ldr	r3, [pc, #240]	; (ff2c <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fe3a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    fe3c:	1ae4      	subs	r4, r4, r3
    fe3e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fe42:	f364 118f 	bfi	r1, r4, #6, #10
    fe46:	483a      	ldr	r0, [pc, #232]	; (ff30 <bus_fault.isra.5+0x108>)
    fe48:	f00c fe8f 	bl	1cb6a <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    fe4c:	4b39      	ldr	r3, [pc, #228]	; (ff34 <bus_fault.isra.5+0x10c>)
    fe4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fe50:	04d9      	lsls	r1, r3, #19
    fe52:	d509      	bpl.n	fe68 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    fe54:	f04f 0100 	mov.w	r1, #0
    fe58:	2301      	movs	r3, #1
    fe5a:	f363 0107 	bfi	r1, r3, #0, #8
    fe5e:	f364 118f 	bfi	r1, r4, #6, #10
    fe62:	4835      	ldr	r0, [pc, #212]	; (ff38 <bus_fault.isra.5+0x110>)
    fe64:	f00c fe81 	bl	1cb6a <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    fe68:	4b32      	ldr	r3, [pc, #200]	; (ff34 <bus_fault.isra.5+0x10c>)
    fe6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fe6c:	051a      	lsls	r2, r3, #20
    fe6e:	d509      	bpl.n	fe84 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    fe70:	f04f 0100 	mov.w	r1, #0
    fe74:	2301      	movs	r3, #1
    fe76:	f363 0107 	bfi	r1, r3, #0, #8
    fe7a:	f364 118f 	bfi	r1, r4, #6, #10
    fe7e:	482f      	ldr	r0, [pc, #188]	; (ff3c <bus_fault.isra.5+0x114>)
    fe80:	f00c fe73 	bl	1cb6a <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    fe84:	4d2b      	ldr	r5, [pc, #172]	; (ff34 <bus_fault.isra.5+0x10c>)
    fe86:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe88:	059b      	lsls	r3, r3, #22
    fe8a:	d51c      	bpl.n	fec6 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    fe8c:	2301      	movs	r3, #1
    fe8e:	f04f 0100 	mov.w	r1, #0
    fe92:	f363 0107 	bfi	r1, r3, #0, #8
    fe96:	f364 118f 	bfi	r1, r4, #6, #10
    fe9a:	4829      	ldr	r0, [pc, #164]	; (ff40 <bus_fault.isra.5+0x118>)
    fe9c:	f00c fe65 	bl	1cb6a <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    fea0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    fea2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fea4:	0418      	lsls	r0, r3, #16
    fea6:	d50e      	bpl.n	fec6 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    fea8:	f04f 0200 	mov.w	r2, #0
    feac:	2301      	movs	r3, #1
    feae:	f363 0207 	bfi	r2, r3, #0, #8
    feb2:	f364 128f 	bfi	r2, r4, #6, #10
    feb6:	4823      	ldr	r0, [pc, #140]	; (ff44 <bus_fault.isra.5+0x11c>)
    feb8:	f00c fe64 	bl	1cb84 <log_1>
			if (from_hard_fault) {
    febc:	b11f      	cbz	r7, fec6 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    febe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fec0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    fec4:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    fec6:	4b1b      	ldr	r3, [pc, #108]	; (ff34 <bus_fault.isra.5+0x10c>)
    fec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    feca:	0559      	lsls	r1, r3, #21
    fecc:	d509      	bpl.n	fee2 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    fece:	f04f 0100 	mov.w	r1, #0
    fed2:	2301      	movs	r3, #1
    fed4:	f363 0107 	bfi	r1, r3, #0, #8
    fed8:	f364 118f 	bfi	r1, r4, #6, #10
    fedc:	481a      	ldr	r0, [pc, #104]	; (ff48 <bus_fault.isra.5+0x120>)
    fede:	f00c fe44 	bl	1cb6a <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    fee2:	4b14      	ldr	r3, [pc, #80]	; (ff34 <bus_fault.isra.5+0x10c>)
    fee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fee6:	05d2      	lsls	r2, r2, #23
    fee8:	d511      	bpl.n	ff0e <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    feea:	f04f 0100 	mov.w	r1, #0
    feee:	2301      	movs	r3, #1
    fef0:	4816      	ldr	r0, [pc, #88]	; (ff4c <bus_fault.isra.5+0x124>)
    fef2:	f363 0107 	bfi	r1, r3, #0, #8
    fef6:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    fefa:	f00c fe36 	bl	1cb6a <log_0>
	*recoverable = memory_fault_recoverable(esf);
    fefe:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ff00:	4a0c      	ldr	r2, [pc, #48]	; (ff34 <bus_fault.isra.5+0x10c>)
    ff02:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ff04:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    ff08:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    ff0a:	7030      	strb	r0, [r6, #0]
}
    ff0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    ff0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ff10:	049b      	lsls	r3, r3, #18
    ff12:	d5f4      	bpl.n	fefe <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    ff14:	f04f 0100 	mov.w	r1, #0
    ff18:	2301      	movs	r3, #1
    ff1a:	f363 0107 	bfi	r1, r3, #0, #8
    ff1e:	f364 118f 	bfi	r1, r4, #6, #10
    ff22:	480b      	ldr	r0, [pc, #44]	; (ff50 <bus_fault.isra.5+0x128>)
    ff24:	e7e9      	b.n	fefa <bus_fault.isra.5+0xd2>
    ff26:	bf00      	nop
    ff28:	0001f3d0 	.word	0x0001f3d0
    ff2c:	0001f370 	.word	0x0001f370
    ff30:	00020704 	.word	0x00020704
    ff34:	e000ed00 	.word	0xe000ed00
    ff38:	0002071a 	.word	0x0002071a
    ff3c:	000207d5 	.word	0x000207d5
    ff40:	0002072b 	.word	0x0002072b
    ff44:	00020744 	.word	0x00020744
    ff48:	00020759 	.word	0x00020759
    ff4c:	00020774 	.word	0x00020774
    ff50:	00020835 	.word	0x00020835

0000ff54 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    ff54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff58:	4b69      	ldr	r3, [pc, #420]	; (10100 <z_arm_fault+0x1ac>)
{
    ff5a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff5c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    ff60:	4606      	mov	r6, r0
    ff62:	4689      	mov	r9, r1
    ff64:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ff66:	f3c8 0708 	ubfx	r7, r8, #0, #9
    ff6a:	2500      	movs	r5, #0
    ff6c:	f385 8811 	msr	BASEPRI, r5
    ff70:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    ff74:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    ff78:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    ff7c:	d128      	bne.n	ffd0 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    ff7e:	07d0      	lsls	r0, r2, #31
    ff80:	d426      	bmi.n	ffd0 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    ff82:	0651      	lsls	r1, r2, #25
    ff84:	d403      	bmi.n	ff8e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    ff86:	0722      	lsls	r2, r4, #28
    ff88:	d412      	bmi.n	ffb0 <z_arm_fault+0x5c>
			*nested_exc = true;
    ff8a:	2501      	movs	r5, #1
    ff8c:	e012      	b.n	ffb4 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    ff8e:	2301      	movs	r3, #1
    ff90:	f04f 0100 	mov.w	r1, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    ff94:	4a5b      	ldr	r2, [pc, #364]	; (10104 <z_arm_fault+0x1b0>)
    ff96:	f363 0107 	bfi	r1, r3, #0, #8
    ff9a:	4b5b      	ldr	r3, [pc, #364]	; (10108 <z_arm_fault+0x1b4>)
    ff9c:	485b      	ldr	r0, [pc, #364]	; (1010c <z_arm_fault+0x1b8>)
    ff9e:	1a9b      	subs	r3, r3, r2
    ffa0:	08db      	lsrs	r3, r3, #3
    ffa2:	f363 118f 	bfi	r1, r3, #6, #10
    ffa6:	f00c fde0 	bl	1cb6a <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    ffaa:	f014 0504 	ands.w	r5, r4, #4
    ffae:	d001      	beq.n	ffb4 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    ffb0:	464e      	mov	r6, r9
	*nested_exc = false;
    ffb2:	2500      	movs	r5, #0
	*recoverable = false;
    ffb4:	2300      	movs	r3, #0
    ffb6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    ffba:	1efb      	subs	r3, r7, #3
    ffbc:	2b09      	cmp	r3, #9
    ffbe:	f200 8082 	bhi.w	100c6 <z_arm_fault+0x172>
    ffc2:	e8df f003 	tbb	[pc, r3]
    ffc6:	6b07      	.short	0x6b07
    ffc8:	80804e6f 	.word	0x80804e6f
    ffcc:	73808080 	.word	0x73808080
		return NULL;
    ffd0:	462e      	mov	r6, r5
    ffd2:	e7ef      	b.n	ffb4 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    ffd4:	2301      	movs	r3, #1
    ffd6:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    ffda:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    ffde:	f363 0107 	bfi	r1, r3, #0, #8
    ffe2:	4f49      	ldr	r7, [pc, #292]	; (10108 <z_arm_fault+0x1b4>)
    ffe4:	4b47      	ldr	r3, [pc, #284]	; (10104 <z_arm_fault+0x1b0>)
    ffe6:	484a      	ldr	r0, [pc, #296]	; (10110 <z_arm_fault+0x1bc>)
    ffe8:	1aff      	subs	r7, r7, r3
    ffea:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    ffee:	f367 118f 	bfi	r1, r7, #6, #10
    fff2:	f00c fdba 	bl	1cb6a <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fff6:	4b42      	ldr	r3, [pc, #264]	; (10100 <z_arm_fault+0x1ac>)
	*recoverable = false;
    fff8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fffc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    fffe:	f014 0402 	ands.w	r4, r4, #2
   10002:	d00b      	beq.n	1001c <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   10004:	f04f 0100 	mov.w	r1, #0
   10008:	2301      	movs	r3, #1
   1000a:	4842      	ldr	r0, [pc, #264]	; (10114 <z_arm_fault+0x1c0>)
   1000c:	f363 0107 	bfi	r1, r3, #0, #8
   10010:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
   10014:	f00c fda9 	bl	1cb6a <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   10018:	2400      	movs	r4, #0
   1001a:	e025      	b.n	10068 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1001c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1001e:	005b      	lsls	r3, r3, #1
   10020:	d522      	bpl.n	10068 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
   10022:	2301      	movs	r3, #1
   10024:	f04f 0100 	mov.w	r1, #0
   10028:	f363 0107 	bfi	r1, r3, #0, #8
   1002c:	f367 118f 	bfi	r1, r7, #6, #10
   10030:	4839      	ldr	r0, [pc, #228]	; (10118 <z_arm_fault+0x1c4>)
   10032:	f00c fd9a 	bl	1cb6a <log_0>
		if (SCB_MMFSR != 0) {
   10036:	4b39      	ldr	r3, [pc, #228]	; (1011c <z_arm_fault+0x1c8>)
   10038:	781b      	ldrb	r3, [r3, #0]
   1003a:	b12b      	cbz	r3, 10048 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
   1003c:	2001      	movs	r0, #1
   1003e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10042:	f7ff fe69 	bl	fd18 <mem_manage_fault.isra.4>
   10046:	e00e      	b.n	10066 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
   10048:	4b35      	ldr	r3, [pc, #212]	; (10120 <z_arm_fault+0x1cc>)
   1004a:	781b      	ldrb	r3, [r3, #0]
   1004c:	b12b      	cbz	r3, 1005a <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
   1004e:	2001      	movs	r0, #1
   10050:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   10054:	f7ff fee8 	bl	fe28 <bus_fault.isra.5>
   10058:	e005      	b.n	10066 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
   1005a:	4b32      	ldr	r3, [pc, #200]	; (10124 <z_arm_fault+0x1d0>)
   1005c:	881b      	ldrh	r3, [r3, #0]
   1005e:	b29b      	uxth	r3, r3
   10060:	b113      	cbz	r3, 10068 <z_arm_fault+0x114>
			reason = usage_fault(esf);
   10062:	f7ff fdc7 	bl	fbf4 <usage_fault.isra.2>
   10066:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   10068:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1006c:	b99b      	cbnz	r3, 10096 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1006e:	2268      	movs	r2, #104	; 0x68
   10070:	4631      	mov	r1, r6
   10072:	a802      	add	r0, sp, #8
   10074:	f00d faef 	bl	1d656 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   10078:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1007a:	2d00      	cmp	r5, #0
   1007c:	d03a      	beq.n	100f4 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1007e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   10082:	b922      	cbnz	r2, 1008e <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   10084:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10088:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1008c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1008e:	a902      	add	r1, sp, #8
   10090:	4620      	mov	r0, r4
   10092:	f7ff fcb1 	bl	f9f8 <z_arm_fatal_error>
}
   10096:	b01d      	add	sp, #116	; 0x74
   10098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1009c:	f10d 0107 	add.w	r1, sp, #7
   100a0:	2000      	movs	r0, #0
   100a2:	e7ce      	b.n	10042 <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
   100a4:	f10d 0107 	add.w	r1, sp, #7
   100a8:	2000      	movs	r0, #0
   100aa:	e7d3      	b.n	10054 <z_arm_fault+0x100>
	PR_FAULT_INFO(
   100ac:	2301      	movs	r3, #1
   100ae:	f04f 0100 	mov.w	r1, #0
   100b2:	4a14      	ldr	r2, [pc, #80]	; (10104 <z_arm_fault+0x1b0>)
   100b4:	f363 0107 	bfi	r1, r3, #0, #8
   100b8:	4b13      	ldr	r3, [pc, #76]	; (10108 <z_arm_fault+0x1b4>)
   100ba:	481b      	ldr	r0, [pc, #108]	; (10128 <z_arm_fault+0x1d4>)
   100bc:	1a9b      	subs	r3, r3, r2
   100be:	08db      	lsrs	r3, r3, #3
   100c0:	f363 118f 	bfi	r1, r3, #6, #10
   100c4:	e7a6      	b.n	10014 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
   100c6:	2201      	movs	r2, #1
   100c8:	f04f 0300 	mov.w	r3, #0
   100cc:	490e      	ldr	r1, [pc, #56]	; (10108 <z_arm_fault+0x1b4>)
   100ce:	f362 0307 	bfi	r3, r2, #0, #8
   100d2:	4a0c      	ldr	r2, [pc, #48]	; (10104 <z_arm_fault+0x1b0>)
   100d4:	4815      	ldr	r0, [pc, #84]	; (1012c <z_arm_fault+0x1d8>)
   100d6:	1a89      	subs	r1, r1, r2
   100d8:	08c9      	lsrs	r1, r1, #3
   100da:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   100de:	f361 138f 	bfi	r3, r1, #6, #10
   100e2:	f1a7 0210 	sub.w	r2, r7, #16
   100e6:	4912      	ldr	r1, [pc, #72]	; (10130 <z_arm_fault+0x1dc>)
   100e8:	bf18      	it	ne
   100ea:	4601      	movne	r1, r0
   100ec:	4811      	ldr	r0, [pc, #68]	; (10134 <z_arm_fault+0x1e0>)
   100ee:	f00c fd5d 	bl	1cbac <log_2>
   100f2:	e791      	b.n	10018 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   100f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   100f8:	f023 0301 	bic.w	r3, r3, #1
   100fc:	e7c6      	b.n	1008c <z_arm_fault+0x138>
   100fe:	bf00      	nop
   10100:	e000ed00 	.word	0xe000ed00
   10104:	0001f370 	.word	0x0001f370
   10108:	0001f3d0 	.word	0x0001f3d0
   1010c:	0002095b 	.word	0x0002095b
   10110:	0002097e 	.word	0x0002097e
   10114:	00020995 	.word	0x00020995
   10118:	000209b6 	.word	0x000209b6
   1011c:	e000ed28 	.word	0xe000ed28
   10120:	e000ed29 	.word	0xe000ed29
   10124:	e000ed2a 	.word	0xe000ed2a
   10128:	000209d5 	.word	0x000209d5
   1012c:	00020a20 	.word	0x00020a20
   10130:	00020a0b 	.word	0x00020a0b
   10134:	00020a39 	.word	0x00020a39

00010138 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10138:	4a02      	ldr	r2, [pc, #8]	; (10144 <z_arm_fault_init+0xc>)
   1013a:	6953      	ldr	r3, [r2, #20]
   1013c:	f043 0310 	orr.w	r3, r3, #16
   10140:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   10142:	4770      	bx	lr
   10144:	e000ed00 	.word	0xe000ed00

00010148 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   10148:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1014c:	4905      	ldr	r1, [pc, #20]	; (10164 <sys_arch_reboot+0x1c>)
   1014e:	4b06      	ldr	r3, [pc, #24]	; (10168 <sys_arch_reboot+0x20>)
   10150:	68ca      	ldr	r2, [r1, #12]
   10152:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   10156:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10158:	60cb      	str	r3, [r1, #12]
   1015a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1015e:	bf00      	nop
   10160:	e7fd      	b.n	1015e <sys_arch_reboot+0x16>
   10162:	bf00      	nop
   10164:	e000ed00 	.word	0xe000ed00
   10168:	05fa0004 	.word	0x05fa0004

0001016c <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   1016c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1016e:	2120      	movs	r1, #32
   10170:	4803      	ldr	r0, [pc, #12]	; (10180 <z_arm_int_lib_init+0x14>)
   10172:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10174:	3301      	adds	r3, #1
   10176:	2b41      	cmp	r3, #65	; 0x41
   10178:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1017c:	d1f9      	bne.n	10172 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1017e:	4770      	bx	lr
   10180:	e000e100 	.word	0xe000e100

00010184 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   10184:	b538      	push	{r3, r4, r5, lr}
   10186:	4605      	mov	r5, r0
	__asm__ volatile(
   10188:	f04f 0320 	mov.w	r3, #32
   1018c:	f3ef 8411 	mrs	r4, BASEPRI
   10190:	f383 8811 	msr	BASEPRI, r3
   10194:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   10198:	f00e fdca 	bl	1ed30 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   1019c:	4b0b      	ldr	r3, [pc, #44]	; (101cc <z_impl_k_thread_abort+0x48>)
   1019e:	689b      	ldr	r3, [r3, #8]
   101a0:	42ab      	cmp	r3, r5
   101a2:	d10d      	bne.n	101c0 <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   101a4:	4b0a      	ldr	r3, [pc, #40]	; (101d0 <z_impl_k_thread_abort+0x4c>)
   101a6:	685a      	ldr	r2, [r3, #4]
   101a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
   101ac:	b922      	cbnz	r2, 101b8 <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
   101ae:	f00b fe07 	bl	1bdc0 <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   101b2:	4620      	mov	r0, r4
   101b4:	f7ff fb04 	bl	f7c0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   101b8:	685a      	ldr	r2, [r3, #4]
   101ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   101be:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   101c0:	4620      	mov	r0, r4
}
   101c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   101c6:	f00e bccd 	b.w	1eb64 <z_reschedule_irqlock>
   101ca:	bf00      	nop
   101cc:	20024d28 	.word	0x20024d28
   101d0:	e000ed00 	.word	0xe000ed00

000101d4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   101d4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   101d6:	4b0e      	ldr	r3, [pc, #56]	; (10210 <z_arm_configure_static_mpu_regions+0x3c>)
{
   101d8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   101da:	9302      	str	r3, [sp, #8]
   101dc:	4b0d      	ldr	r3, [pc, #52]	; (10214 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   101de:	4c0e      	ldr	r4, [pc, #56]	; (10218 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   101e0:	9303      	str	r3, [sp, #12]
   101e2:	4b0e      	ldr	r3, [pc, #56]	; (1021c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   101e4:	4a0e      	ldr	r2, [pc, #56]	; (10220 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   101e6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   101e8:	ab02      	add	r3, sp, #8
   101ea:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   101ec:	a801      	add	r0, sp, #4
   101ee:	4623      	mov	r3, r4
   101f0:	2101      	movs	r1, #1
   101f2:	f000 f951 	bl	10498 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   101f6:	2300      	movs	r3, #0
   101f8:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   101fa:	4b0a      	ldr	r3, [pc, #40]	; (10224 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   101fc:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   101fe:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10200:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   10202:	9305      	str	r3, [sp, #20]
   10204:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   10206:	f000 f951 	bl	104ac <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1020a:	b008      	add	sp, #32
   1020c:	bd10      	pop	{r4, pc}
   1020e:	bf00      	nop
   10210:	20020000 	.word	0x20020000
   10214:	00000000 	.word	0x00000000
   10218:	20040000 	.word	0x20040000
   1021c:	00010006 	.word	0x00010006
   10220:	20020000 	.word	0x20020000
   10224:	20020000 	.word	0x20020000

00010228 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   10228:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1022a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1022c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1022e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   10232:	f004 031f 	and.w	r3, r4, #31
   10236:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10238:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1023a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1023c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   10240:	4904      	ldr	r1, [pc, #16]	; (10254 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10242:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   10246:	f043 0301 	orr.w	r3, r3, #1
   1024a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1024c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1024e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   10250:	bd10      	pop	{r4, pc}
   10252:	bf00      	nop
   10254:	e000ed90 	.word	0xe000ed90

00010258 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   10258:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1025a:	f04f 0200 	mov.w	r2, #0
   1025e:	2301      	movs	r3, #1
   10260:	4907      	ldr	r1, [pc, #28]	; (10280 <region_allocate_and_init.part.0+0x28>)
   10262:	f363 0207 	bfi	r2, r3, #0, #8
   10266:	4b07      	ldr	r3, [pc, #28]	; (10284 <region_allocate_and_init.part.0+0x2c>)
   10268:	1a5b      	subs	r3, r3, r1
   1026a:	08db      	lsrs	r3, r3, #3
   1026c:	4601      	mov	r1, r0
   1026e:	f363 128f 	bfi	r2, r3, #6, #10
   10272:	4805      	ldr	r0, [pc, #20]	; (10288 <region_allocate_and_init.part.0+0x30>)
   10274:	f00c fc86 	bl	1cb84 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10278:	f06f 0015 	mvn.w	r0, #21
   1027c:	bd08      	pop	{r3, pc}
   1027e:	bf00      	nop
   10280:	0001f370 	.word	0x0001f370
   10284:	0001f3c0 	.word	0x0001f3c0
   10288:	00020a96 	.word	0x00020a96

0001028c <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1028c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10290:	4607      	mov	r7, r0
   10292:	4688      	mov	r8, r1
   10294:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   10296:	2600      	movs	r6, #0
	MPU->RNR = index;
   10298:	4d5e      	ldr	r5, [pc, #376]	; (10414 <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1029a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1029c:	4546      	cmp	r6, r8
   1029e:	da3d      	bge.n	1031c <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   102a0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   102a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
   102a8:	f1b9 0f00 	cmp.w	r9, #0
   102ac:	d059      	beq.n	10362 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   102ae:	f1b9 0f1f 	cmp.w	r9, #31
   102b2:	d922      	bls.n	102fa <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   102b4:	f019 0f1f 	tst.w	r9, #31
   102b8:	d11f      	bne.n	102fa <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   102ba:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   102be:	f01a 0f1f 	tst.w	sl, #31
   102c2:	d11a      	bne.n	102fa <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   102c4:	4650      	mov	r0, sl
   102c6:	f00d f818 	bl	1d2fa <arm_cmse_mpu_region_get>
   102ca:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   102cc:	eb09 000a 	add.w	r0, r9, sl
   102d0:	3801      	subs	r0, #1
   102d2:	f00d f812 	bl	1d2fa <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   102d6:	4583      	cmp	fp, r0
   102d8:	d024      	beq.n	10324 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   102da:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   102de:	2301      	movs	r3, #1
   102e0:	f04f 0200 	mov.w	r2, #0
   102e4:	494c      	ldr	r1, [pc, #304]	; (10418 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
   102e6:	f363 0207 	bfi	r2, r3, #0, #8
   102ea:	4b4c      	ldr	r3, [pc, #304]	; (1041c <mpu_configure_regions_and_partition.constprop.2+0x190>)
   102ec:	484c      	ldr	r0, [pc, #304]	; (10420 <mpu_configure_regions_and_partition.constprop.2+0x194>)
   102ee:	1a5b      	subs	r3, r3, r1
   102f0:	08db      	lsrs	r3, r3, #3
   102f2:	f363 128f 	bfi	r2, r3, #6, #10
   102f6:	4659      	mov	r1, fp
   102f8:	e00c      	b.n	10314 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   102fa:	2301      	movs	r3, #1
   102fc:	f04f 0200 	mov.w	r2, #0
   10300:	4945      	ldr	r1, [pc, #276]	; (10418 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
   10302:	f363 0207 	bfi	r2, r3, #0, #8
   10306:	4b45      	ldr	r3, [pc, #276]	; (1041c <mpu_configure_regions_and_partition.constprop.2+0x190>)
   10308:	4846      	ldr	r0, [pc, #280]	; (10424 <mpu_configure_regions_and_partition.constprop.2+0x198>)
   1030a:	1a5b      	subs	r3, r3, r1
   1030c:	4631      	mov	r1, r6
   1030e:	08db      	lsrs	r3, r3, #3
   10310:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   10314:	f00c fc36 	bl	1cb84 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   10318:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1031c:	4620      	mov	r0, r4
   1031e:	b005      	add	sp, #20
   10320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10324:	f11b 0f16 	cmn.w	fp, #22
   10328:	d0d9      	beq.n	102de <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   1032a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1032c:	455b      	cmp	r3, fp
   1032e:	dbd6      	blt.n	102de <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   10330:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10334:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   10336:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1033a:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1033c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10340:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10344:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10348:	e9d1 3200 	ldrd	r3, r2, [r1]
   1034c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1034e:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10350:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   10354:	d118      	bne.n	10388 <mpu_configure_regions_and_partition.constprop.2+0xfc>
   10356:	45ca      	cmp	sl, r9
   10358:	d105      	bne.n	10366 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   1035a:	fa5f f08b 	uxtb.w	r0, fp
   1035e:	f00c ffa9 	bl	1d2b4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10362:	3601      	adds	r6, #1
   10364:	e79a      	b.n	1029c <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   10366:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1036a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1036c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10370:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10374:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10376:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   10378:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1037a:	f00c ff9b 	bl	1d2b4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1037e:	f110 0f16 	cmn.w	r0, #22
   10382:	d0c9      	beq.n	10318 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   10384:	1c44      	adds	r4, r0, #1
   10386:	e7ec      	b.n	10362 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   10388:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1038c:	692a      	ldr	r2, [r5, #16]
   1038e:	3b01      	subs	r3, #1
   10390:	f023 031f 	bic.w	r3, r3, #31
   10394:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10398:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1039a:	45ca      	cmp	sl, r9
   1039c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1039e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   103a0:	d0eb      	beq.n	1037a <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   103a2:	f00c ff87 	bl	1d2b4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   103a6:	f110 0f16 	cmn.w	r0, #22
   103aa:	d0b5      	beq.n	10318 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   103ac:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   103b0:	68ea      	ldr	r2, [r5, #12]
   103b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   103b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   103ba:	f362 0304 	bfi	r3, r2, #0, #5
   103be:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   103c2:	692b      	ldr	r3, [r5, #16]
   103c4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   103c8:	085b      	lsrs	r3, r3, #1
   103ca:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   103ce:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   103d2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   103d6:	e9d3 1300 	ldrd	r1, r3, [r3]
   103da:	440b      	add	r3, r1
   103dc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   103de:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   103e2:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   103e4:	4453      	add	r3, sl
   103e6:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   103ea:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   103ec:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   103f0:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   103f2:	9303      	str	r3, [sp, #12]
   103f4:	d908      	bls.n	10408 <mpu_configure_regions_and_partition.constprop.2+0x17c>
   103f6:	4620      	mov	r0, r4
   103f8:	f7ff ff2e 	bl	10258 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   103fc:	f110 0f16 	cmn.w	r0, #22
   10400:	4604      	mov	r4, r0
   10402:	d089      	beq.n	10318 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   10404:	3401      	adds	r4, #1
   10406:	e7ac      	b.n	10362 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
   10408:	4669      	mov	r1, sp
   1040a:	4620      	mov	r0, r4
   1040c:	f7ff ff0c 	bl	10228 <region_init>
			if (reg_index == -EINVAL) {
   10410:	e7f8      	b.n	10404 <mpu_configure_regions_and_partition.constprop.2+0x178>
   10412:	bf00      	nop
   10414:	e000ed90 	.word	0xe000ed90
   10418:	0001f370 	.word	0x0001f370
   1041c:	0001f3c0 	.word	0x0001f3c0
   10420:	00020a73 	.word	0x00020a73
   10424:	00020a50 	.word	0x00020a50

00010428 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10428:	2205      	movs	r2, #5
   1042a:	4b03      	ldr	r3, [pc, #12]	; (10438 <arm_core_mpu_enable+0x10>)
   1042c:	605a      	str	r2, [r3, #4]
   1042e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10432:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10436:	4770      	bx	lr
   10438:	e000ed90 	.word	0xe000ed90

0001043c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1043c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10440:	2200      	movs	r2, #0
   10442:	4b01      	ldr	r3, [pc, #4]	; (10448 <arm_core_mpu_disable+0xc>)
   10444:	605a      	str	r2, [r3, #4]
}
   10446:	4770      	bx	lr
   10448:	e000ed90 	.word	0xe000ed90

0001044c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   1044c:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1044e:	4d0e      	ldr	r5, [pc, #56]	; (10488 <arm_mpu_init+0x3c>)
   10450:	682e      	ldr	r6, [r5, #0]
   10452:	2e10      	cmp	r6, #16
   10454:	d815      	bhi.n	10482 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10456:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   10458:	f7ff fff0 	bl	1043c <arm_core_mpu_disable>
	MPU->MAIR0 =
   1045c:	4b0b      	ldr	r3, [pc, #44]	; (1048c <arm_mpu_init+0x40>)
   1045e:	4a0c      	ldr	r2, [pc, #48]	; (10490 <arm_mpu_init+0x44>)
   10460:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10462:	42a6      	cmp	r6, r4
   10464:	d105      	bne.n	10472 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   10466:	4b0b      	ldr	r3, [pc, #44]	; (10494 <arm_mpu_init+0x48>)
   10468:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
   1046a:	f7ff ffdd 	bl	10428 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1046e:	2000      	movs	r0, #0
}
   10470:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10472:	6869      	ldr	r1, [r5, #4]
   10474:	4620      	mov	r0, r4
   10476:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1047a:	f7ff fed5 	bl	10228 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1047e:	3401      	adds	r4, #1
   10480:	e7ef      	b.n	10462 <arm_mpu_init+0x16>
		return -1;
   10482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10486:	e7f3      	b.n	10470 <arm_mpu_init+0x24>
   10488:	0001f47c 	.word	0x0001f47c
   1048c:	e000ed90 	.word	0xe000ed90
   10490:	0044ffaa 	.word	0x0044ffaa
   10494:	20026548 	.word	0x20026548

00010498 <arm_core_mpu_configure_static_mpu_regions>:
{
   10498:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1049a:	4c03      	ldr	r4, [pc, #12]	; (104a8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1049c:	7822      	ldrb	r2, [r4, #0]
   1049e:	f7ff fef5 	bl	1028c <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   104a2:	7020      	strb	r0, [r4, #0]
}
   104a4:	bd10      	pop	{r4, pc}
   104a6:	bf00      	nop
   104a8:	20026548 	.word	0x20026548

000104ac <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   104ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104b0:	4c25      	ldr	r4, [pc, #148]	; (10548 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
   104b2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   104b4:	4680      	mov	r8, r0
   104b6:	2700      	movs	r7, #0
   104b8:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
   104ba:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   104be:	4d23      	ldr	r5, [pc, #140]	; (1054c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   104c0:	4557      	cmp	r7, sl
   104c2:	da1a      	bge.n	104fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   104c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   104c8:	9301      	str	r3, [sp, #4]
   104ca:	2b00      	cmp	r3, #0
   104cc:	d036      	beq.n	1053c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   104ce:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   104d2:	4608      	mov	r0, r1
   104d4:	9100      	str	r1, [sp, #0]
   104d6:	f00c ff10 	bl	1d2fa <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   104da:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   104de:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   104e0:	1858      	adds	r0, r3, r1
   104e2:	3801      	subs	r0, #1
   104e4:	f00c ff09 	bl	1d2fa <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   104e8:	4286      	cmp	r6, r0
   104ea:	4a19      	ldr	r2, [pc, #100]	; (10550 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
   104ec:	d008      	beq.n	10500 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   104ee:	2314      	movs	r3, #20
   104f0:	435f      	muls	r7, r3
   104f2:	f06f 0315 	mvn.w	r3, #21
   104f6:	f849 3007 	str.w	r3, [r9, r7]
}
   104fa:	b003      	add	sp, #12
   104fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10500:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   10504:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10506:	d0f8      	beq.n	104fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10508:	7813      	ldrb	r3, [r2, #0]
   1050a:	42b3      	cmp	r3, r6
   1050c:	ddf5      	ble.n	104fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   1050e:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
   10512:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   10514:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   10516:	68e8      	ldr	r0, [r5, #12]
   10518:	7b19      	ldrb	r1, [r3, #12]
   1051a:	f360 0104 	bfi	r1, r0, #0, #5
   1051e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10520:	6929      	ldr	r1, [r5, #16]
   10522:	7b18      	ldrb	r0, [r3, #12]
   10524:	0849      	lsrs	r1, r1, #1
   10526:	f361 1047 	bfi	r0, r1, #5, #3
   1052a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1052c:	68eb      	ldr	r3, [r5, #12]
   1052e:	f023 031f 	bic.w	r3, r3, #31
   10532:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   10534:	692b      	ldr	r3, [r5, #16]
   10536:	f023 031f 	bic.w	r3, r3, #31
   1053a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1053c:	3701      	adds	r7, #1
   1053e:	3414      	adds	r4, #20
   10540:	f108 080c 	add.w	r8, r8, #12
   10544:	e7bc      	b.n	104c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   10546:	bf00      	nop
   10548:	20020368 	.word	0x20020368
   1054c:	e000ed90 	.word	0xe000ed90
   10550:	20026548 	.word	0x20026548

00010554 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   10554:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   10556:	4b0c      	ldr	r3, [pc, #48]	; (10588 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   10558:	460e      	mov	r6, r1
   1055a:	781c      	ldrb	r4, [r3, #0]
   1055c:	4605      	mov	r5, r0
   1055e:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
   10560:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   10562:	4a0a      	ldr	r2, [pc, #40]	; (1058c <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10564:	2b0f      	cmp	r3, #15
   10566:	dd0b      	ble.n	10580 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   10568:	4909      	ldr	r1, [pc, #36]	; (10590 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   1056a:	f851 0b04 	ldr.w	r0, [r1], #4
   1056e:	f7ff fe5b 	bl	10228 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   10572:	4622      	mov	r2, r4
   10574:	4631      	mov	r1, r6
   10576:	4628      	mov	r0, r5
}
   10578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1057c:	f7ff be86 	b.w	1028c <mpu_configure_regions_and_partition.constprop.2>
   10580:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   10582:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10584:	3301      	adds	r3, #1
   10586:	e7ed      	b.n	10564 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
   10588:	20026548 	.word	0x20026548
   1058c:	e000ed90 	.word	0xe000ed90
   10590:	20020368 	.word	0x20020368

00010594 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
   10594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10598:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
   1059a:	2300      	movs	r3, #0
{
   1059c:	b0a3      	sub	sp, #140	; 0x8c
   1059e:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
   105a2:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
   105a4:	4613      	mov	r3, r2
   105a6:	f813 0b01 	ldrb.w	r0, [r3], #1
   105aa:	9308      	str	r3, [sp, #32]
   105ac:	b158      	cbz	r0, 105c6 <z_prf+0x32>
		if (c != '%') {
   105ae:	2825      	cmp	r0, #37	; 0x25
   105b0:	f000 8085 	beq.w	106be <z_prf+0x12a>
			PUTC(c);
   105b4:	9903      	ldr	r1, [sp, #12]
   105b6:	9b02      	ldr	r3, [sp, #8]
   105b8:	4798      	blx	r3
   105ba:	3001      	adds	r0, #1
   105bc:	f040 841a 	bne.w	10df4 <z_prf+0x860>
   105c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   105c4:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   105c6:	9801      	ldr	r0, [sp, #4]
   105c8:	b023      	add	sp, #140	; 0x8c
   105ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   105ce:	2c23      	cmp	r4, #35	; 0x23
   105d0:	d06c      	beq.n	106ac <z_prf+0x118>
   105d2:	d861      	bhi.n	10698 <z_prf+0x104>
   105d4:	2c00      	cmp	r4, #0
   105d6:	d0f6      	beq.n	105c6 <z_prf+0x32>
					fspace = true;
   105d8:	2c20      	cmp	r4, #32
   105da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   105dc:	bf08      	it	eq
   105de:	2301      	moveq	r3, #1
   105e0:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
   105e2:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   105e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   105ea:	48b7      	ldr	r0, [pc, #732]	; (108c8 <z_prf+0x334>)
   105ec:	f818 4b01 	ldrb.w	r4, [r8], #1
   105f0:	4621      	mov	r1, r4
   105f2:	f00c ffda 	bl	1d5aa <strchr>
   105f6:	2800      	cmp	r0, #0
   105f8:	d1e9      	bne.n	105ce <z_prf+0x3a>
			if (c == '*') {
   105fa:	2c2a      	cmp	r4, #42	; 0x2a
   105fc:	d166      	bne.n	106cc <z_prf+0x138>
				width = va_arg(vargs, int);
   105fe:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
   10602:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
   10606:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
   10608:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
   1060a:	bfbf      	itttt	lt
   1060c:	425b      	neglt	r3, r3
   1060e:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
   10610:	2301      	movlt	r3, #1
   10612:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
   10614:	9b08      	ldr	r3, [sp, #32]
   10616:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
   1061a:	2c2e      	cmp	r4, #46	; 0x2e
   1061c:	d17b      	bne.n	10716 <z_prf+0x182>
				if (c == '*') {
   1061e:	f898 3000 	ldrb.w	r3, [r8]
   10622:	2b2a      	cmp	r3, #42	; 0x2a
   10624:	d174      	bne.n	10710 <z_prf+0x17c>
					precision = va_arg(vargs, int);
   10626:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
   1062a:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
   1062e:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
   10632:	4621      	mov	r1, r4
   10634:	48a5      	ldr	r0, [pc, #660]	; (108cc <z_prf+0x338>)
   10636:	4627      	mov	r7, r4
   10638:	f00c ffb7 	bl	1d5aa <strchr>
   1063c:	2800      	cmp	r0, #0
   1063e:	d06d      	beq.n	1071c <z_prf+0x188>
				c = *format++;
   10640:	4643      	mov	r3, r8
   10642:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
   10646:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   10648:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
   1064a:	d107      	bne.n	1065c <z_prf+0xc8>
   1064c:	2c68      	cmp	r4, #104	; 0x68
   1064e:	d105      	bne.n	1065c <z_prf+0xc8>
					i = 'H';
   10650:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   10652:	f108 0302 	add.w	r3, r8, #2
   10656:	f898 4001 	ldrb.w	r4, [r8, #1]
   1065a:	9308      	str	r3, [sp, #32]
			switch (c) {
   1065c:	2c67      	cmp	r4, #103	; 0x67
   1065e:	d87b      	bhi.n	10758 <z_prf+0x1c4>
   10660:	2c65      	cmp	r4, #101	; 0x65
   10662:	f080 8135 	bcs.w	108d0 <z_prf+0x33c>
   10666:	2c47      	cmp	r4, #71	; 0x47
   10668:	d85c      	bhi.n	10724 <z_prf+0x190>
   1066a:	2c45      	cmp	r4, #69	; 0x45
   1066c:	f080 8130 	bcs.w	108d0 <z_prf+0x33c>
   10670:	2c00      	cmp	r4, #0
   10672:	d0a8      	beq.n	105c6 <z_prf+0x32>
   10674:	2c25      	cmp	r4, #37	; 0x25
   10676:	f000 83b9 	beq.w	10dec <z_prf+0x858>
				PUTC('%');
   1067a:	9903      	ldr	r1, [sp, #12]
   1067c:	2025      	movs	r0, #37	; 0x25
   1067e:	9b02      	ldr	r3, [sp, #8]
   10680:	4798      	blx	r3
   10682:	3001      	adds	r0, #1
   10684:	d09c      	beq.n	105c0 <z_prf+0x2c>
				PUTC(c);
   10686:	9903      	ldr	r1, [sp, #12]
   10688:	4620      	mov	r0, r4
   1068a:	9b02      	ldr	r3, [sp, #8]
   1068c:	4798      	blx	r3
   1068e:	3001      	adds	r0, #1
   10690:	d096      	beq.n	105c0 <z_prf+0x2c>
				count += 2;
   10692:	9b01      	ldr	r3, [sp, #4]
   10694:	3302      	adds	r3, #2
   10696:	e3af      	b.n	10df8 <z_prf+0x864>
				switch (c) {
   10698:	2c2d      	cmp	r4, #45	; 0x2d
   1069a:	d00a      	beq.n	106b2 <z_prf+0x11e>
   1069c:	2c30      	cmp	r4, #48	; 0x30
   1069e:	d00b      	beq.n	106b8 <z_prf+0x124>
					fplus = true;
   106a0:	2c2b      	cmp	r4, #43	; 0x2b
   106a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   106a4:	bf08      	it	eq
   106a6:	2301      	moveq	r3, #1
   106a8:	930b      	str	r3, [sp, #44]	; 0x2c
   106aa:	e79a      	b.n	105e2 <z_prf+0x4e>
					falt = true;
   106ac:	f04f 0b01 	mov.w	fp, #1
   106b0:	e797      	b.n	105e2 <z_prf+0x4e>
					fminus = true;
   106b2:	2301      	movs	r3, #1
   106b4:	930f      	str	r3, [sp, #60]	; 0x3c
   106b6:	e794      	b.n	105e2 <z_prf+0x4e>
					fzero = true;
   106b8:	2301      	movs	r3, #1
   106ba:	930a      	str	r3, [sp, #40]	; 0x28
   106bc:	e791      	b.n	105e2 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
   106be:	2300      	movs	r3, #0
   106c0:	930a      	str	r3, [sp, #40]	; 0x28
   106c2:	930e      	str	r3, [sp, #56]	; 0x38
   106c4:	930b      	str	r3, [sp, #44]	; 0x2c
   106c6:	930f      	str	r3, [sp, #60]	; 0x3c
   106c8:	469b      	mov	fp, r3
   106ca:	e78c      	b.n	105e6 <z_prf+0x52>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   106cc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   106d0:	2b09      	cmp	r3, #9
				width = 0;
   106d2:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
   106d4:	d8a1      	bhi.n	1061a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   106d6:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   106d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   106dc:	f818 4b01 	ldrb.w	r4, [r8], #1
   106e0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   106e4:	2b09      	cmp	r3, #9
   106e6:	d898      	bhi.n	1061a <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   106e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   106ea:	fb02 4403 	mla	r4, r2, r3, r4
   106ee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   106f2:	e9cd 8308 	strd	r8, r3, [sp, #32]
   106f6:	e7ef      	b.n	106d8 <z_prf+0x144>
   106f8:	4690      	mov	r8, r2
   106fa:	fb01 3505 	mla	r5, r1, r5, r3
   106fe:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   10700:	4642      	mov	r2, r8
   10702:	f812 3b01 	ldrb.w	r3, [r2], #1
   10706:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1070a:	2809      	cmp	r0, #9
   1070c:	d9f4      	bls.n	106f8 <z_prf+0x164>
   1070e:	e78e      	b.n	1062e <z_prf+0x9a>
	int i = 0;
   10710:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   10712:	210a      	movs	r1, #10
   10714:	e7f4      	b.n	10700 <z_prf+0x16c>
			precision = -1;
   10716:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1071a:	e78a      	b.n	10632 <z_prf+0x9e>
   1071c:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
   10720:	4607      	mov	r7, r0
   10722:	e79b      	b.n	1065c <z_prf+0xc8>
			switch (c) {
   10724:	2c63      	cmp	r4, #99	; 0x63
   10726:	d059      	beq.n	107dc <z_prf+0x248>
   10728:	d820      	bhi.n	1076c <z_prf+0x1d8>
   1072a:	2c58      	cmp	r4, #88	; 0x58
   1072c:	d1a5      	bne.n	1067a <z_prf+0xe6>
				if (c == 'o') {
   1072e:	2c6f      	cmp	r4, #111	; 0x6f
   10730:	f106 0904 	add.w	r9, r6, #4
   10734:	6831      	ldr	r1, [r6, #0]
   10736:	f040 8328 	bne.w	10d8a <z_prf+0x7f6>
	if (alt_form) {
   1073a:	f1bb 0f00 	cmp.w	fp, #0
   1073e:	f000 8317 	beq.w	10d70 <z_prf+0x7dc>
		*buf++ = '0';
   10742:	2330      	movs	r3, #48	; 0x30
   10744:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
   10748:	2900      	cmp	r1, #0
   1074a:	f040 831b 	bne.w	10d84 <z_prf+0x7f0>
			*buf++ = 0;
   1074e:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
   10752:	460f      	mov	r7, r1
			return 1;
   10754:	2601      	movs	r6, #1
   10756:	e025      	b.n	107a4 <z_prf+0x210>
			switch (c) {
   10758:	2c70      	cmp	r4, #112	; 0x70
   1075a:	f000 82f5 	beq.w	10d48 <z_prf+0x7b4>
   1075e:	d827      	bhi.n	107b0 <z_prf+0x21c>
   10760:	2c6e      	cmp	r4, #110	; 0x6e
   10762:	f000 82de 	beq.w	10d22 <z_prf+0x78e>
   10766:	d8e2      	bhi.n	1072e <z_prf+0x19a>
   10768:	2c69      	cmp	r4, #105	; 0x69
   1076a:	d186      	bne.n	1067a <z_prf+0xe6>
				switch (i) {
   1076c:	6837      	ldr	r7, [r6, #0]
   1076e:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
   10772:	2f00      	cmp	r7, #0
   10774:	f280 809a 	bge.w	108ac <z_prf+0x318>
		*buf++ = '-';
   10778:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   1077a:	4279      	negs	r1, r7
		*buf++ = '-';
   1077c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
   10780:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
   10784:	4630      	mov	r0, r6
   10786:	220a      	movs	r2, #10
   10788:	f00c ffb1 	bl	1d6ee <_to_x>
				if (fplus || fspace || val < 0) {
   1078c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
   1078e:	4406      	add	r6, r0
   10790:	a81b      	add	r0, sp, #108	; 0x6c
   10792:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
   10794:	2b00      	cmp	r3, #0
   10796:	f040 8332 	bne.w	10dfe <z_prf+0x86a>
   1079a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1079c:	2b00      	cmp	r3, #0
   1079e:	f040 832e 	bne.w	10dfe <z_prf+0x86a>
   107a2:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
   107a4:	2d00      	cmp	r5, #0
   107a6:	da21      	bge.n	107ec <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
   107a8:	2500      	movs	r5, #0
   107aa:	46ab      	mov	fp, r5
   107ac:	46a8      	mov	r8, r5
   107ae:	e0e1      	b.n	10974 <z_prf+0x3e0>
			switch (c) {
   107b0:	2c75      	cmp	r4, #117	; 0x75
   107b2:	d0bc      	beq.n	1072e <z_prf+0x19a>
   107b4:	2c78      	cmp	r4, #120	; 0x78
   107b6:	d0ba      	beq.n	1072e <z_prf+0x19a>
   107b8:	2c73      	cmp	r4, #115	; 0x73
   107ba:	f47f af5e 	bne.w	1067a <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
   107be:	46b1      	mov	r9, r6
					precision = INT_MAX;
   107c0:	2d00      	cmp	r5, #0
   107c2:	bfb8      	it	lt
   107c4:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   107c8:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
   107ca:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
   107ce:	42b5      	cmp	r5, r6
   107d0:	f040 82c9 	bne.w	10d66 <z_prf+0x7d2>
   107d4:	462e      	mov	r6, r5
   107d6:	2500      	movs	r5, #0
   107d8:	462f      	mov	r7, r5
   107da:	e008      	b.n	107ee <z_prf+0x25a>
				break;
   107dc:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
   107de:	46b1      	mov	r9, r6
				break;
   107e0:	463d      	mov	r5, r7
				clen = 1;
   107e2:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
   107e4:	f859 3b04 	ldr.w	r3, [r9], #4
   107e8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
   107ec:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
   107ee:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   107f0:	2500      	movs	r5, #0
   107f2:	46ab      	mov	fp, r5
   107f4:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
   107f6:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
   107f8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
   107fc:	1991      	adds	r1, r2, r6
   107fe:	9106      	str	r1, [sp, #24]
   10800:	9909      	ldr	r1, [sp, #36]	; 0x24
   10802:	1990      	adds	r0, r2, r6
   10804:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
   10806:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10808:	b911      	cbnz	r1, 10810 <z_prf+0x27c>
   1080a:	2c00      	cmp	r4, #0
   1080c:	f300 8314 	bgt.w	10e38 <z_prf+0x8a4>
			while (prefix-- > 0) {
   10810:	eb03 0a07 	add.w	sl, r3, r7
   10814:	4553      	cmp	r3, sl
   10816:	f040 8313 	bne.w	10e40 <z_prf+0x8ac>
			while (zero_head-- > 0) {
   1081a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   1081e:	f080 831d 	bcs.w	10e5c <z_prf+0x8c8>
			clen -= prefix;
   10822:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
   10824:	f1b8 0f00 	cmp.w	r8, #0
   10828:	d011      	beq.n	1084e <z_prf+0x2ba>
				c = *cptr;
   1082a:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
   1082e:	eb0a 0706 	add.w	r7, sl, r6
   10832:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10836:	2b09      	cmp	r3, #9
   10838:	eba7 060a 	sub.w	r6, r7, sl
   1083c:	f240 8319 	bls.w	10e72 <z_prf+0x8de>
   10840:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
   10842:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
   10846:	f080 831d 	bcs.w	10e84 <z_prf+0x8f0>
				clen -= zero.predot;
   1084a:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
   1084e:	f1bb 0f00 	cmp.w	fp, #0
   10852:	d015      	beq.n	10880 <z_prf+0x2ec>
   10854:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
   10858:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
   1085c:	9903      	ldr	r1, [sp, #12]
   1085e:	4640      	mov	r0, r8
   10860:	9b02      	ldr	r3, [sp, #8]
   10862:	4798      	blx	r3
   10864:	3001      	adds	r0, #1
   10866:	f43f aeab 	beq.w	105c0 <z_prf+0x2c>
				} while (c != '.');
   1086a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
   1086e:	eba7 060a 	sub.w	r6, r7, sl
   10872:	d1f1      	bne.n	10858 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
   10874:	465f      	mov	r7, fp
   10876:	2f00      	cmp	r7, #0
   10878:	f300 830d 	bgt.w	10e96 <z_prf+0x902>
				clen -= zero.postdot;
   1087c:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
   10880:	b195      	cbz	r5, 108a8 <z_prf+0x314>
				c = *cptr;
   10882:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
   10886:	eb0a 0706 	add.w	r7, sl, r6
   1088a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1088e:	2b09      	cmp	r3, #9
   10890:	eba7 060a 	sub.w	r6, r7, sl
   10894:	f240 830a 	bls.w	10eac <z_prf+0x918>
   10898:	282e      	cmp	r0, #46	; 0x2e
   1089a:	f000 8307 	beq.w	10eac <z_prf+0x918>
				while (zero.trail-- > 0) {
   1089e:	462f      	mov	r7, r5
   108a0:	2f00      	cmp	r7, #0
   108a2:	f300 830c 	bgt.w	10ebe <z_prf+0x92a>
				clen -= zero.trail;
   108a6:	1b76      	subs	r6, r6, r5
   108a8:	4456      	add	r6, sl
   108aa:	e31b      	b.n	10ee4 <z_prf+0x950>
	} else if (fplus) {
   108ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   108ae:	b123      	cbz	r3, 108ba <z_prf+0x326>
		*buf++ = '+';
   108b0:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   108b2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   108b6:	4639      	mov	r1, r7
   108b8:	e762      	b.n	10780 <z_prf+0x1ec>
	} else if (fspace) {
   108ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108bc:	b10b      	cbz	r3, 108c2 <z_prf+0x32e>
		*buf++ = ' ';
   108be:	2320      	movs	r3, #32
   108c0:	e7f7      	b.n	108b2 <z_prf+0x31e>
	} else if (fspace) {
   108c2:	4639      	mov	r1, r7
   108c4:	ae1b      	add	r6, sp, #108	; 0x6c
   108c6:	e75d      	b.n	10784 <z_prf+0x1f0>
   108c8:	00020abc 	.word	0x00020abc
   108cc:	00020ac2 	.word	0x00020ac2
				u.d = va_arg(vargs, double);
   108d0:	f106 0907 	add.w	r9, r6, #7
   108d4:	f029 0907 	bic.w	r9, r9, #7
   108d8:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
   108dc:	02d8      	lsls	r0, r3, #11
   108de:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
   108e2:	02d6      	lsls	r6, r2, #11
   108e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
   108e8:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
   108ea:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   108ee:	9604      	str	r6, [sp, #16]
   108f0:	9005      	str	r0, [sp, #20]
	if (sign) {
   108f2:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   108f6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   108fa:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
   108fe:	da41      	bge.n	10984 <z_prf+0x3f0>
		*buf++ = '-';
   10900:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
   10902:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10906:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
   1090a:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1090e:	4299      	cmp	r1, r3
   10910:	d153      	bne.n	109ba <z_prf+0x426>
		if (!fract) {
   10912:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10916:	430a      	orrs	r2, r1
   10918:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   1091c:	f107 0303 	add.w	r3, r7, #3
   10920:	d140      	bne.n	109a4 <z_prf+0x410>
			if (isupper(c)) {
   10922:	2c19      	cmp	r4, #25
   10924:	d838      	bhi.n	10998 <z_prf+0x404>
				*buf++ = 'I';
   10926:	2249      	movs	r2, #73	; 0x49
   10928:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
   1092a:	224e      	movs	r2, #78	; 0x4e
   1092c:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
   1092e:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
   10930:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   10932:	46ab      	mov	fp, r5
   10934:	46a8      	mov	r8, r5
		return buf - start;
   10936:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
   10938:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
   1093a:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   1093c:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
   1093e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10940:	2a00      	cmp	r2, #0
   10942:	f040 81ec 	bne.w	10d1e <z_prf+0x78a>
   10946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10948:	2a00      	cmp	r2, #0
   1094a:	f040 81e8 	bne.w	10d1e <z_prf+0x78a>
   1094e:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   10952:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
   10956:	4257      	negs	r7, r2
   10958:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
   1095a:	eb05 0608 	add.w	r6, r5, r8
   1095e:	4433      	add	r3, r6
   10960:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
   10964:	ab22      	add	r3, sp, #136	; 0x88
   10966:	443b      	add	r3, r7
   10968:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   1096c:	3b30      	subs	r3, #48	; 0x30
   1096e:	2b09      	cmp	r3, #9
   10970:	f200 8249 	bhi.w	10e06 <z_prf+0x872>
			} else if (fzero) {
   10974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10976:	2b00      	cmp	r3, #0
   10978:	f000 8248 	beq.w	10e0c <z_prf+0x878>
   1097c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1097e:	1b9a      	subs	r2, r3, r6
   10980:	ab1b      	add	r3, sp, #108	; 0x6c
   10982:	e739      	b.n	107f8 <z_prf+0x264>
	} else if (fplus) {
   10984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10986:	b10b      	cbz	r3, 1098c <z_prf+0x3f8>
		*buf++ = '+';
   10988:	232b      	movs	r3, #43	; 0x2b
   1098a:	e7ba      	b.n	10902 <z_prf+0x36e>
	} else if (fspace) {
   1098c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1098e:	b10b      	cbz	r3, 10994 <z_prf+0x400>
		*buf++ = ' ';
   10990:	2320      	movs	r3, #32
   10992:	e7b6      	b.n	10902 <z_prf+0x36e>
	} else if (fspace) {
   10994:	af1b      	add	r7, sp, #108	; 0x6c
   10996:	e7b8      	b.n	1090a <z_prf+0x376>
				*buf++ = 'i';
   10998:	2269      	movs	r2, #105	; 0x69
   1099a:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
   1099c:	226e      	movs	r2, #110	; 0x6e
   1099e:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
   109a0:	2266      	movs	r2, #102	; 0x66
   109a2:	e7c5      	b.n	10930 <z_prf+0x39c>
			if (isupper(c)) {
   109a4:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   109a6:	bf99      	ittee	ls
   109a8:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
   109aa:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
   109ac:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
   109ae:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
   109b0:	bf94      	ite	ls
   109b2:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
   109b4:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
   109b6:	7079      	strb	r1, [r7, #1]
   109b8:	e7ba      	b.n	10930 <z_prf+0x39c>
	if ((exp | fract) != 0) {
   109ba:	9b04      	ldr	r3, [sp, #16]
   109bc:	9805      	ldr	r0, [sp, #20]
   109be:	430b      	orrs	r3, r1
   109c0:	9310      	str	r3, [sp, #64]	; 0x40
   109c2:	17cb      	asrs	r3, r1, #31
   109c4:	4303      	orrs	r3, r0
		c = 'f';
   109c6:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   109c8:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
   109ca:	bf08      	it	eq
   109cc:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   109ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   109d2:	4313      	orrs	r3, r2
   109d4:	f000 8111 	beq.w	10bfa <z_prf+0x666>
		if (exp == 0) {
   109d8:	2900      	cmp	r1, #0
   109da:	f000 809b 	beq.w	10b14 <z_prf+0x580>
		fract |= HIGHBIT64;
   109de:	2600      	movs	r6, #0
   109e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   109e2:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
   109e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   109ea:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
   109ec:	f118 0f02 	cmn.w	r8, #2
   109f0:	f2c0 80a4 	blt.w	10b3c <z_prf+0x5a8>
	while (exp > 0) {
   109f4:	f1b8 0f00 	cmp.w	r8, #0
   109f8:	f300 80dd 	bgt.w	10bb6 <z_prf+0x622>
		_rlrshift(&fract);
   109fc:	a816      	add	r0, sp, #88	; 0x58
		exp++;
   109fe:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   10a02:	f00c fe96 	bl	1d732 <_rlrshift>
	while (exp < (0 + 4)) {
   10a06:	f1b8 0f04 	cmp.w	r8, #4
   10a0a:	d1f7      	bne.n	109fc <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
   10a0c:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   10a0e:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   10a12:	bfb8      	it	lt
   10a14:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   10a16:	2b47      	cmp	r3, #71	; 0x47
   10a18:	f040 80f8 	bne.w	10c0c <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
   10a1c:	1cf1      	adds	r1, r6, #3
   10a1e:	db02      	blt.n	10a26 <z_prf+0x492>
   10a20:	42ae      	cmp	r6, r5
   10a22:	f340 80ed 	ble.w	10c00 <z_prf+0x66c>
			c += 'e' - 'g';
   10a26:	3c02      	subs	r4, #2
   10a28:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   10a2a:	2d00      	cmp	r5, #0
   10a2c:	f000 80f4 	beq.w	10c18 <z_prf+0x684>
				precision--;
   10a30:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   10a32:	f1bb 0f00 	cmp.w	fp, #0
   10a36:	f040 80ef 	bne.w	10c18 <z_prf+0x684>
   10a3a:	2d00      	cmp	r5, #0
   10a3c:	bfd4      	ite	le
   10a3e:	f04f 0a00 	movle.w	sl, #0
   10a42:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   10a46:	2c66      	cmp	r4, #102	; 0x66
   10a48:	f040 80e8 	bne.w	10c1c <z_prf+0x688>
		if (exp < 0) {
   10a4c:	eb16 0805 	adds.w	r8, r6, r5
   10a50:	f140 80ec 	bpl.w	10c2c <z_prf+0x698>
	digit_count = 16;
   10a54:	2310      	movs	r3, #16
   10a56:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   10a58:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   10a5c:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
   10a5e:	2200      	movs	r2, #0
   10a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10a64:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
   10a68:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   10a6c:	f080 80e0 	bcs.w	10c30 <z_prf+0x69c>
	fract += ltemp;
   10a70:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10a72:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10a74:	9919      	ldr	r1, [sp, #100]	; 0x64
   10a76:	189b      	adds	r3, r3, r2
   10a78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10a7a:	eb41 0202 	adc.w	r2, r1, r2
   10a7e:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
   10a82:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   10a86:	9312      	str	r3, [sp, #72]	; 0x48
   10a88:	2300      	movs	r3, #0
   10a8a:	9313      	str	r3, [sp, #76]	; 0x4c
   10a8c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   10a90:	4313      	orrs	r3, r2
   10a92:	d006      	beq.n	10aa2 <z_prf+0x50e>
		_ldiv5(&fract);
   10a94:	a816      	add	r0, sp, #88	; 0x58
   10a96:	f00c fe5d 	bl	1d754 <_ldiv5>
		_rlrshift(&fract);
   10a9a:	a816      	add	r0, sp, #88	; 0x58
   10a9c:	f00c fe49 	bl	1d732 <_rlrshift>
		decexp++;
   10aa0:	3601      	adds	r6, #1
	if (c == 'f') {
   10aa2:	2c66      	cmp	r4, #102	; 0x66
   10aa4:	f040 80e1 	bne.w	10c6a <z_prf+0x6d6>
		if (decexp > 0) {
   10aa8:	2e00      	cmp	r6, #0
   10aaa:	f340 80c8 	ble.w	10c3e <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
   10aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	dd07      	ble.n	10ac4 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
   10ab4:	a915      	add	r1, sp, #84	; 0x54
   10ab6:	a816      	add	r0, sp, #88	; 0x58
   10ab8:	f00c fe77 	bl	1d7aa <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   10abc:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   10abe:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
   10ac2:	d1f4      	bne.n	10aae <z_prf+0x51a>
			zp->predot = decexp;
   10ac4:	46b0      	mov	r8, r6
   10ac6:	463b      	mov	r3, r7
			decexp = 0;
   10ac8:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
   10aca:	f1bb 0f00 	cmp.w	fp, #0
   10ace:	d101      	bne.n	10ad4 <z_prf+0x540>
   10ad0:	2d00      	cmp	r5, #0
   10ad2:	dd15      	ble.n	10b00 <z_prf+0x56c>
			*buf++ = '.';
   10ad4:	222e      	movs	r2, #46	; 0x2e
   10ad6:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
   10ada:	2e00      	cmp	r6, #0
   10adc:	f000 80c0 	beq.w	10c60 <z_prf+0x6cc>
   10ae0:	2d00      	cmp	r5, #0
   10ae2:	f340 80bf 	ble.w	10c64 <z_prf+0x6d0>
			zp->postdot = -decexp;
   10ae6:	f1c6 0b00 	rsb	fp, r6, #0
   10aea:	45ab      	cmp	fp, r5
   10aec:	bfa8      	it	ge
   10aee:	46ab      	movge	fp, r5
			precision -= zp->postdot;
   10af0:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
   10af4:	2d00      	cmp	r5, #0
   10af6:	dd03      	ble.n	10b00 <z_prf+0x56c>
   10af8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10afa:	2a00      	cmp	r2, #0
   10afc:	f300 80a6 	bgt.w	10c4c <z_prf+0x6b8>
	if (prune_zero) {
   10b00:	f1ba 0f00 	cmp.w	sl, #0
   10b04:	f040 80c6 	bne.w	10c94 <z_prf+0x700>
	*buf = 0;
   10b08:	2200      	movs	r2, #0
	return buf - start;
   10b0a:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
   10b0c:	701a      	strb	r2, [r3, #0]
	return buf - start;
   10b0e:	1b9b      	subs	r3, r3, r6
   10b10:	e715      	b.n	1093e <z_prf+0x3aa>
				exp--;
   10b12:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   10b14:	9b04      	ldr	r3, [sp, #16]
   10b16:	18db      	adds	r3, r3, r3
   10b18:	9304      	str	r3, [sp, #16]
   10b1a:	9b05      	ldr	r3, [sp, #20]
   10b1c:	415b      	adcs	r3, r3
   10b1e:	9305      	str	r3, [sp, #20]
   10b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10b24:	2a00      	cmp	r2, #0
   10b26:	f173 0300 	sbcs.w	r3, r3, #0
   10b2a:	daf2      	bge.n	10b12 <z_prf+0x57e>
   10b2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10b30:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10b34:	e753      	b.n	109de <z_prf+0x44a>
			_rlrshift(&fract);
   10b36:	a816      	add	r0, sp, #88	; 0x58
   10b38:	f00c fdfb 	bl	1d732 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   10b3c:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
   10b40:	2300      	movs	r3, #0
   10b42:	2100      	movs	r1, #0
   10b44:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   10b48:	930d      	str	r3, [sp, #52]	; 0x34
   10b4a:	48bc      	ldr	r0, [pc, #752]	; (10e3c <z_prf+0x8a8>)
   10b4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   10b50:	4299      	cmp	r1, r3
   10b52:	bf08      	it	eq
   10b54:	4290      	cmpeq	r0, r2
   10b56:	f108 0801 	add.w	r8, r8, #1
   10b5a:	d3ec      	bcc.n	10b36 <z_prf+0x5a2>
		fract *= 5U;
   10b5c:	2005      	movs	r0, #5
   10b5e:	fbae 2300 	umull	r2, r3, lr, r0
   10b62:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10b66:	9b07      	ldr	r3, [sp, #28]
		decexp--;
   10b68:	3e01      	subs	r6, #1
		fract *= 5U;
   10b6a:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
   10b6e:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   10b72:	9307      	str	r3, [sp, #28]
   10b74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10b78:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   10b7c:	2100      	movs	r1, #0
   10b7e:	2300      	movs	r3, #0
   10b80:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10b84:	9807      	ldr	r0, [sp, #28]
   10b86:	428b      	cmp	r3, r1
   10b88:	bf08      	it	eq
   10b8a:	4282      	cmpeq	r2, r0
   10b8c:	d208      	bcs.n	10ba0 <z_prf+0x60c>
   10b8e:	f1bc 0f00 	cmp.w	ip, #0
   10b92:	f43f af2b 	beq.w	109ec <z_prf+0x458>
   10b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10b9a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10b9e:	e725      	b.n	109ec <z_prf+0x458>
			fract <<= 1;
   10ba0:	9b06      	ldr	r3, [sp, #24]
			exp--;
   10ba2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   10ba6:	18db      	adds	r3, r3, r3
   10ba8:	9306      	str	r3, [sp, #24]
   10baa:	9b07      	ldr	r3, [sp, #28]
   10bac:	f04f 0c01 	mov.w	ip, #1
   10bb0:	415b      	adcs	r3, r3
   10bb2:	9307      	str	r3, [sp, #28]
			exp--;
   10bb4:	e7e2      	b.n	10b7c <z_prf+0x5e8>
		_ldiv5(&fract);
   10bb6:	a816      	add	r0, sp, #88	; 0x58
   10bb8:	f00c fdcc 	bl	1d754 <_ldiv5>
		exp--;
   10bbc:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
   10bc0:	f04f 0c00 	mov.w	ip, #0
		exp--;
   10bc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   10bc8:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   10bca:	2300      	movs	r3, #0
   10bcc:	2100      	movs	r1, #0
   10bce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10bd2:	4299      	cmp	r1, r3
   10bd4:	bf08      	it	eq
   10bd6:	4570      	cmpeq	r0, lr
   10bd8:	d206      	bcs.n	10be8 <z_prf+0x654>
   10bda:	f1bc 0f00 	cmp.w	ip, #0
   10bde:	f43f af09 	beq.w	109f4 <z_prf+0x460>
   10be2:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
   10be6:	e705      	b.n	109f4 <z_prf+0x460>
			fract <<= 1;
   10be8:	eb1a 0a0a 	adds.w	sl, sl, sl
   10bec:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   10bf0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10bf4:	f04f 0c01 	mov.w	ip, #1
   10bf8:	e7e7      	b.n	10bca <z_prf+0x636>
	if ((exp | fract) != 0) {
   10bfa:	2600      	movs	r6, #0
   10bfc:	46b0      	mov	r8, r6
   10bfe:	e6fd      	b.n	109fc <z_prf+0x468>
			precision -= decexp;
   10c00:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   10c02:	f1bb 0f00 	cmp.w	fp, #0
   10c06:	d104      	bne.n	10c12 <z_prf+0x67e>
			c = 'f';
   10c08:	2466      	movs	r4, #102	; 0x66
   10c0a:	e716      	b.n	10a3a <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   10c0c:	f04f 0a00 	mov.w	sl, #0
   10c10:	e719      	b.n	10a46 <z_prf+0x4b2>
   10c12:	f04f 0a00 	mov.w	sl, #0
   10c16:	e719      	b.n	10a4c <z_prf+0x4b8>
   10c18:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   10c1c:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   10c20:	2310      	movs	r3, #16
   10c22:	4598      	cmp	r8, r3
   10c24:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
   10c26:	bfa8      	it	ge
   10c28:	4698      	movge	r8, r3
   10c2a:	e718      	b.n	10a5e <z_prf+0x4ca>
		if (exp < 0) {
   10c2c:	2466      	movs	r4, #102	; 0x66
   10c2e:	e7f7      	b.n	10c20 <z_prf+0x68c>
		_ldiv5(&ltemp);
   10c30:	a818      	add	r0, sp, #96	; 0x60
   10c32:	f00c fd8f 	bl	1d754 <_ldiv5>
		_rlrshift(&ltemp);
   10c36:	a818      	add	r0, sp, #96	; 0x60
   10c38:	f00c fd7b 	bl	1d732 <_rlrshift>
   10c3c:	e714      	b.n	10a68 <z_prf+0x4d4>
			*buf++ = '0';
   10c3e:	463b      	mov	r3, r7
   10c40:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
   10c42:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
   10c46:	f803 2b01 	strb.w	r2, [r3], #1
   10c4a:	e73e      	b.n	10aca <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
   10c4c:	a915      	add	r1, sp, #84	; 0x54
   10c4e:	a816      	add	r0, sp, #88	; 0x58
   10c50:	9306      	str	r3, [sp, #24]
   10c52:	f00c fdaa 	bl	1d7aa <_get_digit>
   10c56:	9b06      	ldr	r3, [sp, #24]
			precision--;
   10c58:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   10c5a:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   10c5e:	e749      	b.n	10af4 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
   10c60:	46b3      	mov	fp, r6
   10c62:	e747      	b.n	10af4 <z_prf+0x560>
   10c64:	f04f 0b00 	mov.w	fp, #0
   10c68:	e74a      	b.n	10b00 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
   10c6a:	a915      	add	r1, sp, #84	; 0x54
   10c6c:	a816      	add	r0, sp, #88	; 0x58
   10c6e:	f00c fd9c 	bl	1d7aa <_get_digit>
		if (*buf++ != '0') {
   10c72:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   10c74:	7038      	strb	r0, [r7, #0]
			decexp--;
   10c76:	bf18      	it	ne
   10c78:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   10c7c:	f1bb 0f00 	cmp.w	fp, #0
   10c80:	d138      	bne.n	10cf4 <z_prf+0x760>
   10c82:	2d00      	cmp	r5, #0
   10c84:	dc36      	bgt.n	10cf4 <z_prf+0x760>
		if (*buf++ != '0') {
   10c86:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
   10c88:	f1ba 0f00 	cmp.w	sl, #0
   10c8c:	d044      	beq.n	10d18 <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
   10c8e:	f04f 0b00 	mov.w	fp, #0
   10c92:	46d8      	mov	r8, fp
		while (*--buf == '0')
   10c94:	461a      	mov	r2, r3
   10c96:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   10c9a:	2930      	cmp	r1, #48	; 0x30
   10c9c:	d0fa      	beq.n	10c94 <z_prf+0x700>
		if (*buf != '.') {
   10c9e:	292e      	cmp	r1, #46	; 0x2e
   10ca0:	bf18      	it	ne
   10ca2:	4613      	movne	r3, r2
   10ca4:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   10ca6:	f004 02df 	and.w	r2, r4, #223	; 0xdf
   10caa:	2a45      	cmp	r2, #69	; 0x45
   10cac:	f47f af2c 	bne.w	10b08 <z_prf+0x574>
		if (decexp < 0) {
   10cb0:	2e00      	cmp	r6, #0
			*buf++ = '-';
   10cb2:	bfb4      	ite	lt
   10cb4:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   10cb6:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   10cb8:	4619      	mov	r1, r3
			decexp = -decexp;
   10cba:	bfb8      	it	lt
   10cbc:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   10cbe:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   10cc0:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
   10cc4:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
   10cc6:	dd08      	ble.n	10cda <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
   10cc8:	2064      	movs	r0, #100	; 0x64
   10cca:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
   10cce:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
   10cd2:	f102 0430 	add.w	r4, r2, #48	; 0x30
   10cd6:	1cd9      	adds	r1, r3, #3
   10cd8:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
   10cda:	200a      	movs	r0, #10
   10cdc:	fb96 f2f0 	sdiv	r2, r6, r0
   10ce0:	460b      	mov	r3, r1
		decexp %= 10;
   10ce2:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
   10ce6:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
   10cea:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   10cec:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
   10cf0:	704e      	strb	r6, [r1, #1]
   10cf2:	e709      	b.n	10b08 <z_prf+0x574>
			*buf++ = '.';
   10cf4:	222e      	movs	r2, #46	; 0x2e
   10cf6:	1cbb      	adds	r3, r7, #2
   10cf8:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   10cfa:	2d00      	cmp	r5, #0
   10cfc:	ddc4      	ble.n	10c88 <z_prf+0x6f4>
   10cfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10d00:	2a00      	cmp	r2, #0
   10d02:	ddc1      	ble.n	10c88 <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
   10d04:	a915      	add	r1, sp, #84	; 0x54
   10d06:	a816      	add	r0, sp, #88	; 0x58
   10d08:	9306      	str	r3, [sp, #24]
   10d0a:	f00c fd4e 	bl	1d7aa <_get_digit>
   10d0e:	9b06      	ldr	r3, [sp, #24]
			precision--;
   10d10:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   10d12:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   10d16:	e7f0      	b.n	10cfa <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
   10d18:	46d3      	mov	fp, sl
   10d1a:	46d0      	mov	r8, sl
   10d1c:	e7c3      	b.n	10ca6 <z_prf+0x712>
					prefix = 1;
   10d1e:	2701      	movs	r7, #1
   10d20:	e61b      	b.n	1095a <z_prf+0x3c6>
				switch (i) {
   10d22:	46b1      	mov	r9, r6
   10d24:	2f68      	cmp	r7, #104	; 0x68
   10d26:	f859 3b04 	ldr.w	r3, [r9], #4
   10d2a:	d005      	beq.n	10d38 <z_prf+0x7a4>
   10d2c:	dc01      	bgt.n	10d32 <z_prf+0x79e>
   10d2e:	2f48      	cmp	r7, #72	; 0x48
   10d30:	d007      	beq.n	10d42 <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
   10d32:	9a01      	ldr	r2, [sp, #4]
   10d34:	601a      	str	r2, [r3, #0]
					break;
   10d36:	e001      	b.n	10d3c <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
   10d38:	9a01      	ldr	r2, [sp, #4]
   10d3a:	801a      	strh	r2, [r3, #0]
				continue;
   10d3c:	464e      	mov	r6, r9
   10d3e:	9a08      	ldr	r2, [sp, #32]
   10d40:	e430      	b.n	105a4 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
   10d42:	9a01      	ldr	r2, [sp, #4]
   10d44:	701a      	strb	r2, [r3, #0]
					break;
   10d46:	e7f9      	b.n	10d3c <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
   10d48:	46b1      	mov	r9, r6
		*buf++ = '0';
   10d4a:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
   10d4e:	2210      	movs	r2, #16
   10d50:	f859 1b04 	ldr.w	r1, [r9], #4
   10d54:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
   10d58:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   10d5c:	f00c fcc7 	bl	1d6ee <_to_x>
				prefix = 2;
   10d60:	2702      	movs	r7, #2
	return len + (buf - buf0);
   10d62:	1c86      	adds	r6, r0, #2
				break;
   10d64:	e51e      	b.n	107a4 <z_prf+0x210>
					if (cptr[clen] == '\0') {
   10d66:	5d9a      	ldrb	r2, [r3, r6]
   10d68:	2a00      	cmp	r2, #0
   10d6a:	d04a      	beq.n	10e02 <z_prf+0x86e>
				for (clen = 0; clen < precision; clen++) {
   10d6c:	3601      	adds	r6, #1
   10d6e:	e52e      	b.n	107ce <z_prf+0x23a>
	if (alt_form) {
   10d70:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
   10d72:	2208      	movs	r2, #8
   10d74:	4620      	mov	r0, r4
   10d76:	f00c fcba 	bl	1d6ee <_to_x>
   10d7a:	ae1b      	add	r6, sp, #108	; 0x6c
   10d7c:	1ba6      	subs	r6, r4, r6
   10d7e:	4406      	add	r6, r0
			prefix = 0;
   10d80:	2700      	movs	r7, #0
   10d82:	e50f      	b.n	107a4 <z_prf+0x210>
		*buf++ = '0';
   10d84:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
   10d88:	e7f3      	b.n	10d72 <z_prf+0x7de>
				} else if (c == 'u') {
   10d8a:	2c75      	cmp	r4, #117	; 0x75
   10d8c:	d105      	bne.n	10d9a <z_prf+0x806>
	return _to_x(buf, value, 10);
   10d8e:	220a      	movs	r2, #10
   10d90:	a81b      	add	r0, sp, #108	; 0x6c
   10d92:	f00c fcac 	bl	1d6ee <_to_x>
   10d96:	4606      	mov	r6, r0
   10d98:	e7f2      	b.n	10d80 <z_prf+0x7ec>
	if (alt_form) {
   10d9a:	f1bb 0f00 	cmp.w	fp, #0
   10d9e:	d012      	beq.n	10dc6 <z_prf+0x832>
		*buf++ = '0';
   10da0:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   10da4:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
   10da8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   10dac:	2210      	movs	r2, #16
   10dae:	4640      	mov	r0, r8
   10db0:	f00c fc9d 	bl	1d6ee <_to_x>
	if (prefix == 'X') {
   10db4:	2c58      	cmp	r4, #88	; 0x58
   10db6:	d009      	beq.n	10dcc <z_prf+0x838>
	return len + (buf - buf0);
   10db8:	ae1b      	add	r6, sp, #108	; 0x6c
   10dba:	eba8 0606 	sub.w	r6, r8, r6
   10dbe:	4406      	add	r6, r0
						prefix = 2;
   10dc0:	ea4f 074b 	mov.w	r7, fp, lsl #1
   10dc4:	e4ee      	b.n	107a4 <z_prf+0x210>
	if (alt_form) {
   10dc6:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
   10dca:	e7ef      	b.n	10dac <z_prf+0x818>
   10dcc:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
   10dce:	f812 3b01 	ldrb.w	r3, [r2], #1
   10dd2:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   10dd6:	2919      	cmp	r1, #25
   10dd8:	d803      	bhi.n	10de2 <z_prf+0x84e>
			*buf += 'A' - 'a';
   10dda:	3b20      	subs	r3, #32
   10ddc:	f802 3c01 	strb.w	r3, [r2, #-1]
   10de0:	e7f5      	b.n	10dce <z_prf+0x83a>
	} while (*buf++);
   10de2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   10de6:	2b00      	cmp	r3, #0
   10de8:	d1f1      	bne.n	10dce <z_prf+0x83a>
   10dea:	e7e5      	b.n	10db8 <z_prf+0x824>
				PUTC('%');
   10dec:	9903      	ldr	r1, [sp, #12]
   10dee:	4620      	mov	r0, r4
   10df0:	f7ff bbe1 	b.w	105b6 <z_prf+0x22>
				count++;
   10df4:	9b01      	ldr	r3, [sp, #4]
   10df6:	3301      	adds	r3, #1
				count += 2;
   10df8:	9301      	str	r3, [sp, #4]
				continue;
   10dfa:	46b1      	mov	r9, r6
   10dfc:	e79e      	b.n	10d3c <z_prf+0x7a8>
					prefix = 1;
   10dfe:	2701      	movs	r7, #1
   10e00:	e4d0      	b.n	107a4 <z_prf+0x210>
   10e02:	4615      	mov	r5, r2
   10e04:	e4e8      	b.n	107d8 <z_prf+0x244>
			cptr = buf;
   10e06:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
   10e08:	2200      	movs	r2, #0
   10e0a:	e4f7      	b.n	107fc <z_prf+0x268>
   10e0c:	ab1b      	add	r3, sp, #108	; 0x6c
   10e0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10e10:	e4f4      	b.n	107fc <z_prf+0x268>
   10e12:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
   10e16:	9903      	ldr	r1, [sp, #12]
   10e18:	9b02      	ldr	r3, [sp, #8]
   10e1a:	2020      	movs	r0, #32
   10e1c:	4798      	blx	r3
   10e1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10e22:	3001      	adds	r0, #1
   10e24:	f43f abcc 	beq.w	105c0 <z_prf+0x2c>
				while (width-- > 0) {
   10e28:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
   10e2c:	d2f1      	bcs.n	10e12 <z_prf+0x87e>
				count += width;
   10e2e:	9901      	ldr	r1, [sp, #4]
   10e30:	4421      	add	r1, r4
   10e32:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
   10e34:	4654      	mov	r4, sl
   10e36:	e4eb      	b.n	10810 <z_prf+0x27c>
   10e38:	46a2      	mov	sl, r4
   10e3a:	e7f5      	b.n	10e28 <z_prf+0x894>
   10e3c:	33333332 	.word	0x33333332
				PUTC(*cptr++);
   10e40:	f813 0b01 	ldrb.w	r0, [r3], #1
   10e44:	9903      	ldr	r1, [sp, #12]
   10e46:	9309      	str	r3, [sp, #36]	; 0x24
   10e48:	9b02      	ldr	r3, [sp, #8]
   10e4a:	920a      	str	r2, [sp, #40]	; 0x28
   10e4c:	4798      	blx	r3
   10e4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10e52:	3001      	adds	r0, #1
   10e54:	f47f acde 	bne.w	10814 <z_prf+0x280>
   10e58:	f7ff bbb2 	b.w	105c0 <z_prf+0x2c>
				PUTC('0');
   10e5c:	9903      	ldr	r1, [sp, #12]
   10e5e:	2030      	movs	r0, #48	; 0x30
   10e60:	9b02      	ldr	r3, [sp, #8]
   10e62:	9209      	str	r2, [sp, #36]	; 0x24
   10e64:	4798      	blx	r3
   10e66:	3001      	adds	r0, #1
   10e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e6a:	f47f acd6 	bne.w	1081a <z_prf+0x286>
   10e6e:	f7ff bba7 	b.w	105c0 <z_prf+0x2c>
					PUTC(c);
   10e72:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10e76:	4798      	blx	r3
   10e78:	3001      	adds	r0, #1
   10e7a:	f43f aba1 	beq.w	105c0 <z_prf+0x2c>
					c = *++cptr;
   10e7e:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10e82:	e4d6      	b.n	10832 <z_prf+0x29e>
					PUTC('0');
   10e84:	9903      	ldr	r1, [sp, #12]
   10e86:	2030      	movs	r0, #48	; 0x30
   10e88:	9b02      	ldr	r3, [sp, #8]
   10e8a:	4798      	blx	r3
   10e8c:	3001      	adds	r0, #1
   10e8e:	f47f acd8 	bne.w	10842 <z_prf+0x2ae>
   10e92:	f7ff bb95 	b.w	105c0 <z_prf+0x2c>
					PUTC('0');
   10e96:	9903      	ldr	r1, [sp, #12]
   10e98:	2030      	movs	r0, #48	; 0x30
   10e9a:	9b02      	ldr	r3, [sp, #8]
   10e9c:	4798      	blx	r3
   10e9e:	3001      	adds	r0, #1
   10ea0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10ea4:	f47f ace7 	bne.w	10876 <z_prf+0x2e2>
   10ea8:	f7ff bb8a 	b.w	105c0 <z_prf+0x2c>
					PUTC(c);
   10eac:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10eb0:	4798      	blx	r3
   10eb2:	3001      	adds	r0, #1
   10eb4:	f43f ab84 	beq.w	105c0 <z_prf+0x2c>
					c = *++cptr;
   10eb8:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10ebc:	e4e5      	b.n	1088a <z_prf+0x2f6>
					PUTC('0');
   10ebe:	9903      	ldr	r1, [sp, #12]
   10ec0:	2030      	movs	r0, #48	; 0x30
   10ec2:	9b02      	ldr	r3, [sp, #8]
   10ec4:	4798      	blx	r3
   10ec6:	3001      	adds	r0, #1
   10ec8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10ecc:	f47f ace8 	bne.w	108a0 <z_prf+0x30c>
   10ed0:	f7ff bb76 	b.w	105c0 <z_prf+0x2c>
				PUTC(*cptr++);
   10ed4:	9903      	ldr	r1, [sp, #12]
   10ed6:	f81a 0b01 	ldrb.w	r0, [sl], #1
   10eda:	9b02      	ldr	r3, [sp, #8]
   10edc:	4798      	blx	r3
   10ede:	3001      	adds	r0, #1
   10ee0:	f43f ab6e 	beq.w	105c0 <z_prf+0x2c>
   10ee4:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
   10ee8:	2b00      	cmp	r3, #0
   10eea:	dcf3      	bgt.n	10ed4 <z_prf+0x940>
			count += clen;
   10eec:	9b01      	ldr	r3, [sp, #4]
   10eee:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
   10ef0:	2c00      	cmp	r4, #0
			count += clen;
   10ef2:	4413      	add	r3, r2
   10ef4:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   10ef6:	f77f af21 	ble.w	10d3c <z_prf+0x7a8>
   10efa:	4625      	mov	r5, r4
   10efc:	e006      	b.n	10f0c <z_prf+0x978>
					PUTC(' ');
   10efe:	9903      	ldr	r1, [sp, #12]
   10f00:	2020      	movs	r0, #32
   10f02:	9b02      	ldr	r3, [sp, #8]
   10f04:	4798      	blx	r3
   10f06:	3001      	adds	r0, #1
   10f08:	f43f ab5a 	beq.w	105c0 <z_prf+0x2c>
				while (width-- > 0) {
   10f0c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   10f10:	d2f5      	bcs.n	10efe <z_prf+0x96a>
				count += width;
   10f12:	9b01      	ldr	r3, [sp, #4]
   10f14:	4423      	add	r3, r4
   10f16:	9301      	str	r3, [sp, #4]
   10f18:	e710      	b.n	10d3c <z_prf+0x7a8>
   10f1a:	bf00      	nop

00010f1c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10f1c:	4b01      	ldr	r3, [pc, #4]	; (10f24 <__stdout_hook_install+0x8>)
   10f1e:	6018      	str	r0, [r3, #0]
}
   10f20:	4770      	bx	lr
   10f22:	bf00      	nop
   10f24:	2002c514 	.word	0x2002c514

00010f28 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   10f28:	b40c      	push	{r2, r3}
   10f2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   10f2c:	b909      	cbnz	r1, 10f32 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   10f2e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   10f32:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   10f36:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f38:	9a06      	ldr	r2, [sp, #24]
   10f3a:	a902      	add	r1, sp, #8
   10f3c:	4805      	ldr	r0, [pc, #20]	; (10f54 <snprintf+0x2c>)
	va_start(vargs, format);
   10f3e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f40:	f7ff fb28 	bl	10594 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10f44:	2200      	movs	r2, #0
   10f46:	9b02      	ldr	r3, [sp, #8]
   10f48:	701a      	strb	r2, [r3, #0]
	return r;
}
   10f4a:	b005      	add	sp, #20
   10f4c:	f85d eb04 	ldr.w	lr, [sp], #4
   10f50:	b002      	add	sp, #8
   10f52:	4770      	bx	lr
   10f54:	0001d7df 	.word	0x0001d7df

00010f58 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   10f58:	b40e      	push	{r1, r2, r3}
   10f5a:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10f5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   10f60:	ab05      	add	r3, sp, #20
   10f62:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   10f66:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10f68:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f6a:	4806      	ldr	r0, [pc, #24]	; (10f84 <sprintf+0x2c>)
   10f6c:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   10f6e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10f70:	f7ff fb10 	bl	10594 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10f74:	2200      	movs	r2, #0
   10f76:	9b02      	ldr	r3, [sp, #8]
   10f78:	701a      	strb	r2, [r3, #0]
	return r;
}
   10f7a:	b004      	add	sp, #16
   10f7c:	f85d eb04 	ldr.w	lr, [sp], #4
   10f80:	b003      	add	sp, #12
   10f82:	4770      	bx	lr
   10f84:	0001d7df 	.word	0x0001d7df

00010f88 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   10f88:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   10f8a:	4c07      	ldr	r4, [pc, #28]	; (10fa8 <net_if_init+0x20>)
   10f8c:	4d07      	ldr	r5, [pc, #28]	; (10fac <net_if_init+0x24>)
   10f8e:	42ac      	cmp	r4, r5
   10f90:	d100      	bne.n	10f94 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10f92:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   10f94:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   10f96:	681b      	ldr	r3, [r3, #0]
   10f98:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   10f9a:	b11b      	cbz	r3, 10fa4 <net_if_init+0x1c>
   10f9c:	681b      	ldr	r3, [r3, #0]
   10f9e:	b10b      	cbz	r3, 10fa4 <net_if_init+0x1c>
	api->init(iface);
   10fa0:	4620      	mov	r0, r4
   10fa2:	4798      	blx	r3
	     iface++, if_count++) {
   10fa4:	3420      	adds	r4, #32
   10fa6:	e7f2      	b.n	10f8e <net_if_init+0x6>
   10fa8:	2002c720 	.word	0x2002c720
   10fac:	2002c740 	.word	0x2002c740

00010fb0 <net_if_post_init>:

void net_if_post_init(void)
{
   10fb0:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10fb2:	4c08      	ldr	r4, [pc, #32]	; (10fd4 <net_if_post_init+0x24>)
   10fb4:	4d08      	ldr	r5, [pc, #32]	; (10fd8 <net_if_post_init+0x28>)
   10fb6:	42ac      	cmp	r4, r5
   10fb8:	d100      	bne.n	10fbc <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10fba:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   10fbc:	6820      	ldr	r0, [r4, #0]
   10fbe:	2103      	movs	r1, #3
   10fc0:	300c      	adds	r0, #12
   10fc2:	f00c fc20 	bl	1d806 <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   10fc6:	b910      	cbnz	r0, 10fce <net_if_post_init+0x1e>
			net_if_up(iface);
   10fc8:	4620      	mov	r0, r4
   10fca:	f00c fc2b 	bl	1d824 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10fce:	3420      	adds	r4, #32
   10fd0:	e7f1      	b.n	10fb6 <net_if_post_init+0x6>
   10fd2:	bf00      	nop
   10fd4:	2002c720 	.word	0x2002c720
   10fd8:	2002c740 	.word	0x2002c740

00010fdc <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   10fdc:	2300      	movs	r3, #0
{
   10fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   10fe2:	2802      	cmp	r0, #2
{
   10fe4:	b089      	sub	sp, #36	; 0x24
   10fe6:	4681      	mov	r9, r0
   10fe8:	468a      	mov	sl, r1
   10fea:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   10fec:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   10ff0:	d13c      	bne.n	1106c <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   10ff2:	aa06      	add	r2, sp, #24
   10ff4:	4610      	mov	r0, r2
   10ff6:	9104      	str	r1, [sp, #16]
{
   10ff8:	4619      	mov	r1, r3
   10ffa:	e006      	b.n	1100a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   10ffc:	7804      	ldrb	r4, [r0, #0]
   10ffe:	3101      	adds	r1, #1
   11000:	3401      	adds	r4, #1
   11002:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   11004:	b2cc      	uxtb	r4, r1
   11006:	2c07      	cmp	r4, #7
   11008:	d803      	bhi.n	11012 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1100a:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   1100e:	2c00      	cmp	r4, #0
   11010:	d0f4      	beq.n	10ffc <z_impl_net_addr_ntop+0x20>
   11012:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   11014:	2b08      	cmp	r3, #8
   11016:	f100 0001 	add.w	r0, r0, #1
   1101a:	d1ed      	bne.n	10ff8 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   1101c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   11020:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   11022:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   11024:	f812 1b01 	ldrb.w	r1, [r2], #1
   11028:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   1102a:	bf88      	it	hi
   1102c:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   1102e:	f103 0301 	add.w	r3, r3, #1
   11032:	b2db      	uxtb	r3, r3
				pos = i;
   11034:	bf88      	it	hi
   11036:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   11038:	2b08      	cmp	r3, #8
   1103a:	d1f3      	bne.n	11024 <z_impl_net_addr_ntop+0x48>
		len = 8;
   1103c:	9303      	str	r3, [sp, #12]
   1103e:	2f01      	cmp	r7, #1
   11040:	f04f 033a 	mov.w	r3, #58	; 0x3a
   11044:	bf08      	it	eq
   11046:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   1104a:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   1104c:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1104e:	4644      	mov	r4, r8
   11050:	4615      	mov	r5, r2
   11052:	9b03      	ldr	r3, [sp, #12]
   11054:	429d      	cmp	r5, r3
   11056:	db19      	blt.n	1108c <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   11058:	4544      	cmp	r4, r8
   1105a:	d009      	beq.n	11070 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   1105c:	2300      	movs	r3, #0
   1105e:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   11062:	bf0c      	ite	eq
   11064:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   11068:	7023      	strbne	r3, [r4, #0]
   1106a:	e003      	b.n	11074 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   1106c:	2801      	cmp	r0, #1
   1106e:	d005      	beq.n	1107c <z_impl_net_addr_ntop+0xa0>
		return NULL;
   11070:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   11074:	4640      	mov	r0, r8
   11076:	b009      	add	sp, #36	; 0x24
   11078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1107c:	232e      	movs	r3, #46	; 0x2e
   1107e:	2204      	movs	r2, #4
	s8_t pos = -1;
   11080:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   11084:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
   11088:	4607      	mov	r7, r0
   1108a:	e7df      	b.n	1104c <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   1108c:	9b03      	ldr	r3, [sp, #12]
   1108e:	2b04      	cmp	r3, #4
   11090:	d134      	bne.n	110fc <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
   11092:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   11096:	b949      	cbnz	r1, 110ac <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   11098:	2330      	movs	r3, #48	; 0x30
   1109a:	4620      	mov	r0, r4
   1109c:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   110a0:	9b02      	ldr	r3, [sp, #8]
   110a2:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   110a4:	3501      	adds	r5, #1
   110a6:	b2ed      	uxtb	r5, r5
   110a8:	4604      	mov	r4, r0
   110aa:	e7d2      	b.n	11052 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   110ac:	2009      	movs	r0, #9
   110ae:	f04f 0b00 	mov.w	fp, #0
   110b2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1118c <z_impl_net_addr_ntop+0x1b0>
   110b6:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   110b8:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   110bc:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   110c0:	4583      	cmp	fp, r0
		value = value % divisor;
   110c2:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   110c4:	dc01      	bgt.n	110ca <z_impl_net_addr_ntop+0xee>
   110c6:	4561      	cmp	r1, ip
   110c8:	d306      	bcc.n	110d8 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   110ca:	4683      	mov	fp, r0
   110cc:	9b01      	ldr	r3, [sp, #4]
   110ce:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   110d2:	f803 eb01 	strb.w	lr, [r3], #1
   110d6:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   110d8:	230a      	movs	r3, #10
   110da:	3801      	subs	r0, #1
   110dc:	fbbc fcf3 	udiv	ip, ip, r3
   110e0:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   110e2:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   110e4:	d1e8      	bne.n	110b8 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   110e6:	f04f 0300 	mov.w	r3, #0
   110ea:	9901      	ldr	r1, [sp, #4]
   110ec:	700b      	strb	r3, [r1, #0]
	return buf - start;
   110ee:	1b0b      	subs	r3, r1, r4
			ptr += l;
   110f0:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   110f2:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   110f4:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   110f6:	3001      	adds	r0, #1
   110f8:	54e1      	strb	r1, [r4, r3]
			continue;
   110fa:	e7d3      	b.n	110a4 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   110fc:	42ae      	cmp	r6, r5
   110fe:	d10d      	bne.n	1111c <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   11100:	b902      	cbnz	r2, 11104 <z_impl_net_addr_ntop+0x128>
   11102:	b916      	cbnz	r6, 1110a <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   11104:	233a      	movs	r3, #58	; 0x3a
   11106:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   1110a:	233a      	movs	r3, #58	; 0x3a
   1110c:	4620      	mov	r0, r4
   1110e:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   11112:	1e7b      	subs	r3, r7, #1
   11114:	441d      	add	r5, r3
   11116:	b2ed      	uxtb	r5, r5
			needcolon = false;
   11118:	2200      	movs	r2, #0
			continue;
   1111a:	e7c3      	b.n	110a4 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   1111c:	b112      	cbz	r2, 11124 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   1111e:	233a      	movs	r3, #58	; 0x3a
   11120:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   11124:	9b04      	ldr	r3, [sp, #16]
   11126:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   1112a:	021a      	lsls	r2, r3, #8
   1112c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   11130:	b212      	sxth	r2, r2
		bh = value >> 8;
   11132:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   11136:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   1113a:	b1b3      	cbz	r3, 1116a <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   1113c:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   1113e:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   11140:	d90b      	bls.n	1115a <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   11142:	2300      	movs	r3, #0
   11144:	2261      	movs	r2, #97	; 0x61
   11146:	4620      	mov	r0, r4
   11148:	f00c fb9b 	bl	1d882 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1114c:	2301      	movs	r3, #1
   1114e:	2261      	movs	r2, #97	; 0x61
   11150:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11152:	f00c fb96 	bl	1d882 <net_byte_to_hex>
		needcolon = true;
   11156:	2201      	movs	r2, #1
   11158:	e7a4      	b.n	110a4 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   1115a:	b25b      	sxtb	r3, r3
   1115c:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   1115e:	bf94      	ite	ls
   11160:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   11162:	3357      	addhi	r3, #87	; 0x57
   11164:	1c60      	adds	r0, r4, #1
   11166:	7023      	strb	r3, [r4, #0]
   11168:	e7f0      	b.n	1114c <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   1116a:	f1bb 0f0f 	cmp.w	fp, #15
   1116e:	d903      	bls.n	11178 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11170:	2261      	movs	r2, #97	; 0x61
   11172:	4659      	mov	r1, fp
   11174:	4620      	mov	r0, r4
   11176:	e7ec      	b.n	11152 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   11178:	b252      	sxtb	r2, r2
   1117a:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   1117e:	bf94      	ite	ls
   11180:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   11182:	3257      	addhi	r2, #87	; 0x57
   11184:	1c60      	adds	r0, r4, #1
   11186:	7022      	strb	r2, [r4, #0]
   11188:	e7e5      	b.n	11156 <z_impl_net_addr_ntop+0x17a>
   1118a:	bf00      	nop
   1118c:	3b9aca00 	.word	0x3b9aca00

00011190 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   11190:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   11192:	4b09      	ldr	r3, [pc, #36]	; (111b8 <gpio_nrfx_init+0x28>)
   11194:	781a      	ldrb	r2, [r3, #0]
   11196:	b96a      	cbnz	r2, 111b4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   11198:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   1119a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   1119c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   1119e:	2105      	movs	r1, #5
   111a0:	f7fe fba0 	bl	f8e4 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   111a4:	2031      	movs	r0, #49	; 0x31
   111a6:	f7fe fb8d 	bl	f8c4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   111aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   111ae:	4b03      	ldr	r3, [pc, #12]	; (111bc <gpio_nrfx_init+0x2c>)
   111b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   111b4:	2000      	movs	r0, #0
   111b6:	bd08      	pop	{r3, pc}
   111b8:	20026549 	.word	0x20026549
   111bc:	40031000 	.word	0x40031000

000111c0 <gpiote_pin_int_cfg>:
{
   111c0:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   111c2:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   111c4:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   111c6:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   111c8:	4c51      	ldr	r4, [pc, #324]	; (11310 <gpiote_pin_int_cfg+0x150>)
   111ca:	7918      	ldrb	r0, [r3, #4]
   111cc:	f001 031f 	and.w	r3, r1, #31
   111d0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   111d4:	2000      	movs	r0, #0
   111d6:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   111da:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   111dc:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   111e0:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   111e4:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   111e8:	42b3      	cmp	r3, r6
   111ea:	d170      	bne.n	112ce <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
   111ec:	fa25 f600 	lsr.w	r6, r5, r0
   111f0:	07f6      	lsls	r6, r6, #31
   111f2:	d56c      	bpl.n	112ce <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   111f4:	0085      	lsls	r5, r0, #2
   111f6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   111fa:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   111fe:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   11202:	f026 0601 	bic.w	r6, r6, #1
   11206:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1120a:	2501      	movs	r5, #1
   1120c:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   11210:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11214:	4d3f      	ldr	r5, [pc, #252]	; (11314 <gpiote_pin_int_cfg+0x154>)
   11216:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1121a:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   1121e:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11222:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   11226:	6890      	ldr	r0, [r2, #8]
   11228:	40c8      	lsrs	r0, r1
   1122a:	f010 0001 	ands.w	r0, r0, #1
   1122e:	d04d      	beq.n	112cc <gpiote_pin_int_cfg+0x10c>
   11230:	68d0      	ldr	r0, [r2, #12]
   11232:	40c8      	lsrs	r0, r1
   11234:	f010 0001 	ands.w	r0, r0, #1
   11238:	d048      	beq.n	112cc <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   1123a:	6950      	ldr	r0, [r2, #20]
   1123c:	40c8      	lsrs	r0, r1
   1123e:	f010 0001 	ands.w	r0, r0, #1
   11242:	d050      	beq.n	112e6 <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
   11244:	6990      	ldr	r0, [r2, #24]
   11246:	40c8      	lsrs	r0, r1
   11248:	07c0      	lsls	r0, r0, #31
   1124a:	d444      	bmi.n	112d6 <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
   1124c:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1124e:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   11250:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   11252:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   11256:	f000 0001 	and.w	r0, r0, #1
   1125a:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1125e:	4288      	cmp	r0, r1
   11260:	bf14      	ite	ne
   11262:	2101      	movne	r1, #1
   11264:	2102      	moveq	r1, #2
   11266:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   11268:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1126c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   11270:	f010 0003 	ands.w	r0, r0, #3
   11274:	d131      	bne.n	112da <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11276:	00aa      	lsls	r2, r5, #2
   11278:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1127c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   11280:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11284:	021b      	lsls	r3, r3, #8
   11286:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1128a:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   1128e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11292:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
   11296:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1129a:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
   1129e:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   112a0:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   112a4:	b29b      	uxth	r3, r3
   112a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   112aa:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   112ae:	4331      	orrs	r1, r6
   112b0:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   112b4:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   112b6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   112ba:	f043 0301 	orr.w	r3, r3, #1
   112be:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   112c2:	2301      	movs	r3, #1
   112c4:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   112c8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   112cc:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   112ce:	3001      	adds	r0, #1
   112d0:	2808      	cmp	r0, #8
   112d2:	d183      	bne.n	111dc <gpiote_pin_int_cfg+0x1c>
   112d4:	e79e      	b.n	11214 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   112d6:	2103      	movs	r1, #3
   112d8:	e7c5      	b.n	11266 <gpiote_pin_int_cfg+0xa6>
   112da:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   112dc:	2d08      	cmp	r5, #8
   112de:	d1c3      	bne.n	11268 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   112e0:	f06f 0012 	mvn.w	r0, #18
   112e4:	e7f2      	b.n	112cc <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   112e6:	6913      	ldr	r3, [r2, #16]
   112e8:	69d2      	ldr	r2, [r2, #28]
   112ea:	4053      	eors	r3, r2
   112ec:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   112f0:	f011 0f01 	tst.w	r1, #1
   112f4:	bf14      	ite	ne
   112f6:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   112fa:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   112fe:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   11302:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11306:	4313      	orrs	r3, r2
   11308:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   1130c:	e7de      	b.n	112cc <gpiote_pin_int_cfg+0x10c>
   1130e:	bf00      	nop
   11310:	40031000 	.word	0x40031000
   11314:	40842500 	.word	0x40842500

00011318 <gpio_nrfx_config>:
{
   11318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1131c:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   1131e:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11320:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   11324:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   11328:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1132a:	d040      	beq.n	113ae <gpio_nrfx_config+0x96>
   1132c:	dc09      	bgt.n	11342 <gpio_nrfx_config+0x2a>
   1132e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11332:	d03e      	beq.n	113b2 <gpio_nrfx_config+0x9a>
   11334:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   11338:	d03d      	beq.n	113b6 <gpio_nrfx_config+0x9e>
   1133a:	b190      	cbz	r0, 11362 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   1133c:	f06f 0015 	mvn.w	r0, #21
   11340:	e032      	b.n	113a8 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11342:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   11346:	d038      	beq.n	113ba <gpio_nrfx_config+0xa2>
   11348:	dc04      	bgt.n	11354 <gpio_nrfx_config+0x3c>
   1134a:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   1134e:	d1f5      	bne.n	1133c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   11350:	2003      	movs	r0, #3
   11352:	e006      	b.n	11362 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11354:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   11358:	d031      	beq.n	113be <gpio_nrfx_config+0xa6>
   1135a:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   1135e:	d1ed      	bne.n	1133c <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   11360:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   11362:	f406 7740 	and.w	r7, r6, #768	; 0x300
   11366:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1136a:	d02a      	beq.n	113c2 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   1136c:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   11370:	4263      	negs	r3, r4
   11372:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11374:	2901      	cmp	r1, #1
		from_pin = pin;
   11376:	bf19      	ittee	ne
   11378:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   1137a:	46a1      	movne	r9, r4
		to_pin   = 31U;
   1137c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   11380:	2400      	moveq	r4, #0
   11382:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   11386:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   1138a:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1138e:	ea47 070c 	orr.w	r7, r7, ip
   11392:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11396:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 11438 <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1139a:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1139e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   113a2:	45a1      	cmp	r9, r4
   113a4:	d20f      	bcs.n	113c6 <gpio_nrfx_config+0xae>
	return 0;
   113a6:	2000      	movs	r0, #0
}
   113a8:	b003      	add	sp, #12
   113aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   113ae:	2002      	movs	r0, #2
   113b0:	e7d7      	b.n	11362 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   113b2:	2001      	movs	r0, #1
   113b4:	e7d5      	b.n	11362 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   113b6:	2004      	movs	r0, #4
   113b8:	e7d3      	b.n	11362 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   113ba:	2005      	movs	r0, #5
   113bc:	e7d1      	b.n	11362 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   113be:	2006      	movs	r0, #6
   113c0:	e7cf      	b.n	11362 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   113c2:	2303      	movs	r3, #3
   113c4:	e7d6      	b.n	11374 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   113c6:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   113ca:	6892      	ldr	r2, [r2, #8]
   113cc:	7911      	ldrb	r1, [r2, #4]
   113ce:	f004 021f 	and.w	r2, r4, #31
   113d2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   113d6:	3280      	adds	r2, #128	; 0x80
   113d8:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   113dc:	68a9      	ldr	r1, [r5, #8]
   113de:	fa0b f204 	lsl.w	r2, fp, r4
   113e2:	2b00      	cmp	r3, #0
   113e4:	d025      	beq.n	11432 <gpio_nrfx_config+0x11a>
   113e6:	4311      	orrs	r1, r2
   113e8:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   113ea:	6969      	ldr	r1, [r5, #20]
   113ec:	06b0      	lsls	r0, r6, #26
   113ee:	bf4c      	ite	mi
   113f0:	4311      	orrmi	r1, r2
   113f2:	4391      	bicpl	r1, r2
   113f4:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   113f6:	69a9      	ldr	r1, [r5, #24]
   113f8:	0670      	lsls	r0, r6, #25
   113fa:	bf4c      	ite	mi
   113fc:	4311      	orrmi	r1, r2
   113fe:	4391      	bicpl	r1, r2
   11400:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   11402:	6929      	ldr	r1, [r5, #16]
   11404:	0770      	lsls	r0, r6, #29
   11406:	bf4c      	ite	mi
   11408:	4311      	orrmi	r1, r2
   1140a:	4391      	bicpl	r1, r2
   1140c:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   1140e:	69e9      	ldr	r1, [r5, #28]
   11410:	0630      	lsls	r0, r6, #24
   11412:	bf4c      	ite	mi
   11414:	430a      	orrmi	r2, r1
   11416:	ea21 0202 	bicpl.w	r2, r1, r2
   1141a:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1141c:	4621      	mov	r1, r4
   1141e:	4640      	mov	r0, r8
   11420:	9301      	str	r3, [sp, #4]
   11422:	f7ff fecd 	bl	111c0 <gpiote_pin_int_cfg>
		if (res != 0) {
   11426:	2800      	cmp	r0, #0
   11428:	d1be      	bne.n	113a8 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1142a:	3401      	adds	r4, #1
   1142c:	b2e4      	uxtb	r4, r4
   1142e:	9b01      	ldr	r3, [sp, #4]
   11430:	e7b7      	b.n	113a2 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11432:	ea21 0102 	bic.w	r1, r1, r2
   11436:	e7d7      	b.n	113e8 <gpio_nrfx_config+0xd0>
   11438:	40842500 	.word	0x40842500

0001143c <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1143c:	494f      	ldr	r1, [pc, #316]	; (1157c <gpiote_event_handler+0x140>)
{
   1143e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11442:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   11444:	2d00      	cmp	r5, #0
   11446:	d060      	beq.n	1150a <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
   11448:	4b4d      	ldr	r3, [pc, #308]	; (11580 <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
   1144a:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1144c:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   1144e:	681b      	ldr	r3, [r3, #0]
   11450:	f8df e138 	ldr.w	lr, [pc, #312]	; 1158c <gpiote_event_handler+0x150>
   11454:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11456:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   1145a:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   1145c:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   11460:	4320      	orrs	r0, r4
   11462:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   11466:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   11468:	69d4      	ldr	r4, [r2, #28]
   1146a:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   1146c:	6900      	ldr	r0, [r0, #16]
   1146e:	4054      	eors	r4, r2
   11470:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   11472:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   11474:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   11478:	bb93      	cbnz	r3, 114e0 <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1147a:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1147c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1147e:	2001      	movs	r0, #1
   11480:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   11482:	4940      	ldr	r1, [pc, #256]	; (11584 <gpiote_event_handler+0x148>)
   11484:	4e40      	ldr	r6, [pc, #256]	; (11588 <gpiote_event_handler+0x14c>)
   11486:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   1148a:	fa00 fc03 	lsl.w	ip, r0, r3
   1148e:	ea1c 0f02 	tst.w	ip, r2
   11492:	d00d      	beq.n	114b0 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11494:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   11498:	b152      	cbz	r2, 114b0 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1149a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1149e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   114a2:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   114a6:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   114aa:	fa00 f202 	lsl.w	r2, r0, r2
   114ae:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   114b0:	3301      	adds	r3, #1
   114b2:	2b08      	cmp	r3, #8
   114b4:	d1e7      	bne.n	11486 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   114b6:	bb54      	cbnz	r4, 1150e <gpiote_event_handler+0xd2>
	if (port_event) {
   114b8:	b185      	cbz	r5, 114dc <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
   114ba:	2401      	movs	r4, #1
	u32_t pin = 0U;
   114bc:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   114be:	4b30      	ldr	r3, [pc, #192]	; (11580 <gpiote_event_handler+0x144>)
   114c0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1158c <gpiote_event_handler+0x150>
   114c4:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   114c6:	681b      	ldr	r3, [r3, #0]
   114c8:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   114ca:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   114ce:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   114d0:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   114d4:	4301      	orrs	r1, r0
   114d6:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   114da:	bb7b      	cbnz	r3, 1153c <gpiote_event_handler+0x100>
}
   114dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   114e0:	4203      	tst	r3, r0
   114e2:	d00f      	beq.n	11504 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   114e4:	f897 c004 	ldrb.w	ip, [r7, #4]
   114e8:	f006 021f 	and.w	r2, r6, #31
   114ec:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   114f0:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   114f4:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   114f8:	ea23 0300 	bic.w	r3, r3, r0
   114fc:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11500:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   11504:	3601      	adds	r6, #1
		bit <<= 1;
   11506:	0040      	lsls	r0, r0, #1
   11508:	e7b6      	b.n	11478 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1150a:	462c      	mov	r4, r5
   1150c:	e7b6      	b.n	1147c <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
   1150e:	4f1c      	ldr	r7, [pc, #112]	; (11580 <gpiote_event_handler+0x144>)
   11510:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11514:	f8d8 1000 	ldr.w	r1, [r8]
   11518:	2900      	cmp	r1, #0
   1151a:	d0cd      	beq.n	114b8 <gpiote_event_handler+0x7c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1151c:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   1151e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11522:	688a      	ldr	r2, [r1, #8]
   11524:	4023      	ands	r3, r4
   11526:	4213      	tst	r3, r2
   11528:	d003      	beq.n	11532 <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
   1152a:	684b      	ldr	r3, [r1, #4]
   1152c:	4622      	mov	r2, r4
   1152e:	4638      	mov	r0, r7
   11530:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11532:	2e00      	cmp	r6, #0
   11534:	d0c0      	beq.n	114b8 <gpiote_event_handler+0x7c>
   11536:	4631      	mov	r1, r6
   11538:	6836      	ldr	r6, [r6, #0]
   1153a:	e7f0      	b.n	1151e <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   1153c:	421c      	tst	r4, r3
   1153e:	d01a      	beq.n	11576 <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11540:	7930      	ldrb	r0, [r6, #4]
   11542:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11546:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11548:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1154c:	6910      	ldr	r0, [r2, #16]
   1154e:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   11552:	4078      	eors	r0, r7
   11554:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   11556:	f010 0f01 	tst.w	r0, #1
   1155a:	bf14      	ite	ne
   1155c:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   11560:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11564:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   11568:	ea23 0304 	bic.w	r3, r3, r4
   1156c:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11570:	4338      	orrs	r0, r7
   11572:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   11576:	3501      	adds	r5, #1
		bit <<= 1;
   11578:	0064      	lsls	r4, r4, #1
   1157a:	e7ae      	b.n	114da <gpiote_event_handler+0x9e>
   1157c:	4003117c 	.word	0x4003117c
   11580:	2002c608 	.word	0x2002c608
   11584:	40031000 	.word	0x40031000
   11588:	40031100 	.word	0x40031100
   1158c:	40842500 	.word	0x40842500

00011590 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11590:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11592:	794b      	ldrb	r3, [r1, #5]
   11594:	2b01      	cmp	r3, #1
   11596:	d029      	beq.n	115ec <uarte_nrfx_configure+0x5c>
   11598:	2b03      	cmp	r3, #3
   1159a:	d124      	bne.n	115e6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1159c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1159e:	798b      	ldrb	r3, [r1, #6]
   115a0:	2b03      	cmp	r3, #3
   115a2:	d120      	bne.n	115e6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   115a4:	79cc      	ldrb	r4, [r1, #7]
   115a6:	b12c      	cbz	r4, 115b4 <uarte_nrfx_configure+0x24>
   115a8:	2c01      	cmp	r4, #1
   115aa:	d11c      	bne.n	115e6 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   115ac:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   115ae:	689b      	ldr	r3, [r3, #8]
   115b0:	791b      	ldrb	r3, [r3, #4]
   115b2:	b1c3      	cbz	r3, 115e6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   115b4:	790a      	ldrb	r2, [r1, #4]
   115b6:	b112      	cbz	r2, 115be <uarte_nrfx_configure+0x2e>
   115b8:	2a02      	cmp	r2, #2
   115ba:	d114      	bne.n	115e6 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   115bc:	220e      	movs	r2, #14
	switch (baudrate) {
   115be:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   115c2:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   115c4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   115c6:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   115c8:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   115ca:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   115cc:	d062      	beq.n	11694 <uarte_nrfx_configure+0x104>
   115ce:	d829      	bhi.n	11624 <uarte_nrfx_configure+0x94>
   115d0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   115d4:	d061      	beq.n	1169a <uarte_nrfx_configure+0x10a>
   115d6:	d814      	bhi.n	11602 <uarte_nrfx_configure+0x72>
   115d8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   115dc:	d05f      	beq.n	1169e <uarte_nrfx_configure+0x10e>
   115de:	d807      	bhi.n	115f0 <uarte_nrfx_configure+0x60>
   115e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   115e4:	d05e      	beq.n	116a4 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   115e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   115ea:	e052      	b.n	11692 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   115ec:	2600      	movs	r6, #0
   115ee:	e7d6      	b.n	1159e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   115f0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   115f4:	d059      	beq.n	116aa <uarte_nrfx_configure+0x11a>
   115f6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   115fa:	d1f4      	bne.n	115e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   115fc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11600:	e03c      	b.n	1167c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11602:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11606:	d053      	beq.n	116b0 <uarte_nrfx_configure+0x120>
   11608:	d804      	bhi.n	11614 <uarte_nrfx_configure+0x84>
   1160a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1160e:	d1ea      	bne.n	115e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11610:	4b32      	ldr	r3, [pc, #200]	; (116dc <uarte_nrfx_configure+0x14c>)
   11612:	e033      	b.n	1167c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11614:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11618:	d04c      	beq.n	116b4 <uarte_nrfx_configure+0x124>
   1161a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1161e:	d1e2      	bne.n	115e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11620:	4b2f      	ldr	r3, [pc, #188]	; (116e0 <uarte_nrfx_configure+0x150>)
   11622:	e02b      	b.n	1167c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11624:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11628:	d046      	beq.n	116b8 <uarte_nrfx_configure+0x128>
   1162a:	d812      	bhi.n	11652 <uarte_nrfx_configure+0xc2>
   1162c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11630:	42bb      	cmp	r3, r7
   11632:	d044      	beq.n	116be <uarte_nrfx_configure+0x12e>
   11634:	d805      	bhi.n	11642 <uarte_nrfx_configure+0xb2>
   11636:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1163a:	d1d4      	bne.n	115e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1163c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11640:	e01c      	b.n	1167c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11642:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11646:	d03d      	beq.n	116c4 <uarte_nrfx_configure+0x134>
   11648:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1164c:	d1cb      	bne.n	115e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1164e:	4b25      	ldr	r3, [pc, #148]	; (116e4 <uarte_nrfx_configure+0x154>)
   11650:	e014      	b.n	1167c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11652:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11656:	d038      	beq.n	116ca <uarte_nrfx_configure+0x13a>
   11658:	d808      	bhi.n	1166c <uarte_nrfx_configure+0xdc>
   1165a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1165e:	d037      	beq.n	116d0 <uarte_nrfx_configure+0x140>
   11660:	4f21      	ldr	r7, [pc, #132]	; (116e8 <uarte_nrfx_configure+0x158>)
   11662:	42bb      	cmp	r3, r7
   11664:	d1bf      	bne.n	115e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11666:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1166a:	e007      	b.n	1167c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1166c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11670:	d031      	beq.n	116d6 <uarte_nrfx_configure+0x146>
   11672:	4f1e      	ldr	r7, [pc, #120]	; (116ec <uarte_nrfx_configure+0x15c>)
   11674:	42bb      	cmp	r3, r7
   11676:	d1b6      	bne.n	115e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11678:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1167c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11680:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11682:	6883      	ldr	r3, [r0, #8]
   11684:	4322      	orrs	r2, r4
   11686:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11688:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1168c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11690:	2000      	movs	r0, #0
}
   11692:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11694:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11698:	e7f0      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1169a:	4b15      	ldr	r3, [pc, #84]	; (116f0 <uarte_nrfx_configure+0x160>)
   1169c:	e7ee      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   1169e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   116a2:	e7eb      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   116a4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   116a8:	e7e8      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   116aa:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   116ae:	e7e5      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   116b0:	4b10      	ldr	r3, [pc, #64]	; (116f4 <uarte_nrfx_configure+0x164>)
   116b2:	e7e3      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   116b4:	4b10      	ldr	r3, [pc, #64]	; (116f8 <uarte_nrfx_configure+0x168>)
   116b6:	e7e1      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   116b8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   116bc:	e7de      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   116be:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   116c2:	e7db      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   116c4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   116c8:	e7d8      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   116ca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   116ce:	e7d5      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   116d0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   116d4:	e7d2      	b.n	1167c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   116d6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   116da:	e7cf      	b.n	1167c <uarte_nrfx_configure+0xec>
   116dc:	00275000 	.word	0x00275000
   116e0:	0075c000 	.word	0x0075c000
   116e4:	013a9000 	.word	0x013a9000
   116e8:	0003d090 	.word	0x0003d090
   116ec:	000f4240 	.word	0x000f4240
   116f0:	0013b000 	.word	0x0013b000
   116f4:	003af000 	.word	0x003af000
   116f8:	004ea000 	.word	0x004ea000

000116fc <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   116fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11700:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11702:	f04f 0e03 	mov.w	lr, #3
   11706:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   1170a:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   1170c:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   1170e:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11710:	fa05 f702 	lsl.w	r7, r5, r2
   11714:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   11716:	4b1f      	ldr	r3, [pc, #124]	; (11794 <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11718:	6886      	ldr	r6, [r0, #8]
   1171a:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1171c:	f102 0780 	add.w	r7, r2, #128	; 0x80
   11720:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   11724:	684f      	ldr	r7, [r1, #4]
   11726:	f107 0880 	add.w	r8, r7, #128	; 0x80
   1172a:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1172e:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   11732:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11736:	688f      	ldr	r7, [r1, #8]
   11738:	1c7a      	adds	r2, r7, #1
   1173a:	d010      	beq.n	1175e <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1173c:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   1173e:	1c51      	adds	r1, r2, #1
   11740:	d00d      	beq.n	1175e <uarte_instance_init.constprop.4+0x62>
   11742:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11746:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   11748:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1174a:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   1174e:	f107 0180 	add.w	r1, r7, #128	; 0x80
   11752:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   11756:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1175a:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1175e:	4631      	mov	r1, r6
   11760:	f7ff ff16 	bl	11590 <uarte_nrfx_configure>
	if (err) {
   11764:	b9a0      	cbnz	r0, 11790 <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11766:	2308      	movs	r3, #8
   11768:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1176c:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11770:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11774:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11778:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1177a:	68b2      	ldr	r2, [r6, #8]
   1177c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11780:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11782:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11784:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11788:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1178c:	60a3      	str	r3, [r4, #8]
   1178e:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11794:	40842500 	.word	0x40842500

00011798 <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   11798:	b530      	push	{r4, r5, lr}
   1179a:	b085      	sub	sp, #20
   1179c:	466c      	mov	r4, sp
   1179e:	4605      	mov	r5, r0
   117a0:	4b08      	ldr	r3, [pc, #32]	; (117c4 <uarte_2_init+0x2c>)
   117a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   117a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   117a8:	2200      	movs	r2, #0
   117aa:	2101      	movs	r1, #1
   117ac:	200a      	movs	r0, #10
   117ae:	f7fe f899 	bl	f8e4 <z_arm_irq_priority_set>
   117b2:	200a      	movs	r0, #10
   117b4:	f7fe f886 	bl	f8c4 <arch_irq_enable>
   117b8:	4621      	mov	r1, r4
   117ba:	4628      	mov	r0, r5
   117bc:	f7ff ff9e 	bl	116fc <uarte_instance_init.constprop.4>
   117c0:	b005      	add	sp, #20
   117c2:	bd30      	pop	{r4, r5, pc}
   117c4:	0001f408 	.word	0x0001f408

000117c8 <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   117c8:	b530      	push	{r4, r5, lr}
   117ca:	b085      	sub	sp, #20
   117cc:	466c      	mov	r4, sp
   117ce:	4605      	mov	r5, r0
   117d0:	4b08      	ldr	r3, [pc, #32]	; (117f4 <uarte_0_init+0x2c>)
   117d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   117d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   117d8:	2200      	movs	r2, #0
   117da:	2101      	movs	r1, #1
   117dc:	2008      	movs	r0, #8
   117de:	f7fe f881 	bl	f8e4 <z_arm_irq_priority_set>
   117e2:	2008      	movs	r0, #8
   117e4:	f7fe f86e 	bl	f8c4 <arch_irq_enable>
   117e8:	4621      	mov	r1, r4
   117ea:	4628      	mov	r0, r5
   117ec:	f7ff ff86 	bl	116fc <uarte_instance_init.constprop.4>
   117f0:	b005      	add	sp, #20
   117f2:	bd30      	pop	{r4, r5, pc}
   117f4:	0001f418 	.word	0x0001f418

000117f8 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   117f8:	2200      	movs	r2, #0
{
   117fa:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   117fc:	4611      	mov	r1, r2
   117fe:	202a      	movs	r0, #42	; 0x2a
   11800:	f7fe f870 	bl	f8e4 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   11804:	f003 f90c 	bl	14a20 <bsd_init>
   11808:	4b01      	ldr	r3, [pc, #4]	; (11810 <_bsdlib_init+0x18>)
   1180a:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   1180c:	2000      	movs	r0, #0
   1180e:	bd08      	pop	{r3, pc}
   11810:	2002039c 	.word	0x2002039c

00011814 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   11814:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   11816:	4b0d      	ldr	r3, [pc, #52]	; (1184c <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   11818:	4c0d      	ldr	r4, [pc, #52]	; (11850 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   1181a:	681a      	ldr	r2, [r3, #0]
   1181c:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1181e:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   11820:	4623      	mov	r3, r4
		if (entry->id == id) {
   11822:	6819      	ldr	r1, [r3, #0]
   11824:	4281      	cmp	r1, r0
   11826:	d00e      	beq.n	11846 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   11828:	b151      	cbz	r1, 11840 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   1182a:	6859      	ldr	r1, [r3, #4]
   1182c:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   1182e:	42b1      	cmp	r1, r6
   11830:	bfc4      	itt	gt
   11832:	461c      	movgt	r4, r3
   11834:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   11836:	3d01      	subs	r5, #1
   11838:	f103 0308 	add.w	r3, r3, #8
   1183c:	d1f1      	bne.n	11822 <thread_monitor_entry_get+0xe>
   1183e:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   11840:	3a01      	subs	r2, #1
	new_entry->id = id;
   11842:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   11844:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   11846:	4618      	mov	r0, r3
   11848:	bd70      	pop	{r4, r5, r6, pc}
   1184a:	bf00      	nop
   1184c:	200203a0 	.word	0x200203a0
   11850:	200203ac 	.word	0x200203ac

00011854 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11854:	4668      	mov	r0, sp
   11856:	f020 0107 	bic.w	r1, r0, #7
   1185a:	468d      	mov	sp, r1
   1185c:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1185e:	4b0d      	ldr	r3, [pc, #52]	; (11894 <rpc_proxy_irq_handler+0x40>)
   11860:	e8d3 2fef 	ldaex	r2, [r3]
   11864:	3201      	adds	r2, #1
   11866:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1186a:	2900      	cmp	r1, #0
   1186c:	d1f8      	bne.n	11860 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1186e:	f007 fb0b 	bl	18e88 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11872:	4b09      	ldr	r3, [pc, #36]	; (11898 <rpc_proxy_irq_handler+0x44>)
   11874:	681c      	ldr	r4, [r3, #0]
   11876:	b93c      	cbnz	r4, 11888 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11878:	f7fe f84c 	bl	f914 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1187c:	f7fd ff8c 	bl	f798 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11880:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   11884:	4685      	mov	sp, r0
   11886:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   11888:	1d20      	adds	r0, r4, #4
   1188a:	f00a fa2f 	bl	1bcec <z_impl_k_sem_give>
   1188e:	6824      	ldr	r4, [r4, #0]
	return node->next;
   11890:	e7f1      	b.n	11876 <rpc_proxy_irq_handler+0x22>
   11892:	bf00      	nop
   11894:	200203a0 	.word	0x200203a0
   11898:	200203a4 	.word	0x200203a4

0001189c <bsd_os_timedwait>:
{
   1189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a0:	4688      	mov	r8, r1
   118a2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   118a4:	f00d faa7 	bl	1edf6 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   118a8:	f8d8 3000 	ldr.w	r3, [r8]
   118ac:	4606      	mov	r6, r0
   118ae:	2b00      	cmp	r3, #0
   118b0:	460f      	mov	r7, r1
   118b2:	d103      	bne.n	118bc <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   118b4:	f00a f9a0 	bl	1bbf8 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   118b8:	203c      	movs	r0, #60	; 0x3c
   118ba:	e06e      	b.n	1199a <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   118bc:	bfbc      	itt	lt
   118be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   118c2:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   118c6:	2201      	movs	r2, #1
   118c8:	2100      	movs	r1, #0
   118ca:	a802      	add	r0, sp, #8
   118cc:	f00d f9f8 	bl	1ecc0 <z_impl_k_sem_init>
   118d0:	f10d 0a04 	add.w	sl, sp, #4
   118d4:	f04f 0320 	mov.w	r3, #32
   118d8:	f3ef 8b11 	mrs	fp, BASEPRI
   118dc:	f383 8811 	msr	BASEPRI, r3
   118e0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   118e4:	f00a f9fc 	bl	1bce0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   118e8:	f7ff ff94 	bl	11814 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   118ec:	4933      	ldr	r1, [pc, #204]	; (119bc <bsd_os_timedwait+0x120>)
   118ee:	6843      	ldr	r3, [r0, #4]
   118f0:	680a      	ldr	r2, [r1, #0]
   118f2:	4689      	mov	r9, r1
   118f4:	4293      	cmp	r3, r2
   118f6:	f04f 0300 	mov.w	r3, #0
   118fa:	d108      	bne.n	1190e <bsd_os_timedwait+0x72>
	parent->next = child;
   118fc:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   118fe:	4b30      	ldr	r3, [pc, #192]	; (119c0 <bsd_os_timedwait+0x124>)
   11900:	685a      	ldr	r2, [r3, #4]
   11902:	2a00      	cmp	r2, #0
   11904:	d14c      	bne.n	119a0 <bsd_os_timedwait+0x104>
	list->head = node;
   11906:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   1190a:	2301      	movs	r3, #1
   1190c:	e000      	b.n	11910 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   1190e:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   11910:	f38b 8811 	msr	BASEPRI, fp
   11914:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   11918:	2b00      	cmp	r3, #0
   1191a:	d03d      	beq.n	11998 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   1191c:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   11920:	a802      	add	r0, sp, #8
   11922:	f00a fa0f 	bl	1bd44 <z_impl_k_sem_take>
	__asm__ volatile(
   11926:	f04f 0320 	mov.w	r3, #32
   1192a:	f3ef 8b11 	mrs	fp, BASEPRI
   1192e:	f383 8811 	msr	BASEPRI, r3
   11932:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11936:	2000      	movs	r0, #0
   11938:	4b21      	ldr	r3, [pc, #132]	; (119c0 <bsd_os_timedwait+0x124>)
   1193a:	681a      	ldr	r2, [r3, #0]
   1193c:	b152      	cbz	r2, 11954 <bsd_os_timedwait+0xb8>
   1193e:	4552      	cmp	r2, sl
   11940:	d139      	bne.n	119b6 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   11942:	9901      	ldr	r1, [sp, #4]
   11944:	bb88      	cbnz	r0, 119aa <bsd_os_timedwait+0x10e>
   11946:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   11948:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1194a:	4290      	cmp	r0, r2
   1194c:	d100      	bne.n	11950 <bsd_os_timedwait+0xb4>
	list->tail = node;
   1194e:	6059      	str	r1, [r3, #4]
	parent->next = child;
   11950:	2300      	movs	r3, #0
   11952:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   11954:	f00a f9c4 	bl	1bce0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11958:	f7ff ff5c 	bl	11814 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1195c:	f8d9 3000 	ldr.w	r3, [r9]
   11960:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   11962:	f38b 8811 	msr	BASEPRI, fp
   11966:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   1196a:	f8d8 9000 	ldr.w	r9, [r8]
   1196e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   11972:	d011      	beq.n	11998 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   11974:	f00d fa3f 	bl	1edf6 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   11978:	eb16 0209 	adds.w	r2, r6, r9
   1197c:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   11980:	1a14      	subs	r4, r2, r0
   11982:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   11986:	2c00      	cmp	r4, #0
   11988:	f175 0300 	sbcs.w	r3, r5, #0
   1198c:	bfb8      	it	lt
   1198e:	2400      	movlt	r4, #0
   11990:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   11994:	2c00      	cmp	r4, #0
   11996:	d08f      	beq.n	118b8 <bsd_os_timedwait+0x1c>
	return 0;
   11998:	2000      	movs	r0, #0
}
   1199a:	b009      	add	sp, #36	; 0x24
   1199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119a0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   119a4:	f8c3 a004 	str.w	sl, [r3, #4]
   119a8:	e7af      	b.n	1190a <bsd_os_timedwait+0x6e>
	parent->next = child;
   119aa:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   119ac:	6859      	ldr	r1, [r3, #4]
   119ae:	4291      	cmp	r1, r2
	list->tail = node;
   119b0:	bf08      	it	eq
   119b2:	6058      	streq	r0, [r3, #4]
   119b4:	e7cc      	b.n	11950 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   119b6:	4610      	mov	r0, r2
   119b8:	6812      	ldr	r2, [r2, #0]
   119ba:	e7bf      	b.n	1193c <bsd_os_timedwait+0xa0>
   119bc:	200203a0 	.word	0x200203a0
   119c0:	200203a4 	.word	0x200203a4

000119c4 <bsd_os_errno_set>:
	switch (err_code) {
   119c4:	282d      	cmp	r0, #45	; 0x2d
{
   119c6:	b510      	push	{r4, lr}
   119c8:	4604      	mov	r4, r0
	switch (err_code) {
   119ca:	d00c      	beq.n	119e6 <bsd_os_errno_set+0x22>
   119cc:	dc38      	bgt.n	11a40 <bsd_os_errno_set+0x7c>
   119ce:	280e      	cmp	r0, #14
   119d0:	d009      	beq.n	119e6 <bsd_os_errno_set+0x22>
   119d2:	dc11      	bgt.n	119f8 <bsd_os_errno_set+0x34>
   119d4:	2808      	cmp	r0, #8
   119d6:	d006      	beq.n	119e6 <bsd_os_errno_set+0x22>
   119d8:	dc09      	bgt.n	119ee <bsd_os_errno_set+0x2a>
   119da:	2802      	cmp	r0, #2
   119dc:	d003      	beq.n	119e6 <bsd_os_errno_set+0x22>
   119de:	2805      	cmp	r0, #5
   119e0:	d001      	beq.n	119e6 <bsd_os_errno_set+0x22>
   119e2:	2801      	cmp	r0, #1
   119e4:	d119      	bne.n	11a1a <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
   119e6:	f00c f9c9 	bl	1dd7c <z_errno>
   119ea:	6004      	str	r4, [r0, #0]
}
   119ec:	bd10      	pop	{r4, pc}
	switch (err_code) {
   119ee:	280c      	cmp	r0, #12
   119f0:	d0f9      	beq.n	119e6 <bsd_os_errno_set+0x22>
   119f2:	dc57      	bgt.n	11aa4 <bsd_os_errno_set+0xe0>
   119f4:	2809      	cmp	r0, #9
   119f6:	e7f5      	b.n	119e4 <bsd_os_errno_set+0x20>
   119f8:	2828      	cmp	r0, #40	; 0x28
   119fa:	f000 8083 	beq.w	11b04 <bsd_os_errno_set+0x140>
   119fe:	dc05      	bgt.n	11a0c <bsd_os_errno_set+0x48>
   11a00:	2818      	cmp	r0, #24
   11a02:	d0f0      	beq.n	119e6 <bsd_os_errno_set+0x22>
   11a04:	2823      	cmp	r0, #35	; 0x23
   11a06:	d052      	beq.n	11aae <bsd_os_errno_set+0xea>
   11a08:	2816      	cmp	r0, #22
   11a0a:	e7eb      	b.n	119e4 <bsd_os_errno_set+0x20>
   11a0c:	282a      	cmp	r0, #42	; 0x2a
   11a0e:	d0ea      	beq.n	119e6 <bsd_os_errno_set+0x22>
   11a10:	db51      	blt.n	11ab6 <bsd_os_errno_set+0xf2>
   11a12:	282b      	cmp	r0, #43	; 0x2b
   11a14:	d0e7      	beq.n	119e6 <bsd_os_errno_set+0x22>
   11a16:	282c      	cmp	r0, #44	; 0x2c
   11a18:	d051      	beq.n	11abe <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   11a1a:	2301      	movs	r3, #1
   11a1c:	f04f 0200 	mov.w	r2, #0
   11a20:	493a      	ldr	r1, [pc, #232]	; (11b0c <bsd_os_errno_set+0x148>)
   11a22:	f363 0207 	bfi	r2, r3, #0, #8
   11a26:	4b3a      	ldr	r3, [pc, #232]	; (11b10 <bsd_os_errno_set+0x14c>)
   11a28:	483a      	ldr	r0, [pc, #232]	; (11b14 <bsd_os_errno_set+0x150>)
   11a2a:	1a5b      	subs	r3, r3, r1
   11a2c:	08db      	lsrs	r3, r3, #3
   11a2e:	f363 128f 	bfi	r2, r3, #6, #10
   11a32:	4621      	mov	r1, r4
   11a34:	f00b f8a6 	bl	1cb84 <log_1>
		errno = 0xBAADBAAD;
   11a38:	f00c f9a0 	bl	1dd7c <z_errno>
   11a3c:	4b36      	ldr	r3, [pc, #216]	; (11b18 <bsd_os_errno_set+0x154>)
   11a3e:	e034      	b.n	11aaa <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11a40:	283c      	cmp	r0, #60	; 0x3c
   11a42:	d0d0      	beq.n	119e6 <bsd_os_errno_set+0x22>
   11a44:	dc15      	bgt.n	11a72 <bsd_os_errno_set+0xae>
   11a46:	2833      	cmp	r0, #51	; 0x33
   11a48:	d0cd      	beq.n	119e6 <bsd_os_errno_set+0x22>
   11a4a:	dc05      	bgt.n	11a58 <bsd_os_errno_set+0x94>
   11a4c:	2830      	cmp	r0, #48	; 0x30
   11a4e:	d0ca      	beq.n	119e6 <bsd_os_errno_set+0x22>
   11a50:	2832      	cmp	r0, #50	; 0x32
   11a52:	d038      	beq.n	11ac6 <bsd_os_errno_set+0x102>
   11a54:	282f      	cmp	r0, #47	; 0x2f
   11a56:	e7c5      	b.n	119e4 <bsd_os_errno_set+0x20>
   11a58:	2836      	cmp	r0, #54	; 0x36
   11a5a:	d0c4      	beq.n	119e6 <bsd_os_errno_set+0x22>
   11a5c:	dc01      	bgt.n	11a62 <bsd_os_errno_set+0x9e>
   11a5e:	2834      	cmp	r0, #52	; 0x34
   11a60:	e7c0      	b.n	119e4 <bsd_os_errno_set+0x20>
   11a62:	2838      	cmp	r0, #56	; 0x38
   11a64:	d0bf      	beq.n	119e6 <bsd_os_errno_set+0x22>
   11a66:	2839      	cmp	r0, #57	; 0x39
   11a68:	d1d7      	bne.n	11a1a <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
   11a6a:	f00c f987 	bl	1dd7c <z_errno>
   11a6e:	2339      	movs	r3, #57	; 0x39
   11a70:	e01b      	b.n	11aaa <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11a72:	287d      	cmp	r0, #125	; 0x7d
   11a74:	d033      	beq.n	11ade <bsd_os_errno_set+0x11a>
   11a76:	dc09      	bgt.n	11a8c <bsd_os_errno_set+0xc8>
   11a78:	2870      	cmp	r0, #112	; 0x70
   11a7a:	d028      	beq.n	11ace <bsd_os_errno_set+0x10a>
   11a7c:	2873      	cmp	r0, #115	; 0x73
   11a7e:	d02a      	beq.n	11ad6 <bsd_os_errno_set+0x112>
   11a80:	2869      	cmp	r0, #105	; 0x69
   11a82:	d1ca      	bne.n	11a1a <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
   11a84:	f00c f97a 	bl	1dd7c <z_errno>
   11a88:	2337      	movs	r3, #55	; 0x37
   11a8a:	e00e      	b.n	11aaa <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11a8c:	287f      	cmp	r0, #127	; 0x7f
   11a8e:	d02f      	beq.n	11af0 <bsd_os_errno_set+0x12c>
   11a90:	db29      	blt.n	11ae6 <bsd_os_errno_set+0x122>
   11a92:	2880      	cmp	r0, #128	; 0x80
   11a94:	d031      	beq.n	11afa <bsd_os_errno_set+0x136>
   11a96:	2881      	cmp	r0, #129	; 0x81
   11a98:	d1bf      	bne.n	11a1a <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
   11a9a:	f00c f96f 	bl	1dd7c <z_errno>
   11a9e:	f240 73d4 	movw	r3, #2004	; 0x7d4
   11aa2:	e002      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = EACCES;
   11aa4:	f00c f96a 	bl	1dd7c <z_errno>
   11aa8:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   11aaa:	6003      	str	r3, [r0, #0]
}
   11aac:	e79e      	b.n	119ec <bsd_os_errno_set+0x28>
		errno = EAGAIN;
   11aae:	f00c f965 	bl	1dd7c <z_errno>
   11ab2:	230b      	movs	r3, #11
   11ab4:	e7f9      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
   11ab6:	f00c f961 	bl	1dd7c <z_errno>
   11aba:	2329      	movs	r3, #41	; 0x29
   11abc:	e7f5      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
   11abe:	f00c f95d 	bl	1dd7c <z_errno>
   11ac2:	232c      	movs	r3, #44	; 0x2c
   11ac4:	e7f1      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
   11ac6:	f00c f959 	bl	1dd7c <z_errno>
   11aca:	233e      	movs	r3, #62	; 0x3e
   11acc:	e7ed      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
   11ace:	f00c f955 	bl	1dd7c <z_errno>
   11ad2:	2343      	movs	r3, #67	; 0x43
   11ad4:	e7e9      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
   11ad6:	f00c f951 	bl	1dd7c <z_errno>
   11ada:	2344      	movs	r3, #68	; 0x44
   11adc:	e7e5      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
   11ade:	f00c f94d 	bl	1dd7c <z_errno>
   11ae2:	2348      	movs	r3, #72	; 0x48
   11ae4:	e7e1      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
   11ae6:	f00c f949 	bl	1dd7c <z_errno>
   11aea:	f240 73d1 	movw	r3, #2001	; 0x7d1
   11aee:	e7dc      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
   11af0:	f00c f944 	bl	1dd7c <z_errno>
   11af4:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11af8:	e7d7      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
   11afa:	f00c f93f 	bl	1dd7c <z_errno>
   11afe:	f240 73d3 	movw	r3, #2003	; 0x7d3
   11b02:	e7d2      	b.n	11aaa <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
   11b04:	f00c f93a 	bl	1dd7c <z_errno>
   11b08:	2324      	movs	r3, #36	; 0x24
   11b0a:	e7ce      	b.n	11aaa <bsd_os_errno_set+0xe6>
   11b0c:	0001f370 	.word	0x0001f370
   11b10:	0001f390 	.word	0x0001f390
   11b14:	00020af6 	.word	0x00020af6
   11b18:	baadbaad 	.word	0xbaadbaad

00011b1c <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11b20:	4b01      	ldr	r3, [pc, #4]	; (11b28 <bsd_os_application_irq_set+0xc>)
   11b22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11b26:	4770      	bx	lr
   11b28:	e000e100 	.word	0xe000e100

00011b2c <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11b30:	4b01      	ldr	r3, [pc, #4]	; (11b38 <bsd_os_application_irq_clear+0xc>)
   11b32:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11b36:	4770      	bx	lr
   11b38:	e000e100 	.word	0xe000e100

00011b3c <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11b40:	4b01      	ldr	r3, [pc, #4]	; (11b48 <bsd_os_trace_irq_set+0xc>)
   11b42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11b46:	4770      	bx	lr
   11b48:	e000e100 	.word	0xe000e100

00011b4c <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11b50:	4b01      	ldr	r3, [pc, #4]	; (11b58 <bsd_os_trace_irq_clear+0xc>)
   11b52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   11b56:	4770      	bx	lr
   11b58:	e000e100 	.word	0xe000e100

00011b5c <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   11b5c:	b500      	push	{lr}
   11b5e:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   11b60:	2218      	movs	r2, #24
   11b62:	2100      	movs	r1, #0
   11b64:	a802      	add	r0, sp, #8
   11b66:	f00b fda0 	bl	1d6aa <memset>
   11b6a:	2301      	movs	r3, #1
   11b6c:	9301      	str	r3, [sp, #4]
   11b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b72:	e9cd 3303 	strd	r3, r3, [sp, #12]
   11b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11b7a:	9306      	str	r3, [sp, #24]
   11b7c:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   11b7e:	2200      	movs	r2, #0
   11b80:	a901      	add	r1, sp, #4
   11b82:	4804      	ldr	r0, [pc, #16]	; (11b94 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   11b84:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   11b88:	f009 f8ee 	bl	1ad68 <nrfx_uarte_init>
#endif
}
   11b8c:	b009      	add	sp, #36	; 0x24
   11b8e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b92:	bf00      	nop
   11b94:	0001f5a8 	.word	0x0001f5a8

00011b98 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   11b98:	b508      	push	{r3, lr}
	list->head = NULL;
   11b9a:	2300      	movs	r3, #0
   11b9c:	4a08      	ldr	r2, [pc, #32]	; (11bc0 <bsd_os_init+0x28>)
	list->tail = NULL;
   11b9e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11ba2:	4a08      	ldr	r2, [pc, #32]	; (11bc4 <bsd_os_init+0x2c>)
   11ba4:	e8d2 1fef 	ldaex	r1, [r2]
   11ba8:	e8c2 3fe0 	stlex	r0, r3, [r2]
   11bac:	2800      	cmp	r0, #0
   11bae:	d1f9      	bne.n	11ba4 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   11bb0:	f00c f90f 	bl	1ddd2 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   11bb4:	f7ff ffd2 	bl	11b5c <trace_uart_init>
	trace_task_create();
}
   11bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   11bbc:	f00c b8fe 	b.w	1ddbc <trace_task_create>
   11bc0:	200203a4 	.word	0x200203a4
   11bc4:	200203a0 	.word	0x200203a0

00011bc8 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   11bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bcc:	4607      	mov	r7, r0
   11bce:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   11bd0:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11bd2:	f8df 8024 	ldr.w	r8, [pc, #36]	; 11bf8 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   11bd6:	b914      	cbnz	r4, 11bde <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   11bd8:	4620      	mov	r0, r4
   11bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   11bde:	2cff      	cmp	r4, #255	; 0xff
   11be0:	4626      	mov	r6, r4
   11be2:	bf28      	it	cs
   11be4:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   11be6:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11be8:	4632      	mov	r2, r6
   11bea:	4439      	add	r1, r7
   11bec:	4640      	mov	r0, r8
   11bee:	f009 f94f 	bl	1ae90 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   11bf2:	1ba4      	subs	r4, r4, r6
   11bf4:	e7ef      	b.n	11bd6 <bsd_os_trace_put+0xe>
   11bf6:	bf00      	nop
   11bf8:	0001f5a8 	.word	0x0001f5a8

00011bfc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   11bfc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   11c00:	d03c      	beq.n	11c7c <z_to_nrf_optname+0x80>
   11c02:	dc04      	bgt.n	11c0e <z_to_nrf_optname+0x12>
   11c04:	2801      	cmp	r0, #1
   11c06:	d044      	beq.n	11c92 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   11c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   11c0c:	4770      	bx	lr
	switch (z_in_level) {
   11c0e:	f240 2302 	movw	r3, #514	; 0x202
   11c12:	4298      	cmp	r0, r3
   11c14:	d052      	beq.n	11cbc <z_to_nrf_optname+0xc0>
   11c16:	f240 2303 	movw	r3, #515	; 0x203
   11c1a:	4298      	cmp	r0, r3
   11c1c:	d1f4      	bne.n	11c08 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   11c1e:	3901      	subs	r1, #1
   11c20:	2913      	cmp	r1, #19
   11c22:	d8f1      	bhi.n	11c08 <z_to_nrf_optname+0xc>
   11c24:	a301      	add	r3, pc, #4	; (adr r3, 11c2c <z_to_nrf_optname+0x30>)
   11c26:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   11c2a:	bf00      	nop
   11c2c:	00011cc9 	.word	0x00011cc9
   11c30:	00011c8d 	.word	0x00011c8d
   11c34:	00011cad 	.word	0x00011cad
   11c38:	00011c9f 	.word	0x00011c9f
   11c3c:	00011cb1 	.word	0x00011cb1
   11c40:	00011cb5 	.word	0x00011cb5
   11c44:	00011cb9 	.word	0x00011cb9
   11c48:	00011c09 	.word	0x00011c09
   11c4c:	00011c09 	.word	0x00011c09
   11c50:	00011c09 	.word	0x00011c09
   11c54:	00011c09 	.word	0x00011c09
   11c58:	00011c09 	.word	0x00011c09
   11c5c:	00011c09 	.word	0x00011c09
   11c60:	00011c09 	.word	0x00011c09
   11c64:	00011c09 	.word	0x00011c09
   11c68:	00011c09 	.word	0x00011c09
   11c6c:	00011c09 	.word	0x00011c09
   11c70:	00011c09 	.word	0x00011c09
   11c74:	00011c09 	.word	0x00011c09
   11c78:	00011ca3 	.word	0x00011ca3
		switch (z_in_optname) {
   11c7c:	3901      	subs	r1, #1
   11c7e:	2905      	cmp	r1, #5
   11c80:	d8c2      	bhi.n	11c08 <z_to_nrf_optname+0xc>
   11c82:	e8df f001 	tbb	[pc, r1]
   11c86:	1503      	.short	0x1503
   11c88:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   11c8c:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11c8e:	6013      	str	r3, [r2, #0]
   11c90:	e00a      	b.n	11ca8 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   11c92:	2914      	cmp	r1, #20
   11c94:	d005      	beq.n	11ca2 <z_to_nrf_optname+0xa6>
   11c96:	2919      	cmp	r1, #25
   11c98:	d005      	beq.n	11ca6 <z_to_nrf_optname+0xaa>
   11c9a:	2904      	cmp	r1, #4
   11c9c:	d1b4      	bne.n	11c08 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   11c9e:	2304      	movs	r3, #4
   11ca0:	e7f5      	b.n	11c8e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   11ca2:	2314      	movs	r3, #20
   11ca4:	e7f3      	b.n	11c8e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   11ca6:	6011      	str	r1, [r2, #0]
	int retval = 0;
   11ca8:	2000      	movs	r0, #0
			break;
   11caa:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   11cac:	2303      	movs	r3, #3
   11cae:	e7ee      	b.n	11c8e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   11cb0:	2305      	movs	r3, #5
   11cb2:	e7ec      	b.n	11c8e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   11cb4:	2306      	movs	r3, #6
   11cb6:	e7ea      	b.n	11c8e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11cb8:	2307      	movs	r3, #7
   11cba:	e7e8      	b.n	11c8e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   11cbc:	2902      	cmp	r1, #2
   11cbe:	d0e5      	beq.n	11c8c <z_to_nrf_optname+0x90>
   11cc0:	2903      	cmp	r1, #3
   11cc2:	d0f3      	beq.n	11cac <z_to_nrf_optname+0xb0>
   11cc4:	2901      	cmp	r1, #1
   11cc6:	d19f      	bne.n	11c08 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   11cc8:	2301      	movs	r3, #1
   11cca:	e7e0      	b.n	11c8e <z_to_nrf_optname+0x92>

00011ccc <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11ccc:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   11cce:	4b03      	ldr	r3, [pc, #12]	; (11cdc <nrf91_socket_iface_init+0x10>)
   11cd0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   11cd2:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   11cd4:	4802      	ldr	r0, [pc, #8]	; (11ce0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   11cd6:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   11cd8:	f7fd bc00 	b.w	f4dc <socket_offload_register>
   11cdc:	200203fc 	.word	0x200203fc
   11ce0:	0001f5b0 	.word	0x0001f5b0

00011ce4 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   11ce4:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   11ce6:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   11ce8:	b118      	cbz	r0, 11cf2 <callback_worker+0xe>
		data->callback(data->data);
   11cea:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   11cee:	300c      	adds	r0, #12
   11cf0:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   11cf2:	a901      	add	r1, sp, #4
   11cf4:	4802      	ldr	r0, [pc, #8]	; (11d00 <callback_worker+0x1c>)
   11cf6:	f009 fae1 	bl	1b2bc <k_mem_slab_free>
}
   11cfa:	b003      	add	sp, #12
   11cfc:	f85d fb04 	ldr.w	pc, [sp], #4
   11d00:	2002c650 	.word	0x2002c650

00011d04 <open_socket>:
{
   11d04:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   11d06:	4b09      	ldr	r3, [pc, #36]	; (11d2c <open_socket+0x28>)
   11d08:	f240 2201 	movw	r2, #513	; 0x201
   11d0c:	681b      	ldr	r3, [r3, #0]
   11d0e:	2100      	movs	r1, #0
   11d10:	681b      	ldr	r3, [r3, #0]
   11d12:	2066      	movs	r0, #102	; 0x66
   11d14:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   11d16:	4b06      	ldr	r3, [pc, #24]	; (11d30 <open_socket+0x2c>)
   11d18:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   11d1a:	3001      	adds	r0, #1
   11d1c:	d104      	bne.n	11d28 <open_socket+0x24>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   11d1e:	f009 f939 	bl	1af94 <z_impl_z_errno>
		return -errno;
   11d22:	6800      	ldr	r0, [r0, #0]
   11d24:	4240      	negs	r0, r0
}
   11d26:	bd08      	pop	{r3, pc}
	return 0;
   11d28:	2000      	movs	r0, #0
   11d2a:	e7fc      	b.n	11d26 <open_socket+0x22>
   11d2c:	20020344 	.word	0x20020344
   11d30:	20020400 	.word	0x20020400

00011d34 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   11d34:	b530      	push	{r4, r5, lr}
   11d36:	b087      	sub	sp, #28
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   11d38:	f7ff ffe4 	bl	11d04 <open_socket>
	if (err) {
   11d3c:	4d1a      	ldr	r5, [pc, #104]	; (11da8 <at_cmd_driver_init+0x74>)
   11d3e:	4b1b      	ldr	r3, [pc, #108]	; (11dac <at_cmd_driver_init+0x78>)
   11d40:	4604      	mov	r4, r0
   11d42:	1aed      	subs	r5, r5, r3
   11d44:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11d48:	f04f 0200 	mov.w	r2, #0
	if (err) {
   11d4c:	b158      	cbz	r0, 11d66 <at_cmd_driver_init+0x32>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11d4e:	2301      	movs	r3, #1
   11d50:	4601      	mov	r1, r0
   11d52:	f363 0207 	bfi	r2, r3, #0, #8
   11d56:	4816      	ldr	r0, [pc, #88]	; (11db0 <at_cmd_driver_init+0x7c>)
   11d58:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   11d5c:	f00a ff12 	bl	1cb84 <log_1>

	return 0;
}
   11d60:	4620      	mov	r0, r4
   11d62:	b007      	add	sp, #28
   11d64:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("Common AT socket created");
   11d66:	2304      	movs	r3, #4
   11d68:	f363 0207 	bfi	r2, r3, #0, #8
   11d6c:	f365 128f 	bfi	r2, r5, #6, #10
   11d70:	4910      	ldr	r1, [pc, #64]	; (11db4 <at_cmd_driver_init+0x80>)
   11d72:	4811      	ldr	r0, [pc, #68]	; (11db8 <at_cmd_driver_init+0x84>)
   11d74:	f00a ff06 	bl	1cb84 <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11d78:	230a      	movs	r3, #10
   11d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11d7e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   11d82:	490e      	ldr	r1, [pc, #56]	; (11dbc <at_cmd_driver_init+0x88>)
   11d84:	4b0e      	ldr	r3, [pc, #56]	; (11dc0 <at_cmd_driver_init+0x8c>)
   11d86:	e9cd 4404 	strd	r4, r4, [sp, #16]
   11d8a:	e9cd 4400 	strd	r4, r4, [sp]
   11d8e:	480d      	ldr	r0, [pc, #52]	; (11dc4 <at_cmd_driver_init+0x90>)
   11d90:	f00a f868 	bl	1be64 <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   11d94:	f04f 0200 	mov.w	r2, #0
   11d98:	2304      	movs	r3, #4
   11d9a:	f363 0207 	bfi	r2, r3, #0, #8
   11d9e:	f365 128f 	bfi	r2, r5, #6, #10
   11da2:	4904      	ldr	r1, [pc, #16]	; (11db4 <at_cmd_driver_init+0x80>)
   11da4:	4808      	ldr	r0, [pc, #32]	; (11dc8 <at_cmd_driver_init+0x94>)
   11da6:	e7d9      	b.n	11d5c <at_cmd_driver_init+0x28>
   11da8:	0001f378 	.word	0x0001f378
   11dac:	0001f370 	.word	0x0001f370
   11db0:	00020b7c 	.word	0x00020b7c
   11db4:	00020b69 	.word	0x00020b69
   11db8:	00020b9e 	.word	0x00020b9e
   11dbc:	20026db8 	.word	0x20026db8
   11dc0:	00011dcd 	.word	0x00011dcd
   11dc4:	20020414 	.word	0x20020414
   11dc8:	00020bbb 	.word	0x00020bbb

00011dcc <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   11dcc:	2304      	movs	r3, #4
   11dce:	f04f 0200 	mov.w	r2, #0
{
   11dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   11dd6:	f363 0207 	bfi	r2, r3, #0, #8
   11dda:	499b      	ldr	r1, [pc, #620]	; (12048 <socket_thread_fn+0x27c>)
   11ddc:	4b9b      	ldr	r3, [pc, #620]	; (1204c <socket_thread_fn+0x280>)
{
   11dde:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   11de0:	1a5b      	subs	r3, r3, r1
   11de2:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
   11de6:	f36b 128f 	bfi	r2, fp, #6, #10
   11dea:	4999      	ldr	r1, [pc, #612]	; (12050 <socket_thread_fn+0x284>)
   11dec:	4899      	ldr	r0, [pc, #612]	; (12054 <socket_thread_fn+0x288>)
   11dee:	f00a fec9 	bl	1cb84 <log_1>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   11df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11df6:	a903      	add	r1, sp, #12
   11df8:	4897      	ldr	r0, [pc, #604]	; (12058 <socket_thread_fn+0x28c>)
   11dfa:	f009 fa33 	bl	1b264 <k_mem_slab_alloc>
		ret.code  = 0;
   11dfe:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   11e00:	4c96      	ldr	r4, [pc, #600]	; (1205c <socket_thread_fn+0x290>)
		item->callback = NULL;
   11e02:	9903      	ldr	r1, [sp, #12]
   11e04:	6822      	ldr	r2, [r4, #0]
   11e06:	4896      	ldr	r0, [pc, #600]	; (12060 <socket_thread_fn+0x294>)
   11e08:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   11e0c:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
   11e10:	310c      	adds	r1, #12
		ret.code  = 0;
   11e12:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   11e14:	f88d 3014 	strb.w	r3, [sp, #20]
   11e18:	f640 228c 	movw	r2, #2700	; 0xa8c
   11e1c:	6800      	ldr	r0, [r0, #0]
   11e1e:	47d0      	blx	sl
		if (bytes_read < 0) {
   11e20:	1e01      	subs	r1, r0, #0
   11e22:	da5b      	bge.n	11edc <socket_thread_fn+0x110>
			LOG_ERR("AT socket recv failed with err %d",
   11e24:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   11e28:	f043 0301 	orr.w	r3, r3, #1
   11e2c:	f363 0507 	bfi	r5, r3, #0, #8
   11e30:	f36b 158f 	bfi	r5, fp, #6, #10
   11e34:	488b      	ldr	r0, [pc, #556]	; (12064 <socket_thread_fn+0x298>)
   11e36:	462a      	mov	r2, r5
   11e38:	f00a fea4 	bl	1cb84 <log_1>
	return socket_ops->close(sock);
   11e3c:	6823      	ldr	r3, [r4, #0]
   11e3e:	4888      	ldr	r0, [pc, #544]	; (12060 <socket_thread_fn+0x294>)
   11e40:	685b      	ldr	r3, [r3, #4]
   11e42:	6800      	ldr	r0, [r0, #0]
   11e44:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   11e46:	2800      	cmp	r0, #0
   11e48:	d131      	bne.n	11eae <socket_thread_fn+0xe2>
			    (open_socket() == 0)) {
   11e4a:	f7ff ff5b 	bl	11d04 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   11e4e:	bb70      	cbnz	r0, 11eae <socket_thread_fn+0xe2>
				LOG_INF("AT socket recovered");
   11e50:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   11e54:	f043 0303 	orr.w	r3, r3, #3
   11e58:	f363 0607 	bfi	r6, r3, #0, #8
   11e5c:	f36b 168f 	bfi	r6, fp, #6, #10
   11e60:	4631      	mov	r1, r6
   11e62:	4881      	ldr	r0, [pc, #516]	; (12068 <socket_thread_fn+0x29c>)
   11e64:	f00a fe81 	bl	1cb6a <log_0>
				ret.state = AT_CMD_ERROR;
   11e68:	2301      	movs	r3, #1
   11e6a:	f88d 3014 	strb.w	r3, [sp, #20]
   11e6e:	f009 f891 	bl	1af94 <z_impl_z_errno>
				ret.code  = -errno;
   11e72:	6803      	ldr	r3, [r0, #0]
   11e74:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   11e76:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   11e78:	9903      	ldr	r1, [sp, #12]
   11e7a:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   11e7e:	2b00      	cmp	r3, #0
   11e80:	f040 80b8 	bne.w	11ff4 <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   11e84:	a903      	add	r1, sp, #12
   11e86:	4874      	ldr	r0, [pc, #464]	; (12058 <socket_thread_fn+0x28c>)
   11e88:	f009 fa18 	bl	1b2bc <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   11e8c:	4b77      	ldr	r3, [pc, #476]	; (1206c <socket_thread_fn+0x2a0>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   11e8e:	689b      	ldr	r3, [r3, #8]
   11e90:	2b00      	cmp	r3, #0
   11e92:	d1ae      	bne.n	11df2 <socket_thread_fn+0x26>
   11e94:	f89d 2014 	ldrb.w	r2, [sp, #20]
   11e98:	2a04      	cmp	r2, #4
   11e9a:	d0aa      	beq.n	11df2 <socket_thread_fn+0x26>
			current_cmd_handler = NULL;
   11e9c:	4a74      	ldr	r2, [pc, #464]	; (12070 <socket_thread_fn+0x2a4>)
   11e9e:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(q, data, timeout);
   11ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ea4:	a904      	add	r1, sp, #16
   11ea6:	4873      	ldr	r0, [pc, #460]	; (12074 <socket_thread_fn+0x2a8>)
   11ea8:	f009 fad2 	bl	1b450 <z_impl_k_msgq_put>
   11eac:	e7a1      	b.n	11df2 <socket_thread_fn+0x26>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   11eae:	2301      	movs	r3, #1
   11eb0:	f04f 0400 	mov.w	r4, #0
   11eb4:	f363 0407 	bfi	r4, r3, #0, #8
   11eb8:	f36b 148f 	bfi	r4, fp, #6, #10
   11ebc:	f009 f86a 	bl	1af94 <z_impl_z_errno>
   11ec0:	4622      	mov	r2, r4
   11ec2:	6801      	ldr	r1, [r0, #0]
   11ec4:	486c      	ldr	r0, [pc, #432]	; (12078 <socket_thread_fn+0x2ac>)
   11ec6:	f00a fe5d 	bl	1cb84 <log_1>
   11eca:	4b64      	ldr	r3, [pc, #400]	; (1205c <socket_thread_fn+0x290>)
   11ecc:	4a64      	ldr	r2, [pc, #400]	; (12060 <socket_thread_fn+0x294>)
   11ece:	681b      	ldr	r3, [r3, #0]
   11ed0:	6810      	ldr	r0, [r2, #0]
   11ed2:	685b      	ldr	r3, [r3, #4]
   11ed4:	4798      	blx	r3
}
   11ed6:	b007      	add	sp, #28
   11ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   11edc:	f640 238c 	movw	r3, #2700	; 0xa8c
   11ee0:	4299      	cmp	r1, r3
   11ee2:	d004      	beq.n	11eee <socket_thread_fn+0x122>
			   item->data[bytes_read - 1] != '\0') {
   11ee4:	9803      	ldr	r0, [sp, #12]
   11ee6:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   11ee8:	7acb      	ldrb	r3, [r1, #11]
   11eea:	9301      	str	r3, [sp, #4]
   11eec:	b173      	cbz	r3, 11f0c <socket_thread_fn+0x140>
			LOG_ERR("AT message to large for reception buffer or "
   11eee:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   11ef2:	f043 0301 	orr.w	r3, r3, #1
   11ef6:	f363 0707 	bfi	r7, r3, #0, #8
   11efa:	f36b 178f 	bfi	r7, fp, #6, #10
   11efe:	4639      	mov	r1, r7
   11f00:	485e      	ldr	r0, [pc, #376]	; (1207c <socket_thread_fn+0x2b0>)
   11f02:	f00a fe32 	bl	1cb6a <log_0>
			ret.code  = -ENOBUFS;
   11f06:	f06f 0336 	mvn.w	r3, #54	; 0x36
   11f0a:	e7b4      	b.n	11e76 <socket_thread_fn+0xaa>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   11f0c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   11f10:	f043 0304 	orr.w	r3, r3, #4
   11f14:	300c      	adds	r0, #12
   11f16:	f363 0807 	bfi	r8, r3, #0, #8
   11f1a:	f7fd f817 	bl	ef4c <log_strdup>
   11f1e:	f36b 188f 	bfi	r8, fp, #6, #10
   11f22:	4602      	mov	r2, r0
   11f24:	4643      	mov	r3, r8
   11f26:	494a      	ldr	r1, [pc, #296]	; (12050 <socket_thread_fn+0x284>)
   11f28:	4855      	ldr	r0, [pc, #340]	; (12080 <socket_thread_fn+0x2b4>)
   11f2a:	f00a fe3f 	bl	1cbac <log_2>
	ret->state = AT_CMD_NOTIFICATION;
   11f2e:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   11f30:	f8dd a00c 	ldr.w	sl, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11f34:	4953      	ldr	r1, [pc, #332]	; (12084 <socket_thread_fn+0x2b8>)
		payload_len = get_return_code(item->data, &ret);
   11f36:	f10a 040c 	add.w	r4, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11f3a:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   11f3c:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11f40:	f00b faf9 	bl	1d536 <strstr>
		if (tmpstr) {
   11f44:	4603      	mov	r3, r0
   11f46:	b120      	cbz	r0, 11f52 <socket_thread_fn+0x186>
			ret->state = AT_CMD_OK;
   11f48:	9a01      	ldr	r2, [sp, #4]
   11f4a:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11f4e:	9204      	str	r2, [sp, #16]
			break;
   11f50:	e00e      	b.n	11f70 <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   11f52:	494d      	ldr	r1, [pc, #308]	; (12088 <socket_thread_fn+0x2bc>)
   11f54:	4620      	mov	r0, r4
   11f56:	f00b faee 	bl	1d536 <strstr>
		if (tmpstr) {
   11f5a:	9001      	str	r0, [sp, #4]
   11f5c:	b328      	cbz	r0, 11faa <socket_thread_fn+0x1de>
			ret->state = AT_CMD_ERROR_CMS;
   11f5e:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11f60:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   11f64:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11f68:	f00b f9d0 	bl	1d30c <atoi>
   11f6c:	9b01      	ldr	r3, [sp, #4]
   11f6e:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   11f70:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   11f72:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   11f74:	3201      	adds	r2, #1
   11f76:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   11f78:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11f7c:	2b04      	cmp	r3, #4
   11f7e:	d04f      	beq.n	12020 <socket_thread_fn+0x254>
			if ((response_buf_len > 0) &&
   11f80:	f8df a124 	ldr.w	sl, [pc, #292]	; 120a8 <socket_thread_fn+0x2dc>
   11f84:	f8da 3000 	ldr.w	r3, [sl]
   11f88:	2b00      	cmp	r3, #0
   11f8a:	d052      	beq.n	12032 <socket_thread_fn+0x266>
			    (response_buf != NULL)) {
   11f8c:	4c3f      	ldr	r4, [pc, #252]	; (1208c <socket_thread_fn+0x2c0>)
   11f8e:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   11f90:	2800      	cmp	r0, #0
   11f92:	d04e      	beq.n	12032 <socket_thread_fn+0x266>
				if (response_buf_len > payload_len) {
   11f94:	4293      	cmp	r3, r2
   11f96:	d91d      	bls.n	11fd4 <socket_thread_fn+0x208>
					memcpy(response_buf, item->data,
   11f98:	9903      	ldr	r1, [sp, #12]
   11f9a:	310c      	adds	r1, #12
   11f9c:	f00b fb5b 	bl	1d656 <memcpy>
				response_buf_len = 0;
   11fa0:	2300      	movs	r3, #0
   11fa2:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   11fa6:	6023      	str	r3, [r4, #0]
				goto next;
   11fa8:	e766      	b.n	11e78 <socket_thread_fn+0xac>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   11faa:	4939      	ldr	r1, [pc, #228]	; (12090 <socket_thread_fn+0x2c4>)
   11fac:	4620      	mov	r0, r4
   11fae:	f00b fac2 	bl	1d536 <strstr>
		if (tmpstr) {
   11fb2:	9001      	str	r0, [sp, #4]
   11fb4:	b108      	cbz	r0, 11fba <socket_thread_fn+0x1ee>
			ret->state = AT_CMD_ERROR_CME;
   11fb6:	2203      	movs	r2, #3
   11fb8:	e7d2      	b.n	11f60 <socket_thread_fn+0x194>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   11fba:	4936      	ldr	r1, [pc, #216]	; (12094 <socket_thread_fn+0x2c8>)
   11fbc:	4620      	mov	r0, r4
   11fbe:	f00b faba 	bl	1d536 <strstr>
		if (tmpstr) {
   11fc2:	4603      	mov	r3, r0
   11fc4:	2800      	cmp	r0, #0
   11fc6:	d039      	beq.n	1203c <socket_thread_fn+0x270>
			ret->state = AT_CMD_ERROR;
   11fc8:	2201      	movs	r2, #1
   11fca:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11fce:	f06f 0207 	mvn.w	r2, #7
   11fd2:	e7bc      	b.n	11f4e <socket_thread_fn+0x182>
					LOG_ERR("Response buffer not large "
   11fd4:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   11fd8:	f043 0301 	orr.w	r3, r3, #1
   11fdc:	f363 0907 	bfi	r9, r3, #0, #8
   11fe0:	f36b 198f 	bfi	r9, fp, #6, #10
   11fe4:	4649      	mov	r1, r9
   11fe6:	482c      	ldr	r0, [pc, #176]	; (12098 <socket_thread_fn+0x2cc>)
   11fe8:	f00a fdbf 	bl	1cb6a <log_0>
					ret.code  = -EMSGSIZE;
   11fec:	f06f 0323 	mvn.w	r3, #35	; 0x23
   11ff0:	9304      	str	r3, [sp, #16]
   11ff2:	e7d5      	b.n	11fa0 <socket_thread_fn+0x1d4>
   11ff4:	4b29      	ldr	r3, [pc, #164]	; (1209c <socket_thread_fn+0x2d0>)
   11ff6:	2200      	movs	r2, #0
   11ff8:	604b      	str	r3, [r1, #4]
   11ffa:	460b      	mov	r3, r1
   11ffc:	600a      	str	r2, [r1, #0]
   11ffe:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12002:	e8d3 2fef 	ldaex	r2, [r3]
   12006:	f042 0001 	orr.w	r0, r2, #1
   1200a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1200e:	2c00      	cmp	r4, #0
   12010:	d1f7      	bne.n	12002 <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   12012:	07d3      	lsls	r3, r2, #31
   12014:	f53f af3a 	bmi.w	11e8c <socket_thread_fn+0xc0>
		k_queue_append(&work_q->queue, work);
   12018:	4821      	ldr	r0, [pc, #132]	; (120a0 <socket_thread_fn+0x2d4>)
   1201a:	f00c fcea 	bl	1e9f2 <k_queue_append>
   1201e:	e735      	b.n	11e8c <socket_thread_fn+0xc0>
		if (payload_len == 0) {
   12020:	2a00      	cmp	r2, #0
   12022:	f43f af29 	beq.w	11e78 <socket_thread_fn+0xac>
			item->callback = notification_handler;
   12026:	4b1f      	ldr	r3, [pc, #124]	; (120a4 <socket_thread_fn+0x2d8>)
			item->callback = current_cmd_handler;
   12028:	681a      	ldr	r2, [r3, #0]
   1202a:	9b03      	ldr	r3, [sp, #12]
   1202c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   12030:	e722      	b.n	11e78 <socket_thread_fn+0xac>
		if (payload_len == 0) {
   12032:	2a00      	cmp	r2, #0
   12034:	f43f af20 	beq.w	11e78 <socket_thread_fn+0xac>
			item->callback = current_cmd_handler;
   12038:	4b0d      	ldr	r3, [pc, #52]	; (12070 <socket_thread_fn+0x2a4>)
   1203a:	e7f5      	b.n	12028 <socket_thread_fn+0x25c>
		new_len = strlen(buf) + 1;
   1203c:	4620      	mov	r0, r4
   1203e:	f00b facf 	bl	1d5e0 <strlen>
   12042:	1c42      	adds	r2, r0, #1
   12044:	e798      	b.n	11f78 <socket_thread_fn+0x1ac>
   12046:	bf00      	nop
   12048:	0001f370 	.word	0x0001f370
   1204c:	0001f378 	.word	0x0001f378
   12050:	00020b2f 	.word	0x00020b2f
   12054:	00020cb9 	.word	0x00020cb9
   12058:	2002c650 	.word	0x2002c650
   1205c:	20020344 	.word	0x20020344
   12060:	20020400 	.word	0x20020400
   12064:	00020cd6 	.word	0x00020cd6
   12068:	00020cf8 	.word	0x00020cf8
   1206c:	2002c6a0 	.word	0x2002c6a0
   12070:	20020404 	.word	0x20020404
   12074:	2002c6e0 	.word	0x2002c6e0
   12078:	00020d0c 	.word	0x00020d0c
   1207c:	00020d43 	.word	0x00020d43
   12080:	00020d8d 	.word	0x00020d8d
   12084:	000201e1 	.word	0x000201e1
   12088:	00020d9f 	.word	0x00020d9f
   1208c:	2002040c 	.word	0x2002040c
   12090:	00020dab 	.word	0x00020dab
   12094:	0001ff96 	.word	0x0001ff96
   12098:	00020db7 	.word	0x00020db7
   1209c:	00011ce5 	.word	0x00011ce5
   120a0:	20024d68 	.word	0x20024d68
   120a4:	20020408 	.word	0x20020408
   120a8:	20020410 	.word	0x20020410

000120ac <at_write>:
{
   120ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   120b0:	4680      	mov	r8, r0
   120b2:	460e      	mov	r6, r1
	LOG_DBG("Sending command %s", log_strdup(cmd));
   120b4:	f04f 0500 	mov.w	r5, #0
	int bytes_to_send = strlen(cmd);
   120b8:	f00b fa92 	bl	1d5e0 <strlen>
	LOG_DBG("Sending command %s", log_strdup(cmd));
   120bc:	2304      	movs	r3, #4
   120be:	4c2f      	ldr	r4, [pc, #188]	; (1217c <at_write+0xd0>)
   120c0:	f363 0507 	bfi	r5, r3, #0, #8
   120c4:	4b2e      	ldr	r3, [pc, #184]	; (12180 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   120c6:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   120c8:	4640      	mov	r0, r8
   120ca:	1ae4      	subs	r4, r4, r3
   120cc:	f7fc ff3e 	bl	ef4c <log_strdup>
   120d0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   120d4:	f364 158f 	bfi	r5, r4, #6, #10
   120d8:	462b      	mov	r3, r5
   120da:	4602      	mov	r2, r0
   120dc:	4929      	ldr	r1, [pc, #164]	; (12184 <at_write+0xd8>)
   120de:	482a      	ldr	r0, [pc, #168]	; (12188 <at_write+0xdc>)
   120e0:	f00a fd64 	bl	1cbac <log_2>
	return socket_ops->send(sock, buf, len, flags);
   120e4:	4b29      	ldr	r3, [pc, #164]	; (1218c <at_write+0xe0>)
   120e6:	482a      	ldr	r0, [pc, #168]	; (12190 <at_write+0xe4>)
   120e8:	681b      	ldr	r3, [r3, #0]
   120ea:	463a      	mov	r2, r7
   120ec:	6add      	ldr	r5, [r3, #44]	; 0x2c
   120ee:	4641      	mov	r1, r8
   120f0:	2300      	movs	r3, #0
   120f2:	6800      	ldr	r0, [r0, #0]
   120f4:	47a8      	blx	r5
	if (bytes_sent == -1) {
   120f6:	1c43      	adds	r3, r0, #1
   120f8:	4605      	mov	r5, r0
   120fa:	d11d      	bne.n	12138 <at_write+0x8c>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   120fc:	2301      	movs	r3, #1
   120fe:	f04f 0500 	mov.w	r5, #0
   12102:	f363 0507 	bfi	r5, r3, #0, #8
   12106:	f364 158f 	bfi	r5, r4, #6, #10
   1210a:	f008 ff43 	bl	1af94 <z_impl_z_errno>
   1210e:	462a      	mov	r2, r5
   12110:	6801      	ldr	r1, [r0, #0]
   12112:	4820      	ldr	r0, [pc, #128]	; (12194 <at_write+0xe8>)
   12114:	f00a fd36 	bl	1cb84 <log_1>
   12118:	f008 ff3c 	bl	1af94 <z_impl_z_errno>
		ret.code  = -errno;
   1211c:	6803      	ldr	r3, [r0, #0]
   1211e:	425b      	negs	r3, r3
   12120:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   12122:	2301      	movs	r3, #1
   12124:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   12128:	b116      	cbz	r6, 12130 <at_write+0x84>
		*state = ret.state;
   1212a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1212e:	7033      	strb	r3, [r6, #0]
}
   12130:	9800      	ldr	r0, [sp, #0]
   12132:	b002      	add	sp, #8
   12134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   12138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1213c:	4669      	mov	r1, sp
   1213e:	4816      	ldr	r0, [pc, #88]	; (12198 <at_write+0xec>)
   12140:	f009 f9d8 	bl	1b4f4 <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   12144:	2204      	movs	r2, #4
   12146:	f04f 0300 	mov.w	r3, #0
   1214a:	f362 0307 	bfi	r3, r2, #0, #8
   1214e:	f364 138f 	bfi	r3, r4, #6, #10
   12152:	462a      	mov	r2, r5
   12154:	490b      	ldr	r1, [pc, #44]	; (12184 <at_write+0xd8>)
   12156:	4811      	ldr	r0, [pc, #68]	; (1219c <at_write+0xf0>)
   12158:	f00a fd28 	bl	1cbac <log_2>
		if (bytes_sent != bytes_to_send) {
   1215c:	42af      	cmp	r7, r5
   1215e:	d0e3      	beq.n	12128 <at_write+0x7c>
			LOG_ERR("Bytes sent (%d) was not the "
   12160:	2201      	movs	r2, #1
   12162:	f04f 0300 	mov.w	r3, #0
   12166:	f362 0307 	bfi	r3, r2, #0, #8
   1216a:	f364 138f 	bfi	r3, r4, #6, #10
   1216e:	463a      	mov	r2, r7
   12170:	4629      	mov	r1, r5
   12172:	480b      	ldr	r0, [pc, #44]	; (121a0 <at_write+0xf4>)
   12174:	f00a fd1a 	bl	1cbac <log_2>
   12178:	e7d6      	b.n	12128 <at_write+0x7c>
   1217a:	bf00      	nop
   1217c:	0001f378 	.word	0x0001f378
   12180:	0001f370 	.word	0x0001f370
   12184:	00020b40 	.word	0x00020b40
   12188:	00020c3a 	.word	0x00020c3a
   1218c:	20020344 	.word	0x20020344
   12190:	20020400 	.word	0x20020400
   12194:	00020c51 	.word	0x00020c51
   12198:	2002c6e0 	.word	0x2002c6e0
   1219c:	00020c74 	.word	0x00020c74
   121a0:	00020c87 	.word	0x00020c87

000121a4 <at_cmd_write>:
{
   121a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121a8:	4605      	mov	r5, r0
   121aa:	4688      	mov	r8, r1
   121ac:	4617      	mov	r7, r2
   121ae:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   121b0:	4c0a      	ldr	r4, [pc, #40]	; (121dc <at_cmd_write+0x38>)
   121b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   121b6:	4620      	mov	r0, r4
   121b8:	f009 fdc4 	bl	1bd44 <z_impl_k_sem_take>
	response_buf     = buf;
   121bc:	4b08      	ldr	r3, [pc, #32]	; (121e0 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   121be:	4631      	mov	r1, r6
	response_buf     = buf;
   121c0:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   121c4:	4b07      	ldr	r3, [pc, #28]	; (121e4 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   121c6:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   121c8:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   121ca:	f7ff ff6f 	bl	120ac <at_write>
   121ce:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   121d0:	4620      	mov	r0, r4
   121d2:	f009 fd8b 	bl	1bcec <z_impl_k_sem_give>
}
   121d6:	4628      	mov	r0, r5
   121d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   121dc:	2002c6a0 	.word	0x2002c6a0
   121e0:	2002040c 	.word	0x2002040c
   121e4:	20020410 	.word	0x20020410

000121e8 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   121e8:	2204      	movs	r2, #4
   121ea:	f04f 0300 	mov.w	r3, #0
{
   121ee:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   121f0:	f362 0307 	bfi	r3, r2, #0, #8
   121f4:	4c13      	ldr	r4, [pc, #76]	; (12244 <at_cmd_set_notification_handler+0x5c>)
   121f6:	4a14      	ldr	r2, [pc, #80]	; (12248 <at_cmd_set_notification_handler+0x60>)
	if (notification_handler != NULL && handler != notification_handler) {
   121f8:	4d14      	ldr	r5, [pc, #80]	; (1224c <at_cmd_set_notification_handler+0x64>)
	LOG_DBG("Setting notification handler to %p", handler);
   121fa:	1aa4      	subs	r4, r4, r2
   121fc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   12200:	4602      	mov	r2, r0
   12202:	4913      	ldr	r1, [pc, #76]	; (12250 <at_cmd_set_notification_handler+0x68>)
{
   12204:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   12206:	f364 138f 	bfi	r3, r4, #6, #10
   1220a:	4812      	ldr	r0, [pc, #72]	; (12254 <at_cmd_set_notification_handler+0x6c>)
   1220c:	f00a fcce 	bl	1cbac <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   12210:	6829      	ldr	r1, [r5, #0]
   12212:	b159      	cbz	r1, 1222c <at_cmd_set_notification_handler+0x44>
   12214:	428e      	cmp	r6, r1
   12216:	d009      	beq.n	1222c <at_cmd_set_notification_handler+0x44>
		LOG_WRN("Forgetting prior notification handler %p",
   12218:	f04f 0200 	mov.w	r2, #0
   1221c:	2302      	movs	r3, #2
   1221e:	f363 0207 	bfi	r2, r3, #0, #8
   12222:	f364 128f 	bfi	r2, r4, #6, #10
   12226:	480c      	ldr	r0, [pc, #48]	; (12258 <at_cmd_set_notification_handler+0x70>)
   12228:	f00a fcac 	bl	1cb84 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   1222c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12230:	480a      	ldr	r0, [pc, #40]	; (1225c <at_cmd_set_notification_handler+0x74>)
   12232:	f009 fd87 	bl	1bd44 <z_impl_k_sem_take>
	notification_handler = handler;
   12236:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   12238:	4808      	ldr	r0, [pc, #32]	; (1225c <at_cmd_set_notification_handler+0x74>)
}
   1223a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1223e:	f009 bd55 	b.w	1bcec <z_impl_k_sem_give>
   12242:	bf00      	nop
   12244:	0001f378 	.word	0x0001f378
   12248:	0001f370 	.word	0x0001f370
   1224c:	20020408 	.word	0x20020408
   12250:	00020b49 	.word	0x00020b49
   12254:	00020bea 	.word	0x00020bea
   12258:	00020c11 	.word	0x00020c11
   1225c:	2002c6a0 	.word	0x2002c6a0

00012260 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12260:	4b0b      	ldr	r3, [pc, #44]	; (12290 <find_node+0x30>)
{
   12262:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12264:	681b      	ldr	r3, [r3, #0]
   12266:	b153      	cbz	r3, 1227e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12268:	2500      	movs	r5, #0
   1226a:	461c      	mov	r4, r3
   1226c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1226e:	6866      	ldr	r6, [r4, #4]
   12270:	428e      	cmp	r6, r1
   12272:	d106      	bne.n	12282 <find_node+0x22>
   12274:	68a6      	ldr	r6, [r4, #8]
   12276:	4296      	cmp	r6, r2
   12278:	d103      	bne.n	12282 <find_node+0x22>
			*prev_out = prev;
			return curr;
   1227a:	4623      	mov	r3, r4
			*prev_out = prev;
   1227c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1227e:	4618      	mov	r0, r3
   12280:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12282:	2b00      	cmp	r3, #0
   12284:	d0fb      	beq.n	1227e <find_node+0x1e>
   12286:	4625      	mov	r5, r4
   12288:	461c      	mov	r4, r3
   1228a:	681b      	ldr	r3, [r3, #0]
   1228c:	e7ef      	b.n	1226e <find_node+0xe>
   1228e:	bf00      	nop
   12290:	200204c4 	.word	0x200204c4

00012294 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   12294:	b510      	push	{r4, lr}
	list->head = NULL;
   12296:	2400      	movs	r4, #0
   12298:	4b03      	ldr	r3, [pc, #12]	; (122a8 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   1229a:	4804      	ldr	r0, [pc, #16]	; (122ac <module_init+0x18>)
	list->tail = NULL;
   1229c:	e9c3 4400 	strd	r4, r4, [r3]
   122a0:	f7ff ffa2 	bl	121e8 <at_cmd_set_notification_handler>
	return 0;
}
   122a4:	4620      	mov	r0, r4
   122a6:	bd10      	pop	{r4, pc}
   122a8:	200204c4 	.word	0x200204c4
   122ac:	000122b1 	.word	0x000122b1

000122b0 <notif_dispatch>:
{
   122b0:	b538      	push	{r3, r4, r5, lr}
   122b2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   122b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   122b8:	480a      	ldr	r0, [pc, #40]	; (122e4 <notif_dispatch+0x34>)
   122ba:	f009 f979 	bl	1b5b0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   122be:	4b0a      	ldr	r3, [pc, #40]	; (122e8 <notif_dispatch+0x38>)
   122c0:	681b      	ldr	r3, [r3, #0]
   122c2:	b923      	cbnz	r3, 122ce <notif_dispatch+0x1e>
}
   122c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   122c8:	4806      	ldr	r0, [pc, #24]	; (122e4 <notif_dispatch+0x34>)
   122ca:	f009 b9e3 	b.w	1b694 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   122ce:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   122d0:	689a      	ldr	r2, [r3, #8]
   122d2:	4629      	mov	r1, r5
   122d4:	6858      	ldr	r0, [r3, #4]
   122d6:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   122d8:	2c00      	cmp	r4, #0
   122da:	d0f3      	beq.n	122c4 <notif_dispatch+0x14>
   122dc:	4623      	mov	r3, r4
   122de:	6824      	ldr	r4, [r4, #0]
   122e0:	e7f6      	b.n	122d0 <notif_dispatch+0x20>
   122e2:	bf00      	nop
   122e4:	2002c6cc 	.word	0x2002c6cc
   122e8:	200204c4 	.word	0x200204c4

000122ec <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   122ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   122ee:	4606      	mov	r6, r0
	if (handler == NULL) {
   122f0:	460c      	mov	r4, r1
   122f2:	b999      	cbnz	r1, 1231c <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   122f4:	2201      	movs	r2, #1
   122f6:	f04f 0300 	mov.w	r3, #0
   122fa:	491f      	ldr	r1, [pc, #124]	; (12378 <at_notif_register_handler+0x8c>)
   122fc:	f362 0307 	bfi	r3, r2, #0, #8
   12300:	4a1e      	ldr	r2, [pc, #120]	; (1237c <at_notif_register_handler+0x90>)
   12302:	1a52      	subs	r2, r2, r1
   12304:	08d2      	lsrs	r2, r2, #3
   12306:	f362 138f 	bfi	r3, r2, #6, #10
   1230a:	4601      	mov	r1, r0
   1230c:	4622      	mov	r2, r4
   1230e:	481c      	ldr	r0, [pc, #112]	; (12380 <at_notif_register_handler+0x94>)
   12310:	f00a fc4c 	bl	1cbac <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   12314:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   12318:	b002      	add	sp, #8
   1231a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1231c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12320:	4818      	ldr	r0, [pc, #96]	; (12384 <at_notif_register_handler+0x98>)
   12322:	f009 f945 	bl	1b5b0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   12326:	4622      	mov	r2, r4
   12328:	4631      	mov	r1, r6
   1232a:	a801      	add	r0, sp, #4
   1232c:	f7ff ff98 	bl	12260 <find_node>
   12330:	4605      	mov	r5, r0
   12332:	b120      	cbz	r0, 1233e <at_notif_register_handler+0x52>
	z_impl_k_mutex_unlock(mutex);
   12334:	4813      	ldr	r0, [pc, #76]	; (12384 <at_notif_register_handler+0x98>)
   12336:	f009 f9ad 	bl	1b694 <z_impl_k_mutex_unlock>
	return 0;
   1233a:	2000      	movs	r0, #0
	return append_notif_handler(context, handler);
   1233c:	e7ec      	b.n	12318 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   1233e:	200c      	movs	r0, #12
   12340:	f009 f876 	bl	1b430 <k_malloc>
   12344:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   12346:	b928      	cbnz	r0, 12354 <at_notif_register_handler+0x68>
   12348:	480e      	ldr	r0, [pc, #56]	; (12384 <at_notif_register_handler+0x98>)
   1234a:	f009 f9a3 	bl	1b694 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   1234e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12352:	e7e1      	b.n	12318 <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   12354:	220c      	movs	r2, #12
   12356:	4629      	mov	r1, r5
   12358:	f00b f9a7 	bl	1d6aa <memset>
	to_ins->ctx     = ctx;
   1235c:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1235e:	4a0a      	ldr	r2, [pc, #40]	; (12388 <at_notif_register_handler+0x9c>)
	parent->next = child;
   12360:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   12362:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   12364:	e9c3 6401 	strd	r6, r4, [r3, #4]
   12368:	b911      	cbnz	r1, 12370 <at_notif_register_handler+0x84>
	list->head = node;
   1236a:	e9c2 3300 	strd	r3, r3, [r2]
   1236e:	e7e1      	b.n	12334 <at_notif_register_handler+0x48>
	parent->next = child;
   12370:	600b      	str	r3, [r1, #0]
	list->tail = node;
   12372:	6053      	str	r3, [r2, #4]
   12374:	e7de      	b.n	12334 <at_notif_register_handler+0x48>
   12376:	bf00      	nop
   12378:	0001f370 	.word	0x0001f370
   1237c:	0001f388 	.word	0x0001f388
   12380:	00020e05 	.word	0x00020e05
   12384:	2002c6cc 	.word	0x2002c6cc
   12388:	200204c4 	.word	0x200204c4

0001238c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   1238c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1238e:	4605      	mov	r5, r0
	if (handler == NULL) {
   12390:	460c      	mov	r4, r1
   12392:	b999      	cbnz	r1, 123bc <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   12394:	2201      	movs	r2, #1
   12396:	f04f 0300 	mov.w	r3, #0
   1239a:	4922      	ldr	r1, [pc, #136]	; (12424 <at_notif_deregister_handler+0x98>)
   1239c:	f362 0307 	bfi	r3, r2, #0, #8
   123a0:	4a21      	ldr	r2, [pc, #132]	; (12428 <at_notif_deregister_handler+0x9c>)
   123a2:	1a89      	subs	r1, r1, r2
   123a4:	08c9      	lsrs	r1, r1, #3
   123a6:	f361 138f 	bfi	r3, r1, #6, #10
   123aa:	4622      	mov	r2, r4
   123ac:	4601      	mov	r1, r0
   123ae:	481f      	ldr	r0, [pc, #124]	; (1242c <at_notif_deregister_handler+0xa0>)
   123b0:	f00a fbfc 	bl	1cbac <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   123b4:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   123b8:	b003      	add	sp, #12
   123ba:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   123bc:	2300      	movs	r3, #0
   123be:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   123c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   123c4:	481a      	ldr	r0, [pc, #104]	; (12430 <at_notif_deregister_handler+0xa4>)
   123c6:	f009 f8f3 	bl	1b5b0 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   123ca:	4622      	mov	r2, r4
   123cc:	4629      	mov	r1, r5
   123ce:	a801      	add	r0, sp, #4
   123d0:	f7ff ff46 	bl	12260 <find_node>
	if (curr == NULL) {
   123d4:	b990      	cbnz	r0, 123fc <at_notif_deregister_handler+0x70>
		LOG_WRN("Handler not registered. Nothing to do");
   123d6:	2302      	movs	r3, #2
   123d8:	f04f 0100 	mov.w	r1, #0
   123dc:	4a12      	ldr	r2, [pc, #72]	; (12428 <at_notif_deregister_handler+0x9c>)
   123de:	f363 0107 	bfi	r1, r3, #0, #8
   123e2:	4b10      	ldr	r3, [pc, #64]	; (12424 <at_notif_deregister_handler+0x98>)
   123e4:	4813      	ldr	r0, [pc, #76]	; (12434 <at_notif_deregister_handler+0xa8>)
   123e6:	1a9b      	subs	r3, r3, r2
   123e8:	08db      	lsrs	r3, r3, #3
   123ea:	f363 118f 	bfi	r1, r3, #6, #10
   123ee:	f00a fbbc 	bl	1cb6a <log_0>
	z_impl_k_mutex_unlock(mutex);
   123f2:	480f      	ldr	r0, [pc, #60]	; (12430 <at_notif_deregister_handler+0xa4>)
   123f4:	f009 f94e 	bl	1b694 <z_impl_k_mutex_unlock>
	return remove_notif_handler(context, handler);
   123f8:	2000      	movs	r0, #0
   123fa:	e7dd      	b.n	123b8 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   123fc:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   123fe:	6801      	ldr	r1, [r0, #0]
   12400:	4b0d      	ldr	r3, [pc, #52]	; (12438 <at_notif_deregister_handler+0xac>)
   12402:	b94a      	cbnz	r2, 12418 <at_notif_deregister_handler+0x8c>
   12404:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12406:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   12408:	4290      	cmp	r0, r2
   1240a:	d100      	bne.n	1240e <at_notif_deregister_handler+0x82>
	list->tail = node;
   1240c:	6059      	str	r1, [r3, #4]
	parent->next = child;
   1240e:	2300      	movs	r3, #0
   12410:	6003      	str	r3, [r0, #0]
	k_free(curr);
   12412:	f00c fa72 	bl	1e8fa <k_free>
   12416:	e7ec      	b.n	123f2 <at_notif_deregister_handler+0x66>
   12418:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1241a:	6859      	ldr	r1, [r3, #4]
   1241c:	4288      	cmp	r0, r1
	list->tail = node;
   1241e:	bf08      	it	eq
   12420:	605a      	streq	r2, [r3, #4]
   12422:	e7f4      	b.n	1240e <at_notif_deregister_handler+0x82>
   12424:	0001f388 	.word	0x0001f388
   12428:	0001f370 	.word	0x0001f370
   1242c:	00020e05 	.word	0x00020e05
   12430:	2002c6cc 	.word	0x2002c6cc
   12434:	00020ddf 	.word	0x00020ddf
   12438:	200204c4 	.word	0x200204c4

0001243c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1243c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   12440:	6805      	ldr	r5, [r0, #0]
{
   12442:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   12444:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12446:	782b      	ldrb	r3, [r5, #0]
{
   12448:	4680      	mov	r8, r0
   1244a:	460f      	mov	r7, r1
   1244c:	4616      	mov	r6, r2
   1244e:	2b00      	cmp	r3, #0
   12450:	f000 80c1 	beq.w	125d6 <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   12454:	4b61      	ldr	r3, [pc, #388]	; (125dc <at_parse_process_element+0x1a0>)
   12456:	781c      	ldrb	r4, [r3, #0]
   12458:	2c05      	cmp	r4, #5
   1245a:	d110      	bne.n	1247e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1245c:	1c6b      	adds	r3, r5, #1
   1245e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   12460:	9a00      	ldr	r2, [sp, #0]
   12462:	7810      	ldrb	r0, [r2, #0]
   12464:	f00c f8a7 	bl	1e5b6 <is_valid_notification_char>
   12468:	b930      	cbnz	r0, 12478 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1246a:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1246c:	462a      	mov	r2, r5
   1246e:	4639      	mov	r1, r7
   12470:	4630      	mov	r0, r6
   12472:	f00c f989 	bl	1e788 <at_params_string_put>
   12476:	e01b      	b.n	124b0 <at_parse_process_element+0x74>
			tmpstr++;
   12478:	3201      	adds	r2, #1
   1247a:	9200      	str	r2, [sp, #0]
   1247c:	e7f0      	b.n	12460 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1247e:	2c06      	cmp	r4, #6
   12480:	d124      	bne.n	124cc <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   12482:	4668      	mov	r0, sp
   12484:	f00c f889 	bl	1e59a <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   12488:	9a00      	ldr	r2, [sp, #0]
   1248a:	7810      	ldrb	r0, [r2, #0]
   1248c:	f00c f893 	bl	1e5b6 <is_valid_notification_char>
   12490:	b9a8      	cbnz	r0, 124be <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   12492:	1b53      	subs	r3, r2, r5
   12494:	4639      	mov	r1, r7
   12496:	462a      	mov	r2, r5
   12498:	4630      	mov	r0, r6
   1249a:	f00c f975 	bl	1e788 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1249e:	9b00      	ldr	r3, [sp, #0]
   124a0:	781a      	ldrb	r2, [r3, #0]
   124a2:	2a3d      	cmp	r2, #61	; 0x3d
   124a4:	d10e      	bne.n	124c4 <at_parse_process_element+0x88>
   124a6:	785a      	ldrb	r2, [r3, #1]
   124a8:	2a3f      	cmp	r2, #63	; 0x3f
   124aa:	d101      	bne.n	124b0 <at_parse_process_element+0x74>
			tmpstr += 2;
   124ac:	3302      	adds	r3, #2
			tmpstr++;
   124ae:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   124b0:	2000      	movs	r0, #0
	*str = tmpstr;
   124b2:	9b00      	ldr	r3, [sp, #0]
   124b4:	f8c8 3000 	str.w	r3, [r8]
}
   124b8:	b023      	add	sp, #140	; 0x8c
   124ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   124be:	3201      	adds	r2, #1
   124c0:	9200      	str	r2, [sp, #0]
   124c2:	e7e1      	b.n	12488 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   124c4:	2a3f      	cmp	r2, #63	; 0x3f
   124c6:	d1f3      	bne.n	124b0 <at_parse_process_element+0x74>
			tmpstr++;
   124c8:	3301      	adds	r3, #1
   124ca:	e7f0      	b.n	124ae <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   124cc:	2c07      	cmp	r4, #7
   124ce:	d103      	bne.n	124d8 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   124d0:	4610      	mov	r0, r2
   124d2:	f00c f934 	bl	1e73e <at_params_empty_put>
   124d6:	e7eb      	b.n	124b0 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   124d8:	2c02      	cmp	r4, #2
   124da:	d112      	bne.n	12502 <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   124dc:	9a00      	ldr	r2, [sp, #0]
   124de:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   124e0:	2822      	cmp	r0, #34	; 0x22
   124e2:	d003      	beq.n	124ec <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   124e4:	b110      	cbz	r0, 124ec <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   124e6:	f00c f84f 	bl	1e588 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   124ea:	b138      	cbz	r0, 124fc <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   124ec:	1b53      	subs	r3, r2, r5
   124ee:	4639      	mov	r1, r7
   124f0:	462a      	mov	r2, r5
   124f2:	4630      	mov	r0, r6
   124f4:	f00c f948 	bl	1e788 <at_params_string_put>
		tmpstr++;
   124f8:	9b00      	ldr	r3, [sp, #0]
   124fa:	e7e5      	b.n	124c8 <at_parse_process_element+0x8c>
			tmpstr++;
   124fc:	3201      	adds	r2, #1
   124fe:	9200      	str	r2, [sp, #0]
   12500:	e7ec      	b.n	124dc <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   12502:	2c01      	cmp	r4, #1
   12504:	d13c      	bne.n	12580 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   12506:	4628      	mov	r0, r5
   12508:	220a      	movs	r2, #10
   1250a:	a901      	add	r1, sp, #4
   1250c:	f00a ff9a 	bl	1d444 <strtoul>
		tmpstr = next;
   12510:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12512:	4d33      	ldr	r5, [pc, #204]	; (125e0 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   12514:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   12516:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   12518:	9800      	ldr	r0, [sp, #0]
   1251a:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1251c:	2b29      	cmp	r3, #41	; 0x29
   1251e:	d028      	beq.n	12572 <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12520:	b33b      	cbz	r3, 12572 <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12522:	3b2c      	subs	r3, #44	; 0x2c
   12524:	b2db      	uxtb	r3, r3
   12526:	3001      	adds	r0, #1
   12528:	2b11      	cmp	r3, #17
				tmparray[i++] =
   1252a:	9000      	str	r0, [sp, #0]
   1252c:	d803      	bhi.n	12536 <at_parse_process_element+0xfa>
   1252e:	fa25 f303 	lsr.w	r3, r5, r3
   12532:	07db      	lsls	r3, r3, #31
   12534:	d408      	bmi.n	12548 <at_parse_process_element+0x10c>
				tmpstr++;
   12536:	46a1      	mov	r9, r4
   12538:	e004      	b.n	12544 <at_parse_process_element+0x108>
					tmpstr = next;
   1253a:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1253c:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   12540:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12542:	d015      	beq.n	12570 <at_parse_process_element+0x134>
				tmpstr++;
   12544:	464c      	mov	r4, r9
   12546:	e7e7      	b.n	12518 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   12548:	220a      	movs	r2, #10
   1254a:	a901      	add	r1, sp, #4
   1254c:	f00a ff7a 	bl	1d444 <strtoul>
				tmparray[i++] =
   12550:	ab22      	add	r3, sp, #136	; 0x88
   12552:	f104 0901 	add.w	r9, r4, #1
   12556:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1255a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1255e:	9800      	ldr	r0, [sp, #0]
   12560:	f00b f83e 	bl	1d5e0 <strlen>
   12564:	4604      	mov	r4, r0
   12566:	9801      	ldr	r0, [sp, #4]
   12568:	f00b f83a 	bl	1d5e0 <strlen>
   1256c:	4284      	cmp	r4, r0
   1256e:	d1e4      	bne.n	1253a <at_parse_process_element+0xfe>
   12570:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   12572:	00a3      	lsls	r3, r4, #2
   12574:	aa02      	add	r2, sp, #8
   12576:	4639      	mov	r1, r7
   12578:	4630      	mov	r0, r6
   1257a:	f00c f928 	bl	1e7ce <at_params_array_put>
   1257e:	e7bb      	b.n	124f8 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   12580:	2c03      	cmp	r4, #3
   12582:	d115      	bne.n	125b0 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   12584:	220a      	movs	r2, #10
   12586:	a902      	add	r1, sp, #8
   12588:	4628      	mov	r0, r5
   1258a:	f00a ff5b 	bl	1d444 <strtoul>
		tmpstr = next;
   1258e:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   12590:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   12594:	4602      	mov	r2, r0
		tmpstr = next;
   12596:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   12598:	d205      	bcs.n	125a6 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   1259a:	b282      	uxth	r2, r0
   1259c:	4639      	mov	r1, r7
   1259e:	4630      	mov	r0, r6
   125a0:	f00c f8ba 	bl	1e718 <at_params_short_put>
   125a4:	e784      	b.n	124b0 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   125a6:	4639      	mov	r1, r7
   125a8:	4630      	mov	r0, r6
   125aa:	f00c f8da 	bl	1e762 <at_params_int_put>
   125ae:	e77f      	b.n	124b0 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   125b0:	2c04      	cmp	r4, #4
   125b2:	f47f af7d 	bne.w	124b0 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   125b6:	9b00      	ldr	r3, [sp, #0]
   125b8:	781a      	ldrb	r2, [r3, #0]
	return (int)(((ua - (unsigned)'0') < 10U) ||
   125ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   125be:	2909      	cmp	r1, #9
   125c0:	d906      	bls.n	125d0 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   125c2:	f042 0220 	orr.w	r2, r2, #32
   125c6:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   125c8:	2a05      	cmp	r2, #5
   125ca:	d901      	bls.n	125d0 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   125cc:	1b5b      	subs	r3, r3, r5
   125ce:	e74d      	b.n	1246c <at_parse_process_element+0x30>
			tmpstr++;
   125d0:	3301      	adds	r3, #1
   125d2:	9300      	str	r3, [sp, #0]
   125d4:	e7ef      	b.n	125b6 <at_parse_process_element+0x17a>
		return -1;
   125d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125da:	e76d      	b.n	124b8 <at_parse_process_element+0x7c>
   125dc:	2002658a 	.word	0x2002658a
   125e0:	00024001 	.word	0x00024001

000125e4 <at_parse_detect_type>:
{
   125e4:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   125e6:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   125e8:	2900      	cmp	r1, #0
{
   125ea:	4605      	mov	r5, r0
   125ec:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   125ee:	d144      	bne.n	1267a <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   125f0:	2a2b      	cmp	r2, #43	; 0x2b
   125f2:	4e2a      	ldr	r6, [pc, #168]	; (1269c <at_parse_detect_type+0xb8>)
   125f4:	d001      	beq.n	125fa <at_parse_detect_type+0x16>
   125f6:	2a25      	cmp	r2, #37	; 0x25
   125f8:	d104      	bne.n	12604 <at_parse_detect_type+0x20>
	state = new_state;
   125fa:	2305      	movs	r3, #5
   125fc:	7033      	strb	r3, [r6, #0]
	return 0;
   125fe:	2000      	movs	r0, #0
	*str = tmpstr;
   12600:	602c      	str	r4, [r5, #0]
}
   12602:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   12604:	4620      	mov	r0, r4
   12606:	f00b ffe2 	bl	1e5ce <is_command>
   1260a:	b3a0      	cbz	r0, 12676 <at_parse_detect_type+0x92>
	state = new_state;
   1260c:	2306      	movs	r3, #6
   1260e:	e7f5      	b.n	125fc <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   12610:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   12614:	fa21 f303 	lsr.w	r3, r1, r3
   12618:	07d9      	lsls	r1, r3, #31
   1261a:	d50a      	bpl.n	12632 <at_parse_detect_type+0x4e>
   1261c:	2203      	movs	r2, #3
   1261e:	4b1f      	ldr	r3, [pc, #124]	; (1269c <at_parse_detect_type+0xb8>)
   12620:	701a      	strb	r2, [r3, #0]
   12622:	e7ec      	b.n	125fe <at_parse_detect_type+0x1a>
	if (chr == '(') {
   12624:	2a28      	cmp	r2, #40	; 0x28
   12626:	d104      	bne.n	12632 <at_parse_detect_type+0x4e>
   12628:	2201      	movs	r2, #1
   1262a:	4b1c      	ldr	r3, [pc, #112]	; (1269c <at_parse_detect_type+0xb8>)
		tmpstr++;
   1262c:	4414      	add	r4, r2
	state = new_state;
   1262e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12630:	e7e5      	b.n	125fe <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   12632:	4610      	mov	r0, r2
   12634:	f00b ffa8 	bl	1e588 <is_lfcr>
   12638:	b170      	cbz	r0, 12658 <at_parse_detect_type+0x74>
   1263a:	4918      	ldr	r1, [pc, #96]	; (1269c <at_parse_detect_type+0xb8>)
   1263c:	7808      	ldrb	r0, [r1, #0]
   1263e:	2803      	cmp	r0, #3
   12640:	d108      	bne.n	12654 <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   12642:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   12646:	f00b ff9f 	bl	1e588 <is_lfcr>
   1264a:	2800      	cmp	r0, #0
   1264c:	d1f9      	bne.n	12642 <at_parse_detect_type+0x5e>
	state = new_state;
   1264e:	2304      	movs	r3, #4
   12650:	700b      	strb	r3, [r1, #0]
   12652:	e7d4      	b.n	125fe <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   12654:	2807      	cmp	r0, #7
   12656:	d0d2      	beq.n	125fe <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12658:	3a2c      	subs	r2, #44	; 0x2c
   1265a:	b2d2      	uxtb	r2, r2
   1265c:	2a11      	cmp	r2, #17
   1265e:	d807      	bhi.n	12670 <at_parse_detect_type+0x8c>
   12660:	4b0f      	ldr	r3, [pc, #60]	; (126a0 <at_parse_detect_type+0xbc>)
   12662:	fa23 f202 	lsr.w	r2, r3, r2
   12666:	07d3      	lsls	r3, r2, #31
   12668:	d502      	bpl.n	12670 <at_parse_detect_type+0x8c>
	state = new_state;
   1266a:	4b0c      	ldr	r3, [pc, #48]	; (1269c <at_parse_detect_type+0xb8>)
   1266c:	2207      	movs	r2, #7
   1266e:	e7d7      	b.n	12620 <at_parse_detect_type+0x3c>
		return -1;
   12670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12674:	e7c5      	b.n	12602 <at_parse_detect_type+0x1e>
	state = new_state;
   12676:	2302      	movs	r3, #2
   12678:	e7c0      	b.n	125fc <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1267a:	dd03      	ble.n	12684 <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1267c:	2a2b      	cmp	r2, #43	; 0x2b
   1267e:	d0f7      	beq.n	12670 <at_parse_detect_type+0x8c>
   12680:	2a25      	cmp	r2, #37	; 0x25
   12682:	d0f5      	beq.n	12670 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   12684:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   12688:	b2db      	uxtb	r3, r3
   1268a:	2b0e      	cmp	r3, #14
   1268c:	d9c0      	bls.n	12610 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   1268e:	2a22      	cmp	r2, #34	; 0x22
   12690:	d1c8      	bne.n	12624 <at_parse_detect_type+0x40>
	state = new_state;
   12692:	2202      	movs	r2, #2
   12694:	4b01      	ldr	r3, [pc, #4]	; (1269c <at_parse_detect_type+0xb8>)
		tmpstr++;
   12696:	3401      	adds	r4, #1
	state = new_state;
   12698:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1269a:	e7b0      	b.n	125fe <at_parse_detect_type+0x1a>
   1269c:	2002658a 	.word	0x2002658a
   126a0:	00024001 	.word	0x00024001

000126a4 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   126a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   126a8:	4688      	mov	r8, r1
   126aa:	4616      	mov	r6, r2
   126ac:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   126ae:	4604      	mov	r4, r0
   126b0:	2800      	cmp	r0, #0
   126b2:	d07c      	beq.n	127ae <at_parser_max_params_from_str+0x10a>
   126b4:	2a00      	cmp	r2, #0
   126b6:	d07a      	beq.n	127ae <at_parser_max_params_from_str+0x10a>
   126b8:	6853      	ldr	r3, [r2, #4]
   126ba:	2b00      	cmp	r3, #0
   126bc:	d077      	beq.n	127ae <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   126be:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   126c0:	4610      	mov	r0, r2
   126c2:	f00c f811 	bl	1e6e8 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   126c6:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   126c8:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   126ca:	4297      	cmp	r7, r2
   126cc:	bf28      	it	cs
   126ce:	4617      	movcs	r7, r2
	int index = 0;
   126d0:	462c      	mov	r4, r5
	state = IDLE;
   126d2:	4b38      	ldr	r3, [pc, #224]	; (127b4 <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   126d4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 127b8 <at_parser_max_params_from_str+0x114>
   126d8:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   126da:	9a01      	ldr	r2, [sp, #4]
   126dc:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   126de:	2b00      	cmp	r3, #0
   126e0:	d04b      	beq.n	1277a <at_parser_max_params_from_str+0xd6>
   126e2:	42a7      	cmp	r7, r4
   126e4:	d949      	bls.n	1277a <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   126e6:	2b20      	cmp	r3, #32
   126e8:	d002      	beq.n	126f0 <at_parser_max_params_from_str+0x4c>
   126ea:	3b09      	subs	r3, #9
   126ec:	2b04      	cmp	r3, #4
   126ee:	d801      	bhi.n	126f4 <at_parser_max_params_from_str+0x50>
			str++;
   126f0:	3201      	adds	r2, #1
   126f2:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   126f4:	4621      	mov	r1, r4
   126f6:	a801      	add	r0, sp, #4
   126f8:	f7ff ff74 	bl	125e4 <at_parse_detect_type>
   126fc:	1c42      	adds	r2, r0, #1
   126fe:	d03c      	beq.n	1277a <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   12700:	4632      	mov	r2, r6
   12702:	4621      	mov	r1, r4
   12704:	a801      	add	r0, sp, #4
   12706:	f7ff fe99 	bl	1243c <at_parse_process_element>
   1270a:	1c43      	adds	r3, r0, #1
   1270c:	d035      	beq.n	1277a <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   1270e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12710:	781a      	ldrb	r2, [r3, #0]
   12712:	3a2c      	subs	r2, #44	; 0x2c
   12714:	b2d2      	uxtb	r2, r2
   12716:	2a11      	cmp	r2, #17
   12718:	d81a      	bhi.n	12750 <at_parser_max_params_from_str+0xac>
   1271a:	fa29 f202 	lsr.w	r2, r9, r2
   1271e:	07d1      	lsls	r1, r2, #31
   12720:	d516      	bpl.n	12750 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   12722:	7858      	ldrb	r0, [r3, #1]
   12724:	f00b ff30 	bl	1e588 <is_lfcr>
   12728:	b178      	cbz	r0, 1274a <at_parser_max_params_from_str+0xa6>
				index++;
   1272a:	3401      	adds	r4, #1
				if (index == max_params) {
   1272c:	42bc      	cmp	r4, r7
   1272e:	d039      	beq.n	127a4 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   12730:	4621      	mov	r1, r4
   12732:	a801      	add	r0, sp, #4
   12734:	f7ff ff56 	bl	125e4 <at_parse_detect_type>
   12738:	1c42      	adds	r2, r0, #1
   1273a:	d01e      	beq.n	1277a <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   1273c:	4632      	mov	r2, r6
   1273e:	4621      	mov	r1, r4
   12740:	a801      	add	r0, sp, #4
   12742:	f7ff fe7b 	bl	1243c <at_parse_process_element>
   12746:	1c43      	adds	r3, r0, #1
   12748:	d017      	beq.n	1277a <at_parser_max_params_from_str+0xd6>
			str++;
   1274a:	9b01      	ldr	r3, [sp, #4]
   1274c:	3301      	adds	r3, #1
   1274e:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   12750:	9a01      	ldr	r2, [sp, #4]
   12752:	7810      	ldrb	r0, [r2, #0]
   12754:	f00b ff18 	bl	1e588 <is_lfcr>
   12758:	b1f8      	cbz	r0, 1279a <at_parser_max_params_from_str+0xf6>
   1275a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   1275c:	7811      	ldrb	r1, [r2, #0]
   1275e:	4692      	mov	sl, r2
   12760:	4608      	mov	r0, r1
   12762:	3201      	adds	r2, #1
   12764:	f00b ff10 	bl	1e588 <is_lfcr>
   12768:	2800      	cmp	r0, #0
   1276a:	d1f7      	bne.n	1275c <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1276c:	b119      	cbz	r1, 12776 <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1276e:	292b      	cmp	r1, #43	; 0x2b
   12770:	d001      	beq.n	12776 <at_parser_max_params_from_str+0xd2>
   12772:	2925      	cmp	r1, #37	; 0x25
   12774:	d111      	bne.n	1279a <at_parser_max_params_from_str+0xf6>
				str += i;
   12776:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1277a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   1277c:	b9a5      	cbnz	r5, 127a8 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1277e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   12780:	2a00      	cmp	r2, #0
   12782:	bf0c      	ite	eq
   12784:	2000      	moveq	r0, #0
   12786:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1278a:	f1b8 0f00 	cmp.w	r8, #0
   1278e:	d001      	beq.n	12794 <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   12790:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   12794:	b002      	add	sp, #8
   12796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   1279a:	3401      	adds	r4, #1
			oversized = true;
   1279c:	42bc      	cmp	r4, r7
   1279e:	bf08      	it	eq
   127a0:	2501      	moveq	r5, #1
   127a2:	e79a      	b.n	126da <at_parser_max_params_from_str+0x36>
					oversized = true;
   127a4:	4605      	mov	r5, r0
   127a6:	e7e8      	b.n	1277a <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   127a8:	f06f 0006 	mvn.w	r0, #6
   127ac:	e7ed      	b.n	1278a <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   127ae:	f06f 0015 	mvn.w	r0, #21
   127b2:	e7ef      	b.n	12794 <at_parser_max_params_from_str+0xf0>
   127b4:	2002658a 	.word	0x2002658a
   127b8:	00024001 	.word	0x00024001

000127bc <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   127bc:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   127be:	2300      	movs	r3, #0
   127c0:	4804      	ldr	r0, [pc, #16]	; (127d4 <lte_lc_power_off+0x18>)
   127c2:	461a      	mov	r2, r3
   127c4:	4619      	mov	r1, r3
   127c6:	f7ff fced 	bl	121a4 <at_cmd_write>
   127ca:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   127cc:	bf18      	it	ne
   127ce:	f06f 0004 	mvnne.w	r0, #4
   127d2:	bd08      	pop	{r3, pc}
   127d4:	00020e3f 	.word	0x00020e3f

000127d8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   127d8:	b508      	push	{r3, lr}
	z_impl_log_panic();
   127da:	f7fc fb71 	bl	eec0 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   127de:	2301      	movs	r3, #1
   127e0:	f04f 0100 	mov.w	r1, #0
   127e4:	4a06      	ldr	r2, [pc, #24]	; (12800 <k_sys_fatal_error_handler+0x28>)
   127e6:	f363 0107 	bfi	r1, r3, #0, #8
   127ea:	4b06      	ldr	r3, [pc, #24]	; (12804 <k_sys_fatal_error_handler+0x2c>)
   127ec:	4806      	ldr	r0, [pc, #24]	; (12808 <k_sys_fatal_error_handler+0x30>)
   127ee:	1a9b      	subs	r3, r3, r2
   127f0:	08db      	lsrs	r3, r3, #3
   127f2:	f363 118f 	bfi	r1, r3, #6, #10
   127f6:	f00a f9b8 	bl	1cb6a <log_0>
	sys_arch_reboot(0);
   127fa:	2000      	movs	r0, #0
   127fc:	f7fd fca4 	bl	10148 <sys_arch_reboot>

	CODE_UNREACHABLE;
   12800:	0001f370 	.word	0x0001f370
   12804:	0001f3a0 	.word	0x0001f3a0
   12808:	00020e50 	.word	0x00020e50

0001280c <ext_api_getter>:
extern const struct fw_info_ext_api * const _ext_apis_start[];
extern const u32_t _ext_apis_size;
__noinit fw_info_ext_api_getter ext_api_getter_in;

int ext_api_getter(u32_t id, u32_t index, const struct fw_info_ext_api **out)
{
   1280c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!out) {
   1280e:	b1da      	cbz	r2, 12848 <ext_api_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12810:	2300      	movs	r3, #0
	bool id_found = false;
   12812:	461c      	mov	r4, r3
   12814:	4d0e      	ldr	r5, [pc, #56]	; (12850 <ext_api_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12816:	4f0f      	ldr	r7, [pc, #60]	; (12854 <ext_api_getter+0x48>)
   12818:	42bb      	cmp	r3, r7
   1281a:	d306      	bcc.n	1282a <ext_api_getter+0x1e>
				*out = ext_api;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   1281c:	2c00      	cmp	r4, #0
   1281e:	bf14      	ite	ne
   12820:	f06f 0008 	mvnne.w	r0, #8
   12824:	f06f 0001 	mvneq.w	r0, #1
   12828:	e009      	b.n	1283e <ext_api_getter+0x32>
		const struct fw_info_ext_api *ext_api = _ext_apis_start[i];
   1282a:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_api->ext_api_id == id) {
   1282e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   12832:	4560      	cmp	r0, ip
   12834:	d106      	bne.n	12844 <ext_api_getter+0x38>
			if (index-- == 0) {
   12836:	1e4c      	subs	r4, r1, #1
   12838:	b911      	cbnz	r1, 12840 <ext_api_getter+0x34>
				return 0;
   1283a:	4608      	mov	r0, r1
				*out = ext_api;
   1283c:	6016      	str	r6, [r2, #0]
}
   1283e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   12840:	4621      	mov	r1, r4
			id_found = true;
   12842:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   12844:	3301      	adds	r3, #1
   12846:	e7e7      	b.n	12818 <ext_api_getter+0xc>
		return -EFAULT;
   12848:	f06f 000d 	mvn.w	r0, #13
   1284c:	e7f7      	b.n	1283e <ext_api_getter+0x32>
   1284e:	bf00      	nop
   12850:	00020f80 	.word	0x00020f80
   12854:	00000000 	.word	0x00000000

00012858 <rpc_logobj_client_evt_handler>:
   12858:	b120      	cbz	r0, 12864 <rpc_logobj_client_evt_handler+0xc>
   1285a:	f850 1b08 	ldr.w	r1, [r0], #8
   1285e:	0c09      	lsrs	r1, r1, #16
   12860:	f000 b852 	b.w	12908 <logobj_event_handler>
   12864:	4770      	bx	lr
   12866:	bf00      	nop

00012868 <rpc_logobj_client_init>:
   12868:	4801      	ldr	r0, [pc, #4]	; (12870 <rpc_logobj_client_init+0x8>)
   1286a:	f006 bb87 	b.w	18f7c <rpc_client_register>
   1286e:	bf00      	nop
   12870:	0001f5f0 	.word	0x0001f5f0

00012874 <rpc_logobj_client_request_alloc>:
   12874:	2300      	movs	r3, #0
   12876:	b510      	push	{r4, lr}
   12878:	b082      	sub	sp, #8
   1287a:	9301      	str	r3, [sp, #4]
   1287c:	b961      	cbnz	r1, 12898 <rpc_logobj_client_request_alloc+0x24>
   1287e:	b170      	cbz	r0, 1289e <rpc_logobj_client_request_alloc+0x2a>
   12880:	4604      	mov	r4, r0
   12882:	aa01      	add	r2, sp, #4
   12884:	2009      	movs	r0, #9
   12886:	f006 fdb1 	bl	193ec <rpc_message_alloc>
   1288a:	b918      	cbnz	r0, 12894 <rpc_logobj_client_request_alloc+0x20>
   1288c:	9b01      	ldr	r3, [sp, #4]
   1288e:	b10b      	cbz	r3, 12894 <rpc_logobj_client_request_alloc+0x20>
   12890:	3308      	adds	r3, #8
   12892:	6023      	str	r3, [r4, #0]
   12894:	b002      	add	sp, #8
   12896:	bd10      	pop	{r4, pc}
   12898:	200f      	movs	r0, #15
   1289a:	b002      	add	sp, #8
   1289c:	bd10      	pop	{r4, pc}
   1289e:	200e      	movs	r0, #14
   128a0:	b002      	add	sp, #8
   128a2:	bd10      	pop	{r4, pc}

000128a4 <rpc_logobj_client_request_send>:
   128a4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   128a8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   128ac:	d10b      	bne.n	128c6 <rpc_logobj_client_request_send+0x22>
   128ae:	b160      	cbz	r0, 128ca <rpc_logobj_client_request_send+0x26>
   128b0:	4603      	mov	r3, r0
   128b2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   128b6:	2009      	movs	r0, #9
   128b8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   128bc:	f843 1d08 	str.w	r1, [r3, #-8]!
   128c0:	4619      	mov	r1, r3
   128c2:	f006 bd7b 	b.w	193bc <rpc_message_send>
   128c6:	200f      	movs	r0, #15
   128c8:	4770      	bx	lr
   128ca:	200e      	movs	r0, #14
   128cc:	4770      	bx	lr
   128ce:	bf00      	nop

000128d0 <rpc_logobj_client_message_free>:
   128d0:	b120      	cbz	r0, 128dc <rpc_logobj_client_message_free+0xc>
   128d2:	f1a0 0108 	sub.w	r1, r0, #8
   128d6:	2009      	movs	r0, #9
   128d8:	f006 bdba 	b.w	19450 <rpc_message_free>
   128dc:	200e      	movs	r0, #14
   128de:	4770      	bx	lr

000128e0 <rpc_logobj_client_data_free>:
   128e0:	b118      	cbz	r0, 128ea <rpc_logobj_client_data_free+0xa>
   128e2:	4601      	mov	r1, r0
   128e4:	2009      	movs	r0, #9
   128e6:	f006 bec5 	b.w	19674 <rpc_message_data_free>
   128ea:	200e      	movs	r0, #14
   128ec:	4770      	bx	lr
   128ee:	bf00      	nop

000128f0 <packet_free_cb>:
   128f0:	b510      	push	{r4, lr}
   128f2:	4604      	mov	r4, r0
   128f4:	6800      	ldr	r0, [r0, #0]
   128f6:	f7ff fff3 	bl	128e0 <rpc_logobj_client_data_free>
   128fa:	68a0      	ldr	r0, [r4, #8]
   128fc:	b118      	cbz	r0, 12906 <packet_free_cb+0x16>
   128fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12902:	f001 b90f 	b.w	13b24 <nrf_free>
   12906:	bd10      	pop	{r4, pc}

00012908 <logobj_event_handler>:
   12908:	b530      	push	{r4, r5, lr}
   1290a:	4b3b      	ldr	r3, [pc, #236]	; (129f8 <logobj_event_handler+0xf0>)
   1290c:	b085      	sub	sp, #20
   1290e:	681d      	ldr	r5, [r3, #0]
   12910:	2d00      	cmp	r5, #0
   12912:	d04c      	beq.n	129ae <logobj_event_handler+0xa6>
   12914:	f248 0302 	movw	r3, #32770	; 0x8002
   12918:	4299      	cmp	r1, r3
   1291a:	d053      	beq.n	129c4 <logobj_event_handler+0xbc>
   1291c:	d91c      	bls.n	12958 <logobj_event_handler+0x50>
   1291e:	f248 0303 	movw	r3, #32771	; 0x8003
   12922:	4299      	cmp	r1, r3
   12924:	d05a      	beq.n	129dc <logobj_event_handler+0xd4>
   12926:	f249 0301 	movw	r3, #36865	; 0x9001
   1292a:	4299      	cmp	r1, r3
   1292c:	d147      	bne.n	129be <logobj_event_handler+0xb6>
   1292e:	2400      	movs	r4, #0
   12930:	6843      	ldr	r3, [r0, #4]
   12932:	6802      	ldr	r2, [r0, #0]
   12934:	e9cd 4402 	strd	r4, r4, [sp, #8]
   12938:	e9cd 2300 	strd	r2, r3, [sp]
   1293c:	69e8      	ldr	r0, [r5, #28]
   1293e:	4669      	mov	r1, sp
   12940:	6803      	ldr	r3, [r0, #0]
   12942:	685b      	ldr	r3, [r3, #4]
   12944:	4798      	blx	r3
   12946:	3001      	adds	r0, #1
   12948:	d04e      	beq.n	129e8 <logobj_event_handler+0xe0>
   1294a:	4620      	mov	r0, r4
   1294c:	682b      	ldr	r3, [r5, #0]
   1294e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12952:	602b      	str	r3, [r5, #0]
   12954:	b005      	add	sp, #20
   12956:	bd30      	pop	{r4, r5, pc}
   12958:	f248 0301 	movw	r3, #32769	; 0x8001
   1295c:	4299      	cmp	r1, r3
   1295e:	d12e      	bne.n	129be <logobj_event_handler+0xb6>
   12960:	68c3      	ldr	r3, [r0, #12]
   12962:	2b00      	cmp	r3, #0
   12964:	d135      	bne.n	129d2 <logobj_event_handler+0xca>
   12966:	6828      	ldr	r0, [r5, #0]
   12968:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1296c:	d03e      	beq.n	129ec <logobj_event_handler+0xe4>
   1296e:	682b      	ldr	r3, [r5, #0]
   12970:	b29b      	uxth	r3, r3
   12972:	2b01      	cmp	r3, #1
   12974:	d105      	bne.n	12982 <logobj_event_handler+0x7a>
   12976:	682b      	ldr	r3, [r5, #0]
   12978:	0c1b      	lsrs	r3, r3, #16
   1297a:	041b      	lsls	r3, r3, #16
   1297c:	f043 0302 	orr.w	r3, r3, #2
   12980:	602b      	str	r3, [r5, #0]
   12982:	4b1e      	ldr	r3, [pc, #120]	; (129fc <logobj_event_handler+0xf4>)
   12984:	781a      	ldrb	r2, [r3, #0]
   12986:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1298a:	2a00      	cmp	r2, #0
   1298c:	d031      	beq.n	129f2 <logobj_event_handler+0xea>
   1298e:	4a1c      	ldr	r2, [pc, #112]	; (12a00 <logobj_event_handler+0xf8>)
   12990:	7811      	ldrb	r1, [r2, #0]
   12992:	b909      	cbnz	r1, 12998 <logobj_event_handler+0x90>
   12994:	2101      	movs	r1, #1
   12996:	7011      	strb	r1, [r2, #0]
   12998:	2000      	movs	r0, #0
   1299a:	7018      	strb	r0, [r3, #0]
   1299c:	682b      	ldr	r3, [r5, #0]
   1299e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   129a2:	602b      	str	r3, [r5, #0]
   129a4:	682b      	ldr	r3, [r5, #0]
   129a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   129aa:	602b      	str	r3, [r5, #0]
   129ac:	e7d2      	b.n	12954 <logobj_event_handler+0x4c>
   129ae:	6800      	ldr	r0, [r0, #0]
   129b0:	2800      	cmp	r0, #0
   129b2:	d0cf      	beq.n	12954 <logobj_event_handler+0x4c>
   129b4:	f7ff ff94 	bl	128e0 <rpc_logobj_client_data_free>
   129b8:	4628      	mov	r0, r5
   129ba:	b005      	add	sp, #20
   129bc:	bd30      	pop	{r4, r5, pc}
   129be:	2000      	movs	r0, #0
   129c0:	b005      	add	sp, #20
   129c2:	bd30      	pop	{r4, r5, pc}
   129c4:	682b      	ldr	r3, [r5, #0]
   129c6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   129ca:	d00b      	beq.n	129e4 <logobj_event_handler+0xdc>
   129cc:	68c0      	ldr	r0, [r0, #12]
   129ce:	2800      	cmp	r0, #0
   129d0:	d0e4      	beq.n	1299c <logobj_event_handler+0x94>
   129d2:	230e      	movs	r3, #14
   129d4:	2000      	movs	r0, #0
   129d6:	606b      	str	r3, [r5, #4]
   129d8:	b005      	add	sp, #20
   129da:	bd30      	pop	{r4, r5, pc}
   129dc:	68c3      	ldr	r3, [r0, #12]
   129de:	2b01      	cmp	r3, #1
   129e0:	d1a5      	bne.n	1292e <logobj_event_handler+0x26>
   129e2:	e7f6      	b.n	129d2 <logobj_event_handler+0xca>
   129e4:	4618      	mov	r0, r3
   129e6:	e7b5      	b.n	12954 <logobj_event_handler+0x4c>
   129e8:	2002      	movs	r0, #2
   129ea:	e7b3      	b.n	12954 <logobj_event_handler+0x4c>
   129ec:	230e      	movs	r3, #14
   129ee:	606b      	str	r3, [r5, #4]
   129f0:	e7b0      	b.n	12954 <logobj_event_handler+0x4c>
   129f2:	4a03      	ldr	r2, [pc, #12]	; (12a00 <logobj_event_handler+0xf8>)
   129f4:	7011      	strb	r1, [r2, #0]
   129f6:	e7cf      	b.n	12998 <logobj_event_handler+0x90>
   129f8:	200204d0 	.word	0x200204d0
   129fc:	2002658b 	.word	0x2002658b
   12a00:	2002658c 	.word	0x2002658c

00012a04 <logobj_interface_init>:
   12a04:	2300      	movs	r3, #0
   12a06:	b510      	push	{r4, lr}
   12a08:	4907      	ldr	r1, [pc, #28]	; (12a28 <logobj_interface_init+0x24>)
   12a0a:	4a08      	ldr	r2, [pc, #32]	; (12a2c <logobj_interface_init+0x28>)
   12a0c:	4c08      	ldr	r4, [pc, #32]	; (12a30 <logobj_interface_init+0x2c>)
   12a0e:	4809      	ldr	r0, [pc, #36]	; (12a34 <logobj_interface_init+0x30>)
   12a10:	7023      	strb	r3, [r4, #0]
   12a12:	6003      	str	r3, [r0, #0]
   12a14:	700b      	strb	r3, [r1, #0]
   12a16:	6013      	str	r3, [r2, #0]
   12a18:	f7ff ff26 	bl	12868 <rpc_logobj_client_init>
   12a1c:	3000      	adds	r0, #0
   12a1e:	bf18      	it	ne
   12a20:	2001      	movne	r0, #1
   12a22:	4240      	negs	r0, r0
   12a24:	bd10      	pop	{r4, pc}
   12a26:	bf00      	nop
   12a28:	2002658b 	.word	0x2002658b
   12a2c:	200204cc 	.word	0x200204cc
   12a30:	2002658c 	.word	0x2002658c
   12a34:	200204d0 	.word	0x200204d0

00012a38 <logobj_interface_open>:
   12a38:	2300      	movs	r3, #0
   12a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12a3e:	2866      	cmp	r0, #102	; 0x66
   12a40:	b082      	sub	sp, #8
   12a42:	9300      	str	r3, [sp, #0]
   12a44:	d172      	bne.n	12b2c <logobj_interface_open+0xf4>
   12a46:	2902      	cmp	r1, #2
   12a48:	4689      	mov	r9, r1
   12a4a:	d16f      	bne.n	12b2c <logobj_interface_open+0xf4>
   12a4c:	f240 2305 	movw	r3, #517	; 0x205
   12a50:	429a      	cmp	r2, r3
   12a52:	4692      	mov	sl, r2
   12a54:	d16a      	bne.n	12b2c <logobj_interface_open+0xf4>
   12a56:	4f48      	ldr	r7, [pc, #288]	; (12b78 <logobj_interface_open+0x140>)
   12a58:	683d      	ldr	r5, [r7, #0]
   12a5a:	2d00      	cmp	r5, #0
   12a5c:	d17c      	bne.n	12b58 <logobj_interface_open+0x120>
   12a5e:	4680      	mov	r8, r0
   12a60:	4a46      	ldr	r2, [pc, #280]	; (12b7c <logobj_interface_open+0x144>)
   12a62:	4668      	mov	r0, sp
   12a64:	f006 f81c 	bl	18aa0 <interface_socket_allocate>
   12a68:	9b00      	ldr	r3, [sp, #0]
   12a6a:	4606      	mov	r6, r0
   12a6c:	2b00      	cmp	r3, #0
   12a6e:	d07d      	beq.n	12b6c <logobj_interface_open+0x134>
   12a70:	4629      	mov	r1, r5
   12a72:	2204      	movs	r2, #4
   12a74:	4842      	ldr	r0, [pc, #264]	; (12b80 <logobj_interface_open+0x148>)
   12a76:	603b      	str	r3, [r7, #0]
   12a78:	f00a fe17 	bl	1d6aa <memset>
   12a7c:	9c00      	ldr	r4, [sp, #0]
   12a7e:	4629      	mov	r1, r5
   12a80:	e9c4 8903 	strd	r8, r9, [r4, #12]
   12a84:	f8c4 a014 	str.w	sl, [r4, #20]
   12a88:	a801      	add	r0, sp, #4
   12a8a:	f7ff fef3 	bl	12874 <rpc_logobj_client_request_alloc>
   12a8e:	2800      	cmp	r0, #0
   12a90:	d13c      	bne.n	12b0c <logobj_interface_open+0xd4>
   12a92:	2201      	movs	r2, #1
   12a94:	2104      	movs	r1, #4
   12a96:	9b01      	ldr	r3, [sp, #4]
   12a98:	4d3a      	ldr	r5, [pc, #232]	; (12b84 <logobj_interface_open+0x14c>)
   12a9a:	7358      	strb	r0, [r3, #13]
   12a9c:	7398      	strb	r0, [r3, #14]
   12a9e:	73d8      	strb	r0, [r3, #15]
   12aa0:	7258      	strb	r0, [r3, #9]
   12aa2:	7298      	strb	r0, [r3, #10]
   12aa4:	72d8      	strb	r0, [r3, #11]
   12aa6:	7219      	strb	r1, [r3, #8]
   12aa8:	702a      	strb	r2, [r5, #0]
   12aaa:	731a      	strb	r2, [r3, #12]
   12aac:	6822      	ldr	r2, [r4, #0]
   12aae:	4618      	mov	r0, r3
   12ab0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   12ab4:	6022      	str	r2, [r4, #0]
   12ab6:	f247 0101 	movw	r1, #28673	; 0x7001
   12aba:	f7ff fef3 	bl	128a4 <rpc_logobj_client_request_send>
   12abe:	bb38      	cbnz	r0, 12b10 <logobj_interface_open+0xd8>
   12ac0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ac8:	4611      	mov	r1, r2
   12aca:	4630      	mov	r0, r6
   12acc:	f006 f88c 	bl	18be8 <interface_socket_wait>
   12ad0:	4604      	mov	r4, r0
   12ad2:	b310      	cbz	r0, 12b1a <logobj_interface_open+0xe2>
   12ad4:	9a00      	ldr	r2, [sp, #0]
   12ad6:	2e00      	cmp	r6, #0
   12ad8:	6813      	ldr	r3, [r2, #0]
   12ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12ade:	6013      	str	r3, [r2, #0]
   12ae0:	9a00      	ldr	r2, [sp, #0]
   12ae2:	6813      	ldr	r3, [r2, #0]
   12ae4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12ae8:	6013      	str	r3, [r2, #0]
   12aea:	9a00      	ldr	r2, [sp, #0]
   12aec:	6813      	ldr	r3, [r2, #0]
   12aee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12af2:	6013      	str	r3, [r2, #0]
   12af4:	da36      	bge.n	12b64 <logobj_interface_open+0x12c>
   12af6:	2300      	movs	r3, #0
   12af8:	4620      	mov	r0, r4
   12afa:	603b      	str	r3, [r7, #0]
   12afc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b00:	f7fe ff60 	bl	119c4 <bsd_os_errno_set>
   12b04:	4630      	mov	r0, r6
   12b06:	b002      	add	sp, #8
   12b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b0c:	240c      	movs	r4, #12
   12b0e:	e7e1      	b.n	12ad4 <logobj_interface_open+0x9c>
   12b10:	9801      	ldr	r0, [sp, #4]
   12b12:	f7ff fedd 	bl	128d0 <rpc_logobj_client_message_free>
   12b16:	2405      	movs	r4, #5
   12b18:	e7dc      	b.n	12ad4 <logobj_interface_open+0x9c>
   12b1a:	4630      	mov	r0, r6
   12b1c:	f006 f8d0 	bl	18cc0 <interface_socket_from_handle_get>
   12b20:	b150      	cbz	r0, 12b38 <logobj_interface_open+0x100>
   12b22:	6844      	ldr	r4, [r0, #4]
   12b24:	b144      	cbz	r4, 12b38 <logobj_interface_open+0x100>
   12b26:	2300      	movs	r3, #0
   12b28:	6043      	str	r3, [r0, #4]
   12b2a:	e7d3      	b.n	12ad4 <logobj_interface_open+0x9c>
   12b2c:	2016      	movs	r0, #22
   12b2e:	f7fe ff49 	bl	119c4 <bsd_os_errno_set>
   12b32:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b36:	e7e5      	b.n	12b04 <logobj_interface_open+0xcc>
   12b38:	9a00      	ldr	r2, [sp, #0]
   12b3a:	6813      	ldr	r3, [r2, #0]
   12b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12b40:	6013      	str	r3, [r2, #0]
   12b42:	9a00      	ldr	r2, [sp, #0]
   12b44:	6813      	ldr	r3, [r2, #0]
   12b46:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12b4a:	6013      	str	r3, [r2, #0]
   12b4c:	9a00      	ldr	r2, [sp, #0]
   12b4e:	6813      	ldr	r3, [r2, #0]
   12b50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12b54:	6013      	str	r3, [r2, #0]
   12b56:	e7d5      	b.n	12b04 <logobj_interface_open+0xcc>
   12b58:	2001      	movs	r0, #1
   12b5a:	f7fe ff33 	bl	119c4 <bsd_os_errno_set>
   12b5e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b62:	e7cf      	b.n	12b04 <logobj_interface_open+0xcc>
   12b64:	4630      	mov	r0, r6
   12b66:	f005 fff1 	bl	18b4c <interface_socket_free>
   12b6a:	e7c4      	b.n	12af6 <logobj_interface_open+0xbe>
   12b6c:	2018      	movs	r0, #24
   12b6e:	f7fe ff29 	bl	119c4 <bsd_os_errno_set>
   12b72:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12b76:	e7c5      	b.n	12b04 <logobj_interface_open+0xcc>
   12b78:	200204d0 	.word	0x200204d0
   12b7c:	000128f1 	.word	0x000128f1
   12b80:	200204cc 	.word	0x200204cc
   12b84:	2002658b 	.word	0x2002658b

00012b88 <logobj_interface_read>:
   12b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b8c:	b085      	sub	sp, #20
   12b8e:	2900      	cmp	r1, #0
   12b90:	d05e      	beq.n	12c50 <logobj_interface_read+0xc8>
   12b92:	2a00      	cmp	r2, #0
   12b94:	4616      	mov	r6, r2
   12b96:	dd5b      	ble.n	12c50 <logobj_interface_read+0xc8>
   12b98:	461f      	mov	r7, r3
   12b9a:	4680      	mov	r8, r0
   12b9c:	460d      	mov	r5, r1
   12b9e:	f006 f88f 	bl	18cc0 <interface_socket_from_handle_get>
   12ba2:	4604      	mov	r4, r0
   12ba4:	2800      	cmp	r0, #0
   12ba6:	d059      	beq.n	12c5c <logobj_interface_read+0xd4>
   12ba8:	69c0      	ldr	r0, [r0, #28]
   12baa:	07ba      	lsls	r2, r7, #30
   12bac:	6803      	ldr	r3, [r0, #0]
   12bae:	68db      	ldr	r3, [r3, #12]
   12bb0:	d524      	bpl.n	12bfc <logobj_interface_read+0x74>
   12bb2:	4798      	blx	r3
   12bb4:	3001      	adds	r0, #1
   12bb6:	d03b      	beq.n	12c30 <logobj_interface_read+0xa8>
   12bb8:	6823      	ldr	r3, [r4, #0]
   12bba:	69e0      	ldr	r0, [r4, #28]
   12bbc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   12bc0:	d038      	beq.n	12c34 <logobj_interface_read+0xac>
   12bc2:	2100      	movs	r1, #0
   12bc4:	6823      	ldr	r3, [r4, #0]
   12bc6:	463a      	mov	r2, r7
   12bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12bcc:	6023      	str	r3, [r4, #0]
   12bce:	e9cd 1102 	strd	r1, r1, [sp, #8]
   12bd2:	e9cd 5600 	strd	r5, r6, [sp]
   12bd6:	6803      	ldr	r3, [r0, #0]
   12bd8:	4669      	mov	r1, sp
   12bda:	689b      	ldr	r3, [r3, #8]
   12bdc:	4798      	blx	r3
   12bde:	4605      	mov	r5, r0
   12be0:	69e0      	ldr	r0, [r4, #28]
   12be2:	6803      	ldr	r3, [r0, #0]
   12be4:	68db      	ldr	r3, [r3, #12]
   12be6:	4798      	blx	r3
   12be8:	3001      	adds	r0, #1
   12bea:	d003      	beq.n	12bf4 <logobj_interface_read+0x6c>
   12bec:	6823      	ldr	r3, [r4, #0]
   12bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12bf2:	6023      	str	r3, [r4, #0]
   12bf4:	4628      	mov	r0, r5
   12bf6:	b005      	add	sp, #20
   12bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12bfc:	6822      	ldr	r2, [r4, #0]
   12bfe:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   12c02:	d1d6      	bne.n	12bb2 <logobj_interface_read+0x2a>
   12c04:	4798      	blx	r3
   12c06:	1c43      	adds	r3, r0, #1
   12c08:	d1d6      	bne.n	12bb8 <logobj_interface_read+0x30>
   12c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12c0e:	6a23      	ldr	r3, [r4, #32]
   12c10:	4611      	mov	r1, r2
   12c12:	2b00      	cmp	r3, #0
   12c14:	bf08      	it	eq
   12c16:	4603      	moveq	r3, r0
   12c18:	4640      	mov	r0, r8
   12c1a:	f005 ffe5 	bl	18be8 <interface_socket_wait>
   12c1e:	b158      	cbz	r0, 12c38 <logobj_interface_read+0xb0>
   12c20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c24:	f7fe fece 	bl	119c4 <bsd_os_errno_set>
   12c28:	4628      	mov	r0, r5
   12c2a:	b005      	add	sp, #20
   12c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12c30:	2023      	movs	r0, #35	; 0x23
   12c32:	e7f5      	b.n	12c20 <logobj_interface_read+0x98>
   12c34:	461d      	mov	r5, r3
   12c36:	e7d4      	b.n	12be2 <logobj_interface_read+0x5a>
   12c38:	4640      	mov	r0, r8
   12c3a:	f006 f841 	bl	18cc0 <interface_socket_from_handle_get>
   12c3e:	4603      	mov	r3, r0
   12c40:	2800      	cmp	r0, #0
   12c42:	d0b9      	beq.n	12bb8 <logobj_interface_read+0x30>
   12c44:	6840      	ldr	r0, [r0, #4]
   12c46:	2800      	cmp	r0, #0
   12c48:	d0b6      	beq.n	12bb8 <logobj_interface_read+0x30>
   12c4a:	f8c3 9004 	str.w	r9, [r3, #4]
   12c4e:	e7e7      	b.n	12c20 <logobj_interface_read+0x98>
   12c50:	2016      	movs	r0, #22
   12c52:	f7fe feb7 	bl	119c4 <bsd_os_errno_set>
   12c56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c5a:	e7cb      	b.n	12bf4 <logobj_interface_read+0x6c>
   12c5c:	2009      	movs	r0, #9
   12c5e:	f7fe feb1 	bl	119c4 <bsd_os_errno_set>
   12c62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c66:	e7c5      	b.n	12bf4 <logobj_interface_read+0x6c>

00012c68 <logobj_interface_write>:
   12c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c6c:	b082      	sub	sp, #8
   12c6e:	2900      	cmp	r1, #0
   12c70:	d05b      	beq.n	12d2a <logobj_interface_write+0xc2>
   12c72:	2a04      	cmp	r2, #4
   12c74:	d159      	bne.n	12d2a <logobj_interface_write+0xc2>
   12c76:	461e      	mov	r6, r3
   12c78:	4607      	mov	r7, r0
   12c7a:	460d      	mov	r5, r1
   12c7c:	f006 f820 	bl	18cc0 <interface_socket_from_handle_get>
   12c80:	4604      	mov	r4, r0
   12c82:	2800      	cmp	r0, #0
   12c84:	d067      	beq.n	12d56 <logobj_interface_write+0xee>
   12c86:	07b0      	lsls	r0, r6, #30
   12c88:	d526      	bpl.n	12cd8 <logobj_interface_write+0x70>
   12c8a:	6823      	ldr	r3, [r4, #0]
   12c8c:	039b      	lsls	r3, r3, #14
   12c8e:	d55e      	bpl.n	12d4e <logobj_interface_write+0xe6>
   12c90:	2600      	movs	r6, #0
   12c92:	6823      	ldr	r3, [r4, #0]
   12c94:	2100      	movs	r1, #0
   12c96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12c9a:	6023      	str	r3, [r4, #0]
   12c9c:	a801      	add	r0, sp, #4
   12c9e:	f8d5 8000 	ldr.w	r8, [r5]
   12ca2:	f7ff fde7 	bl	12874 <rpc_logobj_client_request_alloc>
   12ca6:	b9f8      	cbnz	r0, 12ce8 <logobj_interface_write+0x80>
   12ca8:	2504      	movs	r5, #4
   12caa:	9b01      	ldr	r3, [sp, #4]
   12cac:	f247 0103 	movw	r1, #28675	; 0x7003
   12cb0:	f8c3 800c 	str.w	r8, [r3, #12]
   12cb4:	7258      	strb	r0, [r3, #9]
   12cb6:	7298      	strb	r0, [r3, #10]
   12cb8:	72d8      	strb	r0, [r3, #11]
   12cba:	721d      	strb	r5, [r3, #8]
   12cbc:	4618      	mov	r0, r3
   12cbe:	f7ff fdf1 	bl	128a4 <rpc_logobj_client_request_send>
   12cc2:	4680      	mov	r8, r0
   12cc4:	bb40      	cbnz	r0, 12d18 <logobj_interface_write+0xb0>
   12cc6:	b9ce      	cbnz	r6, 12cfc <logobj_interface_write+0x94>
   12cc8:	4628      	mov	r0, r5
   12cca:	6823      	ldr	r3, [r4, #0]
   12ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12cd0:	6023      	str	r3, [r4, #0]
   12cd2:	b002      	add	sp, #8
   12cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cd8:	6823      	ldr	r3, [r4, #0]
   12cda:	00d9      	lsls	r1, r3, #3
   12cdc:	d4d5      	bmi.n	12c8a <logobj_interface_write+0x22>
   12cde:	6823      	ldr	r3, [r4, #0]
   12ce0:	039a      	lsls	r2, r3, #14
   12ce2:	d536      	bpl.n	12d52 <logobj_interface_write+0xea>
   12ce4:	2601      	movs	r6, #1
   12ce6:	e7d4      	b.n	12c92 <logobj_interface_write+0x2a>
   12ce8:	200c      	movs	r0, #12
   12cea:	6823      	ldr	r3, [r4, #0]
   12cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12cf0:	6023      	str	r3, [r4, #0]
   12cf2:	f7fe fe67 	bl	119c4 <bsd_os_errno_set>
   12cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12cfa:	e7ea      	b.n	12cd2 <logobj_interface_write+0x6a>
   12cfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d04:	4611      	mov	r1, r2
   12d06:	4638      	mov	r0, r7
   12d08:	f005 ff6e 	bl	18be8 <interface_socket_wait>
   12d0c:	b198      	cbz	r0, 12d36 <logobj_interface_write+0xce>
   12d0e:	6823      	ldr	r3, [r4, #0]
   12d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d14:	6023      	str	r3, [r4, #0]
   12d16:	e7ec      	b.n	12cf2 <logobj_interface_write+0x8a>
   12d18:	9801      	ldr	r0, [sp, #4]
   12d1a:	f7ff fdd9 	bl	128d0 <rpc_logobj_client_message_free>
   12d1e:	6823      	ldr	r3, [r4, #0]
   12d20:	2005      	movs	r0, #5
   12d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12d26:	6023      	str	r3, [r4, #0]
   12d28:	e7e3      	b.n	12cf2 <logobj_interface_write+0x8a>
   12d2a:	2016      	movs	r0, #22
   12d2c:	f7fe fe4a 	bl	119c4 <bsd_os_errno_set>
   12d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d34:	e7cd      	b.n	12cd2 <logobj_interface_write+0x6a>
   12d36:	4638      	mov	r0, r7
   12d38:	f005 ffc2 	bl	18cc0 <interface_socket_from_handle_get>
   12d3c:	4603      	mov	r3, r0
   12d3e:	2800      	cmp	r0, #0
   12d40:	d0c2      	beq.n	12cc8 <logobj_interface_write+0x60>
   12d42:	6840      	ldr	r0, [r0, #4]
   12d44:	2800      	cmp	r0, #0
   12d46:	d0bf      	beq.n	12cc8 <logobj_interface_write+0x60>
   12d48:	f8c3 8004 	str.w	r8, [r3, #4]
   12d4c:	e7df      	b.n	12d0e <logobj_interface_write+0xa6>
   12d4e:	2073      	movs	r0, #115	; 0x73
   12d50:	e7cf      	b.n	12cf2 <logobj_interface_write+0x8a>
   12d52:	2009      	movs	r0, #9
   12d54:	e7cd      	b.n	12cf2 <logobj_interface_write+0x8a>
   12d56:	2009      	movs	r0, #9
   12d58:	f7fe fe34 	bl	119c4 <bsd_os_errno_set>
   12d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d60:	e7b7      	b.n	12cd2 <logobj_interface_write+0x6a>
   12d62:	bf00      	nop

00012d64 <logobj_interface_setopt>:
   12d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d66:	2901      	cmp	r1, #1
   12d68:	b085      	sub	sp, #20
   12d6a:	d068      	beq.n	12e3e <logobj_interface_setopt+0xda>
   12d6c:	461e      	mov	r6, r3
   12d6e:	f240 2305 	movw	r3, #517	; 0x205
   12d72:	4299      	cmp	r1, r3
   12d74:	f040 8095 	bne.w	12ea2 <logobj_interface_setopt+0x13e>
   12d78:	4607      	mov	r7, r0
   12d7a:	4615      	mov	r5, r2
   12d7c:	f005 ffa0 	bl	18cc0 <interface_socket_from_handle_get>
   12d80:	4604      	mov	r4, r0
   12d82:	2800      	cmp	r0, #0
   12d84:	f000 80b2 	beq.w	12eec <logobj_interface_setopt+0x188>
   12d88:	2d01      	cmp	r5, #1
   12d8a:	d019      	beq.n	12dc0 <logobj_interface_setopt+0x5c>
   12d8c:	2d02      	cmp	r5, #2
   12d8e:	d010      	beq.n	12db2 <logobj_interface_setopt+0x4e>
   12d90:	252a      	movs	r5, #42	; 0x2a
   12d92:	6803      	ldr	r3, [r0, #0]
   12d94:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12d98:	6023      	str	r3, [r4, #0]
   12d9a:	6823      	ldr	r3, [r4, #0]
   12d9c:	4628      	mov	r0, r5
   12d9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12da2:	6023      	str	r3, [r4, #0]
   12da4:	f7fe fe0e 	bl	119c4 <bsd_os_errno_set>
   12da8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12dac:	4628      	mov	r0, r5
   12dae:	b005      	add	sp, #20
   12db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12db2:	b116      	cbz	r6, 12dba <logobj_interface_setopt+0x56>
   12db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12db6:	2b01      	cmp	r3, #1
   12db8:	d049      	beq.n	12e4e <logobj_interface_setopt+0xea>
   12dba:	6823      	ldr	r3, [r4, #0]
   12dbc:	2516      	movs	r5, #22
   12dbe:	e7e9      	b.n	12d94 <logobj_interface_setopt+0x30>
   12dc0:	2e00      	cmp	r6, #0
   12dc2:	d0fa      	beq.n	12dba <logobj_interface_setopt+0x56>
   12dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12dc6:	2b04      	cmp	r3, #4
   12dc8:	d1f7      	bne.n	12dba <logobj_interface_setopt+0x56>
   12dca:	2100      	movs	r1, #0
   12dcc:	a803      	add	r0, sp, #12
   12dce:	f7ff fd51 	bl	12874 <rpc_logobj_client_request_alloc>
   12dd2:	4605      	mov	r5, r0
   12dd4:	2800      	cmp	r0, #0
   12dd6:	d16a      	bne.n	12eae <logobj_interface_setopt+0x14a>
   12dd8:	9803      	ldr	r0, [sp, #12]
   12dda:	2208      	movs	r2, #8
   12ddc:	4629      	mov	r1, r5
   12dde:	300c      	adds	r0, #12
   12de0:	f00a fc63 	bl	1d6aa <memset>
   12de4:	9803      	ldr	r0, [sp, #12]
   12de6:	4631      	mov	r1, r6
   12de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12dea:	300c      	adds	r0, #12
   12dec:	f00a fc33 	bl	1d656 <memcpy>
   12df0:	2308      	movs	r3, #8
   12df2:	9803      	ldr	r0, [sp, #12]
   12df4:	f247 0102 	movw	r1, #28674	; 0x7002
   12df8:	7203      	strb	r3, [r0, #8]
   12dfa:	7245      	strb	r5, [r0, #9]
   12dfc:	7285      	strb	r5, [r0, #10]
   12dfe:	72c5      	strb	r5, [r0, #11]
   12e00:	6823      	ldr	r3, [r4, #0]
   12e02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12e06:	6023      	str	r3, [r4, #0]
   12e08:	f7ff fd4c 	bl	128a4 <rpc_logobj_client_request_send>
   12e0c:	2800      	cmp	r0, #0
   12e0e:	d151      	bne.n	12eb4 <logobj_interface_setopt+0x150>
   12e10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e18:	4611      	mov	r1, r2
   12e1a:	4638      	mov	r0, r7
   12e1c:	f005 fee4 	bl	18be8 <interface_socket_wait>
   12e20:	4605      	mov	r5, r0
   12e22:	2800      	cmp	r0, #0
   12e24:	d13b      	bne.n	12e9e <logobj_interface_setopt+0x13a>
   12e26:	4638      	mov	r0, r7
   12e28:	f005 ff4a 	bl	18cc0 <interface_socket_from_handle_get>
   12e2c:	2800      	cmp	r0, #0
   12e2e:	d04f      	beq.n	12ed0 <logobj_interface_setopt+0x16c>
   12e30:	6843      	ldr	r3, [r0, #4]
   12e32:	2b00      	cmp	r3, #0
   12e34:	d04c      	beq.n	12ed0 <logobj_interface_setopt+0x16c>
   12e36:	2200      	movs	r2, #0
   12e38:	461d      	mov	r5, r3
   12e3a:	6042      	str	r2, [r0, #4]
   12e3c:	e02f      	b.n	12e9e <logobj_interface_setopt+0x13a>
   12e3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12e40:	9400      	str	r4, [sp, #0]
   12e42:	f005 ff65 	bl	18d10 <interface_socket_setopt>
   12e46:	4605      	mov	r5, r0
   12e48:	4628      	mov	r0, r5
   12e4a:	b005      	add	sp, #20
   12e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e4e:	2100      	movs	r1, #0
   12e50:	a803      	add	r0, sp, #12
   12e52:	7835      	ldrb	r5, [r6, #0]
   12e54:	f7ff fd0e 	bl	12874 <rpc_logobj_client_request_alloc>
   12e58:	bb48      	cbnz	r0, 12eae <logobj_interface_setopt+0x14a>
   12e5a:	2d01      	cmp	r5, #1
   12e5c:	bf08      	it	eq
   12e5e:	4b26      	ldreq	r3, [pc, #152]	; (12ef8 <logobj_interface_setopt+0x194>)
   12e60:	f04f 0204 	mov.w	r2, #4
   12e64:	bf08      	it	eq
   12e66:	701d      	strbeq	r5, [r3, #0]
   12e68:	2300      	movs	r3, #0
   12e6a:	9803      	ldr	r0, [sp, #12]
   12e6c:	f247 0101 	movw	r1, #28673	; 0x7001
   12e70:	7243      	strb	r3, [r0, #9]
   12e72:	60c5      	str	r5, [r0, #12]
   12e74:	7283      	strb	r3, [r0, #10]
   12e76:	72c3      	strb	r3, [r0, #11]
   12e78:	7202      	strb	r2, [r0, #8]
   12e7a:	6823      	ldr	r3, [r4, #0]
   12e7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12e80:	6023      	str	r3, [r4, #0]
   12e82:	f7ff fd0f 	bl	128a4 <rpc_logobj_client_request_send>
   12e86:	4606      	mov	r6, r0
   12e88:	b9a0      	cbnz	r0, 12eb4 <logobj_interface_setopt+0x150>
   12e8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e92:	4611      	mov	r1, r2
   12e94:	4638      	mov	r0, r7
   12e96:	f005 fea7 	bl	18be8 <interface_socket_wait>
   12e9a:	4605      	mov	r5, r0
   12e9c:	b180      	cbz	r0, 12ec0 <logobj_interface_setopt+0x15c>
   12e9e:	6823      	ldr	r3, [r4, #0]
   12ea0:	e778      	b.n	12d94 <logobj_interface_setopt+0x30>
   12ea2:	202a      	movs	r0, #42	; 0x2a
   12ea4:	f7fe fd8e 	bl	119c4 <bsd_os_errno_set>
   12ea8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12eac:	e77e      	b.n	12dac <logobj_interface_setopt+0x48>
   12eae:	6823      	ldr	r3, [r4, #0]
   12eb0:	250c      	movs	r5, #12
   12eb2:	e76f      	b.n	12d94 <logobj_interface_setopt+0x30>
   12eb4:	9803      	ldr	r0, [sp, #12]
   12eb6:	f7ff fd0b 	bl	128d0 <rpc_logobj_client_message_free>
   12eba:	2505      	movs	r5, #5
   12ebc:	6823      	ldr	r3, [r4, #0]
   12ebe:	e769      	b.n	12d94 <logobj_interface_setopt+0x30>
   12ec0:	4638      	mov	r0, r7
   12ec2:	f005 fefd 	bl	18cc0 <interface_socket_from_handle_get>
   12ec6:	b140      	cbz	r0, 12eda <logobj_interface_setopt+0x176>
   12ec8:	6845      	ldr	r5, [r0, #4]
   12eca:	b135      	cbz	r5, 12eda <logobj_interface_setopt+0x176>
   12ecc:	6046      	str	r6, [r0, #4]
   12ece:	e7e6      	b.n	12e9e <logobj_interface_setopt+0x13a>
   12ed0:	4631      	mov	r1, r6
   12ed2:	2204      	movs	r2, #4
   12ed4:	4809      	ldr	r0, [pc, #36]	; (12efc <logobj_interface_setopt+0x198>)
   12ed6:	f00a fbbe 	bl	1d656 <memcpy>
   12eda:	6823      	ldr	r3, [r4, #0]
   12edc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12ee0:	6023      	str	r3, [r4, #0]
   12ee2:	6823      	ldr	r3, [r4, #0]
   12ee4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12ee8:	6023      	str	r3, [r4, #0]
   12eea:	e75f      	b.n	12dac <logobj_interface_setopt+0x48>
   12eec:	2009      	movs	r0, #9
   12eee:	f7fe fd69 	bl	119c4 <bsd_os_errno_set>
   12ef2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12ef6:	e759      	b.n	12dac <logobj_interface_setopt+0x48>
   12ef8:	2002658b 	.word	0x2002658b
   12efc:	200204cc 	.word	0x200204cc

00012f00 <logobj_interface_getopt>:
   12f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f02:	2901      	cmp	r1, #1
   12f04:	b083      	sub	sp, #12
   12f06:	9e08      	ldr	r6, [sp, #32]
   12f08:	d030      	beq.n	12f6c <logobj_interface_getopt+0x6c>
   12f0a:	461f      	mov	r7, r3
   12f0c:	f240 2305 	movw	r3, #517	; 0x205
   12f10:	4299      	cmp	r1, r3
   12f12:	d134      	bne.n	12f7e <logobj_interface_getopt+0x7e>
   12f14:	4615      	mov	r5, r2
   12f16:	f005 fed3 	bl	18cc0 <interface_socket_from_handle_get>
   12f1a:	2800      	cmp	r0, #0
   12f1c:	d037      	beq.n	12f8e <logobj_interface_getopt+0x8e>
   12f1e:	2d01      	cmp	r5, #1
   12f20:	d015      	beq.n	12f4e <logobj_interface_getopt+0x4e>
   12f22:	2d02      	cmp	r5, #2
   12f24:	d10b      	bne.n	12f3e <logobj_interface_getopt+0x3e>
   12f26:	b387      	cbz	r7, 12f8a <logobj_interface_getopt+0x8a>
   12f28:	6833      	ldr	r3, [r6, #0]
   12f2a:	b373      	cbz	r3, 12f8a <logobj_interface_getopt+0x8a>
   12f2c:	2300      	movs	r3, #0
   12f2e:	2201      	movs	r2, #1
   12f30:	4618      	mov	r0, r3
   12f32:	491a      	ldr	r1, [pc, #104]	; (12f9c <logobj_interface_getopt+0x9c>)
   12f34:	7809      	ldrb	r1, [r1, #0]
   12f36:	7039      	strb	r1, [r7, #0]
   12f38:	6032      	str	r2, [r6, #0]
   12f3a:	b003      	add	sp, #12
   12f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f3e:	2009      	movs	r0, #9
   12f40:	f7fe fd40 	bl	119c4 <bsd_os_errno_set>
   12f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f48:	4618      	mov	r0, r3
   12f4a:	b003      	add	sp, #12
   12f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f4e:	b1e7      	cbz	r7, 12f8a <logobj_interface_getopt+0x8a>
   12f50:	6833      	ldr	r3, [r6, #0]
   12f52:	2b03      	cmp	r3, #3
   12f54:	d919      	bls.n	12f8a <logobj_interface_getopt+0x8a>
   12f56:	4638      	mov	r0, r7
   12f58:	2204      	movs	r2, #4
   12f5a:	4911      	ldr	r1, [pc, #68]	; (12fa0 <logobj_interface_getopt+0xa0>)
   12f5c:	f00a fb7b 	bl	1d656 <memcpy>
   12f60:	2300      	movs	r3, #0
   12f62:	2204      	movs	r2, #4
   12f64:	4618      	mov	r0, r3
   12f66:	6032      	str	r2, [r6, #0]
   12f68:	b003      	add	sp, #12
   12f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f6c:	9600      	str	r6, [sp, #0]
   12f6e:	f005 ff05 	bl	18d7c <interface_socket_getopt>
   12f72:	4603      	mov	r3, r0
   12f74:	2800      	cmp	r0, #0
   12f76:	d1e3      	bne.n	12f40 <logobj_interface_getopt+0x40>
   12f78:	4618      	mov	r0, r3
   12f7a:	b003      	add	sp, #12
   12f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f7e:	202a      	movs	r0, #42	; 0x2a
   12f80:	f7fe fd20 	bl	119c4 <bsd_os_errno_set>
   12f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f88:	e7de      	b.n	12f48 <logobj_interface_getopt+0x48>
   12f8a:	2016      	movs	r0, #22
   12f8c:	e7d8      	b.n	12f40 <logobj_interface_getopt+0x40>
   12f8e:	2009      	movs	r0, #9
   12f90:	f7fe fd18 	bl	119c4 <bsd_os_errno_set>
   12f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f98:	e7d6      	b.n	12f48 <logobj_interface_getopt+0x48>
   12f9a:	bf00      	nop
   12f9c:	2002658c 	.word	0x2002658c
   12fa0:	200204cc 	.word	0x200204cc

00012fa4 <logobj_interface_close>:
   12fa4:	b510      	push	{r4, lr}
   12fa6:	4604      	mov	r4, r0
   12fa8:	f005 fe8a 	bl	18cc0 <interface_socket_from_handle_get>
   12fac:	b138      	cbz	r0, 12fbe <logobj_interface_close+0x1a>
   12fae:	4620      	mov	r0, r4
   12fb0:	f005 fdcc 	bl	18b4c <interface_socket_free>
   12fb4:	2300      	movs	r3, #0
   12fb6:	4a05      	ldr	r2, [pc, #20]	; (12fcc <logobj_interface_close+0x28>)
   12fb8:	4618      	mov	r0, r3
   12fba:	6013      	str	r3, [r2, #0]
   12fbc:	bd10      	pop	{r4, pc}
   12fbe:	2009      	movs	r0, #9
   12fc0:	f7fe fd00 	bl	119c4 <bsd_os_errno_set>
   12fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12fc8:	bd10      	pop	{r4, pc}
   12fca:	bf00      	nop
   12fcc:	200204d0 	.word	0x200204d0

00012fd0 <packet_free_cb>:
   12fd0:	6800      	ldr	r0, [r0, #0]
   12fd2:	f004 ba31 	b.w	17438 <rpc_at_client_data_free>
   12fd6:	bf00      	nop

00012fd8 <at_interface_write>:
   12fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12fda:	b083      	sub	sp, #12
   12fdc:	460f      	mov	r7, r1
   12fde:	4615      	mov	r5, r2
   12fe0:	4606      	mov	r6, r0
   12fe2:	f005 fe6d 	bl	18cc0 <interface_socket_from_handle_get>
   12fe6:	2800      	cmp	r0, #0
   12fe8:	d047      	beq.n	1307a <at_interface_write+0xa2>
   12fea:	6803      	ldr	r3, [r0, #0]
   12fec:	4604      	mov	r4, r0
   12fee:	039b      	lsls	r3, r3, #14
   12ff0:	d543      	bpl.n	1307a <at_interface_write+0xa2>
   12ff2:	6803      	ldr	r3, [r0, #0]
   12ff4:	4629      	mov	r1, r5
   12ff6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12ffa:	6003      	str	r3, [r0, #0]
   12ffc:	6803      	ldr	r3, [r0, #0]
   12ffe:	a801      	add	r0, sp, #4
   13000:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   13004:	6023      	str	r3, [r4, #0]
   13006:	f004 f9ed 	bl	173e4 <rpc_at_client_request_alloc>
   1300a:	bba0      	cbnz	r0, 13076 <at_interface_write+0x9e>
   1300c:	2204      	movs	r2, #4
   1300e:	9b01      	ldr	r3, [sp, #4]
   13010:	721a      	strb	r2, [r3, #8]
   13012:	7258      	strb	r0, [r3, #9]
   13014:	7298      	strb	r0, [r3, #10]
   13016:	72d8      	strb	r0, [r3, #11]
   13018:	60de      	str	r6, [r3, #12]
   1301a:	b985      	cbnz	r5, 1303e <at_interface_write+0x66>
   1301c:	4618      	mov	r0, r3
   1301e:	2101      	movs	r1, #1
   13020:	f004 f9f4 	bl	1740c <rpc_at_client_request_send>
   13024:	b9d0      	cbnz	r0, 1305c <at_interface_write+0x84>
   13026:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1302a:	4630      	mov	r0, r6
   1302c:	4611      	mov	r1, r2
   1302e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13032:	f005 fdd9 	bl	18be8 <interface_socket_wait>
   13036:	b9a8      	cbnz	r0, 13064 <at_interface_write+0x8c>
   13038:	4628      	mov	r0, r5
   1303a:	b003      	add	sp, #12
   1303c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1303e:	4639      	mov	r1, r7
   13040:	6818      	ldr	r0, [r3, #0]
   13042:	462a      	mov	r2, r5
   13044:	f00a fb07 	bl	1d656 <memcpy>
   13048:	2101      	movs	r1, #1
   1304a:	9801      	ldr	r0, [sp, #4]
   1304c:	f004 f9de 	bl	1740c <rpc_at_client_request_send>
   13050:	2800      	cmp	r0, #0
   13052:	d0e8      	beq.n	13026 <at_interface_write+0x4e>
   13054:	9b01      	ldr	r3, [sp, #4]
   13056:	6818      	ldr	r0, [r3, #0]
   13058:	f004 f9ee 	bl	17438 <rpc_at_client_data_free>
   1305c:	9801      	ldr	r0, [sp, #4]
   1305e:	f004 f9e3 	bl	17428 <rpc_at_client_message_free>
   13062:	2023      	movs	r0, #35	; 0x23
   13064:	6823      	ldr	r3, [r4, #0]
   13066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1306a:	6023      	str	r3, [r4, #0]
   1306c:	f7fe fcaa 	bl	119c4 <bsd_os_errno_set>
   13070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13074:	e7e1      	b.n	1303a <at_interface_write+0x62>
   13076:	200c      	movs	r0, #12
   13078:	e7f4      	b.n	13064 <at_interface_write+0x8c>
   1307a:	2016      	movs	r0, #22
   1307c:	e7f6      	b.n	1306c <at_interface_write+0x94>
   1307e:	bf00      	nop

00013080 <at_interface_init>:
   13080:	f004 b9aa 	b.w	173d8 <rpc_at_client_init>

00013084 <at_interface_open>:
   13084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13088:	2500      	movs	r5, #0
   1308a:	b082      	sub	sp, #8
   1308c:	ab02      	add	r3, sp, #8
   1308e:	f843 5d08 	str.w	r5, [r3, #-8]!
   13092:	4680      	mov	r8, r0
   13094:	460f      	mov	r7, r1
   13096:	4618      	mov	r0, r3
   13098:	4616      	mov	r6, r2
   1309a:	2102      	movs	r1, #2
   1309c:	4a1d      	ldr	r2, [pc, #116]	; (13114 <at_interface_open+0x90>)
   1309e:	f005 fcff 	bl	18aa0 <interface_socket_allocate>
   130a2:	9b00      	ldr	r3, [sp, #0]
   130a4:	4604      	mov	r4, r0
   130a6:	b30b      	cbz	r3, 130ec <at_interface_open+0x68>
   130a8:	e9c3 8703 	strd	r8, r7, [r3, #12]
   130ac:	615e      	str	r6, [r3, #20]
   130ae:	4629      	mov	r1, r5
   130b0:	a801      	add	r0, sp, #4
   130b2:	f004 f997 	bl	173e4 <rpc_at_client_request_alloc>
   130b6:	b9e8      	cbnz	r0, 130f4 <at_interface_open+0x70>
   130b8:	2204      	movs	r2, #4
   130ba:	9b01      	ldr	r3, [sp, #4]
   130bc:	2105      	movs	r1, #5
   130be:	7258      	strb	r0, [r3, #9]
   130c0:	7298      	strb	r0, [r3, #10]
   130c2:	72d8      	strb	r0, [r3, #11]
   130c4:	721a      	strb	r2, [r3, #8]
   130c6:	60dc      	str	r4, [r3, #12]
   130c8:	4618      	mov	r0, r3
   130ca:	f004 f99f 	bl	1740c <rpc_at_client_request_send>
   130ce:	b9d8      	cbnz	r0, 13108 <at_interface_open+0x84>
   130d0:	2202      	movs	r2, #2
   130d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   130d6:	4611      	mov	r1, r2
   130d8:	4620      	mov	r0, r4
   130da:	f005 fd85 	bl	18be8 <interface_socket_wait>
   130de:	4605      	mov	r5, r0
   130e0:	b948      	cbnz	r0, 130f6 <at_interface_open+0x72>
   130e2:	9a00      	ldr	r2, [sp, #0]
   130e4:	6813      	ldr	r3, [r2, #0]
   130e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   130ea:	6013      	str	r3, [r2, #0]
   130ec:	4620      	mov	r0, r4
   130ee:	b002      	add	sp, #8
   130f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130f4:	250c      	movs	r5, #12
   130f6:	4620      	mov	r0, r4
   130f8:	f005 fd28 	bl	18b4c <interface_socket_free>
   130fc:	4628      	mov	r0, r5
   130fe:	f7fe fc61 	bl	119c4 <bsd_os_errno_set>
   13102:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13106:	e7f1      	b.n	130ec <at_interface_open+0x68>
   13108:	9801      	ldr	r0, [sp, #4]
   1310a:	f004 f98d 	bl	17428 <rpc_at_client_message_free>
   1310e:	2523      	movs	r5, #35	; 0x23
   13110:	e7f1      	b.n	130f6 <at_interface_open+0x72>
   13112:	bf00      	nop
   13114:	00012fd1 	.word	0x00012fd1

00013118 <at_interface_close>:
   13118:	b5f0      	push	{r4, r5, r6, r7, lr}
   1311a:	b083      	sub	sp, #12
   1311c:	4606      	mov	r6, r0
   1311e:	f005 fdcf 	bl	18cc0 <interface_socket_from_handle_get>
   13122:	2800      	cmp	r0, #0
   13124:	d03d      	beq.n	131a2 <at_interface_close+0x8a>
   13126:	230d      	movs	r3, #13
   13128:	6807      	ldr	r7, [r0, #0]
   1312a:	6003      	str	r3, [r0, #0]
   1312c:	6803      	ldr	r3, [r0, #0]
   1312e:	4604      	mov	r4, r0
   13130:	039b      	lsls	r3, r3, #14
   13132:	d41f      	bmi.n	13174 <at_interface_close+0x5c>
   13134:	2100      	movs	r1, #0
   13136:	a801      	add	r0, sp, #4
   13138:	f004 f954 	bl	173e4 <rpc_at_client_request_alloc>
   1313c:	bb20      	cbnz	r0, 13188 <at_interface_close+0x70>
   1313e:	2204      	movs	r2, #4
   13140:	9b01      	ldr	r3, [sp, #4]
   13142:	2106      	movs	r1, #6
   13144:	7258      	strb	r0, [r3, #9]
   13146:	7298      	strb	r0, [r3, #10]
   13148:	72d8      	strb	r0, [r3, #11]
   1314a:	721a      	strb	r2, [r3, #8]
   1314c:	60de      	str	r6, [r3, #12]
   1314e:	4618      	mov	r0, r3
   13150:	f004 f95c 	bl	1740c <rpc_at_client_request_send>
   13154:	b9d0      	cbnz	r0, 1318c <at_interface_close+0x74>
   13156:	220e      	movs	r2, #14
   13158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1315c:	4611      	mov	r1, r2
   1315e:	4630      	mov	r0, r6
   13160:	f005 fd42 	bl	18be8 <interface_socket_wait>
   13164:	4605      	mov	r5, r0
   13166:	b9a8      	cbnz	r0, 13194 <at_interface_close+0x7c>
   13168:	4630      	mov	r0, r6
   1316a:	f005 fcef 	bl	18b4c <interface_socket_free>
   1316e:	4628      	mov	r0, r5
   13170:	b003      	add	sp, #12
   13172:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13174:	6803      	ldr	r3, [r0, #0]
   13176:	2100      	movs	r1, #0
   13178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1317c:	6003      	str	r3, [r0, #0]
   1317e:	a801      	add	r0, sp, #4
   13180:	f004 f930 	bl	173e4 <rpc_at_client_request_alloc>
   13184:	2800      	cmp	r0, #0
   13186:	d0da      	beq.n	1313e <at_interface_close+0x26>
   13188:	250c      	movs	r5, #12
   1318a:	e003      	b.n	13194 <at_interface_close+0x7c>
   1318c:	9801      	ldr	r0, [sp, #4]
   1318e:	f004 f94b 	bl	17428 <rpc_at_client_message_free>
   13192:	2523      	movs	r5, #35	; 0x23
   13194:	6027      	str	r7, [r4, #0]
   13196:	4628      	mov	r0, r5
   13198:	f7fe fc14 	bl	119c4 <bsd_os_errno_set>
   1319c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   131a0:	e7e5      	b.n	1316e <at_interface_close+0x56>
   131a2:	2516      	movs	r5, #22
   131a4:	e7f7      	b.n	13196 <at_interface_close+0x7e>
   131a6:	bf00      	nop

000131a8 <at_interface_read>:
   131a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131ac:	b084      	sub	sp, #16
   131ae:	4688      	mov	r8, r1
   131b0:	4615      	mov	r5, r2
   131b2:	461e      	mov	r6, r3
   131b4:	4607      	mov	r7, r0
   131b6:	f005 fd83 	bl	18cc0 <interface_socket_from_handle_get>
   131ba:	2800      	cmp	r0, #0
   131bc:	d049      	beq.n	13252 <at_interface_read+0xaa>
   131be:	2300      	movs	r3, #0
   131c0:	e9cd 8500 	strd	r8, r5, [sp]
   131c4:	f016 0502 	ands.w	r5, r6, #2
   131c8:	4604      	mov	r4, r0
   131ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
   131ce:	d00e      	beq.n	131ee <at_interface_read+0x46>
   131d0:	e01e      	b.n	13210 <at_interface_read+0x68>
   131d2:	2d00      	cmp	r5, #0
   131d4:	d133      	bne.n	1323e <at_interface_read+0x96>
   131d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   131da:	6a23      	ldr	r3, [r4, #32]
   131dc:	4611      	mov	r1, r2
   131de:	2b00      	cmp	r3, #0
   131e0:	bf08      	it	eq
   131e2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   131e6:	4638      	mov	r0, r7
   131e8:	f005 fcfe 	bl	18be8 <interface_socket_wait>
   131ec:	4605      	mov	r5, r0
   131ee:	6823      	ldr	r3, [r4, #0]
   131f0:	69e0      	ldr	r0, [r4, #28]
   131f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   131f6:	6023      	str	r3, [r4, #0]
   131f8:	6803      	ldr	r3, [r0, #0]
   131fa:	4632      	mov	r2, r6
   131fc:	689b      	ldr	r3, [r3, #8]
   131fe:	4669      	mov	r1, sp
   13200:	4798      	blx	r3
   13202:	f1b0 0800 	subs.w	r8, r0, #0
   13206:	dbe4      	blt.n	131d2 <at_interface_read+0x2a>
   13208:	4640      	mov	r0, r8
   1320a:	b004      	add	sp, #16
   1320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13210:	6803      	ldr	r3, [r0, #0]
   13212:	69c0      	ldr	r0, [r0, #28]
   13214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13218:	6023      	str	r3, [r4, #0]
   1321a:	6803      	ldr	r3, [r0, #0]
   1321c:	4632      	mov	r2, r6
   1321e:	689b      	ldr	r3, [r3, #8]
   13220:	4669      	mov	r1, sp
   13222:	4798      	blx	r3
   13224:	f1b0 0800 	subs.w	r8, r0, #0
   13228:	daee      	bge.n	13208 <at_interface_read+0x60>
   1322a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1322e:	d1eb      	bne.n	13208 <at_interface_read+0x60>
   13230:	2023      	movs	r0, #35	; 0x23
   13232:	f7fe fbc7 	bl	119c4 <bsd_os_errno_set>
   13236:	4640      	mov	r0, r8
   13238:	b004      	add	sp, #16
   1323a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1323e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   13242:	d1e1      	bne.n	13208 <at_interface_read+0x60>
   13244:	4628      	mov	r0, r5
   13246:	f7fe fbbd 	bl	119c4 <bsd_os_errno_set>
   1324a:	4640      	mov	r0, r8
   1324c:	b004      	add	sp, #16
   1324e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13252:	2016      	movs	r0, #22
   13254:	f7fe fbb6 	bl	119c4 <bsd_os_errno_set>
   13258:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1325c:	e7d4      	b.n	13208 <at_interface_read+0x60>
   1325e:	bf00      	nop

00013260 <at_interface_getopt>:
   13260:	f005 bd8c 	b.w	18d7c <interface_socket_getopt>

00013264 <at_interface_setopt>:
   13264:	f005 bd54 	b.w	18d10 <interface_socket_setopt>

00013268 <rpc_at_event_handler>:
   13268:	b570      	push	{r4, r5, r6, lr}
   1326a:	4606      	mov	r6, r0
   1326c:	b084      	sub	sp, #16
   1326e:	68c0      	ldr	r0, [r0, #12]
   13270:	460d      	mov	r5, r1
   13272:	f005 fd25 	bl	18cc0 <interface_socket_from_handle_get>
   13276:	4604      	mov	r4, r0
   13278:	b348      	cbz	r0, 132ce <rpc_at_event_handler+0x66>
   1327a:	6803      	ldr	r3, [r0, #0]
   1327c:	b29b      	uxth	r3, r3
   1327e:	2b01      	cmp	r3, #1
   13280:	d01f      	beq.n	132c2 <rpc_at_event_handler+0x5a>
   13282:	6803      	ldr	r3, [r0, #0]
   13284:	b29b      	uxth	r3, r3
   13286:	2b0d      	cmp	r3, #13
   13288:	d029      	beq.n	132de <rpc_at_event_handler+0x76>
   1328a:	6803      	ldr	r3, [r0, #0]
   1328c:	b29b      	uxth	r3, r3
   1328e:	2b02      	cmp	r3, #2
   13290:	d02d      	beq.n	132ee <rpc_at_event_handler+0x86>
   13292:	3d03      	subs	r5, #3
   13294:	2d01      	cmp	r5, #1
   13296:	d817      	bhi.n	132c8 <rpc_at_event_handler+0x60>
   13298:	2500      	movs	r5, #0
   1329a:	6873      	ldr	r3, [r6, #4]
   1329c:	6832      	ldr	r2, [r6, #0]
   1329e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   132a2:	e9cd 2300 	strd	r2, r3, [sp]
   132a6:	69e0      	ldr	r0, [r4, #28]
   132a8:	4669      	mov	r1, sp
   132aa:	6803      	ldr	r3, [r0, #0]
   132ac:	685b      	ldr	r3, [r3, #4]
   132ae:	4798      	blx	r3
   132b0:	3001      	adds	r0, #1
   132b2:	d019      	beq.n	132e8 <rpc_at_event_handler+0x80>
   132b4:	4628      	mov	r0, r5
   132b6:	6823      	ldr	r3, [r4, #0]
   132b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   132bc:	6023      	str	r3, [r4, #0]
   132be:	b004      	add	sp, #16
   132c0:	bd70      	pop	{r4, r5, r6, pc}
   132c2:	2d02      	cmp	r5, #2
   132c4:	d1e5      	bne.n	13292 <rpc_at_event_handler+0x2a>
   132c6:	6005      	str	r5, [r0, #0]
   132c8:	2000      	movs	r0, #0
   132ca:	b004      	add	sp, #16
   132cc:	bd70      	pop	{r4, r5, r6, pc}
   132ce:	6830      	ldr	r0, [r6, #0]
   132d0:	2800      	cmp	r0, #0
   132d2:	d0f9      	beq.n	132c8 <rpc_at_event_handler+0x60>
   132d4:	f004 f8b0 	bl	17438 <rpc_at_client_data_free>
   132d8:	4620      	mov	r0, r4
   132da:	b004      	add	sp, #16
   132dc:	bd70      	pop	{r4, r5, r6, pc}
   132de:	2d02      	cmp	r5, #2
   132e0:	d1d7      	bne.n	13292 <rpc_at_event_handler+0x2a>
   132e2:	230e      	movs	r3, #14
   132e4:	6003      	str	r3, [r0, #0]
   132e6:	e7ef      	b.n	132c8 <rpc_at_event_handler+0x60>
   132e8:	2002      	movs	r0, #2
   132ea:	b004      	add	sp, #16
   132ec:	bd70      	pop	{r4, r5, r6, pc}
   132ee:	6803      	ldr	r3, [r0, #0]
   132f0:	029b      	lsls	r3, r3, #10
   132f2:	d5ce      	bpl.n	13292 <rpc_at_event_handler+0x2a>
   132f4:	2d02      	cmp	r5, #2
   132f6:	d1cc      	bne.n	13292 <rpc_at_event_handler+0x2a>
   132f8:	6803      	ldr	r3, [r0, #0]
   132fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   132fe:	6003      	str	r3, [r0, #0]
   13300:	6803      	ldr	r3, [r0, #0]
   13302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13306:	6003      	str	r3, [r0, #0]
   13308:	e7de      	b.n	132c8 <rpc_at_event_handler+0x60>
   1330a:	bf00      	nop

0001330c <dfu_client_event_handler>:
   1330c:	f850 1b08 	ldr.w	r1, [r0], #8
   13310:	0c09      	lsrs	r1, r1, #16
   13312:	f001 b891 	b.w	14438 <rpc_dfu_event_handler>
   13316:	bf00      	nop

00013318 <rpc_dfu_client_init>:
   13318:	4801      	ldr	r0, [pc, #4]	; (13320 <rpc_dfu_client_init+0x8>)
   1331a:	f005 be2f 	b.w	18f7c <rpc_client_register>
   1331e:	bf00      	nop
   13320:	0001f600 	.word	0x0001f600

00013324 <rpc_dfu_client_request_alloc>:
   13324:	2300      	movs	r3, #0
   13326:	b510      	push	{r4, lr}
   13328:	b082      	sub	sp, #8
   1332a:	9301      	str	r3, [sp, #4]
   1332c:	b158      	cbz	r0, 13346 <rpc_dfu_client_request_alloc+0x22>
   1332e:	4604      	mov	r4, r0
   13330:	aa01      	add	r2, sp, #4
   13332:	2006      	movs	r0, #6
   13334:	f006 f85a 	bl	193ec <rpc_message_alloc>
   13338:	b918      	cbnz	r0, 13342 <rpc_dfu_client_request_alloc+0x1e>
   1333a:	9b01      	ldr	r3, [sp, #4]
   1333c:	b10b      	cbz	r3, 13342 <rpc_dfu_client_request_alloc+0x1e>
   1333e:	3308      	adds	r3, #8
   13340:	6023      	str	r3, [r4, #0]
   13342:	b002      	add	sp, #8
   13344:	bd10      	pop	{r4, pc}
   13346:	2007      	movs	r0, #7
   13348:	b002      	add	sp, #8
   1334a:	bd10      	pop	{r4, pc}

0001334c <rpc_dfu_client_request_send>:
   1334c:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   13350:	d10b      	bne.n	1336a <rpc_dfu_client_request_send+0x1e>
   13352:	b160      	cbz	r0, 1336e <rpc_dfu_client_request_send+0x22>
   13354:	4603      	mov	r3, r0
   13356:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1335a:	2006      	movs	r0, #6
   1335c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13360:	f843 1d08 	str.w	r1, [r3, #-8]!
   13364:	4619      	mov	r1, r3
   13366:	f006 b829 	b.w	193bc <rpc_message_send>
   1336a:	200f      	movs	r0, #15
   1336c:	4770      	bx	lr
   1336e:	2007      	movs	r0, #7
   13370:	4770      	bx	lr
   13372:	bf00      	nop

00013374 <rpc_dfu_client_message_free>:
   13374:	b120      	cbz	r0, 13380 <rpc_dfu_client_message_free+0xc>
   13376:	f1a0 0108 	sub.w	r1, r0, #8
   1337a:	2006      	movs	r0, #6
   1337c:	f006 b868 	b.w	19450 <rpc_message_free>
   13380:	2007      	movs	r0, #7
   13382:	4770      	bx	lr

00013384 <rpc_dfu_client_data_free>:
   13384:	b118      	cbz	r0, 1338e <rpc_dfu_client_data_free+0xa>
   13386:	4601      	mov	r1, r0
   13388:	2006      	movs	r0, #6
   1338a:	f006 b973 	b.w	19674 <rpc_message_data_free>
   1338e:	2007      	movs	r0, #7
   13390:	4770      	bx	lr
   13392:	bf00      	nop

00013394 <mem_free>:
   13394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13398:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 13468 <mem_free+0xd4>
   1339c:	b083      	sub	sp, #12
   1339e:	9000      	str	r0, [sp, #0]
   133a0:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   133a4:	f8dc 3008 	ldr.w	r3, [ip, #8]
   133a8:	b12b      	cbz	r3, 133b6 <mem_free+0x22>
   133aa:	f8dc 2000 	ldr.w	r2, [ip]
   133ae:	9c00      	ldr	r4, [sp, #0]
   133b0:	7810      	ldrb	r0, [r2, #0]
   133b2:	42a0      	cmp	r0, r4
   133b4:	d006      	beq.n	133c4 <mem_free+0x30>
   133b6:	f10c 0c0c 	add.w	ip, ip, #12
   133ba:	45e3      	cmp	fp, ip
   133bc:	d1f2      	bne.n	133a4 <mem_free+0x10>
   133be:	b003      	add	sp, #12
   133c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133c4:	f8dc a004 	ldr.w	sl, [ip, #4]
   133c8:	eb03 080a 	add.w	r8, r3, sl
   133cc:	45c2      	cmp	sl, r8
   133ce:	d2f2      	bcs.n	133b6 <mem_free+0x22>
   133d0:	6853      	ldr	r3, [r2, #4]
   133d2:	f8cd c004 	str.w	ip, [sp, #4]
   133d6:	46d6      	mov	lr, sl
   133d8:	469c      	mov	ip, r3
   133da:	f8d2 9010 	ldr.w	r9, [r2, #16]
   133de:	8997      	ldrh	r7, [r2, #12]
   133e0:	ebae 000a 	sub.w	r0, lr, sl
   133e4:	b3df      	cbz	r7, 1345e <mem_free+0xca>
   133e6:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   133ea:	4290      	cmp	r0, r2
   133ec:	d31c      	bcc.n	13428 <mem_free+0x94>
   133ee:	4665      	mov	r5, ip
   133f0:	2400      	movs	r4, #0
   133f2:	f109 0304 	add.w	r3, r9, #4
   133f6:	e003      	b.n	13400 <mem_free+0x6c>
   133f8:	885a      	ldrh	r2, [r3, #2]
   133fa:	3304      	adds	r3, #4
   133fc:	4282      	cmp	r2, r0
   133fe:	d815      	bhi.n	1342c <mem_free+0x98>
   13400:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   13404:	3401      	adds	r4, #1
   13406:	42a7      	cmp	r7, r4
   13408:	fb02 5506 	mla	r5, r2, r6, r5
   1340c:	eba0 0002 	sub.w	r0, r0, r2
   13410:	461e      	mov	r6, r3
   13412:	d1f1      	bne.n	133f8 <mem_free+0x64>
   13414:	2000      	movs	r0, #0
   13416:	4281      	cmp	r1, r0
   13418:	d00d      	beq.n	13436 <mem_free+0xa2>
   1341a:	f10e 0e01 	add.w	lr, lr, #1
   1341e:	45f0      	cmp	r8, lr
   13420:	d1de      	bne.n	133e0 <mem_free+0x4c>
   13422:	f8dd c004 	ldr.w	ip, [sp, #4]
   13426:	e7c6      	b.n	133b6 <mem_free+0x22>
   13428:	4665      	mov	r5, ip
   1342a:	464e      	mov	r6, r9
   1342c:	8833      	ldrh	r3, [r6, #0]
   1342e:	fb00 5003 	mla	r0, r0, r3, r5
   13432:	4281      	cmp	r1, r0
   13434:	d1f1      	bne.n	1341a <mem_free+0x86>
   13436:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1343a:	f8dd c004 	ldr.w	ip, [sp, #4]
   1343e:	d0ba      	beq.n	133b6 <mem_free+0x22>
   13440:	2301      	movs	r3, #1
   13442:	4a08      	ldr	r2, [pc, #32]	; (13464 <mem_free+0xd0>)
   13444:	ea4f 115e 	mov.w	r1, lr, lsr #5
   13448:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1344c:	f00e 0e1f 	and.w	lr, lr, #31
   13450:	fa03 fe0e 	lsl.w	lr, r3, lr
   13454:	ea4e 0000 	orr.w	r0, lr, r0
   13458:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1345c:	e7af      	b.n	133be <mem_free+0x2a>
   1345e:	4638      	mov	r0, r7
   13460:	e7d9      	b.n	13416 <mem_free+0x82>
   13462:	bf00      	nop
   13464:	200204d4 	.word	0x200204d4
   13468:	20020518 	.word	0x20020518

0001346c <mem_alloc.constprop.5>:
   1346c:	2800      	cmp	r0, #0
   1346e:	d050      	beq.n	13512 <mem_alloc.constprop.5+0xa6>
   13470:	4b6d      	ldr	r3, [pc, #436]	; (13628 <mem_alloc.constprop.5+0x1bc>)
   13472:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13476:	4290      	cmp	r0, r2
   13478:	d84b      	bhi.n	13512 <mem_alloc.constprop.5+0xa6>
   1347a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1347e:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   13482:	b083      	sub	sp, #12
   13484:	f1bb 0f00 	cmp.w	fp, #0
   13488:	d054      	beq.n	13534 <mem_alloc.constprop.5+0xc8>
   1348a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   1348e:	4691      	mov	r9, r2
   13490:	2600      	movs	r6, #0
   13492:	f04f 0812 	mov.w	r8, #18
   13496:	4f65      	ldr	r7, [pc, #404]	; (1362c <mem_alloc.constprop.5+0x1c0>)
   13498:	9201      	str	r2, [sp, #4]
   1349a:	f10b 0e11 	add.w	lr, fp, #17
   1349e:	eb06 0209 	add.w	r2, r6, r9
   134a2:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   134a6:	3201      	adds	r2, #1
   134a8:	0852      	lsrs	r2, r2, #1
   134aa:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   134ae:	f102 0112 	add.w	r1, r2, #18
   134b2:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   134b6:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   134ba:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   134be:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   134c2:	f8dc c004 	ldr.w	ip, [ip, #4]
   134c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   134ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   134ce:	f8da a010 	ldr.w	sl, [sl, #16]
   134d2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   134d6:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   134da:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   134de:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   134e2:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   134e6:	6849      	ldr	r1, [r1, #4]
   134e8:	692d      	ldr	r5, [r5, #16]
   134ea:	6924      	ldr	r4, [r4, #16]
   134ec:	f8dc c004 	ldr.w	ip, [ip, #4]
   134f0:	4550      	cmp	r0, sl
   134f2:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   134f6:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   134fa:	d915      	bls.n	13528 <mem_alloc.constprop.5+0xbc>
   134fc:	4288      	cmp	r0, r1
   134fe:	d211      	bcs.n	13524 <mem_alloc.constprop.5+0xb8>
   13500:	42a8      	cmp	r0, r5
   13502:	d908      	bls.n	13516 <mem_alloc.constprop.5+0xaa>
   13504:	1c56      	adds	r6, r2, #1
   13506:	45b1      	cmp	r9, r6
   13508:	f0c0 8087 	bcc.w	1361a <mem_alloc.constprop.5+0x1ae>
   1350c:	f102 0813 	add.w	r8, r2, #19
   13510:	e7c5      	b.n	1349e <mem_alloc.constprop.5+0x32>
   13512:	2000      	movs	r0, #0
   13514:	4770      	bx	lr
   13516:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1351a:	454e      	cmp	r6, r9
   1351c:	d87d      	bhi.n	1361a <mem_alloc.constprop.5+0x1ae>
   1351e:	f102 0e11 	add.w	lr, r2, #17
   13522:	e7bc      	b.n	1349e <mem_alloc.constprop.5+0x32>
   13524:	f109 0601 	add.w	r6, r9, #1
   13528:	45b3      	cmp	fp, r6
   1352a:	d007      	beq.n	1353c <mem_alloc.constprop.5+0xd0>
   1352c:	2e10      	cmp	r6, #16
   1352e:	d001      	beq.n	13534 <mem_alloc.constprop.5+0xc8>
   13530:	45b3      	cmp	fp, r6
   13532:	d808      	bhi.n	13546 <mem_alloc.constprop.5+0xda>
   13534:	2000      	movs	r0, #0
   13536:	b003      	add	sp, #12
   13538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1353c:	9a01      	ldr	r2, [sp, #4]
   1353e:	2a10      	cmp	r2, #16
   13540:	bf18      	it	ne
   13542:	4616      	movne	r6, r2
   13544:	d0f6      	beq.n	13534 <mem_alloc.constprop.5+0xc8>
   13546:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 13630 <mem_alloc.constprop.5+0x1c4>
   1354a:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1354e:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   13552:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13556:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1355a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1355e:	f8d2 e004 	ldr.w	lr, [r2, #4]
   13562:	691d      	ldr	r5, [r3, #16]
   13564:	2c00      	cmp	r4, #0
   13566:	d056      	beq.n	13616 <mem_alloc.constprop.5+0x1aa>
   13568:	462a      	mov	r2, r5
   1356a:	4670      	mov	r0, lr
   1356c:	00a4      	lsls	r4, r4, #2
   1356e:	eb05 0904 	add.w	r9, r5, r4
   13572:	8851      	ldrh	r1, [r2, #2]
   13574:	3204      	adds	r2, #4
   13576:	4591      	cmp	r9, r2
   13578:	4408      	add	r0, r1
   1357a:	d1fa      	bne.n	13572 <mem_alloc.constprop.5+0x106>
   1357c:	1929      	adds	r1, r5, r4
   1357e:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   13582:	4482      	add	sl, r0
   13584:	4582      	cmp	sl, r0
   13586:	d918      	bls.n	135ba <mem_alloc.constprop.5+0x14e>
   13588:	0941      	lsrs	r1, r0, #5
   1358a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1358e:	f000 041f 	and.w	r4, r0, #31
   13592:	fa22 f904 	lsr.w	r9, r2, r4
   13596:	f019 0f01 	tst.w	r9, #1
   1359a:	d007      	beq.n	135ac <mem_alloc.constprop.5+0x140>
   1359c:	e013      	b.n	135c6 <mem_alloc.constprop.5+0x15a>
   1359e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   135a2:	fa22 f904 	lsr.w	r9, r2, r4
   135a6:	f019 0f01 	tst.w	r9, #1
   135aa:	d10c      	bne.n	135c6 <mem_alloc.constprop.5+0x15a>
   135ac:	3001      	adds	r0, #1
   135ae:	4582      	cmp	sl, r0
   135b0:	ea4f 1150 	mov.w	r1, r0, lsr #5
   135b4:	f000 041f 	and.w	r4, r0, #31
   135b8:	d1f1      	bne.n	1359e <mem_alloc.constprop.5+0x132>
   135ba:	3601      	adds	r6, #1
   135bc:	455e      	cmp	r6, fp
   135be:	f108 0808 	add.w	r8, r8, #8
   135c2:	d3c4      	bcc.n	1354e <mem_alloc.constprop.5+0xe2>
   135c4:	e7b6      	b.n	13534 <mem_alloc.constprop.5+0xc8>
   135c6:	2601      	movs	r6, #1
   135c8:	fa06 f404 	lsl.w	r4, r6, r4
   135cc:	899e      	ldrh	r6, [r3, #12]
   135ce:	ea22 0204 	bic.w	r2, r2, r4
   135d2:	eba0 000e 	sub.w	r0, r0, lr
   135d6:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   135da:	685c      	ldr	r4, [r3, #4]
   135dc:	2e00      	cmp	r6, #0
   135de:	d0a9      	beq.n	13534 <mem_alloc.constprop.5+0xc8>
   135e0:	886a      	ldrh	r2, [r5, #2]
   135e2:	4282      	cmp	r2, r0
   135e4:	d811      	bhi.n	1360a <mem_alloc.constprop.5+0x19e>
   135e6:	2100      	movs	r1, #0
   135e8:	1d2b      	adds	r3, r5, #4
   135ea:	e003      	b.n	135f4 <mem_alloc.constprop.5+0x188>
   135ec:	885a      	ldrh	r2, [r3, #2]
   135ee:	3304      	adds	r3, #4
   135f0:	4282      	cmp	r2, r0
   135f2:	d80a      	bhi.n	1360a <mem_alloc.constprop.5+0x19e>
   135f4:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   135f8:	3101      	adds	r1, #1
   135fa:	428e      	cmp	r6, r1
   135fc:	fb02 4405 	mla	r4, r2, r5, r4
   13600:	eba0 0002 	sub.w	r0, r0, r2
   13604:	461d      	mov	r5, r3
   13606:	d1f1      	bne.n	135ec <mem_alloc.constprop.5+0x180>
   13608:	e794      	b.n	13534 <mem_alloc.constprop.5+0xc8>
   1360a:	882b      	ldrh	r3, [r5, #0]
   1360c:	fb00 4003 	mla	r0, r0, r3, r4
   13610:	b003      	add	sp, #12
   13612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13616:	4670      	mov	r0, lr
   13618:	e7b0      	b.n	1357c <mem_alloc.constprop.5+0x110>
   1361a:	f1bb 0f10 	cmp.w	fp, #16
   1361e:	bf08      	it	eq
   13620:	260f      	moveq	r6, #15
   13622:	d090      	beq.n	13546 <mem_alloc.constprop.5+0xda>
   13624:	e786      	b.n	13534 <mem_alloc.constprop.5+0xc8>
   13626:	bf00      	nop
   13628:	20020554 	.word	0x20020554
   1362c:	20020518 	.word	0x20020518
   13630:	200204d4 	.word	0x200204d4

00013634 <mem_alloc.constprop.4>:
   13634:	2800      	cmp	r0, #0
   13636:	d04c      	beq.n	136d2 <mem_alloc.constprop.4+0x9e>
   13638:	4b6b      	ldr	r3, [pc, #428]	; (137e8 <mem_alloc.constprop.4+0x1b4>)
   1363a:	681a      	ldr	r2, [r3, #0]
   1363c:	4290      	cmp	r0, r2
   1363e:	d848      	bhi.n	136d2 <mem_alloc.constprop.4+0x9e>
   13640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13644:	685f      	ldr	r7, [r3, #4]
   13646:	b083      	sub	sp, #12
   13648:	9700      	str	r7, [sp, #0]
   1364a:	2f00      	cmp	r7, #0
   1364c:	d051      	beq.n	136f2 <mem_alloc.constprop.4+0xbe>
   1364e:	1e7a      	subs	r2, r7, #1
   13650:	4696      	mov	lr, r2
   13652:	2100      	movs	r1, #0
   13654:	f04f 0c01 	mov.w	ip, #1
   13658:	4c64      	ldr	r4, [pc, #400]	; (137ec <mem_alloc.constprop.4+0x1b8>)
   1365a:	9201      	str	r2, [sp, #4]
   1365c:	eb01 020e 	add.w	r2, r1, lr
   13660:	3201      	adds	r2, #1
   13662:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   13666:	0852      	lsrs	r2, r2, #1
   13668:	f102 0801 	add.w	r8, r2, #1
   1366c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13670:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   13674:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   13678:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1367c:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   13680:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   13684:	f8d9 9004 	ldr.w	r9, [r9, #4]
   13688:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1368c:	f8da a010 	ldr.w	sl, [sl, #16]
   13690:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   13694:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   13698:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1369c:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   136a0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   136a4:	6936      	ldr	r6, [r6, #16]
   136a6:	f8db b004 	ldr.w	fp, [fp, #4]
   136aa:	692d      	ldr	r5, [r5, #16]
   136ac:	f8d9 9004 	ldr.w	r9, [r9, #4]
   136b0:	4550      	cmp	r0, sl
   136b2:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   136b6:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   136ba:	d913      	bls.n	136e4 <mem_alloc.constprop.4+0xb0>
   136bc:	42a8      	cmp	r0, r5
   136be:	d210      	bcs.n	136e2 <mem_alloc.constprop.4+0xae>
   136c0:	42b0      	cmp	r0, r6
   136c2:	d908      	bls.n	136d6 <mem_alloc.constprop.4+0xa2>
   136c4:	45c6      	cmp	lr, r8
   136c6:	4641      	mov	r1, r8
   136c8:	f0c0 8087 	bcc.w	137da <mem_alloc.constprop.4+0x1a6>
   136cc:	f108 0c01 	add.w	ip, r8, #1
   136d0:	e7c4      	b.n	1365c <mem_alloc.constprop.4+0x28>
   136d2:	2000      	movs	r0, #0
   136d4:	4770      	bx	lr
   136d6:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   136da:	4571      	cmp	r1, lr
   136dc:	d87d      	bhi.n	137da <mem_alloc.constprop.4+0x1a6>
   136de:	4617      	mov	r7, r2
   136e0:	e7bc      	b.n	1365c <mem_alloc.constprop.4+0x28>
   136e2:	4639      	mov	r1, r7
   136e4:	9a00      	ldr	r2, [sp, #0]
   136e6:	428a      	cmp	r2, r1
   136e8:	d007      	beq.n	136fa <mem_alloc.constprop.4+0xc6>
   136ea:	2910      	cmp	r1, #16
   136ec:	d001      	beq.n	136f2 <mem_alloc.constprop.4+0xbe>
   136ee:	428a      	cmp	r2, r1
   136f0:	d808      	bhi.n	13704 <mem_alloc.constprop.4+0xd0>
   136f2:	2000      	movs	r0, #0
   136f4:	b003      	add	sp, #12
   136f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136fa:	9a01      	ldr	r2, [sp, #4]
   136fc:	2a10      	cmp	r2, #16
   136fe:	bf18      	it	ne
   13700:	4611      	movne	r1, r2
   13702:	d0f6      	beq.n	136f2 <mem_alloc.constprop.4+0xbe>
   13704:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 137f0 <mem_alloc.constprop.4+0x1bc>
   13708:	f8dd 9000 	ldr.w	r9, [sp]
   1370c:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   13710:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   13714:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13718:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1371c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   13720:	f8d2 e004 	ldr.w	lr, [r2, #4]
   13724:	691f      	ldr	r7, [r3, #16]
   13726:	2e00      	cmp	r6, #0
   13728:	d055      	beq.n	137d6 <mem_alloc.constprop.4+0x1a2>
   1372a:	463a      	mov	r2, r7
   1372c:	4670      	mov	r0, lr
   1372e:	00b6      	lsls	r6, r6, #2
   13730:	eb07 0a06 	add.w	sl, r7, r6
   13734:	8855      	ldrh	r5, [r2, #2]
   13736:	3204      	adds	r2, #4
   13738:	4592      	cmp	sl, r2
   1373a:	4428      	add	r0, r5
   1373c:	d1fa      	bne.n	13734 <mem_alloc.constprop.4+0x100>
   1373e:	19bd      	adds	r5, r7, r6
   13740:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   13744:	4483      	add	fp, r0
   13746:	4583      	cmp	fp, r0
   13748:	d918      	bls.n	1377c <mem_alloc.constprop.4+0x148>
   1374a:	0945      	lsrs	r5, r0, #5
   1374c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   13750:	f000 061f 	and.w	r6, r0, #31
   13754:	fa22 fa06 	lsr.w	sl, r2, r6
   13758:	f01a 0f01 	tst.w	sl, #1
   1375c:	d007      	beq.n	1376e <mem_alloc.constprop.4+0x13a>
   1375e:	e013      	b.n	13788 <mem_alloc.constprop.4+0x154>
   13760:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   13764:	fa22 fa06 	lsr.w	sl, r2, r6
   13768:	f01a 0f01 	tst.w	sl, #1
   1376c:	d10c      	bne.n	13788 <mem_alloc.constprop.4+0x154>
   1376e:	3001      	adds	r0, #1
   13770:	4583      	cmp	fp, r0
   13772:	ea4f 1550 	mov.w	r5, r0, lsr #5
   13776:	f000 061f 	and.w	r6, r0, #31
   1377a:	d1f1      	bne.n	13760 <mem_alloc.constprop.4+0x12c>
   1377c:	3101      	adds	r1, #1
   1377e:	4549      	cmp	r1, r9
   13780:	f108 0808 	add.w	r8, r8, #8
   13784:	d3c4      	bcc.n	13710 <mem_alloc.constprop.4+0xdc>
   13786:	e7b4      	b.n	136f2 <mem_alloc.constprop.4+0xbe>
   13788:	2101      	movs	r1, #1
   1378a:	40b1      	lsls	r1, r6
   1378c:	899e      	ldrh	r6, [r3, #12]
   1378e:	ea22 0201 	bic.w	r2, r2, r1
   13792:	eba0 000e 	sub.w	r0, r0, lr
   13796:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1379a:	685c      	ldr	r4, [r3, #4]
   1379c:	2e00      	cmp	r6, #0
   1379e:	d0a8      	beq.n	136f2 <mem_alloc.constprop.4+0xbe>
   137a0:	887a      	ldrh	r2, [r7, #2]
   137a2:	4282      	cmp	r2, r0
   137a4:	d811      	bhi.n	137ca <mem_alloc.constprop.4+0x196>
   137a6:	2100      	movs	r1, #0
   137a8:	1d3b      	adds	r3, r7, #4
   137aa:	e003      	b.n	137b4 <mem_alloc.constprop.4+0x180>
   137ac:	885a      	ldrh	r2, [r3, #2]
   137ae:	3304      	adds	r3, #4
   137b0:	4282      	cmp	r2, r0
   137b2:	d80a      	bhi.n	137ca <mem_alloc.constprop.4+0x196>
   137b4:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   137b8:	3101      	adds	r1, #1
   137ba:	428e      	cmp	r6, r1
   137bc:	eba0 0002 	sub.w	r0, r0, r2
   137c0:	fb02 4405 	mla	r4, r2, r5, r4
   137c4:	461f      	mov	r7, r3
   137c6:	d1f1      	bne.n	137ac <mem_alloc.constprop.4+0x178>
   137c8:	e793      	b.n	136f2 <mem_alloc.constprop.4+0xbe>
   137ca:	883b      	ldrh	r3, [r7, #0]
   137cc:	fb00 4003 	mla	r0, r0, r3, r4
   137d0:	b003      	add	sp, #12
   137d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137d6:	4670      	mov	r0, lr
   137d8:	e7b1      	b.n	1373e <mem_alloc.constprop.4+0x10a>
   137da:	9a00      	ldr	r2, [sp, #0]
   137dc:	2a10      	cmp	r2, #16
   137de:	bf08      	it	eq
   137e0:	210f      	moveq	r1, #15
   137e2:	d08f      	beq.n	13704 <mem_alloc.constprop.4+0xd0>
   137e4:	e785      	b.n	136f2 <mem_alloc.constprop.4+0xbe>
   137e6:	bf00      	nop
   137e8:	20020554 	.word	0x20020554
   137ec:	20020518 	.word	0x20020518
   137f0:	200204d4 	.word	0x200204d4

000137f4 <nrf_mem_init>:
   137f4:	b570      	push	{r4, r5, r6, lr}
   137f6:	2200      	movs	r2, #0
   137f8:	2501      	movs	r5, #1
   137fa:	4833      	ldr	r0, [pc, #204]	; (138c8 <nrf_mem_init+0xd4>)
   137fc:	0951      	lsrs	r1, r2, #5
   137fe:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   13802:	f002 031f 	and.w	r3, r2, #31
   13806:	fa05 f303 	lsl.w	r3, r5, r3
   1380a:	3201      	adds	r2, #1
   1380c:	4323      	orrs	r3, r4
   1380e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   13812:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   13816:	d1f1      	bne.n	137fc <nrf_mem_init+0x8>
   13818:	2400      	movs	r4, #0
   1381a:	4b2c      	ldr	r3, [pc, #176]	; (138cc <nrf_mem_init+0xd8>)
   1381c:	4621      	mov	r1, r4
   1381e:	223c      	movs	r2, #60	; 0x3c
   13820:	482b      	ldr	r0, [pc, #172]	; (138d0 <nrf_mem_init+0xdc>)
   13822:	601c      	str	r4, [r3, #0]
   13824:	f009 ff41 	bl	1d6aa <memset>
   13828:	2110      	movs	r1, #16
   1382a:	2205      	movs	r2, #5
   1382c:	4b29      	ldr	r3, [pc, #164]	; (138d4 <nrf_mem_init+0xe0>)
   1382e:	4e2a      	ldr	r6, [pc, #168]	; (138d8 <nrf_mem_init+0xe4>)
   13830:	e9c3 4400 	strd	r4, r4, [r3]
   13834:	60d9      	str	r1, [r3, #12]
   13836:	6159      	str	r1, [r3, #20]
   13838:	61d9      	str	r1, [r3, #28]
   1383a:	6259      	str	r1, [r3, #36]	; 0x24
   1383c:	62d9      	str	r1, [r3, #44]	; 0x2c
   1383e:	6359      	str	r1, [r3, #52]	; 0x34
   13840:	63d9      	str	r1, [r3, #60]	; 0x3c
   13842:	6459      	str	r1, [r3, #68]	; 0x44
   13844:	64d9      	str	r1, [r3, #76]	; 0x4c
   13846:	6559      	str	r1, [r3, #84]	; 0x54
   13848:	65d9      	str	r1, [r3, #92]	; 0x5c
   1384a:	6659      	str	r1, [r3, #100]	; 0x64
   1384c:	66d9      	str	r1, [r3, #108]	; 0x6c
   1384e:	6759      	str	r1, [r3, #116]	; 0x74
   13850:	67d9      	str	r1, [r3, #124]	; 0x7c
   13852:	609a      	str	r2, [r3, #8]
   13854:	611a      	str	r2, [r3, #16]
   13856:	619a      	str	r2, [r3, #24]
   13858:	621a      	str	r2, [r3, #32]
   1385a:	629a      	str	r2, [r3, #40]	; 0x28
   1385c:	631a      	str	r2, [r3, #48]	; 0x30
   1385e:	639a      	str	r2, [r3, #56]	; 0x38
   13860:	641a      	str	r2, [r3, #64]	; 0x40
   13862:	649a      	str	r2, [r3, #72]	; 0x48
   13864:	651a      	str	r2, [r3, #80]	; 0x50
   13866:	659a      	str	r2, [r3, #88]	; 0x58
   13868:	661a      	str	r2, [r3, #96]	; 0x60
   1386a:	669a      	str	r2, [r3, #104]	; 0x68
   1386c:	671a      	str	r2, [r3, #112]	; 0x70
   1386e:	679a      	str	r2, [r3, #120]	; 0x78
   13870:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   13874:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   13878:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1387c:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   13880:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   13884:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   13888:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1388c:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   13890:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   13894:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   13898:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1389c:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   138a0:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   138a4:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   138a8:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   138ac:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   138b0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   138b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   138b8:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   138bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   138c0:	4620      	mov	r0, r4
   138c2:	7035      	strb	r5, [r6, #0]
   138c4:	bd70      	pop	{r4, r5, r6, pc}
   138c6:	bf00      	nop
   138c8:	200204d4 	.word	0x200204d4
   138cc:	20020514 	.word	0x20020514
   138d0:	20020518 	.word	0x20020518
   138d4:	20020554 	.word	0x20020554
   138d8:	2002658d 	.word	0x2002658d

000138dc <nrf_mem_register>:
   138dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138e0:	4b87      	ldr	r3, [pc, #540]	; (13b00 <nrf_mem_register+0x224>)
   138e2:	b087      	sub	sp, #28
   138e4:	781b      	ldrb	r3, [r3, #0]
   138e6:	2b00      	cmp	r3, #0
   138e8:	f000 808c 	beq.w	13a04 <nrf_mem_register+0x128>
   138ec:	b328      	cbz	r0, 1393a <nrf_mem_register+0x5e>
   138ee:	b321      	cbz	r1, 1393a <nrf_mem_register+0x5e>
   138f0:	780b      	ldrb	r3, [r1, #0]
   138f2:	f8df 8218 	ldr.w	r8, [pc, #536]	; 13b0c <nrf_mem_register+0x230>
   138f6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   138fa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   138fe:	685b      	ldr	r3, [r3, #4]
   13900:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   13904:	4463      	add	r3, ip
   13906:	2b10      	cmp	r3, #16
   13908:	d811      	bhi.n	1392e <nrf_mem_register+0x52>
   1390a:	f04f 0a00 	mov.w	sl, #0
   1390e:	4689      	mov	r9, r1
   13910:	4b7c      	ldr	r3, [pc, #496]	; (13b04 <nrf_mem_register+0x228>)
   13912:	4f7d      	ldr	r7, [pc, #500]	; (13b08 <nrf_mem_register+0x22c>)
   13914:	681b      	ldr	r3, [r3, #0]
   13916:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1391a:	9300      	str	r3, [sp, #0]
   1391c:	68b9      	ldr	r1, [r7, #8]
   1391e:	b191      	cbz	r1, 13946 <nrf_mem_register+0x6a>
   13920:	f10a 0a01 	add.w	sl, sl, #1
   13924:	f1ba 0f05 	cmp.w	sl, #5
   13928:	f107 070c 	add.w	r7, r7, #12
   1392c:	d1f6      	bne.n	1391c <nrf_mem_register+0x40>
   1392e:	f248 1b07 	movw	fp, #33031	; 0x8107
   13932:	4658      	mov	r0, fp
   13934:	b007      	add	sp, #28
   13936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1393a:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1393e:	4658      	mov	r0, fp
   13940:	b007      	add	sp, #28
   13942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13946:	f1bc 0f00 	cmp.w	ip, #0
   1394a:	d061      	beq.n	13a10 <nrf_mem_register+0x134>
   1394c:	460d      	mov	r5, r1
   1394e:	460c      	mov	r4, r1
   13950:	f8d9 3010 	ldr.w	r3, [r9, #16]
   13954:	eb0e 0b03 	add.w	fp, lr, r3
   13958:	885a      	ldrh	r2, [r3, #2]
   1395a:	f833 6b04 	ldrh.w	r6, [r3], #4
   1395e:	4415      	add	r5, r2
   13960:	459b      	cmp	fp, r3
   13962:	fb02 4406 	mla	r4, r2, r6, r4
   13966:	d1f7      	bne.n	13958 <nrf_mem_register+0x7c>
   13968:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1396c:	42a3      	cmp	r3, r4
   1396e:	d3d7      	bcc.n	13920 <nrf_mem_register+0x44>
   13970:	9b00      	ldr	r3, [sp, #0]
   13972:	442b      	add	r3, r5
   13974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13978:	d2d2      	bcs.n	13920 <nrf_mem_register+0x44>
   1397a:	4c63      	ldr	r4, [pc, #396]	; (13b08 <nrf_mem_register+0x22c>)
   1397c:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   13980:	0092      	lsls	r2, r2, #2
   13982:	f8c0 a000 	str.w	sl, [r0]
   13986:	18a0      	adds	r0, r4, r2
   13988:	f844 9002 	str.w	r9, [r4, r2]
   1398c:	9a00      	ldr	r2, [sp, #0]
   1398e:	468b      	mov	fp, r1
   13990:	e9c0 2501 	strd	r2, r5, [r0, #4]
   13994:	f899 2001 	ldrb.w	r2, [r9, #1]
   13998:	485a      	ldr	r0, [pc, #360]	; (13b04 <nrf_mem_register+0x228>)
   1399a:	2a01      	cmp	r2, #1
   1399c:	6003      	str	r3, [r0, #0]
   1399e:	d0c8      	beq.n	13932 <nrf_mem_register+0x56>
   139a0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   139a4:	2b00      	cmp	r3, #0
   139a6:	d0c4      	beq.n	13932 <nrf_mem_register+0x56>
   139a8:	2500      	movs	r5, #0
   139aa:	f8cd 9004 	str.w	r9, [sp, #4]
   139ae:	f8cd a00c 	str.w	sl, [sp, #12]
   139b2:	f8cd b014 	str.w	fp, [sp, #20]
   139b6:	9b01      	ldr	r3, [sp, #4]
   139b8:	781f      	ldrb	r7, [r3, #0]
   139ba:	691a      	ldr	r2, [r3, #16]
   139bc:	013b      	lsls	r3, r7, #4
   139be:	eb03 0907 	add.w	r9, r3, r7
   139c2:	9300      	str	r3, [sp, #0]
   139c4:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   139c8:	6859      	ldr	r1, [r3, #4]
   139ca:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   139ce:	9102      	str	r1, [sp, #8]
   139d0:	bb39      	cbnz	r1, 13a22 <nrf_mem_register+0x146>
   139d2:	9a03      	ldr	r2, [sp, #12]
   139d4:	60dd      	str	r5, [r3, #12]
   139d6:	609a      	str	r2, [r3, #8]
   139d8:	9b00      	ldr	r3, [sp, #0]
   139da:	443b      	add	r3, r7
   139dc:	461f      	mov	r7, r3
   139de:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   139e2:	684b      	ldr	r3, [r1, #4]
   139e4:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   139e8:	3301      	adds	r3, #1
   139ea:	4294      	cmp	r4, r2
   139ec:	604b      	str	r3, [r1, #4]
   139ee:	d912      	bls.n	13a16 <nrf_mem_register+0x13a>
   139f0:	9b01      	ldr	r3, [sp, #4]
   139f2:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   139f6:	899b      	ldrh	r3, [r3, #12]
   139f8:	3501      	adds	r5, #1
   139fa:	429d      	cmp	r5, r3
   139fc:	d3db      	bcc.n	139b6 <nrf_mem_register+0xda>
   139fe:	f8dd b014 	ldr.w	fp, [sp, #20]
   13a02:	e796      	b.n	13932 <nrf_mem_register+0x56>
   13a04:	f248 1b08 	movw	fp, #33032	; 0x8108
   13a08:	4658      	mov	r0, fp
   13a0a:	b007      	add	sp, #28
   13a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a10:	9b00      	ldr	r3, [sp, #0]
   13a12:	4665      	mov	r5, ip
   13a14:	e7ae      	b.n	13974 <nrf_mem_register+0x98>
   13a16:	9b01      	ldr	r3, [sp, #4]
   13a18:	3501      	adds	r5, #1
   13a1a:	899b      	ldrh	r3, [r3, #12]
   13a1c:	42ab      	cmp	r3, r5
   13a1e:	d8ca      	bhi.n	139b6 <nrf_mem_register+0xda>
   13a20:	e7ed      	b.n	139fe <nrf_mem_register+0x122>
   13a22:	2600      	movs	r6, #0
   13a24:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   13a28:	9504      	str	r5, [sp, #16]
   13a2a:	eb06 000a 	add.w	r0, r6, sl
   13a2e:	eb09 0206 	add.w	r2, r9, r6
   13a32:	3201      	adds	r2, #1
   13a34:	3001      	adds	r0, #1
   13a36:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   13a3a:	0840      	lsrs	r0, r0, #1
   13a3c:	4d32      	ldr	r5, [pc, #200]	; (13b08 <nrf_mem_register+0x22c>)
   13a3e:	eb09 0100 	add.w	r1, r9, r0
   13a42:	eb09 030a 	add.w	r3, r9, sl
   13a46:	3101      	adds	r1, #1
   13a48:	3301      	adds	r3, #1
   13a4a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13a4e:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   13a52:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   13a56:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   13a5a:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   13a5e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   13a62:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   13a66:	f8db b010 	ldr.w	fp, [fp, #16]
   13a6a:	6852      	ldr	r2, [r2, #4]
   13a6c:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   13a70:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   13a74:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   13a78:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   13a7c:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   13a80:	f8de e010 	ldr.w	lr, [lr, #16]
   13a84:	6849      	ldr	r1, [r1, #4]
   13a86:	f8dc c010 	ldr.w	ip, [ip, #16]
   13a8a:	685b      	ldr	r3, [r3, #4]
   13a8c:	4294      	cmp	r4, r2
   13a8e:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   13a92:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   13a96:	d92d      	bls.n	13af4 <nrf_mem_register+0x218>
   13a98:	429c      	cmp	r4, r3
   13a9a:	d22d      	bcs.n	13af8 <nrf_mem_register+0x21c>
   13a9c:	428c      	cmp	r4, r1
   13a9e:	d924      	bls.n	13aea <nrf_mem_register+0x20e>
   13aa0:	1c46      	adds	r6, r0, #1
   13aa2:	45b2      	cmp	sl, r6
   13aa4:	d2c1      	bcs.n	13a2a <nrf_mem_register+0x14e>
   13aa6:	2610      	movs	r6, #16
   13aa8:	9d04      	ldr	r5, [sp, #16]
   13aaa:	9a02      	ldr	r2, [sp, #8]
   13aac:	42b2      	cmp	r2, r6
   13aae:	d911      	bls.n	13ad4 <nrf_mem_register+0x1f8>
   13ab0:	9b00      	ldr	r3, [sp, #0]
   13ab2:	443b      	add	r3, r7
   13ab4:	441a      	add	r2, r3
   13ab6:	4433      	add	r3, r6
   13ab8:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   13abc:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   13ac0:	2208      	movs	r2, #8
   13ac2:	4651      	mov	r1, sl
   13ac4:	eb0a 0002 	add.w	r0, sl, r2
   13ac8:	f1aa 0a08 	sub.w	sl, sl, #8
   13acc:	f009 fdc3 	bl	1d656 <memcpy>
   13ad0:	45d1      	cmp	r9, sl
   13ad2:	d1f5      	bne.n	13ac0 <nrf_mem_register+0x1e4>
   13ad4:	9b00      	ldr	r3, [sp, #0]
   13ad6:	9903      	ldr	r1, [sp, #12]
   13ad8:	443b      	add	r3, r7
   13ada:	4433      	add	r3, r6
   13adc:	3301      	adds	r3, #1
   13ade:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   13ae2:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   13ae6:	6055      	str	r5, [r2, #4]
   13ae8:	e776      	b.n	139d8 <nrf_mem_register+0xfc>
   13aea:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   13aee:	4556      	cmp	r6, sl
   13af0:	d99b      	bls.n	13a2a <nrf_mem_register+0x14e>
   13af2:	e7d8      	b.n	13aa6 <nrf_mem_register+0x1ca>
   13af4:	9d04      	ldr	r5, [sp, #16]
   13af6:	e7d8      	b.n	13aaa <nrf_mem_register+0x1ce>
   13af8:	9d04      	ldr	r5, [sp, #16]
   13afa:	f10a 0601 	add.w	r6, sl, #1
   13afe:	e7d4      	b.n	13aaa <nrf_mem_register+0x1ce>
   13b00:	2002658d 	.word	0x2002658d
   13b04:	20020514 	.word	0x20020514
   13b08:	20020518 	.word	0x20020518
   13b0c:	20020554 	.word	0x20020554

00013b10 <nrf_malloc>:
   13b10:	4b03      	ldr	r3, [pc, #12]	; (13b20 <nrf_malloc+0x10>)
   13b12:	781b      	ldrb	r3, [r3, #0]
   13b14:	b10b      	cbz	r3, 13b1a <nrf_malloc+0xa>
   13b16:	f7ff bd8d 	b.w	13634 <mem_alloc.constprop.4>
   13b1a:	4618      	mov	r0, r3
   13b1c:	4770      	bx	lr
   13b1e:	bf00      	nop
   13b20:	2002658d 	.word	0x2002658d

00013b24 <nrf_free>:
   13b24:	4b04      	ldr	r3, [pc, #16]	; (13b38 <nrf_free+0x14>)
   13b26:	781b      	ldrb	r3, [r3, #0]
   13b28:	b123      	cbz	r3, 13b34 <nrf_free+0x10>
   13b2a:	b118      	cbz	r0, 13b34 <nrf_free+0x10>
   13b2c:	4601      	mov	r1, r0
   13b2e:	2000      	movs	r0, #0
   13b30:	f7ff bc30 	b.w	13394 <mem_free>
   13b34:	4770      	bx	lr
   13b36:	bf00      	nop
   13b38:	2002658d 	.word	0x2002658d

00013b3c <nrf_shared_malloc>:
   13b3c:	4b03      	ldr	r3, [pc, #12]	; (13b4c <nrf_shared_malloc+0x10>)
   13b3e:	781b      	ldrb	r3, [r3, #0]
   13b40:	b10b      	cbz	r3, 13b46 <nrf_shared_malloc+0xa>
   13b42:	f7ff bc93 	b.w	1346c <mem_alloc.constprop.5>
   13b46:	4618      	mov	r0, r3
   13b48:	4770      	bx	lr
   13b4a:	bf00      	nop
   13b4c:	2002658d 	.word	0x2002658d

00013b50 <nrf_shared_free>:
   13b50:	4b04      	ldr	r3, [pc, #16]	; (13b64 <nrf_shared_free+0x14>)
   13b52:	781b      	ldrb	r3, [r3, #0]
   13b54:	b123      	cbz	r3, 13b60 <nrf_shared_free+0x10>
   13b56:	b118      	cbz	r0, 13b60 <nrf_shared_free+0x10>
   13b58:	4601      	mov	r1, r0
   13b5a:	2001      	movs	r0, #1
   13b5c:	f7ff bc1a 	b.w	13394 <mem_free>
   13b60:	4770      	bx	lr
   13b62:	bf00      	nop
   13b64:	2002658d 	.word	0x2002658d

00013b68 <ip_client_event_handler>:
   13b68:	f850 1b08 	ldr.w	r1, [r0], #8
   13b6c:	0c09      	lsrs	r1, r1, #16
   13b6e:	f004 bd23 	b.w	185b8 <rpc_ip_event_handler>
   13b72:	bf00      	nop

00013b74 <rpc_ip_client_init>:
   13b74:	4801      	ldr	r0, [pc, #4]	; (13b7c <rpc_ip_client_init+0x8>)
   13b76:	f005 ba01 	b.w	18f7c <rpc_client_register>
   13b7a:	bf00      	nop
   13b7c:	0001f610 	.word	0x0001f610

00013b80 <rpc_ip_client_request_alloc>:
   13b80:	2300      	movs	r3, #0
   13b82:	b510      	push	{r4, lr}
   13b84:	b082      	sub	sp, #8
   13b86:	9301      	str	r3, [sp, #4]
   13b88:	b158      	cbz	r0, 13ba2 <rpc_ip_client_request_alloc+0x22>
   13b8a:	4604      	mov	r4, r0
   13b8c:	aa01      	add	r2, sp, #4
   13b8e:	2004      	movs	r0, #4
   13b90:	f005 fc2c 	bl	193ec <rpc_message_alloc>
   13b94:	b918      	cbnz	r0, 13b9e <rpc_ip_client_request_alloc+0x1e>
   13b96:	9b01      	ldr	r3, [sp, #4]
   13b98:	b10b      	cbz	r3, 13b9e <rpc_ip_client_request_alloc+0x1e>
   13b9a:	3308      	adds	r3, #8
   13b9c:	6023      	str	r3, [r4, #0]
   13b9e:	b002      	add	sp, #8
   13ba0:	bd10      	pop	{r4, pc}
   13ba2:	2007      	movs	r0, #7
   13ba4:	b002      	add	sp, #8
   13ba6:	bd10      	pop	{r4, pc}

00013ba8 <rpc_ip_client_request_send>:
   13ba8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   13bac:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   13bb0:	d10b      	bne.n	13bca <rpc_ip_client_request_send+0x22>
   13bb2:	b160      	cbz	r0, 13bce <rpc_ip_client_request_send+0x26>
   13bb4:	4603      	mov	r3, r0
   13bb6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   13bba:	2004      	movs	r0, #4
   13bbc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13bc0:	f843 1d08 	str.w	r1, [r3, #-8]!
   13bc4:	4619      	mov	r1, r3
   13bc6:	f005 bbf9 	b.w	193bc <rpc_message_send>
   13bca:	200f      	movs	r0, #15
   13bcc:	4770      	bx	lr
   13bce:	2007      	movs	r0, #7
   13bd0:	4770      	bx	lr
   13bd2:	bf00      	nop

00013bd4 <rpc_ip_client_message_free>:
   13bd4:	b120      	cbz	r0, 13be0 <rpc_ip_client_message_free+0xc>
   13bd6:	f1a0 0108 	sub.w	r1, r0, #8
   13bda:	2004      	movs	r0, #4
   13bdc:	f005 bc38 	b.w	19450 <rpc_message_free>
   13be0:	2007      	movs	r0, #7
   13be2:	4770      	bx	lr

00013be4 <rpc_ip_client_data_free>:
   13be4:	b118      	cbz	r0, 13bee <rpc_ip_client_data_free+0xa>
   13be6:	4601      	mov	r1, r0
   13be8:	2004      	movs	r0, #4
   13bea:	f005 bd43 	b.w	19674 <rpc_message_data_free>
   13bee:	2007      	movs	r0, #7
   13bf0:	4770      	bx	lr
   13bf2:	bf00      	nop

00013bf4 <secure_client_socket>:
   13bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13bf8:	460c      	mov	r4, r1
   13bfa:	680b      	ldr	r3, [r1, #0]
   13bfc:	6989      	ldr	r1, [r1, #24]
   13bfe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13c02:	6023      	str	r3, [r4, #0]
   13c04:	6822      	ldr	r2, [r4, #0]
   13c06:	2300      	movs	r3, #0
   13c08:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   13c0c:	6022      	str	r2, [r4, #0]
   13c0e:	f247 0281 	movw	r2, #28801	; 0x7081
   13c12:	6827      	ldr	r7, [r4, #0]
   13c14:	4606      	mov	r6, r0
   13c16:	f003 fc2d 	bl	17474 <ip_interface_request_create>
   13c1a:	2800      	cmp	r0, #0
   13c1c:	d03b      	beq.n	13c96 <secure_client_socket+0xa2>
   13c1e:	4605      	mov	r5, r0
   13c20:	4b28      	ldr	r3, [pc, #160]	; (13cc4 <secure_client_socket+0xd0>)
   13c22:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
   13c26:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13c2a:	2224      	movs	r2, #36	; 0x24
   13c2c:	3014      	adds	r0, #20
   13c2e:	f009 fd12 	bl	1d656 <memcpy>
   13c32:	68ab      	ldr	r3, [r5, #8]
   13c34:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13cc8 <secure_client_socket+0xd4>
   13c38:	3324      	adds	r3, #36	; 0x24
   13c3a:	60ab      	str	r3, [r5, #8]
   13c3c:	6823      	ldr	r3, [r4, #0]
   13c3e:	4629      	mov	r1, r5
   13c40:	ea03 0308 	and.w	r3, r3, r8
   13c44:	f043 030a 	orr.w	r3, r3, #10
   13c48:	6023      	str	r3, [r4, #0]
   13c4a:	f247 0281 	movw	r2, #28801	; 0x7081
   13c4e:	463b      	mov	r3, r7
   13c50:	4620      	mov	r0, r4
   13c52:	f003 fc2f 	bl	174b4 <ip_interface_request_send>
   13c56:	b960      	cbnz	r0, 13c72 <secure_client_socket+0x7e>
   13c58:	6823      	ldr	r3, [r4, #0]
   13c5a:	00db      	lsls	r3, r3, #3
   13c5c:	d40b      	bmi.n	13c76 <secure_client_socket+0x82>
   13c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c66:	210b      	movs	r1, #11
   13c68:	4630      	mov	r0, r6
   13c6a:	f003 fc37 	bl	174dc <ip_interface_wait>
   13c6e:	b128      	cbz	r0, 13c7c <secure_client_socket+0x88>
   13c70:	6027      	str	r7, [r4, #0]
   13c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c76:	2073      	movs	r0, #115	; 0x73
   13c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   13c80:	4630      	mov	r0, r6
   13c82:	4611      	mov	r1, r2
   13c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c88:	f003 fc28 	bl	174dc <ip_interface_wait>
   13c8c:	b130      	cbz	r0, 13c9c <secure_client_socket+0xa8>
   13c8e:	2873      	cmp	r0, #115	; 0x73
   13c90:	d0ef      	beq.n	13c72 <secure_client_socket+0x7e>
   13c92:	6027      	str	r7, [r4, #0]
   13c94:	e7ed      	b.n	13c72 <secure_client_socket+0x7e>
   13c96:	200c      	movs	r0, #12
   13c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c9c:	6823      	ldr	r3, [r4, #0]
   13c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   13ca2:	6023      	str	r3, [r4, #0]
   13ca4:	6823      	ldr	r3, [r4, #0]
   13ca6:	ea03 0808 	and.w	r8, r3, r8
   13caa:	f048 030c 	orr.w	r3, r8, #12
   13cae:	6023      	str	r3, [r4, #0]
   13cb0:	6823      	ldr	r3, [r4, #0]
   13cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13cb6:	6023      	str	r3, [r4, #0]
   13cb8:	6823      	ldr	r3, [r4, #0]
   13cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13cbe:	6023      	str	r3, [r4, #0]
   13cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cc4:	20020664 	.word	0x20020664
   13cc8:	ffff0000 	.word	0xffff0000

00013ccc <tls_interface_init>:
   13ccc:	2000      	movs	r0, #0
   13cce:	4770      	bx	lr

00013cd0 <tls_interface_open>:
   13cd0:	b538      	push	{r3, r4, r5, lr}
   13cd2:	f020 0308 	bic.w	r3, r0, #8
   13cd6:	2b02      	cmp	r3, #2
   13cd8:	d006      	beq.n	13ce8 <tls_interface_open+0x18>
   13cda:	202f      	movs	r0, #47	; 0x2f
   13cdc:	f7fd fe72 	bl	119c4 <bsd_os_errno_set>
   13ce0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13ce4:	4628      	mov	r0, r5
   13ce6:	bd38      	pop	{r3, r4, r5, pc}
   13ce8:	4614      	mov	r4, r2
   13cea:	1e4a      	subs	r2, r1, #1
   13cec:	2a01      	cmp	r2, #1
   13cee:	d828      	bhi.n	13d42 <tls_interface_open+0x72>
   13cf0:	bb14      	cbnz	r4, 13d38 <tls_interface_open+0x68>
   13cf2:	2901      	cmp	r1, #1
   13cf4:	bf06      	itte	eq
   13cf6:	2301      	moveq	r3, #1
   13cf8:	f44f 7482 	moveq.w	r4, #260	; 0x104
   13cfc:	f44f 7487 	movne.w	r4, #270	; 0x10e
   13d00:	461a      	mov	r2, r3
   13d02:	f003 fc17 	bl	17534 <ip_interface_open>
   13d06:	1e05      	subs	r5, r0, #0
   13d08:	db26      	blt.n	13d58 <tls_interface_open+0x88>
   13d0a:	4b15      	ldr	r3, [pc, #84]	; (13d60 <tls_interface_open+0x90>)
   13d0c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   13d10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d14:	2224      	movs	r2, #36	; 0x24
   13d16:	4913      	ldr	r1, [pc, #76]	; (13d64 <tls_interface_open+0x94>)
   13d18:	f009 fc9d 	bl	1d656 <memcpy>
   13d1c:	4628      	mov	r0, r5
   13d1e:	f004 ffcf 	bl	18cc0 <interface_socket_from_handle_get>
   13d22:	6803      	ldr	r3, [r0, #0]
   13d24:	6144      	str	r4, [r0, #20]
   13d26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13d2a:	6003      	str	r3, [r0, #0]
   13d2c:	6803      	ldr	r3, [r0, #0]
   13d2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13d32:	6003      	str	r3, [r0, #0]
   13d34:	4628      	mov	r0, r5
   13d36:	bd38      	pop	{r3, r4, r5, pc}
   13d38:	2901      	cmp	r1, #1
   13d3a:	d008      	beq.n	13d4e <tls_interface_open+0x7e>
   13d3c:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   13d40:	d0de      	beq.n	13d00 <tls_interface_open+0x30>
   13d42:	2016      	movs	r0, #22
   13d44:	f7fd fe3e 	bl	119c4 <bsd_os_errno_set>
   13d48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13d4c:	e7ca      	b.n	13ce4 <tls_interface_open+0x14>
   13d4e:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   13d52:	d1f6      	bne.n	13d42 <tls_interface_open+0x72>
   13d54:	460b      	mov	r3, r1
   13d56:	e7d3      	b.n	13d00 <tls_interface_open+0x30>
   13d58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13d5c:	e7c2      	b.n	13ce4 <tls_interface_open+0x14>
   13d5e:	bf00      	nop
   13d60:	20020664 	.word	0x20020664
   13d64:	0001f620 	.word	0x0001f620

00013d68 <tls_interface_close>:
   13d68:	b510      	push	{r4, lr}
   13d6a:	4604      	mov	r4, r0
   13d6c:	f004 ffa8 	bl	18cc0 <interface_socket_from_handle_get>
   13d70:	b120      	cbz	r0, 13d7c <tls_interface_close+0x14>
   13d72:	4620      	mov	r0, r4
   13d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d78:	f003 bc88 	b.w	1768c <ip_interface_close>
   13d7c:	2009      	movs	r0, #9
   13d7e:	f7fd fe21 	bl	119c4 <bsd_os_errno_set>
   13d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d86:	bd10      	pop	{r4, pc}

00013d88 <tls_interface_sendto>:
   13d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d8c:	460d      	mov	r5, r1
   13d8e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13d92:	4616      	mov	r6, r2
   13d94:	461f      	mov	r7, r3
   13d96:	4604      	mov	r4, r0
   13d98:	f004 ff92 	bl	18cc0 <interface_socket_from_handle_get>
   13d9c:	2800      	cmp	r0, #0
   13d9e:	d03b      	beq.n	13e18 <tls_interface_sendto+0x90>
   13da0:	6803      	ldr	r3, [r0, #0]
   13da2:	b29b      	uxth	r3, r3
   13da4:	2b0c      	cmp	r3, #12
   13da6:	d039      	beq.n	13e1c <tls_interface_sendto+0x94>
   13da8:	6803      	ldr	r3, [r0, #0]
   13daa:	b29b      	uxth	r3, r3
   13dac:	2b0b      	cmp	r3, #11
   13dae:	d111      	bne.n	13dd4 <tls_interface_sendto+0x4c>
   13db0:	4b20      	ldr	r3, [pc, #128]	; (13e34 <tls_interface_sendto+0xac>)
   13db2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   13db6:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   13dba:	2b02      	cmp	r3, #2
   13dbc:	d038      	beq.n	13e30 <tls_interface_sendto+0xa8>
   13dbe:	6903      	ldr	r3, [r0, #16]
   13dc0:	2b01      	cmp	r3, #1
   13dc2:	bf14      	ite	ne
   13dc4:	2039      	movne	r0, #57	; 0x39
   13dc6:	202a      	moveq	r0, #42	; 0x2a
   13dc8:	f7fd fdfc 	bl	119c4 <bsd_os_errno_set>
   13dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13dd4:	6903      	ldr	r3, [r0, #16]
   13dd6:	2b01      	cmp	r3, #1
   13dd8:	d00b      	beq.n	13df2 <tls_interface_sendto+0x6a>
   13dda:	2b02      	cmp	r3, #2
   13ddc:	d001      	beq.n	13de2 <tls_interface_sendto+0x5a>
   13dde:	2039      	movs	r0, #57	; 0x39
   13de0:	e7f2      	b.n	13dc8 <tls_interface_sendto+0x40>
   13de2:	6803      	ldr	r3, [r0, #0]
   13de4:	b29b      	uxth	r3, r3
   13de6:	2b02      	cmp	r3, #2
   13de8:	d007      	beq.n	13dfa <tls_interface_sendto+0x72>
   13dea:	6803      	ldr	r3, [r0, #0]
   13dec:	b29b      	uxth	r3, r3
   13dee:	2b04      	cmp	r3, #4
   13df0:	d003      	beq.n	13dfa <tls_interface_sendto+0x72>
   13df2:	6803      	ldr	r3, [r0, #0]
   13df4:	b29b      	uxth	r3, r3
   13df6:	2b05      	cmp	r3, #5
   13df8:	d1f1      	bne.n	13dde <tls_interface_sendto+0x56>
   13dfa:	4b0e      	ldr	r3, [pc, #56]	; (13e34 <tls_interface_sendto+0xac>)
   13dfc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13e00:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13e04:	2b02      	cmp	r3, #2
   13e06:	d1ea      	bne.n	13dde <tls_interface_sendto+0x56>
   13e08:	4601      	mov	r1, r0
   13e0a:	4620      	mov	r0, r4
   13e0c:	f7ff fef2 	bl	13bf4 <secure_client_socket>
   13e10:	2800      	cmp	r0, #0
   13e12:	d003      	beq.n	13e1c <tls_interface_sendto+0x94>
   13e14:	dcd8      	bgt.n	13dc8 <tls_interface_sendto+0x40>
   13e16:	e7d9      	b.n	13dcc <tls_interface_sendto+0x44>
   13e18:	2009      	movs	r0, #9
   13e1a:	e7d5      	b.n	13dc8 <tls_interface_sendto+0x40>
   13e1c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13e20:	463b      	mov	r3, r7
   13e22:	4632      	mov	r2, r6
   13e24:	4629      	mov	r1, r5
   13e26:	4620      	mov	r0, r4
   13e28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e2c:	f003 bc9e 	b.w	1776c <ip_interface_sendto>
   13e30:	2023      	movs	r0, #35	; 0x23
   13e32:	e7c9      	b.n	13dc8 <tls_interface_sendto+0x40>
   13e34:	20020664 	.word	0x20020664

00013e38 <tls_interface_recvfrom>:
   13e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e3c:	460d      	mov	r5, r1
   13e3e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13e42:	4616      	mov	r6, r2
   13e44:	461f      	mov	r7, r3
   13e46:	4604      	mov	r4, r0
   13e48:	f004 ff3a 	bl	18cc0 <interface_socket_from_handle_get>
   13e4c:	2800      	cmp	r0, #0
   13e4e:	d038      	beq.n	13ec2 <tls_interface_recvfrom+0x8a>
   13e50:	6803      	ldr	r3, [r0, #0]
   13e52:	b29b      	uxth	r3, r3
   13e54:	2b0c      	cmp	r3, #12
   13e56:	d00f      	beq.n	13e78 <tls_interface_recvfrom+0x40>
   13e58:	6803      	ldr	r3, [r0, #0]
   13e5a:	b29b      	uxth	r3, r3
   13e5c:	2b0d      	cmp	r3, #13
   13e5e:	d00b      	beq.n	13e78 <tls_interface_recvfrom+0x40>
   13e60:	6903      	ldr	r3, [r0, #16]
   13e62:	2b01      	cmp	r3, #1
   13e64:	d01a      	beq.n	13e9c <tls_interface_recvfrom+0x64>
   13e66:	2b02      	cmp	r3, #2
   13e68:	d010      	beq.n	13e8c <tls_interface_recvfrom+0x54>
   13e6a:	2023      	movs	r0, #35	; 0x23
   13e6c:	f7fd fdaa 	bl	119c4 <bsd_os_errno_set>
   13e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e78:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13e7c:	463b      	mov	r3, r7
   13e7e:	4632      	mov	r2, r6
   13e80:	4629      	mov	r1, r5
   13e82:	4620      	mov	r0, r4
   13e84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e88:	f003 bdaa 	b.w	179e0 <ip_interface_recvfrom>
   13e8c:	6803      	ldr	r3, [r0, #0]
   13e8e:	b29b      	uxth	r3, r3
   13e90:	2b02      	cmp	r3, #2
   13e92:	d007      	beq.n	13ea4 <tls_interface_recvfrom+0x6c>
   13e94:	6803      	ldr	r3, [r0, #0]
   13e96:	b29b      	uxth	r3, r3
   13e98:	2b04      	cmp	r3, #4
   13e9a:	d003      	beq.n	13ea4 <tls_interface_recvfrom+0x6c>
   13e9c:	6803      	ldr	r3, [r0, #0]
   13e9e:	b29b      	uxth	r3, r3
   13ea0:	2b05      	cmp	r3, #5
   13ea2:	d1e2      	bne.n	13e6a <tls_interface_recvfrom+0x32>
   13ea4:	4b08      	ldr	r3, [pc, #32]	; (13ec8 <tls_interface_recvfrom+0x90>)
   13ea6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13eaa:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13eae:	2b02      	cmp	r3, #2
   13eb0:	d1db      	bne.n	13e6a <tls_interface_recvfrom+0x32>
   13eb2:	4601      	mov	r1, r0
   13eb4:	4620      	mov	r0, r4
   13eb6:	f7ff fe9d 	bl	13bf4 <secure_client_socket>
   13eba:	2800      	cmp	r0, #0
   13ebc:	d0dc      	beq.n	13e78 <tls_interface_recvfrom+0x40>
   13ebe:	dcd5      	bgt.n	13e6c <tls_interface_recvfrom+0x34>
   13ec0:	e7d6      	b.n	13e70 <tls_interface_recvfrom+0x38>
   13ec2:	2009      	movs	r0, #9
   13ec4:	e7d2      	b.n	13e6c <tls_interface_recvfrom+0x34>
   13ec6:	bf00      	nop
   13ec8:	20020664 	.word	0x20020664

00013ecc <tls_interface_bind>:
   13ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ed0:	460c      	mov	r4, r1
   13ed2:	4617      	mov	r7, r2
   13ed4:	4606      	mov	r6, r0
   13ed6:	f004 fef3 	bl	18cc0 <interface_socket_from_handle_get>
   13eda:	2800      	cmp	r0, #0
   13edc:	d04c      	beq.n	13f78 <tls_interface_bind+0xac>
   13ede:	6803      	ldr	r3, [r0, #0]
   13ee0:	4605      	mov	r5, r0
   13ee2:	b29b      	uxth	r3, r3
   13ee4:	2b02      	cmp	r3, #2
   13ee6:	d150      	bne.n	13f8a <tls_interface_bind+0xbe>
   13ee8:	4621      	mov	r1, r4
   13eea:	463a      	mov	r2, r7
   13eec:	4630      	mov	r0, r6
   13eee:	f003 ff4d 	bl	17d8c <ip_interface_bind>
   13ef2:	4604      	mov	r4, r0
   13ef4:	b120      	cbz	r0, 13f00 <tls_interface_bind+0x34>
   13ef6:	2c00      	cmp	r4, #0
   13ef8:	dc3f      	bgt.n	13f7a <tls_interface_bind+0xae>
   13efa:	4620      	mov	r0, r4
   13efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13f00:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
   13f04:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13f9c <tls_interface_bind+0xd0>
   13f08:	00bf      	lsls	r7, r7, #2
   13f0a:	f818 3007 	ldrb.w	r3, [r8, r7]
   13f0e:	2b01      	cmp	r3, #1
   13f10:	d1f3      	bne.n	13efa <tls_interface_bind+0x2e>
   13f12:	4603      	mov	r3, r0
   13f14:	f247 0281 	movw	r2, #28801	; 0x7081
   13f18:	69a9      	ldr	r1, [r5, #24]
   13f1a:	4630      	mov	r0, r6
   13f1c:	f003 faaa 	bl	17474 <ip_interface_request_create>
   13f20:	4681      	mov	r9, r0
   13f22:	b3b0      	cbz	r0, 13f92 <tls_interface_bind+0xc6>
   13f24:	eb08 0107 	add.w	r1, r8, r7
   13f28:	2224      	movs	r2, #36	; 0x24
   13f2a:	3014      	adds	r0, #20
   13f2c:	f009 fb93 	bl	1d656 <memcpy>
   13f30:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13f34:	4649      	mov	r1, r9
   13f36:	3324      	adds	r3, #36	; 0x24
   13f38:	f8c9 3008 	str.w	r3, [r9, #8]
   13f3c:	682a      	ldr	r2, [r5, #0]
   13f3e:	2304      	movs	r3, #4
   13f40:	0c12      	lsrs	r2, r2, #16
   13f42:	0412      	lsls	r2, r2, #16
   13f44:	f042 020a 	orr.w	r2, r2, #10
   13f48:	602a      	str	r2, [r5, #0]
   13f4a:	4628      	mov	r0, r5
   13f4c:	f247 0281 	movw	r2, #28801	; 0x7081
   13f50:	f003 fab0 	bl	174b4 <ip_interface_request_send>
   13f54:	b9f8      	cbnz	r0, 13f96 <tls_interface_bind+0xca>
   13f56:	682b      	ldr	r3, [r5, #0]
   13f58:	00db      	lsls	r3, r3, #3
   13f5a:	d418      	bmi.n	13f8e <tls_interface_bind+0xc2>
   13f5c:	4630      	mov	r0, r6
   13f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13f66:	210b      	movs	r1, #11
   13f68:	f003 fab8 	bl	174dc <ip_interface_wait>
   13f6c:	2800      	cmp	r0, #0
   13f6e:	d0c4      	beq.n	13efa <tls_interface_bind+0x2e>
   13f70:	2304      	movs	r3, #4
   13f72:	4604      	mov	r4, r0
   13f74:	602b      	str	r3, [r5, #0]
   13f76:	e7be      	b.n	13ef6 <tls_interface_bind+0x2a>
   13f78:	2409      	movs	r4, #9
   13f7a:	4620      	mov	r0, r4
   13f7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13f80:	f7fd fd20 	bl	119c4 <bsd_os_errno_set>
   13f84:	4620      	mov	r0, r4
   13f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13f8a:	242d      	movs	r4, #45	; 0x2d
   13f8c:	e7f5      	b.n	13f7a <tls_interface_bind+0xae>
   13f8e:	2473      	movs	r4, #115	; 0x73
   13f90:	e7f3      	b.n	13f7a <tls_interface_bind+0xae>
   13f92:	240c      	movs	r4, #12
   13f94:	e7f1      	b.n	13f7a <tls_interface_bind+0xae>
   13f96:	4604      	mov	r4, r0
   13f98:	e7ad      	b.n	13ef6 <tls_interface_bind+0x2a>
   13f9a:	bf00      	nop
   13f9c:	20020664 	.word	0x20020664

00013fa0 <tls_interface_connect>:
   13fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13fa2:	460e      	mov	r6, r1
   13fa4:	4617      	mov	r7, r2
   13fa6:	4604      	mov	r4, r0
   13fa8:	f004 fe8a 	bl	18cc0 <interface_socket_from_handle_get>
   13fac:	b1e8      	cbz	r0, 13fea <tls_interface_connect+0x4a>
   13fae:	4b13      	ldr	r3, [pc, #76]	; (13ffc <tls_interface_connect+0x5c>)
   13fb0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13fb4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13fb8:	2b02      	cmp	r3, #2
   13fba:	d11c      	bne.n	13ff6 <tls_interface_connect+0x56>
   13fbc:	6803      	ldr	r3, [r0, #0]
   13fbe:	4605      	mov	r5, r0
   13fc0:	b29b      	uxth	r3, r3
   13fc2:	2b02      	cmp	r3, #2
   13fc4:	d003      	beq.n	13fce <tls_interface_connect+0x2e>
   13fc6:	6803      	ldr	r3, [r0, #0]
   13fc8:	b29b      	uxth	r3, r3
   13fca:	2b04      	cmp	r3, #4
   13fcc:	d113      	bne.n	13ff6 <tls_interface_connect+0x56>
   13fce:	463a      	mov	r2, r7
   13fd0:	4631      	mov	r1, r6
   13fd2:	4620      	mov	r0, r4
   13fd4:	f003 fe30 	bl	17c38 <ip_interface_connect>
   13fd8:	b110      	cbz	r0, 13fe0 <tls_interface_connect+0x40>
   13fda:	2800      	cmp	r0, #0
   13fdc:	dc06      	bgt.n	13fec <tls_interface_connect+0x4c>
   13fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fe0:	4629      	mov	r1, r5
   13fe2:	4620      	mov	r0, r4
   13fe4:	f7ff fe06 	bl	13bf4 <secure_client_socket>
   13fe8:	e7f7      	b.n	13fda <tls_interface_connect+0x3a>
   13fea:	2009      	movs	r0, #9
   13fec:	f7fd fcea 	bl	119c4 <bsd_os_errno_set>
   13ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ff6:	202d      	movs	r0, #45	; 0x2d
   13ff8:	e7f8      	b.n	13fec <tls_interface_connect+0x4c>
   13ffa:	bf00      	nop
   13ffc:	20020664 	.word	0x20020664

00014000 <tls_interface_listen>:
   14000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14004:	460f      	mov	r7, r1
   14006:	4606      	mov	r6, r0
   14008:	f004 fe5a 	bl	18cc0 <interface_socket_from_handle_get>
   1400c:	2800      	cmp	r0, #0
   1400e:	d06b      	beq.n	140e8 <tls_interface_listen+0xe8>
   14010:	6903      	ldr	r3, [r0, #16]
   14012:	4604      	mov	r4, r0
   14014:	2b01      	cmp	r3, #1
   14016:	d165      	bne.n	140e4 <tls_interface_listen+0xe4>
   14018:	6803      	ldr	r3, [r0, #0]
   1401a:	b29b      	uxth	r3, r3
   1401c:	2b04      	cmp	r3, #4
   1401e:	d056      	beq.n	140ce <tls_interface_listen+0xce>
   14020:	6823      	ldr	r3, [r4, #0]
   14022:	b29b      	uxth	r3, r3
   14024:	2b0b      	cmp	r3, #11
   14026:	d15d      	bne.n	140e4 <tls_interface_listen+0xe4>
   14028:	00f3      	lsls	r3, r6, #3
   1402a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 140ec <tls_interface_listen+0xec>
   1402e:	199a      	adds	r2, r3, r6
   14030:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   14034:	2a01      	cmp	r2, #1
   14036:	d155      	bne.n	140e4 <tls_interface_listen+0xe4>
   14038:	2201      	movs	r2, #1
   1403a:	4433      	add	r3, r6
   1403c:	009d      	lsls	r5, r3, #2
   1403e:	f809 2005 	strb.w	r2, [r9, r5]
   14042:	69a1      	ldr	r1, [r4, #24]
   14044:	2300      	movs	r3, #0
   14046:	f247 0281 	movw	r2, #28801	; 0x7081
   1404a:	4630      	mov	r0, r6
   1404c:	f8d4 8000 	ldr.w	r8, [r4]
   14050:	f003 fa10 	bl	17474 <ip_interface_request_create>
   14054:	4682      	mov	sl, r0
   14056:	2800      	cmp	r0, #0
   14058:	d042      	beq.n	140e0 <tls_interface_listen+0xe0>
   1405a:	eb09 0105 	add.w	r1, r9, r5
   1405e:	2224      	movs	r2, #36	; 0x24
   14060:	3014      	adds	r0, #20
   14062:	f009 faf8 	bl	1d656 <memcpy>
   14066:	f8da 3008 	ldr.w	r3, [sl, #8]
   1406a:	4651      	mov	r1, sl
   1406c:	3324      	adds	r3, #36	; 0x24
   1406e:	f8ca 3008 	str.w	r3, [sl, #8]
   14072:	6822      	ldr	r2, [r4, #0]
   14074:	4643      	mov	r3, r8
   14076:	0c12      	lsrs	r2, r2, #16
   14078:	0412      	lsls	r2, r2, #16
   1407a:	f042 020a 	orr.w	r2, r2, #10
   1407e:	6022      	str	r2, [r4, #0]
   14080:	4620      	mov	r0, r4
   14082:	f247 0281 	movw	r2, #28801	; 0x7081
   14086:	f003 fa15 	bl	174b4 <ip_interface_request_send>
   1408a:	b9e0      	cbnz	r0, 140c6 <tls_interface_listen+0xc6>
   1408c:	6823      	ldr	r3, [r4, #0]
   1408e:	00db      	lsls	r3, r3, #3
   14090:	d40e      	bmi.n	140b0 <tls_interface_listen+0xb0>
   14092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14096:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1409a:	210b      	movs	r1, #11
   1409c:	4630      	mov	r0, r6
   1409e:	f003 fa1d 	bl	174dc <ip_interface_wait>
   140a2:	b160      	cbz	r0, 140be <tls_interface_listen+0xbe>
   140a4:	2800      	cmp	r0, #0
   140a6:	f8c4 8000 	str.w	r8, [r4]
   140aa:	dc02      	bgt.n	140b2 <tls_interface_listen+0xb2>
   140ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140b0:	2073      	movs	r0, #115	; 0x73
   140b2:	f7fd fc87 	bl	119c4 <bsd_os_errno_set>
   140b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140be:	4639      	mov	r1, r7
   140c0:	4630      	mov	r0, r6
   140c2:	f003 fef9 	bl	17eb8 <ip_interface_listen>
   140c6:	2800      	cmp	r0, #0
   140c8:	dcf3      	bgt.n	140b2 <tls_interface_listen+0xb2>
   140ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   140ce:	00f3      	lsls	r3, r6, #3
   140d0:	f8df 9018 	ldr.w	r9, [pc, #24]	; 140ec <tls_interface_listen+0xec>
   140d4:	199a      	adds	r2, r3, r6
   140d6:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   140da:	2a02      	cmp	r2, #2
   140dc:	d1a0      	bne.n	14020 <tls_interface_listen+0x20>
   140de:	e7ab      	b.n	14038 <tls_interface_listen+0x38>
   140e0:	200c      	movs	r0, #12
   140e2:	e7e6      	b.n	140b2 <tls_interface_listen+0xb2>
   140e4:	202d      	movs	r0, #45	; 0x2d
   140e6:	e7e4      	b.n	140b2 <tls_interface_listen+0xb2>
   140e8:	2009      	movs	r0, #9
   140ea:	e7e2      	b.n	140b2 <tls_interface_listen+0xb2>
   140ec:	20020664 	.word	0x20020664

000140f0 <tls_interface_accept>:
   140f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140f2:	460c      	mov	r4, r1
   140f4:	4616      	mov	r6, r2
   140f6:	461f      	mov	r7, r3
   140f8:	4605      	mov	r5, r0
   140fa:	f004 fde1 	bl	18cc0 <interface_socket_from_handle_get>
   140fe:	2800      	cmp	r0, #0
   14100:	d03b      	beq.n	1417a <tls_interface_accept+0x8a>
   14102:	6800      	ldr	r0, [r0, #0]
   14104:	b280      	uxth	r0, r0
   14106:	2806      	cmp	r0, #6
   14108:	d137      	bne.n	1417a <tls_interface_accept+0x8a>
   1410a:	4621      	mov	r1, r4
   1410c:	463b      	mov	r3, r7
   1410e:	4632      	mov	r2, r6
   14110:	4628      	mov	r0, r5
   14112:	f003 ff47 	bl	17fa4 <ip_interface_accept>
   14116:	4604      	mov	r4, r0
   14118:	b118      	cbz	r0, 14122 <tls_interface_accept+0x32>
   1411a:	2c00      	cmp	r4, #0
   1411c:	dc2e      	bgt.n	1417c <tls_interface_accept+0x8c>
   1411e:	4620      	mov	r0, r4
   14120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14122:	4628      	mov	r0, r5
   14124:	f004 fdcc 	bl	18cc0 <interface_socket_from_handle_get>
   14128:	6803      	ldr	r3, [r0, #0]
   1412a:	4f18      	ldr	r7, [pc, #96]	; (1418c <tls_interface_accept+0x9c>)
   1412c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14130:	6003      	str	r3, [r0, #0]
   14132:	6803      	ldr	r3, [r0, #0]
   14134:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14138:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1413c:	4606      	mov	r6, r0
   1413e:	6003      	str	r3, [r0, #0]
   14140:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   14144:	2224      	movs	r2, #36	; 0x24
   14146:	4638      	mov	r0, r7
   14148:	f009 fa85 	bl	1d656 <memcpy>
   1414c:	2302      	movs	r3, #2
   1414e:	703b      	strb	r3, [r7, #0]
   14150:	6833      	ldr	r3, [r6, #0]
   14152:	4620      	mov	r0, r4
   14154:	0c1b      	lsrs	r3, r3, #16
   14156:	041b      	lsls	r3, r3, #16
   14158:	f043 030b 	orr.w	r3, r3, #11
   1415c:	6033      	str	r3, [r6, #0]
   1415e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14166:	210c      	movs	r1, #12
   14168:	f003 f9b8 	bl	174dc <ip_interface_wait>
   1416c:	4604      	mov	r4, r0
   1416e:	2800      	cmp	r0, #0
   14170:	d0d5      	beq.n	1411e <tls_interface_accept+0x2e>
   14172:	2000      	movs	r0, #0
   14174:	f003 fa8a 	bl	1768c <ip_interface_close>
   14178:	e7cf      	b.n	1411a <tls_interface_accept+0x2a>
   1417a:	2409      	movs	r4, #9
   1417c:	4620      	mov	r0, r4
   1417e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14182:	f7fd fc1f 	bl	119c4 <bsd_os_errno_set>
   14186:	4620      	mov	r0, r4
   14188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1418a:	bf00      	nop
   1418c:	20020664 	.word	0x20020664

00014190 <tls_interface_setopt>:
   14190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14194:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   14198:	9f06      	ldr	r7, [sp, #24]
   1419a:	d11d      	bne.n	141d8 <tls_interface_setopt+0x48>
   1419c:	461c      	mov	r4, r3
   1419e:	b1c3      	cbz	r3, 141d2 <tls_interface_setopt+0x42>
   141a0:	b1bf      	cbz	r7, 141d2 <tls_interface_setopt+0x42>
   141a2:	4605      	mov	r5, r0
   141a4:	4616      	mov	r6, r2
   141a6:	f004 fd8b 	bl	18cc0 <interface_socket_from_handle_get>
   141aa:	b1c8      	cbz	r0, 141e0 <tls_interface_setopt+0x50>
   141ac:	6803      	ldr	r3, [r0, #0]
   141ae:	b29b      	uxth	r3, r3
   141b0:	2b02      	cmp	r3, #2
   141b2:	d007      	beq.n	141c4 <tls_interface_setopt+0x34>
   141b4:	6803      	ldr	r3, [r0, #0]
   141b6:	b29b      	uxth	r3, r3
   141b8:	2b04      	cmp	r3, #4
   141ba:	d003      	beq.n	141c4 <tls_interface_setopt+0x34>
   141bc:	6803      	ldr	r3, [r0, #0]
   141be:	b29b      	uxth	r3, r3
   141c0:	2b05      	cmp	r3, #5
   141c2:	d10d      	bne.n	141e0 <tls_interface_setopt+0x50>
   141c4:	3e01      	subs	r6, #1
   141c6:	2e03      	cmp	r6, #3
   141c8:	d851      	bhi.n	1426e <tls_interface_setopt+0xde>
   141ca:	e8df f006 	tbb	[pc, r6]
   141ce:	3225      	.short	0x3225
   141d0:	0b18      	.short	0x0b18
   141d2:	200e      	movs	r0, #14
   141d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   141d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   141dc:	f004 b81a 	b.w	18214 <ip_interface_setopt>
   141e0:	2009      	movs	r0, #9
   141e2:	e7f7      	b.n	141d4 <tls_interface_setopt+0x44>
   141e4:	2f04      	cmp	r7, #4
   141e6:	d139      	bne.n	1425c <tls_interface_setopt+0xcc>
   141e8:	6823      	ldr	r3, [r4, #0]
   141ea:	2b02      	cmp	r3, #2
   141ec:	d836      	bhi.n	1425c <tls_interface_setopt+0xcc>
   141ee:	4a21      	ldr	r2, [pc, #132]	; (14274 <tls_interface_setopt+0xe4>)
   141f0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   141f4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   141f8:	70ab      	strb	r3, [r5, #2]
   141fa:	2000      	movs	r0, #0
   141fc:	e7ea      	b.n	141d4 <tls_interface_setopt+0x44>
   141fe:	2f01      	cmp	r7, #1
   14200:	d12c      	bne.n	1425c <tls_interface_setopt+0xcc>
   14202:	7823      	ldrb	r3, [r4, #0]
   14204:	2b01      	cmp	r3, #1
   14206:	d829      	bhi.n	1425c <tls_interface_setopt+0xcc>
   14208:	4a1a      	ldr	r2, [pc, #104]	; (14274 <tls_interface_setopt+0xe4>)
   1420a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1420e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   14212:	7053      	strb	r3, [r2, #1]
   14214:	2000      	movs	r0, #0
   14216:	e7dd      	b.n	141d4 <tls_interface_setopt+0x44>
   14218:	2f04      	cmp	r7, #4
   1421a:	d11f      	bne.n	1425c <tls_interface_setopt+0xcc>
   1421c:	6820      	ldr	r0, [r4, #0]
   1421e:	b1f8      	cbz	r0, 14260 <tls_interface_setopt+0xd0>
   14220:	2801      	cmp	r0, #1
   14222:	d11b      	bne.n	1425c <tls_interface_setopt+0xcc>
   14224:	4b13      	ldr	r3, [pc, #76]	; (14274 <tls_interface_setopt+0xe4>)
   14226:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1422a:	f803 0025 	strb.w	r0, [r3, r5, lsl #2]
   1422e:	2000      	movs	r0, #0
   14230:	e7d0      	b.n	141d4 <tls_interface_setopt+0x44>
   14232:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   14236:	d011      	beq.n	1425c <tls_interface_setopt+0xcc>
   14238:	f017 0603 	ands.w	r6, r7, #3
   1423c:	d10e      	bne.n	1425c <tls_interface_setopt+0xcc>
   1423e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14242:	00ad      	lsls	r5, r5, #2
   14244:	4b0b      	ldr	r3, [pc, #44]	; (14274 <tls_interface_setopt+0xe4>)
   14246:	1d28      	adds	r0, r5, #4
   14248:	4418      	add	r0, r3
   1424a:	442b      	add	r3, r5
   1424c:	463a      	mov	r2, r7
   1424e:	4621      	mov	r1, r4
   14250:	f883 c003 	strb.w	ip, [r3, #3]
   14254:	f009 f9ff 	bl	1d656 <memcpy>
   14258:	4630      	mov	r0, r6
   1425a:	e7bb      	b.n	141d4 <tls_interface_setopt+0x44>
   1425c:	2016      	movs	r0, #22
   1425e:	e7b9      	b.n	141d4 <tls_interface_setopt+0x44>
   14260:	2202      	movs	r2, #2
   14262:	4b04      	ldr	r3, [pc, #16]	; (14274 <tls_interface_setopt+0xe4>)
   14264:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   14268:	f803 2025 	strb.w	r2, [r3, r5, lsl #2]
   1426c:	e7b2      	b.n	141d4 <tls_interface_setopt+0x44>
   1426e:	202a      	movs	r0, #42	; 0x2a
   14270:	e7b0      	b.n	141d4 <tls_interface_setopt+0x44>
   14272:	bf00      	nop
   14274:	20020664 	.word	0x20020664

00014278 <tls_interface_getopt>:
   14278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1427c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   14280:	9f06      	ldr	r7, [sp, #24]
   14282:	d112      	bne.n	142aa <tls_interface_getopt+0x32>
   14284:	461d      	mov	r5, r3
   14286:	b16b      	cbz	r3, 142a4 <tls_interface_getopt+0x2c>
   14288:	b167      	cbz	r7, 142a4 <tls_interface_getopt+0x2c>
   1428a:	4606      	mov	r6, r0
   1428c:	4614      	mov	r4, r2
   1428e:	f004 fd17 	bl	18cc0 <interface_socket_from_handle_get>
   14292:	2800      	cmp	r0, #0
   14294:	d04f      	beq.n	14336 <tls_interface_getopt+0xbe>
   14296:	3c01      	subs	r4, #1
   14298:	2c03      	cmp	r4, #3
   1429a:	d852      	bhi.n	14342 <tls_interface_getopt+0xca>
   1429c:	e8df f004 	tbb	[pc, r4]
   142a0:	09152139 	.word	0x09152139
   142a4:	200e      	movs	r0, #14
   142a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   142ae:	f004 b86d 	b.w	1838c <ip_interface_getopt>
   142b2:	683b      	ldr	r3, [r7, #0]
   142b4:	2b04      	cmp	r3, #4
   142b6:	d13c      	bne.n	14332 <tls_interface_getopt+0xba>
   142b8:	4b23      	ldr	r3, [pc, #140]	; (14348 <tls_interface_getopt+0xd0>)
   142ba:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   142be:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   142c2:	78b3      	ldrb	r3, [r6, #2]
   142c4:	2000      	movs	r0, #0
   142c6:	602b      	str	r3, [r5, #0]
   142c8:	e7ed      	b.n	142a6 <tls_interface_getopt+0x2e>
   142ca:	683b      	ldr	r3, [r7, #0]
   142cc:	2b04      	cmp	r3, #4
   142ce:	d130      	bne.n	14332 <tls_interface_getopt+0xba>
   142d0:	4b1d      	ldr	r3, [pc, #116]	; (14348 <tls_interface_getopt+0xd0>)
   142d2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   142d6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   142da:	7873      	ldrb	r3, [r6, #1]
   142dc:	2000      	movs	r0, #0
   142de:	602b      	str	r3, [r5, #0]
   142e0:	e7e1      	b.n	142a6 <tls_interface_getopt+0x2e>
   142e2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   142e6:	4918      	ldr	r1, [pc, #96]	; (14348 <tls_interface_getopt+0xd0>)
   142e8:	683b      	ldr	r3, [r7, #0]
   142ea:	00b6      	lsls	r6, r6, #2
   142ec:	198a      	adds	r2, r1, r6
   142ee:	f013 0403 	ands.w	r4, r3, #3
   142f2:	78d0      	ldrb	r0, [r2, #3]
   142f4:	d121      	bne.n	1433a <tls_interface_getopt+0xc2>
   142f6:	089b      	lsrs	r3, r3, #2
   142f8:	4283      	cmp	r3, r0
   142fa:	bf28      	it	cs
   142fc:	4603      	movcs	r3, r0
   142fe:	009a      	lsls	r2, r3, #2
   14300:	b1db      	cbz	r3, 1433a <tls_interface_getopt+0xc2>
   14302:	3604      	adds	r6, #4
   14304:	4431      	add	r1, r6
   14306:	603a      	str	r2, [r7, #0]
   14308:	4628      	mov	r0, r5
   1430a:	f009 f9a4 	bl	1d656 <memcpy>
   1430e:	4620      	mov	r0, r4
   14310:	e7c9      	b.n	142a6 <tls_interface_getopt+0x2e>
   14312:	683b      	ldr	r3, [r7, #0]
   14314:	2b04      	cmp	r3, #4
   14316:	d10c      	bne.n	14332 <tls_interface_getopt+0xba>
   14318:	4b0b      	ldr	r3, [pc, #44]	; (14348 <tls_interface_getopt+0xd0>)
   1431a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1431e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   14322:	2000      	movs	r0, #0
   14324:	f1a3 0301 	sub.w	r3, r3, #1
   14328:	fab3 f383 	clz	r3, r3
   1432c:	095b      	lsrs	r3, r3, #5
   1432e:	602b      	str	r3, [r5, #0]
   14330:	e7b9      	b.n	142a6 <tls_interface_getopt+0x2e>
   14332:	2016      	movs	r0, #22
   14334:	e7b7      	b.n	142a6 <tls_interface_getopt+0x2e>
   14336:	2009      	movs	r0, #9
   14338:	e7b5      	b.n	142a6 <tls_interface_getopt+0x2e>
   1433a:	2800      	cmp	r0, #0
   1433c:	d1f9      	bne.n	14332 <tls_interface_getopt+0xba>
   1433e:	6038      	str	r0, [r7, #0]
   14340:	e7b1      	b.n	142a6 <tls_interface_getopt+0x2e>
   14342:	202a      	movs	r0, #42	; 0x2a
   14344:	e7af      	b.n	142a6 <tls_interface_getopt+0x2e>
   14346:	bf00      	nop
   14348:	20020664 	.word	0x20020664

0001434c <tls_rpc_ip_event_handler>:
   1434c:	b538      	push	{r3, r4, r5, lr}
   1434e:	f248 0581 	movw	r5, #32897	; 0x8081
   14352:	42ab      	cmp	r3, r5
   14354:	460c      	mov	r4, r1
   14356:	d053      	beq.n	14400 <tls_rpc_ip_event_handler+0xb4>
   14358:	f249 0182 	movw	r1, #36994	; 0x9082
   1435c:	428b      	cmp	r3, r1
   1435e:	d02d      	beq.n	143bc <tls_rpc_ip_event_handler+0x70>
   14360:	f248 0102 	movw	r1, #32770	; 0x8002
   14364:	428b      	cmp	r3, r1
   14366:	d001      	beq.n	1436c <tls_rpc_ip_event_handler+0x20>
   14368:	2001      	movs	r0, #1
   1436a:	bd38      	pop	{r3, r4, r5, pc}
   1436c:	2c00      	cmp	r4, #0
   1436e:	d0fb      	beq.n	14368 <tls_rpc_ip_event_handler+0x1c>
   14370:	6963      	ldr	r3, [r4, #20]
   14372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   14376:	d002      	beq.n	1437e <tls_rpc_ip_event_handler+0x32>
   14378:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1437c:	d1f4      	bne.n	14368 <tls_rpc_ip_event_handler+0x1c>
   1437e:	6823      	ldr	r3, [r4, #0]
   14380:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   14384:	6023      	str	r3, [r4, #0]
   14386:	6955      	ldr	r5, [r2, #20]
   14388:	2d00      	cmp	r5, #0
   1438a:	d148      	bne.n	1441e <tls_rpc_ip_event_handler+0xd2>
   1438c:	6823      	ldr	r3, [r4, #0]
   1438e:	0c1b      	lsrs	r3, r3, #16
   14390:	041b      	lsls	r3, r3, #16
   14392:	f043 0305 	orr.w	r3, r3, #5
   14396:	6023      	str	r3, [r4, #0]
   14398:	6823      	ldr	r3, [r4, #0]
   1439a:	00da      	lsls	r2, r3, #3
   1439c:	d50c      	bpl.n	143b8 <tls_rpc_ip_event_handler+0x6c>
   1439e:	4b25      	ldr	r3, [pc, #148]	; (14434 <tls_rpc_ip_event_handler+0xe8>)
   143a0:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
   143a4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   143a8:	2b02      	cmp	r3, #2
   143aa:	d105      	bne.n	143b8 <tls_rpc_ip_event_handler+0x6c>
   143ac:	4621      	mov	r1, r4
   143ae:	f7ff fc21 	bl	13bf4 <secure_client_socket>
   143b2:	b108      	cbz	r0, 143b8 <tls_rpc_ip_event_handler+0x6c>
   143b4:	2873      	cmp	r0, #115	; 0x73
   143b6:	d135      	bne.n	14424 <tls_rpc_ip_event_handler+0xd8>
   143b8:	2000      	movs	r0, #0
   143ba:	bd38      	pop	{r3, r4, r5, pc}
   143bc:	2c00      	cmp	r4, #0
   143be:	d0fb      	beq.n	143b8 <tls_rpc_ip_event_handler+0x6c>
   143c0:	6823      	ldr	r3, [r4, #0]
   143c2:	b29b      	uxth	r3, r3
   143c4:	2b0b      	cmp	r3, #11
   143c6:	d1f7      	bne.n	143b8 <tls_rpc_ip_event_handler+0x6c>
   143c8:	6910      	ldr	r0, [r2, #16]
   143ca:	bb48      	cbnz	r0, 14420 <tls_rpc_ip_event_handler+0xd4>
   143cc:	6823      	ldr	r3, [r4, #0]
   143ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   143d2:	6023      	str	r3, [r4, #0]
   143d4:	6823      	ldr	r3, [r4, #0]
   143d6:	00db      	lsls	r3, r3, #3
   143d8:	d5ee      	bpl.n	143b8 <tls_rpc_ip_event_handler+0x6c>
   143da:	6823      	ldr	r3, [r4, #0]
   143dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   143e0:	6023      	str	r3, [r4, #0]
   143e2:	6823      	ldr	r3, [r4, #0]
   143e4:	0c1b      	lsrs	r3, r3, #16
   143e6:	041b      	lsls	r3, r3, #16
   143e8:	f043 030c 	orr.w	r3, r3, #12
   143ec:	6023      	str	r3, [r4, #0]
   143ee:	6823      	ldr	r3, [r4, #0]
   143f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   143f4:	6023      	str	r3, [r4, #0]
   143f6:	6823      	ldr	r3, [r4, #0]
   143f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   143fc:	6023      	str	r3, [r4, #0]
   143fe:	bd38      	pop	{r3, r4, r5, pc}
   14400:	2900      	cmp	r1, #0
   14402:	d0d9      	beq.n	143b8 <tls_rpc_ip_event_handler+0x6c>
   14404:	680b      	ldr	r3, [r1, #0]
   14406:	b29b      	uxth	r3, r3
   14408:	2b0a      	cmp	r3, #10
   1440a:	d1d5      	bne.n	143b8 <tls_rpc_ip_event_handler+0x6c>
   1440c:	6950      	ldr	r0, [r2, #20]
   1440e:	b938      	cbnz	r0, 14420 <tls_rpc_ip_event_handler+0xd4>
   14410:	680b      	ldr	r3, [r1, #0]
   14412:	0c1b      	lsrs	r3, r3, #16
   14414:	041b      	lsls	r3, r3, #16
   14416:	f043 030b 	orr.w	r3, r3, #11
   1441a:	600b      	str	r3, [r1, #0]
   1441c:	bd38      	pop	{r3, r4, r5, pc}
   1441e:	4628      	mov	r0, r5
   14420:	f003 f81e 	bl	17460 <rpc_error_to_nrf_bsd_error>
   14424:	6060      	str	r0, [r4, #4]
   14426:	6823      	ldr	r3, [r4, #0]
   14428:	2000      	movs	r0, #0
   1442a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1442e:	6023      	str	r3, [r4, #0]
   14430:	bd38      	pop	{r3, r4, r5, pc}
   14432:	bf00      	nop
   14434:	20020664 	.word	0x20020664

00014438 <rpc_dfu_event_handler>:
   14438:	b508      	push	{r3, lr}
   1443a:	4a08      	ldr	r2, [pc, #32]	; (1445c <rpc_dfu_event_handler+0x24>)
   1443c:	68c1      	ldr	r1, [r0, #12]
   1443e:	8812      	ldrh	r2, [r2, #0]
   14440:	4603      	mov	r3, r0
   14442:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   14446:	d005      	beq.n	14454 <rpc_dfu_event_handler+0x1c>
   14448:	6800      	ldr	r0, [r0, #0]
   1444a:	b110      	cbz	r0, 14452 <rpc_dfu_event_handler+0x1a>
   1444c:	f7fe ff9a 	bl	13384 <rpc_dfu_client_data_free>
   14450:	2000      	movs	r0, #0
   14452:	bd08      	pop	{r3, pc}
   14454:	4a02      	ldr	r2, [pc, #8]	; (14460 <rpc_dfu_event_handler+0x28>)
   14456:	2001      	movs	r0, #1
   14458:	6013      	str	r3, [r2, #0]
   1445a:	bd08      	pop	{r3, pc}
   1445c:	20024e44 	.word	0x20024e44
   14460:	20020790 	.word	0x20020790

00014464 <mfu_interface_init>:
   14464:	2300      	movs	r3, #0
   14466:	b510      	push	{r4, lr}
   14468:	4808      	ldr	r0, [pc, #32]	; (1448c <mfu_interface_init+0x28>)
   1446a:	4909      	ldr	r1, [pc, #36]	; (14490 <mfu_interface_init+0x2c>)
   1446c:	4a09      	ldr	r2, [pc, #36]	; (14494 <mfu_interface_init+0x30>)
   1446e:	4c0a      	ldr	r4, [pc, #40]	; (14498 <mfu_interface_init+0x34>)
   14470:	8003      	strh	r3, [r0, #0]
   14472:	600b      	str	r3, [r1, #0]
   14474:	6013      	str	r3, [r2, #0]
   14476:	6023      	str	r3, [r4, #0]
   14478:	f7fe ff4e 	bl	13318 <rpc_dfu_client_init>
   1447c:	b910      	cbnz	r0, 14484 <mfu_interface_init+0x20>
   1447e:	2301      	movs	r3, #1
   14480:	6023      	str	r3, [r4, #0]
   14482:	bd10      	pop	{r4, pc}
   14484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14488:	bd10      	pop	{r4, pc}
   1448a:	bf00      	nop
   1448c:	20024e44 	.word	0x20024e44
   14490:	20020790 	.word	0x20020790
   14494:	2002078c 	.word	0x2002078c
   14498:	20020784 	.word	0x20020784

0001449c <mfu_interface_open>:
   1449c:	2801      	cmp	r0, #1
   1449e:	b508      	push	{r3, lr}
   144a0:	d10b      	bne.n	144ba <mfu_interface_open+0x1e>
   144a2:	f240 2303 	movw	r3, #515	; 0x203
   144a6:	429a      	cmp	r2, r3
   144a8:	d107      	bne.n	144ba <mfu_interface_open+0x1e>
   144aa:	4b09      	ldr	r3, [pc, #36]	; (144d0 <mfu_interface_open+0x34>)
   144ac:	681a      	ldr	r2, [r3, #0]
   144ae:	2a01      	cmp	r2, #1
   144b0:	d109      	bne.n	144c6 <mfu_interface_open+0x2a>
   144b2:	2202      	movs	r2, #2
   144b4:	601a      	str	r2, [r3, #0]
   144b6:	4807      	ldr	r0, [pc, #28]	; (144d4 <mfu_interface_open+0x38>)
   144b8:	bd08      	pop	{r3, pc}
   144ba:	2016      	movs	r0, #22
   144bc:	f7fd fa82 	bl	119c4 <bsd_os_errno_set>
   144c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144c4:	bd08      	pop	{r3, pc}
   144c6:	f7fd fa7d 	bl	119c4 <bsd_os_errno_set>
   144ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144ce:	bd08      	pop	{r3, pc}
   144d0:	20020784 	.word	0x20020784
   144d4:	49765432 	.word	0x49765432

000144d8 <mfu_interface_close>:
   144d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144da:	4c32      	ldr	r4, [pc, #200]	; (145a4 <mfu_interface_close+0xcc>)
   144dc:	b083      	sub	sp, #12
   144de:	6823      	ldr	r3, [r4, #0]
   144e0:	1e9a      	subs	r2, r3, #2
   144e2:	2a01      	cmp	r2, #1
   144e4:	d857      	bhi.n	14596 <mfu_interface_close+0xbe>
   144e6:	2b03      	cmp	r3, #3
   144e8:	d004      	beq.n	144f4 <mfu_interface_close+0x1c>
   144ea:	2301      	movs	r3, #1
   144ec:	2000      	movs	r0, #0
   144ee:	6023      	str	r3, [r4, #0]
   144f0:	b003      	add	sp, #12
   144f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144f4:	2100      	movs	r1, #0
   144f6:	4668      	mov	r0, sp
   144f8:	f7fe ff14 	bl	13324 <rpc_dfu_client_request_alloc>
   144fc:	4603      	mov	r3, r0
   144fe:	2800      	cmp	r0, #0
   14500:	d13d      	bne.n	1457e <mfu_interface_close+0xa6>
   14502:	2104      	movs	r1, #4
   14504:	4e28      	ldr	r6, [pc, #160]	; (145a8 <mfu_interface_close+0xd0>)
   14506:	9800      	ldr	r0, [sp, #0]
   14508:	8832      	ldrh	r2, [r6, #0]
   1450a:	7201      	strb	r1, [r0, #8]
   1450c:	3201      	adds	r2, #1
   1450e:	b292      	uxth	r2, r2
   14510:	0411      	lsls	r1, r2, #16
   14512:	f041 0106 	orr.w	r1, r1, #6
   14516:	4d25      	ldr	r5, [pc, #148]	; (145ac <mfu_interface_close+0xd4>)
   14518:	60c1      	str	r1, [r0, #12]
   1451a:	7103      	strb	r3, [r0, #4]
   1451c:	7143      	strb	r3, [r0, #5]
   1451e:	7183      	strb	r3, [r0, #6]
   14520:	71c3      	strb	r3, [r0, #7]
   14522:	7243      	strb	r3, [r0, #9]
   14524:	7283      	strb	r3, [r0, #10]
   14526:	72c3      	strb	r3, [r0, #11]
   14528:	2106      	movs	r1, #6
   1452a:	8032      	strh	r2, [r6, #0]
   1452c:	602b      	str	r3, [r5, #0]
   1452e:	f7fe ff0d 	bl	1334c <rpc_dfu_client_request_send>
   14532:	b9d8      	cbnz	r0, 1456c <mfu_interface_close+0x94>
   14534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14538:	ae02      	add	r6, sp, #8
   1453a:	4627      	mov	r7, r4
   1453c:	f846 3d04 	str.w	r3, [r6, #-4]!
   14540:	e004      	b.n	1454c <mfu_interface_close+0x74>
   14542:	4631      	mov	r1, r6
   14544:	4638      	mov	r0, r7
   14546:	f7fd f9a9 	bl	1189c <bsd_os_timedwait>
   1454a:	b9f0      	cbnz	r0, 1458a <mfu_interface_close+0xb2>
   1454c:	6828      	ldr	r0, [r5, #0]
   1454e:	2800      	cmp	r0, #0
   14550:	d0f7      	beq.n	14542 <mfu_interface_close+0x6a>
   14552:	6905      	ldr	r5, [r0, #16]
   14554:	f7fe ff0e 	bl	13374 <rpc_dfu_client_message_free>
   14558:	2d00      	cmp	r5, #0
   1455a:	d0c6      	beq.n	144ea <mfu_interface_close+0x12>
   1455c:	4b14      	ldr	r3, [pc, #80]	; (145b0 <mfu_interface_close+0xd8>)
   1455e:	2008      	movs	r0, #8
   14560:	601d      	str	r5, [r3, #0]
   14562:	f7fd fa2f 	bl	119c4 <bsd_os_errno_set>
   14566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1456a:	e7c1      	b.n	144f0 <mfu_interface_close+0x18>
   1456c:	9800      	ldr	r0, [sp, #0]
   1456e:	6803      	ldr	r3, [r0, #0]
   14570:	b11b      	cbz	r3, 1457a <mfu_interface_close+0xa2>
   14572:	4618      	mov	r0, r3
   14574:	f7fe ff06 	bl	13384 <rpc_dfu_client_data_free>
   14578:	9800      	ldr	r0, [sp, #0]
   1457a:	f7fe fefb 	bl	13374 <rpc_dfu_client_message_free>
   1457e:	200c      	movs	r0, #12
   14580:	f7fd fa20 	bl	119c4 <bsd_os_errno_set>
   14584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14588:	e7b2      	b.n	144f0 <mfu_interface_close+0x18>
   1458a:	203c      	movs	r0, #60	; 0x3c
   1458c:	f7fd fa1a 	bl	119c4 <bsd_os_errno_set>
   14590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14594:	e7ac      	b.n	144f0 <mfu_interface_close+0x18>
   14596:	2001      	movs	r0, #1
   14598:	f7fd fa14 	bl	119c4 <bsd_os_errno_set>
   1459c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145a0:	e7a6      	b.n	144f0 <mfu_interface_close+0x18>
   145a2:	bf00      	nop
   145a4:	20020784 	.word	0x20020784
   145a8:	20024e44 	.word	0x20024e44
   145ac:	20020790 	.word	0x20020790
   145b0:	20020788 	.word	0x20020788

000145b4 <mfu_interface_sendto>:
   145b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   145b8:	4e5a      	ldr	r6, [pc, #360]	; (14724 <mfu_interface_sendto+0x170>)
   145ba:	4615      	mov	r5, r2
   145bc:	6833      	ldr	r3, [r6, #0]
   145be:	b082      	sub	sp, #8
   145c0:	1e9a      	subs	r2, r3, #2
   145c2:	2a01      	cmp	r2, #1
   145c4:	f200 80a7 	bhi.w	14716 <mfu_interface_sendto+0x162>
   145c8:	460f      	mov	r7, r1
   145ca:	2900      	cmp	r1, #0
   145cc:	f000 809d 	beq.w	1470a <mfu_interface_sendto+0x156>
   145d0:	2d00      	cmp	r5, #0
   145d2:	f000 809a 	beq.w	1470a <mfu_interface_sendto+0x156>
   145d6:	2b02      	cmp	r3, #2
   145d8:	46e8      	mov	r8, sp
   145da:	d04e      	beq.n	1467a <mfu_interface_sendto+0xc6>
   145dc:	4640      	mov	r0, r8
   145de:	4629      	mov	r1, r5
   145e0:	f7fe fea0 	bl	13324 <rpc_dfu_client_request_alloc>
   145e4:	4606      	mov	r6, r0
   145e6:	b140      	cbz	r0, 145fa <mfu_interface_sendto+0x46>
   145e8:	200c      	movs	r0, #12
   145ea:	f7fd f9eb 	bl	119c4 <bsd_os_errno_set>
   145ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   145f2:	4628      	mov	r0, r5
   145f4:	b002      	add	sp, #8
   145f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145fa:	9b00      	ldr	r3, [sp, #0]
   145fc:	4639      	mov	r1, r7
   145fe:	6818      	ldr	r0, [r3, #0]
   14600:	462a      	mov	r2, r5
   14602:	f009 f828 	bl	1d656 <memcpy>
   14606:	2104      	movs	r1, #4
   14608:	4c47      	ldr	r4, [pc, #284]	; (14728 <mfu_interface_sendto+0x174>)
   1460a:	9800      	ldr	r0, [sp, #0]
   1460c:	8823      	ldrh	r3, [r4, #0]
   1460e:	6045      	str	r5, [r0, #4]
   14610:	3301      	adds	r3, #1
   14612:	b29b      	uxth	r3, r3
   14614:	041a      	lsls	r2, r3, #16
   14616:	8023      	strh	r3, [r4, #0]
   14618:	430a      	orrs	r2, r1
   1461a:	4c44      	ldr	r4, [pc, #272]	; (1472c <mfu_interface_sendto+0x178>)
   1461c:	60c2      	str	r2, [r0, #12]
   1461e:	7246      	strb	r6, [r0, #9]
   14620:	7286      	strb	r6, [r0, #10]
   14622:	72c6      	strb	r6, [r0, #11]
   14624:	7201      	strb	r1, [r0, #8]
   14626:	6026      	str	r6, [r4, #0]
   14628:	f7fe fe90 	bl	1334c <rpc_dfu_client_request_send>
   1462c:	2800      	cmp	r0, #0
   1462e:	d162      	bne.n	146f6 <mfu_interface_sendto+0x142>
   14630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14634:	ae02      	add	r6, sp, #8
   14636:	4f3b      	ldr	r7, [pc, #236]	; (14724 <mfu_interface_sendto+0x170>)
   14638:	f846 3d04 	str.w	r3, [r6, #-4]!
   1463c:	e004      	b.n	14648 <mfu_interface_sendto+0x94>
   1463e:	4631      	mov	r1, r6
   14640:	4638      	mov	r0, r7
   14642:	f7fd f92b 	bl	1189c <bsd_os_timedwait>
   14646:	b978      	cbnz	r0, 14668 <mfu_interface_sendto+0xb4>
   14648:	6820      	ldr	r0, [r4, #0]
   1464a:	2800      	cmp	r0, #0
   1464c:	d0f7      	beq.n	1463e <mfu_interface_sendto+0x8a>
   1464e:	6904      	ldr	r4, [r0, #16]
   14650:	f7fe fe90 	bl	13374 <rpc_dfu_client_message_free>
   14654:	2c00      	cmp	r4, #0
   14656:	d0cc      	beq.n	145f2 <mfu_interface_sendto+0x3e>
   14658:	4b35      	ldr	r3, [pc, #212]	; (14730 <mfu_interface_sendto+0x17c>)
   1465a:	2008      	movs	r0, #8
   1465c:	601c      	str	r4, [r3, #0]
   1465e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14662:	f7fd f9af 	bl	119c4 <bsd_os_errno_set>
   14666:	e7c4      	b.n	145f2 <mfu_interface_sendto+0x3e>
   14668:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1466c:	203c      	movs	r0, #60	; 0x3c
   1466e:	f7fd f9a9 	bl	119c4 <bsd_os_errno_set>
   14672:	4628      	mov	r0, r5
   14674:	b002      	add	sp, #8
   14676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1467a:	4640      	mov	r0, r8
   1467c:	2100      	movs	r1, #0
   1467e:	f7fe fe51 	bl	13324 <rpc_dfu_client_request_alloc>
   14682:	4602      	mov	r2, r0
   14684:	2800      	cmp	r0, #0
   14686:	d1af      	bne.n	145e8 <mfu_interface_sendto+0x34>
   14688:	f04f 0c08 	mov.w	ip, #8
   1468c:	4926      	ldr	r1, [pc, #152]	; (14728 <mfu_interface_sendto+0x174>)
   1468e:	4829      	ldr	r0, [pc, #164]	; (14734 <mfu_interface_sendto+0x180>)
   14690:	880b      	ldrh	r3, [r1, #0]
   14692:	6804      	ldr	r4, [r0, #0]
   14694:	3301      	adds	r3, #1
   14696:	9800      	ldr	r0, [sp, #0]
   14698:	b29b      	uxth	r3, r3
   1469a:	800b      	strh	r3, [r1, #0]
   1469c:	041b      	lsls	r3, r3, #16
   1469e:	f043 0303 	orr.w	r3, r3, #3
   146a2:	6104      	str	r4, [r0, #16]
   146a4:	4c21      	ldr	r4, [pc, #132]	; (1472c <mfu_interface_sendto+0x178>)
   146a6:	60c3      	str	r3, [r0, #12]
   146a8:	7102      	strb	r2, [r0, #4]
   146aa:	7142      	strb	r2, [r0, #5]
   146ac:	7182      	strb	r2, [r0, #6]
   146ae:	71c2      	strb	r2, [r0, #7]
   146b0:	7242      	strb	r2, [r0, #9]
   146b2:	7282      	strb	r2, [r0, #10]
   146b4:	72c2      	strb	r2, [r0, #11]
   146b6:	f880 c008 	strb.w	ip, [r0, #8]
   146ba:	2103      	movs	r1, #3
   146bc:	6022      	str	r2, [r4, #0]
   146be:	f7fe fe45 	bl	1334c <rpc_dfu_client_request_send>
   146c2:	b9c0      	cbnz	r0, 146f6 <mfu_interface_sendto+0x142>
   146c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146c8:	f10d 0908 	add.w	r9, sp, #8
   146cc:	f849 3d04 	str.w	r3, [r9, #-4]!
   146d0:	46b2      	mov	sl, r6
   146d2:	e005      	b.n	146e0 <mfu_interface_sendto+0x12c>
   146d4:	4649      	mov	r1, r9
   146d6:	4650      	mov	r0, sl
   146d8:	f7fd f8e0 	bl	1189c <bsd_os_timedwait>
   146dc:	2800      	cmp	r0, #0
   146de:	d1c3      	bne.n	14668 <mfu_interface_sendto+0xb4>
   146e0:	6820      	ldr	r0, [r4, #0]
   146e2:	2800      	cmp	r0, #0
   146e4:	d0f6      	beq.n	146d4 <mfu_interface_sendto+0x120>
   146e6:	6904      	ldr	r4, [r0, #16]
   146e8:	f7fe fe44 	bl	13374 <rpc_dfu_client_message_free>
   146ec:	2c00      	cmp	r4, #0
   146ee:	d1b3      	bne.n	14658 <mfu_interface_sendto+0xa4>
   146f0:	2303      	movs	r3, #3
   146f2:	6033      	str	r3, [r6, #0]
   146f4:	e772      	b.n	145dc <mfu_interface_sendto+0x28>
   146f6:	9800      	ldr	r0, [sp, #0]
   146f8:	6803      	ldr	r3, [r0, #0]
   146fa:	b11b      	cbz	r3, 14704 <mfu_interface_sendto+0x150>
   146fc:	4618      	mov	r0, r3
   146fe:	f7fe fe41 	bl	13384 <rpc_dfu_client_data_free>
   14702:	9800      	ldr	r0, [sp, #0]
   14704:	f7fe fe36 	bl	13374 <rpc_dfu_client_message_free>
   14708:	e76e      	b.n	145e8 <mfu_interface_sendto+0x34>
   1470a:	2016      	movs	r0, #22
   1470c:	f7fd f95a 	bl	119c4 <bsd_os_errno_set>
   14710:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14714:	e76d      	b.n	145f2 <mfu_interface_sendto+0x3e>
   14716:	2001      	movs	r0, #1
   14718:	f7fd f954 	bl	119c4 <bsd_os_errno_set>
   1471c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14720:	e767      	b.n	145f2 <mfu_interface_sendto+0x3e>
   14722:	bf00      	nop
   14724:	20020784 	.word	0x20020784
   14728:	20024e44 	.word	0x20024e44
   1472c:	20020790 	.word	0x20020790
   14730:	20020788 	.word	0x20020788
   14734:	2002078c 	.word	0x2002078c

00014738 <mfu_interface_setopt>:
   14738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1473a:	4846      	ldr	r0, [pc, #280]	; (14854 <mfu_interface_setopt+0x11c>)
   1473c:	b083      	sub	sp, #12
   1473e:	6800      	ldr	r0, [r0, #0]
   14740:	3802      	subs	r0, #2
   14742:	2801      	cmp	r0, #1
   14744:	d877      	bhi.n	14836 <mfu_interface_setopt+0xfe>
   14746:	f240 2003 	movw	r0, #515	; 0x203
   1474a:	4281      	cmp	r1, r0
   1474c:	d16d      	bne.n	1482a <mfu_interface_setopt+0xf2>
   1474e:	3a04      	subs	r2, #4
   14750:	2a03      	cmp	r2, #3
   14752:	d85c      	bhi.n	1480e <mfu_interface_setopt+0xd6>
   14754:	e8df f002 	tbb	[pc, r2]
   14758:	514e024b 	.word	0x514e024b
   1475c:	2407      	movs	r4, #7
   1475e:	4625      	mov	r5, r4
   14760:	2100      	movs	r1, #0
   14762:	4668      	mov	r0, sp
   14764:	f7fe fdde 	bl	13324 <rpc_dfu_client_request_alloc>
   14768:	4603      	mov	r3, r0
   1476a:	2800      	cmp	r0, #0
   1476c:	d138      	bne.n	147e0 <mfu_interface_setopt+0xa8>
   1476e:	2704      	movs	r7, #4
   14770:	4e39      	ldr	r6, [pc, #228]	; (14858 <mfu_interface_setopt+0x120>)
   14772:	9800      	ldr	r0, [sp, #0]
   14774:	8832      	ldrh	r2, [r6, #0]
   14776:	4629      	mov	r1, r5
   14778:	3201      	adds	r2, #1
   1477a:	b292      	uxth	r2, r2
   1477c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   14780:	4c36      	ldr	r4, [pc, #216]	; (1485c <mfu_interface_setopt+0x124>)
   14782:	60c5      	str	r5, [r0, #12]
   14784:	7103      	strb	r3, [r0, #4]
   14786:	7143      	strb	r3, [r0, #5]
   14788:	7183      	strb	r3, [r0, #6]
   1478a:	71c3      	strb	r3, [r0, #7]
   1478c:	7243      	strb	r3, [r0, #9]
   1478e:	7283      	strb	r3, [r0, #10]
   14790:	72c3      	strb	r3, [r0, #11]
   14792:	7207      	strb	r7, [r0, #8]
   14794:	8032      	strh	r2, [r6, #0]
   14796:	6023      	str	r3, [r4, #0]
   14798:	f7fe fdd8 	bl	1334c <rpc_dfu_client_request_send>
   1479c:	b9b8      	cbnz	r0, 147ce <mfu_interface_setopt+0x96>
   1479e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147a2:	ad02      	add	r5, sp, #8
   147a4:	4e2b      	ldr	r6, [pc, #172]	; (14854 <mfu_interface_setopt+0x11c>)
   147a6:	f845 3d04 	str.w	r3, [r5, #-4]!
   147aa:	e005      	b.n	147b8 <mfu_interface_setopt+0x80>
   147ac:	4629      	mov	r1, r5
   147ae:	4630      	mov	r0, r6
   147b0:	f7fd f874 	bl	1189c <bsd_os_timedwait>
   147b4:	2800      	cmp	r0, #0
   147b6:	d131      	bne.n	1481c <mfu_interface_setopt+0xe4>
   147b8:	6820      	ldr	r0, [r4, #0]
   147ba:	2800      	cmp	r0, #0
   147bc:	d0f6      	beq.n	147ac <mfu_interface_setopt+0x74>
   147be:	6904      	ldr	r4, [r0, #16]
   147c0:	f7fe fdd8 	bl	13374 <rpc_dfu_client_message_free>
   147c4:	2c00      	cmp	r4, #0
   147c6:	d13c      	bne.n	14842 <mfu_interface_setopt+0x10a>
   147c8:	4620      	mov	r0, r4
   147ca:	b003      	add	sp, #12
   147cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147ce:	9800      	ldr	r0, [sp, #0]
   147d0:	6803      	ldr	r3, [r0, #0]
   147d2:	b11b      	cbz	r3, 147dc <mfu_interface_setopt+0xa4>
   147d4:	4618      	mov	r0, r3
   147d6:	f7fe fdd5 	bl	13384 <rpc_dfu_client_data_free>
   147da:	9800      	ldr	r0, [sp, #0]
   147dc:	f7fe fdca 	bl	13374 <rpc_dfu_client_message_free>
   147e0:	200c      	movs	r0, #12
   147e2:	f7fd f8ef 	bl	119c4 <bsd_os_errno_set>
   147e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147ea:	b003      	add	sp, #12
   147ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147ee:	2405      	movs	r4, #5
   147f0:	4625      	mov	r5, r4
   147f2:	e7b5      	b.n	14760 <mfu_interface_setopt+0x28>
   147f4:	2408      	movs	r4, #8
   147f6:	4625      	mov	r5, r4
   147f8:	e7b2      	b.n	14760 <mfu_interface_setopt+0x28>
   147fa:	b1b3      	cbz	r3, 1482a <mfu_interface_setopt+0xf2>
   147fc:	9a08      	ldr	r2, [sp, #32]
   147fe:	2a04      	cmp	r2, #4
   14800:	d113      	bne.n	1482a <mfu_interface_setopt+0xf2>
   14802:	2000      	movs	r0, #0
   14804:	681a      	ldr	r2, [r3, #0]
   14806:	4b16      	ldr	r3, [pc, #88]	; (14860 <mfu_interface_setopt+0x128>)
   14808:	601a      	str	r2, [r3, #0]
   1480a:	b003      	add	sp, #12
   1480c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1480e:	202a      	movs	r0, #42	; 0x2a
   14810:	f7fd f8d8 	bl	119c4 <bsd_os_errno_set>
   14814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14818:	b003      	add	sp, #12
   1481a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1481c:	203c      	movs	r0, #60	; 0x3c
   1481e:	f7fd f8d1 	bl	119c4 <bsd_os_errno_set>
   14822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14826:	b003      	add	sp, #12
   14828:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1482a:	2016      	movs	r0, #22
   1482c:	f7fd f8ca 	bl	119c4 <bsd_os_errno_set>
   14830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14834:	e7c9      	b.n	147ca <mfu_interface_setopt+0x92>
   14836:	2001      	movs	r0, #1
   14838:	f7fd f8c4 	bl	119c4 <bsd_os_errno_set>
   1483c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14840:	e7c3      	b.n	147ca <mfu_interface_setopt+0x92>
   14842:	4b08      	ldr	r3, [pc, #32]	; (14864 <mfu_interface_setopt+0x12c>)
   14844:	2008      	movs	r0, #8
   14846:	601c      	str	r4, [r3, #0]
   14848:	f7fd f8bc 	bl	119c4 <bsd_os_errno_set>
   1484c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14850:	e7bb      	b.n	147ca <mfu_interface_setopt+0x92>
   14852:	bf00      	nop
   14854:	20020784 	.word	0x20020784
   14858:	20024e44 	.word	0x20024e44
   1485c:	20020790 	.word	0x20020790
   14860:	2002078c 	.word	0x2002078c
   14864:	20020788 	.word	0x20020788

00014868 <mfu_interface_getopt>:
   14868:	f240 2003 	movw	r0, #515	; 0x203
   1486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14870:	4281      	cmp	r1, r0
   14872:	b082      	sub	sp, #8
   14874:	9e08      	ldr	r6, [sp, #32]
   14876:	f040 80ae 	bne.w	149d6 <mfu_interface_getopt+0x16e>
   1487a:	461d      	mov	r5, r3
   1487c:	2b00      	cmp	r3, #0
   1487e:	f000 80aa 	beq.w	149d6 <mfu_interface_getopt+0x16e>
   14882:	2e00      	cmp	r6, #0
   14884:	f000 80a7 	beq.w	149d6 <mfu_interface_getopt+0x16e>
   14888:	4b5e      	ldr	r3, [pc, #376]	; (14a04 <mfu_interface_getopt+0x19c>)
   1488a:	681b      	ldr	r3, [r3, #0]
   1488c:	3b02      	subs	r3, #2
   1488e:	2b01      	cmp	r3, #1
   14890:	f200 80a7 	bhi.w	149e2 <mfu_interface_getopt+0x17a>
   14894:	3a01      	subs	r2, #1
   14896:	2a13      	cmp	r2, #19
   14898:	d879      	bhi.n	1498e <mfu_interface_getopt+0x126>
   1489a:	e8df f002 	tbb	[pc, r2]
   1489e:	5f17      	.short	0x5f17
   148a0:	78787878 	.word	0x78787878
   148a4:	78787872 	.word	0x78787872
   148a8:	78787878 	.word	0x78787878
   148ac:	78787878 	.word	0x78787878
   148b0:	0a78      	.short	0x0a78
   148b2:	6833      	ldr	r3, [r6, #0]
   148b4:	2b04      	cmp	r3, #4
   148b6:	f040 808e 	bne.w	149d6 <mfu_interface_getopt+0x16e>
   148ba:	2200      	movs	r2, #0
   148bc:	4610      	mov	r0, r2
   148be:	4b52      	ldr	r3, [pc, #328]	; (14a08 <mfu_interface_getopt+0x1a0>)
   148c0:	6819      	ldr	r1, [r3, #0]
   148c2:	601a      	str	r2, [r3, #0]
   148c4:	6029      	str	r1, [r5, #0]
   148c6:	b002      	add	sp, #8
   148c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148cc:	6833      	ldr	r3, [r6, #0]
   148ce:	2b24      	cmp	r3, #36	; 0x24
   148d0:	f040 8081 	bne.w	149d6 <mfu_interface_getopt+0x16e>
   148d4:	2401      	movs	r4, #1
   148d6:	46a0      	mov	r8, r4
   148d8:	2100      	movs	r1, #0
   148da:	4668      	mov	r0, sp
   148dc:	f7fe fd22 	bl	13324 <rpc_dfu_client_request_alloc>
   148e0:	2800      	cmp	r0, #0
   148e2:	d146      	bne.n	14972 <mfu_interface_getopt+0x10a>
   148e4:	4949      	ldr	r1, [pc, #292]	; (14a0c <mfu_interface_getopt+0x1a4>)
   148e6:	9b00      	ldr	r3, [sp, #0]
   148e8:	880a      	ldrh	r2, [r1, #0]
   148ea:	f1b8 0f03 	cmp.w	r8, #3
   148ee:	f102 0201 	add.w	r2, r2, #1
   148f2:	b292      	uxth	r2, r2
   148f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   148f8:	7118      	strb	r0, [r3, #4]
   148fa:	800a      	strh	r2, [r1, #0]
   148fc:	60dc      	str	r4, [r3, #12]
   148fe:	7158      	strb	r0, [r3, #5]
   14900:	7198      	strb	r0, [r3, #6]
   14902:	71d8      	strb	r0, [r3, #7]
   14904:	d04b      	beq.n	1499e <mfu_interface_getopt+0x136>
   14906:	2104      	movs	r1, #4
   14908:	2200      	movs	r2, #0
   1490a:	4f41      	ldr	r7, [pc, #260]	; (14a10 <mfu_interface_getopt+0x1a8>)
   1490c:	6099      	str	r1, [r3, #8]
   1490e:	4618      	mov	r0, r3
   14910:	4641      	mov	r1, r8
   14912:	603a      	str	r2, [r7, #0]
   14914:	f7fe fd1a 	bl	1334c <rpc_dfu_client_request_send>
   14918:	2800      	cmp	r0, #0
   1491a:	d14d      	bne.n	149b8 <mfu_interface_getopt+0x150>
   1491c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14920:	ac02      	add	r4, sp, #8
   14922:	f844 3d04 	str.w	r3, [r4, #-4]!
   14926:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 14a04 <mfu_interface_getopt+0x19c>
   1492a:	e005      	b.n	14938 <mfu_interface_getopt+0xd0>
   1492c:	4621      	mov	r1, r4
   1492e:	4640      	mov	r0, r8
   14930:	f7fc ffb4 	bl	1189c <bsd_os_timedwait>
   14934:	2800      	cmp	r0, #0
   14936:	d137      	bne.n	149a8 <mfu_interface_getopt+0x140>
   14938:	6839      	ldr	r1, [r7, #0]
   1493a:	2900      	cmp	r1, #0
   1493c:	d0f6      	beq.n	1492c <mfu_interface_getopt+0xc4>
   1493e:	690c      	ldr	r4, [r1, #16]
   14940:	2c00      	cmp	r4, #0
   14942:	d154      	bne.n	149ee <mfu_interface_getopt+0x186>
   14944:	6832      	ldr	r2, [r6, #0]
   14946:	3114      	adds	r1, #20
   14948:	4628      	mov	r0, r5
   1494a:	f008 fe84 	bl	1d656 <memcpy>
   1494e:	6838      	ldr	r0, [r7, #0]
   14950:	f7fe fd10 	bl	13374 <rpc_dfu_client_message_free>
   14954:	4620      	mov	r0, r4
   14956:	b002      	add	sp, #8
   14958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1495c:	6833      	ldr	r3, [r6, #0]
   1495e:	2b04      	cmp	r3, #4
   14960:	d139      	bne.n	149d6 <mfu_interface_getopt+0x16e>
   14962:	2402      	movs	r4, #2
   14964:	2100      	movs	r1, #0
   14966:	4668      	mov	r0, sp
   14968:	46a0      	mov	r8, r4
   1496a:	f7fe fcdb 	bl	13324 <rpc_dfu_client_request_alloc>
   1496e:	2800      	cmp	r0, #0
   14970:	d0b8      	beq.n	148e4 <mfu_interface_getopt+0x7c>
   14972:	200c      	movs	r0, #12
   14974:	f7fd f826 	bl	119c4 <bsd_os_errno_set>
   14978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1497c:	b002      	add	sp, #8
   1497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14982:	6833      	ldr	r3, [r6, #0]
   14984:	2b04      	cmp	r3, #4
   14986:	d126      	bne.n	149d6 <mfu_interface_getopt+0x16e>
   14988:	2409      	movs	r4, #9
   1498a:	46a0      	mov	r8, r4
   1498c:	e7a4      	b.n	148d8 <mfu_interface_getopt+0x70>
   1498e:	202a      	movs	r0, #42	; 0x2a
   14990:	f7fd f818 	bl	119c4 <bsd_os_errno_set>
   14994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14998:	b002      	add	sp, #8
   1499a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1499e:	4a1d      	ldr	r2, [pc, #116]	; (14a14 <mfu_interface_getopt+0x1ac>)
   149a0:	2108      	movs	r1, #8
   149a2:	6812      	ldr	r2, [r2, #0]
   149a4:	611a      	str	r2, [r3, #16]
   149a6:	e7af      	b.n	14908 <mfu_interface_getopt+0xa0>
   149a8:	203c      	movs	r0, #60	; 0x3c
   149aa:	f7fd f80b 	bl	119c4 <bsd_os_errno_set>
   149ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149b2:	b002      	add	sp, #8
   149b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149b8:	9800      	ldr	r0, [sp, #0]
   149ba:	6803      	ldr	r3, [r0, #0]
   149bc:	b11b      	cbz	r3, 149c6 <mfu_interface_getopt+0x15e>
   149be:	4618      	mov	r0, r3
   149c0:	f7fe fce0 	bl	13384 <rpc_dfu_client_data_free>
   149c4:	9800      	ldr	r0, [sp, #0]
   149c6:	f7fe fcd5 	bl	13374 <rpc_dfu_client_message_free>
   149ca:	200c      	movs	r0, #12
   149cc:	f7fc fffa 	bl	119c4 <bsd_os_errno_set>
   149d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149d4:	e7d2      	b.n	1497c <mfu_interface_getopt+0x114>
   149d6:	2016      	movs	r0, #22
   149d8:	f7fc fff4 	bl	119c4 <bsd_os_errno_set>
   149dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149e0:	e771      	b.n	148c6 <mfu_interface_getopt+0x5e>
   149e2:	2001      	movs	r0, #1
   149e4:	f7fc ffee 	bl	119c4 <bsd_os_errno_set>
   149e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   149ec:	e76b      	b.n	148c6 <mfu_interface_getopt+0x5e>
   149ee:	4b06      	ldr	r3, [pc, #24]	; (14a08 <mfu_interface_getopt+0x1a0>)
   149f0:	2008      	movs	r0, #8
   149f2:	601c      	str	r4, [r3, #0]
   149f4:	f7fc ffe6 	bl	119c4 <bsd_os_errno_set>
   149f8:	6838      	ldr	r0, [r7, #0]
   149fa:	f7fe fcbb 	bl	13374 <rpc_dfu_client_message_free>
   149fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a02:	e760      	b.n	148c6 <mfu_interface_getopt+0x5e>
   14a04:	20020784 	.word	0x20020784
   14a08:	20020788 	.word	0x20020788
   14a0c:	20024e44 	.word	0x20024e44
   14a10:	20020790 	.word	0x20020790
   14a14:	2002078c 	.word	0x2002078c

00014a18 <bsd_platform_error_handler>:
   14a18:	b508      	push	{r3, lr}
   14a1a:	f7f7 ff3b 	bl	c894 <bsd_recoverable_error_handler>
   14a1e:	bd08      	pop	{r3, pc}

00014a20 <bsd_init>:
   14a20:	b510      	push	{r4, lr}
   14a22:	4c06      	ldr	r4, [pc, #24]	; (14a3c <bsd_init+0x1c>)
   14a24:	7823      	ldrb	r3, [r4, #0]
   14a26:	b92b      	cbnz	r3, 14a34 <bsd_init+0x14>
   14a28:	f000 f826 	bl	14a78 <bsd_platform_init>
   14a2c:	b908      	cbnz	r0, 14a32 <bsd_init+0x12>
   14a2e:	2301      	movs	r3, #1
   14a30:	7023      	strb	r3, [r4, #0]
   14a32:	bd10      	pop	{r4, pc}
   14a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a38:	bd10      	pop	{r4, pc}
   14a3a:	bf00      	nop
   14a3c:	2002658e 	.word	0x2002658e

00014a40 <bsd_shutdown>:
   14a40:	b510      	push	{r4, lr}
   14a42:	4c05      	ldr	r4, [pc, #20]	; (14a58 <bsd_shutdown+0x18>)
   14a44:	7823      	ldrb	r3, [r4, #0]
   14a46:	b123      	cbz	r3, 14a52 <bsd_shutdown+0x12>
   14a48:	f000 f87c 	bl	14b44 <bsd_platform_shutdown>
   14a4c:	b900      	cbnz	r0, 14a50 <bsd_shutdown+0x10>
   14a4e:	7020      	strb	r0, [r4, #0]
   14a50:	bd10      	pop	{r4, pc}
   14a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a56:	bd10      	pop	{r4, pc}
   14a58:	2002658e 	.word	0x2002658e

00014a5c <unimplemented_method>:
   14a5c:	b40f      	push	{r0, r1, r2, r3}
   14a5e:	b508      	push	{r3, lr}
   14a60:	202d      	movs	r0, #45	; 0x2d
   14a62:	f7fc ffaf 	bl	119c4 <bsd_os_errno_set>
   14a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a6e:	b004      	add	sp, #16
   14a70:	4770      	bx	lr
   14a72:	bf00      	nop

00014a74 <rpc_transport_ipc_fault_handler>:
   14a74:	f7ff bfd0 	b.w	14a18 <bsd_platform_error_handler>

00014a78 <bsd_platform_init>:
   14a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a7a:	b093      	sub	sp, #76	; 0x4c
   14a7c:	f7fe feba 	bl	137f4 <nrf_mem_init>
   14a80:	2800      	cmp	r0, #0
   14a82:	d14c      	bne.n	14b1e <bsd_platform_init+0xa6>
   14a84:	4928      	ldr	r1, [pc, #160]	; (14b28 <bsd_platform_init+0xb0>)
   14a86:	a801      	add	r0, sp, #4
   14a88:	f7fe ff28 	bl	138dc <nrf_mem_register>
   14a8c:	2800      	cmp	r0, #0
   14a8e:	d146      	bne.n	14b1e <bsd_platform_init+0xa6>
   14a90:	f7fd f882 	bl	11b98 <bsd_os_init>
   14a94:	f004 fa68 	bl	18f68 <rpc_framework_init>
   14a98:	2800      	cmp	r0, #0
   14a9a:	d140      	bne.n	14b1e <bsd_platform_init+0xa6>
   14a9c:	2320      	movs	r3, #32
   14a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14aa2:	2208      	movs	r2, #8
   14aa4:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   14aa8:	4f20      	ldr	r7, [pc, #128]	; (14b2c <bsd_platform_init+0xb4>)
   14aaa:	4e21      	ldr	r6, [pc, #132]	; (14b30 <bsd_platform_init+0xb8>)
   14aac:	9303      	str	r3, [sp, #12]
   14aae:	9305      	str	r3, [sp, #20]
   14ab0:	9307      	str	r3, [sp, #28]
   14ab2:	4d20      	ldr	r5, [pc, #128]	; (14b34 <bsd_platform_init+0xbc>)
   14ab4:	9109      	str	r1, [sp, #36]	; 0x24
   14ab6:	910d      	str	r1, [sp, #52]	; 0x34
   14ab8:	4c1f      	ldr	r4, [pc, #124]	; (14b38 <bsd_platform_init+0xc0>)
   14aba:	4920      	ldr	r1, [pc, #128]	; (14b3c <bsd_platform_init+0xc4>)
   14abc:	4b20      	ldr	r3, [pc, #128]	; (14b40 <bsd_platform_init+0xc8>)
   14abe:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   14ac2:	eb0d 0002 	add.w	r0, sp, r2
   14ac6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   14aca:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   14ace:	9702      	str	r7, [sp, #8]
   14ad0:	9604      	str	r6, [sp, #16]
   14ad2:	9506      	str	r5, [sp, #24]
   14ad4:	9408      	str	r4, [sp, #32]
   14ad6:	910a      	str	r1, [sp, #40]	; 0x28
   14ad8:	930c      	str	r3, [sp, #48]	; 0x30
   14ada:	f000 fbe7 	bl	152ac <rpc_transport_ipc_init>
   14ade:	b108      	cbz	r0, 14ae4 <bsd_platform_init+0x6c>
   14ae0:	b013      	add	sp, #76	; 0x4c
   14ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ae4:	f003 ffd0 	bl	18a88 <interface_init>
   14ae8:	b9c8      	cbnz	r0, 14b1e <bsd_platform_init+0xa6>
   14aea:	f7fe fac9 	bl	13080 <at_interface_init>
   14aee:	b9b0      	cbnz	r0, 14b1e <bsd_platform_init+0xa6>
   14af0:	f002 fd08 	bl	17504 <ip_interface_init>
   14af4:	b998      	cbnz	r0, 14b1e <bsd_platform_init+0xa6>
   14af6:	f7ff f8e9 	bl	13ccc <tls_interface_init>
   14afa:	b980      	cbnz	r0, 14b1e <bsd_platform_init+0xa6>
   14afc:	f7ff fcb2 	bl	14464 <mfu_interface_init>
   14b00:	b968      	cbnz	r0, 14b1e <bsd_platform_init+0xa6>
   14b02:	f001 fac3 	bl	1608c <pdn_interface_init>
   14b06:	b950      	cbnz	r0, 14b1e <bsd_platform_init+0xa6>
   14b08:	f005 fcf8 	bl	1a4fc <gnss_interface_init>
   14b0c:	b938      	cbnz	r0, 14b1e <bsd_platform_init+0xa6>
   14b0e:	f7fd ff79 	bl	12a04 <logobj_interface_init>
   14b12:	3000      	adds	r0, #0
   14b14:	bf18      	it	ne
   14b16:	2001      	movne	r0, #1
   14b18:	4240      	negs	r0, r0
   14b1a:	b013      	add	sp, #76	; 0x4c
   14b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b22:	b013      	add	sp, #76	; 0x4c
   14b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b26:	bf00      	nop
   14b28:	0001f79c 	.word	0x0001f79c
   14b2c:	20010000 	.word	0x20010000
   14b30:	20010040 	.word	0x20010040
   14b34:	20010020 	.word	0x20010020
   14b38:	20017060 	.word	0x20017060
   14b3c:	20010060 	.word	0x20010060
   14b40:	20013060 	.word	0x20013060

00014b44 <bsd_platform_shutdown>:
   14b44:	b508      	push	{r3, lr}
   14b46:	f004 f947 	bl	18dd8 <interface_shutdown>
   14b4a:	f000 fc13 	bl	15374 <rpc_transport_ipc_shutdown>
   14b4e:	2000      	movs	r0, #0
   14b50:	bd08      	pop	{r3, pc}
   14b52:	bf00      	nop

00014b54 <bsd_platform_af_method_table_get>:
   14b54:	2805      	cmp	r0, #5
   14b56:	d02a      	beq.n	14bae <bsd_platform_af_method_table_get+0x5a>
   14b58:	b508      	push	{r3, lr}
   14b5a:	d914      	bls.n	14b86 <bsd_platform_af_method_table_get+0x32>
   14b5c:	280a      	cmp	r0, #10
   14b5e:	d016      	beq.n	14b8e <bsd_platform_af_method_table_get+0x3a>
   14b60:	2866      	cmp	r0, #102	; 0x66
   14b62:	d10b      	bne.n	14b7c <bsd_platform_af_method_table_get+0x28>
   14b64:	f240 2302 	movw	r3, #514	; 0x202
   14b68:	429a      	cmp	r2, r3
   14b6a:	d032      	beq.n	14bd2 <bsd_platform_af_method_table_get+0x7e>
   14b6c:	f240 2305 	movw	r3, #517	; 0x205
   14b70:	429a      	cmp	r2, r3
   14b72:	d032      	beq.n	14bda <bsd_platform_af_method_table_get+0x86>
   14b74:	f240 2301 	movw	r3, #513	; 0x201
   14b78:	429a      	cmp	r2, r3
   14b7a:	d02c      	beq.n	14bd6 <bsd_platform_af_method_table_get+0x82>
   14b7c:	2016      	movs	r0, #22
   14b7e:	f7fc ff21 	bl	119c4 <bsd_os_errno_set>
   14b82:	2000      	movs	r0, #0
   14b84:	bd08      	pop	{r3, pc}
   14b86:	2801      	cmp	r0, #1
   14b88:	d016      	beq.n	14bb8 <bsd_platform_af_method_table_get+0x64>
   14b8a:	2802      	cmp	r0, #2
   14b8c:	d1f6      	bne.n	14b7c <bsd_platform_af_method_table_get+0x28>
   14b8e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14b92:	2a0a      	cmp	r2, #10
   14b94:	d819      	bhi.n	14bca <bsd_platform_af_method_table_get+0x76>
   14b96:	2301      	movs	r3, #1
   14b98:	f240 4103 	movw	r1, #1027	; 0x403
   14b9c:	4810      	ldr	r0, [pc, #64]	; (14be0 <bsd_platform_af_method_table_get+0x8c>)
   14b9e:	fa03 f202 	lsl.w	r2, r3, r2
   14ba2:	420a      	tst	r2, r1
   14ba4:	f100 0328 	add.w	r3, r0, #40	; 0x28
   14ba8:	bf18      	it	ne
   14baa:	4618      	movne	r0, r3
   14bac:	bd08      	pop	{r3, pc}
   14bae:	2903      	cmp	r1, #3
   14bb0:	480c      	ldr	r0, [pc, #48]	; (14be4 <bsd_platform_af_method_table_get+0x90>)
   14bb2:	bf18      	it	ne
   14bb4:	2000      	movne	r0, #0
   14bb6:	4770      	bx	lr
   14bb8:	f240 2303 	movw	r3, #515	; 0x203
   14bbc:	429a      	cmp	r2, r3
   14bbe:	d006      	beq.n	14bce <bsd_platform_af_method_table_get+0x7a>
   14bc0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14bc4:	d1da      	bne.n	14b7c <bsd_platform_af_method_table_get+0x28>
   14bc6:	4808      	ldr	r0, [pc, #32]	; (14be8 <bsd_platform_af_method_table_get+0x94>)
   14bc8:	bd08      	pop	{r3, pc}
   14bca:	4805      	ldr	r0, [pc, #20]	; (14be0 <bsd_platform_af_method_table_get+0x8c>)
   14bcc:	bd08      	pop	{r3, pc}
   14bce:	4807      	ldr	r0, [pc, #28]	; (14bec <bsd_platform_af_method_table_get+0x98>)
   14bd0:	bd08      	pop	{r3, pc}
   14bd2:	4807      	ldr	r0, [pc, #28]	; (14bf0 <bsd_platform_af_method_table_get+0x9c>)
   14bd4:	bd08      	pop	{r3, pc}
   14bd6:	4807      	ldr	r0, [pc, #28]	; (14bf4 <bsd_platform_af_method_table_get+0xa0>)
   14bd8:	bd08      	pop	{r3, pc}
   14bda:	4807      	ldr	r0, [pc, #28]	; (14bf8 <bsd_platform_af_method_table_get+0xa4>)
   14bdc:	bd08      	pop	{r3, pc}
   14bde:	bf00      	nop
   14be0:	0001f66c 	.word	0x0001f66c
   14be4:	0001f75c 	.word	0x0001f75c
   14be8:	0001f70c 	.word	0x0001f70c
   14bec:	0001f6bc 	.word	0x0001f6bc
   14bf0:	0001f6e4 	.word	0x0001f6e4
   14bf4:	0001f644 	.word	0x0001f644
   14bf8:	0001f734 	.word	0x0001f734

00014bfc <bsd_platform_fd_method_table_get>:
   14bfc:	b538      	push	{r3, r4, r5, lr}
   14bfe:	4605      	mov	r5, r0
   14c00:	f004 f85e 	bl	18cc0 <interface_socket_from_handle_get>
   14c04:	4604      	mov	r4, r0
   14c06:	b950      	cbnz	r0, 14c1e <bsd_platform_fd_method_table_get+0x22>
   14c08:	4b2a      	ldr	r3, [pc, #168]	; (14cb4 <bsd_platform_fd_method_table_get+0xb8>)
   14c0a:	43ab      	bics	r3, r5
   14c0c:	d032      	beq.n	14c74 <bsd_platform_fd_method_table_get+0x78>
   14c0e:	4b2a      	ldr	r3, [pc, #168]	; (14cb8 <bsd_platform_fd_method_table_get+0xbc>)
   14c10:	43ab      	bics	r3, r5
   14c12:	d043      	beq.n	14c9c <bsd_platform_fd_method_table_get+0xa0>
   14c14:	4b29      	ldr	r3, [pc, #164]	; (14cbc <bsd_platform_fd_method_table_get+0xc0>)
   14c16:	43ab      	bics	r3, r5
   14c18:	d146      	bne.n	14ca8 <bsd_platform_fd_method_table_get+0xac>
   14c1a:	4829      	ldr	r0, [pc, #164]	; (14cc0 <bsd_platform_fd_method_table_get+0xc4>)
   14c1c:	bd38      	pop	{r3, r4, r5, pc}
   14c1e:	68c3      	ldr	r3, [r0, #12]
   14c20:	6942      	ldr	r2, [r0, #20]
   14c22:	2b05      	cmp	r3, #5
   14c24:	d034      	beq.n	14c90 <bsd_platform_fd_method_table_get+0x94>
   14c26:	d911      	bls.n	14c4c <bsd_platform_fd_method_table_get+0x50>
   14c28:	2b0a      	cmp	r3, #10
   14c2a:	d013      	beq.n	14c54 <bsd_platform_fd_method_table_get+0x58>
   14c2c:	2b66      	cmp	r3, #102	; 0x66
   14c2e:	d12a      	bne.n	14c86 <bsd_platform_fd_method_table_get+0x8a>
   14c30:	f240 2302 	movw	r3, #514	; 0x202
   14c34:	429a      	cmp	r2, r3
   14c36:	d031      	beq.n	14c9c <bsd_platform_fd_method_table_get+0xa0>
   14c38:	f240 2305 	movw	r3, #517	; 0x205
   14c3c:	429a      	cmp	r2, r3
   14c3e:	d031      	beq.n	14ca4 <bsd_platform_fd_method_table_get+0xa8>
   14c40:	f240 2301 	movw	r3, #513	; 0x201
   14c44:	429a      	cmp	r2, r3
   14c46:	d11e      	bne.n	14c86 <bsd_platform_fd_method_table_get+0x8a>
   14c48:	481e      	ldr	r0, [pc, #120]	; (14cc4 <bsd_platform_fd_method_table_get+0xc8>)
   14c4a:	bd38      	pop	{r3, r4, r5, pc}
   14c4c:	2b01      	cmp	r3, #1
   14c4e:	d013      	beq.n	14c78 <bsd_platform_fd_method_table_get+0x7c>
   14c50:	2b02      	cmp	r3, #2
   14c52:	d118      	bne.n	14c86 <bsd_platform_fd_method_table_get+0x8a>
   14c54:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14c58:	2a0a      	cmp	r2, #10
   14c5a:	d821      	bhi.n	14ca0 <bsd_platform_fd_method_table_get+0xa4>
   14c5c:	2301      	movs	r3, #1
   14c5e:	f240 4103 	movw	r1, #1027	; 0x403
   14c62:	4819      	ldr	r0, [pc, #100]	; (14cc8 <bsd_platform_fd_method_table_get+0xcc>)
   14c64:	fa03 f202 	lsl.w	r2, r3, r2
   14c68:	420a      	tst	r2, r1
   14c6a:	f100 0428 	add.w	r4, r0, #40	; 0x28
   14c6e:	bf18      	it	ne
   14c70:	4620      	movne	r0, r4
   14c72:	bd38      	pop	{r3, r4, r5, pc}
   14c74:	4815      	ldr	r0, [pc, #84]	; (14ccc <bsd_platform_fd_method_table_get+0xd0>)
   14c76:	bd38      	pop	{r3, r4, r5, pc}
   14c78:	f240 2303 	movw	r3, #515	; 0x203
   14c7c:	429a      	cmp	r2, r3
   14c7e:	d0f9      	beq.n	14c74 <bsd_platform_fd_method_table_get+0x78>
   14c80:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14c84:	d0c9      	beq.n	14c1a <bsd_platform_fd_method_table_get+0x1e>
   14c86:	2016      	movs	r0, #22
   14c88:	f7fc fe9c 	bl	119c4 <bsd_os_errno_set>
   14c8c:	2000      	movs	r0, #0
   14c8e:	bd38      	pop	{r3, r4, r5, pc}
   14c90:	6903      	ldr	r3, [r0, #16]
   14c92:	480f      	ldr	r0, [pc, #60]	; (14cd0 <bsd_platform_fd_method_table_get+0xd4>)
   14c94:	2b03      	cmp	r3, #3
   14c96:	bf18      	it	ne
   14c98:	2000      	movne	r0, #0
   14c9a:	bd38      	pop	{r3, r4, r5, pc}
   14c9c:	480d      	ldr	r0, [pc, #52]	; (14cd4 <bsd_platform_fd_method_table_get+0xd8>)
   14c9e:	bd38      	pop	{r3, r4, r5, pc}
   14ca0:	4809      	ldr	r0, [pc, #36]	; (14cc8 <bsd_platform_fd_method_table_get+0xcc>)
   14ca2:	bd38      	pop	{r3, r4, r5, pc}
   14ca4:	480c      	ldr	r0, [pc, #48]	; (14cd8 <bsd_platform_fd_method_table_get+0xdc>)
   14ca6:	bd38      	pop	{r3, r4, r5, pc}
   14ca8:	2009      	movs	r0, #9
   14caa:	f7fc fe8b 	bl	119c4 <bsd_os_errno_set>
   14cae:	4620      	mov	r0, r4
   14cb0:	bd38      	pop	{r3, r4, r5, pc}
   14cb2:	bf00      	nop
   14cb4:	49765432 	.word	0x49765432
   14cb8:	789a0000 	.word	0x789a0000
   14cbc:	49765443 	.word	0x49765443
   14cc0:	0001f70c 	.word	0x0001f70c
   14cc4:	0001f644 	.word	0x0001f644
   14cc8:	0001f66c 	.word	0x0001f66c
   14ccc:	0001f6bc 	.word	0x0001f6bc
   14cd0:	0001f75c 	.word	0x0001f75c
   14cd4:	0001f6e4 	.word	0x0001f6e4
   14cd8:	0001f734 	.word	0x0001f734

00014cdc <bsd_platform_getaddrinfo>:
   14cdc:	f003 bb58 	b.w	18390 <ip_interface_getaddrinfo>

00014ce0 <bsd_platform_freeaddrinfo>:
   14ce0:	f003 bc4c 	b.w	1857c <ip_interface_freeaddrinfo>

00014ce4 <bsd_platform_poll>:
   14ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14ce8:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   14cec:	b083      	sub	sp, #12
   14cee:	9200      	str	r2, [sp, #0]
   14cf0:	2800      	cmp	r0, #0
   14cf2:	d048      	beq.n	14d86 <bsd_platform_poll+0xa2>
   14cf4:	1e4b      	subs	r3, r1, #1
   14cf6:	2b07      	cmp	r3, #7
   14cf8:	d845      	bhi.n	14d86 <bsd_platform_poll+0xa2>
   14cfa:	4680      	mov	r8, r0
   14cfc:	4605      	mov	r5, r0
   14cfe:	2400      	movs	r4, #0
   14d00:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   14d04:	88ab      	ldrh	r3, [r5, #4]
   14d06:	6828      	ldr	r0, [r5, #0]
   14d08:	f003 0303 	and.w	r3, r3, #3
   14d0c:	a901      	add	r1, sp, #4
   14d0e:	f043 061c 	orr.w	r6, r3, #28
   14d12:	f003 ffe3 	bl	18cdc <interface_socket_event_get>
   14d16:	9b01      	ldr	r3, [sp, #4]
   14d18:	3508      	adds	r5, #8
   14d1a:	4033      	ands	r3, r6
   14d1c:	f825 3c02 	strh.w	r3, [r5, #-2]
   14d20:	b103      	cbz	r3, 14d24 <bsd_platform_poll+0x40>
   14d22:	3401      	adds	r4, #1
   14d24:	42af      	cmp	r7, r5
   14d26:	d1ed      	bne.n	14d04 <bsd_platform_poll+0x20>
   14d28:	bb9c      	cbnz	r4, 14d92 <bsd_platform_poll+0xae>
   14d2a:	4669      	mov	r1, sp
   14d2c:	4640      	mov	r0, r8
   14d2e:	f7fc fdb5 	bl	1189c <bsd_os_timedwait>
   14d32:	4607      	mov	r7, r0
   14d34:	b108      	cbz	r0, 14d3a <bsd_platform_poll+0x56>
   14d36:	283c      	cmp	r0, #60	; 0x3c
   14d38:	d11d      	bne.n	14d76 <bsd_platform_poll+0x92>
   14d3a:	46c1      	mov	r9, r8
   14d3c:	2600      	movs	r6, #0
   14d3e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   14d42:	f8d9 0000 	ldr.w	r0, [r9]
   14d46:	f003 0303 	and.w	r3, r3, #3
   14d4a:	a901      	add	r1, sp, #4
   14d4c:	f043 041c 	orr.w	r4, r3, #28
   14d50:	f003 ffc4 	bl	18cdc <interface_socket_event_get>
   14d54:	9b01      	ldr	r3, [sp, #4]
   14d56:	f109 0908 	add.w	r9, r9, #8
   14d5a:	4023      	ands	r3, r4
   14d5c:	f829 3c02 	strh.w	r3, [r9, #-2]
   14d60:	b103      	cbz	r3, 14d64 <bsd_platform_poll+0x80>
   14d62:	3601      	adds	r6, #1
   14d64:	454d      	cmp	r5, r9
   14d66:	d1ea      	bne.n	14d3e <bsd_platform_poll+0x5a>
   14d68:	b90e      	cbnz	r6, 14d6e <bsd_platform_poll+0x8a>
   14d6a:	2f00      	cmp	r7, #0
   14d6c:	d0dd      	beq.n	14d2a <bsd_platform_poll+0x46>
   14d6e:	4630      	mov	r0, r6
   14d70:	b003      	add	sp, #12
   14d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d76:	2023      	movs	r0, #35	; 0x23
   14d78:	f7fc fe24 	bl	119c4 <bsd_os_errno_set>
   14d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d80:	b003      	add	sp, #12
   14d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d86:	2016      	movs	r0, #22
   14d88:	f7fc fe1c 	bl	119c4 <bsd_os_errno_set>
   14d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d90:	e7ee      	b.n	14d70 <bsd_platform_poll+0x8c>
   14d92:	4620      	mov	r0, r4
   14d94:	e7ec      	b.n	14d70 <bsd_platform_poll+0x8c>
   14d96:	bf00      	nop

00014d98 <bsd_platform_fcntl>:
   14d98:	b508      	push	{r3, lr}
   14d9a:	4b06      	ldr	r3, [pc, #24]	; (14db4 <bsd_platform_fcntl+0x1c>)
   14d9c:	4383      	bics	r3, r0
   14d9e:	d003      	beq.n	14da8 <bsd_platform_fcntl+0x10>
   14da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14da4:	f004 b846 	b.w	18e34 <interface_socket_fcntl>
   14da8:	202d      	movs	r0, #45	; 0x2d
   14daa:	f7fc fe0b 	bl	119c4 <bsd_os_errno_set>
   14dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14db2:	bd08      	pop	{r3, pc}
   14db4:	49765432 	.word	0x49765432

00014db8 <ipc_trace_init>:
   14db8:	4b01      	ldr	r3, [pc, #4]	; (14dc0 <ipc_trace_init+0x8>)
   14dba:	6018      	str	r0, [r3, #0]
   14dbc:	4770      	bx	lr
   14dbe:	bf00      	nop
   14dc0:	200207a0 	.word	0x200207a0

00014dc4 <bsd_os_trace_irq_handler>:
   14dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dc6:	4b6c      	ldr	r3, [pc, #432]	; (14f78 <bsd_os_trace_irq_handler+0x1b4>)
   14dc8:	b083      	sub	sp, #12
   14dca:	781b      	ldrb	r3, [r3, #0]
   14dcc:	2b00      	cmp	r3, #0
   14dce:	f000 80ad 	beq.w	14f2c <bsd_os_trace_irq_handler+0x168>
   14dd2:	4b6a      	ldr	r3, [pc, #424]	; (14f7c <bsd_os_trace_irq_handler+0x1b8>)
   14dd4:	681c      	ldr	r4, [r3, #0]
   14dd6:	68a2      	ldr	r2, [r4, #8]
   14dd8:	6863      	ldr	r3, [r4, #4]
   14dda:	429a      	cmp	r2, r3
   14ddc:	d02d      	beq.n	14e3a <bsd_os_trace_irq_handler+0x76>
   14dde:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14de2:	f8ad 3000 	strh.w	r3, [sp]
   14de6:	7823      	ldrb	r3, [r4, #0]
   14de8:	466e      	mov	r6, sp
   14dea:	f88d 3004 	strb.w	r3, [sp, #4]
   14dee:	6863      	ldr	r3, [r4, #4]
   14df0:	2105      	movs	r1, #5
   14df2:	429a      	cmp	r2, r3
   14df4:	bf2a      	itet	cs
   14df6:	6927      	ldrcs	r7, [r4, #16]
   14df8:	1a9f      	subcc	r7, r3, r2
   14dfa:	1abf      	subcs	r7, r7, r2
   14dfc:	429a      	cmp	r2, r3
   14dfe:	bf94      	ite	ls
   14e00:	2500      	movls	r5, #0
   14e02:	68e5      	ldrhi	r5, [r4, #12]
   14e04:	b2bf      	uxth	r7, r7
   14e06:	bf88      	it	hi
   14e08:	1b5b      	subhi	r3, r3, r5
   14e0a:	4630      	mov	r0, r6
   14e0c:	bf88      	it	hi
   14e0e:	b29d      	uxthhi	r5, r3
   14e10:	f8ad 7002 	strh.w	r7, [sp, #2]
   14e14:	f7fc fed8 	bl	11bc8 <bsd_os_trace_put>
   14e18:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14e1c:	68a0      	ldr	r0, [r4, #8]
   14e1e:	f7fc fed3 	bl	11bc8 <bsd_os_trace_put>
   14e22:	68a3      	ldr	r3, [r4, #8]
   14e24:	6922      	ldr	r2, [r4, #16]
   14e26:	441f      	add	r7, r3
   14e28:	4297      	cmp	r7, r2
   14e2a:	bf08      	it	eq
   14e2c:	68e3      	ldreq	r3, [r4, #12]
   14e2e:	60a7      	str	r7, [r4, #8]
   14e30:	bf08      	it	eq
   14e32:	60a3      	streq	r3, [r4, #8]
   14e34:	2d00      	cmp	r5, #0
   14e36:	f040 808d 	bne.w	14f54 <bsd_os_trace_irq_handler+0x190>
   14e3a:	4b51      	ldr	r3, [pc, #324]	; (14f80 <bsd_os_trace_irq_handler+0x1bc>)
   14e3c:	681c      	ldr	r4, [r3, #0]
   14e3e:	68a2      	ldr	r2, [r4, #8]
   14e40:	6863      	ldr	r3, [r4, #4]
   14e42:	429a      	cmp	r2, r3
   14e44:	d02c      	beq.n	14ea0 <bsd_os_trace_irq_handler+0xdc>
   14e46:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14e4a:	f8ad 3000 	strh.w	r3, [sp]
   14e4e:	7823      	ldrb	r3, [r4, #0]
   14e50:	466e      	mov	r6, sp
   14e52:	f88d 3004 	strb.w	r3, [sp, #4]
   14e56:	6863      	ldr	r3, [r4, #4]
   14e58:	2105      	movs	r1, #5
   14e5a:	429a      	cmp	r2, r3
   14e5c:	bf2a      	itet	cs
   14e5e:	6927      	ldrcs	r7, [r4, #16]
   14e60:	1a9f      	subcc	r7, r3, r2
   14e62:	1abf      	subcs	r7, r7, r2
   14e64:	429a      	cmp	r2, r3
   14e66:	bf94      	ite	ls
   14e68:	2500      	movls	r5, #0
   14e6a:	68e5      	ldrhi	r5, [r4, #12]
   14e6c:	b2bf      	uxth	r7, r7
   14e6e:	bf88      	it	hi
   14e70:	1b5b      	subhi	r3, r3, r5
   14e72:	4630      	mov	r0, r6
   14e74:	bf88      	it	hi
   14e76:	b29d      	uxthhi	r5, r3
   14e78:	f8ad 7002 	strh.w	r7, [sp, #2]
   14e7c:	f7fc fea4 	bl	11bc8 <bsd_os_trace_put>
   14e80:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14e84:	68a0      	ldr	r0, [r4, #8]
   14e86:	f7fc fe9f 	bl	11bc8 <bsd_os_trace_put>
   14e8a:	68a3      	ldr	r3, [r4, #8]
   14e8c:	6922      	ldr	r2, [r4, #16]
   14e8e:	441f      	add	r7, r3
   14e90:	4297      	cmp	r7, r2
   14e92:	bf08      	it	eq
   14e94:	68e3      	ldreq	r3, [r4, #12]
   14e96:	60a7      	str	r7, [r4, #8]
   14e98:	bf08      	it	eq
   14e9a:	60a3      	streq	r3, [r4, #8]
   14e9c:	2d00      	cmp	r5, #0
   14e9e:	d148      	bne.n	14f32 <bsd_os_trace_irq_handler+0x16e>
   14ea0:	4b38      	ldr	r3, [pc, #224]	; (14f84 <bsd_os_trace_irq_handler+0x1c0>)
   14ea2:	681c      	ldr	r4, [r3, #0]
   14ea4:	68a2      	ldr	r2, [r4, #8]
   14ea6:	6863      	ldr	r3, [r4, #4]
   14ea8:	429a      	cmp	r2, r3
   14eaa:	d02b      	beq.n	14f04 <bsd_os_trace_irq_handler+0x140>
   14eac:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14eb0:	f8ad 3000 	strh.w	r3, [sp]
   14eb4:	7823      	ldrb	r3, [r4, #0]
   14eb6:	466e      	mov	r6, sp
   14eb8:	f88d 3004 	strb.w	r3, [sp, #4]
   14ebc:	6863      	ldr	r3, [r4, #4]
   14ebe:	2105      	movs	r1, #5
   14ec0:	429a      	cmp	r2, r3
   14ec2:	bf2a      	itet	cs
   14ec4:	6927      	ldrcs	r7, [r4, #16]
   14ec6:	1a9f      	subcc	r7, r3, r2
   14ec8:	1abf      	subcs	r7, r7, r2
   14eca:	429a      	cmp	r2, r3
   14ecc:	bf94      	ite	ls
   14ece:	2500      	movls	r5, #0
   14ed0:	68e5      	ldrhi	r5, [r4, #12]
   14ed2:	b2bf      	uxth	r7, r7
   14ed4:	bf88      	it	hi
   14ed6:	1b5b      	subhi	r3, r3, r5
   14ed8:	4630      	mov	r0, r6
   14eda:	bf88      	it	hi
   14edc:	b29d      	uxthhi	r5, r3
   14ede:	f8ad 7002 	strh.w	r7, [sp, #2]
   14ee2:	f7fc fe71 	bl	11bc8 <bsd_os_trace_put>
   14ee6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14eea:	68a0      	ldr	r0, [r4, #8]
   14eec:	f7fc fe6c 	bl	11bc8 <bsd_os_trace_put>
   14ef0:	68a3      	ldr	r3, [r4, #8]
   14ef2:	6922      	ldr	r2, [r4, #16]
   14ef4:	441f      	add	r7, r3
   14ef6:	4297      	cmp	r7, r2
   14ef8:	bf08      	it	eq
   14efa:	68e3      	ldreq	r3, [r4, #12]
   14efc:	60a7      	str	r7, [r4, #8]
   14efe:	bf08      	it	eq
   14f00:	60a3      	streq	r3, [r4, #8]
   14f02:	b90d      	cbnz	r5, 14f08 <bsd_os_trace_irq_handler+0x144>
   14f04:	b003      	add	sp, #12
   14f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f08:	4630      	mov	r0, r6
   14f0a:	2105      	movs	r1, #5
   14f0c:	f8ad 5002 	strh.w	r5, [sp, #2]
   14f10:	f7fc fe5a 	bl	11bc8 <bsd_os_trace_put>
   14f14:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f18:	68e0      	ldr	r0, [r4, #12]
   14f1a:	f7fc fe55 	bl	11bc8 <bsd_os_trace_put>
   14f1e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14f22:	68e3      	ldr	r3, [r4, #12]
   14f24:	4413      	add	r3, r2
   14f26:	60a3      	str	r3, [r4, #8]
   14f28:	b003      	add	sp, #12
   14f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f2c:	f7fc fe0e 	bl	11b4c <bsd_os_trace_irq_clear>
   14f30:	e74f      	b.n	14dd2 <bsd_os_trace_irq_handler+0xe>
   14f32:	2105      	movs	r1, #5
   14f34:	4630      	mov	r0, r6
   14f36:	f8ad 5002 	strh.w	r5, [sp, #2]
   14f3a:	f7fc fe45 	bl	11bc8 <bsd_os_trace_put>
   14f3e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f42:	68e0      	ldr	r0, [r4, #12]
   14f44:	f7fc fe40 	bl	11bc8 <bsd_os_trace_put>
   14f48:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14f4c:	68e3      	ldr	r3, [r4, #12]
   14f4e:	4413      	add	r3, r2
   14f50:	60a3      	str	r3, [r4, #8]
   14f52:	e7a5      	b.n	14ea0 <bsd_os_trace_irq_handler+0xdc>
   14f54:	2105      	movs	r1, #5
   14f56:	4630      	mov	r0, r6
   14f58:	f8ad 5002 	strh.w	r5, [sp, #2]
   14f5c:	f7fc fe34 	bl	11bc8 <bsd_os_trace_put>
   14f60:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f64:	68e0      	ldr	r0, [r4, #12]
   14f66:	f7fc fe2f 	bl	11bc8 <bsd_os_trace_put>
   14f6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14f6e:	68e3      	ldr	r3, [r4, #12]
   14f70:	4413      	add	r3, r2
   14f72:	60a3      	str	r3, [r4, #8]
   14f74:	e761      	b.n	14e3a <bsd_os_trace_irq_handler+0x76>
   14f76:	bf00      	nop
   14f78:	2002658f 	.word	0x2002658f
   14f7c:	2002079c 	.word	0x2002079c
   14f80:	20020794 	.word	0x20020794
   14f84:	20020798 	.word	0x20020798

00014f88 <ipc_trace_handle>:
   14f88:	2200      	movs	r2, #0
   14f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f8e:	4bb0      	ldr	r3, [pc, #704]	; (15250 <_flash_used+0x80>)
   14f90:	b083      	sub	sp, #12
   14f92:	681b      	ldr	r3, [r3, #0]
   14f94:	6919      	ldr	r1, [r3, #16]
   14f96:	695c      	ldr	r4, [r3, #20]
   14f98:	7c18      	ldrb	r0, [r3, #16]
   14f9a:	741a      	strb	r2, [r3, #16]
   14f9c:	7c58      	ldrb	r0, [r3, #17]
   14f9e:	745a      	strb	r2, [r3, #17]
   14fa0:	7c98      	ldrb	r0, [r3, #18]
   14fa2:	749a      	strb	r2, [r3, #18]
   14fa4:	7cd8      	ldrb	r0, [r3, #19]
   14fa6:	74da      	strb	r2, [r3, #19]
   14fa8:	7d18      	ldrb	r0, [r3, #20]
   14faa:	751a      	strb	r2, [r3, #20]
   14fac:	7d58      	ldrb	r0, [r3, #21]
   14fae:	755a      	strb	r2, [r3, #21]
   14fb0:	7d98      	ldrb	r0, [r3, #22]
   14fb2:	759a      	strb	r2, [r3, #22]
   14fb4:	7dd8      	ldrb	r0, [r3, #23]
   14fb6:	75da      	strb	r2, [r3, #23]
   14fb8:	b1b9      	cbz	r1, 14fea <ipc_trace_handle+0x62>
   14fba:	3901      	subs	r1, #1
   14fbc:	2903      	cmp	r1, #3
   14fbe:	d814      	bhi.n	14fea <ipc_trace_handle+0x62>
   14fc0:	e8df f011 	tbh	[pc, r1, lsl #1]
   14fc4:	010300d6 	.word	0x010300d6
   14fc8:	00160004 	.word	0x00160004
   14fcc:	2501      	movs	r5, #1
   14fce:	2003      	movs	r0, #3
   14fd0:	2200      	movs	r2, #0
   14fd2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14fd6:	4c9f      	ldr	r4, [pc, #636]	; (15254 <_flash_used+0x84>)
   14fd8:	7025      	strb	r5, [r4, #0]
   14fda:	7a1c      	ldrb	r4, [r3, #8]
   14fdc:	7218      	strb	r0, [r3, #8]
   14fde:	7a58      	ldrb	r0, [r3, #9]
   14fe0:	725a      	strb	r2, [r3, #9]
   14fe2:	7a98      	ldrb	r0, [r3, #10]
   14fe4:	729a      	strb	r2, [r3, #10]
   14fe6:	7ada      	ldrb	r2, [r3, #11]
   14fe8:	72d9      	strb	r1, [r3, #11]
   14fea:	b003      	add	sp, #12
   14fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ff0:	2104      	movs	r1, #4
   14ff2:	2200      	movs	r2, #0
   14ff4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   14ff8:	7a1c      	ldrb	r4, [r3, #8]
   14ffa:	7219      	strb	r1, [r3, #8]
   14ffc:	7a59      	ldrb	r1, [r3, #9]
   14ffe:	725a      	strb	r2, [r3, #9]
   15000:	4994      	ldr	r1, [pc, #592]	; (15254 <_flash_used+0x84>)
   15002:	7a9c      	ldrb	r4, [r3, #10]
   15004:	729a      	strb	r2, [r3, #10]
   15006:	7adc      	ldrb	r4, [r3, #11]
   15008:	72d8      	strb	r0, [r3, #11]
   1500a:	700a      	strb	r2, [r1, #0]
   1500c:	780b      	ldrb	r3, [r1, #0]
   1500e:	2b00      	cmp	r3, #0
   15010:	f000 8117 	beq.w	15242 <_flash_used+0x72>
   15014:	4b90      	ldr	r3, [pc, #576]	; (15258 <_flash_used+0x88>)
   15016:	681c      	ldr	r4, [r3, #0]
   15018:	68a2      	ldr	r2, [r4, #8]
   1501a:	6863      	ldr	r3, [r4, #4]
   1501c:	429a      	cmp	r2, r3
   1501e:	d02d      	beq.n	1507c <ipc_trace_handle+0xf4>
   15020:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   15024:	f8ad 3000 	strh.w	r3, [sp]
   15028:	7823      	ldrb	r3, [r4, #0]
   1502a:	466e      	mov	r6, sp
   1502c:	f88d 3004 	strb.w	r3, [sp, #4]
   15030:	6863      	ldr	r3, [r4, #4]
   15032:	2105      	movs	r1, #5
   15034:	429a      	cmp	r2, r3
   15036:	bf2a      	itet	cs
   15038:	6927      	ldrcs	r7, [r4, #16]
   1503a:	1a9f      	subcc	r7, r3, r2
   1503c:	1abf      	subcs	r7, r7, r2
   1503e:	429a      	cmp	r2, r3
   15040:	bf94      	ite	ls
   15042:	2500      	movls	r5, #0
   15044:	68e5      	ldrhi	r5, [r4, #12]
   15046:	b2bf      	uxth	r7, r7
   15048:	bf88      	it	hi
   1504a:	1b5b      	subhi	r3, r3, r5
   1504c:	4630      	mov	r0, r6
   1504e:	bf88      	it	hi
   15050:	b29d      	uxthhi	r5, r3
   15052:	f8ad 7002 	strh.w	r7, [sp, #2]
   15056:	f7fc fdb7 	bl	11bc8 <bsd_os_trace_put>
   1505a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1505e:	68a0      	ldr	r0, [r4, #8]
   15060:	f7fc fdb2 	bl	11bc8 <bsd_os_trace_put>
   15064:	68a3      	ldr	r3, [r4, #8]
   15066:	6922      	ldr	r2, [r4, #16]
   15068:	441f      	add	r7, r3
   1506a:	4297      	cmp	r7, r2
   1506c:	bf08      	it	eq
   1506e:	68e3      	ldreq	r3, [r4, #12]
   15070:	60a7      	str	r7, [r4, #8]
   15072:	bf08      	it	eq
   15074:	60a3      	streq	r3, [r4, #8]
   15076:	2d00      	cmp	r5, #0
   15078:	f040 80d2 	bne.w	15220 <_flash_used+0x50>
   1507c:	4b77      	ldr	r3, [pc, #476]	; (1525c <_flash_used+0x8c>)
   1507e:	681c      	ldr	r4, [r3, #0]
   15080:	68a2      	ldr	r2, [r4, #8]
   15082:	6863      	ldr	r3, [r4, #4]
   15084:	429a      	cmp	r2, r3
   15086:	d02d      	beq.n	150e4 <ipc_trace_handle+0x15c>
   15088:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1508c:	f8ad 3000 	strh.w	r3, [sp]
   15090:	7823      	ldrb	r3, [r4, #0]
   15092:	466e      	mov	r6, sp
   15094:	f88d 3004 	strb.w	r3, [sp, #4]
   15098:	6863      	ldr	r3, [r4, #4]
   1509a:	2105      	movs	r1, #5
   1509c:	429a      	cmp	r2, r3
   1509e:	bf2a      	itet	cs
   150a0:	6927      	ldrcs	r7, [r4, #16]
   150a2:	1a9f      	subcc	r7, r3, r2
   150a4:	1abf      	subcs	r7, r7, r2
   150a6:	429a      	cmp	r2, r3
   150a8:	bf94      	ite	ls
   150aa:	2500      	movls	r5, #0
   150ac:	68e5      	ldrhi	r5, [r4, #12]
   150ae:	b2bf      	uxth	r7, r7
   150b0:	bf88      	it	hi
   150b2:	1b5b      	subhi	r3, r3, r5
   150b4:	4630      	mov	r0, r6
   150b6:	bf88      	it	hi
   150b8:	b29d      	uxthhi	r5, r3
   150ba:	f8ad 7002 	strh.w	r7, [sp, #2]
   150be:	f7fc fd83 	bl	11bc8 <bsd_os_trace_put>
   150c2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   150c6:	68a0      	ldr	r0, [r4, #8]
   150c8:	f7fc fd7e 	bl	11bc8 <bsd_os_trace_put>
   150cc:	68a3      	ldr	r3, [r4, #8]
   150ce:	6922      	ldr	r2, [r4, #16]
   150d0:	441f      	add	r7, r3
   150d2:	4297      	cmp	r7, r2
   150d4:	bf08      	it	eq
   150d6:	68e3      	ldreq	r3, [r4, #12]
   150d8:	60a7      	str	r7, [r4, #8]
   150da:	bf08      	it	eq
   150dc:	60a3      	streq	r3, [r4, #8]
   150de:	2d00      	cmp	r5, #0
   150e0:	f040 808d 	bne.w	151fe <_flash_used+0x2e>
   150e4:	4b5e      	ldr	r3, [pc, #376]	; (15260 <_flash_used+0x90>)
   150e6:	681c      	ldr	r4, [r3, #0]
   150e8:	68a2      	ldr	r2, [r4, #8]
   150ea:	6863      	ldr	r3, [r4, #4]
   150ec:	429a      	cmp	r2, r3
   150ee:	f43f af7c 	beq.w	14fea <ipc_trace_handle+0x62>
   150f2:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   150f6:	f8ad 3000 	strh.w	r3, [sp]
   150fa:	7823      	ldrb	r3, [r4, #0]
   150fc:	466e      	mov	r6, sp
   150fe:	f88d 3004 	strb.w	r3, [sp, #4]
   15102:	6863      	ldr	r3, [r4, #4]
   15104:	2105      	movs	r1, #5
   15106:	429a      	cmp	r2, r3
   15108:	bf2a      	itet	cs
   1510a:	6927      	ldrcs	r7, [r4, #16]
   1510c:	1a9f      	subcc	r7, r3, r2
   1510e:	1abf      	subcs	r7, r7, r2
   15110:	429a      	cmp	r2, r3
   15112:	bf94      	ite	ls
   15114:	2500      	movls	r5, #0
   15116:	68e5      	ldrhi	r5, [r4, #12]
   15118:	b2bf      	uxth	r7, r7
   1511a:	bf88      	it	hi
   1511c:	1b5b      	subhi	r3, r3, r5
   1511e:	4630      	mov	r0, r6
   15120:	bf88      	it	hi
   15122:	b29d      	uxthhi	r5, r3
   15124:	f8ad 7002 	strh.w	r7, [sp, #2]
   15128:	f7fc fd4e 	bl	11bc8 <bsd_os_trace_put>
   1512c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   15130:	68a0      	ldr	r0, [r4, #8]
   15132:	f7fc fd49 	bl	11bc8 <bsd_os_trace_put>
   15136:	68a3      	ldr	r3, [r4, #8]
   15138:	6922      	ldr	r2, [r4, #16]
   1513a:	441f      	add	r7, r3
   1513c:	4297      	cmp	r7, r2
   1513e:	bf08      	it	eq
   15140:	68e3      	ldreq	r3, [r4, #12]
   15142:	60a7      	str	r7, [r4, #8]
   15144:	bf08      	it	eq
   15146:	60a3      	streq	r3, [r4, #8]
   15148:	2d00      	cmp	r5, #0
   1514a:	f43f af4e 	beq.w	14fea <ipc_trace_handle+0x62>
   1514e:	2105      	movs	r1, #5
   15150:	4630      	mov	r0, r6
   15152:	f8ad 5002 	strh.w	r5, [sp, #2]
   15156:	f7fc fd37 	bl	11bc8 <bsd_os_trace_put>
   1515a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1515e:	68e0      	ldr	r0, [r4, #12]
   15160:	f7fc fd32 	bl	11bc8 <bsd_os_trace_put>
   15164:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15168:	68e3      	ldr	r3, [r4, #12]
   1516a:	4413      	add	r3, r2
   1516c:	60a3      	str	r3, [r4, #8]
   1516e:	e73c      	b.n	14fea <ipc_trace_handle+0x62>
   15170:	4a38      	ldr	r2, [pc, #224]	; (15254 <_flash_used+0x84>)
   15172:	7811      	ldrb	r1, [r2, #0]
   15174:	b109      	cbz	r1, 1517a <ipc_trace_handle+0x1f2>
   15176:	2100      	movs	r1, #0
   15178:	7011      	strb	r1, [r2, #0]
   1517a:	68a5      	ldr	r5, [r4, #8]
   1517c:	2d00      	cmp	r5, #0
   1517e:	d039      	beq.n	151f4 <_flash_used+0x24>
   15180:	f04f 0c00 	mov.w	ip, #0
   15184:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1525c <_flash_used+0x8c>
   15188:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 15258 <_flash_used+0x88>
   1518c:	4934      	ldr	r1, [pc, #208]	; (15260 <_flash_used+0x90>)
   1518e:	46e1      	mov	r9, ip
   15190:	4666      	mov	r6, ip
   15192:	4662      	mov	r2, ip
   15194:	f8d1 e000 	ldr.w	lr, [r1]
   15198:	f8da 8000 	ldr.w	r8, [sl]
   1519c:	f8db 7000 	ldr.w	r7, [fp]
   151a0:	e008      	b.n	151b4 <ipc_trace_handle+0x22c>
   151a2:	2963      	cmp	r1, #99	; 0x63
   151a4:	d016      	beq.n	151d4 <_flash_used+0x4>
   151a6:	2961      	cmp	r1, #97	; 0x61
   151a8:	bf04      	itt	eq
   151aa:	4607      	moveq	r7, r0
   151ac:	2601      	moveq	r6, #1
   151ae:	3201      	adds	r2, #1
   151b0:	42aa      	cmp	r2, r5
   151b2:	d013      	beq.n	151dc <_flash_used+0xc>
   151b4:	1c91      	adds	r1, r2, #2
   151b6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   151ba:	6848      	ldr	r0, [r1, #4]
   151bc:	7801      	ldrb	r1, [r0, #0]
   151be:	2962      	cmp	r1, #98	; 0x62
   151c0:	d1ef      	bne.n	151a2 <ipc_trace_handle+0x21a>
   151c2:	4680      	mov	r8, r0
   151c4:	f04f 0901 	mov.w	r9, #1
   151c8:	e7f1      	b.n	151ae <ipc_trace_handle+0x226>
   151ca:	f7fc fcb7 	bl	11b3c <bsd_os_trace_irq_set>
   151ce:	b003      	add	sp, #12
   151d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d4:	4686      	mov	lr, r0
   151d6:	f04f 0c01 	mov.w	ip, #1
   151da:	e7e8      	b.n	151ae <ipc_trace_handle+0x226>
   151dc:	bba6      	cbnz	r6, 15248 <_flash_used+0x78>
   151de:	f1b9 0f00 	cmp.w	r9, #0
   151e2:	d001      	beq.n	151e8 <_flash_used+0x18>
   151e4:	f8ca 8000 	str.w	r8, [sl]
   151e8:	f1bc 0f00 	cmp.w	ip, #0
   151ec:	d002      	beq.n	151f4 <_flash_used+0x24>
   151ee:	4a1c      	ldr	r2, [pc, #112]	; (15260 <_flash_used+0x90>)
   151f0:	f8c2 e000 	str.w	lr, [r2]
   151f4:	2001      	movs	r0, #1
   151f6:	2200      	movs	r2, #0
   151f8:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   151fc:	e6ed      	b.n	14fda <ipc_trace_handle+0x52>
   151fe:	2105      	movs	r1, #5
   15200:	4630      	mov	r0, r6
   15202:	f8ad 5002 	strh.w	r5, [sp, #2]
   15206:	f7fc fcdf 	bl	11bc8 <bsd_os_trace_put>
   1520a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1520e:	68e0      	ldr	r0, [r4, #12]
   15210:	f7fc fcda 	bl	11bc8 <bsd_os_trace_put>
   15214:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15218:	68e3      	ldr	r3, [r4, #12]
   1521a:	4413      	add	r3, r2
   1521c:	60a3      	str	r3, [r4, #8]
   1521e:	e761      	b.n	150e4 <ipc_trace_handle+0x15c>
   15220:	2105      	movs	r1, #5
   15222:	4630      	mov	r0, r6
   15224:	f8ad 5002 	strh.w	r5, [sp, #2]
   15228:	f7fc fcce 	bl	11bc8 <bsd_os_trace_put>
   1522c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   15230:	68e0      	ldr	r0, [r4, #12]
   15232:	f7fc fcc9 	bl	11bc8 <bsd_os_trace_put>
   15236:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1523a:	68e3      	ldr	r3, [r4, #12]
   1523c:	4413      	add	r3, r2
   1523e:	60a3      	str	r3, [r4, #8]
   15240:	e71c      	b.n	1507c <ipc_trace_handle+0xf4>
   15242:	f7fc fc83 	bl	11b4c <bsd_os_trace_irq_clear>
   15246:	e6e5      	b.n	15014 <ipc_trace_handle+0x8c>
   15248:	f8cb 7000 	str.w	r7, [fp]
   1524c:	e7c7      	b.n	151de <_flash_used+0xe>
   1524e:	bf00      	nop
   15250:	200207a0 	.word	0x200207a0
   15254:	2002658f 	.word	0x2002658f
   15258:	2002079c 	.word	0x2002079c
   1525c:	20020794 	.word	0x20020794
   15260:	20020798 	.word	0x20020798

00015264 <rpc_trace_coredump_in_progress>:
   15264:	4b01      	ldr	r3, [pc, #4]	; (1526c <rpc_trace_coredump_in_progress+0x8>)
   15266:	7818      	ldrb	r0, [r3, #0]
   15268:	4770      	bx	lr
   1526a:	bf00      	nop
   1526c:	2002658f 	.word	0x2002658f

00015270 <transport_reset>:
   15270:	2000      	movs	r0, #0
   15272:	4770      	bx	lr

00015274 <transport_data_free>:
   15274:	4b0b      	ldr	r3, [pc, #44]	; (152a4 <transport_data_free+0x30>)
   15276:	e9d3 2300 	ldrd	r2, r3, [r3]
   1527a:	4413      	add	r3, r2
   1527c:	4298      	cmp	r0, r3
   1527e:	d20d      	bcs.n	1529c <transport_data_free+0x28>
   15280:	4282      	cmp	r2, r0
   15282:	d80b      	bhi.n	1529c <transport_data_free+0x28>
   15284:	b510      	push	{r4, lr}
   15286:	4604      	mov	r4, r0
   15288:	f000 fdfc 	bl	15e84 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1528c:	b140      	cbz	r0, 152a0 <transport_data_free+0x2c>
   1528e:	4a06      	ldr	r2, [pc, #24]	; (152a8 <transport_data_free+0x34>)
   15290:	6084      	str	r4, [r0, #8]
   15292:	6002      	str	r2, [r0, #0]
   15294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15298:	f000 bd3c 	b.w	15d14 <rpc_transport_ipc_tx_send>
   1529c:	f7fe bc58 	b.w	13b50 <nrf_shared_free>
   152a0:	bd10      	pop	{r4, pc}
   152a2:	bf00      	nop
   152a4:	200207a4 	.word	0x200207a4
   152a8:	00020001 	.word	0x00020001

000152ac <rpc_transport_ipc_init>:
   152ac:	2800      	cmp	r0, #0
   152ae:	d02b      	beq.n	15308 <rpc_transport_ipc_init+0x5c>
   152b0:	b530      	push	{r4, r5, lr}
   152b2:	b089      	sub	sp, #36	; 0x24
   152b4:	aa01      	add	r2, sp, #4
   152b6:	4669      	mov	r1, sp
   152b8:	4604      	mov	r4, r0
   152ba:	f000 fc41 	bl	15b40 <rpc_transport_ipc_tx_init>
   152be:	4603      	mov	r3, r0
   152c0:	b140      	cbz	r0, 152d4 <rpc_transport_ipc_init+0x28>
   152c2:	4a13      	ldr	r2, [pc, #76]	; (15310 <rpc_transport_ipc_init+0x64>)
   152c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   152c8:	c803      	ldmia	r0, {r0, r1}
   152ca:	e882 0003 	stmia.w	r2, {r0, r1}
   152ce:	4618      	mov	r0, r3
   152d0:	b009      	add	sp, #36	; 0x24
   152d2:	bd30      	pop	{r4, r5, pc}
   152d4:	e9dd 1200 	ldrd	r1, r2, [sp]
   152d8:	4620      	mov	r0, r4
   152da:	f000 f857 	bl	1538c <rpc_transport_ipc_rx_init>
   152de:	4603      	mov	r3, r0
   152e0:	2800      	cmp	r0, #0
   152e2:	d1ee      	bne.n	152c2 <rpc_transport_ipc_init+0x16>
   152e4:	4b0b      	ldr	r3, [pc, #44]	; (15314 <rpc_transport_ipc_init+0x68>)
   152e6:	490c      	ldr	r1, [pc, #48]	; (15318 <rpc_transport_ipc_init+0x6c>)
   152e8:	480c      	ldr	r0, [pc, #48]	; (1531c <rpc_transport_ipc_init+0x70>)
   152ea:	4a0d      	ldr	r2, [pc, #52]	; (15320 <rpc_transport_ipc_init+0x74>)
   152ec:	9303      	str	r3, [sp, #12]
   152ee:	4d0d      	ldr	r5, [pc, #52]	; (15324 <rpc_transport_ipc_init+0x78>)
   152f0:	4b0d      	ldr	r3, [pc, #52]	; (15328 <rpc_transport_ipc_init+0x7c>)
   152f2:	9104      	str	r1, [sp, #16]
   152f4:	9005      	str	r0, [sp, #20]
   152f6:	490d      	ldr	r1, [pc, #52]	; (1532c <rpc_transport_ipc_init+0x80>)
   152f8:	a802      	add	r0, sp, #8
   152fa:	9307      	str	r3, [sp, #28]
   152fc:	9506      	str	r5, [sp, #24]
   152fe:	9202      	str	r2, [sp, #8]
   15300:	f003 ffb4 	bl	1926c <rpc_transport_register>
   15304:	4603      	mov	r3, r0
   15306:	e7dc      	b.n	152c2 <rpc_transport_ipc_init+0x16>
   15308:	230e      	movs	r3, #14
   1530a:	4618      	mov	r0, r3
   1530c:	4770      	bx	lr
   1530e:	bf00      	nop
   15310:	200207a4 	.word	0x200207a4
   15314:	00015e15 	.word	0x00015e15
   15318:	00015ee5 	.word	0x00015ee5
   1531c:	000159a9 	.word	0x000159a9
   15320:	00015d15 	.word	0x00015d15
   15324:	00015275 	.word	0x00015275
   15328:	00015271 	.word	0x00015271
   1532c:	200207ac 	.word	0x200207ac

00015330 <rpc_transport_rx_handle>:
   15330:	b160      	cbz	r0, 1534c <rpc_transport_rx_handle+0x1c>
   15332:	b508      	push	{r3, lr}
   15334:	6843      	ldr	r3, [r0, #4]
   15336:	b2db      	uxtb	r3, r3
   15338:	2b02      	cmp	r3, #2
   1533a:	d00e      	beq.n	1535a <rpc_transport_rx_handle+0x2a>
   1533c:	6803      	ldr	r3, [r0, #0]
   1533e:	0c1b      	lsrs	r3, r3, #16
   15340:	2b02      	cmp	r3, #2
   15342:	d005      	beq.n	15350 <rpc_transport_rx_handle+0x20>
   15344:	2b04      	cmp	r3, #4
   15346:	d00e      	beq.n	15366 <rpc_transport_rx_handle+0x36>
   15348:	2000      	movs	r0, #0
   1534a:	bd08      	pop	{r3, pc}
   1534c:	2000      	movs	r0, #0
   1534e:	4770      	bx	lr
   15350:	6880      	ldr	r0, [r0, #8]
   15352:	f7fe fbfd 	bl	13b50 <nrf_shared_free>
   15356:	2000      	movs	r0, #0
   15358:	bd08      	pop	{r3, pc}
   1535a:	4601      	mov	r1, r0
   1535c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15360:	4803      	ldr	r0, [pc, #12]	; (15370 <rpc_transport_rx_handle+0x40>)
   15362:	f003 be75 	b.w	19050 <rpc_transport_input>
   15366:	4802      	ldr	r0, [pc, #8]	; (15370 <rpc_transport_rx_handle+0x40>)
   15368:	f003 ffe0 	bl	1932c <rpc_transport_unregister>
   1536c:	2000      	movs	r0, #0
   1536e:	bd08      	pop	{r3, pc}
   15370:	200207ac 	.word	0x200207ac

00015374 <rpc_transport_ipc_shutdown>:
   15374:	b508      	push	{r3, lr}
   15376:	f000 fdbf 	bl	15ef8 <rpc_transport_ipc_tx_suspend>
   1537a:	f000 fb4b 	bl	15a14 <rpc_transport_ipc_rx_suspend>
   1537e:	f000 fdc1 	bl	15f04 <rpc_transport_ipc_tx_shutdown>
   15382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15386:	f000 bb65 	b.w	15a54 <rpc_transport_ipc_rx_shutdown>
   1538a:	bf00      	nop

0001538c <rpc_transport_ipc_rx_init>:
   1538c:	2800      	cmp	r0, #0
   1538e:	f000 80ff 	beq.w	15590 <rpc_transport_ipc_rx_init+0x204>
   15392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15396:	6805      	ldr	r5, [r0, #0]
   15398:	b095      	sub	sp, #84	; 0x54
   1539a:	2d00      	cmp	r5, #0
   1539c:	f000 80ee 	beq.w	1557c <rpc_transport_ipc_rx_init+0x1f0>
   153a0:	6883      	ldr	r3, [r0, #8]
   153a2:	2b00      	cmp	r3, #0
   153a4:	f000 80ea 	beq.w	1557c <rpc_transport_ipc_rx_init+0x1f0>
   153a8:	6907      	ldr	r7, [r0, #16]
   153aa:	2f00      	cmp	r7, #0
   153ac:	f000 80e6 	beq.w	1557c <rpc_transport_ipc_rx_init+0x1f0>
   153b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
   153b2:	2c00      	cmp	r4, #0
   153b4:	f000 80e2 	beq.w	1557c <rpc_transport_ipc_rx_init+0x1f0>
   153b8:	6844      	ldr	r4, [r0, #4]
   153ba:	2c1b      	cmp	r4, #27
   153bc:	f240 80e3 	bls.w	15586 <rpc_transport_ipc_rx_init+0x1fa>
   153c0:	68c4      	ldr	r4, [r0, #12]
   153c2:	2c0b      	cmp	r4, #11
   153c4:	f240 80df 	bls.w	15586 <rpc_transport_ipc_rx_init+0x1fa>
   153c8:	f8d0 e014 	ldr.w	lr, [r0, #20]
   153cc:	f1be 0f17 	cmp.w	lr, #23
   153d0:	f240 80d9 	bls.w	15586 <rpc_transport_ipc_rx_init+0x1fa>
   153d4:	2600      	movs	r6, #0
   153d6:	4604      	mov	r4, r0
   153d8:	486f      	ldr	r0, [pc, #444]	; (15598 <rpc_transport_ipc_rx_init+0x20c>)
   153da:	e9cd 1200 	strd	r1, r2, [sp]
   153de:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 155b8 <rpc_transport_ipc_rx_init+0x22c>
   153e2:	496e      	ldr	r1, [pc, #440]	; (1559c <rpc_transport_ipc_rx_init+0x210>)
   153e4:	8006      	strh	r6, [r0, #0]
   153e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   153e8:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 155bc <rpc_transport_ipc_rx_init+0x230>
   153ec:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 155c0 <rpc_transport_ipc_rx_init+0x234>
   153f0:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 155c4 <rpc_transport_ipc_rx_init+0x238>
   153f4:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 155c8 <rpc_transport_ipc_rx_init+0x23c>
   153f8:	4672      	mov	r2, lr
   153fa:	600e      	str	r6, [r1, #0]
   153fc:	f8ca 0000 	str.w	r0, [sl]
   15400:	4631      	mov	r1, r6
   15402:	4638      	mov	r0, r7
   15404:	f8cc 6000 	str.w	r6, [ip]
   15408:	f8cb 3000 	str.w	r3, [fp]
   1540c:	f8c8 6000 	str.w	r6, [r8]
   15410:	f8c9 6000 	str.w	r6, [r9]
   15414:	f008 f949 	bl	1d6aa <memset>
   15418:	69e3      	ldr	r3, [r4, #28]
   1541a:	4638      	mov	r0, r7
   1541c:	603b      	str	r3, [r7, #0]
   1541e:	69a3      	ldr	r3, [r4, #24]
   15420:	607b      	str	r3, [r7, #4]
   15422:	f7ff fcc9 	bl	14db8 <ipc_trace_init>
   15426:	2201      	movs	r2, #1
   15428:	f04f 0c04 	mov.w	ip, #4
   1542c:	4b5c      	ldr	r3, [pc, #368]	; (155a0 <rpc_transport_ipc_rx_init+0x214>)
   1542e:	495d      	ldr	r1, [pc, #372]	; (155a4 <rpc_transport_ipc_rx_init+0x218>)
   15430:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   15434:	6809      	ldr	r1, [r1, #0]
   15436:	2080      	movs	r0, #128	; 0x80
   15438:	9104      	str	r1, [sp, #16]
   1543a:	495b      	ldr	r1, [pc, #364]	; (155a8 <rpc_transport_ipc_rx_init+0x21c>)
   1543c:	f8dd e010 	ldr.w	lr, [sp, #16]
   15440:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   15444:	6809      	ldr	r1, [r1, #0]
   15446:	702e      	strb	r6, [r5, #0]
   15448:	9103      	str	r1, [sp, #12]
   1544a:	706e      	strb	r6, [r5, #1]
   1544c:	70ee      	strb	r6, [r5, #3]
   1544e:	70aa      	strb	r2, [r5, #2]
   15450:	9903      	ldr	r1, [sp, #12]
   15452:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15454:	f8db e000 	ldr.w	lr, [fp]
   15458:	6069      	str	r1, [r5, #4]
   1545a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1545c:	9c01      	ldr	r4, [sp, #4]
   1545e:	60a9      	str	r1, [r5, #8]
   15460:	60ec      	str	r4, [r5, #12]
   15462:	9c00      	ldr	r4, [sp, #0]
   15464:	4951      	ldr	r1, [pc, #324]	; (155ac <rpc_transport_ipc_rx_init+0x220>)
   15466:	61af      	str	r7, [r5, #24]
   15468:	f8c5 e014 	str.w	lr, [r5, #20]
   1546c:	612c      	str	r4, [r5, #16]
   1546e:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15472:	680c      	ldr	r4, [r1, #0]
   15474:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   15478:	9405      	str	r4, [sp, #20]
   1547a:	9c05      	ldr	r4, [sp, #20]
   1547c:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   15480:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   15484:	f44f 6780 	mov.w	r7, #1024	; 0x400
   15488:	9406      	str	r4, [sp, #24]
   1548a:	9c06      	ldr	r4, [sp, #24]
   1548c:	2410      	movs	r4, #16
   1548e:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   15492:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   15496:	4d46      	ldr	r5, [pc, #280]	; (155b0 <rpc_transport_ipc_rx_init+0x224>)
   15498:	9407      	str	r4, [sp, #28]
   1549a:	9c07      	ldr	r4, [sp, #28]
   1549c:	2440      	movs	r4, #64	; 0x40
   1549e:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   154a2:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   154a6:	9408      	str	r4, [sp, #32]
   154a8:	9c08      	ldr	r4, [sp, #32]
   154aa:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   154ae:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   154b2:	9009      	str	r0, [sp, #36]	; 0x24
   154b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   154b6:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   154ba:	6808      	ldr	r0, [r1, #0]
   154bc:	900a      	str	r0, [sp, #40]	; 0x28
   154be:	980a      	ldr	r0, [sp, #40]	; 0x28
   154c0:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   154c4:	6888      	ldr	r0, [r1, #8]
   154c6:	900b      	str	r0, [sp, #44]	; 0x2c
   154c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   154ca:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   154ce:	6908      	ldr	r0, [r1, #16]
   154d0:	900c      	str	r0, [sp, #48]	; 0x30
   154d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   154d4:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   154d8:	6988      	ldr	r0, [r1, #24]
   154da:	900d      	str	r0, [sp, #52]	; 0x34
   154dc:	980d      	ldr	r0, [sp, #52]	; 0x34
   154de:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   154e2:	69c8      	ldr	r0, [r1, #28]
   154e4:	f501 7101 	add.w	r1, r1, #516	; 0x204
   154e8:	900e      	str	r0, [sp, #56]	; 0x38
   154ea:	980e      	ldr	r0, [sp, #56]	; 0x38
   154ec:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   154f0:	4310      	orrs	r0, r2
   154f2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   154f6:	680c      	ldr	r4, [r1, #0]
   154f8:	482e      	ldr	r0, [pc, #184]	; (155b4 <rpc_transport_ipc_rx_init+0x228>)
   154fa:	940f      	str	r4, [sp, #60]	; 0x3c
   154fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   154fe:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15502:	ea44 040c 	orr.w	r4, r4, ip
   15506:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1550a:	680c      	ldr	r4, [r1, #0]
   1550c:	9410      	str	r4, [sp, #64]	; 0x40
   1550e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   15510:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15514:	f044 0410 	orr.w	r4, r4, #16
   15518:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1551c:	680c      	ldr	r4, [r1, #0]
   1551e:	9411      	str	r4, [sp, #68]	; 0x44
   15520:	9c11      	ldr	r4, [sp, #68]	; 0x44
   15522:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15526:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1552a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1552e:	680c      	ldr	r4, [r1, #0]
   15530:	9412      	str	r4, [sp, #72]	; 0x48
   15532:	9c12      	ldr	r4, [sp, #72]	; 0x48
   15534:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15538:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1553c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   15540:	f8da 3000 	ldr.w	r3, [sl]
   15544:	6809      	ldr	r1, [r1, #0]
   15546:	015b      	lsls	r3, r3, #5
   15548:	9113      	str	r1, [sp, #76]	; 0x4c
   1554a:	b2db      	uxtb	r3, r3
   1554c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1554e:	f8c8 2000 	str.w	r2, [r8]
   15552:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   15556:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   1555a:	6047      	str	r7, [r0, #4]
   1555c:	9602      	str	r6, [sp, #8]
   1555e:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   15562:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   15566:	9302      	str	r3, [sp, #8]
   15568:	9b02      	ldr	r3, [sp, #8]
   1556a:	f8d8 3000 	ldr.w	r3, [r8]
   1556e:	2b01      	cmp	r3, #1
   15570:	d0fb      	beq.n	1556a <rpc_transport_ipc_rx_init+0x1de>
   15572:	f8d9 0000 	ldr.w	r0, [r9]
   15576:	b015      	add	sp, #84	; 0x54
   15578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1557c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15580:	b015      	add	sp, #84	; 0x54
   15582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15586:	f24c 0009 	movw	r0, #49161	; 0xc009
   1558a:	b015      	add	sp, #84	; 0x54
   1558c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15590:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15594:	4770      	bx	lr
   15596:	bf00      	nop
   15598:	20024e46 	.word	0x20024e46
   1559c:	200207bc 	.word	0x200207bc
   155a0:	4002a000 	.word	0x4002a000
   155a4:	4002a610 	.word	0x4002a610
   155a8:	4002a614 	.word	0x4002a614
   155ac:	4002a590 	.word	0x4002a590
   155b0:	40005000 	.word	0x40005000
   155b4:	e000e100 	.word	0xe000e100
   155b8:	200207b4 	.word	0x200207b4
   155bc:	200207c0 	.word	0x200207c0
   155c0:	200207b8 	.word	0x200207b8
   155c4:	200207c4 	.word	0x200207c4
   155c8:	200207b0 	.word	0x200207b0

000155cc <IPC_IRQHandler>:
   155cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155d0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   155d4:	4ca7      	ldr	r4, [pc, #668]	; (15874 <IPC_IRQHandler+0x2a8>)
   155d6:	b087      	sub	sp, #28
   155d8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   155dc:	f3bf 8f4f 	dsb	sy
   155e0:	f3bf 8f6f 	isb	sy
   155e4:	4ea4      	ldr	r6, [pc, #656]	; (15878 <IPC_IRQHandler+0x2ac>)
   155e6:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   155ea:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   155ee:	061f      	lsls	r7, r3, #24
   155f0:	f100 80c8 	bmi.w	15784 <IPC_IRQHandler+0x1b8>
   155f4:	4ba0      	ldr	r3, [pc, #640]	; (15878 <IPC_IRQHandler+0x2ac>)
   155f6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   155fa:	07d0      	lsls	r0, r2, #31
   155fc:	f100 80d4 	bmi.w	157a8 <IPC_IRQHandler+0x1dc>
   15600:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   15604:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   15608:	f040 80b6 	bne.w	15778 <IPC_IRQHandler+0x1ac>
   1560c:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   15610:	0749      	lsls	r1, r1, #29
   15612:	f100 80e6 	bmi.w	157e2 <IPC_IRQHandler+0x216>
   15616:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1561a:	06da      	lsls	r2, r3, #27
   1561c:	f140 809d 	bpl.w	1575a <IPC_IRQHandler+0x18e>
   15620:	2100      	movs	r1, #0
   15622:	4a95      	ldr	r2, [pc, #596]	; (15878 <IPC_IRQHandler+0x2ac>)
   15624:	4b95      	ldr	r3, [pc, #596]	; (1587c <IPC_IRQHandler+0x2b0>)
   15626:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   1562a:	681b      	ldr	r3, [r3, #0]
   1562c:	9304      	str	r3, [sp, #16]
   1562e:	9b04      	ldr	r3, [sp, #16]
   15630:	f8df 8270 	ldr.w	r8, [pc, #624]	; 158a4 <IPC_IRQHandler+0x2d8>
   15634:	4f92      	ldr	r7, [pc, #584]	; (15880 <IPC_IRQHandler+0x2b4>)
   15636:	f8df 9270 	ldr.w	r9, [pc, #624]	; 158a8 <IPC_IRQHandler+0x2dc>
   1563a:	f8d8 a000 	ldr.w	sl, [r8]
   1563e:	f8da 1000 	ldr.w	r1, [sl]
   15642:	2900      	cmp	r1, #0
   15644:	d03f      	beq.n	156c6 <IPC_IRQHandler+0xfa>
   15646:	2200      	movs	r2, #0
   15648:	4614      	mov	r4, r2
   1564a:	e002      	b.n	15652 <IPC_IRQHandler+0x86>
   1564c:	3401      	adds	r4, #1
   1564e:	428c      	cmp	r4, r1
   15650:	d227      	bcs.n	156a2 <IPC_IRQHandler+0xd6>
   15652:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   15656:	68ab      	ldr	r3, [r5, #8]
   15658:	2b00      	cmp	r3, #0
   1565a:	d0f7      	beq.n	1564c <IPC_IRQHandler+0x80>
   1565c:	686e      	ldr	r6, [r5, #4]
   1565e:	b2f6      	uxtb	r6, r6
   15660:	2e01      	cmp	r6, #1
   15662:	d1f3      	bne.n	1564c <IPC_IRQHandler+0x80>
   15664:	6868      	ldr	r0, [r5, #4]
   15666:	f8b9 3000 	ldrh.w	r3, [r9]
   1566a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1566e:	d1ed      	bne.n	1564c <IPC_IRQHandler+0x80>
   15670:	686a      	ldr	r2, [r5, #4]
   15672:	3301      	adds	r3, #1
   15674:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15678:	f042 0202 	orr.w	r2, r2, #2
   1567c:	606a      	str	r2, [r5, #4]
   1567e:	68a8      	ldr	r0, [r5, #8]
   15680:	f8a9 3000 	strh.w	r3, [r9]
   15684:	f7ff fe54 	bl	15330 <rpc_transport_rx_handle>
   15688:	4632      	mov	r2, r6
   1568a:	b928      	cbnz	r0, 15698 <IPC_IRQHandler+0xcc>
   1568c:	686b      	ldr	r3, [r5, #4]
   1568e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15692:	f043 0303 	orr.w	r3, r3, #3
   15696:	606b      	str	r3, [r5, #4]
   15698:	f8da 1000 	ldr.w	r1, [sl]
   1569c:	3401      	adds	r4, #1
   1569e:	428c      	cmp	r4, r1
   156a0:	d3d7      	bcc.n	15652 <IPC_IRQHandler+0x86>
   156a2:	2a00      	cmp	r2, #0
   156a4:	d1cd      	bne.n	15642 <IPC_IRQHandler+0x76>
   156a6:	b171      	cbz	r1, 156c6 <IPC_IRQHandler+0xfa>
   156a8:	4613      	mov	r3, r2
   156aa:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   156ae:	6890      	ldr	r0, [r2, #8]
   156b0:	3301      	adds	r3, #1
   156b2:	b130      	cbz	r0, 156c2 <IPC_IRQHandler+0xf6>
   156b4:	f8d2 b004 	ldr.w	fp, [r2, #4]
   156b8:	fa5f fb8b 	uxtb.w	fp, fp
   156bc:	f1bb 0f01 	cmp.w	fp, #1
   156c0:	d003      	beq.n	156ca <IPC_IRQHandler+0xfe>
   156c2:	428b      	cmp	r3, r1
   156c4:	d1f1      	bne.n	156aa <IPC_IRQHandler+0xde>
   156c6:	f04f 0b00 	mov.w	fp, #0
   156ca:	f8d7 a000 	ldr.w	sl, [r7]
   156ce:	f8da 2000 	ldr.w	r2, [sl]
   156d2:	2a00      	cmp	r2, #0
   156d4:	d03d      	beq.n	15752 <IPC_IRQHandler+0x186>
   156d6:	2100      	movs	r1, #0
   156d8:	460c      	mov	r4, r1
   156da:	e002      	b.n	156e2 <IPC_IRQHandler+0x116>
   156dc:	3401      	adds	r4, #1
   156de:	4294      	cmp	r4, r2
   156e0:	d227      	bcs.n	15732 <IPC_IRQHandler+0x166>
   156e2:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   156e6:	68ab      	ldr	r3, [r5, #8]
   156e8:	2b00      	cmp	r3, #0
   156ea:	d0f7      	beq.n	156dc <IPC_IRQHandler+0x110>
   156ec:	686e      	ldr	r6, [r5, #4]
   156ee:	b2f6      	uxtb	r6, r6
   156f0:	2e01      	cmp	r6, #1
   156f2:	d1f3      	bne.n	156dc <IPC_IRQHandler+0x110>
   156f4:	6868      	ldr	r0, [r5, #4]
   156f6:	f8b9 3000 	ldrh.w	r3, [r9]
   156fa:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   156fe:	d1ed      	bne.n	156dc <IPC_IRQHandler+0x110>
   15700:	686a      	ldr	r2, [r5, #4]
   15702:	3301      	adds	r3, #1
   15704:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15708:	f042 0202 	orr.w	r2, r2, #2
   1570c:	606a      	str	r2, [r5, #4]
   1570e:	68a8      	ldr	r0, [r5, #8]
   15710:	f8a9 3000 	strh.w	r3, [r9]
   15714:	f7ff fe0c 	bl	15330 <rpc_transport_rx_handle>
   15718:	4631      	mov	r1, r6
   1571a:	b928      	cbnz	r0, 15728 <IPC_IRQHandler+0x15c>
   1571c:	686a      	ldr	r2, [r5, #4]
   1571e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   15722:	f043 0303 	orr.w	r3, r3, #3
   15726:	606b      	str	r3, [r5, #4]
   15728:	f8da 2000 	ldr.w	r2, [sl]
   1572c:	3401      	adds	r4, #1
   1572e:	4294      	cmp	r4, r2
   15730:	d3d7      	bcc.n	156e2 <IPC_IRQHandler+0x116>
   15732:	2900      	cmp	r1, #0
   15734:	d1cd      	bne.n	156d2 <IPC_IRQHandler+0x106>
   15736:	b162      	cbz	r2, 15752 <IPC_IRQHandler+0x186>
   15738:	460b      	mov	r3, r1
   1573a:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1573e:	6888      	ldr	r0, [r1, #8]
   15740:	3301      	adds	r3, #1
   15742:	b120      	cbz	r0, 1574e <IPC_IRQHandler+0x182>
   15744:	6849      	ldr	r1, [r1, #4]
   15746:	b2c9      	uxtb	r1, r1
   15748:	2901      	cmp	r1, #1
   1574a:	f43f af76 	beq.w	1563a <IPC_IRQHandler+0x6e>
   1574e:	4293      	cmp	r3, r2
   15750:	d1f3      	bne.n	1573a <IPC_IRQHandler+0x16e>
   15752:	f1bb 0f00 	cmp.w	fp, #0
   15756:	f47f af70 	bne.w	1563a <IPC_IRQHandler+0x6e>
   1575a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1575e:	4b49      	ldr	r3, [pc, #292]	; (15884 <IPC_IRQHandler+0x2b8>)
   15760:	4a44      	ldr	r2, [pc, #272]	; (15874 <IPC_IRQHandler+0x2a8>)
   15762:	681b      	ldr	r3, [r3, #0]
   15764:	015b      	lsls	r3, r3, #5
   15766:	b2db      	uxtb	r3, r3
   15768:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   1576c:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   15770:	6051      	str	r1, [r2, #4]
   15772:	b007      	add	sp, #28
   15774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15778:	2206      	movs	r2, #6
   1577a:	4b43      	ldr	r3, [pc, #268]	; (15888 <IPC_IRQHandler+0x2bc>)
   1577c:	601a      	str	r2, [r3, #0]
   1577e:	b007      	add	sp, #28
   15780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15784:	f7ff fc00 	bl	14f88 <ipc_trace_handle>
   15788:	f7ff fd6c 	bl	15264 <rpc_trace_coredump_in_progress>
   1578c:	2800      	cmp	r0, #0
   1578e:	d149      	bne.n	15824 <IPC_IRQHandler+0x258>
   15790:	4b3e      	ldr	r3, [pc, #248]	; (1588c <IPC_IRQHandler+0x2c0>)
   15792:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   15796:	681b      	ldr	r3, [r3, #0]
   15798:	9301      	str	r3, [sp, #4]
   1579a:	9b01      	ldr	r3, [sp, #4]
   1579c:	4b36      	ldr	r3, [pc, #216]	; (15878 <IPC_IRQHandler+0x2ac>)
   1579e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   157a2:	07d0      	lsls	r0, r2, #31
   157a4:	f57f af2c 	bpl.w	15600 <IPC_IRQHandler+0x34>
   157a8:	2000      	movs	r0, #0
   157aa:	f248 0202 	movw	r2, #32770	; 0x8002
   157ae:	4938      	ldr	r1, [pc, #224]	; (15890 <IPC_IRQHandler+0x2c4>)
   157b0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   157b4:	6809      	ldr	r1, [r1, #0]
   157b6:	9102      	str	r1, [sp, #8]
   157b8:	9902      	ldr	r1, [sp, #8]
   157ba:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   157be:	4293      	cmp	r3, r2
   157c0:	d040      	beq.n	15844 <IPC_IRQHandler+0x278>
   157c2:	d81e      	bhi.n	15802 <IPC_IRQHandler+0x236>
   157c4:	2b00      	cmp	r3, #0
   157c6:	d04f      	beq.n	15868 <IPC_IRQHandler+0x29c>
   157c8:	2b02      	cmp	r3, #2
   157ca:	d942      	bls.n	15852 <IPC_IRQHandler+0x286>
   157cc:	f248 0201 	movw	r2, #32769	; 0x8001
   157d0:	4293      	cmp	r3, r2
   157d2:	d149      	bne.n	15868 <IPC_IRQHandler+0x29c>
   157d4:	2003      	movs	r0, #3
   157d6:	2207      	movs	r2, #7
   157d8:	492b      	ldr	r1, [pc, #172]	; (15888 <IPC_IRQHandler+0x2bc>)
   157da:	4b2e      	ldr	r3, [pc, #184]	; (15894 <IPC_IRQHandler+0x2c8>)
   157dc:	6008      	str	r0, [r1, #0]
   157de:	601a      	str	r2, [r3, #0]
   157e0:	e7cd      	b.n	1577e <IPC_IRQHandler+0x1b2>
   157e2:	4d29      	ldr	r5, [pc, #164]	; (15888 <IPC_IRQHandler+0x2bc>)
   157e4:	6829      	ldr	r1, [r5, #0]
   157e6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   157ea:	2901      	cmp	r1, #1
   157ec:	492a      	ldr	r1, [pc, #168]	; (15898 <IPC_IRQHandler+0x2cc>)
   157ee:	d05d      	beq.n	158ac <IPC_IRQHandler+0x2e0>
   157f0:	680a      	ldr	r2, [r1, #0]
   157f2:	9203      	str	r2, [sp, #12]
   157f4:	9a03      	ldr	r2, [sp, #12]
   157f6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   157fa:	06db      	lsls	r3, r3, #27
   157fc:	f53f af10 	bmi.w	15620 <IPC_IRQHandler+0x54>
   15800:	e716      	b.n	15630 <IPC_IRQHandler+0x64>
   15802:	4a26      	ldr	r2, [pc, #152]	; (1589c <IPC_IRQHandler+0x2d0>)
   15804:	4293      	cmp	r3, r2
   15806:	d814      	bhi.n	15832 <IPC_IRQHandler+0x266>
   15808:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1580c:	d814      	bhi.n	15838 <IPC_IRQHandler+0x26c>
   1580e:	f248 0203 	movw	r2, #32771	; 0x8003
   15812:	4293      	cmp	r3, r2
   15814:	d128      	bne.n	15868 <IPC_IRQHandler+0x29c>
   15816:	2003      	movs	r0, #3
   15818:	2204      	movs	r2, #4
   1581a:	491b      	ldr	r1, [pc, #108]	; (15888 <IPC_IRQHandler+0x2bc>)
   1581c:	4b1d      	ldr	r3, [pc, #116]	; (15894 <IPC_IRQHandler+0x2c8>)
   1581e:	6008      	str	r0, [r1, #0]
   15820:	601a      	str	r2, [r3, #0]
   15822:	e7ac      	b.n	1577e <IPC_IRQHandler+0x1b2>
   15824:	23e0      	movs	r3, #224	; 0xe0
   15826:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   1582a:	6065      	str	r5, [r4, #4]
   1582c:	b007      	add	sp, #28
   1582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15832:	4a1b      	ldr	r2, [pc, #108]	; (158a0 <IPC_IRQHandler+0x2d4>)
   15834:	4293      	cmp	r3, r2
   15836:	d117      	bne.n	15868 <IPC_IRQHandler+0x29c>
   15838:	2003      	movs	r0, #3
   1583a:	4913      	ldr	r1, [pc, #76]	; (15888 <IPC_IRQHandler+0x2bc>)
   1583c:	4a15      	ldr	r2, [pc, #84]	; (15894 <IPC_IRQHandler+0x2c8>)
   1583e:	6008      	str	r0, [r1, #0]
   15840:	6013      	str	r3, [r2, #0]
   15842:	e79c      	b.n	1577e <IPC_IRQHandler+0x1b2>
   15844:	2003      	movs	r0, #3
   15846:	2206      	movs	r2, #6
   15848:	490f      	ldr	r1, [pc, #60]	; (15888 <IPC_IRQHandler+0x2bc>)
   1584a:	4b12      	ldr	r3, [pc, #72]	; (15894 <IPC_IRQHandler+0x2c8>)
   1584c:	6008      	str	r0, [r1, #0]
   1584e:	601a      	str	r2, [r3, #0]
   15850:	e795      	b.n	1577e <IPC_IRQHandler+0x1b2>
   15852:	2303      	movs	r3, #3
   15854:	4618      	mov	r0, r3
   15856:	490c      	ldr	r1, [pc, #48]	; (15888 <IPC_IRQHandler+0x2bc>)
   15858:	4a0e      	ldr	r2, [pc, #56]	; (15894 <IPC_IRQHandler+0x2c8>)
   1585a:	600b      	str	r3, [r1, #0]
   1585c:	6013      	str	r3, [r2, #0]
   1585e:	b007      	add	sp, #28
   15860:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15864:	f7ff b906 	b.w	14a74 <rpc_transport_ipc_fault_handler>
   15868:	2303      	movs	r3, #3
   1586a:	4907      	ldr	r1, [pc, #28]	; (15888 <IPC_IRQHandler+0x2bc>)
   1586c:	4a09      	ldr	r2, [pc, #36]	; (15894 <IPC_IRQHandler+0x2c8>)
   1586e:	600b      	str	r3, [r1, #0]
   15870:	6013      	str	r3, [r2, #0]
   15872:	e784      	b.n	1577e <IPC_IRQHandler+0x1b2>
   15874:	e000e100 	.word	0xe000e100
   15878:	4002a000 	.word	0x4002a000
   1587c:	4002a110 	.word	0x4002a110
   15880:	200207bc 	.word	0x200207bc
   15884:	200207b4 	.word	0x200207b4
   15888:	200207b8 	.word	0x200207b8
   1588c:	4002a11c 	.word	0x4002a11c
   15890:	4002a100 	.word	0x4002a100
   15894:	200207b0 	.word	0x200207b0
   15898:	4002a108 	.word	0x4002a108
   1589c:	04400004 	.word	0x04400004
   158a0:	05500001 	.word	0x05500001
   158a4:	200207c0 	.word	0x200207c0
   158a8:	20024e46 	.word	0x20024e46
   158ac:	4a37      	ldr	r2, [pc, #220]	; (1598c <IPC_IRQHandler+0x3c0>)
   158ae:	680b      	ldr	r3, [r1, #0]
   158b0:	6812      	ldr	r2, [r2, #0]
   158b2:	9305      	str	r3, [sp, #20]
   158b4:	6893      	ldr	r3, [r2, #8]
   158b6:	4836      	ldr	r0, [pc, #216]	; (15990 <IPC_IRQHandler+0x3c4>)
   158b8:	4936      	ldr	r1, [pc, #216]	; (15994 <IPC_IRQHandler+0x3c8>)
   158ba:	6003      	str	r3, [r0, #0]
   158bc:	6854      	ldr	r4, [r2, #4]
   158be:	9a05      	ldr	r2, [sp, #20]
   158c0:	600c      	str	r4, [r1, #0]
   158c2:	b16b      	cbz	r3, 158e0 <IPC_IRQHandler+0x314>
   158c4:	b164      	cbz	r4, 158e0 <IPC_IRQHandler+0x314>
   158c6:	681b      	ldr	r3, [r3, #0]
   158c8:	2b10      	cmp	r3, #16
   158ca:	d802      	bhi.n	158d2 <IPC_IRQHandler+0x306>
   158cc:	6822      	ldr	r2, [r4, #0]
   158ce:	2a10      	cmp	r2, #16
   158d0:	d90c      	bls.n	158ec <IPC_IRQHandler+0x320>
   158d2:	2103      	movs	r1, #3
   158d4:	f24c 0206 	movw	r2, #49158	; 0xc006
   158d8:	4b2f      	ldr	r3, [pc, #188]	; (15998 <IPC_IRQHandler+0x3cc>)
   158da:	6029      	str	r1, [r5, #0]
   158dc:	601a      	str	r2, [r3, #0]
   158de:	e74e      	b.n	1577e <IPC_IRQHandler+0x1b2>
   158e0:	2103      	movs	r1, #3
   158e2:	2210      	movs	r2, #16
   158e4:	4b2c      	ldr	r3, [pc, #176]	; (15998 <IPC_IRQHandler+0x3cc>)
   158e6:	6029      	str	r1, [r5, #0]
   158e8:	601a      	str	r2, [r3, #0]
   158ea:	e748      	b.n	1577e <IPC_IRQHandler+0x1b2>
   158ec:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 159a4 <IPC_IRQHandler+0x3d8>
   158f0:	2a00      	cmp	r2, #0
   158f2:	d042      	beq.n	1597a <IPC_IRQHandler+0x3ae>
   158f4:	2300      	movs	r3, #0
   158f6:	f104 0904 	add.w	r9, r4, #4
   158fa:	461e      	mov	r6, r3
   158fc:	e002      	b.n	15904 <IPC_IRQHandler+0x338>
   158fe:	3601      	adds	r6, #1
   15900:	4296      	cmp	r6, r2
   15902:	d22a      	bcs.n	1595a <IPC_IRQHandler+0x38e>
   15904:	00f7      	lsls	r7, r6, #3
   15906:	19e1      	adds	r1, r4, r7
   15908:	6888      	ldr	r0, [r1, #8]
   1590a:	2800      	cmp	r0, #0
   1590c:	d0f7      	beq.n	158fe <IPC_IRQHandler+0x332>
   1590e:	f8d1 a004 	ldr.w	sl, [r1, #4]
   15912:	fa5f fa8a 	uxtb.w	sl, sl
   15916:	f1ba 0f01 	cmp.w	sl, #1
   1591a:	d1f0      	bne.n	158fe <IPC_IRQHandler+0x332>
   1591c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   15920:	f8b8 0000 	ldrh.w	r0, [r8]
   15924:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   15928:	d1e9      	bne.n	158fe <IPC_IRQHandler+0x332>
   1592a:	684b      	ldr	r3, [r1, #4]
   1592c:	1c42      	adds	r2, r0, #1
   1592e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15932:	f043 0302 	orr.w	r3, r3, #2
   15936:	604b      	str	r3, [r1, #4]
   15938:	6888      	ldr	r0, [r1, #8]
   1593a:	f8a8 2000 	strh.w	r2, [r8]
   1593e:	f7ff fcf7 	bl	15330 <rpc_transport_rx_handle>
   15942:	4653      	mov	r3, sl
   15944:	b938      	cbnz	r0, 15956 <IPC_IRQHandler+0x38a>
   15946:	f859 2007 	ldr.w	r2, [r9, r7]
   1594a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1594e:	f042 0203 	orr.w	r2, r2, #3
   15952:	f849 2007 	str.w	r2, [r9, r7]
   15956:	6822      	ldr	r2, [r4, #0]
   15958:	e7d1      	b.n	158fe <IPC_IRQHandler+0x332>
   1595a:	2b00      	cmp	r3, #0
   1595c:	d1c8      	bne.n	158f0 <IPC_IRQHandler+0x324>
   1595e:	b912      	cbnz	r2, 15966 <IPC_IRQHandler+0x39a>
   15960:	e00b      	b.n	1597a <IPC_IRQHandler+0x3ae>
   15962:	4293      	cmp	r3, r2
   15964:	d009      	beq.n	1597a <IPC_IRQHandler+0x3ae>
   15966:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   1596a:	6888      	ldr	r0, [r1, #8]
   1596c:	3301      	adds	r3, #1
   1596e:	2800      	cmp	r0, #0
   15970:	d0f7      	beq.n	15962 <IPC_IRQHandler+0x396>
   15972:	6849      	ldr	r1, [r1, #4]
   15974:	b2c9      	uxtb	r1, r1
   15976:	2901      	cmp	r1, #1
   15978:	d1f3      	bne.n	15962 <IPC_IRQHandler+0x396>
   1597a:	2002      	movs	r0, #2
   1597c:	4b07      	ldr	r3, [pc, #28]	; (1599c <IPC_IRQHandler+0x3d0>)
   1597e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15982:	4a07      	ldr	r2, [pc, #28]	; (159a0 <IPC_IRQHandler+0x3d4>)
   15984:	681b      	ldr	r3, [r3, #0]
   15986:	6028      	str	r0, [r5, #0]
   15988:	e6ec      	b.n	15764 <IPC_IRQHandler+0x198>
   1598a:	bf00      	nop
   1598c:	200207c4 	.word	0x200207c4
   15990:	200207c0 	.word	0x200207c0
   15994:	200207bc 	.word	0x200207bc
   15998:	200207b0 	.word	0x200207b0
   1599c:	200207b4 	.word	0x200207b4
   159a0:	e000e100 	.word	0xe000e100
   159a4:	20024e46 	.word	0x20024e46

000159a8 <rpc_transport_msg_free>:
   159a8:	b430      	push	{r4, r5}
   159aa:	4b18      	ldr	r3, [pc, #96]	; (15a0c <rpc_transport_msg_free+0x64>)
   159ac:	681c      	ldr	r4, [r3, #0]
   159ae:	6825      	ldr	r5, [r4, #0]
   159b0:	b16d      	cbz	r5, 159ce <rpc_transport_msg_free+0x26>
   159b2:	68a3      	ldr	r3, [r4, #8]
   159b4:	4283      	cmp	r3, r0
   159b6:	d027      	beq.n	15a08 <rpc_transport_msg_free+0x60>
   159b8:	2300      	movs	r3, #0
   159ba:	e002      	b.n	159c2 <rpc_transport_msg_free+0x1a>
   159bc:	6889      	ldr	r1, [r1, #8]
   159be:	4281      	cmp	r1, r0
   159c0:	d019      	beq.n	159f6 <rpc_transport_msg_free+0x4e>
   159c2:	3301      	adds	r3, #1
   159c4:	00da      	lsls	r2, r3, #3
   159c6:	42ab      	cmp	r3, r5
   159c8:	eb04 0102 	add.w	r1, r4, r2
   159cc:	d1f6      	bne.n	159bc <rpc_transport_msg_free+0x14>
   159ce:	4b10      	ldr	r3, [pc, #64]	; (15a10 <rpc_transport_msg_free+0x68>)
   159d0:	681c      	ldr	r4, [r3, #0]
   159d2:	6825      	ldr	r5, [r4, #0]
   159d4:	b16d      	cbz	r5, 159f2 <rpc_transport_msg_free+0x4a>
   159d6:	68a3      	ldr	r3, [r4, #8]
   159d8:	4283      	cmp	r3, r0
   159da:	d015      	beq.n	15a08 <rpc_transport_msg_free+0x60>
   159dc:	2300      	movs	r3, #0
   159de:	e002      	b.n	159e6 <rpc_transport_msg_free+0x3e>
   159e0:	6889      	ldr	r1, [r1, #8]
   159e2:	4281      	cmp	r1, r0
   159e4:	d007      	beq.n	159f6 <rpc_transport_msg_free+0x4e>
   159e6:	3301      	adds	r3, #1
   159e8:	00da      	lsls	r2, r3, #3
   159ea:	429d      	cmp	r5, r3
   159ec:	eb04 0102 	add.w	r1, r4, r2
   159f0:	d1f6      	bne.n	159e0 <rpc_transport_msg_free+0x38>
   159f2:	bc30      	pop	{r4, r5}
   159f4:	4770      	bx	lr
   159f6:	3204      	adds	r2, #4
   159f8:	58a3      	ldr	r3, [r4, r2]
   159fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   159fe:	f043 0303 	orr.w	r3, r3, #3
   15a02:	50a3      	str	r3, [r4, r2]
   15a04:	bc30      	pop	{r4, r5}
   15a06:	4770      	bx	lr
   15a08:	2204      	movs	r2, #4
   15a0a:	e7f5      	b.n	159f8 <rpc_transport_msg_free+0x50>
   15a0c:	200207c0 	.word	0x200207c0
   15a10:	200207bc 	.word	0x200207bc

00015a14 <rpc_transport_ipc_rx_suspend>:
   15a14:	b410      	push	{r4}
   15a16:	2400      	movs	r4, #0
   15a18:	2010      	movs	r0, #16
   15a1a:	2204      	movs	r2, #4
   15a1c:	4b0a      	ldr	r3, [pc, #40]	; (15a48 <rpc_transport_ipc_rx_suspend+0x34>)
   15a1e:	490b      	ldr	r1, [pc, #44]	; (15a4c <rpc_transport_ipc_rx_suspend+0x38>)
   15a20:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   15a24:	680c      	ldr	r4, [r1, #0]
   15a26:	b083      	sub	sp, #12
   15a28:	9401      	str	r4, [sp, #4]
   15a2a:	9c01      	ldr	r4, [sp, #4]
   15a2c:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   15a30:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   15a34:	6809      	ldr	r1, [r1, #0]
   15a36:	4b06      	ldr	r3, [pc, #24]	; (15a50 <rpc_transport_ipc_rx_suspend+0x3c>)
   15a38:	9100      	str	r1, [sp, #0]
   15a3a:	9900      	ldr	r1, [sp, #0]
   15a3c:	601a      	str	r2, [r3, #0]
   15a3e:	b003      	add	sp, #12
   15a40:	f85d 4b04 	ldr.w	r4, [sp], #4
   15a44:	4770      	bx	lr
   15a46:	bf00      	nop
   15a48:	4002a000 	.word	0x4002a000
   15a4c:	4002a5a0 	.word	0x4002a5a0
   15a50:	200207b8 	.word	0x200207b8

00015a54 <rpc_transport_ipc_rx_shutdown>:
   15a54:	b4f0      	push	{r4, r5, r6, r7}
   15a56:	4a32      	ldr	r2, [pc, #200]	; (15b20 <rpc_transport_ipc_rx_shutdown+0xcc>)
   15a58:	b08c      	sub	sp, #48	; 0x30
   15a5a:	6813      	ldr	r3, [r2, #0]
   15a5c:	2b06      	cmp	r3, #6
   15a5e:	d1fc      	bne.n	15a5a <rpc_transport_ipc_rx_shutdown+0x6>
   15a60:	2000      	movs	r0, #0
   15a62:	2201      	movs	r2, #1
   15a64:	210a      	movs	r1, #10
   15a66:	4b2f      	ldr	r3, [pc, #188]	; (15b24 <rpc_transport_ipc_rx_shutdown+0xd0>)
   15a68:	9000      	str	r0, [sp, #0]
   15a6a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   15a6e:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   15a72:	9000      	str	r0, [sp, #0]
   15a74:	9800      	ldr	r0, [sp, #0]
   15a76:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   15a7a:	9101      	str	r1, [sp, #4]
   15a7c:	9b01      	ldr	r3, [sp, #4]
   15a7e:	b12b      	cbz	r3, 15a8c <rpc_transport_ipc_rx_shutdown+0x38>
   15a80:	9b01      	ldr	r3, [sp, #4]
   15a82:	3b01      	subs	r3, #1
   15a84:	9301      	str	r3, [sp, #4]
   15a86:	9b01      	ldr	r3, [sp, #4]
   15a88:	2b00      	cmp	r3, #0
   15a8a:	d1f9      	bne.n	15a80 <rpc_transport_ipc_rx_shutdown+0x2c>
   15a8c:	2200      	movs	r2, #0
   15a8e:	2601      	movs	r6, #1
   15a90:	2504      	movs	r5, #4
   15a92:	2410      	movs	r4, #16
   15a94:	4923      	ldr	r1, [pc, #140]	; (15b24 <rpc_transport_ipc_rx_shutdown+0xd0>)
   15a96:	4b24      	ldr	r3, [pc, #144]	; (15b28 <rpc_transport_ipc_rx_shutdown+0xd4>)
   15a98:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   15a9c:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   15aa0:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15aa4:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   15aa8:	6809      	ldr	r1, [r1, #0]
   15aaa:	2040      	movs	r0, #64	; 0x40
   15aac:	9102      	str	r1, [sp, #8]
   15aae:	491f      	ldr	r1, [pc, #124]	; (15b2c <rpc_transport_ipc_rx_shutdown+0xd8>)
   15ab0:	9f02      	ldr	r7, [sp, #8]
   15ab2:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   15ab6:	680f      	ldr	r7, [r1, #0]
   15ab8:	2180      	movs	r1, #128	; 0x80
   15aba:	9703      	str	r7, [sp, #12]
   15abc:	4f1c      	ldr	r7, [pc, #112]	; (15b30 <rpc_transport_ipc_rx_shutdown+0xdc>)
   15abe:	f8dd c00c 	ldr.w	ip, [sp, #12]
   15ac2:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   15ac6:	683f      	ldr	r7, [r7, #0]
   15ac8:	9704      	str	r7, [sp, #16]
   15aca:	4f1a      	ldr	r7, [pc, #104]	; (15b34 <rpc_transport_ipc_rx_shutdown+0xe0>)
   15acc:	f8dd c010 	ldr.w	ip, [sp, #16]
   15ad0:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   15ad4:	683f      	ldr	r7, [r7, #0]
   15ad6:	9705      	str	r7, [sp, #20]
   15ad8:	9f05      	ldr	r7, [sp, #20]
   15ada:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   15ade:	4a16      	ldr	r2, [pc, #88]	; (15b38 <rpc_transport_ipc_rx_shutdown+0xe4>)
   15ae0:	6812      	ldr	r2, [r2, #0]
   15ae2:	9206      	str	r2, [sp, #24]
   15ae4:	4a15      	ldr	r2, [pc, #84]	; (15b3c <rpc_transport_ipc_rx_shutdown+0xe8>)
   15ae6:	9f06      	ldr	r7, [sp, #24]
   15ae8:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   15aec:	6816      	ldr	r6, [r2, #0]
   15aee:	9607      	str	r6, [sp, #28]
   15af0:	9e07      	ldr	r6, [sp, #28]
   15af2:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   15af6:	6815      	ldr	r5, [r2, #0]
   15af8:	9508      	str	r5, [sp, #32]
   15afa:	9d08      	ldr	r5, [sp, #32]
   15afc:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   15b00:	6814      	ldr	r4, [r2, #0]
   15b02:	9409      	str	r4, [sp, #36]	; 0x24
   15b04:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15b06:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   15b0a:	6810      	ldr	r0, [r2, #0]
   15b0c:	900a      	str	r0, [sp, #40]	; 0x28
   15b0e:	980a      	ldr	r0, [sp, #40]	; 0x28
   15b10:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   15b14:	6813      	ldr	r3, [r2, #0]
   15b16:	930b      	str	r3, [sp, #44]	; 0x2c
   15b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b1a:	b00c      	add	sp, #48	; 0x30
   15b1c:	bcf0      	pop	{r4, r5, r6, r7}
   15b1e:	4770      	bx	lr
   15b20:	200207b8 	.word	0x200207b8
   15b24:	40005000 	.word	0x40005000
   15b28:	4002a000 	.word	0x4002a000
   15b2c:	4002a598 	.word	0x4002a598
   15b30:	4002a5a0 	.word	0x4002a5a0
   15b34:	4002a5a8 	.word	0x4002a5a8
   15b38:	4002a5ac 	.word	0x4002a5ac
   15b3c:	4002a308 	.word	0x4002a308

00015b40 <rpc_transport_ipc_tx_init>:
   15b40:	2800      	cmp	r0, #0
   15b42:	f000 80b8 	beq.w	15cb6 <rpc_transport_ipc_tx_init+0x176>
   15b46:	2900      	cmp	r1, #0
   15b48:	f000 80b5 	beq.w	15cb6 <rpc_transport_ipc_tx_init+0x176>
   15b4c:	2a00      	cmp	r2, #0
   15b4e:	f000 80b2 	beq.w	15cb6 <rpc_transport_ipc_tx_init+0x176>
   15b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b56:	6a04      	ldr	r4, [r0, #32]
   15b58:	b085      	sub	sp, #20
   15b5a:	2c00      	cmp	r4, #0
   15b5c:	f000 80a6 	beq.w	15cac <rpc_transport_ipc_tx_init+0x16c>
   15b60:	6a40      	ldr	r0, [r0, #36]	; 0x24
   15b62:	2800      	cmp	r0, #0
   15b64:	f000 80a2 	beq.w	15cac <rpc_transport_ipc_tx_init+0x16c>
   15b68:	f642 4587 	movw	r5, #11399	; 0x2c87
   15b6c:	f04f 0a00 	mov.w	sl, #0
   15b70:	4e55      	ldr	r6, [pc, #340]	; (15cc8 <rpc_transport_ipc_tx_init+0x188>)
   15b72:	42a8      	cmp	r0, r5
   15b74:	f886 a000 	strb.w	sl, [r6]
   15b78:	f240 80a0 	bls.w	15cbc <rpc_transport_ipc_tx_init+0x17c>
   15b7c:	2708      	movs	r7, #8
   15b7e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 15d00 <rpc_transport_ipc_tx_init+0x1c0>
   15b82:	4620      	mov	r0, r4
   15b84:	4616      	mov	r6, r2
   15b86:	460d      	mov	r5, r1
   15b88:	2244      	movs	r2, #68	; 0x44
   15b8a:	4651      	mov	r1, sl
   15b8c:	f8c9 4000 	str.w	r4, [r9]
   15b90:	f007 fd8b 	bl	1d6aa <memset>
   15b94:	f8d9 2000 	ldr.w	r2, [r9]
   15b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
   15b9c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 15d04 <rpc_transport_ipc_tx_init+0x1c4>
   15ba0:	f882 a001 	strb.w	sl, [r2, #1]
   15ba4:	f882 a002 	strb.w	sl, [r2, #2]
   15ba8:	f882 a003 	strb.w	sl, [r2, #3]
   15bac:	7017      	strb	r7, [r2, #0]
   15bae:	4618      	mov	r0, r3
   15bb0:	2244      	movs	r2, #68	; 0x44
   15bb2:	4651      	mov	r1, sl
   15bb4:	f8c8 3000 	str.w	r3, [r8]
   15bb8:	f007 fd77 	bl	1d6aa <memset>
   15bbc:	f8d8 2000 	ldr.w	r2, [r8]
   15bc0:	f104 0388 	add.w	r3, r4, #136	; 0x88
   15bc4:	f8df b140 	ldr.w	fp, [pc, #320]	; 15d08 <rpc_transport_ipc_tx_init+0x1c8>
   15bc8:	7017      	strb	r7, [r2, #0]
   15bca:	f882 a001 	strb.w	sl, [r2, #1]
   15bce:	f882 a002 	strb.w	sl, [r2, #2]
   15bd2:	f882 a003 	strb.w	sl, [r2, #3]
   15bd6:	4618      	mov	r0, r3
   15bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
   15bdc:	4651      	mov	r1, sl
   15bde:	f8cb 3000 	str.w	r3, [fp]
   15be2:	f007 fd62 	bl	1d6aa <memset>
   15be6:	4b39      	ldr	r3, [pc, #228]	; (15ccc <rpc_transport_ipc_tx_init+0x18c>)
   15be8:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   15bec:	f8c3 c000 	str.w	ip, [r3]
   15bf0:	4651      	mov	r1, sl
   15bf2:	4660      	mov	r0, ip
   15bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
   15bf8:	f007 fd57 	bl	1d6aa <memset>
   15bfc:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   15c00:	2106      	movs	r1, #6
   15c02:	f04f 0e01 	mov.w	lr, #1
   15c06:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   15c0a:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   15c0e:	4b30      	ldr	r3, [pc, #192]	; (15cd0 <rpc_transport_ipc_tx_init+0x190>)
   15c10:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   15c14:	605c      	str	r4, [r3, #4]
   15c16:	4c2f      	ldr	r4, [pc, #188]	; (15cd4 <rpc_transport_ipc_tx_init+0x194>)
   15c18:	f8c3 c008 	str.w	ip, [r3, #8]
   15c1c:	8199      	strh	r1, [r3, #12]
   15c1e:	f8a3 e000 	strh.w	lr, [r3]
   15c22:	4619      	mov	r1, r3
   15c24:	611c      	str	r4, [r3, #16]
   15c26:	4b2c      	ldr	r3, [pc, #176]	; (15cd8 <rpc_transport_ipc_tx_init+0x198>)
   15c28:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 15d0c <rpc_transport_ipc_tx_init+0x1cc>
   15c2c:	6120      	str	r0, [r4, #16]
   15c2e:	482b      	ldr	r0, [pc, #172]	; (15cdc <rpc_transport_ipc_tx_init+0x19c>)
   15c30:	6063      	str	r3, [r4, #4]
   15c32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   15c36:	60a0      	str	r0, [r4, #8]
   15c38:	f8c4 c000 	str.w	ip, [r4]
   15c3c:	4828      	ldr	r0, [pc, #160]	; (15ce0 <rpc_transport_ipc_tx_init+0x1a0>)
   15c3e:	60e3      	str	r3, [r4, #12]
   15c40:	6162      	str	r2, [r4, #20]
   15c42:	f7fd fe4b 	bl	138dc <nrf_mem_register>
   15c46:	2800      	cmp	r0, #0
   15c48:	d132      	bne.n	15cb0 <rpc_transport_ipc_tx_init+0x170>
   15c4a:	f04f 0c02 	mov.w	ip, #2
   15c4e:	2420      	movs	r4, #32
   15c50:	f8d9 1000 	ldr.w	r1, [r9]
   15c54:	f8db 2000 	ldr.w	r2, [fp]
   15c58:	6029      	str	r1, [r5, #0]
   15c5a:	4b1c      	ldr	r3, [pc, #112]	; (15ccc <rpc_transport_ipc_tx_init+0x18c>)
   15c5c:	f8d8 1000 	ldr.w	r1, [r8]
   15c60:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 15d10 <rpc_transport_ipc_tx_init+0x1d0>
   15c64:	4d1f      	ldr	r5, [pc, #124]	; (15ce4 <rpc_transport_ipc_tx_init+0x1a4>)
   15c66:	6031      	str	r1, [r6, #0]
   15c68:	f8ce 2000 	str.w	r2, [lr]
   15c6c:	681b      	ldr	r3, [r3, #0]
   15c6e:	491e      	ldr	r1, [pc, #120]	; (15ce8 <rpc_transport_ipc_tx_init+0x1a8>)
   15c70:	f502 7200 	add.w	r2, r2, #512	; 0x200
   15c74:	602a      	str	r2, [r5, #0]
   15c76:	4e1d      	ldr	r6, [pc, #116]	; (15cec <rpc_transport_ipc_tx_init+0x1ac>)
   15c78:	4a1d      	ldr	r2, [pc, #116]	; (15cf0 <rpc_transport_ipc_tx_init+0x1b0>)
   15c7a:	4d1e      	ldr	r5, [pc, #120]	; (15cf4 <rpc_transport_ipc_tx_init+0x1b4>)
   15c7c:	600b      	str	r3, [r1, #0]
   15c7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   15c82:	491d      	ldr	r1, [pc, #116]	; (15cf8 <rpc_transport_ipc_tx_init+0x1b8>)
   15c84:	6033      	str	r3, [r6, #0]
   15c86:	8028      	strh	r0, [r5, #0]
   15c88:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   15c8c:	6809      	ldr	r1, [r1, #0]
   15c8e:	4b1b      	ldr	r3, [pc, #108]	; (15cfc <rpc_transport_ipc_tx_init+0x1bc>)
   15c90:	9103      	str	r1, [sp, #12]
   15c92:	9903      	ldr	r1, [sp, #12]
   15c94:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   15c98:	6819      	ldr	r1, [r3, #0]
   15c9a:	443b      	add	r3, r7
   15c9c:	9102      	str	r1, [sp, #8]
   15c9e:	9902      	ldr	r1, [sp, #8]
   15ca0:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   15ca4:	681b      	ldr	r3, [r3, #0]
   15ca6:	9301      	str	r3, [sp, #4]
   15ca8:	9b01      	ldr	r3, [sp, #4]
   15caa:	e001      	b.n	15cb0 <rpc_transport_ipc_tx_init+0x170>
   15cac:	f24c 0007 	movw	r0, #49159	; 0xc007
   15cb0:	b005      	add	sp, #20
   15cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb6:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15cba:	4770      	bx	lr
   15cbc:	f24c 0004 	movw	r0, #49156	; 0xc004
   15cc0:	b005      	add	sp, #20
   15cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cc6:	bf00      	nop
   15cc8:	20026590 	.word	0x20026590
   15ccc:	200207f0 	.word	0x200207f0
   15cd0:	200207dc 	.word	0x200207dc
   15cd4:	20020800 	.word	0x20020800
   15cd8:	00040080 	.word	0x00040080
   15cdc:	00040100 	.word	0x00040100
   15ce0:	200207c8 	.word	0x200207c8
   15ce4:	200207d4 	.word	0x200207d4
   15ce8:	200207d0 	.word	0x200207d0
   15cec:	200207cc 	.word	0x200207cc
   15cf0:	4002a000 	.word	0x4002a000
   15cf4:	20024e48 	.word	0x20024e48
   15cf8:	4002a514 	.word	0x4002a514
   15cfc:	4002a51c 	.word	0x4002a51c
   15d00:	200207fc 	.word	0x200207fc
   15d04:	200207f4 	.word	0x200207f4
   15d08:	200207f8 	.word	0x200207f8
   15d0c:	00080040 	.word	0x00080040
   15d10:	200207d8 	.word	0x200207d8

00015d14 <rpc_transport_ipc_tx_send>:
   15d14:	2800      	cmp	r0, #0
   15d16:	d05f      	beq.n	15dd8 <rpc_transport_ipc_tx_send+0xc4>
   15d18:	b470      	push	{r4, r5, r6}
   15d1a:	4b33      	ldr	r3, [pc, #204]	; (15de8 <rpc_transport_ipc_tx_send+0xd4>)
   15d1c:	b083      	sub	sp, #12
   15d1e:	681a      	ldr	r2, [r3, #0]
   15d20:	4b32      	ldr	r3, [pc, #200]	; (15dec <rpc_transport_ipc_tx_send+0xd8>)
   15d22:	4282      	cmp	r2, r0
   15d24:	d81e      	bhi.n	15d64 <rpc_transport_ipc_tx_send+0x50>
   15d26:	681b      	ldr	r3, [r3, #0]
   15d28:	4931      	ldr	r1, [pc, #196]	; (15df0 <rpc_transport_ipc_tx_send+0xdc>)
   15d2a:	4283      	cmp	r3, r0
   15d2c:	6809      	ldr	r1, [r1, #0]
   15d2e:	d803      	bhi.n	15d38 <rpc_transport_ipc_tx_send+0x24>
   15d30:	4c30      	ldr	r4, [pc, #192]	; (15df4 <rpc_transport_ipc_tx_send+0xe0>)
   15d32:	6824      	ldr	r4, [r4, #0]
   15d34:	4284      	cmp	r4, r0
   15d36:	d847      	bhi.n	15dc8 <rpc_transport_ipc_tx_send+0xb4>
   15d38:	4281      	cmp	r1, r0
   15d3a:	d90e      	bls.n	15d5a <rpc_transport_ipc_tx_send+0x46>
   15d3c:	4b2e      	ldr	r3, [pc, #184]	; (15df8 <rpc_transport_ipc_tx_send+0xe4>)
   15d3e:	781b      	ldrb	r3, [r3, #0]
   15d40:	2b00      	cmp	r3, #0
   15d42:	d14c      	bne.n	15dde <rpc_transport_ipc_tx_send+0xca>
   15d44:	1a83      	subs	r3, r0, r2
   15d46:	492d      	ldr	r1, [pc, #180]	; (15dfc <rpc_transport_ipc_tx_send+0xe8>)
   15d48:	099e      	lsrs	r6, r3, #6
   15d4a:	069b      	lsls	r3, r3, #26
   15d4c:	680a      	ldr	r2, [r1, #0]
   15d4e:	4c2c      	ldr	r4, [pc, #176]	; (15e00 <rpc_transport_ipc_tx_send+0xec>)
   15d50:	f04f 0103 	mov.w	r1, #3
   15d54:	f04f 0502 	mov.w	r5, #2
   15d58:	d014      	beq.n	15d84 <rpc_transport_ipc_tx_send+0x70>
   15d5a:	f24c 0010 	movw	r0, #49168	; 0xc010
   15d5e:	b003      	add	sp, #12
   15d60:	bc70      	pop	{r4, r5, r6}
   15d62:	4770      	bx	lr
   15d64:	681b      	ldr	r3, [r3, #0]
   15d66:	4298      	cmp	r0, r3
   15d68:	d3f7      	bcc.n	15d5a <rpc_transport_ipc_tx_send+0x46>
   15d6a:	4a22      	ldr	r2, [pc, #136]	; (15df4 <rpc_transport_ipc_tx_send+0xe0>)
   15d6c:	6812      	ldr	r2, [r2, #0]
   15d6e:	4290      	cmp	r0, r2
   15d70:	d2f3      	bcs.n	15d5a <rpc_transport_ipc_tx_send+0x46>
   15d72:	2101      	movs	r1, #1
   15d74:	1ac3      	subs	r3, r0, r3
   15d76:	4a23      	ldr	r2, [pc, #140]	; (15e04 <rpc_transport_ipc_tx_send+0xf0>)
   15d78:	099e      	lsrs	r6, r3, #6
   15d7a:	069b      	lsls	r3, r3, #26
   15d7c:	460d      	mov	r5, r1
   15d7e:	6812      	ldr	r2, [r2, #0]
   15d80:	4c21      	ldr	r4, [pc, #132]	; (15e08 <rpc_transport_ipc_tx_send+0xf4>)
   15d82:	d1ea      	bne.n	15d5a <rpc_transport_ipc_tx_send+0x46>
   15d84:	6843      	ldr	r3, [r0, #4]
   15d86:	b2db      	uxtb	r3, r3
   15d88:	429d      	cmp	r5, r3
   15d8a:	d120      	bne.n	15dce <rpc_transport_ipc_tx_send+0xba>
   15d8c:	2020      	movs	r0, #32
   15d8e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   15d92:	4d1e      	ldr	r5, [pc, #120]	; (15e0c <rpc_transport_ipc_tx_send+0xf8>)
   15d94:	6853      	ldr	r3, [r2, #4]
   15d96:	882e      	ldrh	r6, [r5, #0]
   15d98:	b29b      	uxth	r3, r3
   15d9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15da2:	f043 0301 	orr.w	r3, r3, #1
   15da6:	6053      	str	r3, [r2, #4]
   15da8:	bf00      	nop
   15daa:	3801      	subs	r0, #1
   15dac:	d1fc      	bne.n	15da8 <rpc_transport_ipc_tx_send+0x94>
   15dae:	2201      	movs	r2, #1
   15db0:	4b17      	ldr	r3, [pc, #92]	; (15e10 <rpc_transport_ipc_tx_send+0xfc>)
   15db2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   15db6:	6822      	ldr	r2, [r4, #0]
   15db8:	882b      	ldrh	r3, [r5, #0]
   15dba:	9201      	str	r2, [sp, #4]
   15dbc:	9a01      	ldr	r2, [sp, #4]
   15dbe:	3301      	adds	r3, #1
   15dc0:	802b      	strh	r3, [r5, #0]
   15dc2:	b003      	add	sp, #12
   15dc4:	bc70      	pop	{r4, r5, r6}
   15dc6:	4770      	bx	lr
   15dc8:	4281      	cmp	r1, r0
   15dca:	d9d2      	bls.n	15d72 <rpc_transport_ipc_tx_send+0x5e>
   15dcc:	e7b6      	b.n	15d3c <rpc_transport_ipc_tx_send+0x28>
   15dce:	f24c 0007 	movw	r0, #49159	; 0xc007
   15dd2:	b003      	add	sp, #12
   15dd4:	bc70      	pop	{r4, r5, r6}
   15dd6:	4770      	bx	lr
   15dd8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15ddc:	4770      	bx	lr
   15dde:	f24c 000f 	movw	r0, #49167	; 0xc00f
   15de2:	b003      	add	sp, #12
   15de4:	bc70      	pop	{r4, r5, r6}
   15de6:	4770      	bx	lr
   15de8:	200207d8 	.word	0x200207d8
   15dec:	200207d0 	.word	0x200207d0
   15df0:	200207d4 	.word	0x200207d4
   15df4:	200207cc 	.word	0x200207cc
   15df8:	20026590 	.word	0x20026590
   15dfc:	200207fc 	.word	0x200207fc
   15e00:	4002a00c 	.word	0x4002a00c
   15e04:	200207f4 	.word	0x200207f4
   15e08:	4002a004 	.word	0x4002a004
   15e0c:	20024e48 	.word	0x20024e48
   15e10:	4002a000 	.word	0x4002a000

00015e14 <rpc_transport_ipc_tx_rpc_data_alloc>:
   15e14:	4b18      	ldr	r3, [pc, #96]	; (15e78 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   15e16:	781b      	ldrb	r3, [r3, #0]
   15e18:	bb63      	cbnz	r3, 15e74 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   15e1a:	b4f0      	push	{r4, r5, r6, r7}
   15e1c:	4a17      	ldr	r2, [pc, #92]	; (15e7c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   15e1e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   15e22:	6814      	ldr	r4, [r2, #0]
   15e24:	4b16      	ldr	r3, [pc, #88]	; (15e80 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   15e26:	6825      	ldr	r5, [r4, #0]
   15e28:	681e      	ldr	r6, [r3, #0]
   15e2a:	b1a5      	cbz	r5, 15e56 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   15e2c:	4607      	mov	r7, r0
   15e2e:	00c1      	lsls	r1, r0, #3
   15e30:	1863      	adds	r3, r4, r1
   15e32:	685a      	ldr	r2, [r3, #4]
   15e34:	b2d2      	uxtb	r2, r2
   15e36:	2a03      	cmp	r2, #3
   15e38:	d104      	bne.n	15e44 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   15e3a:	609f      	str	r7, [r3, #8]
   15e3c:	685a      	ldr	r2, [r3, #4]
   15e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15e42:	605a      	str	r2, [r3, #4]
   15e44:	685a      	ldr	r2, [r3, #4]
   15e46:	f012 0fff 	tst.w	r2, #255	; 0xff
   15e4a:	d101      	bne.n	15e50 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   15e4c:	689b      	ldr	r3, [r3, #8]
   15e4e:	b12b      	cbz	r3, 15e5c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   15e50:	3001      	adds	r0, #1
   15e52:	42a8      	cmp	r0, r5
   15e54:	d1eb      	bne.n	15e2e <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   15e56:	2000      	movs	r0, #0
   15e58:	bcf0      	pop	{r4, r5, r6, r7}
   15e5a:	4770      	bx	lr
   15e5c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15e60:	4421      	add	r1, r4
   15e62:	6088      	str	r0, [r1, #8]
   15e64:	6843      	ldr	r3, [r0, #4]
   15e66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15e6a:	f043 0302 	orr.w	r3, r3, #2
   15e6e:	6043      	str	r3, [r0, #4]
   15e70:	bcf0      	pop	{r4, r5, r6, r7}
   15e72:	4770      	bx	lr
   15e74:	2000      	movs	r0, #0
   15e76:	4770      	bx	lr
   15e78:	20026590 	.word	0x20026590
   15e7c:	200207fc 	.word	0x200207fc
   15e80:	200207f8 	.word	0x200207f8

00015e84 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   15e84:	b4f0      	push	{r4, r5, r6, r7}
   15e86:	4a15      	ldr	r2, [pc, #84]	; (15edc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   15e88:	4b15      	ldr	r3, [pc, #84]	; (15ee0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   15e8a:	6814      	ldr	r4, [r2, #0]
   15e8c:	681e      	ldr	r6, [r3, #0]
   15e8e:	6825      	ldr	r5, [r4, #0]
   15e90:	b1ad      	cbz	r5, 15ebe <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   15e92:	2000      	movs	r0, #0
   15e94:	4607      	mov	r7, r0
   15e96:	00c1      	lsls	r1, r0, #3
   15e98:	1863      	adds	r3, r4, r1
   15e9a:	685a      	ldr	r2, [r3, #4]
   15e9c:	b2d2      	uxtb	r2, r2
   15e9e:	2a03      	cmp	r2, #3
   15ea0:	d104      	bne.n	15eac <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   15ea2:	609f      	str	r7, [r3, #8]
   15ea4:	685a      	ldr	r2, [r3, #4]
   15ea6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15eaa:	605a      	str	r2, [r3, #4]
   15eac:	685a      	ldr	r2, [r3, #4]
   15eae:	f012 0fff 	tst.w	r2, #255	; 0xff
   15eb2:	d101      	bne.n	15eb8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   15eb4:	689b      	ldr	r3, [r3, #8]
   15eb6:	b12b      	cbz	r3, 15ec4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   15eb8:	3001      	adds	r0, #1
   15eba:	4285      	cmp	r5, r0
   15ebc:	d1eb      	bne.n	15e96 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   15ebe:	2000      	movs	r0, #0
   15ec0:	bcf0      	pop	{r4, r5, r6, r7}
   15ec2:	4770      	bx	lr
   15ec4:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15ec8:	4421      	add	r1, r4
   15eca:	6088      	str	r0, [r1, #8]
   15ecc:	6843      	ldr	r3, [r0, #4]
   15ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15ed2:	f043 0301 	orr.w	r3, r3, #1
   15ed6:	6043      	str	r3, [r0, #4]
   15ed8:	bcf0      	pop	{r4, r5, r6, r7}
   15eda:	4770      	bx	lr
   15edc:	200207f4 	.word	0x200207f4
   15ee0:	200207f0 	.word	0x200207f0

00015ee4 <rpc_transport_ipc_tx_data_alloc>:
   15ee4:	4b03      	ldr	r3, [pc, #12]	; (15ef4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   15ee6:	781b      	ldrb	r3, [r3, #0]
   15ee8:	b90b      	cbnz	r3, 15eee <rpc_transport_ipc_tx_data_alloc+0xa>
   15eea:	f7fd be27 	b.w	13b3c <nrf_shared_malloc>
   15eee:	2000      	movs	r0, #0
   15ef0:	4770      	bx	lr
   15ef2:	bf00      	nop
   15ef4:	20026590 	.word	0x20026590

00015ef8 <rpc_transport_ipc_tx_suspend>:
   15ef8:	2201      	movs	r2, #1
   15efa:	4b01      	ldr	r3, [pc, #4]	; (15f00 <rpc_transport_ipc_tx_suspend+0x8>)
   15efc:	701a      	strb	r2, [r3, #0]
   15efe:	4770      	bx	lr
   15f00:	20026590 	.word	0x20026590

00015f04 <rpc_transport_ipc_tx_shutdown>:
   15f04:	b4f0      	push	{r4, r5, r6, r7}
   15f06:	4a16      	ldr	r2, [pc, #88]	; (15f60 <rpc_transport_ipc_tx_shutdown+0x5c>)
   15f08:	4b16      	ldr	r3, [pc, #88]	; (15f64 <rpc_transport_ipc_tx_shutdown+0x60>)
   15f0a:	6814      	ldr	r4, [r2, #0]
   15f0c:	681e      	ldr	r6, [r3, #0]
   15f0e:	6825      	ldr	r5, [r4, #0]
   15f10:	b1ad      	cbz	r5, 15f3e <rpc_transport_ipc_tx_shutdown+0x3a>
   15f12:	2200      	movs	r2, #0
   15f14:	4617      	mov	r7, r2
   15f16:	00d0      	lsls	r0, r2, #3
   15f18:	1823      	adds	r3, r4, r0
   15f1a:	6859      	ldr	r1, [r3, #4]
   15f1c:	b2c9      	uxtb	r1, r1
   15f1e:	2903      	cmp	r1, #3
   15f20:	d104      	bne.n	15f2c <rpc_transport_ipc_tx_shutdown+0x28>
   15f22:	609f      	str	r7, [r3, #8]
   15f24:	6859      	ldr	r1, [r3, #4]
   15f26:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   15f2a:	6059      	str	r1, [r3, #4]
   15f2c:	6859      	ldr	r1, [r3, #4]
   15f2e:	f011 0fff 	tst.w	r1, #255	; 0xff
   15f32:	d101      	bne.n	15f38 <rpc_transport_ipc_tx_shutdown+0x34>
   15f34:	689b      	ldr	r3, [r3, #8]
   15f36:	b123      	cbz	r3, 15f42 <rpc_transport_ipc_tx_shutdown+0x3e>
   15f38:	3201      	adds	r2, #1
   15f3a:	42aa      	cmp	r2, r5
   15f3c:	d1eb      	bne.n	15f16 <rpc_transport_ipc_tx_shutdown+0x12>
   15f3e:	bcf0      	pop	{r4, r5, r6, r7}
   15f40:	4770      	bx	lr
   15f42:	0192      	lsls	r2, r2, #6
   15f44:	4404      	add	r4, r0
   15f46:	18b0      	adds	r0, r6, r2
   15f48:	60a0      	str	r0, [r4, #8]
   15f4a:	6843      	ldr	r3, [r0, #4]
   15f4c:	4906      	ldr	r1, [pc, #24]	; (15f68 <rpc_transport_ipc_tx_shutdown+0x64>)
   15f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15f52:	f043 0301 	orr.w	r3, r3, #1
   15f56:	6043      	str	r3, [r0, #4]
   15f58:	50b1      	str	r1, [r6, r2]
   15f5a:	bcf0      	pop	{r4, r5, r6, r7}
   15f5c:	f7ff beda 	b.w	15d14 <rpc_transport_ipc_tx_send>
   15f60:	200207f4 	.word	0x200207f4
   15f64:	200207f0 	.word	0x200207f0
   15f68:	00030001 	.word	0x00030001

00015f6c <ok_rsp_parser>:
   15f6c:	2000      	movs	r0, #0
   15f6e:	4770      	bx	lr

00015f70 <pdn_state_get_parser>:
   15f70:	2200      	movs	r2, #0
   15f72:	b570      	push	{r4, r5, r6, lr}
   15f74:	780b      	ldrb	r3, [r1, #0]
   15f76:	b084      	sub	sp, #16
   15f78:	460e      	mov	r6, r1
   15f7a:	e9cd 2200 	strd	r2, r2, [sp]
   15f7e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15f82:	b323      	cbz	r3, 15fce <pdn_state_get_parser+0x5e>
   15f84:	460c      	mov	r4, r1
   15f86:	2b20      	cmp	r3, #32
   15f88:	460d      	mov	r5, r1
   15f8a:	d01b      	beq.n	15fc4 <pdn_state_get_parser+0x54>
   15f8c:	700b      	strb	r3, [r1, #0]
   15f8e:	3201      	adds	r2, #1
   15f90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15f94:	18b1      	adds	r1, r6, r2
   15f96:	460d      	mov	r5, r1
   15f98:	2b00      	cmp	r3, #0
   15f9a:	d1f4      	bne.n	15f86 <pdn_state_get_parser+0x16>
   15f9c:	2200      	movs	r2, #0
   15f9e:	4b0d      	ldr	r3, [pc, #52]	; (15fd4 <pdn_state_get_parser+0x64>)
   15fa0:	702a      	strb	r2, [r5, #0]
   15fa2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15fa6:	4a0c      	ldr	r2, [pc, #48]	; (15fd8 <pdn_state_get_parser+0x68>)
   15fa8:	681b      	ldr	r3, [r3, #0]
   15faa:	2110      	movs	r1, #16
   15fac:	4668      	mov	r0, sp
   15fae:	f7fa ffbb 	bl	10f28 <snprintf>
   15fb2:	4669      	mov	r1, sp
   15fb4:	4630      	mov	r0, r6
   15fb6:	f007 fabe 	bl	1d536 <strstr>
   15fba:	3000      	adds	r0, #0
   15fbc:	bf18      	it	ne
   15fbe:	2001      	movne	r0, #1
   15fc0:	b004      	add	sp, #16
   15fc2:	bd70      	pop	{r4, r5, r6, pc}
   15fc4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15fc8:	2b00      	cmp	r3, #0
   15fca:	d1dc      	bne.n	15f86 <pdn_state_get_parser+0x16>
   15fcc:	e7e6      	b.n	15f9c <pdn_state_get_parser+0x2c>
   15fce:	460d      	mov	r5, r1
   15fd0:	e7e4      	b.n	15f9c <pdn_state_get_parser+0x2c>
   15fd2:	bf00      	nop
   15fd4:	2002091c 	.word	0x2002091c
   15fd8:	0001f858 	.word	0x0001f858

00015fdc <pdn_id_get_parser>:
   15fdc:	b570      	push	{r4, r5, r6, lr}
   15fde:	780b      	ldrb	r3, [r1, #0]
   15fe0:	4606      	mov	r6, r0
   15fe2:	b313      	cbz	r3, 1602a <pdn_id_get_parser+0x4e>
   15fe4:	4608      	mov	r0, r1
   15fe6:	2400      	movs	r4, #0
   15fe8:	460a      	mov	r2, r1
   15fea:	2b20      	cmp	r3, #32
   15fec:	4615      	mov	r5, r2
   15fee:	d017      	beq.n	16020 <pdn_id_get_parser+0x44>
   15ff0:	7013      	strb	r3, [r2, #0]
   15ff2:	3401      	adds	r4, #1
   15ff4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15ff8:	190a      	adds	r2, r1, r4
   15ffa:	4615      	mov	r5, r2
   15ffc:	2b00      	cmp	r3, #0
   15ffe:	d1f4      	bne.n	15fea <pdn_id_get_parser+0xe>
   16000:	2300      	movs	r3, #0
   16002:	4608      	mov	r0, r1
   16004:	702b      	strb	r3, [r5, #0]
   16006:	213a      	movs	r1, #58	; 0x3a
   16008:	f007 facf 	bl	1d5aa <strchr>
   1600c:	b130      	cbz	r0, 1601c <pdn_id_get_parser+0x40>
   1600e:	3001      	adds	r0, #1
   16010:	f007 f97c 	bl	1d30c <atoi>
   16014:	4b06      	ldr	r3, [pc, #24]	; (16030 <pdn_id_get_parser+0x54>)
   16016:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1601a:	6058      	str	r0, [r3, #4]
   1601c:	2000      	movs	r0, #0
   1601e:	bd70      	pop	{r4, r5, r6, pc}
   16020:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16024:	2b00      	cmp	r3, #0
   16026:	d1e0      	bne.n	15fea <pdn_id_get_parser+0xe>
   16028:	e7ea      	b.n	16000 <pdn_id_get_parser+0x24>
   1602a:	460d      	mov	r5, r1
   1602c:	e7e8      	b.n	16000 <pdn_id_get_parser+0x24>
   1602e:	bf00      	nop
   16030:	2002091c 	.word	0x2002091c

00016034 <context_create_parser>:
   16034:	b570      	push	{r4, r5, r6, lr}
   16036:	780b      	ldrb	r3, [r1, #0]
   16038:	4606      	mov	r6, r0
   1603a:	b313      	cbz	r3, 16082 <context_create_parser+0x4e>
   1603c:	4608      	mov	r0, r1
   1603e:	2400      	movs	r4, #0
   16040:	460a      	mov	r2, r1
   16042:	2b20      	cmp	r3, #32
   16044:	4615      	mov	r5, r2
   16046:	d017      	beq.n	16078 <context_create_parser+0x44>
   16048:	7013      	strb	r3, [r2, #0]
   1604a:	3401      	adds	r4, #1
   1604c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   16050:	190a      	adds	r2, r1, r4
   16052:	4615      	mov	r5, r2
   16054:	2b00      	cmp	r3, #0
   16056:	d1f4      	bne.n	16042 <context_create_parser+0xe>
   16058:	2300      	movs	r3, #0
   1605a:	4608      	mov	r0, r1
   1605c:	702b      	strb	r3, [r5, #0]
   1605e:	213a      	movs	r1, #58	; 0x3a
   16060:	f007 faa3 	bl	1d5aa <strchr>
   16064:	b130      	cbz	r0, 16074 <context_create_parser+0x40>
   16066:	4b08      	ldr	r3, [pc, #32]	; (16088 <context_create_parser+0x54>)
   16068:	3001      	adds	r0, #1
   1606a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1606e:	f007 f94d 	bl	1d30c <atoi>
   16072:	6020      	str	r0, [r4, #0]
   16074:	2000      	movs	r0, #0
   16076:	bd70      	pop	{r4, r5, r6, pc}
   16078:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1607c:	2b00      	cmp	r3, #0
   1607e:	d1e0      	bne.n	16042 <context_create_parser+0xe>
   16080:	e7ea      	b.n	16058 <context_create_parser+0x24>
   16082:	460d      	mov	r5, r1
   16084:	e7e8      	b.n	16058 <context_create_parser+0x24>
   16086:	bf00      	nop
   16088:	2002091c 	.word	0x2002091c

0001608c <pdn_interface_init>:
   1608c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16090:	b510      	push	{r4, lr}
   16092:	4c09      	ldr	r4, [pc, #36]	; (160b8 <pdn_interface_init+0x2c>)
   16094:	2228      	movs	r2, #40	; 0x28
   16096:	2100      	movs	r1, #0
   16098:	4808      	ldr	r0, [pc, #32]	; (160bc <pdn_interface_init+0x30>)
   1609a:	6023      	str	r3, [r4, #0]
   1609c:	f007 fb05 	bl	1d6aa <memset>
   160a0:	f240 2201 	movw	r2, #513	; 0x201
   160a4:	2100      	movs	r1, #0
   160a6:	2066      	movs	r0, #102	; 0x66
   160a8:	f7fc ffec 	bl	13084 <at_interface_open>
   160ac:	2800      	cmp	r0, #0
   160ae:	6020      	str	r0, [r4, #0]
   160b0:	bfb4      	ite	lt
   160b2:	2003      	movlt	r0, #3
   160b4:	2000      	movge	r0, #0
   160b6:	bd10      	pop	{r4, pc}
   160b8:	20020818 	.word	0x20020818
   160bc:	2002091c 	.word	0x2002091c

000160c0 <pdn_interface_open>:
   160c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   160c4:	2866      	cmp	r0, #102	; 0x66
   160c6:	b083      	sub	sp, #12
   160c8:	f040 80bc 	bne.w	16244 <pdn_interface_open+0x184>
   160cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   160d0:	f040 80aa 	bne.w	16228 <pdn_interface_open+0x168>
   160d4:	f240 2302 	movw	r3, #514	; 0x202
   160d8:	429a      	cmp	r2, r3
   160da:	f040 80a5 	bne.w	16228 <pdn_interface_open+0x168>
   160de:	4c62      	ldr	r4, [pc, #392]	; (16268 <pdn_interface_open+0x1a8>)
   160e0:	6825      	ldr	r5, [r4, #0]
   160e2:	b34d      	cbz	r5, 16138 <pdn_interface_open+0x78>
   160e4:	6863      	ldr	r3, [r4, #4]
   160e6:	2b00      	cmp	r3, #0
   160e8:	f000 8098 	beq.w	1621c <pdn_interface_open+0x15c>
   160ec:	68a3      	ldr	r3, [r4, #8]
   160ee:	2b00      	cmp	r3, #0
   160f0:	f000 8096 	beq.w	16220 <pdn_interface_open+0x160>
   160f4:	68e3      	ldr	r3, [r4, #12]
   160f6:	2b00      	cmp	r3, #0
   160f8:	f000 8094 	beq.w	16224 <pdn_interface_open+0x164>
   160fc:	6923      	ldr	r3, [r4, #16]
   160fe:	2b00      	cmp	r3, #0
   16100:	f000 8098 	beq.w	16234 <pdn_interface_open+0x174>
   16104:	6963      	ldr	r3, [r4, #20]
   16106:	2b00      	cmp	r3, #0
   16108:	f000 8098 	beq.w	1623c <pdn_interface_open+0x17c>
   1610c:	69a3      	ldr	r3, [r4, #24]
   1610e:	2b00      	cmp	r3, #0
   16110:	f000 8096 	beq.w	16240 <pdn_interface_open+0x180>
   16114:	69e3      	ldr	r3, [r4, #28]
   16116:	2b00      	cmp	r3, #0
   16118:	f000 808e 	beq.w	16238 <pdn_interface_open+0x178>
   1611c:	6a23      	ldr	r3, [r4, #32]
   1611e:	b153      	cbz	r3, 16136 <pdn_interface_open+0x76>
   16120:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16122:	2509      	movs	r5, #9
   16124:	b143      	cbz	r3, 16138 <pdn_interface_open+0x78>
   16126:	200c      	movs	r0, #12
   16128:	f7fb fc4c 	bl	119c4 <bsd_os_errno_set>
   1612c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16130:	b003      	add	sp, #12
   16132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16136:	2508      	movs	r5, #8
   16138:	2074      	movs	r0, #116	; 0x74
   1613a:	f7fd fce9 	bl	13b10 <nrf_malloc>
   1613e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   16142:	2800      	cmp	r0, #0
   16144:	d0ef      	beq.n	16126 <pdn_interface_open+0x66>
   16146:	2274      	movs	r2, #116	; 0x74
   16148:	2100      	movs	r1, #0
   1614a:	f007 faae 	bl	1d6aa <memset>
   1614e:	2101      	movs	r1, #1
   16150:	2003      	movs	r0, #3
   16152:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   16156:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1615a:	4a44      	ldr	r2, [pc, #272]	; (1626c <pdn_interface_open+0x1ac>)
   1615c:	6099      	str	r1, [r3, #8]
   1615e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   16162:	f44f 7180 	mov.w	r1, #256	; 0x100
   16166:	6718      	str	r0, [r3, #112]	; 0x70
   16168:	605f      	str	r7, [r3, #4]
   1616a:	4841      	ldr	r0, [pc, #260]	; (16270 <pdn_interface_open+0x1b0>)
   1616c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1627c <pdn_interface_open+0x1bc>
   16170:	f7fa feda 	bl	10f28 <snprintf>
   16174:	483e      	ldr	r0, [pc, #248]	; (16270 <pdn_interface_open+0x1b0>)
   16176:	f8d8 9000 	ldr.w	r9, [r8]
   1617a:	2600      	movs	r6, #0
   1617c:	f007 fa30 	bl	1d5e0 <strlen>
   16180:	4633      	mov	r3, r6
   16182:	4602      	mov	r2, r0
   16184:	493a      	ldr	r1, [pc, #232]	; (16270 <pdn_interface_open+0x1b0>)
   16186:	4648      	mov	r0, r9
   16188:	9601      	str	r6, [sp, #4]
   1618a:	9600      	str	r6, [sp, #0]
   1618c:	f7fc ff24 	bl	12fd8 <at_interface_write>
   16190:	4681      	mov	r9, r0
   16192:	4837      	ldr	r0, [pc, #220]	; (16270 <pdn_interface_open+0x1b0>)
   16194:	f007 fa24 	bl	1d5e0 <strlen>
   16198:	4548      	cmp	r0, r9
   1619a:	d159      	bne.n	16250 <pdn_interface_open+0x190>
   1619c:	4633      	mov	r3, r6
   1619e:	e9cd 6600 	strd	r6, r6, [sp]
   161a2:	f44f 7280 	mov.w	r2, #256	; 0x100
   161a6:	4932      	ldr	r1, [pc, #200]	; (16270 <pdn_interface_open+0x1b0>)
   161a8:	f8d8 0000 	ldr.w	r0, [r8]
   161ac:	f7fc fffc 	bl	131a8 <at_interface_read>
   161b0:	4606      	mov	r6, r0
   161b2:	4830      	ldr	r0, [pc, #192]	; (16274 <pdn_interface_open+0x1b4>)
   161b4:	f007 fa14 	bl	1d5e0 <strlen>
   161b8:	4286      	cmp	r6, r0
   161ba:	db15      	blt.n	161e8 <pdn_interface_open+0x128>
   161bc:	4602      	mov	r2, r0
   161be:	492c      	ldr	r1, [pc, #176]	; (16270 <pdn_interface_open+0x1b0>)
   161c0:	482c      	ldr	r0, [pc, #176]	; (16274 <pdn_interface_open+0x1b4>)
   161c2:	f007 fa20 	bl	1d606 <strncmp>
   161c6:	b978      	cbnz	r0, 161e8 <pdn_interface_open+0x128>
   161c8:	4929      	ldr	r1, [pc, #164]	; (16270 <pdn_interface_open+0x1b0>)
   161ca:	4628      	mov	r0, r5
   161cc:	f7ff ff32 	bl	16034 <context_create_parser>
   161d0:	b9b0      	cbnz	r0, 16200 <pdn_interface_open+0x140>
   161d2:	2202      	movs	r2, #2
   161d4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   161d8:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   161dc:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   161e0:	609a      	str	r2, [r3, #8]
   161e2:	b003      	add	sp, #12
   161e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   161e8:	4823      	ldr	r0, [pc, #140]	; (16278 <pdn_interface_open+0x1b8>)
   161ea:	f007 f9f9 	bl	1d5e0 <strlen>
   161ee:	4920      	ldr	r1, [pc, #128]	; (16270 <pdn_interface_open+0x1b0>)
   161f0:	4602      	mov	r2, r0
   161f2:	4821      	ldr	r0, [pc, #132]	; (16278 <pdn_interface_open+0x1b8>)
   161f4:	f007 fa07 	bl	1d606 <strncmp>
   161f8:	b960      	cbnz	r0, 16214 <pdn_interface_open+0x154>
   161fa:	2008      	movs	r0, #8
   161fc:	f7fb fbe2 	bl	119c4 <bsd_os_errno_set>
   16200:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   16204:	f7fd fc8e 	bl	13b24 <nrf_free>
   16208:	2300      	movs	r3, #0
   1620a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1620e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   16212:	e78d      	b.n	16130 <pdn_interface_open+0x70>
   16214:	2005      	movs	r0, #5
   16216:	f7fb fbd5 	bl	119c4 <bsd_os_errno_set>
   1621a:	e7f1      	b.n	16200 <pdn_interface_open+0x140>
   1621c:	2501      	movs	r5, #1
   1621e:	e78b      	b.n	16138 <pdn_interface_open+0x78>
   16220:	2502      	movs	r5, #2
   16222:	e789      	b.n	16138 <pdn_interface_open+0x78>
   16224:	2503      	movs	r5, #3
   16226:	e787      	b.n	16138 <pdn_interface_open+0x78>
   16228:	2016      	movs	r0, #22
   1622a:	f7fb fbcb 	bl	119c4 <bsd_os_errno_set>
   1622e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16232:	e77d      	b.n	16130 <pdn_interface_open+0x70>
   16234:	2504      	movs	r5, #4
   16236:	e77f      	b.n	16138 <pdn_interface_open+0x78>
   16238:	2507      	movs	r5, #7
   1623a:	e77d      	b.n	16138 <pdn_interface_open+0x78>
   1623c:	2505      	movs	r5, #5
   1623e:	e77b      	b.n	16138 <pdn_interface_open+0x78>
   16240:	2506      	movs	r5, #6
   16242:	e779      	b.n	16138 <pdn_interface_open+0x78>
   16244:	202f      	movs	r0, #47	; 0x2f
   16246:	f7fb fbbd 	bl	119c4 <bsd_os_errno_set>
   1624a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1624e:	e76f      	b.n	16130 <pdn_interface_open+0x70>
   16250:	2005      	movs	r0, #5
   16252:	f7fb fbb7 	bl	119c4 <bsd_os_errno_set>
   16256:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1625a:	f7fd fc63 	bl	13b24 <nrf_free>
   1625e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   16262:	4638      	mov	r0, r7
   16264:	e764      	b.n	16130 <pdn_interface_open+0x70>
   16266:	bf00      	nop
   16268:	2002091c 	.word	0x2002091c
   1626c:	0001f834 	.word	0x0001f834
   16270:	2002081c 	.word	0x2002081c
   16274:	0001f844 	.word	0x0001f844
   16278:	0001f850 	.word	0x0001f850
   1627c:	20020818 	.word	0x20020818

00016280 <pdn_interface_connect>:
   16280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16284:	b083      	sub	sp, #12
   16286:	2900      	cmp	r1, #0
   16288:	f000 813e 	beq.w	16508 <pdn_interface_connect+0x288>
   1628c:	2a64      	cmp	r2, #100	; 0x64
   1628e:	4691      	mov	r9, r2
   16290:	f200 813a 	bhi.w	16508 <pdn_interface_connect+0x288>
   16294:	4605      	mov	r5, r0
   16296:	4608      	mov	r0, r1
   16298:	4688      	mov	r8, r1
   1629a:	f007 f9a1 	bl	1d5e0 <strlen>
   1629e:	2864      	cmp	r0, #100	; 0x64
   162a0:	f200 8132 	bhi.w	16508 <pdn_interface_connect+0x288>
   162a4:	4ba5      	ldr	r3, [pc, #660]	; (1653c <pdn_interface_connect+0x2bc>)
   162a6:	43ab      	bics	r3, r5
   162a8:	f040 8125 	bne.w	164f6 <pdn_interface_connect+0x276>
   162ac:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   162b0:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   162b4:	2d09      	cmp	r5, #9
   162b6:	f300 811e 	bgt.w	164f6 <pdn_interface_connect+0x276>
   162ba:	4fa1      	ldr	r7, [pc, #644]	; (16540 <pdn_interface_connect+0x2c0>)
   162bc:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   162c0:	2b00      	cmp	r3, #0
   162c2:	f000 8118 	beq.w	164f6 <pdn_interface_connect+0x276>
   162c6:	689a      	ldr	r2, [r3, #8]
   162c8:	2a00      	cmp	r2, #0
   162ca:	f000 8114 	beq.w	164f6 <pdn_interface_connect+0x276>
   162ce:	2d00      	cmp	r5, #0
   162d0:	f2c0 8111 	blt.w	164f6 <pdn_interface_connect+0x276>
   162d4:	689b      	ldr	r3, [r3, #8]
   162d6:	2b02      	cmp	r3, #2
   162d8:	f040 810d 	bne.w	164f6 <pdn_interface_connect+0x276>
   162dc:	4e99      	ldr	r6, [pc, #612]	; (16544 <pdn_interface_connect+0x2c4>)
   162de:	4a9a      	ldr	r2, [pc, #616]	; (16548 <pdn_interface_connect+0x2c8>)
   162e0:	f44f 7180 	mov.w	r1, #256	; 0x100
   162e4:	4630      	mov	r0, r6
   162e6:	f7fa fe1f 	bl	10f28 <snprintf>
   162ea:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   162ee:	4604      	mov	r4, r0
   162f0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   162f4:	681b      	ldr	r3, [r3, #0]
   162f6:	4a95      	ldr	r2, [pc, #596]	; (1654c <pdn_interface_connect+0x2cc>)
   162f8:	1830      	adds	r0, r6, r0
   162fa:	f7fa fe15 	bl	10f28 <snprintf>
   162fe:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16302:	4404      	add	r4, r0
   16304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   16306:	f003 0203 	and.w	r2, r3, #3
   1630a:	2a03      	cmp	r2, #3
   1630c:	f000 80ea 	beq.w	164e4 <pdn_interface_connect+0x264>
   16310:	079b      	lsls	r3, r3, #30
   16312:	eb06 0004 	add.w	r0, r6, r4
   16316:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1631a:	bf4c      	ite	mi
   1631c:	4b8c      	ldrmi	r3, [pc, #560]	; (16550 <pdn_interface_connect+0x2d0>)
   1631e:	4b8d      	ldrpl	r3, [pc, #564]	; (16554 <pdn_interface_connect+0x2d4>)
   16320:	4a8d      	ldr	r2, [pc, #564]	; (16558 <pdn_interface_connect+0x2d8>)
   16322:	f7fa fe01 	bl	10f28 <snprintf>
   16326:	4404      	add	r4, r0
   16328:	4643      	mov	r3, r8
   1632a:	4a8c      	ldr	r2, [pc, #560]	; (1655c <pdn_interface_connect+0x2dc>)
   1632c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   16330:	1930      	adds	r0, r6, r4
   16332:	f7fa fdf9 	bl	10f28 <snprintf>
   16336:	4420      	add	r0, r4
   16338:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1633c:	f300 80f7 	bgt.w	1652e <pdn_interface_connect+0x2ae>
   16340:	f8df a238 	ldr.w	sl, [pc, #568]	; 1657c <pdn_interface_connect+0x2fc>
   16344:	487f      	ldr	r0, [pc, #508]	; (16544 <pdn_interface_connect+0x2c4>)
   16346:	f8da b000 	ldr.w	fp, [sl]
   1634a:	2400      	movs	r4, #0
   1634c:	f007 f948 	bl	1d5e0 <strlen>
   16350:	4623      	mov	r3, r4
   16352:	4602      	mov	r2, r0
   16354:	497b      	ldr	r1, [pc, #492]	; (16544 <pdn_interface_connect+0x2c4>)
   16356:	4658      	mov	r0, fp
   16358:	9401      	str	r4, [sp, #4]
   1635a:	9400      	str	r4, [sp, #0]
   1635c:	f7fc fe3c 	bl	12fd8 <at_interface_write>
   16360:	4683      	mov	fp, r0
   16362:	4878      	ldr	r0, [pc, #480]	; (16544 <pdn_interface_connect+0x2c4>)
   16364:	f007 f93c 	bl	1d5e0 <strlen>
   16368:	4558      	cmp	r0, fp
   1636a:	d008      	beq.n	1637e <pdn_interface_connect+0xfe>
   1636c:	2005      	movs	r0, #5
   1636e:	f7fb fb29 	bl	119c4 <bsd_os_errno_set>
   16372:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16376:	4620      	mov	r0, r4
   16378:	b003      	add	sp, #12
   1637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1637e:	4623      	mov	r3, r4
   16380:	e9cd 4400 	strd	r4, r4, [sp]
   16384:	f44f 7280 	mov.w	r2, #256	; 0x100
   16388:	496e      	ldr	r1, [pc, #440]	; (16544 <pdn_interface_connect+0x2c4>)
   1638a:	f8da 0000 	ldr.w	r0, [sl]
   1638e:	f7fc ff0b 	bl	131a8 <at_interface_read>
   16392:	4604      	mov	r4, r0
   16394:	4872      	ldr	r0, [pc, #456]	; (16560 <pdn_interface_connect+0x2e0>)
   16396:	f007 f923 	bl	1d5e0 <strlen>
   1639a:	4284      	cmp	r4, r0
   1639c:	f2c0 8091 	blt.w	164c2 <pdn_interface_connect+0x242>
   163a0:	4602      	mov	r2, r0
   163a2:	4968      	ldr	r1, [pc, #416]	; (16544 <pdn_interface_connect+0x2c4>)
   163a4:	486e      	ldr	r0, [pc, #440]	; (16560 <pdn_interface_connect+0x2e0>)
   163a6:	f007 f92e 	bl	1d606 <strncmp>
   163aa:	2800      	cmp	r0, #0
   163ac:	f040 8089 	bne.w	164c2 <pdn_interface_connect+0x242>
   163b0:	4964      	ldr	r1, [pc, #400]	; (16544 <pdn_interface_connect+0x2c4>)
   163b2:	4628      	mov	r0, r5
   163b4:	f7ff fdda 	bl	15f6c <ok_rsp_parser>
   163b8:	4604      	mov	r4, r0
   163ba:	2800      	cmp	r0, #0
   163bc:	d1db      	bne.n	16376 <pdn_interface_connect+0xf6>
   163be:	4a69      	ldr	r2, [pc, #420]	; (16564 <pdn_interface_connect+0x2e4>)
   163c0:	f44f 7180 	mov.w	r1, #256	; 0x100
   163c4:	485f      	ldr	r0, [pc, #380]	; (16544 <pdn_interface_connect+0x2c4>)
   163c6:	f7fa fdaf 	bl	10f28 <snprintf>
   163ca:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   163ce:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   163d2:	681b      	ldr	r3, [r3, #0]
   163d4:	4a64      	ldr	r2, [pc, #400]	; (16568 <pdn_interface_connect+0x2e8>)
   163d6:	4430      	add	r0, r6
   163d8:	f7fa fda6 	bl	10f28 <snprintf>
   163dc:	4859      	ldr	r0, [pc, #356]	; (16544 <pdn_interface_connect+0x2c4>)
   163de:	f8da b000 	ldr.w	fp, [sl]
   163e2:	f007 f8fd 	bl	1d5e0 <strlen>
   163e6:	4623      	mov	r3, r4
   163e8:	4602      	mov	r2, r0
   163ea:	4956      	ldr	r1, [pc, #344]	; (16544 <pdn_interface_connect+0x2c4>)
   163ec:	4658      	mov	r0, fp
   163ee:	9401      	str	r4, [sp, #4]
   163f0:	9400      	str	r4, [sp, #0]
   163f2:	f7fc fdf1 	bl	12fd8 <at_interface_write>
   163f6:	4683      	mov	fp, r0
   163f8:	4852      	ldr	r0, [pc, #328]	; (16544 <pdn_interface_connect+0x2c4>)
   163fa:	f007 f8f1 	bl	1d5e0 <strlen>
   163fe:	4558      	cmp	r0, fp
   16400:	d1b4      	bne.n	1636c <pdn_interface_connect+0xec>
   16402:	4623      	mov	r3, r4
   16404:	f44f 7280 	mov.w	r2, #256	; 0x100
   16408:	494e      	ldr	r1, [pc, #312]	; (16544 <pdn_interface_connect+0x2c4>)
   1640a:	f8da 0000 	ldr.w	r0, [sl]
   1640e:	e9cd 4400 	strd	r4, r4, [sp]
   16412:	f7fc fec9 	bl	131a8 <at_interface_read>
   16416:	4683      	mov	fp, r0
   16418:	4851      	ldr	r0, [pc, #324]	; (16560 <pdn_interface_connect+0x2e0>)
   1641a:	f007 f8e1 	bl	1d5e0 <strlen>
   1641e:	4583      	cmp	fp, r0
   16420:	db4f      	blt.n	164c2 <pdn_interface_connect+0x242>
   16422:	4602      	mov	r2, r0
   16424:	4947      	ldr	r1, [pc, #284]	; (16544 <pdn_interface_connect+0x2c4>)
   16426:	484e      	ldr	r0, [pc, #312]	; (16560 <pdn_interface_connect+0x2e0>)
   16428:	f007 f8ed 	bl	1d606 <strncmp>
   1642c:	2800      	cmp	r0, #0
   1642e:	d148      	bne.n	164c2 <pdn_interface_connect+0x242>
   16430:	2103      	movs	r1, #3
   16432:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16436:	464a      	mov	r2, r9
   16438:	6099      	str	r1, [r3, #8]
   1643a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1643e:	4641      	mov	r1, r8
   16440:	300c      	adds	r0, #12
   16442:	f007 f908 	bl	1d656 <memcpy>
   16446:	4a49      	ldr	r2, [pc, #292]	; (1656c <pdn_interface_connect+0x2ec>)
   16448:	f44f 7180 	mov.w	r1, #256	; 0x100
   1644c:	483d      	ldr	r0, [pc, #244]	; (16544 <pdn_interface_connect+0x2c4>)
   1644e:	f7fa fd6b 	bl	10f28 <snprintf>
   16452:	4601      	mov	r1, r0
   16454:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16458:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1645c:	681b      	ldr	r3, [r3, #0]
   1645e:	4a42      	ldr	r2, [pc, #264]	; (16568 <pdn_interface_connect+0x2e8>)
   16460:	1830      	adds	r0, r6, r0
   16462:	f7fa fd61 	bl	10f28 <snprintf>
   16466:	4837      	ldr	r0, [pc, #220]	; (16544 <pdn_interface_connect+0x2c4>)
   16468:	f8da 6000 	ldr.w	r6, [sl]
   1646c:	f007 f8b8 	bl	1d5e0 <strlen>
   16470:	4623      	mov	r3, r4
   16472:	4602      	mov	r2, r0
   16474:	4933      	ldr	r1, [pc, #204]	; (16544 <pdn_interface_connect+0x2c4>)
   16476:	4630      	mov	r0, r6
   16478:	9401      	str	r4, [sp, #4]
   1647a:	9400      	str	r4, [sp, #0]
   1647c:	f7fc fdac 	bl	12fd8 <at_interface_write>
   16480:	4606      	mov	r6, r0
   16482:	4830      	ldr	r0, [pc, #192]	; (16544 <pdn_interface_connect+0x2c4>)
   16484:	f007 f8ac 	bl	1d5e0 <strlen>
   16488:	42b0      	cmp	r0, r6
   1648a:	d153      	bne.n	16534 <pdn_interface_connect+0x2b4>
   1648c:	4623      	mov	r3, r4
   1648e:	f44f 7280 	mov.w	r2, #256	; 0x100
   16492:	492c      	ldr	r1, [pc, #176]	; (16544 <pdn_interface_connect+0x2c4>)
   16494:	f8da 0000 	ldr.w	r0, [sl]
   16498:	e9cd 4400 	strd	r4, r4, [sp]
   1649c:	f7fc fe84 	bl	131a8 <at_interface_read>
   164a0:	4606      	mov	r6, r0
   164a2:	4833      	ldr	r0, [pc, #204]	; (16570 <pdn_interface_connect+0x2f0>)
   164a4:	f007 f89c 	bl	1d5e0 <strlen>
   164a8:	4286      	cmp	r6, r0
   164aa:	db33      	blt.n	16514 <pdn_interface_connect+0x294>
   164ac:	4602      	mov	r2, r0
   164ae:	4925      	ldr	r1, [pc, #148]	; (16544 <pdn_interface_connect+0x2c4>)
   164b0:	482f      	ldr	r0, [pc, #188]	; (16570 <pdn_interface_connect+0x2f0>)
   164b2:	f007 f8a8 	bl	1d606 <strncmp>
   164b6:	bb68      	cbnz	r0, 16514 <pdn_interface_connect+0x294>
   164b8:	4628      	mov	r0, r5
   164ba:	4922      	ldr	r1, [pc, #136]	; (16544 <pdn_interface_connect+0x2c4>)
   164bc:	f7ff fd8e 	bl	15fdc <pdn_id_get_parser>
   164c0:	e759      	b.n	16376 <pdn_interface_connect+0xf6>
   164c2:	482c      	ldr	r0, [pc, #176]	; (16574 <pdn_interface_connect+0x2f4>)
   164c4:	f007 f88c 	bl	1d5e0 <strlen>
   164c8:	491e      	ldr	r1, [pc, #120]	; (16544 <pdn_interface_connect+0x2c4>)
   164ca:	4602      	mov	r2, r0
   164cc:	4829      	ldr	r0, [pc, #164]	; (16574 <pdn_interface_connect+0x2f4>)
   164ce:	f007 f89a 	bl	1d606 <strncmp>
   164d2:	2800      	cmp	r0, #0
   164d4:	f47f af4a 	bne.w	1636c <pdn_interface_connect+0xec>
   164d8:	2008      	movs	r0, #8
   164da:	f7fb fa73 	bl	119c4 <bsd_os_errno_set>
   164de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   164e2:	e748      	b.n	16376 <pdn_interface_connect+0xf6>
   164e4:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   164e8:	1930      	adds	r0, r6, r4
   164ea:	4b23      	ldr	r3, [pc, #140]	; (16578 <pdn_interface_connect+0x2f8>)
   164ec:	4a1a      	ldr	r2, [pc, #104]	; (16558 <pdn_interface_connect+0x2d8>)
   164ee:	f7fa fd1b 	bl	10f28 <snprintf>
   164f2:	4404      	add	r4, r0
   164f4:	e718      	b.n	16328 <pdn_interface_connect+0xa8>
   164f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   164fa:	2009      	movs	r0, #9
   164fc:	f7fb fa62 	bl	119c4 <bsd_os_errno_set>
   16500:	4620      	mov	r0, r4
   16502:	b003      	add	sp, #12
   16504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16508:	2016      	movs	r0, #22
   1650a:	f7fb fa5b 	bl	119c4 <bsd_os_errno_set>
   1650e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16512:	e730      	b.n	16376 <pdn_interface_connect+0xf6>
   16514:	4817      	ldr	r0, [pc, #92]	; (16574 <pdn_interface_connect+0x2f4>)
   16516:	f007 f863 	bl	1d5e0 <strlen>
   1651a:	490a      	ldr	r1, [pc, #40]	; (16544 <pdn_interface_connect+0x2c4>)
   1651c:	4602      	mov	r2, r0
   1651e:	4815      	ldr	r0, [pc, #84]	; (16574 <pdn_interface_connect+0x2f4>)
   16520:	f007 f871 	bl	1d606 <strncmp>
   16524:	b930      	cbnz	r0, 16534 <pdn_interface_connect+0x2b4>
   16526:	2008      	movs	r0, #8
   16528:	f7fb fa4c 	bl	119c4 <bsd_os_errno_set>
   1652c:	e723      	b.n	16376 <pdn_interface_connect+0xf6>
   1652e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16532:	e720      	b.n	16376 <pdn_interface_connect+0xf6>
   16534:	2005      	movs	r0, #5
   16536:	f7fb fa45 	bl	119c4 <bsd_os_errno_set>
   1653a:	e71c      	b.n	16376 <pdn_interface_connect+0xf6>
   1653c:	789a0000 	.word	0x789a0000
   16540:	2002091c 	.word	0x2002091c
   16544:	2002081c 	.word	0x2002081c
   16548:	0001f7bc 	.word	0x0001f7bc
   1654c:	0001f7c8 	.word	0x0001f7c8
   16550:	0001f7dc 	.word	0x0001f7dc
   16554:	0001f7e4 	.word	0x0001f7e4
   16558:	0001f7d4 	.word	0x0001f7d4
   1655c:	0001f818 	.word	0x0001f818
   16560:	0001f7e8 	.word	0x0001f7e8
   16564:	0001f7ec 	.word	0x0001f7ec
   16568:	0001f7f8 	.word	0x0001f7f8
   1656c:	0001f7fc 	.word	0x0001f7fc
   16570:	0001f80c 	.word	0x0001f80c
   16574:	0001f850 	.word	0x0001f850
   16578:	0001f7cc 	.word	0x0001f7cc
   1657c:	20020818 	.word	0x20020818

00016580 <pdn_interface_close>:
   16580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16584:	4b63      	ldr	r3, [pc, #396]	; (16714 <pdn_interface_close+0x194>)
   16586:	b083      	sub	sp, #12
   16588:	4383      	bics	r3, r0
   1658a:	f040 809d 	bne.w	166c8 <pdn_interface_close+0x148>
   1658e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   16592:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   16596:	2c09      	cmp	r4, #9
   16598:	f300 8096 	bgt.w	166c8 <pdn_interface_close+0x148>
   1659c:	4d5e      	ldr	r5, [pc, #376]	; (16718 <pdn_interface_close+0x198>)
   1659e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   165a2:	2800      	cmp	r0, #0
   165a4:	f000 8090 	beq.w	166c8 <pdn_interface_close+0x148>
   165a8:	6883      	ldr	r3, [r0, #8]
   165aa:	2b00      	cmp	r3, #0
   165ac:	f000 808c 	beq.w	166c8 <pdn_interface_close+0x148>
   165b0:	6883      	ldr	r3, [r0, #8]
   165b2:	2b03      	cmp	r3, #3
   165b4:	d008      	beq.n	165c8 <pdn_interface_close+0x48>
   165b6:	f7fd fab5 	bl	13b24 <nrf_free>
   165ba:	2300      	movs	r3, #0
   165bc:	4618      	mov	r0, r3
   165be:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   165c2:	b003      	add	sp, #12
   165c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   165c8:	4e54      	ldr	r6, [pc, #336]	; (1671c <pdn_interface_close+0x19c>)
   165ca:	4a55      	ldr	r2, [pc, #340]	; (16720 <pdn_interface_close+0x1a0>)
   165cc:	f44f 7180 	mov.w	r1, #256	; 0x100
   165d0:	4630      	mov	r0, r6
   165d2:	f7fa fca9 	bl	10f28 <snprintf>
   165d6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   165da:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   165de:	681b      	ldr	r3, [r3, #0]
   165e0:	4a50      	ldr	r2, [pc, #320]	; (16724 <pdn_interface_close+0x1a4>)
   165e2:	4430      	add	r0, r6
   165e4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 16734 <pdn_interface_close+0x1b4>
   165e8:	f7fa fc9e 	bl	10f28 <snprintf>
   165ec:	4630      	mov	r0, r6
   165ee:	f8d8 9000 	ldr.w	r9, [r8]
   165f2:	2700      	movs	r7, #0
   165f4:	f006 fff4 	bl	1d5e0 <strlen>
   165f8:	4631      	mov	r1, r6
   165fa:	4602      	mov	r2, r0
   165fc:	463b      	mov	r3, r7
   165fe:	4648      	mov	r0, r9
   16600:	9701      	str	r7, [sp, #4]
   16602:	9700      	str	r7, [sp, #0]
   16604:	f7fc fce8 	bl	12fd8 <at_interface_write>
   16608:	4681      	mov	r9, r0
   1660a:	4630      	mov	r0, r6
   1660c:	f006 ffe8 	bl	1d5e0 <strlen>
   16610:	4548      	cmp	r0, r9
   16612:	d176      	bne.n	16702 <pdn_interface_close+0x182>
   16614:	463b      	mov	r3, r7
   16616:	e9cd 7700 	strd	r7, r7, [sp]
   1661a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1661e:	4631      	mov	r1, r6
   16620:	f8d8 0000 	ldr.w	r0, [r8]
   16624:	f7fc fdc0 	bl	131a8 <at_interface_read>
   16628:	4607      	mov	r7, r0
   1662a:	483f      	ldr	r0, [pc, #252]	; (16728 <pdn_interface_close+0x1a8>)
   1662c:	f006 ffd8 	bl	1d5e0 <strlen>
   16630:	4287      	cmp	r7, r0
   16632:	da4f      	bge.n	166d4 <pdn_interface_close+0x154>
   16634:	483d      	ldr	r0, [pc, #244]	; (1672c <pdn_interface_close+0x1ac>)
   16636:	f006 ffd3 	bl	1d5e0 <strlen>
   1663a:	4938      	ldr	r1, [pc, #224]	; (1671c <pdn_interface_close+0x19c>)
   1663c:	4602      	mov	r2, r0
   1663e:	483b      	ldr	r0, [pc, #236]	; (1672c <pdn_interface_close+0x1ac>)
   16640:	f006 ffe1 	bl	1d606 <strncmp>
   16644:	2800      	cmp	r0, #0
   16646:	d15c      	bne.n	16702 <pdn_interface_close+0x182>
   16648:	2008      	movs	r0, #8
   1664a:	f7fb f9bb 	bl	119c4 <bsd_os_errno_set>
   1664e:	4a38      	ldr	r2, [pc, #224]	; (16730 <pdn_interface_close+0x1b0>)
   16650:	f44f 7180 	mov.w	r1, #256	; 0x100
   16654:	4831      	ldr	r0, [pc, #196]	; (1671c <pdn_interface_close+0x19c>)
   16656:	f7fa fc67 	bl	10f28 <snprintf>
   1665a:	4601      	mov	r1, r0
   1665c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   16660:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   16664:	681b      	ldr	r3, [r3, #0]
   16666:	4a2f      	ldr	r2, [pc, #188]	; (16724 <pdn_interface_close+0x1a4>)
   16668:	1830      	adds	r0, r6, r0
   1666a:	f7fa fc5d 	bl	10f28 <snprintf>
   1666e:	482b      	ldr	r0, [pc, #172]	; (1671c <pdn_interface_close+0x19c>)
   16670:	f8d8 7000 	ldr.w	r7, [r8]
   16674:	2600      	movs	r6, #0
   16676:	f006 ffb3 	bl	1d5e0 <strlen>
   1667a:	4633      	mov	r3, r6
   1667c:	4602      	mov	r2, r0
   1667e:	4927      	ldr	r1, [pc, #156]	; (1671c <pdn_interface_close+0x19c>)
   16680:	4638      	mov	r0, r7
   16682:	9601      	str	r6, [sp, #4]
   16684:	9600      	str	r6, [sp, #0]
   16686:	f7fc fca7 	bl	12fd8 <at_interface_write>
   1668a:	4607      	mov	r7, r0
   1668c:	4823      	ldr	r0, [pc, #140]	; (1671c <pdn_interface_close+0x19c>)
   1668e:	f006 ffa7 	bl	1d5e0 <strlen>
   16692:	42b8      	cmp	r0, r7
   16694:	d139      	bne.n	1670a <pdn_interface_close+0x18a>
   16696:	4633      	mov	r3, r6
   16698:	e9cd 6600 	strd	r6, r6, [sp]
   1669c:	f44f 7280 	mov.w	r2, #256	; 0x100
   166a0:	491e      	ldr	r1, [pc, #120]	; (1671c <pdn_interface_close+0x19c>)
   166a2:	f8d8 0000 	ldr.w	r0, [r8]
   166a6:	f7fc fd7f 	bl	131a8 <at_interface_read>
   166aa:	4606      	mov	r6, r0
   166ac:	481e      	ldr	r0, [pc, #120]	; (16728 <pdn_interface_close+0x1a8>)
   166ae:	f006 ff97 	bl	1d5e0 <strlen>
   166b2:	4286      	cmp	r6, r0
   166b4:	db16      	blt.n	166e4 <pdn_interface_close+0x164>
   166b6:	4602      	mov	r2, r0
   166b8:	4918      	ldr	r1, [pc, #96]	; (1671c <pdn_interface_close+0x19c>)
   166ba:	481b      	ldr	r0, [pc, #108]	; (16728 <pdn_interface_close+0x1a8>)
   166bc:	f006 ffa3 	bl	1d606 <strncmp>
   166c0:	b980      	cbnz	r0, 166e4 <pdn_interface_close+0x164>
   166c2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   166c6:	e776      	b.n	165b6 <pdn_interface_close+0x36>
   166c8:	2009      	movs	r0, #9
   166ca:	f7fb f97b 	bl	119c4 <bsd_os_errno_set>
   166ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   166d2:	e776      	b.n	165c2 <pdn_interface_close+0x42>
   166d4:	4602      	mov	r2, r0
   166d6:	4631      	mov	r1, r6
   166d8:	4813      	ldr	r0, [pc, #76]	; (16728 <pdn_interface_close+0x1a8>)
   166da:	f006 ff94 	bl	1d606 <strncmp>
   166de:	2800      	cmp	r0, #0
   166e0:	d0b5      	beq.n	1664e <pdn_interface_close+0xce>
   166e2:	e7a7      	b.n	16634 <pdn_interface_close+0xb4>
   166e4:	4811      	ldr	r0, [pc, #68]	; (1672c <pdn_interface_close+0x1ac>)
   166e6:	f006 ff7b 	bl	1d5e0 <strlen>
   166ea:	490c      	ldr	r1, [pc, #48]	; (1671c <pdn_interface_close+0x19c>)
   166ec:	4602      	mov	r2, r0
   166ee:	480f      	ldr	r0, [pc, #60]	; (1672c <pdn_interface_close+0x1ac>)
   166f0:	f006 ff89 	bl	1d606 <strncmp>
   166f4:	b948      	cbnz	r0, 1670a <pdn_interface_close+0x18a>
   166f6:	2008      	movs	r0, #8
   166f8:	f7fb f964 	bl	119c4 <bsd_os_errno_set>
   166fc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16700:	e759      	b.n	165b6 <pdn_interface_close+0x36>
   16702:	2005      	movs	r0, #5
   16704:	f7fb f95e 	bl	119c4 <bsd_os_errno_set>
   16708:	e7a1      	b.n	1664e <pdn_interface_close+0xce>
   1670a:	2005      	movs	r0, #5
   1670c:	f7fb f95a 	bl	119c4 <bsd_os_errno_set>
   16710:	e7d7      	b.n	166c2 <pdn_interface_close+0x142>
   16712:	bf00      	nop
   16714:	789a0000 	.word	0x789a0000
   16718:	2002091c 	.word	0x2002091c
   1671c:	2002081c 	.word	0x2002081c
   16720:	0001f7b0 	.word	0x0001f7b0
   16724:	0001f7f8 	.word	0x0001f7f8
   16728:	0001f7e8 	.word	0x0001f7e8
   1672c:	0001f850 	.word	0x0001f850
   16730:	0001f7bc 	.word	0x0001f7bc
   16734:	20020818 	.word	0x20020818

00016738 <pdn_interface_setopt>:
   16738:	b510      	push	{r4, lr}
   1673a:	f240 2402 	movw	r4, #514	; 0x202
   1673e:	42a1      	cmp	r1, r4
   16740:	d10b      	bne.n	1675a <pdn_interface_setopt+0x22>
   16742:	b153      	cbz	r3, 1675a <pdn_interface_setopt+0x22>
   16744:	9902      	ldr	r1, [sp, #8]
   16746:	b141      	cbz	r1, 1675a <pdn_interface_setopt+0x22>
   16748:	4925      	ldr	r1, [pc, #148]	; (167e0 <pdn_interface_setopt+0xa8>)
   1674a:	4381      	bics	r1, r0
   1674c:	d00b      	beq.n	16766 <pdn_interface_setopt+0x2e>
   1674e:	2009      	movs	r0, #9
   16750:	f7fb f938 	bl	119c4 <bsd_os_errno_set>
   16754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16758:	bd10      	pop	{r4, pc}
   1675a:	2016      	movs	r0, #22
   1675c:	f7fb f932 	bl	119c4 <bsd_os_errno_set>
   16760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16764:	bd10      	pop	{r4, pc}
   16766:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1676a:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1676e:	2809      	cmp	r0, #9
   16770:	dced      	bgt.n	1674e <pdn_interface_setopt+0x16>
   16772:	491c      	ldr	r1, [pc, #112]	; (167e4 <pdn_interface_setopt+0xac>)
   16774:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   16778:	2900      	cmp	r1, #0
   1677a:	d0e8      	beq.n	1674e <pdn_interface_setopt+0x16>
   1677c:	688c      	ldr	r4, [r1, #8]
   1677e:	2c00      	cmp	r4, #0
   16780:	d0e5      	beq.n	1674e <pdn_interface_setopt+0x16>
   16782:	2800      	cmp	r0, #0
   16784:	dbe3      	blt.n	1674e <pdn_interface_setopt+0x16>
   16786:	2a01      	cmp	r2, #1
   16788:	d001      	beq.n	1678e <pdn_interface_setopt+0x56>
   1678a:	202d      	movs	r0, #45	; 0x2d
   1678c:	e7e6      	b.n	1675c <pdn_interface_setopt+0x24>
   1678e:	688a      	ldr	r2, [r1, #8]
   16790:	b1fa      	cbz	r2, 167d2 <pdn_interface_setopt+0x9a>
   16792:	688a      	ldr	r2, [r1, #8]
   16794:	2a03      	cmp	r2, #3
   16796:	d01c      	beq.n	167d2 <pdn_interface_setopt+0x9a>
   16798:	688a      	ldr	r2, [r1, #8]
   1679a:	2a04      	cmp	r2, #4
   1679c:	d019      	beq.n	167d2 <pdn_interface_setopt+0x9a>
   1679e:	9a02      	ldr	r2, [sp, #8]
   167a0:	0890      	lsrs	r0, r2, #2
   167a2:	1e42      	subs	r2, r0, #1
   167a4:	2a01      	cmp	r2, #1
   167a6:	d8d8      	bhi.n	1675a <pdn_interface_setopt+0x22>
   167a8:	9a02      	ldr	r2, [sp, #8]
   167aa:	0792      	lsls	r2, r2, #30
   167ac:	d1d5      	bne.n	1675a <pdn_interface_setopt+0x22>
   167ae:	681a      	ldr	r2, [r3, #0]
   167b0:	2a02      	cmp	r2, #2
   167b2:	d010      	beq.n	167d6 <pdn_interface_setopt+0x9e>
   167b4:	2a0a      	cmp	r2, #10
   167b6:	d1d0      	bne.n	1675a <pdn_interface_setopt+0x22>
   167b8:	2202      	movs	r2, #2
   167ba:	2802      	cmp	r0, #2
   167bc:	d106      	bne.n	167cc <pdn_interface_setopt+0x94>
   167be:	685b      	ldr	r3, [r3, #4]
   167c0:	2b02      	cmp	r3, #2
   167c2:	d00a      	beq.n	167da <pdn_interface_setopt+0xa2>
   167c4:	2b0a      	cmp	r3, #10
   167c6:	d1c8      	bne.n	1675a <pdn_interface_setopt+0x22>
   167c8:	f042 0202 	orr.w	r2, r2, #2
   167cc:	670a      	str	r2, [r1, #112]	; 0x70
   167ce:	2000      	movs	r0, #0
   167d0:	e7c4      	b.n	1675c <pdn_interface_setopt+0x24>
   167d2:	200e      	movs	r0, #14
   167d4:	e7c2      	b.n	1675c <pdn_interface_setopt+0x24>
   167d6:	2201      	movs	r2, #1
   167d8:	e7ef      	b.n	167ba <pdn_interface_setopt+0x82>
   167da:	f042 0201 	orr.w	r2, r2, #1
   167de:	e7f5      	b.n	167cc <pdn_interface_setopt+0x94>
   167e0:	789a0000 	.word	0x789a0000
   167e4:	2002091c 	.word	0x2002091c

000167e8 <pdn_interface_getopt>:
   167e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   167ec:	f240 2402 	movw	r4, #514	; 0x202
   167f0:	b083      	sub	sp, #12
   167f2:	42a1      	cmp	r1, r4
   167f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   167f6:	f040 80a9 	bne.w	1694c <pdn_interface_getopt+0x164>
   167fa:	461e      	mov	r6, r3
   167fc:	2b00      	cmp	r3, #0
   167fe:	f000 80a5 	beq.w	1694c <pdn_interface_getopt+0x164>
   16802:	2d00      	cmp	r5, #0
   16804:	f000 80a2 	beq.w	1694c <pdn_interface_getopt+0x164>
   16808:	4b56      	ldr	r3, [pc, #344]	; (16964 <pdn_interface_getopt+0x17c>)
   1680a:	4383      	bics	r3, r0
   1680c:	f040 8084 	bne.w	16918 <pdn_interface_getopt+0x130>
   16810:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   16814:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   16818:	2c09      	cmp	r4, #9
   1681a:	dc7d      	bgt.n	16918 <pdn_interface_getopt+0x130>
   1681c:	4b52      	ldr	r3, [pc, #328]	; (16968 <pdn_interface_getopt+0x180>)
   1681e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16822:	2b00      	cmp	r3, #0
   16824:	d078      	beq.n	16918 <pdn_interface_getopt+0x130>
   16826:	6899      	ldr	r1, [r3, #8]
   16828:	2900      	cmp	r1, #0
   1682a:	d075      	beq.n	16918 <pdn_interface_getopt+0x130>
   1682c:	2c00      	cmp	r4, #0
   1682e:	db73      	blt.n	16918 <pdn_interface_getopt+0x130>
   16830:	2a02      	cmp	r2, #2
   16832:	d00e      	beq.n	16852 <pdn_interface_getopt+0x6a>
   16834:	2a03      	cmp	r2, #3
   16836:	d008      	beq.n	1684a <pdn_interface_getopt+0x62>
   16838:	2a01      	cmp	r2, #1
   1683a:	d015      	beq.n	16868 <pdn_interface_getopt+0x80>
   1683c:	202d      	movs	r0, #45	; 0x2d
   1683e:	f7fb f8c1 	bl	119c4 <bsd_os_errno_set>
   16842:	2000      	movs	r0, #0
   16844:	b003      	add	sp, #12
   16846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1684a:	682b      	ldr	r3, [r5, #0]
   1684c:	bb23      	cbnz	r3, 16898 <pdn_interface_getopt+0xb0>
   1684e:	2016      	movs	r0, #22
   16850:	e7f5      	b.n	1683e <pdn_interface_getopt+0x56>
   16852:	682a      	ldr	r2, [r5, #0]
   16854:	2a00      	cmp	r2, #0
   16856:	d0fa      	beq.n	1684e <pdn_interface_getopt+0x66>
   16858:	2201      	movs	r2, #1
   1685a:	2000      	movs	r0, #0
   1685c:	681b      	ldr	r3, [r3, #0]
   1685e:	7033      	strb	r3, [r6, #0]
   16860:	602a      	str	r2, [r5, #0]
   16862:	b003      	add	sp, #12
   16864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16868:	689a      	ldr	r2, [r3, #8]
   1686a:	2a00      	cmp	r2, #0
   1686c:	d052      	beq.n	16914 <pdn_interface_getopt+0x12c>
   1686e:	689a      	ldr	r2, [r3, #8]
   16870:	2a04      	cmp	r2, #4
   16872:	d04f      	beq.n	16914 <pdn_interface_getopt+0x12c>
   16874:	682a      	ldr	r2, [r5, #0]
   16876:	2a07      	cmp	r2, #7
   16878:	d9e9      	bls.n	1684e <pdn_interface_getopt+0x66>
   1687a:	f012 0203 	ands.w	r2, r2, #3
   1687e:	d1e6      	bne.n	1684e <pdn_interface_getopt+0x66>
   16880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   16882:	0799      	lsls	r1, r3, #30
   16884:	d45d      	bmi.n	16942 <pdn_interface_getopt+0x15a>
   16886:	2104      	movs	r1, #4
   16888:	07db      	lsls	r3, r3, #31
   1688a:	d502      	bpl.n	16892 <pdn_interface_getopt+0xaa>
   1688c:	2302      	movs	r3, #2
   1688e:	50b3      	str	r3, [r6, r2]
   16890:	460a      	mov	r2, r1
   16892:	602a      	str	r2, [r5, #0]
   16894:	2000      	movs	r0, #0
   16896:	e7d5      	b.n	16844 <pdn_interface_getopt+0x5c>
   16898:	4a34      	ldr	r2, [pc, #208]	; (1696c <pdn_interface_getopt+0x184>)
   1689a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1689e:	4834      	ldr	r0, [pc, #208]	; (16970 <pdn_interface_getopt+0x188>)
   168a0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1697c <pdn_interface_getopt+0x194>
   168a4:	f7fa fb40 	bl	10f28 <snprintf>
   168a8:	4831      	ldr	r0, [pc, #196]	; (16970 <pdn_interface_getopt+0x188>)
   168aa:	f8d8 9000 	ldr.w	r9, [r8]
   168ae:	2700      	movs	r7, #0
   168b0:	f006 fe96 	bl	1d5e0 <strlen>
   168b4:	463b      	mov	r3, r7
   168b6:	4602      	mov	r2, r0
   168b8:	492d      	ldr	r1, [pc, #180]	; (16970 <pdn_interface_getopt+0x188>)
   168ba:	4648      	mov	r0, r9
   168bc:	9701      	str	r7, [sp, #4]
   168be:	9700      	str	r7, [sp, #0]
   168c0:	f7fc fb8a 	bl	12fd8 <at_interface_write>
   168c4:	4681      	mov	r9, r0
   168c6:	482a      	ldr	r0, [pc, #168]	; (16970 <pdn_interface_getopt+0x188>)
   168c8:	f006 fe8a 	bl	1d5e0 <strlen>
   168cc:	4548      	cmp	r0, r9
   168ce:	d143      	bne.n	16958 <pdn_interface_getopt+0x170>
   168d0:	463b      	mov	r3, r7
   168d2:	e9cd 7700 	strd	r7, r7, [sp]
   168d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   168da:	4925      	ldr	r1, [pc, #148]	; (16970 <pdn_interface_getopt+0x188>)
   168dc:	f8d8 0000 	ldr.w	r0, [r8]
   168e0:	f7fc fc62 	bl	131a8 <at_interface_read>
   168e4:	4607      	mov	r7, r0
   168e6:	4823      	ldr	r0, [pc, #140]	; (16974 <pdn_interface_getopt+0x18c>)
   168e8:	f006 fe7a 	bl	1d5e0 <strlen>
   168ec:	4287      	cmp	r7, r0
   168ee:	db19      	blt.n	16924 <pdn_interface_getopt+0x13c>
   168f0:	4602      	mov	r2, r0
   168f2:	491f      	ldr	r1, [pc, #124]	; (16970 <pdn_interface_getopt+0x188>)
   168f4:	481f      	ldr	r0, [pc, #124]	; (16974 <pdn_interface_getopt+0x18c>)
   168f6:	f006 fe86 	bl	1d606 <strncmp>
   168fa:	4607      	mov	r7, r0
   168fc:	b990      	cbnz	r0, 16924 <pdn_interface_getopt+0x13c>
   168fe:	4620      	mov	r0, r4
   16900:	491b      	ldr	r1, [pc, #108]	; (16970 <pdn_interface_getopt+0x188>)
   16902:	f7ff fb35 	bl	15f70 <pdn_state_get_parser>
   16906:	2800      	cmp	r0, #0
   16908:	db99      	blt.n	1683e <pdn_interface_getopt+0x56>
   1690a:	2301      	movs	r3, #1
   1690c:	7030      	strb	r0, [r6, #0]
   1690e:	4638      	mov	r0, r7
   16910:	602b      	str	r3, [r5, #0]
   16912:	e797      	b.n	16844 <pdn_interface_getopt+0x5c>
   16914:	200e      	movs	r0, #14
   16916:	e792      	b.n	1683e <pdn_interface_getopt+0x56>
   16918:	2009      	movs	r0, #9
   1691a:	f7fb f853 	bl	119c4 <bsd_os_errno_set>
   1691e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16922:	e78f      	b.n	16844 <pdn_interface_getopt+0x5c>
   16924:	4814      	ldr	r0, [pc, #80]	; (16978 <pdn_interface_getopt+0x190>)
   16926:	f006 fe5b 	bl	1d5e0 <strlen>
   1692a:	4911      	ldr	r1, [pc, #68]	; (16970 <pdn_interface_getopt+0x188>)
   1692c:	4602      	mov	r2, r0
   1692e:	4812      	ldr	r0, [pc, #72]	; (16978 <pdn_interface_getopt+0x190>)
   16930:	f006 fe69 	bl	1d606 <strncmp>
   16934:	b980      	cbnz	r0, 16958 <pdn_interface_getopt+0x170>
   16936:	2008      	movs	r0, #8
   16938:	f7fb f844 	bl	119c4 <bsd_os_errno_set>
   1693c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16940:	e77d      	b.n	1683e <pdn_interface_getopt+0x56>
   16942:	220a      	movs	r2, #10
   16944:	2108      	movs	r1, #8
   16946:	6032      	str	r2, [r6, #0]
   16948:	2204      	movs	r2, #4
   1694a:	e79d      	b.n	16888 <pdn_interface_getopt+0xa0>
   1694c:	2016      	movs	r0, #22
   1694e:	f7fb f839 	bl	119c4 <bsd_os_errno_set>
   16952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16956:	e775      	b.n	16844 <pdn_interface_getopt+0x5c>
   16958:	2005      	movs	r0, #5
   1695a:	f7fb f833 	bl	119c4 <bsd_os_errno_set>
   1695e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16962:	e76c      	b.n	1683e <pdn_interface_getopt+0x56>
   16964:	789a0000 	.word	0x789a0000
   16968:	2002091c 	.word	0x2002091c
   1696c:	0001f820 	.word	0x0001f820
   16970:	2002081c 	.word	0x2002081c
   16974:	0001f82c 	.word	0x0001f82c
   16978:	0001f850 	.word	0x0001f850
   1697c:	20020818 	.word	0x20020818

00016980 <pdn_interface_pdn_id_get>:
   16980:	2900      	cmp	r1, #0
   16982:	f000 83b9 	beq.w	170f8 <pdn_interface_pdn_id_get+0x778>
   16986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1698a:	4ca3      	ldr	r4, [pc, #652]	; (16c18 <pdn_interface_pdn_id_get+0x298>)
   1698c:	2802      	cmp	r0, #2
   1698e:	b083      	sub	sp, #12
   16990:	460d      	mov	r5, r1
   16992:	6823      	ldr	r3, [r4, #0]
   16994:	f000 8094 	beq.w	16ac0 <pdn_interface_pdn_id_get+0x140>
   16998:	280a      	cmp	r0, #10
   1699a:	d03f      	beq.n	16a1c <pdn_interface_pdn_id_get+0x9c>
   1699c:	b11b      	cbz	r3, 169a6 <pdn_interface_pdn_id_get+0x26>
   1699e:	689b      	ldr	r3, [r3, #8]
   169a0:	2b03      	cmp	r3, #3
   169a2:	f000 8127 	beq.w	16bf4 <pdn_interface_pdn_id_get+0x274>
   169a6:	6863      	ldr	r3, [r4, #4]
   169a8:	b11b      	cbz	r3, 169b2 <pdn_interface_pdn_id_get+0x32>
   169aa:	689b      	ldr	r3, [r3, #8]
   169ac:	2b03      	cmp	r3, #3
   169ae:	f000 8110 	beq.w	16bd2 <pdn_interface_pdn_id_get+0x252>
   169b2:	68a3      	ldr	r3, [r4, #8]
   169b4:	b11b      	cbz	r3, 169be <pdn_interface_pdn_id_get+0x3e>
   169b6:	689b      	ldr	r3, [r3, #8]
   169b8:	2b03      	cmp	r3, #3
   169ba:	f000 80f9 	beq.w	16bb0 <pdn_interface_pdn_id_get+0x230>
   169be:	68e3      	ldr	r3, [r4, #12]
   169c0:	b11b      	cbz	r3, 169ca <pdn_interface_pdn_id_get+0x4a>
   169c2:	689b      	ldr	r3, [r3, #8]
   169c4:	2b03      	cmp	r3, #3
   169c6:	f000 80e2 	beq.w	16b8e <pdn_interface_pdn_id_get+0x20e>
   169ca:	6923      	ldr	r3, [r4, #16]
   169cc:	b11b      	cbz	r3, 169d6 <pdn_interface_pdn_id_get+0x56>
   169ce:	689b      	ldr	r3, [r3, #8]
   169d0:	2b03      	cmp	r3, #3
   169d2:	f000 8123 	beq.w	16c1c <pdn_interface_pdn_id_get+0x29c>
   169d6:	6963      	ldr	r3, [r4, #20]
   169d8:	b11b      	cbz	r3, 169e2 <pdn_interface_pdn_id_get+0x62>
   169da:	689b      	ldr	r3, [r3, #8]
   169dc:	2b03      	cmp	r3, #3
   169de:	f000 8161 	beq.w	16ca4 <pdn_interface_pdn_id_get+0x324>
   169e2:	69a3      	ldr	r3, [r4, #24]
   169e4:	b11b      	cbz	r3, 169ee <pdn_interface_pdn_id_get+0x6e>
   169e6:	689b      	ldr	r3, [r3, #8]
   169e8:	2b03      	cmp	r3, #3
   169ea:	f000 814a 	beq.w	16c82 <pdn_interface_pdn_id_get+0x302>
   169ee:	69e3      	ldr	r3, [r4, #28]
   169f0:	b11b      	cbz	r3, 169fa <pdn_interface_pdn_id_get+0x7a>
   169f2:	689b      	ldr	r3, [r3, #8]
   169f4:	2b03      	cmp	r3, #3
   169f6:	f000 8133 	beq.w	16c60 <pdn_interface_pdn_id_get+0x2e0>
   169fa:	6a23      	ldr	r3, [r4, #32]
   169fc:	b11b      	cbz	r3, 16a06 <pdn_interface_pdn_id_get+0x86>
   169fe:	689b      	ldr	r3, [r3, #8]
   16a00:	2b03      	cmp	r3, #3
   16a02:	f000 811c 	beq.w	16c3e <pdn_interface_pdn_id_get+0x2be>
   16a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a08:	b11b      	cbz	r3, 16a12 <pdn_interface_pdn_id_get+0x92>
   16a0a:	689b      	ldr	r3, [r3, #8]
   16a0c:	2b03      	cmp	r3, #3
   16a0e:	f000 80ad 	beq.w	16b6c <pdn_interface_pdn_id_get+0x1ec>
   16a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a16:	b003      	add	sp, #12
   16a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16a1c:	b11b      	cbz	r3, 16a26 <pdn_interface_pdn_id_get+0xa6>
   16a1e:	689b      	ldr	r3, [r3, #8]
   16a20:	2b03      	cmp	r3, #3
   16a22:	f000 8335 	beq.w	17090 <pdn_interface_pdn_id_get+0x710>
   16a26:	6863      	ldr	r3, [r4, #4]
   16a28:	b11b      	cbz	r3, 16a32 <pdn_interface_pdn_id_get+0xb2>
   16a2a:	689b      	ldr	r3, [r3, #8]
   16a2c:	2b03      	cmp	r3, #3
   16a2e:	f000 82fd 	beq.w	1702c <pdn_interface_pdn_id_get+0x6ac>
   16a32:	68a3      	ldr	r3, [r4, #8]
   16a34:	b11b      	cbz	r3, 16a3e <pdn_interface_pdn_id_get+0xbe>
   16a36:	689b      	ldr	r3, [r3, #8]
   16a38:	2b03      	cmp	r3, #3
   16a3a:	f000 82d5 	beq.w	16fe8 <pdn_interface_pdn_id_get+0x668>
   16a3e:	68e3      	ldr	r3, [r4, #12]
   16a40:	b11b      	cbz	r3, 16a4a <pdn_interface_pdn_id_get+0xca>
   16a42:	689e      	ldr	r6, [r3, #8]
   16a44:	2e03      	cmp	r6, #3
   16a46:	f000 81f0 	beq.w	16e2a <pdn_interface_pdn_id_get+0x4aa>
   16a4a:	6923      	ldr	r3, [r4, #16]
   16a4c:	b11b      	cbz	r3, 16a56 <pdn_interface_pdn_id_get+0xd6>
   16a4e:	689b      	ldr	r3, [r3, #8]
   16a50:	2b03      	cmp	r3, #3
   16a52:	f000 8203 	beq.w	16e5c <pdn_interface_pdn_id_get+0x4dc>
   16a56:	6963      	ldr	r3, [r4, #20]
   16a58:	b11b      	cbz	r3, 16a62 <pdn_interface_pdn_id_get+0xe2>
   16a5a:	689b      	ldr	r3, [r3, #8]
   16a5c:	2b03      	cmp	r3, #3
   16a5e:	f000 8215 	beq.w	16e8c <pdn_interface_pdn_id_get+0x50c>
   16a62:	69a3      	ldr	r3, [r4, #24]
   16a64:	b11b      	cbz	r3, 16a6e <pdn_interface_pdn_id_get+0xee>
   16a66:	689b      	ldr	r3, [r3, #8]
   16a68:	2b03      	cmp	r3, #3
   16a6a:	f000 8227 	beq.w	16ebc <pdn_interface_pdn_id_get+0x53c>
   16a6e:	69e3      	ldr	r3, [r4, #28]
   16a70:	b11b      	cbz	r3, 16a7a <pdn_interface_pdn_id_get+0xfa>
   16a72:	689b      	ldr	r3, [r3, #8]
   16a74:	2b03      	cmp	r3, #3
   16a76:	f000 8239 	beq.w	16eec <pdn_interface_pdn_id_get+0x56c>
   16a7a:	6a23      	ldr	r3, [r4, #32]
   16a7c:	b11b      	cbz	r3, 16a86 <pdn_interface_pdn_id_get+0x106>
   16a7e:	689b      	ldr	r3, [r3, #8]
   16a80:	2b03      	cmp	r3, #3
   16a82:	f000 824d 	beq.w	16f20 <pdn_interface_pdn_id_get+0x5a0>
   16a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16a88:	2b00      	cmp	r3, #0
   16a8a:	d0c2      	beq.n	16a12 <pdn_interface_pdn_id_get+0x92>
   16a8c:	689b      	ldr	r3, [r3, #8]
   16a8e:	2b03      	cmp	r3, #3
   16a90:	d1bf      	bne.n	16a12 <pdn_interface_pdn_id_get+0x92>
   16a92:	4628      	mov	r0, r5
   16a94:	f006 fda4 	bl	1d5e0 <strlen>
   16a98:	4606      	mov	r6, r0
   16a9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16a9c:	300c      	adds	r0, #12
   16a9e:	f006 fd9f 	bl	1d5e0 <strlen>
   16aa2:	42b0      	cmp	r0, r6
   16aa4:	d1b5      	bne.n	16a12 <pdn_interface_pdn_id_get+0x92>
   16aa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16aa8:	4628      	mov	r0, r5
   16aaa:	310c      	adds	r1, #12
   16aac:	f006 fd9f 	bl	1d5ee <strcmp>
   16ab0:	2800      	cmp	r0, #0
   16ab2:	d1ae      	bne.n	16a12 <pdn_interface_pdn_id_get+0x92>
   16ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16ab6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ab8:	0792      	lsls	r2, r2, #30
   16aba:	d5aa      	bpl.n	16a12 <pdn_interface_pdn_id_get+0x92>
   16abc:	2609      	movs	r6, #9
   16abe:	e11a      	b.n	16cf6 <pdn_interface_pdn_id_get+0x376>
   16ac0:	b11b      	cbz	r3, 16aca <pdn_interface_pdn_id_get+0x14a>
   16ac2:	689b      	ldr	r3, [r3, #8]
   16ac4:	2b03      	cmp	r3, #3
   16ac6:	f000 82fd 	beq.w	170c4 <pdn_interface_pdn_id_get+0x744>
   16aca:	6863      	ldr	r3, [r4, #4]
   16acc:	b11b      	cbz	r3, 16ad6 <pdn_interface_pdn_id_get+0x156>
   16ace:	689b      	ldr	r3, [r3, #8]
   16ad0:	2b03      	cmp	r3, #3
   16ad2:	f000 82c5 	beq.w	17060 <pdn_interface_pdn_id_get+0x6e0>
   16ad6:	68a3      	ldr	r3, [r4, #8]
   16ad8:	b11b      	cbz	r3, 16ae2 <pdn_interface_pdn_id_get+0x162>
   16ada:	689b      	ldr	r3, [r3, #8]
   16adc:	2b03      	cmp	r3, #3
   16ade:	f000 8269 	beq.w	16fb4 <pdn_interface_pdn_id_get+0x634>
   16ae2:	68e3      	ldr	r3, [r4, #12]
   16ae4:	b11b      	cbz	r3, 16aee <pdn_interface_pdn_id_get+0x16e>
   16ae6:	689e      	ldr	r6, [r3, #8]
   16ae8:	2e03      	cmp	r6, #3
   16aea:	f000 80ec 	beq.w	16cc6 <pdn_interface_pdn_id_get+0x346>
   16aee:	6923      	ldr	r3, [r4, #16]
   16af0:	b11b      	cbz	r3, 16afa <pdn_interface_pdn_id_get+0x17a>
   16af2:	689b      	ldr	r3, [r3, #8]
   16af4:	2b03      	cmp	r3, #3
   16af6:	f000 814a 	beq.w	16d8e <pdn_interface_pdn_id_get+0x40e>
   16afa:	6963      	ldr	r3, [r4, #20]
   16afc:	b11b      	cbz	r3, 16b06 <pdn_interface_pdn_id_get+0x186>
   16afe:	689b      	ldr	r3, [r3, #8]
   16b00:	2b03      	cmp	r3, #3
   16b02:	f000 815e 	beq.w	16dc2 <pdn_interface_pdn_id_get+0x442>
   16b06:	69a3      	ldr	r3, [r4, #24]
   16b08:	b11b      	cbz	r3, 16b12 <pdn_interface_pdn_id_get+0x192>
   16b0a:	689b      	ldr	r3, [r3, #8]
   16b0c:	2b03      	cmp	r3, #3
   16b0e:	f000 8172 	beq.w	16df6 <pdn_interface_pdn_id_get+0x476>
   16b12:	69e3      	ldr	r3, [r4, #28]
   16b14:	b11b      	cbz	r3, 16b1e <pdn_interface_pdn_id_get+0x19e>
   16b16:	689b      	ldr	r3, [r3, #8]
   16b18:	2b03      	cmp	r3, #3
   16b1a:	f000 821b 	beq.w	16f54 <pdn_interface_pdn_id_get+0x5d4>
   16b1e:	6a23      	ldr	r3, [r4, #32]
   16b20:	b11b      	cbz	r3, 16b2a <pdn_interface_pdn_id_get+0x1aa>
   16b22:	689b      	ldr	r3, [r3, #8]
   16b24:	2b03      	cmp	r3, #3
   16b26:	f000 822d 	beq.w	16f84 <pdn_interface_pdn_id_get+0x604>
   16b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b2c:	2b00      	cmp	r3, #0
   16b2e:	f43f af70 	beq.w	16a12 <pdn_interface_pdn_id_get+0x92>
   16b32:	689b      	ldr	r3, [r3, #8]
   16b34:	2b03      	cmp	r3, #3
   16b36:	f47f af6c 	bne.w	16a12 <pdn_interface_pdn_id_get+0x92>
   16b3a:	4628      	mov	r0, r5
   16b3c:	f006 fd50 	bl	1d5e0 <strlen>
   16b40:	4606      	mov	r6, r0
   16b42:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16b44:	300c      	adds	r0, #12
   16b46:	f006 fd4b 	bl	1d5e0 <strlen>
   16b4a:	4286      	cmp	r6, r0
   16b4c:	f47f af61 	bne.w	16a12 <pdn_interface_pdn_id_get+0x92>
   16b50:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16b52:	4628      	mov	r0, r5
   16b54:	310c      	adds	r1, #12
   16b56:	f006 fd4a 	bl	1d5ee <strcmp>
   16b5a:	2800      	cmp	r0, #0
   16b5c:	f47f af59 	bne.w	16a12 <pdn_interface_pdn_id_get+0x92>
   16b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b64:	07d2      	lsls	r2, r2, #31
   16b66:	f57f af54 	bpl.w	16a12 <pdn_interface_pdn_id_get+0x92>
   16b6a:	e7a7      	b.n	16abc <pdn_interface_pdn_id_get+0x13c>
   16b6c:	4628      	mov	r0, r5
   16b6e:	f006 fd37 	bl	1d5e0 <strlen>
   16b72:	4606      	mov	r6, r0
   16b74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16b76:	300c      	adds	r0, #12
   16b78:	f006 fd32 	bl	1d5e0 <strlen>
   16b7c:	42b0      	cmp	r0, r6
   16b7e:	f47f af48 	bne.w	16a12 <pdn_interface_pdn_id_get+0x92>
   16b82:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16b84:	4628      	mov	r0, r5
   16b86:	310c      	adds	r1, #12
   16b88:	f006 fd31 	bl	1d5ee <strcmp>
   16b8c:	e741      	b.n	16a12 <pdn_interface_pdn_id_get+0x92>
   16b8e:	4628      	mov	r0, r5
   16b90:	f006 fd26 	bl	1d5e0 <strlen>
   16b94:	4606      	mov	r6, r0
   16b96:	68e0      	ldr	r0, [r4, #12]
   16b98:	300c      	adds	r0, #12
   16b9a:	f006 fd21 	bl	1d5e0 <strlen>
   16b9e:	4286      	cmp	r6, r0
   16ba0:	f47f af13 	bne.w	169ca <pdn_interface_pdn_id_get+0x4a>
   16ba4:	68e1      	ldr	r1, [r4, #12]
   16ba6:	4628      	mov	r0, r5
   16ba8:	310c      	adds	r1, #12
   16baa:	f006 fd20 	bl	1d5ee <strcmp>
   16bae:	e70c      	b.n	169ca <pdn_interface_pdn_id_get+0x4a>
   16bb0:	4628      	mov	r0, r5
   16bb2:	f006 fd15 	bl	1d5e0 <strlen>
   16bb6:	4606      	mov	r6, r0
   16bb8:	68a0      	ldr	r0, [r4, #8]
   16bba:	300c      	adds	r0, #12
   16bbc:	f006 fd10 	bl	1d5e0 <strlen>
   16bc0:	4286      	cmp	r6, r0
   16bc2:	f47f aefc 	bne.w	169be <pdn_interface_pdn_id_get+0x3e>
   16bc6:	68a1      	ldr	r1, [r4, #8]
   16bc8:	4628      	mov	r0, r5
   16bca:	310c      	adds	r1, #12
   16bcc:	f006 fd0f 	bl	1d5ee <strcmp>
   16bd0:	e6f5      	b.n	169be <pdn_interface_pdn_id_get+0x3e>
   16bd2:	4628      	mov	r0, r5
   16bd4:	f006 fd04 	bl	1d5e0 <strlen>
   16bd8:	4606      	mov	r6, r0
   16bda:	6860      	ldr	r0, [r4, #4]
   16bdc:	300c      	adds	r0, #12
   16bde:	f006 fcff 	bl	1d5e0 <strlen>
   16be2:	4286      	cmp	r6, r0
   16be4:	f47f aee5 	bne.w	169b2 <pdn_interface_pdn_id_get+0x32>
   16be8:	6861      	ldr	r1, [r4, #4]
   16bea:	4628      	mov	r0, r5
   16bec:	310c      	adds	r1, #12
   16bee:	f006 fcfe 	bl	1d5ee <strcmp>
   16bf2:	e6de      	b.n	169b2 <pdn_interface_pdn_id_get+0x32>
   16bf4:	4608      	mov	r0, r1
   16bf6:	f006 fcf3 	bl	1d5e0 <strlen>
   16bfa:	4606      	mov	r6, r0
   16bfc:	6820      	ldr	r0, [r4, #0]
   16bfe:	300c      	adds	r0, #12
   16c00:	f006 fcee 	bl	1d5e0 <strlen>
   16c04:	4286      	cmp	r6, r0
   16c06:	f47f aece 	bne.w	169a6 <pdn_interface_pdn_id_get+0x26>
   16c0a:	6821      	ldr	r1, [r4, #0]
   16c0c:	4628      	mov	r0, r5
   16c0e:	310c      	adds	r1, #12
   16c10:	f006 fced 	bl	1d5ee <strcmp>
   16c14:	e6c7      	b.n	169a6 <pdn_interface_pdn_id_get+0x26>
   16c16:	bf00      	nop
   16c18:	2002091c 	.word	0x2002091c
   16c1c:	4628      	mov	r0, r5
   16c1e:	f006 fcdf 	bl	1d5e0 <strlen>
   16c22:	4606      	mov	r6, r0
   16c24:	6920      	ldr	r0, [r4, #16]
   16c26:	300c      	adds	r0, #12
   16c28:	f006 fcda 	bl	1d5e0 <strlen>
   16c2c:	4286      	cmp	r6, r0
   16c2e:	f47f aed2 	bne.w	169d6 <pdn_interface_pdn_id_get+0x56>
   16c32:	6921      	ldr	r1, [r4, #16]
   16c34:	4628      	mov	r0, r5
   16c36:	310c      	adds	r1, #12
   16c38:	f006 fcd9 	bl	1d5ee <strcmp>
   16c3c:	e6cb      	b.n	169d6 <pdn_interface_pdn_id_get+0x56>
   16c3e:	4628      	mov	r0, r5
   16c40:	f006 fcce 	bl	1d5e0 <strlen>
   16c44:	4606      	mov	r6, r0
   16c46:	6a20      	ldr	r0, [r4, #32]
   16c48:	300c      	adds	r0, #12
   16c4a:	f006 fcc9 	bl	1d5e0 <strlen>
   16c4e:	4286      	cmp	r6, r0
   16c50:	f47f aed9 	bne.w	16a06 <pdn_interface_pdn_id_get+0x86>
   16c54:	6a21      	ldr	r1, [r4, #32]
   16c56:	4628      	mov	r0, r5
   16c58:	310c      	adds	r1, #12
   16c5a:	f006 fcc8 	bl	1d5ee <strcmp>
   16c5e:	e6d2      	b.n	16a06 <pdn_interface_pdn_id_get+0x86>
   16c60:	4628      	mov	r0, r5
   16c62:	f006 fcbd 	bl	1d5e0 <strlen>
   16c66:	4606      	mov	r6, r0
   16c68:	69e0      	ldr	r0, [r4, #28]
   16c6a:	300c      	adds	r0, #12
   16c6c:	f006 fcb8 	bl	1d5e0 <strlen>
   16c70:	4286      	cmp	r6, r0
   16c72:	f47f aec2 	bne.w	169fa <pdn_interface_pdn_id_get+0x7a>
   16c76:	69e1      	ldr	r1, [r4, #28]
   16c78:	4628      	mov	r0, r5
   16c7a:	310c      	adds	r1, #12
   16c7c:	f006 fcb7 	bl	1d5ee <strcmp>
   16c80:	e6bb      	b.n	169fa <pdn_interface_pdn_id_get+0x7a>
   16c82:	4628      	mov	r0, r5
   16c84:	f006 fcac 	bl	1d5e0 <strlen>
   16c88:	4606      	mov	r6, r0
   16c8a:	69a0      	ldr	r0, [r4, #24]
   16c8c:	300c      	adds	r0, #12
   16c8e:	f006 fca7 	bl	1d5e0 <strlen>
   16c92:	4286      	cmp	r6, r0
   16c94:	f47f aeab 	bne.w	169ee <pdn_interface_pdn_id_get+0x6e>
   16c98:	69a1      	ldr	r1, [r4, #24]
   16c9a:	4628      	mov	r0, r5
   16c9c:	310c      	adds	r1, #12
   16c9e:	f006 fca6 	bl	1d5ee <strcmp>
   16ca2:	e6a4      	b.n	169ee <pdn_interface_pdn_id_get+0x6e>
   16ca4:	4628      	mov	r0, r5
   16ca6:	f006 fc9b 	bl	1d5e0 <strlen>
   16caa:	4606      	mov	r6, r0
   16cac:	6960      	ldr	r0, [r4, #20]
   16cae:	300c      	adds	r0, #12
   16cb0:	f006 fc96 	bl	1d5e0 <strlen>
   16cb4:	4286      	cmp	r6, r0
   16cb6:	f47f ae94 	bne.w	169e2 <pdn_interface_pdn_id_get+0x62>
   16cba:	6961      	ldr	r1, [r4, #20]
   16cbc:	4628      	mov	r0, r5
   16cbe:	310c      	adds	r1, #12
   16cc0:	f006 fc95 	bl	1d5ee <strcmp>
   16cc4:	e68d      	b.n	169e2 <pdn_interface_pdn_id_get+0x62>
   16cc6:	4628      	mov	r0, r5
   16cc8:	f006 fc8a 	bl	1d5e0 <strlen>
   16ccc:	4607      	mov	r7, r0
   16cce:	68e0      	ldr	r0, [r4, #12]
   16cd0:	300c      	adds	r0, #12
   16cd2:	f006 fc85 	bl	1d5e0 <strlen>
   16cd6:	4287      	cmp	r7, r0
   16cd8:	f47f af09 	bne.w	16aee <pdn_interface_pdn_id_get+0x16e>
   16cdc:	68e1      	ldr	r1, [r4, #12]
   16cde:	4628      	mov	r0, r5
   16ce0:	310c      	adds	r1, #12
   16ce2:	f006 fc84 	bl	1d5ee <strcmp>
   16ce6:	2800      	cmp	r0, #0
   16ce8:	f47f af01 	bne.w	16aee <pdn_interface_pdn_id_get+0x16e>
   16cec:	68e3      	ldr	r3, [r4, #12]
   16cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16cf0:	07d1      	lsls	r1, r2, #31
   16cf2:	f57f aefc 	bpl.w	16aee <pdn_interface_pdn_id_get+0x16e>
   16cf6:	6858      	ldr	r0, [r3, #4]
   16cf8:	1c43      	adds	r3, r0, #1
   16cfa:	f47f ae8c 	bne.w	16a16 <pdn_interface_pdn_id_get+0x96>
   16cfe:	4dc6      	ldr	r5, [pc, #792]	; (17018 <pdn_interface_pdn_id_get+0x698>)
   16d00:	4ac6      	ldr	r2, [pc, #792]	; (1701c <pdn_interface_pdn_id_get+0x69c>)
   16d02:	f44f 7180 	mov.w	r1, #256	; 0x100
   16d06:	4628      	mov	r0, r5
   16d08:	f7fa f90e 	bl	10f28 <snprintf>
   16d0c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16d10:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16d14:	681b      	ldr	r3, [r3, #0]
   16d16:	4ac2      	ldr	r2, [pc, #776]	; (17020 <pdn_interface_pdn_id_get+0x6a0>)
   16d18:	4428      	add	r0, r5
   16d1a:	f8df 830c 	ldr.w	r8, [pc, #780]	; 17028 <pdn_interface_pdn_id_get+0x6a8>
   16d1e:	f7fa f903 	bl	10f28 <snprintf>
   16d22:	4628      	mov	r0, r5
   16d24:	f8d8 9000 	ldr.w	r9, [r8]
   16d28:	2700      	movs	r7, #0
   16d2a:	f006 fc59 	bl	1d5e0 <strlen>
   16d2e:	4629      	mov	r1, r5
   16d30:	4602      	mov	r2, r0
   16d32:	463b      	mov	r3, r7
   16d34:	4648      	mov	r0, r9
   16d36:	9701      	str	r7, [sp, #4]
   16d38:	9700      	str	r7, [sp, #0]
   16d3a:	f7fc f94d 	bl	12fd8 <at_interface_write>
   16d3e:	4681      	mov	r9, r0
   16d40:	4628      	mov	r0, r5
   16d42:	f006 fc4d 	bl	1d5e0 <strlen>
   16d46:	4548      	cmp	r0, r9
   16d48:	f040 81e9 	bne.w	1711e <pdn_interface_pdn_id_get+0x79e>
   16d4c:	463b      	mov	r3, r7
   16d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
   16d52:	e9cd 7700 	strd	r7, r7, [sp]
   16d56:	4629      	mov	r1, r5
   16d58:	f8d8 0000 	ldr.w	r0, [r8]
   16d5c:	f7fc fa24 	bl	131a8 <at_interface_read>
   16d60:	4607      	mov	r7, r0
   16d62:	48b0      	ldr	r0, [pc, #704]	; (17024 <pdn_interface_pdn_id_get+0x6a4>)
   16d64:	f006 fc3c 	bl	1d5e0 <strlen>
   16d68:	4287      	cmp	r7, r0
   16d6a:	4602      	mov	r2, r0
   16d6c:	f2c0 81c7 	blt.w	170fe <pdn_interface_pdn_id_get+0x77e>
   16d70:	4629      	mov	r1, r5
   16d72:	48ac      	ldr	r0, [pc, #688]	; (17024 <pdn_interface_pdn_id_get+0x6a4>)
   16d74:	f006 fc47 	bl	1d606 <strncmp>
   16d78:	2800      	cmp	r0, #0
   16d7a:	f040 81c0 	bne.w	170fe <pdn_interface_pdn_id_get+0x77e>
   16d7e:	4629      	mov	r1, r5
   16d80:	4630      	mov	r0, r6
   16d82:	f7ff f92b 	bl	15fdc <pdn_id_get_parser>
   16d86:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16d8a:	6858      	ldr	r0, [r3, #4]
   16d8c:	e643      	b.n	16a16 <pdn_interface_pdn_id_get+0x96>
   16d8e:	4628      	mov	r0, r5
   16d90:	f006 fc26 	bl	1d5e0 <strlen>
   16d94:	4606      	mov	r6, r0
   16d96:	6920      	ldr	r0, [r4, #16]
   16d98:	300c      	adds	r0, #12
   16d9a:	f006 fc21 	bl	1d5e0 <strlen>
   16d9e:	4286      	cmp	r6, r0
   16da0:	f47f aeab 	bne.w	16afa <pdn_interface_pdn_id_get+0x17a>
   16da4:	6921      	ldr	r1, [r4, #16]
   16da6:	4628      	mov	r0, r5
   16da8:	310c      	adds	r1, #12
   16daa:	f006 fc20 	bl	1d5ee <strcmp>
   16dae:	2800      	cmp	r0, #0
   16db0:	f47f aea3 	bne.w	16afa <pdn_interface_pdn_id_get+0x17a>
   16db4:	6923      	ldr	r3, [r4, #16]
   16db6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16db8:	07d2      	lsls	r2, r2, #31
   16dba:	f57f ae9e 	bpl.w	16afa <pdn_interface_pdn_id_get+0x17a>
   16dbe:	2604      	movs	r6, #4
   16dc0:	e799      	b.n	16cf6 <pdn_interface_pdn_id_get+0x376>
   16dc2:	4628      	mov	r0, r5
   16dc4:	f006 fc0c 	bl	1d5e0 <strlen>
   16dc8:	4606      	mov	r6, r0
   16dca:	6960      	ldr	r0, [r4, #20]
   16dcc:	300c      	adds	r0, #12
   16dce:	f006 fc07 	bl	1d5e0 <strlen>
   16dd2:	4286      	cmp	r6, r0
   16dd4:	f47f ae97 	bne.w	16b06 <pdn_interface_pdn_id_get+0x186>
   16dd8:	6961      	ldr	r1, [r4, #20]
   16dda:	4628      	mov	r0, r5
   16ddc:	310c      	adds	r1, #12
   16dde:	f006 fc06 	bl	1d5ee <strcmp>
   16de2:	2800      	cmp	r0, #0
   16de4:	f47f ae8f 	bne.w	16b06 <pdn_interface_pdn_id_get+0x186>
   16de8:	6963      	ldr	r3, [r4, #20]
   16dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16dec:	07d7      	lsls	r7, r2, #31
   16dee:	f57f ae8a 	bpl.w	16b06 <pdn_interface_pdn_id_get+0x186>
   16df2:	2605      	movs	r6, #5
   16df4:	e77f      	b.n	16cf6 <pdn_interface_pdn_id_get+0x376>
   16df6:	4628      	mov	r0, r5
   16df8:	f006 fbf2 	bl	1d5e0 <strlen>
   16dfc:	4606      	mov	r6, r0
   16dfe:	69a0      	ldr	r0, [r4, #24]
   16e00:	300c      	adds	r0, #12
   16e02:	f006 fbed 	bl	1d5e0 <strlen>
   16e06:	4286      	cmp	r6, r0
   16e08:	f47f ae83 	bne.w	16b12 <pdn_interface_pdn_id_get+0x192>
   16e0c:	69a1      	ldr	r1, [r4, #24]
   16e0e:	4628      	mov	r0, r5
   16e10:	310c      	adds	r1, #12
   16e12:	f006 fbec 	bl	1d5ee <strcmp>
   16e16:	2800      	cmp	r0, #0
   16e18:	f47f ae7b 	bne.w	16b12 <pdn_interface_pdn_id_get+0x192>
   16e1c:	69a3      	ldr	r3, [r4, #24]
   16e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e20:	07d6      	lsls	r6, r2, #31
   16e22:	f57f ae76 	bpl.w	16b12 <pdn_interface_pdn_id_get+0x192>
   16e26:	2606      	movs	r6, #6
   16e28:	e765      	b.n	16cf6 <pdn_interface_pdn_id_get+0x376>
   16e2a:	4628      	mov	r0, r5
   16e2c:	f006 fbd8 	bl	1d5e0 <strlen>
   16e30:	4607      	mov	r7, r0
   16e32:	68e0      	ldr	r0, [r4, #12]
   16e34:	300c      	adds	r0, #12
   16e36:	f006 fbd3 	bl	1d5e0 <strlen>
   16e3a:	4287      	cmp	r7, r0
   16e3c:	f47f ae05 	bne.w	16a4a <pdn_interface_pdn_id_get+0xca>
   16e40:	68e1      	ldr	r1, [r4, #12]
   16e42:	4628      	mov	r0, r5
   16e44:	310c      	adds	r1, #12
   16e46:	f006 fbd2 	bl	1d5ee <strcmp>
   16e4a:	2800      	cmp	r0, #0
   16e4c:	f47f adfd 	bne.w	16a4a <pdn_interface_pdn_id_get+0xca>
   16e50:	68e3      	ldr	r3, [r4, #12]
   16e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e54:	0791      	lsls	r1, r2, #30
   16e56:	f53f af4e 	bmi.w	16cf6 <pdn_interface_pdn_id_get+0x376>
   16e5a:	e5f6      	b.n	16a4a <pdn_interface_pdn_id_get+0xca>
   16e5c:	4628      	mov	r0, r5
   16e5e:	f006 fbbf 	bl	1d5e0 <strlen>
   16e62:	4606      	mov	r6, r0
   16e64:	6920      	ldr	r0, [r4, #16]
   16e66:	300c      	adds	r0, #12
   16e68:	f006 fbba 	bl	1d5e0 <strlen>
   16e6c:	4286      	cmp	r6, r0
   16e6e:	f47f adf2 	bne.w	16a56 <pdn_interface_pdn_id_get+0xd6>
   16e72:	6921      	ldr	r1, [r4, #16]
   16e74:	4628      	mov	r0, r5
   16e76:	310c      	adds	r1, #12
   16e78:	f006 fbb9 	bl	1d5ee <strcmp>
   16e7c:	2800      	cmp	r0, #0
   16e7e:	f47f adea 	bne.w	16a56 <pdn_interface_pdn_id_get+0xd6>
   16e82:	6923      	ldr	r3, [r4, #16]
   16e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e86:	0792      	lsls	r2, r2, #30
   16e88:	d499      	bmi.n	16dbe <pdn_interface_pdn_id_get+0x43e>
   16e8a:	e5e4      	b.n	16a56 <pdn_interface_pdn_id_get+0xd6>
   16e8c:	4628      	mov	r0, r5
   16e8e:	f006 fba7 	bl	1d5e0 <strlen>
   16e92:	4606      	mov	r6, r0
   16e94:	6960      	ldr	r0, [r4, #20]
   16e96:	300c      	adds	r0, #12
   16e98:	f006 fba2 	bl	1d5e0 <strlen>
   16e9c:	4286      	cmp	r6, r0
   16e9e:	f47f ade0 	bne.w	16a62 <pdn_interface_pdn_id_get+0xe2>
   16ea2:	6961      	ldr	r1, [r4, #20]
   16ea4:	4628      	mov	r0, r5
   16ea6:	310c      	adds	r1, #12
   16ea8:	f006 fba1 	bl	1d5ee <strcmp>
   16eac:	2800      	cmp	r0, #0
   16eae:	f47f add8 	bne.w	16a62 <pdn_interface_pdn_id_get+0xe2>
   16eb2:	6963      	ldr	r3, [r4, #20]
   16eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16eb6:	0797      	lsls	r7, r2, #30
   16eb8:	d49b      	bmi.n	16df2 <pdn_interface_pdn_id_get+0x472>
   16eba:	e5d2      	b.n	16a62 <pdn_interface_pdn_id_get+0xe2>
   16ebc:	4628      	mov	r0, r5
   16ebe:	f006 fb8f 	bl	1d5e0 <strlen>
   16ec2:	4606      	mov	r6, r0
   16ec4:	69a0      	ldr	r0, [r4, #24]
   16ec6:	300c      	adds	r0, #12
   16ec8:	f006 fb8a 	bl	1d5e0 <strlen>
   16ecc:	4286      	cmp	r6, r0
   16ece:	f47f adce 	bne.w	16a6e <pdn_interface_pdn_id_get+0xee>
   16ed2:	69a1      	ldr	r1, [r4, #24]
   16ed4:	4628      	mov	r0, r5
   16ed6:	310c      	adds	r1, #12
   16ed8:	f006 fb89 	bl	1d5ee <strcmp>
   16edc:	2800      	cmp	r0, #0
   16ede:	f47f adc6 	bne.w	16a6e <pdn_interface_pdn_id_get+0xee>
   16ee2:	69a3      	ldr	r3, [r4, #24]
   16ee4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ee6:	0796      	lsls	r6, r2, #30
   16ee8:	d49d      	bmi.n	16e26 <pdn_interface_pdn_id_get+0x4a6>
   16eea:	e5c0      	b.n	16a6e <pdn_interface_pdn_id_get+0xee>
   16eec:	4628      	mov	r0, r5
   16eee:	f006 fb77 	bl	1d5e0 <strlen>
   16ef2:	4606      	mov	r6, r0
   16ef4:	69e0      	ldr	r0, [r4, #28]
   16ef6:	300c      	adds	r0, #12
   16ef8:	f006 fb72 	bl	1d5e0 <strlen>
   16efc:	4286      	cmp	r6, r0
   16efe:	f47f adbc 	bne.w	16a7a <pdn_interface_pdn_id_get+0xfa>
   16f02:	69e1      	ldr	r1, [r4, #28]
   16f04:	4628      	mov	r0, r5
   16f06:	310c      	adds	r1, #12
   16f08:	f006 fb71 	bl	1d5ee <strcmp>
   16f0c:	2800      	cmp	r0, #0
   16f0e:	f47f adb4 	bne.w	16a7a <pdn_interface_pdn_id_get+0xfa>
   16f12:	69e3      	ldr	r3, [r4, #28]
   16f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f16:	0790      	lsls	r0, r2, #30
   16f18:	f57f adaf 	bpl.w	16a7a <pdn_interface_pdn_id_get+0xfa>
   16f1c:	2607      	movs	r6, #7
   16f1e:	e6ea      	b.n	16cf6 <pdn_interface_pdn_id_get+0x376>
   16f20:	4628      	mov	r0, r5
   16f22:	f006 fb5d 	bl	1d5e0 <strlen>
   16f26:	4606      	mov	r6, r0
   16f28:	6a20      	ldr	r0, [r4, #32]
   16f2a:	300c      	adds	r0, #12
   16f2c:	f006 fb58 	bl	1d5e0 <strlen>
   16f30:	4286      	cmp	r6, r0
   16f32:	f47f ada8 	bne.w	16a86 <pdn_interface_pdn_id_get+0x106>
   16f36:	6a21      	ldr	r1, [r4, #32]
   16f38:	4628      	mov	r0, r5
   16f3a:	310c      	adds	r1, #12
   16f3c:	f006 fb57 	bl	1d5ee <strcmp>
   16f40:	2800      	cmp	r0, #0
   16f42:	f47f ada0 	bne.w	16a86 <pdn_interface_pdn_id_get+0x106>
   16f46:	6a23      	ldr	r3, [r4, #32]
   16f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f4a:	0791      	lsls	r1, r2, #30
   16f4c:	f57f ad9b 	bpl.w	16a86 <pdn_interface_pdn_id_get+0x106>
   16f50:	2608      	movs	r6, #8
   16f52:	e6d0      	b.n	16cf6 <pdn_interface_pdn_id_get+0x376>
   16f54:	4628      	mov	r0, r5
   16f56:	f006 fb43 	bl	1d5e0 <strlen>
   16f5a:	4606      	mov	r6, r0
   16f5c:	69e0      	ldr	r0, [r4, #28]
   16f5e:	300c      	adds	r0, #12
   16f60:	f006 fb3e 	bl	1d5e0 <strlen>
   16f64:	4286      	cmp	r6, r0
   16f66:	f47f adda 	bne.w	16b1e <pdn_interface_pdn_id_get+0x19e>
   16f6a:	69e1      	ldr	r1, [r4, #28]
   16f6c:	4628      	mov	r0, r5
   16f6e:	310c      	adds	r1, #12
   16f70:	f006 fb3d 	bl	1d5ee <strcmp>
   16f74:	2800      	cmp	r0, #0
   16f76:	f47f add2 	bne.w	16b1e <pdn_interface_pdn_id_get+0x19e>
   16f7a:	69e3      	ldr	r3, [r4, #28]
   16f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16f7e:	07d0      	lsls	r0, r2, #31
   16f80:	d4cc      	bmi.n	16f1c <pdn_interface_pdn_id_get+0x59c>
   16f82:	e5cc      	b.n	16b1e <pdn_interface_pdn_id_get+0x19e>
   16f84:	4628      	mov	r0, r5
   16f86:	f006 fb2b 	bl	1d5e0 <strlen>
   16f8a:	4606      	mov	r6, r0
   16f8c:	6a20      	ldr	r0, [r4, #32]
   16f8e:	300c      	adds	r0, #12
   16f90:	f006 fb26 	bl	1d5e0 <strlen>
   16f94:	4286      	cmp	r6, r0
   16f96:	f47f adc8 	bne.w	16b2a <pdn_interface_pdn_id_get+0x1aa>
   16f9a:	6a21      	ldr	r1, [r4, #32]
   16f9c:	4628      	mov	r0, r5
   16f9e:	310c      	adds	r1, #12
   16fa0:	f006 fb25 	bl	1d5ee <strcmp>
   16fa4:	2800      	cmp	r0, #0
   16fa6:	f47f adc0 	bne.w	16b2a <pdn_interface_pdn_id_get+0x1aa>
   16faa:	6a23      	ldr	r3, [r4, #32]
   16fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16fae:	07d1      	lsls	r1, r2, #31
   16fb0:	d4ce      	bmi.n	16f50 <pdn_interface_pdn_id_get+0x5d0>
   16fb2:	e5ba      	b.n	16b2a <pdn_interface_pdn_id_get+0x1aa>
   16fb4:	4628      	mov	r0, r5
   16fb6:	f006 fb13 	bl	1d5e0 <strlen>
   16fba:	4606      	mov	r6, r0
   16fbc:	68a0      	ldr	r0, [r4, #8]
   16fbe:	300c      	adds	r0, #12
   16fc0:	f006 fb0e 	bl	1d5e0 <strlen>
   16fc4:	4286      	cmp	r6, r0
   16fc6:	f47f ad8c 	bne.w	16ae2 <pdn_interface_pdn_id_get+0x162>
   16fca:	68a1      	ldr	r1, [r4, #8]
   16fcc:	4628      	mov	r0, r5
   16fce:	310c      	adds	r1, #12
   16fd0:	f006 fb0d 	bl	1d5ee <strcmp>
   16fd4:	2800      	cmp	r0, #0
   16fd6:	f47f ad84 	bne.w	16ae2 <pdn_interface_pdn_id_get+0x162>
   16fda:	68a3      	ldr	r3, [r4, #8]
   16fdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16fde:	07d0      	lsls	r0, r2, #31
   16fe0:	f57f ad7f 	bpl.w	16ae2 <pdn_interface_pdn_id_get+0x162>
   16fe4:	2602      	movs	r6, #2
   16fe6:	e686      	b.n	16cf6 <pdn_interface_pdn_id_get+0x376>
   16fe8:	4628      	mov	r0, r5
   16fea:	f006 faf9 	bl	1d5e0 <strlen>
   16fee:	4606      	mov	r6, r0
   16ff0:	68a0      	ldr	r0, [r4, #8]
   16ff2:	300c      	adds	r0, #12
   16ff4:	f006 faf4 	bl	1d5e0 <strlen>
   16ff8:	4286      	cmp	r6, r0
   16ffa:	f47f ad20 	bne.w	16a3e <pdn_interface_pdn_id_get+0xbe>
   16ffe:	68a1      	ldr	r1, [r4, #8]
   17000:	4628      	mov	r0, r5
   17002:	310c      	adds	r1, #12
   17004:	f006 faf3 	bl	1d5ee <strcmp>
   17008:	2800      	cmp	r0, #0
   1700a:	f47f ad18 	bne.w	16a3e <pdn_interface_pdn_id_get+0xbe>
   1700e:	68a3      	ldr	r3, [r4, #8]
   17010:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   17012:	0790      	lsls	r0, r2, #30
   17014:	d4e6      	bmi.n	16fe4 <pdn_interface_pdn_id_get+0x664>
   17016:	e512      	b.n	16a3e <pdn_interface_pdn_id_get+0xbe>
   17018:	2002081c 	.word	0x2002081c
   1701c:	0001f7fc 	.word	0x0001f7fc
   17020:	0001f7f8 	.word	0x0001f7f8
   17024:	0001f80c 	.word	0x0001f80c
   17028:	20020818 	.word	0x20020818
   1702c:	4628      	mov	r0, r5
   1702e:	f006 fad7 	bl	1d5e0 <strlen>
   17032:	4606      	mov	r6, r0
   17034:	6860      	ldr	r0, [r4, #4]
   17036:	300c      	adds	r0, #12
   17038:	f006 fad2 	bl	1d5e0 <strlen>
   1703c:	4286      	cmp	r6, r0
   1703e:	f47f acf8 	bne.w	16a32 <pdn_interface_pdn_id_get+0xb2>
   17042:	6861      	ldr	r1, [r4, #4]
   17044:	4628      	mov	r0, r5
   17046:	310c      	adds	r1, #12
   17048:	f006 fad1 	bl	1d5ee <strcmp>
   1704c:	2800      	cmp	r0, #0
   1704e:	f47f acf0 	bne.w	16a32 <pdn_interface_pdn_id_get+0xb2>
   17052:	6863      	ldr	r3, [r4, #4]
   17054:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   17056:	0796      	lsls	r6, r2, #30
   17058:	f57f aceb 	bpl.w	16a32 <pdn_interface_pdn_id_get+0xb2>
   1705c:	2601      	movs	r6, #1
   1705e:	e64a      	b.n	16cf6 <pdn_interface_pdn_id_get+0x376>
   17060:	4628      	mov	r0, r5
   17062:	f006 fabd 	bl	1d5e0 <strlen>
   17066:	4606      	mov	r6, r0
   17068:	6860      	ldr	r0, [r4, #4]
   1706a:	300c      	adds	r0, #12
   1706c:	f006 fab8 	bl	1d5e0 <strlen>
   17070:	4286      	cmp	r6, r0
   17072:	f47f ad30 	bne.w	16ad6 <pdn_interface_pdn_id_get+0x156>
   17076:	6861      	ldr	r1, [r4, #4]
   17078:	4628      	mov	r0, r5
   1707a:	310c      	adds	r1, #12
   1707c:	f006 fab7 	bl	1d5ee <strcmp>
   17080:	2800      	cmp	r0, #0
   17082:	f47f ad28 	bne.w	16ad6 <pdn_interface_pdn_id_get+0x156>
   17086:	6863      	ldr	r3, [r4, #4]
   17088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1708a:	07d6      	lsls	r6, r2, #31
   1708c:	d4e6      	bmi.n	1705c <pdn_interface_pdn_id_get+0x6dc>
   1708e:	e522      	b.n	16ad6 <pdn_interface_pdn_id_get+0x156>
   17090:	4608      	mov	r0, r1
   17092:	f006 faa5 	bl	1d5e0 <strlen>
   17096:	4606      	mov	r6, r0
   17098:	6820      	ldr	r0, [r4, #0]
   1709a:	300c      	adds	r0, #12
   1709c:	f006 faa0 	bl	1d5e0 <strlen>
   170a0:	4286      	cmp	r6, r0
   170a2:	f47f acc0 	bne.w	16a26 <pdn_interface_pdn_id_get+0xa6>
   170a6:	6821      	ldr	r1, [r4, #0]
   170a8:	4628      	mov	r0, r5
   170aa:	310c      	adds	r1, #12
   170ac:	f006 fa9f 	bl	1d5ee <strcmp>
   170b0:	4606      	mov	r6, r0
   170b2:	2800      	cmp	r0, #0
   170b4:	f47f acb7 	bne.w	16a26 <pdn_interface_pdn_id_get+0xa6>
   170b8:	6823      	ldr	r3, [r4, #0]
   170ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   170bc:	0797      	lsls	r7, r2, #30
   170be:	f53f ae1a 	bmi.w	16cf6 <pdn_interface_pdn_id_get+0x376>
   170c2:	e4b0      	b.n	16a26 <pdn_interface_pdn_id_get+0xa6>
   170c4:	4608      	mov	r0, r1
   170c6:	f006 fa8b 	bl	1d5e0 <strlen>
   170ca:	4606      	mov	r6, r0
   170cc:	6820      	ldr	r0, [r4, #0]
   170ce:	300c      	adds	r0, #12
   170d0:	f006 fa86 	bl	1d5e0 <strlen>
   170d4:	4286      	cmp	r6, r0
   170d6:	f47f acf8 	bne.w	16aca <pdn_interface_pdn_id_get+0x14a>
   170da:	6821      	ldr	r1, [r4, #0]
   170dc:	4628      	mov	r0, r5
   170de:	310c      	adds	r1, #12
   170e0:	f006 fa85 	bl	1d5ee <strcmp>
   170e4:	4606      	mov	r6, r0
   170e6:	2800      	cmp	r0, #0
   170e8:	f47f acef 	bne.w	16aca <pdn_interface_pdn_id_get+0x14a>
   170ec:	6823      	ldr	r3, [r4, #0]
   170ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   170f0:	07d7      	lsls	r7, r2, #31
   170f2:	f53f ae00 	bmi.w	16cf6 <pdn_interface_pdn_id_get+0x376>
   170f6:	e4e8      	b.n	16aca <pdn_interface_pdn_id_get+0x14a>
   170f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   170fc:	4770      	bx	lr
   170fe:	480b      	ldr	r0, [pc, #44]	; (1712c <pdn_interface_pdn_id_get+0x7ac>)
   17100:	f006 fa6e 	bl	1d5e0 <strlen>
   17104:	490a      	ldr	r1, [pc, #40]	; (17130 <pdn_interface_pdn_id_get+0x7b0>)
   17106:	4602      	mov	r2, r0
   17108:	4808      	ldr	r0, [pc, #32]	; (1712c <pdn_interface_pdn_id_get+0x7ac>)
   1710a:	f006 fa7c 	bl	1d606 <strncmp>
   1710e:	b930      	cbnz	r0, 1711e <pdn_interface_pdn_id_get+0x79e>
   17110:	2008      	movs	r0, #8
   17112:	f7fa fc57 	bl	119c4 <bsd_os_errno_set>
   17116:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1711a:	6858      	ldr	r0, [r3, #4]
   1711c:	e47b      	b.n	16a16 <pdn_interface_pdn_id_get+0x96>
   1711e:	2005      	movs	r0, #5
   17120:	f7fa fc50 	bl	119c4 <bsd_os_errno_set>
   17124:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   17128:	6858      	ldr	r0, [r3, #4]
   1712a:	e474      	b.n	16a16 <pdn_interface_pdn_id_get+0x96>
   1712c:	0001f850 	.word	0x0001f850
   17130:	2002081c 	.word	0x2002081c

00017134 <linked_list_init>:
   17134:	b128      	cbz	r0, 17142 <linked_list_init+0xe>
   17136:	2300      	movs	r3, #0
   17138:	6003      	str	r3, [r0, #0]
   1713a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1713e:	4618      	mov	r0, r3
   17140:	4770      	bx	lr
   17142:	2007      	movs	r0, #7
   17144:	4770      	bx	lr
   17146:	bf00      	nop

00017148 <linked_list_push>:
   17148:	6802      	ldr	r2, [r0, #0]
   1714a:	4603      	mov	r3, r0
   1714c:	3201      	adds	r2, #1
   1714e:	d00e      	beq.n	1716e <linked_list_push+0x26>
   17150:	2200      	movs	r2, #0
   17152:	600a      	str	r2, [r1, #0]
   17154:	6802      	ldr	r2, [r0, #0]
   17156:	b13a      	cbz	r2, 17168 <linked_list_push+0x20>
   17158:	6882      	ldr	r2, [r0, #8]
   1715a:	6011      	str	r1, [r2, #0]
   1715c:	6081      	str	r1, [r0, #8]
   1715e:	681a      	ldr	r2, [r3, #0]
   17160:	2000      	movs	r0, #0
   17162:	3201      	adds	r2, #1
   17164:	601a      	str	r2, [r3, #0]
   17166:	4770      	bx	lr
   17168:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1716c:	e7f7      	b.n	1715e <linked_list_push+0x16>
   1716e:	2004      	movs	r0, #4
   17170:	4770      	bx	lr
   17172:	bf00      	nop

00017174 <linked_list_pop>:
   17174:	4603      	mov	r3, r0
   17176:	6800      	ldr	r0, [r0, #0]
   17178:	b128      	cbz	r0, 17186 <linked_list_pop+0x12>
   1717a:	6858      	ldr	r0, [r3, #4]
   1717c:	681a      	ldr	r2, [r3, #0]
   1717e:	6801      	ldr	r1, [r0, #0]
   17180:	3a01      	subs	r2, #1
   17182:	6059      	str	r1, [r3, #4]
   17184:	601a      	str	r2, [r3, #0]
   17186:	4770      	bx	lr

00017188 <linked_list_peek>:
   17188:	6803      	ldr	r3, [r0, #0]
   1718a:	b10b      	cbz	r3, 17190 <linked_list_peek+0x8>
   1718c:	6840      	ldr	r0, [r0, #4]
   1718e:	4770      	bx	lr
   17190:	4618      	mov	r0, r3
   17192:	4770      	bx	lr

00017194 <linked_list_size_get>:
   17194:	6800      	ldr	r0, [r0, #0]
   17196:	4770      	bx	lr

00017198 <linked_list_get_next>:
   17198:	6800      	ldr	r0, [r0, #0]
   1719a:	4770      	bx	lr

0001719c <nrf_socket>:
   1719c:	b570      	push	{r4, r5, r6, lr}
   1719e:	4604      	mov	r4, r0
   171a0:	460d      	mov	r5, r1
   171a2:	4616      	mov	r6, r2
   171a4:	f7fd fcd6 	bl	14b54 <bsd_platform_af_method_table_get>
   171a8:	b130      	cbz	r0, 171b8 <nrf_socket+0x1c>
   171aa:	6803      	ldr	r3, [r0, #0]
   171ac:	4632      	mov	r2, r6
   171ae:	4629      	mov	r1, r5
   171b0:	4620      	mov	r0, r4
   171b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   171b6:	4718      	bx	r3
   171b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171bc:	bd70      	pop	{r4, r5, r6, pc}
   171be:	bf00      	nop

000171c0 <nrf_close>:
   171c0:	b510      	push	{r4, lr}
   171c2:	4604      	mov	r4, r0
   171c4:	f7fd fd1a 	bl	14bfc <bsd_platform_fd_method_table_get>
   171c8:	b120      	cbz	r0, 171d4 <nrf_close+0x14>
   171ca:	6843      	ldr	r3, [r0, #4]
   171cc:	4620      	mov	r0, r4
   171ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171d2:	4718      	bx	r3
   171d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171d8:	bd10      	pop	{r4, pc}
   171da:	bf00      	nop

000171dc <nrf_sendto>:
   171dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171e0:	460d      	mov	r5, r1
   171e2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   171e6:	4616      	mov	r6, r2
   171e8:	461f      	mov	r7, r3
   171ea:	4604      	mov	r4, r0
   171ec:	f7fd fd06 	bl	14bfc <bsd_platform_fd_method_table_get>
   171f0:	b158      	cbz	r0, 1720a <nrf_sendto+0x2e>
   171f2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   171f6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   171fa:	463b      	mov	r3, r7
   171fc:	4632      	mov	r2, r6
   171fe:	4629      	mov	r1, r5
   17200:	4620      	mov	r0, r4
   17202:	46f4      	mov	ip, lr
   17204:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17208:	4760      	bx	ip
   1720a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1720e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17212:	bf00      	nop

00017214 <nrf_send>:
   17214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17218:	b082      	sub	sp, #8
   1721a:	460e      	mov	r6, r1
   1721c:	4617      	mov	r7, r2
   1721e:	4698      	mov	r8, r3
   17220:	4605      	mov	r5, r0
   17222:	f7fd fceb 	bl	14bfc <bsd_platform_fd_method_table_get>
   17226:	b160      	cbz	r0, 17242 <nrf_send+0x2e>
   17228:	4604      	mov	r4, r0
   1722a:	2000      	movs	r0, #0
   1722c:	e9cd 0000 	strd	r0, r0, [sp]
   17230:	4643      	mov	r3, r8
   17232:	463a      	mov	r2, r7
   17234:	4631      	mov	r1, r6
   17236:	4628      	mov	r0, r5
   17238:	68a4      	ldr	r4, [r4, #8]
   1723a:	47a0      	blx	r4
   1723c:	b002      	add	sp, #8
   1723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17246:	e7f9      	b.n	1723c <nrf_send+0x28>

00017248 <nrf_recvfrom>:
   17248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1724c:	460d      	mov	r5, r1
   1724e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   17252:	4616      	mov	r6, r2
   17254:	461f      	mov	r7, r3
   17256:	4604      	mov	r4, r0
   17258:	f7fd fcd0 	bl	14bfc <bsd_platform_fd_method_table_get>
   1725c:	b158      	cbz	r0, 17276 <nrf_recvfrom+0x2e>
   1725e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   17262:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   17266:	463b      	mov	r3, r7
   17268:	4632      	mov	r2, r6
   1726a:	4629      	mov	r1, r5
   1726c:	4620      	mov	r0, r4
   1726e:	46f4      	mov	ip, lr
   17270:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17274:	4760      	bx	ip
   17276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1727a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1727e:	bf00      	nop

00017280 <nrf_recv>:
   17280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17284:	b082      	sub	sp, #8
   17286:	460e      	mov	r6, r1
   17288:	4617      	mov	r7, r2
   1728a:	4698      	mov	r8, r3
   1728c:	4605      	mov	r5, r0
   1728e:	f7fd fcb5 	bl	14bfc <bsd_platform_fd_method_table_get>
   17292:	b160      	cbz	r0, 172ae <nrf_recv+0x2e>
   17294:	4604      	mov	r4, r0
   17296:	2000      	movs	r0, #0
   17298:	e9cd 0000 	strd	r0, r0, [sp]
   1729c:	4643      	mov	r3, r8
   1729e:	463a      	mov	r2, r7
   172a0:	4631      	mov	r1, r6
   172a2:	4628      	mov	r0, r5
   172a4:	68e4      	ldr	r4, [r4, #12]
   172a6:	47a0      	blx	r4
   172a8:	b002      	add	sp, #8
   172aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   172ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172b2:	e7f9      	b.n	172a8 <nrf_recv+0x28>

000172b4 <nrf_connect>:
   172b4:	b570      	push	{r4, r5, r6, lr}
   172b6:	460d      	mov	r5, r1
   172b8:	4616      	mov	r6, r2
   172ba:	4604      	mov	r4, r0
   172bc:	f7fd fc9e 	bl	14bfc <bsd_platform_fd_method_table_get>
   172c0:	b130      	cbz	r0, 172d0 <nrf_connect+0x1c>
   172c2:	6943      	ldr	r3, [r0, #20]
   172c4:	4632      	mov	r2, r6
   172c6:	4629      	mov	r1, r5
   172c8:	4620      	mov	r0, r4
   172ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172ce:	4718      	bx	r3
   172d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172d4:	bd70      	pop	{r4, r5, r6, pc}
   172d6:	bf00      	nop

000172d8 <nrf_listen>:
   172d8:	b570      	push	{r4, r5, r6, lr}
   172da:	460d      	mov	r5, r1
   172dc:	4604      	mov	r4, r0
   172de:	f7fd fc8d 	bl	14bfc <bsd_platform_fd_method_table_get>
   172e2:	b128      	cbz	r0, 172f0 <nrf_listen+0x18>
   172e4:	6983      	ldr	r3, [r0, #24]
   172e6:	4629      	mov	r1, r5
   172e8:	4620      	mov	r0, r4
   172ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172ee:	4718      	bx	r3
   172f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   172f4:	bd70      	pop	{r4, r5, r6, pc}
   172f6:	bf00      	nop

000172f8 <nrf_accept>:
   172f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172fc:	460d      	mov	r5, r1
   172fe:	4616      	mov	r6, r2
   17300:	4604      	mov	r4, r0
   17302:	f7fd fc7b 	bl	14bfc <bsd_platform_fd_method_table_get>
   17306:	b140      	cbz	r0, 1731a <nrf_accept+0x22>
   17308:	69c7      	ldr	r7, [r0, #28]
   1730a:	4632      	mov	r2, r6
   1730c:	4629      	mov	r1, r5
   1730e:	4620      	mov	r0, r4
   17310:	46bc      	mov	ip, r7
   17312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17316:	2300      	movs	r3, #0
   17318:	4760      	bx	ip
   1731a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1731e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17322:	bf00      	nop

00017324 <nrf_bind>:
   17324:	b570      	push	{r4, r5, r6, lr}
   17326:	460d      	mov	r5, r1
   17328:	4616      	mov	r6, r2
   1732a:	4604      	mov	r4, r0
   1732c:	f7fd fc66 	bl	14bfc <bsd_platform_fd_method_table_get>
   17330:	b130      	cbz	r0, 17340 <nrf_bind+0x1c>
   17332:	6903      	ldr	r3, [r0, #16]
   17334:	4632      	mov	r2, r6
   17336:	4629      	mov	r1, r5
   17338:	4620      	mov	r0, r4
   1733a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1733e:	4718      	bx	r3
   17340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17344:	bd70      	pop	{r4, r5, r6, pc}
   17346:	bf00      	nop

00017348 <nrf_setsockopt>:
   17348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1734c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17350:	460d      	mov	r5, r1
   17352:	4616      	mov	r6, r2
   17354:	461f      	mov	r7, r3
   17356:	4604      	mov	r4, r0
   17358:	f7fd fc50 	bl	14bfc <bsd_platform_fd_method_table_get>
   1735c:	b158      	cbz	r0, 17376 <nrf_setsockopt+0x2e>
   1735e:	f8cd 8018 	str.w	r8, [sp, #24]
   17362:	f8d0 e020 	ldr.w	lr, [r0, #32]
   17366:	463b      	mov	r3, r7
   17368:	4632      	mov	r2, r6
   1736a:	4629      	mov	r1, r5
   1736c:	4620      	mov	r0, r4
   1736e:	46f4      	mov	ip, lr
   17370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17374:	4760      	bx	ip
   17376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1737a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1737e:	bf00      	nop

00017380 <nrf_getsockopt>:
   17380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17384:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17388:	460d      	mov	r5, r1
   1738a:	4616      	mov	r6, r2
   1738c:	461f      	mov	r7, r3
   1738e:	4604      	mov	r4, r0
   17390:	f7fd fc34 	bl	14bfc <bsd_platform_fd_method_table_get>
   17394:	b158      	cbz	r0, 173ae <nrf_getsockopt+0x2e>
   17396:	f8cd 8018 	str.w	r8, [sp, #24]
   1739a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1739e:	463b      	mov	r3, r7
   173a0:	4632      	mov	r2, r6
   173a2:	4629      	mov	r1, r5
   173a4:	4620      	mov	r0, r4
   173a6:	46f4      	mov	ip, lr
   173a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   173ac:	4760      	bx	ip
   173ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   173b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   173b6:	bf00      	nop

000173b8 <nrf_getaddrinfo>:
   173b8:	f7fd bc90 	b.w	14cdc <bsd_platform_getaddrinfo>

000173bc <nrf_freeaddrinfo>:
   173bc:	f7fd bc90 	b.w	14ce0 <bsd_platform_freeaddrinfo>

000173c0 <nrf_poll>:
   173c0:	f7fd bc90 	b.w	14ce4 <bsd_platform_poll>

000173c4 <nrf_fcntl>:
   173c4:	f7fd bce8 	b.w	14d98 <bsd_platform_fcntl>

000173c8 <at_client_evt_handler>:
   173c8:	b120      	cbz	r0, 173d4 <at_client_evt_handler+0xc>
   173ca:	f850 1b08 	ldr.w	r1, [r0], #8
   173ce:	0c09      	lsrs	r1, r1, #16
   173d0:	f7fb bf4a 	b.w	13268 <rpc_at_event_handler>
   173d4:	4770      	bx	lr
   173d6:	bf00      	nop

000173d8 <rpc_at_client_init>:
   173d8:	4801      	ldr	r0, [pc, #4]	; (173e0 <rpc_at_client_init+0x8>)
   173da:	f001 bdcf 	b.w	18f7c <rpc_client_register>
   173de:	bf00      	nop
   173e0:	0001f864 	.word	0x0001f864

000173e4 <rpc_at_client_request_alloc>:
   173e4:	b180      	cbz	r0, 17408 <rpc_at_client_request_alloc+0x24>
   173e6:	2300      	movs	r3, #0
   173e8:	b510      	push	{r4, lr}
   173ea:	b082      	sub	sp, #8
   173ec:	aa02      	add	r2, sp, #8
   173ee:	4604      	mov	r4, r0
   173f0:	f842 3d04 	str.w	r3, [r2, #-4]!
   173f4:	2003      	movs	r0, #3
   173f6:	f001 fff9 	bl	193ec <rpc_message_alloc>
   173fa:	b918      	cbnz	r0, 17404 <rpc_at_client_request_alloc+0x20>
   173fc:	9b01      	ldr	r3, [sp, #4]
   173fe:	b10b      	cbz	r3, 17404 <rpc_at_client_request_alloc+0x20>
   17400:	3308      	adds	r3, #8
   17402:	6023      	str	r3, [r4, #0]
   17404:	b002      	add	sp, #8
   17406:	bd10      	pop	{r4, pc}
   17408:	200e      	movs	r0, #14
   1740a:	4770      	bx	lr

0001740c <rpc_at_client_request_send>:
   1740c:	b150      	cbz	r0, 17424 <rpc_at_client_request_send+0x18>
   1740e:	4603      	mov	r3, r0
   17410:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   17414:	2003      	movs	r0, #3
   17416:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1741a:	f843 1d08 	str.w	r1, [r3, #-8]!
   1741e:	4619      	mov	r1, r3
   17420:	f001 bfcc 	b.w	193bc <rpc_message_send>
   17424:	200e      	movs	r0, #14
   17426:	4770      	bx	lr

00017428 <rpc_at_client_message_free>:
   17428:	b120      	cbz	r0, 17434 <rpc_at_client_message_free+0xc>
   1742a:	f1a0 0108 	sub.w	r1, r0, #8
   1742e:	2003      	movs	r0, #3
   17430:	f002 b80e 	b.w	19450 <rpc_message_free>
   17434:	200e      	movs	r0, #14
   17436:	4770      	bx	lr

00017438 <rpc_at_client_data_free>:
   17438:	b118      	cbz	r0, 17442 <rpc_at_client_data_free+0xa>
   1743a:	4601      	mov	r1, r0
   1743c:	2003      	movs	r0, #3
   1743e:	f002 b919 	b.w	19674 <rpc_message_data_free>
   17442:	200e      	movs	r0, #14
   17444:	4770      	bx	lr
   17446:	bf00      	nop

00017448 <ip_recvd_packet_free_cb>:
   17448:	b510      	push	{r4, lr}
   1744a:	4604      	mov	r4, r0
   1744c:	6800      	ldr	r0, [r0, #0]
   1744e:	f7fc fbc9 	bl	13be4 <rpc_ip_client_data_free>
   17452:	68a0      	ldr	r0, [r4, #8]
   17454:	b118      	cbz	r0, 1745e <ip_recvd_packet_free_cb+0x16>
   17456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1745a:	f7fc bb63 	b.w	13b24 <nrf_free>
   1745e:	bd10      	pop	{r4, pc}

00017460 <rpc_error_to_nrf_bsd_error>:
   17460:	2810      	cmp	r0, #16
   17462:	bf9a      	itte	ls
   17464:	4b02      	ldrls	r3, [pc, #8]	; (17470 <rpc_error_to_nrf_bsd_error+0x10>)
   17466:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1746a:	202d      	movhi	r0, #45	; 0x2d
   1746c:	4770      	bx	lr
   1746e:	bf00      	nop
   17470:	0001f874 	.word	0x0001f874

00017474 <ip_interface_request_create>:
   17474:	b570      	push	{r4, r5, r6, lr}
   17476:	2500      	movs	r5, #0
   17478:	b082      	sub	sp, #8
   1747a:	ac02      	add	r4, sp, #8
   1747c:	f844 5d04 	str.w	r5, [r4, #-4]!
   17480:	4606      	mov	r6, r0
   17482:	460d      	mov	r5, r1
   17484:	4620      	mov	r0, r4
   17486:	4619      	mov	r1, r3
   17488:	4614      	mov	r4, r2
   1748a:	f7fc fb79 	bl	13b80 <rpc_ip_client_request_alloc>
   1748e:	b960      	cbnz	r0, 174aa <ip_interface_request_create+0x36>
   17490:	9b01      	ldr	r3, [sp, #4]
   17492:	2208      	movs	r2, #8
   17494:	7258      	strb	r0, [r3, #9]
   17496:	7298      	strb	r0, [r3, #10]
   17498:	72d8      	strb	r0, [r3, #11]
   1749a:	4618      	mov	r0, r3
   1749c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   174a0:	60dc      	str	r4, [r3, #12]
   174a2:	611d      	str	r5, [r3, #16]
   174a4:	721a      	strb	r2, [r3, #8]
   174a6:	b002      	add	sp, #8
   174a8:	bd70      	pop	{r4, r5, r6, pc}
   174aa:	9b01      	ldr	r3, [sp, #4]
   174ac:	4618      	mov	r0, r3
   174ae:	b002      	add	sp, #8
   174b0:	bd70      	pop	{r4, r5, r6, pc}
   174b2:	bf00      	nop

000174b4 <ip_interface_request_send>:
   174b4:	b570      	push	{r4, r5, r6, lr}
   174b6:	460c      	mov	r4, r1
   174b8:	4605      	mov	r5, r0
   174ba:	4611      	mov	r1, r2
   174bc:	4620      	mov	r0, r4
   174be:	461e      	mov	r6, r3
   174c0:	f7fc fb72 	bl	13ba8 <rpc_ip_client_request_send>
   174c4:	b900      	cbnz	r0, 174c8 <ip_interface_request_send+0x14>
   174c6:	bd70      	pop	{r4, r5, r6, pc}
   174c8:	6820      	ldr	r0, [r4, #0]
   174ca:	b108      	cbz	r0, 174d0 <ip_interface_request_send+0x1c>
   174cc:	f7fc fb8a 	bl	13be4 <rpc_ip_client_data_free>
   174d0:	4620      	mov	r0, r4
   174d2:	f7fc fb7f 	bl	13bd4 <rpc_ip_client_message_free>
   174d6:	602e      	str	r6, [r5, #0]
   174d8:	2023      	movs	r0, #35	; 0x23
   174da:	bd70      	pop	{r4, r5, r6, pc}

000174dc <ip_interface_wait>:
   174dc:	b538      	push	{r3, r4, r5, lr}
   174de:	4605      	mov	r5, r0
   174e0:	f001 fb82 	bl	18be8 <interface_socket_wait>
   174e4:	4604      	mov	r4, r0
   174e6:	b108      	cbz	r0, 174ec <ip_interface_wait+0x10>
   174e8:	4620      	mov	r0, r4
   174ea:	bd38      	pop	{r3, r4, r5, pc}
   174ec:	4628      	mov	r0, r5
   174ee:	f001 fbe7 	bl	18cc0 <interface_socket_from_handle_get>
   174f2:	2800      	cmp	r0, #0
   174f4:	d0f8      	beq.n	174e8 <ip_interface_wait+0xc>
   174f6:	6844      	ldr	r4, [r0, #4]
   174f8:	2c00      	cmp	r4, #0
   174fa:	d0f5      	beq.n	174e8 <ip_interface_wait+0xc>
   174fc:	2300      	movs	r3, #0
   174fe:	6043      	str	r3, [r0, #4]
   17500:	4620      	mov	r0, r4
   17502:	bd38      	pop	{r3, r4, r5, pc}

00017504 <ip_interface_init>:
   17504:	b538      	push	{r3, r4, r5, lr}
   17506:	2300      	movs	r3, #0
   17508:	4d07      	ldr	r5, [pc, #28]	; (17528 <ip_interface_init+0x24>)
   1750a:	4c08      	ldr	r4, [pc, #32]	; (1752c <ip_interface_init+0x28>)
   1750c:	4619      	mov	r1, r3
   1750e:	2220      	movs	r2, #32
   17510:	4807      	ldr	r0, [pc, #28]	; (17530 <ip_interface_init+0x2c>)
   17512:	602b      	str	r3, [r5, #0]
   17514:	6023      	str	r3, [r4, #0]
   17516:	f006 f8c8 	bl	1d6aa <memset>
   1751a:	f7fc fb2b 	bl	13b74 <rpc_ip_client_init>
   1751e:	3000      	adds	r0, #0
   17520:	bf18      	it	ne
   17522:	2001      	movne	r0, #1
   17524:	4240      	negs	r0, r0
   17526:	bd38      	pop	{r3, r4, r5, pc}
   17528:	20020954 	.word	0x20020954
   1752c:	20020950 	.word	0x20020950
   17530:	2002095c 	.word	0x2002095c

00017534 <ip_interface_open>:
   17534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17538:	4606      	mov	r6, r0
   1753a:	2000      	movs	r0, #0
   1753c:	f026 0308 	bic.w	r3, r6, #8
   17540:	b082      	sub	sp, #8
   17542:	2b02      	cmp	r3, #2
   17544:	460c      	mov	r4, r1
   17546:	4617      	mov	r7, r2
   17548:	9000      	str	r0, [sp, #0]
   1754a:	d002      	beq.n	17552 <ip_interface_open+0x1e>
   1754c:	2e05      	cmp	r6, #5
   1754e:	f040 8084 	bne.w	1765a <ip_interface_open+0x126>
   17552:	1e63      	subs	r3, r4, #1
   17554:	2b02      	cmp	r3, #2
   17556:	d85c      	bhi.n	17612 <ip_interface_open+0xde>
   17558:	2f00      	cmp	r7, #0
   1755a:	d154      	bne.n	17606 <ip_interface_open+0xd2>
   1755c:	2c01      	cmp	r4, #1
   1755e:	d067      	beq.n	17630 <ip_interface_open+0xfc>
   17560:	2c03      	cmp	r4, #3
   17562:	bf18      	it	ne
   17564:	2702      	movne	r7, #2
   17566:	4a48      	ldr	r2, [pc, #288]	; (17688 <ip_interface_open+0x154>)
   17568:	4621      	mov	r1, r4
   1756a:	4668      	mov	r0, sp
   1756c:	f001 fa98 	bl	18aa0 <interface_socket_allocate>
   17570:	9b00      	ldr	r3, [sp, #0]
   17572:	4680      	mov	r8, r0
   17574:	2b00      	cmp	r3, #0
   17576:	d059      	beq.n	1762c <ip_interface_open+0xf8>
   17578:	2100      	movs	r1, #0
   1757a:	a802      	add	r0, sp, #8
   1757c:	f840 1d04 	str.w	r1, [r0, #-4]!
   17580:	e9c3 6403 	strd	r6, r4, [r3, #12]
   17584:	615f      	str	r7, [r3, #20]
   17586:	f7fc fafb 	bl	13b80 <rpc_ip_client_request_alloc>
   1758a:	2800      	cmp	r0, #0
   1758c:	d14b      	bne.n	17626 <ip_interface_open+0xf2>
   1758e:	f247 0201 	movw	r2, #28673	; 0x7001
   17592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17596:	2108      	movs	r1, #8
   17598:	9d01      	ldr	r5, [sp, #4]
   1759a:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   1759e:	60ea      	str	r2, [r5, #12]
   175a0:	7268      	strb	r0, [r5, #9]
   175a2:	72a8      	strb	r0, [r5, #10]
   175a4:	72e8      	strb	r0, [r5, #11]
   175a6:	7229      	strb	r1, [r5, #8]
   175a8:	742b      	strb	r3, [r5, #16]
   175aa:	746b      	strb	r3, [r5, #17]
   175ac:	74ab      	strb	r3, [r5, #18]
   175ae:	74eb      	strb	r3, [r5, #19]
   175b0:	68ab      	ldr	r3, [r5, #8]
   175b2:	2e05      	cmp	r6, #5
   175b4:	f103 030c 	add.w	r3, r3, #12
   175b8:	60ab      	str	r3, [r5, #8]
   175ba:	d003      	beq.n	175c4 <ip_interface_open+0x90>
   175bc:	2e0a      	cmp	r6, #10
   175be:	bf14      	ite	ne
   175c0:	2601      	movne	r6, #1
   175c2:	2602      	moveq	r6, #2
   175c4:	616e      	str	r6, [r5, #20]
   175c6:	61ef      	str	r7, [r5, #28]
   175c8:	61ac      	str	r4, [r5, #24]
   175ca:	f247 0101 	movw	r1, #28673	; 0x7001
   175ce:	4628      	mov	r0, r5
   175d0:	9f00      	ldr	r7, [sp, #0]
   175d2:	f7fc fae9 	bl	13ba8 <rpc_ip_client_request_send>
   175d6:	4606      	mov	r6, r0
   175d8:	b360      	cbz	r0, 17634 <ip_interface_open+0x100>
   175da:	6828      	ldr	r0, [r5, #0]
   175dc:	b108      	cbz	r0, 175e2 <ip_interface_open+0xae>
   175de:	f7fc fb01 	bl	13be4 <rpc_ip_client_data_free>
   175e2:	4628      	mov	r0, r5
   175e4:	f7fc faf6 	bl	13bd4 <rpc_ip_client_message_free>
   175e8:	2301      	movs	r3, #1
   175ea:	2523      	movs	r5, #35	; 0x23
   175ec:	603b      	str	r3, [r7, #0]
   175ee:	4640      	mov	r0, r8
   175f0:	f001 faac 	bl	18b4c <interface_socket_free>
   175f4:	4628      	mov	r0, r5
   175f6:	f7fa f9e5 	bl	119c4 <bsd_os_errno_set>
   175fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   175fe:	4640      	mov	r0, r8
   17600:	b002      	add	sp, #8
   17602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17606:	2c01      	cmp	r4, #1
   17608:	d009      	beq.n	1761e <ip_interface_open+0xea>
   1760a:	2c02      	cmp	r4, #2
   1760c:	d109      	bne.n	17622 <ip_interface_open+0xee>
   1760e:	2f02      	cmp	r7, #2
   17610:	d0a9      	beq.n	17566 <ip_interface_open+0x32>
   17612:	2016      	movs	r0, #22
   17614:	f7fa f9d6 	bl	119c4 <bsd_os_errno_set>
   17618:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1761c:	e7ef      	b.n	175fe <ip_interface_open+0xca>
   1761e:	2f01      	cmp	r7, #1
   17620:	d1f7      	bne.n	17612 <ip_interface_open+0xde>
   17622:	2702      	movs	r7, #2
   17624:	e79f      	b.n	17566 <ip_interface_open+0x32>
   17626:	9d01      	ldr	r5, [sp, #4]
   17628:	2d00      	cmp	r5, #0
   1762a:	d1c1      	bne.n	175b0 <ip_interface_open+0x7c>
   1762c:	250c      	movs	r5, #12
   1762e:	e7de      	b.n	175ee <ip_interface_open+0xba>
   17630:	4627      	mov	r7, r4
   17632:	e798      	b.n	17566 <ip_interface_open+0x32>
   17634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17638:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1763c:	2102      	movs	r1, #2
   1763e:	4640      	mov	r0, r8
   17640:	f001 fad2 	bl	18be8 <interface_socket_wait>
   17644:	4605      	mov	r5, r0
   17646:	2800      	cmp	r0, #0
   17648:	d1d1      	bne.n	175ee <ip_interface_open+0xba>
   1764a:	4640      	mov	r0, r8
   1764c:	f001 fb38 	bl	18cc0 <interface_socket_from_handle_get>
   17650:	b148      	cbz	r0, 17666 <ip_interface_open+0x132>
   17652:	6845      	ldr	r5, [r0, #4]
   17654:	b13d      	cbz	r5, 17666 <ip_interface_open+0x132>
   17656:	6046      	str	r6, [r0, #4]
   17658:	e7c9      	b.n	175ee <ip_interface_open+0xba>
   1765a:	202f      	movs	r0, #47	; 0x2f
   1765c:	f7fa f9b2 	bl	119c4 <bsd_os_errno_set>
   17660:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17664:	e7cb      	b.n	175fe <ip_interface_open+0xca>
   17666:	3c02      	subs	r4, #2
   17668:	2c01      	cmp	r4, #1
   1766a:	d8c8      	bhi.n	175fe <ip_interface_open+0xca>
   1766c:	4640      	mov	r0, r8
   1766e:	9b00      	ldr	r3, [sp, #0]
   17670:	681a      	ldr	r2, [r3, #0]
   17672:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   17676:	601a      	str	r2, [r3, #0]
   17678:	681a      	ldr	r2, [r3, #0]
   1767a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1767e:	601a      	str	r2, [r3, #0]
   17680:	b002      	add	sp, #8
   17682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17686:	bf00      	nop
   17688:	00017449 	.word	0x00017449

0001768c <ip_interface_close>:
   1768c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17690:	b082      	sub	sp, #8
   17692:	4606      	mov	r6, r0
   17694:	f001 fb14 	bl	18cc0 <interface_socket_from_handle_get>
   17698:	2800      	cmp	r0, #0
   1769a:	d063      	beq.n	17764 <ip_interface_close+0xd8>
   1769c:	4604      	mov	r4, r0
   1769e:	2100      	movs	r1, #0
   176a0:	a802      	add	r0, sp, #8
   176a2:	6827      	ldr	r7, [r4, #0]
   176a4:	f840 1d04 	str.w	r1, [r0, #-4]!
   176a8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   176ac:	f7fc fa68 	bl	13b80 <rpc_ip_client_request_alloc>
   176b0:	2800      	cmp	r0, #0
   176b2:	d13a      	bne.n	1772a <ip_interface_close+0x9e>
   176b4:	f247 0309 	movw	r3, #28681	; 0x7009
   176b8:	2208      	movs	r2, #8
   176ba:	9d01      	ldr	r5, [sp, #4]
   176bc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   176c0:	60eb      	str	r3, [r5, #12]
   176c2:	f8c5 8010 	str.w	r8, [r5, #16]
   176c6:	7268      	strb	r0, [r5, #9]
   176c8:	72a8      	strb	r0, [r5, #10]
   176ca:	72e8      	strb	r0, [r5, #11]
   176cc:	722a      	strb	r2, [r5, #8]
   176ce:	6823      	ldr	r3, [r4, #0]
   176d0:	f247 0109 	movw	r1, #28681	; 0x7009
   176d4:	0c1b      	lsrs	r3, r3, #16
   176d6:	041b      	lsls	r3, r3, #16
   176d8:	f043 030d 	orr.w	r3, r3, #13
   176dc:	6023      	str	r3, [r4, #0]
   176de:	6823      	ldr	r3, [r4, #0]
   176e0:	4628      	mov	r0, r5
   176e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   176e6:	6023      	str	r3, [r4, #0]
   176e8:	6823      	ldr	r3, [r4, #0]
   176ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   176ee:	6023      	str	r3, [r4, #0]
   176f0:	f7fc fa5a 	bl	13ba8 <rpc_ip_client_request_send>
   176f4:	bb40      	cbnz	r0, 17748 <ip_interface_close+0xbc>
   176f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   176fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   176fe:	210e      	movs	r1, #14
   17700:	4630      	mov	r0, r6
   17702:	f001 fa71 	bl	18be8 <interface_socket_wait>
   17706:	4604      	mov	r4, r0
   17708:	b1a0      	cbz	r0, 17734 <ip_interface_close+0xa8>
   1770a:	4c17      	ldr	r4, [pc, #92]	; (17768 <ip_interface_close+0xdc>)
   1770c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   17710:	b120      	cbz	r0, 1771c <ip_interface_close+0x90>
   17712:	f7fc fa5f 	bl	13bd4 <rpc_ip_client_message_free>
   17716:	2300      	movs	r3, #0
   17718:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1771c:	4630      	mov	r0, r6
   1771e:	f001 fa15 	bl	18b4c <interface_socket_free>
   17722:	2000      	movs	r0, #0
   17724:	b002      	add	sp, #8
   17726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1772a:	9d01      	ldr	r5, [sp, #4]
   1772c:	200c      	movs	r0, #12
   1772e:	2d00      	cmp	r5, #0
   17730:	d1cd      	bne.n	176ce <ip_interface_close+0x42>
   17732:	e012      	b.n	1775a <ip_interface_close+0xce>
   17734:	4630      	mov	r0, r6
   17736:	f001 fac3 	bl	18cc0 <interface_socket_from_handle_get>
   1773a:	2800      	cmp	r0, #0
   1773c:	d0e5      	beq.n	1770a <ip_interface_close+0x7e>
   1773e:	6843      	ldr	r3, [r0, #4]
   17740:	2b00      	cmp	r3, #0
   17742:	d0e2      	beq.n	1770a <ip_interface_close+0x7e>
   17744:	6044      	str	r4, [r0, #4]
   17746:	e7e0      	b.n	1770a <ip_interface_close+0x7e>
   17748:	6828      	ldr	r0, [r5, #0]
   1774a:	b108      	cbz	r0, 17750 <ip_interface_close+0xc4>
   1774c:	f7fc fa4a 	bl	13be4 <rpc_ip_client_data_free>
   17750:	4628      	mov	r0, r5
   17752:	f7fc fa3f 	bl	13bd4 <rpc_ip_client_message_free>
   17756:	2023      	movs	r0, #35	; 0x23
   17758:	6027      	str	r7, [r4, #0]
   1775a:	f7fa f933 	bl	119c4 <bsd_os_errno_set>
   1775e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17762:	e7df      	b.n	17724 <ip_interface_close+0x98>
   17764:	2009      	movs	r0, #9
   17766:	e7f8      	b.n	1775a <ip_interface_close+0xce>
   17768:	2002095c 	.word	0x2002095c

0001776c <ip_interface_sendto>:
   1776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17770:	2500      	movs	r5, #0
   17772:	b089      	sub	sp, #36	; 0x24
   17774:	9103      	str	r1, [sp, #12]
   17776:	4614      	mov	r4, r2
   17778:	9301      	str	r3, [sp, #4]
   1777a:	9507      	str	r5, [sp, #28]
   1777c:	4607      	mov	r7, r0
   1777e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   17780:	f001 fa9e 	bl	18cc0 <interface_socket_from_handle_get>
   17784:	2800      	cmp	r0, #0
   17786:	f000 8124 	beq.w	179d2 <ip_interface_sendto+0x266>
   1778a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1778e:	f300 8118 	bgt.w	179c2 <ip_interface_sendto+0x256>
   17792:	6903      	ldr	r3, [r0, #16]
   17794:	4605      	mov	r5, r0
   17796:	2b01      	cmp	r3, #1
   17798:	f000 80d1 	beq.w	1793e <ip_interface_sendto+0x1d2>
   1779c:	682a      	ldr	r2, [r5, #0]
   1779e:	0390      	lsls	r0, r2, #14
   177a0:	d423      	bmi.n	177ea <ip_interface_sendto+0x7e>
   177a2:	682a      	ldr	r2, [r5, #0]
   177a4:	0091      	lsls	r1, r2, #2
   177a6:	d406      	bmi.n	177b6 <ip_interface_sendto+0x4a>
   177a8:	2b01      	cmp	r3, #1
   177aa:	f000 80ed 	beq.w	17988 <ip_interface_sendto+0x21c>
   177ae:	682b      	ldr	r3, [r5, #0]
   177b0:	031a      	lsls	r2, r3, #12
   177b2:	f140 8102 	bpl.w	179ba <ip_interface_sendto+0x24e>
   177b6:	682b      	ldr	r3, [r5, #0]
   177b8:	031b      	lsls	r3, r3, #12
   177ba:	f140 8106 	bpl.w	179ca <ip_interface_sendto+0x25e>
   177be:	68a8      	ldr	r0, [r5, #8]
   177c0:	f8df 9218 	ldr.w	r9, [pc, #536]	; 179dc <ip_interface_sendto+0x270>
   177c4:	2800      	cmp	r0, #0
   177c6:	f040 8096 	bne.w	178f6 <ip_interface_sendto+0x18a>
   177ca:	682b      	ldr	r3, [r5, #0]
   177cc:	0118      	lsls	r0, r3, #4
   177ce:	f140 8082 	bpl.w	178d6 <ip_interface_sendto+0x16a>
   177d2:	682b      	ldr	r3, [r5, #0]
   177d4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   177d8:	602b      	str	r3, [r5, #0]
   177da:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   177de:	2800      	cmp	r0, #0
   177e0:	d17c      	bne.n	178dc <ip_interface_sendto+0x170>
   177e2:	4620      	mov	r0, r4
   177e4:	b009      	add	sp, #36	; 0x24
   177e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177ea:	f247 0806 	movw	r8, #28678	; 0x7006
   177ee:	f04f 0a0c 	mov.w	sl, #12
   177f2:	043b      	lsls	r3, r7, #16
   177f4:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 179dc <ip_interface_sendto+0x270>
   177f8:	9304      	str	r3, [sp, #16]
   177fa:	4621      	mov	r1, r4
   177fc:	a807      	add	r0, sp, #28
   177fe:	f7fc f9bf 	bl	13b80 <rpc_ip_client_request_alloc>
   17802:	2804      	cmp	r0, #4
   17804:	d0f9      	beq.n	177fa <ip_interface_sendto+0x8e>
   17806:	2800      	cmp	r0, #0
   17808:	d171      	bne.n	178ee <ip_interface_sendto+0x182>
   1780a:	9b07      	ldr	r3, [sp, #28]
   1780c:	f883 a008 	strb.w	sl, [r3, #8]
   17810:	7258      	strb	r0, [r3, #9]
   17812:	7298      	strb	r0, [r3, #10]
   17814:	72d8      	strb	r0, [r3, #11]
   17816:	b33e      	cbz	r6, 17868 <ip_interface_sendto+0xfc>
   17818:	68ea      	ldr	r2, [r5, #12]
   1781a:	6871      	ldr	r1, [r6, #4]
   1781c:	428a      	cmp	r2, r1
   1781e:	d10a      	bne.n	17836 <ip_interface_sendto+0xca>
   17820:	2a02      	cmp	r2, #2
   17822:	f103 001c 	add.w	r0, r3, #28
   17826:	7831      	ldrb	r1, [r6, #0]
   17828:	f000 8090 	beq.w	1794c <ip_interface_sendto+0x1e0>
   1782c:	2a0a      	cmp	r2, #10
   1782e:	d102      	bne.n	17836 <ip_interface_sendto+0xca>
   17830:	2924      	cmp	r1, #36	; 0x24
   17832:	f000 80af 	beq.w	17994 <ip_interface_sendto+0x228>
   17836:	6818      	ldr	r0, [r3, #0]
   17838:	b110      	cbz	r0, 17840 <ip_interface_sendto+0xd4>
   1783a:	f7fc f9d3 	bl	13be4 <rpc_ip_client_data_free>
   1783e:	9b07      	ldr	r3, [sp, #28]
   17840:	4618      	mov	r0, r3
   17842:	f7fc f9c7 	bl	13bd4 <rpc_ip_client_message_free>
   17846:	2016      	movs	r0, #22
   17848:	682b      	ldr	r3, [r5, #0]
   1784a:	031a      	lsls	r2, r3, #12
   1784c:	d453      	bmi.n	178f6 <ip_interface_sendto+0x18a>
   1784e:	682b      	ldr	r3, [r5, #0]
   17850:	b29b      	uxth	r3, r3
   17852:	2b0d      	cmp	r3, #13
   17854:	d0b6      	beq.n	177c4 <ip_interface_sendto+0x58>
   17856:	682b      	ldr	r3, [r5, #0]
   17858:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1785c:	602b      	str	r3, [r5, #0]
   1785e:	682b      	ldr	r3, [r5, #0]
   17860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17864:	602b      	str	r3, [r5, #0]
   17866:	e7ad      	b.n	177c4 <ip_interface_sendto+0x58>
   17868:	4642      	mov	r2, r8
   1786a:	9901      	ldr	r1, [sp, #4]
   1786c:	6159      	str	r1, [r3, #20]
   1786e:	69a9      	ldr	r1, [r5, #24]
   17870:	9804      	ldr	r0, [sp, #16]
   17872:	6119      	str	r1, [r3, #16]
   17874:	9903      	ldr	r1, [sp, #12]
   17876:	4302      	orrs	r2, r0
   17878:	60da      	str	r2, [r3, #12]
   1787a:	605c      	str	r4, [r3, #4]
   1787c:	b119      	cbz	r1, 17886 <ip_interface_sendto+0x11a>
   1787e:	6818      	ldr	r0, [r3, #0]
   17880:	4622      	mov	r2, r4
   17882:	f005 fee8 	bl	1d656 <memcpy>
   17886:	682b      	ldr	r3, [r5, #0]
   17888:	4641      	mov	r1, r8
   1788a:	9305      	str	r3, [sp, #20]
   1788c:	682b      	ldr	r3, [r5, #0]
   1788e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17892:	602b      	str	r3, [r5, #0]
   17894:	682b      	ldr	r3, [r5, #0]
   17896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1789a:	602b      	str	r3, [r5, #0]
   1789c:	9b07      	ldr	r3, [sp, #28]
   1789e:	4618      	mov	r0, r3
   178a0:	9302      	str	r3, [sp, #8]
   178a2:	f7fc f981 	bl	13ba8 <rpc_ip_client_request_send>
   178a6:	9b02      	ldr	r3, [sp, #8]
   178a8:	4683      	mov	fp, r0
   178aa:	bb58      	cbnz	r0, 17904 <ip_interface_sendto+0x198>
   178ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   178b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   178b4:	4611      	mov	r1, r2
   178b6:	4638      	mov	r0, r7
   178b8:	f001 f996 	bl	18be8 <interface_socket_wait>
   178bc:	b370      	cbz	r0, 1791c <ip_interface_sendto+0x1b0>
   178be:	682b      	ldr	r3, [r5, #0]
   178c0:	0319      	lsls	r1, r3, #12
   178c2:	d437      	bmi.n	17934 <ip_interface_sendto+0x1c8>
   178c4:	280c      	cmp	r0, #12
   178c6:	d1bf      	bne.n	17848 <ip_interface_sendto+0xdc>
   178c8:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   178cc:	2800      	cmp	r0, #0
   178ce:	d094      	beq.n	177fa <ip_interface_sendto+0x8e>
   178d0:	f7fc f980 	bl	13bd4 <rpc_ip_client_message_free>
   178d4:	e791      	b.n	177fa <ip_interface_sendto+0x8e>
   178d6:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   178da:	6984      	ldr	r4, [r0, #24]
   178dc:	f7fc f97a 	bl	13bd4 <rpc_ip_client_message_free>
   178e0:	2300      	movs	r3, #0
   178e2:	4620      	mov	r0, r4
   178e4:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   178e8:	b009      	add	sp, #36	; 0x24
   178ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178ee:	682b      	ldr	r3, [r5, #0]
   178f0:	200c      	movs	r0, #12
   178f2:	031a      	lsls	r2, r3, #12
   178f4:	d5ab      	bpl.n	1784e <ip_interface_sendto+0xe2>
   178f6:	f7fa f865 	bl	119c4 <bsd_os_errno_set>
   178fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   178fe:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   17902:	e76c      	b.n	177de <ip_interface_sendto+0x72>
   17904:	6818      	ldr	r0, [r3, #0]
   17906:	469b      	mov	fp, r3
   17908:	b108      	cbz	r0, 1790e <ip_interface_sendto+0x1a2>
   1790a:	f7fc f96b 	bl	13be4 <rpc_ip_client_data_free>
   1790e:	4658      	mov	r0, fp
   17910:	f7fc f960 	bl	13bd4 <rpc_ip_client_message_free>
   17914:	9b05      	ldr	r3, [sp, #20]
   17916:	2023      	movs	r0, #35	; 0x23
   17918:	602b      	str	r3, [r5, #0]
   1791a:	e795      	b.n	17848 <ip_interface_sendto+0xdc>
   1791c:	4638      	mov	r0, r7
   1791e:	f001 f9cf 	bl	18cc0 <interface_socket_from_handle_get>
   17922:	4603      	mov	r3, r0
   17924:	b1f0      	cbz	r0, 17964 <ip_interface_sendto+0x1f8>
   17926:	6840      	ldr	r0, [r0, #4]
   17928:	b1e0      	cbz	r0, 17964 <ip_interface_sendto+0x1f8>
   1792a:	f8c3 b004 	str.w	fp, [r3, #4]
   1792e:	682b      	ldr	r3, [r5, #0]
   17930:	0319      	lsls	r1, r3, #12
   17932:	d5c7      	bpl.n	178c4 <ip_interface_sendto+0x158>
   17934:	68a8      	ldr	r0, [r5, #8]
   17936:	682b      	ldr	r3, [r5, #0]
   17938:	031e      	lsls	r6, r3, #12
   1793a:	d588      	bpl.n	1784e <ip_interface_sendto+0xe2>
   1793c:	e742      	b.n	177c4 <ip_interface_sendto+0x58>
   1793e:	2e00      	cmp	r6, #0
   17940:	f43f af2c 	beq.w	1779c <ip_interface_sendto+0x30>
   17944:	2016      	movs	r0, #22
   17946:	f8df 9094 	ldr.w	r9, [pc, #148]	; 179dc <ip_interface_sendto+0x270>
   1794a:	e7d4      	b.n	178f6 <ip_interface_sendto+0x18a>
   1794c:	2910      	cmp	r1, #16
   1794e:	f47f af72 	bne.w	17836 <ip_interface_sendto+0xca>
   17952:	2204      	movs	r2, #4
   17954:	8931      	ldrh	r1, [r6, #8]
   17956:	835a      	strh	r2, [r3, #26]
   17958:	8319      	strh	r1, [r3, #24]
   1795a:	f106 010c 	add.w	r1, r6, #12
   1795e:	f005 fe7a 	bl	1d656 <memcpy>
   17962:	e01e      	b.n	179a2 <ip_interface_sendto+0x236>
   17964:	682b      	ldr	r3, [r5, #0]
   17966:	031b      	lsls	r3, r3, #12
   17968:	f53f af2f 	bmi.w	177ca <ip_interface_sendto+0x5e>
   1796c:	682b      	ldr	r3, [r5, #0]
   1796e:	b29b      	uxth	r3, r3
   17970:	2b0d      	cmp	r3, #13
   17972:	f43f af2a 	beq.w	177ca <ip_interface_sendto+0x5e>
   17976:	682b      	ldr	r3, [r5, #0]
   17978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1797c:	602b      	str	r3, [r5, #0]
   1797e:	682b      	ldr	r3, [r5, #0]
   17980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17984:	602b      	str	r3, [r5, #0]
   17986:	e720      	b.n	177ca <ip_interface_sendto+0x5e>
   17988:	682b      	ldr	r3, [r5, #0]
   1798a:	b29b      	uxth	r3, r3
   1798c:	2b05      	cmp	r3, #5
   1798e:	f47f af12 	bne.w	177b6 <ip_interface_sendto+0x4a>
   17992:	e70c      	b.n	177ae <ip_interface_sendto+0x42>
   17994:	2210      	movs	r2, #16
   17996:	8931      	ldrh	r1, [r6, #8]
   17998:	835a      	strh	r2, [r3, #26]
   1799a:	8319      	strh	r1, [r3, #24]
   1799c:	18b1      	adds	r1, r6, r2
   1799e:	f005 fe5a 	bl	1d656 <memcpy>
   179a2:	f247 0207 	movw	r2, #28679	; 0x7007
   179a6:	9b07      	ldr	r3, [sp, #28]
   179a8:	4690      	mov	r8, r2
   179aa:	6899      	ldr	r1, [r3, #8]
   179ac:	8b58      	ldrh	r0, [r3, #26]
   179ae:	3104      	adds	r1, #4
   179b0:	4401      	add	r1, r0
   179b2:	9801      	ldr	r0, [sp, #4]
   179b4:	6099      	str	r1, [r3, #8]
   179b6:	6158      	str	r0, [r3, #20]
   179b8:	e759      	b.n	1786e <ip_interface_sendto+0x102>
   179ba:	2023      	movs	r0, #35	; 0x23
   179bc:	f8df 901c 	ldr.w	r9, [pc, #28]	; 179dc <ip_interface_sendto+0x270>
   179c0:	e799      	b.n	178f6 <ip_interface_sendto+0x18a>
   179c2:	2028      	movs	r0, #40	; 0x28
   179c4:	f8df 9014 	ldr.w	r9, [pc, #20]	; 179dc <ip_interface_sendto+0x270>
   179c8:	e795      	b.n	178f6 <ip_interface_sendto+0x18a>
   179ca:	2039      	movs	r0, #57	; 0x39
   179cc:	f8df 900c 	ldr.w	r9, [pc, #12]	; 179dc <ip_interface_sendto+0x270>
   179d0:	e791      	b.n	178f6 <ip_interface_sendto+0x18a>
   179d2:	2009      	movs	r0, #9
   179d4:	f8df 9004 	ldr.w	r9, [pc, #4]	; 179dc <ip_interface_sendto+0x270>
   179d8:	e78d      	b.n	178f6 <ip_interface_sendto+0x18a>
   179da:	bf00      	nop
   179dc:	2002095c 	.word	0x2002095c

000179e0 <ip_interface_recvfrom>:
   179e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179e4:	b085      	sub	sp, #20
   179e6:	2a00      	cmp	r2, #0
   179e8:	f000 8110 	beq.w	17c0c <ip_interface_recvfrom+0x22c>
   179ec:	468a      	mov	sl, r1
   179ee:	4699      	mov	r9, r3
   179f0:	4607      	mov	r7, r0
   179f2:	4616      	mov	r6, r2
   179f4:	f001 f964 	bl	18cc0 <interface_socket_from_handle_get>
   179f8:	4604      	mov	r4, r0
   179fa:	2800      	cmp	r0, #0
   179fc:	f000 810d 	beq.w	17c1a <ip_interface_recvfrom+0x23a>
   17a00:	6803      	ldr	r3, [r0, #0]
   17a02:	02d9      	lsls	r1, r3, #11
   17a04:	d565      	bpl.n	17ad2 <ip_interface_recvfrom+0xf2>
   17a06:	f019 0f02 	tst.w	r9, #2
   17a0a:	bf18      	it	ne
   17a0c:	f04f 0800 	movne.w	r8, #0
   17a10:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17a14:	bf08      	it	eq
   17a16:	6803      	ldreq	r3, [r0, #0]
   17a18:	f009 0510 	and.w	r5, r9, #16
   17a1c:	bf04      	itt	eq
   17a1e:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   17a22:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   17a26:	6823      	ldr	r3, [r4, #0]
   17a28:	03da      	lsls	r2, r3, #15
   17a2a:	d56d      	bpl.n	17b08 <ip_interface_recvfrom+0x128>
   17a2c:	6823      	ldr	r3, [r4, #0]
   17a2e:	69e0      	ldr	r0, [r4, #28]
   17a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17a34:	6023      	str	r3, [r4, #0]
   17a36:	6803      	ldr	r3, [r0, #0]
   17a38:	68db      	ldr	r3, [r3, #12]
   17a3a:	4798      	blx	r3
   17a3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17a40:	4683      	mov	fp, r0
   17a42:	f000 8081 	beq.w	17b48 <ip_interface_recvfrom+0x168>
   17a46:	4286      	cmp	r6, r0
   17a48:	dd03      	ble.n	17a52 <ip_interface_recvfrom+0x72>
   17a4a:	6923      	ldr	r3, [r4, #16]
   17a4c:	2b01      	cmp	r3, #1
   17a4e:	f000 80a7 	beq.w	17ba0 <ip_interface_recvfrom+0x1c0>
   17a52:	2500      	movs	r5, #0
   17a54:	69e0      	ldr	r0, [r4, #28]
   17a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17a58:	b103      	cbz	r3, 17a5c <ip_interface_recvfrom+0x7c>
   17a5a:	681b      	ldr	r3, [r3, #0]
   17a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a5e:	e9cd a600 	strd	sl, r6, [sp]
   17a62:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17a66:	6803      	ldr	r3, [r0, #0]
   17a68:	464a      	mov	r2, r9
   17a6a:	689b      	ldr	r3, [r3, #8]
   17a6c:	4669      	mov	r1, sp
   17a6e:	4798      	blx	r3
   17a70:	4683      	mov	fp, r0
   17a72:	69e0      	ldr	r0, [r4, #28]
   17a74:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   17a78:	6803      	ldr	r3, [r0, #0]
   17a7a:	bf18      	it	ne
   17a7c:	2601      	movne	r6, #1
   17a7e:	68db      	ldr	r3, [r3, #12]
   17a80:	bf0a      	itet	eq
   17a82:	2600      	moveq	r6, #0
   17a84:	f04f 0800 	movne.w	r8, #0
   17a88:	f04f 0823 	moveq.w	r8, #35	; 0x23
   17a8c:	4798      	blx	r3
   17a8e:	3001      	adds	r0, #1
   17a90:	d135      	bne.n	17afe <ip_interface_recvfrom+0x11e>
   17a92:	2d00      	cmp	r5, #0
   17a94:	f000 80b6 	beq.w	17c04 <ip_interface_recvfrom+0x224>
   17a98:	2e00      	cmp	r6, #0
   17a9a:	f000 80a6 	beq.w	17bea <ip_interface_recvfrom+0x20a>
   17a9e:	6823      	ldr	r3, [r4, #0]
   17aa0:	0319      	lsls	r1, r3, #12
   17aa2:	d506      	bpl.n	17ab2 <ip_interface_recvfrom+0xd2>
   17aa4:	6823      	ldr	r3, [r4, #0]
   17aa6:	b29b      	uxth	r3, r3
   17aa8:	2b0d      	cmp	r3, #13
   17aaa:	d002      	beq.n	17ab2 <ip_interface_recvfrom+0xd2>
   17aac:	6923      	ldr	r3, [r4, #16]
   17aae:	2b01      	cmp	r3, #1
   17ab0:	d025      	beq.n	17afe <ip_interface_recvfrom+0x11e>
   17ab2:	6823      	ldr	r3, [r4, #0]
   17ab4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   17ab8:	6823      	ldr	r3, [r4, #0]
   17aba:	f040 80b1 	bne.w	17c20 <ip_interface_recvfrom+0x240>
   17abe:	031a      	lsls	r2, r3, #12
   17ac0:	d475      	bmi.n	17bae <ip_interface_recvfrom+0x1ce>
   17ac2:	f1b8 0f00 	cmp.w	r8, #0
   17ac6:	f040 808a 	bne.w	17bde <ip_interface_recvfrom+0x1fe>
   17aca:	4658      	mov	r0, fp
   17acc:	b005      	add	sp, #20
   17ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ad2:	6803      	ldr	r3, [r0, #0]
   17ad4:	b29b      	uxth	r3, r3
   17ad6:	2b06      	cmp	r3, #6
   17ad8:	d073      	beq.n	17bc2 <ip_interface_recvfrom+0x1e2>
   17ada:	6803      	ldr	r3, [r0, #0]
   17adc:	b29b      	uxth	r3, r3
   17ade:	2b07      	cmp	r3, #7
   17ae0:	bf0c      	ite	eq
   17ae2:	f04f 0809 	moveq.w	r8, #9
   17ae6:	f04f 0839 	movne.w	r8, #57	; 0x39
   17aea:	69e0      	ldr	r0, [r4, #28]
   17aec:	6803      	ldr	r3, [r0, #0]
   17aee:	68db      	ldr	r3, [r3, #12]
   17af0:	4798      	blx	r3
   17af2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17af6:	4683      	mov	fp, r0
   17af8:	d0db      	beq.n	17ab2 <ip_interface_recvfrom+0xd2>
   17afa:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17afe:	6823      	ldr	r3, [r4, #0]
   17b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17b04:	6023      	str	r3, [r4, #0]
   17b06:	e7dc      	b.n	17ac2 <ip_interface_recvfrom+0xe2>
   17b08:	f1b8 0f00 	cmp.w	r8, #0
   17b0c:	f000 8081 	beq.w	17c12 <ip_interface_recvfrom+0x232>
   17b10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17b14:	6a23      	ldr	r3, [r4, #32]
   17b16:	4611      	mov	r1, r2
   17b18:	2b00      	cmp	r3, #0
   17b1a:	bf08      	it	eq
   17b1c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17b20:	4638      	mov	r0, r7
   17b22:	f001 f861 	bl	18be8 <interface_socket_wait>
   17b26:	4680      	mov	r8, r0
   17b28:	b358      	cbz	r0, 17b82 <ip_interface_recvfrom+0x1a2>
   17b2a:	6823      	ldr	r3, [r4, #0]
   17b2c:	69e0      	ldr	r0, [r4, #28]
   17b2e:	031b      	lsls	r3, r3, #12
   17b30:	d521      	bpl.n	17b76 <ip_interface_recvfrom+0x196>
   17b32:	6823      	ldr	r3, [r4, #0]
   17b34:	b29b      	uxth	r3, r3
   17b36:	2b0d      	cmp	r3, #13
   17b38:	d01d      	beq.n	17b76 <ip_interface_recvfrom+0x196>
   17b3a:	6925      	ldr	r5, [r4, #16]
   17b3c:	f1a5 0501 	sub.w	r5, r5, #1
   17b40:	fab5 f585 	clz	r5, r5
   17b44:	096d      	lsrs	r5, r5, #5
   17b46:	e786      	b.n	17a56 <ip_interface_recvfrom+0x76>
   17b48:	6823      	ldr	r3, [r4, #0]
   17b4a:	0318      	lsls	r0, r3, #12
   17b4c:	d5dc      	bpl.n	17b08 <ip_interface_recvfrom+0x128>
   17b4e:	6823      	ldr	r3, [r4, #0]
   17b50:	b29b      	uxth	r3, r3
   17b52:	2b0d      	cmp	r3, #13
   17b54:	d0d8      	beq.n	17b08 <ip_interface_recvfrom+0x128>
   17b56:	6923      	ldr	r3, [r4, #16]
   17b58:	69e0      	ldr	r0, [r4, #28]
   17b5a:	2b01      	cmp	r3, #1
   17b5c:	d034      	beq.n	17bc8 <ip_interface_recvfrom+0x1e8>
   17b5e:	f04f 0839 	mov.w	r8, #57	; 0x39
   17b62:	6823      	ldr	r3, [r4, #0]
   17b64:	0c1b      	lsrs	r3, r3, #16
   17b66:	041b      	lsls	r3, r3, #16
   17b68:	f043 030d 	orr.w	r3, r3, #13
   17b6c:	6023      	str	r3, [r4, #0]
   17b6e:	6823      	ldr	r3, [r4, #0]
   17b70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17b74:	6023      	str	r3, [r4, #0]
   17b76:	6803      	ldr	r3, [r0, #0]
   17b78:	68db      	ldr	r3, [r3, #12]
   17b7a:	4798      	blx	r3
   17b7c:	3001      	adds	r0, #1
   17b7e:	d1be      	bne.n	17afe <ip_interface_recvfrom+0x11e>
   17b80:	e797      	b.n	17ab2 <ip_interface_recvfrom+0xd2>
   17b82:	4638      	mov	r0, r7
   17b84:	f001 f89c 	bl	18cc0 <interface_socket_from_handle_get>
   17b88:	b138      	cbz	r0, 17b9a <ip_interface_recvfrom+0x1ba>
   17b8a:	f8d0 8004 	ldr.w	r8, [r0, #4]
   17b8e:	f1b8 0f00 	cmp.w	r8, #0
   17b92:	d002      	beq.n	17b9a <ip_interface_recvfrom+0x1ba>
   17b94:	2300      	movs	r3, #0
   17b96:	6043      	str	r3, [r0, #4]
   17b98:	e7c7      	b.n	17b2a <ip_interface_recvfrom+0x14a>
   17b9a:	f04f 0801 	mov.w	r8, #1
   17b9e:	e742      	b.n	17a26 <ip_interface_recvfrom+0x46>
   17ba0:	b11d      	cbz	r5, 17baa <ip_interface_recvfrom+0x1ca>
   17ba2:	6823      	ldr	r3, [r4, #0]
   17ba4:	00db      	lsls	r3, r3, #3
   17ba6:	d5b3      	bpl.n	17b10 <ip_interface_recvfrom+0x130>
   17ba8:	e753      	b.n	17a52 <ip_interface_recvfrom+0x72>
   17baa:	69e0      	ldr	r0, [r4, #28]
   17bac:	e753      	b.n	17a56 <ip_interface_recvfrom+0x76>
   17bae:	6823      	ldr	r3, [r4, #0]
   17bb0:	b29b      	uxth	r3, r3
   17bb2:	2b0d      	cmp	r3, #13
   17bb4:	d185      	bne.n	17ac2 <ip_interface_recvfrom+0xe2>
   17bb6:	68a3      	ldr	r3, [r4, #8]
   17bb8:	2b00      	cmp	r3, #0
   17bba:	d082      	beq.n	17ac2 <ip_interface_recvfrom+0xe2>
   17bbc:	f8d4 8008 	ldr.w	r8, [r4, #8]
   17bc0:	e77f      	b.n	17ac2 <ip_interface_recvfrom+0xe2>
   17bc2:	f04f 0809 	mov.w	r8, #9
   17bc6:	e790      	b.n	17aea <ip_interface_recvfrom+0x10a>
   17bc8:	6803      	ldr	r3, [r0, #0]
   17bca:	68db      	ldr	r3, [r3, #12]
   17bcc:	4798      	blx	r3
   17bce:	3001      	adds	r0, #1
   17bd0:	d00b      	beq.n	17bea <ip_interface_recvfrom+0x20a>
   17bd2:	f04f 0823 	mov.w	r8, #35	; 0x23
   17bd6:	6823      	ldr	r3, [r4, #0]
   17bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17bdc:	6023      	str	r3, [r4, #0]
   17bde:	4640      	mov	r0, r8
   17be0:	f7f9 fef0 	bl	119c4 <bsd_os_errno_set>
   17be4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17be8:	e76f      	b.n	17aca <ip_interface_recvfrom+0xea>
   17bea:	6823      	ldr	r3, [r4, #0]
   17bec:	f04f 0b00 	mov.w	fp, #0
   17bf0:	0c1b      	lsrs	r3, r3, #16
   17bf2:	041b      	lsls	r3, r3, #16
   17bf4:	f043 030d 	orr.w	r3, r3, #13
   17bf8:	6023      	str	r3, [r4, #0]
   17bfa:	6823      	ldr	r3, [r4, #0]
   17bfc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17c00:	6023      	str	r3, [r4, #0]
   17c02:	e762      	b.n	17aca <ip_interface_recvfrom+0xea>
   17c04:	2e00      	cmp	r6, #0
   17c06:	f47f af4a 	bne.w	17a9e <ip_interface_recvfrom+0xbe>
   17c0a:	e752      	b.n	17ab2 <ip_interface_recvfrom+0xd2>
   17c0c:	f04f 0816 	mov.w	r8, #22
   17c10:	e7e5      	b.n	17bde <ip_interface_recvfrom+0x1fe>
   17c12:	f04f 0823 	mov.w	r8, #35	; 0x23
   17c16:	69e0      	ldr	r0, [r4, #28]
   17c18:	e7ad      	b.n	17b76 <ip_interface_recvfrom+0x196>
   17c1a:	f04f 0809 	mov.w	r8, #9
   17c1e:	e7de      	b.n	17bde <ip_interface_recvfrom+0x1fe>
   17c20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   17c24:	6023      	str	r3, [r4, #0]
   17c26:	6823      	ldr	r3, [r4, #0]
   17c28:	f04f 0869 	mov.w	r8, #105	; 0x69
   17c2c:	0c1b      	lsrs	r3, r3, #16
   17c2e:	041b      	lsls	r3, r3, #16
   17c30:	f043 030d 	orr.w	r3, r3, #13
   17c34:	6023      	str	r3, [r4, #0]
   17c36:	e7d2      	b.n	17bde <ip_interface_recvfrom+0x1fe>

00017c38 <ip_interface_connect>:
   17c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c3c:	b082      	sub	sp, #8
   17c3e:	2900      	cmp	r1, #0
   17c40:	d044      	beq.n	17ccc <ip_interface_connect+0x94>
   17c42:	2a00      	cmp	r2, #0
   17c44:	d042      	beq.n	17ccc <ip_interface_connect+0x94>
   17c46:	4606      	mov	r6, r0
   17c48:	460f      	mov	r7, r1
   17c4a:	f001 f839 	bl	18cc0 <interface_socket_from_handle_get>
   17c4e:	4605      	mov	r5, r0
   17c50:	2800      	cmp	r0, #0
   17c52:	f000 8096 	beq.w	17d82 <ip_interface_connect+0x14a>
   17c56:	6803      	ldr	r3, [r0, #0]
   17c58:	b29b      	uxth	r3, r3
   17c5a:	2b02      	cmp	r3, #2
   17c5c:	d004      	beq.n	17c68 <ip_interface_connect+0x30>
   17c5e:	6803      	ldr	r3, [r0, #0]
   17c60:	b29b      	uxth	r3, r3
   17c62:	2b04      	cmp	r3, #4
   17c64:	f040 808d 	bne.w	17d82 <ip_interface_connect+0x14a>
   17c68:	6829      	ldr	r1, [r5, #0]
   17c6a:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   17c6e:	f040 8084 	bne.w	17d7a <ip_interface_connect+0x142>
   17c72:	a802      	add	r0, sp, #8
   17c74:	f840 1d04 	str.w	r1, [r0, #-4]!
   17c78:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17c7c:	f7fb ff80 	bl	13b80 <rpc_ip_client_request_alloc>
   17c80:	bb70      	cbnz	r0, 17ce0 <ip_interface_connect+0xa8>
   17c82:	2108      	movs	r1, #8
   17c84:	0433      	lsls	r3, r6, #16
   17c86:	9c01      	ldr	r4, [sp, #4]
   17c88:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   17c8c:	f042 0202 	orr.w	r2, r2, #2
   17c90:	60e2      	str	r2, [r4, #12]
   17c92:	f8c4 8010 	str.w	r8, [r4, #16]
   17c96:	7260      	strb	r0, [r4, #9]
   17c98:	72a0      	strb	r0, [r4, #10]
   17c9a:	72e0      	strb	r0, [r4, #11]
   17c9c:	7221      	strb	r1, [r4, #8]
   17c9e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   17ca2:	f043 0302 	orr.w	r3, r3, #2
   17ca6:	60e3      	str	r3, [r4, #12]
   17ca8:	68a3      	ldr	r3, [r4, #8]
   17caa:	69aa      	ldr	r2, [r5, #24]
   17cac:	3304      	adds	r3, #4
   17cae:	6122      	str	r2, [r4, #16]
   17cb0:	60a3      	str	r3, [r4, #8]
   17cb2:	68eb      	ldr	r3, [r5, #12]
   17cb4:	687a      	ldr	r2, [r7, #4]
   17cb6:	4293      	cmp	r3, r2
   17cb8:	d108      	bne.n	17ccc <ip_interface_connect+0x94>
   17cba:	2b02      	cmp	r3, #2
   17cbc:	f104 0018 	add.w	r0, r4, #24
   17cc0:	783a      	ldrb	r2, [r7, #0]
   17cc2:	d03a      	beq.n	17d3a <ip_interface_connect+0x102>
   17cc4:	2b0a      	cmp	r3, #10
   17cc6:	d101      	bne.n	17ccc <ip_interface_connect+0x94>
   17cc8:	2a24      	cmp	r2, #36	; 0x24
   17cca:	d00e      	beq.n	17cea <ip_interface_connect+0xb2>
   17ccc:	2416      	movs	r4, #22
   17cce:	4620      	mov	r0, r4
   17cd0:	f7f9 fe78 	bl	119c4 <bsd_os_errno_set>
   17cd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17cd8:	4620      	mov	r0, r4
   17cda:	b002      	add	sp, #8
   17cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ce0:	9c01      	ldr	r4, [sp, #4]
   17ce2:	2c00      	cmp	r4, #0
   17ce4:	d04f      	beq.n	17d86 <ip_interface_connect+0x14e>
   17ce6:	0433      	lsls	r3, r6, #16
   17ce8:	e7d9      	b.n	17c9e <ip_interface_connect+0x66>
   17cea:	2210      	movs	r2, #16
   17cec:	893b      	ldrh	r3, [r7, #8]
   17cee:	18b9      	adds	r1, r7, r2
   17cf0:	82e2      	strh	r2, [r4, #22]
   17cf2:	82a3      	strh	r3, [r4, #20]
   17cf4:	f005 fcaf 	bl	1d656 <memcpy>
   17cf8:	68a3      	ldr	r3, [r4, #8]
   17cfa:	8ae2      	ldrh	r2, [r4, #22]
   17cfc:	f247 0102 	movw	r1, #28674	; 0x7002
   17d00:	4413      	add	r3, r2
   17d02:	60a3      	str	r3, [r4, #8]
   17d04:	682f      	ldr	r7, [r5, #0]
   17d06:	682b      	ldr	r3, [r5, #0]
   17d08:	4620      	mov	r0, r4
   17d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   17d0e:	602b      	str	r3, [r5, #0]
   17d10:	f7fb ff4a 	bl	13ba8 <rpc_ip_client_request_send>
   17d14:	b9e0      	cbnz	r0, 17d50 <ip_interface_connect+0x118>
   17d16:	682b      	ldr	r3, [r5, #0]
   17d18:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   17d1c:	d12f      	bne.n	17d7e <ip_interface_connect+0x146>
   17d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17d26:	2105      	movs	r1, #5
   17d28:	4630      	mov	r0, r6
   17d2a:	f000 ff5d 	bl	18be8 <interface_socket_wait>
   17d2e:	4604      	mov	r4, r0
   17d30:	b1c0      	cbz	r0, 17d64 <ip_interface_connect+0x12c>
   17d32:	2c73      	cmp	r4, #115	; 0x73
   17d34:	d0cb      	beq.n	17cce <ip_interface_connect+0x96>
   17d36:	602f      	str	r7, [r5, #0]
   17d38:	e7c9      	b.n	17cce <ip_interface_connect+0x96>
   17d3a:	2a10      	cmp	r2, #16
   17d3c:	d1c6      	bne.n	17ccc <ip_interface_connect+0x94>
   17d3e:	2204      	movs	r2, #4
   17d40:	893b      	ldrh	r3, [r7, #8]
   17d42:	f107 010c 	add.w	r1, r7, #12
   17d46:	82e2      	strh	r2, [r4, #22]
   17d48:	82a3      	strh	r3, [r4, #20]
   17d4a:	f005 fc84 	bl	1d656 <memcpy>
   17d4e:	e7d3      	b.n	17cf8 <ip_interface_connect+0xc0>
   17d50:	6820      	ldr	r0, [r4, #0]
   17d52:	b108      	cbz	r0, 17d58 <ip_interface_connect+0x120>
   17d54:	f7fb ff46 	bl	13be4 <rpc_ip_client_data_free>
   17d58:	4620      	mov	r0, r4
   17d5a:	f7fb ff3b 	bl	13bd4 <rpc_ip_client_message_free>
   17d5e:	2423      	movs	r4, #35	; 0x23
   17d60:	602f      	str	r7, [r5, #0]
   17d62:	e7b4      	b.n	17cce <ip_interface_connect+0x96>
   17d64:	4630      	mov	r0, r6
   17d66:	f000 ffab 	bl	18cc0 <interface_socket_from_handle_get>
   17d6a:	2800      	cmp	r0, #0
   17d6c:	d0b4      	beq.n	17cd8 <ip_interface_connect+0xa0>
   17d6e:	6844      	ldr	r4, [r0, #4]
   17d70:	2c00      	cmp	r4, #0
   17d72:	d0b1      	beq.n	17cd8 <ip_interface_connect+0xa0>
   17d74:	f8c0 8004 	str.w	r8, [r0, #4]
   17d78:	e7db      	b.n	17d32 <ip_interface_connect+0xfa>
   17d7a:	2472      	movs	r4, #114	; 0x72
   17d7c:	e7a7      	b.n	17cce <ip_interface_connect+0x96>
   17d7e:	2473      	movs	r4, #115	; 0x73
   17d80:	e7a5      	b.n	17cce <ip_interface_connect+0x96>
   17d82:	2409      	movs	r4, #9
   17d84:	e7a3      	b.n	17cce <ip_interface_connect+0x96>
   17d86:	240c      	movs	r4, #12
   17d88:	e7a1      	b.n	17cce <ip_interface_connect+0x96>
   17d8a:	bf00      	nop

00017d8c <ip_interface_bind>:
   17d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d90:	b082      	sub	sp, #8
   17d92:	b389      	cbz	r1, 17df8 <ip_interface_bind+0x6c>
   17d94:	b382      	cbz	r2, 17df8 <ip_interface_bind+0x6c>
   17d96:	4607      	mov	r7, r0
   17d98:	460e      	mov	r6, r1
   17d9a:	f000 ff91 	bl	18cc0 <interface_socket_from_handle_get>
   17d9e:	4605      	mov	r5, r0
   17da0:	2800      	cmp	r0, #0
   17da2:	d07b      	beq.n	17e9c <ip_interface_bind+0x110>
   17da4:	6803      	ldr	r3, [r0, #0]
   17da6:	b29b      	uxth	r3, r3
   17da8:	2b02      	cmp	r3, #2
   17daa:	d177      	bne.n	17e9c <ip_interface_bind+0x110>
   17dac:	2100      	movs	r1, #0
   17dae:	a802      	add	r0, sp, #8
   17db0:	f840 1d04 	str.w	r1, [r0, #-4]!
   17db4:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17db8:	f7fb fee2 	bl	13b80 <rpc_ip_client_request_alloc>
   17dbc:	bb30      	cbnz	r0, 17e0c <ip_interface_bind+0x80>
   17dbe:	f247 0305 	movw	r3, #28677	; 0x7005
   17dc2:	2208      	movs	r2, #8
   17dc4:	9c01      	ldr	r4, [sp, #4]
   17dc6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   17dca:	60e3      	str	r3, [r4, #12]
   17dcc:	f8c4 8010 	str.w	r8, [r4, #16]
   17dd0:	7260      	strb	r0, [r4, #9]
   17dd2:	72a0      	strb	r0, [r4, #10]
   17dd4:	72e0      	strb	r0, [r4, #11]
   17dd6:	7222      	strb	r2, [r4, #8]
   17dd8:	68a3      	ldr	r3, [r4, #8]
   17dda:	3304      	adds	r3, #4
   17ddc:	60a3      	str	r3, [r4, #8]
   17dde:	68eb      	ldr	r3, [r5, #12]
   17de0:	6872      	ldr	r2, [r6, #4]
   17de2:	4293      	cmp	r3, r2
   17de4:	d108      	bne.n	17df8 <ip_interface_bind+0x6c>
   17de6:	2b02      	cmp	r3, #2
   17de8:	f104 0018 	add.w	r0, r4, #24
   17dec:	7832      	ldrb	r2, [r6, #0]
   17dee:	d03c      	beq.n	17e6a <ip_interface_bind+0xde>
   17df0:	2b0a      	cmp	r3, #10
   17df2:	d101      	bne.n	17df8 <ip_interface_bind+0x6c>
   17df4:	2a24      	cmp	r2, #36	; 0x24
   17df6:	d00e      	beq.n	17e16 <ip_interface_bind+0x8a>
   17df8:	2416      	movs	r4, #22
   17dfa:	4620      	mov	r0, r4
   17dfc:	f7f9 fde2 	bl	119c4 <bsd_os_errno_set>
   17e00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17e04:	4620      	mov	r0, r4
   17e06:	b002      	add	sp, #8
   17e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e0c:	9c01      	ldr	r4, [sp, #4]
   17e0e:	2c00      	cmp	r4, #0
   17e10:	d1e2      	bne.n	17dd8 <ip_interface_bind+0x4c>
   17e12:	240c      	movs	r4, #12
   17e14:	e7f1      	b.n	17dfa <ip_interface_bind+0x6e>
   17e16:	2210      	movs	r2, #16
   17e18:	8933      	ldrh	r3, [r6, #8]
   17e1a:	18b1      	adds	r1, r6, r2
   17e1c:	82e2      	strh	r2, [r4, #22]
   17e1e:	82a3      	strh	r3, [r4, #20]
   17e20:	f005 fc19 	bl	1d656 <memcpy>
   17e24:	68a3      	ldr	r3, [r4, #8]
   17e26:	8ae2      	ldrh	r2, [r4, #22]
   17e28:	f247 0105 	movw	r1, #28677	; 0x7005
   17e2c:	4413      	add	r3, r2
   17e2e:	60a3      	str	r3, [r4, #8]
   17e30:	682b      	ldr	r3, [r5, #0]
   17e32:	4620      	mov	r0, r4
   17e34:	0c1b      	lsrs	r3, r3, #16
   17e36:	041b      	lsls	r3, r3, #16
   17e38:	f043 0303 	orr.w	r3, r3, #3
   17e3c:	602b      	str	r3, [r5, #0]
   17e3e:	682e      	ldr	r6, [r5, #0]
   17e40:	f7fb feb2 	bl	13ba8 <rpc_ip_client_request_send>
   17e44:	4680      	mov	r8, r0
   17e46:	b9d8      	cbnz	r0, 17e80 <ip_interface_bind+0xf4>
   17e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17e50:	2104      	movs	r1, #4
   17e52:	4638      	mov	r0, r7
   17e54:	f000 fec8 	bl	18be8 <interface_socket_wait>
   17e58:	4604      	mov	r4, r0
   17e5a:	b308      	cbz	r0, 17ea0 <ip_interface_bind+0x114>
   17e5c:	682b      	ldr	r3, [r5, #0]
   17e5e:	0c1b      	lsrs	r3, r3, #16
   17e60:	041b      	lsls	r3, r3, #16
   17e62:	f043 0302 	orr.w	r3, r3, #2
   17e66:	602b      	str	r3, [r5, #0]
   17e68:	e7c7      	b.n	17dfa <ip_interface_bind+0x6e>
   17e6a:	2a10      	cmp	r2, #16
   17e6c:	d1c4      	bne.n	17df8 <ip_interface_bind+0x6c>
   17e6e:	2204      	movs	r2, #4
   17e70:	8933      	ldrh	r3, [r6, #8]
   17e72:	f106 010c 	add.w	r1, r6, #12
   17e76:	82e2      	strh	r2, [r4, #22]
   17e78:	82a3      	strh	r3, [r4, #20]
   17e7a:	f005 fbec 	bl	1d656 <memcpy>
   17e7e:	e7d1      	b.n	17e24 <ip_interface_bind+0x98>
   17e80:	6820      	ldr	r0, [r4, #0]
   17e82:	b108      	cbz	r0, 17e88 <ip_interface_bind+0xfc>
   17e84:	f7fb feae 	bl	13be4 <rpc_ip_client_data_free>
   17e88:	0c36      	lsrs	r6, r6, #16
   17e8a:	0436      	lsls	r6, r6, #16
   17e8c:	4620      	mov	r0, r4
   17e8e:	f046 0602 	orr.w	r6, r6, #2
   17e92:	f7fb fe9f 	bl	13bd4 <rpc_ip_client_message_free>
   17e96:	2423      	movs	r4, #35	; 0x23
   17e98:	602e      	str	r6, [r5, #0]
   17e9a:	e7ae      	b.n	17dfa <ip_interface_bind+0x6e>
   17e9c:	2409      	movs	r4, #9
   17e9e:	e7ac      	b.n	17dfa <ip_interface_bind+0x6e>
   17ea0:	4638      	mov	r0, r7
   17ea2:	f000 ff0d 	bl	18cc0 <interface_socket_from_handle_get>
   17ea6:	2800      	cmp	r0, #0
   17ea8:	d0ac      	beq.n	17e04 <ip_interface_bind+0x78>
   17eaa:	6844      	ldr	r4, [r0, #4]
   17eac:	2c00      	cmp	r4, #0
   17eae:	d0a9      	beq.n	17e04 <ip_interface_bind+0x78>
   17eb0:	f8c0 8004 	str.w	r8, [r0, #4]
   17eb4:	e7d2      	b.n	17e5c <ip_interface_bind+0xd0>
   17eb6:	bf00      	nop

00017eb8 <ip_interface_listen>:
   17eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ebc:	b082      	sub	sp, #8
   17ebe:	4606      	mov	r6, r0
   17ec0:	f000 fefe 	bl	18cc0 <interface_socket_from_handle_get>
   17ec4:	2800      	cmp	r0, #0
   17ec6:	d067      	beq.n	17f98 <ip_interface_listen+0xe0>
   17ec8:	6803      	ldr	r3, [r0, #0]
   17eca:	4605      	mov	r5, r0
   17ecc:	b29b      	uxth	r3, r3
   17ece:	2b04      	cmp	r3, #4
   17ed0:	d162      	bne.n	17f98 <ip_interface_listen+0xe0>
   17ed2:	2100      	movs	r1, #0
   17ed4:	4a32      	ldr	r2, [pc, #200]	; (17fa0 <ip_interface_listen+0xe8>)
   17ed6:	4630      	mov	r0, r6
   17ed8:	f000 fe4e 	bl	18b78 <interface_socket_packet_handler_update>
   17edc:	4601      	mov	r1, r0
   17ede:	2800      	cmp	r0, #0
   17ee0:	d15c      	bne.n	17f9c <ip_interface_listen+0xe4>
   17ee2:	a802      	add	r0, sp, #8
   17ee4:	f840 1d04 	str.w	r1, [r0, #-4]!
   17ee8:	69af      	ldr	r7, [r5, #24]
   17eea:	f7fb fe49 	bl	13b80 <rpc_ip_client_request_alloc>
   17eee:	bba8      	cbnz	r0, 17f5c <ip_interface_listen+0xa4>
   17ef0:	f247 0308 	movw	r3, #28680	; 0x7008
   17ef4:	2208      	movs	r2, #8
   17ef6:	9c01      	ldr	r4, [sp, #4]
   17ef8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17efc:	60e3      	str	r3, [r4, #12]
   17efe:	6127      	str	r7, [r4, #16]
   17f00:	7260      	strb	r0, [r4, #9]
   17f02:	72a0      	strb	r0, [r4, #10]
   17f04:	72e0      	strb	r0, [r4, #11]
   17f06:	7222      	strb	r2, [r4, #8]
   17f08:	68a3      	ldr	r3, [r4, #8]
   17f0a:	f247 0108 	movw	r1, #28680	; 0x7008
   17f0e:	3304      	adds	r3, #4
   17f10:	60a3      	str	r3, [r4, #8]
   17f12:	682b      	ldr	r3, [r5, #0]
   17f14:	4620      	mov	r0, r4
   17f16:	0c1b      	lsrs	r3, r3, #16
   17f18:	041b      	lsls	r3, r3, #16
   17f1a:	f043 0306 	orr.w	r3, r3, #6
   17f1e:	602b      	str	r3, [r5, #0]
   17f20:	682f      	ldr	r7, [r5, #0]
   17f22:	f7fb fe41 	bl	13ba8 <rpc_ip_client_request_send>
   17f26:	4680      	mov	r8, r0
   17f28:	b9e8      	cbnz	r0, 17f66 <ip_interface_listen+0xae>
   17f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17f32:	2107      	movs	r1, #7
   17f34:	4630      	mov	r0, r6
   17f36:	f000 fe57 	bl	18be8 <interface_socket_wait>
   17f3a:	4604      	mov	r4, r0
   17f3c:	b308      	cbz	r0, 17f82 <ip_interface_listen+0xca>
   17f3e:	682b      	ldr	r3, [r5, #0]
   17f40:	0c1b      	lsrs	r3, r3, #16
   17f42:	041b      	lsls	r3, r3, #16
   17f44:	f043 0304 	orr.w	r3, r3, #4
   17f48:	602b      	str	r3, [r5, #0]
   17f4a:	4620      	mov	r0, r4
   17f4c:	f7f9 fd3a 	bl	119c4 <bsd_os_errno_set>
   17f50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17f54:	4620      	mov	r0, r4
   17f56:	b002      	add	sp, #8
   17f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f5c:	9c01      	ldr	r4, [sp, #4]
   17f5e:	2c00      	cmp	r4, #0
   17f60:	d1d2      	bne.n	17f08 <ip_interface_listen+0x50>
   17f62:	240c      	movs	r4, #12
   17f64:	e7f1      	b.n	17f4a <ip_interface_listen+0x92>
   17f66:	6820      	ldr	r0, [r4, #0]
   17f68:	b108      	cbz	r0, 17f6e <ip_interface_listen+0xb6>
   17f6a:	f7fb fe3b 	bl	13be4 <rpc_ip_client_data_free>
   17f6e:	0c3f      	lsrs	r7, r7, #16
   17f70:	043f      	lsls	r7, r7, #16
   17f72:	4620      	mov	r0, r4
   17f74:	f047 0704 	orr.w	r7, r7, #4
   17f78:	f7fb fe2c 	bl	13bd4 <rpc_ip_client_message_free>
   17f7c:	2423      	movs	r4, #35	; 0x23
   17f7e:	602f      	str	r7, [r5, #0]
   17f80:	e7e3      	b.n	17f4a <ip_interface_listen+0x92>
   17f82:	4630      	mov	r0, r6
   17f84:	f000 fe9c 	bl	18cc0 <interface_socket_from_handle_get>
   17f88:	2800      	cmp	r0, #0
   17f8a:	d0e3      	beq.n	17f54 <ip_interface_listen+0x9c>
   17f8c:	6844      	ldr	r4, [r0, #4]
   17f8e:	2c00      	cmp	r4, #0
   17f90:	d0e0      	beq.n	17f54 <ip_interface_listen+0x9c>
   17f92:	f8c0 8004 	str.w	r8, [r0, #4]
   17f96:	e7d2      	b.n	17f3e <ip_interface_listen+0x86>
   17f98:	2409      	movs	r4, #9
   17f9a:	e7d6      	b.n	17f4a <ip_interface_listen+0x92>
   17f9c:	2423      	movs	r4, #35	; 0x23
   17f9e:	e7d4      	b.n	17f4a <ip_interface_listen+0x92>
   17fa0:	00017449 	.word	0x00017449

00017fa4 <ip_interface_accept>:
   17fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa8:	2500      	movs	r5, #0
   17faa:	b085      	sub	sp, #20
   17fac:	460f      	mov	r7, r1
   17fae:	4690      	mov	r8, r2
   17fb0:	9502      	str	r5, [sp, #8]
   17fb2:	4606      	mov	r6, r0
   17fb4:	f000 fe84 	bl	18cc0 <interface_socket_from_handle_get>
   17fb8:	4604      	mov	r4, r0
   17fba:	2800      	cmp	r0, #0
   17fbc:	f000 811c 	beq.w	181f8 <ip_interface_accept+0x254>
   17fc0:	6803      	ldr	r3, [r0, #0]
   17fc2:	b29b      	uxth	r3, r3
   17fc4:	2b07      	cmp	r3, #7
   17fc6:	d10a      	bne.n	17fde <ip_interface_accept+0x3a>
   17fc8:	6803      	ldr	r3, [r0, #0]
   17fca:	6805      	ldr	r5, [r0, #0]
   17fcc:	00db      	lsls	r3, r3, #3
   17fce:	d416      	bmi.n	17ffe <ip_interface_accept+0x5a>
   17fd0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17fd4:	d019      	beq.n	1800a <ip_interface_accept+0x66>
   17fd6:	6805      	ldr	r5, [r0, #0]
   17fd8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17fdc:	d124      	bne.n	18028 <ip_interface_accept+0x84>
   17fde:	f04f 0909 	mov.w	r9, #9
   17fe2:	9b02      	ldr	r3, [sp, #8]
   17fe4:	b113      	cbz	r3, 17fec <ip_interface_accept+0x48>
   17fe6:	4628      	mov	r0, r5
   17fe8:	f000 fdb0 	bl	18b4c <interface_socket_free>
   17fec:	4648      	mov	r0, r9
   17fee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   17ff2:	f7f9 fce7 	bl	119c4 <bsd_os_errno_set>
   17ff6:	4648      	mov	r0, r9
   17ff8:	b005      	add	sp, #20
   17ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ffe:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   18002:	d16d      	bne.n	180e0 <ip_interface_accept+0x13c>
   18004:	f04f 0923 	mov.w	r9, #35	; 0x23
   18008:	e7eb      	b.n	17fe2 <ip_interface_accept+0x3e>
   1800a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1800e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18012:	4611      	mov	r1, r2
   18014:	4630      	mov	r0, r6
   18016:	f000 fde7 	bl	18be8 <interface_socket_wait>
   1801a:	4681      	mov	r9, r0
   1801c:	2800      	cmp	r0, #0
   1801e:	d07e      	beq.n	1811e <ip_interface_accept+0x17a>
   18020:	6825      	ldr	r5, [r4, #0]
   18022:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   18026:	d0dc      	beq.n	17fe2 <ip_interface_accept+0x3e>
   18028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1802c:	2300      	movs	r3, #0
   1802e:	e9cd 0300 	strd	r0, r3, [sp]
   18032:	4a75      	ldr	r2, [pc, #468]	; (18208 <ip_interface_accept+0x264>)
   18034:	6921      	ldr	r1, [r4, #16]
   18036:	a802      	add	r0, sp, #8
   18038:	f000 fd32 	bl	18aa0 <interface_socket_allocate>
   1803c:	9b02      	ldr	r3, [sp, #8]
   1803e:	4605      	mov	r5, r0
   18040:	2b00      	cmp	r3, #0
   18042:	f000 80dd 	beq.w	18200 <ip_interface_accept+0x25c>
   18046:	2100      	movs	r1, #0
   18048:	6962      	ldr	r2, [r4, #20]
   1804a:	a804      	add	r0, sp, #16
   1804c:	615a      	str	r2, [r3, #20]
   1804e:	68e2      	ldr	r2, [r4, #12]
   18050:	f840 1d04 	str.w	r1, [r0, #-4]!
   18054:	60da      	str	r2, [r3, #12]
   18056:	6922      	ldr	r2, [r4, #16]
   18058:	611a      	str	r2, [r3, #16]
   1805a:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1805e:	f7fb fd8f 	bl	13b80 <rpc_ip_client_request_alloc>
   18062:	2800      	cmp	r0, #0
   18064:	d143      	bne.n	180ee <ip_interface_accept+0x14a>
   18066:	f247 030c 	movw	r3, #28684	; 0x700c
   1806a:	2108      	movs	r1, #8
   1806c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   18070:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   18074:	f8cb 300c 	str.w	r3, [fp, #12]
   18078:	f8cb 9010 	str.w	r9, [fp, #16]
   1807c:	f88b 0009 	strb.w	r0, [fp, #9]
   18080:	f88b 000a 	strb.w	r0, [fp, #10]
   18084:	f88b 000b 	strb.w	r0, [fp, #11]
   18088:	f88b 1008 	strb.w	r1, [fp, #8]
   1808c:	6823      	ldr	r3, [r4, #0]
   1808e:	f247 010c 	movw	r1, #28684	; 0x700c
   18092:	0c1b      	lsrs	r3, r3, #16
   18094:	041b      	lsls	r3, r3, #16
   18096:	f043 0308 	orr.w	r3, r3, #8
   1809a:	6023      	str	r3, [r4, #0]
   1809c:	4658      	mov	r0, fp
   1809e:	f8d4 9000 	ldr.w	r9, [r4]
   180a2:	f7fb fd81 	bl	13ba8 <rpc_ip_client_request_send>
   180a6:	4682      	mov	sl, r0
   180a8:	bb48      	cbnz	r0, 180fe <ip_interface_accept+0x15a>
   180aa:	6822      	ldr	r2, [r4, #0]
   180ac:	9900      	ldr	r1, [sp, #0]
   180ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180b2:	400a      	ands	r2, r1
   180b4:	6022      	str	r2, [r4, #0]
   180b6:	2109      	movs	r1, #9
   180b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   180bc:	4630      	mov	r0, r6
   180be:	f000 fd93 	bl	18be8 <interface_socket_wait>
   180c2:	4681      	mov	r9, r0
   180c4:	2800      	cmp	r0, #0
   180c6:	f000 8085 	beq.w	181d4 <ip_interface_accept+0x230>
   180ca:	6823      	ldr	r3, [r4, #0]
   180cc:	9a01      	ldr	r2, [sp, #4]
   180ce:	431a      	orrs	r2, r3
   180d0:	6022      	str	r2, [r4, #0]
   180d2:	6823      	ldr	r3, [r4, #0]
   180d4:	0c1b      	lsrs	r3, r3, #16
   180d6:	041b      	lsls	r3, r3, #16
   180d8:	f043 0307 	orr.w	r3, r3, #7
   180dc:	6023      	str	r3, [r4, #0]
   180de:	e780      	b.n	17fe2 <ip_interface_accept+0x3e>
   180e0:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   180e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   180e8:	e9cd 2300 	strd	r2, r3, [sp]
   180ec:	e7a1      	b.n	18032 <ip_interface_accept+0x8e>
   180ee:	f8dd b00c 	ldr.w	fp, [sp, #12]
   180f2:	f04f 090c 	mov.w	r9, #12
   180f6:	f1bb 0f00 	cmp.w	fp, #0
   180fa:	d1c7      	bne.n	1808c <ip_interface_accept+0xe8>
   180fc:	e771      	b.n	17fe2 <ip_interface_accept+0x3e>
   180fe:	f8db 0000 	ldr.w	r0, [fp]
   18102:	b108      	cbz	r0, 18108 <ip_interface_accept+0x164>
   18104:	f7fb fd6e 	bl	13be4 <rpc_ip_client_data_free>
   18108:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1810c:	4658      	mov	r0, fp
   1810e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   18112:	f7fb fd5f 	bl	13bd4 <rpc_ip_client_message_free>
   18116:	f049 0307 	orr.w	r3, r9, #7
   1811a:	6023      	str	r3, [r4, #0]
   1811c:	e772      	b.n	18004 <ip_interface_accept+0x60>
   1811e:	4630      	mov	r0, r6
   18120:	f000 fdce 	bl	18cc0 <interface_socket_from_handle_get>
   18124:	b130      	cbz	r0, 18134 <ip_interface_accept+0x190>
   18126:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1812a:	f1b9 0f00 	cmp.w	r9, #0
   1812e:	d001      	beq.n	18134 <ip_interface_accept+0x190>
   18130:	6045      	str	r5, [r0, #4]
   18132:	e775      	b.n	18020 <ip_interface_accept+0x7c>
   18134:	6823      	ldr	r3, [r4, #0]
   18136:	03d9      	lsls	r1, r3, #15
   18138:	f53f af76 	bmi.w	18028 <ip_interface_accept+0x84>
   1813c:	4d33      	ldr	r5, [pc, #204]	; (1820c <ip_interface_accept+0x268>)
   1813e:	9902      	ldr	r1, [sp, #8]
   18140:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   18144:	699b      	ldr	r3, [r3, #24]
   18146:	618b      	str	r3, [r1, #24]
   18148:	b147      	cbz	r7, 1815c <ip_interface_accept+0x1b8>
   1814a:	68cb      	ldr	r3, [r1, #12]
   1814c:	2b0a      	cmp	r3, #10
   1814e:	d024      	beq.n	1819a <ip_interface_accept+0x1f6>
   18150:	2b02      	cmp	r3, #2
   18152:	d103      	bne.n	1815c <ip_interface_accept+0x1b8>
   18154:	f8d8 2000 	ldr.w	r2, [r8]
   18158:	2a10      	cmp	r2, #16
   1815a:	d032      	beq.n	181c2 <ip_interface_accept+0x21e>
   1815c:	680a      	ldr	r2, [r1, #0]
   1815e:	482c      	ldr	r0, [pc, #176]	; (18210 <ip_interface_accept+0x26c>)
   18160:	4002      	ands	r2, r0
   18162:	f042 0205 	orr.w	r2, r2, #5
   18166:	600a      	str	r2, [r1, #0]
   18168:	9a02      	ldr	r2, [sp, #8]
   1816a:	6811      	ldr	r1, [r2, #0]
   1816c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   18170:	6011      	str	r1, [r2, #0]
   18172:	6811      	ldr	r1, [r2, #0]
   18174:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18178:	6011      	str	r1, [r2, #0]
   1817a:	6823      	ldr	r3, [r4, #0]
   1817c:	4003      	ands	r3, r0
   1817e:	f043 0307 	orr.w	r3, r3, #7
   18182:	6023      	str	r3, [r4, #0]
   18184:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   18188:	f7fb fd24 	bl	13bd4 <rpc_ip_client_message_free>
   1818c:	2300      	movs	r3, #0
   1818e:	4648      	mov	r0, r9
   18190:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   18194:	b005      	add	sp, #20
   18196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1819a:	f8d8 2000 	ldr.w	r2, [r8]
   1819e:	2a24      	cmp	r2, #36	; 0x24
   181a0:	d1dc      	bne.n	1815c <ip_interface_accept+0x1b8>
   181a2:	703a      	strb	r2, [r7, #0]
   181a4:	2210      	movs	r2, #16
   181a6:	607b      	str	r3, [r7, #4]
   181a8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   181ac:	f107 0010 	add.w	r0, r7, #16
   181b0:	8b9b      	ldrh	r3, [r3, #28]
   181b2:	813b      	strh	r3, [r7, #8]
   181b4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   181b8:	3120      	adds	r1, #32
   181ba:	f005 fa4c 	bl	1d656 <memcpy>
   181be:	9902      	ldr	r1, [sp, #8]
   181c0:	e7cc      	b.n	1815c <ip_interface_accept+0x1b8>
   181c2:	703a      	strb	r2, [r7, #0]
   181c4:	607b      	str	r3, [r7, #4]
   181c6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   181ca:	f107 000c 	add.w	r0, r7, #12
   181ce:	8b9b      	ldrh	r3, [r3, #28]
   181d0:	2204      	movs	r2, #4
   181d2:	e7ee      	b.n	181b2 <ip_interface_accept+0x20e>
   181d4:	4630      	mov	r0, r6
   181d6:	f000 fd73 	bl	18cc0 <interface_socket_from_handle_get>
   181da:	b138      	cbz	r0, 181ec <ip_interface_accept+0x248>
   181dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
   181e0:	f1b9 0f00 	cmp.w	r9, #0
   181e4:	d002      	beq.n	181ec <ip_interface_accept+0x248>
   181e6:	f8c0 a004 	str.w	sl, [r0, #4]
   181ea:	e76e      	b.n	180ca <ip_interface_accept+0x126>
   181ec:	6823      	ldr	r3, [r4, #0]
   181ee:	9a01      	ldr	r2, [sp, #4]
   181f0:	46a9      	mov	r9, r5
   181f2:	4313      	orrs	r3, r2
   181f4:	6023      	str	r3, [r4, #0]
   181f6:	e7a1      	b.n	1813c <ip_interface_accept+0x198>
   181f8:	4605      	mov	r5, r0
   181fa:	f04f 0909 	mov.w	r9, #9
   181fe:	e6f0      	b.n	17fe2 <ip_interface_accept+0x3e>
   18200:	f04f 090c 	mov.w	r9, #12
   18204:	e6f2      	b.n	17fec <ip_interface_accept+0x48>
   18206:	bf00      	nop
   18208:	00017449 	.word	0x00017449
   1820c:	2002095c 	.word	0x2002095c
   18210:	ffff0000 	.word	0xffff0000

00018214 <ip_interface_setopt>:
   18214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18218:	2901      	cmp	r1, #1
   1821a:	b084      	sub	sp, #16
   1821c:	f040 809c 	bne.w	18358 <ip_interface_setopt+0x144>
   18220:	460e      	mov	r6, r1
   18222:	4690      	mov	r8, r2
   18224:	461d      	mov	r5, r3
   18226:	4607      	mov	r7, r0
   18228:	f000 fd4a 	bl	18cc0 <interface_socket_from_handle_get>
   1822c:	4604      	mov	r4, r0
   1822e:	2800      	cmp	r0, #0
   18230:	f000 80a5 	beq.w	1837e <ip_interface_setopt+0x16a>
   18234:	f1b8 0f19 	cmp.w	r8, #25
   18238:	d16e      	bne.n	18318 <ip_interface_setopt+0x104>
   1823a:	2d00      	cmp	r5, #0
   1823c:	f000 8092 	beq.w	18364 <ip_interface_setopt+0x150>
   18240:	4628      	mov	r0, r5
   18242:	f005 f9cd 	bl	1d5e0 <strlen>
   18246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18248:	4298      	cmp	r0, r3
   1824a:	f040 808b 	bne.w	18364 <ip_interface_setopt+0x150>
   1824e:	6823      	ldr	r3, [r4, #0]
   18250:	b29b      	uxth	r3, r3
   18252:	2b02      	cmp	r3, #2
   18254:	d173      	bne.n	1833e <ip_interface_setopt+0x12a>
   18256:	4629      	mov	r1, r5
   18258:	68e0      	ldr	r0, [r4, #12]
   1825a:	f7fe fb91 	bl	16980 <pdn_interface_pdn_id_get>
   1825e:	9002      	str	r0, [sp, #8]
   18260:	3001      	adds	r0, #1
   18262:	bf08      	it	eq
   18264:	2516      	moveq	r5, #22
   18266:	d04e      	beq.n	18306 <ip_interface_setopt+0xf2>
   18268:	6823      	ldr	r3, [r4, #0]
   1826a:	025b      	lsls	r3, r3, #9
   1826c:	d44a      	bmi.n	18304 <ip_interface_setopt+0xf0>
   1826e:	6823      	ldr	r3, [r4, #0]
   18270:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   18274:	d146      	bne.n	18304 <ip_interface_setopt+0xf0>
   18276:	6826      	ldr	r6, [r4, #0]
   18278:	6822      	ldr	r2, [r4, #0]
   1827a:	a804      	add	r0, sp, #16
   1827c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   18280:	6022      	str	r2, [r4, #0]
   18282:	2104      	movs	r1, #4
   18284:	f840 3d04 	str.w	r3, [r0, #-4]!
   18288:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1828c:	f7fb fc78 	bl	13b80 <rpc_ip_client_request_alloc>
   18290:	2800      	cmp	r0, #0
   18292:	d14e      	bne.n	18332 <ip_interface_setopt+0x11e>
   18294:	f247 0203 	movw	r2, #28675	; 0x7003
   18298:	2300      	movs	r3, #0
   1829a:	2108      	movs	r1, #8
   1829c:	9d03      	ldr	r5, [sp, #12]
   1829e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   182a2:	60ea      	str	r2, [r5, #12]
   182a4:	f8c5 8010 	str.w	r8, [r5, #16]
   182a8:	7229      	strb	r1, [r5, #8]
   182aa:	726b      	strb	r3, [r5, #9]
   182ac:	72ab      	strb	r3, [r5, #10]
   182ae:	72eb      	strb	r3, [r5, #11]
   182b0:	f04f 0c08 	mov.w	ip, #8
   182b4:	2300      	movs	r3, #0
   182b6:	2010      	movs	r0, #16
   182b8:	2130      	movs	r1, #48	; 0x30
   182ba:	68aa      	ldr	r2, [r5, #8]
   182bc:	756b      	strb	r3, [r5, #21]
   182be:	4462      	add	r2, ip
   182c0:	60aa      	str	r2, [r5, #8]
   182c2:	75ab      	strb	r3, [r5, #22]
   182c4:	75eb      	strb	r3, [r5, #23]
   182c6:	76ab      	strb	r3, [r5, #26]
   182c8:	76eb      	strb	r3, [r5, #27]
   182ca:	f885 c014 	strb.w	ip, [r5, #20]
   182ce:	7628      	strb	r0, [r5, #24]
   182d0:	7669      	strb	r1, [r5, #25]
   182d2:	2204      	movs	r2, #4
   182d4:	eb0d 010c 	add.w	r1, sp, ip
   182d8:	6828      	ldr	r0, [r5, #0]
   182da:	f005 f9bc 	bl	1d656 <memcpy>
   182de:	f247 0103 	movw	r1, #28675	; 0x7003
   182e2:	4628      	mov	r0, r5
   182e4:	f7fb fc60 	bl	13ba8 <rpc_ip_client_request_send>
   182e8:	4680      	mov	r8, r0
   182ea:	bb50      	cbnz	r0, 18342 <ip_interface_setopt+0x12e>
   182ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   182f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   182f4:	4611      	mov	r1, r2
   182f6:	4638      	mov	r0, r7
   182f8:	f000 fc76 	bl	18be8 <interface_socket_wait>
   182fc:	4605      	mov	r5, r0
   182fe:	b398      	cbz	r0, 18368 <ip_interface_setopt+0x154>
   18300:	6026      	str	r6, [r4, #0]
   18302:	e000      	b.n	18306 <ip_interface_setopt+0xf2>
   18304:	2523      	movs	r5, #35	; 0x23
   18306:	4628      	mov	r0, r5
   18308:	f7f9 fb5c 	bl	119c4 <bsd_os_errno_set>
   1830c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18310:	4628      	mov	r0, r5
   18312:	b004      	add	sp, #16
   18314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1831a:	4642      	mov	r2, r8
   1831c:	9300      	str	r3, [sp, #0]
   1831e:	4631      	mov	r1, r6
   18320:	462b      	mov	r3, r5
   18322:	4638      	mov	r0, r7
   18324:	f000 fcf4 	bl	18d10 <interface_socket_setopt>
   18328:	4605      	mov	r5, r0
   1832a:	4628      	mov	r0, r5
   1832c:	b004      	add	sp, #16
   1832e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18332:	9d03      	ldr	r5, [sp, #12]
   18334:	2d00      	cmp	r5, #0
   18336:	d1bb      	bne.n	182b0 <ip_interface_setopt+0x9c>
   18338:	6026      	str	r6, [r4, #0]
   1833a:	250c      	movs	r5, #12
   1833c:	e7e3      	b.n	18306 <ip_interface_setopt+0xf2>
   1833e:	2509      	movs	r5, #9
   18340:	e7e1      	b.n	18306 <ip_interface_setopt+0xf2>
   18342:	6828      	ldr	r0, [r5, #0]
   18344:	b108      	cbz	r0, 1834a <ip_interface_setopt+0x136>
   18346:	f7fb fc4d 	bl	13be4 <rpc_ip_client_data_free>
   1834a:	4628      	mov	r0, r5
   1834c:	f7fb fc42 	bl	13bd4 <rpc_ip_client_message_free>
   18350:	2523      	movs	r5, #35	; 0x23
   18352:	6026      	str	r6, [r4, #0]
   18354:	6026      	str	r6, [r4, #0]
   18356:	e7d6      	b.n	18306 <ip_interface_setopt+0xf2>
   18358:	202a      	movs	r0, #42	; 0x2a
   1835a:	f7f9 fb33 	bl	119c4 <bsd_os_errno_set>
   1835e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18362:	e7d5      	b.n	18310 <ip_interface_setopt+0xfc>
   18364:	250e      	movs	r5, #14
   18366:	e7ce      	b.n	18306 <ip_interface_setopt+0xf2>
   18368:	4638      	mov	r0, r7
   1836a:	f000 fca9 	bl	18cc0 <interface_socket_from_handle_get>
   1836e:	b120      	cbz	r0, 1837a <ip_interface_setopt+0x166>
   18370:	6845      	ldr	r5, [r0, #4]
   18372:	b115      	cbz	r5, 1837a <ip_interface_setopt+0x166>
   18374:	f8c0 8004 	str.w	r8, [r0, #4]
   18378:	e7c2      	b.n	18300 <ip_interface_setopt+0xec>
   1837a:	6026      	str	r6, [r4, #0]
   1837c:	e7c8      	b.n	18310 <ip_interface_setopt+0xfc>
   1837e:	2009      	movs	r0, #9
   18380:	f7f9 fb20 	bl	119c4 <bsd_os_errno_set>
   18384:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18388:	e7c2      	b.n	18310 <ip_interface_setopt+0xfc>
   1838a:	bf00      	nop

0001838c <ip_interface_getopt>:
   1838c:	f000 bcf6 	b.w	18d7c <interface_socket_getopt>

00018390 <ip_interface_getaddrinfo>:
   18390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18394:	f04f 0c00 	mov.w	ip, #0
   18398:	2401      	movs	r4, #1
   1839a:	4e72      	ldr	r6, [pc, #456]	; (18564 <ip_interface_getaddrinfo+0x1d4>)
   1839c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 18570 <ip_interface_getaddrinfo+0x1e0>
   183a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 18574 <ip_interface_getaddrinfo+0x1e4>
   183a4:	b085      	sub	sp, #20
   183a6:	4607      	mov	r7, r0
   183a8:	4615      	mov	r5, r2
   183aa:	9301      	str	r3, [sp, #4]
   183ac:	f8a6 c000 	strh.w	ip, [r6]
   183b0:	f8ca 4000 	str.w	r4, [sl]
   183b4:	f8c9 4000 	str.w	r4, [r9]
   183b8:	b171      	cbz	r1, 183d8 <ip_interface_getaddrinfo+0x48>
   183ba:	4608      	mov	r0, r1
   183bc:	220a      	movs	r2, #10
   183be:	4661      	mov	r1, ip
   183c0:	f004 ffca 	bl	1d358 <strtol>
   183c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   183c8:	1e42      	subs	r2, r0, #1
   183ca:	429a      	cmp	r2, r3
   183cc:	f200 8083 	bhi.w	184d6 <ip_interface_getaddrinfo+0x146>
   183d0:	0203      	lsls	r3, r0, #8
   183d2:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   183d6:	8030      	strh	r0, [r6, #0]
   183d8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 18578 <ip_interface_getaddrinfo+0x1e8>
   183dc:	f8d8 3000 	ldr.w	r3, [r8]
   183e0:	2b00      	cmp	r3, #0
   183e2:	d174      	bne.n	184ce <ip_interface_getaddrinfo+0x13e>
   183e4:	4a60      	ldr	r2, [pc, #384]	; (18568 <ip_interface_getaddrinfo+0x1d8>)
   183e6:	6013      	str	r3, [r2, #0]
   183e8:	4a60      	ldr	r2, [pc, #384]	; (1856c <ip_interface_getaddrinfo+0x1dc>)
   183ea:	6013      	str	r3, [r2, #0]
   183ec:	2f00      	cmp	r7, #0
   183ee:	d062      	beq.n	184b6 <ip_interface_getaddrinfo+0x126>
   183f0:	4638      	mov	r0, r7
   183f2:	f005 f8f5 	bl	1d5e0 <strlen>
   183f6:	4683      	mov	fp, r0
   183f8:	b125      	cbz	r5, 18404 <ip_interface_getaddrinfo+0x74>
   183fa:	69ea      	ldr	r2, [r5, #28]
   183fc:	b112      	cbz	r2, 18404 <ip_interface_getaddrinfo+0x74>
   183fe:	6851      	ldr	r1, [r2, #4]
   18400:	2966      	cmp	r1, #102	; 0x66
   18402:	d06c      	beq.n	184de <ip_interface_getaddrinfo+0x14e>
   18404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18408:	2100      	movs	r1, #0
   1840a:	ae04      	add	r6, sp, #16
   1840c:	f846 1d04 	str.w	r1, [r6, #-4]!
   18410:	4630      	mov	r0, r6
   18412:	4659      	mov	r1, fp
   18414:	9200      	str	r2, [sp, #0]
   18416:	f7fb fbb3 	bl	13b80 <rpc_ip_client_request_alloc>
   1841a:	9a00      	ldr	r2, [sp, #0]
   1841c:	2800      	cmp	r0, #0
   1841e:	d14c      	bne.n	184ba <ip_interface_getaddrinfo+0x12a>
   18420:	f247 010d 	movw	r1, #28685	; 0x700d
   18424:	f04f 0c08 	mov.w	ip, #8
   18428:	9c03      	ldr	r4, [sp, #12]
   1842a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1842e:	60e1      	str	r1, [r4, #12]
   18430:	6122      	str	r2, [r4, #16]
   18432:	7260      	strb	r0, [r4, #9]
   18434:	72a0      	strb	r0, [r4, #10]
   18436:	72e0      	strb	r0, [r4, #11]
   18438:	f884 c008 	strb.w	ip, [r4, #8]
   1843c:	2d00      	cmp	r5, #0
   1843e:	d076      	beq.n	1852e <ip_interface_getaddrinfo+0x19e>
   18440:	686a      	ldr	r2, [r5, #4]
   18442:	f022 0108 	bic.w	r1, r2, #8
   18446:	2902      	cmp	r1, #2
   18448:	d05c      	beq.n	18504 <ip_interface_getaddrinfo+0x174>
   1844a:	2a05      	cmp	r2, #5
   1844c:	d178      	bne.n	18540 <ip_interface_getaddrinfo+0x1b0>
   1844e:	68a9      	ldr	r1, [r5, #8]
   18450:	2902      	cmp	r1, #2
   18452:	f8c9 1000 	str.w	r1, [r9]
   18456:	d061      	beq.n	1851c <ip_interface_getaddrinfo+0x18c>
   18458:	61a2      	str	r2, [r4, #24]
   1845a:	68ea      	ldr	r2, [r5, #12]
   1845c:	6222      	str	r2, [r4, #32]
   1845e:	68aa      	ldr	r2, [r5, #8]
   18460:	61e2      	str	r2, [r4, #28]
   18462:	682a      	ldr	r2, [r5, #0]
   18464:	6162      	str	r2, [r4, #20]
   18466:	68a2      	ldr	r2, [r4, #8]
   18468:	3210      	adds	r2, #16
   1846a:	60a2      	str	r2, [r4, #8]
   1846c:	b12f      	cbz	r7, 1847a <ip_interface_getaddrinfo+0xea>
   1846e:	6820      	ldr	r0, [r4, #0]
   18470:	b118      	cbz	r0, 1847a <ip_interface_getaddrinfo+0xea>
   18472:	465a      	mov	r2, fp
   18474:	4639      	mov	r1, r7
   18476:	f005 f8ee 	bl	1d656 <memcpy>
   1847a:	2301      	movs	r3, #1
   1847c:	f247 010d 	movw	r1, #28685	; 0x700d
   18480:	4620      	mov	r0, r4
   18482:	f8c8 3000 	str.w	r3, [r8]
   18486:	f7fb fb8f 	bl	13ba8 <rpc_ip_client_request_send>
   1848a:	2800      	cmp	r0, #0
   1848c:	d156      	bne.n	1853c <ip_interface_getaddrinfo+0x1ac>
   1848e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18492:	9303      	str	r3, [sp, #12]
   18494:	4631      	mov	r1, r6
   18496:	4620      	mov	r0, r4
   18498:	f7f9 fa00 	bl	1189c <bsd_os_timedwait>
   1849c:	f8d8 3000 	ldr.w	r3, [r8]
   184a0:	2b01      	cmp	r3, #1
   184a2:	d0f7      	beq.n	18494 <ip_interface_getaddrinfo+0x104>
   184a4:	4b31      	ldr	r3, [pc, #196]	; (1856c <ip_interface_getaddrinfo+0x1dc>)
   184a6:	6818      	ldr	r0, [r3, #0]
   184a8:	2800      	cmp	r0, #0
   184aa:	d13b      	bne.n	18524 <ip_interface_getaddrinfo+0x194>
   184ac:	4b2e      	ldr	r3, [pc, #184]	; (18568 <ip_interface_getaddrinfo+0x1d8>)
   184ae:	9a01      	ldr	r2, [sp, #4]
   184b0:	681b      	ldr	r3, [r3, #0]
   184b2:	6013      	str	r3, [r2, #0]
   184b4:	e00c      	b.n	184d0 <ip_interface_getaddrinfo+0x140>
   184b6:	46bb      	mov	fp, r7
   184b8:	e79e      	b.n	183f8 <ip_interface_getaddrinfo+0x68>
   184ba:	9c03      	ldr	r4, [sp, #12]
   184bc:	2c00      	cmp	r4, #0
   184be:	d1bd      	bne.n	1843c <ip_interface_getaddrinfo+0xac>
   184c0:	200c      	movs	r0, #12
   184c2:	2300      	movs	r3, #0
   184c4:	f8c8 3000 	str.w	r3, [r8]
   184c8:	b005      	add	sp, #20
   184ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184ce:	2073      	movs	r0, #115	; 0x73
   184d0:	b005      	add	sp, #20
   184d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184d6:	2016      	movs	r0, #22
   184d8:	b005      	add	sp, #20
   184da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184de:	6891      	ldr	r1, [r2, #8]
   184e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   184e4:	d18e      	bne.n	18404 <ip_interface_getaddrinfo+0x74>
   184e6:	f240 2102 	movw	r1, #514	; 0x202
   184ea:	68d0      	ldr	r0, [r2, #12]
   184ec:	4288      	cmp	r0, r1
   184ee:	d189      	bne.n	18404 <ip_interface_getaddrinfo+0x74>
   184f0:	6991      	ldr	r1, [r2, #24]
   184f2:	2900      	cmp	r1, #0
   184f4:	d086      	beq.n	18404 <ip_interface_getaddrinfo+0x74>
   184f6:	6868      	ldr	r0, [r5, #4]
   184f8:	f7fe fa42 	bl	16980 <pdn_interface_pdn_id_get>
   184fc:	1c43      	adds	r3, r0, #1
   184fe:	d081      	beq.n	18404 <ip_interface_getaddrinfo+0x74>
   18500:	4602      	mov	r2, r0
   18502:	e781      	b.n	18408 <ip_interface_getaddrinfo+0x78>
   18504:	68a9      	ldr	r1, [r5, #8]
   18506:	2902      	cmp	r1, #2
   18508:	f8c9 1000 	str.w	r1, [r9]
   1850c:	d006      	beq.n	1851c <ip_interface_getaddrinfo+0x18c>
   1850e:	2a05      	cmp	r2, #5
   18510:	d0a2      	beq.n	18458 <ip_interface_getaddrinfo+0xc8>
   18512:	2a0a      	cmp	r2, #10
   18514:	bf14      	ite	ne
   18516:	2201      	movne	r2, #1
   18518:	2202      	moveq	r2, #2
   1851a:	e79d      	b.n	18458 <ip_interface_getaddrinfo+0xc8>
   1851c:	2102      	movs	r1, #2
   1851e:	f8ca 1000 	str.w	r1, [sl]
   18522:	e7f4      	b.n	1850e <ip_interface_getaddrinfo+0x17e>
   18524:	4b11      	ldr	r3, [pc, #68]	; (1856c <ip_interface_getaddrinfo+0x1dc>)
   18526:	6818      	ldr	r0, [r3, #0]
   18528:	2800      	cmp	r0, #0
   1852a:	d0d1      	beq.n	184d0 <ip_interface_getaddrinfo+0x140>
   1852c:	e7c9      	b.n	184c2 <ip_interface_getaddrinfo+0x132>
   1852e:	4629      	mov	r1, r5
   18530:	2210      	movs	r2, #16
   18532:	f104 0014 	add.w	r0, r4, #20
   18536:	f005 f8b8 	bl	1d6aa <memset>
   1853a:	e794      	b.n	18466 <ip_interface_getaddrinfo+0xd6>
   1853c:	2023      	movs	r0, #35	; 0x23
   1853e:	e7c0      	b.n	184c2 <ip_interface_getaddrinfo+0x132>
   18540:	202f      	movs	r0, #47	; 0x2f
   18542:	f7f9 fa3f 	bl	119c4 <bsd_os_errno_set>
   18546:	68a2      	ldr	r2, [r4, #8]
   18548:	3210      	adds	r2, #16
   1854a:	60a2      	str	r2, [r4, #8]
   1854c:	b917      	cbnz	r7, 18554 <ip_interface_getaddrinfo+0x1c4>
   1854e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18552:	e7b6      	b.n	184c2 <ip_interface_getaddrinfo+0x132>
   18554:	6820      	ldr	r0, [r4, #0]
   18556:	2800      	cmp	r0, #0
   18558:	d0f9      	beq.n	1854e <ip_interface_getaddrinfo+0x1be>
   1855a:	465a      	mov	r2, fp
   1855c:	4639      	mov	r1, r7
   1855e:	f005 f87a 	bl	1d656 <memcpy>
   18562:	e7f4      	b.n	1854e <ip_interface_getaddrinfo+0x1be>
   18564:	20024e4a 	.word	0x20024e4a
   18568:	20020954 	.word	0x20020954
   1856c:	2002094c 	.word	0x2002094c
   18570:	20020944 	.word	0x20020944
   18574:	20020948 	.word	0x20020948
   18578:	20020950 	.word	0x20020950

0001857c <ip_interface_freeaddrinfo>:
   1857c:	b538      	push	{r3, r4, r5, lr}
   1857e:	4c0b      	ldr	r4, [pc, #44]	; (185ac <ip_interface_freeaddrinfo+0x30>)
   18580:	6823      	ldr	r3, [r4, #0]
   18582:	2b02      	cmp	r3, #2
   18584:	d000      	beq.n	18588 <ip_interface_freeaddrinfo+0xc>
   18586:	bd38      	pop	{r3, r4, r5, pc}
   18588:	b130      	cbz	r0, 18598 <ip_interface_freeaddrinfo+0x1c>
   1858a:	4605      	mov	r5, r0
   1858c:	6940      	ldr	r0, [r0, #20]
   1858e:	f7fb fac9 	bl	13b24 <nrf_free>
   18592:	4628      	mov	r0, r5
   18594:	f7fb fac6 	bl	13b24 <nrf_free>
   18598:	2300      	movs	r3, #0
   1859a:	4a05      	ldr	r2, [pc, #20]	; (185b0 <ip_interface_freeaddrinfo+0x34>)
   1859c:	4905      	ldr	r1, [pc, #20]	; (185b4 <ip_interface_freeaddrinfo+0x38>)
   1859e:	6023      	str	r3, [r4, #0]
   185a0:	6013      	str	r3, [r2, #0]
   185a2:	6808      	ldr	r0, [r1, #0]
   185a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   185a8:	f7fb bb1c 	b.w	13be4 <rpc_ip_client_data_free>
   185ac:	20020950 	.word	0x20020950
   185b0:	2002094c 	.word	0x2002094c
   185b4:	20020958 	.word	0x20020958

000185b8 <rpc_ip_event_handler>:
   185b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185bc:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   185c0:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   185c4:	4605      	mov	r5, r0
   185c6:	b089      	sub	sp, #36	; 0x24
   185c8:	460e      	mov	r6, r1
   185ca:	68c0      	ldr	r0, [r0, #12]
   185cc:	d05e      	beq.n	1868c <rpc_ip_event_handler+0xd4>
   185ce:	0c04      	lsrs	r4, r0, #16
   185d0:	4620      	mov	r0, r4
   185d2:	f000 fb75 	bl	18cc0 <interface_socket_from_handle_get>
   185d6:	f248 030d 	movw	r3, #32781	; 0x800d
   185da:	429e      	cmp	r6, r3
   185dc:	4607      	mov	r7, r0
   185de:	46a0      	mov	r8, r4
   185e0:	d041      	beq.n	18666 <rpc_ip_event_handler+0xae>
   185e2:	2f00      	cmp	r7, #0
   185e4:	d04e      	beq.n	18684 <rpc_ip_event_handler+0xcc>
   185e6:	4640      	mov	r0, r8
   185e8:	4633      	mov	r3, r6
   185ea:	462a      	mov	r2, r5
   185ec:	4639      	mov	r1, r7
   185ee:	f7fb fead 	bl	1434c <tls_rpc_ip_event_handler>
   185f2:	2800      	cmp	r0, #0
   185f4:	d042      	beq.n	1867c <rpc_ip_event_handler+0xc4>
   185f6:	f248 0307 	movw	r3, #32775	; 0x8007
   185fa:	429e      	cmp	r6, r3
   185fc:	d961      	bls.n	186c2 <rpc_ip_event_handler+0x10a>
   185fe:	f248 030c 	movw	r3, #32780	; 0x800c
   18602:	429e      	cmp	r6, r3
   18604:	f000 816b 	beq.w	188de <rpc_ip_event_handler+0x326>
   18608:	f240 8106 	bls.w	18818 <rpc_ip_event_handler+0x260>
   1860c:	f249 0302 	movw	r3, #36866	; 0x9002
   18610:	429e      	cmp	r6, r3
   18612:	f000 808c 	beq.w	1872e <rpc_ip_event_handler+0x176>
   18616:	f249 0303 	movw	r3, #36867	; 0x9003
   1861a:	429e      	cmp	r6, r3
   1861c:	f000 8180 	beq.w	18920 <rpc_ip_event_handler+0x368>
   18620:	f249 0301 	movw	r3, #36865	; 0x9001
   18624:	429e      	cmp	r6, r3
   18626:	d12d      	bne.n	18684 <rpc_ip_event_handler+0xcc>
   18628:	683c      	ldr	r4, [r7, #0]
   1862a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1862e:	f000 81c3 	beq.w	189b8 <rpc_ip_event_handler+0x400>
   18632:	68ab      	ldr	r3, [r5, #8]
   18634:	2b04      	cmp	r3, #4
   18636:	f200 81eb 	bhi.w	18a10 <rpc_ip_event_handler+0x458>
   1863a:	2400      	movs	r4, #0
   1863c:	4626      	mov	r6, r4
   1863e:	6829      	ldr	r1, [r5, #0]
   18640:	686a      	ldr	r2, [r5, #4]
   18642:	e9cd 6406 	strd	r6, r4, [sp, #24]
   18646:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1864a:	69f8      	ldr	r0, [r7, #28]
   1864c:	a904      	add	r1, sp, #16
   1864e:	6803      	ldr	r3, [r0, #0]
   18650:	685b      	ldr	r3, [r3, #4]
   18652:	4798      	blx	r3
   18654:	3001      	adds	r0, #1
   18656:	f000 81cc 	beq.w	189f2 <rpc_ip_event_handler+0x43a>
   1865a:	683b      	ldr	r3, [r7, #0]
   1865c:	2000      	movs	r0, #0
   1865e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18662:	603b      	str	r3, [r7, #0]
   18664:	e00b      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18666:	f8df 9344 	ldr.w	r9, [pc, #836]	; 189ac <rpc_ip_event_handler+0x3f4>
   1866a:	682f      	ldr	r7, [r5, #0]
   1866c:	f8d9 3000 	ldr.w	r3, [r9]
   18670:	2b01      	cmp	r3, #1
   18672:	d015      	beq.n	186a0 <rpc_ip_event_handler+0xe8>
   18674:	b117      	cbz	r7, 1867c <rpc_ip_event_handler+0xc4>
   18676:	4638      	mov	r0, r7
   18678:	f7fb fab4 	bl	13be4 <rpc_ip_client_data_free>
   1867c:	2000      	movs	r0, #0
   1867e:	b009      	add	sp, #36	; 0x24
   18680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18684:	6828      	ldr	r0, [r5, #0]
   18686:	2800      	cmp	r0, #0
   18688:	d1f6      	bne.n	18678 <rpc_ip_event_handler+0xc0>
   1868a:	e7f7      	b.n	1867c <rpc_ip_event_handler+0xc4>
   1868c:	f000 face 	bl	18c2c <interface_from_internal_id_search>
   18690:	4680      	mov	r8, r0
   18692:	f000 fb15 	bl	18cc0 <interface_socket_from_handle_get>
   18696:	4607      	mov	r7, r0
   18698:	4644      	mov	r4, r8
   1869a:	2f00      	cmp	r7, #0
   1869c:	d1a3      	bne.n	185e6 <rpc_ip_event_handler+0x2e>
   1869e:	e7f1      	b.n	18684 <rpc_ip_event_handler+0xcc>
   186a0:	696b      	ldr	r3, [r5, #20]
   186a2:	2b00      	cmp	r3, #0
   186a4:	d048      	beq.n	18738 <rpc_ip_event_handler+0x180>
   186a6:	2b10      	cmp	r3, #16
   186a8:	bf96      	itet	ls
   186aa:	4aba      	ldrls	r2, [pc, #744]	; (18994 <rpc_ip_event_handler+0x3dc>)
   186ac:	212d      	movhi	r1, #45	; 0x2d
   186ae:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   186b2:	2302      	movs	r3, #2
   186b4:	4ab8      	ldr	r2, [pc, #736]	; (18998 <rpc_ip_event_handler+0x3e0>)
   186b6:	6011      	str	r1, [r2, #0]
   186b8:	f8c9 3000 	str.w	r3, [r9]
   186bc:	2f00      	cmp	r7, #0
   186be:	d1da      	bne.n	18676 <rpc_ip_event_handler+0xbe>
   186c0:	e7dc      	b.n	1867c <rpc_ip_event_handler+0xc4>
   186c2:	f248 0306 	movw	r3, #32774	; 0x8006
   186c6:	429e      	cmp	r6, r3
   186c8:	f080 80e6 	bcs.w	18898 <rpc_ip_event_handler+0x2e0>
   186cc:	f248 0302 	movw	r3, #32770	; 0x8002
   186d0:	429e      	cmp	r6, r3
   186d2:	f000 80c8 	beq.w	18866 <rpc_ip_event_handler+0x2ae>
   186d6:	d918      	bls.n	1870a <rpc_ip_event_handler+0x152>
   186d8:	f248 0303 	movw	r3, #32771	; 0x8003
   186dc:	429e      	cmp	r6, r3
   186de:	f000 8112 	beq.w	18906 <rpc_ip_event_handler+0x34e>
   186e2:	f248 0305 	movw	r3, #32773	; 0x8005
   186e6:	429e      	cmp	r6, r3
   186e8:	d1cc      	bne.n	18684 <rpc_ip_event_handler+0xcc>
   186ea:	683b      	ldr	r3, [r7, #0]
   186ec:	b29b      	uxth	r3, r3
   186ee:	2b03      	cmp	r3, #3
   186f0:	d1c4      	bne.n	1867c <rpc_ip_event_handler+0xc4>
   186f2:	696b      	ldr	r3, [r5, #20]
   186f4:	2b00      	cmp	r3, #0
   186f6:	f000 817e 	beq.w	189f6 <rpc_ip_event_handler+0x43e>
   186fa:	2b10      	cmp	r3, #16
   186fc:	f200 813b 	bhi.w	18976 <rpc_ip_event_handler+0x3be>
   18700:	4aa4      	ldr	r2, [pc, #656]	; (18994 <rpc_ip_event_handler+0x3dc>)
   18702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18706:	607b      	str	r3, [r7, #4]
   18708:	e7b8      	b.n	1867c <rpc_ip_event_handler+0xc4>
   1870a:	f248 0301 	movw	r3, #32769	; 0x8001
   1870e:	429e      	cmp	r6, r3
   18710:	d1b8      	bne.n	18684 <rpc_ip_event_handler+0xcc>
   18712:	683b      	ldr	r3, [r7, #0]
   18714:	2b01      	cmp	r3, #1
   18716:	d1b1      	bne.n	1867c <rpc_ip_event_handler+0xc4>
   18718:	6968      	ldr	r0, [r5, #20]
   1871a:	2800      	cmp	r0, #0
   1871c:	f000 8173 	beq.w	18a06 <rpc_ip_event_handler+0x44e>
   18720:	2810      	cmp	r0, #16
   18722:	f200 8128 	bhi.w	18976 <rpc_ip_event_handler+0x3be>
   18726:	4b9b      	ldr	r3, [pc, #620]	; (18994 <rpc_ip_event_handler+0x3dc>)
   18728:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1872c:	e7eb      	b.n	18706 <rpc_ip_event_handler+0x14e>
   1872e:	683b      	ldr	r3, [r7, #0]
   18730:	b29b      	uxth	r3, r3
   18732:	2b07      	cmp	r3, #7
   18734:	d1a2      	bne.n	1867c <rpc_ip_event_handler+0xc4>
   18736:	e790      	b.n	1865a <rpc_ip_event_handler+0xa2>
   18738:	4b98      	ldr	r3, [pc, #608]	; (1899c <rpc_ip_event_handler+0x3e4>)
   1873a:	601f      	str	r7, [r3, #0]
   1873c:	69ac      	ldr	r4, [r5, #24]
   1873e:	0163      	lsls	r3, r4, #5
   18740:	4618      	mov	r0, r3
   18742:	9303      	str	r3, [sp, #12]
   18744:	f7fb f9e4 	bl	13b10 <nrf_malloc>
   18748:	9002      	str	r0, [sp, #8]
   1874a:	2800      	cmp	r0, #0
   1874c:	f000 8103 	beq.w	18956 <rpc_ip_event_handler+0x39e>
   18750:	00e5      	lsls	r5, r4, #3
   18752:	1928      	adds	r0, r5, r4
   18754:	0080      	lsls	r0, r0, #2
   18756:	f7fb f9db 	bl	13b10 <nrf_malloc>
   1875a:	2800      	cmp	r0, #0
   1875c:	f000 810d 	beq.w	1897a <rpc_ip_event_handler+0x3c2>
   18760:	2c00      	cmp	r4, #0
   18762:	d078      	beq.n	18856 <rpc_ip_event_handler+0x29e>
   18764:	f105 0210 	add.w	r2, r5, #16
   18768:	1883      	adds	r3, r0, r2
   1876a:	9301      	str	r3, [sp, #4]
   1876c:	9b02      	ldr	r3, [sp, #8]
   1876e:	2404      	movs	r4, #4
   18770:	f8df a23c 	ldr.w	sl, [pc, #572]	; 189b0 <rpc_ip_event_handler+0x3f8>
   18774:	f8df b23c 	ldr.w	fp, [pc, #572]	; 189b4 <rpc_ip_event_handler+0x3fc>
   18778:	f100 0810 	add.w	r8, r0, #16
   1877c:	f103 0620 	add.w	r6, r3, #32
   18780:	e01d      	b.n	187be <rpc_ip_event_handler+0x206>
   18782:	220a      	movs	r2, #10
   18784:	f848 2c0c 	str.w	r2, [r8, #-12]
   18788:	f04f 0224 	mov.w	r2, #36	; 0x24
   1878c:	4640      	mov	r0, r8
   1878e:	f808 2c10 	strb.w	r2, [r8, #-16]
   18792:	f828 3c08 	strh.w	r3, [r8, #-8]
   18796:	f856 2c10 	ldr.w	r2, [r6, #-16]
   1879a:	f004 ff5c 	bl	1d656 <memcpy>
   1879e:	f856 3c10 	ldr.w	r3, [r6, #-16]
   187a2:	f108 0808 	add.w	r8, r8, #8
   187a6:	441c      	add	r4, r3
   187a8:	193b      	adds	r3, r7, r4
   187aa:	f846 3c08 	str.w	r3, [r6, #-8]
   187ae:	9b01      	ldr	r3, [sp, #4]
   187b0:	f846 6c04 	str.w	r6, [r6, #-4]
   187b4:	4598      	cmp	r8, r3
   187b6:	442c      	add	r4, r5
   187b8:	f106 0620 	add.w	r6, r6, #32
   187bc:	d045      	beq.n	1884a <rpc_ip_event_handler+0x292>
   187be:	593b      	ldr	r3, [r7, r4]
   187c0:	193a      	adds	r2, r7, r4
   187c2:	f846 3c20 	str.w	r3, [r6, #-32]
   187c6:	6853      	ldr	r3, [r2, #4]
   187c8:	f8da 1000 	ldr.w	r1, [sl]
   187cc:	2b02      	cmp	r3, #2
   187ce:	bf14      	ite	ne
   187d0:	2002      	movne	r0, #2
   187d2:	200a      	moveq	r0, #10
   187d4:	f8db 3000 	ldr.w	r3, [fp]
   187d8:	e946 0107 	strd	r0, r1, [r6, #-28]
   187dc:	f846 3c14 	str.w	r3, [r6, #-20]
   187e0:	8a10      	ldrh	r0, [r2, #16]
   187e2:	f1a8 0310 	sub.w	r3, r8, #16
   187e6:	f846 0c10 	str.w	r0, [r6, #-16]
   187ea:	8a55      	ldrh	r5, [r2, #18]
   187ec:	f846 3c0c 	str.w	r3, [r6, #-12]
   187f0:	4b6b      	ldr	r3, [pc, #428]	; (189a0 <rpc_ip_event_handler+0x3e8>)
   187f2:	3414      	adds	r4, #20
   187f4:	2804      	cmp	r0, #4
   187f6:	eb07 0104 	add.w	r1, r7, r4
   187fa:	881b      	ldrh	r3, [r3, #0]
   187fc:	d1c1      	bne.n	18782 <rpc_ip_event_handler+0x1ca>
   187fe:	2210      	movs	r2, #16
   18800:	2002      	movs	r0, #2
   18802:	f828 3c08 	strh.w	r3, [r8, #-8]
   18806:	f848 0c0c 	str.w	r0, [r8, #-12]
   1880a:	f808 2c10 	strb.w	r2, [r8, #-16]
   1880e:	f856 2c10 	ldr.w	r2, [r6, #-16]
   18812:	f1a8 0004 	sub.w	r0, r8, #4
   18816:	e7c0      	b.n	1879a <rpc_ip_event_handler+0x1e2>
   18818:	f248 0308 	movw	r3, #32776	; 0x8008
   1881c:	429e      	cmp	r6, r3
   1881e:	d04e      	beq.n	188be <rpc_ip_event_handler+0x306>
   18820:	f248 0309 	movw	r3, #32777	; 0x8009
   18824:	429e      	cmp	r6, r3
   18826:	f47f af2d 	bne.w	18684 <rpc_ip_event_handler+0xcc>
   1882a:	683b      	ldr	r3, [r7, #0]
   1882c:	b29b      	uxth	r3, r3
   1882e:	2b0d      	cmp	r3, #13
   18830:	f47f af24 	bne.w	1867c <rpc_ip_event_handler+0xc4>
   18834:	6968      	ldr	r0, [r5, #20]
   18836:	2800      	cmp	r0, #0
   18838:	f47f af72 	bne.w	18720 <rpc_ip_event_handler+0x168>
   1883c:	683b      	ldr	r3, [r7, #0]
   1883e:	0c1b      	lsrs	r3, r3, #16
   18840:	041b      	lsls	r3, r3, #16
   18842:	f043 030e 	orr.w	r3, r3, #14
   18846:	603b      	str	r3, [r7, #0]
   18848:	e719      	b.n	1867e <rpc_ip_event_handler+0xc6>
   1884a:	2200      	movs	r2, #0
   1884c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   18850:	440b      	add	r3, r1
   18852:	f843 2c04 	str.w	r2, [r3, #-4]
   18856:	2202      	movs	r2, #2
   18858:	4b52      	ldr	r3, [pc, #328]	; (189a4 <rpc_ip_event_handler+0x3ec>)
   1885a:	f8c9 2000 	str.w	r2, [r9]
   1885e:	9a02      	ldr	r2, [sp, #8]
   18860:	2000      	movs	r0, #0
   18862:	601a      	str	r2, [r3, #0]
   18864:	e70b      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18866:	683b      	ldr	r3, [r7, #0]
   18868:	0099      	lsls	r1, r3, #2
   1886a:	f57f af07 	bpl.w	1867c <rpc_ip_event_handler+0xc4>
   1886e:	683b      	ldr	r3, [r7, #0]
   18870:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   18874:	603b      	str	r3, [r7, #0]
   18876:	6968      	ldr	r0, [r5, #20]
   18878:	2800      	cmp	r0, #0
   1887a:	f000 80a2 	beq.w	189c2 <rpc_ip_event_handler+0x40a>
   1887e:	2810      	cmp	r0, #16
   18880:	bf8e      	itee	hi
   18882:	232d      	movhi	r3, #45	; 0x2d
   18884:	4b43      	ldrls	r3, [pc, #268]	; (18994 <rpc_ip_event_handler+0x3dc>)
   18886:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   1888a:	2000      	movs	r0, #0
   1888c:	607b      	str	r3, [r7, #4]
   1888e:	683b      	ldr	r3, [r7, #0]
   18890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   18894:	603b      	str	r3, [r7, #0]
   18896:	e6f2      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18898:	683b      	ldr	r3, [r7, #0]
   1889a:	029a      	lsls	r2, r3, #10
   1889c:	f57f aeee 	bpl.w	1867c <rpc_ip_event_handler+0xc4>
   188a0:	696b      	ldr	r3, [r5, #20]
   188a2:	2b00      	cmp	r3, #0
   188a4:	f000 809c 	beq.w	189e0 <rpc_ip_event_handler+0x428>
   188a8:	2b6b      	cmp	r3, #107	; 0x6b
   188aa:	f47f af26 	bne.w	186fa <rpc_ip_event_handler+0x142>
   188ae:	693b      	ldr	r3, [r7, #16]
   188b0:	2b01      	cmp	r3, #1
   188b2:	f000 80b1 	beq.w	18a18 <rpc_ip_event_handler+0x460>
   188b6:	230c      	movs	r3, #12
   188b8:	2000      	movs	r0, #0
   188ba:	607b      	str	r3, [r7, #4]
   188bc:	e6df      	b.n	1867e <rpc_ip_event_handler+0xc6>
   188be:	683b      	ldr	r3, [r7, #0]
   188c0:	b29b      	uxth	r3, r3
   188c2:	2b06      	cmp	r3, #6
   188c4:	f47f aeda 	bne.w	1867c <rpc_ip_event_handler+0xc4>
   188c8:	6968      	ldr	r0, [r5, #20]
   188ca:	2800      	cmp	r0, #0
   188cc:	f47f af28 	bne.w	18720 <rpc_ip_event_handler+0x168>
   188d0:	683b      	ldr	r3, [r7, #0]
   188d2:	0c1b      	lsrs	r3, r3, #16
   188d4:	041b      	lsls	r3, r3, #16
   188d6:	f043 0307 	orr.w	r3, r3, #7
   188da:	603b      	str	r3, [r7, #0]
   188dc:	e6cf      	b.n	1867e <rpc_ip_event_handler+0xc6>
   188de:	683b      	ldr	r3, [r7, #0]
   188e0:	b29b      	uxth	r3, r3
   188e2:	2b08      	cmp	r3, #8
   188e4:	f47f aeca 	bne.w	1867c <rpc_ip_event_handler+0xc4>
   188e8:	696b      	ldr	r3, [r5, #20]
   188ea:	2b00      	cmp	r3, #0
   188ec:	f47f af05 	bne.w	186fa <rpc_ip_event_handler+0x142>
   188f0:	4b2d      	ldr	r3, [pc, #180]	; (189a8 <rpc_ip_event_handler+0x3f0>)
   188f2:	2001      	movs	r0, #1
   188f4:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   188f8:	683b      	ldr	r3, [r7, #0]
   188fa:	0c1b      	lsrs	r3, r3, #16
   188fc:	041b      	lsls	r3, r3, #16
   188fe:	f043 0309 	orr.w	r3, r3, #9
   18902:	603b      	str	r3, [r7, #0]
   18904:	e6bb      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18906:	683b      	ldr	r3, [r7, #0]
   18908:	025b      	lsls	r3, r3, #9
   1890a:	f57f aeb7 	bpl.w	1867c <rpc_ip_event_handler+0xc4>
   1890e:	6968      	ldr	r0, [r5, #20]
   18910:	2800      	cmp	r0, #0
   18912:	f47f af05 	bne.w	18720 <rpc_ip_event_handler+0x168>
   18916:	683b      	ldr	r3, [r7, #0]
   18918:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1891c:	603b      	str	r3, [r7, #0]
   1891e:	e6ae      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18920:	683b      	ldr	r3, [r7, #0]
   18922:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18926:	603b      	str	r3, [r7, #0]
   18928:	683b      	ldr	r3, [r7, #0]
   1892a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1892e:	603b      	str	r3, [r7, #0]
   18930:	683b      	ldr	r3, [r7, #0]
   18932:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18936:	603b      	str	r3, [r7, #0]
   18938:	692b      	ldr	r3, [r5, #16]
   1893a:	2b6c      	cmp	r3, #108	; 0x6c
   1893c:	d021      	beq.n	18982 <rpc_ip_event_handler+0x3ca>
   1893e:	2b10      	cmp	r3, #16
   18940:	bf8c      	ite	hi
   18942:	232d      	movhi	r3, #45	; 0x2d
   18944:	4a13      	ldrls	r2, [pc, #76]	; (18994 <rpc_ip_event_handler+0x3dc>)
   18946:	f04f 0000 	mov.w	r0, #0
   1894a:	bf98      	it	ls
   1894c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   18950:	607b      	str	r3, [r7, #4]
   18952:	60bb      	str	r3, [r7, #8]
   18954:	e693      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18956:	f7fb f8e5 	bl	13b24 <nrf_free>
   1895a:	200c      	movs	r0, #12
   1895c:	2302      	movs	r3, #2
   1895e:	490e      	ldr	r1, [pc, #56]	; (18998 <rpc_ip_event_handler+0x3e0>)
   18960:	4a10      	ldr	r2, [pc, #64]	; (189a4 <rpc_ip_event_handler+0x3ec>)
   18962:	6008      	str	r0, [r1, #0]
   18964:	682f      	ldr	r7, [r5, #0]
   18966:	9902      	ldr	r1, [sp, #8]
   18968:	6011      	str	r1, [r2, #0]
   1896a:	f8c9 3000 	str.w	r3, [r9]
   1896e:	2f00      	cmp	r7, #0
   18970:	f47f ae81 	bne.w	18676 <rpc_ip_event_handler+0xbe>
   18974:	e682      	b.n	1867c <rpc_ip_event_handler+0xc4>
   18976:	232d      	movs	r3, #45	; 0x2d
   18978:	e6c5      	b.n	18706 <rpc_ip_event_handler+0x14e>
   1897a:	220c      	movs	r2, #12
   1897c:	4b06      	ldr	r3, [pc, #24]	; (18998 <rpc_ip_event_handler+0x3e0>)
   1897e:	601a      	str	r2, [r3, #0]
   18980:	e769      	b.n	18856 <rpc_ip_event_handler+0x29e>
   18982:	2239      	movs	r2, #57	; 0x39
   18984:	683b      	ldr	r3, [r7, #0]
   18986:	2000      	movs	r0, #0
   18988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1898c:	603b      	str	r3, [r7, #0]
   1898e:	607a      	str	r2, [r7, #4]
   18990:	60ba      	str	r2, [r7, #8]
   18992:	e674      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18994:	0001f874 	.word	0x0001f874
   18998:	2002094c 	.word	0x2002094c
   1899c:	20020958 	.word	0x20020958
   189a0:	20024e4a 	.word	0x20024e4a
   189a4:	20020954 	.word	0x20020954
   189a8:	2002095c 	.word	0x2002095c
   189ac:	20020950 	.word	0x20020950
   189b0:	20020948 	.word	0x20020948
   189b4:	20020944 	.word	0x20020944
   189b8:	6828      	ldr	r0, [r5, #0]
   189ba:	f7fb f913 	bl	13be4 <rpc_ip_client_data_free>
   189be:	4620      	mov	r0, r4
   189c0:	e65d      	b.n	1867e <rpc_ip_event_handler+0xc6>
   189c2:	683b      	ldr	r3, [r7, #0]
   189c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   189c8:	603b      	str	r3, [r7, #0]
   189ca:	683b      	ldr	r3, [r7, #0]
   189cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   189d0:	603b      	str	r3, [r7, #0]
   189d2:	683b      	ldr	r3, [r7, #0]
   189d4:	0c1b      	lsrs	r3, r3, #16
   189d6:	041b      	lsls	r3, r3, #16
   189d8:	f043 0305 	orr.w	r3, r3, #5
   189dc:	603b      	str	r3, [r7, #0]
   189de:	e64e      	b.n	1867e <rpc_ip_event_handler+0xc6>
   189e0:	683b      	ldr	r3, [r7, #0]
   189e2:	4a28      	ldr	r2, [pc, #160]	; (18a84 <rpc_ip_event_handler+0x4cc>)
   189e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   189e8:	603b      	str	r3, [r7, #0]
   189ea:	2001      	movs	r0, #1
   189ec:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   189f0:	e645      	b.n	1867e <rpc_ip_event_handler+0xc6>
   189f2:	2002      	movs	r0, #2
   189f4:	e643      	b.n	1867e <rpc_ip_event_handler+0xc6>
   189f6:	683b      	ldr	r3, [r7, #0]
   189f8:	2000      	movs	r0, #0
   189fa:	0c1b      	lsrs	r3, r3, #16
   189fc:	041b      	lsls	r3, r3, #16
   189fe:	f043 0304 	orr.w	r3, r3, #4
   18a02:	603b      	str	r3, [r7, #0]
   18a04:	e63b      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18a06:	2302      	movs	r3, #2
   18a08:	603b      	str	r3, [r7, #0]
   18a0a:	69ab      	ldr	r3, [r5, #24]
   18a0c:	61bb      	str	r3, [r7, #24]
   18a0e:	e636      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18a10:	8a6c      	ldrh	r4, [r5, #18]
   18a12:	b94c      	cbnz	r4, 18a28 <rpc_ip_event_handler+0x470>
   18a14:	4626      	mov	r6, r4
   18a16:	e612      	b.n	1863e <rpc_ip_event_handler+0x86>
   18a18:	220c      	movs	r2, #12
   18a1a:	683b      	ldr	r3, [r7, #0]
   18a1c:	2000      	movs	r0, #0
   18a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   18a22:	603b      	str	r3, [r7, #0]
   18a24:	607a      	str	r2, [r7, #4]
   18a26:	e62a      	b.n	1867e <rpc_ip_event_handler+0xc6>
   18a28:	2024      	movs	r0, #36	; 0x24
   18a2a:	f7fb f871 	bl	13b10 <nrf_malloc>
   18a2e:	4606      	mov	r6, r0
   18a30:	b158      	cbz	r0, 18a4a <rpc_ip_event_handler+0x492>
   18a32:	8a6a      	ldrh	r2, [r5, #18]
   18a34:	2a10      	cmp	r2, #16
   18a36:	d018      	beq.n	18a6a <rpc_ip_event_handler+0x4b2>
   18a38:	2a04      	cmp	r2, #4
   18a3a:	d00a      	beq.n	18a52 <rpc_ip_event_handler+0x49a>
   18a3c:	6828      	ldr	r0, [r5, #0]
   18a3e:	f7fb f8d1 	bl	13be4 <rpc_ip_client_data_free>
   18a42:	4630      	mov	r0, r6
   18a44:	f7fb f86e 	bl	13b24 <nrf_free>
   18a48:	e618      	b.n	1867c <rpc_ip_event_handler+0xc4>
   18a4a:	6828      	ldr	r0, [r5, #0]
   18a4c:	f7fb f8ca 	bl	13be4 <rpc_ip_client_data_free>
   18a50:	e614      	b.n	1867c <rpc_ip_event_handler+0xc4>
   18a52:	2302      	movs	r3, #2
   18a54:	2410      	movs	r4, #16
   18a56:	6043      	str	r3, [r0, #4]
   18a58:	7004      	strb	r4, [r0, #0]
   18a5a:	8a2b      	ldrh	r3, [r5, #16]
   18a5c:	f105 0114 	add.w	r1, r5, #20
   18a60:	8103      	strh	r3, [r0, #8]
   18a62:	300c      	adds	r0, #12
   18a64:	f004 fdf7 	bl	1d656 <memcpy>
   18a68:	e5e9      	b.n	1863e <rpc_ip_event_handler+0x86>
   18a6a:	230a      	movs	r3, #10
   18a6c:	2424      	movs	r4, #36	; 0x24
   18a6e:	6043      	str	r3, [r0, #4]
   18a70:	7004      	strb	r4, [r0, #0]
   18a72:	8a2b      	ldrh	r3, [r5, #16]
   18a74:	f105 0114 	add.w	r1, r5, #20
   18a78:	8103      	strh	r3, [r0, #8]
   18a7a:	3010      	adds	r0, #16
   18a7c:	f004 fdeb 	bl	1d656 <memcpy>
   18a80:	e5dd      	b.n	1863e <rpc_ip_event_handler+0x86>
   18a82:	bf00      	nop
   18a84:	2002095c 	.word	0x2002095c

00018a88 <interface_init>:
   18a88:	b508      	push	{r3, lr}
   18a8a:	f44f 7290 	mov.w	r2, #288	; 0x120
   18a8e:	2100      	movs	r1, #0
   18a90:	4802      	ldr	r0, [pc, #8]	; (18a9c <interface_init+0x14>)
   18a92:	f004 fe0a 	bl	1d6aa <memset>
   18a96:	2000      	movs	r0, #0
   18a98:	bd08      	pop	{r3, pc}
   18a9a:	bf00      	nop
   18a9c:	20026594 	.word	0x20026594

00018aa0 <interface_socket_allocate>:
   18aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18aa2:	4b29      	ldr	r3, [pc, #164]	; (18b48 <interface_socket_allocate+0xa8>)
   18aa4:	4606      	mov	r6, r0
   18aa6:	681d      	ldr	r5, [r3, #0]
   18aa8:	4608      	mov	r0, r1
   18aaa:	b1e5      	cbz	r5, 18ae6 <interface_socket_allocate+0x46>
   18aac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   18aae:	2c00      	cmp	r4, #0
   18ab0:	d03d      	beq.n	18b2e <interface_socket_allocate+0x8e>
   18ab2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   18ab4:	2c00      	cmp	r4, #0
   18ab6:	d03c      	beq.n	18b32 <interface_socket_allocate+0x92>
   18ab8:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   18aba:	2c00      	cmp	r4, #0
   18abc:	d03b      	beq.n	18b36 <interface_socket_allocate+0x96>
   18abe:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   18ac2:	b179      	cbz	r1, 18ae4 <interface_socket_allocate+0x44>
   18ac4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   18ac8:	b3b9      	cbz	r1, 18b3a <interface_socket_allocate+0x9a>
   18aca:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   18ace:	b3b1      	cbz	r1, 18b3e <interface_socket_allocate+0x9e>
   18ad0:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   18ad4:	b3a9      	cbz	r1, 18b42 <interface_socket_allocate+0xa2>
   18ad6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18ada:	200c      	movs	r0, #12
   18adc:	f7f8 ff72 	bl	119c4 <bsd_os_errno_set>
   18ae0:	4628      	mov	r0, r5
   18ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ae4:	2504      	movs	r5, #4
   18ae6:	f04f 0c01 	mov.w	ip, #1
   18aea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   18aee:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   18af2:	00a4      	lsls	r4, r4, #2
   18af4:	f843 c004 	str.w	ip, [r3, r4]
   18af8:	441c      	add	r4, r3
   18afa:	4611      	mov	r1, r2
   18afc:	61a7      	str	r7, [r4, #24]
   18afe:	4622      	mov	r2, r4
   18b00:	f001 ffde 	bl	1aac0 <packet_handler_create>
   18b04:	4603      	mov	r3, r0
   18b06:	61e0      	str	r0, [r4, #28]
   18b08:	b158      	cbz	r0, 18b22 <interface_socket_allocate+0x82>
   18b0a:	681b      	ldr	r3, [r3, #0]
   18b0c:	681b      	ldr	r3, [r3, #0]
   18b0e:	4798      	blx	r3
   18b10:	b910      	cbnz	r0, 18b18 <interface_socket_allocate+0x78>
   18b12:	6034      	str	r4, [r6, #0]
   18b14:	4628      	mov	r0, r5
   18b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b18:	69e0      	ldr	r0, [r4, #28]
   18b1a:	f001 fff1 	bl	1ab00 <packet_handler_delete>
   18b1e:	2300      	movs	r3, #0
   18b20:	61e3      	str	r3, [r4, #28]
   18b22:	4620      	mov	r0, r4
   18b24:	2224      	movs	r2, #36	; 0x24
   18b26:	2100      	movs	r1, #0
   18b28:	f004 fdbf 	bl	1d6aa <memset>
   18b2c:	e7d3      	b.n	18ad6 <interface_socket_allocate+0x36>
   18b2e:	2501      	movs	r5, #1
   18b30:	e7d9      	b.n	18ae6 <interface_socket_allocate+0x46>
   18b32:	2502      	movs	r5, #2
   18b34:	e7d7      	b.n	18ae6 <interface_socket_allocate+0x46>
   18b36:	2503      	movs	r5, #3
   18b38:	e7d5      	b.n	18ae6 <interface_socket_allocate+0x46>
   18b3a:	2505      	movs	r5, #5
   18b3c:	e7d3      	b.n	18ae6 <interface_socket_allocate+0x46>
   18b3e:	2506      	movs	r5, #6
   18b40:	e7d1      	b.n	18ae6 <interface_socket_allocate+0x46>
   18b42:	2507      	movs	r5, #7
   18b44:	e7cf      	b.n	18ae6 <interface_socket_allocate+0x46>
   18b46:	bf00      	nop
   18b48:	20026594 	.word	0x20026594

00018b4c <interface_socket_free>:
   18b4c:	2807      	cmp	r0, #7
   18b4e:	d900      	bls.n	18b52 <interface_socket_free+0x6>
   18b50:	4770      	bx	lr
   18b52:	b510      	push	{r4, lr}
   18b54:	4c07      	ldr	r4, [pc, #28]	; (18b74 <interface_socket_free+0x28>)
   18b56:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18b5a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   18b5e:	69e0      	ldr	r0, [r4, #28]
   18b60:	b108      	cbz	r0, 18b66 <interface_socket_free+0x1a>
   18b62:	f001 ffcd 	bl	1ab00 <packet_handler_delete>
   18b66:	4620      	mov	r0, r4
   18b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18b6c:	2224      	movs	r2, #36	; 0x24
   18b6e:	2100      	movs	r1, #0
   18b70:	f004 bd9b 	b.w	1d6aa <memset>
   18b74:	20026594 	.word	0x20026594

00018b78 <interface_socket_packet_handler_update>:
   18b78:	2807      	cmp	r0, #7
   18b7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b7e:	d81e      	bhi.n	18bbe <interface_socket_packet_handler_update+0x46>
   18b80:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   18b84:	4e17      	ldr	r6, [pc, #92]	; (18be4 <interface_socket_packet_handler_update+0x6c>)
   18b86:	eb08 0300 	add.w	r3, r8, r0
   18b8a:	009b      	lsls	r3, r3, #2
   18b8c:	58f4      	ldr	r4, [r6, r3]
   18b8e:	18f5      	adds	r5, r6, r3
   18b90:	b1ac      	cbz	r4, 18bbe <interface_socket_packet_handler_update+0x46>
   18b92:	460b      	mov	r3, r1
   18b94:	4604      	mov	r4, r0
   18b96:	4611      	mov	r1, r2
   18b98:	4618      	mov	r0, r3
   18b9a:	462a      	mov	r2, r5
   18b9c:	f8d5 901c 	ldr.w	r9, [r5, #28]
   18ba0:	f001 ff8e 	bl	1aac0 <packet_handler_create>
   18ba4:	61e8      	str	r0, [r5, #28]
   18ba6:	b1d0      	cbz	r0, 18bde <interface_socket_packet_handler_update+0x66>
   18ba8:	6803      	ldr	r3, [r0, #0]
   18baa:	681b      	ldr	r3, [r3, #0]
   18bac:	4798      	blx	r3
   18bae:	4607      	mov	r7, r0
   18bb0:	b948      	cbnz	r0, 18bc6 <interface_socket_packet_handler_update+0x4e>
   18bb2:	4648      	mov	r0, r9
   18bb4:	f001 ffa4 	bl	1ab00 <packet_handler_delete>
   18bb8:	4638      	mov	r0, r7
   18bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18bbe:	2705      	movs	r7, #5
   18bc0:	4638      	mov	r0, r7
   18bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18bc6:	69e8      	ldr	r0, [r5, #28]
   18bc8:	f001 ff9a 	bl	1ab00 <packet_handler_delete>
   18bcc:	eb08 0004 	add.w	r0, r8, r4
   18bd0:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   18bd4:	f8c6 901c 	str.w	r9, [r6, #28]
   18bd8:	4638      	mov	r0, r7
   18bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18bde:	2704      	movs	r7, #4
   18be0:	e7f4      	b.n	18bcc <interface_socket_packet_handler_update+0x54>
   18be2:	bf00      	nop
   18be4:	20026594 	.word	0x20026594

00018be8 <interface_socket_wait>:
   18be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bea:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18bee:	4c0e      	ldr	r4, [pc, #56]	; (18c28 <interface_socket_wait+0x40>)
   18bf0:	0080      	lsls	r0, r0, #2
   18bf2:	5825      	ldr	r5, [r4, r0]
   18bf4:	b083      	sub	sp, #12
   18bf6:	4015      	ands	r5, r2
   18bf8:	428d      	cmp	r5, r1
   18bfa:	9301      	str	r3, [sp, #4]
   18bfc:	4404      	add	r4, r0
   18bfe:	d010      	beq.n	18c22 <interface_socket_wait+0x3a>
   18c00:	6863      	ldr	r3, [r4, #4]
   18c02:	b973      	cbnz	r3, 18c22 <interface_socket_wait+0x3a>
   18c04:	460f      	mov	r7, r1
   18c06:	4616      	mov	r6, r2
   18c08:	4625      	mov	r5, r4
   18c0a:	e006      	b.n	18c1a <interface_socket_wait+0x32>
   18c0c:	686b      	ldr	r3, [r5, #4]
   18c0e:	b943      	cbnz	r3, 18c22 <interface_socket_wait+0x3a>
   18c10:	a901      	add	r1, sp, #4
   18c12:	4620      	mov	r0, r4
   18c14:	f7f8 fe42 	bl	1189c <bsd_os_timedwait>
   18c18:	b920      	cbnz	r0, 18c24 <interface_socket_wait+0x3c>
   18c1a:	682b      	ldr	r3, [r5, #0]
   18c1c:	4033      	ands	r3, r6
   18c1e:	42bb      	cmp	r3, r7
   18c20:	d1f4      	bne.n	18c0c <interface_socket_wait+0x24>
   18c22:	2000      	movs	r0, #0
   18c24:	b003      	add	sp, #12
   18c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c28:	20026594 	.word	0x20026594

00018c2c <interface_from_internal_id_search>:
   18c2c:	4b23      	ldr	r3, [pc, #140]	; (18cbc <interface_from_internal_id_search+0x90>)
   18c2e:	681a      	ldr	r2, [r3, #0]
   18c30:	b112      	cbz	r2, 18c38 <interface_from_internal_id_search+0xc>
   18c32:	699a      	ldr	r2, [r3, #24]
   18c34:	4282      	cmp	r2, r0
   18c36:	d032      	beq.n	18c9e <interface_from_internal_id_search+0x72>
   18c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18c3a:	b112      	cbz	r2, 18c42 <interface_from_internal_id_search+0x16>
   18c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   18c3e:	4282      	cmp	r2, r0
   18c40:	d02f      	beq.n	18ca2 <interface_from_internal_id_search+0x76>
   18c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18c44:	b112      	cbz	r2, 18c4c <interface_from_internal_id_search+0x20>
   18c46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18c48:	4282      	cmp	r2, r0
   18c4a:	d02c      	beq.n	18ca6 <interface_from_internal_id_search+0x7a>
   18c4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18c4e:	b11a      	cbz	r2, 18c58 <interface_from_internal_id_search+0x2c>
   18c50:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   18c54:	4282      	cmp	r2, r0
   18c56:	d028      	beq.n	18caa <interface_from_internal_id_search+0x7e>
   18c58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   18c5c:	b11a      	cbz	r2, 18c66 <interface_from_internal_id_search+0x3a>
   18c5e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   18c62:	4282      	cmp	r2, r0
   18c64:	d023      	beq.n	18cae <interface_from_internal_id_search+0x82>
   18c66:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18c6a:	b11a      	cbz	r2, 18c74 <interface_from_internal_id_search+0x48>
   18c6c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   18c70:	4282      	cmp	r2, r0
   18c72:	d01e      	beq.n	18cb2 <interface_from_internal_id_search+0x86>
   18c74:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18c78:	b11a      	cbz	r2, 18c82 <interface_from_internal_id_search+0x56>
   18c7a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   18c7e:	4282      	cmp	r2, r0
   18c80:	d019      	beq.n	18cb6 <interface_from_internal_id_search+0x8a>
   18c82:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18c86:	b13a      	cbz	r2, 18c98 <interface_from_internal_id_search+0x6c>
   18c88:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   18c8c:	4283      	cmp	r3, r0
   18c8e:	bf14      	ite	ne
   18c90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18c94:	2007      	moveq	r0, #7
   18c96:	4770      	bx	lr
   18c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c9c:	4770      	bx	lr
   18c9e:	2000      	movs	r0, #0
   18ca0:	4770      	bx	lr
   18ca2:	2001      	movs	r0, #1
   18ca4:	4770      	bx	lr
   18ca6:	2002      	movs	r0, #2
   18ca8:	4770      	bx	lr
   18caa:	2003      	movs	r0, #3
   18cac:	4770      	bx	lr
   18cae:	2004      	movs	r0, #4
   18cb0:	4770      	bx	lr
   18cb2:	2005      	movs	r0, #5
   18cb4:	4770      	bx	lr
   18cb6:	2006      	movs	r0, #6
   18cb8:	4770      	bx	lr
   18cba:	bf00      	nop
   18cbc:	20026594 	.word	0x20026594

00018cc0 <interface_socket_from_handle_get>:
   18cc0:	2807      	cmp	r0, #7
   18cc2:	d807      	bhi.n	18cd4 <interface_socket_from_handle_get+0x14>
   18cc4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18cc8:	4b03      	ldr	r3, [pc, #12]	; (18cd8 <interface_socket_from_handle_get+0x18>)
   18cca:	0080      	lsls	r0, r0, #2
   18ccc:	581a      	ldr	r2, [r3, r0]
   18cce:	b10a      	cbz	r2, 18cd4 <interface_socket_from_handle_get+0x14>
   18cd0:	4418      	add	r0, r3
   18cd2:	4770      	bx	lr
   18cd4:	2000      	movs	r0, #0
   18cd6:	4770      	bx	lr
   18cd8:	20026594 	.word	0x20026594

00018cdc <interface_socket_event_get>:
   18cdc:	b119      	cbz	r1, 18ce6 <interface_socket_event_get+0xa>
   18cde:	2807      	cmp	r0, #7
   18ce0:	d902      	bls.n	18ce8 <interface_socket_event_get+0xc>
   18ce2:	2310      	movs	r3, #16
   18ce4:	600b      	str	r3, [r1, #0]
   18ce6:	4770      	bx	lr
   18ce8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18cec:	4b07      	ldr	r3, [pc, #28]	; (18d0c <interface_socket_event_get+0x30>)
   18cee:	0080      	lsls	r0, r0, #2
   18cf0:	581a      	ldr	r2, [r3, r0]
   18cf2:	2a00      	cmp	r2, #0
   18cf4:	d0f5      	beq.n	18ce2 <interface_socket_event_get+0x6>
   18cf6:	581b      	ldr	r3, [r3, r0]
   18cf8:	0c1b      	lsrs	r3, r3, #16
   18cfa:	f003 020a 	and.w	r2, r3, #10
   18cfe:	2a0a      	cmp	r2, #10
   18d00:	bf14      	ite	ne
   18d02:	f003 030f 	andne.w	r3, r3, #15
   18d06:	f003 030d 	andeq.w	r3, r3, #13
   18d0a:	e7eb      	b.n	18ce4 <interface_socket_event_get+0x8>
   18d0c:	20026594 	.word	0x20026594

00018d10 <interface_socket_setopt>:
   18d10:	2807      	cmp	r0, #7
   18d12:	b570      	push	{r4, r5, r6, lr}
   18d14:	d827      	bhi.n	18d66 <interface_socket_setopt+0x56>
   18d16:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18d1a:	4c16      	ldr	r4, [pc, #88]	; (18d74 <interface_socket_setopt+0x64>)
   18d1c:	0080      	lsls	r0, r0, #2
   18d1e:	5825      	ldr	r5, [r4, r0]
   18d20:	b30d      	cbz	r5, 18d66 <interface_socket_setopt+0x56>
   18d22:	2901      	cmp	r1, #1
   18d24:	d119      	bne.n	18d5a <interface_socket_setopt+0x4a>
   18d26:	2a14      	cmp	r2, #20
   18d28:	d117      	bne.n	18d5a <interface_socket_setopt+0x4a>
   18d2a:	b183      	cbz	r3, 18d4e <interface_socket_setopt+0x3e>
   18d2c:	9a04      	ldr	r2, [sp, #16]
   18d2e:	2a08      	cmp	r2, #8
   18d30:	d10d      	bne.n	18d4e <interface_socket_setopt+0x3e>
   18d32:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   18d36:	685a      	ldr	r2, [r3, #4]
   18d38:	4e0f      	ldr	r6, [pc, #60]	; (18d78 <interface_socket_setopt+0x68>)
   18d3a:	6819      	ldr	r1, [r3, #0]
   18d3c:	fba6 2302 	umull	r2, r3, r6, r2
   18d40:	099b      	lsrs	r3, r3, #6
   18d42:	fb05 3301 	mla	r3, r5, r1, r3
   18d46:	4420      	add	r0, r4
   18d48:	6203      	str	r3, [r0, #32]
   18d4a:	2000      	movs	r0, #0
   18d4c:	bd70      	pop	{r4, r5, r6, pc}
   18d4e:	2016      	movs	r0, #22
   18d50:	f7f8 fe38 	bl	119c4 <bsd_os_errno_set>
   18d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d58:	bd70      	pop	{r4, r5, r6, pc}
   18d5a:	202a      	movs	r0, #42	; 0x2a
   18d5c:	f7f8 fe32 	bl	119c4 <bsd_os_errno_set>
   18d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d64:	bd70      	pop	{r4, r5, r6, pc}
   18d66:	2009      	movs	r0, #9
   18d68:	f7f8 fe2c 	bl	119c4 <bsd_os_errno_set>
   18d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d70:	bd70      	pop	{r4, r5, r6, pc}
   18d72:	bf00      	nop
   18d74:	20026594 	.word	0x20026594
   18d78:	10624dd3 	.word	0x10624dd3

00018d7c <interface_socket_getopt>:
   18d7c:	b570      	push	{r4, r5, r6, lr}
   18d7e:	2807      	cmp	r0, #7
   18d80:	9d04      	ldr	r5, [sp, #16]
   18d82:	d821      	bhi.n	18dc8 <interface_socket_getopt+0x4c>
   18d84:	4c13      	ldr	r4, [pc, #76]	; (18dd4 <interface_socket_getopt+0x58>)
   18d86:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18d8a:	0080      	lsls	r0, r0, #2
   18d8c:	5826      	ldr	r6, [r4, r0]
   18d8e:	4404      	add	r4, r0
   18d90:	b1d6      	cbz	r6, 18dc8 <interface_socket_getopt+0x4c>
   18d92:	2901      	cmp	r1, #1
   18d94:	d112      	bne.n	18dbc <interface_socket_getopt+0x40>
   18d96:	2a04      	cmp	r2, #4
   18d98:	d110      	bne.n	18dbc <interface_socket_getopt+0x40>
   18d9a:	b14b      	cbz	r3, 18db0 <interface_socket_getopt+0x34>
   18d9c:	b145      	cbz	r5, 18db0 <interface_socket_getopt+0x34>
   18d9e:	682a      	ldr	r2, [r5, #0]
   18da0:	2a04      	cmp	r2, #4
   18da2:	d105      	bne.n	18db0 <interface_socket_getopt+0x34>
   18da4:	2200      	movs	r2, #0
   18da6:	6861      	ldr	r1, [r4, #4]
   18da8:	4610      	mov	r0, r2
   18daa:	6019      	str	r1, [r3, #0]
   18dac:	6062      	str	r2, [r4, #4]
   18dae:	bd70      	pop	{r4, r5, r6, pc}
   18db0:	2016      	movs	r0, #22
   18db2:	f7f8 fe07 	bl	119c4 <bsd_os_errno_set>
   18db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18dba:	bd70      	pop	{r4, r5, r6, pc}
   18dbc:	202a      	movs	r0, #42	; 0x2a
   18dbe:	f7f8 fe01 	bl	119c4 <bsd_os_errno_set>
   18dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18dc6:	bd70      	pop	{r4, r5, r6, pc}
   18dc8:	2009      	movs	r0, #9
   18dca:	f7f8 fdfb 	bl	119c4 <bsd_os_errno_set>
   18dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18dd2:	bd70      	pop	{r4, r5, r6, pc}
   18dd4:	20026594 	.word	0x20026594

00018dd8 <interface_shutdown>:
   18dd8:	4b15      	ldr	r3, [pc, #84]	; (18e30 <interface_shutdown+0x58>)
   18dda:	681a      	ldr	r2, [r3, #0]
   18ddc:	b10a      	cbz	r2, 18de2 <interface_shutdown+0xa>
   18dde:	2270      	movs	r2, #112	; 0x70
   18de0:	605a      	str	r2, [r3, #4]
   18de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18de4:	b10a      	cbz	r2, 18dea <interface_shutdown+0x12>
   18de6:	2270      	movs	r2, #112	; 0x70
   18de8:	629a      	str	r2, [r3, #40]	; 0x28
   18dea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18dec:	b10a      	cbz	r2, 18df2 <interface_shutdown+0x1a>
   18dee:	2270      	movs	r2, #112	; 0x70
   18df0:	64da      	str	r2, [r3, #76]	; 0x4c
   18df2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18df4:	b10a      	cbz	r2, 18dfa <interface_shutdown+0x22>
   18df6:	2270      	movs	r2, #112	; 0x70
   18df8:	671a      	str	r2, [r3, #112]	; 0x70
   18dfa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   18dfe:	b112      	cbz	r2, 18e06 <interface_shutdown+0x2e>
   18e00:	2270      	movs	r2, #112	; 0x70
   18e02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   18e06:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18e0a:	b112      	cbz	r2, 18e12 <interface_shutdown+0x3a>
   18e0c:	2270      	movs	r2, #112	; 0x70
   18e0e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   18e12:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18e16:	b112      	cbz	r2, 18e1e <interface_shutdown+0x46>
   18e18:	2270      	movs	r2, #112	; 0x70
   18e1a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   18e1e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18e22:	b112      	cbz	r2, 18e2a <interface_shutdown+0x52>
   18e24:	2270      	movs	r2, #112	; 0x70
   18e26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18e2a:	2000      	movs	r0, #0
   18e2c:	4770      	bx	lr
   18e2e:	bf00      	nop
   18e30:	20026594 	.word	0x20026594

00018e34 <interface_socket_fcntl>:
   18e34:	2807      	cmp	r0, #7
   18e36:	b510      	push	{r4, lr}
   18e38:	d818      	bhi.n	18e6c <interface_socket_fcntl+0x38>
   18e3a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18e3e:	4c11      	ldr	r4, [pc, #68]	; (18e84 <interface_socket_fcntl+0x50>)
   18e40:	0083      	lsls	r3, r0, #2
   18e42:	58e0      	ldr	r0, [r4, r3]
   18e44:	b190      	cbz	r0, 18e6c <interface_socket_fcntl+0x38>
   18e46:	2901      	cmp	r1, #1
   18e48:	d005      	beq.n	18e56 <interface_socket_fcntl+0x22>
   18e4a:	2902      	cmp	r1, #2
   18e4c:	d114      	bne.n	18e78 <interface_socket_fcntl+0x44>
   18e4e:	58e0      	ldr	r0, [r4, r3]
   18e50:	f3c0 7000 	ubfx	r0, r0, #28, #1
   18e54:	bd10      	pop	{r4, pc}
   18e56:	f012 0001 	ands.w	r0, r2, #1
   18e5a:	58e2      	ldr	r2, [r4, r3]
   18e5c:	bf1a      	itte	ne
   18e5e:	2000      	movne	r0, #0
   18e60:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   18e64:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   18e68:	50e2      	str	r2, [r4, r3]
   18e6a:	bd10      	pop	{r4, pc}
   18e6c:	2009      	movs	r0, #9
   18e6e:	f7f8 fda9 	bl	119c4 <bsd_os_errno_set>
   18e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e76:	bd10      	pop	{r4, pc}
   18e78:	2016      	movs	r0, #22
   18e7a:	f7f8 fda3 	bl	119c4 <bsd_os_errno_set>
   18e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e82:	bd10      	pop	{r4, pc}
   18e84:	20026594 	.word	0x20026594

00018e88 <bsd_os_application_irq_handler>:
   18e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e8c:	4c33      	ldr	r4, [pc, #204]	; (18f5c <bsd_os_application_irq_handler+0xd4>)
   18e8e:	f7f8 fe4d 	bl	11b2c <bsd_os_application_irq_clear>
   18e92:	f04f 0803 	mov.w	r8, #3
   18e96:	4d32      	ldr	r5, [pc, #200]	; (18f60 <bsd_os_application_irq_handler+0xd8>)
   18e98:	4f32      	ldr	r7, [pc, #200]	; (18f64 <bsd_os_application_irq_handler+0xdc>)
   18e9a:	f104 0680 	add.w	r6, r4, #128	; 0x80
   18e9e:	e004      	b.n	18eaa <bsd_os_application_irq_handler+0x22>
   18ea0:	2b04      	cmp	r3, #4
   18ea2:	d006      	beq.n	18eb2 <bsd_os_application_irq_handler+0x2a>
   18ea4:	3408      	adds	r4, #8
   18ea6:	42b4      	cmp	r4, r6
   18ea8:	d03b      	beq.n	18f22 <bsd_os_application_irq_handler+0x9a>
   18eaa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18eae:	2b02      	cmp	r3, #2
   18eb0:	d1f6      	bne.n	18ea0 <bsd_os_application_irq_handler+0x18>
   18eb2:	6820      	ldr	r0, [r4, #0]
   18eb4:	882a      	ldrh	r2, [r5, #0]
   18eb6:	6803      	ldr	r3, [r0, #0]
   18eb8:	b29b      	uxth	r3, r3
   18eba:	429a      	cmp	r2, r3
   18ebc:	d033      	beq.n	18f26 <bsd_os_application_irq_handler+0x9e>
   18ebe:	8a2a      	ldrh	r2, [r5, #16]
   18ec0:	429a      	cmp	r2, r3
   18ec2:	d032      	beq.n	18f2a <bsd_os_application_irq_handler+0xa2>
   18ec4:	8c2a      	ldrh	r2, [r5, #32]
   18ec6:	429a      	cmp	r2, r3
   18ec8:	d031      	beq.n	18f2e <bsd_os_application_irq_handler+0xa6>
   18eca:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   18ecc:	429a      	cmp	r2, r3
   18ece:	d030      	beq.n	18f32 <bsd_os_application_irq_handler+0xaa>
   18ed0:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   18ed4:	429a      	cmp	r2, r3
   18ed6:	d036      	beq.n	18f46 <bsd_os_application_irq_handler+0xbe>
   18ed8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   18edc:	429a      	cmp	r2, r3
   18ede:	d034      	beq.n	18f4a <bsd_os_application_irq_handler+0xc2>
   18ee0:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   18ee4:	429a      	cmp	r2, r3
   18ee6:	d032      	beq.n	18f4e <bsd_os_application_irq_handler+0xc6>
   18ee8:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   18eec:	429a      	cmp	r2, r3
   18eee:	d030      	beq.n	18f52 <bsd_os_application_irq_handler+0xca>
   18ef0:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   18ef4:	429a      	cmp	r2, r3
   18ef6:	d02e      	beq.n	18f56 <bsd_os_application_irq_handler+0xce>
   18ef8:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   18efc:	429a      	cmp	r2, r3
   18efe:	bf08      	it	eq
   18f00:	2309      	moveq	r3, #9
   18f02:	d1cf      	bne.n	18ea4 <bsd_os_application_irq_handler+0x1c>
   18f04:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   18f08:	685a      	ldr	r2, [r3, #4]
   18f0a:	68d9      	ldr	r1, [r3, #12]
   18f0c:	4790      	blx	r2
   18f0e:	b990      	cbnz	r0, 18f36 <bsd_os_application_irq_handler+0xae>
   18f10:	2201      	movs	r2, #1
   18f12:	6820      	ldr	r0, [r4, #0]
   18f14:	f804 2c04 	strb.w	r2, [r4, #-4]
   18f18:	68fb      	ldr	r3, [r7, #12]
   18f1a:	3408      	adds	r4, #8
   18f1c:	4798      	blx	r3
   18f1e:	42b4      	cmp	r4, r6
   18f20:	d1c3      	bne.n	18eaa <bsd_os_application_irq_handler+0x22>
   18f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f26:	2300      	movs	r3, #0
   18f28:	e7ec      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f2a:	2301      	movs	r3, #1
   18f2c:	e7ea      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f2e:	2302      	movs	r3, #2
   18f30:	e7e8      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f32:	2303      	movs	r3, #3
   18f34:	e7e6      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f36:	2802      	cmp	r0, #2
   18f38:	bf0a      	itet	eq
   18f3a:	2304      	moveq	r3, #4
   18f3c:	f804 8c04 	strbne.w	r8, [r4, #-4]
   18f40:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   18f44:	e7ae      	b.n	18ea4 <bsd_os_application_irq_handler+0x1c>
   18f46:	2304      	movs	r3, #4
   18f48:	e7dc      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f4a:	2305      	movs	r3, #5
   18f4c:	e7da      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f4e:	2306      	movs	r3, #6
   18f50:	e7d8      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f52:	2307      	movs	r3, #7
   18f54:	e7d6      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f56:	2308      	movs	r3, #8
   18f58:	e7d4      	b.n	18f04 <bsd_os_application_irq_handler+0x7c>
   18f5a:	bf00      	nop
   18f5c:	20020ab8 	.word	0x20020ab8
   18f60:	2002097c 	.word	0x2002097c
   18f64:	20020a1c 	.word	0x20020a1c

00018f68 <rpc_framework_init>:
   18f68:	b508      	push	{r3, lr}
   18f6a:	22a0      	movs	r2, #160	; 0xa0
   18f6c:	2100      	movs	r1, #0
   18f6e:	4802      	ldr	r0, [pc, #8]	; (18f78 <rpc_framework_init+0x10>)
   18f70:	f004 fb9b 	bl	1d6aa <memset>
   18f74:	2000      	movs	r0, #0
   18f76:	bd08      	pop	{r3, pc}
   18f78:	2002097c 	.word	0x2002097c

00018f7c <rpc_client_register>:
   18f7c:	8803      	ldrh	r3, [r0, #0]
   18f7e:	2b00      	cmp	r3, #0
   18f80:	d045      	beq.n	1900e <rpc_client_register+0x92>
   18f82:	6842      	ldr	r2, [r0, #4]
   18f84:	4601      	mov	r1, r0
   18f86:	2a00      	cmp	r2, #0
   18f88:	d050      	beq.n	1902c <rpc_client_register+0xb0>
   18f8a:	4a30      	ldr	r2, [pc, #192]	; (1904c <rpc_client_register+0xd0>)
   18f8c:	8810      	ldrh	r0, [r2, #0]
   18f8e:	4283      	cmp	r3, r0
   18f90:	d03d      	beq.n	1900e <rpc_client_register+0x92>
   18f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18f96:	8a14      	ldrh	r4, [r2, #16]
   18f98:	42a3      	cmp	r3, r4
   18f9a:	d035      	beq.n	19008 <rpc_client_register+0x8c>
   18f9c:	8c15      	ldrh	r5, [r2, #32]
   18f9e:	42ab      	cmp	r3, r5
   18fa0:	d032      	beq.n	19008 <rpc_client_register+0x8c>
   18fa2:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   18fa4:	42b3      	cmp	r3, r6
   18fa6:	d02f      	beq.n	19008 <rpc_client_register+0x8c>
   18fa8:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   18fac:	42bb      	cmp	r3, r7
   18fae:	d02b      	beq.n	19008 <rpc_client_register+0x8c>
   18fb0:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   18fb4:	4563      	cmp	r3, ip
   18fb6:	d027      	beq.n	19008 <rpc_client_register+0x8c>
   18fb8:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   18fbc:	4573      	cmp	r3, lr
   18fbe:	d023      	beq.n	19008 <rpc_client_register+0x8c>
   18fc0:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   18fc4:	4543      	cmp	r3, r8
   18fc6:	d01f      	beq.n	19008 <rpc_client_register+0x8c>
   18fc8:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   18fcc:	454b      	cmp	r3, r9
   18fce:	d01b      	beq.n	19008 <rpc_client_register+0x8c>
   18fd0:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   18fd4:	4553      	cmp	r3, sl
   18fd6:	d017      	beq.n	19008 <rpc_client_register+0x8c>
   18fd8:	b1e0      	cbz	r0, 19014 <rpc_client_register+0x98>
   18fda:	b35c      	cbz	r4, 19034 <rpc_client_register+0xb8>
   18fdc:	b365      	cbz	r5, 19038 <rpc_client_register+0xbc>
   18fde:	b36e      	cbz	r6, 1903c <rpc_client_register+0xc0>
   18fe0:	b377      	cbz	r7, 19040 <rpc_client_register+0xc4>
   18fe2:	f1bc 0f00 	cmp.w	ip, #0
   18fe6:	d02d      	beq.n	19044 <rpc_client_register+0xc8>
   18fe8:	f1be 0f00 	cmp.w	lr, #0
   18fec:	d020      	beq.n	19030 <rpc_client_register+0xb4>
   18fee:	f1b8 0f00 	cmp.w	r8, #0
   18ff2:	d029      	beq.n	19048 <rpc_client_register+0xcc>
   18ff4:	f1b9 0f00 	cmp.w	r9, #0
   18ff8:	d00b      	beq.n	19012 <rpc_client_register+0x96>
   18ffa:	2009      	movs	r0, #9
   18ffc:	f1ba 0f00 	cmp.w	sl, #0
   19000:	d008      	beq.n	19014 <rpc_client_register+0x98>
   19002:	2004      	movs	r0, #4
   19004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19008:	2007      	movs	r0, #7
   1900a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1900e:	2007      	movs	r0, #7
   19010:	4770      	bx	lr
   19012:	2008      	movs	r0, #8
   19014:	0100      	lsls	r0, r0, #4
   19016:	5213      	strh	r3, [r2, r0]
   19018:	684b      	ldr	r3, [r1, #4]
   1901a:	4402      	add	r2, r0
   1901c:	6053      	str	r3, [r2, #4]
   1901e:	688b      	ldr	r3, [r1, #8]
   19020:	2000      	movs	r0, #0
   19022:	6093      	str	r3, [r2, #8]
   19024:	68cb      	ldr	r3, [r1, #12]
   19026:	60d3      	str	r3, [r2, #12]
   19028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1902c:	200e      	movs	r0, #14
   1902e:	4770      	bx	lr
   19030:	2006      	movs	r0, #6
   19032:	e7ef      	b.n	19014 <rpc_client_register+0x98>
   19034:	2001      	movs	r0, #1
   19036:	e7ed      	b.n	19014 <rpc_client_register+0x98>
   19038:	2002      	movs	r0, #2
   1903a:	e7eb      	b.n	19014 <rpc_client_register+0x98>
   1903c:	2003      	movs	r0, #3
   1903e:	e7e9      	b.n	19014 <rpc_client_register+0x98>
   19040:	2004      	movs	r0, #4
   19042:	e7e7      	b.n	19014 <rpc_client_register+0x98>
   19044:	2005      	movs	r0, #5
   19046:	e7e5      	b.n	19014 <rpc_client_register+0x98>
   19048:	2007      	movs	r0, #7
   1904a:	e7e3      	b.n	19014 <rpc_client_register+0x98>
   1904c:	2002097c 	.word	0x2002097c

00019050 <rpc_transport_input>:
   19050:	b538      	push	{r3, r4, r5, lr}
   19052:	4a82      	ldr	r2, [pc, #520]	; (1925c <rpc_transport_input+0x20c>)
   19054:	680b      	ldr	r3, [r1, #0]
   19056:	8810      	ldrh	r0, [r2, #0]
   19058:	b29b      	uxth	r3, r3
   1905a:	4298      	cmp	r0, r3
   1905c:	d027      	beq.n	190ae <rpc_transport_input+0x5e>
   1905e:	8a10      	ldrh	r0, [r2, #16]
   19060:	4298      	cmp	r0, r3
   19062:	d024      	beq.n	190ae <rpc_transport_input+0x5e>
   19064:	8c10      	ldrh	r0, [r2, #32]
   19066:	4298      	cmp	r0, r3
   19068:	d021      	beq.n	190ae <rpc_transport_input+0x5e>
   1906a:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   1906c:	4298      	cmp	r0, r3
   1906e:	d01e      	beq.n	190ae <rpc_transport_input+0x5e>
   19070:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   19074:	4298      	cmp	r0, r3
   19076:	d01a      	beq.n	190ae <rpc_transport_input+0x5e>
   19078:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   1907c:	4298      	cmp	r0, r3
   1907e:	d016      	beq.n	190ae <rpc_transport_input+0x5e>
   19080:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   19084:	4298      	cmp	r0, r3
   19086:	d012      	beq.n	190ae <rpc_transport_input+0x5e>
   19088:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   1908c:	4298      	cmp	r0, r3
   1908e:	d00e      	beq.n	190ae <rpc_transport_input+0x5e>
   19090:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   19094:	4298      	cmp	r0, r3
   19096:	d00a      	beq.n	190ae <rpc_transport_input+0x5e>
   19098:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   1909c:	429a      	cmp	r2, r3
   1909e:	d006      	beq.n	190ae <rpc_transport_input+0x5e>
   190a0:	6888      	ldr	r0, [r1, #8]
   190a2:	b118      	cbz	r0, 190ac <rpc_transport_input+0x5c>
   190a4:	4b6e      	ldr	r3, [pc, #440]	; (19260 <rpc_transport_input+0x210>)
   190a6:	691b      	ldr	r3, [r3, #16]
   190a8:	4798      	blx	r3
   190aa:	2000      	movs	r0, #0
   190ac:	bd38      	pop	{r3, r4, r5, pc}
   190ae:	6888      	ldr	r0, [r1, #8]
   190b0:	2800      	cmp	r0, #0
   190b2:	f000 8098 	beq.w	191e6 <rpc_transport_input+0x196>
   190b6:	4a6b      	ldr	r2, [pc, #428]	; (19264 <rpc_transport_input+0x214>)
   190b8:	6814      	ldr	r4, [r2, #0]
   190ba:	2c00      	cmp	r4, #0
   190bc:	d03c      	beq.n	19138 <rpc_transport_input+0xe8>
   190be:	6894      	ldr	r4, [r2, #8]
   190c0:	2c00      	cmp	r4, #0
   190c2:	f000 809a 	beq.w	191fa <rpc_transport_input+0x1aa>
   190c6:	6914      	ldr	r4, [r2, #16]
   190c8:	2c00      	cmp	r4, #0
   190ca:	f000 809a 	beq.w	19202 <rpc_transport_input+0x1b2>
   190ce:	6994      	ldr	r4, [r2, #24]
   190d0:	2c00      	cmp	r4, #0
   190d2:	f000 809a 	beq.w	1920a <rpc_transport_input+0x1ba>
   190d6:	6a14      	ldr	r4, [r2, #32]
   190d8:	2c00      	cmp	r4, #0
   190da:	f000 809a 	beq.w	19212 <rpc_transport_input+0x1c2>
   190de:	6a94      	ldr	r4, [r2, #40]	; 0x28
   190e0:	2c00      	cmp	r4, #0
   190e2:	f000 8084 	beq.w	191ee <rpc_transport_input+0x19e>
   190e6:	6b14      	ldr	r4, [r2, #48]	; 0x30
   190e8:	2c00      	cmp	r4, #0
   190ea:	f000 8098 	beq.w	1921e <rpc_transport_input+0x1ce>
   190ee:	6b94      	ldr	r4, [r2, #56]	; 0x38
   190f0:	2c00      	cmp	r4, #0
   190f2:	f000 8096 	beq.w	19222 <rpc_transport_input+0x1d2>
   190f6:	6c14      	ldr	r4, [r2, #64]	; 0x40
   190f8:	2c00      	cmp	r4, #0
   190fa:	f000 8096 	beq.w	1922a <rpc_transport_input+0x1da>
   190fe:	6c94      	ldr	r4, [r2, #72]	; 0x48
   19100:	2c00      	cmp	r4, #0
   19102:	f000 8096 	beq.w	19232 <rpc_transport_input+0x1e2>
   19106:	6d14      	ldr	r4, [r2, #80]	; 0x50
   19108:	2c00      	cmp	r4, #0
   1910a:	f000 8096 	beq.w	1923a <rpc_transport_input+0x1ea>
   1910e:	6d94      	ldr	r4, [r2, #88]	; 0x58
   19110:	2c00      	cmp	r4, #0
   19112:	f000 8098 	beq.w	19246 <rpc_transport_input+0x1f6>
   19116:	6e14      	ldr	r4, [r2, #96]	; 0x60
   19118:	2c00      	cmp	r4, #0
   1911a:	f000 8098 	beq.w	1924e <rpc_transport_input+0x1fe>
   1911e:	6e94      	ldr	r4, [r2, #104]	; 0x68
   19120:	2c00      	cmp	r4, #0
   19122:	f000 8096 	beq.w	19252 <rpc_transport_input+0x202>
   19126:	6f14      	ldr	r4, [r2, #112]	; 0x70
   19128:	2c00      	cmp	r4, #0
   1912a:	f000 8094 	beq.w	19256 <rpc_transport_input+0x206>
   1912e:	6f94      	ldr	r4, [r2, #120]	; 0x78
   19130:	b10c      	cbz	r4, 19136 <rpc_transport_input+0xe6>
   19132:	2001      	movs	r0, #1
   19134:	bd38      	pop	{r3, r4, r5, pc}
   19136:	240f      	movs	r4, #15
   19138:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   1913c:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   19140:	80ab      	strh	r3, [r5, #4]
   19142:	4b49      	ldr	r3, [pc, #292]	; (19268 <rpc_transport_input+0x218>)
   19144:	781a      	ldrb	r2, [r3, #0]
   19146:	2a01      	cmp	r2, #1
   19148:	d053      	beq.n	191f2 <rpc_transport_input+0x1a2>
   1914a:	7a1a      	ldrb	r2, [r3, #8]
   1914c:	2a01      	cmp	r2, #1
   1914e:	d041      	beq.n	191d4 <rpc_transport_input+0x184>
   19150:	7c1a      	ldrb	r2, [r3, #16]
   19152:	2a01      	cmp	r2, #1
   19154:	d04f      	beq.n	191f6 <rpc_transport_input+0x1a6>
   19156:	7e1a      	ldrb	r2, [r3, #24]
   19158:	2a01      	cmp	r2, #1
   1915a:	d050      	beq.n	191fe <rpc_transport_input+0x1ae>
   1915c:	f893 2020 	ldrb.w	r2, [r3, #32]
   19160:	2a01      	cmp	r2, #1
   19162:	d050      	beq.n	19206 <rpc_transport_input+0x1b6>
   19164:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   19168:	2a01      	cmp	r2, #1
   1916a:	d050      	beq.n	1920e <rpc_transport_input+0x1be>
   1916c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   19170:	2a01      	cmp	r2, #1
   19172:	d03a      	beq.n	191ea <rpc_transport_input+0x19a>
   19174:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   19178:	2a01      	cmp	r2, #1
   1917a:	d04c      	beq.n	19216 <rpc_transport_input+0x1c6>
   1917c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   19180:	2a01      	cmp	r2, #1
   19182:	d04a      	beq.n	1921a <rpc_transport_input+0x1ca>
   19184:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   19188:	2a01      	cmp	r2, #1
   1918a:	d04c      	beq.n	19226 <rpc_transport_input+0x1d6>
   1918c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   19190:	2a01      	cmp	r2, #1
   19192:	d04c      	beq.n	1922e <rpc_transport_input+0x1de>
   19194:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   19198:	2a01      	cmp	r2, #1
   1919a:	d04c      	beq.n	19236 <rpc_transport_input+0x1e6>
   1919c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   191a0:	2a01      	cmp	r2, #1
   191a2:	d04c      	beq.n	1923e <rpc_transport_input+0x1ee>
   191a4:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   191a8:	2a01      	cmp	r2, #1
   191aa:	d04a      	beq.n	19242 <rpc_transport_input+0x1f2>
   191ac:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   191b0:	2a01      	cmp	r2, #1
   191b2:	d04a      	beq.n	1924a <rpc_transport_input+0x1fa>
   191b4:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   191b8:	2a01      	cmp	r2, #1
   191ba:	d00a      	beq.n	191d2 <rpc_transport_input+0x182>
   191bc:	2c10      	cmp	r4, #16
   191be:	d0b8      	beq.n	19132 <rpc_transport_input+0xe2>
   191c0:	2200      	movs	r2, #0
   191c2:	4b28      	ldr	r3, [pc, #160]	; (19264 <rpc_transport_input+0x214>)
   191c4:	2001      	movs	r0, #1
   191c6:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   191ca:	808a      	strh	r2, [r1, #4]
   191cc:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   191d0:	bd38      	pop	{r3, r4, r5, pc}
   191d2:	220f      	movs	r2, #15
   191d4:	2402      	movs	r4, #2
   191d6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   191da:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   191de:	6041      	str	r1, [r0, #4]
   191e0:	f7f8 fc9c 	bl	11b1c <bsd_os_application_irq_set>
   191e4:	e7a5      	b.n	19132 <rpc_transport_input+0xe2>
   191e6:	2410      	movs	r4, #16
   191e8:	e7ab      	b.n	19142 <rpc_transport_input+0xf2>
   191ea:	2206      	movs	r2, #6
   191ec:	e7f2      	b.n	191d4 <rpc_transport_input+0x184>
   191ee:	2405      	movs	r4, #5
   191f0:	e7a2      	b.n	19138 <rpc_transport_input+0xe8>
   191f2:	2200      	movs	r2, #0
   191f4:	e7ee      	b.n	191d4 <rpc_transport_input+0x184>
   191f6:	2202      	movs	r2, #2
   191f8:	e7ec      	b.n	191d4 <rpc_transport_input+0x184>
   191fa:	2401      	movs	r4, #1
   191fc:	e79c      	b.n	19138 <rpc_transport_input+0xe8>
   191fe:	2203      	movs	r2, #3
   19200:	e7e8      	b.n	191d4 <rpc_transport_input+0x184>
   19202:	2402      	movs	r4, #2
   19204:	e798      	b.n	19138 <rpc_transport_input+0xe8>
   19206:	2204      	movs	r2, #4
   19208:	e7e4      	b.n	191d4 <rpc_transport_input+0x184>
   1920a:	2403      	movs	r4, #3
   1920c:	e794      	b.n	19138 <rpc_transport_input+0xe8>
   1920e:	2205      	movs	r2, #5
   19210:	e7e0      	b.n	191d4 <rpc_transport_input+0x184>
   19212:	2404      	movs	r4, #4
   19214:	e790      	b.n	19138 <rpc_transport_input+0xe8>
   19216:	2207      	movs	r2, #7
   19218:	e7dc      	b.n	191d4 <rpc_transport_input+0x184>
   1921a:	2208      	movs	r2, #8
   1921c:	e7da      	b.n	191d4 <rpc_transport_input+0x184>
   1921e:	2406      	movs	r4, #6
   19220:	e78a      	b.n	19138 <rpc_transport_input+0xe8>
   19222:	2407      	movs	r4, #7
   19224:	e788      	b.n	19138 <rpc_transport_input+0xe8>
   19226:	2209      	movs	r2, #9
   19228:	e7d4      	b.n	191d4 <rpc_transport_input+0x184>
   1922a:	2408      	movs	r4, #8
   1922c:	e784      	b.n	19138 <rpc_transport_input+0xe8>
   1922e:	220a      	movs	r2, #10
   19230:	e7d0      	b.n	191d4 <rpc_transport_input+0x184>
   19232:	2409      	movs	r4, #9
   19234:	e780      	b.n	19138 <rpc_transport_input+0xe8>
   19236:	220b      	movs	r2, #11
   19238:	e7cc      	b.n	191d4 <rpc_transport_input+0x184>
   1923a:	240a      	movs	r4, #10
   1923c:	e77c      	b.n	19138 <rpc_transport_input+0xe8>
   1923e:	220c      	movs	r2, #12
   19240:	e7c8      	b.n	191d4 <rpc_transport_input+0x184>
   19242:	220d      	movs	r2, #13
   19244:	e7c6      	b.n	191d4 <rpc_transport_input+0x184>
   19246:	240b      	movs	r4, #11
   19248:	e776      	b.n	19138 <rpc_transport_input+0xe8>
   1924a:	220e      	movs	r2, #14
   1924c:	e7c2      	b.n	191d4 <rpc_transport_input+0x184>
   1924e:	240c      	movs	r4, #12
   19250:	e772      	b.n	19138 <rpc_transport_input+0xe8>
   19252:	240d      	movs	r4, #13
   19254:	e770      	b.n	19138 <rpc_transport_input+0xe8>
   19256:	240e      	movs	r4, #14
   19258:	e76e      	b.n	19138 <rpc_transport_input+0xe8>
   1925a:	bf00      	nop
   1925c:	2002097c 	.word	0x2002097c
   19260:	20020a1c 	.word	0x20020a1c
   19264:	20020a34 	.word	0x20020a34
   19268:	20020ab4 	.word	0x20020ab4

0001926c <rpc_transport_register>:
   1926c:	b4f0      	push	{r4, r5, r6, r7}
   1926e:	2900      	cmp	r1, #0
   19270:	d052      	beq.n	19318 <rpc_transport_register+0xac>
   19272:	2800      	cmp	r0, #0
   19274:	d050      	beq.n	19318 <rpc_transport_register+0xac>
   19276:	6883      	ldr	r3, [r0, #8]
   19278:	2b00      	cmp	r3, #0
   1927a:	d04d      	beq.n	19318 <rpc_transport_register+0xac>
   1927c:	6903      	ldr	r3, [r0, #16]
   1927e:	2b00      	cmp	r3, #0
   19280:	d04a      	beq.n	19318 <rpc_transport_register+0xac>
   19282:	6843      	ldr	r3, [r0, #4]
   19284:	2b00      	cmp	r3, #0
   19286:	d047      	beq.n	19318 <rpc_transport_register+0xac>
   19288:	68c3      	ldr	r3, [r0, #12]
   1928a:	2b00      	cmp	r3, #0
   1928c:	d044      	beq.n	19318 <rpc_transport_register+0xac>
   1928e:	6803      	ldr	r3, [r0, #0]
   19290:	2b00      	cmp	r3, #0
   19292:	d041      	beq.n	19318 <rpc_transport_register+0xac>
   19294:	6943      	ldr	r3, [r0, #20]
   19296:	2b00      	cmp	r3, #0
   19298:	d03e      	beq.n	19318 <rpc_transport_register+0xac>
   1929a:	2601      	movs	r6, #1
   1929c:	2500      	movs	r5, #0
   1929e:	4604      	mov	r4, r0
   192a0:	460f      	mov	r7, r1
   192a2:	4a1f      	ldr	r2, [pc, #124]	; (19320 <rpc_transport_register+0xb4>)
   192a4:	4b1f      	ldr	r3, [pc, #124]	; (19324 <rpc_transport_register+0xb8>)
   192a6:	f8df c080 	ldr.w	ip, [pc, #128]	; 19328 <rpc_transport_register+0xbc>
   192aa:	7416      	strb	r6, [r2, #16]
   192ac:	7616      	strb	r6, [r2, #24]
   192ae:	f882 6020 	strb.w	r6, [r2, #32]
   192b2:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   192b6:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   192ba:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   192be:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   192c2:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   192c6:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   192ca:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   192ce:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   192d2:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   192d6:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   192da:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   192de:	611d      	str	r5, [r3, #16]
   192e0:	619d      	str	r5, [r3, #24]
   192e2:	621d      	str	r5, [r3, #32]
   192e4:	629d      	str	r5, [r3, #40]	; 0x28
   192e6:	631d      	str	r5, [r3, #48]	; 0x30
   192e8:	639d      	str	r5, [r3, #56]	; 0x38
   192ea:	641d      	str	r5, [r3, #64]	; 0x40
   192ec:	649d      	str	r5, [r3, #72]	; 0x48
   192ee:	651d      	str	r5, [r3, #80]	; 0x50
   192f0:	659d      	str	r5, [r3, #88]	; 0x58
   192f2:	661d      	str	r5, [r3, #96]	; 0x60
   192f4:	669d      	str	r5, [r3, #104]	; 0x68
   192f6:	671d      	str	r5, [r3, #112]	; 0x70
   192f8:	679d      	str	r5, [r3, #120]	; 0x78
   192fa:	7016      	strb	r6, [r2, #0]
   192fc:	7216      	strb	r6, [r2, #8]
   192fe:	601d      	str	r5, [r3, #0]
   19300:	609d      	str	r5, [r3, #8]
   19302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   19304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   19308:	e894 0003 	ldmia.w	r4, {r0, r1}
   1930c:	e88c 0003 	stmia.w	ip, {r0, r1}
   19310:	603e      	str	r6, [r7, #0]
   19312:	4628      	mov	r0, r5
   19314:	bcf0      	pop	{r4, r5, r6, r7}
   19316:	4770      	bx	lr
   19318:	250e      	movs	r5, #14
   1931a:	4628      	mov	r0, r5
   1931c:	bcf0      	pop	{r4, r5, r6, r7}
   1931e:	4770      	bx	lr
   19320:	20020ab4 	.word	0x20020ab4
   19324:	20020a34 	.word	0x20020a34
   19328:	20020a1c 	.word	0x20020a1c

0001932c <rpc_transport_unregister>:
   1932c:	2800      	cmp	r0, #0
   1932e:	d03a      	beq.n	193a6 <rpc_transport_unregister+0x7a>
   19330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19334:	4680      	mov	r8, r0
   19336:	4c1d      	ldr	r4, [pc, #116]	; (193ac <rpc_transport_unregister+0x80>)
   19338:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   1933c:	68a3      	ldr	r3, [r4, #8]
   1933e:	3410      	adds	r4, #16
   19340:	b103      	cbz	r3, 19344 <rpc_transport_unregister+0x18>
   19342:	4798      	blx	r3
   19344:	42ac      	cmp	r4, r5
   19346:	d1f9      	bne.n	1933c <rpc_transport_unregister+0x10>
   19348:	f04f 0901 	mov.w	r9, #1
   1934c:	2600      	movs	r6, #0
   1934e:	4c18      	ldr	r4, [pc, #96]	; (193b0 <rpc_transport_unregister+0x84>)
   19350:	4d18      	ldr	r5, [pc, #96]	; (193b4 <rpc_transport_unregister+0x88>)
   19352:	f8df a064 	ldr.w	sl, [pc, #100]	; 193b8 <rpc_transport_unregister+0x8c>
   19356:	f104 0780 	add.w	r7, r4, #128	; 0x80
   1935a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1935e:	2b01      	cmp	r3, #1
   19360:	d005      	beq.n	1936e <rpc_transport_unregister+0x42>
   19362:	f8da 300c 	ldr.w	r3, [sl, #12]
   19366:	6820      	ldr	r0, [r4, #0]
   19368:	4798      	blx	r3
   1936a:	f804 9c04 	strb.w	r9, [r4, #-4]
   1936e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   19372:	3408      	adds	r4, #8
   19374:	b128      	cbz	r0, 19382 <rpc_transport_unregister+0x56>
   19376:	f8da 3010 	ldr.w	r3, [sl, #16]
   1937a:	4798      	blx	r3
   1937c:	802e      	strh	r6, [r5, #0]
   1937e:	f845 6c04 	str.w	r6, [r5, #-4]
   19382:	42bc      	cmp	r4, r7
   19384:	f105 0508 	add.w	r5, r5, #8
   19388:	d1e7      	bne.n	1935a <rpc_transport_unregister+0x2e>
   1938a:	f8d8 0000 	ldr.w	r0, [r8]
   1938e:	2218      	movs	r2, #24
   19390:	3801      	subs	r0, #1
   19392:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19396:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   1939a:	2100      	movs	r1, #0
   1939c:	f004 f985 	bl	1d6aa <memset>
   193a0:	2000      	movs	r0, #0
   193a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   193a6:	200e      	movs	r0, #14
   193a8:	4770      	bx	lr
   193aa:	bf00      	nop
   193ac:	2002097c 	.word	0x2002097c
   193b0:	20020ab8 	.word	0x20020ab8
   193b4:	20020a38 	.word	0x20020a38
   193b8:	20020a1c 	.word	0x20020a1c

000193bc <rpc_message_send>:
   193bc:	b168      	cbz	r0, 193da <rpc_message_send+0x1e>
   193be:	b171      	cbz	r1, 193de <rpc_message_send+0x22>
   193c0:	4a09      	ldr	r2, [pc, #36]	; (193e8 <rpc_message_send+0x2c>)
   193c2:	6853      	ldr	r3, [r2, #4]
   193c4:	b16b      	cbz	r3, 193e2 <rpc_message_send+0x26>
   193c6:	684b      	ldr	r3, [r1, #4]
   193c8:	8008      	strh	r0, [r1, #0]
   193ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   193ce:	f043 0302 	orr.w	r3, r3, #2
   193d2:	6812      	ldr	r2, [r2, #0]
   193d4:	604b      	str	r3, [r1, #4]
   193d6:	4608      	mov	r0, r1
   193d8:	4710      	bx	r2
   193da:	2007      	movs	r0, #7
   193dc:	4770      	bx	lr
   193de:	200e      	movs	r0, #14
   193e0:	4770      	bx	lr
   193e2:	2008      	movs	r0, #8
   193e4:	4770      	bx	lr
   193e6:	bf00      	nop
   193e8:	20020a1c 	.word	0x20020a1c

000193ec <rpc_message_alloc>:
   193ec:	b35a      	cbz	r2, 19446 <rpc_message_alloc+0x5a>
   193ee:	b330      	cbz	r0, 1943e <rpc_message_alloc+0x52>
   193f0:	2300      	movs	r3, #0
   193f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193f6:	4f15      	ldr	r7, [pc, #84]	; (1944c <rpc_message_alloc+0x60>)
   193f8:	6013      	str	r3, [r2, #0]
   193fa:	687b      	ldr	r3, [r7, #4]
   193fc:	b30b      	cbz	r3, 19442 <rpc_message_alloc+0x56>
   193fe:	4615      	mov	r5, r2
   19400:	460c      	mov	r4, r1
   19402:	4606      	mov	r6, r0
   19404:	b959      	cbnz	r1, 1941e <rpc_message_alloc+0x32>
   19406:	4798      	blx	r3
   19408:	4603      	mov	r3, r0
   1940a:	b1a8      	cbz	r0, 19438 <rpc_message_alloc+0x4c>
   1940c:	46a0      	mov	r8, r4
   1940e:	60dc      	str	r4, [r3, #12]
   19410:	f8c3 8008 	str.w	r8, [r3, #8]
   19414:	801e      	strh	r6, [r3, #0]
   19416:	602b      	str	r3, [r5, #0]
   19418:	2000      	movs	r0, #0
   1941a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1941e:	68bb      	ldr	r3, [r7, #8]
   19420:	4608      	mov	r0, r1
   19422:	4798      	blx	r3
   19424:	4680      	mov	r8, r0
   19426:	b138      	cbz	r0, 19438 <rpc_message_alloc+0x4c>
   19428:	687b      	ldr	r3, [r7, #4]
   1942a:	4798      	blx	r3
   1942c:	4603      	mov	r3, r0
   1942e:	2800      	cmp	r0, #0
   19430:	d1ed      	bne.n	1940e <rpc_message_alloc+0x22>
   19432:	693b      	ldr	r3, [r7, #16]
   19434:	4640      	mov	r0, r8
   19436:	4798      	blx	r3
   19438:	2004      	movs	r0, #4
   1943a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1943e:	2007      	movs	r0, #7
   19440:	4770      	bx	lr
   19442:	2008      	movs	r0, #8
   19444:	e7f9      	b.n	1943a <rpc_message_alloc+0x4e>
   19446:	200e      	movs	r0, #14
   19448:	4770      	bx	lr
   1944a:	bf00      	nop
   1944c:	20020a1c 	.word	0x20020a1c

00019450 <rpc_message_free>:
   19450:	2800      	cmp	r0, #0
   19452:	f000 808c 	beq.w	1956e <rpc_message_free+0x11e>
   19456:	2900      	cmp	r1, #0
   19458:	f000 80e9 	beq.w	1962e <rpc_message_free+0x1de>
   1945c:	b538      	push	{r3, r4, r5, lr}
   1945e:	4a83      	ldr	r2, [pc, #524]	; (1966c <rpc_message_free+0x21c>)
   19460:	6853      	ldr	r3, [r2, #4]
   19462:	2b00      	cmp	r3, #0
   19464:	f000 8085 	beq.w	19572 <rpc_message_free+0x122>
   19468:	4c81      	ldr	r4, [pc, #516]	; (19670 <rpc_message_free+0x220>)
   1946a:	4608      	mov	r0, r1
   1946c:	6863      	ldr	r3, [r4, #4]
   1946e:	4299      	cmp	r1, r3
   19470:	f000 8085 	beq.w	1957e <rpc_message_free+0x12e>
   19474:	68e3      	ldr	r3, [r4, #12]
   19476:	4298      	cmp	r0, r3
   19478:	f000 808e 	beq.w	19598 <rpc_message_free+0x148>
   1947c:	6963      	ldr	r3, [r4, #20]
   1947e:	4298      	cmp	r0, r3
   19480:	f000 8090 	beq.w	195a4 <rpc_message_free+0x154>
   19484:	69e3      	ldr	r3, [r4, #28]
   19486:	4298      	cmp	r0, r3
   19488:	f000 8092 	beq.w	195b0 <rpc_message_free+0x160>
   1948c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1948e:	4298      	cmp	r0, r3
   19490:	f000 8095 	beq.w	195be <rpc_message_free+0x16e>
   19494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19496:	4298      	cmp	r0, r3
   19498:	f000 8098 	beq.w	195cc <rpc_message_free+0x17c>
   1949c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1949e:	4298      	cmp	r0, r3
   194a0:	f000 809b 	beq.w	195da <rpc_message_free+0x18a>
   194a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   194a6:	4298      	cmp	r0, r3
   194a8:	f000 809e 	beq.w	195e8 <rpc_message_free+0x198>
   194ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   194ae:	4298      	cmp	r0, r3
   194b0:	f000 80a1 	beq.w	195f6 <rpc_message_free+0x1a6>
   194b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   194b6:	4298      	cmp	r0, r3
   194b8:	f000 80a4 	beq.w	19604 <rpc_message_free+0x1b4>
   194bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   194be:	4298      	cmp	r0, r3
   194c0:	f000 80a7 	beq.w	19612 <rpc_message_free+0x1c2>
   194c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   194c6:	4298      	cmp	r0, r3
   194c8:	f000 80aa 	beq.w	19620 <rpc_message_free+0x1d0>
   194cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   194ce:	4298      	cmp	r0, r3
   194d0:	f000 80af 	beq.w	19632 <rpc_message_free+0x1e2>
   194d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   194d6:	4298      	cmp	r0, r3
   194d8:	f000 80b2 	beq.w	19640 <rpc_message_free+0x1f0>
   194dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   194de:	4298      	cmp	r0, r3
   194e0:	f000 80b5 	beq.w	1964e <rpc_message_free+0x1fe>
   194e4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   194e6:	4283      	cmp	r3, r0
   194e8:	f000 80b8 	beq.w	1965c <rpc_message_free+0x20c>
   194ec:	68d3      	ldr	r3, [r2, #12]
   194ee:	4798      	blx	r3
   194f0:	7823      	ldrb	r3, [r4, #0]
   194f2:	2b04      	cmp	r3, #4
   194f4:	d03f      	beq.n	19576 <rpc_message_free+0x126>
   194f6:	7a23      	ldrb	r3, [r4, #8]
   194f8:	2b04      	cmp	r3, #4
   194fa:	d03c      	beq.n	19576 <rpc_message_free+0x126>
   194fc:	7c23      	ldrb	r3, [r4, #16]
   194fe:	2b04      	cmp	r3, #4
   19500:	d039      	beq.n	19576 <rpc_message_free+0x126>
   19502:	7e23      	ldrb	r3, [r4, #24]
   19504:	2b04      	cmp	r3, #4
   19506:	d036      	beq.n	19576 <rpc_message_free+0x126>
   19508:	f894 3020 	ldrb.w	r3, [r4, #32]
   1950c:	2b04      	cmp	r3, #4
   1950e:	d032      	beq.n	19576 <rpc_message_free+0x126>
   19510:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19514:	2b04      	cmp	r3, #4
   19516:	d02e      	beq.n	19576 <rpc_message_free+0x126>
   19518:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1951c:	2b04      	cmp	r3, #4
   1951e:	d02a      	beq.n	19576 <rpc_message_free+0x126>
   19520:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   19524:	2b04      	cmp	r3, #4
   19526:	d026      	beq.n	19576 <rpc_message_free+0x126>
   19528:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1952c:	2b04      	cmp	r3, #4
   1952e:	d022      	beq.n	19576 <rpc_message_free+0x126>
   19530:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   19534:	2b04      	cmp	r3, #4
   19536:	d01e      	beq.n	19576 <rpc_message_free+0x126>
   19538:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1953c:	2b04      	cmp	r3, #4
   1953e:	d01a      	beq.n	19576 <rpc_message_free+0x126>
   19540:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   19544:	2b04      	cmp	r3, #4
   19546:	d016      	beq.n	19576 <rpc_message_free+0x126>
   19548:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1954c:	2b04      	cmp	r3, #4
   1954e:	d012      	beq.n	19576 <rpc_message_free+0x126>
   19550:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   19554:	2b04      	cmp	r3, #4
   19556:	d00e      	beq.n	19576 <rpc_message_free+0x126>
   19558:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1955c:	2b04      	cmp	r3, #4
   1955e:	d00a      	beq.n	19576 <rpc_message_free+0x126>
   19560:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19564:	2b04      	cmp	r3, #4
   19566:	bf18      	it	ne
   19568:	2000      	movne	r0, #0
   1956a:	d004      	beq.n	19576 <rpc_message_free+0x126>
   1956c:	bd38      	pop	{r3, r4, r5, pc}
   1956e:	2007      	movs	r0, #7
   19570:	4770      	bx	lr
   19572:	2008      	movs	r0, #8
   19574:	bd38      	pop	{r3, r4, r5, pc}
   19576:	f7f8 fad1 	bl	11b1c <bsd_os_application_irq_set>
   1957a:	2000      	movs	r0, #0
   1957c:	bd38      	pop	{r3, r4, r5, pc}
   1957e:	7821      	ldrb	r1, [r4, #0]
   19580:	2903      	cmp	r1, #3
   19582:	f47f af77 	bne.w	19474 <rpc_message_free+0x24>
   19586:	2100      	movs	r1, #0
   19588:	2501      	movs	r5, #1
   1958a:	4618      	mov	r0, r3
   1958c:	68d2      	ldr	r2, [r2, #12]
   1958e:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   19592:	4790      	blx	r2
   19594:	2000      	movs	r0, #0
   19596:	bd38      	pop	{r3, r4, r5, pc}
   19598:	7a21      	ldrb	r1, [r4, #8]
   1959a:	2903      	cmp	r1, #3
   1959c:	f47f af6e 	bne.w	1947c <rpc_message_free+0x2c>
   195a0:	2101      	movs	r1, #1
   195a2:	e7f1      	b.n	19588 <rpc_message_free+0x138>
   195a4:	7c21      	ldrb	r1, [r4, #16]
   195a6:	2903      	cmp	r1, #3
   195a8:	f47f af6c 	bne.w	19484 <rpc_message_free+0x34>
   195ac:	2102      	movs	r1, #2
   195ae:	e7eb      	b.n	19588 <rpc_message_free+0x138>
   195b0:	7e21      	ldrb	r1, [r4, #24]
   195b2:	2903      	cmp	r1, #3
   195b4:	d0e8      	beq.n	19588 <rpc_message_free+0x138>
   195b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195b8:	4298      	cmp	r0, r3
   195ba:	f47f af6b 	bne.w	19494 <rpc_message_free+0x44>
   195be:	f894 1020 	ldrb.w	r1, [r4, #32]
   195c2:	2903      	cmp	r1, #3
   195c4:	f47f af66 	bne.w	19494 <rpc_message_free+0x44>
   195c8:	2104      	movs	r1, #4
   195ca:	e7dd      	b.n	19588 <rpc_message_free+0x138>
   195cc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   195d0:	2903      	cmp	r1, #3
   195d2:	f47f af63 	bne.w	1949c <rpc_message_free+0x4c>
   195d6:	2105      	movs	r1, #5
   195d8:	e7d6      	b.n	19588 <rpc_message_free+0x138>
   195da:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   195de:	2903      	cmp	r1, #3
   195e0:	f47f af60 	bne.w	194a4 <rpc_message_free+0x54>
   195e4:	2106      	movs	r1, #6
   195e6:	e7cf      	b.n	19588 <rpc_message_free+0x138>
   195e8:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   195ec:	2903      	cmp	r1, #3
   195ee:	f47f af5d 	bne.w	194ac <rpc_message_free+0x5c>
   195f2:	2107      	movs	r1, #7
   195f4:	e7c8      	b.n	19588 <rpc_message_free+0x138>
   195f6:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   195fa:	2903      	cmp	r1, #3
   195fc:	f47f af5a 	bne.w	194b4 <rpc_message_free+0x64>
   19600:	2108      	movs	r1, #8
   19602:	e7c1      	b.n	19588 <rpc_message_free+0x138>
   19604:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   19608:	2903      	cmp	r1, #3
   1960a:	f47f af57 	bne.w	194bc <rpc_message_free+0x6c>
   1960e:	2109      	movs	r1, #9
   19610:	e7ba      	b.n	19588 <rpc_message_free+0x138>
   19612:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   19616:	2903      	cmp	r1, #3
   19618:	f47f af54 	bne.w	194c4 <rpc_message_free+0x74>
   1961c:	210a      	movs	r1, #10
   1961e:	e7b3      	b.n	19588 <rpc_message_free+0x138>
   19620:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   19624:	2903      	cmp	r1, #3
   19626:	f47f af51 	bne.w	194cc <rpc_message_free+0x7c>
   1962a:	210b      	movs	r1, #11
   1962c:	e7ac      	b.n	19588 <rpc_message_free+0x138>
   1962e:	200e      	movs	r0, #14
   19630:	4770      	bx	lr
   19632:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   19636:	2903      	cmp	r1, #3
   19638:	f47f af4c 	bne.w	194d4 <rpc_message_free+0x84>
   1963c:	210c      	movs	r1, #12
   1963e:	e7a3      	b.n	19588 <rpc_message_free+0x138>
   19640:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   19644:	2903      	cmp	r1, #3
   19646:	f47f af49 	bne.w	194dc <rpc_message_free+0x8c>
   1964a:	210d      	movs	r1, #13
   1964c:	e79c      	b.n	19588 <rpc_message_free+0x138>
   1964e:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   19652:	2903      	cmp	r1, #3
   19654:	f47f af46 	bne.w	194e4 <rpc_message_free+0x94>
   19658:	210e      	movs	r1, #14
   1965a:	e795      	b.n	19588 <rpc_message_free+0x138>
   1965c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19660:	2b03      	cmp	r3, #3
   19662:	f47f af43 	bne.w	194ec <rpc_message_free+0x9c>
   19666:	4603      	mov	r3, r0
   19668:	210f      	movs	r1, #15
   1966a:	e78d      	b.n	19588 <rpc_message_free+0x138>
   1966c:	20020a1c 	.word	0x20020a1c
   19670:	20020ab4 	.word	0x20020ab4

00019674 <rpc_message_data_free>:
   19674:	2800      	cmp	r0, #0
   19676:	f000 8091 	beq.w	1979c <rpc_message_data_free+0x128>
   1967a:	2900      	cmp	r1, #0
   1967c:	f000 80e4 	beq.w	19848 <rpc_message_data_free+0x1d4>
   19680:	b538      	push	{r3, r4, r5, lr}
   19682:	4a81      	ldr	r2, [pc, #516]	; (19888 <rpc_message_data_free+0x214>)
   19684:	6853      	ldr	r3, [r2, #4]
   19686:	2b00      	cmp	r3, #0
   19688:	f000 808a 	beq.w	197a0 <rpc_message_data_free+0x12c>
   1968c:	4b7f      	ldr	r3, [pc, #508]	; (1988c <rpc_message_data_free+0x218>)
   1968e:	681c      	ldr	r4, [r3, #0]
   19690:	42a1      	cmp	r1, r4
   19692:	f000 8087 	beq.w	197a4 <rpc_message_data_free+0x130>
   19696:	689c      	ldr	r4, [r3, #8]
   19698:	42a1      	cmp	r1, r4
   1969a:	f000 808f 	beq.w	197bc <rpc_message_data_free+0x148>
   1969e:	691c      	ldr	r4, [r3, #16]
   196a0:	42a1      	cmp	r1, r4
   196a2:	f000 8091 	beq.w	197c8 <rpc_message_data_free+0x154>
   196a6:	699c      	ldr	r4, [r3, #24]
   196a8:	42a1      	cmp	r1, r4
   196aa:	f000 8093 	beq.w	197d4 <rpc_message_data_free+0x160>
   196ae:	6a1c      	ldr	r4, [r3, #32]
   196b0:	42a1      	cmp	r1, r4
   196b2:	f000 8095 	beq.w	197e0 <rpc_message_data_free+0x16c>
   196b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   196b8:	42a1      	cmp	r1, r4
   196ba:	f000 8097 	beq.w	197ec <rpc_message_data_free+0x178>
   196be:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   196c0:	42a1      	cmp	r1, r4
   196c2:	f000 8099 	beq.w	197f8 <rpc_message_data_free+0x184>
   196c6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   196c8:	42a1      	cmp	r1, r4
   196ca:	f000 809b 	beq.w	19804 <rpc_message_data_free+0x190>
   196ce:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   196d0:	42a1      	cmp	r1, r4
   196d2:	f000 809d 	beq.w	19810 <rpc_message_data_free+0x19c>
   196d6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   196d8:	42a1      	cmp	r1, r4
   196da:	f000 80a0 	beq.w	1981e <rpc_message_data_free+0x1aa>
   196de:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   196e0:	42a1      	cmp	r1, r4
   196e2:	f000 80a3 	beq.w	1982c <rpc_message_data_free+0x1b8>
   196e6:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   196e8:	42a1      	cmp	r1, r4
   196ea:	f000 80a6 	beq.w	1983a <rpc_message_data_free+0x1c6>
   196ee:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   196f0:	42a1      	cmp	r1, r4
   196f2:	f000 80ab 	beq.w	1984c <rpc_message_data_free+0x1d8>
   196f6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   196f8:	42a1      	cmp	r1, r4
   196fa:	f000 80ae 	beq.w	1985a <rpc_message_data_free+0x1e6>
   196fe:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   19700:	42a1      	cmp	r1, r4
   19702:	f000 80b1 	beq.w	19868 <rpc_message_data_free+0x1f4>
   19706:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   19708:	428c      	cmp	r4, r1
   1970a:	f000 80b4 	beq.w	19876 <rpc_message_data_free+0x202>
   1970e:	6913      	ldr	r3, [r2, #16]
   19710:	4608      	mov	r0, r1
   19712:	4798      	blx	r3
   19714:	4b5e      	ldr	r3, [pc, #376]	; (19890 <rpc_message_data_free+0x21c>)
   19716:	781a      	ldrb	r2, [r3, #0]
   19718:	2a04      	cmp	r2, #4
   1971a:	d03b      	beq.n	19794 <rpc_message_data_free+0x120>
   1971c:	7a1a      	ldrb	r2, [r3, #8]
   1971e:	2a04      	cmp	r2, #4
   19720:	d038      	beq.n	19794 <rpc_message_data_free+0x120>
   19722:	7c1a      	ldrb	r2, [r3, #16]
   19724:	2a04      	cmp	r2, #4
   19726:	d035      	beq.n	19794 <rpc_message_data_free+0x120>
   19728:	7e1a      	ldrb	r2, [r3, #24]
   1972a:	2a04      	cmp	r2, #4
   1972c:	d032      	beq.n	19794 <rpc_message_data_free+0x120>
   1972e:	f893 2020 	ldrb.w	r2, [r3, #32]
   19732:	2a04      	cmp	r2, #4
   19734:	d02e      	beq.n	19794 <rpc_message_data_free+0x120>
   19736:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1973a:	2a04      	cmp	r2, #4
   1973c:	d02a      	beq.n	19794 <rpc_message_data_free+0x120>
   1973e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   19742:	2a04      	cmp	r2, #4
   19744:	d026      	beq.n	19794 <rpc_message_data_free+0x120>
   19746:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1974a:	2a04      	cmp	r2, #4
   1974c:	d022      	beq.n	19794 <rpc_message_data_free+0x120>
   1974e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   19752:	2a04      	cmp	r2, #4
   19754:	d01e      	beq.n	19794 <rpc_message_data_free+0x120>
   19756:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   1975a:	2a04      	cmp	r2, #4
   1975c:	d01a      	beq.n	19794 <rpc_message_data_free+0x120>
   1975e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   19762:	2a04      	cmp	r2, #4
   19764:	d016      	beq.n	19794 <rpc_message_data_free+0x120>
   19766:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   1976a:	2a04      	cmp	r2, #4
   1976c:	d012      	beq.n	19794 <rpc_message_data_free+0x120>
   1976e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   19772:	2a04      	cmp	r2, #4
   19774:	d00e      	beq.n	19794 <rpc_message_data_free+0x120>
   19776:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   1977a:	2a04      	cmp	r2, #4
   1977c:	d00a      	beq.n	19794 <rpc_message_data_free+0x120>
   1977e:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   19782:	2a04      	cmp	r2, #4
   19784:	d006      	beq.n	19794 <rpc_message_data_free+0x120>
   19786:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1978a:	2b04      	cmp	r3, #4
   1978c:	bf18      	it	ne
   1978e:	2000      	movne	r0, #0
   19790:	d000      	beq.n	19794 <rpc_message_data_free+0x120>
   19792:	bd38      	pop	{r3, r4, r5, pc}
   19794:	f7f8 f9c2 	bl	11b1c <bsd_os_application_irq_set>
   19798:	2000      	movs	r0, #0
   1979a:	bd38      	pop	{r3, r4, r5, pc}
   1979c:	2007      	movs	r0, #7
   1979e:	4770      	bx	lr
   197a0:	2008      	movs	r0, #8
   197a2:	bd38      	pop	{r3, r4, r5, pc}
   197a4:	889c      	ldrh	r4, [r3, #4]
   197a6:	4284      	cmp	r4, r0
   197a8:	f47f af75 	bne.w	19696 <rpc_message_data_free+0x22>
   197ac:	2400      	movs	r4, #0
   197ae:	2000      	movs	r0, #0
   197b0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   197b4:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   197b8:	80a8      	strh	r0, [r5, #4]
   197ba:	e7a8      	b.n	1970e <rpc_message_data_free+0x9a>
   197bc:	899c      	ldrh	r4, [r3, #12]
   197be:	4284      	cmp	r4, r0
   197c0:	f47f af6d 	bne.w	1969e <rpc_message_data_free+0x2a>
   197c4:	2401      	movs	r4, #1
   197c6:	e7f2      	b.n	197ae <rpc_message_data_free+0x13a>
   197c8:	8a9c      	ldrh	r4, [r3, #20]
   197ca:	4284      	cmp	r4, r0
   197cc:	f47f af6b 	bne.w	196a6 <rpc_message_data_free+0x32>
   197d0:	2402      	movs	r4, #2
   197d2:	e7ec      	b.n	197ae <rpc_message_data_free+0x13a>
   197d4:	8b9c      	ldrh	r4, [r3, #28]
   197d6:	4284      	cmp	r4, r0
   197d8:	f47f af69 	bne.w	196ae <rpc_message_data_free+0x3a>
   197dc:	2403      	movs	r4, #3
   197de:	e7e6      	b.n	197ae <rpc_message_data_free+0x13a>
   197e0:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   197e2:	4284      	cmp	r4, r0
   197e4:	f47f af67 	bne.w	196b6 <rpc_message_data_free+0x42>
   197e8:	2404      	movs	r4, #4
   197ea:	e7e0      	b.n	197ae <rpc_message_data_free+0x13a>
   197ec:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   197ee:	4284      	cmp	r4, r0
   197f0:	f47f af65 	bne.w	196be <rpc_message_data_free+0x4a>
   197f4:	2405      	movs	r4, #5
   197f6:	e7da      	b.n	197ae <rpc_message_data_free+0x13a>
   197f8:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   197fa:	4284      	cmp	r4, r0
   197fc:	f47f af63 	bne.w	196c6 <rpc_message_data_free+0x52>
   19800:	2406      	movs	r4, #6
   19802:	e7d4      	b.n	197ae <rpc_message_data_free+0x13a>
   19804:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   19806:	4284      	cmp	r4, r0
   19808:	f47f af61 	bne.w	196ce <rpc_message_data_free+0x5a>
   1980c:	2407      	movs	r4, #7
   1980e:	e7ce      	b.n	197ae <rpc_message_data_free+0x13a>
   19810:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   19814:	4284      	cmp	r4, r0
   19816:	f47f af5e 	bne.w	196d6 <rpc_message_data_free+0x62>
   1981a:	2408      	movs	r4, #8
   1981c:	e7c7      	b.n	197ae <rpc_message_data_free+0x13a>
   1981e:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   19822:	4284      	cmp	r4, r0
   19824:	f47f af5b 	bne.w	196de <rpc_message_data_free+0x6a>
   19828:	2409      	movs	r4, #9
   1982a:	e7c0      	b.n	197ae <rpc_message_data_free+0x13a>
   1982c:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   19830:	4284      	cmp	r4, r0
   19832:	f47f af58 	bne.w	196e6 <rpc_message_data_free+0x72>
   19836:	240a      	movs	r4, #10
   19838:	e7b9      	b.n	197ae <rpc_message_data_free+0x13a>
   1983a:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   1983e:	4284      	cmp	r4, r0
   19840:	f47f af55 	bne.w	196ee <rpc_message_data_free+0x7a>
   19844:	240b      	movs	r4, #11
   19846:	e7b2      	b.n	197ae <rpc_message_data_free+0x13a>
   19848:	200e      	movs	r0, #14
   1984a:	4770      	bx	lr
   1984c:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   19850:	4284      	cmp	r4, r0
   19852:	f47f af50 	bne.w	196f6 <rpc_message_data_free+0x82>
   19856:	240c      	movs	r4, #12
   19858:	e7a9      	b.n	197ae <rpc_message_data_free+0x13a>
   1985a:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   1985e:	4284      	cmp	r4, r0
   19860:	f47f af4d 	bne.w	196fe <rpc_message_data_free+0x8a>
   19864:	240d      	movs	r4, #13
   19866:	e7a2      	b.n	197ae <rpc_message_data_free+0x13a>
   19868:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   1986c:	4284      	cmp	r4, r0
   1986e:	f47f af4a 	bne.w	19706 <rpc_message_data_free+0x92>
   19872:	240e      	movs	r4, #14
   19874:	e79b      	b.n	197ae <rpc_message_data_free+0x13a>
   19876:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   1987a:	4284      	cmp	r4, r0
   1987c:	bf08      	it	eq
   1987e:	240f      	moveq	r4, #15
   19880:	f47f af45 	bne.w	1970e <rpc_message_data_free+0x9a>
   19884:	e793      	b.n	197ae <rpc_message_data_free+0x13a>
   19886:	bf00      	nop
   19888:	20020a1c 	.word	0x20020a1c
   1988c:	20020a34 	.word	0x20020a34
   19890:	20020ab4 	.word	0x20020ab4

00019894 <packet_free_cb>:
   19894:	b510      	push	{r4, lr}
   19896:	4604      	mov	r4, r0
   19898:	b118      	cbz	r0, 198a2 <packet_free_cb+0xe>
   1989a:	6800      	ldr	r0, [r0, #0]
   1989c:	b108      	cbz	r0, 198a2 <packet_free_cb+0xe>
   1989e:	f001 f829 	bl	1a8f4 <rpc_gnss_client_data_free>
   198a2:	68a0      	ldr	r0, [r4, #8]
   198a4:	b118      	cbz	r0, 198ae <packet_free_cb+0x1a>
   198a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   198aa:	f7fa b93b 	b.w	13b24 <nrf_free>
   198ae:	bd10      	pop	{r4, pc}

000198b0 <rpc_gnss_event_handler>:
   198b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198b4:	4b64      	ldr	r3, [pc, #400]	; (19a48 <rpc_gnss_event_handler+0x198>)
   198b6:	4606      	mov	r6, r0
   198b8:	6800      	ldr	r0, [r0, #0]
   198ba:	881b      	ldrh	r3, [r3, #0]
   198bc:	6802      	ldr	r2, [r0, #0]
   198be:	4f63      	ldr	r7, [pc, #396]	; (19a4c <rpc_gnss_event_handler+0x19c>)
   198c0:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   198c4:	b084      	sub	sp, #16
   198c6:	460d      	mov	r5, r1
   198c8:	6038      	str	r0, [r7, #0]
   198ca:	d038      	beq.n	1993e <rpc_gnss_event_handler+0x8e>
   198cc:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   198d0:	33ff      	adds	r3, #255	; 0xff
   198d2:	b29b      	uxth	r3, r3
   198d4:	2b02      	cmp	r3, #2
   198d6:	d810      	bhi.n	198fa <rpc_gnss_event_handler+0x4a>
   198d8:	4c5d      	ldr	r4, [pc, #372]	; (19a50 <rpc_gnss_event_handler+0x1a0>)
   198da:	6823      	ldr	r3, [r4, #0]
   198dc:	075a      	lsls	r2, r3, #29
   198de:	d410      	bmi.n	19902 <rpc_gnss_event_handler+0x52>
   198e0:	6823      	ldr	r3, [r4, #0]
   198e2:	079b      	lsls	r3, r3, #30
   198e4:	d503      	bpl.n	198ee <rpc_gnss_event_handler+0x3e>
   198e6:	f244 0303 	movw	r3, #16387	; 0x4003
   198ea:	429d      	cmp	r5, r3
   198ec:	d009      	beq.n	19902 <rpc_gnss_event_handler+0x52>
   198ee:	6830      	ldr	r0, [r6, #0]
   198f0:	b118      	cbz	r0, 198fa <rpc_gnss_event_handler+0x4a>
   198f2:	f000 ffff 	bl	1a8f4 <rpc_gnss_client_data_free>
   198f6:	2300      	movs	r3, #0
   198f8:	603b      	str	r3, [r7, #0]
   198fa:	2000      	movs	r0, #0
   198fc:	b004      	add	sp, #16
   198fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19902:	2002      	movs	r0, #2
   19904:	f7fa f904 	bl	13b10 <nrf_malloc>
   19908:	4680      	mov	r8, r0
   1990a:	2800      	cmp	r0, #0
   1990c:	f000 8093 	beq.w	19a36 <rpc_gnss_event_handler+0x186>
   19910:	2302      	movs	r3, #2
   19912:	8005      	strh	r5, [r0, #0]
   19914:	6831      	ldr	r1, [r6, #0]
   19916:	6872      	ldr	r2, [r6, #4]
   19918:	484e      	ldr	r0, [pc, #312]	; (19a54 <rpc_gnss_event_handler+0x1a4>)
   1991a:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   1991e:	6800      	ldr	r0, [r0, #0]
   19920:	9303      	str	r3, [sp, #12]
   19922:	6803      	ldr	r3, [r0, #0]
   19924:	4669      	mov	r1, sp
   19926:	685b      	ldr	r3, [r3, #4]
   19928:	4798      	blx	r3
   1992a:	3001      	adds	r0, #1
   1992c:	d070      	beq.n	19a10 <rpc_gnss_event_handler+0x160>
   1992e:	2000      	movs	r0, #0
   19930:	6823      	ldr	r3, [r4, #0]
   19932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19936:	6023      	str	r3, [r4, #0]
   19938:	b004      	add	sp, #16
   1993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1993e:	4c44      	ldr	r4, [pc, #272]	; (19a50 <rpc_gnss_event_handler+0x1a0>)
   19940:	6823      	ldr	r3, [r4, #0]
   19942:	01d9      	lsls	r1, r3, #7
   19944:	d523      	bpl.n	1998e <rpc_gnss_event_handler+0xde>
   19946:	f242 1302 	movw	r3, #8450	; 0x2102
   1994a:	429d      	cmp	r5, r3
   1994c:	d11f      	bne.n	1998e <rpc_gnss_event_handler+0xde>
   1994e:	6843      	ldr	r3, [r0, #4]
   19950:	b91b      	cbnz	r3, 1995a <rpc_gnss_event_handler+0xaa>
   19952:	6823      	ldr	r3, [r4, #0]
   19954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   19958:	6023      	str	r3, [r4, #0]
   1995a:	6823      	ldr	r3, [r4, #0]
   1995c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19960:	6023      	str	r3, [r4, #0]
   19962:	6823      	ldr	r3, [r4, #0]
   19964:	025a      	lsls	r2, r3, #9
   19966:	d430      	bmi.n	199ca <rpc_gnss_event_handler+0x11a>
   19968:	f242 0305 	movw	r3, #8197	; 0x2005
   1996c:	429d      	cmp	r5, r3
   1996e:	d12c      	bne.n	199ca <rpc_gnss_event_handler+0x11a>
   19970:	6823      	ldr	r3, [r4, #0]
   19972:	0299      	lsls	r1, r3, #10
   19974:	d529      	bpl.n	199ca <rpc_gnss_event_handler+0x11a>
   19976:	6843      	ldr	r3, [r0, #4]
   19978:	2b00      	cmp	r3, #0
   1997a:	d157      	bne.n	19a2c <rpc_gnss_event_handler+0x17c>
   1997c:	6823      	ldr	r3, [r4, #0]
   1997e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19982:	6023      	str	r3, [r4, #0]
   19984:	6823      	ldr	r3, [r4, #0]
   19986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1998a:	6023      	str	r3, [r4, #0]
   1998c:	e01d      	b.n	199ca <rpc_gnss_event_handler+0x11a>
   1998e:	6823      	ldr	r3, [r4, #0]
   19990:	025b      	lsls	r3, r3, #9
   19992:	d50e      	bpl.n	199b2 <rpc_gnss_event_handler+0x102>
   19994:	f242 1303 	movw	r3, #8451	; 0x2103
   19998:	429d      	cmp	r5, r3
   1999a:	d10a      	bne.n	199b2 <rpc_gnss_event_handler+0x102>
   1999c:	6843      	ldr	r3, [r0, #4]
   1999e:	b91b      	cbnz	r3, 199a8 <rpc_gnss_event_handler+0xf8>
   199a0:	6823      	ldr	r3, [r4, #0]
   199a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   199a6:	6023      	str	r3, [r4, #0]
   199a8:	6823      	ldr	r3, [r4, #0]
   199aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   199ae:	6023      	str	r3, [r4, #0]
   199b0:	e00b      	b.n	199ca <rpc_gnss_event_handler+0x11a>
   199b2:	f242 0301 	movw	r3, #8193	; 0x2001
   199b6:	429d      	cmp	r5, r3
   199b8:	d10c      	bne.n	199d4 <rpc_gnss_event_handler+0x124>
   199ba:	6843      	ldr	r3, [r0, #4]
   199bc:	b92b      	cbnz	r3, 199ca <rpc_gnss_event_handler+0x11a>
   199be:	6823      	ldr	r3, [r4, #0]
   199c0:	0c1b      	lsrs	r3, r3, #16
   199c2:	041b      	lsls	r3, r3, #16
   199c4:	f043 0302 	orr.w	r3, r3, #2
   199c8:	6023      	str	r3, [r4, #0]
   199ca:	f000 ff93 	bl	1a8f4 <rpc_gnss_client_data_free>
   199ce:	2300      	movs	r3, #0
   199d0:	603b      	str	r3, [r7, #0]
   199d2:	e77b      	b.n	198cc <rpc_gnss_event_handler+0x1c>
   199d4:	f242 0304 	movw	r3, #8196	; 0x2004
   199d8:	429d      	cmp	r5, r3
   199da:	d1c5      	bne.n	19968 <rpc_gnss_event_handler+0xb8>
   199dc:	6843      	ldr	r3, [r0, #4]
   199de:	b993      	cbnz	r3, 19a06 <rpc_gnss_event_handler+0x156>
   199e0:	6823      	ldr	r3, [r4, #0]
   199e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   199e6:	6023      	str	r3, [r4, #0]
   199e8:	6823      	ldr	r3, [r4, #0]
   199ea:	b29b      	uxth	r3, r3
   199ec:	2b03      	cmp	r3, #3
   199ee:	6823      	ldr	r3, [r4, #0]
   199f0:	d016      	beq.n	19a20 <rpc_gnss_event_handler+0x170>
   199f2:	b29b      	uxth	r3, r3
   199f4:	2b04      	cmp	r3, #4
   199f6:	d1d7      	bne.n	199a8 <rpc_gnss_event_handler+0xf8>
   199f8:	6823      	ldr	r3, [r4, #0]
   199fa:	0c1b      	lsrs	r3, r3, #16
   199fc:	041b      	lsls	r3, r3, #16
   199fe:	f043 0302 	orr.w	r3, r3, #2
   19a02:	6023      	str	r3, [r4, #0]
   19a04:	e7d0      	b.n	199a8 <rpc_gnss_event_handler+0xf8>
   19a06:	6823      	ldr	r3, [r4, #0]
   19a08:	b29b      	uxth	r3, r3
   19a0a:	2b03      	cmp	r3, #3
   19a0c:	d1cc      	bne.n	199a8 <rpc_gnss_event_handler+0xf8>
   19a0e:	e7f3      	b.n	199f8 <rpc_gnss_event_handler+0x148>
   19a10:	4640      	mov	r0, r8
   19a12:	f7fa f887 	bl	13b24 <nrf_free>
   19a16:	6830      	ldr	r0, [r6, #0]
   19a18:	2800      	cmp	r0, #0
   19a1a:	f47f af6a 	bne.w	198f2 <rpc_gnss_event_handler+0x42>
   19a1e:	e76c      	b.n	198fa <rpc_gnss_event_handler+0x4a>
   19a20:	0c1b      	lsrs	r3, r3, #16
   19a22:	041b      	lsls	r3, r3, #16
   19a24:	f043 0304 	orr.w	r3, r3, #4
   19a28:	6023      	str	r3, [r4, #0]
   19a2a:	e7bd      	b.n	199a8 <rpc_gnss_event_handler+0xf8>
   19a2c:	6823      	ldr	r3, [r4, #0]
   19a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19a32:	6023      	str	r3, [r4, #0]
   19a34:	e7c9      	b.n	199ca <rpc_gnss_event_handler+0x11a>
   19a36:	6830      	ldr	r0, [r6, #0]
   19a38:	2800      	cmp	r0, #0
   19a3a:	f43f af5e 	beq.w	198fa <rpc_gnss_event_handler+0x4a>
   19a3e:	f000 ff59 	bl	1a8f4 <rpc_gnss_client_data_free>
   19a42:	f8c7 8000 	str.w	r8, [r7]
   19a46:	e758      	b.n	198fa <rpc_gnss_event_handler+0x4a>
   19a48:	20024e4c 	.word	0x20024e4c
   19a4c:	20020b38 	.word	0x20020b38
   19a50:	20020b34 	.word	0x20020b34
   19a54:	20020b3c 	.word	0x20020b3c

00019a58 <gnss_interface_write>:
   19a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a5c:	4a75      	ldr	r2, [pc, #468]	; (19c34 <gnss_interface_write+0x1dc>)
   19a5e:	b09f      	sub	sp, #124	; 0x7c
   19a60:	4290      	cmp	r0, r2
   19a62:	9d26      	ldr	r5, [sp, #152]	; 0x98
   19a64:	f040 80d4 	bne.w	19c10 <gnss_interface_write+0x1b8>
   19a68:	2900      	cmp	r1, #0
   19a6a:	f000 80c9 	beq.w	19c00 <gnss_interface_write+0x1a8>
   19a6e:	2d00      	cmp	r5, #0
   19a70:	f000 80c6 	beq.w	19c00 <gnss_interface_write+0x1a8>
   19a74:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19a76:	2a02      	cmp	r2, #2
   19a78:	f040 80c2 	bne.w	19c00 <gnss_interface_write+0x1a8>
   19a7c:	4c6e      	ldr	r4, [pc, #440]	; (19c38 <gnss_interface_write+0x1e0>)
   19a7e:	6822      	ldr	r2, [r4, #0]
   19a80:	b292      	uxth	r2, r2
   19a82:	2a02      	cmp	r2, #2
   19a84:	d004      	beq.n	19a90 <gnss_interface_write+0x38>
   19a86:	6822      	ldr	r2, [r4, #0]
   19a88:	b292      	uxth	r2, r2
   19a8a:	2a04      	cmp	r2, #4
   19a8c:	f040 80c6 	bne.w	19c1c <gnss_interface_write+0x1c4>
   19a90:	0798      	lsls	r0, r3, #30
   19a92:	f100 80c9 	bmi.w	19c28 <gnss_interface_write+0x1d0>
   19a96:	6820      	ldr	r0, [r4, #0]
   19a98:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   19a9c:	d065      	beq.n	19b6a <gnss_interface_write+0x112>
   19a9e:	6822      	ldr	r2, [r4, #0]
   19aa0:	882b      	ldrh	r3, [r5, #0]
   19aa2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   19aa6:	6022      	str	r2, [r4, #0]
   19aa8:	6822      	ldr	r2, [r4, #0]
   19aaa:	3b01      	subs	r3, #1
   19aac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   19ab0:	6022      	str	r2, [r4, #0]
   19ab2:	2b07      	cmp	r3, #7
   19ab4:	f200 80a4 	bhi.w	19c00 <gnss_interface_write+0x1a8>
   19ab8:	e8df f003 	tbb	[pc, r3]
   19abc:	696e7378 	.word	0x696e7378
   19ac0:	045f5a64 	.word	0x045f5a64
   19ac4:	4608      	mov	r0, r1
   19ac6:	a902      	add	r1, sp, #8
   19ac8:	f000 fec8 	bl	1a85c <rpc_gnss_serialize_integrity>
   19acc:	2172      	movs	r1, #114	; 0x72
   19ace:	4668      	mov	r0, sp
   19ad0:	f000 fede 	bl	1a890 <rpc_gnss_client_request_alloc>
   19ad4:	4605      	mov	r5, r0
   19ad6:	9800      	ldr	r0, [sp, #0]
   19ad8:	2d00      	cmp	r5, #0
   19ada:	d16c      	bne.n	19bb6 <gnss_interface_write+0x15e>
   19adc:	2800      	cmp	r0, #0
   19ade:	d071      	beq.n	19bc4 <gnss_interface_write+0x16c>
   19ae0:	f241 0605 	movw	r6, #4101	; 0x1005
   19ae4:	f04f 0c49 	mov.w	ip, #73	; 0x49
   19ae8:	2272      	movs	r2, #114	; 0x72
   19aea:	f04f 0e76 	mov.w	lr, #118	; 0x76
   19aee:	f04f 0943 	mov.w	r9, #67	; 0x43
   19af2:	f04f 0854 	mov.w	r8, #84	; 0x54
   19af6:	4f51      	ldr	r7, [pc, #324]	; (19c3c <gnss_interface_write+0x1e4>)
   19af8:	a91e      	add	r1, sp, #120	; 0x78
   19afa:	883b      	ldrh	r3, [r7, #0]
   19afc:	f880 c00f 	strb.w	ip, [r0, #15]
   19b00:	3301      	adds	r3, #1
   19b02:	b29b      	uxth	r3, r3
   19b04:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   19b08:	f841 cd74 	str.w	ip, [r1, #-116]!
   19b0c:	7145      	strb	r5, [r0, #5]
   19b0e:	7185      	strb	r5, [r0, #6]
   19b10:	71c5      	strb	r5, [r0, #7]
   19b12:	7205      	strb	r5, [r0, #8]
   19b14:	7245      	strb	r5, [r0, #9]
   19b16:	7285      	strb	r5, [r0, #10]
   19b18:	72c5      	strb	r5, [r0, #11]
   19b1a:	7102      	strb	r2, [r0, #4]
   19b1c:	f880 900c 	strb.w	r9, [r0, #12]
   19b20:	f880 800d 	strb.w	r8, [r0, #13]
   19b24:	f880 e00e 	strb.w	lr, [r0, #14]
   19b28:	6800      	ldr	r0, [r0, #0]
   19b2a:	803b      	strh	r3, [r7, #0]
   19b2c:	f003 fd93 	bl	1d656 <memcpy>
   19b30:	4b43      	ldr	r3, [pc, #268]	; (19c40 <gnss_interface_write+0x1e8>)
   19b32:	4631      	mov	r1, r6
   19b34:	9800      	ldr	r0, [sp, #0]
   19b36:	601d      	str	r5, [r3, #0]
   19b38:	f000 febe 	bl	1a8b8 <rpc_gnss_client_request_send>
   19b3c:	2800      	cmp	r0, #0
   19b3e:	d148      	bne.n	19bd2 <gnss_interface_write+0x17a>
   19b40:	6823      	ldr	r3, [r4, #0]
   19b42:	0299      	lsls	r1, r3, #10
   19b44:	d50d      	bpl.n	19b62 <gnss_interface_write+0x10a>
   19b46:	4e3f      	ldr	r6, [pc, #252]	; (19c44 <gnss_interface_write+0x1ec>)
   19b48:	4d3a      	ldr	r5, [pc, #232]	; (19c34 <gnss_interface_write+0x1dc>)
   19b4a:	e001      	b.n	19b50 <gnss_interface_write+0xf8>
   19b4c:	2800      	cmp	r0, #0
   19b4e:	d150      	bne.n	19bf2 <gnss_interface_write+0x19a>
   19b50:	4631      	mov	r1, r6
   19b52:	4628      	mov	r0, r5
   19b54:	f7f7 fea2 	bl	1189c <bsd_os_timedwait>
   19b58:	6823      	ldr	r3, [r4, #0]
   19b5a:	029a      	lsls	r2, r3, #10
   19b5c:	d4f6      	bmi.n	19b4c <gnss_interface_write+0xf4>
   19b5e:	2800      	cmp	r0, #0
   19b60:	d147      	bne.n	19bf2 <gnss_interface_write+0x19a>
   19b62:	6823      	ldr	r3, [r4, #0]
   19b64:	039b      	lsls	r3, r3, #14
   19b66:	d53f      	bpl.n	19be8 <gnss_interface_write+0x190>
   19b68:	2000      	movs	r0, #0
   19b6a:	b01f      	add	sp, #124	; 0x7c
   19b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19b70:	4608      	mov	r0, r1
   19b72:	a902      	add	r1, sp, #8
   19b74:	f000 fe2a 	bl	1a7cc <rpc_gnss_serialize_time_and_sv_tow>
   19b78:	e7a8      	b.n	19acc <gnss_interface_write+0x74>
   19b7a:	4608      	mov	r0, r1
   19b7c:	a902      	add	r1, sp, #8
   19b7e:	f000 fe4d 	bl	1a81c <rpc_gnss_serialize_location>
   19b82:	e7a3      	b.n	19acc <gnss_interface_write+0x74>
   19b84:	4608      	mov	r0, r1
   19b86:	a902      	add	r1, sp, #8
   19b88:	f000 fe06 	bl	1a798 <rpc_gnss_serialize_nequick>
   19b8c:	e79e      	b.n	19acc <gnss_interface_write+0x74>
   19b8e:	4608      	mov	r0, r1
   19b90:	a902      	add	r1, sp, #8
   19b92:	f000 fddd 	bl	1a750 <rpc_gnss_serialize_klob>
   19b96:	e799      	b.n	19acc <gnss_interface_write+0x74>
   19b98:	4608      	mov	r0, r1
   19b9a:	a902      	add	r1, sp, #8
   19b9c:	f000 fda6 	bl	1a6ec <rpc_gnss_serialize_alm>
   19ba0:	e794      	b.n	19acc <gnss_interface_write+0x74>
   19ba2:	4608      	mov	r0, r1
   19ba4:	a902      	add	r1, sp, #8
   19ba6:	f000 fd4f 	bl	1a648 <rpc_gnss_serialize_ephe>
   19baa:	e78f      	b.n	19acc <gnss_interface_write+0x74>
   19bac:	4608      	mov	r0, r1
   19bae:	a902      	add	r1, sp, #8
   19bb0:	f000 fd28 	bl	1a604 <rpc_gnss_serialize_utc>
   19bb4:	e78a      	b.n	19acc <gnss_interface_write+0x74>
   19bb6:	b128      	cbz	r0, 19bc4 <gnss_interface_write+0x16c>
   19bb8:	6803      	ldr	r3, [r0, #0]
   19bba:	b11b      	cbz	r3, 19bc4 <gnss_interface_write+0x16c>
   19bbc:	4618      	mov	r0, r3
   19bbe:	f000 fe99 	bl	1a8f4 <rpc_gnss_client_data_free>
   19bc2:	9800      	ldr	r0, [sp, #0]
   19bc4:	f000 fe8e 	bl	1a8e4 <rpc_gnss_client_message_free>
   19bc8:	2023      	movs	r0, #35	; 0x23
   19bca:	f7f7 fefb 	bl	119c4 <bsd_os_errno_set>
   19bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bd2:	6823      	ldr	r3, [r4, #0]
   19bd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19bd8:	6023      	str	r3, [r4, #0]
   19bda:	6823      	ldr	r3, [r4, #0]
   19bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19be0:	6023      	str	r3, [r4, #0]
   19be2:	b01f      	add	sp, #124	; 0x7c
   19be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19be8:	2005      	movs	r0, #5
   19bea:	6823      	ldr	r3, [r4, #0]
   19bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19bf0:	6023      	str	r3, [r4, #0]
   19bf2:	f7f7 fee7 	bl	119c4 <bsd_os_errno_set>
   19bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bfa:	b01f      	add	sp, #124	; 0x7c
   19bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19c00:	2016      	movs	r0, #22
   19c02:	f7f7 fedf 	bl	119c4 <bsd_os_errno_set>
   19c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c0a:	b01f      	add	sp, #124	; 0x7c
   19c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19c10:	2009      	movs	r0, #9
   19c12:	f7f7 fed7 	bl	119c4 <bsd_os_errno_set>
   19c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c1a:	e7a6      	b.n	19b6a <gnss_interface_write+0x112>
   19c1c:	2039      	movs	r0, #57	; 0x39
   19c1e:	f7f7 fed1 	bl	119c4 <bsd_os_errno_set>
   19c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c26:	e7a0      	b.n	19b6a <gnss_interface_write+0x112>
   19c28:	202d      	movs	r0, #45	; 0x2d
   19c2a:	f7f7 fecb 	bl	119c4 <bsd_os_errno_set>
   19c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c32:	e79a      	b.n	19b6a <gnss_interface_write+0x112>
   19c34:	49765443 	.word	0x49765443
   19c38:	20020b34 	.word	0x20020b34
   19c3c:	20024e4c 	.word	0x20024e4c
   19c40:	20020b38 	.word	0x20020b38
   19c44:	2002c55c 	.word	0x2002c55c

00019c48 <gnss_interface_read>:
   19c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c4c:	4c4a      	ldr	r4, [pc, #296]	; (19d78 <gnss_interface_read+0x130>)
   19c4e:	b0b7      	sub	sp, #220	; 0xdc
   19c50:	42a0      	cmp	r0, r4
   19c52:	f040 81ec 	bne.w	1a02e <gnss_interface_read+0x3e6>
   19c56:	4688      	mov	r8, r1
   19c58:	2900      	cmp	r1, #0
   19c5a:	f000 81e2 	beq.w	1a022 <gnss_interface_read+0x3da>
   19c5e:	2ad7      	cmp	r2, #215	; 0xd7
   19c60:	f240 81df 	bls.w	1a022 <gnss_interface_read+0x3da>
   19c64:	4d45      	ldr	r5, [pc, #276]	; (19d7c <gnss_interface_read+0x134>)
   19c66:	4699      	mov	r9, r3
   19c68:	682b      	ldr	r3, [r5, #0]
   19c6a:	b29b      	uxth	r3, r3
   19c6c:	2b04      	cmp	r3, #4
   19c6e:	d004      	beq.n	19c7a <gnss_interface_read+0x32>
   19c70:	682b      	ldr	r3, [r5, #0]
   19c72:	b29b      	uxth	r3, r3
   19c74:	2b02      	cmp	r3, #2
   19c76:	f040 81e0 	bne.w	1a03a <gnss_interface_read+0x3f2>
   19c7a:	2102      	movs	r1, #2
   19c7c:	20b6      	movs	r0, #182	; 0xb6
   19c7e:	2400      	movs	r4, #0
   19c80:	682b      	ldr	r3, [r5, #0]
   19c82:	f10d 020e 	add.w	r2, sp, #14
   19c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19c8a:	602b      	str	r3, [r5, #0]
   19c8c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 19d84 <gnss_interface_read+0x13c>
   19c90:	ab08      	add	r3, sp, #32
   19c92:	4f3b      	ldr	r7, [pc, #236]	; (19d80 <gnss_interface_read+0x138>)
   19c94:	4e38      	ldr	r6, [pc, #224]	; (19d78 <gnss_interface_read+0x130>)
   19c96:	9005      	str	r0, [sp, #20]
   19c98:	9107      	str	r1, [sp, #28]
   19c9a:	9304      	str	r3, [sp, #16]
   19c9c:	9206      	str	r2, [sp, #24]
   19c9e:	ea09 0b01 	and.w	fp, r9, r1
   19ca2:	f8da 0000 	ldr.w	r0, [sl]
   19ca6:	464a      	mov	r2, r9
   19ca8:	6803      	ldr	r3, [r0, #0]
   19caa:	a904      	add	r1, sp, #16
   19cac:	689b      	ldr	r3, [r3, #8]
   19cae:	4798      	blx	r3
   19cb0:	2800      	cmp	r0, #0
   19cb2:	da11      	bge.n	19cd8 <gnss_interface_read+0x90>
   19cb4:	f1bb 0f00 	cmp.w	fp, #0
   19cb8:	d138      	bne.n	19d2c <gnss_interface_read+0xe4>
   19cba:	682b      	ldr	r3, [r5, #0]
   19cbc:	03d8      	lsls	r0, r3, #15
   19cbe:	d4f0      	bmi.n	19ca2 <gnss_interface_read+0x5a>
   19cc0:	b10c      	cbz	r4, 19cc6 <gnss_interface_read+0x7e>
   19cc2:	e7ee      	b.n	19ca2 <gnss_interface_read+0x5a>
   19cc4:	b930      	cbnz	r0, 19cd4 <gnss_interface_read+0x8c>
   19cc6:	4639      	mov	r1, r7
   19cc8:	4630      	mov	r0, r6
   19cca:	f7f7 fde7 	bl	1189c <bsd_os_timedwait>
   19cce:	682b      	ldr	r3, [r5, #0]
   19cd0:	03d9      	lsls	r1, r3, #15
   19cd2:	d5f7      	bpl.n	19cc4 <gnss_interface_read+0x7c>
   19cd4:	4604      	mov	r4, r0
   19cd6:	e7e4      	b.n	19ca2 <gnss_interface_read+0x5a>
   19cd8:	f244 0202 	movw	r2, #16386	; 0x4002
   19cdc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19ce0:	4293      	cmp	r3, r2
   19ce2:	d039      	beq.n	19d58 <gnss_interface_read+0x110>
   19ce4:	f244 0201 	movw	r2, #16385	; 0x4001
   19ce8:	4293      	cmp	r3, r2
   19cea:	d04d      	beq.n	19d88 <gnss_interface_read+0x140>
   19cec:	f244 0203 	movw	r2, #16387	; 0x4003
   19cf0:	4293      	cmp	r3, r2
   19cf2:	f040 8196 	bne.w	1a022 <gnss_interface_read+0x3da>
   19cf6:	2201      	movs	r2, #1
   19cf8:	2414      	movs	r4, #20
   19cfa:	9b08      	ldr	r3, [sp, #32]
   19cfc:	f888 2000 	strb.w	r2, [r8]
   19d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19d02:	f8c8 3008 	str.w	r3, [r8, #8]
   19d06:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19d0a:	e9c8 2303 	strd	r2, r3, [r8, #12]
   19d0e:	f8da 0000 	ldr.w	r0, [sl]
   19d12:	6803      	ldr	r3, [r0, #0]
   19d14:	68db      	ldr	r3, [r3, #12]
   19d16:	4798      	blx	r3
   19d18:	2800      	cmp	r0, #0
   19d1a:	dd03      	ble.n	19d24 <gnss_interface_read+0xdc>
   19d1c:	682b      	ldr	r3, [r5, #0]
   19d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19d22:	602b      	str	r3, [r5, #0]
   19d24:	4620      	mov	r0, r4
   19d26:	b037      	add	sp, #220	; 0xdc
   19d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d2c:	1c42      	adds	r2, r0, #1
   19d2e:	4603      	mov	r3, r0
   19d30:	d1d2      	bne.n	19cd8 <gnss_interface_read+0x90>
   19d32:	b93c      	cbnz	r4, 19d44 <gnss_interface_read+0xfc>
   19d34:	461c      	mov	r4, r3
   19d36:	2023      	movs	r0, #35	; 0x23
   19d38:	f7f7 fe44 	bl	119c4 <bsd_os_errno_set>
   19d3c:	4620      	mov	r0, r4
   19d3e:	b037      	add	sp, #220	; 0xdc
   19d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d44:	9001      	str	r0, [sp, #4]
   19d46:	4620      	mov	r0, r4
   19d48:	f7f7 fe3c 	bl	119c4 <bsd_os_errno_set>
   19d4c:	9b01      	ldr	r3, [sp, #4]
   19d4e:	461c      	mov	r4, r3
   19d50:	4620      	mov	r0, r4
   19d52:	b037      	add	sp, #220	; 0xdc
   19d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d58:	a808      	add	r0, sp, #32
   19d5a:	f003 fc41 	bl	1d5e0 <strlen>
   19d5e:	2302      	movs	r3, #2
   19d60:	1c44      	adds	r4, r0, #1
   19d62:	b2a4      	uxth	r4, r4
   19d64:	f808 3b08 	strb.w	r3, [r8], #8
   19d68:	4622      	mov	r2, r4
   19d6a:	a908      	add	r1, sp, #32
   19d6c:	4640      	mov	r0, r8
   19d6e:	f003 fc72 	bl	1d656 <memcpy>
   19d72:	3408      	adds	r4, #8
   19d74:	e7cb      	b.n	19d0e <gnss_interface_read+0xc6>
   19d76:	bf00      	nop
   19d78:	49765443 	.word	0x49765443
   19d7c:	20020b34 	.word	0x20020b34
   19d80:	2002c55c 	.word	0x2002c55c
   19d84:	20020b3c 	.word	0x20020b3c
   19d88:	2401      	movs	r4, #1
   19d8a:	a809      	add	r0, sp, #36	; 0x24
   19d8c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   19d8e:	e9c8 0102 	strd	r0, r1, [r8, #8]
   19d92:	e9c8 2304 	strd	r2, r3, [r8, #16]
   19d96:	990d      	ldr	r1, [sp, #52]	; 0x34
   19d98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19d9a:	f888 4000 	strb.w	r4, [r8]
   19d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19da0:	f8c8 1018 	str.w	r1, [r8, #24]
   19da4:	9910      	ldr	r1, [sp, #64]	; 0x40
   19da6:	f8c8 201c 	str.w	r2, [r8, #28]
   19daa:	f8c8 3020 	str.w	r3, [r8, #32]
   19dae:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   19db2:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   19db6:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   19dba:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   19dbe:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   19dc2:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   19dc6:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   19dca:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   19dce:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   19dd2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   19dd6:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   19dda:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   19dde:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   19de2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19de6:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   19dea:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   19dee:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   19df2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   19df6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   19dfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19dfc:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   19e00:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   19e04:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   19e08:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19e0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19e0e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19e12:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   19e16:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   19e1a:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   19e1e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19e22:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   19e26:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   19e2a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   19e2e:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   19e32:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   19e36:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   19e3a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   19e3e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   19e42:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   19e46:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   19e4a:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   19e4e:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   19e52:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   19e56:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   19e5a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   19e5e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   19e62:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   19e66:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   19e6a:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   19e6e:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   19e72:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   19e76:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   19e7a:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   19e7e:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   19e82:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   19e86:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   19e8a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   19e8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19e90:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   19e94:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19e98:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   19e9c:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19ea0:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   19ea4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   19ea8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19eac:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   19eb0:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   19eb4:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   19eb8:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   19ebc:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   19ec0:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   19ec4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   19ec8:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   19ecc:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   19ed0:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   19ed4:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   19ed8:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   19edc:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   19ee0:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   19ee4:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   19ee8:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   19eec:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   19ef0:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   19ef4:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   19ef8:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   19efc:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   19f00:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   19f04:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   19f08:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   19f0c:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   19f10:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   19f14:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   19f16:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   19f1a:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   19f1e:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19f22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19f24:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19f28:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   19f2c:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   19f30:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   19f34:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19f38:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   19f3c:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   19f40:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   19f44:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   19f48:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   19f4c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   19f50:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   19f54:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   19f58:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   19f5c:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   19f60:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   19f64:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   19f68:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   19f6c:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   19f70:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   19f74:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   19f78:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   19f7c:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   19f80:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   19f84:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   19f88:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   19f8c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   19f90:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   19f94:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   19f98:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   19f9c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   19fa0:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   19fa4:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   19fa8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   19faa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19fae:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   19fb2:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   19fb6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19fba:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19fbe:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   19fc2:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   19fc6:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   19fca:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   19fce:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   19fd2:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   19fd6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   19fda:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   19fde:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   19fe2:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   19fe6:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   19fea:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   19fee:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   19ff2:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   19ff6:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   19ffa:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   19ffe:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   1a002:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1a006:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1a00a:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   1a00e:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1a012:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   1a016:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   1a01a:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   1a01e:	24d8      	movs	r4, #216	; 0xd8
   1a020:	e675      	b.n	19d0e <gnss_interface_read+0xc6>
   1a022:	2016      	movs	r0, #22
   1a024:	f7f7 fcce 	bl	119c4 <bsd_os_errno_set>
   1a028:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a02c:	e67a      	b.n	19d24 <gnss_interface_read+0xdc>
   1a02e:	2009      	movs	r0, #9
   1a030:	f7f7 fcc8 	bl	119c4 <bsd_os_errno_set>
   1a034:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a038:	e674      	b.n	19d24 <gnss_interface_read+0xdc>
   1a03a:	2039      	movs	r0, #57	; 0x39
   1a03c:	f7f7 fcc2 	bl	119c4 <bsd_os_errno_set>
   1a040:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a044:	e66e      	b.n	19d24 <gnss_interface_read+0xdc>
   1a046:	bf00      	nop

0001a048 <gnss_interface_setopt>:
   1a048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a04c:	f241 1402 	movw	r4, #4354	; 0x1102
   1a050:	4222      	tst	r2, r4
   1a052:	b086      	sub	sp, #24
   1a054:	4d9c      	ldr	r5, [pc, #624]	; (1a2c8 <gnss_interface_setopt+0x280>)
   1a056:	d004      	beq.n	1a062 <gnss_interface_setopt+0x1a>
   1a058:	682c      	ldr	r4, [r5, #0]
   1a05a:	b2a4      	uxth	r4, r4
   1a05c:	2c02      	cmp	r4, #2
   1a05e:	f040 8104 	bne.w	1a26a <gnss_interface_setopt+0x222>
   1a062:	682c      	ldr	r4, [r5, #0]
   1a064:	0264      	lsls	r4, r4, #9
   1a066:	f100 8128 	bmi.w	1a2ba <gnss_interface_setopt+0x272>
   1a06a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a06e:	f040 811e 	bne.w	1a2ae <gnss_interface_setopt+0x266>
   1a072:	4996      	ldr	r1, [pc, #600]	; (1a2cc <gnss_interface_setopt+0x284>)
   1a074:	4288      	cmp	r0, r1
   1a076:	f040 8114 	bne.w	1a2a2 <gnss_interface_setopt+0x25a>
   1a07a:	3a01      	subs	r2, #1
   1a07c:	2a08      	cmp	r2, #8
   1a07e:	f200 80ec 	bhi.w	1a25a <gnss_interface_setopt+0x212>
   1a082:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a086:	0075      	.short	0x0075
   1a088:	00c200d8 	.word	0x00c200d8
   1a08c:	008100cc 	.word	0x008100cc
   1a090:	0098008c 	.word	0x0098008c
   1a094:	000900af 	.word	0x000900af
   1a098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a09a:	2a01      	cmp	r2, #1
   1a09c:	f040 80dd 	bne.w	1a25a <gnss_interface_setopt+0x212>
   1a0a0:	f241 1603 	movw	r6, #4355	; 0x1103
   1a0a4:	2240      	movs	r2, #64	; 0x40
   1a0a6:	4637      	mov	r7, r6
   1a0a8:	781b      	ldrb	r3, [r3, #0]
   1a0aa:	9202      	str	r2, [sp, #8]
   1a0ac:	f88d 3015 	strb.w	r3, [sp, #21]
   1a0b0:	682b      	ldr	r3, [r5, #0]
   1a0b2:	2112      	movs	r1, #18
   1a0b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1a0b8:	4668      	mov	r0, sp
   1a0ba:	602b      	str	r3, [r5, #0]
   1a0bc:	f000 fbe8 	bl	1a890 <rpc_gnss_client_request_alloc>
   1a0c0:	4604      	mov	r4, r0
   1a0c2:	9800      	ldr	r0, [sp, #0]
   1a0c4:	2c00      	cmp	r4, #0
   1a0c6:	f040 80d6 	bne.w	1a276 <gnss_interface_setopt+0x22e>
   1a0ca:	2800      	cmp	r0, #0
   1a0cc:	f000 80da 	beq.w	1a284 <gnss_interface_setopt+0x23c>
   1a0d0:	2212      	movs	r2, #18
   1a0d2:	f04f 0876 	mov.w	r8, #118	; 0x76
   1a0d6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a0da:	f04f 0a43 	mov.w	sl, #67	; 0x43
   1a0de:	f04f 0954 	mov.w	r9, #84	; 0x54
   1a0e2:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 1a2d4 <gnss_interface_setopt+0x28c>
   1a0e6:	a906      	add	r1, sp, #24
   1a0e8:	f8bc 3000 	ldrh.w	r3, [ip]
   1a0ec:	f880 800e 	strb.w	r8, [r0, #14]
   1a0f0:	3301      	adds	r3, #1
   1a0f2:	b29b      	uxth	r3, r3
   1a0f4:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1a0f8:	f841 6d14 	str.w	r6, [r1, #-20]!
   1a0fc:	7144      	strb	r4, [r0, #5]
   1a0fe:	7184      	strb	r4, [r0, #6]
   1a100:	71c4      	strb	r4, [r0, #7]
   1a102:	7204      	strb	r4, [r0, #8]
   1a104:	7244      	strb	r4, [r0, #9]
   1a106:	7284      	strb	r4, [r0, #10]
   1a108:	72c4      	strb	r4, [r0, #11]
   1a10a:	7102      	strb	r2, [r0, #4]
   1a10c:	f880 a00c 	strb.w	sl, [r0, #12]
   1a110:	f880 900d 	strb.w	r9, [r0, #13]
   1a114:	f880 e00f 	strb.w	lr, [r0, #15]
   1a118:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a2d8 <gnss_interface_setopt+0x290>
   1a11c:	6800      	ldr	r0, [r0, #0]
   1a11e:	f8ac 3000 	strh.w	r3, [ip]
   1a122:	f003 fa98 	bl	1d656 <memcpy>
   1a126:	4639      	mov	r1, r7
   1a128:	9800      	ldr	r0, [sp, #0]
   1a12a:	f8c8 4000 	str.w	r4, [r8]
   1a12e:	f000 fbc3 	bl	1a8b8 <rpc_gnss_client_request_send>
   1a132:	2800      	cmp	r0, #0
   1a134:	f040 80ab 	bne.w	1a28e <gnss_interface_setopt+0x246>
   1a138:	4f65      	ldr	r7, [pc, #404]	; (1a2d0 <gnss_interface_setopt+0x288>)
   1a13a:	4e64      	ldr	r6, [pc, #400]	; (1a2cc <gnss_interface_setopt+0x284>)
   1a13c:	4639      	mov	r1, r7
   1a13e:	4630      	mov	r0, r6
   1a140:	f7f7 fbac 	bl	1189c <bsd_os_timedwait>
   1a144:	682c      	ldr	r4, [r5, #0]
   1a146:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1a14a:	d1f7      	bne.n	1a13c <gnss_interface_setopt+0xf4>
   1a14c:	f8d8 0000 	ldr.w	r0, [r8]
   1a150:	b118      	cbz	r0, 1a15a <gnss_interface_setopt+0x112>
   1a152:	f000 fbcf 	bl	1a8f4 <rpc_gnss_client_data_free>
   1a156:	f8c8 4000 	str.w	r4, [r8]
   1a15a:	682b      	ldr	r3, [r5, #0]
   1a15c:	021b      	lsls	r3, r3, #8
   1a15e:	d576      	bpl.n	1a24e <gnss_interface_setopt+0x206>
   1a160:	2000      	movs	r0, #0
   1a162:	682b      	ldr	r3, [r5, #0]
   1a164:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1a168:	602b      	str	r3, [r5, #0]
   1a16a:	b006      	add	sp, #24
   1a16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a172:	2a02      	cmp	r2, #2
   1a174:	d171      	bne.n	1a25a <gnss_interface_setopt+0x212>
   1a176:	2208      	movs	r2, #8
   1a178:	f241 1603 	movw	r6, #4355	; 0x1103
   1a17c:	881b      	ldrh	r3, [r3, #0]
   1a17e:	9202      	str	r2, [sp, #8]
   1a180:	f8ad 300f 	strh.w	r3, [sp, #15]
   1a184:	4637      	mov	r7, r6
   1a186:	e793      	b.n	1a0b0 <gnss_interface_setopt+0x68>
   1a188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a18a:	2a01      	cmp	r2, #1
   1a18c:	d165      	bne.n	1a25a <gnss_interface_setopt+0x212>
   1a18e:	f241 1603 	movw	r6, #4355	; 0x1103
   1a192:	781b      	ldrb	r3, [r3, #0]
   1a194:	9202      	str	r2, [sp, #8]
   1a196:	f88d 300c 	strb.w	r3, [sp, #12]
   1a19a:	4637      	mov	r7, r6
   1a19c:	e788      	b.n	1a0b0 <gnss_interface_setopt+0x68>
   1a19e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1a0:	2a01      	cmp	r2, #1
   1a1a2:	d15a      	bne.n	1a25a <gnss_interface_setopt+0x212>
   1a1a4:	2202      	movs	r2, #2
   1a1a6:	f241 1603 	movw	r6, #4355	; 0x1103
   1a1aa:	781b      	ldrb	r3, [r3, #0]
   1a1ac:	9202      	str	r2, [sp, #8]
   1a1ae:	f88d 300d 	strb.w	r3, [sp, #13]
   1a1b2:	4637      	mov	r7, r6
   1a1b4:	e77c      	b.n	1a0b0 <gnss_interface_setopt+0x68>
   1a1b6:	682a      	ldr	r2, [r5, #0]
   1a1b8:	b292      	uxth	r2, r2
   1a1ba:	2a02      	cmp	r2, #2
   1a1bc:	d155      	bne.n	1a26a <gnss_interface_setopt+0x222>
   1a1be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1c0:	2a04      	cmp	r2, #4
   1a1c2:	d14a      	bne.n	1a25a <gnss_interface_setopt+0x212>
   1a1c4:	2101      	movs	r1, #1
   1a1c6:	f241 0604 	movw	r6, #4100	; 0x1004
   1a1ca:	682a      	ldr	r2, [r5, #0]
   1a1cc:	6818      	ldr	r0, [r3, #0]
   1a1ce:	0c13      	lsrs	r3, r2, #16
   1a1d0:	041b      	lsls	r3, r3, #16
   1a1d2:	f043 0303 	orr.w	r3, r3, #3
   1a1d6:	f8cd 0009 	str.w	r0, [sp, #9]
   1a1da:	602b      	str	r3, [r5, #0]
   1a1dc:	f88d 1008 	strb.w	r1, [sp, #8]
   1a1e0:	4637      	mov	r7, r6
   1a1e2:	e765      	b.n	1a0b0 <gnss_interface_setopt+0x68>
   1a1e4:	682b      	ldr	r3, [r5, #0]
   1a1e6:	b29b      	uxth	r3, r3
   1a1e8:	2b04      	cmp	r3, #4
   1a1ea:	d13e      	bne.n	1a26a <gnss_interface_setopt+0x222>
   1a1ec:	2300      	movs	r3, #0
   1a1ee:	f241 0604 	movw	r6, #4100	; 0x1004
   1a1f2:	f88d 3008 	strb.w	r3, [sp, #8]
   1a1f6:	f88d 3009 	strb.w	r3, [sp, #9]
   1a1fa:	f88d 300a 	strb.w	r3, [sp, #10]
   1a1fe:	f88d 300b 	strb.w	r3, [sp, #11]
   1a202:	f88d 300c 	strb.w	r3, [sp, #12]
   1a206:	4637      	mov	r7, r6
   1a208:	e752      	b.n	1a0b0 <gnss_interface_setopt+0x68>
   1a20a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a20c:	2a01      	cmp	r2, #1
   1a20e:	d124      	bne.n	1a25a <gnss_interface_setopt+0x212>
   1a210:	781b      	ldrb	r3, [r3, #0]
   1a212:	2b01      	cmp	r3, #1
   1a214:	d121      	bne.n	1a25a <gnss_interface_setopt+0x212>
   1a216:	f241 1603 	movw	r6, #4355	; 0x1103
   1a21a:	4637      	mov	r7, r6
   1a21c:	e748      	b.n	1a0b0 <gnss_interface_setopt+0x68>
   1a21e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a220:	2a02      	cmp	r2, #2
   1a222:	d11a      	bne.n	1a25a <gnss_interface_setopt+0x212>
   1a224:	2220      	movs	r2, #32
   1a226:	f241 1603 	movw	r6, #4355	; 0x1103
   1a22a:	881b      	ldrh	r3, [r3, #0]
   1a22c:	9202      	str	r2, [sp, #8]
   1a22e:	f8ad 3013 	strh.w	r3, [sp, #19]
   1a232:	4637      	mov	r7, r6
   1a234:	e73c      	b.n	1a0b0 <gnss_interface_setopt+0x68>
   1a236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a238:	2a02      	cmp	r2, #2
   1a23a:	d10e      	bne.n	1a25a <gnss_interface_setopt+0x212>
   1a23c:	2210      	movs	r2, #16
   1a23e:	f241 1603 	movw	r6, #4355	; 0x1103
   1a242:	881b      	ldrh	r3, [r3, #0]
   1a244:	9202      	str	r2, [sp, #8]
   1a246:	f8ad 3011 	strh.w	r3, [sp, #17]
   1a24a:	4637      	mov	r7, r6
   1a24c:	e730      	b.n	1a0b0 <gnss_interface_setopt+0x68>
   1a24e:	200e      	movs	r0, #14
   1a250:	f7f7 fbb8 	bl	119c4 <bsd_os_errno_set>
   1a254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a258:	e783      	b.n	1a162 <gnss_interface_setopt+0x11a>
   1a25a:	2016      	movs	r0, #22
   1a25c:	f7f7 fbb2 	bl	119c4 <bsd_os_errno_set>
   1a260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a264:	b006      	add	sp, #24
   1a266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a26a:	200e      	movs	r0, #14
   1a26c:	f7f7 fbaa 	bl	119c4 <bsd_os_errno_set>
   1a270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a274:	e779      	b.n	1a16a <gnss_interface_setopt+0x122>
   1a276:	b128      	cbz	r0, 1a284 <gnss_interface_setopt+0x23c>
   1a278:	6803      	ldr	r3, [r0, #0]
   1a27a:	b11b      	cbz	r3, 1a284 <gnss_interface_setopt+0x23c>
   1a27c:	4618      	mov	r0, r3
   1a27e:	f000 fb39 	bl	1a8f4 <rpc_gnss_client_data_free>
   1a282:	9800      	ldr	r0, [sp, #0]
   1a284:	f000 fb2e 	bl	1a8e4 <rpc_gnss_client_message_free>
   1a288:	2023      	movs	r0, #35	; 0x23
   1a28a:	f7f7 fb9b 	bl	119c4 <bsd_os_errno_set>
   1a28e:	682b      	ldr	r3, [r5, #0]
   1a290:	200e      	movs	r0, #14
   1a292:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1a296:	602b      	str	r3, [r5, #0]
   1a298:	f7f7 fb94 	bl	119c4 <bsd_os_errno_set>
   1a29c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2a0:	e763      	b.n	1a16a <gnss_interface_setopt+0x122>
   1a2a2:	2009      	movs	r0, #9
   1a2a4:	f7f7 fb8e 	bl	119c4 <bsd_os_errno_set>
   1a2a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2ac:	e75d      	b.n	1a16a <gnss_interface_setopt+0x122>
   1a2ae:	202a      	movs	r0, #42	; 0x2a
   1a2b0:	f7f7 fb88 	bl	119c4 <bsd_os_errno_set>
   1a2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2b8:	e757      	b.n	1a16a <gnss_interface_setopt+0x122>
   1a2ba:	2073      	movs	r0, #115	; 0x73
   1a2bc:	f7f7 fb82 	bl	119c4 <bsd_os_errno_set>
   1a2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2c4:	e751      	b.n	1a16a <gnss_interface_setopt+0x122>
   1a2c6:	bf00      	nop
   1a2c8:	20020b34 	.word	0x20020b34
   1a2cc:	49765443 	.word	0x49765443
   1a2d0:	2002c55c 	.word	0x2002c55c
   1a2d4:	20024e4c 	.word	0x20024e4c
   1a2d8:	20020b38 	.word	0x20020b38

0001a2dc <gnss_interface_getopt>:
   1a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2e0:	4c81      	ldr	r4, [pc, #516]	; (1a4e8 <gnss_interface_getopt+0x20c>)
   1a2e2:	b087      	sub	sp, #28
   1a2e4:	6825      	ldr	r5, [r4, #0]
   1a2e6:	4698      	mov	r8, r3
   1a2e8:	b2ad      	uxth	r5, r5
   1a2ea:	2d02      	cmp	r5, #2
   1a2ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a2ee:	f040 80dd 	bne.w	1a4ac <gnss_interface_getopt+0x1d0>
   1a2f2:	6825      	ldr	r5, [r4, #0]
   1a2f4:	03ee      	lsls	r6, r5, #15
   1a2f6:	f100 80eb 	bmi.w	1a4d0 <gnss_interface_getopt+0x1f4>
   1a2fa:	6825      	ldr	r5, [r4, #0]
   1a2fc:	01ed      	lsls	r5, r5, #7
   1a2fe:	f100 80ed 	bmi.w	1a4dc <gnss_interface_getopt+0x200>
   1a302:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a306:	f040 80d7 	bne.w	1a4b8 <gnss_interface_getopt+0x1dc>
   1a30a:	4978      	ldr	r1, [pc, #480]	; (1a4ec <gnss_interface_getopt+0x210>)
   1a30c:	4288      	cmp	r0, r1
   1a30e:	f040 80d9 	bne.w	1a4c4 <gnss_interface_getopt+0x1e8>
   1a312:	f1b8 0f00 	cmp.w	r8, #0
   1a316:	d00b      	beq.n	1a330 <gnss_interface_getopt+0x54>
   1a318:	b153      	cbz	r3, 1a330 <gnss_interface_getopt+0x54>
   1a31a:	1e57      	subs	r7, r2, #1
   1a31c:	2f05      	cmp	r7, #5
   1a31e:	d807      	bhi.n	1a330 <gnss_interface_getopt+0x54>
   1a320:	e8df f007 	tbb	[pc, r7]
   1a324:	0f030f0f 	.word	0x0f030f0f
   1a328:	0303      	.short	0x0303
   1a32a:	681b      	ldr	r3, [r3, #0]
   1a32c:	2b01      	cmp	r3, #1
   1a32e:	d00b      	beq.n	1a348 <gnss_interface_getopt+0x6c>
   1a330:	2016      	movs	r0, #22
   1a332:	f7f7 fb47 	bl	119c4 <bsd_os_errno_set>
   1a336:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a33a:	4628      	mov	r0, r5
   1a33c:	b007      	add	sp, #28
   1a33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a342:	681b      	ldr	r3, [r3, #0]
   1a344:	2b02      	cmp	r3, #2
   1a346:	d1f3      	bne.n	1a330 <gnss_interface_getopt+0x54>
   1a348:	6823      	ldr	r3, [r4, #0]
   1a34a:	2212      	movs	r2, #18
   1a34c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1a350:	2100      	movs	r1, #0
   1a352:	a801      	add	r0, sp, #4
   1a354:	6023      	str	r3, [r4, #0]
   1a356:	f003 f9a8 	bl	1d6aa <memset>
   1a35a:	2112      	movs	r1, #18
   1a35c:	4668      	mov	r0, sp
   1a35e:	f000 fa97 	bl	1a890 <rpc_gnss_client_request_alloc>
   1a362:	4605      	mov	r5, r0
   1a364:	9800      	ldr	r0, [sp, #0]
   1a366:	2d00      	cmp	r5, #0
   1a368:	f040 808a 	bne.w	1a480 <gnss_interface_getopt+0x1a4>
   1a36c:	2800      	cmp	r0, #0
   1a36e:	f000 808e 	beq.w	1a48e <gnss_interface_getopt+0x1b2>
   1a372:	f241 1602 	movw	r6, #4354	; 0x1102
   1a376:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a37a:	2212      	movs	r2, #18
   1a37c:	f04f 0976 	mov.w	r9, #118	; 0x76
   1a380:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1a384:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1a388:	f8df c168 	ldr.w	ip, [pc, #360]	; 1a4f4 <gnss_interface_getopt+0x218>
   1a38c:	f880 e00f 	strb.w	lr, [r0, #15]
   1a390:	f8bc 3000 	ldrh.w	r3, [ip]
   1a394:	f880 900e 	strb.w	r9, [r0, #14]
   1a398:	3301      	adds	r3, #1
   1a39a:	b29b      	uxth	r3, r3
   1a39c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1a3a0:	f8cd e004 	str.w	lr, [sp, #4]
   1a3a4:	7145      	strb	r5, [r0, #5]
   1a3a6:	7185      	strb	r5, [r0, #6]
   1a3a8:	71c5      	strb	r5, [r0, #7]
   1a3aa:	7205      	strb	r5, [r0, #8]
   1a3ac:	7245      	strb	r5, [r0, #9]
   1a3ae:	7285      	strb	r5, [r0, #10]
   1a3b0:	72c5      	strb	r5, [r0, #11]
   1a3b2:	a901      	add	r1, sp, #4
   1a3b4:	7102      	strb	r2, [r0, #4]
   1a3b6:	f880 b00c 	strb.w	fp, [r0, #12]
   1a3ba:	f880 a00d 	strb.w	sl, [r0, #13]
   1a3be:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1a4f8 <gnss_interface_getopt+0x21c>
   1a3c2:	6800      	ldr	r0, [r0, #0]
   1a3c4:	f8ac 3000 	strh.w	r3, [ip]
   1a3c8:	f003 f945 	bl	1d656 <memcpy>
   1a3cc:	4631      	mov	r1, r6
   1a3ce:	9800      	ldr	r0, [sp, #0]
   1a3d0:	f8c9 5000 	str.w	r5, [r9]
   1a3d4:	f000 fa70 	bl	1a8b8 <rpc_gnss_client_request_send>
   1a3d8:	2800      	cmp	r0, #0
   1a3da:	d15d      	bne.n	1a498 <gnss_interface_getopt+0x1bc>
   1a3dc:	4e44      	ldr	r6, [pc, #272]	; (1a4f0 <gnss_interface_getopt+0x214>)
   1a3de:	4d43      	ldr	r5, [pc, #268]	; (1a4ec <gnss_interface_getopt+0x210>)
   1a3e0:	4631      	mov	r1, r6
   1a3e2:	4628      	mov	r0, r5
   1a3e4:	f7f7 fa5a 	bl	1189c <bsd_os_timedwait>
   1a3e8:	6823      	ldr	r3, [r4, #0]
   1a3ea:	01db      	lsls	r3, r3, #7
   1a3ec:	d4f8      	bmi.n	1a3e0 <gnss_interface_getopt+0x104>
   1a3ee:	f8d9 0000 	ldr.w	r0, [r9]
   1a3f2:	b1d8      	cbz	r0, 1a42c <gnss_interface_getopt+0x150>
   1a3f4:	6825      	ldr	r5, [r4, #0]
   1a3f6:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1a3fa:	d00f      	beq.n	1a41c <gnss_interface_getopt+0x140>
   1a3fc:	2f05      	cmp	r7, #5
   1a3fe:	d837      	bhi.n	1a470 <gnss_interface_getopt+0x194>
   1a400:	e8df f007 	tbb	[pc, r7]
   1a404:	2b26201a 	.word	0x2b26201a
   1a408:	0331      	.short	0x0331
   1a40a:	2500      	movs	r5, #0
   1a40c:	7b43      	ldrb	r3, [r0, #13]
   1a40e:	f888 3000 	strb.w	r3, [r8]
   1a412:	f000 fa6f 	bl	1a8f4 <rpc_gnss_client_data_free>
   1a416:	2300      	movs	r3, #0
   1a418:	f8c9 3000 	str.w	r3, [r9]
   1a41c:	6823      	ldr	r3, [r4, #0]
   1a41e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a422:	6023      	str	r3, [r4, #0]
   1a424:	4628      	mov	r0, r5
   1a426:	b007      	add	sp, #28
   1a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a42c:	6823      	ldr	r3, [r4, #0]
   1a42e:	4605      	mov	r5, r0
   1a430:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a434:	6023      	str	r3, [r4, #0]
   1a436:	e7f5      	b.n	1a424 <gnss_interface_getopt+0x148>
   1a438:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1a43c:	2500      	movs	r5, #0
   1a43e:	f8a8 3000 	strh.w	r3, [r8]
   1a442:	e7e6      	b.n	1a412 <gnss_interface_getopt+0x136>
   1a444:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1a448:	2500      	movs	r5, #0
   1a44a:	f8a8 3000 	strh.w	r3, [r8]
   1a44e:	e7e0      	b.n	1a412 <gnss_interface_getopt+0x136>
   1a450:	7b83      	ldrb	r3, [r0, #14]
   1a452:	2500      	movs	r5, #0
   1a454:	f888 3000 	strb.w	r3, [r8]
   1a458:	e7db      	b.n	1a412 <gnss_interface_getopt+0x136>
   1a45a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1a45e:	2500      	movs	r5, #0
   1a460:	f8a8 3000 	strh.w	r3, [r8]
   1a464:	e7d5      	b.n	1a412 <gnss_interface_getopt+0x136>
   1a466:	7b03      	ldrb	r3, [r0, #12]
   1a468:	2500      	movs	r5, #0
   1a46a:	f888 3000 	strb.w	r3, [r8]
   1a46e:	e7d0      	b.n	1a412 <gnss_interface_getopt+0x136>
   1a470:	2016      	movs	r0, #22
   1a472:	f7f7 faa7 	bl	119c4 <bsd_os_errno_set>
   1a476:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a47a:	f8d9 0000 	ldr.w	r0, [r9]
   1a47e:	e7c8      	b.n	1a412 <gnss_interface_getopt+0x136>
   1a480:	b128      	cbz	r0, 1a48e <gnss_interface_getopt+0x1b2>
   1a482:	6803      	ldr	r3, [r0, #0]
   1a484:	b11b      	cbz	r3, 1a48e <gnss_interface_getopt+0x1b2>
   1a486:	4618      	mov	r0, r3
   1a488:	f000 fa34 	bl	1a8f4 <rpc_gnss_client_data_free>
   1a48c:	9800      	ldr	r0, [sp, #0]
   1a48e:	f000 fa29 	bl	1a8e4 <rpc_gnss_client_message_free>
   1a492:	2023      	movs	r0, #35	; 0x23
   1a494:	f7f7 fa96 	bl	119c4 <bsd_os_errno_set>
   1a498:	6823      	ldr	r3, [r4, #0]
   1a49a:	200e      	movs	r0, #14
   1a49c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a4a0:	6023      	str	r3, [r4, #0]
   1a4a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4a6:	f7f7 fa8d 	bl	119c4 <bsd_os_errno_set>
   1a4aa:	e746      	b.n	1a33a <gnss_interface_getopt+0x5e>
   1a4ac:	200e      	movs	r0, #14
   1a4ae:	f7f7 fa89 	bl	119c4 <bsd_os_errno_set>
   1a4b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4b6:	e740      	b.n	1a33a <gnss_interface_getopt+0x5e>
   1a4b8:	202a      	movs	r0, #42	; 0x2a
   1a4ba:	f7f7 fa83 	bl	119c4 <bsd_os_errno_set>
   1a4be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4c2:	e73a      	b.n	1a33a <gnss_interface_getopt+0x5e>
   1a4c4:	2009      	movs	r0, #9
   1a4c6:	f7f7 fa7d 	bl	119c4 <bsd_os_errno_set>
   1a4ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4ce:	e734      	b.n	1a33a <gnss_interface_getopt+0x5e>
   1a4d0:	2005      	movs	r0, #5
   1a4d2:	f7f7 fa77 	bl	119c4 <bsd_os_errno_set>
   1a4d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4da:	e72e      	b.n	1a33a <gnss_interface_getopt+0x5e>
   1a4dc:	2073      	movs	r0, #115	; 0x73
   1a4de:	f7f7 fa71 	bl	119c4 <bsd_os_errno_set>
   1a4e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a4e6:	e728      	b.n	1a33a <gnss_interface_getopt+0x5e>
   1a4e8:	20020b34 	.word	0x20020b34
   1a4ec:	49765443 	.word	0x49765443
   1a4f0:	2002c55c 	.word	0x2002c55c
   1a4f4:	20024e4c 	.word	0x20024e4c
   1a4f8:	20020b38 	.word	0x20020b38

0001a4fc <gnss_interface_init>:
   1a4fc:	2100      	movs	r1, #0
   1a4fe:	b538      	push	{r3, r4, r5, lr}
   1a500:	4c09      	ldr	r4, [pc, #36]	; (1a528 <gnss_interface_init+0x2c>)
   1a502:	4d0a      	ldr	r5, [pc, #40]	; (1a52c <gnss_interface_init+0x30>)
   1a504:	6822      	ldr	r2, [r4, #0]
   1a506:	480a      	ldr	r0, [pc, #40]	; (1a530 <gnss_interface_init+0x34>)
   1a508:	4b0a      	ldr	r3, [pc, #40]	; (1a534 <gnss_interface_init+0x38>)
   1a50a:	402a      	ands	r2, r5
   1a50c:	6022      	str	r2, [r4, #0]
   1a50e:	8001      	strh	r1, [r0, #0]
   1a510:	6019      	str	r1, [r3, #0]
   1a512:	f000 f9b7 	bl	1a884 <rpc_gnss_client_init>
   1a516:	b928      	cbnz	r0, 1a524 <gnss_interface_init+0x28>
   1a518:	6823      	ldr	r3, [r4, #0]
   1a51a:	402b      	ands	r3, r5
   1a51c:	f043 0301 	orr.w	r3, r3, #1
   1a520:	6023      	str	r3, [r4, #0]
   1a522:	bd38      	pop	{r3, r4, r5, pc}
   1a524:	2003      	movs	r0, #3
   1a526:	bd38      	pop	{r3, r4, r5, pc}
   1a528:	20020b34 	.word	0x20020b34
   1a52c:	ffff0000 	.word	0xffff0000
   1a530:	20024e4c 	.word	0x20024e4c
   1a534:	20020b38 	.word	0x20020b38

0001a538 <gnss_interface_open>:
   1a538:	2801      	cmp	r0, #1
   1a53a:	b510      	push	{r4, lr}
   1a53c:	d120      	bne.n	1a580 <gnss_interface_open+0x48>
   1a53e:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1a542:	d11d      	bne.n	1a580 <gnss_interface_open+0x48>
   1a544:	2902      	cmp	r1, #2
   1a546:	d11b      	bne.n	1a580 <gnss_interface_open+0x48>
   1a548:	4c13      	ldr	r4, [pc, #76]	; (1a598 <gnss_interface_open+0x60>)
   1a54a:	6823      	ldr	r3, [r4, #0]
   1a54c:	b29b      	uxth	r3, r3
   1a54e:	2b01      	cmp	r3, #1
   1a550:	d11c      	bne.n	1a58c <gnss_interface_open+0x54>
   1a552:	6823      	ldr	r3, [r4, #0]
   1a554:	4608      	mov	r0, r1
   1a556:	0c1b      	lsrs	r3, r3, #16
   1a558:	041b      	lsls	r3, r3, #16
   1a55a:	f043 0302 	orr.w	r3, r3, #2
   1a55e:	2200      	movs	r2, #0
   1a560:	490e      	ldr	r1, [pc, #56]	; (1a59c <gnss_interface_open+0x64>)
   1a562:	6023      	str	r3, [r4, #0]
   1a564:	f000 faac 	bl	1aac0 <packet_handler_create>
   1a568:	4a0d      	ldr	r2, [pc, #52]	; (1a5a0 <gnss_interface_open+0x68>)
   1a56a:	6010      	str	r0, [r2, #0]
   1a56c:	b170      	cbz	r0, 1a58c <gnss_interface_open+0x54>
   1a56e:	6823      	ldr	r3, [r4, #0]
   1a570:	6802      	ldr	r2, [r0, #0]
   1a572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a576:	6812      	ldr	r2, [r2, #0]
   1a578:	6023      	str	r3, [r4, #0]
   1a57a:	4790      	blx	r2
   1a57c:	4809      	ldr	r0, [pc, #36]	; (1a5a4 <gnss_interface_open+0x6c>)
   1a57e:	bd10      	pop	{r4, pc}
   1a580:	2016      	movs	r0, #22
   1a582:	f7f7 fa1f 	bl	119c4 <bsd_os_errno_set>
   1a586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a58a:	bd10      	pop	{r4, pc}
   1a58c:	200e      	movs	r0, #14
   1a58e:	f7f7 fa19 	bl	119c4 <bsd_os_errno_set>
   1a592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a596:	bd10      	pop	{r4, pc}
   1a598:	20020b34 	.word	0x20020b34
   1a59c:	00019895 	.word	0x00019895
   1a5a0:	20020b3c 	.word	0x20020b3c
   1a5a4:	49765443 	.word	0x49765443

0001a5a8 <gnss_interface_close>:
   1a5a8:	b530      	push	{r4, r5, lr}
   1a5aa:	4b13      	ldr	r3, [pc, #76]	; (1a5f8 <gnss_interface_close+0x50>)
   1a5ac:	b083      	sub	sp, #12
   1a5ae:	4298      	cmp	r0, r3
   1a5b0:	d11c      	bne.n	1a5ec <gnss_interface_close+0x44>
   1a5b2:	4c12      	ldr	r4, [pc, #72]	; (1a5fc <gnss_interface_close+0x54>)
   1a5b4:	6823      	ldr	r3, [r4, #0]
   1a5b6:	b29b      	uxth	r3, r3
   1a5b8:	2b04      	cmp	r3, #4
   1a5ba:	d00f      	beq.n	1a5dc <gnss_interface_close+0x34>
   1a5bc:	4d10      	ldr	r5, [pc, #64]	; (1a600 <gnss_interface_close+0x58>)
   1a5be:	6828      	ldr	r0, [r5, #0]
   1a5c0:	b118      	cbz	r0, 1a5ca <gnss_interface_close+0x22>
   1a5c2:	f000 fa9d 	bl	1ab00 <packet_handler_delete>
   1a5c6:	2300      	movs	r3, #0
   1a5c8:	602b      	str	r3, [r5, #0]
   1a5ca:	2000      	movs	r0, #0
   1a5cc:	6823      	ldr	r3, [r4, #0]
   1a5ce:	0c1b      	lsrs	r3, r3, #16
   1a5d0:	041b      	lsls	r3, r3, #16
   1a5d2:	f043 0301 	orr.w	r3, r3, #1
   1a5d6:	6023      	str	r3, [r4, #0]
   1a5d8:	b003      	add	sp, #12
   1a5da:	bd30      	pop	{r4, r5, pc}
   1a5dc:	2300      	movs	r3, #0
   1a5de:	2208      	movs	r2, #8
   1a5e0:	9300      	str	r3, [sp, #0]
   1a5e2:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a5e6:	f7fc feaf 	bl	17348 <nrf_setsockopt>
   1a5ea:	e7e7      	b.n	1a5bc <gnss_interface_close+0x14>
   1a5ec:	2009      	movs	r0, #9
   1a5ee:	f7f7 f9e9 	bl	119c4 <bsd_os_errno_set>
   1a5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5f6:	e7ef      	b.n	1a5d8 <gnss_interface_close+0x30>
   1a5f8:	49765443 	.word	0x49765443
   1a5fc:	20020b34 	.word	0x20020b34
   1a600:	20020b3c 	.word	0x20020b3c

0001a604 <rpc_gnss_serialize_utc>:
   1a604:	4603      	mov	r3, r0
   1a606:	b1d8      	cbz	r0, 1a640 <rpc_gnss_serialize_utc+0x3c>
   1a608:	b1d1      	cbz	r1, 1a640 <rpc_gnss_serialize_utc+0x3c>
   1a60a:	2000      	movs	r0, #0
   1a60c:	2201      	movs	r2, #1
   1a60e:	7048      	strb	r0, [r1, #1]
   1a610:	700a      	strb	r2, [r1, #0]
   1a612:	685a      	ldr	r2, [r3, #4]
   1a614:	2010      	movs	r0, #16
   1a616:	f8c1 2006 	str.w	r2, [r1, #6]
   1a61a:	681a      	ldr	r2, [r3, #0]
   1a61c:	f8c1 2002 	str.w	r2, [r1, #2]
   1a620:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a624:	730a      	strb	r2, [r1, #12]
   1a626:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a62a:	73ca      	strb	r2, [r1, #15]
   1a62c:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a630:	738a      	strb	r2, [r1, #14]
   1a632:	7a1a      	ldrb	r2, [r3, #8]
   1a634:	728a      	strb	r2, [r1, #10]
   1a636:	7ada      	ldrb	r2, [r3, #11]
   1a638:	734a      	strb	r2, [r1, #13]
   1a63a:	7a5b      	ldrb	r3, [r3, #9]
   1a63c:	72cb      	strb	r3, [r1, #11]
   1a63e:	4770      	bx	lr
   1a640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a644:	4770      	bx	lr
   1a646:	bf00      	nop

0001a648 <rpc_gnss_serialize_ephe>:
   1a648:	4603      	mov	r3, r0
   1a64a:	2800      	cmp	r0, #0
   1a64c:	d04b      	beq.n	1a6e6 <rpc_gnss_serialize_ephe+0x9e>
   1a64e:	2900      	cmp	r1, #0
   1a650:	d049      	beq.n	1a6e6 <rpc_gnss_serialize_ephe+0x9e>
   1a652:	2000      	movs	r0, #0
   1a654:	2202      	movs	r2, #2
   1a656:	7048      	strb	r0, [r1, #1]
   1a658:	700a      	strb	r2, [r1, #0]
   1a65a:	68da      	ldr	r2, [r3, #12]
   1a65c:	2040      	movs	r0, #64	; 0x40
   1a65e:	f8c1 200b 	str.w	r2, [r1, #11]
   1a662:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a666:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a66a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a66e:	720a      	strb	r2, [r1, #8]
   1a670:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a674:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a676:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a67a:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a67c:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a680:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a682:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a686:	868a      	strh	r2, [r1, #52]	; 0x34
   1a688:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a68c:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a68e:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a692:	870a      	strh	r2, [r1, #56]	; 0x38
   1a694:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a698:	830a      	strh	r2, [r1, #24]
   1a69a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a69c:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a6a0:	7c9a      	ldrb	r2, [r3, #18]
   1a6a2:	744a      	strb	r2, [r1, #17]
   1a6a4:	785a      	ldrb	r2, [r3, #1]
   1a6a6:	70ca      	strb	r2, [r1, #3]
   1a6a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a6aa:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a6ac:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a6b0:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a6b2:	885a      	ldrh	r2, [r3, #2]
   1a6b4:	808a      	strh	r2, [r1, #4]
   1a6b6:	6a1a      	ldr	r2, [r3, #32]
   1a6b8:	f8c1 201a 	str.w	r2, [r1, #26]
   1a6bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a6be:	630a      	str	r2, [r1, #48]	; 0x30
   1a6c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a6c2:	f8c1 201e 	str.w	r2, [r1, #30]
   1a6c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a6c8:	628a      	str	r2, [r1, #40]	; 0x28
   1a6ca:	781a      	ldrb	r2, [r3, #0]
   1a6cc:	708a      	strb	r2, [r1, #2]
   1a6ce:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a6d2:	73ca      	strb	r2, [r1, #15]
   1a6d4:	889a      	ldrh	r2, [r3, #4]
   1a6d6:	80ca      	strh	r2, [r1, #6]
   1a6d8:	8a9a      	ldrh	r2, [r3, #20]
   1a6da:	824a      	strh	r2, [r1, #18]
   1a6dc:	7c5a      	ldrb	r2, [r3, #17]
   1a6de:	740a      	strb	r2, [r1, #16]
   1a6e0:	699b      	ldr	r3, [r3, #24]
   1a6e2:	614b      	str	r3, [r1, #20]
   1a6e4:	4770      	bx	lr
   1a6e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6ea:	4770      	bx	lr

0001a6ec <rpc_gnss_serialize_alm>:
   1a6ec:	4603      	mov	r3, r0
   1a6ee:	b360      	cbz	r0, 1a74a <rpc_gnss_serialize_alm+0x5e>
   1a6f0:	b359      	cbz	r1, 1a74a <rpc_gnss_serialize_alm+0x5e>
   1a6f2:	2000      	movs	r0, #0
   1a6f4:	2203      	movs	r2, #3
   1a6f6:	7048      	strb	r0, [r1, #1]
   1a6f8:	700a      	strb	r2, [r1, #0]
   1a6fa:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a6fe:	2021      	movs	r0, #33	; 0x21
   1a700:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a704:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a708:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a70c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a710:	810a      	strh	r2, [r1, #8]
   1a712:	889a      	ldrh	r2, [r3, #4]
   1a714:	80ca      	strh	r2, [r1, #6]
   1a716:	78da      	ldrb	r2, [r3, #3]
   1a718:	714a      	strb	r2, [r1, #5]
   1a71a:	699a      	ldr	r2, [r3, #24]
   1a71c:	f8c1 2019 	str.w	r2, [r1, #25]
   1a720:	691a      	ldr	r2, [r3, #16]
   1a722:	f8c1 2011 	str.w	r2, [r1, #17]
   1a726:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a72a:	814a      	strh	r2, [r1, #10]
   1a72c:	68da      	ldr	r2, [r3, #12]
   1a72e:	f8c1 200d 	str.w	r2, [r1, #13]
   1a732:	7a9a      	ldrb	r2, [r3, #10]
   1a734:	730a      	strb	r2, [r1, #12]
   1a736:	781a      	ldrb	r2, [r3, #0]
   1a738:	708a      	strb	r2, [r1, #2]
   1a73a:	789a      	ldrb	r2, [r3, #2]
   1a73c:	710a      	strb	r2, [r1, #4]
   1a73e:	695a      	ldr	r2, [r3, #20]
   1a740:	f8c1 2015 	str.w	r2, [r1, #21]
   1a744:	785b      	ldrb	r3, [r3, #1]
   1a746:	70cb      	strb	r3, [r1, #3]
   1a748:	4770      	bx	lr
   1a74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a74e:	4770      	bx	lr

0001a750 <rpc_gnss_serialize_klob>:
   1a750:	4603      	mov	r3, r0
   1a752:	b1f0      	cbz	r0, 1a792 <rpc_gnss_serialize_klob+0x42>
   1a754:	b1e9      	cbz	r1, 1a792 <rpc_gnss_serialize_klob+0x42>
   1a756:	2000      	movs	r0, #0
   1a758:	2204      	movs	r2, #4
   1a75a:	7048      	strb	r0, [r1, #1]
   1a75c:	700a      	strb	r2, [r1, #0]
   1a75e:	f993 2000 	ldrsb.w	r2, [r3]
   1a762:	200a      	movs	r0, #10
   1a764:	708a      	strb	r2, [r1, #2]
   1a766:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a76a:	70ca      	strb	r2, [r1, #3]
   1a76c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a770:	710a      	strb	r2, [r1, #4]
   1a772:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a776:	714a      	strb	r2, [r1, #5]
   1a778:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a77c:	718a      	strb	r2, [r1, #6]
   1a77e:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a782:	71ca      	strb	r2, [r1, #7]
   1a784:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a788:	720a      	strb	r2, [r1, #8]
   1a78a:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a78e:	724b      	strb	r3, [r1, #9]
   1a790:	4770      	bx	lr
   1a792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a796:	4770      	bx	lr

0001a798 <rpc_gnss_serialize_nequick>:
   1a798:	4603      	mov	r3, r0
   1a79a:	b198      	cbz	r0, 1a7c4 <rpc_gnss_serialize_nequick+0x2c>
   1a79c:	b191      	cbz	r1, 1a7c4 <rpc_gnss_serialize_nequick+0x2c>
   1a79e:	2000      	movs	r0, #0
   1a7a0:	2205      	movs	r2, #5
   1a7a2:	7048      	strb	r0, [r1, #1]
   1a7a4:	700a      	strb	r2, [r1, #0]
   1a7a6:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a7aa:	200a      	movs	r0, #10
   1a7ac:	804a      	strh	r2, [r1, #2]
   1a7ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a7b2:	808a      	strh	r2, [r1, #4]
   1a7b4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a7b8:	80ca      	strh	r2, [r1, #6]
   1a7ba:	799a      	ldrb	r2, [r3, #6]
   1a7bc:	720a      	strb	r2, [r1, #8]
   1a7be:	79db      	ldrb	r3, [r3, #7]
   1a7c0:	724b      	strb	r3, [r1, #9]
   1a7c2:	4770      	bx	lr
   1a7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a7c8:	4770      	bx	lr
   1a7ca:	bf00      	nop

0001a7cc <rpc_gnss_serialize_time_and_sv_tow>:
   1a7cc:	b310      	cbz	r0, 1a814 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a7ce:	b309      	cbz	r1, 1a814 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a7d0:	b470      	push	{r4, r5, r6}
   1a7d2:	2500      	movs	r5, #0
   1a7d4:	2606      	movs	r6, #6
   1a7d6:	460c      	mov	r4, r1
   1a7d8:	704d      	strb	r5, [r1, #1]
   1a7da:	700e      	strb	r6, [r1, #0]
   1a7dc:	462b      	mov	r3, r5
   1a7de:	8805      	ldrh	r5, [r0, #0]
   1a7e0:	4602      	mov	r2, r0
   1a7e2:	804d      	strh	r5, [r1, #2]
   1a7e4:	68c5      	ldr	r5, [r0, #12]
   1a7e6:	f8c1 500a 	str.w	r5, [r1, #10]
   1a7ea:	8905      	ldrh	r5, [r0, #8]
   1a7ec:	810d      	strh	r5, [r1, #8]
   1a7ee:	6840      	ldr	r0, [r0, #4]
   1a7f0:	6048      	str	r0, [r1, #4]
   1a7f2:	8a15      	ldrh	r5, [r2, #16]
   1a7f4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a7f8:	4408      	add	r0, r1
   1a7fa:	81c5      	strh	r5, [r0, #14]
   1a7fc:	7c90      	ldrb	r0, [r2, #18]
   1a7fe:	3301      	adds	r3, #1
   1a800:	2b20      	cmp	r3, #32
   1a802:	7420      	strb	r0, [r4, #16]
   1a804:	f102 0204 	add.w	r2, r2, #4
   1a808:	f104 0403 	add.w	r4, r4, #3
   1a80c:	d1f1      	bne.n	1a7f2 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a80e:	206e      	movs	r0, #110	; 0x6e
   1a810:	bc70      	pop	{r4, r5, r6}
   1a812:	4770      	bx	lr
   1a814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a818:	4770      	bx	lr
   1a81a:	bf00      	nop

0001a81c <rpc_gnss_serialize_location>:
   1a81c:	4603      	mov	r3, r0
   1a81e:	b1c8      	cbz	r0, 1a854 <rpc_gnss_serialize_location+0x38>
   1a820:	b1c1      	cbz	r1, 1a854 <rpc_gnss_serialize_location+0x38>
   1a822:	2000      	movs	r0, #0
   1a824:	2207      	movs	r2, #7
   1a826:	7048      	strb	r0, [r1, #1]
   1a828:	700a      	strb	r2, [r1, #0]
   1a82a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a82e:	2011      	movs	r0, #17
   1a830:	814a      	strh	r2, [r1, #10]
   1a832:	7b9a      	ldrb	r2, [r3, #14]
   1a834:	740a      	strb	r2, [r1, #16]
   1a836:	681a      	ldr	r2, [r3, #0]
   1a838:	f8c1 2002 	str.w	r2, [r1, #2]
   1a83c:	685a      	ldr	r2, [r3, #4]
   1a83e:	f8c1 2006 	str.w	r2, [r1, #6]
   1a842:	7b1a      	ldrb	r2, [r3, #12]
   1a844:	738a      	strb	r2, [r1, #14]
   1a846:	7b5a      	ldrb	r2, [r3, #13]
   1a848:	73ca      	strb	r2, [r1, #15]
   1a84a:	7a9a      	ldrb	r2, [r3, #10]
   1a84c:	730a      	strb	r2, [r1, #12]
   1a84e:	7adb      	ldrb	r3, [r3, #11]
   1a850:	734b      	strb	r3, [r1, #13]
   1a852:	4770      	bx	lr
   1a854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a858:	4770      	bx	lr
   1a85a:	bf00      	nop

0001a85c <rpc_gnss_serialize_integrity>:
   1a85c:	b148      	cbz	r0, 1a872 <rpc_gnss_serialize_integrity+0x16>
   1a85e:	b141      	cbz	r1, 1a872 <rpc_gnss_serialize_integrity+0x16>
   1a860:	2200      	movs	r2, #0
   1a862:	2308      	movs	r3, #8
   1a864:	704a      	strb	r2, [r1, #1]
   1a866:	700b      	strb	r3, [r1, #0]
   1a868:	6803      	ldr	r3, [r0, #0]
   1a86a:	2006      	movs	r0, #6
   1a86c:	f8c1 3002 	str.w	r3, [r1, #2]
   1a870:	4770      	bx	lr
   1a872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a876:	4770      	bx	lr

0001a878 <gnss_client_event_handler>:
   1a878:	f850 1b08 	ldr.w	r1, [r0], #8
   1a87c:	0c09      	lsrs	r1, r1, #16
   1a87e:	f7ff b817 	b.w	198b0 <rpc_gnss_event_handler>
   1a882:	bf00      	nop

0001a884 <rpc_gnss_client_init>:
   1a884:	4801      	ldr	r0, [pc, #4]	; (1a88c <rpc_gnss_client_init+0x8>)
   1a886:	f7fe bb79 	b.w	18f7c <rpc_client_register>
   1a88a:	bf00      	nop
   1a88c:	0001f8b8 	.word	0x0001f8b8

0001a890 <rpc_gnss_client_request_alloc>:
   1a890:	2300      	movs	r3, #0
   1a892:	b510      	push	{r4, lr}
   1a894:	b082      	sub	sp, #8
   1a896:	9301      	str	r3, [sp, #4]
   1a898:	b158      	cbz	r0, 1a8b2 <rpc_gnss_client_request_alloc+0x22>
   1a89a:	4604      	mov	r4, r0
   1a89c:	aa01      	add	r2, sp, #4
   1a89e:	2007      	movs	r0, #7
   1a8a0:	f7fe fda4 	bl	193ec <rpc_message_alloc>
   1a8a4:	b918      	cbnz	r0, 1a8ae <rpc_gnss_client_request_alloc+0x1e>
   1a8a6:	9b01      	ldr	r3, [sp, #4]
   1a8a8:	b10b      	cbz	r3, 1a8ae <rpc_gnss_client_request_alloc+0x1e>
   1a8aa:	3308      	adds	r3, #8
   1a8ac:	6023      	str	r3, [r4, #0]
   1a8ae:	b002      	add	sp, #8
   1a8b0:	bd10      	pop	{r4, pc}
   1a8b2:	2007      	movs	r0, #7
   1a8b4:	b002      	add	sp, #8
   1a8b6:	bd10      	pop	{r4, pc}

0001a8b8 <rpc_gnss_client_request_send>:
   1a8b8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a8c0:	d10b      	bne.n	1a8da <rpc_gnss_client_request_send+0x22>
   1a8c2:	b160      	cbz	r0, 1a8de <rpc_gnss_client_request_send+0x26>
   1a8c4:	4603      	mov	r3, r0
   1a8c6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a8ca:	2007      	movs	r0, #7
   1a8cc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a8d0:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a8d4:	4619      	mov	r1, r3
   1a8d6:	f7fe bd71 	b.w	193bc <rpc_message_send>
   1a8da:	200f      	movs	r0, #15
   1a8dc:	4770      	bx	lr
   1a8de:	2007      	movs	r0, #7
   1a8e0:	4770      	bx	lr
   1a8e2:	bf00      	nop

0001a8e4 <rpc_gnss_client_message_free>:
   1a8e4:	b120      	cbz	r0, 1a8f0 <rpc_gnss_client_message_free+0xc>
   1a8e6:	f1a0 0108 	sub.w	r1, r0, #8
   1a8ea:	2007      	movs	r0, #7
   1a8ec:	f7fe bdb0 	b.w	19450 <rpc_message_free>
   1a8f0:	2007      	movs	r0, #7
   1a8f2:	4770      	bx	lr

0001a8f4 <rpc_gnss_client_data_free>:
   1a8f4:	b118      	cbz	r0, 1a8fe <rpc_gnss_client_data_free+0xa>
   1a8f6:	4601      	mov	r1, r0
   1a8f8:	2007      	movs	r0, #7
   1a8fa:	f7fe bebb 	b.w	19674 <rpc_message_data_free>
   1a8fe:	2007      	movs	r0, #7
   1a900:	4770      	bx	lr
   1a902:	bf00      	nop

0001a904 <datagram_handler_init>:
   1a904:	b510      	push	{r4, lr}
   1a906:	4604      	mov	r4, r0
   1a908:	200c      	movs	r0, #12
   1a90a:	f7f9 f901 	bl	13b10 <nrf_malloc>
   1a90e:	60e0      	str	r0, [r4, #12]
   1a910:	b118      	cbz	r0, 1a91a <datagram_handler_init+0x16>
   1a912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a916:	f7fc bc0d 	b.w	17134 <linked_list_init>
   1a91a:	2004      	movs	r0, #4
   1a91c:	bd10      	pop	{r4, pc}
   1a91e:	bf00      	nop

0001a920 <datagram_handler_put>:
   1a920:	b570      	push	{r4, r5, r6, lr}
   1a922:	4606      	mov	r6, r0
   1a924:	2014      	movs	r0, #20
   1a926:	460d      	mov	r5, r1
   1a928:	f7f9 f8f2 	bl	13b10 <nrf_malloc>
   1a92c:	b178      	cbz	r0, 1a94e <datagram_handler_put+0x2e>
   1a92e:	682b      	ldr	r3, [r5, #0]
   1a930:	4604      	mov	r4, r0
   1a932:	6043      	str	r3, [r0, #4]
   1a934:	686b      	ldr	r3, [r5, #4]
   1a936:	4601      	mov	r1, r0
   1a938:	6083      	str	r3, [r0, #8]
   1a93a:	68eb      	ldr	r3, [r5, #12]
   1a93c:	60c3      	str	r3, [r0, #12]
   1a93e:	68ab      	ldr	r3, [r5, #8]
   1a940:	6103      	str	r3, [r0, #16]
   1a942:	68f0      	ldr	r0, [r6, #12]
   1a944:	f7fc fc00 	bl	17148 <linked_list_push>
   1a948:	b920      	cbnz	r0, 1a954 <datagram_handler_put+0x34>
   1a94a:	6868      	ldr	r0, [r5, #4]
   1a94c:	bd70      	pop	{r4, r5, r6, pc}
   1a94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a952:	bd70      	pop	{r4, r5, r6, pc}
   1a954:	4620      	mov	r0, r4
   1a956:	f7f9 f8e5 	bl	13b24 <nrf_free>
   1a95a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a95e:	bd70      	pop	{r4, r5, r6, pc}

0001a960 <datagram_handler_get>:
   1a960:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a962:	4606      	mov	r6, r0
   1a964:	b085      	sub	sp, #20
   1a966:	68c0      	ldr	r0, [r0, #12]
   1a968:	460c      	mov	r4, r1
   1a96a:	4617      	mov	r7, r2
   1a96c:	f7fc fc0c 	bl	17188 <linked_list_peek>
   1a970:	2800      	cmp	r0, #0
   1a972:	d037      	beq.n	1a9e4 <datagram_handler_get+0x84>
   1a974:	6882      	ldr	r2, [r0, #8]
   1a976:	4605      	mov	r5, r0
   1a978:	e9d4 0300 	ldrd	r0, r3, [r4]
   1a97c:	429a      	cmp	r2, r3
   1a97e:	bf28      	it	cs
   1a980:	461a      	movcs	r2, r3
   1a982:	6062      	str	r2, [r4, #4]
   1a984:	b110      	cbz	r0, 1a98c <datagram_handler_get+0x2c>
   1a986:	6869      	ldr	r1, [r5, #4]
   1a988:	f002 fe65 	bl	1d656 <memcpy>
   1a98c:	68a0      	ldr	r0, [r4, #8]
   1a98e:	b118      	cbz	r0, 1a998 <datagram_handler_get+0x38>
   1a990:	692b      	ldr	r3, [r5, #16]
   1a992:	b10b      	cbz	r3, 1a998 <datagram_handler_get+0x38>
   1a994:	68ea      	ldr	r2, [r5, #12]
   1a996:	b9e2      	cbnz	r2, 1a9d2 <datagram_handler_get+0x72>
   1a998:	2300      	movs	r3, #0
   1a99a:	60e3      	str	r3, [r4, #12]
   1a99c:	073b      	lsls	r3, r7, #28
   1a99e:	d502      	bpl.n	1a9a6 <datagram_handler_get+0x46>
   1a9a0:	6860      	ldr	r0, [r4, #4]
   1a9a2:	b005      	add	sp, #20
   1a9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9a6:	68f0      	ldr	r0, [r6, #12]
   1a9a8:	f7fc fbe4 	bl	17174 <linked_list_pop>
   1a9ac:	4605      	mov	r5, r0
   1a9ae:	2800      	cmp	r0, #0
   1a9b0:	d0f6      	beq.n	1a9a0 <datagram_handler_get+0x40>
   1a9b2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a9b6:	6902      	ldr	r2, [r0, #16]
   1a9b8:	9300      	str	r3, [sp, #0]
   1a9ba:	68c3      	ldr	r3, [r0, #12]
   1a9bc:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1a9c0:	9303      	str	r3, [sp, #12]
   1a9c2:	4668      	mov	r0, sp
   1a9c4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1a9c8:	4798      	blx	r3
   1a9ca:	4628      	mov	r0, r5
   1a9cc:	f7f9 f8aa 	bl	13b24 <nrf_free>
   1a9d0:	e7e6      	b.n	1a9a0 <datagram_handler_get+0x40>
   1a9d2:	68e3      	ldr	r3, [r4, #12]
   1a9d4:	429a      	cmp	r2, r3
   1a9d6:	bf28      	it	cs
   1a9d8:	461a      	movcs	r2, r3
   1a9da:	60e2      	str	r2, [r4, #12]
   1a9dc:	6929      	ldr	r1, [r5, #16]
   1a9de:	f002 fe3a 	bl	1d656 <memcpy>
   1a9e2:	e7db      	b.n	1a99c <datagram_handler_get+0x3c>
   1a9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a9e8:	e7db      	b.n	1a9a2 <datagram_handler_get+0x42>
   1a9ea:	bf00      	nop

0001a9ec <datagram_handler_available>:
   1a9ec:	b508      	push	{r3, lr}
   1a9ee:	68c0      	ldr	r0, [r0, #12]
   1a9f0:	f7fc fbca 	bl	17188 <linked_list_peek>
   1a9f4:	b108      	cbz	r0, 1a9fa <datagram_handler_available+0xe>
   1a9f6:	6880      	ldr	r0, [r0, #8]
   1a9f8:	bd08      	pop	{r3, pc}
   1a9fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a9fe:	bd08      	pop	{r3, pc}

0001aa00 <datagram_handler_flush>:
   1aa00:	b530      	push	{r4, r5, lr}
   1aa02:	4605      	mov	r5, r0
   1aa04:	68c0      	ldr	r0, [r0, #12]
   1aa06:	b085      	sub	sp, #20
   1aa08:	b9a8      	cbnz	r0, 1aa36 <datagram_handler_flush+0x36>
   1aa0a:	e01a      	b.n	1aa42 <datagram_handler_flush+0x42>
   1aa0c:	68e8      	ldr	r0, [r5, #12]
   1aa0e:	f7fc fbb1 	bl	17174 <linked_list_pop>
   1aa12:	4604      	mov	r4, r0
   1aa14:	b170      	cbz	r0, 1aa34 <datagram_handler_flush+0x34>
   1aa16:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1aa1a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1aa1e:	e9cd 0100 	strd	r0, r1, [sp]
   1aa22:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aa26:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1aa2a:	4668      	mov	r0, sp
   1aa2c:	4798      	blx	r3
   1aa2e:	4620      	mov	r0, r4
   1aa30:	f7f9 f878 	bl	13b24 <nrf_free>
   1aa34:	68e8      	ldr	r0, [r5, #12]
   1aa36:	f7fc fbad 	bl	17194 <linked_list_size_get>
   1aa3a:	2800      	cmp	r0, #0
   1aa3c:	d1e6      	bne.n	1aa0c <datagram_handler_flush+0xc>
   1aa3e:	b005      	add	sp, #20
   1aa40:	bd30      	pop	{r4, r5, pc}
   1aa42:	2008      	movs	r0, #8
   1aa44:	b005      	add	sp, #20
   1aa46:	bd30      	pop	{r4, r5, pc}

0001aa48 <datagram_handler_free>:
   1aa48:	b530      	push	{r4, r5, lr}
   1aa4a:	4605      	mov	r5, r0
   1aa4c:	68c0      	ldr	r0, [r0, #12]
   1aa4e:	b085      	sub	sp, #20
   1aa50:	b9a0      	cbnz	r0, 1aa7c <datagram_handler_free+0x34>
   1aa52:	e01c      	b.n	1aa8e <datagram_handler_free+0x46>
   1aa54:	f7fc fb8e 	bl	17174 <linked_list_pop>
   1aa58:	4604      	mov	r4, r0
   1aa5a:	b170      	cbz	r0, 1aa7a <datagram_handler_free+0x32>
   1aa5c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1aa60:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1aa64:	e9cd 0100 	strd	r0, r1, [sp]
   1aa68:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aa6c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1aa70:	4668      	mov	r0, sp
   1aa72:	4798      	blx	r3
   1aa74:	4620      	mov	r0, r4
   1aa76:	f7f9 f855 	bl	13b24 <nrf_free>
   1aa7a:	68e8      	ldr	r0, [r5, #12]
   1aa7c:	f7fc fb8a 	bl	17194 <linked_list_size_get>
   1aa80:	4604      	mov	r4, r0
   1aa82:	68e8      	ldr	r0, [r5, #12]
   1aa84:	2c00      	cmp	r4, #0
   1aa86:	d1e5      	bne.n	1aa54 <datagram_handler_free+0xc>
   1aa88:	f7f9 f84c 	bl	13b24 <nrf_free>
   1aa8c:	60ec      	str	r4, [r5, #12]
   1aa8e:	b005      	add	sp, #20
   1aa90:	bd30      	pop	{r4, r5, pc}
   1aa92:	bf00      	nop

0001aa94 <null_handler_init>:
   1aa94:	2000      	movs	r0, #0
   1aa96:	4770      	bx	lr

0001aa98 <null_handler_put>:
   1aa98:	b510      	push	{r4, lr}
   1aa9a:	460c      	mov	r4, r1
   1aa9c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1aaa0:	4620      	mov	r0, r4
   1aaa2:	4798      	blx	r3
   1aaa4:	6860      	ldr	r0, [r4, #4]
   1aaa6:	bd10      	pop	{r4, pc}

0001aaa8 <null_handler_get>:
   1aaa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aaac:	4770      	bx	lr
   1aaae:	bf00      	nop

0001aab0 <null_handler_available>:
   1aab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aab4:	4770      	bx	lr
   1aab6:	bf00      	nop

0001aab8 <null_handler_flush>:
   1aab8:	2000      	movs	r0, #0
   1aaba:	4770      	bx	lr

0001aabc <null_handler_free>:
   1aabc:	4770      	bx	lr
   1aabe:	bf00      	nop

0001aac0 <packet_handler_create>:
   1aac0:	2801      	cmp	r0, #1
   1aac2:	b538      	push	{r3, r4, r5, lr}
   1aac4:	460d      	mov	r5, r1
   1aac6:	4614      	mov	r4, r2
   1aac8:	d00d      	beq.n	1aae6 <packet_handler_create+0x26>
   1aaca:	db11      	blt.n	1aaf0 <packet_handler_create+0x30>
   1aacc:	2803      	cmp	r0, #3
   1aace:	dc0f      	bgt.n	1aaf0 <packet_handler_create+0x30>
   1aad0:	2010      	movs	r0, #16
   1aad2:	f7f9 f81d 	bl	13b10 <nrf_malloc>
   1aad6:	2218      	movs	r2, #24
   1aad8:	b120      	cbz	r0, 1aae4 <packet_handler_create+0x24>
   1aada:	4b08      	ldr	r3, [pc, #32]	; (1aafc <packet_handler_create+0x3c>)
   1aadc:	6045      	str	r5, [r0, #4]
   1aade:	4413      	add	r3, r2
   1aae0:	6084      	str	r4, [r0, #8]
   1aae2:	6003      	str	r3, [r0, #0]
   1aae4:	bd38      	pop	{r3, r4, r5, pc}
   1aae6:	2014      	movs	r0, #20
   1aae8:	f7f9 f812 	bl	13b10 <nrf_malloc>
   1aaec:	2230      	movs	r2, #48	; 0x30
   1aaee:	e7f3      	b.n	1aad8 <packet_handler_create+0x18>
   1aaf0:	200c      	movs	r0, #12
   1aaf2:	f7f9 f80d 	bl	13b10 <nrf_malloc>
   1aaf6:	2200      	movs	r2, #0
   1aaf8:	e7ee      	b.n	1aad8 <packet_handler_create+0x18>
   1aafa:	bf00      	nop
   1aafc:	0001f8c8 	.word	0x0001f8c8

0001ab00 <packet_handler_delete>:
   1ab00:	b510      	push	{r4, lr}
   1ab02:	4604      	mov	r4, r0
   1ab04:	6803      	ldr	r3, [r0, #0]
   1ab06:	691b      	ldr	r3, [r3, #16]
   1ab08:	4798      	blx	r3
   1ab0a:	6823      	ldr	r3, [r4, #0]
   1ab0c:	4620      	mov	r0, r4
   1ab0e:	695b      	ldr	r3, [r3, #20]
   1ab10:	4798      	blx	r3
   1ab12:	4620      	mov	r0, r4
   1ab14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ab18:	f7f9 b804 	b.w	13b24 <nrf_free>

0001ab1c <stream_handler_init>:
   1ab1c:	b510      	push	{r4, lr}
   1ab1e:	4604      	mov	r4, r0
   1ab20:	200c      	movs	r0, #12
   1ab22:	f7f8 fff5 	bl	13b10 <nrf_malloc>
   1ab26:	60e0      	str	r0, [r4, #12]
   1ab28:	b128      	cbz	r0, 1ab36 <stream_handler_init+0x1a>
   1ab2a:	2300      	movs	r3, #0
   1ab2c:	6123      	str	r3, [r4, #16]
   1ab2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ab32:	f7fc baff 	b.w	17134 <linked_list_init>
   1ab36:	2004      	movs	r0, #4
   1ab38:	bd10      	pop	{r4, pc}
   1ab3a:	bf00      	nop

0001ab3c <stream_handler_put>:
   1ab3c:	b570      	push	{r4, r5, r6, lr}
   1ab3e:	4606      	mov	r6, r0
   1ab40:	2014      	movs	r0, #20
   1ab42:	460d      	mov	r5, r1
   1ab44:	f7f8 ffe4 	bl	13b10 <nrf_malloc>
   1ab48:	b178      	cbz	r0, 1ab6a <stream_handler_put+0x2e>
   1ab4a:	682b      	ldr	r3, [r5, #0]
   1ab4c:	4604      	mov	r4, r0
   1ab4e:	6043      	str	r3, [r0, #4]
   1ab50:	686b      	ldr	r3, [r5, #4]
   1ab52:	4601      	mov	r1, r0
   1ab54:	6083      	str	r3, [r0, #8]
   1ab56:	68eb      	ldr	r3, [r5, #12]
   1ab58:	60c3      	str	r3, [r0, #12]
   1ab5a:	68ab      	ldr	r3, [r5, #8]
   1ab5c:	6103      	str	r3, [r0, #16]
   1ab5e:	68f0      	ldr	r0, [r6, #12]
   1ab60:	f7fc faf2 	bl	17148 <linked_list_push>
   1ab64:	b920      	cbnz	r0, 1ab70 <stream_handler_put+0x34>
   1ab66:	6868      	ldr	r0, [r5, #4]
   1ab68:	bd70      	pop	{r4, r5, r6, pc}
   1ab6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab6e:	bd70      	pop	{r4, r5, r6, pc}
   1ab70:	4620      	mov	r0, r4
   1ab72:	f7f8 ffd7 	bl	13b24 <nrf_free>
   1ab76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab7a:	bd70      	pop	{r4, r5, r6, pc}

0001ab7c <stream_handler_get>:
   1ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab80:	4682      	mov	sl, r0
   1ab82:	b087      	sub	sp, #28
   1ab84:	68c0      	ldr	r0, [r0, #12]
   1ab86:	4689      	mov	r9, r1
   1ab88:	4693      	mov	fp, r2
   1ab8a:	f7fc fafd 	bl	17188 <linked_list_peek>
   1ab8e:	2800      	cmp	r0, #0
   1ab90:	d072      	beq.n	1ac78 <stream_handler_get+0xfc>
   1ab92:	4605      	mov	r5, r0
   1ab94:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1ab98:	b120      	cbz	r0, 1aba4 <stream_handler_get+0x28>
   1ab9a:	692b      	ldr	r3, [r5, #16]
   1ab9c:	b113      	cbz	r3, 1aba4 <stream_handler_get+0x28>
   1ab9e:	68ea      	ldr	r2, [r5, #12]
   1aba0:	2a00      	cmp	r2, #0
   1aba2:	d15c      	bne.n	1ac5e <stream_handler_get+0xe2>
   1aba4:	2300      	movs	r3, #0
   1aba6:	f8c9 300c 	str.w	r3, [r9, #12]
   1abaa:	f8d9 2000 	ldr.w	r2, [r9]
   1abae:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1abb2:	f8da 1010 	ldr.w	r1, [sl, #16]
   1abb6:	9201      	str	r2, [sp, #4]
   1abb8:	f1b8 0f00 	cmp.w	r8, #0
   1abbc:	d05a      	beq.n	1ac74 <stream_handler_get+0xf8>
   1abbe:	f00b 0308 	and.w	r3, fp, #8
   1abc2:	2400      	movs	r4, #0
   1abc4:	9300      	str	r3, [sp, #0]
   1abc6:	e010      	b.n	1abea <stream_handler_get+0x6e>
   1abc8:	f8da 3010 	ldr.w	r3, [sl, #16]
   1abcc:	443b      	add	r3, r7
   1abce:	f8ca 3010 	str.w	r3, [sl, #16]
   1abd2:	4628      	mov	r0, r5
   1abd4:	f7fc fae0 	bl	17198 <linked_list_get_next>
   1abd8:	443c      	add	r4, r7
   1abda:	4605      	mov	r5, r0
   1abdc:	2800      	cmp	r0, #0
   1abde:	d038      	beq.n	1ac52 <stream_handler_get+0xd6>
   1abe0:	45a0      	cmp	r8, r4
   1abe2:	d936      	bls.n	1ac52 <stream_handler_get+0xd6>
   1abe4:	2100      	movs	r1, #0
   1abe6:	f8d9 2000 	ldr.w	r2, [r9]
   1abea:	68ae      	ldr	r6, [r5, #8]
   1abec:	eba8 0b04 	sub.w	fp, r8, r4
   1abf0:	1a76      	subs	r6, r6, r1
   1abf2:	455e      	cmp	r6, fp
   1abf4:	4637      	mov	r7, r6
   1abf6:	bf28      	it	cs
   1abf8:	465f      	movcs	r7, fp
   1abfa:	b132      	cbz	r2, 1ac0a <stream_handler_get+0x8e>
   1abfc:	6868      	ldr	r0, [r5, #4]
   1abfe:	9b01      	ldr	r3, [sp, #4]
   1ac00:	4401      	add	r1, r0
   1ac02:	463a      	mov	r2, r7
   1ac04:	1918      	adds	r0, r3, r4
   1ac06:	f002 fd26 	bl	1d656 <memcpy>
   1ac0a:	9b00      	ldr	r3, [sp, #0]
   1ac0c:	2b00      	cmp	r3, #0
   1ac0e:	d1e0      	bne.n	1abd2 <stream_handler_get+0x56>
   1ac10:	455e      	cmp	r6, fp
   1ac12:	d8d9      	bhi.n	1abc8 <stream_handler_get+0x4c>
   1ac14:	f8da 000c 	ldr.w	r0, [sl, #12]
   1ac18:	f7fc faac 	bl	17174 <linked_list_pop>
   1ac1c:	4606      	mov	r6, r0
   1ac1e:	b170      	cbz	r0, 1ac3e <stream_handler_get+0xc2>
   1ac20:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1ac24:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1ac28:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ac2c:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1ac30:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1ac34:	a802      	add	r0, sp, #8
   1ac36:	4798      	blx	r3
   1ac38:	4630      	mov	r0, r6
   1ac3a:	f7f8 ff73 	bl	13b24 <nrf_free>
   1ac3e:	2300      	movs	r3, #0
   1ac40:	4628      	mov	r0, r5
   1ac42:	f8ca 3010 	str.w	r3, [sl, #16]
   1ac46:	f7fc faa7 	bl	17198 <linked_list_get_next>
   1ac4a:	443c      	add	r4, r7
   1ac4c:	4605      	mov	r5, r0
   1ac4e:	2800      	cmp	r0, #0
   1ac50:	d1c6      	bne.n	1abe0 <stream_handler_get+0x64>
   1ac52:	4620      	mov	r0, r4
   1ac54:	f8c9 4004 	str.w	r4, [r9, #4]
   1ac58:	b007      	add	sp, #28
   1ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac5e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1ac62:	429a      	cmp	r2, r3
   1ac64:	bf28      	it	cs
   1ac66:	461a      	movcs	r2, r3
   1ac68:	f8c9 200c 	str.w	r2, [r9, #12]
   1ac6c:	6929      	ldr	r1, [r5, #16]
   1ac6e:	f002 fcf2 	bl	1d656 <memcpy>
   1ac72:	e79a      	b.n	1abaa <stream_handler_get+0x2e>
   1ac74:	4644      	mov	r4, r8
   1ac76:	e7ec      	b.n	1ac52 <stream_handler_get+0xd6>
   1ac78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac7c:	e7ec      	b.n	1ac58 <stream_handler_get+0xdc>
   1ac7e:	bf00      	nop

0001ac80 <stream_handler_available>:
   1ac80:	b510      	push	{r4, lr}
   1ac82:	4604      	mov	r4, r0
   1ac84:	68c0      	ldr	r0, [r0, #12]
   1ac86:	f7fc fa7f 	bl	17188 <linked_list_peek>
   1ac8a:	b150      	cbz	r0, 1aca2 <stream_handler_available+0x22>
   1ac8c:	6924      	ldr	r4, [r4, #16]
   1ac8e:	4264      	negs	r4, r4
   1ac90:	6883      	ldr	r3, [r0, #8]
   1ac92:	441c      	add	r4, r3
   1ac94:	f7fc fa80 	bl	17198 <linked_list_get_next>
   1ac98:	2800      	cmp	r0, #0
   1ac9a:	d1f9      	bne.n	1ac90 <stream_handler_available+0x10>
   1ac9c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1aca0:	bd10      	pop	{r4, pc}
   1aca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aca6:	bd10      	pop	{r4, pc}

0001aca8 <stream_handler_flush>:
   1aca8:	b530      	push	{r4, r5, lr}
   1acaa:	4605      	mov	r5, r0
   1acac:	68c0      	ldr	r0, [r0, #12]
   1acae:	b085      	sub	sp, #20
   1acb0:	b9a8      	cbnz	r0, 1acde <stream_handler_flush+0x36>
   1acb2:	e01a      	b.n	1acea <stream_handler_flush+0x42>
   1acb4:	68e8      	ldr	r0, [r5, #12]
   1acb6:	f7fc fa5d 	bl	17174 <linked_list_pop>
   1acba:	4604      	mov	r4, r0
   1acbc:	b170      	cbz	r0, 1acdc <stream_handler_flush+0x34>
   1acbe:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1acc2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1acc6:	e9cd 0100 	strd	r0, r1, [sp]
   1acca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1acce:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1acd2:	4668      	mov	r0, sp
   1acd4:	4798      	blx	r3
   1acd6:	4620      	mov	r0, r4
   1acd8:	f7f8 ff24 	bl	13b24 <nrf_free>
   1acdc:	68e8      	ldr	r0, [r5, #12]
   1acde:	f7fc fa59 	bl	17194 <linked_list_size_get>
   1ace2:	2800      	cmp	r0, #0
   1ace4:	d1e6      	bne.n	1acb4 <stream_handler_flush+0xc>
   1ace6:	b005      	add	sp, #20
   1ace8:	bd30      	pop	{r4, r5, pc}
   1acea:	2008      	movs	r0, #8
   1acec:	b005      	add	sp, #20
   1acee:	bd30      	pop	{r4, r5, pc}

0001acf0 <stream_handler_free>:
   1acf0:	b530      	push	{r4, r5, lr}
   1acf2:	4605      	mov	r5, r0
   1acf4:	68c0      	ldr	r0, [r0, #12]
   1acf6:	b085      	sub	sp, #20
   1acf8:	b9a0      	cbnz	r0, 1ad24 <stream_handler_free+0x34>
   1acfa:	e01c      	b.n	1ad36 <stream_handler_free+0x46>
   1acfc:	f7fc fa3a 	bl	17174 <linked_list_pop>
   1ad00:	4604      	mov	r4, r0
   1ad02:	b170      	cbz	r0, 1ad22 <stream_handler_free+0x32>
   1ad04:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ad08:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ad0c:	e9cd 0100 	strd	r0, r1, [sp]
   1ad10:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ad14:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ad18:	4668      	mov	r0, sp
   1ad1a:	4798      	blx	r3
   1ad1c:	4620      	mov	r0, r4
   1ad1e:	f7f8 ff01 	bl	13b24 <nrf_free>
   1ad22:	68e8      	ldr	r0, [r5, #12]
   1ad24:	f7fc fa36 	bl	17194 <linked_list_size_get>
   1ad28:	4604      	mov	r4, r0
   1ad2a:	68e8      	ldr	r0, [r5, #12]
   1ad2c:	2c00      	cmp	r4, #0
   1ad2e:	d1e5      	bne.n	1acfc <stream_handler_free+0xc>
   1ad30:	f7f8 fef8 	bl	13b24 <nrf_free>
   1ad34:	60ec      	str	r4, [r5, #12]
   1ad36:	b005      	add	sp, #20
   1ad38:	bd30      	pop	{r4, r5, pc}
   1ad3a:	bf00      	nop

0001ad3c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1ad3c:	4a07      	ldr	r2, [pc, #28]	; (1ad5c <SystemInit+0x20>)
   1ad3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1ad42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1ad46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1ad4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ad4e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1ad52:	4b03      	ldr	r3, [pc, #12]	; (1ad60 <SystemInit+0x24>)
   1ad54:	4a03      	ldr	r2, [pc, #12]	; (1ad64 <SystemInit+0x28>)
   1ad56:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1ad58:	4770      	bx	lr
   1ad5a:	bf00      	nop
   1ad5c:	e000ed00 	.word	0xe000ed00
   1ad60:	2002c560 	.word	0x2002c560
   1ad64:	03d09000 	.word	0x03d09000

0001ad68 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   1ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad6c:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ad6e:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ad70:	2024      	movs	r0, #36	; 0x24
   1ad72:	4d42      	ldr	r5, [pc, #264]	; (1ae7c <nrfx_uarte_init+0x114>)
   1ad74:	fb00 5004 	mla	r0, r0, r4, r5
   1ad78:	f890 0020 	ldrb.w	r0, [r0, #32]
   1ad7c:	2800      	cmp	r0, #0
   1ad7e:	d17a      	bne.n	1ae76 <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   1ad80:	680f      	ldr	r7, [r1, #0]
   1ad82:	1c7b      	adds	r3, r7, #1
   1ad84:	d009      	beq.n	1ad9a <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ad86:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ad88:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   1ad8c:	483c      	ldr	r0, [pc, #240]	; (1ae80 <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ad8e:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1ad90:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ad92:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1ad96:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   1ad9a:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   1ad9e:	f891 801b 	ldrb.w	r8, [r1, #27]
   1ada2:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1ada6:	bf1f      	itttt	ne
   1ada8:	f04f 0e00 	movne.w	lr, #0
   1adac:	4834      	ldrne	r0, [pc, #208]	; (1ae80 <nrfx_uarte_init+0x118>)
   1adae:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   1adb2:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   1adb6:	6948      	ldr	r0, [r1, #20]
   1adb8:	6833      	ldr	r3, [r6, #0]
   1adba:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   1adbe:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   1adc2:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   1adc4:	f1be 0f01 	cmp.w	lr, #1
   1adc8:	ea40 0008 	orr.w	r0, r0, r8
   1adcc:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1add0:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   1add4:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1add8:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   1addc:	d120      	bne.n	1ae20 <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   1adde:	688f      	ldr	r7, [r1, #8]
   1ade0:	1c78      	adds	r0, r7, #1
   1ade2:	bf1f      	itttt	ne
   1ade4:	f04f 0e00 	movne.w	lr, #0
   1ade8:	f8df c094 	ldrne.w	ip, [pc, #148]	; 1ae80 <nrfx_uarte_init+0x118>
   1adec:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   1adf0:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   1adf4:	68c8      	ldr	r0, [r1, #12]
   1adf6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1adfa:	d00d      	beq.n	1ae18 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1adfc:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ae00:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   1ae04:	f8df e078 	ldr.w	lr, [pc, #120]	; 1ae80 <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ae08:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   1ae0c:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ae10:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   1ae14:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1ae18:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1ae1c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   1ae20:	2324      	movs	r3, #36	; 0x24
   1ae22:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   1ae24:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   1ae26:	18e8      	adds	r0, r5, r3
   1ae28:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   1ae2a:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   1ae2c:	b192      	cbz	r2, 1ae54 <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ae2e:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   1ae30:	6830      	ldr	r0, [r6, #0]
   1ae32:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1ae36:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1ae3a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1ae3e:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   1ae42:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   1ae46:	4b0f      	ldr	r3, [pc, #60]	; (1ae84 <nrfx_uarte_init+0x11c>)
   1ae48:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   1ae4c:	f340 3007 	sbfx	r0, r0, #12, #8
   1ae50:	f7f4 fd38 	bl	f8c4 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ae54:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   1ae56:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ae58:	480b      	ldr	r0, [pc, #44]	; (1ae88 <nrfx_uarte_init+0x120>)
   1ae5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   1ae5e:	2324      	movs	r3, #36	; 0x24
   1ae60:	2200      	movs	r2, #0
   1ae62:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   1ae66:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   1ae6a:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   1ae6c:	2201      	movs	r2, #1
   1ae6e:	f883 2020 	strb.w	r2, [r3, #32]
}
   1ae72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1ae76:	4805      	ldr	r0, [pc, #20]	; (1ae8c <nrfx_uarte_init+0x124>)
   1ae78:	e7fb      	b.n	1ae72 <nrfx_uarte_init+0x10a>
   1ae7a:	bf00      	nop
   1ae7c:	20020b40 	.word	0x20020b40
   1ae80:	40842500 	.word	0x40842500
   1ae84:	00420310 	.word	0x00420310
   1ae88:	0bad0000 	.word	0x0bad0000
   1ae8c:	0bad0005 	.word	0x0bad0005

0001ae90 <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1ae90:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   1ae94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   1ae98:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   1ae9a:	d12e      	bne.n	1aefa <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1ae9c:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ae9e:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1aea0:	4f19      	ldr	r7, [pc, #100]	; (1af08 <nrfx_uarte_tx+0x78>)
   1aea2:	fb04 7405 	mla	r4, r4, r5, r7
   1aea6:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   1aea8:	bb4e      	cbnz	r6, 1aefe <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   1aeaa:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   1aeac:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aeae:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   1aeb2:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   1aeb6:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1aeb8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1aebc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aec0:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   1aec2:	60a1      	str	r1, [r4, #8]
   1aec4:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   1aec6:	6862      	ldr	r2, [r4, #4]
   1aec8:	b9da      	cbnz	r2, 1af02 <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aeca:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1aece:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   1aed2:	b919      	cbnz	r1, 1aedc <nrfx_uarte_tx+0x4c>
   1aed4:	2a00      	cmp	r2, #0
   1aed6:	d0f8      	beq.n	1aeca <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   1aed8:	480c      	ldr	r0, [pc, #48]	; (1af0c <nrfx_uarte_tx+0x7c>)
   1aeda:	e008      	b.n	1aeee <nrfx_uarte_tx+0x5e>
        if (txstopped)
   1aedc:	2a00      	cmp	r2, #0
   1aede:	d1fb      	bne.n	1aed8 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aee0:	2201      	movs	r2, #1
   1aee2:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aee4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   1aee8:	2a00      	cmp	r2, #0
   1aeea:	d0fb      	beq.n	1aee4 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   1aeec:	4808      	ldr	r0, [pc, #32]	; (1af10 <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   1aeee:	2324      	movs	r3, #36	; 0x24
   1aef0:	fb03 7505 	mla	r5, r3, r5, r7
   1aef4:	2300      	movs	r3, #0
   1aef6:	616b      	str	r3, [r5, #20]
}
   1aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   1aefa:	4806      	ldr	r0, [pc, #24]	; (1af14 <nrfx_uarte_tx+0x84>)
   1aefc:	e7fc      	b.n	1aef8 <nrfx_uarte_tx+0x68>
        return err_code;
   1aefe:	4806      	ldr	r0, [pc, #24]	; (1af18 <nrfx_uarte_tx+0x88>)
   1af00:	e7fa      	b.n	1aef8 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   1af02:	4803      	ldr	r0, [pc, #12]	; (1af10 <nrfx_uarte_tx+0x80>)
   1af04:	e7f8      	b.n	1aef8 <nrfx_uarte_tx+0x68>
   1af06:	bf00      	nop
   1af08:	20020b40 	.word	0x20020b40
   1af0c:	0bad0008 	.word	0x0bad0008
   1af10:	0bad0000 	.word	0x0bad0000
   1af14:	0bad000a 	.word	0x0bad000a
   1af18:	0bad000b 	.word	0x0bad000b

0001af1c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1af1c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1af1e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1af20:	4b08      	ldr	r3, [pc, #32]	; (1af44 <z_sys_device_do_config_level+0x28>)
   1af22:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1af26:	3001      	adds	r0, #1
   1af28:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1af2c:	42a5      	cmp	r5, r4
   1af2e:	d800      	bhi.n	1af32 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1af30:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1af32:	6823      	ldr	r3, [r4, #0]
   1af34:	4620      	mov	r0, r4
   1af36:	685b      	ldr	r3, [r3, #4]
   1af38:	4798      	blx	r3
		if (retval != 0) {
   1af3a:	b100      	cbz	r0, 1af3e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1af3c:	6066      	str	r6, [r4, #4]
								info++) {
   1af3e:	340c      	adds	r4, #12
   1af40:	e7f4      	b.n	1af2c <z_sys_device_do_config_level+0x10>
   1af42:	bf00      	nop
   1af44:	0001f910 	.word	0x0001f910

0001af48 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af48:	4b10      	ldr	r3, [pc, #64]	; (1af8c <z_impl_device_get_binding+0x44>)
{
   1af4a:	b570      	push	{r4, r5, r6, lr}
   1af4c:	4605      	mov	r5, r0
   1af4e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af50:	4c0f      	ldr	r4, [pc, #60]	; (1af90 <z_impl_device_get_binding+0x48>)
   1af52:	429c      	cmp	r4, r3
   1af54:	d104      	bne.n	1af60 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1af56:	4c0e      	ldr	r4, [pc, #56]	; (1af90 <z_impl_device_get_binding+0x48>)
   1af58:	42b4      	cmp	r4, r6
   1af5a:	d109      	bne.n	1af70 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1af5c:	2400      	movs	r4, #0
   1af5e:	e012      	b.n	1af86 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1af60:	6862      	ldr	r2, [r4, #4]
   1af62:	b11a      	cbz	r2, 1af6c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1af64:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1af66:	6812      	ldr	r2, [r2, #0]
   1af68:	42aa      	cmp	r2, r5
   1af6a:	d00c      	beq.n	1af86 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af6c:	340c      	adds	r4, #12
   1af6e:	e7f0      	b.n	1af52 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1af70:	6863      	ldr	r3, [r4, #4]
   1af72:	b90b      	cbnz	r3, 1af78 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1af74:	340c      	adds	r4, #12
   1af76:	e7ef      	b.n	1af58 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1af78:	6823      	ldr	r3, [r4, #0]
   1af7a:	4628      	mov	r0, r5
   1af7c:	6819      	ldr	r1, [r3, #0]
   1af7e:	f002 fb36 	bl	1d5ee <strcmp>
   1af82:	2800      	cmp	r0, #0
   1af84:	d1f6      	bne.n	1af74 <z_impl_device_get_binding+0x2c>
}
   1af86:	4620      	mov	r0, r4
   1af88:	bd70      	pop	{r4, r5, r6, pc}
   1af8a:	bf00      	nop
   1af8c:	2002c650 	.word	0x2002c650
   1af90:	2002c56c 	.word	0x2002c56c

0001af94 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1af94:	4b01      	ldr	r3, [pc, #4]	; (1af9c <z_impl_z_errno+0x8>)
   1af96:	6898      	ldr	r0, [r3, #8]
}
   1af98:	3054      	adds	r0, #84	; 0x54
   1af9a:	4770      	bx	lr
   1af9c:	20024d28 	.word	0x20024d28

0001afa0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1afa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1afa4:	4605      	mov	r5, r0
   1afa6:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1afa8:	f000 fe9a 	bl	1bce0 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1afac:	2201      	movs	r2, #1
   1afae:	f04f 0300 	mov.w	r3, #0
   1afb2:	4c26      	ldr	r4, [pc, #152]	; (1b04c <z_fatal_error+0xac>)
   1afb4:	f362 0307 	bfi	r3, r2, #0, #8
   1afb8:	4a25      	ldr	r2, [pc, #148]	; (1b050 <z_fatal_error+0xb0>)
   1afba:	2d04      	cmp	r5, #4
   1afbc:	eba4 0402 	sub.w	r4, r4, r2
   1afc0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1afc4:	bf98      	it	ls
   1afc6:	4a23      	ldrls	r2, [pc, #140]	; (1b054 <z_fatal_error+0xb4>)
   1afc8:	f364 138f 	bfi	r3, r4, #6, #10
   1afcc:	f8ad 3000 	strh.w	r3, [sp]
   1afd0:	4606      	mov	r6, r0
   1afd2:	f04f 0300 	mov.w	r3, #0
   1afd6:	bf94      	ite	ls
   1afd8:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1afdc:	4a1e      	ldrhi	r2, [pc, #120]	; (1b058 <z_fatal_error+0xb8>)
   1afde:	4629      	mov	r1, r5
   1afe0:	481e      	ldr	r0, [pc, #120]	; (1b05c <z_fatal_error+0xbc>)
   1afe2:	f001 fdfb 	bl	1cbdc <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1afe6:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1afea:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1afee:	b14b      	cbz	r3, 1b004 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   1aff0:	f04f 0100 	mov.w	r1, #0
   1aff4:	2301      	movs	r3, #1
   1aff6:	f363 0107 	bfi	r1, r3, #0, #8
   1affa:	f364 118f 	bfi	r1, r4, #6, #10
   1affe:	4818      	ldr	r0, [pc, #96]	; (1b060 <z_fatal_error+0xc0>)
   1b000:	f001 fdb3 	bl	1cb6a <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1b004:	f04f 0700 	mov.w	r7, #0
   1b008:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   1b00a:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   1b00c:	f363 0707 	bfi	r7, r3, #0, #8
   1b010:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   1b014:	f003 fe69 	bl	1ecea <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1b018:	b1b0      	cbz	r0, 1b048 <z_fatal_error+0xa8>
   1b01a:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1b01c:	4b11      	ldr	r3, [pc, #68]	; (1b064 <z_fatal_error+0xc4>)
   1b01e:	2a00      	cmp	r2, #0
   1b020:	bf08      	it	eq
   1b022:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1b024:	f7f3 ff92 	bl	ef4c <log_strdup>
   1b028:	463b      	mov	r3, r7
   1b02a:	4602      	mov	r2, r0
   1b02c:	4631      	mov	r1, r6
   1b02e:	480e      	ldr	r0, [pc, #56]	; (1b068 <z_fatal_error+0xc8>)
   1b030:	f001 fdbc 	bl	1cbac <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1b034:	4641      	mov	r1, r8
   1b036:	4628      	mov	r0, r5
   1b038:	f7f7 fbce 	bl	127d8 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   1b03c:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1b03e:	b002      	add	sp, #8
   1b040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b044:	f7f5 b89e 	b.w	10184 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1b048:	4806      	ldr	r0, [pc, #24]	; (1b064 <z_fatal_error+0xc4>)
   1b04a:	e7eb      	b.n	1b024 <z_fatal_error+0x84>
   1b04c:	0001f3d0 	.word	0x0001f3d0
   1b050:	0001f370 	.word	0x0001f370
   1b054:	0001f928 	.word	0x0001f928
   1b058:	00020eb7 	.word	0x00020eb7
   1b05c:	00020ecd 	.word	0x00020ecd
   1b060:	00020ef5 	.word	0x00020ef5
   1b064:	00020ec5 	.word	0x00020ec5
   1b068:	00020f16 	.word	0x00020f16

0001b06c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1b06c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1b06e:	4d0b      	ldr	r5, [pc, #44]	; (1b09c <idle+0x30>)
	__asm__ volatile(
   1b070:	f04f 0220 	mov.w	r2, #32
   1b074:	f3ef 8311 	mrs	r3, BASEPRI
   1b078:	f382 8811 	msr	BASEPRI, r2
   1b07c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1b080:	f003 fe8b 	bl	1ed9a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b084:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1b086:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b088:	2802      	cmp	r0, #2
   1b08a:	bfd8      	it	le
   1b08c:	4608      	movle	r0, r1
   1b08e:	f003 fe94 	bl	1edba <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1b092:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1b094:	f7f4 fca0 	bl	f9d8 <arch_cpu_idle>
   1b098:	e7ea      	b.n	1b070 <idle+0x4>
   1b09a:	bf00      	nop
   1b09c:	20024d28 	.word	0x20024d28

0001b0a0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b0a0:	4802      	ldr	r0, [pc, #8]	; (1b0ac <z_bss_zero+0xc>)
   1b0a2:	4a03      	ldr	r2, [pc, #12]	; (1b0b0 <z_bss_zero+0x10>)
   1b0a4:	2100      	movs	r1, #0
   1b0a6:	1a12      	subs	r2, r2, r0
   1b0a8:	f002 baff 	b.w	1d6aa <memset>
   1b0ac:	20020000 	.word	0x20020000
   1b0b0:	200266b4 	.word	0x200266b4

0001b0b4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1b0b4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1b0b6:	4806      	ldr	r0, [pc, #24]	; (1b0d0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1b0b8:	4a06      	ldr	r2, [pc, #24]	; (1b0d4 <z_data_copy+0x20>)
   1b0ba:	4907      	ldr	r1, [pc, #28]	; (1b0d8 <z_data_copy+0x24>)
   1b0bc:	1a12      	subs	r2, r2, r0
   1b0be:	f002 faca 	bl	1d656 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b0c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1b0c6:	4a05      	ldr	r2, [pc, #20]	; (1b0dc <z_data_copy+0x28>)
   1b0c8:	4905      	ldr	r1, [pc, #20]	; (1b0e0 <z_data_copy+0x2c>)
   1b0ca:	4806      	ldr	r0, [pc, #24]	; (1b0e4 <z_data_copy+0x30>)
   1b0cc:	f002 bac3 	b.w	1d656 <memcpy>
   1b0d0:	2002c50c 	.word	0x2002c50c
   1b0d4:	2002c75c 	.word	0x2002c75c
   1b0d8:	00020f80 	.word	0x00020f80
   1b0dc:	00000000 	.word	0x00000000
   1b0e0:	00020f80 	.word	0x00020f80
   1b0e4:	20020000 	.word	0x20020000

0001b0e8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1b0e8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b0ea:	2002      	movs	r0, #2
   1b0ec:	f7ff ff16 	bl	1af1c <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1b0f0:	4a08      	ldr	r2, [pc, #32]	; (1b114 <bg_thread_main+0x2c>)
   1b0f2:	4909      	ldr	r1, [pc, #36]	; (1b118 <bg_thread_main+0x30>)
   1b0f4:	4809      	ldr	r0, [pc, #36]	; (1b11c <bg_thread_main+0x34>)
   1b0f6:	f001 fd05 	bl	1cb04 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1b0fa:	2003      	movs	r0, #3
   1b0fc:	f7ff ff0e 	bl	1af1c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1b100:	f000 ff38 	bl	1bf74 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1b104:	f001 f974 	bl	1c3f0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b108:	4a05      	ldr	r2, [pc, #20]	; (1b120 <bg_thread_main+0x38>)
   1b10a:	7b13      	ldrb	r3, [r2, #12]
   1b10c:	f023 0301 	bic.w	r3, r3, #1
   1b110:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b112:	bd08      	pop	{r3, pc}
   1b114:	0001fdef 	.word	0x0001fdef
   1b118:	00020f2e 	.word	0x00020f2e
   1b11c:	00020f34 	.word	0x00020f34
   1b120:	20020c14 	.word	0x20020c14

0001b124 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1b124:	b580      	push	{r7, lr}
   1b126:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b128:	f7f3 fd84 	bl	ec34 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1b12c:	4b33      	ldr	r3, [pc, #204]	; (1b1fc <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b12e:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b132:	2400      	movs	r4, #0
   1b134:	23e0      	movs	r3, #224	; 0xe0
   1b136:	4d32      	ldr	r5, [pc, #200]	; (1b200 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1b138:	2701      	movs	r7, #1
   1b13a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b13e:	77ec      	strb	r4, [r5, #31]
   1b140:	762c      	strb	r4, [r5, #24]
   1b142:	766c      	strb	r4, [r5, #25]
   1b144:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1b148:	4e2e      	ldr	r6, [pc, #184]	; (1b204 <z_cstart+0xe0>)
   1b14a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b14e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b150:	f7f4 fff2 	bl	10138 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b154:	f7f4 fc3a 	bl	f9cc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b15c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b15e:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1b160:	ab06      	add	r3, sp, #24
   1b162:	22b0      	movs	r2, #176	; 0xb0
   1b164:	4621      	mov	r1, r4
   1b166:	4618      	mov	r0, r3
   1b168:	f002 fa9f 	bl	1d6aa <memset>
	_current = &dummy_thread;
   1b16c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b16e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1b170:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b174:	f7ff fed2 	bl	1af1c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b178:	4638      	mov	r0, r7
   1b17a:	f7ff fecf 	bl	1af1c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   1b17e:	4d22      	ldr	r5, [pc, #136]	; (1b208 <z_cstart+0xe4>)
	z_sched_init();
   1b180:	f000 fd2e 	bl	1bbe0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1b184:	4b21      	ldr	r3, [pc, #132]	; (1b20c <z_cstart+0xe8>)
   1b186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b18a:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1b18e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1b192:	4b1f      	ldr	r3, [pc, #124]	; (1b210 <z_cstart+0xec>)
   1b194:	e9cd 4400 	strd	r4, r4, [sp]
   1b198:	491e      	ldr	r1, [pc, #120]	; (1b214 <z_cstart+0xf0>)
   1b19a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1b19c:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1b19e:	f000 fe49 	bl	1be34 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b1a2:	7b6b      	ldrb	r3, [r5, #13]
   1b1a4:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b1a8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b1ac:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b1ae:	d104      	bne.n	1b1ba <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1b1b0:	69ab      	ldr	r3, [r5, #24]
   1b1b2:	b913      	cbnz	r3, 1b1ba <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   1b1b4:	4628      	mov	r0, r5
   1b1b6:	f000 fb53 	bl	1b860 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1b1ba:	4b17      	ldr	r3, [pc, #92]	; (1b218 <z_cstart+0xf4>)
   1b1bc:	2201      	movs	r2, #1
   1b1be:	9305      	str	r3, [sp, #20]
   1b1c0:	230f      	movs	r3, #15
   1b1c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1b1c6:	2300      	movs	r3, #0
   1b1c8:	4d14      	ldr	r5, [pc, #80]	; (1b21c <z_cstart+0xf8>)
   1b1ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b1ce:	9300      	str	r3, [sp, #0]
   1b1d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b1d4:	4b12      	ldr	r3, [pc, #72]	; (1b220 <z_cstart+0xfc>)
   1b1d6:	4913      	ldr	r1, [pc, #76]	; (1b224 <z_cstart+0x100>)
   1b1d8:	4628      	mov	r0, r5
   1b1da:	f000 fe2b 	bl	1be34 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b1de:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1b1e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b1e4:	f023 0304 	bic.w	r3, r3, #4
   1b1e8:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b1ea:	4b0f      	ldr	r3, [pc, #60]	; (1b228 <z_cstart+0x104>)
   1b1ec:	4909      	ldr	r1, [pc, #36]	; (1b214 <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   1b1ee:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1b1f2:	4805      	ldr	r0, [pc, #20]	; (1b208 <z_cstart+0xe4>)
   1b1f4:	4b06      	ldr	r3, [pc, #24]	; (1b210 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1b1f6:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1b1f8:	f7f4 fbbe 	bl	f978 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b1fc:	20028af8 	.word	0x20028af8
   1b200:	e000ed00 	.word	0xe000ed00
   1b204:	20024d28 	.word	0x20024d28
   1b208:	20020c14 	.word	0x20020c14
   1b20c:	00020f60 	.word	0x00020f60
   1b210:	0001b0e9 	.word	0x0001b0e9
   1b214:	200271b8 	.word	0x200271b8
   1b218:	00020f65 	.word	0x00020f65
   1b21c:	20020b64 	.word	0x20020b64
   1b220:	0001b06d 	.word	0x0001b06d
   1b224:	200281b8 	.word	0x200281b8
   1b228:	20024d40 	.word	0x20024d40

0001b22c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1b22c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1b22e:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b230:	4b0a      	ldr	r3, [pc, #40]	; (1b25c <init_mem_slab_module+0x30>)
   1b232:	480b      	ldr	r0, [pc, #44]	; (1b260 <init_mem_slab_module+0x34>)
   1b234:	4283      	cmp	r3, r0
   1b236:	d301      	bcc.n	1b23c <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1b238:	2000      	movs	r0, #0
   1b23a:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   1b23c:	2100      	movs	r1, #0
	p = slab->buffer;
   1b23e:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b240:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1b242:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b244:	42a9      	cmp	r1, r5
   1b246:	d101      	bne.n	1b24c <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b248:	331c      	adds	r3, #28
   1b24a:	e7f3      	b.n	1b234 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1b24c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b24e:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   1b250:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1b252:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1b254:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   1b256:	4432      	add	r2, r6
   1b258:	e7f4      	b.n	1b244 <init_mem_slab_module+0x18>
   1b25a:	bf00      	nop
   1b25c:	2002c650 	.word	0x2002c650
   1b260:	2002c66c 	.word	0x2002c66c

0001b264 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1b264:	b510      	push	{r4, lr}
   1b266:	4613      	mov	r3, r2
   1b268:	460c      	mov	r4, r1
   1b26a:	f04f 0220 	mov.w	r2, #32
   1b26e:	f3ef 8111 	mrs	r1, BASEPRI
   1b272:	f382 8811 	msr	BASEPRI, r2
   1b276:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1b27a:	6942      	ldr	r2, [r0, #20]
   1b27c:	b15a      	cbz	r2, 1b296 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   1b27e:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b280:	6813      	ldr	r3, [r2, #0]
   1b282:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b284:	6983      	ldr	r3, [r0, #24]
   1b286:	3301      	adds	r3, #1
   1b288:	6183      	str	r3, [r0, #24]
		result = 0;
   1b28a:	2000      	movs	r0, #0
	__asm__ volatile(
   1b28c:	f381 8811 	msr	BASEPRI, r1
   1b290:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b294:	e00d      	b.n	1b2b2 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1b296:	b91b      	cbnz	r3, 1b2a0 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1b298:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b29a:	f06f 000b 	mvn.w	r0, #11
   1b29e:	e7f5      	b.n	1b28c <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b2a0:	4602      	mov	r2, r0
   1b2a2:	4804      	ldr	r0, [pc, #16]	; (1b2b4 <k_mem_slab_alloc+0x50>)
   1b2a4:	f000 fc18 	bl	1bad8 <z_pend_curr>
		if (result == 0) {
   1b2a8:	b918      	cbnz	r0, 1b2b2 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1b2aa:	4b03      	ldr	r3, [pc, #12]	; (1b2b8 <k_mem_slab_alloc+0x54>)
   1b2ac:	689b      	ldr	r3, [r3, #8]
   1b2ae:	695b      	ldr	r3, [r3, #20]
   1b2b0:	6023      	str	r3, [r4, #0]
}
   1b2b2:	bd10      	pop	{r4, pc}
   1b2b4:	20026591 	.word	0x20026591
   1b2b8:	20024d28 	.word	0x20024d28

0001b2bc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b2bc:	b570      	push	{r4, r5, r6, lr}
   1b2be:	4604      	mov	r4, r0
   1b2c0:	460d      	mov	r5, r1
	__asm__ volatile(
   1b2c2:	f04f 0320 	mov.w	r3, #32
   1b2c6:	f3ef 8611 	mrs	r6, BASEPRI
   1b2ca:	f383 8811 	msr	BASEPRI, r3
   1b2ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b2d2:	f003 fcb2 	bl	1ec3a <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1b2d6:	b180      	cbz	r0, 1b2fa <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b2d8:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1b2da:	682a      	ldr	r2, [r5, #0]
   1b2dc:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1b2de:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b2e0:	7b42      	ldrb	r2, [r0, #13]
   1b2e2:	06d2      	lsls	r2, r2, #27
   1b2e4:	d103      	bne.n	1b2ee <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1b2e6:	6983      	ldr	r3, [r0, #24]
   1b2e8:	b90b      	cbnz	r3, 1b2ee <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1b2ea:	f000 fab9 	bl	1b860 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1b2ee:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1b2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b2f4:	4807      	ldr	r0, [pc, #28]	; (1b314 <k_mem_slab_free+0x58>)
   1b2f6:	f003 bc2a 	b.w	1eb4e <z_reschedule>
		**(char ***)mem = slab->free_list;
   1b2fa:	682b      	ldr	r3, [r5, #0]
   1b2fc:	6962      	ldr	r2, [r4, #20]
   1b2fe:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1b300:	682b      	ldr	r3, [r5, #0]
   1b302:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1b304:	69a3      	ldr	r3, [r4, #24]
   1b306:	3b01      	subs	r3, #1
   1b308:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1b30a:	f386 8811 	msr	BASEPRI, r6
   1b30e:	f3bf 8f6f 	isb	sy
}
   1b312:	bd70      	pop	{r4, r5, r6, pc}
   1b314:	20026591 	.word	0x20026591

0001b318 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1b318:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b31a:	4c07      	ldr	r4, [pc, #28]	; (1b338 <init_static_pools+0x20>)
   1b31c:	4d07      	ldr	r5, [pc, #28]	; (1b33c <init_static_pools+0x24>)
   1b31e:	42ac      	cmp	r4, r5
   1b320:	d301      	bcc.n	1b326 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1b322:	2000      	movs	r0, #0
   1b324:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b326:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1b32a:	4620      	mov	r0, r4
   1b32c:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1b330:	f001 f8b1 	bl	1c496 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b334:	341c      	adds	r4, #28
   1b336:	e7f2      	b.n	1b31e <init_static_pools+0x6>
   1b338:	2002c66c 	.word	0x2002c66c
   1b33c:	2002c688 	.word	0x2002c688

0001b340 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1b344:	1e1c      	subs	r4, r3, #0
{
   1b346:	b085      	sub	sp, #20
   1b348:	4607      	mov	r7, r0
   1b34a:	460d      	mov	r5, r1
   1b34c:	4692      	mov	sl, r2
	if (timeout > 0) {
   1b34e:	dd3b      	ble.n	1b3c8 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   1b350:	f003 fd51 	bl	1edf6 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1b354:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1b358:	4b1d      	ldr	r3, [pc, #116]	; (1b3d0 <k_mem_pool_alloc+0x90>)
   1b35a:	4e1e      	ldr	r6, [pc, #120]	; (1b3d4 <k_mem_pool_alloc+0x94>)
   1b35c:	1afb      	subs	r3, r7, r3
   1b35e:	109b      	asrs	r3, r3, #2
   1b360:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1b362:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1b366:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1b368:	ab03      	add	r3, sp, #12
   1b36a:	aa02      	add	r2, sp, #8
   1b36c:	9500      	str	r5, [sp, #0]
   1b36e:	4651      	mov	r1, sl
   1b370:	4638      	mov	r0, r7
   1b372:	f001 f8d6 	bl	1c522 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1b376:	796b      	ldrb	r3, [r5, #5]
   1b378:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1b37a:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1b37c:	f362 0303 	bfi	r3, r2, #0, #4
   1b380:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1b382:	686b      	ldr	r3, [r5, #4]
   1b384:	9a03      	ldr	r2, [sp, #12]
   1b386:	f362 331f 	bfi	r3, r2, #12, #20
   1b38a:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1b38c:	b1c8      	cbz	r0, 1b3c2 <k_mem_pool_alloc+0x82>
   1b38e:	b1c4      	cbz	r4, 1b3c2 <k_mem_pool_alloc+0x82>
   1b390:	f110 0f0c 	cmn.w	r0, #12
   1b394:	d115      	bne.n	1b3c2 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   1b396:	f04f 0320 	mov.w	r3, #32
   1b39a:	f3ef 8011 	mrs	r0, BASEPRI
   1b39e:	f383 8811 	msr	BASEPRI, r3
   1b3a2:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1b3a6:	4622      	mov	r2, r4
   1b3a8:	4659      	mov	r1, fp
   1b3aa:	f000 fb71 	bl	1ba90 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1b3ae:	1c63      	adds	r3, r4, #1
   1b3b0:	d0da      	beq.n	1b368 <k_mem_pool_alloc+0x28>
   1b3b2:	f003 fd20 	bl	1edf6 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1b3b6:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1b3ba:	2c00      	cmp	r4, #0
   1b3bc:	dcd4      	bgt.n	1b368 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1b3be:	f06f 000a 	mvn.w	r0, #10
}
   1b3c2:	b005      	add	sp, #20
   1b3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1b3c8:	f04f 0800 	mov.w	r8, #0
   1b3cc:	e7c4      	b.n	1b358 <k_mem_pool_alloc+0x18>
   1b3ce:	bf00      	nop
   1b3d0:	2002c66c 	.word	0x2002c66c
   1b3d4:	b6db6db7 	.word	0xb6db6db7

0001b3d8 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1b3d8:	b570      	push	{r4, r5, r6, lr}
   1b3da:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1b3dc:	6802      	ldr	r2, [r0, #0]
   1b3de:	7841      	ldrb	r1, [r0, #1]
   1b3e0:	4e11      	ldr	r6, [pc, #68]	; (1b428 <k_mem_pool_free_id+0x50>)
   1b3e2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1b3e6:	00a4      	lsls	r4, r4, #2
   1b3e8:	0b12      	lsrs	r2, r2, #12
   1b3ea:	f001 010f 	and.w	r1, r1, #15
   1b3ee:	1930      	adds	r0, r6, r4
   1b3f0:	f001 f949 	bl	1c686 <z_sys_mem_pool_block_free>
   1b3f4:	f04f 0320 	mov.w	r3, #32
   1b3f8:	f3ef 8511 	mrs	r5, BASEPRI
   1b3fc:	f383 8811 	msr	BASEPRI, r3
   1b400:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1b404:	f104 0014 	add.w	r0, r4, #20
   1b408:	4430      	add	r0, r6
   1b40a:	f003 fc43 	bl	1ec94 <z_unpend_all>

	if (need_sched != 0) {
   1b40e:	b128      	cbz	r0, 1b41c <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   1b410:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1b412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b416:	4805      	ldr	r0, [pc, #20]	; (1b42c <k_mem_pool_free_id+0x54>)
   1b418:	f003 bb99 	b.w	1eb4e <z_reschedule>
	__asm__ volatile(
   1b41c:	f385 8811 	msr	BASEPRI, r5
   1b420:	f3bf 8f6f 	isb	sy
}
   1b424:	bd70      	pop	{r4, r5, r6, pc}
   1b426:	bf00      	nop
   1b428:	2002c66c 	.word	0x2002c66c
   1b42c:	20026591 	.word	0x20026591

0001b430 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1b430:	4601      	mov	r1, r0
   1b432:	4801      	ldr	r0, [pc, #4]	; (1b438 <k_malloc+0x8>)
   1b434:	f003 ba4d 	b.w	1e8d2 <k_mem_pool_malloc>
   1b438:	2002c66c 	.word	0x2002c66c

0001b43c <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1b43c:	4b03      	ldr	r3, [pc, #12]	; (1b44c <z_thread_malloc+0x10>)
{
   1b43e:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1b440:	689b      	ldr	r3, [r3, #8]
   1b442:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1b444:	b108      	cbz	r0, 1b44a <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1b446:	f003 ba44 	b.w	1e8d2 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1b44a:	4770      	bx	lr
   1b44c:	20024d28 	.word	0x20024d28

0001b450 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b454:	4613      	mov	r3, r2
   1b456:	4604      	mov	r4, r0
   1b458:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b45a:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1b45e:	f04f 0220 	mov.w	r2, #32
   1b462:	f3ef 8611 	mrs	r6, BASEPRI
   1b466:	f382 8811 	msr	BASEPRI, r2
   1b46a:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1b46e:	6a01      	ldr	r1, [r0, #32]
   1b470:	68c2      	ldr	r2, [r0, #12]
   1b472:	4291      	cmp	r1, r2
   1b474:	d22e      	bcs.n	1b4d4 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b476:	f003 fbe0 	bl	1ec3a <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1b47a:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1b47c:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1b47e:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   1b480:	b198      	cbz	r0, 1b4aa <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   1b482:	6940      	ldr	r0, [r0, #20]
   1b484:	f002 f8e7 	bl	1d656 <memcpy>
   1b488:	2300      	movs	r3, #0
   1b48a:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b48c:	7b6b      	ldrb	r3, [r5, #13]
   1b48e:	06db      	lsls	r3, r3, #27
   1b490:	d104      	bne.n	1b49c <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   1b492:	69ab      	ldr	r3, [r5, #24]
   1b494:	b913      	cbnz	r3, 1b49c <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   1b496:	4628      	mov	r0, r5
   1b498:	f000 f9e2 	bl	1b860 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b49c:	4640      	mov	r0, r8
   1b49e:	4631      	mov	r1, r6
   1b4a0:	f003 fb55 	bl	1eb4e <z_reschedule>
			return 0;
   1b4a4:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1b4aa:	69e0      	ldr	r0, [r4, #28]
   1b4ac:	f002 f8d3 	bl	1d656 <memcpy>
		result = 0;
   1b4b0:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1b4b2:	69e3      	ldr	r3, [r4, #28]
   1b4b4:	68a2      	ldr	r2, [r4, #8]
   1b4b6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b4b8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b4ba:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b4bc:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b4be:	bf04      	itt	eq
   1b4c0:	6923      	ldreq	r3, [r4, #16]
   1b4c2:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1b4c4:	6a23      	ldr	r3, [r4, #32]
   1b4c6:	3301      	adds	r3, #1
   1b4c8:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1b4ca:	f386 8811 	msr	BASEPRI, r6
   1b4ce:	f3bf 8f6f 	isb	sy
	return result;
   1b4d2:	e7e8      	b.n	1b4a6 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   1b4d4:	b14b      	cbz	r3, 1b4ea <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   1b4d6:	4a06      	ldr	r2, [pc, #24]	; (1b4f0 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b4d8:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   1b4da:	6892      	ldr	r2, [r2, #8]
   1b4dc:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b4de:	4602      	mov	r2, r0
   1b4e0:	4640      	mov	r0, r8
}
   1b4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b4e6:	f000 baf7 	b.w	1bad8 <z_pend_curr>
		result = -ENOMSG;
   1b4ea:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1b4ee:	e7ec      	b.n	1b4ca <z_impl_k_msgq_put+0x7a>
   1b4f0:	20024d28 	.word	0x20024d28

0001b4f4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4f8:	4604      	mov	r4, r0
   1b4fa:	4613      	mov	r3, r2
   1b4fc:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b4fe:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1b502:	f04f 0220 	mov.w	r2, #32
   1b506:	f3ef 8611 	mrs	r6, BASEPRI
   1b50a:	f382 8811 	msr	BASEPRI, r2
   1b50e:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1b512:	6a22      	ldr	r2, [r4, #32]
   1b514:	2a00      	cmp	r2, #0
   1b516:	d037      	beq.n	1b588 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1b518:	68a2      	ldr	r2, [r4, #8]
   1b51a:	69a1      	ldr	r1, [r4, #24]
   1b51c:	f002 f89b 	bl	1d656 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1b520:	69a3      	ldr	r3, [r4, #24]
   1b522:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b524:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1b526:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1b528:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1b52a:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1b52c:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1b52e:	bf04      	itt	eq
   1b530:	6923      	ldreq	r3, [r4, #16]
   1b532:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1b534:	6a23      	ldr	r3, [r4, #32]
   1b536:	3b01      	subs	r3, #1
   1b538:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b53a:	f003 fb7e 	bl	1ec3a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b53e:	4605      	mov	r5, r0
   1b540:	2800      	cmp	r0, #0
   1b542:	d02e      	beq.n	1b5a2 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1b544:	68a2      	ldr	r2, [r4, #8]
   1b546:	6941      	ldr	r1, [r0, #20]
   1b548:	69e0      	ldr	r0, [r4, #28]
   1b54a:	f002 f884 	bl	1d656 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1b54e:	69e3      	ldr	r3, [r4, #28]
   1b550:	68a2      	ldr	r2, [r4, #8]
   1b552:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b554:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b556:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b558:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b55a:	bf04      	itt	eq
   1b55c:	6923      	ldreq	r3, [r4, #16]
   1b55e:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1b560:	6a23      	ldr	r3, [r4, #32]
   1b562:	3301      	adds	r3, #1
   1b564:	6223      	str	r3, [r4, #32]
   1b566:	2300      	movs	r3, #0
   1b568:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b56a:	7b6b      	ldrb	r3, [r5, #13]
   1b56c:	06db      	lsls	r3, r3, #27
   1b56e:	d104      	bne.n	1b57a <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   1b570:	69ab      	ldr	r3, [r5, #24]
   1b572:	b913      	cbnz	r3, 1b57a <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   1b574:	4628      	mov	r0, r5
   1b576:	f000 f973 	bl	1b860 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b57a:	4638      	mov	r0, r7
   1b57c:	4631      	mov	r1, r6
   1b57e:	f003 fae6 	bl	1eb4e <z_reschedule>
			return 0;
   1b582:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1b588:	b14b      	cbz	r3, 1b59e <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   1b58a:	4a08      	ldr	r2, [pc, #32]	; (1b5ac <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b58c:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   1b58e:	6892      	ldr	r2, [r2, #8]
   1b590:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b592:	4622      	mov	r2, r4
   1b594:	4631      	mov	r1, r6
}
   1b596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b59a:	f000 ba9d 	b.w	1bad8 <z_pend_curr>
		result = -ENOMSG;
   1b59e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1b5a2:	f386 8811 	msr	BASEPRI, r6
   1b5a6:	f3bf 8f6f 	isb	sy
	return result;
   1b5aa:	e7eb      	b.n	1b584 <z_impl_k_msgq_get+0x90>
   1b5ac:	20024d28 	.word	0x20024d28

0001b5b0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b5b2:	4604      	mov	r4, r0
   1b5b4:	460f      	mov	r7, r1
	__asm__ volatile(
   1b5b6:	f04f 0320 	mov.w	r3, #32
   1b5ba:	f3ef 8511 	mrs	r5, BASEPRI
   1b5be:	f383 8811 	msr	BASEPRI, r3
   1b5c2:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b5c6:	68c2      	ldr	r2, [r0, #12]
   1b5c8:	4930      	ldr	r1, [pc, #192]	; (1b68c <z_impl_k_mutex_lock+0xdc>)
   1b5ca:	b15a      	cbz	r2, 1b5e4 <z_impl_k_mutex_lock+0x34>
   1b5cc:	6880      	ldr	r0, [r0, #8]
   1b5ce:	688e      	ldr	r6, [r1, #8]
   1b5d0:	42b0      	cmp	r0, r6
   1b5d2:	d015      	beq.n	1b600 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1b5d4:	b9b7      	cbnz	r7, 1b604 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1b5d6:	f385 8811 	msr	BASEPRI, r5
   1b5da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b5de:	f06f 000f 	mvn.w	r0, #15
   1b5e2:	e00c      	b.n	1b5fe <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1b5e4:	688b      	ldr	r3, [r1, #8]
   1b5e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b5ea:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   1b5ec:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1b5ee:	3201      	adds	r2, #1
   1b5f0:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1b5f2:	60a3      	str	r3, [r4, #8]
   1b5f4:	f385 8811 	msr	BASEPRI, r5
   1b5f8:	f3bf 8f6f 	isb	sy
		return 0;
   1b5fc:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1b600:	6923      	ldr	r3, [r4, #16]
   1b602:	e7f2      	b.n	1b5ea <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b604:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b608:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1b60c:	4299      	cmp	r1, r3
   1b60e:	bfa8      	it	ge
   1b610:	4619      	movge	r1, r3
   1b612:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b616:	4299      	cmp	r1, r3
   1b618:	da2b      	bge.n	1b672 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1b61a:	f000 fa9f 	bl	1bb5c <z_set_prio>
   1b61e:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b620:	463b      	mov	r3, r7
   1b622:	4622      	mov	r2, r4
   1b624:	4629      	mov	r1, r5
   1b626:	481a      	ldr	r0, [pc, #104]	; (1b690 <z_impl_k_mutex_lock+0xe0>)
   1b628:	f000 fa56 	bl	1bad8 <z_pend_curr>
	if (got_mutex == 0) {
   1b62c:	2800      	cmp	r0, #0
   1b62e:	d0e6      	beq.n	1b5fe <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1b630:	f04f 0320 	mov.w	r3, #32
   1b634:	f3ef 8511 	mrs	r5, BASEPRI
   1b638:	f383 8811 	msr	BASEPRI, r3
   1b63c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b640:	6823      	ldr	r3, [r4, #0]
   1b642:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b644:	429c      	cmp	r4, r3
   1b646:	d007      	beq.n	1b658 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1b648:	b133      	cbz	r3, 1b658 <z_impl_k_mutex_lock+0xa8>
   1b64a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b64e:	4299      	cmp	r1, r3
   1b650:	bfa8      	it	ge
   1b652:	4619      	movge	r1, r3
   1b654:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b658:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b65a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b65e:	4299      	cmp	r1, r3
   1b660:	d109      	bne.n	1b676 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1b662:	b16e      	cbz	r6, 1b680 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1b664:	4629      	mov	r1, r5
   1b666:	480a      	ldr	r0, [pc, #40]	; (1b690 <z_impl_k_mutex_lock+0xe0>)
   1b668:	f003 fa71 	bl	1eb4e <z_reschedule>
	return -EAGAIN;
   1b66c:	f06f 000a 	mvn.w	r0, #10
   1b670:	e7c5      	b.n	1b5fe <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1b672:	2600      	movs	r6, #0
   1b674:	e7d4      	b.n	1b620 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1b676:	f000 fa71 	bl	1bb5c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b67a:	2800      	cmp	r0, #0
   1b67c:	d1f2      	bne.n	1b664 <z_impl_k_mutex_lock+0xb4>
   1b67e:	e7f0      	b.n	1b662 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1b680:	f385 8811 	msr	BASEPRI, r5
   1b684:	f3bf 8f6f 	isb	sy
   1b688:	e7f0      	b.n	1b66c <z_impl_k_mutex_lock+0xbc>
   1b68a:	bf00      	nop
   1b68c:	20024d28 	.word	0x20024d28
   1b690:	20026591 	.word	0x20026591

0001b694 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b694:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b696:	4b1d      	ldr	r3, [pc, #116]	; (1b70c <z_impl_k_mutex_unlock+0x78>)
   1b698:	4604      	mov	r4, r0
   1b69a:	689a      	ldr	r2, [r3, #8]
   1b69c:	7bd3      	ldrb	r3, [r2, #15]
   1b69e:	3b01      	subs	r3, #1
   1b6a0:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1b6a2:	68c3      	ldr	r3, [r0, #12]
   1b6a4:	2b01      	cmp	r3, #1
   1b6a6:	d005      	beq.n	1b6b4 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1b6a8:	3b01      	subs	r3, #1
   1b6aa:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   1b6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
   1b6b0:	f000 b8ba 	b.w	1b828 <k_sched_unlock>
	__asm__ volatile(
   1b6b4:	f04f 0320 	mov.w	r3, #32
   1b6b8:	f3ef 8511 	mrs	r5, BASEPRI
   1b6bc:	f383 8811 	msr	BASEPRI, r3
   1b6c0:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b6c4:	6901      	ldr	r1, [r0, #16]
   1b6c6:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b6c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b6cc:	4299      	cmp	r1, r3
   1b6ce:	d001      	beq.n	1b6d4 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   1b6d0:	f000 fa44 	bl	1bb5c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b6d4:	4620      	mov	r0, r4
   1b6d6:	f003 fab0 	bl	1ec3a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b6da:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b6dc:	b180      	cbz	r0, 1b700 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b6de:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b6e2:	6122      	str	r2, [r4, #16]
   1b6e4:	2200      	movs	r2, #0
   1b6e6:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b6e8:	7b42      	ldrb	r2, [r0, #13]
   1b6ea:	06d2      	lsls	r2, r2, #27
   1b6ec:	d103      	bne.n	1b6f6 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
   1b6ee:	6983      	ldr	r3, [r0, #24]
   1b6f0:	b90b      	cbnz	r3, 1b6f6 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
   1b6f2:	f000 f8b5 	bl	1b860 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1b6f6:	4629      	mov	r1, r5
   1b6f8:	4805      	ldr	r0, [pc, #20]	; (1b710 <z_impl_k_mutex_unlock+0x7c>)
   1b6fa:	f003 fa28 	bl	1eb4e <z_reschedule>
   1b6fe:	e7d5      	b.n	1b6ac <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   1b700:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b702:	f385 8811 	msr	BASEPRI, r5
   1b706:	f3bf 8f6f 	isb	sy
   1b70a:	e7cf      	b.n	1b6ac <z_impl_k_mutex_unlock+0x18>
   1b70c:	20024d28 	.word	0x20024d28
   1b710:	20026591 	.word	0x20026591

0001b714 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b714:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b716:	4c08      	ldr	r4, [pc, #32]	; (1b738 <z_reset_time_slice+0x24>)
   1b718:	6823      	ldr	r3, [r4, #0]
   1b71a:	b15b      	cbz	r3, 1b734 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b71c:	f7f4 f808 	bl	f730 <z_clock_elapsed>
   1b720:	6823      	ldr	r3, [r4, #0]
   1b722:	4a06      	ldr	r2, [pc, #24]	; (1b73c <z_reset_time_slice+0x28>)
   1b724:	4418      	add	r0, r3
   1b726:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b728:	2100      	movs	r1, #0
	}
}
   1b72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1b72e:	4618      	mov	r0, r3
   1b730:	f003 bb43 	b.w	1edba <z_set_timeout_expiry>
}
   1b734:	bd10      	pop	{r4, pc}
   1b736:	bf00      	nop
   1b738:	20024d64 	.word	0x20024d64
   1b73c:	20024d28 	.word	0x20024d28

0001b740 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b742:	460d      	mov	r5, r1
	__asm__ volatile(
   1b744:	f04f 0320 	mov.w	r3, #32
   1b748:	f3ef 8411 	mrs	r4, BASEPRI
   1b74c:	f383 8811 	msr	BASEPRI, r3
   1b750:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1b754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b758:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b75c:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b75e:	2200      	movs	r2, #0
   1b760:	fbe1 6700 	umlal	r6, r7, r1, r0
   1b764:	4b09      	ldr	r3, [pc, #36]	; (1b78c <k_sched_time_slice_set+0x4c>)
   1b766:	4630      	mov	r0, r6
   1b768:	611a      	str	r2, [r3, #16]
   1b76a:	4639      	mov	r1, r7
   1b76c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b770:	2300      	movs	r3, #0
   1b772:	f7f0 ff11 	bl	c598 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b776:	4b06      	ldr	r3, [pc, #24]	; (1b790 <k_sched_time_slice_set+0x50>)
   1b778:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b77a:	4b06      	ldr	r3, [pc, #24]	; (1b794 <k_sched_time_slice_set+0x54>)
   1b77c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b77e:	f7ff ffc9 	bl	1b714 <z_reset_time_slice>
	__asm__ volatile(
   1b782:	f384 8811 	msr	BASEPRI, r4
   1b786:	f3bf 8f6f 	isb	sy
	}
}
   1b78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b78c:	20024d28 	.word	0x20024d28
   1b790:	20024d64 	.word	0x20024d64
   1b794:	20024d60 	.word	0x20024d60

0001b798 <k_sched_lock>:
	__asm__ volatile(
   1b798:	f04f 0320 	mov.w	r3, #32
   1b79c:	f3ef 8111 	mrs	r1, BASEPRI
   1b7a0:	f383 8811 	msr	BASEPRI, r3
   1b7a4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b7a8:	4b04      	ldr	r3, [pc, #16]	; (1b7bc <k_sched_lock+0x24>)
   1b7aa:	689a      	ldr	r2, [r3, #8]
   1b7ac:	7bd3      	ldrb	r3, [r2, #15]
   1b7ae:	3b01      	subs	r3, #1
   1b7b0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b7b2:	f381 8811 	msr	BASEPRI, r1
   1b7b6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b7ba:	4770      	bx	lr
   1b7bc:	20024d28 	.word	0x20024d28

0001b7c0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b7c0:	4b09      	ldr	r3, [pc, #36]	; (1b7e8 <z_priq_dumb_remove+0x28>)
   1b7c2:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b7c6:	4282      	cmp	r2, r0
   1b7c8:	d105      	bne.n	1b7d6 <z_priq_dumb_remove+0x16>
   1b7ca:	689b      	ldr	r3, [r3, #8]
   1b7cc:	428b      	cmp	r3, r1
   1b7ce:	d102      	bne.n	1b7d6 <z_priq_dumb_remove+0x16>
   1b7d0:	7b4b      	ldrb	r3, [r1, #13]
   1b7d2:	06db      	lsls	r3, r3, #27
   1b7d4:	d106      	bne.n	1b7e4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b7d6:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b7da:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b7dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b7de:	2300      	movs	r3, #0
	node->prev = NULL;
   1b7e0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b7e4:	4770      	bx	lr
   1b7e6:	bf00      	nop
   1b7e8:	20024d28 	.word	0x20024d28

0001b7ec <update_cache>:
{
   1b7ec:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b7ee:	4c0d      	ldr	r4, [pc, #52]	; (1b824 <update_cache+0x38>)
{
   1b7f0:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b7f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b7f6:	f003 f9e9 	bl	1ebcc <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1b7fa:	4605      	mov	r5, r0
   1b7fc:	b900      	cbnz	r0, 1b800 <update_cache+0x14>
   1b7fe:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b800:	68a3      	ldr	r3, [r4, #8]
   1b802:	b94a      	cbnz	r2, 1b818 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1b804:	7b5a      	ldrb	r2, [r3, #13]
   1b806:	06d2      	lsls	r2, r2, #27
   1b808:	d106      	bne.n	1b818 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b80a:	69aa      	ldr	r2, [r5, #24]
   1b80c:	b922      	cbnz	r2, 1b818 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1b80e:	89da      	ldrh	r2, [r3, #14]
   1b810:	2a7f      	cmp	r2, #127	; 0x7f
   1b812:	d901      	bls.n	1b818 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1b814:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b816:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   1b818:	429d      	cmp	r5, r3
   1b81a:	d001      	beq.n	1b820 <update_cache+0x34>
			z_reset_time_slice();
   1b81c:	f7ff ff7a 	bl	1b714 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   1b820:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b822:	e7f8      	b.n	1b816 <update_cache+0x2a>
   1b824:	20024d28 	.word	0x20024d28

0001b828 <k_sched_unlock>:
{
   1b828:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b82a:	f04f 0320 	mov.w	r3, #32
   1b82e:	f3ef 8411 	mrs	r4, BASEPRI
   1b832:	f383 8811 	msr	BASEPRI, r3
   1b836:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b83a:	4b08      	ldr	r3, [pc, #32]	; (1b85c <k_sched_unlock+0x34>)
		update_cache(0);
   1b83c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b83e:	689a      	ldr	r2, [r3, #8]
   1b840:	7bd3      	ldrb	r3, [r2, #15]
   1b842:	3301      	adds	r3, #1
   1b844:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b846:	f7ff ffd1 	bl	1b7ec <update_cache>
	__asm__ volatile(
   1b84a:	f384 8811 	msr	BASEPRI, r4
   1b84e:	f3bf 8f6f 	isb	sy
}
   1b852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b856:	f003 b991 	b.w	1eb7c <z_reschedule_unlocked>
   1b85a:	bf00      	nop
   1b85c:	20024d28 	.word	0x20024d28

0001b860 <z_add_thread_to_ready_q>:
{
   1b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b862:	f04f 0320 	mov.w	r3, #32
   1b866:	f3ef 8411 	mrs	r4, BASEPRI
   1b86a:	f383 8811 	msr	BASEPRI, r3
   1b86e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1b872:	4a15      	ldr	r2, [pc, #84]	; (1b8c8 <z_add_thread_to_ready_q+0x68>)
   1b874:	4611      	mov	r1, r2
   1b876:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b87a:	428b      	cmp	r3, r1
   1b87c:	d01d      	beq.n	1b8ba <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b87e:	b1e3      	cbz	r3, 1b8ba <z_add_thread_to_ready_q+0x5a>
   1b880:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b882:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b886:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b88a:	42af      	cmp	r7, r5
   1b88c:	dd10      	ble.n	1b8b0 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   1b88e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b890:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b894:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b896:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b898:	7b43      	ldrb	r3, [r0, #13]
   1b89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b89e:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1b8a0:	2000      	movs	r0, #0
   1b8a2:	f7ff ffa3 	bl	1b7ec <update_cache>
	__asm__ volatile(
   1b8a6:	f384 8811 	msr	BASEPRI, r4
   1b8aa:	f3bf 8f6f 	isb	sy
}
   1b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b8b0:	42b3      	cmp	r3, r6
   1b8b2:	d002      	beq.n	1b8ba <z_add_thread_to_ready_q+0x5a>
   1b8b4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8b6:	2b00      	cmp	r3, #0
   1b8b8:	d1e5      	bne.n	1b886 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   1b8ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b8bc:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1b8be:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1b8c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b8c2:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b8c4:	62d0      	str	r0, [r2, #44]	; 0x2c
   1b8c6:	e7e7      	b.n	1b898 <z_add_thread_to_ready_q+0x38>
   1b8c8:	20024d28 	.word	0x20024d28

0001b8cc <z_move_thread_to_end_of_prio_q>:
{
   1b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8ce:	4604      	mov	r4, r0
	__asm__ volatile(
   1b8d0:	f04f 0320 	mov.w	r3, #32
   1b8d4:	f3ef 8511 	mrs	r5, BASEPRI
   1b8d8:	f383 8811 	msr	BASEPRI, r3
   1b8dc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b8e0:	7b43      	ldrb	r3, [r0, #13]
   1b8e2:	065a      	lsls	r2, r3, #25
   1b8e4:	d503      	bpl.n	1b8ee <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b8e6:	4601      	mov	r1, r0
   1b8e8:	4817      	ldr	r0, [pc, #92]	; (1b948 <z_move_thread_to_end_of_prio_q+0x7c>)
   1b8ea:	f7ff ff69 	bl	1b7c0 <z_priq_dumb_remove>
	return list->head == list;
   1b8ee:	4a17      	ldr	r2, [pc, #92]	; (1b94c <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8f0:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1b8f4:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1b8f8:	428b      	cmp	r3, r1
   1b8fa:	d01f      	beq.n	1b93c <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8fc:	b1f3      	cbz	r3, 1b93c <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
   1b8fe:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1b902:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b906:	42b7      	cmp	r7, r6
   1b908:	dd13      	ble.n	1b932 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1b90a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b90c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1b910:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b912:	605c      	str	r4, [r3, #4]
   1b914:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1b916:	6890      	ldr	r0, [r2, #8]
   1b918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b91c:	7363      	strb	r3, [r4, #13]
   1b91e:	1b03      	subs	r3, r0, r4
   1b920:	4258      	negs	r0, r3
   1b922:	4158      	adcs	r0, r3
   1b924:	f7ff ff62 	bl	1b7ec <update_cache>
	__asm__ volatile(
   1b928:	f385 8811 	msr	BASEPRI, r5
   1b92c:	f3bf 8f6f 	isb	sy
}
   1b930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b932:	4298      	cmp	r0, r3
   1b934:	d002      	beq.n	1b93c <z_move_thread_to_end_of_prio_q+0x70>
   1b936:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b938:	2b00      	cmp	r3, #0
   1b93a:	d1e2      	bne.n	1b902 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1b93c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1b940:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b942:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b944:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b946:	e7e5      	b.n	1b914 <z_move_thread_to_end_of_prio_q+0x48>
   1b948:	20024d50 	.word	0x20024d50
   1b94c:	20024d28 	.word	0x20024d28

0001b950 <z_time_slice>:
	if (pending_current == _current) {
   1b950:	4a15      	ldr	r2, [pc, #84]	; (1b9a8 <z_time_slice+0x58>)
   1b952:	4916      	ldr	r1, [pc, #88]	; (1b9ac <z_time_slice+0x5c>)
{
   1b954:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b956:	680c      	ldr	r4, [r1, #0]
   1b958:	6893      	ldr	r3, [r2, #8]
   1b95a:	42a3      	cmp	r3, r4
   1b95c:	4614      	mov	r4, r2
   1b95e:	d103      	bne.n	1b968 <z_time_slice+0x18>
}
   1b960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b964:	f7ff bed6 	b.w	1b714 <z_reset_time_slice>
	pending_current = NULL;
   1b968:	2500      	movs	r5, #0
   1b96a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1b96c:	4910      	ldr	r1, [pc, #64]	; (1b9b0 <z_time_slice+0x60>)
   1b96e:	6809      	ldr	r1, [r1, #0]
   1b970:	b1b9      	cbz	r1, 1b9a2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b972:	89d9      	ldrh	r1, [r3, #14]
   1b974:	297f      	cmp	r1, #127	; 0x7f
   1b976:	d814      	bhi.n	1b9a2 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1b978:	490e      	ldr	r1, [pc, #56]	; (1b9b4 <z_time_slice+0x64>)
   1b97a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b97e:	6809      	ldr	r1, [r1, #0]
   1b980:	428d      	cmp	r5, r1
   1b982:	db0e      	blt.n	1b9a2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   1b984:	490c      	ldr	r1, [pc, #48]	; (1b9b8 <z_time_slice+0x68>)
   1b986:	428b      	cmp	r3, r1
   1b988:	d00b      	beq.n	1b9a2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b98a:	6999      	ldr	r1, [r3, #24]
   1b98c:	b949      	cbnz	r1, 1b9a2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b98e:	6911      	ldr	r1, [r2, #16]
   1b990:	4281      	cmp	r1, r0
   1b992:	dc03      	bgt.n	1b99c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b994:	4618      	mov	r0, r3
   1b996:	f7ff ff99 	bl	1b8cc <z_move_thread_to_end_of_prio_q>
   1b99a:	e7e1      	b.n	1b960 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1b99c:	1a09      	subs	r1, r1, r0
   1b99e:	6111      	str	r1, [r2, #16]
}
   1b9a0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b9a2:	2300      	movs	r3, #0
   1b9a4:	6123      	str	r3, [r4, #16]
   1b9a6:	e7fb      	b.n	1b9a0 <z_time_slice+0x50>
   1b9a8:	20024d28 	.word	0x20024d28
   1b9ac:	20024d5c 	.word	0x20024d5c
   1b9b0:	20024d64 	.word	0x20024d64
   1b9b4:	20024d60 	.word	0x20024d60
   1b9b8:	20020b64 	.word	0x20020b64

0001b9bc <z_remove_thread_from_ready_q>:
{
   1b9bc:	b538      	push	{r3, r4, r5, lr}
   1b9be:	4604      	mov	r4, r0
	__asm__ volatile(
   1b9c0:	f04f 0320 	mov.w	r3, #32
   1b9c4:	f3ef 8511 	mrs	r5, BASEPRI
   1b9c8:	f383 8811 	msr	BASEPRI, r3
   1b9cc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b9d0:	7b43      	ldrb	r3, [r0, #13]
   1b9d2:	065a      	lsls	r2, r3, #25
   1b9d4:	d507      	bpl.n	1b9e6 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b9d6:	4601      	mov	r1, r0
   1b9d8:	4809      	ldr	r0, [pc, #36]	; (1ba00 <z_remove_thread_from_ready_q+0x44>)
   1b9da:	f7ff fef1 	bl	1b7c0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b9de:	7b63      	ldrb	r3, [r4, #13]
   1b9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b9e4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b9e6:	4b07      	ldr	r3, [pc, #28]	; (1ba04 <z_remove_thread_from_ready_q+0x48>)
   1b9e8:	6898      	ldr	r0, [r3, #8]
   1b9ea:	1b03      	subs	r3, r0, r4
   1b9ec:	4258      	negs	r0, r3
   1b9ee:	4158      	adcs	r0, r3
   1b9f0:	f7ff fefc 	bl	1b7ec <update_cache>
	__asm__ volatile(
   1b9f4:	f385 8811 	msr	BASEPRI, r5
   1b9f8:	f3bf 8f6f 	isb	sy
}
   1b9fc:	bd38      	pop	{r3, r4, r5, pc}
   1b9fe:	bf00      	nop
   1ba00:	20024d50 	.word	0x20024d50
   1ba04:	20024d28 	.word	0x20024d28

0001ba08 <pend>:
{
   1ba08:	b570      	push	{r4, r5, r6, lr}
   1ba0a:	4604      	mov	r4, r0
   1ba0c:	460d      	mov	r5, r1
   1ba0e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1ba10:	f7ff ffd4 	bl	1b9bc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1ba14:	7b63      	ldrb	r3, [r4, #13]
   1ba16:	f043 0302 	orr.w	r3, r3, #2
   1ba1a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1ba1c:	b17d      	cbz	r5, 1ba3e <pend+0x36>
	return list->head == list;
   1ba1e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1ba20:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba22:	429d      	cmp	r5, r3
   1ba24:	d029      	beq.n	1ba7a <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba26:	b343      	cbz	r3, 1ba7a <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
   1ba28:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1ba2c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1ba30:	4291      	cmp	r1, r2
   1ba32:	dd1c      	ble.n	1ba6e <pend+0x66>
	node->prev = successor->prev;
   1ba34:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ba36:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1ba3a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ba3c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1ba3e:	1c73      	adds	r3, r6, #1
   1ba40:	d022      	beq.n	1ba88 <pend+0x80>
   1ba42:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1ba46:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ba4a:	2100      	movs	r1, #0
   1ba4c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1ba50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba54:	fbc5 0106 	smlal	r0, r1, r5, r6
   1ba58:	2300      	movs	r3, #0
   1ba5a:	f7f0 fd9d 	bl	c598 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ba5e:	490b      	ldr	r1, [pc, #44]	; (1ba8c <pend+0x84>)
   1ba60:	1c42      	adds	r2, r0, #1
   1ba62:	f104 0018 	add.w	r0, r4, #24
}
   1ba66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ba6a:	f000 bb3b 	b.w	1c0e4 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1ba6e:	6869      	ldr	r1, [r5, #4]
   1ba70:	428b      	cmp	r3, r1
   1ba72:	d002      	beq.n	1ba7a <pend+0x72>
   1ba74:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba76:	2b00      	cmp	r3, #0
   1ba78:	d1d8      	bne.n	1ba2c <pend+0x24>
	node->prev = list->tail;
   1ba7a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1ba7c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1ba7e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1ba80:	686b      	ldr	r3, [r5, #4]
   1ba82:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ba84:	606c      	str	r4, [r5, #4]
   1ba86:	e7da      	b.n	1ba3e <pend+0x36>
}
   1ba88:	bd70      	pop	{r4, r5, r6, pc}
   1ba8a:	bf00      	nop
   1ba8c:	0001ebd9 	.word	0x0001ebd9

0001ba90 <z_pend_curr_irqlock>:
{
   1ba90:	b570      	push	{r4, r5, r6, lr}
   1ba92:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1ba94:	4d0e      	ldr	r5, [pc, #56]	; (1bad0 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1ba96:	4c0f      	ldr	r4, [pc, #60]	; (1bad4 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   1ba98:	68a8      	ldr	r0, [r5, #8]
   1ba9a:	f7ff ffb5 	bl	1ba08 <pend>
	pending_current = _current;
   1ba9e:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   1baa0:	4630      	mov	r0, r6
	pending_current = _current;
   1baa2:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   1baa4:	f003 f818 	bl	1ead8 <z_swap_irqlock>
	__asm__ volatile(
   1baa8:	f04f 0220 	mov.w	r2, #32
   1baac:	f3ef 8311 	mrs	r3, BASEPRI
   1bab0:	f382 8811 	msr	BASEPRI, r2
   1bab4:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1bab8:	6822      	ldr	r2, [r4, #0]
   1baba:	68a9      	ldr	r1, [r5, #8]
   1babc:	4291      	cmp	r1, r2
			pending_current = NULL;
   1babe:	bf04      	itt	eq
   1bac0:	2200      	moveq	r2, #0
   1bac2:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1bac4:	f383 8811 	msr	BASEPRI, r3
   1bac8:	f3bf 8f6f 	isb	sy
}
   1bacc:	bd70      	pop	{r4, r5, r6, pc}
   1bace:	bf00      	nop
   1bad0:	20024d28 	.word	0x20024d28
   1bad4:	20024d5c 	.word	0x20024d5c

0001bad8 <z_pend_curr>:
{
   1bad8:	b510      	push	{r4, lr}
   1bada:	460c      	mov	r4, r1
   1badc:	4611      	mov	r1, r2
	pending_current = _current;
   1bade:	4a06      	ldr	r2, [pc, #24]	; (1baf8 <z_pend_curr+0x20>)
   1bae0:	6890      	ldr	r0, [r2, #8]
   1bae2:	4a06      	ldr	r2, [pc, #24]	; (1bafc <z_pend_curr+0x24>)
   1bae4:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1bae6:	461a      	mov	r2, r3
   1bae8:	f7ff ff8e 	bl	1ba08 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   1baec:	4620      	mov	r0, r4
}
   1baee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1baf2:	f002 bff1 	b.w	1ead8 <z_swap_irqlock>
   1baf6:	bf00      	nop
   1baf8:	20024d28 	.word	0x20024d28
   1bafc:	20024d5c 	.word	0x20024d5c

0001bb00 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1bb02:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1bb04:	f003 f973 	bl	1edee <z_tick_get_32>
   1bb08:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1bb0a:	f04f 0320 	mov.w	r3, #32
   1bb0e:	f3ef 8711 	mrs	r7, BASEPRI
   1bb12:	f383 8811 	msr	BASEPRI, r3
   1bb16:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1bb1a:	4d0d      	ldr	r5, [pc, #52]	; (1bb50 <z_tick_sleep.part.19+0x50>)
   1bb1c:	4b0d      	ldr	r3, [pc, #52]	; (1bb54 <z_tick_sleep.part.19+0x54>)
   1bb1e:	68a8      	ldr	r0, [r5, #8]
   1bb20:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1bb22:	f7ff ff4b 	bl	1b9bc <z_remove_thread_from_ready_q>
   1bb26:	68a8      	ldr	r0, [r5, #8]
   1bb28:	490b      	ldr	r1, [pc, #44]	; (1bb58 <z_tick_sleep.part.19+0x58>)
   1bb2a:	4632      	mov	r2, r6
   1bb2c:	3018      	adds	r0, #24
   1bb2e:	f000 fad9 	bl	1c0e4 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1bb32:	68aa      	ldr	r2, [r5, #8]
   1bb34:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bb36:	7b53      	ldrb	r3, [r2, #13]
   1bb38:	f043 0310 	orr.w	r3, r3, #16
   1bb3c:	7353      	strb	r3, [r2, #13]
   1bb3e:	f002 ffcb 	bl	1ead8 <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1bb42:	f003 f954 	bl	1edee <z_tick_get_32>
   1bb46:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1bb48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1bb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb4e:	bf00      	nop
   1bb50:	20024d28 	.word	0x20024d28
   1bb54:	20024d5c 	.word	0x20024d5c
   1bb58:	0001ebd9 	.word	0x0001ebd9

0001bb5c <z_set_prio>:
{
   1bb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb60:	4604      	mov	r4, r0
   1bb62:	f04f 0320 	mov.w	r3, #32
   1bb66:	f3ef 8911 	mrs	r9, BASEPRI
   1bb6a:	f383 8811 	msr	BASEPRI, r3
   1bb6e:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   1bb72:	f002 ffa8 	bl	1eac6 <z_is_thread_ready>
		if (need_sched) {
   1bb76:	b24e      	sxtb	r6, r1
   1bb78:	4680      	mov	r8, r0
   1bb7a:	b360      	cbz	r0, 1bbd6 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1bb7c:	4d17      	ldr	r5, [pc, #92]	; (1bbdc <z_set_prio+0x80>)
   1bb7e:	4621      	mov	r1, r4
   1bb80:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1bb84:	4638      	mov	r0, r7
   1bb86:	f7ff fe1b 	bl	1b7c0 <z_priq_dumb_remove>
	return list->head == list;
   1bb8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   1bb8c:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb8e:	42bb      	cmp	r3, r7
   1bb90:	462a      	mov	r2, r5
   1bb92:	d019      	beq.n	1bbc8 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bb94:	b1c3      	cbz	r3, 1bbc8 <z_set_prio+0x6c>
   1bb96:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1bb98:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1bb9c:	42b0      	cmp	r0, r6
   1bb9e:	dd0e      	ble.n	1bbbe <z_set_prio+0x62>
	node->prev = successor->prev;
   1bba0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bba2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1bba6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bba8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1bbaa:	2001      	movs	r0, #1
   1bbac:	f7ff fe1e 	bl	1b7ec <update_cache>
	__asm__ volatile(
   1bbb0:	f389 8811 	msr	BASEPRI, r9
   1bbb4:	f3bf 8f6f 	isb	sy
}
   1bbb8:	4640      	mov	r0, r8
   1bbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   1bbbe:	4299      	cmp	r1, r3
   1bbc0:	d002      	beq.n	1bbc8 <z_set_prio+0x6c>
   1bbc2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bbc4:	2b00      	cmp	r3, #0
   1bbc6:	d1e7      	bne.n	1bb98 <z_set_prio+0x3c>
	node->prev = list->tail;
   1bbc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1bbca:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   1bbcc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1bbce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1bbd0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bbd2:	62d4      	str	r4, [r2, #44]	; 0x2c
   1bbd4:	e7e9      	b.n	1bbaa <z_set_prio+0x4e>
			thread->base.prio = prio;
   1bbd6:	73a6      	strb	r6, [r4, #14]
   1bbd8:	e7ea      	b.n	1bbb0 <z_set_prio+0x54>
   1bbda:	bf00      	nop
   1bbdc:	20024d28 	.word	0x20024d28

0001bbe0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1bbe0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1bbe2:	4b04      	ldr	r3, [pc, #16]	; (1bbf4 <z_sched_init+0x14>)
   1bbe4:	4608      	mov	r0, r1
   1bbe6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1bbea:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1bbee:	f7ff bda7 	b.w	1b740 <k_sched_time_slice_set>
   1bbf2:	bf00      	nop
   1bbf4:	20024d28 	.word	0x20024d28

0001bbf8 <z_impl_k_yield>:
{
   1bbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1bbfa:	4c23      	ldr	r4, [pc, #140]	; (1bc88 <z_impl_k_yield+0x90>)
   1bbfc:	4b23      	ldr	r3, [pc, #140]	; (1bc8c <z_impl_k_yield+0x94>)
   1bbfe:	68a2      	ldr	r2, [r4, #8]
   1bc00:	429a      	cmp	r2, r3
   1bc02:	d029      	beq.n	1bc58 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1bc04:	f04f 0320 	mov.w	r3, #32
   1bc08:	f3ef 8611 	mrs	r6, BASEPRI
   1bc0c:	f383 8811 	msr	BASEPRI, r3
   1bc10:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1bc14:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1bc18:	68a1      	ldr	r1, [r4, #8]
   1bc1a:	4628      	mov	r0, r5
   1bc1c:	f7ff fdd0 	bl	1b7c0 <z_priq_dumb_remove>
	return list->head == list;
   1bc20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1bc22:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc24:	42aa      	cmp	r2, r5
   1bc26:	d028      	beq.n	1bc7a <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc28:	b33a      	cbz	r2, 1bc7a <z_impl_k_yield+0x82>
   1bc2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1bc2c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1bc30:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1bc34:	428f      	cmp	r7, r1
   1bc36:	dd1b      	ble.n	1bc70 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1bc38:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bc3a:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1bc3e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1bc40:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1bc42:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1bc44:	2001      	movs	r0, #1
   1bc46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1bc4a:	735a      	strb	r2, [r3, #13]
   1bc4c:	f7ff fdce 	bl	1b7ec <update_cache>
	__asm__ volatile(
   1bc50:	f386 8811 	msr	BASEPRI, r6
   1bc54:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1bc58:	f04f 0320 	mov.w	r3, #32
   1bc5c:	f3ef 8011 	mrs	r0, BASEPRI
   1bc60:	f383 8811 	msr	BASEPRI, r3
   1bc64:	f3bf 8f6f 	isb	sy
}
   1bc68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   1bc6c:	f002 bf34 	b.w	1ead8 <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
   1bc70:	4282      	cmp	r2, r0
   1bc72:	d002      	beq.n	1bc7a <z_impl_k_yield+0x82>
   1bc74:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc76:	2a00      	cmp	r2, #0
   1bc78:	d1da      	bne.n	1bc30 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1bc7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1bc7c:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1bc7e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1bc80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1bc82:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bc84:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bc86:	e7dc      	b.n	1bc42 <z_impl_k_yield+0x4a>
   1bc88:	20024d28 	.word	0x20024d28
   1bc8c:	20020b64 	.word	0x20020b64

0001bc90 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1bc90:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   1bc92:	1c43      	adds	r3, r0, #1
{
   1bc94:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1bc96:	d105      	bne.n	1bca4 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1bc98:	4b10      	ldr	r3, [pc, #64]	; (1bcdc <z_impl_k_sleep+0x4c>)
   1bc9a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1bc9c:	f000 f936 	bl	1bf0c <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1bca0:	4620      	mov	r0, r4
   1bca2:	bd38      	pop	{r3, r4, r5, pc}
   1bca4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1bca8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bcac:	2100      	movs	r1, #0
   1bcae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bcb2:	fbe5 0104 	umlal	r0, r1, r5, r4
   1bcb6:	2300      	movs	r3, #0
   1bcb8:	f7f0 fc6e 	bl	c598 <__aeabi_uldivmod>
	if (ticks == 0) {
   1bcbc:	4604      	mov	r4, r0
   1bcbe:	b948      	cbnz	r0, 1bcd4 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1bcc0:	f7ff ff9a 	bl	1bbf8 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1bcc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bcc8:	fb84 0100 	smull	r0, r1, r4, r0
   1bccc:	0bc4      	lsrs	r4, r0, #15
   1bcce:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1bcd2:	e7e5      	b.n	1bca0 <z_impl_k_sleep+0x10>
   1bcd4:	f7ff ff14 	bl	1bb00 <z_tick_sleep.part.19>
   1bcd8:	4604      	mov	r4, r0
   1bcda:	e7f3      	b.n	1bcc4 <z_impl_k_sleep+0x34>
   1bcdc:	20024d28 	.word	0x20024d28

0001bce0 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1bce0:	4b01      	ldr	r3, [pc, #4]	; (1bce8 <z_impl_k_current_get+0x8>)
   1bce2:	6898      	ldr	r0, [r3, #8]
   1bce4:	4770      	bx	lr
   1bce6:	bf00      	nop
   1bce8:	20024d28 	.word	0x20024d28

0001bcec <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1bcec:	b570      	push	{r4, r5, r6, lr}
   1bcee:	4604      	mov	r4, r0
   1bcf0:	f04f 0320 	mov.w	r3, #32
   1bcf4:	f3ef 8611 	mrs	r6, BASEPRI
   1bcf8:	f383 8811 	msr	BASEPRI, r3
   1bcfc:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1bd00:	f002 ff9b 	bl	1ec3a <z_unpend_first_thread>
	if (thread != NULL) {
   1bd04:	4605      	mov	r5, r0
   1bd06:	b170      	cbz	r0, 1bd26 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bd08:	7b43      	ldrb	r3, [r0, #13]
   1bd0a:	06db      	lsls	r3, r3, #27
   1bd0c:	d103      	bne.n	1bd16 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1bd0e:	6983      	ldr	r3, [r0, #24]
   1bd10:	b90b      	cbnz	r3, 1bd16 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1bd12:	f7ff fda5 	bl	1b860 <z_add_thread_to_ready_q>
   1bd16:	2300      	movs	r3, #0
   1bd18:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1bd1a:	4631      	mov	r1, r6
}
   1bd1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1bd20:	4807      	ldr	r0, [pc, #28]	; (1bd40 <z_impl_k_sem_give+0x54>)
   1bd22:	f002 bf14 	b.w	1eb4e <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bd26:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1bd2a:	429a      	cmp	r2, r3
   1bd2c:	bf18      	it	ne
   1bd2e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bd30:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bd32:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bd34:	f104 0010 	add.w	r0, r4, #16
   1bd38:	f003 f990 	bl	1f05c <z_handle_obj_poll_events>
   1bd3c:	e7ed      	b.n	1bd1a <z_impl_k_sem_give+0x2e>
   1bd3e:	bf00      	nop
   1bd40:	20026591 	.word	0x20026591

0001bd44 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1bd44:	b410      	push	{r4}
   1bd46:	4602      	mov	r2, r0
   1bd48:	460b      	mov	r3, r1
   1bd4a:	f04f 0020 	mov.w	r0, #32
   1bd4e:	f3ef 8111 	mrs	r1, BASEPRI
   1bd52:	f380 8811 	msr	BASEPRI, r0
   1bd56:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1bd5a:	6894      	ldr	r4, [r2, #8]
   1bd5c:	b14c      	cbz	r4, 1bd72 <z_impl_k_sem_take+0x2e>
		sem->count--;
   1bd5e:	3c01      	subs	r4, #1
   1bd60:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1bd62:	f381 8811 	msr	BASEPRI, r1
   1bd66:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1bd6a:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1bd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bd70:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1bd72:	b933      	cbnz	r3, 1bd82 <z_impl_k_sem_take+0x3e>
   1bd74:	f381 8811 	msr	BASEPRI, r1
   1bd78:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1bd7c:	f06f 000f 	mvn.w	r0, #15
   1bd80:	e7f4      	b.n	1bd6c <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bd82:	4802      	ldr	r0, [pc, #8]	; (1bd8c <z_impl_k_sem_take+0x48>)
}
   1bd84:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bd88:	f7ff bea6 	b.w	1bad8 <z_pend_curr>
   1bd8c:	20026591 	.word	0x20026591

0001bd90 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1bd90:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1bd92:	4c08      	ldr	r4, [pc, #32]	; (1bdb4 <k_sys_work_q_init+0x24>)
   1bd94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1bd9c:	4906      	ldr	r1, [pc, #24]	; (1bdb8 <k_sys_work_q_init+0x28>)
   1bd9e:	4620      	mov	r0, r4
   1bda0:	f000 f942 	bl	1c028 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1bda4:	4905      	ldr	r1, [pc, #20]	; (1bdbc <k_sys_work_q_init+0x2c>)
   1bda6:	f104 0010 	add.w	r0, r4, #16
   1bdaa:	f002 ff9b 	bl	1ece4 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1bdae:	2000      	movs	r0, #0
   1bdb0:	bd10      	pop	{r4, pc}
   1bdb2:	bf00      	nop
   1bdb4:	20024d68 	.word	0x20024d68
   1bdb8:	20028af8 	.word	0x20028af8
   1bdbc:	00020f6a 	.word	0x00020f6a

0001bdc0 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   1bdc0:	4b09      	ldr	r3, [pc, #36]	; (1bde8 <z_check_stack_sentinel+0x28>)
   1bdc2:	689b      	ldr	r3, [r3, #8]
   1bdc4:	7b5a      	ldrb	r2, [r3, #13]
   1bdc6:	07d2      	lsls	r2, r2, #31
   1bdc8:	d40d      	bmi.n	1bde6 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   1bdca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   1bdcc:	681a      	ldr	r2, [r3, #0]
   1bdce:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   1bdd2:	d008      	beq.n	1bde6 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   1bdd4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   1bdd8:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   1bdda:	4040      	eors	r0, r0
   1bddc:	f380 8811 	msr	BASEPRI, r0
   1bde0:	f04f 0002 	mov.w	r0, #2
   1bde4:	df02      	svc	2
	}
}
   1bde6:	4770      	bx	lr
   1bde8:	20024d28 	.word	0x20024d28

0001bdec <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1bdec:	b510      	push	{r4, lr}
   1bdee:	4602      	mov	r2, r0
	__asm__ volatile(
   1bdf0:	f04f 0320 	mov.w	r3, #32
   1bdf4:	f3ef 8411 	mrs	r4, BASEPRI
   1bdf8:	f383 8811 	msr	BASEPRI, r3
   1bdfc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1be00:	7b43      	ldrb	r3, [r0, #13]
   1be02:	0759      	lsls	r1, r3, #29
   1be04:	d404      	bmi.n	1be10 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   1be06:	f384 8811 	msr	BASEPRI, r4
   1be0a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1be0e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1be10:	f023 0304 	bic.w	r3, r3, #4
   1be14:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1be16:	f002 ff5c 	bl	1ecd2 <z_is_thread_ready>
   1be1a:	b110      	cbz	r0, 1be22 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1be1c:	4610      	mov	r0, r2
   1be1e:	f7ff fd1f 	bl	1b860 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1be22:	4621      	mov	r1, r4
}
   1be24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1be28:	4801      	ldr	r0, [pc, #4]	; (1be30 <z_impl_k_thread_start+0x44>)
   1be2a:	f002 be90 	b.w	1eb4e <z_reschedule>
   1be2e:	bf00      	nop
   1be30:	20026591 	.word	0x20026591

0001be34 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1be34:	b530      	push	{r4, r5, lr}
   1be36:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1be3a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be3c:	9504      	str	r5, [sp, #16]
   1be3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1be40:	9503      	str	r5, [sp, #12]
   1be42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1be44:	9502      	str	r5, [sp, #8]
   1be46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1be48:	9501      	str	r5, [sp, #4]
   1be4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1be4c:	9500      	str	r5, [sp, #0]
   1be4e:	f7f3 fd6f 	bl	f930 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1be52:	4b03      	ldr	r3, [pc, #12]	; (1be60 <z_setup_new_thread+0x2c>)
   1be54:	689b      	ldr	r3, [r3, #8]
   1be56:	b103      	cbz	r3, 1be5a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1be58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1be5a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1be5c:	b007      	add	sp, #28
   1be5e:	bd30      	pop	{r4, r5, pc}
   1be60:	20024d28 	.word	0x20024d28

0001be64 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1be64:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be66:	2600      	movs	r6, #0
{
   1be68:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be6a:	9605      	str	r6, [sp, #20]
   1be6c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1be6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be70:	9604      	str	r6, [sp, #16]
   1be72:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   1be74:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be76:	9603      	str	r6, [sp, #12]
   1be78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1be7a:	9602      	str	r6, [sp, #8]
   1be7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1be7e:	9601      	str	r6, [sp, #4]
   1be80:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1be82:	9600      	str	r6, [sp, #0]
   1be84:	f7ff ffd6 	bl	1be34 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1be88:	1c6b      	adds	r3, r5, #1
   1be8a:	d003      	beq.n	1be94 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1be8c:	b92d      	cbnz	r5, 1be9a <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1be8e:	4620      	mov	r0, r4
   1be90:	f7ff ffac 	bl	1bdec <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1be94:	4620      	mov	r0, r4
   1be96:	b006      	add	sp, #24
   1be98:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1be9a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1be9e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bea2:	2100      	movs	r1, #0
   1bea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bea8:	2300      	movs	r3, #0
   1beaa:	fbe6 0105 	umlal	r0, r1, r6, r5
   1beae:	f7f0 fb73 	bl	c598 <__aeabi_uldivmod>
   1beb2:	4903      	ldr	r1, [pc, #12]	; (1bec0 <z_impl_k_thread_create+0x5c>)
   1beb4:	1c42      	adds	r2, r0, #1
   1beb6:	f104 0018 	add.w	r0, r4, #24
   1beba:	f000 f913 	bl	1c0e4 <z_add_timeout>
   1bebe:	e7e9      	b.n	1be94 <z_impl_k_thread_create+0x30>
   1bec0:	0001ebd9 	.word	0x0001ebd9

0001bec4 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
   1bec4:	b510      	push	{r4, lr}
   1bec6:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   1bec8:	f002 ff03 	bl	1ecd2 <z_is_thread_ready>
   1becc:	b110      	cbz	r0, 1bed4 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   1bece:	4620      	mov	r0, r4
   1bed0:	f7ff fd74 	bl	1b9bc <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1bed4:	f104 0018 	add.w	r0, r4, #24
   1bed8:	f002 ff49 	bl	1ed6e <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bedc:	7b63      	ldrb	r3, [r4, #13]
   1bede:	f043 0310 	orr.w	r3, r3, #16
   1bee2:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
   1bee4:	4b08      	ldr	r3, [pc, #32]	; (1bf08 <z_thread_single_suspend+0x44>)
   1bee6:	689b      	ldr	r3, [r3, #8]
   1bee8:	42a3      	cmp	r3, r4
   1beea:	d10b      	bne.n	1bf04 <z_thread_single_suspend+0x40>
	__asm__ volatile(
   1beec:	f04f 0320 	mov.w	r3, #32
   1bef0:	f3ef 8011 	mrs	r0, BASEPRI
   1bef4:	f383 8811 	msr	BASEPRI, r3
   1bef8:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1befc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1bf00:	f002 be30 	b.w	1eb64 <z_reschedule_irqlock>
   1bf04:	bd10      	pop	{r4, pc}
   1bf06:	bf00      	nop
   1bf08:	20024d28 	.word	0x20024d28

0001bf0c <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1bf0c:	b538      	push	{r3, r4, r5, lr}
   1bf0e:	4605      	mov	r5, r0
   1bf10:	f04f 0320 	mov.w	r3, #32
   1bf14:	f3ef 8411 	mrs	r4, BASEPRI
   1bf18:	f383 8811 	msr	BASEPRI, r3
   1bf1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1bf20:	f7ff ffd0 	bl	1bec4 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   1bf24:	4b07      	ldr	r3, [pc, #28]	; (1bf44 <z_impl_k_thread_suspend+0x38>)
   1bf26:	689b      	ldr	r3, [r3, #8]
   1bf28:	42ab      	cmp	r3, r5
   1bf2a:	d105      	bne.n	1bf38 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1bf2c:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1bf2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1bf32:	4805      	ldr	r0, [pc, #20]	; (1bf48 <z_impl_k_thread_suspend+0x3c>)
   1bf34:	f002 be0b 	b.w	1eb4e <z_reschedule>
	__asm__ volatile(
   1bf38:	f384 8811 	msr	BASEPRI, r4
   1bf3c:	f3bf 8f6f 	isb	sy
}
   1bf40:	bd38      	pop	{r3, r4, r5, pc}
   1bf42:	bf00      	nop
   1bf44:	20024d28 	.word	0x20024d28
   1bf48:	20026591 	.word	0x20026591

0001bf4c <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   1bf4c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bf4e:	f04f 0320 	mov.w	r3, #32
   1bf52:	f3ef 8411 	mrs	r4, BASEPRI
   1bf56:	f383 8811 	msr	BASEPRI, r3
   1bf5a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   1bf5e:	f002 fed8 	bl	1ed12 <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   1bf62:	4621      	mov	r1, r4
}
   1bf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1bf68:	4801      	ldr	r0, [pc, #4]	; (1bf70 <z_impl_k_thread_resume+0x24>)
   1bf6a:	f002 bdf0 	b.w	1eb4e <z_reschedule>
   1bf6e:	bf00      	nop
   1bf70:	20026591 	.word	0x20026591

0001bf74 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1bf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1bf78:	4e28      	ldr	r6, [pc, #160]	; (1c01c <z_init_static_threads+0xa8>)
   1bf7a:	4d29      	ldr	r5, [pc, #164]	; (1c020 <z_init_static_threads+0xac>)
   1bf7c:	46b0      	mov	r8, r6
{
   1bf7e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1bf80:	42b5      	cmp	r5, r6
   1bf82:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1bf86:	d310      	bcc.n	1bfaa <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1bf88:	f7ff fc06 	bl	1b798 <k_sched_lock>
   1bf8c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1bf90:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bf94:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1bf96:	4c22      	ldr	r4, [pc, #136]	; (1c020 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1bf98:	f8df a088 	ldr.w	sl, [pc, #136]	; 1c024 <z_init_static_threads+0xb0>
   1bf9c:	4544      	cmp	r4, r8
   1bf9e:	d321      	bcc.n	1bfe4 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1bfa0:	b007      	add	sp, #28
   1bfa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1bfa6:	f7ff bc3f 	b.w	1b828 <k_sched_unlock>
		z_setup_new_thread(
   1bfaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1bfae:	9305      	str	r3, [sp, #20]
   1bfb0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1bfb4:	9304      	str	r3, [sp, #16]
   1bfb6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1bfba:	9303      	str	r3, [sp, #12]
   1bfbc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1bfc0:	9302      	str	r3, [sp, #8]
   1bfc2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1bfc6:	9301      	str	r3, [sp, #4]
   1bfc8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1bfcc:	9300      	str	r3, [sp, #0]
   1bfce:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1bfd2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1bfd6:	f7ff ff2d 	bl	1be34 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1bfda:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1bfde:	64dd      	str	r5, [r3, #76]	; 0x4c
   1bfe0:	4625      	mov	r5, r4
   1bfe2:	e7cd      	b.n	1bf80 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1bfe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1bfe6:	1c4b      	adds	r3, r1, #1
   1bfe8:	d004      	beq.n	1bff4 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1bfea:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1bfec:	b921      	cbnz	r1, 1bff8 <z_init_static_threads+0x84>
   1bfee:	4628      	mov	r0, r5
   1bff0:	f7ff fefc 	bl	1bdec <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1bff4:	3430      	adds	r4, #48	; 0x30
   1bff6:	e7d1      	b.n	1bf9c <z_init_static_threads+0x28>
   1bff8:	46b3      	mov	fp, r6
   1bffa:	46bc      	mov	ip, r7
   1bffc:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1c000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c004:	2300      	movs	r3, #0
   1c006:	4658      	mov	r0, fp
   1c008:	4661      	mov	r1, ip
   1c00a:	f7f0 fac5 	bl	c598 <__aeabi_uldivmod>
   1c00e:	4651      	mov	r1, sl
   1c010:	1c42      	adds	r2, r0, #1
   1c012:	f105 0018 	add.w	r0, r5, #24
   1c016:	f000 f865 	bl	1c0e4 <z_add_timeout>
   1c01a:	e7eb      	b.n	1bff4 <z_init_static_threads+0x80>
   1c01c:	2002c650 	.word	0x2002c650
   1c020:	2002c650 	.word	0x2002c650
   1c024:	0001ebd9 	.word	0x0001ebd9

0001c028 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1c028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c02c:	4605      	mov	r5, r0
   1c02e:	b086      	sub	sp, #24
   1c030:	460e      	mov	r6, r1
   1c032:	4617      	mov	r7, r2
   1c034:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1c036:	f002 fcd4 	bl	1e9e2 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1c03a:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c03e:	2000      	movs	r0, #0
   1c040:	4b09      	ldr	r3, [pc, #36]	; (1c068 <k_work_q_start+0x40>)
   1c042:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1c046:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1c04a:	e9cd 5000 	strd	r5, r0, [sp]
   1c04e:	463a      	mov	r2, r7
   1c050:	4631      	mov	r1, r6
   1c052:	4620      	mov	r0, r4
   1c054:	f7ff ff06 	bl	1be64 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1c058:	4620      	mov	r0, r4
   1c05a:	4904      	ldr	r1, [pc, #16]	; (1c06c <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1c05c:	b006      	add	sp, #24
   1c05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c062:	f002 be3f 	b.w	1ece4 <z_impl_k_thread_name_set>
   1c066:	bf00      	nop
   1c068:	0001c7cf 	.word	0x0001c7cf
   1c06c:	00020f73 	.word	0x00020f73

0001c070 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1c070:	4b03      	ldr	r3, [pc, #12]	; (1c080 <elapsed+0x10>)
   1c072:	681b      	ldr	r3, [r3, #0]
   1c074:	b90b      	cbnz	r3, 1c07a <elapsed+0xa>
   1c076:	f7f3 bb5b 	b.w	f730 <z_clock_elapsed>
}
   1c07a:	2000      	movs	r0, #0
   1c07c:	4770      	bx	lr
   1c07e:	bf00      	nop
   1c080:	20024e28 	.word	0x20024e28

0001c084 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c084:	6803      	ldr	r3, [r0, #0]
   1c086:	b140      	cbz	r0, 1c09a <remove_timeout+0x16>
   1c088:	4a07      	ldr	r2, [pc, #28]	; (1c0a8 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1c08a:	6852      	ldr	r2, [r2, #4]
   1c08c:	4290      	cmp	r0, r2
   1c08e:	d004      	beq.n	1c09a <remove_timeout+0x16>
	if (next(t) != NULL) {
   1c090:	b11b      	cbz	r3, 1c09a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1c092:	689a      	ldr	r2, [r3, #8]
   1c094:	6881      	ldr	r1, [r0, #8]
   1c096:	440a      	add	r2, r1
   1c098:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1c09a:	6842      	ldr	r2, [r0, #4]
   1c09c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c09e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c0a0:	2300      	movs	r3, #0
	node->prev = NULL;
   1c0a2:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c0a6:	4770      	bx	lr
   1c0a8:	2002c564 	.word	0x2002c564

0001c0ac <next_timeout>:
	return list->head == list;
   1c0ac:	4b0b      	ldr	r3, [pc, #44]	; (1c0dc <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1c0ae:	b510      	push	{r4, lr}
   1c0b0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c0b2:	429c      	cmp	r4, r3
   1c0b4:	bf08      	it	eq
   1c0b6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1c0b8:	f7ff ffda 	bl	1c070 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1c0bc:	b154      	cbz	r4, 1c0d4 <next_timeout+0x28>
   1c0be:	68a3      	ldr	r3, [r4, #8]
   1c0c0:	1a18      	subs	r0, r3, r0
   1c0c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c0c6:	4b06      	ldr	r3, [pc, #24]	; (1c0e0 <next_timeout+0x34>)
   1c0c8:	691b      	ldr	r3, [r3, #16]
   1c0ca:	b113      	cbz	r3, 1c0d2 <next_timeout+0x26>
   1c0cc:	4298      	cmp	r0, r3
   1c0ce:	bfa8      	it	ge
   1c0d0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c0d2:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1c0d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c0d8:	e7f5      	b.n	1c0c6 <next_timeout+0x1a>
   1c0da:	bf00      	nop
   1c0dc:	2002c564 	.word	0x2002c564
   1c0e0:	20024d28 	.word	0x20024d28

0001c0e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1c0e4:	b570      	push	{r4, r5, r6, lr}
   1c0e6:	4604      	mov	r4, r0
   1c0e8:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c0ea:	60c1      	str	r1, [r0, #12]
   1c0ec:	f04f 0320 	mov.w	r3, #32
   1c0f0:	f3ef 8511 	mrs	r5, BASEPRI
   1c0f4:	f383 8811 	msr	BASEPRI, r3
   1c0f8:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1c0fc:	f7ff ffb8 	bl	1c070 <elapsed>
   1c100:	2e01      	cmp	r6, #1
   1c102:	bfac      	ite	ge
   1c104:	1980      	addge	r0, r0, r6
   1c106:	3001      	addlt	r0, #1
	return list->head == list;
   1c108:	4b16      	ldr	r3, [pc, #88]	; (1c164 <z_add_timeout+0x80>)
   1c10a:	60a0      	str	r0, [r4, #8]
   1c10c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c10e:	429a      	cmp	r2, r3
   1c110:	d001      	beq.n	1c116 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c112:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1c114:	b932      	cbnz	r2, 1c124 <z_add_timeout+0x40>
	node->prev = list->tail;
   1c116:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1c118:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1c11a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1c11c:	685a      	ldr	r2, [r3, #4]
   1c11e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c120:	605c      	str	r4, [r3, #4]
   1c122:	e00a      	b.n	1c13a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1c124:	6890      	ldr	r0, [r2, #8]
   1c126:	68a1      	ldr	r1, [r4, #8]
   1c128:	4288      	cmp	r0, r1
   1c12a:	dd15      	ble.n	1c158 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1c12c:	1a41      	subs	r1, r0, r1
   1c12e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1c130:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1c132:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1c136:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1c138:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1c13a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c13c:	429a      	cmp	r2, r3
   1c13e:	d006      	beq.n	1c14e <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c140:	4294      	cmp	r4, r2
   1c142:	d104      	bne.n	1c14e <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1c144:	f7ff ffb2 	bl	1c0ac <next_timeout>
   1c148:	2100      	movs	r1, #0
   1c14a:	f7f3 fa9b 	bl	f684 <z_clock_set_timeout>
	__asm__ volatile(
   1c14e:	f385 8811 	msr	BASEPRI, r5
   1c152:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c156:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1c158:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1c15a:	4296      	cmp	r6, r2
   1c15c:	60a1      	str	r1, [r4, #8]
   1c15e:	d0da      	beq.n	1c116 <z_add_timeout+0x32>
   1c160:	6812      	ldr	r2, [r2, #0]
   1c162:	e7d7      	b.n	1c114 <z_add_timeout+0x30>
   1c164:	2002c564 	.word	0x2002c564

0001c168 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1c168:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1c16c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c16e:	f7ff fbef 	bl	1b950 <z_time_slice>
	__asm__ volatile(
   1c172:	f04f 0320 	mov.w	r3, #32
   1c176:	f3ef 8511 	mrs	r5, BASEPRI
   1c17a:	f383 8811 	msr	BASEPRI, r3
   1c17e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c182:	4f21      	ldr	r7, [pc, #132]	; (1c208 <z_clock_announce+0xa0>)
   1c184:	4e21      	ldr	r6, [pc, #132]	; (1c20c <z_clock_announce+0xa4>)
   1c186:	46b8      	mov	r8, r7
	return list->head == list;
   1c188:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1c210 <z_clock_announce+0xa8>
   1c18c:	6034      	str	r4, [r6, #0]
   1c18e:	f8d9 4000 	ldr.w	r4, [r9]
   1c192:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c194:	454c      	cmp	r4, r9
   1c196:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1c19a:	d005      	beq.n	1c1a8 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c19c:	b124      	cbz	r4, 1c1a8 <z_clock_announce+0x40>
   1c19e:	68a3      	ldr	r3, [r4, #8]
   1c1a0:	4293      	cmp	r3, r2
   1c1a2:	dd14      	ble.n	1c1ce <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c1a4:	1a9b      	subs	r3, r3, r2
   1c1a6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1c1a8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c1aa:	eb1b 0002 	adds.w	r0, fp, r2
   1c1ae:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1c1b2:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1c1b6:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1c1b8:	f7ff ff78 	bl	1c0ac <next_timeout>
   1c1bc:	4621      	mov	r1, r4
   1c1be:	f7f3 fa61 	bl	f684 <z_clock_set_timeout>
	__asm__ volatile(
   1c1c2:	f385 8811 	msr	BASEPRI, r5
   1c1c6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c1ca:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1c1ce:	eb1b 0003 	adds.w	r0, fp, r3
   1c1d2:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1c1d6:	1ad3      	subs	r3, r2, r3
   1c1d8:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1c1da:	2300      	movs	r3, #0
		curr_tick += dt;
   1c1dc:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1c1e0:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1c1e2:	4620      	mov	r0, r4
   1c1e4:	f7ff ff4e 	bl	1c084 <remove_timeout>
   1c1e8:	f385 8811 	msr	BASEPRI, r5
   1c1ec:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c1f0:	68e3      	ldr	r3, [r4, #12]
   1c1f2:	4798      	blx	r3
	__asm__ volatile(
   1c1f4:	f04f 0320 	mov.w	r3, #32
   1c1f8:	f3ef 8511 	mrs	r5, BASEPRI
   1c1fc:	f383 8811 	msr	BASEPRI, r3
   1c200:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c204:	e7c3      	b.n	1c18e <z_clock_announce+0x26>
   1c206:	bf00      	nop
   1c208:	20020108 	.word	0x20020108
   1c20c:	20024e28 	.word	0x20024e28
   1c210:	2002c564 	.word	0x2002c564

0001c214 <z_tick_get>:

s64_t z_tick_get(void)
{
   1c214:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1c218:	f04f 0320 	mov.w	r3, #32
   1c21c:	f3ef 8411 	mrs	r4, BASEPRI
   1c220:	f383 8811 	msr	BASEPRI, r3
   1c224:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1c228:	f7f3 fa82 	bl	f730 <z_clock_elapsed>
   1c22c:	4b07      	ldr	r3, [pc, #28]	; (1c24c <z_tick_get+0x38>)
   1c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c232:	eb12 0b00 	adds.w	fp, r2, r0
   1c236:	f143 0c00 	adc.w	ip, r3, #0
   1c23a:	4658      	mov	r0, fp
   1c23c:	4661      	mov	r1, ip
	__asm__ volatile(
   1c23e:	f384 8811 	msr	BASEPRI, r4
   1c242:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c246:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1c24a:	bf00      	nop
   1c24c:	20020108 	.word	0x20020108

0001c250 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1c250:	6a02      	ldr	r2, [r0, #32]
{
   1c252:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1c254:	2a00      	cmp	r2, #0
{
   1c256:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1c258:	dd02      	ble.n	1c260 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c25a:	490e      	ldr	r1, [pc, #56]	; (1c294 <z_timer_expiration_handler+0x44>)
   1c25c:	f7ff ff42 	bl	1c0e4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c260:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c262:	3301      	adds	r3, #1
   1c264:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c266:	69a3      	ldr	r3, [r4, #24]
   1c268:	b10b      	cbz	r3, 1c26e <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1c26a:	4620      	mov	r0, r4
   1c26c:	4798      	blx	r3
	return list->head == list;
   1c26e:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c272:	42a5      	cmp	r5, r4
   1c274:	d00d      	beq.n	1c292 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c276:	b165      	cbz	r5, 1c292 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1c278:	4628      	mov	r0, r5
   1c27a:	f002 fc4f 	bl	1eb1c <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c27e:	7b6b      	ldrb	r3, [r5, #13]
   1c280:	06db      	lsls	r3, r3, #27
   1c282:	d104      	bne.n	1c28e <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1c284:	69ab      	ldr	r3, [r5, #24]
   1c286:	b913      	cbnz	r3, 1c28e <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1c288:	4628      	mov	r0, r5
   1c28a:	f7ff fae9 	bl	1b860 <z_add_thread_to_ready_q>
   1c28e:	2300      	movs	r3, #0
   1c290:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1c292:	bd38      	pop	{r3, r4, r5, pc}
   1c294:	0001c251 	.word	0x0001c251

0001c298 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1c298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c29c:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c2a0:	2700      	movs	r7, #0
   1c2a2:	4604      	mov	r4, r0
   1c2a4:	4688      	mov	r8, r1
   1c2a6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c2aa:	4630      	mov	r0, r6
   1c2ac:	4639      	mov	r1, r7
   1c2ae:	2300      	movs	r3, #0
   1c2b0:	fbe5 0102 	umlal	r0, r1, r5, r2
   1c2b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c2b8:	f7f0 f96e 	bl	c598 <__aeabi_uldivmod>
   1c2bc:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1c2be:	9000      	str	r0, [sp, #0]
   1c2c0:	4630      	mov	r0, r6
   1c2c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c2c6:	2300      	movs	r3, #0
   1c2c8:	fbe5 0108 	umlal	r0, r1, r5, r8
   1c2cc:	f7f0 f964 	bl	c598 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1c2d0:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1c2d2:	4620      	mov	r0, r4
   1c2d4:	f002 fd4b 	bl	1ed6e <z_abort_timeout>
	timer->period = period_in_ticks;
   1c2d8:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c2da:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1c2dc:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1c2de:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c2e0:	9a01      	ldr	r2, [sp, #4]
   1c2e2:	4903      	ldr	r1, [pc, #12]	; (1c2f0 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   1c2e4:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1c2e6:	b002      	add	sp, #8
   1c2e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c2ec:	f7ff befa 	b.w	1c0e4 <z_add_timeout>
   1c2f0:	0001c251 	.word	0x0001c251

0001c2f4 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1c2f4:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1c2f6:	7b44      	ldrb	r4, [r0, #13]
   1c2f8:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1c2fc:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1c2fe:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1c300:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   1c304:	2200      	movs	r2, #0
	event->mode = mode;
   1c306:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1c308:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1c30a:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1c30c:	4a02      	ldr	r2, [pc, #8]	; (1c318 <k_poll_event_init+0x24>)
   1c30e:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1c310:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1c314:	bd10      	pop	{r4, pc}
   1c316:	bf00      	nop
   1c318:	00020fff 	.word	0x00020fff

0001c31c <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1c31c:	2301      	movs	r3, #1
{
   1c31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c322:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   1c324:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1c328:	4b23      	ldr	r3, [pc, #140]	; (1c3b8 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   1c32a:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   1c32c:	689b      	ldr	r3, [r3, #8]
{
   1c32e:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1c330:	9304      	str	r3, [sp, #16]
   1c332:	4b22      	ldr	r3, [pc, #136]	; (1c3bc <z_impl_k_poll+0xa0>)
   1c334:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   1c336:	fab2 f382 	clz	r3, r2
   1c33a:	aa03      	add	r2, sp, #12
   1c33c:	095b      	lsrs	r3, r3, #5
   1c33e:	f002 fe33 	bl	1efa8 <register_events>
   1c342:	4607      	mov	r7, r0
	__asm__ volatile(
   1c344:	f04f 0320 	mov.w	r3, #32
   1c348:	f3ef 8511 	mrs	r5, BASEPRI
   1c34c:	f383 8811 	msr	BASEPRI, r3
   1c350:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1c354:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c358:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1c35c:	b94b      	cbnz	r3, 1c372 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1c35e:	462a      	mov	r2, r5
   1c360:	4639      	mov	r1, r7
   1c362:	4630      	mov	r0, r6
   1c364:	f002 fd88 	bl	1ee78 <clear_event_registrations>
	__asm__ volatile(
   1c368:	f385 8811 	msr	BASEPRI, r5
   1c36c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1c370:	e00b      	b.n	1c38a <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1c372:	2300      	movs	r3, #0
   1c374:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1c378:	f1b8 0f00 	cmp.w	r8, #0
   1c37c:	d109      	bne.n	1c392 <z_impl_k_poll+0x76>
   1c37e:	f385 8811 	msr	BASEPRI, r5
   1c382:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c386:	f06f 040a 	mvn.w	r4, #10
}
   1c38a:	4620      	mov	r0, r4
   1c38c:	b006      	add	sp, #24
   1c38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c392:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c394:	4643      	mov	r3, r8
   1c396:	4629      	mov	r1, r5
   1c398:	4809      	ldr	r0, [pc, #36]	; (1c3c0 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c39a:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c39e:	f7ff fb9b 	bl	1bad8 <z_pend_curr>
   1c3a2:	4604      	mov	r4, r0
	__asm__ volatile(
   1c3a4:	f04f 0320 	mov.w	r3, #32
   1c3a8:	f3ef 8511 	mrs	r5, BASEPRI
   1c3ac:	f383 8811 	msr	BASEPRI, r3
   1c3b0:	f3bf 8f6f 	isb	sy
   1c3b4:	e7d3      	b.n	1c35e <z_impl_k_poll+0x42>
   1c3b6:	bf00      	nop
   1c3b8:	20024d28 	.word	0x20024d28
   1c3bc:	0001ef09 	.word	0x0001ef09
   1c3c0:	20026591 	.word	0x20026591

0001c3c4 <enter_sleep>:

void enter_sleep(u16_t mode)
{
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1c3c4:	2803      	cmp	r0, #3
{
   1c3c6:	b508      	push	{r3, lr}
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1c3c8:	d103      	bne.n	1c3d2 <enter_sleep+0xe>
	if (mode == SHUTDOWN_APP_MODEM) {
		lte_lc_power_off();
	}
	bsd_shutdown();
	nrf_regulators_system_off(NRF_REGULATORS_NS);
}
   1c3ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lte_lc_power_off();
   1c3ce:	f7f6 b9f5 	b.w	127bc <lte_lc_power_off>
	if (mode == SHUTDOWN_APP_MODEM) {
   1c3d2:	2801      	cmp	r0, #1
   1c3d4:	d101      	bne.n	1c3da <enter_sleep+0x16>
		lte_lc_power_off();
   1c3d6:	f7f6 f9f1 	bl	127bc <lte_lc_power_off>
	bsd_shutdown();
   1c3da:	f7f8 fb31 	bl	14a40 <bsd_shutdown>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1c3de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1c3e2:	2201      	movs	r2, #1
   1c3e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1c3e8:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1c3ec:	bf20      	wfe
   1c3ee:	e7fd      	b.n	1c3ec <enter_sleep+0x28>

0001c3f0 <main>:
		enter_sleep(SHUTDOWN_APP_MODEM);
	}
}
#else
void main(void)
{
   1c3f0:	b508      	push	{r3, lr}
	start_execute();
   1c3f2:	f7f0 fa65 	bl	c8c0 <start_execute>
	
	while(1)
	{
		send_message();
   1c3f6:	f7f1 fedd 	bl	e1b4 <send_message>
   1c3fa:	e7fc      	b.n	1c3f6 <main+0x6>

0001c3fc <uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1c3fc:	6843      	ldr	r3, [r0, #4]
   1c3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c400:	b103      	cbz	r3, 1c404 <uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1c402:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   1c404:	4770      	bx	lr

0001c406 <slm_at_callback>:
{
   1c406:	b510      	push	{r4, lr}
   1c408:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   1c40a:	f001 f8e9 	bl	1d5e0 <strlen>
   1c40e:	4601      	mov	r1, r0
   1c410:	4620      	mov	r0, r4
}
   1c412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   1c416:	f7f0 ba8f 	b.w	c938 <write_uart_string>

0001c41a <response_handler>:
{
   1c41a:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   1c41c:	4608      	mov	r0, r1
{
   1c41e:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   1c420:	f001 f8de 	bl	1d5e0 <strlen>
   1c424:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   1c426:	2901      	cmp	r1, #1
   1c428:	dd04      	ble.n	1c434 <response_handler+0x1a>
		write_uart_string(response, len);
   1c42a:	4620      	mov	r0, r4
}
   1c42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   1c430:	f7f0 ba82 	b.w	c938 <write_uart_string>
}
   1c434:	bd10      	pop	{r4, pc}

0001c436 <z_errno>:
   1c436:	f7fe bdad 	b.w	1af94 <z_impl_z_errno>

0001c43a <k_sleep>:
	return z_impl_k_sleep(ms);
   1c43a:	f7ff bc29 	b.w	1bc90 <z_impl_k_sleep>

0001c43e <slm_at_tcpip_uninit>:
	return do_socket_close(0);
   1c43e:	2000      	movs	r0, #0
   1c440:	f7f0 bd52 	b.w	cee8 <do_socket_close>

0001c444 <z_errno>:
   1c444:	f7fe bda6 	b.w	1af94 <z_impl_z_errno>

0001c448 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1c448:	b570      	push	{r4, r5, r6, lr}
   1c44a:	250c      	movs	r5, #12
   1c44c:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1c44e:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1c452:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1c454:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1c456:	4610      	mov	r0, r2
   1c458:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1c45c:	bfb8      	it	lt
   1c45e:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1c460:	2a00      	cmp	r2, #0
   1c462:	bfb8      	it	lt
   1c464:	f102 001f 	addlt.w	r0, r2, #31
   1c468:	1140      	asrs	r0, r0, #5
   1c46a:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1c46e:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1c470:	f002 001f 	and.w	r0, r2, #31
   1c474:	bd70      	pop	{r4, r5, r6, pc}

0001c476 <pool_irq_lock.isra.2.part.3>:
   1c476:	f04f 0320 	mov.w	r3, #32
   1c47a:	f3ef 8011 	mrs	r0, BASEPRI
   1c47e:	f383 8811 	msr	BASEPRI, r3
   1c482:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1c486:	4770      	bx	lr

0001c488 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c488:	07c3      	lsls	r3, r0, #31
   1c48a:	d503      	bpl.n	1c494 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1c48c:	f381 8811 	msr	BASEPRI, r1
   1c490:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1c494:	4770      	bx	lr

0001c496 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1c496:	23ff      	movs	r3, #255	; 0xff
{
   1c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c49c:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1c49e:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c4a0:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1c4a2:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1c4a4:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c4a8:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c4aa:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c4ac:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1c4b0:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c4b4:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1c4b6:	4598      	cmp	r8, r3
   1c4b8:	dc05      	bgt.n	1c4c6 <z_sys_mem_pool_base_init+0x30>
   1c4ba:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1c4bc:	4619      	mov	r1, r3
   1c4be:	428f      	cmp	r7, r1
   1c4c0:	dc20      	bgt.n	1c504 <z_sys_mem_pool_base_init+0x6e>
}
   1c4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1c4c6:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1c4ca:	fb09 fe03 	mul.w	lr, r9, r3
   1c4ce:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c4d2:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1c4d4:	eb0a 040e 	add.w	r4, sl, lr
   1c4d8:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1c4dc:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c4e0:	d805      	bhi.n	1c4ee <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1c4e2:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1c4e4:	0892      	lsrs	r2, r2, #2
   1c4e6:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1c4ea:	3301      	adds	r3, #1
   1c4ec:	e7e3      	b.n	1c4b6 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1c4ee:	f115 041f 	adds.w	r4, r5, #31
   1c4f2:	bf48      	it	mi
   1c4f4:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1c4f8:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1c4fa:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1c4fe:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1c502:	e7ef      	b.n	1c4e4 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1c504:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1c506:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1c508:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1c50c:	18ec      	adds	r4, r5, r3
	node->next = list;
   1c50e:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1c512:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1c514:	3101      	adds	r1, #1
   1c516:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1c518:	6895      	ldr	r5, [r2, #8]
   1c51a:	4433      	add	r3, r6
   1c51c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c51e:	6094      	str	r4, [r2, #8]
   1c520:	e7cd      	b.n	1c4be <z_sys_mem_pool_base_init+0x28>

0001c522 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1c522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c526:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c528:	7a84      	ldrb	r4, [r0, #10]
{
   1c52a:	af00      	add	r7, sp, #0
   1c52c:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c530:	00a3      	lsls	r3, r4, #2
   1c532:	3307      	adds	r3, #7
   1c534:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c538:	ebad 0d03 	sub.w	sp, sp, r3
   1c53c:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1c53e:	4653      	mov	r3, sl
   1c540:	6842      	ldr	r2, [r0, #4]
{
   1c542:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1c544:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1c548:	2200      	movs	r2, #0
   1c54a:	4294      	cmp	r4, r2
   1c54c:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1c550:	dd09      	ble.n	1c566 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1c552:	b122      	cbz	r2, 1c55e <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c554:	6818      	ldr	r0, [r3, #0]
   1c556:	0880      	lsrs	r0, r0, #2
   1c558:	f020 0003 	bic.w	r0, r0, #3
   1c55c:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1c55e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1c562:	4288      	cmp	r0, r1
   1c564:	d208      	bcs.n	1c578 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1c566:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1c56a:	d107      	bne.n	1c57c <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1c56c:	2300      	movs	r3, #0
   1c56e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c570:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1c572:	f06f 000b 	mvn.w	r0, #11
   1c576:	e02c      	b.n	1c5d2 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1c578:	3201      	adds	r2, #1
   1c57a:	e7e6      	b.n	1c54a <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c57c:	7c28      	ldrb	r0, [r5, #16]
   1c57e:	f010 0001 	ands.w	r0, r0, #1
   1c582:	d001      	beq.n	1c588 <z_sys_mem_pool_block_alloc+0x66>
   1c584:	f7ff ff77 	bl	1c476 <pool_irq_lock.isra.2.part.3>
   1c588:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1c58a:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1c58c:	464e      	mov	r6, r9
   1c58e:	68ea      	ldr	r2, [r5, #12]
   1c590:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1c594:	461a      	mov	r2, r3
   1c596:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c59a:	4294      	cmp	r4, r2
   1c59c:	d11d      	bne.n	1c5da <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1c59e:	3e01      	subs	r6, #1
   1c5a0:	1c72      	adds	r2, r6, #1
   1c5a2:	f1a3 030c 	sub.w	r3, r3, #12
   1c5a6:	d1f5      	bne.n	1c594 <z_sys_mem_pool_block_alloc+0x72>
   1c5a8:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1c5aa:	4641      	mov	r1, r8
   1c5ac:	7c28      	ldrb	r0, [r5, #16]
   1c5ae:	f7ff ff6b 	bl	1c488 <pool_irq_unlock.isra.4>
	*data_p = data;
   1c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c5b4:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1c5b6:	2c00      	cmp	r4, #0
   1c5b8:	d0db      	beq.n	1c572 <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1c5ba:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1c5bc:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1c5be:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c5c2:	682b      	ldr	r3, [r5, #0]
   1c5c4:	1ae4      	subs	r4, r4, r3
   1c5c6:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1c5ca:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1c5ce:	687b      	ldr	r3, [r7, #4]
   1c5d0:	601c      	str	r4, [r3, #0]
}
   1c5d2:	371c      	adds	r7, #28
   1c5d4:	46bd      	mov	sp, r7
   1c5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1c5da:	e9d4 3200 	ldrd	r3, r2, [r4]
   1c5de:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c5e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c5e2:	2300      	movs	r3, #0
	node->prev = NULL;
   1c5e4:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c5e8:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1c5ea:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c5ee:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1c5f0:	f107 0b14 	add.w	fp, r7, #20
   1c5f4:	fb92 f2f1 	sdiv	r2, r2, r1
   1c5f8:	465b      	mov	r3, fp
   1c5fa:	4631      	mov	r1, r6
   1c5fc:	4628      	mov	r0, r5
   1c5fe:	f7ff ff23 	bl	1c448 <get_bit_ptr>
	*word |= (1<<bit);
   1c602:	2201      	movs	r2, #1
   1c604:	6979      	ldr	r1, [r7, #20]
   1c606:	fa02 f000 	lsl.w	r0, r2, r0
   1c60a:	680b      	ldr	r3, [r1, #0]
   1c60c:	603a      	str	r2, [r7, #0]
   1c60e:	4303      	orrs	r3, r0
   1c610:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1c612:	454e      	cmp	r6, r9
   1c614:	dac9      	bge.n	1c5aa <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c616:	682a      	ldr	r2, [r5, #0]
   1c618:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1c61c:	1aa2      	subs	r2, r4, r2
   1c61e:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1c622:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1c624:	465b      	mov	r3, fp
   1c626:	0092      	lsls	r2, r2, #2
   1c628:	4631      	mov	r1, r6
   1c62a:	4628      	mov	r0, r5
   1c62c:	f7ff ff0c 	bl	1c448 <get_bit_ptr>
	*word |= (1<<bit);
   1c630:	697a      	ldr	r2, [r7, #20]
   1c632:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c634:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1c636:	fa03 f000 	lsl.w	r0, r3, r0
   1c63a:	6813      	ldr	r3, [r2, #0]
   1c63c:	4303      	orrs	r3, r0
   1c63e:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c640:	230c      	movs	r3, #12
   1c642:	2203      	movs	r2, #3
   1c644:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1c648:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c64c:	f101 0e04 	add.w	lr, r1, #4
   1c650:	1823      	adds	r3, r4, r0
   1c652:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1c654:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1c656:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1c65a:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c65c:	688a      	ldr	r2, [r1, #8]
   1c65e:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1c660:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1c662:	608b      	str	r3, [r1, #8]
   1c664:	3a01      	subs	r2, #1
   1c666:	4403      	add	r3, r0
   1c668:	60fa      	str	r2, [r7, #12]
   1c66a:	d1f3      	bne.n	1c654 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1c66c:	4641      	mov	r1, r8
   1c66e:	7c28      	ldrb	r0, [r5, #16]
   1c670:	f7ff ff0a 	bl	1c488 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c674:	7c2b      	ldrb	r3, [r5, #16]
   1c676:	07db      	lsls	r3, r3, #31
   1c678:	d503      	bpl.n	1c682 <z_sys_mem_pool_block_alloc+0x160>
   1c67a:	f7ff fefc 	bl	1c476 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1c67e:	4680      	mov	r8, r0
   1c680:	e7c7      	b.n	1c612 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1c682:	68f8      	ldr	r0, [r7, #12]
   1c684:	e7fb      	b.n	1c67e <z_sys_mem_pool_block_alloc+0x15c>

0001c686 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1c686:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c68a:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c68c:	7a83      	ldrb	r3, [r0, #10]
{
   1c68e:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c690:	009b      	lsls	r3, r3, #2
   1c692:	3307      	adds	r3, #7
   1c694:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c698:	ebad 0d03 	sub.w	sp, sp, r3
   1c69c:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1c69e:	6843      	ldr	r3, [r0, #4]
{
   1c6a0:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1c6a2:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1c6a4:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1c6a6:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1c6aa:	4281      	cmp	r1, r0
   1c6ac:	d215      	bcs.n	1c6da <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c6ae:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1c6b0:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c6b2:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1c6b6:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c6b8:	d001      	beq.n	1c6be <z_sys_mem_pool_block_free+0x38>
   1c6ba:	f7ff fedc 	bl	1c476 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1c6be:	4604      	mov	r4, r0
	while (level >= 0) {
   1c6c0:	f1b8 0f00 	cmp.w	r8, #0
   1c6c4:	da11      	bge.n	1c6ea <z_sys_mem_pool_block_free+0x64>
	return -1;
   1c6c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1c6ca:	4621      	mov	r1, r4
   1c6cc:	7c30      	ldrb	r0, [r6, #16]
   1c6ce:	f7ff fedb 	bl	1c488 <pool_irq_unlock.isra.4>
}
   1c6d2:	3714      	adds	r7, #20
   1c6d4:	46bd      	mov	sp, r7
   1c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c6da:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1c6dc:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c6de:	089b      	lsrs	r3, r3, #2
   1c6e0:	f023 0303 	bic.w	r3, r3, #3
   1c6e4:	f844 3f04 	str.w	r3, [r4, #4]!
   1c6e8:	e7df      	b.n	1c6aa <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1c6ea:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c6ee:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1c6f0:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1c6f4:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1c6f6:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c6f8:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1c6fa:	eb03 090a 	add.w	r9, r3, sl
   1c6fe:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c700:	4630      	mov	r0, r6
   1c702:	f107 030c 	add.w	r3, r7, #12
   1c706:	f7ff fe9f 	bl	1c448 <get_bit_ptr>
	*word &= ~(1<<bit);
   1c70a:	2301      	movs	r3, #1
   1c70c:	68fa      	ldr	r2, [r7, #12]
   1c70e:	fa03 f000 	lsl.w	r0, r3, r0
   1c712:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1c714:	6839      	ldr	r1, [r7, #0]
   1c716:	ea23 0300 	bic.w	r3, r3, r0
   1c71a:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1c71c:	220c      	movs	r2, #12
   1c71e:	68f3      	ldr	r3, [r6, #12]
   1c720:	fb02 3308 	mla	r3, r2, r8, r3
   1c724:	1d1a      	adds	r2, r3, #4
   1c726:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1c72a:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1c72c:	4621      	mov	r1, r4
   1c72e:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1c732:	689a      	ldr	r2, [r3, #8]
   1c734:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1c738:	f8c3 9008 	str.w	r9, [r3, #8]
   1c73c:	7c30      	ldrb	r0, [r6, #16]
   1c73e:	f7ff fea3 	bl	1c488 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c742:	7c30      	ldrb	r0, [r6, #16]
   1c744:	f010 0001 	ands.w	r0, r0, #1
   1c748:	d001      	beq.n	1c74e <z_sys_mem_pool_block_free+0xc8>
   1c74a:	f7ff fe94 	bl	1c476 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1c74e:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c750:	f1b8 0f00 	cmp.w	r8, #0
   1c754:	d0b9      	beq.n	1c6ca <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1c756:	f107 030c 	add.w	r3, r7, #12
   1c75a:	462a      	mov	r2, r5
   1c75c:	4641      	mov	r1, r8
   1c75e:	4630      	mov	r0, r6
   1c760:	f7ff fe72 	bl	1c448 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1c764:	68fb      	ldr	r3, [r7, #12]
   1c766:	2800      	cmp	r0, #0
   1c768:	bfb8      	it	lt
   1c76a:	3003      	addlt	r0, #3
   1c76c:	681b      	ldr	r3, [r3, #0]
   1c76e:	f020 0003 	bic.w	r0, r0, #3
   1c772:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c776:	f010 000f 	ands.w	r0, r0, #15
   1c77a:	d1a6      	bne.n	1c6ca <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1c77c:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1c77e:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1c782:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1c784:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1c788:	4353      	muls	r3, r2
   1c78a:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1c78c:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1c78e:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1c790:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1c794:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1c798:	2804      	cmp	r0, #4
   1c79a:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1c79e:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1c7a2:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1c7a6:	f8c1 c004 	str.w	ip, [r1, #4]
   1c7aa:	d1ea      	bne.n	1c782 <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1c7ac:	2d00      	cmp	r5, #0
   1c7ae:	bfb8      	it	lt
   1c7b0:	3503      	addlt	r5, #3
		level = level - 1;
   1c7b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1c7b6:	10ad      	asrs	r5, r5, #2
   1c7b8:	e782      	b.n	1c6c0 <z_sys_mem_pool_block_free+0x3a>

0001c7ba <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c7ba:	4604      	mov	r4, r0
   1c7bc:	b508      	push	{r3, lr}
   1c7be:	4608      	mov	r0, r1
   1c7c0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c7c2:	461a      	mov	r2, r3
   1c7c4:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c7c6:	f7ff fa8b 	bl	1bce0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c7ca:	f7f3 fcdb 	bl	10184 <z_impl_k_thread_abort>

0001c7ce <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c7ce:	b510      	push	{r4, lr}
   1c7d0:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c7d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c7d6:	4620      	mov	r0, r4
   1c7d8:	f002 f910 	bl	1e9fc <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c7dc:	4603      	mov	r3, r0
   1c7de:	2800      	cmp	r0, #0
   1c7e0:	d0f7      	beq.n	1c7d2 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1c7e2:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c7e4:	3308      	adds	r3, #8
   1c7e6:	e8d3 1fef 	ldaex	r1, [r3]
   1c7ea:	f021 0c01 	bic.w	ip, r1, #1
   1c7ee:	e8c3 cfee 	stlex	lr, ip, [r3]
   1c7f2:	f1be 0f00 	cmp.w	lr, #0
   1c7f6:	d1f6      	bne.n	1c7e6 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c7f8:	07cb      	lsls	r3, r1, #31
   1c7fa:	d500      	bpl.n	1c7fe <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c7fc:	4790      	blx	r2
	z_impl_k_yield();
   1c7fe:	f7ff f9fb 	bl	1bbf8 <z_impl_k_yield>
   1c802:	e7e6      	b.n	1c7d2 <z_work_q_main+0x4>

0001c804 <arch_printk_char_out>:
}
   1c804:	2000      	movs	r0, #0
   1c806:	4770      	bx	lr

0001c808 <print_err>:
{
   1c808:	b570      	push	{r4, r5, r6, lr}
   1c80a:	460d      	mov	r5, r1
   1c80c:	4604      	mov	r4, r0
	out('E', ctx);
   1c80e:	2045      	movs	r0, #69	; 0x45
   1c810:	47a0      	blx	r4
	out('R', ctx);
   1c812:	4629      	mov	r1, r5
   1c814:	2052      	movs	r0, #82	; 0x52
   1c816:	47a0      	blx	r4
	out('R', ctx);
   1c818:	4629      	mov	r1, r5
   1c81a:	4623      	mov	r3, r4
}
   1c81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1c820:	2052      	movs	r0, #82	; 0x52
   1c822:	4718      	bx	r3

0001c824 <z_vprintk>:
{
   1c824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1c828:	f04f 0800 	mov.w	r8, #0
{
   1c82c:	4606      	mov	r6, r0
   1c82e:	460f      	mov	r7, r1
	int min_width = -1;
   1c830:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1c834:	46c1      	mov	r9, r8
{
   1c836:	b08b      	sub	sp, #44	; 0x2c
   1c838:	461c      	mov	r4, r3
	while (*fmt) {
   1c83a:	1e53      	subs	r3, r2, #1
   1c83c:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1c83e:	2500      	movs	r5, #0
					break;
   1c840:	e005      	b.n	1c84e <z_vprintk+0x2a>
		if (!might_format) {
   1c842:	b96d      	cbnz	r5, 1c860 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1c844:	2825      	cmp	r0, #37	; 0x25
   1c846:	f000 814f 	beq.w	1cae8 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1c84a:	4639      	mov	r1, r7
   1c84c:	47b0      	blx	r6
	while (*fmt) {
   1c84e:	9b02      	ldr	r3, [sp, #8]
   1c850:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1c854:	9302      	str	r3, [sp, #8]
   1c856:	2800      	cmp	r0, #0
   1c858:	d1f3      	bne.n	1c842 <z_vprintk+0x1e>
}
   1c85a:	b00b      	add	sp, #44	; 0x2c
   1c85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1c860:	2864      	cmp	r0, #100	; 0x64
   1c862:	d06e      	beq.n	1c942 <z_vprintk+0x11e>
   1c864:	d81a      	bhi.n	1c89c <z_vprintk+0x78>
   1c866:	2839      	cmp	r0, #57	; 0x39
   1c868:	d80a      	bhi.n	1c880 <z_vprintk+0x5c>
   1c86a:	2831      	cmp	r0, #49	; 0x31
   1c86c:	d260      	bcs.n	1c930 <z_vprintk+0x10c>
   1c86e:	282d      	cmp	r0, #45	; 0x2d
   1c870:	f000 8140 	beq.w	1caf4 <z_vprintk+0x2d0>
   1c874:	2830      	cmp	r0, #48	; 0x30
   1c876:	d04c      	beq.n	1c912 <z_vprintk+0xee>
   1c878:	2825      	cmp	r0, #37	; 0x25
   1c87a:	d107      	bne.n	1c88c <z_vprintk+0x68>
				out((int)'%', ctx);
   1c87c:	4639      	mov	r1, r7
   1c87e:	e00b      	b.n	1c898 <z_vprintk+0x74>
			switch (*fmt) {
   1c880:	2858      	cmp	r0, #88	; 0x58
   1c882:	f000 80bb 	beq.w	1c9fc <z_vprintk+0x1d8>
   1c886:	2863      	cmp	r0, #99	; 0x63
   1c888:	f000 812a 	beq.w	1cae0 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1c88c:	4639      	mov	r1, r7
   1c88e:	2025      	movs	r0, #37	; 0x25
   1c890:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1c892:	4639      	mov	r1, r7
   1c894:	9b02      	ldr	r3, [sp, #8]
   1c896:	7818      	ldrb	r0, [r3, #0]
   1c898:	47b0      	blx	r6
   1c89a:	e7d0      	b.n	1c83e <z_vprintk+0x1a>
			switch (*fmt) {
   1c89c:	2870      	cmp	r0, #112	; 0x70
   1c89e:	f000 80a3 	beq.w	1c9e8 <z_vprintk+0x1c4>
   1c8a2:	d811      	bhi.n	1c8c8 <z_vprintk+0xa4>
   1c8a4:	2869      	cmp	r0, #105	; 0x69
   1c8a6:	d04c      	beq.n	1c942 <z_vprintk+0x11e>
   1c8a8:	286c      	cmp	r0, #108	; 0x6c
   1c8aa:	d105      	bne.n	1c8b8 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1c8ac:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c8b0:	d12a      	bne.n	1c908 <z_vprintk+0xe4>
					length_mod = 'L';
   1c8b2:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1c8b6:	e7ca      	b.n	1c84e <z_vprintk+0x2a>
			switch (*fmt) {
   1c8b8:	2868      	cmp	r0, #104	; 0x68
   1c8ba:	d1e7      	bne.n	1c88c <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1c8bc:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1c8c0:	d122      	bne.n	1c908 <z_vprintk+0xe4>
					length_mod = 'H';
   1c8c2:	f04f 0848 	mov.w	r8, #72	; 0x48
   1c8c6:	e7c2      	b.n	1c84e <z_vprintk+0x2a>
			switch (*fmt) {
   1c8c8:	2875      	cmp	r0, #117	; 0x75
   1c8ca:	d071      	beq.n	1c9b0 <z_vprintk+0x18c>
   1c8cc:	d818      	bhi.n	1c900 <z_vprintk+0xdc>
   1c8ce:	2873      	cmp	r0, #115	; 0x73
   1c8d0:	d1dc      	bne.n	1c88c <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1c8d2:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1c8d6:	46ab      	mov	fp, r5
   1c8d8:	465b      	mov	r3, fp
   1c8da:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1c8de:	2800      	cmp	r0, #0
   1c8e0:	f040 80fb 	bne.w	1cada <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1c8e4:	f1b9 0f03 	cmp.w	r9, #3
   1c8e8:	f040 810a 	bne.w	1cb00 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1c8ec:	1b5d      	subs	r5, r3, r5
   1c8ee:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1c8f2:	2d00      	cmp	r5, #0
   1c8f4:	dda3      	ble.n	1c83e <z_vprintk+0x1a>
						out(' ', ctx);
   1c8f6:	4639      	mov	r1, r7
   1c8f8:	2020      	movs	r0, #32
   1c8fa:	47b0      	blx	r6
   1c8fc:	3d01      	subs	r5, #1
   1c8fe:	e7f8      	b.n	1c8f2 <z_vprintk+0xce>
			switch (*fmt) {
   1c900:	2878      	cmp	r0, #120	; 0x78
   1c902:	d07b      	beq.n	1c9fc <z_vprintk+0x1d8>
   1c904:	287a      	cmp	r0, #122	; 0x7a
   1c906:	d1c1      	bne.n	1c88c <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1c908:	f1b8 0f00 	cmp.w	r8, #0
   1c90c:	d1be      	bne.n	1c88c <z_vprintk+0x68>
   1c90e:	4680      	mov	r8, r0
   1c910:	e79d      	b.n	1c84e <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1c912:	f1ba 0f00 	cmp.w	sl, #0
   1c916:	da0e      	bge.n	1c936 <z_vprintk+0x112>
   1c918:	f1b9 0f00 	cmp.w	r9, #0
   1c91c:	f000 80ed 	beq.w	1cafa <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1c920:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1c924:	f1b9 0f00 	cmp.w	r9, #0
   1c928:	bf08      	it	eq
   1c92a:	f04f 0902 	moveq.w	r9, #2
   1c92e:	e78e      	b.n	1c84e <z_vprintk+0x2a>
				if (min_width < 0) {
   1c930:	f1ba 0f00 	cmp.w	sl, #0
   1c934:	dbf4      	blt.n	1c920 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1c936:	230a      	movs	r3, #10
   1c938:	fb03 0a0a 	mla	sl, r3, sl, r0
   1c93c:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1c940:	e7f0      	b.n	1c924 <z_vprintk+0x100>
				if (length_mod == 'z') {
   1c942:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c946:	d102      	bne.n	1c94e <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1c948:	f854 5b04 	ldr.w	r5, [r4], #4
   1c94c:	e01f      	b.n	1c98e <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1c94e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c952:	d0f9      	beq.n	1c948 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1c954:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c958:	d1f6      	bne.n	1c948 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1c95a:	3407      	adds	r4, #7
   1c95c:	f024 0407 	bic.w	r4, r4, #7
   1c960:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1c964:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1c968:	9106      	str	r1, [sp, #24]
   1c96a:	f143 0100 	adc.w	r1, r3, #0
   1c96e:	9107      	str	r1, [sp, #28]
   1c970:	2100      	movs	r1, #0
   1c972:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1c976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c97a:	4561      	cmp	r1, ip
   1c97c:	bf08      	it	eq
   1c97e:	4558      	cmpeq	r0, fp
   1c980:	d204      	bcs.n	1c98c <z_vprintk+0x168>
						print_err(out, ctx);
   1c982:	4639      	mov	r1, r7
   1c984:	4630      	mov	r0, r6
   1c986:	f7ff ff3f 	bl	1c808 <print_err>
						break;
   1c98a:	e758      	b.n	1c83e <z_vprintk+0x1a>
					d = lld;
   1c98c:	4615      	mov	r5, r2
				if (d < 0) {
   1c98e:	2d00      	cmp	r5, #0
   1c990:	da05      	bge.n	1c99e <z_vprintk+0x17a>
					out((int)'-', ctx);
   1c992:	4639      	mov	r1, r7
   1c994:	202d      	movs	r0, #45	; 0x2d
   1c996:	47b0      	blx	r6
					d = -d;
   1c998:	426d      	negs	r5, r5
					min_width--;
   1c99a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1c99e:	464b      	mov	r3, r9
   1c9a0:	462a      	mov	r2, r5
   1c9a2:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1c9a6:	4639      	mov	r1, r7
   1c9a8:	4630      	mov	r0, r6
   1c9aa:	f7f2 f89f 	bl	eaec <_printk_dec_ulong>
				break;
   1c9ae:	e746      	b.n	1c83e <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1c9b0:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c9b4:	d102      	bne.n	1c9bc <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1c9b6:	f854 2b04 	ldr.w	r2, [r4], #4
   1c9ba:	e011      	b.n	1c9e0 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1c9bc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c9c0:	d0f9      	beq.n	1c9b6 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1c9c2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c9c6:	d1f6      	bne.n	1c9b6 <z_vprintk+0x192>
					if (llu > ~0UL) {
   1c9c8:	2100      	movs	r1, #0
   1c9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1c9ce:	3407      	adds	r4, #7
   1c9d0:	f024 0407 	bic.w	r4, r4, #7
   1c9d4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1c9d8:	4299      	cmp	r1, r3
   1c9da:	bf08      	it	eq
   1c9dc:	4290      	cmpeq	r0, r2
   1c9de:	d3d0      	bcc.n	1c982 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1c9e0:	f8cd a000 	str.w	sl, [sp]
   1c9e4:	464b      	mov	r3, r9
   1c9e6:	e7de      	b.n	1c9a6 <z_vprintk+0x182>
				out('0', ctx);
   1c9e8:	4639      	mov	r1, r7
   1c9ea:	2030      	movs	r0, #48	; 0x30
   1c9ec:	47b0      	blx	r6
				out('x', ctx);
   1c9ee:	4639      	mov	r1, r7
   1c9f0:	2078      	movs	r0, #120	; 0x78
   1c9f2:	47b0      	blx	r6
					min_width = 8;
   1c9f4:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1c9f8:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1c9fc:	9b02      	ldr	r3, [sp, #8]
   1c9fe:	781b      	ldrb	r3, [r3, #0]
   1ca00:	2b70      	cmp	r3, #112	; 0x70
   1ca02:	d104      	bne.n	1ca0e <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1ca04:	f854 3b04 	ldr.w	r3, [r4], #4
   1ca08:	9304      	str	r3, [sp, #16]
   1ca0a:	2300      	movs	r3, #0
   1ca0c:	e00d      	b.n	1ca2a <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1ca0e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ca12:	d0f7      	beq.n	1ca04 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1ca14:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1ca18:	d1f4      	bne.n	1ca04 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1ca1a:	3407      	adds	r4, #7
   1ca1c:	f024 0307 	bic.w	r3, r4, #7
   1ca20:	461c      	mov	r4, r3
   1ca22:	f854 2b08 	ldr.w	r2, [r4], #8
   1ca26:	685b      	ldr	r3, [r3, #4]
   1ca28:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1ca2a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1ca2c:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1ca2e:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1ca32:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1ca34:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1ca36:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1ca3a:	9804      	ldr	r0, [sp, #16]
   1ca3c:	f1cb 0c20 	rsb	ip, fp, #32
   1ca40:	f1ab 0120 	sub.w	r1, fp, #32
   1ca44:	fa20 f00b 	lsr.w	r0, r0, fp
   1ca48:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ca4c:	ea40 000c 	orr.w	r0, r0, ip
   1ca50:	fa23 f101 	lsr.w	r1, r3, r1
   1ca54:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1ca56:	f010 000f 	ands.w	r0, r0, #15
   1ca5a:	d106      	bne.n	1ca6a <z_vprintk+0x246>
   1ca5c:	9905      	ldr	r1, [sp, #20]
   1ca5e:	b911      	cbnz	r1, 1ca66 <z_vprintk+0x242>
   1ca60:	f1bb 0f00 	cmp.w	fp, #0
   1ca64:	d122      	bne.n	1caac <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1ca66:	2130      	movs	r1, #48	; 0x30
   1ca68:	e003      	b.n	1ca72 <z_vprintk+0x24e>
   1ca6a:	2809      	cmp	r0, #9
   1ca6c:	bf8c      	ite	hi
   1ca6e:	2157      	movhi	r1, #87	; 0x57
   1ca70:	2130      	movls	r1, #48	; 0x30
   1ca72:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1ca74:	b240      	sxtb	r0, r0
   1ca76:	4639      	mov	r1, r7
   1ca78:	9308      	str	r3, [sp, #32]
   1ca7a:	9205      	str	r2, [sp, #20]
   1ca7c:	47b0      	blx	r6
			digits++;
   1ca7e:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1ca80:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1ca82:	3301      	adds	r3, #1
   1ca84:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1ca86:	9b08      	ldr	r3, [sp, #32]
   1ca88:	f1bb 0f00 	cmp.w	fp, #0
   1ca8c:	d123      	bne.n	1cad6 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1ca8e:	f1b9 0f03 	cmp.w	r9, #3
   1ca92:	f47f aed4 	bne.w	1c83e <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1ca96:	9b03      	ldr	r3, [sp, #12]
   1ca98:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1ca9c:	2d00      	cmp	r5, #0
   1ca9e:	f77f aece 	ble.w	1c83e <z_vprintk+0x1a>
			out(' ', ctx);
   1caa2:	4639      	mov	r1, r7
   1caa4:	2020      	movs	r0, #32
   1caa6:	47b0      	blx	r6
   1caa8:	3d01      	subs	r5, #1
   1caaa:	e7f7      	b.n	1ca9c <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1caac:	1e51      	subs	r1, r2, #1
   1caae:	4592      	cmp	sl, r2
   1cab0:	9108      	str	r1, [sp, #32]
   1cab2:	db07      	blt.n	1cac4 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1cab4:	f1b9 0f01 	cmp.w	r9, #1
   1cab8:	d106      	bne.n	1cac8 <z_vprintk+0x2a4>
				out('0', ctx);
   1caba:	4639      	mov	r1, r7
   1cabc:	2030      	movs	r0, #48	; 0x30
   1cabe:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1cac0:	47b0      	blx	r6
   1cac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1cac4:	9a08      	ldr	r2, [sp, #32]
   1cac6:	e7b6      	b.n	1ca36 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1cac8:	f1b9 0f02 	cmp.w	r9, #2
   1cacc:	d1fa      	bne.n	1cac4 <z_vprintk+0x2a0>
   1cace:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1cad0:	4639      	mov	r1, r7
   1cad2:	2020      	movs	r0, #32
   1cad4:	e7f4      	b.n	1cac0 <z_vprintk+0x29c>
			found_largest_digit = 1;
   1cad6:	9505      	str	r5, [sp, #20]
   1cad8:	e7ad      	b.n	1ca36 <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1cada:	4639      	mov	r1, r7
   1cadc:	47b0      	blx	r6
   1cade:	e6fb      	b.n	1c8d8 <z_vprintk+0xb4>
				out(c, ctx);
   1cae0:	4639      	mov	r1, r7
   1cae2:	f854 0b04 	ldr.w	r0, [r4], #4
   1cae6:	e6d7      	b.n	1c898 <z_vprintk+0x74>
				length_mod = 0;
   1cae8:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1caea:	46a9      	mov	r9, r5
				min_width = -1;
   1caec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1caf0:	2501      	movs	r5, #1
   1caf2:	e6ac      	b.n	1c84e <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1caf4:	f04f 0903 	mov.w	r9, #3
   1caf8:	e6a9      	b.n	1c84e <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1cafa:	f04f 0901 	mov.w	r9, #1
   1cafe:	e6a6      	b.n	1c84e <z_vprintk+0x2a>
			might_format = 0;
   1cb00:	4605      	mov	r5, r0
		++fmt;
   1cb02:	e6a4      	b.n	1c84e <z_vprintk+0x2a>

0001cb04 <printk>:
{
   1cb04:	b40f      	push	{r0, r1, r2, r3}
   1cb06:	b507      	push	{r0, r1, r2, lr}
   1cb08:	a904      	add	r1, sp, #16
   1cb0a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1cb0e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1cb10:	f7f2 f83e 	bl	eb90 <vprintk>
}
   1cb14:	b003      	add	sp, #12
   1cb16:	f85d eb04 	ldr.w	lr, [sp], #4
   1cb1a:	b004      	add	sp, #16
   1cb1c:	4770      	bx	lr

0001cb1e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   1cb1e:	4770      	bx	lr

0001cb20 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1cb20:	f7fe b90c 	b.w	1ad3c <SystemInit>

0001cb24 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1cb24:	2300      	movs	r3, #0
	list->head = NULL;
   1cb26:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cb2a:	4770      	bx	lr

0001cb2c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1cb2c:	6803      	ldr	r3, [r0, #0]
   1cb2e:	b923      	cbnz	r3, 1cb3a <log_list_add_tail+0xe>
		list->head = msg;
   1cb30:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1cb32:	2300      	movs	r3, #0
	list->tail = msg;
   1cb34:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1cb36:	600b      	str	r3, [r1, #0]
}
   1cb38:	4770      	bx	lr
		list->tail->next = msg;
   1cb3a:	6843      	ldr	r3, [r0, #4]
   1cb3c:	6019      	str	r1, [r3, #0]
   1cb3e:	e7f8      	b.n	1cb32 <log_list_add_tail+0x6>

0001cb40 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1cb40:	6800      	ldr	r0, [r0, #0]
   1cb42:	4770      	bx	lr

0001cb44 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1cb44:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1cb46:	b10b      	cbz	r3, 1cb4c <log_list_head_get+0x8>
		list->head = list->head->next;
   1cb48:	681a      	ldr	r2, [r3, #0]
   1cb4a:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1cb4c:	4618      	mov	r0, r3
   1cb4e:	4770      	bx	lr

0001cb50 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1cb50:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cb52:	f7f2 fa73 	bl	f03c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1cb56:	b118      	cbz	r0, 1cb60 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1cb58:	2301      	movs	r3, #1
   1cb5a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1cb5c:	2300      	movs	r3, #0
   1cb5e:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1cb60:	bd08      	pop	{r3, pc}

0001cb62 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1cb62:	f7f2 bdff 	b.w	f764 <z_timer_cycle_get_32>

0001cb66 <dummy_timestamp>:
   1cb66:	2000      	movs	r0, #0
   1cb68:	4770      	bx	lr

0001cb6a <log_0>:
{
   1cb6a:	b538      	push	{r3, r4, r5, lr}
   1cb6c:	4605      	mov	r5, r0
   1cb6e:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1cb70:	f7ff ffee 	bl	1cb50 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb74:	b128      	cbz	r0, 1cb82 <log_0+0x18>
		msg->str = str;
   1cb76:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1cb78:	4621      	mov	r1, r4
}
   1cb7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1cb7e:	f7f2 b8ed 	b.w	ed5c <msg_finalize>
}
   1cb82:	bd38      	pop	{r3, r4, r5, pc}

0001cb84 <log_1>:
{
   1cb84:	b570      	push	{r4, r5, r6, lr}
   1cb86:	4604      	mov	r4, r0
   1cb88:	460e      	mov	r6, r1
   1cb8a:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cb8c:	f7ff ffe0 	bl	1cb50 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cb90:	b158      	cbz	r0, 1cbaa <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1cb92:	2201      	movs	r2, #1
		msg->str = str;
   1cb94:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1cb96:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1cb98:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1cb9a:	f362 1407 	bfi	r4, r2, #4, #4
   1cb9e:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1cba0:	4629      	mov	r1, r5
}
   1cba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1cba6:	f7f2 b8d9 	b.w	ed5c <msg_finalize>
}
   1cbaa:	bd70      	pop	{r4, r5, r6, pc}

0001cbac <log_2>:
{
   1cbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbb0:	4605      	mov	r5, r0
   1cbb2:	4688      	mov	r8, r1
   1cbb4:	4617      	mov	r7, r2
   1cbb6:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cbb8:	f7ff ffca 	bl	1cb50 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cbbc:	b160      	cbz	r0, 1cbd8 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1cbbe:	2302      	movs	r3, #2
		msg->str = str;
   1cbc0:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1cbc2:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cbc4:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1cbc8:	f363 1507 	bfi	r5, r3, #4, #4
   1cbcc:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1cbce:	4631      	mov	r1, r6
}
   1cbd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1cbd4:	f7f2 b8c2 	b.w	ed5c <msg_finalize>
}
   1cbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cbdc <log_3>:
{
   1cbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cbe0:	4605      	mov	r5, r0
   1cbe2:	4689      	mov	r9, r1
   1cbe4:	4690      	mov	r8, r2
   1cbe6:	461f      	mov	r7, r3
   1cbe8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cbec:	f7ff ffb0 	bl	1cb50 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cbf0:	b168      	cbz	r0, 1cc0e <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1cbf2:	2303      	movs	r3, #3
		msg->str = str;
   1cbf4:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1cbf6:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cbf8:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1cbfc:	f363 1507 	bfi	r5, r3, #4, #4
   1cc00:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   1cc02:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   1cc04:	4631      	mov	r1, r6
}
   1cc06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1cc0a:	f7f2 b8a7 	b.w	ed5c <msg_finalize>
}
   1cc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cc12 <log_n>:
{
   1cc12:	b510      	push	{r4, lr}
   1cc14:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1cc16:	f000 f893 	bl	1cd40 <log_msg_create_n>
		if (msg == NULL) {
   1cc1a:	b120      	cbz	r0, 1cc26 <log_n+0x14>
		msg_finalize(msg, src_level);
   1cc1c:	4621      	mov	r1, r4
}
   1cc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1cc22:	f7f2 b89b 	b.w	ed5c <msg_finalize>
}
   1cc26:	bd10      	pop	{r4, pc}

0001cc28 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1cc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc2c:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1cc2e:	8903      	ldrh	r3, [r0, #8]
{
   1cc30:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   1cc32:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1cc34:	42a3      	cmp	r3, r4
{
   1cc36:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1cc3a:	d803      	bhi.n	1cc44 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   1cc3c:	2300      	movs	r3, #0
   1cc3e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1cc40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1cc44:	6811      	ldr	r1, [r2, #0]
   1cc46:	4421      	add	r1, r4
   1cc48:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1cc4a:	bf84      	itt	hi
   1cc4c:	1b19      	subhi	r1, r3, r4
   1cc4e:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cc50:	2b0c      	cmp	r3, #12
	req_len = *length;
   1cc52:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cc56:	d928      	bls.n	1ccaa <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1cc58:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1cc5a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1cc5e:	d82b      	bhi.n	1ccb8 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1cc60:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1cc62:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cc64:	454b      	cmp	r3, r9
   1cc66:	bf28      	it	cs
   1cc68:	464b      	movcs	r3, r9
   1cc6a:	4420      	add	r0, r4
   1cc6c:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cc6e:	461a      	mov	r2, r3
		if (put_op) {
   1cc70:	b1ff      	cbz	r7, 1ccb2 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cc72:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1cc74:	f000 fcef 	bl	1d656 <memcpy>
		req_len -= cpy_len;
   1cc78:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1cc7c:	442e      	add	r6, r5
	while (req_len > 0) {
   1cc7e:	f1b9 0f00 	cmp.w	r9, #0
   1cc82:	d0dd      	beq.n	1cc40 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1cc84:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cc88:	454d      	cmp	r5, r9
   1cc8a:	bf28      	it	cs
   1cc8c:	464d      	movcs	r5, r9
		if (put_op) {
   1cc8e:	1d20      	adds	r0, r4, #4
   1cc90:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1cc92:	462a      	mov	r2, r5
		if (put_op) {
   1cc94:	b1bf      	cbz	r7, 1ccc6 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   1cc96:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1cc98:	f000 fcdd 	bl	1d656 <memcpy>
		req_len -= cpy_len;
   1cc9c:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1cca0:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1cca4:	442e      	add	r6, r5
		offset = 0;
   1cca6:	2400      	movs	r4, #0
   1cca8:	e7e9      	b.n	1cc7e <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1ccaa:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1ccac:	f04f 0800 	mov.w	r8, #0
   1ccb0:	e7d8      	b.n	1cc64 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1ccb2:	4601      	mov	r1, r0
   1ccb4:	4630      	mov	r0, r6
   1ccb6:	e7dd      	b.n	1cc74 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1ccb8:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1ccba:	2c1b      	cmp	r4, #27
   1ccbc:	d9df      	bls.n	1cc7e <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1ccbe:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1ccc2:	3c1c      	subs	r4, #28
   1ccc4:	e7f9      	b.n	1ccba <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1ccc6:	4601      	mov	r1, r0
   1ccc8:	4630      	mov	r0, r6
   1ccca:	e7e5      	b.n	1cc98 <log_msg_hexdump_data_op+0x70>

0001cccc <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cccc:	3004      	adds	r0, #4
   1ccce:	e8d0 3fef 	ldaex	r3, [r0]
   1ccd2:	3301      	adds	r3, #1
   1ccd4:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ccd8:	2a00      	cmp	r2, #0
   1ccda:	d1f8      	bne.n	1ccce <log_msg_get+0x2>
}
   1ccdc:	4770      	bx	lr

0001ccde <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1ccde:	7a40      	ldrb	r0, [r0, #9]
}
   1cce0:	0900      	lsrs	r0, r0, #4
   1cce2:	4770      	bx	lr

0001cce4 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1cce4:	7a43      	ldrb	r3, [r0, #9]
   1cce6:	091b      	lsrs	r3, r3, #4
   1cce8:	428b      	cmp	r3, r1
   1ccea:	d916      	bls.n	1cd1a <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ccec:	2b03      	cmp	r3, #3
   1ccee:	d803      	bhi.n	1ccf8 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1ccf0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ccf4:	6948      	ldr	r0, [r1, #20]
   1ccf6:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1ccf8:	2901      	cmp	r1, #1
   1ccfa:	d803      	bhi.n	1cd04 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1ccfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1cd00:	6988      	ldr	r0, [r1, #24]
   1cd02:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1cd04:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cd06:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1cd08:	2906      	cmp	r1, #6
   1cd0a:	d803      	bhi.n	1cd14 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1cd0c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1cd10:	6848      	ldr	r0, [r1, #4]
   1cd12:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1cd14:	3907      	subs	r1, #7
		cont = cont->next;
   1cd16:	681b      	ldr	r3, [r3, #0]
   1cd18:	e7f6      	b.n	1cd08 <log_msg_arg_get+0x24>
		return 0;
   1cd1a:	2000      	movs	r0, #0
}
   1cd1c:	4770      	bx	lr

0001cd1e <log_msg_put>:
{
   1cd1e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cd20:	1d02      	adds	r2, r0, #4
   1cd22:	e8d2 1fef 	ldaex	r1, [r2]
   1cd26:	3901      	subs	r1, #1
   1cd28:	e8c2 1fec 	stlex	ip, r1, [r2]
   1cd2c:	f1bc 0f00 	cmp.w	ip, #0
   1cd30:	d1f7      	bne.n	1cd22 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1cd32:	685b      	ldr	r3, [r3, #4]
   1cd34:	b90b      	cbnz	r3, 1cd3a <log_msg_put+0x1c>
		msg_free(msg);
   1cd36:	f7f2 b993 	b.w	f060 <msg_free>
}
   1cd3a:	4770      	bx	lr

0001cd3c <log_msg_str_get>:
}
   1cd3c:	6900      	ldr	r0, [r0, #16]
   1cd3e:	4770      	bx	lr

0001cd40 <log_msg_create_n>:
{
   1cd40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd44:	4682      	mov	sl, r0
   1cd46:	4688      	mov	r8, r1
   1cd48:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cd4a:	f7f2 f977 	bl	f03c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1cd4e:	4604      	mov	r4, r0
   1cd50:	b330      	cbz	r0, 1cda0 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1cd52:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1cd54:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd56:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1cd58:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1cd5a:	8106      	strh	r6, [r0, #8]
   1cd5c:	d909      	bls.n	1cd72 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1cd5e:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cd60:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1cd64:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1cd66:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1cd6a:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1cd6c:	f1b9 0f00 	cmp.w	r9, #0
   1cd70:	dc0e      	bgt.n	1cd90 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1cd72:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd74:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1cd76:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1cd7a:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1cd7e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cd80:	d818      	bhi.n	1cdb4 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1cd82:	00aa      	lsls	r2, r5, #2
   1cd84:	4641      	mov	r1, r8
   1cd86:	f104 0014 	add.w	r0, r4, #20
   1cd8a:	f000 fc64 	bl	1d656 <memcpy>
		nargs  = 0U;
   1cd8e:	e007      	b.n	1cda0 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1cd90:	f7f2 f954 	bl	f03c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1cd94:	4607      	mov	r7, r0
   1cd96:	b930      	cbnz	r0, 1cda6 <log_msg_create_n+0x66>
			msg_free(msg);
   1cd98:	4620      	mov	r0, r4
   1cd9a:	f7f2 f961 	bl	f060 <msg_free>
			return NULL;
   1cd9e:	463c      	mov	r4, r7
}
   1cda0:	4620      	mov	r0, r4
   1cda2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1cda6:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1cdaa:	f1a9 0907 	sub.w	r9, r9, #7
   1cdae:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1cdb0:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1cdb2:	e7db      	b.n	1cd6c <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1cdb4:	4641      	mov	r1, r8
   1cdb6:	2208      	movs	r2, #8
   1cdb8:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1cdbc:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1cdbe:	f000 fc4a 	bl	1d656 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cdc2:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1cdc4:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1cdc8:	2d07      	cmp	r5, #7
   1cdca:	462e      	mov	r6, r5
   1cdcc:	bf28      	it	cs
   1cdce:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1cdd0:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1cdd4:	4641      	mov	r1, r8
   1cdd6:	1d38      	adds	r0, r7, #4
   1cdd8:	464a      	mov	r2, r9
   1cdda:	f000 fc3c 	bl	1d656 <memcpy>
	while (nargs != 0U) {
   1cdde:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1cde0:	44c8      	add	r8, r9
		cont = cont->next;
   1cde2:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1cde4:	d1f0      	bne.n	1cdc8 <log_msg_create_n+0x88>
   1cde6:	e7db      	b.n	1cda0 <log_msg_create_n+0x60>

0001cde8 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1cde8:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1cdea:	2400      	movs	r4, #0
   1cdec:	9400      	str	r4, [sp, #0]
   1cdee:	f7ff ff1b 	bl	1cc28 <log_msg_hexdump_data_op>
}
   1cdf2:	b002      	add	sp, #8
   1cdf4:	bd10      	pop	{r4, pc}

0001cdf6 <buffer_write>:
{
   1cdf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cdf8:	4606      	mov	r6, r0
   1cdfa:	460d      	mov	r5, r1
   1cdfc:	4614      	mov	r4, r2
   1cdfe:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ce00:	4621      	mov	r1, r4
   1ce02:	4628      	mov	r0, r5
   1ce04:	463a      	mov	r2, r7
   1ce06:	47b0      	blx	r6
	} while (len != 0);
   1ce08:	1a24      	subs	r4, r4, r0
		buf += processed;
   1ce0a:	4405      	add	r5, r0
	} while (len != 0);
   1ce0c:	d1f8      	bne.n	1ce00 <buffer_write+0xa>
}
   1ce0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ce10 <std_print>:
{
   1ce10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce14:	b08e      	sub	sp, #56	; 0x38
   1ce16:	af0e      	add	r7, sp, #56	; 0x38
   1ce18:	4681      	mov	r9, r0
   1ce1a:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1ce1c:	f7ff ff8e 	bl	1cd3c <log_msg_str_get>
   1ce20:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1ce22:	4648      	mov	r0, r9
   1ce24:	f7ff ff5b 	bl	1ccde <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1ce28:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1ce2c:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1ce2e:	0083      	lsls	r3, r0, #2
   1ce30:	3307      	adds	r3, #7
   1ce32:	f023 0307 	bic.w	r3, r3, #7
   1ce36:	ebad 0d03 	sub.w	sp, sp, r3
   1ce3a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1ce3c:	45d0      	cmp	r8, sl
   1ce3e:	d116      	bne.n	1ce6e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1ce40:	4648      	mov	r0, r9
   1ce42:	f7ff ff4c 	bl	1ccde <log_msg_nargs_get>
   1ce46:	280f      	cmp	r0, #15
   1ce48:	d81e      	bhi.n	1ce88 <std_print+0x78>
   1ce4a:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ce4e:	0019      	.short	0x0019
   1ce50:	00260020 	.word	0x00260020
   1ce54:	0036002d 	.word	0x0036002d
   1ce58:	004e0041 	.word	0x004e0041
   1ce5c:	006e005d 	.word	0x006e005d
   1ce60:	00960081 	.word	0x00960081
   1ce64:	00c600ad 	.word	0x00c600ad
   1ce68:	00fe00e1 	.word	0x00fe00e1
   1ce6c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1ce6e:	4641      	mov	r1, r8
   1ce70:	4648      	mov	r0, r9
   1ce72:	f7ff ff37 	bl	1cce4 <log_msg_arg_get>
   1ce76:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1ce7a:	f108 0801 	add.w	r8, r8, #1
   1ce7e:	e7dd      	b.n	1ce3c <std_print+0x2c>
		print_formatted(log_output, str);
   1ce80:	4631      	mov	r1, r6
   1ce82:	4628      	mov	r0, r5
   1ce84:	f7f2 f91e 	bl	f0c4 <print_formatted>
}
   1ce88:	46bd      	mov	sp, r7
   1ce8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1ce8e:	6822      	ldr	r2, [r4, #0]
   1ce90:	4631      	mov	r1, r6
   1ce92:	4628      	mov	r0, r5
   1ce94:	f7f2 f916 	bl	f0c4 <print_formatted>
		break;
   1ce98:	e7f6      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1ce9a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ce9e:	4631      	mov	r1, r6
   1cea0:	4628      	mov	r0, r5
   1cea2:	f7f2 f90f 	bl	f0c4 <print_formatted>
		break;
   1cea6:	e7ef      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1cea8:	68a3      	ldr	r3, [r4, #8]
   1ceaa:	4631      	mov	r1, r6
   1ceac:	9300      	str	r3, [sp, #0]
   1ceae:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ceb2:	4628      	mov	r0, r5
   1ceb4:	f7f2 f906 	bl	f0c4 <print_formatted>
		break;
   1ceb8:	e7e6      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ceba:	68e3      	ldr	r3, [r4, #12]
   1cebc:	4631      	mov	r1, r6
   1cebe:	9301      	str	r3, [sp, #4]
   1cec0:	68a3      	ldr	r3, [r4, #8]
   1cec2:	4628      	mov	r0, r5
   1cec4:	9300      	str	r3, [sp, #0]
   1cec6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ceca:	f7f2 f8fb 	bl	f0c4 <print_formatted>
		break;
   1cece:	e7db      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ced0:	6923      	ldr	r3, [r4, #16]
   1ced2:	4631      	mov	r1, r6
   1ced4:	9302      	str	r3, [sp, #8]
   1ced6:	68e3      	ldr	r3, [r4, #12]
   1ced8:	4628      	mov	r0, r5
   1ceda:	9301      	str	r3, [sp, #4]
   1cedc:	68a3      	ldr	r3, [r4, #8]
   1cede:	9300      	str	r3, [sp, #0]
   1cee0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cee4:	f7f2 f8ee 	bl	f0c4 <print_formatted>
		break;
   1cee8:	e7ce      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ceea:	6963      	ldr	r3, [r4, #20]
   1ceec:	4631      	mov	r1, r6
   1ceee:	9303      	str	r3, [sp, #12]
   1cef0:	6923      	ldr	r3, [r4, #16]
   1cef2:	4628      	mov	r0, r5
   1cef4:	9302      	str	r3, [sp, #8]
   1cef6:	68e3      	ldr	r3, [r4, #12]
   1cef8:	9301      	str	r3, [sp, #4]
   1cefa:	68a3      	ldr	r3, [r4, #8]
   1cefc:	9300      	str	r3, [sp, #0]
   1cefe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf02:	f7f2 f8df 	bl	f0c4 <print_formatted>
		break;
   1cf06:	e7bf      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf08:	69a3      	ldr	r3, [r4, #24]
   1cf0a:	4631      	mov	r1, r6
   1cf0c:	9304      	str	r3, [sp, #16]
   1cf0e:	6963      	ldr	r3, [r4, #20]
   1cf10:	4628      	mov	r0, r5
   1cf12:	9303      	str	r3, [sp, #12]
   1cf14:	6923      	ldr	r3, [r4, #16]
   1cf16:	9302      	str	r3, [sp, #8]
   1cf18:	68e3      	ldr	r3, [r4, #12]
   1cf1a:	9301      	str	r3, [sp, #4]
   1cf1c:	68a3      	ldr	r3, [r4, #8]
   1cf1e:	9300      	str	r3, [sp, #0]
   1cf20:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf24:	f7f2 f8ce 	bl	f0c4 <print_formatted>
		break;
   1cf28:	e7ae      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf2a:	69e3      	ldr	r3, [r4, #28]
   1cf2c:	4631      	mov	r1, r6
   1cf2e:	9305      	str	r3, [sp, #20]
   1cf30:	69a3      	ldr	r3, [r4, #24]
   1cf32:	4628      	mov	r0, r5
   1cf34:	9304      	str	r3, [sp, #16]
   1cf36:	6963      	ldr	r3, [r4, #20]
   1cf38:	9303      	str	r3, [sp, #12]
   1cf3a:	6923      	ldr	r3, [r4, #16]
   1cf3c:	9302      	str	r3, [sp, #8]
   1cf3e:	68e3      	ldr	r3, [r4, #12]
   1cf40:	9301      	str	r3, [sp, #4]
   1cf42:	68a3      	ldr	r3, [r4, #8]
   1cf44:	9300      	str	r3, [sp, #0]
   1cf46:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf4a:	f7f2 f8bb 	bl	f0c4 <print_formatted>
		break;
   1cf4e:	e79b      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf50:	6a23      	ldr	r3, [r4, #32]
   1cf52:	4631      	mov	r1, r6
   1cf54:	9306      	str	r3, [sp, #24]
   1cf56:	69e3      	ldr	r3, [r4, #28]
   1cf58:	4628      	mov	r0, r5
   1cf5a:	9305      	str	r3, [sp, #20]
   1cf5c:	69a3      	ldr	r3, [r4, #24]
   1cf5e:	9304      	str	r3, [sp, #16]
   1cf60:	6963      	ldr	r3, [r4, #20]
   1cf62:	9303      	str	r3, [sp, #12]
   1cf64:	6923      	ldr	r3, [r4, #16]
   1cf66:	9302      	str	r3, [sp, #8]
   1cf68:	68e3      	ldr	r3, [r4, #12]
   1cf6a:	9301      	str	r3, [sp, #4]
   1cf6c:	68a3      	ldr	r3, [r4, #8]
   1cf6e:	9300      	str	r3, [sp, #0]
   1cf70:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf74:	f7f2 f8a6 	bl	f0c4 <print_formatted>
		break;
   1cf78:	e786      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cf7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cf7c:	4631      	mov	r1, r6
   1cf7e:	9307      	str	r3, [sp, #28]
   1cf80:	6a23      	ldr	r3, [r4, #32]
   1cf82:	4628      	mov	r0, r5
   1cf84:	9306      	str	r3, [sp, #24]
   1cf86:	69e3      	ldr	r3, [r4, #28]
   1cf88:	9305      	str	r3, [sp, #20]
   1cf8a:	69a3      	ldr	r3, [r4, #24]
   1cf8c:	9304      	str	r3, [sp, #16]
   1cf8e:	6963      	ldr	r3, [r4, #20]
   1cf90:	9303      	str	r3, [sp, #12]
   1cf92:	6923      	ldr	r3, [r4, #16]
   1cf94:	9302      	str	r3, [sp, #8]
   1cf96:	68e3      	ldr	r3, [r4, #12]
   1cf98:	9301      	str	r3, [sp, #4]
   1cf9a:	68a3      	ldr	r3, [r4, #8]
   1cf9c:	9300      	str	r3, [sp, #0]
   1cf9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cfa2:	f7f2 f88f 	bl	f0c4 <print_formatted>
		break;
   1cfa6:	e76f      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cfa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cfaa:	4631      	mov	r1, r6
   1cfac:	9308      	str	r3, [sp, #32]
   1cfae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cfb0:	4628      	mov	r0, r5
   1cfb2:	9307      	str	r3, [sp, #28]
   1cfb4:	6a23      	ldr	r3, [r4, #32]
   1cfb6:	9306      	str	r3, [sp, #24]
   1cfb8:	69e3      	ldr	r3, [r4, #28]
   1cfba:	9305      	str	r3, [sp, #20]
   1cfbc:	69a3      	ldr	r3, [r4, #24]
   1cfbe:	9304      	str	r3, [sp, #16]
   1cfc0:	6963      	ldr	r3, [r4, #20]
   1cfc2:	9303      	str	r3, [sp, #12]
   1cfc4:	6923      	ldr	r3, [r4, #16]
   1cfc6:	9302      	str	r3, [sp, #8]
   1cfc8:	68e3      	ldr	r3, [r4, #12]
   1cfca:	9301      	str	r3, [sp, #4]
   1cfcc:	68a3      	ldr	r3, [r4, #8]
   1cfce:	9300      	str	r3, [sp, #0]
   1cfd0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cfd4:	f7f2 f876 	bl	f0c4 <print_formatted>
		break;
   1cfd8:	e756      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cfda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cfdc:	4631      	mov	r1, r6
   1cfde:	9309      	str	r3, [sp, #36]	; 0x24
   1cfe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cfe2:	4628      	mov	r0, r5
   1cfe4:	9308      	str	r3, [sp, #32]
   1cfe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cfe8:	9307      	str	r3, [sp, #28]
   1cfea:	6a23      	ldr	r3, [r4, #32]
   1cfec:	9306      	str	r3, [sp, #24]
   1cfee:	69e3      	ldr	r3, [r4, #28]
   1cff0:	9305      	str	r3, [sp, #20]
   1cff2:	69a3      	ldr	r3, [r4, #24]
   1cff4:	9304      	str	r3, [sp, #16]
   1cff6:	6963      	ldr	r3, [r4, #20]
   1cff8:	9303      	str	r3, [sp, #12]
   1cffa:	6923      	ldr	r3, [r4, #16]
   1cffc:	9302      	str	r3, [sp, #8]
   1cffe:	68e3      	ldr	r3, [r4, #12]
   1d000:	9301      	str	r3, [sp, #4]
   1d002:	68a3      	ldr	r3, [r4, #8]
   1d004:	9300      	str	r3, [sp, #0]
   1d006:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d00a:	f7f2 f85b 	bl	f0c4 <print_formatted>
		break;
   1d00e:	e73b      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d010:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d012:	4631      	mov	r1, r6
   1d014:	930a      	str	r3, [sp, #40]	; 0x28
   1d016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d018:	4628      	mov	r0, r5
   1d01a:	9309      	str	r3, [sp, #36]	; 0x24
   1d01c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d01e:	9308      	str	r3, [sp, #32]
   1d020:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d022:	9307      	str	r3, [sp, #28]
   1d024:	6a23      	ldr	r3, [r4, #32]
   1d026:	9306      	str	r3, [sp, #24]
   1d028:	69e3      	ldr	r3, [r4, #28]
   1d02a:	9305      	str	r3, [sp, #20]
   1d02c:	69a3      	ldr	r3, [r4, #24]
   1d02e:	9304      	str	r3, [sp, #16]
   1d030:	6963      	ldr	r3, [r4, #20]
   1d032:	9303      	str	r3, [sp, #12]
   1d034:	6923      	ldr	r3, [r4, #16]
   1d036:	9302      	str	r3, [sp, #8]
   1d038:	68e3      	ldr	r3, [r4, #12]
   1d03a:	9301      	str	r3, [sp, #4]
   1d03c:	68a3      	ldr	r3, [r4, #8]
   1d03e:	9300      	str	r3, [sp, #0]
   1d040:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d044:	f7f2 f83e 	bl	f0c4 <print_formatted>
		break;
   1d048:	e71e      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d04a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d04c:	4631      	mov	r1, r6
   1d04e:	930b      	str	r3, [sp, #44]	; 0x2c
   1d050:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d052:	4628      	mov	r0, r5
   1d054:	930a      	str	r3, [sp, #40]	; 0x28
   1d056:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d058:	9309      	str	r3, [sp, #36]	; 0x24
   1d05a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d05c:	9308      	str	r3, [sp, #32]
   1d05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d060:	9307      	str	r3, [sp, #28]
   1d062:	6a23      	ldr	r3, [r4, #32]
   1d064:	9306      	str	r3, [sp, #24]
   1d066:	69e3      	ldr	r3, [r4, #28]
   1d068:	9305      	str	r3, [sp, #20]
   1d06a:	69a3      	ldr	r3, [r4, #24]
   1d06c:	9304      	str	r3, [sp, #16]
   1d06e:	6963      	ldr	r3, [r4, #20]
   1d070:	9303      	str	r3, [sp, #12]
   1d072:	6923      	ldr	r3, [r4, #16]
   1d074:	9302      	str	r3, [sp, #8]
   1d076:	68e3      	ldr	r3, [r4, #12]
   1d078:	9301      	str	r3, [sp, #4]
   1d07a:	68a3      	ldr	r3, [r4, #8]
   1d07c:	9300      	str	r3, [sp, #0]
   1d07e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d082:	f7f2 f81f 	bl	f0c4 <print_formatted>
		break;
   1d086:	e6ff      	b.n	1ce88 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d08a:	4631      	mov	r1, r6
   1d08c:	930c      	str	r3, [sp, #48]	; 0x30
   1d08e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d090:	4628      	mov	r0, r5
   1d092:	930b      	str	r3, [sp, #44]	; 0x2c
   1d094:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d096:	930a      	str	r3, [sp, #40]	; 0x28
   1d098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d09a:	9309      	str	r3, [sp, #36]	; 0x24
   1d09c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d09e:	9308      	str	r3, [sp, #32]
   1d0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0a2:	9307      	str	r3, [sp, #28]
   1d0a4:	6a23      	ldr	r3, [r4, #32]
   1d0a6:	9306      	str	r3, [sp, #24]
   1d0a8:	69e3      	ldr	r3, [r4, #28]
   1d0aa:	9305      	str	r3, [sp, #20]
   1d0ac:	69a3      	ldr	r3, [r4, #24]
   1d0ae:	9304      	str	r3, [sp, #16]
   1d0b0:	6963      	ldr	r3, [r4, #20]
   1d0b2:	9303      	str	r3, [sp, #12]
   1d0b4:	6923      	ldr	r3, [r4, #16]
   1d0b6:	9302      	str	r3, [sp, #8]
   1d0b8:	68e3      	ldr	r3, [r4, #12]
   1d0ba:	9301      	str	r3, [sp, #4]
   1d0bc:	68a3      	ldr	r3, [r4, #8]
   1d0be:	9300      	str	r3, [sp, #0]
   1d0c0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d0c4:	f7f1 fffe 	bl	f0c4 <print_formatted>
}
   1d0c8:	e6de      	b.n	1ce88 <std_print+0x78>

0001d0ca <log_output_flush>:
		     log_output->control_block->offset,
   1d0ca:	6842      	ldr	r2, [r0, #4]
{
   1d0cc:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1d0ce:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1d0d2:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1d0d4:	6881      	ldr	r1, [r0, #8]
   1d0d6:	6800      	ldr	r0, [r0, #0]
   1d0d8:	f7ff fe8d 	bl	1cdf6 <buffer_write>
	log_output->control_block->offset = 0;
   1d0dc:	2200      	movs	r2, #0
   1d0de:	6863      	ldr	r3, [r4, #4]
   1d0e0:	601a      	str	r2, [r3, #0]
}
   1d0e2:	bd10      	pop	{r4, pc}

0001d0e4 <out_func>:
{
   1d0e4:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1d0e6:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1d0ea:	681b      	ldr	r3, [r3, #0]
   1d0ec:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1d0ee:	684a      	ldr	r2, [r1, #4]
   1d0f0:	6813      	ldr	r3, [r2, #0]
   1d0f2:	3301      	adds	r3, #1
   1d0f4:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   1d0f6:	68ca      	ldr	r2, [r1, #12]
   1d0f8:	4293      	cmp	r3, r2
   1d0fa:	d102      	bne.n	1d102 <out_func+0x1e>
		log_output_flush(out_ctx);
   1d0fc:	4608      	mov	r0, r1
   1d0fe:	f7ff ffe4 	bl	1d0ca <log_output_flush>
}
   1d102:	2000      	movs	r0, #0
   1d104:	bd08      	pop	{r3, pc}

0001d106 <char_out>:
{
   1d106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d108:	460d      	mov	r5, r1
   1d10a:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1d10c:	4604      	mov	r4, r0
   1d10e:	1847      	adds	r7, r0, r1
   1d110:	42bc      	cmp	r4, r7
   1d112:	d101      	bne.n	1d118 <char_out+0x12>
}
   1d114:	4628      	mov	r0, r5
   1d116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1d118:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1d11c:	6873      	ldr	r3, [r6, #4]
   1d11e:	4630      	mov	r0, r6
   1d120:	685b      	ldr	r3, [r3, #4]
   1d122:	4798      	blx	r3
   1d124:	e7f4      	b.n	1d110 <char_out+0xa>

0001d126 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   1d126:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   1d128:	7a5a      	ldrb	r2, [r3, #9]
   1d12a:	b932      	cbnz	r2, 1d13a <get_status+0x14>
	if (data->ref > 0) {
   1d12c:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1d130:	2800      	cmp	r0, #0
   1d132:	bfcc      	ite	gt
   1d134:	2000      	movgt	r0, #0
   1d136:	2001      	movle	r0, #1
   1d138:	4770      	bx	lr
   1d13a:	2002      	movs	r0, #2
}
   1d13c:	4770      	bx	lr

0001d13e <clock_stop>:
	const struct nrf_clock_control_config *config =
   1d13e:	6802      	ldr	r2, [r0, #0]
{
   1d140:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   1d142:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   1d144:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   1d146:	f04f 0320 	mov.w	r3, #32
   1d14a:	f3ef 8511 	mrs	r5, BASEPRI
   1d14e:	f383 8811 	msr	BASEPRI, r3
   1d152:	f3bf 8f6f 	isb	sy
	data->ref--;
   1d156:	7a23      	ldrb	r3, [r4, #8]
   1d158:	3b01      	subs	r3, #1
   1d15a:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   1d15c:	2b00      	cmp	r3, #0
	data->ref--;
   1d15e:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   1d160:	d11c      	bne.n	1d19c <clock_stop+0x5e>
	list->tail = NULL;
   1d162:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   1d166:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   1d168:	b9a3      	cbnz	r3, 1d194 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d16a:	2201      	movs	r2, #1
   1d16c:	7af3      	ldrb	r3, [r6, #11]
   1d16e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d172:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d176:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d178:	2200      	movs	r2, #0
   1d17a:	8933      	ldrh	r3, [r6, #8]
   1d17c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d180:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d184:	601a      	str	r2, [r3, #0]
		data->started = false;
   1d186:	2000      	movs	r0, #0
   1d188:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1d18a:	f385 8811 	msr	BASEPRI, r5
   1d18e:	f3bf 8f6f 	isb	sy
}
   1d192:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   1d194:	4798      	blx	r3
   1d196:	2800      	cmp	r0, #0
   1d198:	d1e7      	bne.n	1d16a <clock_stop+0x2c>
   1d19a:	e7f4      	b.n	1d186 <clock_stop+0x48>
	} else if (data->ref < 0) {
   1d19c:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   1d1a0:	bfbc      	itt	lt
   1d1a2:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   1d1a4:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   1d1a8:	e7ef      	b.n	1d18a <clock_stop+0x4c>

0001d1aa <clock_async_start>:
{
   1d1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1d1ac:	6803      	ldr	r3, [r0, #0]
{
   1d1ae:	4606      	mov	r6, r0
   1d1b0:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   1d1b2:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1d1b4:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   1d1b6:	f04f 0320 	mov.w	r3, #32
   1d1ba:	f3ef 8211 	mrs	r2, BASEPRI
   1d1be:	f383 8811 	msr	BASEPRI, r3
   1d1c2:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1d1c6:	7a2b      	ldrb	r3, [r5, #8]
   1d1c8:	3301      	adds	r3, #1
   1d1ca:	b25b      	sxtb	r3, r3
   1d1cc:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1d1ce:	f382 8811 	msr	BASEPRI, r2
   1d1d2:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1d1d6:	7a6a      	ldrb	r2, [r5, #9]
   1d1d8:	b132      	cbz	r2, 1d1e8 <clock_async_start+0x3e>
		if (data) {
   1d1da:	b90c      	cbnz	r4, 1d1e0 <clock_async_start+0x36>
	return 0;
   1d1dc:	2000      	movs	r0, #0
}
   1d1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1d1e0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1d1e4:	4798      	blx	r3
   1d1e6:	e7f9      	b.n	1d1dc <clock_async_start+0x32>
		if (ref == 1) {
   1d1e8:	2b01      	cmp	r3, #1
   1d1ea:	d108      	bne.n	1d1fe <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   1d1ec:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1d1ee:	b943      	cbnz	r3, 1d202 <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d1f0:	2201      	movs	r2, #1
   1d1f2:	7abb      	ldrb	r3, [r7, #10]
   1d1f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d1f8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1d1fc:	601a      	str	r2, [r3, #0]
		if (data) {
   1d1fe:	b94c      	cbnz	r4, 1d214 <clock_async_start+0x6a>
   1d200:	e7ec      	b.n	1d1dc <clock_async_start+0x32>
					config->start_handler(dev) : true;
   1d202:	4798      	blx	r3
   1d204:	2800      	cmp	r0, #0
   1d206:	d1f3      	bne.n	1d1f0 <clock_async_start+0x46>
			} else if (data) {
   1d208:	2c00      	cmp	r4, #0
   1d20a:	d0e7      	beq.n	1d1dc <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   1d20c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1d210:	4630      	mov	r0, r6
   1d212:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1d214:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1d216:	429c      	cmp	r4, r3
   1d218:	d00d      	beq.n	1d236 <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d21a:	b113      	cbz	r3, 1d222 <clock_async_start+0x78>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d21c:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1d21e:	2b00      	cmp	r3, #0
   1d220:	d1f9      	bne.n	1d216 <clock_async_start+0x6c>
	parent->next = child;
   1d222:	2000      	movs	r0, #0
   1d224:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d226:	686b      	ldr	r3, [r5, #4]
   1d228:	b913      	cbnz	r3, 1d230 <clock_async_start+0x86>
	list->head = node;
   1d22a:	e9c5 4400 	strd	r4, r4, [r5]
   1d22e:	e7d5      	b.n	1d1dc <clock_async_start+0x32>
	parent->next = child;
   1d230:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d232:	606c      	str	r4, [r5, #4]
   1d234:	e7d3      	b.n	1d1de <clock_async_start+0x34>
				return -EALREADY;
   1d236:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d23a:	e7d0      	b.n	1d1de <clock_async_start+0x34>

0001d23c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1d23c:	2200      	movs	r2, #0
   1d23e:	f7ff bfb4 	b.w	1d1aa <clock_async_start>

0001d242 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1d242:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   1d244:	2000      	movs	r0, #0
	list->tail = NULL;
   1d246:	e9c3 0000 	strd	r0, r0, [r3]
}
   1d24a:	4770      	bx	lr

0001d24c <clkstarted_handle>:
{
   1d24c:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   1d24e:	6884      	ldr	r4, [r0, #8]
{
   1d250:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   1d252:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d254:	b12b      	cbz	r3, 1d262 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d256:	6861      	ldr	r1, [r4, #4]
   1d258:	681a      	ldr	r2, [r3, #0]
   1d25a:	428b      	cmp	r3, r1
	list->head = node;
   1d25c:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1d25e:	bf08      	it	eq
   1d260:	6062      	streq	r2, [r4, #4]
	data->started = true;
   1d262:	2201      	movs	r2, #1
   1d264:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   1d266:	b903      	cbnz	r3, 1d26a <clkstarted_handle+0x1e>
}
   1d268:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1d26a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1d26e:	4628      	mov	r0, r5
   1d270:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   1d272:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d274:	2b00      	cmp	r3, #0
   1d276:	d0f7      	beq.n	1d268 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d278:	6861      	ldr	r1, [r4, #4]
   1d27a:	681a      	ldr	r2, [r3, #0]
   1d27c:	428b      	cmp	r3, r1
	list->head = node;
   1d27e:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1d280:	bf08      	it	eq
   1d282:	6062      	streq	r2, [r4, #4]
   1d284:	e7ef      	b.n	1d266 <clkstarted_handle+0x1a>

0001d286 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d286:	4770      	bx	lr

0001d288 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1d288:	4770      	bx	lr

0001d28a <z_irq_spurious>:
	z_arm_reserved();
   1d28a:	f7f2 bbab 	b.w	f9e4 <z_arm_bus_fault>

0001d28e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d28e:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1d290:	6800      	ldr	r0, [r0, #0]
   1d292:	f7f2 bbb1 	b.w	f9f8 <z_arm_fatal_error>

0001d296 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d296:	b508      	push	{r3, lr}
	handler();
   1d298:	f7f2 fc48 	bl	fb2c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1d29c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1d2a0:	f7f2 ba7a 	b.w	f798 <z_arm_exc_exit>

0001d2a4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1d2a4:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1d2a6:	2100      	movs	r1, #0
   1d2a8:	a801      	add	r0, sp, #4
   1d2aa:	f7f3 f953 	bl	10554 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1d2ae:	b003      	add	sp, #12
   1d2b0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d2b4 <mpu_configure_region>:
{
   1d2b4:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1d2b6:	684b      	ldr	r3, [r1, #4]
{
   1d2b8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1d2ba:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1d2bc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1d2c0:	890d      	ldrh	r5, [r1, #8]
   1d2c2:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1d2c4:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d2c6:	f024 041f 	bic.w	r4, r4, #31
   1d2ca:	3b01      	subs	r3, #1
   1d2cc:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1d2ce:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1d2d2:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d2d6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1d2da:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1d2dc:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d2e0:	9303      	str	r3, [sp, #12]
   1d2e2:	4604      	mov	r4, r0
   1d2e4:	d905      	bls.n	1d2f2 <mpu_configure_region+0x3e>
   1d2e6:	f7f2 ffb7 	bl	10258 <region_allocate_and_init.part.0>
   1d2ea:	4604      	mov	r4, r0
}
   1d2ec:	4620      	mov	r0, r4
   1d2ee:	b005      	add	sp, #20
   1d2f0:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1d2f2:	4669      	mov	r1, sp
   1d2f4:	f7f2 ff98 	bl	10228 <region_init>
	return region_allocate_and_init(index,
   1d2f8:	e7f8      	b.n	1d2ec <mpu_configure_region+0x38>

0001d2fa <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1d2fa:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1d2fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d302:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1d304:	bf08      	it	eq
   1d306:	f06f 0015 	mvneq.w	r0, #21
   1d30a:	4770      	bx	lr

0001d30c <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1d30c:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1d30e:	7802      	ldrb	r2, [r0, #0]
   1d310:	4603      	mov	r3, r0
   1d312:	2a20      	cmp	r2, #32
   1d314:	f100 0001 	add.w	r0, r0, #1
   1d318:	d0f9      	beq.n	1d30e <atoi+0x2>
   1d31a:	f1a2 0109 	sub.w	r1, r2, #9
   1d31e:	2904      	cmp	r1, #4
   1d320:	d9f5      	bls.n	1d30e <atoi+0x2>
		s++;
	}
	switch (*s) {
   1d322:	2a2b      	cmp	r2, #43	; 0x2b
   1d324:	d008      	beq.n	1d338 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1d326:	2a2d      	cmp	r2, #45	; 0x2d
   1d328:	bf0a      	itet	eq
   1d32a:	4603      	moveq	r3, r0
   1d32c:	2100      	movne	r1, #0
   1d32e:	2101      	moveq	r1, #1
   1d330:	3b01      	subs	r3, #1
	int neg = 0;
   1d332:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1d334:	250a      	movs	r5, #10
   1d336:	e006      	b.n	1d346 <atoi+0x3a>
		s++;
   1d338:	4603      	mov	r3, r0
	int neg = 0;
   1d33a:	2100      	movs	r1, #0
   1d33c:	e7f8      	b.n	1d330 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1d33e:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1d342:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1d346:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d34a:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1d34e:	2c09      	cmp	r4, #9
   1d350:	d9f5      	bls.n	1d33e <atoi+0x32>
	}
	return neg ? n : -n;
   1d352:	b901      	cbnz	r1, 1d356 <atoi+0x4a>
   1d354:	4240      	negs	r0, r0
}
   1d356:	bd30      	pop	{r4, r5, pc}

0001d358 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1d358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d35c:	4684      	mov	ip, r0
   1d35e:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d360:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1d362:	462c      	mov	r4, r5
   1d364:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d368:	2b20      	cmp	r3, #32
   1d36a:	d036      	beq.n	1d3da <strtol+0x82>
   1d36c:	f1a3 0109 	sub.w	r1, r3, #9
   1d370:	2904      	cmp	r1, #4
   1d372:	d932      	bls.n	1d3da <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1d374:	2b2d      	cmp	r3, #45	; 0x2d
   1d376:	d132      	bne.n	1d3de <strtol+0x86>
		neg = 1;
   1d378:	2101      	movs	r1, #1
		c = *s++;
   1d37a:	786b      	ldrb	r3, [r5, #1]
   1d37c:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d37e:	2a00      	cmp	r2, #0
   1d380:	d05c      	beq.n	1d43c <strtol+0xe4>
   1d382:	2a10      	cmp	r2, #16
   1d384:	d109      	bne.n	1d39a <strtol+0x42>
   1d386:	2b30      	cmp	r3, #48	; 0x30
   1d388:	d107      	bne.n	1d39a <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d38a:	7823      	ldrb	r3, [r4, #0]
   1d38c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d390:	2b58      	cmp	r3, #88	; 0x58
   1d392:	d14e      	bne.n	1d432 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1d394:	2210      	movs	r2, #16
		c = s[1];
   1d396:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d398:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1d39a:	2900      	cmp	r1, #0
   1d39c:	bf14      	ite	ne
   1d39e:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1d3a2:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d3a6:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1d3a8:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1d3ac:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1d3ae:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d3b2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d3b6:	2d09      	cmp	r5, #9
   1d3b8:	d817      	bhi.n	1d3ea <strtol+0x92>
			c -= '0';
   1d3ba:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d3bc:	429a      	cmp	r2, r3
   1d3be:	dd24      	ble.n	1d40a <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d3c0:	1c75      	adds	r5, r6, #1
   1d3c2:	d007      	beq.n	1d3d4 <strtol+0x7c>
   1d3c4:	4570      	cmp	r0, lr
   1d3c6:	d81d      	bhi.n	1d404 <strtol+0xac>
   1d3c8:	d101      	bne.n	1d3ce <strtol+0x76>
   1d3ca:	454b      	cmp	r3, r9
   1d3cc:	dc1a      	bgt.n	1d404 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1d3ce:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d3d0:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d3d4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d3d8:	e7eb      	b.n	1d3b2 <strtol+0x5a>
{
   1d3da:	4625      	mov	r5, r4
   1d3dc:	e7c1      	b.n	1d362 <strtol+0xa>
	} else if (c == '+') {
   1d3de:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d3e0:	bf04      	itt	eq
   1d3e2:	1cac      	addeq	r4, r5, #2
   1d3e4:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d3e6:	2100      	movs	r1, #0
   1d3e8:	e7c9      	b.n	1d37e <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d3ea:	f043 0520 	orr.w	r5, r3, #32
   1d3ee:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d3f0:	2d19      	cmp	r5, #25
   1d3f2:	d80a      	bhi.n	1d40a <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d3f4:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d3f8:	2d1a      	cmp	r5, #26
   1d3fa:	bf34      	ite	cc
   1d3fc:	2537      	movcc	r5, #55	; 0x37
   1d3fe:	2557      	movcs	r5, #87	; 0x57
   1d400:	1b5b      	subs	r3, r3, r5
   1d402:	e7db      	b.n	1d3bc <strtol+0x64>
			any = -1;
   1d404:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d408:	e7e4      	b.n	1d3d4 <strtol+0x7c>
		}
	}

	if (any < 0) {
   1d40a:	1c73      	adds	r3, r6, #1
   1d40c:	d107      	bne.n	1d41e <strtol+0xc6>
   1d40e:	f7fd fdc1 	bl	1af94 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1d412:	2326      	movs	r3, #38	; 0x26
   1d414:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1d416:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1d418:	b937      	cbnz	r7, 1d428 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1d41e:	b101      	cbz	r1, 1d422 <strtol+0xca>
		acc = -acc;
   1d420:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d422:	2f00      	cmp	r7, #0
   1d424:	d0f9      	beq.n	1d41a <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d426:	b10e      	cbz	r6, 1d42c <strtol+0xd4>
   1d428:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d42c:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d430:	e7f3      	b.n	1d41a <strtol+0xc2>
	if (base == 0) {
   1d432:	2330      	movs	r3, #48	; 0x30
   1d434:	2a00      	cmp	r2, #0
   1d436:	d1b0      	bne.n	1d39a <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1d438:	2208      	movs	r2, #8
   1d43a:	e7ae      	b.n	1d39a <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1d43c:	2b30      	cmp	r3, #48	; 0x30
   1d43e:	d0a4      	beq.n	1d38a <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1d440:	220a      	movs	r2, #10
   1d442:	e7aa      	b.n	1d39a <strtol+0x42>

0001d444 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1d444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d448:	4684      	mov	ip, r0
   1d44a:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d44c:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1d44e:	462c      	mov	r4, r5
   1d450:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d454:	2b20      	cmp	r3, #32
   1d456:	d035      	beq.n	1d4c4 <strtoul+0x80>
   1d458:	f1a3 0109 	sub.w	r1, r3, #9
   1d45c:	2904      	cmp	r1, #4
   1d45e:	d931      	bls.n	1d4c4 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1d460:	2b2d      	cmp	r3, #45	; 0x2d
   1d462:	d131      	bne.n	1d4c8 <strtoul+0x84>
		neg = 1;
   1d464:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1d468:	786b      	ldrb	r3, [r5, #1]
   1d46a:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d46c:	2a00      	cmp	r2, #0
   1d46e:	d05e      	beq.n	1d52e <strtoul+0xea>
   1d470:	2a10      	cmp	r2, #16
   1d472:	d109      	bne.n	1d488 <strtoul+0x44>
   1d474:	2b30      	cmp	r3, #48	; 0x30
   1d476:	d107      	bne.n	1d488 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d478:	7823      	ldrb	r3, [r4, #0]
   1d47a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d47e:	2b58      	cmp	r3, #88	; 0x58
   1d480:	d150      	bne.n	1d524 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1d482:	2210      	movs	r2, #16
		c = s[1];
   1d484:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d486:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1d488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d48c:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d490:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d492:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1d496:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d498:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d49c:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d4a0:	2d09      	cmp	r5, #9
   1d4a2:	d818      	bhi.n	1d4d6 <strtoul+0x92>
			c -= '0';
   1d4a4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d4a6:	429a      	cmp	r2, r3
   1d4a8:	dd25      	ble.n	1d4f6 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d4aa:	2e00      	cmp	r6, #0
   1d4ac:	db20      	blt.n	1d4f0 <strtoul+0xac>
   1d4ae:	4288      	cmp	r0, r1
   1d4b0:	d81e      	bhi.n	1d4f0 <strtoul+0xac>
   1d4b2:	d101      	bne.n	1d4b8 <strtoul+0x74>
   1d4b4:	4543      	cmp	r3, r8
   1d4b6:	dc1b      	bgt.n	1d4f0 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1d4b8:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d4ba:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d4be:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d4c2:	e7eb      	b.n	1d49c <strtoul+0x58>
{
   1d4c4:	4625      	mov	r5, r4
   1d4c6:	e7c2      	b.n	1d44e <strtoul+0xa>
	} else if (c == '+') {
   1d4c8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d4ca:	bf04      	itt	eq
   1d4cc:	1cac      	addeq	r4, r5, #2
   1d4ce:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d4d0:	f04f 0e00 	mov.w	lr, #0
   1d4d4:	e7ca      	b.n	1d46c <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d4d6:	f043 0520 	orr.w	r5, r3, #32
   1d4da:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d4dc:	2d19      	cmp	r5, #25
   1d4de:	d80a      	bhi.n	1d4f6 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d4e0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d4e4:	2d1a      	cmp	r5, #26
   1d4e6:	bf34      	ite	cc
   1d4e8:	2537      	movcc	r5, #55	; 0x37
   1d4ea:	2557      	movcs	r5, #87	; 0x57
   1d4ec:	1b5b      	subs	r3, r3, r5
   1d4ee:	e7da      	b.n	1d4a6 <strtoul+0x62>
			any = -1;
   1d4f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d4f4:	e7e3      	b.n	1d4be <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1d4f6:	2e00      	cmp	r6, #0
   1d4f8:	da08      	bge.n	1d50c <strtoul+0xc8>
   1d4fa:	f7fd fd4b 	bl	1af94 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1d4fe:	2326      	movs	r3, #38	; 0x26
   1d500:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1d502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1d506:	b947      	cbnz	r7, 1d51a <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1d50c:	f1be 0f00 	cmp.w	lr, #0
   1d510:	d000      	beq.n	1d514 <strtoul+0xd0>
		acc = -acc;
   1d512:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d514:	2f00      	cmp	r7, #0
   1d516:	d0f7      	beq.n	1d508 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d518:	b10e      	cbz	r6, 1d51e <strtoul+0xda>
   1d51a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d51e:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d522:	e7f1      	b.n	1d508 <strtoul+0xc4>
	if (base == 0) {
   1d524:	2330      	movs	r3, #48	; 0x30
   1d526:	2a00      	cmp	r2, #0
   1d528:	d1ae      	bne.n	1d488 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1d52a:	2208      	movs	r2, #8
   1d52c:	e7ac      	b.n	1d488 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1d52e:	2b30      	cmp	r3, #48	; 0x30
   1d530:	d0a2      	beq.n	1d478 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1d532:	220a      	movs	r2, #10
   1d534:	e7a8      	b.n	1d488 <strtoul+0x44>

0001d536 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1d536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1d53a:	780f      	ldrb	r7, [r1, #0]
{
   1d53c:	4605      	mov	r5, r0
	if (c != 0) {
   1d53e:	b187      	cbz	r7, 1d562 <strstr+0x2c>
	c = *find++;
   1d540:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1d542:	4620      	mov	r0, r4
   1d544:	f000 f84c 	bl	1d5e0 <strlen>
   1d548:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1d54a:	462e      	mov	r6, r5
   1d54c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1d550:	b163      	cbz	r3, 1d56c <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1d552:	429f      	cmp	r7, r3
   1d554:	d108      	bne.n	1d568 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1d556:	4642      	mov	r2, r8
   1d558:	4621      	mov	r1, r4
   1d55a:	4630      	mov	r0, r6
   1d55c:	f000 f853 	bl	1d606 <strncmp>
   1d560:	b910      	cbnz	r0, 1d568 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1d562:	4628      	mov	r0, r5
   1d564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1d568:	4635      	mov	r5, r6
   1d56a:	e7ee      	b.n	1d54a <strstr+0x14>
					return NULL;
   1d56c:	461d      	mov	r5, r3
   1d56e:	e7f8      	b.n	1d562 <strstr+0x2c>

0001d570 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1d570:	4603      	mov	r3, r0
   1d572:	3901      	subs	r1, #1
   1d574:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d578:	b90a      	cbnz	r2, 1d57e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1d57a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1d57c:	4770      	bx	lr
		*d = *s;
   1d57e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1d582:	e7f7      	b.n	1d574 <strcpy+0x4>

0001d584 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1d584:	b570      	push	{r4, r5, r6, lr}
   1d586:	4605      	mov	r5, r0
   1d588:	3901      	subs	r1, #1
   1d58a:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1d58c:	b142      	cbz	r2, 1d5a0 <strncpy+0x1c>
   1d58e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1d592:	1e56      	subs	r6, r2, #1
   1d594:	b92b      	cbnz	r3, 1d5a2 <strncpy+0x1e>
   1d596:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1d598:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1d59c:	42a2      	cmp	r2, r4
   1d59e:	d1fb      	bne.n	1d598 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1d5a0:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1d5a2:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1d5a6:	4632      	mov	r2, r6
   1d5a8:	e7ef      	b.n	1d58a <strncpy+0x6>

0001d5aa <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1d5aa:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1d5ac:	7802      	ldrb	r2, [r0, #0]
   1d5ae:	4603      	mov	r3, r0
   1d5b0:	428a      	cmp	r2, r1
   1d5b2:	f100 0001 	add.w	r0, r0, #1
   1d5b6:	d004      	beq.n	1d5c2 <strchr+0x18>
   1d5b8:	2a00      	cmp	r2, #0
   1d5ba:	d1f7      	bne.n	1d5ac <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1d5bc:	2900      	cmp	r1, #0
   1d5be:	bf18      	it	ne
   1d5c0:	2300      	movne	r3, #0
}
   1d5c2:	4618      	mov	r0, r3
   1d5c4:	4770      	bx	lr

0001d5c6 <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   1d5c6:	2300      	movs	r3, #0
{
   1d5c8:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   1d5ca:	b2c9      	uxtb	r1, r1
   1d5cc:	4604      	mov	r4, r0
   1d5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d5d2:	428a      	cmp	r2, r1
   1d5d4:	bf08      	it	eq
   1d5d6:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   1d5d8:	2a00      	cmp	r2, #0
   1d5da:	d1f7      	bne.n	1d5cc <strrchr+0x6>

	return match;
}
   1d5dc:	4618      	mov	r0, r3
   1d5de:	bd10      	pop	{r4, pc}

0001d5e0 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1d5e0:	2300      	movs	r3, #0

	while (*s != '\0') {
   1d5e2:	5cc2      	ldrb	r2, [r0, r3]
   1d5e4:	b90a      	cbnz	r2, 1d5ea <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d5e6:	4618      	mov	r0, r3
   1d5e8:	4770      	bx	lr
		n++;
   1d5ea:	3301      	adds	r3, #1
   1d5ec:	e7f9      	b.n	1d5e2 <strlen+0x2>

0001d5ee <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d5ee:	3801      	subs	r0, #1
   1d5f0:	3901      	subs	r1, #1
   1d5f2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d5f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d5fa:	4293      	cmp	r3, r2
   1d5fc:	d101      	bne.n	1d602 <strcmp+0x14>
   1d5fe:	2b00      	cmp	r3, #0
   1d600:	d1f7      	bne.n	1d5f2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d602:	1a98      	subs	r0, r3, r2
   1d604:	4770      	bx	lr

0001d606 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1d606:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1d608:	2400      	movs	r4, #0
   1d60a:	42a2      	cmp	r2, r4
   1d60c:	d008      	beq.n	1d620 <strncmp+0x1a>
   1d60e:	5d03      	ldrb	r3, [r0, r4]
   1d610:	5d0d      	ldrb	r5, [r1, r4]
   1d612:	42ab      	cmp	r3, r5
   1d614:	d102      	bne.n	1d61c <strncmp+0x16>
   1d616:	3401      	adds	r4, #1
   1d618:	2b00      	cmp	r3, #0
   1d61a:	d1f6      	bne.n	1d60a <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1d61c:	1b58      	subs	r0, r3, r5
   1d61e:	e000      	b.n	1d622 <strncmp+0x1c>
   1d620:	2000      	movs	r0, #0
}
   1d622:	bd30      	pop	{r4, r5, pc}

0001d624 <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   1d624:	b510      	push	{r4, lr}
   1d626:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   1d628:	f7ff ffda 	bl	1d5e0 <strlen>
   1d62c:	4420      	add	r0, r4
   1d62e:	f7ff ff9f 	bl	1d570 <strcpy>
	return dest;
}
   1d632:	4620      	mov	r0, r4
   1d634:	bd10      	pop	{r4, pc}

0001d636 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d636:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d638:	b15a      	cbz	r2, 1d652 <memcmp+0x1c>
   1d63a:	3901      	subs	r1, #1
   1d63c:	1884      	adds	r4, r0, r2
   1d63e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d642:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d646:	42a0      	cmp	r0, r4
   1d648:	d001      	beq.n	1d64e <memcmp+0x18>
   1d64a:	429a      	cmp	r2, r3
   1d64c:	d0f7      	beq.n	1d63e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d64e:	1ad0      	subs	r0, r2, r3
}
   1d650:	bd10      	pop	{r4, pc}
		return 0;
   1d652:	4610      	mov	r0, r2
   1d654:	e7fc      	b.n	1d650 <memcmp+0x1a>

0001d656 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d656:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d658:	ea81 0400 	eor.w	r4, r1, r0
   1d65c:	07a5      	lsls	r5, r4, #30
   1d65e:	4603      	mov	r3, r0
   1d660:	d00b      	beq.n	1d67a <memcpy+0x24>
   1d662:	3b01      	subs	r3, #1
   1d664:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d666:	4291      	cmp	r1, r2
   1d668:	d11a      	bne.n	1d6a0 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d66c:	2a00      	cmp	r2, #0
   1d66e:	d0fc      	beq.n	1d66a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d670:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1d674:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1d676:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1d67a:	079c      	lsls	r4, r3, #30
   1d67c:	d1f6      	bne.n	1d66c <memcpy+0x16>
   1d67e:	0895      	lsrs	r5, r2, #2
   1d680:	00ac      	lsls	r4, r5, #2
   1d682:	1f1e      	subs	r6, r3, #4
   1d684:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d686:	42b9      	cmp	r1, r7
   1d688:	d105      	bne.n	1d696 <memcpy+0x40>
   1d68a:	f06f 0603 	mvn.w	r6, #3
   1d68e:	4423      	add	r3, r4
   1d690:	fb06 2205 	mla	r2, r6, r5, r2
   1d694:	e7e5      	b.n	1d662 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d696:	f851 cb04 	ldr.w	ip, [r1], #4
   1d69a:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1d69e:	e7f2      	b.n	1d686 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1d6a0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d6a4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d6a8:	e7dd      	b.n	1d666 <memcpy+0x10>

0001d6aa <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1d6aa:	4603      	mov	r3, r0
{
   1d6ac:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1d6ae:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d6b0:	079c      	lsls	r4, r3, #30
   1d6b2:	d110      	bne.n	1d6d6 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d6b4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d6b8:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d6bc:	0894      	lsrs	r4, r2, #2
   1d6be:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1d6c2:	42b3      	cmp	r3, r6
   1d6c4:	d10d      	bne.n	1d6e2 <memset+0x38>
   1d6c6:	f06f 0503 	mvn.w	r5, #3
   1d6ca:	fb05 2404 	mla	r4, r5, r4, r2
   1d6ce:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d6d0:	42a3      	cmp	r3, r4
   1d6d2:	d109      	bne.n	1d6e8 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d6d4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d6d6:	2a00      	cmp	r2, #0
   1d6d8:	d0fc      	beq.n	1d6d4 <memset+0x2a>
		*(d_byte++) = c_byte;
   1d6da:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d6de:	3a01      	subs	r2, #1
   1d6e0:	e7e6      	b.n	1d6b0 <memset+0x6>
		*(d_word++) = c_word;
   1d6e2:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1d6e6:	e7ec      	b.n	1d6c2 <memset+0x18>
		*(d_byte++) = c_byte;
   1d6e8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d6ec:	e7f0      	b.n	1d6d0 <memset+0x26>

0001d6ee <_to_x>:
{
   1d6ee:	4603      	mov	r3, r0
   1d6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1d6f2:	fbb1 f7f2 	udiv	r7, r1, r2
   1d6f6:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d6fa:	2d09      	cmp	r5, #9
   1d6fc:	bf8c      	ite	hi
   1d6fe:	2627      	movhi	r6, #39	; 0x27
   1d700:	2600      	movls	r6, #0
   1d702:	461c      	mov	r4, r3
   1d704:	3530      	adds	r5, #48	; 0x30
   1d706:	4435      	add	r5, r6
	} while (n);
   1d708:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d70a:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1d70e:	d206      	bcs.n	1d71e <_to_x+0x30>
	*buf = 0;
   1d710:	2200      	movs	r2, #0
   1d712:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1d714:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1d716:	4283      	cmp	r3, r0
   1d718:	d804      	bhi.n	1d724 <_to_x+0x36>
}
   1d71a:	4620      	mov	r0, r4
   1d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1d71e:	4639      	mov	r1, r7
   1d720:	4623      	mov	r3, r4
   1d722:	e7e6      	b.n	1d6f2 <_to_x+0x4>
		char tmp = *buf;
   1d724:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1d726:	7801      	ldrb	r1, [r0, #0]
   1d728:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1d72c:	f800 2b01 	strb.w	r2, [r0], #1
   1d730:	e7f1      	b.n	1d716 <_to_x+0x28>

0001d732 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1d732:	2100      	movs	r1, #0
{
   1d734:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1d736:	e9d0 6500 	ldrd	r6, r5, [r0]
   1d73a:	0872      	lsrs	r2, r6, #1
   1d73c:	f006 0301 	and.w	r3, r6, #1
   1d740:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1d744:	189b      	adds	r3, r3, r2
   1d746:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1d74a:	eb44 0101 	adc.w	r1, r4, r1
   1d74e:	e9c0 3100 	strd	r3, r1, [r0]
}
   1d752:	bd70      	pop	{r4, r5, r6, pc}

0001d754 <_ldiv5>:
{
   1d754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1d758:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d75c:	2705      	movs	r7, #5
	rem += 2U;
   1d75e:	3302      	adds	r3, #2
   1d760:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d764:	fbb2 fef7 	udiv	lr, r2, r7
   1d768:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1d76c:	fb07 f10e 	mul.w	r1, r7, lr
   1d770:	ebb3 060c 	subs.w	r6, r3, ip
   1d774:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1d778:	08f2      	lsrs	r2, r6, #3
   1d77a:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d77e:	fbb2 f1f7 	udiv	r1, r2, r7
   1d782:	00ca      	lsls	r2, r1, #3
		quot += q;
   1d784:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d788:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1d78c:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1d790:	fba2 2307 	umull	r2, r3, r2, r7
   1d794:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d796:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1d79a:	eb18 0403 	adds.w	r4, r8, r3
   1d79e:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1d7a2:	e9c0 4500 	strd	r4, r5, [r0]
}
   1d7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d7aa <_get_digit>:
	if (*digit_count > 0) {
   1d7aa:	680b      	ldr	r3, [r1, #0]
{
   1d7ac:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1d7ae:	2b00      	cmp	r3, #0
   1d7b0:	dd10      	ble.n	1d7d4 <_get_digit+0x2a>
		*digit_count -= 1;
   1d7b2:	3b01      	subs	r3, #1
   1d7b4:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1d7b6:	210a      	movs	r1, #10
   1d7b8:	6802      	ldr	r2, [r0, #0]
   1d7ba:	6844      	ldr	r4, [r0, #4]
   1d7bc:	fba2 5601 	umull	r5, r6, r2, r1
   1d7c0:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1d7c4:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d7c8:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d7cc:	0f31      	lsrs	r1, r6, #28
   1d7ce:	3130      	adds	r1, #48	; 0x30
}
   1d7d0:	4608      	mov	r0, r1
   1d7d2:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d7d4:	2130      	movs	r1, #48	; 0x30
   1d7d6:	e7fb      	b.n	1d7d0 <_get_digit+0x26>

0001d7d8 <_stdout_hook_default>:
}
   1d7d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d7dc:	4770      	bx	lr

0001d7de <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1d7de:	684b      	ldr	r3, [r1, #4]
   1d7e0:	2b01      	cmp	r3, #1
   1d7e2:	dd07      	ble.n	1d7f4 <sprintf_out+0x16>
		*(p->ptr) = c;
   1d7e4:	680b      	ldr	r3, [r1, #0]
   1d7e6:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1d7e8:	680b      	ldr	r3, [r1, #0]
   1d7ea:	3301      	adds	r3, #1
   1d7ec:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1d7ee:	684b      	ldr	r3, [r1, #4]
   1d7f0:	3b01      	subs	r3, #1
   1d7f2:	604b      	str	r3, [r1, #4]
}
   1d7f4:	2000      	movs	r0, #0
   1d7f6:	4770      	bx	lr

0001d7f8 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1d7f8:	b508      	push	{r3, lr}
	net_if_init();
   1d7fa:	f7f3 fbc5 	bl	10f88 <net_if_init>
	net_if_post_init();
   1d7fe:	f7f3 fbd7 	bl	10fb0 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1d802:	2000      	movs	r0, #0
   1d804:	bd08      	pop	{r3, pc}

0001d806 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d806:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d80a:	4108      	asrs	r0, r1
}
   1d80c:	f000 0001 	and.w	r0, r0, #1
   1d810:	4770      	bx	lr

0001d812 <l2_flags_get>:
	if (!iface) {
   1d812:	b128      	cbz	r0, 1d820 <l2_flags_get+0xe>
	return iface->if_dev->l2;
   1d814:	6803      	ldr	r3, [r0, #0]
   1d816:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1d818:	b113      	cbz	r3, 1d820 <l2_flags_get+0xe>
   1d81a:	68db      	ldr	r3, [r3, #12]
   1d81c:	b103      	cbz	r3, 1d820 <l2_flags_get+0xe>
		flags = net_if_l2(iface)->get_flags(iface);
   1d81e:	4718      	bx	r3
}
   1d820:	2000      	movs	r0, #0
   1d822:	4770      	bx	lr

0001d824 <net_if_up>:
{
   1d824:	b510      	push	{r4, lr}
   1d826:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1d828:	6800      	ldr	r0, [r0, #0]
   1d82a:	2100      	movs	r1, #0
   1d82c:	300c      	adds	r0, #12
   1d82e:	f7ff ffea 	bl	1d806 <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d832:	b9d8      	cbnz	r0, 1d86c <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   1d834:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d836:	7e9a      	ldrb	r2, [r3, #26]
   1d838:	b14a      	cbz	r2, 1d84e <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d83a:	330c      	adds	r3, #12
   1d83c:	e8d3 2fef 	ldaex	r2, [r3]
   1d840:	f042 0201 	orr.w	r2, r2, #1
   1d844:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d848:	2900      	cmp	r1, #0
   1d84a:	d1f7      	bne.n	1d83c <net_if_up+0x18>
}
   1d84c:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   1d84e:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d850:	b973      	cbnz	r3, 1d870 <net_if_up+0x4c>
   1d852:	6823      	ldr	r3, [r4, #0]
   1d854:	330c      	adds	r3, #12
   1d856:	e8d3 2fef 	ldaex	r2, [r3]
   1d85a:	f042 0201 	orr.w	r2, r2, #1
   1d85e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d862:	2900      	cmp	r1, #0
   1d864:	d1f7      	bne.n	1d856 <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d866:	4620      	mov	r0, r4
   1d868:	f7ff ffd3 	bl	1d812 <l2_flags_get>
		return 0;
   1d86c:	2000      	movs	r0, #0
   1d86e:	e7ed      	b.n	1d84c <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d870:	689b      	ldr	r3, [r3, #8]
   1d872:	2b00      	cmp	r3, #0
   1d874:	d0ed      	beq.n	1d852 <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   1d876:	2101      	movs	r1, #1
   1d878:	4620      	mov	r0, r4
   1d87a:	4798      	blx	r3
	if (status < 0) {
   1d87c:	2800      	cmp	r0, #0
   1d87e:	dae8      	bge.n	1d852 <net_if_up+0x2e>
   1d880:	e7e4      	b.n	1d84c <net_if_up+0x28>

0001d882 <net_byte_to_hex>:
{
   1d882:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d884:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   1d886:	b1b3      	cbz	r3, 1d8b6 <net_byte_to_hex+0x34>
		if (val < 10) {
   1d888:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   1d88a:	b274      	sxtb	r4, r6
   1d88c:	bf86      	itte	hi
   1d88e:	f1a2 030a 	subhi.w	r3, r2, #10
   1d892:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   1d894:	3430      	addls	r4, #48	; 0x30
   1d896:	1c45      	adds	r5, r0, #1
   1d898:	7004      	strb	r4, [r0, #0]
   1d89a:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1d89e:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1d8a0:	b24b      	sxtb	r3, r1
   1d8a2:	bf83      	ittte	hi
   1d8a4:	3a0a      	subhi	r2, #10
   1d8a6:	189b      	addhi	r3, r3, r2
   1d8a8:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   1d8aa:	3330      	addls	r3, #48	; 0x30
   1d8ac:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   1d8ae:	2300      	movs	r3, #0
   1d8b0:	706b      	strb	r3, [r5, #1]
   1d8b2:	1c68      	adds	r0, r5, #1
}
   1d8b4:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   1d8b6:	2e00      	cmp	r6, #0
   1d8b8:	d1e6      	bne.n	1d888 <net_byte_to_hex+0x6>
   1d8ba:	4605      	mov	r5, r0
   1d8bc:	e7ed      	b.n	1d89a <net_byte_to_hex+0x18>

0001d8be <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   1d8be:	2801      	cmp	r0, #1
{
   1d8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d8c4:	460c      	mov	r4, r1
   1d8c6:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d8c8:	d128      	bne.n	1d91c <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   1d8ca:	4608      	mov	r0, r1
   1d8cc:	f7ff fe88 	bl	1d5e0 <strlen>
		for (i = 0; i < len; i++) {
   1d8d0:	4623      	mov	r3, r4
   1d8d2:	4420      	add	r0, r4
   1d8d4:	4298      	cmp	r0, r3
   1d8d6:	d114      	bne.n	1d902 <z_impl_net_addr_pton+0x44>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   1d8d8:	4630      	mov	r0, r6
   1d8da:	2204      	movs	r2, #4
   1d8dc:	2100      	movs	r1, #0
   1d8de:	f7ff fee4 	bl	1d6aa <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d8e2:	1e75      	subs	r5, r6, #1
   1d8e4:	3603      	adds	r6, #3
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d8e6:	4620      	mov	r0, r4
   1d8e8:	220a      	movs	r2, #10
   1d8ea:	a901      	add	r1, sp, #4
   1d8ec:	f7ff fd34 	bl	1d358 <strtol>

			src = ++endptr;
   1d8f0:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d8f2:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d8f6:	42b5      	cmp	r5, r6
			src = ++endptr;
   1d8f8:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d8fc:	d1f3      	bne.n	1d8e6 <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   1d8fe:	2000      	movs	r0, #0
   1d900:	e009      	b.n	1d916 <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d902:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d906:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d90a:	2909      	cmp	r1, #9
   1d90c:	d9e2      	bls.n	1d8d4 <z_impl_net_addr_pton+0x16>
   1d90e:	2a2e      	cmp	r2, #46	; 0x2e
   1d910:	d0e0      	beq.n	1d8d4 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   1d912:	f06f 0015 	mvn.w	r0, #21
}
   1d916:	b003      	add	sp, #12
   1d918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   1d91c:	2802      	cmp	r0, #2
   1d91e:	d1f8      	bne.n	1d912 <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d920:	212e      	movs	r1, #46	; 0x2e
   1d922:	4620      	mov	r0, r4
   1d924:	f7ff fe41 	bl	1d5aa <strchr>
		if (*src == ':') {
   1d928:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d92a:	2800      	cmp	r0, #0
   1d92c:	bf14      	ite	ne
   1d92e:	2706      	movne	r7, #6
   1d930:	2708      	moveq	r7, #8
		if (*src == ':') {
   1d932:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1d934:	bf08      	it	eq
   1d936:	3401      	addeq	r4, #1
		len = strlen(src);
   1d938:	4620      	mov	r0, r4
   1d93a:	f7ff fe51 	bl	1d5e0 <strlen>
		for (i = 0; i < len; i++) {
   1d93e:	2300      	movs	r3, #0
   1d940:	4283      	cmp	r3, r0
   1d942:	db21      	blt.n	1d988 <z_impl_net_addr_pton+0xca>
		for (i = 0; i < expected_groups; i++) {
   1d944:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d946:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   1d948:	2c00      	cmp	r4, #0
   1d94a:	d0e2      	beq.n	1d912 <z_impl_net_addr_pton+0x54>
   1d94c:	7823      	ldrb	r3, [r4, #0]
   1d94e:	2b00      	cmp	r3, #0
   1d950:	d0df      	beq.n	1d912 <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
   1d952:	2b3a      	cmp	r3, #58	; 0x3a
   1d954:	d02d      	beq.n	1d9b2 <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d956:	2210      	movs	r2, #16
   1d958:	2100      	movs	r1, #0
   1d95a:	4620      	mov	r0, r4
   1d95c:	f7ff fcfc 	bl	1d358 <strtol>
   1d960:	2210      	movs	r2, #16
   1d962:	4680      	mov	r8, r0
   1d964:	2100      	movs	r1, #0
   1d966:	4620      	mov	r0, r4
   1d968:	f7ff fcf6 	bl	1d358 <strtol>
   1d96c:	f3c8 2807 	ubfx	r8, r8, #8, #8
   1d970:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   1d974:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   1d978:	213a      	movs	r1, #58	; 0x3a
   1d97a:	4620      	mov	r0, r4
   1d97c:	f7ff fe15 	bl	1d5aa <strchr>
				if (src) {
   1d980:	4604      	mov	r4, r0
   1d982:	b178      	cbz	r0, 1d9a4 <z_impl_net_addr_pton+0xe6>
			src++;
   1d984:	3401      	adds	r4, #1
   1d986:	e010      	b.n	1d9aa <z_impl_net_addr_pton+0xec>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d988:	5ce2      	ldrb	r2, [r4, r3]
   1d98a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d98e:	290a      	cmp	r1, #10
   1d990:	d906      	bls.n	1d9a0 <z_impl_net_addr_pton+0xe2>
   1d992:	f022 0120 	bic.w	r1, r2, #32
   1d996:	3941      	subs	r1, #65	; 0x41
   1d998:	2905      	cmp	r1, #5
   1d99a:	d901      	bls.n	1d9a0 <z_impl_net_addr_pton+0xe2>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d99c:	2a2e      	cmp	r2, #46	; 0x2e
   1d99e:	d1b8      	bne.n	1d912 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
   1d9a0:	3301      	adds	r3, #1
   1d9a2:	e7cd      	b.n	1d940 <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
   1d9a4:	1e7b      	subs	r3, r7, #1
   1d9a6:	42ab      	cmp	r3, r5
   1d9a8:	dcb3      	bgt.n	1d912 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
   1d9aa:	3501      	adds	r5, #1
   1d9ac:	42af      	cmp	r7, r5
   1d9ae:	dccb      	bgt.n	1d948 <z_impl_net_addr_pton+0x8a>
   1d9b0:	e013      	b.n	1d9da <z_impl_net_addr_pton+0x11c>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d9b2:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   1d9b6:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   1d9ba:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   1d9be:	3501      	adds	r5, #1
   1d9c0:	42af      	cmp	r7, r5
   1d9c2:	dcf6      	bgt.n	1d9b2 <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
   1d9c4:	213a      	movs	r1, #58	; 0x3a
   1d9c6:	4620      	mov	r0, r4
   1d9c8:	f7ff fdfd 	bl	1d5c6 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d9cc:	42a0      	cmp	r0, r4
   1d9ce:	d11f      	bne.n	1da10 <z_impl_net_addr_pton+0x152>
   1d9d0:	2f06      	cmp	r7, #6
   1d9d2:	d001      	beq.n	1d9d8 <z_impl_net_addr_pton+0x11a>
   1d9d4:	7863      	ldrb	r3, [r4, #1]
   1d9d6:	bb63      	cbnz	r3, 1da32 <z_impl_net_addr_pton+0x174>
				src++;
   1d9d8:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   1d9da:	2f06      	cmp	r7, #6
   1d9dc:	d18f      	bne.n	1d8fe <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   1d9de:	2500      	movs	r5, #0
   1d9e0:	360c      	adds	r6, #12
				if (!src || !*src) {
   1d9e2:	2c00      	cmp	r4, #0
   1d9e4:	d095      	beq.n	1d912 <z_impl_net_addr_pton+0x54>
   1d9e6:	7823      	ldrb	r3, [r4, #0]
   1d9e8:	2b00      	cmp	r3, #0
   1d9ea:	d092      	beq.n	1d912 <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d9ec:	220a      	movs	r2, #10
   1d9ee:	2100      	movs	r1, #0
   1d9f0:	4620      	mov	r0, r4
   1d9f2:	f7ff fcb1 	bl	1d358 <strtol>
				src = strchr(src, '.');
   1d9f6:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d9f8:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   1d9fc:	4620      	mov	r0, r4
   1d9fe:	f7ff fdd4 	bl	1d5aa <strchr>
				if (src) {
   1da02:	4604      	mov	r4, r0
   1da04:	b1b8      	cbz	r0, 1da36 <z_impl_net_addr_pton+0x178>
					src++;
   1da06:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   1da08:	3501      	adds	r5, #1
   1da0a:	2d04      	cmp	r5, #4
   1da0c:	d1e9      	bne.n	1d9e2 <z_impl_net_addr_pton+0x124>
   1da0e:	e776      	b.n	1d8fe <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
   1da10:	2f06      	cmp	r7, #6
   1da12:	d100      	bne.n	1da16 <z_impl_net_addr_pton+0x158>
				tmp--;
   1da14:	3801      	subs	r0, #1
			i = expected_groups - 1;
   1da16:	1e7d      	subs	r5, r7, #1
   1da18:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1da1a:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1da1e:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1da20:	bf08      	it	eq
   1da22:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   1da26:	2d00      	cmp	r5, #0
   1da28:	f6ff af73 	blt.w	1d912 <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
   1da2c:	42a0      	cmp	r0, r4
   1da2e:	d1f4      	bne.n	1da1a <z_impl_net_addr_pton+0x15c>
   1da30:	e7a8      	b.n	1d984 <z_impl_net_addr_pton+0xc6>
   1da32:	4620      	mov	r0, r4
   1da34:	e7ef      	b.n	1da16 <z_impl_net_addr_pton+0x158>
					if (i < 3) {
   1da36:	2d03      	cmp	r5, #3
   1da38:	f47f af6b 	bne.w	1d912 <z_impl_net_addr_pton+0x54>
   1da3c:	e7e4      	b.n	1da08 <z_impl_net_addr_pton+0x14a>

0001da3e <gpio_nrfx_write>:
{
   1da3e:	b510      	push	{r4, lr}
	return port->config->config_info;
   1da40:	6804      	ldr	r4, [r0, #0]
   1da42:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da44:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1da46:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da48:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1da4a:	69c0      	ldr	r0, [r0, #28]
   1da4c:	d103      	bne.n	1da56 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1da4e:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1da50:	6060      	str	r0, [r4, #4]
}
   1da52:	2000      	movs	r0, #0
   1da54:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1da56:	3300      	adds	r3, #0
   1da58:	f04f 0101 	mov.w	r1, #1
   1da5c:	bf18      	it	ne
   1da5e:	2301      	movne	r3, #1
   1da60:	40d0      	lsrs	r0, r2
   1da62:	f000 0001 	and.w	r0, r0, #1
   1da66:	4091      	lsls	r1, r2
   1da68:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1da6a:	bf14      	ite	ne
   1da6c:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1da6e:	60e1      	streq	r1, [r4, #12]
   1da70:	e7ef      	b.n	1da52 <gpio_nrfx_write+0x14>

0001da72 <gpio_nrfx_read>:
{
   1da72:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1da74:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1da76:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da78:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1da7a:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1da7c:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1da7e:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1da80:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1da82:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1da84:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1da86:	ea80 0004 	eor.w	r0, r0, r4
   1da8a:	ea84 0405 	eor.w	r4, r4, r5
   1da8e:	ea04 0406 	and.w	r4, r4, r6
   1da92:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1da96:	bf1c      	itt	ne
   1da98:	40d0      	lsrne	r0, r2
   1da9a:	f000 0001 	andne.w	r0, r0, #1
   1da9e:	6018      	str	r0, [r3, #0]
}
   1daa0:	2000      	movs	r0, #0
   1daa2:	bd70      	pop	{r4, r5, r6, pc}

0001daa4 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1daa4:	6883      	ldr	r3, [r0, #8]
{
   1daa6:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1daa8:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1daaa:	b158      	cbz	r0, 1dac4 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1daac:	2400      	movs	r4, #0
   1daae:	4281      	cmp	r1, r0
   1dab0:	d113      	bne.n	1dada <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1dab2:	6808      	ldr	r0, [r1, #0]
   1dab4:	b95c      	cbnz	r4, 1dace <gpio_nrfx_manage_callback+0x2a>
   1dab6:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1dab8:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1daba:	42a1      	cmp	r1, r4
   1dabc:	d100      	bne.n	1dac0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1dabe:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1dac0:	2000      	movs	r0, #0
   1dac2:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1dac4:	b972      	cbnz	r2, 1dae4 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1dac6:	2000      	movs	r0, #0
}
   1dac8:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1daca:	4628      	mov	r0, r5
   1dacc:	e7ef      	b.n	1daae <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1dace:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dad0:	6858      	ldr	r0, [r3, #4]
   1dad2:	4281      	cmp	r1, r0
	list->tail = node;
   1dad4:	bf08      	it	eq
   1dad6:	605c      	streq	r4, [r3, #4]
   1dad8:	e7f2      	b.n	1dac0 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dada:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1dadc:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dade:	2d00      	cmp	r5, #0
   1dae0:	d1f3      	bne.n	1daca <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1dae2:	b13a      	cbz	r2, 1daf4 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1dae4:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1dae6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1dae8:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1daea:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1daec:	2800      	cmp	r0, #0
   1daee:	d1ea      	bne.n	1dac6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1daf0:	6059      	str	r1, [r3, #4]
   1daf2:	e7e9      	b.n	1dac8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1daf4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1daf8:	e7e6      	b.n	1dac8 <gpio_nrfx_manage_callback+0x24>

0001dafa <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1dafa:	2901      	cmp	r1, #1
{
   1dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1db00:	bf18      	it	ne
   1db02:	b2d4      	uxtbne	r4, r2
{
   1db04:	4606      	mov	r6, r0
		to_pin   = pin;
   1db06:	bf12      	itee	ne
   1db08:	4625      	movne	r5, r4
		to_pin   = 31U;
   1db0a:	251f      	moveq	r5, #31
		from_pin = 0U;
   1db0c:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db0e:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1db12:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db14:	42ac      	cmp	r4, r5
   1db16:	d902      	bls.n	1db1e <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1db18:	2000      	movs	r0, #0
}
   1db1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db1e:	68fb      	ldr	r3, [r7, #12]
   1db20:	fa08 f204 	lsl.w	r2, r8, r4
   1db24:	ea23 0302 	bic.w	r3, r3, r2
   1db28:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1db2a:	4621      	mov	r1, r4
   1db2c:	4630      	mov	r0, r6
   1db2e:	f7f3 fb47 	bl	111c0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1db32:	2800      	cmp	r0, #0
   1db34:	d1f1      	bne.n	1db1a <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db36:	3401      	adds	r4, #1
   1db38:	b2e4      	uxtb	r4, r4
   1db3a:	e7eb      	b.n	1db14 <gpio_nrfx_pin_disable_callback+0x1a>

0001db3c <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1db3c:	2901      	cmp	r1, #1
{
   1db3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1db42:	bf18      	it	ne
   1db44:	b2d4      	uxtbne	r4, r2
{
   1db46:	4606      	mov	r6, r0
		to_pin   = pin;
   1db48:	bf12      	itee	ne
   1db4a:	4625      	movne	r5, r4
		to_pin   = 31U;
   1db4c:	251f      	moveq	r5, #31
		from_pin = 0U;
   1db4e:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db50:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1db54:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db56:	42ac      	cmp	r4, r5
   1db58:	d902      	bls.n	1db60 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1db5a:	2000      	movs	r0, #0
}
   1db5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1db60:	68fb      	ldr	r3, [r7, #12]
   1db62:	fa08 f204 	lsl.w	r2, r8, r4
   1db66:	4313      	orrs	r3, r2
   1db68:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1db6a:	4621      	mov	r1, r4
   1db6c:	4630      	mov	r0, r6
   1db6e:	f7f3 fb27 	bl	111c0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1db72:	2800      	cmp	r0, #0
   1db74:	d1f2      	bne.n	1db5c <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1db76:	3401      	adds	r4, #1
   1db78:	b2e4      	uxtb	r4, r4
   1db7a:	e7ec      	b.n	1db56 <gpio_nrfx_pin_enable_callback+0x1a>

0001db7c <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1db7c:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1db7e:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1db80:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1db82:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   1db84:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1db86:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1db88:	b159      	cbz	r1, 1dba2 <uarte_nrfx_isr_int+0x26>
   1db8a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1db8e:	b141      	cbz	r1, 1dba2 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1db90:	f44f 7180 	mov.w	r1, #256	; 0x100
   1db94:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1db98:	2101      	movs	r1, #1
   1db9a:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1db9c:	2300      	movs	r3, #0
   1db9e:	7393      	strb	r3, [r2, #14]
		return;
   1dba0:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dba2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1dba6:	b111      	cbz	r1, 1dbae <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dba8:	2100      	movs	r1, #0
   1dbaa:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1dbae:	6813      	ldr	r3, [r2, #0]
   1dbb0:	b10b      	cbz	r3, 1dbb6 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1dbb2:	6850      	ldr	r0, [r2, #4]
   1dbb4:	4718      	bx	r3
}
   1dbb6:	4770      	bx	lr

0001dbb8 <uarte_nrfx_config_get>:
{
   1dbb8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1dbba:	6882      	ldr	r2, [r0, #8]
   1dbbc:	e892 0003 	ldmia.w	r2, {r0, r1}
   1dbc0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1dbc4:	2000      	movs	r0, #0
   1dbc6:	4770      	bx	lr

0001dbc8 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1dbc8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dbca:	689b      	ldr	r3, [r3, #8]
   1dbcc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1dbce:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1dbd2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1dbd6:	4770      	bx	lr

0001dbd8 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1dbd8:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1dbda:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1dbdc:	689b      	ldr	r3, [r3, #8]
   1dbde:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbe0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1dbe4:	b138      	cbz	r0, 1dbf6 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1dbe6:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbe8:	2000      	movs	r0, #0
   1dbea:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbec:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbee:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbf2:	601a      	str	r2, [r3, #0]
	return 0;
   1dbf4:	4770      	bx	lr
		return -1;
   1dbf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1dbfa:	4770      	bx	lr

0001dbfc <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbfc:	2200      	movs	r2, #0
	return dev->config->config_info;
   1dbfe:	6803      	ldr	r3, [r0, #0]
{
   1dc00:	b082      	sub	sp, #8
	return config->uarte_regs;
   1dc02:	689b      	ldr	r3, [r3, #8]
{
   1dc04:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1dc08:	681b      	ldr	r3, [r3, #0]
   1dc0a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1dc0e:	f10d 0207 	add.w	r2, sp, #7
   1dc12:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1dc16:	2201      	movs	r2, #1
   1dc18:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc1c:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc1e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dc22:	2900      	cmp	r1, #0
   1dc24:	d0fb      	beq.n	1dc1e <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc26:	60da      	str	r2, [r3, #12]
}
   1dc28:	b002      	add	sp, #8
   1dc2a:	4770      	bx	lr

0001dc2c <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1dc2c:	6803      	ldr	r3, [r0, #0]
{
   1dc2e:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1dc30:	689b      	ldr	r3, [r3, #8]
   1dc32:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc34:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dc38:	b1bb      	cbz	r3, 1dc6a <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1dc3a:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1dc3c:	68ab      	ldr	r3, [r5, #8]
   1dc3e:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc40:	2300      	movs	r3, #0
   1dc42:	4290      	cmp	r0, r2
   1dc44:	bfa8      	it	ge
   1dc46:	4610      	movge	r0, r2
   1dc48:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1dc4c:	68aa      	ldr	r2, [r5, #8]
   1dc4e:	4283      	cmp	r3, r0
   1dc50:	6892      	ldr	r2, [r2, #8]
   1dc52:	db06      	blt.n	1dc62 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc54:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1dc56:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1dc5a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc5e:	60a3      	str	r3, [r4, #8]
}
   1dc60:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1dc62:	5cce      	ldrb	r6, [r1, r3]
   1dc64:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1dc66:	3301      	adds	r3, #1
   1dc68:	e7f0      	b.n	1dc4c <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1dc6a:	4618      	mov	r0, r3
   1dc6c:	e7f8      	b.n	1dc60 <uarte_nrfx_fifo_fill+0x34>

0001dc6e <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1dc6e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dc70:	689b      	ldr	r3, [r3, #8]
   1dc72:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc74:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1dc78:	b143      	cbz	r3, 1dc8c <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1dc7a:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc7c:	2000      	movs	r0, #0
   1dc7e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc82:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1dc84:	7b1b      	ldrb	r3, [r3, #12]
   1dc86:	700b      	strb	r3, [r1, #0]
   1dc88:	6010      	str	r0, [r2, #0]
   1dc8a:	4770      	bx	lr
	int num_rx = 0;
   1dc8c:	4618      	mov	r0, r3
}
   1dc8e:	4770      	bx	lr

0001dc90 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1dc90:	2100      	movs	r1, #0
	return dev->config->config_info;
   1dc92:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1dc94:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1dc96:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   1dc98:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1dc9a:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1dc9c:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1dc9e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1dca2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dca6:	4770      	bx	lr

0001dca8 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1dca8:	2201      	movs	r2, #1
   1dcaa:	6883      	ldr	r3, [r0, #8]
   1dcac:	689b      	ldr	r3, [r3, #8]
   1dcae:	739a      	strb	r2, [r3, #14]
}
   1dcb0:	4770      	bx	lr

0001dcb2 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1dcb2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcb4:	689b      	ldr	r3, [r3, #8]
   1dcb6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dcb8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1dcbc:	b118      	cbz	r0, 1dcc6 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1dcbe:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1dcc2:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1dcc6:	4770      	bx	lr

0001dcc8 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1dcc8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcca:	689b      	ldr	r3, [r3, #8]
   1dccc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dcce:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1dcd2:	3000      	adds	r0, #0
   1dcd4:	bf18      	it	ne
   1dcd6:	2001      	movne	r0, #1
   1dcd8:	4770      	bx	lr

0001dcda <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1dcda:	2210      	movs	r2, #16
	return dev->config->config_info;
   1dcdc:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcde:	689b      	ldr	r3, [r3, #8]
   1dce0:	681b      	ldr	r3, [r3, #0]
   1dce2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dce6:	4770      	bx	lr

0001dce8 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1dce8:	2210      	movs	r2, #16
	return dev->config->config_info;
   1dcea:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcec:	689b      	ldr	r3, [r3, #8]
   1dcee:	681b      	ldr	r3, [r3, #0]
   1dcf0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dcf4:	4770      	bx	lr

0001dcf6 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1dcf6:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1dcfa:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dcfc:	689b      	ldr	r3, [r3, #8]
   1dcfe:	681b      	ldr	r3, [r3, #0]
   1dd00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dd04:	4770      	bx	lr

0001dd06 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1dd06:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1dd0a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1dd0c:	689b      	ldr	r3, [r3, #8]
   1dd0e:	681b      	ldr	r3, [r3, #0]
   1dd10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dd14:	4770      	bx	lr

0001dd16 <uarte_nrfx_irq_update>:
}
   1dd16:	2001      	movs	r0, #1
   1dd18:	4770      	bx	lr

0001dd1a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1dd1a:	6883      	ldr	r3, [r0, #8]
   1dd1c:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1dd1e:	e9c3 1200 	strd	r1, r2, [r3]
}
   1dd22:	4770      	bx	lr

0001dd24 <uarte_nrfx_irq_is_pending>:
{
   1dd24:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1dd26:	6803      	ldr	r3, [r0, #0]
{
   1dd28:	4602      	mov	r2, r0
	return config->uarte_regs;
   1dd2a:	689b      	ldr	r3, [r3, #8]
   1dd2c:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1dd2e:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1dd32:	05db      	lsls	r3, r3, #23
   1dd34:	d405      	bmi.n	1dd42 <uarte_nrfx_irq_is_pending+0x1e>
   1dd36:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1dd3a:	f010 0010 	ands.w	r0, r0, #16
   1dd3e:	d106      	bne.n	1dd4e <uarte_nrfx_irq_is_pending+0x2a>
}
   1dd40:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1dd42:	f7ff ffb6 	bl	1dcb2 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1dd46:	2800      	cmp	r0, #0
   1dd48:	d0f5      	beq.n	1dd36 <uarte_nrfx_irq_is_pending+0x12>
		||
   1dd4a:	2001      	movs	r0, #1
   1dd4c:	e7f8      	b.n	1dd40 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1dd4e:	4610      	mov	r0, r2
   1dd50:	f7ff ffba 	bl	1dcc8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1dd54:	3000      	adds	r0, #0
   1dd56:	bf18      	it	ne
   1dd58:	2001      	movne	r0, #1
   1dd5a:	e7f1      	b.n	1dd40 <uarte_nrfx_irq_is_pending+0x1c>

0001dd5c <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1dd5c:	2000      	movs	r0, #0
   1dd5e:	4770      	bx	lr

0001dd60 <entropy_cc310_rng_get_entropy>:
{
   1dd60:	b513      	push	{r0, r1, r4, lr}
   1dd62:	4614      	mov	r4, r2
   1dd64:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1dd66:	aa01      	add	r2, sp, #4
   1dd68:	4621      	mov	r1, r4
   1dd6a:	f7ea f941 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1dd6e:	9b01      	ldr	r3, [sp, #4]
   1dd70:	429c      	cmp	r4, r3
}
   1dd72:	bf18      	it	ne
   1dd74:	f06f 0015 	mvnne.w	r0, #21
   1dd78:	b002      	add	sp, #8
   1dd7a:	bd10      	pop	{r4, pc}

0001dd7c <z_errno>:
   1dd7c:	f7fd b90a 	b.w	1af94 <z_impl_z_errno>

0001dd80 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1dd80:	4668      	mov	r0, sp
   1dd82:	f020 0107 	bic.w	r1, r0, #7
   1dd86:	468d      	mov	sp, r1
   1dd88:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1dd8a:	f7f7 f81b 	bl	14dc4 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1dd8e:	f7f1 fdc1 	bl	f914 <_arch_isr_direct_pm>
   1dd92:	f7f1 fd01 	bl	f798 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1dd96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1dd9a:	4685      	mov	sp, r0
   1dd9c:	4770      	bx	lr

0001dd9e <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1dd9e:	4668      	mov	r0, sp
   1dda0:	f020 0107 	bic.w	r1, r0, #7
   1dda4:	468d      	mov	sp, r1
   1dda6:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1dda8:	f7f7 fc10 	bl	155cc <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1ddac:	f7f1 fdb2 	bl	f914 <_arch_isr_direct_pm>
   1ddb0:	f7f1 fcf2 	bl	f798 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1ddb4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ddb8:	4685      	mov	sp, r0
   1ddba:	4770      	bx	lr

0001ddbc <trace_task_create>:
{
   1ddbc:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1ddbe:	201d      	movs	r0, #29
   1ddc0:	2200      	movs	r2, #0
   1ddc2:	2106      	movs	r1, #6
   1ddc4:	f7f1 fd8e 	bl	f8e4 <z_arm_irq_priority_set>
}
   1ddc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1ddcc:	201d      	movs	r0, #29
   1ddce:	f7f1 bd79 	b.w	f8c4 <arch_irq_enable>

0001ddd2 <read_task_create>:
{
   1ddd2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1ddd4:	201c      	movs	r0, #28
   1ddd6:	2200      	movs	r2, #0
   1ddd8:	2106      	movs	r1, #6
   1ddda:	f7f1 fd83 	bl	f8e4 <z_arm_irq_priority_set>
}
   1ddde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1dde2:	201c      	movs	r0, #28
   1dde4:	f7f1 bd6e 	b.w	f8c4 <arch_irq_enable>

0001dde8 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1dde8:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1ddec:	bf18      	it	ne
   1ddee:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1ddf0:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1ddf2:	bf48      	it	mi
   1ddf4:	f043 0308 	orrmi.w	r3, r3, #8
}
   1ddf8:	4618      	mov	r0, r3
   1ddfa:	4770      	bx	lr

0001ddfc <z_to_nrf_family>:
	switch (z_family) {
   1ddfc:	2803      	cmp	r0, #3
   1ddfe:	d00f      	beq.n	1de20 <z_to_nrf_family+0x24>
   1de00:	d808      	bhi.n	1de14 <z_to_nrf_family+0x18>
   1de02:	2801      	cmp	r0, #1
   1de04:	d00e      	beq.n	1de24 <z_to_nrf_family+0x28>
   1de06:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1de08:	bf08      	it	eq
   1de0a:	200a      	moveq	r0, #10
   1de0c:	bf18      	it	ne
   1de0e:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1de12:	4770      	bx	lr
	switch (z_family) {
   1de14:	2866      	cmp	r0, #102	; 0x66
   1de16:	d006      	beq.n	1de26 <z_to_nrf_family+0x2a>
   1de18:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1de1a:	bf08      	it	eq
   1de1c:	2001      	moveq	r0, #1
   1de1e:	e7f5      	b.n	1de0c <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1de20:	2005      	movs	r0, #5
   1de22:	4770      	bx	lr
		return NRF_AF_INET;
   1de24:	2002      	movs	r0, #2
}
   1de26:	4770      	bx	lr

0001de28 <z_to_nrf_protocol>:
	switch (proto) {
   1de28:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1de2c:	d01d      	beq.n	1de6a <z_to_nrf_protocol+0x42>
   1de2e:	dc08      	bgt.n	1de42 <z_to_nrf_protocol+0x1a>
   1de30:	2806      	cmp	r0, #6
   1de32:	d01d      	beq.n	1de70 <z_to_nrf_protocol+0x48>
   1de34:	2811      	cmp	r0, #17
   1de36:	d01d      	beq.n	1de74 <z_to_nrf_protocol+0x4c>
   1de38:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1de3a:	bf18      	it	ne
   1de3c:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1de40:	4770      	bx	lr
	switch (proto) {
   1de42:	f240 2301 	movw	r3, #513	; 0x201
   1de46:	4298      	cmp	r0, r3
   1de48:	d015      	beq.n	1de76 <z_to_nrf_protocol+0x4e>
   1de4a:	dc06      	bgt.n	1de5a <z_to_nrf_protocol+0x32>
   1de4c:	f240 1311 	movw	r3, #273	; 0x111
   1de50:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1de52:	bf08      	it	eq
   1de54:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1de58:	e7ef      	b.n	1de3a <z_to_nrf_protocol+0x12>
	switch (proto) {
   1de5a:	f240 2302 	movw	r3, #514	; 0x202
   1de5e:	4298      	cmp	r0, r3
   1de60:	d009      	beq.n	1de76 <z_to_nrf_protocol+0x4e>
   1de62:	f240 2303 	movw	r3, #515	; 0x203
   1de66:	4298      	cmp	r0, r3
   1de68:	e7e7      	b.n	1de3a <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1de6a:	f44f 7082 	mov.w	r0, #260	; 0x104
   1de6e:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1de70:	2001      	movs	r0, #1
   1de72:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1de74:	2002      	movs	r0, #2
}
   1de76:	4770      	bx	lr

0001de78 <nrf91_bsdlib_socket_offload_init>:
}
   1de78:	2000      	movs	r0, #0
   1de7a:	4770      	bx	lr

0001de7c <z_errno>:
   1de7c:	f7fd b88a 	b.w	1af94 <z_impl_z_errno>

0001de80 <nrf91_socket_offload_freeaddrinfo>:
{
   1de80:	b538      	push	{r3, r4, r5, lr}
   1de82:	4604      	mov	r4, r0
	while (next != NULL) {
   1de84:	b904      	cbnz	r4, 1de88 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1de86:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1de88:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1de8a:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1de8c:	f000 fd35 	bl	1e8fa <k_free>
		k_free(this);
   1de90:	4620      	mov	r0, r4
   1de92:	f000 fd32 	bl	1e8fa <k_free>
		next = next->ai_next;
   1de96:	462c      	mov	r4, r5
   1de98:	e7f4      	b.n	1de84 <nrf91_socket_offload_freeaddrinfo+0x4>

0001de9a <z_to_nrf_addrinfo_hints>:
{
   1de9a:	b538      	push	{r3, r4, r5, lr}
   1de9c:	460c      	mov	r4, r1
   1de9e:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1dea0:	2220      	movs	r2, #32
   1dea2:	2100      	movs	r1, #0
   1dea4:	4620      	mov	r0, r4
   1dea6:	f7ff fc00 	bl	1d6aa <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1deaa:	2300      	movs	r3, #0
   1deac:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1deae:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1deb0:	2b03      	cmp	r3, #3
   1deb2:	d003      	beq.n	1debc <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1deb4:	2b04      	cmp	r3, #4
   1deb6:	bf08      	it	eq
   1deb8:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1debc:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1debe:	88a8      	ldrh	r0, [r5, #4]
   1dec0:	f7ff ff9c 	bl	1ddfc <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1dec4:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1dec8:	d00b      	beq.n	1dee2 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1deca:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1decc:	68e8      	ldr	r0, [r5, #12]
   1dece:	f7ff ffab 	bl	1de28 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1ded2:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1ded6:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1ded8:	d003      	beq.n	1dee2 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1deda:	69a8      	ldr	r0, [r5, #24]
   1dedc:	b108      	cbz	r0, 1dee2 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1dede:	61a0      	str	r0, [r4, #24]
	return 0;
   1dee0:	2000      	movs	r0, #0
}
   1dee2:	bd38      	pop	{r3, r4, r5, pc}

0001dee4 <nrf91_socket_offload_send>:
{
   1dee4:	b570      	push	{r4, r5, r6, lr}
   1dee6:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1dee8:	4618      	mov	r0, r3
{
   1deea:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1deec:	f7ff ff7c 	bl	1dde8 <z_to_nrf_flags>
   1def0:	462a      	mov	r2, r5
   1def2:	4603      	mov	r3, r0
   1def4:	4620      	mov	r0, r4
}
   1def6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1defa:	f7f9 b98b 	b.w	17214 <nrf_send>

0001defe <nrf91_socket_offload_recv>:
{
   1defe:	b570      	push	{r4, r5, r6, lr}
   1df00:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1df02:	4618      	mov	r0, r3
{
   1df04:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1df06:	f7ff ff6f 	bl	1dde8 <z_to_nrf_flags>
   1df0a:	462a      	mov	r2, r5
   1df0c:	4603      	mov	r3, r0
   1df0e:	4620      	mov	r0, r4
}
   1df10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1df14:	f7f9 b9b4 	b.w	17280 <nrf_recv>

0001df18 <nrf91_socket_offload_getsockopt>:
{
   1df18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df1c:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1df1e:	2300      	movs	r3, #0
{
   1df20:	b086      	sub	sp, #24
   1df22:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1df26:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1df2a:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1df2e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1df32:	4607      	mov	r7, r0
   1df34:	460c      	mov	r4, r1
   1df36:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1df38:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1df3a:	d002      	beq.n	1df42 <nrf91_socket_offload_getsockopt+0x2a>
   1df3c:	dc2b      	bgt.n	1df96 <nrf91_socket_offload_getsockopt+0x7e>
   1df3e:	2901      	cmp	r1, #1
   1df40:	d13d      	bne.n	1dfbe <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1df42:	aa02      	add	r2, sp, #8
   1df44:	4631      	mov	r1, r6
   1df46:	4620      	mov	r0, r4
   1df48:	f7f3 fe58 	bl	11bfc <z_to_nrf_optname>
   1df4c:	2800      	cmp	r0, #0
   1df4e:	db36      	blt.n	1dfbe <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1df50:	2c01      	cmp	r4, #1
   1df52:	d128      	bne.n	1dfa6 <nrf91_socket_offload_getsockopt+0x8e>
   1df54:	2e14      	cmp	r6, #20
   1df56:	d126      	bne.n	1dfa6 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1df58:	2308      	movs	r3, #8
   1df5a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1df5c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1df5e:	aa03      	add	r2, sp, #12
   1df60:	9200      	str	r2, [sp, #0]
   1df62:	4638      	mov	r0, r7
   1df64:	9a02      	ldr	r2, [sp, #8]
   1df66:	4621      	mov	r1, r4
   1df68:	f7f9 fa0a 	bl	17380 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1df6c:	4607      	mov	r7, r0
   1df6e:	b970      	cbnz	r0, 1df8e <nrf91_socket_offload_getsockopt+0x76>
   1df70:	b16d      	cbz	r5, 1df8e <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1df72:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1df74:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1df76:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1df7a:	d108      	bne.n	1df8e <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1df7c:	2e04      	cmp	r6, #4
   1df7e:	d114      	bne.n	1dfaa <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1df80:	6828      	ldr	r0, [r5, #0]
   1df82:	f7f3 fd1f 	bl	119c4 <bsd_os_errno_set>
				*(int *)optval = errno;
   1df86:	f7ff ff79 	bl	1de7c <z_errno>
   1df8a:	6803      	ldr	r3, [r0, #0]
   1df8c:	602b      	str	r3, [r5, #0]
}
   1df8e:	4638      	mov	r0, r7
   1df90:	b006      	add	sp, #24
   1df92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1df96:	f240 2302 	movw	r3, #514	; 0x202
   1df9a:	4299      	cmp	r1, r3
   1df9c:	d0d1      	beq.n	1df42 <nrf91_socket_offload_getsockopt+0x2a>
   1df9e:	f240 2303 	movw	r3, #515	; 0x203
   1dfa2:	4299      	cmp	r1, r3
   1dfa4:	e7cc      	b.n	1df40 <nrf91_socket_offload_getsockopt+0x28>
   1dfa6:	462b      	mov	r3, r5
   1dfa8:	e7d9      	b.n	1df5e <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1dfaa:	2e14      	cmp	r6, #20
   1dfac:	d1ef      	bne.n	1df8e <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1dfae:	9b04      	ldr	r3, [sp, #16]
   1dfb0:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1dfb2:	9b05      	ldr	r3, [sp, #20]
   1dfb4:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1dfb6:	2308      	movs	r3, #8
   1dfb8:	f8c8 3000 	str.w	r3, [r8]
   1dfbc:	e7e7      	b.n	1df8e <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1dfbe:	f7ff ff5d 	bl	1de7c <z_errno>
   1dfc2:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1dfc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1dfc8:	6003      	str	r3, [r0, #0]
	return retval;
   1dfca:	e7e0      	b.n	1df8e <nrf91_socket_offload_getsockopt+0x76>

0001dfcc <nrf91_socket_offload_poll>:
{
   1dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfce:	b091      	sub	sp, #68	; 0x44
   1dfd0:	4605      	mov	r5, r0
   1dfd2:	460c      	mov	r4, r1
   1dfd4:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1dfd6:	2100      	movs	r1, #0
   1dfd8:	2240      	movs	r2, #64	; 0x40
   1dfda:	4668      	mov	r0, sp
   1dfdc:	f7ff fb65 	bl	1d6aa <memset>
	for (int i = 0; i < nfds; i++) {
   1dfe0:	466a      	mov	r2, sp
   1dfe2:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1dfe4:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1dfe6:	42a1      	cmp	r1, r4
   1dfe8:	db0c      	blt.n	1e004 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1dfea:	4632      	mov	r2, r6
   1dfec:	4621      	mov	r1, r4
   1dfee:	4668      	mov	r0, sp
   1dff0:	f7f9 f9e6 	bl	173c0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1dff4:	2200      	movs	r2, #0
   1dff6:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1dff8:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1dffa:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1dffc:	42a2      	cmp	r2, r4
   1dffe:	db1a      	blt.n	1e036 <nrf91_socket_offload_poll+0x6a>
}
   1e000:	b011      	add	sp, #68	; 0x44
   1e002:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1e004:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1e008:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1e00c:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1e00e:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1e010:	bf48      	it	mi
   1e012:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1e014:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1e018:	bf44      	itt	mi
   1e01a:	f043 0301 	orrmi.w	r3, r3, #1
   1e01e:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1e020:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1e022:	bf48      	it	mi
   1e024:	8893      	ldrhmi	r3, [r2, #4]
   1e026:	f102 0208 	add.w	r2, r2, #8
   1e02a:	bf44      	itt	mi
   1e02c:	f043 0302 	orrmi.w	r3, r3, #2
   1e030:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1e034:	e7d7      	b.n	1dfe6 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1e036:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1e03a:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1e03c:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1e03e:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1e040:	bf48      	it	mi
   1e042:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1e044:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1e046:	bf48      	it	mi
   1e048:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1e04a:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1e04e:	bf44      	itt	mi
   1e050:	f045 0504 	orrmi.w	r5, r5, #4
   1e054:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1e056:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1e058:	bf48      	it	mi
   1e05a:	88dd      	ldrhmi	r5, [r3, #6]
   1e05c:	f103 0308 	add.w	r3, r3, #8
   1e060:	bf44      	itt	mi
   1e062:	f045 0508 	orrmi.w	r5, r5, #8
   1e066:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1e06a:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1e06c:	bf42      	ittt	mi
   1e06e:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1e072:	f045 0520 	orrmi.w	r5, r5, #32
   1e076:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1e07a:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1e07c:	bf42      	ittt	mi
   1e07e:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1e082:	f041 0110 	orrmi.w	r1, r1, #16
   1e086:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1e08a:	e7b7      	b.n	1dffc <nrf91_socket_offload_poll+0x30>

0001e08c <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1e08c:	f7f9 b924 	b.w	172d8 <nrf_listen>

0001e090 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1e090:	f7f9 b896 	b.w	171c0 <nrf_close>

0001e094 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1e094:	2903      	cmp	r1, #3
{
   1e096:	b508      	push	{r3, lr}
	switch (cmd) {
   1e098:	d00b      	beq.n	1e0b2 <nrf91_socket_offload_fcntl+0x1e>
   1e09a:	2904      	cmp	r1, #4
   1e09c:	d111      	bne.n	1e0c2 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1e09e:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1e0a0:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1e0a4:	d10d      	bne.n	1e0c2 <nrf91_socket_offload_fcntl+0x2e>
}
   1e0a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1e0aa:	1392      	asrs	r2, r2, #14
   1e0ac:	2101      	movs	r1, #1
   1e0ae:	f7f9 b989 	b.w	173c4 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1e0b2:	2200      	movs	r2, #0
   1e0b4:	2102      	movs	r1, #2
   1e0b6:	f7f9 f985 	bl	173c4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1e0ba:	0380      	lsls	r0, r0, #14
   1e0bc:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1e0c0:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1e0c2:	f7ff fedb 	bl	1de7c <z_errno>
   1e0c6:	2316      	movs	r3, #22
   1e0c8:	6003      	str	r3, [r0, #0]
	return retval;
   1e0ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0ce:	e7f7      	b.n	1e0c0 <nrf91_socket_offload_fcntl+0x2c>

0001e0d0 <nrf91_socket_offload_recvfrom>:
{
   1e0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0d2:	4605      	mov	r5, r0
   1e0d4:	b08d      	sub	sp, #52	; 0x34
   1e0d6:	4618      	mov	r0, r3
   1e0d8:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1e0dc:	4617      	mov	r7, r2
	if (from == NULL) {
   1e0de:	f7ff fe83 	bl	1dde8 <z_to_nrf_flags>
   1e0e2:	4603      	mov	r3, r0
   1e0e4:	b94c      	cbnz	r4, 1e0fa <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e0e6:	4628      	mov	r0, r5
   1e0e8:	e9cd 4400 	strd	r4, r4, [sp]
   1e0ec:	463a      	mov	r2, r7
   1e0ee:	f7f9 f8ab 	bl	17248 <nrf_recvfrom>
   1e0f2:	4605      	mov	r5, r0
}
   1e0f4:	4628      	mov	r0, r5
   1e0f6:	b00d      	add	sp, #52	; 0x34
   1e0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1e0fa:	2224      	movs	r2, #36	; 0x24
   1e0fc:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e0fe:	aa02      	add	r2, sp, #8
   1e100:	9201      	str	r2, [sp, #4]
   1e102:	aa03      	add	r2, sp, #12
   1e104:	9200      	str	r2, [sp, #0]
   1e106:	4628      	mov	r0, r5
   1e108:	463a      	mov	r2, r7
   1e10a:	f7f9 f89d 	bl	17248 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e10e:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1e110:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1e112:	2b02      	cmp	r3, #2
   1e114:	d109      	bne.n	1e12a <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1e116:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1e11a:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e11c:	2301      	movs	r3, #1
   1e11e:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e120:	9b06      	ldr	r3, [sp, #24]
   1e122:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1e124:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1e126:	6033      	str	r3, [r6, #0]
	return retval;
   1e128:	e7e4      	b.n	1e0f4 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1e12a:	2b0a      	cmp	r3, #10
   1e12c:	d1e2      	bne.n	1e0f4 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1e12e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1e132:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1e134:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1e136:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e138:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1e13a:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e13e:	a907      	add	r1, sp, #28
   1e140:	f7ff fa89 	bl	1d656 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e146:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1e148:	2318      	movs	r3, #24
   1e14a:	e7ec      	b.n	1e126 <nrf91_socket_offload_recvfrom+0x56>

0001e14c <nrf91_socket_offload_connect>:
{
   1e14c:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e14e:	880b      	ldrh	r3, [r1, #0]
{
   1e150:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e152:	2b01      	cmp	r3, #1
{
   1e154:	4606      	mov	r6, r0
   1e156:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e158:	d10e      	bne.n	1e178 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e15a:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e15c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e15e:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e162:	2302      	movs	r3, #2
   1e164:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e166:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e168:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e16c:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1e16e:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e170:	f7f9 f8a0 	bl	172b4 <nrf_connect>
}
   1e174:	b00a      	add	sp, #40	; 0x28
   1e176:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e178:	2b02      	cmp	r3, #2
   1e17a:	d112      	bne.n	1e1a2 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e17c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e17e:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e180:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e184:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e186:	2210      	movs	r2, #16
   1e188:	3104      	adds	r1, #4
   1e18a:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e18c:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e18e:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e192:	f7ff fa60 	bl	1d656 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e196:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e198:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e19a:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1e19c:	a901      	add	r1, sp, #4
   1e19e:	4630      	mov	r0, r6
   1e1a0:	e7e6      	b.n	1e170 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1e1a2:	f7f9 f887 	bl	172b4 <nrf_connect>
		if (retval < 0) {
   1e1a6:	2800      	cmp	r0, #0
   1e1a8:	dae4      	bge.n	1e174 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1e1aa:	f7ff fe67 	bl	1de7c <z_errno>
   1e1ae:	2323      	movs	r3, #35	; 0x23
   1e1b0:	6003      	str	r3, [r0, #0]
   1e1b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1b6:	e7dd      	b.n	1e174 <nrf91_socket_offload_connect+0x28>

0001e1b8 <nrf91_socket_offload_socket>:
{
   1e1b8:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1e1ba:	b280      	uxth	r0, r0
   1e1bc:	f7ff fe1e 	bl	1ddfc <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1e1c0:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1e1c4:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1e1c6:	d106      	bne.n	1e1d6 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1e1c8:	f7ff fe58 	bl	1de7c <z_errno>
   1e1cc:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1e1ce:	6003      	str	r3, [r0, #0]
}
   1e1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1d4:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1e1d6:	2903      	cmp	r1, #3
   1e1d8:	d003      	beq.n	1e1e2 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1e1da:	2904      	cmp	r1, #4
   1e1dc:	bf08      	it	eq
   1e1de:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1e1e2:	4610      	mov	r0, r2
   1e1e4:	f7ff fe20 	bl	1de28 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1e1e8:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1e1ec:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1e1ee:	d103      	bne.n	1e1f8 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1e1f0:	f7ff fe44 	bl	1de7c <z_errno>
   1e1f4:	232b      	movs	r3, #43	; 0x2b
   1e1f6:	e7ea      	b.n	1e1ce <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1e1f8:	4620      	mov	r0, r4
}
   1e1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1e1fe:	f7f8 bfcd 	b.w	1719c <nrf_socket>

0001e202 <nrf91_socket_offload_accept>:
{
   1e202:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1e204:	2708      	movs	r7, #8
{
   1e206:	b085      	sub	sp, #20
   1e208:	460c      	mov	r4, r1
   1e20a:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1e20c:	eb0d 0107 	add.w	r1, sp, r7
   1e210:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1e212:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1e214:	f7f9 f870 	bl	172f8 <nrf_accept>
	if (retval < 0) {
   1e218:	1e05      	subs	r5, r0, #0
   1e21a:	db23      	blt.n	1e264 <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1e21c:	9b03      	ldr	r3, [sp, #12]
   1e21e:	2b02      	cmp	r3, #2
   1e220:	d10a      	bne.n	1e238 <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1e222:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1e226:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1e228:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1e22a:	2301      	movs	r3, #1
   1e22c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e22e:	9b05      	ldr	r3, [sp, #20]
   1e230:	6063      	str	r3, [r4, #4]
}
   1e232:	4628      	mov	r0, r5
   1e234:	b005      	add	sp, #20
   1e236:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1e238:	2b0a      	cmp	r3, #10
   1e23a:	d10f      	bne.n	1e25c <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1e23c:	2318      	movs	r3, #24
   1e23e:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1e240:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1e244:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1e246:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1e248:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e24a:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1e24c:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e250:	a906      	add	r1, sp, #24
   1e252:	f7ff fa00 	bl	1d656 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e258:	7523      	strb	r3, [r4, #20]
   1e25a:	e7ea      	b.n	1e232 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1e25c:	f7ff fe0e 	bl	1de7c <z_errno>
   1e260:	2323      	movs	r3, #35	; 0x23
   1e262:	6003      	str	r3, [r0, #0]
		return -1;
   1e264:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e268:	e7e3      	b.n	1e232 <nrf91_socket_offload_accept+0x30>

0001e26a <nrf91_socket_offload_getaddrinfo>:
{
   1e26a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e26e:	4614      	mov	r4, r2
   1e270:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1e272:	2100      	movs	r1, #0
{
   1e274:	b093      	sub	sp, #76	; 0x4c
   1e276:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e278:	2220      	movs	r2, #32
   1e27a:	a802      	add	r0, sp, #8
{
   1e27c:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1e27e:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e280:	f7ff fa13 	bl	1d6aa <memset>
	if (hints != NULL) {
   1e284:	b194      	cbz	r4, 1e2ac <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1e286:	a902      	add	r1, sp, #8
   1e288:	4620      	mov	r0, r4
   1e28a:	f7ff fe06 	bl	1de9a <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1e28e:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1e292:	f000 80bf 	beq.w	1e414 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1e296:	302f      	adds	r0, #47	; 0x2f
   1e298:	f000 80bf 	beq.w	1e41a <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1e29c:	69e0      	ldr	r0, [r4, #28]
   1e29e:	b120      	cbz	r0, 1e2aa <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1e2a0:	ac0a      	add	r4, sp, #40	; 0x28
   1e2a2:	4621      	mov	r1, r4
   1e2a4:	f7ff fdf9 	bl	1de9a <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1e2a8:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1e2aa:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1e2ac:	4631      	mov	r1, r6
   1e2ae:	4628      	mov	r0, r5
   1e2b0:	ab01      	add	r3, sp, #4
   1e2b2:	4622      	mov	r2, r4
   1e2b4:	f7f9 f880 	bl	173b8 <nrf_getaddrinfo>
	*res = NULL;
   1e2b8:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1e2ba:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1e2bc:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1e2c0:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e2c4:	4605      	mov	r5, r0
   1e2c6:	2800      	cmp	r0, #0
   1e2c8:	d04a      	beq.n	1e360 <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1e2ca:	f8d8 0000 	ldr.w	r0, [r8]
   1e2ce:	f7ff fdd7 	bl	1de80 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1e2d2:	2300      	movs	r3, #0
   1e2d4:	f8c8 3000 	str.w	r3, [r8]
   1e2d8:	e044      	b.n	1e364 <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1e2da:	2020      	movs	r0, #32
   1e2dc:	f7fd f8a8 	bl	1b430 <k_malloc>
		if (next_z_res == NULL) {
   1e2e0:	4604      	mov	r4, r0
   1e2e2:	2800      	cmp	r0, #0
   1e2e4:	f000 8091 	beq.w	1e40a <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1e2e8:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e2ea:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1e2ec:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1e2ee:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1e2f2:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e2f4:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1e2f6:	d03c      	beq.n	1e372 <nrf91_socket_offload_getaddrinfo+0x108>
   1e2f8:	dc09      	bgt.n	1e30e <nrf91_socket_offload_getaddrinfo+0xa4>
   1e2fa:	2a01      	cmp	r2, #1
   1e2fc:	d03b      	beq.n	1e376 <nrf91_socket_offload_getaddrinfo+0x10c>
   1e2fe:	2a02      	cmp	r2, #2
   1e300:	d03b      	beq.n	1e37a <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1e302:	4620      	mov	r0, r4
   1e304:	f000 faf9 	bl	1e8fa <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1e308:	f06f 0508 	mvn.w	r5, #8
   1e30c:	e7dd      	b.n	1e2ca <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1e30e:	2a0a      	cmp	r2, #10
   1e310:	d035      	beq.n	1e37e <nrf91_socket_offload_getaddrinfo+0x114>
   1e312:	2a66      	cmp	r2, #102	; 0x66
   1e314:	d1f5      	bne.n	1e302 <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1e316:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1e318:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e31a:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1e31c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1e320:	d04e      	beq.n	1e3c0 <nrf91_socket_offload_getaddrinfo+0x156>
   1e322:	dc2e      	bgt.n	1e382 <nrf91_socket_offload_getaddrinfo+0x118>
   1e324:	2b01      	cmp	r3, #1
   1e326:	d050      	beq.n	1e3ca <nrf91_socket_offload_getaddrinfo+0x160>
   1e328:	2b02      	cmp	r3, #2
   1e32a:	d04c      	beq.n	1e3c6 <nrf91_socket_offload_getaddrinfo+0x15c>
   1e32c:	2b00      	cmp	r3, #0
   1e32e:	d130      	bne.n	1e392 <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e330:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e332:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e334:	d14b      	bne.n	1e3ce <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1e336:	2008      	movs	r0, #8
   1e338:	f7fd f87a 	bl	1b430 <k_malloc>
   1e33c:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e33e:	2800      	cmp	r0, #0
   1e340:	d060      	beq.n	1e404 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1e342:	2308      	movs	r3, #8
   1e344:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1e346:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1e348:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e34a:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1e34c:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1e34e:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e350:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1e352:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1e354:	2f00      	cmp	r7, #0
   1e356:	d15b      	bne.n	1e410 <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1e358:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1e35c:	4627      	mov	r7, r4
   1e35e:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e360:	2e00      	cmp	r6, #0
   1e362:	d1ba      	bne.n	1e2da <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1e364:	9801      	ldr	r0, [sp, #4]
   1e366:	f7f9 f829 	bl	173bc <nrf_freeaddrinfo>
}
   1e36a:	4628      	mov	r0, r5
   1e36c:	b013      	add	sp, #76	; 0x4c
   1e36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1e372:	2303      	movs	r3, #3
   1e374:	e7d0      	b.n	1e318 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1e376:	2367      	movs	r3, #103	; 0x67
   1e378:	e7ce      	b.n	1e318 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1e37a:	2301      	movs	r3, #1
   1e37c:	e7cc      	b.n	1e318 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1e37e:	2302      	movs	r3, #2
   1e380:	e7ca      	b.n	1e318 <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1e382:	f240 2101 	movw	r1, #513	; 0x201
   1e386:	428b      	cmp	r3, r1
   1e388:	d0d2      	beq.n	1e330 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e38a:	dc0d      	bgt.n	1e3a8 <nrf91_socket_offload_getaddrinfo+0x13e>
   1e38c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1e390:	d013      	beq.n	1e3ba <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e392:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1e396:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1e398:	2300      	movs	r3, #0
   1e39a:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1e39c:	4620      	mov	r0, r4
   1e39e:	f000 faac 	bl	1e8fa <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1e3a2:	f06f 0506 	mvn.w	r5, #6
   1e3a6:	e790      	b.n	1e2ca <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1e3a8:	f240 2102 	movw	r1, #514	; 0x202
   1e3ac:	428b      	cmp	r3, r1
   1e3ae:	d0bf      	beq.n	1e330 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3b0:	f240 2103 	movw	r1, #515	; 0x203
   1e3b4:	428b      	cmp	r3, r1
   1e3b6:	d0bb      	beq.n	1e330 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3b8:	e7eb      	b.n	1e392 <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e3ba:	f240 1311 	movw	r3, #273	; 0x111
   1e3be:	e7b7      	b.n	1e330 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3c0:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e3c4:	e7b4      	b.n	1e330 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3c6:	2311      	movs	r3, #17
   1e3c8:	e7b2      	b.n	1e330 <nrf91_socket_offload_getaddrinfo+0xc6>
   1e3ca:	2306      	movs	r3, #6
   1e3cc:	e7b0      	b.n	1e330 <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1e3ce:	2a0a      	cmp	r2, #10
   1e3d0:	d1e4      	bne.n	1e39c <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e3d2:	2018      	movs	r0, #24
   1e3d4:	f7fd f82c 	bl	1b430 <k_malloc>
   1e3d8:	4682      	mov	sl, r0
   1e3da:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e3dc:	b190      	cbz	r0, 1e404 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e3de:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e3e0:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1e3e2:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e3e6:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1e3e8:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e3ec:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1e3f0:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1e3f2:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e3f6:	f7ff f92e 	bl	1d656 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e3fa:	f8db 3020 	ldr.w	r3, [fp, #32]
   1e3fe:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1e402:	e7a7      	b.n	1e354 <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1e404:	4620      	mov	r0, r4
   1e406:	f000 fa78 	bl	1e8fa <k_free>
			retval = DNS_EAI_MEMORY;
   1e40a:	f06f 0509 	mvn.w	r5, #9
   1e40e:	e75c      	b.n	1e2ca <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1e410:	61fc      	str	r4, [r7, #28]
   1e412:	e7a3      	b.n	1e35c <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1e414:	f06f 0506 	mvn.w	r5, #6
   1e418:	e7a7      	b.n	1e36a <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1e41a:	f06f 0508 	mvn.w	r5, #8
   1e41e:	e7a4      	b.n	1e36a <nrf91_socket_offload_getaddrinfo+0x100>

0001e420 <nrf91_socket_offload_setsockopt>:
{
   1e420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1e424:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1e428:	b086      	sub	sp, #24
   1e42a:	4680      	mov	r8, r0
   1e42c:	460c      	mov	r4, r1
   1e42e:	4617      	mov	r7, r2
   1e430:	461d      	mov	r5, r3
   1e432:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1e434:	d002      	beq.n	1e43c <nrf91_socket_offload_setsockopt+0x1c>
   1e436:	dc1c      	bgt.n	1e472 <nrf91_socket_offload_setsockopt+0x52>
   1e438:	2901      	cmp	r1, #1
   1e43a:	d122      	bne.n	1e482 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1e43c:	aa03      	add	r2, sp, #12
   1e43e:	4639      	mov	r1, r7
   1e440:	4620      	mov	r0, r4
   1e442:	f7f3 fbdb 	bl	11bfc <z_to_nrf_optname>
   1e446:	2800      	cmp	r0, #0
   1e448:	db1b      	blt.n	1e482 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1e44a:	2c01      	cmp	r4, #1
   1e44c:	d107      	bne.n	1e45e <nrf91_socket_offload_setsockopt+0x3e>
   1e44e:	2f14      	cmp	r7, #20
   1e450:	d105      	bne.n	1e45e <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1e452:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1e454:	682b      	ldr	r3, [r5, #0]
   1e456:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e458:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1e45a:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e45c:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1e45e:	9600      	str	r6, [sp, #0]
   1e460:	462b      	mov	r3, r5
   1e462:	9a03      	ldr	r2, [sp, #12]
   1e464:	4621      	mov	r1, r4
   1e466:	4640      	mov	r0, r8
   1e468:	f7f8 ff6e 	bl	17348 <nrf_setsockopt>
}
   1e46c:	b006      	add	sp, #24
   1e46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1e472:	f240 2302 	movw	r3, #514	; 0x202
   1e476:	4299      	cmp	r1, r3
   1e478:	d0e0      	beq.n	1e43c <nrf91_socket_offload_setsockopt+0x1c>
   1e47a:	f240 2303 	movw	r3, #515	; 0x203
   1e47e:	4299      	cmp	r1, r3
   1e480:	e7db      	b.n	1e43a <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1e482:	f7ff fcfb 	bl	1de7c <z_errno>
   1e486:	232a      	movs	r3, #42	; 0x2a
   1e488:	6003      	str	r3, [r0, #0]
   1e48a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e48e:	e7ed      	b.n	1e46c <nrf91_socket_offload_setsockopt+0x4c>

0001e490 <nrf91_socket_offload_sendto>:
{
   1e490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e494:	b08d      	sub	sp, #52	; 0x34
   1e496:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1e498:	4605      	mov	r5, r0
   1e49a:	460e      	mov	r6, r1
   1e49c:	4617      	mov	r7, r2
   1e49e:	4698      	mov	r8, r3
	if (to == NULL) {
   1e4a0:	b96c      	cbnz	r4, 1e4be <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e4a2:	4618      	mov	r0, r3
   1e4a4:	f7ff fca0 	bl	1dde8 <z_to_nrf_flags>
   1e4a8:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e4ac:	4603      	mov	r3, r0
   1e4ae:	463a      	mov	r2, r7
   1e4b0:	4631      	mov	r1, r6
   1e4b2:	4628      	mov	r0, r5
   1e4b4:	f7f8 fe92 	bl	171dc <nrf_sendto>
}
   1e4b8:	b00d      	add	sp, #52	; 0x34
   1e4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1e4be:	8823      	ldrh	r3, [r4, #0]
   1e4c0:	2b01      	cmp	r3, #1
   1e4c2:	d110      	bne.n	1e4e6 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1e4c4:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e4c6:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1e4c8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1e4cc:	2302      	movs	r3, #2
   1e4ce:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e4d0:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e4d2:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e4d4:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e4d8:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e4da:	f7ff fc85 	bl	1dde8 <z_to_nrf_flags>
   1e4de:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e4e0:	ab03      	add	r3, sp, #12
   1e4e2:	9300      	str	r3, [sp, #0]
   1e4e4:	e7e2      	b.n	1e4ac <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1e4e6:	2b02      	cmp	r3, #2
   1e4e8:	d115      	bne.n	1e516 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1e4ea:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e4ec:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e4f0:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e4f4:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e4f6:	2210      	movs	r2, #16
   1e4f8:	1d21      	adds	r1, r4, #4
   1e4fa:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1e4fc:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e4fe:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e502:	f7ff f8a8 	bl	1d656 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e506:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e508:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e50a:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e50c:	f7ff fc6c 	bl	1dde8 <z_to_nrf_flags>
   1e510:	f8cd 9004 	str.w	r9, [sp, #4]
   1e514:	e7e4      	b.n	1e4e0 <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1e516:	f7ff fcb1 	bl	1de7c <z_errno>
   1e51a:	2323      	movs	r3, #35	; 0x23
   1e51c:	6003      	str	r3, [r0, #0]
	return retval;
   1e51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e522:	e7c9      	b.n	1e4b8 <nrf91_socket_offload_sendto+0x28>

0001e524 <nrf91_socket_offload_bind>:
{
   1e524:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e526:	880b      	ldrh	r3, [r1, #0]
{
   1e528:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e52a:	2b01      	cmp	r3, #1
{
   1e52c:	4606      	mov	r6, r0
   1e52e:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e530:	d10e      	bne.n	1e550 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e532:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e534:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e536:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e53a:	2302      	movs	r3, #2
   1e53c:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e53e:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e540:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e544:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1e546:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e548:	f7f8 feec 	bl	17324 <nrf_bind>
}
   1e54c:	b00a      	add	sp, #40	; 0x28
   1e54e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e550:	2b02      	cmp	r3, #2
   1e552:	d112      	bne.n	1e57a <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e554:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e556:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e558:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e55c:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e55e:	2210      	movs	r2, #16
   1e560:	3104      	adds	r1, #4
   1e562:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e564:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e566:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e56a:	f7ff f874 	bl	1d656 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e56e:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e570:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e572:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e574:	a901      	add	r1, sp, #4
   1e576:	4630      	mov	r0, r6
   1e578:	e7e6      	b.n	1e548 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1e57a:	f7ff fc7f 	bl	1de7c <z_errno>
   1e57e:	2323      	movs	r3, #35	; 0x23
   1e580:	6003      	str	r3, [r0, #0]
   1e582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e586:	e7e1      	b.n	1e54c <nrf91_socket_offload_bind+0x28>

0001e588 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1e588:	280d      	cmp	r0, #13
   1e58a:	d004      	beq.n	1e596 <is_lfcr+0xe>
   1e58c:	f1a0 030a 	sub.w	r3, r0, #10
   1e590:	4258      	negs	r0, r3
   1e592:	4158      	adcs	r0, r3
   1e594:	4770      	bx	lr
		return true;
   1e596:	2001      	movs	r0, #1
}
   1e598:	4770      	bx	lr

0001e59a <skip_command_prefix>:
{
   1e59a:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1e59c:	6802      	ldr	r2, [r0, #0]
{
   1e59e:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1e5a0:	1c93      	adds	r3, r2, #2
   1e5a2:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1e5a4:	7894      	ldrb	r4, [r2, #2]
   1e5a6:	4620      	mov	r0, r4
   1e5a8:	f7ff ffee 	bl	1e588 <is_lfcr>
   1e5ac:	b910      	cbnz	r0, 1e5b4 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e5ae:	b10c      	cbz	r4, 1e5b4 <skip_command_prefix+0x1a>
	(*cmd)++;
   1e5b0:	3203      	adds	r2, #3
   1e5b2:	600a      	str	r2, [r1, #0]
}
   1e5b4:	bd10      	pop	{r4, pc}

0001e5b6 <is_valid_notification_char>:
	return (int)((chr >= (int)'a' && chr <=
   1e5b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e5ba:	2b19      	cmp	r3, #25
   1e5bc:	bf98      	it	ls
   1e5be:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1e5c0:	3841      	subs	r0, #65	; 0x41
   1e5c2:	b2c0      	uxtb	r0, r0
}
   1e5c4:	2819      	cmp	r0, #25
   1e5c6:	bf8c      	ite	hi
   1e5c8:	2000      	movhi	r0, #0
   1e5ca:	2001      	movls	r0, #1
   1e5cc:	4770      	bx	lr

0001e5ce <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e5ce:	b510      	push	{r4, lr}
   1e5d0:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e5d2:	f7ff f805 	bl	1d5e0 <strlen>
   1e5d6:	2801      	cmp	r0, #1
   1e5d8:	d91e      	bls.n	1e618 <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1e5da:	7823      	ldrb	r3, [r4, #0]
   1e5dc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e5e0:	2a19      	cmp	r2, #25
   1e5e2:	bf98      	it	ls
   1e5e4:	3b20      	subls	r3, #32
   1e5e6:	2b41      	cmp	r3, #65	; 0x41
   1e5e8:	d116      	bne.n	1e618 <is_command+0x4a>
   1e5ea:	7863      	ldrb	r3, [r4, #1]
   1e5ec:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e5f0:	2a19      	cmp	r2, #25
   1e5f2:	bf98      	it	ls
   1e5f4:	3b20      	subls	r3, #32
   1e5f6:	2b54      	cmp	r3, #84	; 0x54
   1e5f8:	d10e      	bne.n	1e618 <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e5fa:	78a2      	ldrb	r2, [r4, #2]
   1e5fc:	2a25      	cmp	r2, #37	; 0x25
   1e5fe:	d00d      	beq.n	1e61c <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1e600:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e604:	2b23      	cmp	r3, #35	; 0x23
   1e606:	d009      	beq.n	1e61c <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e608:	4610      	mov	r0, r2
   1e60a:	f7ff ffbd 	bl	1e588 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e60e:	b910      	cbnz	r0, 1e616 <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e610:	fab2 f082 	clz	r0, r2
   1e614:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e616:	bd10      	pop	{r4, pc}
		return false;
   1e618:	2000      	movs	r0, #0
   1e61a:	e7fc      	b.n	1e616 <is_command+0x48>
		return true;
   1e61c:	2001      	movs	r0, #1
   1e61e:	e7fa      	b.n	1e616 <is_command+0x48>

0001e620 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1e620:	6813      	ldr	r3, [r2, #0]
   1e622:	f7f4 b83f 	b.w	126a4 <at_parser_max_params_from_str>

0001e626 <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   1e626:	b507      	push	{r0, r1, r2, lr}
   1e628:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   1e62a:	f7ff ffd0 	bl	1e5ce <is_command>
   1e62e:	b178      	cbz	r0, 1e650 <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   1e630:	a801      	add	r0, sp, #4
   1e632:	f7ff ffb2 	bl	1e59a <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   1e636:	9901      	ldr	r1, [sp, #4]
   1e638:	780a      	ldrb	r2, [r1, #0]
   1e63a:	4610      	mov	r0, r2
   1e63c:	f7ff ffbb 	bl	1e5b6 <is_valid_notification_char>
   1e640:	b948      	cbnz	r0, 1e656 <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   1e642:	2a3d      	cmp	r2, #61	; 0x3d
   1e644:	d114      	bne.n	1e670 <at_parser_cmd_type_get+0x4a>
   1e646:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   1e648:	2b3f      	cmp	r3, #63	; 0x3f
   1e64a:	bf14      	ite	ne
   1e64c:	2001      	movne	r0, #1
   1e64e:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   1e650:	b003      	add	sp, #12
   1e652:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   1e656:	3101      	adds	r1, #1
   1e658:	9101      	str	r1, [sp, #4]
   1e65a:	e7ec      	b.n	1e636 <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   1e65c:	4610      	mov	r0, r2
   1e65e:	f7ff ff93 	bl	1e588 <is_lfcr>
   1e662:	b918      	cbnz	r0, 1e66c <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   1e664:	fab2 f082 	clz	r0, r2
   1e668:	0940      	lsrs	r0, r0, #5
   1e66a:	e7f1      	b.n	1e650 <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   1e66c:	2001      	movs	r0, #1
   1e66e:	e7ef      	b.n	1e650 <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   1e670:	2a3f      	cmp	r2, #63	; 0x3f
   1e672:	d1f3      	bne.n	1e65c <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   1e674:	2002      	movs	r0, #2
   1e676:	e7eb      	b.n	1e650 <at_parser_cmd_type_get+0x2a>

0001e678 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1e678:	6803      	ldr	r3, [r0, #0]
   1e67a:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1e67c:	bf83      	ittte	hi
   1e67e:	230c      	movhi	r3, #12
   1e680:	6840      	ldrhi	r0, [r0, #4]
   1e682:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1e686:	2000      	movls	r0, #0
}
   1e688:	4770      	bx	lr

0001e68a <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1e68a:	7803      	ldrb	r3, [r0, #0]
   1e68c:	2b01      	cmp	r3, #1
   1e68e:	d006      	beq.n	1e69e <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1e690:	2b02      	cmp	r3, #2
   1e692:	d006      	beq.n	1e6a2 <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e694:	3b03      	subs	r3, #3
   1e696:	2b01      	cmp	r3, #1
   1e698:	d805      	bhi.n	1e6a6 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1e69a:	6840      	ldr	r0, [r0, #4]
   1e69c:	4770      	bx	lr
		return sizeof(u16_t);
   1e69e:	2002      	movs	r0, #2
   1e6a0:	4770      	bx	lr
		return sizeof(u32_t);
   1e6a2:	2004      	movs	r0, #4
   1e6a4:	4770      	bx	lr
	}

	return 0;
   1e6a6:	2000      	movs	r0, #0
}
   1e6a8:	4770      	bx	lr

0001e6aa <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e6aa:	7803      	ldrb	r3, [r0, #0]
{
   1e6ac:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e6ae:	3b03      	subs	r3, #3
   1e6b0:	2b01      	cmp	r3, #1
{
   1e6b2:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e6b4:	d802      	bhi.n	1e6bc <at_param_clear+0x12>
		k_free(param->value.str_val);
   1e6b6:	6880      	ldr	r0, [r0, #8]
   1e6b8:	f000 f91f 	bl	1e8fa <k_free>
	param->value.int_val = 0;
   1e6bc:	2300      	movs	r3, #0
   1e6be:	60a3      	str	r3, [r4, #8]
}
   1e6c0:	bd10      	pop	{r4, pc}

0001e6c2 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1e6c2:	b538      	push	{r3, r4, r5, lr}
   1e6c4:	460d      	mov	r5, r1
	if (list == NULL) {
   1e6c6:	4604      	mov	r4, r0
   1e6c8:	b140      	cbz	r0, 1e6dc <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1e6ca:	210c      	movs	r1, #12
   1e6cc:	4628      	mov	r0, r5
   1e6ce:	f000 f919 	bl	1e904 <k_calloc>
   1e6d2:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1e6d4:	b128      	cbz	r0, 1e6e2 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1e6d6:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1e6d8:	6025      	str	r5, [r4, #0]
}
   1e6da:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e6dc:	f06f 0015 	mvn.w	r0, #21
   1e6e0:	e7fb      	b.n	1e6da <at_params_list_init+0x18>
		return -ENOMEM;
   1e6e2:	f06f 000b 	mvn.w	r0, #11
   1e6e6:	e7f8      	b.n	1e6da <at_params_list_init+0x18>

0001e6e8 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   1e6ea:	4605      	mov	r5, r0
   1e6ec:	b130      	cbz	r0, 1e6fc <at_params_list_clear+0x14>
   1e6ee:	6843      	ldr	r3, [r0, #4]
   1e6f0:	b123      	cbz	r3, 1e6fc <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1e6f2:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1e6f4:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1e6f6:	682b      	ldr	r3, [r5, #0]
   1e6f8:	429c      	cmp	r4, r3
   1e6fa:	d300      	bcc.n	1e6fe <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   1e6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   1e6fe:	686e      	ldr	r6, [r5, #4]
   1e700:	fb07 6604 	mla	r6, r7, r4, r6
   1e704:	4630      	mov	r0, r6
   1e706:	f7ff ffd0 	bl	1e6aa <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1e70a:	220c      	movs	r2, #12
   1e70c:	2100      	movs	r1, #0
   1e70e:	4630      	mov	r0, r6
   1e710:	f7fe ffcb 	bl	1d6aa <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1e714:	3401      	adds	r4, #1
   1e716:	e7ee      	b.n	1e6f6 <at_params_list_clear+0xe>

0001e718 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1e718:	b538      	push	{r3, r4, r5, lr}
   1e71a:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e71c:	b160      	cbz	r0, 1e738 <at_params_short_put+0x20>
   1e71e:	6843      	ldr	r3, [r0, #4]
   1e720:	b153      	cbz	r3, 1e738 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e722:	f7ff ffa9 	bl	1e678 <at_params_get>

	if (param == NULL) {
   1e726:	4604      	mov	r4, r0
   1e728:	b130      	cbz	r0, 1e738 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e72a:	f7ff ffbe 	bl	1e6aa <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e72e:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   1e730:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e732:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1e734:	60a5      	str	r5, [r4, #8]
}
   1e736:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e738:	f06f 0015 	mvn.w	r0, #21
   1e73c:	e7fb      	b.n	1e736 <at_params_short_put+0x1e>

0001e73e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1e73e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e740:	b160      	cbz	r0, 1e75c <at_params_empty_put+0x1e>
   1e742:	6843      	ldr	r3, [r0, #4]
   1e744:	b153      	cbz	r3, 1e75c <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e746:	f7ff ff97 	bl	1e678 <at_params_get>

	if (param == NULL) {
   1e74a:	4604      	mov	r4, r0
   1e74c:	b130      	cbz	r0, 1e75c <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1e74e:	f7ff ffac 	bl	1e6aa <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1e752:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1e754:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1e756:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1e758:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1e75a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e75c:	f06f 0015 	mvn.w	r0, #21
   1e760:	e7fb      	b.n	1e75a <at_params_empty_put+0x1c>

0001e762 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1e762:	b538      	push	{r3, r4, r5, lr}
   1e764:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e766:	b160      	cbz	r0, 1e782 <at_params_int_put+0x20>
   1e768:	6843      	ldr	r3, [r0, #4]
   1e76a:	b153      	cbz	r3, 1e782 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e76c:	f7ff ff84 	bl	1e678 <at_params_get>

	if (param == NULL) {
   1e770:	4604      	mov	r4, r0
   1e772:	b130      	cbz	r0, 1e782 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e774:	f7ff ff99 	bl	1e6aa <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1e778:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1e77a:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e77c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1e77e:	60a5      	str	r5, [r4, #8]
}
   1e780:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e782:	f06f 0015 	mvn.w	r0, #21
   1e786:	e7fb      	b.n	1e780 <at_params_int_put+0x1e>

0001e788 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e78a:	4616      	mov	r6, r2
   1e78c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1e78e:	b1c0      	cbz	r0, 1e7c2 <at_params_string_put+0x3a>
   1e790:	6843      	ldr	r3, [r0, #4]
   1e792:	b1b3      	cbz	r3, 1e7c2 <at_params_string_put+0x3a>
   1e794:	b1aa      	cbz	r2, 1e7c2 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e796:	f7ff ff6f 	bl	1e678 <at_params_get>

	if (param == NULL) {
   1e79a:	4604      	mov	r4, r0
   1e79c:	b188      	cbz	r0, 1e7c2 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1e79e:	1c68      	adds	r0, r5, #1
   1e7a0:	f7fc fe46 	bl	1b430 <k_malloc>

	if (param_value == NULL) {
   1e7a4:	4607      	mov	r7, r0
   1e7a6:	b178      	cbz	r0, 1e7c8 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1e7a8:	462a      	mov	r2, r5
   1e7aa:	4631      	mov	r1, r6
   1e7ac:	f7fe ff53 	bl	1d656 <memcpy>

	at_param_clear(param);
   1e7b0:	4620      	mov	r0, r4
   1e7b2:	f7ff ff7a 	bl	1e6aa <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1e7b6:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1e7b8:	2000      	movs	r0, #0
	param->size = str_len;
   1e7ba:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1e7bc:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1e7be:	60a7      	str	r7, [r4, #8]
}
   1e7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e7c2:	f06f 0015 	mvn.w	r0, #21
   1e7c6:	e7fb      	b.n	1e7c0 <at_params_string_put+0x38>
		return -ENOMEM;
   1e7c8:	f06f 000b 	mvn.w	r0, #11
   1e7cc:	e7f8      	b.n	1e7c0 <at_params_string_put+0x38>

0001e7ce <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1e7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7d0:	4616      	mov	r6, r2
   1e7d2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1e7d4:	b1c0      	cbz	r0, 1e808 <at_params_array_put+0x3a>
   1e7d6:	6843      	ldr	r3, [r0, #4]
   1e7d8:	b1b3      	cbz	r3, 1e808 <at_params_array_put+0x3a>
   1e7da:	b1aa      	cbz	r2, 1e808 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e7dc:	f7ff ff4c 	bl	1e678 <at_params_get>

	if (param == NULL) {
   1e7e0:	4604      	mov	r4, r0
   1e7e2:	b188      	cbz	r0, 1e808 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1e7e4:	4628      	mov	r0, r5
   1e7e6:	f7fc fe23 	bl	1b430 <k_malloc>

	if (param_value == NULL) {
   1e7ea:	4607      	mov	r7, r0
   1e7ec:	b178      	cbz	r0, 1e80e <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1e7ee:	462a      	mov	r2, r5
   1e7f0:	4631      	mov	r1, r6
   1e7f2:	f7fe ff30 	bl	1d656 <memcpy>

	at_param_clear(param);
   1e7f6:	4620      	mov	r0, r4
   1e7f8:	f7ff ff57 	bl	1e6aa <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1e7fc:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1e7fe:	2000      	movs	r0, #0
	param->size = array_len;
   1e800:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1e802:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1e804:	60a7      	str	r7, [r4, #8]
}
   1e806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e808:	f06f 0015 	mvn.w	r0, #21
   1e80c:	e7fb      	b.n	1e806 <at_params_array_put+0x38>
		return -ENOMEM;
   1e80e:	f06f 000b 	mvn.w	r0, #11
   1e812:	e7f8      	b.n	1e806 <at_params_array_put+0x38>

0001e814 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   1e814:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1e816:	b160      	cbz	r0, 1e832 <at_params_short_get+0x1e>
   1e818:	6843      	ldr	r3, [r0, #4]
   1e81a:	b153      	cbz	r3, 1e832 <at_params_short_get+0x1e>
   1e81c:	b14a      	cbz	r2, 1e832 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e81e:	f7ff ff2b 	bl	1e678 <at_params_get>

	if (param == NULL) {
   1e822:	b130      	cbz	r0, 1e832 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   1e824:	7803      	ldrb	r3, [r0, #0]
   1e826:	2b01      	cmp	r3, #1
   1e828:	d103      	bne.n	1e832 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   1e82a:	6883      	ldr	r3, [r0, #8]
	return 0;
   1e82c:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   1e82e:	8013      	strh	r3, [r2, #0]
}
   1e830:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e832:	f06f 0015 	mvn.w	r0, #21
   1e836:	e7fb      	b.n	1e830 <at_params_short_get+0x1c>

0001e838 <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1e838:	b570      	push	{r4, r5, r6, lr}
   1e83a:	4616      	mov	r6, r2
   1e83c:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1e83e:	b1c0      	cbz	r0, 1e872 <at_params_string_get+0x3a>
   1e840:	6843      	ldr	r3, [r0, #4]
   1e842:	b1b3      	cbz	r3, 1e872 <at_params_string_get+0x3a>
   1e844:	b1aa      	cbz	r2, 1e872 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1e846:	b1a4      	cbz	r4, 1e872 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e848:	f7ff ff16 	bl	1e678 <at_params_get>

	if (param == NULL) {
   1e84c:	4601      	mov	r1, r0
   1e84e:	b180      	cbz	r0, 1e872 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1e850:	7803      	ldrb	r3, [r0, #0]
   1e852:	2b03      	cmp	r3, #3
   1e854:	d10d      	bne.n	1e872 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1e856:	f7ff ff18 	bl	1e68a <at_param_size>

	if (*len < param_len) {
   1e85a:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1e85c:	4605      	mov	r5, r0
	if (*len < param_len) {
   1e85e:	4283      	cmp	r3, r0
   1e860:	d30a      	bcc.n	1e878 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1e862:	4602      	mov	r2, r0
   1e864:	6889      	ldr	r1, [r1, #8]
   1e866:	4630      	mov	r0, r6
   1e868:	f7fe fef5 	bl	1d656 <memcpy>
	*len = param_len;

	return 0;
   1e86c:	2000      	movs	r0, #0
	*len = param_len;
   1e86e:	6025      	str	r5, [r4, #0]
}
   1e870:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e872:	f06f 0015 	mvn.w	r0, #21
   1e876:	e7fb      	b.n	1e870 <at_params_string_get+0x38>
		return -ENOMEM;
   1e878:	f06f 000b 	mvn.w	r0, #11
   1e87c:	e7f8      	b.n	1e870 <at_params_string_get+0x38>

0001e87e <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   1e87e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e880:	4604      	mov	r4, r0
   1e882:	b178      	cbz	r0, 1e8a4 <at_params_valid_count_get+0x26>
   1e884:	6840      	ldr	r0, [r0, #4]
   1e886:	b168      	cbz	r0, 1e8a4 <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   1e888:	6822      	ldr	r2, [r4, #0]
   1e88a:	b14a      	cbz	r2, 1e8a0 <at_params_valid_count_get+0x22>
   1e88c:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e88e:	7803      	ldrb	r3, [r0, #0]
   1e890:	b133      	cbz	r3, 1e8a0 <at_params_valid_count_get+0x22>
		valid_i += 1;
   1e892:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   1e894:	4611      	mov	r1, r2
   1e896:	4620      	mov	r0, r4
   1e898:	f7ff feee 	bl	1e678 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e89c:	2800      	cmp	r0, #0
   1e89e:	d1f6      	bne.n	1e88e <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   1e8a0:	4610      	mov	r0, r2
   1e8a2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e8a4:	f06f 0215 	mvn.w	r2, #21
   1e8a8:	e7fa      	b.n	1e8a0 <at_params_valid_count_get+0x22>

0001e8aa <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1e8aa:	f7fe bced 	b.w	1d288 <z_clock_idle_exit>

0001e8ae <k_mem_slab_init>:
{
   1e8ae:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1e8b0:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1e8b2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   1e8b6:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1e8ba:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e8bc:	42a3      	cmp	r3, r4
   1e8be:	d102      	bne.n	1e8c6 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   1e8c0:	e9c0 0000 	strd	r0, r0, [r0]
}
   1e8c4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1e8c6:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e8c8:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1e8ca:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1e8cc:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1e8ce:	4411      	add	r1, r2
   1e8d0:	e7f4      	b.n	1e8bc <k_mem_slab_init+0xe>

0001e8d2 <k_mem_pool_malloc>:
{
   1e8d2:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e8d4:	2404      	movs	r4, #4
   1e8d6:	190a      	adds	r2, r1, r4
   1e8d8:	d204      	bcs.n	1e8e4 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1e8da:	2300      	movs	r3, #0
   1e8dc:	4669      	mov	r1, sp
   1e8de:	f7fc fd2f 	bl	1b340 <k_mem_pool_alloc>
   1e8e2:	b110      	cbz	r0, 1e8ea <k_mem_pool_malloc+0x18>
		return NULL;
   1e8e4:	2000      	movs	r0, #0
}
   1e8e6:	b002      	add	sp, #8
   1e8e8:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1e8ea:	4622      	mov	r2, r4
   1e8ec:	a901      	add	r1, sp, #4
   1e8ee:	9800      	ldr	r0, [sp, #0]
   1e8f0:	f7fe feb1 	bl	1d656 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1e8f4:	9800      	ldr	r0, [sp, #0]
   1e8f6:	3004      	adds	r0, #4
   1e8f8:	e7f5      	b.n	1e8e6 <k_mem_pool_malloc+0x14>

0001e8fa <k_free>:
	if (ptr != NULL) {
   1e8fa:	b110      	cbz	r0, 1e902 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1e8fc:	3804      	subs	r0, #4
   1e8fe:	f7fc bd6b 	b.w	1b3d8 <k_mem_pool_free_id>
}
   1e902:	4770      	bx	lr

0001e904 <k_calloc>:
{
   1e904:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1e906:	fba0 4501 	umull	r4, r5, r0, r1
   1e90a:	b935      	cbnz	r5, 1e91a <k_calloc+0x16>
	ret = k_malloc(bounds);
   1e90c:	4620      	mov	r0, r4
   1e90e:	f7fc fd8f 	bl	1b430 <k_malloc>
	if (ret != NULL) {
   1e912:	4606      	mov	r6, r0
   1e914:	b918      	cbnz	r0, 1e91e <k_calloc+0x1a>
}
   1e916:	4630      	mov	r0, r6
   1e918:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1e91a:	2600      	movs	r6, #0
   1e91c:	e7fb      	b.n	1e916 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1e91e:	4622      	mov	r2, r4
   1e920:	4629      	mov	r1, r5
   1e922:	f7fe fec2 	bl	1d6aa <memset>
   1e926:	e7f6      	b.n	1e916 <k_calloc+0x12>

0001e928 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1e928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e92c:	4604      	mov	r4, r0
   1e92e:	460f      	mov	r7, r1
   1e930:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e932:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e936:	f04f 0220 	mov.w	r2, #32
   1e93a:	f3ef 8611 	mrs	r6, BASEPRI
   1e93e:	f382 8811 	msr	BASEPRI, r2
   1e942:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1e946:	b1db      	cbz	r3, 1e980 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1e948:	2008      	movs	r0, #8
   1e94a:	f7fc fd77 	bl	1b43c <z_thread_malloc>
		if (anode == NULL) {
   1e94e:	b938      	cbnz	r0, 1e960 <queue_insert+0x38>
	__asm__ volatile(
   1e950:	f386 8811 	msr	BASEPRI, r6
   1e954:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1e958:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1e960:	2301      	movs	r3, #1
		anode->data = data;
   1e962:	f8c0 8004 	str.w	r8, [r0, #4]
   1e966:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1e968:	6803      	ldr	r3, [r0, #0]
   1e96a:	f003 0203 	and.w	r2, r3, #3
   1e96e:	b95f      	cbnz	r7, 1e988 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e970:	6823      	ldr	r3, [r4, #0]
   1e972:	4313      	orrs	r3, r2
   1e974:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e976:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e978:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e97a:	b973      	cbnz	r3, 1e99a <queue_insert+0x72>
	list->tail = node;
   1e97c:	6060      	str	r0, [r4, #4]
   1e97e:	e00c      	b.n	1e99a <queue_insert+0x72>
	node->next_and_flags = flags;
   1e980:	f8c8 3000 	str.w	r3, [r8]
   1e984:	4640      	mov	r0, r8
   1e986:	e7ef      	b.n	1e968 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e988:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e98a:	f033 0303 	bics.w	r3, r3, #3
   1e98e:	d114      	bne.n	1e9ba <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e990:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1e992:	6862      	ldr	r2, [r4, #4]
   1e994:	b95a      	cbnz	r2, 1e9ae <queue_insert+0x86>
	list->head = node;
   1e996:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e99a:	2104      	movs	r1, #4
   1e99c:	4628      	mov	r0, r5
   1e99e:	f000 fb5d 	bl	1f05c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e9a2:	4628      	mov	r0, r5
   1e9a4:	4631      	mov	r1, r6
   1e9a6:	f000 f8d2 	bl	1eb4e <z_reschedule>
	return 0;
   1e9aa:	2000      	movs	r0, #0
   1e9ac:	e7d6      	b.n	1e95c <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e9ae:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e9b0:	f003 0303 	and.w	r3, r3, #3
   1e9b4:	4303      	orrs	r3, r0
   1e9b6:	6013      	str	r3, [r2, #0]
   1e9b8:	e7e0      	b.n	1e97c <queue_insert+0x54>
   1e9ba:	4313      	orrs	r3, r2
   1e9bc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e9be:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e9c0:	f003 0303 	and.w	r3, r3, #3
   1e9c4:	4318      	orrs	r0, r3
   1e9c6:	6038      	str	r0, [r7, #0]
   1e9c8:	e7e7      	b.n	1e99a <queue_insert+0x72>

0001e9ca <z_queue_node_peek>:
{
   1e9ca:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1e9cc:	4604      	mov	r4, r0
   1e9ce:	b130      	cbz	r0, 1e9de <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e9d0:	6802      	ldr	r2, [r0, #0]
   1e9d2:	0793      	lsls	r3, r2, #30
   1e9d4:	d003      	beq.n	1e9de <z_queue_node_peek+0x14>
		ret = anode->data;
   1e9d6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e9d8:	b109      	cbz	r1, 1e9de <z_queue_node_peek+0x14>
			k_free(anode);
   1e9da:	f7ff ff8e 	bl	1e8fa <k_free>
}
   1e9de:	4620      	mov	r0, r4
   1e9e0:	bd10      	pop	{r4, pc}

0001e9e2 <z_impl_k_queue_init>:
	list->head = NULL;
   1e9e2:	2300      	movs	r3, #0
	list->tail = NULL;
   1e9e4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1e9e8:	f100 0308 	add.w	r3, r0, #8
   1e9ec:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1e9f0:	4770      	bx	lr

0001e9f2 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1e9f2:	460a      	mov	r2, r1
   1e9f4:	2300      	movs	r3, #0
   1e9f6:	6841      	ldr	r1, [r0, #4]
   1e9f8:	f7ff bf96 	b.w	1e928 <queue_insert>

0001e9fc <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1e9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea00:	4604      	mov	r4, r0
   1ea02:	b086      	sub	sp, #24
   1ea04:	460d      	mov	r5, r1
	__asm__ volatile(
   1ea06:	f04f 0320 	mov.w	r3, #32
   1ea0a:	f3ef 8711 	mrs	r7, BASEPRI
   1ea0e:	f383 8811 	msr	BASEPRI, r3
   1ea12:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1ea16:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1ea18:	b188      	cbz	r0, 1ea3e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea1a:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ea1c:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea1e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ea22:	4290      	cmp	r0, r2
	list->head = node;
   1ea24:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1ea26:	bf08      	it	eq
   1ea28:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ea2a:	2101      	movs	r1, #1
   1ea2c:	f7ff ffcd 	bl	1e9ca <z_queue_node_peek>
	__asm__ volatile(
   1ea30:	f387 8811 	msr	BASEPRI, r7
   1ea34:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1ea38:	b006      	add	sp, #24
   1ea3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1ea3e:	2900      	cmp	r1, #0
   1ea40:	d0f6      	beq.n	1ea30 <z_impl_k_queue_get+0x34>
   1ea42:	f387 8811 	msr	BASEPRI, r7
   1ea46:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1ea4a:	2104      	movs	r1, #4
   1ea4c:	4602      	mov	r2, r0
   1ea4e:	4623      	mov	r3, r4
   1ea50:	eb0d 0001 	add.w	r0, sp, r1
   1ea54:	f7fd fc4e 	bl	1c2f4 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1ea58:	1c6a      	adds	r2, r5, #1
   1ea5a:	d002      	beq.n	1ea62 <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1ea5c:	f000 f9cb 	bl	1edf6 <z_impl_k_uptime_get>
   1ea60:	4606      	mov	r6, r0
{
   1ea62:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1ea64:	9b04      	ldr	r3, [sp, #16]
   1ea66:	f36f 3310 	bfc	r3, #12, #5
   1ea6a:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1ea6c:	2101      	movs	r1, #1
   1ea6e:	1bea      	subs	r2, r5, r7
   1ea70:	a801      	add	r0, sp, #4
   1ea72:	f7fd fc53 	bl	1c31c <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1ea76:	b118      	cbz	r0, 1ea80 <z_impl_k_queue_get+0x84>
   1ea78:	300b      	adds	r0, #11
   1ea7a:	d001      	beq.n	1ea80 <z_impl_k_queue_get+0x84>
			return NULL;
   1ea7c:	2000      	movs	r0, #0
   1ea7e:	e7db      	b.n	1ea38 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1ea80:	f04f 0320 	mov.w	r3, #32
   1ea84:	f3ef 8811 	mrs	r8, BASEPRI
   1ea88:	f383 8811 	msr	BASEPRI, r3
   1ea8c:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1ea90:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1ea92:	b138      	cbz	r0, 1eaa4 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea94:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ea96:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ea98:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ea9c:	4290      	cmp	r0, r2
	list->head = node;
   1ea9e:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1eaa0:	bf08      	it	eq
   1eaa2:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1eaa4:	2101      	movs	r1, #1
   1eaa6:	f7ff ff90 	bl	1e9ca <z_queue_node_peek>
	__asm__ volatile(
   1eaaa:	f388 8811 	msr	BASEPRI, r8
   1eaae:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1eab2:	2800      	cmp	r0, #0
   1eab4:	d1c0      	bne.n	1ea38 <z_impl_k_queue_get+0x3c>
   1eab6:	1c6b      	adds	r3, r5, #1
   1eab8:	d0d4      	beq.n	1ea64 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1eaba:	f000 f99c 	bl	1edf6 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1eabe:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1eac0:	42bd      	cmp	r5, r7
   1eac2:	dacf      	bge.n	1ea64 <z_impl_k_queue_get+0x68>
   1eac4:	e7da      	b.n	1ea7c <z_impl_k_queue_get+0x80>

0001eac6 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1eac6:	7b43      	ldrb	r3, [r0, #13]
   1eac8:	06db      	lsls	r3, r3, #27
   1eaca:	bf03      	ittte	eq
   1eacc:	6980      	ldreq	r0, [r0, #24]
   1eace:	fab0 f080 	clzeq	r0, r0
   1ead2:	0940      	lsreq	r0, r0, #5
   1ead4:	2000      	movne	r0, #0
}
   1ead6:	4770      	bx	lr

0001ead8 <z_swap_irqlock>:
{
   1ead8:	b510      	push	{r4, lr}
   1eada:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   1eadc:	f7fd f970 	bl	1bdc0 <z_check_stack_sentinel>
	ret = arch_swap(key);
   1eae0:	4620      	mov	r0, r4
}
   1eae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1eae6:	f7f0 be6b 	b.w	f7c0 <arch_swap>

0001eaea <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1eaea:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1eaee:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1eaf2:	4298      	cmp	r0, r3
   1eaf4:	bfac      	ite	ge
   1eaf6:	2000      	movge	r0, #0
   1eaf8:	2001      	movlt	r0, #1
   1eafa:	4770      	bx	lr

0001eafc <z_find_first_thread_to_unpend>:
{
   1eafc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eafe:	f04f 0320 	mov.w	r3, #32
   1eb02:	f3ef 8411 	mrs	r4, BASEPRI
   1eb06:	f383 8811 	msr	BASEPRI, r3
   1eb0a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1eb0e:	f000 f85d 	bl	1ebcc <z_priq_dumb_best>
	__asm__ volatile(
   1eb12:	f384 8811 	msr	BASEPRI, r4
   1eb16:	f3bf 8f6f 	isb	sy
}
   1eb1a:	bd10      	pop	{r4, pc}

0001eb1c <z_unpend_thread_no_timeout>:
{
   1eb1c:	b538      	push	{r3, r4, r5, lr}
   1eb1e:	4604      	mov	r4, r0
	__asm__ volatile(
   1eb20:	f04f 0320 	mov.w	r3, #32
   1eb24:	f3ef 8511 	mrs	r5, BASEPRI
   1eb28:	f383 8811 	msr	BASEPRI, r3
   1eb2c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1eb30:	4601      	mov	r1, r0
   1eb32:	6880      	ldr	r0, [r0, #8]
   1eb34:	f7fc fe44 	bl	1b7c0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1eb38:	7b63      	ldrb	r3, [r4, #13]
   1eb3a:	f023 0302 	bic.w	r3, r3, #2
   1eb3e:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1eb40:	f385 8811 	msr	BASEPRI, r5
   1eb44:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1eb48:	2300      	movs	r3, #0
   1eb4a:	60a3      	str	r3, [r4, #8]
}
   1eb4c:	bd38      	pop	{r3, r4, r5, pc}

0001eb4e <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eb4e:	b921      	cbnz	r1, 1eb5a <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1eb50:	f3ef 8005 	mrs	r0, IPSR
   1eb54:	b908      	cbnz	r0, 1eb5a <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   1eb56:	f7ff bfbf 	b.w	1ead8 <z_swap_irqlock>
   1eb5a:	f381 8811 	msr	BASEPRI, r1
   1eb5e:	f3bf 8f6f 	isb	sy
}
   1eb62:	4770      	bx	lr

0001eb64 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1eb64:	4603      	mov	r3, r0
   1eb66:	b920      	cbnz	r0, 1eb72 <z_reschedule_irqlock+0xe>
   1eb68:	f3ef 8205 	mrs	r2, IPSR
   1eb6c:	b90a      	cbnz	r2, 1eb72 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   1eb6e:	f7ff bfb3 	b.w	1ead8 <z_swap_irqlock>
   1eb72:	f383 8811 	msr	BASEPRI, r3
   1eb76:	f3bf 8f6f 	isb	sy
}
   1eb7a:	4770      	bx	lr

0001eb7c <z_reschedule_unlocked>:
	__asm__ volatile(
   1eb7c:	f04f 0320 	mov.w	r3, #32
   1eb80:	f3ef 8011 	mrs	r0, BASEPRI
   1eb84:	f383 8811 	msr	BASEPRI, r3
   1eb88:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1eb8c:	f7ff bfea 	b.w	1eb64 <z_reschedule_irqlock>

0001eb90 <z_unpend_thread>:
{
   1eb90:	b538      	push	{r3, r4, r5, lr}
   1eb92:	4604      	mov	r4, r0
   1eb94:	f04f 0320 	mov.w	r3, #32
   1eb98:	f3ef 8511 	mrs	r5, BASEPRI
   1eb9c:	f383 8811 	msr	BASEPRI, r3
   1eba0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1eba4:	4601      	mov	r1, r0
   1eba6:	6880      	ldr	r0, [r0, #8]
   1eba8:	f7fc fe0a 	bl	1b7c0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ebac:	7b63      	ldrb	r3, [r4, #13]
   1ebae:	f023 0302 	bic.w	r3, r3, #2
   1ebb2:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1ebb4:	f385 8811 	msr	BASEPRI, r5
   1ebb8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1ebbc:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1ebbe:	f104 0018 	add.w	r0, r4, #24
   1ebc2:	60a3      	str	r3, [r4, #8]
}
   1ebc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ebc8:	f000 b8d1 	b.w	1ed6e <z_abort_timeout>

0001ebcc <z_priq_dumb_best>:
	return list->head == list;
   1ebcc:	6803      	ldr	r3, [r0, #0]
}
   1ebce:	4298      	cmp	r0, r3
   1ebd0:	bf14      	ite	ne
   1ebd2:	4618      	movne	r0, r3
   1ebd4:	2000      	moveq	r0, #0
   1ebd6:	4770      	bx	lr

0001ebd8 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1ebd8:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1ebdc:	b570      	push	{r4, r5, r6, lr}
   1ebde:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   1ebe0:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1ebe4:	b1cb      	cbz	r3, 1ec1a <z_thread_timeout+0x42>
	__asm__ volatile(
   1ebe6:	f04f 0320 	mov.w	r3, #32
   1ebea:	f3ef 8611 	mrs	r6, BASEPRI
   1ebee:	f383 8811 	msr	BASEPRI, r3
   1ebf2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ebf6:	4629      	mov	r1, r5
   1ebf8:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1ebfc:	f7fc fde0 	bl	1b7c0 <z_priq_dumb_remove>
   1ec00:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1ec04:	f023 0302 	bic.w	r3, r3, #2
   1ec08:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1ec0c:	f386 8811 	msr	BASEPRI, r6
   1ec10:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1ec14:	2300      	movs	r3, #0
   1ec16:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ec1a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1ec1e:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ec20:	f023 0314 	bic.w	r3, r3, #20
   1ec24:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1ec28:	f7ff ff4d 	bl	1eac6 <z_is_thread_ready>
   1ec2c:	b120      	cbz	r0, 1ec38 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1ec2e:	4628      	mov	r0, r5
}
   1ec30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ec34:	f7fc be14 	b.w	1b860 <z_add_thread_to_ready_q>
   1ec38:	bd70      	pop	{r4, r5, r6, pc}

0001ec3a <z_unpend_first_thread>:
{
   1ec3a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ec3c:	f04f 0320 	mov.w	r3, #32
   1ec40:	f3ef 8211 	mrs	r2, BASEPRI
   1ec44:	f383 8811 	msr	BASEPRI, r3
   1ec48:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1ec4c:	f7ff ffbe 	bl	1ebcc <z_priq_dumb_best>
   1ec50:	4604      	mov	r4, r0
	__asm__ volatile(
   1ec52:	f382 8811 	msr	BASEPRI, r2
   1ec56:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1ec5a:	b1c8      	cbz	r0, 1ec90 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1ec5c:	f04f 0320 	mov.w	r3, #32
   1ec60:	f3ef 8511 	mrs	r5, BASEPRI
   1ec64:	f383 8811 	msr	BASEPRI, r3
   1ec68:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ec6c:	4601      	mov	r1, r0
   1ec6e:	6880      	ldr	r0, [r0, #8]
   1ec70:	f7fc fda6 	bl	1b7c0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ec74:	7b63      	ldrb	r3, [r4, #13]
   1ec76:	f023 0302 	bic.w	r3, r3, #2
   1ec7a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1ec7c:	f385 8811 	msr	BASEPRI, r5
   1ec80:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1ec84:	2300      	movs	r3, #0
   1ec86:	f104 0018 	add.w	r0, r4, #24
   1ec8a:	60a3      	str	r3, [r4, #8]
   1ec8c:	f000 f86f 	bl	1ed6e <z_abort_timeout>
}
   1ec90:	4620      	mov	r0, r4
   1ec92:	bd38      	pop	{r3, r4, r5, pc}

0001ec94 <z_unpend_all>:
{
   1ec94:	b570      	push	{r4, r5, r6, lr}
   1ec96:	4606      	mov	r6, r0
	int need_sched = 0;
   1ec98:	2500      	movs	r5, #0
   1ec9a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ec9c:	42a6      	cmp	r6, r4
   1ec9e:	d000      	beq.n	1eca2 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   1eca0:	b90c      	cbnz	r4, 1eca6 <z_unpend_all+0x12>
}
   1eca2:	4628      	mov	r0, r5
   1eca4:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   1eca6:	4620      	mov	r0, r4
   1eca8:	f7ff ff72 	bl	1eb90 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1ecac:	4620      	mov	r0, r4
   1ecae:	f7ff ff0a 	bl	1eac6 <z_is_thread_ready>
		need_sched = 1;
   1ecb2:	2501      	movs	r5, #1
   1ecb4:	2800      	cmp	r0, #0
   1ecb6:	d0f0      	beq.n	1ec9a <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1ecb8:	4620      	mov	r0, r4
   1ecba:	f7fc fdd1 	bl	1b860 <z_add_thread_to_ready_q>
   1ecbe:	e7ec      	b.n	1ec9a <z_unpend_all+0x6>

0001ecc0 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1ecc0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1ecc4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1ecc8:	e9c0 0000 	strd	r0, r0, [r0]
   1eccc:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1ecd0:	4770      	bx	lr

0001ecd2 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ecd2:	7b43      	ldrb	r3, [r0, #13]
   1ecd4:	06db      	lsls	r3, r3, #27
   1ecd6:	bf03      	ittte	eq
   1ecd8:	6980      	ldreq	r0, [r0, #24]
   1ecda:	fab0 f080 	clzeq	r0, r0
   1ecde:	0940      	lsreq	r0, r0, #5
   1ece0:	2000      	movne	r0, #0
}
   1ece2:	4770      	bx	lr

0001ece4 <z_impl_k_thread_name_set>:
}
   1ece4:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1ece8:	4770      	bx	lr

0001ecea <k_thread_name_get>:
}
   1ecea:	2000      	movs	r0, #0
   1ecec:	4770      	bx	lr

0001ecee <z_new_thread_init>:
{
   1ecee:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   1ecf0:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   1ecf4:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1ecf6:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1ecf8:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1ecfa:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1ecfc:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1ecfe:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1ed00:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1ed02:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1ed04:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1ed08:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1ed0c:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1ed10:	bd10      	pop	{r4, pc}

0001ed12 <z_thread_single_resume>:
{
   1ed12:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ed14:	7b43      	ldrb	r3, [r0, #13]
   1ed16:	4602      	mov	r2, r0
   1ed18:	f023 0310 	bic.w	r3, r3, #16
   1ed1c:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1ed1e:	f7ff ffd8 	bl	1ecd2 <z_is_thread_ready>
   1ed22:	b120      	cbz	r0, 1ed2e <z_thread_single_resume+0x1c>
}
   1ed24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   1ed28:	4610      	mov	r0, r2
   1ed2a:	f7fc bd99 	b.w	1b860 <z_add_thread_to_ready_q>
   1ed2e:	bd08      	pop	{r3, pc}

0001ed30 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1ed30:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ed32:	b510      	push	{r4, lr}
   1ed34:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1ed36:	b103      	cbz	r3, 1ed3a <z_thread_single_abort+0xa>
		thread->fn_abort();
   1ed38:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1ed3a:	4620      	mov	r0, r4
   1ed3c:	f7ff ffc9 	bl	1ecd2 <z_is_thread_ready>
   1ed40:	b138      	cbz	r0, 1ed52 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1ed42:	4620      	mov	r0, r4
   1ed44:	f7fc fe3a 	bl	1b9bc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1ed48:	7b63      	ldrb	r3, [r4, #13]
   1ed4a:	f043 0308 	orr.w	r3, r3, #8
   1ed4e:	7363      	strb	r3, [r4, #13]
}
   1ed50:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1ed52:	7b63      	ldrb	r3, [r4, #13]
   1ed54:	079b      	lsls	r3, r3, #30
   1ed56:	d502      	bpl.n	1ed5e <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   1ed58:	4620      	mov	r0, r4
   1ed5a:	f7ff fedf 	bl	1eb1c <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   1ed5e:	69a3      	ldr	r3, [r4, #24]
   1ed60:	2b00      	cmp	r3, #0
   1ed62:	d0f1      	beq.n	1ed48 <z_thread_single_abort+0x18>
   1ed64:	f104 0018 	add.w	r0, r4, #24
   1ed68:	f000 f801 	bl	1ed6e <z_abort_timeout>
   1ed6c:	e7ec      	b.n	1ed48 <z_thread_single_abort+0x18>

0001ed6e <z_abort_timeout>:
{
   1ed6e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ed70:	f04f 0220 	mov.w	r2, #32
   1ed74:	f3ef 8411 	mrs	r4, BASEPRI
   1ed78:	f382 8811 	msr	BASEPRI, r2
   1ed7c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1ed80:	6803      	ldr	r3, [r0, #0]
   1ed82:	b13b      	cbz	r3, 1ed94 <z_abort_timeout+0x26>
			remove_timeout(to);
   1ed84:	f7fd f97e 	bl	1c084 <remove_timeout>
			ret = 0;
   1ed88:	2000      	movs	r0, #0
	__asm__ volatile(
   1ed8a:	f384 8811 	msr	BASEPRI, r4
   1ed8e:	f3bf 8f6f 	isb	sy
}
   1ed92:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1ed94:	f06f 0015 	mvn.w	r0, #21
   1ed98:	e7f7      	b.n	1ed8a <z_abort_timeout+0x1c>

0001ed9a <z_get_next_timeout_expiry>:
{
   1ed9a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ed9c:	f04f 0320 	mov.w	r3, #32
   1eda0:	f3ef 8411 	mrs	r4, BASEPRI
   1eda4:	f383 8811 	msr	BASEPRI, r3
   1eda8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1edac:	f7fd f97e 	bl	1c0ac <next_timeout>
	__asm__ volatile(
   1edb0:	f384 8811 	msr	BASEPRI, r4
   1edb4:	f3bf 8f6f 	isb	sy
}
   1edb8:	bd10      	pop	{r4, pc}

0001edba <z_set_timeout_expiry>:
{
   1edba:	b570      	push	{r4, r5, r6, lr}
   1edbc:	4604      	mov	r4, r0
   1edbe:	460e      	mov	r6, r1
	__asm__ volatile(
   1edc0:	f04f 0320 	mov.w	r3, #32
   1edc4:	f3ef 8511 	mrs	r5, BASEPRI
   1edc8:	f383 8811 	msr	BASEPRI, r3
   1edcc:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1edd0:	f7fd f96c 	bl	1c0ac <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1edd4:	2801      	cmp	r0, #1
   1edd6:	dd05      	ble.n	1ede4 <z_set_timeout_expiry+0x2a>
   1edd8:	42a0      	cmp	r0, r4
   1edda:	dd03      	ble.n	1ede4 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1eddc:	4631      	mov	r1, r6
   1edde:	4620      	mov	r0, r4
   1ede0:	f7f0 fc50 	bl	f684 <z_clock_set_timeout>
	__asm__ volatile(
   1ede4:	f385 8811 	msr	BASEPRI, r5
   1ede8:	f3bf 8f6f 	isb	sy
}
   1edec:	bd70      	pop	{r4, r5, r6, pc}

0001edee <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1edee:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1edf0:	f7fd fa10 	bl	1c214 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1edf4:	bd08      	pop	{r3, pc}

0001edf6 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1edf6:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1edf8:	f7fd fa0c 	bl	1c214 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1edfc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ee00:	fba0 2304 	umull	r2, r3, r0, r4
   1ee04:	fb04 3301 	mla	r3, r4, r1, r3
   1ee08:	0bd0      	lsrs	r0, r2, #15
}
   1ee0a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1ee0e:	0bd9      	lsrs	r1, r3, #15
   1ee10:	bd10      	pop	{r4, pc}

0001ee12 <k_timer_init>:
	timer->status = 0U;
   1ee12:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1ee14:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1ee18:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1ee1c:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1ee1e:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1ee22:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1ee26:	6283      	str	r3, [r0, #40]	; 0x28
}
   1ee28:	4770      	bx	lr

0001ee2a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1ee2a:	b510      	push	{r4, lr}
   1ee2c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1ee2e:	f7ff ff9e 	bl	1ed6e <z_abort_timeout>

	if (inactive) {
   1ee32:	bb00      	cbnz	r0, 1ee76 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1ee34:	69e3      	ldr	r3, [r4, #28]
   1ee36:	b10b      	cbz	r3, 1ee3c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1ee38:	4620      	mov	r0, r4
   1ee3a:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1ee3c:	f104 0010 	add.w	r0, r4, #16
   1ee40:	2100      	movs	r1, #0
   1ee42:	f7ff fe5b 	bl	1eafc <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1ee46:	4604      	mov	r4, r0
   1ee48:	b1a8      	cbz	r0, 1ee76 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1ee4a:	f7ff fe67 	bl	1eb1c <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ee4e:	7b63      	ldrb	r3, [r4, #13]
   1ee50:	06db      	lsls	r3, r3, #27
   1ee52:	d104      	bne.n	1ee5e <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1ee54:	69a3      	ldr	r3, [r4, #24]
   1ee56:	b913      	cbnz	r3, 1ee5e <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1ee58:	4620      	mov	r0, r4
   1ee5a:	f7fc fd01 	bl	1b860 <z_add_thread_to_ready_q>
	__asm__ volatile(
   1ee5e:	f04f 0320 	mov.w	r3, #32
   1ee62:	f3ef 8011 	mrs	r0, BASEPRI
   1ee66:	f383 8811 	msr	BASEPRI, r3
   1ee6a:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1ee6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ee72:	f7ff be77 	b.w	1eb64 <z_reschedule_irqlock>
   1ee76:	bd10      	pop	{r4, pc}

0001ee78 <clear_event_registrations>:
	while (num_events--) {
   1ee78:	2314      	movs	r3, #20
{
   1ee7a:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1ee7c:	2400      	movs	r4, #0
   1ee7e:	2601      	movs	r6, #1
   1ee80:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1ee84:	4281      	cmp	r1, r0
   1ee86:	d100      	bne.n	1ee8a <clear_event_registrations+0x12>
}
   1ee88:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1ee8a:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1ee8e:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1ee92:	f003 030f 	and.w	r3, r3, #15
   1ee96:	2b04      	cmp	r3, #4
   1ee98:	d80d      	bhi.n	1eeb6 <clear_event_registrations+0x3e>
   1ee9a:	fa06 f303 	lsl.w	r3, r6, r3
   1ee9e:	f013 0f16 	tst.w	r3, #22
   1eea2:	d008      	beq.n	1eeb6 <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1eea4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1eea8:	b12b      	cbz	r3, 1eeb6 <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1eeaa:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1eeae:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1eeb0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1eeb2:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1eeb6:	f382 8811 	msr	BASEPRI, r2
   1eeba:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1eebe:	f04f 0320 	mov.w	r3, #32
   1eec2:	f3ef 8211 	mrs	r2, BASEPRI
   1eec6:	f383 8811 	msr	BASEPRI, r3
   1eeca:	f3bf 8f6f 	isb	sy
   1eece:	3914      	subs	r1, #20
   1eed0:	e7d8      	b.n	1ee84 <clear_event_registrations+0xc>

0001eed2 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1eed2:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1eed4:	6884      	ldr	r4, [r0, #8]
{
   1eed6:	4605      	mov	r5, r0
   1eed8:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1eeda:	b19c      	cbz	r4, 1ef04 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1eedc:	68a3      	ldr	r3, [r4, #8]
   1eede:	b95b      	cbnz	r3, 1eef8 <signal_poll_event+0x26>
	int retcode = 0;
   1eee0:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1eee2:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1eee4:	2300      	movs	r3, #0
   1eee6:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1eee8:	68eb      	ldr	r3, [r5, #12]
   1eeea:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1eeee:	4316      	orrs	r6, r2
   1eef0:	f366 3310 	bfi	r3, r6, #12, #5
   1eef4:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1eef6:	e004      	b.n	1ef02 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1eef8:	4798      	blx	r3
		poller->is_polling = false;
   1eefa:	2300      	movs	r3, #0
		if (retcode < 0) {
   1eefc:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1eefe:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1ef00:	daf0      	bge.n	1eee4 <signal_poll_event+0x12>
}
   1ef02:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1ef04:	4620      	mov	r0, r4
   1ef06:	e7ed      	b.n	1eee4 <signal_poll_event+0x12>

0001ef08 <k_poll_poller_cb>:
{
   1ef08:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1ef0a:	6883      	ldr	r3, [r0, #8]
{
   1ef0c:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1ef0e:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1ef10:	7b63      	ldrb	r3, [r4, #13]
   1ef12:	079a      	lsls	r2, r3, #30
   1ef14:	d401      	bmi.n	1ef1a <k_poll_poller_cb+0x12>
		return 0;
   1ef16:	2000      	movs	r0, #0
}
   1ef18:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1ef1a:	6a23      	ldr	r3, [r4, #32]
   1ef1c:	3302      	adds	r3, #2
   1ef1e:	d012      	beq.n	1ef46 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1ef20:	4620      	mov	r0, r4
   1ef22:	f7ff fe35 	bl	1eb90 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ef26:	2d08      	cmp	r5, #8
   1ef28:	bf0c      	ite	eq
   1ef2a:	f06f 0303 	mvneq.w	r3, #3
   1ef2e:	2300      	movne	r3, #0
   1ef30:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ef32:	7b63      	ldrb	r3, [r4, #13]
   1ef34:	06db      	lsls	r3, r3, #27
   1ef36:	d1ee      	bne.n	1ef16 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1ef38:	69a5      	ldr	r5, [r4, #24]
   1ef3a:	2d00      	cmp	r5, #0
   1ef3c:	d1eb      	bne.n	1ef16 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1ef3e:	4620      	mov	r0, r4
   1ef40:	f7fc fc8e 	bl	1b860 <z_add_thread_to_ready_q>
	return 0;
   1ef44:	e7e7      	b.n	1ef16 <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1ef46:	f06f 000a 	mvn.w	r0, #10
   1ef4a:	e7e5      	b.n	1ef18 <k_poll_poller_cb+0x10>

0001ef4c <add_event>:
{
   1ef4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef4e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ef50:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ef54:	4290      	cmp	r0, r2
   1ef56:	4604      	mov	r4, r0
   1ef58:	460d      	mov	r5, r1
   1ef5a:	d106      	bne.n	1ef6a <add_event+0x1e>
	node->prev = list->tail;
   1ef5c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1ef5e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1ef60:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1ef62:	6863      	ldr	r3, [r4, #4]
   1ef64:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ef66:	6065      	str	r5, [r4, #4]
}
   1ef68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ef6a:	2b00      	cmp	r3, #0
   1ef6c:	d0f6      	beq.n	1ef5c <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1ef6e:	689b      	ldr	r3, [r3, #8]
   1ef70:	6879      	ldr	r1, [r7, #4]
   1ef72:	6858      	ldr	r0, [r3, #4]
   1ef74:	f7ff fdb9 	bl	1eaea <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ef78:	2800      	cmp	r0, #0
   1ef7a:	d1ef      	bne.n	1ef5c <add_event+0x10>
	return list->head == list;
   1ef7c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef7e:	42b4      	cmp	r4, r6
   1ef80:	d0ec      	beq.n	1ef5c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ef82:	2e00      	cmp	r6, #0
   1ef84:	d0ea      	beq.n	1ef5c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1ef86:	68b3      	ldr	r3, [r6, #8]
   1ef88:	6878      	ldr	r0, [r7, #4]
   1ef8a:	6859      	ldr	r1, [r3, #4]
   1ef8c:	f7ff fdad 	bl	1eaea <z_is_t1_higher_prio_than_t2>
   1ef90:	b128      	cbz	r0, 1ef9e <add_event+0x52>
	node->prev = successor->prev;
   1ef92:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ef94:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1ef98:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ef9a:	6075      	str	r5, [r6, #4]
			return;
   1ef9c:	e7e4      	b.n	1ef68 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1ef9e:	6863      	ldr	r3, [r4, #4]
   1efa0:	429e      	cmp	r6, r3
   1efa2:	d0db      	beq.n	1ef5c <add_event+0x10>
   1efa4:	6836      	ldr	r6, [r6, #0]
   1efa6:	e7ec      	b.n	1ef82 <add_event+0x36>

0001efa8 <register_events>:
{
   1efa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1efac:	f04f 0b00 	mov.w	fp, #0
{
   1efb0:	4688      	mov	r8, r1
   1efb2:	4615      	mov	r5, r2
   1efb4:	4699      	mov	r9, r3
   1efb6:	4604      	mov	r4, r0
	int events_registered = 0;
   1efb8:	465e      	mov	r6, fp
	event->poller = NULL;
   1efba:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1efbc:	45c3      	cmp	fp, r8
   1efbe:	db02      	blt.n	1efc6 <register_events+0x1e>
}
   1efc0:	4630      	mov	r0, r6
   1efc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efc6:	f04f 0320 	mov.w	r3, #32
   1efca:	f3ef 8a11 	mrs	sl, BASEPRI
   1efce:	f383 8811 	msr	BASEPRI, r3
   1efd2:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1efd6:	7b63      	ldrb	r3, [r4, #13]
   1efd8:	f003 030f 	and.w	r3, r3, #15
   1efdc:	2b02      	cmp	r3, #2
   1efde:	d005      	beq.n	1efec <register_events+0x44>
   1efe0:	2b04      	cmp	r3, #4
   1efe2:	d006      	beq.n	1eff2 <register_events+0x4a>
   1efe4:	2b01      	cmp	r3, #1
   1efe6:	d118      	bne.n	1f01a <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1efe8:	6922      	ldr	r2, [r4, #16]
   1efea:	e000      	b.n	1efee <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1efec:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1efee:	6892      	ldr	r2, [r2, #8]
   1eff0:	e001      	b.n	1eff6 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1eff2:	6922      	ldr	r2, [r4, #16]
   1eff4:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1eff6:	b182      	cbz	r2, 1f01a <register_events+0x72>
	event->state |= state;
   1eff8:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1effa:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1effc:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1f000:	430b      	orrs	r3, r1
   1f002:	f363 3210 	bfi	r2, r3, #12, #5
   1f006:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1f008:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1f00a:	f38a 8811 	msr	BASEPRI, sl
   1f00e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1f012:	f10b 0b01 	add.w	fp, fp, #1
   1f016:	3414      	adds	r4, #20
   1f018:	e7d0      	b.n	1efbc <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1f01a:	f1b9 0f00 	cmp.w	r9, #0
   1f01e:	d1f4      	bne.n	1f00a <register_events+0x62>
   1f020:	782b      	ldrb	r3, [r5, #0]
   1f022:	2b00      	cmp	r3, #0
   1f024:	d0f1      	beq.n	1f00a <register_events+0x62>
	switch (event->type) {
   1f026:	7b63      	ldrb	r3, [r4, #13]
   1f028:	f003 030f 	and.w	r3, r3, #15
   1f02c:	2b02      	cmp	r3, #2
   1f02e:	d007      	beq.n	1f040 <register_events+0x98>
   1f030:	2b04      	cmp	r3, #4
   1f032:	d00e      	beq.n	1f052 <register_events+0xaa>
   1f034:	2b01      	cmp	r3, #1
   1f036:	d109      	bne.n	1f04c <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1f038:	462a      	mov	r2, r5
   1f03a:	4621      	mov	r1, r4
   1f03c:	6920      	ldr	r0, [r4, #16]
   1f03e:	e003      	b.n	1f048 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1f040:	462a      	mov	r2, r5
   1f042:	4621      	mov	r1, r4
   1f044:	6920      	ldr	r0, [r4, #16]
   1f046:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1f048:	f7ff ff80 	bl	1ef4c <add_event>
	event->poller = poller;
   1f04c:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1f04e:	3601      	adds	r6, #1
   1f050:	e7db      	b.n	1f00a <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1f052:	6920      	ldr	r0, [r4, #16]
   1f054:	462a      	mov	r2, r5
   1f056:	4621      	mov	r1, r4
   1f058:	3008      	adds	r0, #8
   1f05a:	e7f5      	b.n	1f048 <register_events+0xa0>

0001f05c <z_handle_obj_poll_events>:
	return list->head == list;
   1f05c:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f05e:	4298      	cmp	r0, r3
   1f060:	d009      	beq.n	1f076 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1f062:	e9d3 2000 	ldrd	r2, r0, [r3]
   1f066:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1f068:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1f06a:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1f06c:	4618      	mov	r0, r3
	node->prev = NULL;
   1f06e:	e9c3 2200 	strd	r2, r2, [r3]
   1f072:	f7ff bf2e 	b.w	1eed2 <signal_poll_event>
	}
}
   1f076:	4770      	bx	lr

0001f078 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1f078:	4770      	bx	lr
