
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20029050 	.word	0x20029050
    c004:	00010349 	.word	0x00010349
    c008:	0002468f 	.word	0x0002468f
    c00c:	00010161 	.word	0x00010161
    c010:	00010161 	.word	0x00010161
    c014:	00010161 	.word	0x00010161
    c018:	00010161 	.word	0x00010161
    c01c:	00010161 	.word	0x00010161
    c020:	00010161 	.word	0x00010161
    c024:	00010161 	.word	0x00010161
    c028:	00010161 	.word	0x00010161
    c02c:	00010021 	.word	0x00010021
    c030:	00010161 	.word	0x00010161
    c034:	00010161 	.word	0x00010161
    c038:	0000ff71 	.word	0x0000ff71
    c03c:	0002467f 	.word	0x0002467f

0000c040 <_irq_vector_table>:
    c040:	00010309 00010309 00010309 00010309     ................
    c050:	00010309 00010309 00010309 00010309     ................
    c060:	00010309 00010309 00010309 00010309     ................
    c070:	00010309 00010309 00010309 00010309     ................
    c080:	00010309 00010309 00010309 00010309     ................
    c090:	00010309 00010309 00010309 00010309     ................
    c0a0:	00010309 00010309 00010309 00010309     ................
    c0b0:	000120f9 00025121 00010309 00010309     . ..!Q..........
    c0c0:	00010309 00010309 00010309 00010309     ................
    c0d0:	00010309 00010309 00010309 00010309     ................
    c0e0:	00010309 00010309 0002513f 00010309     ........?Q......
    c0f0:	00010309 00010309 00010309 00010309     ................
    c100:	00010309 00010309 00010309 00010309     ................
    c110:	00010309 00010309 00010309 00010309     ................
    c120:	00010309 00010309 00010309 00010309     ................
    c130:	00010309 00010309 00010309 00010309     ................
    c140:	00010309                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 0001d0cc     ...(L....[......
    c210:	00000001 0000c000 2002be60 00012a1d     ........`.. .*..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_drsub>:
    c220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c224:	e002      	b.n	c22c <__adddf3>
    c226:	bf00      	nop

0000c228 <__aeabi_dsub>:
    c228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c22c <__adddf3>:
    c22c:	b530      	push	{r4, r5, lr}
    c22e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c232:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c236:	ea94 0f05 	teq	r4, r5
    c23a:	bf08      	it	eq
    c23c:	ea90 0f02 	teqeq	r0, r2
    c240:	bf1f      	itttt	ne
    c242:	ea54 0c00 	orrsne.w	ip, r4, r0
    c246:	ea55 0c02 	orrsne.w	ip, r5, r2
    c24a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c24e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c252:	f000 80e2 	beq.w	c41a <__adddf3+0x1ee>
    c256:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c25a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c25e:	bfb8      	it	lt
    c260:	426d      	neglt	r5, r5
    c262:	dd0c      	ble.n	c27e <__adddf3+0x52>
    c264:	442c      	add	r4, r5
    c266:	ea80 0202 	eor.w	r2, r0, r2
    c26a:	ea81 0303 	eor.w	r3, r1, r3
    c26e:	ea82 0000 	eor.w	r0, r2, r0
    c272:	ea83 0101 	eor.w	r1, r3, r1
    c276:	ea80 0202 	eor.w	r2, r0, r2
    c27a:	ea81 0303 	eor.w	r3, r1, r3
    c27e:	2d36      	cmp	r5, #54	; 0x36
    c280:	bf88      	it	hi
    c282:	bd30      	pophi	{r4, r5, pc}
    c284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c288:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c28c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c294:	d002      	beq.n	c29c <__adddf3+0x70>
    c296:	4240      	negs	r0, r0
    c298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c29c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2a8:	d002      	beq.n	c2b0 <__adddf3+0x84>
    c2aa:	4252      	negs	r2, r2
    c2ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2b0:	ea94 0f05 	teq	r4, r5
    c2b4:	f000 80a7 	beq.w	c406 <__adddf3+0x1da>
    c2b8:	f1a4 0401 	sub.w	r4, r4, #1
    c2bc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2c0:	db0d      	blt.n	c2de <__adddf3+0xb2>
    c2c2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2c6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ca:	1880      	adds	r0, r0, r2
    c2cc:	f141 0100 	adc.w	r1, r1, #0
    c2d0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2d4:	1880      	adds	r0, r0, r2
    c2d6:	fa43 f305 	asr.w	r3, r3, r5
    c2da:	4159      	adcs	r1, r3
    c2dc:	e00e      	b.n	c2fc <__adddf3+0xd0>
    c2de:	f1a5 0520 	sub.w	r5, r5, #32
    c2e2:	f10e 0e20 	add.w	lr, lr, #32
    c2e6:	2a01      	cmp	r2, #1
    c2e8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c2ec:	bf28      	it	cs
    c2ee:	f04c 0c02 	orrcs.w	ip, ip, #2
    c2f2:	fa43 f305 	asr.w	r3, r3, r5
    c2f6:	18c0      	adds	r0, r0, r3
    c2f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c2fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c300:	d507      	bpl.n	c312 <__adddf3+0xe6>
    c302:	f04f 0e00 	mov.w	lr, #0
    c306:	f1dc 0c00 	rsbs	ip, ip, #0
    c30a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c30e:	eb6e 0101 	sbc.w	r1, lr, r1
    c312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c316:	d31b      	bcc.n	c350 <__adddf3+0x124>
    c318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c31c:	d30c      	bcc.n	c338 <__adddf3+0x10c>
    c31e:	0849      	lsrs	r1, r1, #1
    c320:	ea5f 0030 	movs.w	r0, r0, rrx
    c324:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c328:	f104 0401 	add.w	r4, r4, #1
    c32c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c334:	f080 809a 	bcs.w	c46c <__adddf3+0x240>
    c338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c33c:	bf08      	it	eq
    c33e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c342:	f150 0000 	adcs.w	r0, r0, #0
    c346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c34a:	ea41 0105 	orr.w	r1, r1, r5
    c34e:	bd30      	pop	{r4, r5, pc}
    c350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c354:	4140      	adcs	r0, r0
    c356:	eb41 0101 	adc.w	r1, r1, r1
    c35a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c35e:	f1a4 0401 	sub.w	r4, r4, #1
    c362:	d1e9      	bne.n	c338 <__adddf3+0x10c>
    c364:	f091 0f00 	teq	r1, #0
    c368:	bf04      	itt	eq
    c36a:	4601      	moveq	r1, r0
    c36c:	2000      	moveq	r0, #0
    c36e:	fab1 f381 	clz	r3, r1
    c372:	bf08      	it	eq
    c374:	3320      	addeq	r3, #32
    c376:	f1a3 030b 	sub.w	r3, r3, #11
    c37a:	f1b3 0220 	subs.w	r2, r3, #32
    c37e:	da0c      	bge.n	c39a <__adddf3+0x16e>
    c380:	320c      	adds	r2, #12
    c382:	dd08      	ble.n	c396 <__adddf3+0x16a>
    c384:	f102 0c14 	add.w	ip, r2, #20
    c388:	f1c2 020c 	rsb	r2, r2, #12
    c38c:	fa01 f00c 	lsl.w	r0, r1, ip
    c390:	fa21 f102 	lsr.w	r1, r1, r2
    c394:	e00c      	b.n	c3b0 <__adddf3+0x184>
    c396:	f102 0214 	add.w	r2, r2, #20
    c39a:	bfd8      	it	le
    c39c:	f1c2 0c20 	rsble	ip, r2, #32
    c3a0:	fa01 f102 	lsl.w	r1, r1, r2
    c3a4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3a8:	bfdc      	itt	le
    c3aa:	ea41 010c 	orrle.w	r1, r1, ip
    c3ae:	4090      	lslle	r0, r2
    c3b0:	1ae4      	subs	r4, r4, r3
    c3b2:	bfa2      	ittt	ge
    c3b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3b8:	4329      	orrge	r1, r5
    c3ba:	bd30      	popge	{r4, r5, pc}
    c3bc:	ea6f 0404 	mvn.w	r4, r4
    c3c0:	3c1f      	subs	r4, #31
    c3c2:	da1c      	bge.n	c3fe <__adddf3+0x1d2>
    c3c4:	340c      	adds	r4, #12
    c3c6:	dc0e      	bgt.n	c3e6 <__adddf3+0x1ba>
    c3c8:	f104 0414 	add.w	r4, r4, #20
    c3cc:	f1c4 0220 	rsb	r2, r4, #32
    c3d0:	fa20 f004 	lsr.w	r0, r0, r4
    c3d4:	fa01 f302 	lsl.w	r3, r1, r2
    c3d8:	ea40 0003 	orr.w	r0, r0, r3
    c3dc:	fa21 f304 	lsr.w	r3, r1, r4
    c3e0:	ea45 0103 	orr.w	r1, r5, r3
    c3e4:	bd30      	pop	{r4, r5, pc}
    c3e6:	f1c4 040c 	rsb	r4, r4, #12
    c3ea:	f1c4 0220 	rsb	r2, r4, #32
    c3ee:	fa20 f002 	lsr.w	r0, r0, r2
    c3f2:	fa01 f304 	lsl.w	r3, r1, r4
    c3f6:	ea40 0003 	orr.w	r0, r0, r3
    c3fa:	4629      	mov	r1, r5
    c3fc:	bd30      	pop	{r4, r5, pc}
    c3fe:	fa21 f004 	lsr.w	r0, r1, r4
    c402:	4629      	mov	r1, r5
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f094 0f00 	teq	r4, #0
    c40a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c40e:	bf06      	itte	eq
    c410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c414:	3401      	addeq	r4, #1
    c416:	3d01      	subne	r5, #1
    c418:	e74e      	b.n	c2b8 <__adddf3+0x8c>
    c41a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c41e:	bf18      	it	ne
    c420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c424:	d029      	beq.n	c47a <__adddf3+0x24e>
    c426:	ea94 0f05 	teq	r4, r5
    c42a:	bf08      	it	eq
    c42c:	ea90 0f02 	teqeq	r0, r2
    c430:	d005      	beq.n	c43e <__adddf3+0x212>
    c432:	ea54 0c00 	orrs.w	ip, r4, r0
    c436:	bf04      	itt	eq
    c438:	4619      	moveq	r1, r3
    c43a:	4610      	moveq	r0, r2
    c43c:	bd30      	pop	{r4, r5, pc}
    c43e:	ea91 0f03 	teq	r1, r3
    c442:	bf1e      	ittt	ne
    c444:	2100      	movne	r1, #0
    c446:	2000      	movne	r0, #0
    c448:	bd30      	popne	{r4, r5, pc}
    c44a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c44e:	d105      	bne.n	c45c <__adddf3+0x230>
    c450:	0040      	lsls	r0, r0, #1
    c452:	4149      	adcs	r1, r1
    c454:	bf28      	it	cs
    c456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c45a:	bd30      	pop	{r4, r5, pc}
    c45c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c460:	bf3c      	itt	cc
    c462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c466:	bd30      	popcc	{r4, r5, pc}
    c468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c46c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c474:	f04f 0000 	mov.w	r0, #0
    c478:	bd30      	pop	{r4, r5, pc}
    c47a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c47e:	bf1a      	itte	ne
    c480:	4619      	movne	r1, r3
    c482:	4610      	movne	r0, r2
    c484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c488:	bf1c      	itt	ne
    c48a:	460b      	movne	r3, r1
    c48c:	4602      	movne	r2, r0
    c48e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c492:	bf06      	itte	eq
    c494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c498:	ea91 0f03 	teqeq	r1, r3
    c49c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4a0:	bd30      	pop	{r4, r5, pc}
    c4a2:	bf00      	nop

0000c4a4 <__aeabi_ui2d>:
    c4a4:	f090 0f00 	teq	r0, #0
    c4a8:	bf04      	itt	eq
    c4aa:	2100      	moveq	r1, #0
    c4ac:	4770      	bxeq	lr
    c4ae:	b530      	push	{r4, r5, lr}
    c4b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4b8:	f04f 0500 	mov.w	r5, #0
    c4bc:	f04f 0100 	mov.w	r1, #0
    c4c0:	e750      	b.n	c364 <__adddf3+0x138>
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_i2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4dc:	bf48      	it	mi
    c4de:	4240      	negmi	r0, r0
    c4e0:	f04f 0100 	mov.w	r1, #0
    c4e4:	e73e      	b.n	c364 <__adddf3+0x138>
    c4e6:	bf00      	nop

0000c4e8 <__aeabi_f2d>:
    c4e8:	0042      	lsls	r2, r0, #1
    c4ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c4ee:	ea4f 0131 	mov.w	r1, r1, rrx
    c4f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c4f6:	bf1f      	itttt	ne
    c4f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c4fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c504:	4770      	bxne	lr
    c506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c50a:	bf08      	it	eq
    c50c:	4770      	bxeq	lr
    c50e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c512:	bf04      	itt	eq
    c514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c518:	4770      	bxeq	lr
    c51a:	b530      	push	{r4, r5, lr}
    c51c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c528:	e71c      	b.n	c364 <__adddf3+0x138>
    c52a:	bf00      	nop

0000c52c <__aeabi_ul2d>:
    c52c:	ea50 0201 	orrs.w	r2, r0, r1
    c530:	bf08      	it	eq
    c532:	4770      	bxeq	lr
    c534:	b530      	push	{r4, r5, lr}
    c536:	f04f 0500 	mov.w	r5, #0
    c53a:	e00a      	b.n	c552 <__aeabi_l2d+0x16>

0000c53c <__aeabi_l2d>:
    c53c:	ea50 0201 	orrs.w	r2, r0, r1
    c540:	bf08      	it	eq
    c542:	4770      	bxeq	lr
    c544:	b530      	push	{r4, r5, lr}
    c546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c54a:	d502      	bpl.n	c552 <__aeabi_l2d+0x16>
    c54c:	4240      	negs	r0, r0
    c54e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c552:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c556:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c55a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c55e:	f43f aed8 	beq.w	c312 <__adddf3+0xe6>
    c562:	f04f 0203 	mov.w	r2, #3
    c566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c56a:	bf18      	it	ne
    c56c:	3203      	addne	r2, #3
    c56e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c572:	bf18      	it	ne
    c574:	3203      	addne	r2, #3
    c576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c57a:	f1c2 0320 	rsb	r3, r2, #32
    c57e:	fa00 fc03 	lsl.w	ip, r0, r3
    c582:	fa20 f002 	lsr.w	r0, r0, r2
    c586:	fa01 fe03 	lsl.w	lr, r1, r3
    c58a:	ea40 000e 	orr.w	r0, r0, lr
    c58e:	fa21 f102 	lsr.w	r1, r1, r2
    c592:	4414      	add	r4, r2
    c594:	e6bd      	b.n	c312 <__adddf3+0xe6>
    c596:	bf00      	nop

0000c598 <__aeabi_uldivmod>:
    c598:	b953      	cbnz	r3, c5b0 <__aeabi_uldivmod+0x18>
    c59a:	b94a      	cbnz	r2, c5b0 <__aeabi_uldivmod+0x18>
    c59c:	2900      	cmp	r1, #0
    c59e:	bf08      	it	eq
    c5a0:	2800      	cmpeq	r0, #0
    c5a2:	bf1c      	itt	ne
    c5a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c5a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c5ac:	f000 b97c 	b.w	c8a8 <__aeabi_idiv0>
    c5b0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5b8:	f000 f806 	bl	c5c8 <__udivmoddi4>
    c5bc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5c4:	b004      	add	sp, #16
    c5c6:	4770      	bx	lr

0000c5c8 <__udivmoddi4>:
    c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5cc:	468c      	mov	ip, r1
    c5ce:	9d08      	ldr	r5, [sp, #32]
    c5d0:	4604      	mov	r4, r0
    c5d2:	468a      	mov	sl, r1
    c5d4:	2b00      	cmp	r3, #0
    c5d6:	d14a      	bne.n	c66e <__udivmoddi4+0xa6>
    c5d8:	428a      	cmp	r2, r1
    c5da:	4617      	mov	r7, r2
    c5dc:	d962      	bls.n	c6a4 <__udivmoddi4+0xdc>
    c5de:	fab2 f682 	clz	r6, r2
    c5e2:	b14e      	cbz	r6, c5f8 <__udivmoddi4+0x30>
    c5e4:	f1c6 0e20 	rsb	lr, r6, #32
    c5e8:	fa01 f306 	lsl.w	r3, r1, r6
    c5ec:	40b7      	lsls	r7, r6
    c5ee:	40b4      	lsls	r4, r6
    c5f0:	fa20 fe0e 	lsr.w	lr, r0, lr
    c5f4:	ea4e 0a03 	orr.w	sl, lr, r3
    c5f8:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c5fc:	0c23      	lsrs	r3, r4, #16
    c5fe:	fa1f f987 	uxth.w	r9, r7
    c602:	fbba fef8 	udiv	lr, sl, r8
    c606:	fb08 aa1e 	mls	sl, r8, lr, sl
    c60a:	fb0e f209 	mul.w	r2, lr, r9
    c60e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    c612:	429a      	cmp	r2, r3
    c614:	d90b      	bls.n	c62e <__udivmoddi4+0x66>
    c616:	18fb      	adds	r3, r7, r3
    c618:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    c61c:	bf2c      	ite	cs
    c61e:	2001      	movcs	r0, #1
    c620:	2000      	movcc	r0, #0
    c622:	429a      	cmp	r2, r3
    c624:	d902      	bls.n	c62c <__udivmoddi4+0x64>
    c626:	2800      	cmp	r0, #0
    c628:	f000 812a 	beq.w	c880 <__udivmoddi4+0x2b8>
    c62c:	468e      	mov	lr, r1
    c62e:	1a9a      	subs	r2, r3, r2
    c630:	b2a3      	uxth	r3, r4
    c632:	fbb2 f0f8 	udiv	r0, r2, r8
    c636:	fb08 2210 	mls	r2, r8, r0, r2
    c63a:	fb00 f909 	mul.w	r9, r0, r9
    c63e:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    c642:	45a1      	cmp	r9, r4
    c644:	d907      	bls.n	c656 <__udivmoddi4+0x8e>
    c646:	193c      	adds	r4, r7, r4
    c648:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c64c:	d202      	bcs.n	c654 <__udivmoddi4+0x8c>
    c64e:	45a1      	cmp	r9, r4
    c650:	f200 8110 	bhi.w	c874 <__udivmoddi4+0x2ac>
    c654:	4618      	mov	r0, r3
    c656:	eba4 0409 	sub.w	r4, r4, r9
    c65a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c65e:	2100      	movs	r1, #0
    c660:	b11d      	cbz	r5, c66a <__udivmoddi4+0xa2>
    c662:	40f4      	lsrs	r4, r6
    c664:	2300      	movs	r3, #0
    c666:	e9c5 4300 	strd	r4, r3, [r5]
    c66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c66e:	428b      	cmp	r3, r1
    c670:	d908      	bls.n	c684 <__udivmoddi4+0xbc>
    c672:	2d00      	cmp	r5, #0
    c674:	f000 80f2 	beq.w	c85c <__udivmoddi4+0x294>
    c678:	2100      	movs	r1, #0
    c67a:	e9c5 0c00 	strd	r0, ip, [r5]
    c67e:	4608      	mov	r0, r1
    c680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c684:	fab3 f183 	clz	r1, r3
    c688:	2900      	cmp	r1, #0
    c68a:	d14e      	bne.n	c72a <__udivmoddi4+0x162>
    c68c:	4563      	cmp	r3, ip
    c68e:	f0c0 80e8 	bcc.w	c862 <__udivmoddi4+0x29a>
    c692:	4282      	cmp	r2, r0
    c694:	f240 80e5 	bls.w	c862 <__udivmoddi4+0x29a>
    c698:	4608      	mov	r0, r1
    c69a:	2d00      	cmp	r5, #0
    c69c:	d0e5      	beq.n	c66a <__udivmoddi4+0xa2>
    c69e:	e9c5 4a00 	strd	r4, sl, [r5]
    c6a2:	e7e2      	b.n	c66a <__udivmoddi4+0xa2>
    c6a4:	b902      	cbnz	r2, c6a8 <__udivmoddi4+0xe0>
    c6a6:	deff      	udf	#255	; 0xff
    c6a8:	fab2 f682 	clz	r6, r2
    c6ac:	2e00      	cmp	r6, #0
    c6ae:	f040 8099 	bne.w	c7e4 <__udivmoddi4+0x21c>
    c6b2:	1a8b      	subs	r3, r1, r2
    c6b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    c6b8:	fa1f f882 	uxth.w	r8, r2
    c6bc:	2101      	movs	r1, #1
    c6be:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c6c2:	fbb3 f2fe 	udiv	r2, r3, lr
    c6c6:	fb0e 3012 	mls	r0, lr, r2, r3
    c6ca:	fb08 f902 	mul.w	r9, r8, r2
    c6ce:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    c6d2:	45e1      	cmp	r9, ip
    c6d4:	d908      	bls.n	c6e8 <__udivmoddi4+0x120>
    c6d6:	eb17 0c0c 	adds.w	ip, r7, ip
    c6da:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    c6de:	d202      	bcs.n	c6e6 <__udivmoddi4+0x11e>
    c6e0:	45e1      	cmp	r9, ip
    c6e2:	f200 80ca 	bhi.w	c87a <__udivmoddi4+0x2b2>
    c6e6:	461a      	mov	r2, r3
    c6e8:	ebac 0c09 	sub.w	ip, ip, r9
    c6ec:	b2a3      	uxth	r3, r4
    c6ee:	fbbc f0fe 	udiv	r0, ip, lr
    c6f2:	fb0e cc10 	mls	ip, lr, r0, ip
    c6f6:	fb08 f800 	mul.w	r8, r8, r0
    c6fa:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
    c6fe:	45a0      	cmp	r8, r4
    c700:	d90e      	bls.n	c720 <__udivmoddi4+0x158>
    c702:	193c      	adds	r4, r7, r4
    c704:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c708:	bf2c      	ite	cs
    c70a:	f04f 0c01 	movcs.w	ip, #1
    c70e:	f04f 0c00 	movcc.w	ip, #0
    c712:	45a0      	cmp	r8, r4
    c714:	d903      	bls.n	c71e <__udivmoddi4+0x156>
    c716:	f1bc 0f00 	cmp.w	ip, #0
    c71a:	f000 80a8 	beq.w	c86e <__udivmoddi4+0x2a6>
    c71e:	4618      	mov	r0, r3
    c720:	eba4 0408 	sub.w	r4, r4, r8
    c724:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    c728:	e79a      	b.n	c660 <__udivmoddi4+0x98>
    c72a:	f1c1 0420 	rsb	r4, r1, #32
    c72e:	408b      	lsls	r3, r1
    c730:	fa02 fe01 	lsl.w	lr, r2, r1
    c734:	fa0c f601 	lsl.w	r6, ip, r1
    c738:	40e2      	lsrs	r2, r4
    c73a:	fa20 f704 	lsr.w	r7, r0, r4
    c73e:	fa2c fc04 	lsr.w	ip, ip, r4
    c742:	fa00 f801 	lsl.w	r8, r0, r1
    c746:	4313      	orrs	r3, r2
    c748:	433e      	orrs	r6, r7
    c74a:	0c1f      	lsrs	r7, r3, #16
    c74c:	0c32      	lsrs	r2, r6, #16
    c74e:	fa1f f983 	uxth.w	r9, r3
    c752:	fbbc f0f7 	udiv	r0, ip, r7
    c756:	fb07 cc10 	mls	ip, r7, r0, ip
    c75a:	fb00 fa09 	mul.w	sl, r0, r9
    c75e:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c762:	45e2      	cmp	sl, ip
    c764:	d908      	bls.n	c778 <__udivmoddi4+0x1b0>
    c766:	eb13 0c0c 	adds.w	ip, r3, ip
    c76a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    c76e:	d202      	bcs.n	c776 <__udivmoddi4+0x1ae>
    c770:	45e2      	cmp	sl, ip
    c772:	f200 8089 	bhi.w	c888 <__udivmoddi4+0x2c0>
    c776:	4610      	mov	r0, r2
    c778:	ebac 0c0a 	sub.w	ip, ip, sl
    c77c:	b2b6      	uxth	r6, r6
    c77e:	fbbc faf7 	udiv	sl, ip, r7
    c782:	fb07 cc1a 	mls	ip, r7, sl, ip
    c786:	fb0a f909 	mul.w	r9, sl, r9
    c78a:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
    c78e:	4591      	cmp	r9, r2
    c790:	d906      	bls.n	c7a0 <__udivmoddi4+0x1d8>
    c792:	189a      	adds	r2, r3, r2
    c794:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
    c798:	d201      	bcs.n	c79e <__udivmoddi4+0x1d6>
    c79a:	4591      	cmp	r9, r2
    c79c:	d87a      	bhi.n	c894 <__udivmoddi4+0x2cc>
    c79e:	46b2      	mov	sl, r6
    c7a0:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
    c7a4:	eba2 0209 	sub.w	r2, r2, r9
    c7a8:	fba0 670e 	umull	r6, r7, r0, lr
    c7ac:	42ba      	cmp	r2, r7
    c7ae:	46b4      	mov	ip, r6
    c7b0:	46b9      	mov	r9, r7
    c7b2:	d302      	bcc.n	c7ba <__udivmoddi4+0x1f2>
    c7b4:	d107      	bne.n	c7c6 <__udivmoddi4+0x1fe>
    c7b6:	45b0      	cmp	r8, r6
    c7b8:	d205      	bcs.n	c7c6 <__udivmoddi4+0x1fe>
    c7ba:	ebb6 0c0e 	subs.w	ip, r6, lr
    c7be:	eb67 0303 	sbc.w	r3, r7, r3
    c7c2:	3801      	subs	r0, #1
    c7c4:	4699      	mov	r9, r3
    c7c6:	2d00      	cmp	r5, #0
    c7c8:	d06b      	beq.n	c8a2 <__udivmoddi4+0x2da>
    c7ca:	ebb8 030c 	subs.w	r3, r8, ip
    c7ce:	eb62 0209 	sbc.w	r2, r2, r9
    c7d2:	fa02 f404 	lsl.w	r4, r2, r4
    c7d6:	40cb      	lsrs	r3, r1
    c7d8:	40ca      	lsrs	r2, r1
    c7da:	2100      	movs	r1, #0
    c7dc:	431c      	orrs	r4, r3
    c7de:	e9c5 4200 	strd	r4, r2, [r5]
    c7e2:	e742      	b.n	c66a <__udivmoddi4+0xa2>
    c7e4:	40b7      	lsls	r7, r6
    c7e6:	f1c6 0220 	rsb	r2, r6, #32
    c7ea:	fa01 f306 	lsl.w	r3, r1, r6
    c7ee:	40b4      	lsls	r4, r6
    c7f0:	fa21 fc02 	lsr.w	ip, r1, r2
    c7f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c7f8:	fa20 f202 	lsr.w	r2, r0, r2
    c7fc:	fa1f f887 	uxth.w	r8, r7
    c800:	fbbc f1fe 	udiv	r1, ip, lr
    c804:	431a      	orrs	r2, r3
    c806:	fb0e cc11 	mls	ip, lr, r1, ip
    c80a:	fb01 f008 	mul.w	r0, r1, r8
    c80e:	0c13      	lsrs	r3, r2, #16
    c810:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    c814:	4560      	cmp	r0, ip
    c816:	d907      	bls.n	c828 <__udivmoddi4+0x260>
    c818:	eb17 0c0c 	adds.w	ip, r7, ip
    c81c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
    c820:	d201      	bcs.n	c826 <__udivmoddi4+0x25e>
    c822:	4560      	cmp	r0, ip
    c824:	d833      	bhi.n	c88e <__udivmoddi4+0x2c6>
    c826:	4619      	mov	r1, r3
    c828:	ebac 0c00 	sub.w	ip, ip, r0
    c82c:	b292      	uxth	r2, r2
    c82e:	fbbc f0fe 	udiv	r0, ip, lr
    c832:	fb0e cc10 	mls	ip, lr, r0, ip
    c836:	fb00 f308 	mul.w	r3, r0, r8
    c83a:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c83e:	4563      	cmp	r3, ip
    c840:	d907      	bls.n	c852 <__udivmoddi4+0x28a>
    c842:	eb17 0c0c 	adds.w	ip, r7, ip
    c846:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    c84a:	d201      	bcs.n	c850 <__udivmoddi4+0x288>
    c84c:	4563      	cmp	r3, ip
    c84e:	d825      	bhi.n	c89c <__udivmoddi4+0x2d4>
    c850:	4610      	mov	r0, r2
    c852:	ebac 0303 	sub.w	r3, ip, r3
    c856:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c85a:	e730      	b.n	c6be <__udivmoddi4+0xf6>
    c85c:	4629      	mov	r1, r5
    c85e:	4628      	mov	r0, r5
    c860:	e703      	b.n	c66a <__udivmoddi4+0xa2>
    c862:	1a84      	subs	r4, r0, r2
    c864:	eb6c 0303 	sbc.w	r3, ip, r3
    c868:	2001      	movs	r0, #1
    c86a:	469a      	mov	sl, r3
    c86c:	e715      	b.n	c69a <__udivmoddi4+0xd2>
    c86e:	3802      	subs	r0, #2
    c870:	443c      	add	r4, r7
    c872:	e755      	b.n	c720 <__udivmoddi4+0x158>
    c874:	3802      	subs	r0, #2
    c876:	443c      	add	r4, r7
    c878:	e6ed      	b.n	c656 <__udivmoddi4+0x8e>
    c87a:	3a02      	subs	r2, #2
    c87c:	44bc      	add	ip, r7
    c87e:	e733      	b.n	c6e8 <__udivmoddi4+0x120>
    c880:	f1ae 0e02 	sub.w	lr, lr, #2
    c884:	443b      	add	r3, r7
    c886:	e6d2      	b.n	c62e <__udivmoddi4+0x66>
    c888:	3802      	subs	r0, #2
    c88a:	449c      	add	ip, r3
    c88c:	e774      	b.n	c778 <__udivmoddi4+0x1b0>
    c88e:	3902      	subs	r1, #2
    c890:	44bc      	add	ip, r7
    c892:	e7c9      	b.n	c828 <__udivmoddi4+0x260>
    c894:	f1aa 0a02 	sub.w	sl, sl, #2
    c898:	441a      	add	r2, r3
    c89a:	e781      	b.n	c7a0 <__udivmoddi4+0x1d8>
    c89c:	3802      	subs	r0, #2
    c89e:	44bc      	add	ip, r7
    c8a0:	e7d7      	b.n	c852 <__udivmoddi4+0x28a>
    c8a2:	4629      	mov	r1, r5
    c8a4:	e6e1      	b.n	c66a <__udivmoddi4+0xa2>
    c8a6:	bf00      	nop

0000c8a8 <__aeabi_idiv0>:
    c8a8:	4770      	bx	lr
    c8aa:	bf00      	nop

0000c8ac <ocrypto_bigint_add128>:
    c8ac:	b470      	push	{r4, r5, r6}
    c8ae:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c8b2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c8b6:	185b      	adds	r3, r3, r1
    c8b8:	eb54 040c 	adcs.w	r4, r4, ip
    c8bc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c8c0:	414d      	adcs	r5, r1
    c8c2:	eb56 060c 	adcs.w	r6, r6, ip
    c8c6:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c8ca:	4180      	sbcs	r0, r0
    c8cc:	3001      	adds	r0, #1
    c8ce:	bc70      	pop	{r4, r5, r6}
    c8d0:	4770      	bx	lr

0000c8d2 <ocrypto_bigint_sub128>:
    c8d2:	b470      	push	{r4, r5, r6}
    c8d4:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c8d8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c8dc:	1a5b      	subs	r3, r3, r1
    c8de:	eb74 040c 	sbcs.w	r4, r4, ip
    c8e2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c8e6:	418d      	sbcs	r5, r1
    c8e8:	eb76 060c 	sbcs.w	r6, r6, ip
    c8ec:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c8f0:	4180      	sbcs	r0, r0
    c8f2:	4240      	negs	r0, r0
    c8f4:	bc70      	pop	{r4, r5, r6}
    c8f6:	4770      	bx	lr

0000c8f8 <ocrypto_bigint_add256>:
    c8f8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c8fc:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c900:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c904:	185b      	adds	r3, r3, r1
    c906:	eb54 040c 	adcs.w	r4, r4, ip
    c90a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c90e:	414d      	adcs	r5, r1
    c910:	eb56 060c 	adcs.w	r6, r6, ip
    c914:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c918:	414f      	adcs	r7, r1
    c91a:	eb58 080c 	adcs.w	r8, r8, ip
    c91e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c922:	eb59 0901 	adcs.w	r9, r9, r1
    c926:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c92a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c92e:	4180      	sbcs	r0, r0
    c930:	3001      	adds	r0, #1
    c932:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c936:	4770      	bx	lr

0000c938 <ocrypto_bigint_sub256>:
    c938:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c93c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c940:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c944:	1a5b      	subs	r3, r3, r1
    c946:	eb74 040c 	sbcs.w	r4, r4, ip
    c94a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c94e:	418d      	sbcs	r5, r1
    c950:	eb76 060c 	sbcs.w	r6, r6, ip
    c954:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c958:	418f      	sbcs	r7, r1
    c95a:	eb78 080c 	sbcs.w	r8, r8, ip
    c95e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c962:	eb79 0901 	sbcs.w	r9, r9, r1
    c966:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    c96a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c96e:	4180      	sbcs	r0, r0
    c970:	4240      	negs	r0, r0
    c972:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c976:	4770      	bx	lr

0000c978 <ocrypto_bigint_cadd256>:
    c978:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c97c:	4252      	negs	r2, r2
    c97e:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c982:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c986:	4017      	ands	r7, r2
    c988:	19db      	adds	r3, r3, r7
    c98a:	ea18 0802 	ands.w	r8, r8, r2
    c98e:	eb54 0408 	adcs.w	r4, r4, r8
    c992:	ea19 0902 	ands.w	r9, r9, r2
    c996:	eb55 0509 	adcs.w	r5, r5, r9
    c99a:	ea1a 0a02 	ands.w	sl, sl, r2
    c99e:	eb56 060a 	adcs.w	r6, r6, sl
    c9a2:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c9a4:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c9a8:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c9ac:	4017      	ands	r7, r2
    c9ae:	417b      	adcs	r3, r7
    c9b0:	ea18 0802 	ands.w	r8, r8, r2
    c9b4:	eb54 0408 	adcs.w	r4, r4, r8
    c9b8:	ea19 0902 	ands.w	r9, r9, r2
    c9bc:	eb55 0509 	adcs.w	r5, r5, r9
    c9c0:	ea1a 0a02 	ands.w	sl, sl, r2
    c9c4:	eb56 060a 	adcs.w	r6, r6, sl
    c9c8:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c9ca:	4180      	sbcs	r0, r0
    c9cc:	3001      	adds	r0, #1
    c9ce:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c9d2:	4770      	bx	lr

0000c9d4 <ocrypto_bigint_csub256>:
    c9d4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c9d8:	4252      	negs	r2, r2
    c9da:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c9de:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c9e2:	4017      	ands	r7, r2
    c9e4:	1bdb      	subs	r3, r3, r7
    c9e6:	ea18 0802 	ands.w	r8, r8, r2
    c9ea:	eb74 0408 	sbcs.w	r4, r4, r8
    c9ee:	ea19 0902 	ands.w	r9, r9, r2
    c9f2:	eb75 0509 	sbcs.w	r5, r5, r9
    c9f6:	ea1a 0a02 	ands.w	sl, sl, r2
    c9fa:	eb76 060a 	sbcs.w	r6, r6, sl
    c9fe:	c078      	stmia	r0!, {r3, r4, r5, r6}
    ca00:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    ca04:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    ca08:	4017      	ands	r7, r2
    ca0a:	41bb      	sbcs	r3, r7
    ca0c:	ea18 0802 	ands.w	r8, r8, r2
    ca10:	eb74 0408 	sbcs.w	r4, r4, r8
    ca14:	ea19 0902 	ands.w	r9, r9, r2
    ca18:	eb75 0509 	sbcs.w	r5, r5, r9
    ca1c:	ea1a 0a02 	ands.w	sl, sl, r2
    ca20:	eb76 060a 	sbcs.w	r6, r6, sl
    ca24:	c078      	stmia	r0!, {r3, r4, r5, r6}
    ca26:	4180      	sbcs	r0, r0
    ca28:	4240      	negs	r0, r0
    ca2a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ca2e:	4770      	bx	lr

0000ca30 <cswap64>:
    ca30:	e890 0030 	ldmia.w	r0, {r4, r5}
    ca34:	e891 00c0 	ldmia.w	r1, {r6, r7}
    ca38:	1ba3      	subs	r3, r4, r6
    ca3a:	4013      	ands	r3, r2
    ca3c:	1ae4      	subs	r4, r4, r3
    ca3e:	18f6      	adds	r6, r6, r3
    ca40:	1beb      	subs	r3, r5, r7
    ca42:	4013      	ands	r3, r2
    ca44:	1aed      	subs	r5, r5, r3
    ca46:	18ff      	adds	r7, r7, r3
    ca48:	c030      	stmia	r0!, {r4, r5}
    ca4a:	c1c0      	stmia	r1!, {r6, r7}
    ca4c:	4770      	bx	lr

0000ca4e <ocrypto_bigint_cswap256>:
    ca4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca50:	4252      	negs	r2, r2
    ca52:	f7ff ffed 	bl	ca30 <cswap64>
    ca56:	f7ff ffeb 	bl	ca30 <cswap64>
    ca5a:	f7ff ffe9 	bl	ca30 <cswap64>
    ca5e:	f7ff ffe7 	bl	ca30 <cswap64>
    ca62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ca64 <ocrypto_bigint_mul128>:
    ca64:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ca68:	c93a      	ldmia	r1, {r1, r3, r4, r5}
    ca6a:	6816      	ldr	r6, [r2, #0]
    ca6c:	fba1 9a06 	umull	r9, sl, r1, r6
    ca70:	f04f 0c00 	mov.w	ip, #0
    ca74:	fbe3 ac06 	umlal	sl, ip, r3, r6
    ca78:	f04f 0700 	mov.w	r7, #0
    ca7c:	fbe4 c706 	umlal	ip, r7, r4, r6
    ca80:	f04f 0800 	mov.w	r8, #0
    ca84:	fbe5 7806 	umlal	r7, r8, r5, r6
    ca88:	f840 9b04 	str.w	r9, [r0], #4
    ca8c:	6856      	ldr	r6, [r2, #4]
    ca8e:	f04f 0900 	mov.w	r9, #0
    ca92:	fbe1 a906 	umlal	sl, r9, r1, r6
    ca96:	eb1c 0c09 	adds.w	ip, ip, r9
    ca9a:	f04f 0900 	mov.w	r9, #0
    ca9e:	eb49 0909 	adc.w	r9, r9, r9
    caa2:	fbe3 c906 	umlal	ip, r9, r3, r6
    caa6:	eb17 0709 	adds.w	r7, r7, r9
    caaa:	f04f 0900 	mov.w	r9, #0
    caae:	eb49 0909 	adc.w	r9, r9, r9
    cab2:	fbe4 7906 	umlal	r7, r9, r4, r6
    cab6:	eb18 0809 	adds.w	r8, r8, r9
    caba:	f04f 0900 	mov.w	r9, #0
    cabe:	eb49 0909 	adc.w	r9, r9, r9
    cac2:	fbe5 8906 	umlal	r8, r9, r5, r6
    cac6:	f840 ab04 	str.w	sl, [r0], #4
    caca:	6896      	ldr	r6, [r2, #8]
    cacc:	f04f 0a00 	mov.w	sl, #0
    cad0:	fbe1 ca06 	umlal	ip, sl, r1, r6
    cad4:	eb17 070a 	adds.w	r7, r7, sl
    cad8:	f04f 0a00 	mov.w	sl, #0
    cadc:	eb4a 0a0a 	adc.w	sl, sl, sl
    cae0:	fbe3 7a06 	umlal	r7, sl, r3, r6
    cae4:	eb18 080a 	adds.w	r8, r8, sl
    cae8:	f04f 0a00 	mov.w	sl, #0
    caec:	eb4a 0a0a 	adc.w	sl, sl, sl
    caf0:	fbe4 8a06 	umlal	r8, sl, r4, r6
    caf4:	eb19 090a 	adds.w	r9, r9, sl
    caf8:	f04f 0a00 	mov.w	sl, #0
    cafc:	eb4a 0a0a 	adc.w	sl, sl, sl
    cb00:	fbe5 9a06 	umlal	r9, sl, r5, r6
    cb04:	f840 cb04 	str.w	ip, [r0], #4
    cb08:	68d6      	ldr	r6, [r2, #12]
    cb0a:	f04f 0c00 	mov.w	ip, #0
    cb0e:	fbe1 7c06 	umlal	r7, ip, r1, r6
    cb12:	eb18 080c 	adds.w	r8, r8, ip
    cb16:	f04f 0c00 	mov.w	ip, #0
    cb1a:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb1e:	fbe3 8c06 	umlal	r8, ip, r3, r6
    cb22:	eb19 090c 	adds.w	r9, r9, ip
    cb26:	f04f 0c00 	mov.w	ip, #0
    cb2a:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb2e:	fbe4 9c06 	umlal	r9, ip, r4, r6
    cb32:	eb1a 0a0c 	adds.w	sl, sl, ip
    cb36:	f04f 0c00 	mov.w	ip, #0
    cb3a:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb3e:	fbe5 ac06 	umlal	sl, ip, r5, r6
    cb42:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
    cb46:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cb4a:	4770      	bx	lr

0000cb4c <ocrypto_bigint_sqr256>:
    cb4c:	460a      	mov	r2, r1

0000cb4e <ocrypto_bigint_mul256>:
    cb4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb52:	ec41 0a14 	vmov	s8, s9, r0, r1
    cb56:	ec92 0a08 	vldmia	r2, {s0-s7}
    cb5a:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cb5c:	ee10 0a10 	vmov	r0, s0
    cb60:	fba1 7800 	umull	r7, r8, r1, r0
    cb64:	f04f 0900 	mov.w	r9, #0
    cb68:	fbe2 8900 	umlal	r8, r9, r2, r0
    cb6c:	f04f 0a00 	mov.w	sl, #0
    cb70:	fbe3 9a00 	umlal	r9, sl, r3, r0
    cb74:	f04f 0b00 	mov.w	fp, #0
    cb78:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cb7c:	ee12 0a10 	vmov	r0, s4
    cb80:	f04f 0c00 	mov.w	ip, #0
    cb84:	fbe1 bc00 	umlal	fp, ip, r1, r0
    cb88:	f04f 0e00 	mov.w	lr, #0
    cb8c:	fbe2 ce00 	umlal	ip, lr, r2, r0
    cb90:	f04f 0500 	mov.w	r5, #0
    cb94:	fbe3 e500 	umlal	lr, r5, r3, r0
    cb98:	f04f 0600 	mov.w	r6, #0
    cb9c:	fbe4 5600 	umlal	r5, r6, r4, r0
    cba0:	ee05 7a10 	vmov	s10, r7
    cba4:	ee10 0a90 	vmov	r0, s1
    cba8:	f04f 0700 	mov.w	r7, #0
    cbac:	fbe1 8700 	umlal	r8, r7, r1, r0
    cbb0:	eb19 0907 	adds.w	r9, r9, r7
    cbb4:	f04f 0700 	mov.w	r7, #0
    cbb8:	eb47 0707 	adc.w	r7, r7, r7
    cbbc:	fbe2 9700 	umlal	r9, r7, r2, r0
    cbc0:	eb1a 0a07 	adds.w	sl, sl, r7
    cbc4:	f04f 0700 	mov.w	r7, #0
    cbc8:	eb47 0707 	adc.w	r7, r7, r7
    cbcc:	fbe3 a700 	umlal	sl, r7, r3, r0
    cbd0:	eb1b 0b07 	adds.w	fp, fp, r7
    cbd4:	f04f 0700 	mov.w	r7, #0
    cbd8:	eb47 0707 	adc.w	r7, r7, r7
    cbdc:	fbe4 b700 	umlal	fp, r7, r4, r0
    cbe0:	ee12 0a90 	vmov	r0, s5
    cbe4:	eb1c 0c07 	adds.w	ip, ip, r7
    cbe8:	f04f 0700 	mov.w	r7, #0
    cbec:	eb47 0707 	adc.w	r7, r7, r7
    cbf0:	fbe1 c700 	umlal	ip, r7, r1, r0
    cbf4:	eb1e 0e07 	adds.w	lr, lr, r7
    cbf8:	f04f 0700 	mov.w	r7, #0
    cbfc:	eb47 0707 	adc.w	r7, r7, r7
    cc00:	fbe2 e700 	umlal	lr, r7, r2, r0
    cc04:	19ed      	adds	r5, r5, r7
    cc06:	f04f 0700 	mov.w	r7, #0
    cc0a:	eb47 0707 	adc.w	r7, r7, r7
    cc0e:	fbe3 5700 	umlal	r5, r7, r3, r0
    cc12:	19f6      	adds	r6, r6, r7
    cc14:	f04f 0700 	mov.w	r7, #0
    cc18:	eb47 0707 	adc.w	r7, r7, r7
    cc1c:	fbe4 6700 	umlal	r6, r7, r4, r0
    cc20:	ee05 8a90 	vmov	s11, r8
    cc24:	ee11 0a10 	vmov	r0, s2
    cc28:	f04f 0800 	mov.w	r8, #0
    cc2c:	fbe1 9800 	umlal	r9, r8, r1, r0
    cc30:	eb1a 0a08 	adds.w	sl, sl, r8
    cc34:	f04f 0800 	mov.w	r8, #0
    cc38:	eb48 0808 	adc.w	r8, r8, r8
    cc3c:	fbe2 a800 	umlal	sl, r8, r2, r0
    cc40:	eb1b 0b08 	adds.w	fp, fp, r8
    cc44:	f04f 0800 	mov.w	r8, #0
    cc48:	eb48 0808 	adc.w	r8, r8, r8
    cc4c:	fbe3 b800 	umlal	fp, r8, r3, r0
    cc50:	eb1c 0c08 	adds.w	ip, ip, r8
    cc54:	f04f 0800 	mov.w	r8, #0
    cc58:	eb48 0808 	adc.w	r8, r8, r8
    cc5c:	fbe4 c800 	umlal	ip, r8, r4, r0
    cc60:	ee13 0a10 	vmov	r0, s6
    cc64:	eb1e 0e08 	adds.w	lr, lr, r8
    cc68:	f04f 0800 	mov.w	r8, #0
    cc6c:	eb48 0808 	adc.w	r8, r8, r8
    cc70:	fbe1 e800 	umlal	lr, r8, r1, r0
    cc74:	eb15 0508 	adds.w	r5, r5, r8
    cc78:	f04f 0800 	mov.w	r8, #0
    cc7c:	eb48 0808 	adc.w	r8, r8, r8
    cc80:	fbe2 5800 	umlal	r5, r8, r2, r0
    cc84:	eb16 0608 	adds.w	r6, r6, r8
    cc88:	f04f 0800 	mov.w	r8, #0
    cc8c:	eb48 0808 	adc.w	r8, r8, r8
    cc90:	fbe3 6800 	umlal	r6, r8, r3, r0
    cc94:	eb17 0708 	adds.w	r7, r7, r8
    cc98:	f04f 0800 	mov.w	r8, #0
    cc9c:	eb48 0808 	adc.w	r8, r8, r8
    cca0:	fbe4 7800 	umlal	r7, r8, r4, r0
    cca4:	ee06 9a10 	vmov	s12, r9
    cca8:	ee11 0a90 	vmov	r0, s3
    ccac:	f04f 0900 	mov.w	r9, #0
    ccb0:	fbe1 a900 	umlal	sl, r9, r1, r0
    ccb4:	eb1b 0b09 	adds.w	fp, fp, r9
    ccb8:	f04f 0900 	mov.w	r9, #0
    ccbc:	eb49 0909 	adc.w	r9, r9, r9
    ccc0:	fbe2 b900 	umlal	fp, r9, r2, r0
    ccc4:	eb1c 0c09 	adds.w	ip, ip, r9
    ccc8:	f04f 0900 	mov.w	r9, #0
    cccc:	eb49 0909 	adc.w	r9, r9, r9
    ccd0:	fbe3 c900 	umlal	ip, r9, r3, r0
    ccd4:	eb1e 0e09 	adds.w	lr, lr, r9
    ccd8:	f04f 0900 	mov.w	r9, #0
    ccdc:	eb49 0909 	adc.w	r9, r9, r9
    cce0:	fbe4 e900 	umlal	lr, r9, r4, r0
    cce4:	ee13 0a90 	vmov	r0, s7
    cce8:	eb15 0509 	adds.w	r5, r5, r9
    ccec:	f04f 0900 	mov.w	r9, #0
    ccf0:	eb49 0909 	adc.w	r9, r9, r9
    ccf4:	fbe1 5900 	umlal	r5, r9, r1, r0
    ccf8:	eb16 0609 	adds.w	r6, r6, r9
    ccfc:	f04f 0900 	mov.w	r9, #0
    cd00:	eb49 0909 	adc.w	r9, r9, r9
    cd04:	fbe2 6900 	umlal	r6, r9, r2, r0
    cd08:	eb17 0709 	adds.w	r7, r7, r9
    cd0c:	f04f 0900 	mov.w	r9, #0
    cd10:	eb49 0909 	adc.w	r9, r9, r9
    cd14:	fbe3 7900 	umlal	r7, r9, r3, r0
    cd18:	eb18 0809 	adds.w	r8, r8, r9
    cd1c:	f04f 0900 	mov.w	r9, #0
    cd20:	eb49 0909 	adc.w	r9, r9, r9
    cd24:	fbe4 8900 	umlal	r8, r9, r4, r0
    cd28:	ee06 aa90 	vmov	s13, sl
    cd2c:	ee14 1a90 	vmov	r1, s9
    cd30:	f101 0110 	add.w	r1, r1, #16
    cd34:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cd36:	ee10 0a10 	vmov	r0, s0
    cd3a:	f04f 0a00 	mov.w	sl, #0
    cd3e:	fbe1 ba00 	umlal	fp, sl, r1, r0
    cd42:	eb1c 0c0a 	adds.w	ip, ip, sl
    cd46:	f04f 0a00 	mov.w	sl, #0
    cd4a:	eb4a 0a0a 	adc.w	sl, sl, sl
    cd4e:	fbe2 ca00 	umlal	ip, sl, r2, r0
    cd52:	eb1e 0e0a 	adds.w	lr, lr, sl
    cd56:	f04f 0a00 	mov.w	sl, #0
    cd5a:	eb4a 0a0a 	adc.w	sl, sl, sl
    cd5e:	fbe3 ea00 	umlal	lr, sl, r3, r0
    cd62:	eb15 050a 	adds.w	r5, r5, sl
    cd66:	f04f 0a00 	mov.w	sl, #0
    cd6a:	eb4a 0a0a 	adc.w	sl, sl, sl
    cd6e:	fbe4 5a00 	umlal	r5, sl, r4, r0
    cd72:	ee12 0a10 	vmov	r0, s4
    cd76:	eb16 060a 	adds.w	r6, r6, sl
    cd7a:	f04f 0a00 	mov.w	sl, #0
    cd7e:	eb4a 0a0a 	adc.w	sl, sl, sl
    cd82:	fbe1 6a00 	umlal	r6, sl, r1, r0
    cd86:	eb17 070a 	adds.w	r7, r7, sl
    cd8a:	f04f 0a00 	mov.w	sl, #0
    cd8e:	eb4a 0a0a 	adc.w	sl, sl, sl
    cd92:	fbe2 7a00 	umlal	r7, sl, r2, r0
    cd96:	eb18 080a 	adds.w	r8, r8, sl
    cd9a:	f04f 0a00 	mov.w	sl, #0
    cd9e:	eb4a 0a0a 	adc.w	sl, sl, sl
    cda2:	fbe3 8a00 	umlal	r8, sl, r3, r0
    cda6:	eb19 090a 	adds.w	r9, r9, sl
    cdaa:	f04f 0a00 	mov.w	sl, #0
    cdae:	eb4a 0a0a 	adc.w	sl, sl, sl
    cdb2:	fbe4 9a00 	umlal	r9, sl, r4, r0
    cdb6:	ee07 ba10 	vmov	s14, fp
    cdba:	ee10 0a90 	vmov	r0, s1
    cdbe:	f04f 0b00 	mov.w	fp, #0
    cdc2:	fbe1 cb00 	umlal	ip, fp, r1, r0
    cdc6:	eb1e 0e0b 	adds.w	lr, lr, fp
    cdca:	f04f 0b00 	mov.w	fp, #0
    cdce:	eb4b 0b0b 	adc.w	fp, fp, fp
    cdd2:	fbe2 eb00 	umlal	lr, fp, r2, r0
    cdd6:	eb15 050b 	adds.w	r5, r5, fp
    cdda:	f04f 0b00 	mov.w	fp, #0
    cdde:	eb4b 0b0b 	adc.w	fp, fp, fp
    cde2:	fbe3 5b00 	umlal	r5, fp, r3, r0
    cde6:	eb16 060b 	adds.w	r6, r6, fp
    cdea:	f04f 0b00 	mov.w	fp, #0
    cdee:	eb4b 0b0b 	adc.w	fp, fp, fp
    cdf2:	fbe4 6b00 	umlal	r6, fp, r4, r0
    cdf6:	ee12 0a90 	vmov	r0, s5
    cdfa:	eb17 070b 	adds.w	r7, r7, fp
    cdfe:	f04f 0b00 	mov.w	fp, #0
    ce02:	eb4b 0b0b 	adc.w	fp, fp, fp
    ce06:	fbe1 7b00 	umlal	r7, fp, r1, r0
    ce0a:	eb18 080b 	adds.w	r8, r8, fp
    ce0e:	f04f 0b00 	mov.w	fp, #0
    ce12:	eb4b 0b0b 	adc.w	fp, fp, fp
    ce16:	fbe2 8b00 	umlal	r8, fp, r2, r0
    ce1a:	eb19 090b 	adds.w	r9, r9, fp
    ce1e:	f04f 0b00 	mov.w	fp, #0
    ce22:	eb4b 0b0b 	adc.w	fp, fp, fp
    ce26:	fbe3 9b00 	umlal	r9, fp, r3, r0
    ce2a:	eb1a 0a0b 	adds.w	sl, sl, fp
    ce2e:	f04f 0b00 	mov.w	fp, #0
    ce32:	eb4b 0b0b 	adc.w	fp, fp, fp
    ce36:	fbe4 ab00 	umlal	sl, fp, r4, r0
    ce3a:	ee07 ca90 	vmov	s15, ip
    ce3e:	ee11 0a10 	vmov	r0, s2
    ce42:	f04f 0c00 	mov.w	ip, #0
    ce46:	fbe1 ec00 	umlal	lr, ip, r1, r0
    ce4a:	eb15 050c 	adds.w	r5, r5, ip
    ce4e:	f04f 0c00 	mov.w	ip, #0
    ce52:	eb4c 0c0c 	adc.w	ip, ip, ip
    ce56:	fbe2 5c00 	umlal	r5, ip, r2, r0
    ce5a:	eb16 060c 	adds.w	r6, r6, ip
    ce5e:	f04f 0c00 	mov.w	ip, #0
    ce62:	eb4c 0c0c 	adc.w	ip, ip, ip
    ce66:	fbe3 6c00 	umlal	r6, ip, r3, r0
    ce6a:	eb17 070c 	adds.w	r7, r7, ip
    ce6e:	f04f 0c00 	mov.w	ip, #0
    ce72:	eb4c 0c0c 	adc.w	ip, ip, ip
    ce76:	fbe4 7c00 	umlal	r7, ip, r4, r0
    ce7a:	ee13 0a10 	vmov	r0, s6
    ce7e:	eb18 080c 	adds.w	r8, r8, ip
    ce82:	f04f 0c00 	mov.w	ip, #0
    ce86:	eb4c 0c0c 	adc.w	ip, ip, ip
    ce8a:	fbe1 8c00 	umlal	r8, ip, r1, r0
    ce8e:	eb19 090c 	adds.w	r9, r9, ip
    ce92:	f04f 0c00 	mov.w	ip, #0
    ce96:	eb4c 0c0c 	adc.w	ip, ip, ip
    ce9a:	fbe2 9c00 	umlal	r9, ip, r2, r0
    ce9e:	eb1a 0a0c 	adds.w	sl, sl, ip
    cea2:	f04f 0c00 	mov.w	ip, #0
    cea6:	eb4c 0c0c 	adc.w	ip, ip, ip
    ceaa:	fbe3 ac00 	umlal	sl, ip, r3, r0
    ceae:	eb1b 0b0c 	adds.w	fp, fp, ip
    ceb2:	f04f 0c00 	mov.w	ip, #0
    ceb6:	eb4c 0c0c 	adc.w	ip, ip, ip
    ceba:	fbe4 bc00 	umlal	fp, ip, r4, r0
    cebe:	ee08 ea10 	vmov	s16, lr
    cec2:	ee11 0a90 	vmov	r0, s3
    cec6:	f04f 0e00 	mov.w	lr, #0
    ceca:	fbe1 5e00 	umlal	r5, lr, r1, r0
    cece:	eb16 060e 	adds.w	r6, r6, lr
    ced2:	f04f 0e00 	mov.w	lr, #0
    ced6:	eb4e 0e0e 	adc.w	lr, lr, lr
    ceda:	fbe2 6e00 	umlal	r6, lr, r2, r0
    cede:	eb17 070e 	adds.w	r7, r7, lr
    cee2:	f04f 0e00 	mov.w	lr, #0
    cee6:	eb4e 0e0e 	adc.w	lr, lr, lr
    ceea:	fbe3 7e00 	umlal	r7, lr, r3, r0
    ceee:	eb18 080e 	adds.w	r8, r8, lr
    cef2:	f04f 0e00 	mov.w	lr, #0
    cef6:	eb4e 0e0e 	adc.w	lr, lr, lr
    cefa:	fbe4 8e00 	umlal	r8, lr, r4, r0
    cefe:	ee13 0a90 	vmov	r0, s7
    cf02:	eb19 090e 	adds.w	r9, r9, lr
    cf06:	f04f 0e00 	mov.w	lr, #0
    cf0a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cf0e:	fbe1 9e00 	umlal	r9, lr, r1, r0
    cf12:	eb1a 0a0e 	adds.w	sl, sl, lr
    cf16:	f04f 0e00 	mov.w	lr, #0
    cf1a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cf1e:	fbe2 ae00 	umlal	sl, lr, r2, r0
    cf22:	eb1b 0b0e 	adds.w	fp, fp, lr
    cf26:	f04f 0e00 	mov.w	lr, #0
    cf2a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cf2e:	fbe3 be00 	umlal	fp, lr, r3, r0
    cf32:	eb1c 0c0e 	adds.w	ip, ip, lr
    cf36:	f04f 0e00 	mov.w	lr, #0
    cf3a:	eb4e 0e0e 	adc.w	lr, lr, lr
    cf3e:	fbe4 ce00 	umlal	ip, lr, r4, r0
    cf42:	ee14 0a10 	vmov	r0, s8
    cf46:	eca0 5a07 	vstmia	r0!, {s10-s16}
    cf4a:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    cf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf52:	bf00      	nop

0000cf54 <ocrypto_constant_time_equal>:
    cf54:	b430      	push	{r4, r5}
    cf56:	f04f 0300 	mov.w	r3, #0

0000cf5a <constant_time_equal_loop>:
    cf5a:	f810 4b01 	ldrb.w	r4, [r0], #1
    cf5e:	f811 5b01 	ldrb.w	r5, [r1], #1
    cf62:	3a01      	subs	r2, #1
    cf64:	ea84 0405 	eor.w	r4, r4, r5
    cf68:	ea43 0304 	orr.w	r3, r3, r4
    cf6c:	d1f5      	bne.n	cf5a <constant_time_equal_loop>
    cf6e:	f1a3 0301 	sub.w	r3, r3, #1
    cf72:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cf76:	bc30      	pop	{r4, r5}
    cf78:	4770      	bx	lr

0000cf7a <ocrypto_constant_time_is_zero>:
    cf7a:	f04f 0300 	mov.w	r3, #0

0000cf7e <constant_time_is_zero_loop>:
    cf7e:	f810 2b01 	ldrb.w	r2, [r0], #1
    cf82:	3901      	subs	r1, #1
    cf84:	ea43 0302 	orr.w	r3, r3, r2
    cf88:	d1f9      	bne.n	cf7e <constant_time_is_zero_loop>
    cf8a:	f1a3 0301 	sub.w	r3, r3, #1
    cf8e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cf92:	4770      	bx	lr

0000cf94 <ocrypto_constant_time_copy>:
    cf94:	f811 3b01 	ldrb.w	r3, [r1], #1
    cf98:	f800 3b01 	strb.w	r3, [r0], #1
    cf9c:	3a01      	subs	r2, #1
    cf9e:	d1f9      	bne.n	cf94 <ocrypto_constant_time_copy>
    cfa0:	4770      	bx	lr

0000cfa2 <ocrypto_constant_time_fill_zero>:
    cfa2:	2200      	movs	r2, #0

0000cfa4 <constant_time_fill_zero_loop>:
    cfa4:	f800 2b01 	strb.w	r2, [r0], #1
    cfa8:	3901      	subs	r1, #1
    cfaa:	d1fb      	bne.n	cfa4 <constant_time_fill_zero_loop>
    cfac:	4770      	bx	lr
    cfae:	bf00      	nop

0000cfb0 <ocrypto_mod_p256_add>:
    cfb0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cfb4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cfb8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cfbc:	185b      	adds	r3, r3, r1
    cfbe:	eb54 040c 	adcs.w	r4, r4, ip
    cfc2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cfc6:	414d      	adcs	r5, r1
    cfc8:	eb56 060c 	adcs.w	r6, r6, ip
    cfcc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cfd0:	414f      	adcs	r7, r1
    cfd2:	eb58 080c 	adcs.w	r8, r8, ip
    cfd6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cfda:	eb59 0901 	adcs.w	r9, r9, r1
    cfde:	eb5a 0a0c 	adcs.w	sl, sl, ip
    cfe2:	4189      	sbcs	r1, r1
    cfe4:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
    cfe8:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
    cfec:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
    cff0:	f176 0600 	sbcs.w	r6, r6, #0
    cff4:	f177 0700 	sbcs.w	r7, r7, #0
    cff8:	f178 0800 	sbcs.w	r8, r8, #0
    cffc:	f179 0901 	sbcs.w	r9, r9, #1
    d000:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
    d004:	f151 0100 	adcs.w	r1, r1, #0
    d008:	424a      	negs	r2, r1
    d00a:	185b      	adds	r3, r3, r1
    d00c:	414c      	adcs	r4, r1
    d00e:	414d      	adcs	r5, r1
    d010:	f156 0600 	adcs.w	r6, r6, #0
    d014:	f157 0700 	adcs.w	r7, r7, #0
    d018:	f158 0800 	adcs.w	r8, r8, #0
    d01c:	eb59 0902 	adcs.w	r9, r9, r2
    d020:	eb5a 0a01 	adcs.w	sl, sl, r1
    d024:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d028:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d02c:	4770      	bx	lr

0000d02e <ocrypto_mod_p256_sub>:
    d02e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d032:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d036:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d03a:	1a5b      	subs	r3, r3, r1
    d03c:	eb74 040c 	sbcs.w	r4, r4, ip
    d040:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d044:	418d      	sbcs	r5, r1
    d046:	eb76 060c 	sbcs.w	r6, r6, ip
    d04a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d04e:	418f      	sbcs	r7, r1
    d050:	eb78 080c 	sbcs.w	r8, r8, ip
    d054:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d058:	eb79 0901 	sbcs.w	r9, r9, r1
    d05c:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    d060:	4189      	sbcs	r1, r1
    d062:	424a      	negs	r2, r1
    d064:	185b      	adds	r3, r3, r1
    d066:	414c      	adcs	r4, r1
    d068:	414d      	adcs	r5, r1
    d06a:	f156 0600 	adcs.w	r6, r6, #0
    d06e:	f157 0700 	adcs.w	r7, r7, #0
    d072:	f158 0800 	adcs.w	r8, r8, #0
    d076:	eb59 0902 	adcs.w	r9, r9, r2
    d07a:	eb5a 0a01 	adcs.w	sl, sl, r1
    d07e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d082:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d086:	4770      	bx	lr

0000d088 <ocrypto_mod_p256_square>:
    d088:	460a      	mov	r2, r1

0000d08a <ocrypto_mod_p256_mul>:
    d08a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d08e:	ec41 0a14 	vmov	s8, s9, r0, r1
    d092:	ec92 0a08 	vldmia	r2, {s0-s7}
    d096:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    d098:	ee10 0a10 	vmov	r0, s0
    d09c:	fba1 7800 	umull	r7, r8, r1, r0
    d0a0:	f04f 0900 	mov.w	r9, #0
    d0a4:	fbe2 8900 	umlal	r8, r9, r2, r0
    d0a8:	f04f 0a00 	mov.w	sl, #0
    d0ac:	fbe3 9a00 	umlal	r9, sl, r3, r0
    d0b0:	f04f 0b00 	mov.w	fp, #0
    d0b4:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d0b8:	ee12 0a10 	vmov	r0, s4
    d0bc:	f04f 0c00 	mov.w	ip, #0
    d0c0:	fbe1 bc00 	umlal	fp, ip, r1, r0
    d0c4:	f04f 0e00 	mov.w	lr, #0
    d0c8:	fbe2 ce00 	umlal	ip, lr, r2, r0
    d0cc:	f04f 0500 	mov.w	r5, #0
    d0d0:	fbe3 e500 	umlal	lr, r5, r3, r0
    d0d4:	f04f 0600 	mov.w	r6, #0
    d0d8:	fbe4 5600 	umlal	r5, r6, r4, r0
    d0dc:	ee05 7a10 	vmov	s10, r7
    d0e0:	ee10 0a90 	vmov	r0, s1
    d0e4:	f04f 0700 	mov.w	r7, #0
    d0e8:	fbe1 8700 	umlal	r8, r7, r1, r0
    d0ec:	eb19 0907 	adds.w	r9, r9, r7
    d0f0:	f04f 0700 	mov.w	r7, #0
    d0f4:	eb47 0707 	adc.w	r7, r7, r7
    d0f8:	fbe2 9700 	umlal	r9, r7, r2, r0
    d0fc:	eb1a 0a07 	adds.w	sl, sl, r7
    d100:	f04f 0700 	mov.w	r7, #0
    d104:	eb47 0707 	adc.w	r7, r7, r7
    d108:	fbe3 a700 	umlal	sl, r7, r3, r0
    d10c:	eb1b 0b07 	adds.w	fp, fp, r7
    d110:	f04f 0700 	mov.w	r7, #0
    d114:	eb47 0707 	adc.w	r7, r7, r7
    d118:	fbe4 b700 	umlal	fp, r7, r4, r0
    d11c:	ee12 0a90 	vmov	r0, s5
    d120:	eb1c 0c07 	adds.w	ip, ip, r7
    d124:	f04f 0700 	mov.w	r7, #0
    d128:	eb47 0707 	adc.w	r7, r7, r7
    d12c:	fbe1 c700 	umlal	ip, r7, r1, r0
    d130:	eb1e 0e07 	adds.w	lr, lr, r7
    d134:	f04f 0700 	mov.w	r7, #0
    d138:	eb47 0707 	adc.w	r7, r7, r7
    d13c:	fbe2 e700 	umlal	lr, r7, r2, r0
    d140:	19ed      	adds	r5, r5, r7
    d142:	f04f 0700 	mov.w	r7, #0
    d146:	eb47 0707 	adc.w	r7, r7, r7
    d14a:	fbe3 5700 	umlal	r5, r7, r3, r0
    d14e:	19f6      	adds	r6, r6, r7
    d150:	f04f 0700 	mov.w	r7, #0
    d154:	eb47 0707 	adc.w	r7, r7, r7
    d158:	fbe4 6700 	umlal	r6, r7, r4, r0
    d15c:	ee05 8a90 	vmov	s11, r8
    d160:	ee11 0a10 	vmov	r0, s2
    d164:	f04f 0800 	mov.w	r8, #0
    d168:	fbe1 9800 	umlal	r9, r8, r1, r0
    d16c:	eb1a 0a08 	adds.w	sl, sl, r8
    d170:	f04f 0800 	mov.w	r8, #0
    d174:	eb48 0808 	adc.w	r8, r8, r8
    d178:	fbe2 a800 	umlal	sl, r8, r2, r0
    d17c:	eb1b 0b08 	adds.w	fp, fp, r8
    d180:	f04f 0800 	mov.w	r8, #0
    d184:	eb48 0808 	adc.w	r8, r8, r8
    d188:	fbe3 b800 	umlal	fp, r8, r3, r0
    d18c:	eb1c 0c08 	adds.w	ip, ip, r8
    d190:	f04f 0800 	mov.w	r8, #0
    d194:	eb48 0808 	adc.w	r8, r8, r8
    d198:	fbe4 c800 	umlal	ip, r8, r4, r0
    d19c:	ee13 0a10 	vmov	r0, s6
    d1a0:	eb1e 0e08 	adds.w	lr, lr, r8
    d1a4:	f04f 0800 	mov.w	r8, #0
    d1a8:	eb48 0808 	adc.w	r8, r8, r8
    d1ac:	fbe1 e800 	umlal	lr, r8, r1, r0
    d1b0:	eb15 0508 	adds.w	r5, r5, r8
    d1b4:	f04f 0800 	mov.w	r8, #0
    d1b8:	eb48 0808 	adc.w	r8, r8, r8
    d1bc:	fbe2 5800 	umlal	r5, r8, r2, r0
    d1c0:	eb16 0608 	adds.w	r6, r6, r8
    d1c4:	f04f 0800 	mov.w	r8, #0
    d1c8:	eb48 0808 	adc.w	r8, r8, r8
    d1cc:	fbe3 6800 	umlal	r6, r8, r3, r0
    d1d0:	eb17 0708 	adds.w	r7, r7, r8
    d1d4:	f04f 0800 	mov.w	r8, #0
    d1d8:	eb48 0808 	adc.w	r8, r8, r8
    d1dc:	fbe4 7800 	umlal	r7, r8, r4, r0
    d1e0:	ee06 9a10 	vmov	s12, r9
    d1e4:	ee11 0a90 	vmov	r0, s3
    d1e8:	f04f 0900 	mov.w	r9, #0
    d1ec:	fbe1 a900 	umlal	sl, r9, r1, r0
    d1f0:	eb1b 0b09 	adds.w	fp, fp, r9
    d1f4:	f04f 0900 	mov.w	r9, #0
    d1f8:	eb49 0909 	adc.w	r9, r9, r9
    d1fc:	fbe2 b900 	umlal	fp, r9, r2, r0
    d200:	eb1c 0c09 	adds.w	ip, ip, r9
    d204:	f04f 0900 	mov.w	r9, #0
    d208:	eb49 0909 	adc.w	r9, r9, r9
    d20c:	fbe3 c900 	umlal	ip, r9, r3, r0
    d210:	eb1e 0e09 	adds.w	lr, lr, r9
    d214:	f04f 0900 	mov.w	r9, #0
    d218:	eb49 0909 	adc.w	r9, r9, r9
    d21c:	fbe4 e900 	umlal	lr, r9, r4, r0
    d220:	ee13 0a90 	vmov	r0, s7
    d224:	eb15 0509 	adds.w	r5, r5, r9
    d228:	f04f 0900 	mov.w	r9, #0
    d22c:	eb49 0909 	adc.w	r9, r9, r9
    d230:	fbe1 5900 	umlal	r5, r9, r1, r0
    d234:	eb16 0609 	adds.w	r6, r6, r9
    d238:	f04f 0900 	mov.w	r9, #0
    d23c:	eb49 0909 	adc.w	r9, r9, r9
    d240:	fbe2 6900 	umlal	r6, r9, r2, r0
    d244:	eb17 0709 	adds.w	r7, r7, r9
    d248:	f04f 0900 	mov.w	r9, #0
    d24c:	eb49 0909 	adc.w	r9, r9, r9
    d250:	fbe3 7900 	umlal	r7, r9, r3, r0
    d254:	eb18 0809 	adds.w	r8, r8, r9
    d258:	f04f 0900 	mov.w	r9, #0
    d25c:	eb49 0909 	adc.w	r9, r9, r9
    d260:	fbe4 8900 	umlal	r8, r9, r4, r0
    d264:	ee06 aa90 	vmov	s13, sl
    d268:	ee14 1a90 	vmov	r1, s9
    d26c:	f101 0110 	add.w	r1, r1, #16
    d270:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    d272:	ee10 0a10 	vmov	r0, s0
    d276:	f04f 0a00 	mov.w	sl, #0
    d27a:	fbe1 ba00 	umlal	fp, sl, r1, r0
    d27e:	eb1c 0c0a 	adds.w	ip, ip, sl
    d282:	f04f 0a00 	mov.w	sl, #0
    d286:	eb4a 0a0a 	adc.w	sl, sl, sl
    d28a:	fbe2 ca00 	umlal	ip, sl, r2, r0
    d28e:	eb1e 0e0a 	adds.w	lr, lr, sl
    d292:	f04f 0a00 	mov.w	sl, #0
    d296:	eb4a 0a0a 	adc.w	sl, sl, sl
    d29a:	fbe3 ea00 	umlal	lr, sl, r3, r0
    d29e:	eb15 050a 	adds.w	r5, r5, sl
    d2a2:	f04f 0a00 	mov.w	sl, #0
    d2a6:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2aa:	fbe4 5a00 	umlal	r5, sl, r4, r0
    d2ae:	ee12 0a10 	vmov	r0, s4
    d2b2:	eb16 060a 	adds.w	r6, r6, sl
    d2b6:	f04f 0a00 	mov.w	sl, #0
    d2ba:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2be:	fbe1 6a00 	umlal	r6, sl, r1, r0
    d2c2:	eb17 070a 	adds.w	r7, r7, sl
    d2c6:	f04f 0a00 	mov.w	sl, #0
    d2ca:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2ce:	fbe2 7a00 	umlal	r7, sl, r2, r0
    d2d2:	eb18 080a 	adds.w	r8, r8, sl
    d2d6:	f04f 0a00 	mov.w	sl, #0
    d2da:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2de:	fbe3 8a00 	umlal	r8, sl, r3, r0
    d2e2:	eb19 090a 	adds.w	r9, r9, sl
    d2e6:	f04f 0a00 	mov.w	sl, #0
    d2ea:	eb4a 0a0a 	adc.w	sl, sl, sl
    d2ee:	fbe4 9a00 	umlal	r9, sl, r4, r0
    d2f2:	ee07 ba10 	vmov	s14, fp
    d2f6:	ee10 0a90 	vmov	r0, s1
    d2fa:	f04f 0b00 	mov.w	fp, #0
    d2fe:	fbe1 cb00 	umlal	ip, fp, r1, r0
    d302:	eb1e 0e0b 	adds.w	lr, lr, fp
    d306:	f04f 0b00 	mov.w	fp, #0
    d30a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d30e:	fbe2 eb00 	umlal	lr, fp, r2, r0
    d312:	eb15 050b 	adds.w	r5, r5, fp
    d316:	f04f 0b00 	mov.w	fp, #0
    d31a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d31e:	fbe3 5b00 	umlal	r5, fp, r3, r0
    d322:	eb16 060b 	adds.w	r6, r6, fp
    d326:	f04f 0b00 	mov.w	fp, #0
    d32a:	eb4b 0b0b 	adc.w	fp, fp, fp
    d32e:	fbe4 6b00 	umlal	r6, fp, r4, r0
    d332:	ee12 0a90 	vmov	r0, s5
    d336:	eb17 070b 	adds.w	r7, r7, fp
    d33a:	f04f 0b00 	mov.w	fp, #0
    d33e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d342:	fbe1 7b00 	umlal	r7, fp, r1, r0
    d346:	eb18 080b 	adds.w	r8, r8, fp
    d34a:	f04f 0b00 	mov.w	fp, #0
    d34e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d352:	fbe2 8b00 	umlal	r8, fp, r2, r0
    d356:	eb19 090b 	adds.w	r9, r9, fp
    d35a:	f04f 0b00 	mov.w	fp, #0
    d35e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d362:	fbe3 9b00 	umlal	r9, fp, r3, r0
    d366:	eb1a 0a0b 	adds.w	sl, sl, fp
    d36a:	f04f 0b00 	mov.w	fp, #0
    d36e:	eb4b 0b0b 	adc.w	fp, fp, fp
    d372:	fbe4 ab00 	umlal	sl, fp, r4, r0
    d376:	ee07 ca90 	vmov	s15, ip
    d37a:	ee11 0a10 	vmov	r0, s2
    d37e:	f04f 0c00 	mov.w	ip, #0
    d382:	fbe1 ec00 	umlal	lr, ip, r1, r0
    d386:	eb15 050c 	adds.w	r5, r5, ip
    d38a:	f04f 0c00 	mov.w	ip, #0
    d38e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d392:	fbe2 5c00 	umlal	r5, ip, r2, r0
    d396:	eb16 060c 	adds.w	r6, r6, ip
    d39a:	f04f 0c00 	mov.w	ip, #0
    d39e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3a2:	fbe3 6c00 	umlal	r6, ip, r3, r0
    d3a6:	eb17 070c 	adds.w	r7, r7, ip
    d3aa:	f04f 0c00 	mov.w	ip, #0
    d3ae:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3b2:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d3b6:	ee13 0a10 	vmov	r0, s6
    d3ba:	eb18 080c 	adds.w	r8, r8, ip
    d3be:	f04f 0c00 	mov.w	ip, #0
    d3c2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3c6:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d3ca:	eb19 090c 	adds.w	r9, r9, ip
    d3ce:	f04f 0c00 	mov.w	ip, #0
    d3d2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3d6:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d3da:	eb1a 0a0c 	adds.w	sl, sl, ip
    d3de:	f04f 0c00 	mov.w	ip, #0
    d3e2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3e6:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d3ea:	eb1b 0b0c 	adds.w	fp, fp, ip
    d3ee:	f04f 0c00 	mov.w	ip, #0
    d3f2:	eb4c 0c0c 	adc.w	ip, ip, ip
    d3f6:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d3fa:	ee08 ea10 	vmov	s16, lr
    d3fe:	ee11 0a90 	vmov	r0, s3
    d402:	f04f 0e00 	mov.w	lr, #0
    d406:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d40a:	eb16 060e 	adds.w	r6, r6, lr
    d40e:	f04f 0e00 	mov.w	lr, #0
    d412:	eb4e 0e0e 	adc.w	lr, lr, lr
    d416:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d41a:	eb17 070e 	adds.w	r7, r7, lr
    d41e:	f04f 0e00 	mov.w	lr, #0
    d422:	eb4e 0e0e 	adc.w	lr, lr, lr
    d426:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d42a:	eb18 080e 	adds.w	r8, r8, lr
    d42e:	f04f 0e00 	mov.w	lr, #0
    d432:	eb4e 0e0e 	adc.w	lr, lr, lr
    d436:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d43a:	ee13 0a90 	vmov	r0, s7
    d43e:	eb19 090e 	adds.w	r9, r9, lr
    d442:	f04f 0e00 	mov.w	lr, #0
    d446:	eb4e 0e0e 	adc.w	lr, lr, lr
    d44a:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d44e:	eb1a 0a0e 	adds.w	sl, sl, lr
    d452:	f04f 0e00 	mov.w	lr, #0
    d456:	eb4e 0e0e 	adc.w	lr, lr, lr
    d45a:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d45e:	eb1b 0b0e 	adds.w	fp, fp, lr
    d462:	f04f 0e00 	mov.w	lr, #0
    d466:	eb4e 0e0e 	adc.w	lr, lr, lr
    d46a:	fbe3 be00 	umlal	fp, lr, r3, r0
    d46e:	eb1c 0c0e 	adds.w	ip, ip, lr
    d472:	f04f 0e00 	mov.w	lr, #0
    d476:	eb4e 0e0e 	adc.w	lr, lr, lr
    d47a:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d47e:	ec53 2a17 	vmov	r2, r3, s14, s15
    d482:	ee18 4a10 	vmov	r4, s16
    d486:	eb12 020a 	adds.w	r2, r2, sl
    d48a:	eb53 030b 	adcs.w	r3, r3, fp
    d48e:	eb54 040c 	adcs.w	r4, r4, ip
    d492:	eb55 050e 	adcs.w	r5, r5, lr
    d496:	2000      	movs	r0, #0
    d498:	f140 0000 	adc.w	r0, r0, #0
    d49c:	eb12 020b 	adds.w	r2, r2, fp
    d4a0:	eb53 030c 	adcs.w	r3, r3, ip
    d4a4:	eb54 040e 	adcs.w	r4, r4, lr
    d4a8:	eb55 050e 	adcs.w	r5, r5, lr
    d4ac:	4146      	adcs	r6, r0
    d4ae:	2000      	movs	r0, #0
    d4b0:	4147      	adcs	r7, r0
    d4b2:	eb58 0800 	adcs.w	r8, r8, r0
    d4b6:	eb59 090a 	adcs.w	r9, r9, sl
    d4ba:	f140 0000 	adc.w	r0, r0, #0
    d4be:	ebb2 020e 	subs.w	r2, r2, lr
    d4c2:	f173 0300 	sbcs.w	r3, r3, #0
    d4c6:	f174 0400 	sbcs.w	r4, r4, #0
    d4ca:	eb75 050a 	sbcs.w	r5, r5, sl
    d4ce:	eb76 060b 	sbcs.w	r6, r6, fp
    d4d2:	eb77 070c 	sbcs.w	r7, r7, ip
    d4d6:	eb78 080a 	sbcs.w	r8, r8, sl
    d4da:	eb79 090c 	sbcs.w	r9, r9, ip
    d4de:	f160 0000 	sbc.w	r0, r0, #0
    d4e2:	ebb5 050b 	subs.w	r5, r5, fp
    d4e6:	eb76 060c 	sbcs.w	r6, r6, ip
    d4ea:	eb77 070e 	sbcs.w	r7, r7, lr
    d4ee:	eb78 080b 	sbcs.w	r8, r8, fp
    d4f2:	eb79 090e 	sbcs.w	r9, r9, lr
    d4f6:	f160 0000 	sbc.w	r0, r0, #0
    d4fa:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d4fe:	ea7f 0c0c 	mvns.w	ip, ip
    d502:	f1dc 0e00 	rsbs	lr, ip, #0
    d506:	ebb2 020c 	subs.w	r2, r2, ip
    d50a:	eb73 030c 	sbcs.w	r3, r3, ip
    d50e:	eb74 040c 	sbcs.w	r4, r4, ip
    d512:	f175 0500 	sbcs.w	r5, r5, #0
    d516:	f176 0600 	sbcs.w	r6, r6, #0
    d51a:	f177 0700 	sbcs.w	r7, r7, #0
    d51e:	eb78 080e 	sbcs.w	r8, r8, lr
    d522:	eb79 090c 	sbcs.w	r9, r9, ip
    d526:	f160 0000 	sbc.w	r0, r0, #0
    d52a:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d52e:	f1dc 0e00 	rsbs	lr, ip, #0
    d532:	eb12 020c 	adds.w	r2, r2, ip
    d536:	eb53 030c 	adcs.w	r3, r3, ip
    d53a:	eb54 040c 	adcs.w	r4, r4, ip
    d53e:	f155 0500 	adcs.w	r5, r5, #0
    d542:	f156 0600 	adcs.w	r6, r6, #0
    d546:	f157 0700 	adcs.w	r7, r7, #0
    d54a:	eb58 080e 	adcs.w	r8, r8, lr
    d54e:	eb59 090c 	adcs.w	r9, r9, ip
    d552:	f140 0000 	adc.w	r0, r0, #0
    d556:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d55a:	f1dc 0e00 	rsbs	lr, ip, #0
    d55e:	eb12 020c 	adds.w	r2, r2, ip
    d562:	eb53 030c 	adcs.w	r3, r3, ip
    d566:	eb54 040c 	adcs.w	r4, r4, ip
    d56a:	f155 0500 	adcs.w	r5, r5, #0
    d56e:	f156 0600 	adcs.w	r6, r6, #0
    d572:	f157 0700 	adcs.w	r7, r7, #0
    d576:	eb58 080e 	adcs.w	r8, r8, lr
    d57a:	eb59 090c 	adcs.w	r9, r9, ip
    d57e:	ec5b aa15 	vmov	sl, fp, s10, s11
    d582:	ec51 0a16 	vmov	r0, r1, s12, s13
    d586:	eb1a 0a06 	adds.w	sl, sl, r6
    d58a:	eb5b 0b07 	adcs.w	fp, fp, r7
    d58e:	eb50 0008 	adcs.w	r0, r0, r8
    d592:	eb51 0109 	adcs.w	r1, r1, r9
    d596:	f05f 0c00 	movs.w	ip, #0
    d59a:	f14c 0c00 	adc.w	ip, ip, #0
    d59e:	eb1a 0a07 	adds.w	sl, sl, r7
    d5a2:	eb5b 0b08 	adcs.w	fp, fp, r8
    d5a6:	eb50 0009 	adcs.w	r0, r0, r9
    d5aa:	eb51 0109 	adcs.w	r1, r1, r9
    d5ae:	eb52 020c 	adcs.w	r2, r2, ip
    d5b2:	f05f 0c00 	movs.w	ip, #0
    d5b6:	eb53 030c 	adcs.w	r3, r3, ip
    d5ba:	eb54 040c 	adcs.w	r4, r4, ip
    d5be:	4175      	adcs	r5, r6
    d5c0:	f14c 0c00 	adc.w	ip, ip, #0
    d5c4:	ebba 0a09 	subs.w	sl, sl, r9
    d5c8:	f17b 0b00 	sbcs.w	fp, fp, #0
    d5cc:	f170 0000 	sbcs.w	r0, r0, #0
    d5d0:	41b1      	sbcs	r1, r6
    d5d2:	41ba      	sbcs	r2, r7
    d5d4:	eb73 0308 	sbcs.w	r3, r3, r8
    d5d8:	41b4      	sbcs	r4, r6
    d5da:	eb75 0508 	sbcs.w	r5, r5, r8
    d5de:	f16c 0c00 	sbc.w	ip, ip, #0
    d5e2:	1bc9      	subs	r1, r1, r7
    d5e4:	eb72 0208 	sbcs.w	r2, r2, r8
    d5e8:	eb73 0309 	sbcs.w	r3, r3, r9
    d5ec:	41bc      	sbcs	r4, r7
    d5ee:	eb75 0509 	sbcs.w	r5, r5, r9
    d5f2:	f16c 0c00 	sbc.w	ip, ip, #0
    d5f6:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d5fa:	ea7f 0808 	mvns.w	r8, r8
    d5fe:	f1d8 0900 	rsbs	r9, r8, #0
    d602:	ebba 0a08 	subs.w	sl, sl, r8
    d606:	eb7b 0b08 	sbcs.w	fp, fp, r8
    d60a:	eb70 0008 	sbcs.w	r0, r0, r8
    d60e:	f171 0100 	sbcs.w	r1, r1, #0
    d612:	f172 0200 	sbcs.w	r2, r2, #0
    d616:	f173 0300 	sbcs.w	r3, r3, #0
    d61a:	eb74 0409 	sbcs.w	r4, r4, r9
    d61e:	eb75 0508 	sbcs.w	r5, r5, r8
    d622:	f16c 0c00 	sbc.w	ip, ip, #0
    d626:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d62a:	f1d8 0900 	rsbs	r9, r8, #0
    d62e:	eb1a 0a08 	adds.w	sl, sl, r8
    d632:	eb5b 0b08 	adcs.w	fp, fp, r8
    d636:	eb50 0008 	adcs.w	r0, r0, r8
    d63a:	f151 0100 	adcs.w	r1, r1, #0
    d63e:	f152 0200 	adcs.w	r2, r2, #0
    d642:	f153 0300 	adcs.w	r3, r3, #0
    d646:	eb54 0409 	adcs.w	r4, r4, r9
    d64a:	eb55 0508 	adcs.w	r5, r5, r8
    d64e:	f14c 0c00 	adc.w	ip, ip, #0
    d652:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d656:	f1d8 0900 	rsbs	r9, r8, #0
    d65a:	eb1a 0a08 	adds.w	sl, sl, r8
    d65e:	eb5b 0b08 	adcs.w	fp, fp, r8
    d662:	eb50 0008 	adcs.w	r0, r0, r8
    d666:	f151 0100 	adcs.w	r1, r1, #0
    d66a:	f152 0200 	adcs.w	r2, r2, #0
    d66e:	f153 0300 	adcs.w	r3, r3, #0
    d672:	eb54 0409 	adcs.w	r4, r4, r9
    d676:	eb55 0508 	adcs.w	r5, r5, r8
    d67a:	ee14 7a10 	vmov	r7, s8
    d67e:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
    d682:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
    d686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d68a:	bf00      	nop

0000d68c <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    d68c:	2301      	movs	r3, #1
    d68e:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    d692:	4907      	ldr	r1, [pc, #28]	; (d6b0 <bsd_recoverable_error_handler+0x24>)
    d694:	f363 0202 	bfi	r2, r3, #0, #3
    d698:	4b06      	ldr	r3, [pc, #24]	; (d6b4 <bsd_recoverable_error_handler+0x28>)
    d69a:	f36f 02c5 	bfc	r2, #3, #3
    d69e:	1a5b      	subs	r3, r3, r1
    d6a0:	08db      	lsrs	r3, r3, #3
    d6a2:	4601      	mov	r1, r0
    d6a4:	f363 128f 	bfi	r2, r3, #6, #10
    d6a8:	4803      	ldr	r0, [pc, #12]	; (d6b8 <bsd_recoverable_error_handler+0x2c>)
    d6aa:	f016 bc61 	b.w	23f70 <log_1>
    d6ae:	bf00      	nop
    d6b0:	00026684 	.word	0x00026684
    d6b4:	00026684 	.word	0x00026684
    d6b8:	00027b30 	.word	0x00027b30

0000d6bc <start_execute>:
}

void start_execute(void)
{
    d6bc:	b538      	push	{r3, r4, r5, lr}
	int err;

	LOG_INF("Serial LTE Modem");
    d6be:	f04f 0100 	mov.w	r1, #0
    d6c2:	2303      	movs	r3, #3
    d6c4:	4c19      	ldr	r4, [pc, #100]	; (d72c <start_execute+0x70>)
    d6c6:	f363 0102 	bfi	r1, r3, #0, #3
    d6ca:	4b19      	ldr	r3, [pc, #100]	; (d730 <start_execute+0x74>)
    d6cc:	f36f 01c5 	bfc	r1, #3, #3
    d6d0:	1ae4      	subs	r4, r4, r3
    d6d2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    d6d6:	f364 118f 	bfi	r1, r4, #6, #10
    d6da:	4816      	ldr	r0, [pc, #88]	; (d734 <start_execute+0x78>)
    d6dc:	f016 fc3b 	bl	23f56 <log_0>
#if defined(CONFIG_SLM_AT_MODE)
	err = slm_at_host_init();
    d6e0:	f000 f99a 	bl	da18 <slm_at_host_init>
	if (err != 0) {
    d6e4:	4605      	mov	r5, r0
    d6e6:	b170      	cbz	r0, d706 <start_execute+0x4a>
		LOG_ERR("Failed to init at_host: %d", err);
    d6e8:	f04f 0200 	mov.w	r2, #0
    d6ec:	2301      	movs	r3, #1
    d6ee:	f363 0202 	bfi	r2, r3, #0, #3
    d6f2:	f36f 02c5 	bfc	r2, #3, #3
    d6f6:	4601      	mov	r1, r0
    d6f8:	480f      	ldr	r0, [pc, #60]	; (d738 <start_execute+0x7c>)
    d6fa:	f364 128f 	bfi	r2, r4, #6, #10
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
#endif
}
    d6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    d702:	f016 bc35 	b.w	23f70 <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    d706:	2108      	movs	r1, #8
    d708:	480c      	ldr	r0, [pc, #48]	; (d73c <start_execute+0x80>)
    d70a:	f018 f931 	bl	25970 <at_params_list_init>
	if (err) {
    d70e:	4601      	mov	r1, r0
    d710:	b150      	cbz	r0, d728 <start_execute+0x6c>
		LOG_ERR("Failed to init AT Parser: %d", err);
    d712:	f04f 0200 	mov.w	r2, #0
    d716:	2301      	movs	r3, #1
    d718:	f363 0202 	bfi	r2, r3, #0, #3
    d71c:	f365 02c5 	bfi	r2, r5, #3, #3
    d720:	f364 128f 	bfi	r2, r4, #6, #10
    d724:	4806      	ldr	r0, [pc, #24]	; (d740 <start_execute+0x84>)
    d726:	e7ea      	b.n	d6fe <start_execute+0x42>
}
    d728:	bd38      	pop	{r3, r4, r5, pc}
    d72a:	bf00      	nop
    d72c:	00026684 	.word	0x00026684
    d730:	00026684 	.word	0x00026684
    d734:	00027b4d 	.word	0x00027b4d
    d738:	00027b5e 	.word	0x00027b5e
    d73c:	200200e0 	.word	0x200200e0
    d740:	00027b79 	.word	0x00027b79

0000d744 <write_uart_string>:
static size_t at_buf_len;
static struct k_work cmd_send_work;
static const char termination[3] = { '\0', '\r', '\n' };

static inline void write_uart_string(char *str, size_t len)
{
    d744:	b570      	push	{r4, r5, r6, lr}
    d746:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    d748:	4e05      	ldr	r6, [pc, #20]	; (d760 <write_uart_string+0x1c>)
    d74a:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    d74c:	42ac      	cmp	r4, r5
    d74e:	d100      	bne.n	d752 <write_uart_string+0xe>
	}
}
    d750:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    d752:	6830      	ldr	r0, [r6, #0]
    d754:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    d758:	6843      	ldr	r3, [r0, #4]
    d75a:	685b      	ldr	r3, [r3, #4]
    d75c:	4798      	blx	r3
    d75e:	e7f5      	b.n	d74c <write_uart_string+0x8>
    d760:	200200fc 	.word	0x200200fc

0000d764 <cmd_send>:
	size_t size_slmver = sizeof(AT_CMD_SLMVER_U) - 1;

	ARG_UNUSED(work);

	/* Make sure the string is 0-terminated */
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d764:	f640 228b 	movw	r2, #2699	; 0xa8b
{
    d768:	b570      	push	{r4, r5, r6, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d76a:	4d3a      	ldr	r5, [pc, #232]	; (d854 <cmd_send+0xf0>)
    d76c:	2600      	movs	r6, #0
    d76e:	682b      	ldr	r3, [r5, #0]
    d770:	4c39      	ldr	r4, [pc, #228]	; (d858 <cmd_send+0xf4>)
    d772:	4293      	cmp	r3, r2
    d774:	bf28      	it	cs
    d776:	4613      	movcs	r3, r2
{
    d778:	b086      	sub	sp, #24

	LOG_HEXDUMP_DBG(at_buf, at_buf_len, "RX");

	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d77a:	220a      	movs	r2, #10
    d77c:	4937      	ldr	r1, [pc, #220]	; (d85c <cmd_send+0xf8>)
    d77e:	4620      	mov	r0, r4
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    d780:	54e6      	strb	r6, [r4, r3]
	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d782:	f017 f90e 	bl	249a2 <strncmp>
    d786:	b920      	cbnz	r0, d792 <cmd_send+0x2e>
		strncmp(at_buf, AT_CMD_SLMVER_L, size_slmver) == 0) {
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    d788:	2110      	movs	r1, #16
    d78a:	4835      	ldr	r0, [pc, #212]	; (d860 <cmd_send+0xfc>)
		state = AT_CMD_ERROR;
	}

	switch (state) {
	case AT_CMD_OK:
		write_uart_string(buf, strlen(buf));
    d78c:	f7ff ffda 	bl	d744 <write_uart_string>
    d790:	e00b      	b.n	d7aa <cmd_send+0x46>
		strncmp(at_buf, AT_CMD_SLMVER_L, size_slmver) == 0) {
    d792:	220a      	movs	r2, #10
    d794:	4933      	ldr	r1, [pc, #204]	; (d864 <cmd_send+0x100>)
    d796:	4620      	mov	r0, r4
    d798:	f017 f903 	bl	249a2 <strncmp>
	if (strncmp(at_buf, AT_CMD_SLMVER_U, size_slmver) == 0 ||
    d79c:	2800      	cmp	r0, #0
    d79e:	d0f3      	beq.n	d788 <cmd_send+0x24>
	err = slm_at_tcpip_parse(at_buf, at_buf_len);
    d7a0:	7829      	ldrb	r1, [r5, #0]
    d7a2:	4620      	mov	r0, r4
    d7a4:	f001 f878 	bl	e898 <slm_at_tcpip_parse>
	if (err == 0) {
    d7a8:	b948      	cbnz	r0, d7be <cmd_send+0x5a>
		write_uart_string(OK_STR, sizeof(OK_STR));
    d7aa:	2105      	movs	r1, #5
    d7ac:	482e      	ldr	r0, [pc, #184]	; (d868 <cmd_send+0x104>)
		chars = sprintf(str, "+CMS: %d\r\n", err);
		write_uart_string(str, ++chars);
		break;
	case AT_CMD_ERROR_CME:
		chars = sprintf(str, "+CME: %d\r\n", err);
		write_uart_string(str, ++chars);
    d7ae:	f7ff ffc9 	bl	d744 <write_uart_string>
	default:
		break;
	}

done:
	uart_irq_rx_enable(uart_dev);
    d7b2:	4b2e      	ldr	r3, [pc, #184]	; (d86c <cmd_send+0x108>)
    d7b4:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
    d7b6:	f016 f803 	bl	237c0 <z_impl_uart_irq_rx_enable>
}
    d7ba:	b006      	add	sp, #24
    d7bc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (err != -ENOTSUP) {
    d7be:	3023      	adds	r0, #35	; 0x23
    d7c0:	d002      	beq.n	d7c8 <cmd_send+0x64>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    d7c2:	2108      	movs	r1, #8
    d7c4:	482a      	ldr	r0, [pc, #168]	; (d870 <cmd_send+0x10c>)
    d7c6:	e7f2      	b.n	d7ae <cmd_send+0x4a>
	err = slm_at_gps_parse(at_buf, at_buf_len);
    d7c8:	7829      	ldrb	r1, [r5, #0]
    d7ca:	4620      	mov	r0, r4
    d7cc:	f001 fc14 	bl	eff8 <slm_at_gps_parse>
	if (err == 0) {
    d7d0:	2800      	cmp	r0, #0
    d7d2:	d0ea      	beq.n	d7aa <cmd_send+0x46>
	} else if (err != -ENOTSUP) {
    d7d4:	3023      	adds	r0, #35	; 0x23
    d7d6:	d1f4      	bne.n	d7c2 <cmd_send+0x5e>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    d7d8:	4620      	mov	r0, r4
    d7da:	f10d 0307 	add.w	r3, sp, #7
    d7de:	f640 228c 	movw	r2, #2700	; 0xa8c
    d7e2:	4924      	ldr	r1, [pc, #144]	; (d874 <cmd_send+0x110>)
    d7e4:	f005 fbb2 	bl	12f4c <at_cmd_write>
	if (err < 0) {
    d7e8:	1e04      	subs	r4, r0, #0
    d7ea:	da12      	bge.n	d812 <cmd_send+0xae>
		LOG_ERR("Could not send AT command to modem: %d", err);
    d7ec:	2501      	movs	r5, #1
    d7ee:	f04f 0200 	mov.w	r2, #0
    d7f2:	4921      	ldr	r1, [pc, #132]	; (d878 <cmd_send+0x114>)
    d7f4:	4b21      	ldr	r3, [pc, #132]	; (d87c <cmd_send+0x118>)
    d7f6:	f365 0202 	bfi	r2, r5, #0, #3
    d7fa:	1a5b      	subs	r3, r3, r1
    d7fc:	08db      	lsrs	r3, r3, #3
    d7fe:	f366 02c5 	bfi	r2, r6, #3, #3
    d802:	f363 128f 	bfi	r2, r3, #6, #10
    d806:	4621      	mov	r1, r4
    d808:	481d      	ldr	r0, [pc, #116]	; (d880 <cmd_send+0x11c>)
    d80a:	f016 fbb1 	bl	23f70 <log_1>
		state = AT_CMD_ERROR;
    d80e:	f88d 5007 	strb.w	r5, [sp, #7]
	switch (state) {
    d812:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d816:	2b03      	cmp	r3, #3
    d818:	d8cb      	bhi.n	d7b2 <cmd_send+0x4e>
    d81a:	a201      	add	r2, pc, #4	; (adr r2, d820 <cmd_send+0xbc>)
    d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d820:	0000d831 	.word	0x0000d831
    d824:	0000d7c3 	.word	0x0000d7c3
    d828:	0000d83d 	.word	0x0000d83d
    d82c:	0000d84d 	.word	0x0000d84d
		write_uart_string(buf, strlen(buf));
    d830:	4810      	ldr	r0, [pc, #64]	; (d874 <cmd_send+0x110>)
    d832:	f017 f8a1 	bl	24978 <strlen>
    d836:	4601      	mov	r1, r0
    d838:	480e      	ldr	r0, [pc, #56]	; (d874 <cmd_send+0x110>)
    d83a:	e7a7      	b.n	d78c <cmd_send+0x28>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    d83c:	4622      	mov	r2, r4
    d83e:	4911      	ldr	r1, [pc, #68]	; (d884 <cmd_send+0x120>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    d840:	a802      	add	r0, sp, #8
    d842:	f003 ffcb 	bl	117dc <sprintf>
		write_uart_string(str, ++chars);
    d846:	1c41      	adds	r1, r0, #1
    d848:	a802      	add	r0, sp, #8
    d84a:	e7b0      	b.n	d7ae <cmd_send+0x4a>
		chars = sprintf(str, "+CME: %d\r\n", err);
    d84c:	4622      	mov	r2, r4
    d84e:	490e      	ldr	r1, [pc, #56]	; (d888 <cmd_send+0x124>)
    d850:	e7f6      	b.n	d840 <cmd_send+0xdc>
    d852:	bf00      	nop
    d854:	200200e8 	.word	0x200200e8
    d858:	20025e22 	.word	0x20025e22
    d85c:	00027b9a 	.word	0x00027b9a
    d860:	00027ba5 	.word	0x00027ba5
    d864:	00027bba 	.word	0x00027bba
    d868:	00027bb5 	.word	0x00027bb5
    d86c:	200200fc 	.word	0x200200fc
    d870:	00027bc5 	.word	0x00027bc5
    d874:	200268ae 	.word	0x200268ae
    d878:	00026684 	.word	0x00026684
    d87c:	00026694 	.word	0x00026694
    d880:	00027bcd 	.word	0x00027bcd
    d884:	00027bf4 	.word	0x00027bf4
    d888:	00027bff 	.word	0x00027bff

0000d88c <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d890:	4607      	mov	r7, r0
    d892:	b085      	sub	sp, #20
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    d894:	6843      	ldr	r3, [r0, #4]
    d896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d898:	b103      	cbz	r3, d89c <isr+0x10>
		return api->irq_update(dev);
    d89a:	4798      	blx	r3
	if (api->irq_rx_ready) {
    d89c:	687b      	ldr	r3, [r7, #4]
    d89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d8a0:	b19b      	cbz	r3, d8ca <isr+0x3e>
		return api->irq_rx_ready(dev);
    d8a2:	4638      	mov	r0, r7
    d8a4:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    d8a6:	b180      	cbz	r0, d8ca <isr+0x3e>
    d8a8:	4d4d      	ldr	r5, [pc, #308]	; (d9e0 <isr+0x154>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d8aa:	4b4e      	ldr	r3, [pc, #312]	; (d9e4 <isr+0x158>)
	cmd_len += 1;
    d8ac:	4e4e      	ldr	r6, [pc, #312]	; (d9e8 <isr+0x15c>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d8ae:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    d8b0:	f8df b160 	ldr.w	fp, [pc, #352]	; da14 <isr+0x188>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d8b4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    d8b8:	687b      	ldr	r3, [r7, #4]
    d8ba:	699b      	ldr	r3, [r3, #24]
    d8bc:	b12b      	cbz	r3, d8ca <isr+0x3e>
		return api->fifo_read(dev, rx_data, size);
    d8be:	2201      	movs	r2, #1
    d8c0:	f10d 010f 	add.w	r1, sp, #15
    d8c4:	4638      	mov	r0, r7
    d8c6:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    d8c8:	b910      	cbnz	r0, d8d0 <isr+0x44>
		uart_rx_handler(character);
	}
}
    d8ca:	b005      	add	sp, #20
    d8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    d8d0:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    d8d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
	cmd_len += 1;
    d8d6:	1c54      	adds	r4, r2, #1
	switch (character) {
    d8d8:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    d8da:	6034      	str	r4, [r6, #0]
	switch (character) {
    d8dc:	d019      	beq.n	d912 <isr+0x86>
    d8de:	297f      	cmp	r1, #127	; 0x7f
    d8e0:	d001      	beq.n	d8e6 <isr+0x5a>
    d8e2:	2908      	cmp	r1, #8
    d8e4:	d11b      	bne.n	d91e <isr+0x92>
		pos = pos ? pos - 1 : 0;
    d8e6:	b102      	cbz	r2, d8ea <isr+0x5e>
    d8e8:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d8ea:	2c02      	cmp	r4, #2
    d8ec:	bf38      	it	cc
    d8ee:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    d8f0:	2000      	movs	r0, #0
    d8f2:	4b3e      	ldr	r3, [pc, #248]	; (d9ec <isr+0x160>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d8f4:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    d8f6:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    d8f8:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    d8fa:	f89b 3000 	ldrb.w	r3, [fp]
    d8fe:	2b00      	cmp	r3, #0
    d900:	d1da      	bne.n	d8b8 <isr+0x2c>
	switch (term_mode) {
    d902:	4b3b      	ldr	r3, [pc, #236]	; (d9f0 <isr+0x164>)
    d904:	781b      	ldrb	r3, [r3, #0]
    d906:	2b03      	cmp	r3, #3
    d908:	d85c      	bhi.n	d9c4 <isr+0x138>
    d90a:	e8df f003 	tbb	[pc, r3]
    d90e:	2d2d      	.short	0x2d2d
    d910:	534b      	.short	0x534b
		inside_quotes = !inside_quotes;
    d912:	f89b 3000 	ldrb.w	r3, [fp]
    d916:	f083 0301 	eor.w	r3, r3, #1
    d91a:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    d91e:	f640 238c 	movw	r3, #2700	; 0xa8c
    d922:	429c      	cmp	r4, r3
    d924:	d90e      	bls.n	d944 <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    d926:	2201      	movs	r2, #1
    d928:	f362 0802 	bfi	r8, r2, #0, #3
    d92c:	f36f 08c5 	bfc	r8, #3, #3
    d930:	f365 188f 	bfi	r8, r5, #6, #10
    d934:	4642      	mov	r2, r8
    d936:	482f      	ldr	r0, [pc, #188]	; (d9f4 <isr+0x168>)
    d938:	9301      	str	r3, [sp, #4]
    d93a:	f016 fb19 	bl	23f70 <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    d93e:	9b01      	ldr	r3, [sp, #4]
	cmd_len = 0;
    d940:	6033      	str	r3, [r6, #0]
    d942:	e7b9      	b.n	d8b8 <isr+0x2c>
		} else if (cmd_len < 1) {
    d944:	b96c      	cbnz	r4, d962 <isr+0xd6>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    d946:	2301      	movs	r3, #1
    d948:	f363 0902 	bfi	r9, r3, #0, #3
    d94c:	f364 09c5 	bfi	r9, r4, #3, #3
    d950:	f365 198f 	bfi	r9, r5, #6, #10
    d954:	464a      	mov	r2, r9
    d956:	4621      	mov	r1, r4
    d958:	4827      	ldr	r0, [pc, #156]	; (d9f8 <isr+0x16c>)
    d95a:	f016 fb09 	bl	23f70 <log_1>
			cmd_len = 0;
    d95e:	6034      	str	r4, [r6, #0]
    d960:	e7aa      	b.n	d8b8 <isr+0x2c>
		at_buf[pos] = character;
    d962:	4b22      	ldr	r3, [pc, #136]	; (d9ec <isr+0x160>)
    d964:	5499      	strb	r1, [r3, r2]
    d966:	e7c8      	b.n	d8fa <isr+0x6e>
		if (character == termination[term_mode]) {
    d968:	4a24      	ldr	r2, [pc, #144]	; (d9fc <isr+0x170>)
    d96a:	5cd3      	ldrb	r3, [r2, r3]
    d96c:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    d96e:	d1a3      	bne.n	d8b8 <isr+0x2c>
	uart_irq_rx_disable(uart_dev);
    d970:	4b23      	ldr	r3, [pc, #140]	; (da00 <isr+0x174>)
    d972:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    d974:	6843      	ldr	r3, [r0, #4]
    d976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d978:	b103      	cbz	r3, d97c <isr+0xf0>
		api->irq_rx_disable(dev);
    d97a:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d97c:	4921      	ldr	r1, [pc, #132]	; (da04 <isr+0x178>)
    d97e:	e8d1 3fef 	ldaex	r3, [r1]
    d982:	f043 0201 	orr.w	r2, r3, #1
    d986:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d98a:	2800      	cmp	r0, #0
    d98c:	d1f7      	bne.n	d97e <isr+0xf2>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d98e:	07db      	lsls	r3, r3, #31
    d990:	d403      	bmi.n	d99a <isr+0x10e>
		k_queue_append(&work_q->queue, work);
    d992:	3908      	subs	r1, #8
    d994:	481c      	ldr	r0, [pc, #112]	; (da08 <isr+0x17c>)
    d996:	f018 f98c 	bl	25cb2 <k_queue_append>
	at_buf_len = cmd_len;
    d99a:	4b1c      	ldr	r3, [pc, #112]	; (da0c <isr+0x180>)
    d99c:	6832      	ldr	r2, [r6, #0]
    d99e:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    d9a0:	2300      	movs	r3, #0
    d9a2:	e7cd      	b.n	d940 <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    d9a4:	4b11      	ldr	r3, [pc, #68]	; (d9ec <isr+0x160>)
    d9a6:	441a      	add	r2, r3
    d9a8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d083      	beq.n	d8b8 <isr+0x2c>
    d9b0:	290a      	cmp	r1, #10
    d9b2:	e7dc      	b.n	d96e <isr+0xe2>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    d9b4:	4b0d      	ldr	r3, [pc, #52]	; (d9ec <isr+0x160>)
    d9b6:	441a      	add	r2, r3
    d9b8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    d9bc:	2b0d      	cmp	r3, #13
    d9be:	f47f af7b 	bne.w	d8b8 <isr+0x2c>
    d9c2:	e7f5      	b.n	d9b0 <isr+0x124>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    d9c4:	2201      	movs	r2, #1
    d9c6:	f362 0a02 	bfi	sl, r2, #0, #3
    d9ca:	f36f 0ac5 	bfc	sl, #3, #3
    d9ce:	f365 1a8f 	bfi	sl, r5, #6, #10
    d9d2:	4652      	mov	r2, sl
    d9d4:	4619      	mov	r1, r3
    d9d6:	480e      	ldr	r0, [pc, #56]	; (da10 <isr+0x184>)
    d9d8:	f016 faca 	bl	23f70 <log_1>
    d9dc:	e76c      	b.n	d8b8 <isr+0x2c>
    d9de:	bf00      	nop
    d9e0:	00026694 	.word	0x00026694
    d9e4:	00026684 	.word	0x00026684
    d9e8:	200200ec 	.word	0x200200ec
    d9ec:	20025e22 	.word	0x20025e22
    d9f0:	2002733b 	.word	0x2002733b
    d9f4:	00027c0a 	.word	0x00027c0a
    d9f8:	00027c2a 	.word	0x00027c2a
    d9fc:	00027d43 	.word	0x00027d43
    da00:	200200fc 	.word	0x200200fc
    da04:	200200f8 	.word	0x200200f8
    da08:	20025d3c 	.word	0x20025d3c
    da0c:	200200e8 	.word	0x200200e8
    da10:	00027c48 	.word	0x00027c48
    da14:	2002733a 	.word	0x2002733a

0000da18 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    da18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    da1a:	2203      	movs	r2, #3
    da1c:	4b4d      	ldr	r3, [pc, #308]	; (db54 <slm_at_host_init+0x13c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    da1e:	494e      	ldr	r1, [pc, #312]	; (db58 <slm_at_host_init+0x140>)
    da20:	2000      	movs	r0, #0
		term_mode = mode;
    da22:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    da24:	f004 fdf0 	bl	12608 <at_notif_register_handler>
    da28:	4d4c      	ldr	r5, [pc, #304]	; (db5c <slm_at_host_init+0x144>)
    da2a:	4b4d      	ldr	r3, [pc, #308]	; (db60 <slm_at_host_init+0x148>)
	if (err != 0) {
    da2c:	4604      	mov	r4, r0
    da2e:	1aed      	subs	r5, r5, r3
    da30:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    da34:	b178      	cbz	r0, da56 <slm_at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
    da36:	f04f 0200 	mov.w	r2, #0
    da3a:	2301      	movs	r3, #1
    da3c:	f363 0202 	bfi	r2, r3, #0, #3
    da40:	f36f 02c5 	bfc	r2, #3, #3
    da44:	4601      	mov	r1, r0
    da46:	f365 128f 	bfi	r2, r5, #6, #10
    da4a:	4846      	ldr	r0, [pc, #280]	; (db64 <slm_at_host_init+0x14c>)
    da4c:	f016 fa90 	bl	23f70 <log_1>
	}
#endif

	LOG_DBG("at_host init done");
	return err;
}
    da50:	4620      	mov	r0, r4
    da52:	b003      	add	sp, #12
    da54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    da56:	4844      	ldr	r0, [pc, #272]	; (db68 <slm_at_host_init+0x150>)
    da58:	f014 f986 	bl	21d68 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    da5c:	4e43      	ldr	r6, [pc, #268]	; (db6c <slm_at_host_init+0x154>)
    da5e:	6030      	str	r0, [r6, #0]
	if (uart_dev == NULL) {
    da60:	b310      	cbz	r0, daa8 <slm_at_host_init+0x90>
			LOG_ERR("UART check failed: %d. "
    da62:	4c43      	ldr	r4, [pc, #268]	; (db70 <slm_at_host_init+0x158>)
		err = uart_err_check(uart_dev);
    da64:	6830      	ldr	r0, [r6, #0]
	if (api->err_check != NULL) {
    da66:	6843      	ldr	r3, [r0, #4]
    da68:	689b      	ldr	r3, [r3, #8]
    da6a:	2b00      	cmp	r3, #0
    da6c:	d04b      	beq.n	db06 <slm_at_host_init+0xee>
		return api->err_check(dev);
    da6e:	4798      	blx	r3
		if (err) {
    da70:	4601      	mov	r1, r0
    da72:	2800      	cmp	r0, #0
    da74:	d047      	beq.n	db06 <slm_at_host_init+0xee>
			LOG_ERR("UART check failed: %d. "
    da76:	2301      	movs	r3, #1
    da78:	f363 0702 	bfi	r7, r3, #0, #3
    da7c:	f36f 07c5 	bfc	r7, #3, #3
    da80:	f365 178f 	bfi	r7, r5, #6, #10
    da84:	463a      	mov	r2, r7
    da86:	4620      	mov	r0, r4
    da88:	f016 fa72 	bl	23f70 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    da8c:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read) {
    da8e:	6843      	ldr	r3, [r0, #4]
    da90:	699b      	ldr	r3, [r3, #24]
    da92:	b12b      	cbz	r3, daa0 <slm_at_host_init+0x88>
		return api->fifo_read(dev, rx_data, size);
    da94:	2201      	movs	r2, #1
    da96:	f10d 0107 	add.w	r1, sp, #7
    da9a:	4798      	blx	r3
    da9c:	2800      	cmp	r0, #0
    da9e:	d1f5      	bne.n	da8c <slm_at_host_init+0x74>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    daa0:	200a      	movs	r0, #10
    daa2:	f015 f82d 	bl	22b00 <z_impl_k_sleep>
    daa6:	e7dd      	b.n	da64 <slm_at_host_init+0x4c>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    daa8:	2601      	movs	r6, #1
    daaa:	f04f 0200 	mov.w	r2, #0
    daae:	f366 0202 	bfi	r2, r6, #0, #3
    dab2:	f364 02c5 	bfi	r2, r4, #3, #3
    dab6:	f365 128f 	bfi	r2, r5, #6, #10
    daba:	492b      	ldr	r1, [pc, #172]	; (db68 <slm_at_host_init+0x150>)
    dabc:	482d      	ldr	r0, [pc, #180]	; (db74 <slm_at_host_init+0x15c>)
    dabe:	f016 fa57 	bl	23f70 <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    dac2:	f04f 0200 	mov.w	r2, #0
    dac6:	f06f 0115 	mvn.w	r1, #21
    daca:	f366 0202 	bfi	r2, r6, #0, #3
    dace:	f364 02c5 	bfi	r2, r4, #3, #3
    dad2:	4829      	ldr	r0, [pc, #164]	; (db78 <slm_at_host_init+0x160>)
    dad4:	f365 128f 	bfi	r2, r5, #6, #10
		LOG_ERR("TCPIP could not be initialized: %d", err);
    dad8:	f016 fa4a 	bl	23f70 <log_1>
		return -EFAULT;
    dadc:	f06f 040d 	mvn.w	r4, #13
    dae0:	e7b6      	b.n	da50 <slm_at_host_init+0x38>
	err = slm_at_tcpip_init(slm_at_callback);
    dae2:	4826      	ldr	r0, [pc, #152]	; (db7c <slm_at_host_init+0x164>)
    dae4:	f000 ff06 	bl	e8f4 <slm_at_tcpip_init>
	if (err) {
    dae8:	4604      	mov	r4, r0
    daea:	2800      	cmp	r0, #0
    daec:	d0b0      	beq.n	da50 <slm_at_host_init+0x38>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    daee:	f04f 0200 	mov.w	r2, #0
    daf2:	2301      	movs	r3, #1
    daf4:	f363 0202 	bfi	r2, r3, #0, #3
    daf8:	f366 02c5 	bfi	r2, r6, #3, #3
    dafc:	4601      	mov	r1, r0
    dafe:	f365 128f 	bfi	r2, r5, #6, #10
    db02:	481f      	ldr	r0, [pc, #124]	; (db80 <slm_at_host_init+0x168>)
    db04:	e7e8      	b.n	dad8 <slm_at_host_init+0xc0>
	uart_irq_callback_set(uart_dev, isr);
    db06:	6832      	ldr	r2, [r6, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    db08:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    db0a:	b123      	cbz	r3, db16 <slm_at_host_init+0xfe>
    db0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    db0e:	b113      	cbz	r3, db16 <slm_at_host_init+0xfe>
		api->irq_callback_set(dev, cb, user_data);
    db10:	491c      	ldr	r1, [pc, #112]	; (db84 <slm_at_host_init+0x16c>)
    db12:	4610      	mov	r0, r2
    db14:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    db16:	2400      	movs	r4, #0
    db18:	4b1b      	ldr	r3, [pc, #108]	; (db88 <slm_at_host_init+0x170>)
    db1a:	4a1c      	ldr	r2, [pc, #112]	; (db8c <slm_at_host_init+0x174>)
    db1c:	601c      	str	r4, [r3, #0]
    db1e:	e9c3 2401 	strd	r2, r4, [r3, #4]
	uart_irq_rx_enable(uart_dev);
    db22:	6830      	ldr	r0, [r6, #0]
    db24:	f015 fe4c 	bl	237c0 <z_impl_uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    db28:	2107      	movs	r1, #7
    db2a:	4819      	ldr	r0, [pc, #100]	; (db90 <slm_at_host_init+0x178>)
    db2c:	f7ff fe0a 	bl	d744 <write_uart_string>
	err = slm_at_gps_init(slm_at_callback);
    db30:	4812      	ldr	r0, [pc, #72]	; (db7c <slm_at_host_init+0x164>)
    db32:	f001 fa81 	bl	f038 <slm_at_gps_init>
	if (err) {
    db36:	4606      	mov	r6, r0
    db38:	2800      	cmp	r0, #0
    db3a:	d0d2      	beq.n	dae2 <slm_at_host_init+0xca>
		LOG_ERR("GPS could not be initialized: %d", err);
    db3c:	f04f 0200 	mov.w	r2, #0
    db40:	2301      	movs	r3, #1
    db42:	f363 0202 	bfi	r2, r3, #0, #3
    db46:	f364 02c5 	bfi	r2, r4, #3, #3
    db4a:	4601      	mov	r1, r0
    db4c:	f365 128f 	bfi	r2, r5, #6, #10
    db50:	4810      	ldr	r0, [pc, #64]	; (db94 <slm_at_host_init+0x17c>)
    db52:	e7c1      	b.n	dad8 <slm_at_host_init+0xc0>
    db54:	2002733b 	.word	0x2002733b
    db58:	000237df 	.word	0x000237df
    db5c:	00026694 	.word	0x00026694
    db60:	00026684 	.word	0x00026684
    db64:	00027c65 	.word	0x00027c65
    db68:	00027c83 	.word	0x00027c83
    db6c:	200200fc 	.word	0x200200fc
    db70:	00027cba 	.word	0x00027cba
    db74:	00027c8a 	.word	0x00027c8a
    db78:	00027c9a 	.word	0x00027c9a
    db7c:	000237cb 	.word	0x000237cb
    db80:	00027d18 	.word	0x00027d18
    db84:	0000d88d 	.word	0x0000d88d
    db88:	200200f0 	.word	0x200200f0
    db8c:	0000d765 	.word	0x0000d765
    db90:	00027cef 	.word	0x00027cef
    db94:	00027cf7 	.word	0x00027cf7

0000db98 <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    db98:	4b01      	ldr	r3, [pc, #4]	; (dba0 <close+0x8>)
    db9a:	681b      	ldr	r3, [r3, #0]
    db9c:	685b      	ldr	r3, [r3, #4]
    db9e:	4718      	bx	r3
    dba0:	20020314 	.word	0x20020314

0000dba4 <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    dba4:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    dba6:	4c1a      	ldr	r4, [pc, #104]	; (dc10 <do_socket_close+0x6c>)
{
    dba8:	4606      	mov	r6, r0
	if (client.sock > 0) {
    dbaa:	6820      	ldr	r0, [r4, #0]
    dbac:	2800      	cmp	r0, #0
    dbae:	dd2c      	ble.n	dc0a <do_socket_close+0x66>
		ret = close(client.sock);
    dbb0:	f7ff fff2 	bl	db98 <close>
		if (ret < 0) {
    dbb4:	1e05      	subs	r5, r0, #0
    dbb6:	da18      	bge.n	dbea <do_socket_close+0x46>
			LOG_WRN("close() failed: %d", -errno);
    dbb8:	2302      	movs	r3, #2
    dbba:	f04f 0500 	mov.w	r5, #0
    dbbe:	4a15      	ldr	r2, [pc, #84]	; (dc14 <do_socket_close+0x70>)
    dbc0:	f363 0502 	bfi	r5, r3, #0, #3
    dbc4:	4b14      	ldr	r3, [pc, #80]	; (dc18 <do_socket_close+0x74>)
    dbc6:	f36f 05c5 	bfc	r5, #3, #3
    dbca:	1a9b      	subs	r3, r3, r2
    dbcc:	08db      	lsrs	r3, r3, #3
    dbce:	f363 158f 	bfi	r5, r3, #6, #10
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    dbd2:	f014 f8ef 	bl	21db4 <z_impl_z_errno>
    dbd6:	6801      	ldr	r1, [r0, #0]
    dbd8:	462a      	mov	r2, r5
    dbda:	4249      	negs	r1, r1
    dbdc:	480f      	ldr	r0, [pc, #60]	; (dc1c <do_socket_close+0x78>)
    dbde:	f016 f9c7 	bl	23f70 <log_1>
    dbe2:	f014 f8e7 	bl	21db4 <z_impl_z_errno>
			ret = -errno;
    dbe6:	6805      	ldr	r5, [r0, #0]
    dbe8:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    dbea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dbee:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    dbf0:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    dbf2:	4632      	mov	r2, r6
    dbf4:	490a      	ldr	r1, [pc, #40]	; (dc20 <do_socket_close+0x7c>)
    dbf6:	480b      	ldr	r0, [pc, #44]	; (dc24 <do_socket_close+0x80>)
		client.ip_proto = IPPROTO_IP;
    dbf8:	7123      	strb	r3, [r4, #4]
		client.connected = false;
    dbfa:	7163      	strb	r3, [r4, #5]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    dbfc:	f003 fdee 	bl	117dc <sprintf>
		client.callback(buf);
    dc00:	68a3      	ldr	r3, [r4, #8]
    dc02:	4808      	ldr	r0, [pc, #32]	; (dc24 <do_socket_close+0x80>)
    dc04:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    dc06:	4628      	mov	r0, r5
    dc08:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    dc0a:	2500      	movs	r5, #0
	return ret;
    dc0c:	e7fb      	b.n	dc06 <do_socket_close+0x62>
    dc0e:	bf00      	nop
    dc10:	20020100 	.word	0x20020100
    dc14:	00026684 	.word	0x00026684
    dc18:	000266f4 	.word	0x000266f4
    dc1c:	00027d46 	.word	0x00027d46
    dc20:	00027d59 	.word	0x00027d59
    dc24:	2002733c 	.word	0x2002733c

0000dc28 <parse_host_by_name>:
{
    dc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc2c:	4614      	mov	r4, r2
    dc2e:	4680      	mov	r8, r0
	struct addrinfo hints = {
    dc30:	2501      	movs	r5, #1
{
    dc32:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    dc34:	4f25      	ldr	r7, [pc, #148]	; (dccc <parse_host_by_name+0xa4>)
	struct addrinfo hints = {
    dc36:	2220      	movs	r2, #32
{
    dc38:	460e      	mov	r6, r1
	struct addrinfo hints = {
    dc3a:	a806      	add	r0, sp, #24
    dc3c:	2100      	movs	r1, #0
    dc3e:	f016 fefc 	bl	24a3a <memset>
    dc42:	683b      	ldr	r3, [r7, #0]
    dc44:	e9cd 5407 	strd	r5, r4, [sp, #28]
    dc48:	aa06      	add	r2, sp, #24
    dc4a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    dc4c:	2100      	movs	r1, #0
    dc4e:	ab01      	add	r3, sp, #4
    dc50:	4640      	mov	r0, r8
    dc52:	47a0      	blx	r4
	if (err) {
    dc54:	4604      	mov	r4, r0
    dc56:	b198      	cbz	r0, dc80 <parse_host_by_name+0x58>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    dc58:	f04f 0200 	mov.w	r2, #0
    dc5c:	491c      	ldr	r1, [pc, #112]	; (dcd0 <parse_host_by_name+0xa8>)
    dc5e:	4b1d      	ldr	r3, [pc, #116]	; (dcd4 <parse_host_by_name+0xac>)
    dc60:	f365 0202 	bfi	r2, r5, #0, #3
    dc64:	1a5b      	subs	r3, r3, r1
    dc66:	f36f 02c5 	bfc	r2, #3, #3
    dc6a:	08db      	lsrs	r3, r3, #3
    dc6c:	4601      	mov	r1, r0
    dc6e:	f363 128f 	bfi	r2, r3, #6, #10
    dc72:	4819      	ldr	r0, [pc, #100]	; (dcd8 <parse_host_by_name+0xb0>)
    dc74:	f016 f97c 	bl	23f70 <log_1>
}
    dc78:	4620      	mov	r0, r4
    dc7a:	b00e      	add	sp, #56	; 0x38
    dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    dc80:	9b01      	ldr	r3, [sp, #4]
    dc82:	b98b      	cbnz	r3, dca8 <parse_host_by_name+0x80>
		LOG_ERR("ERROR: Address not found\n");
    dc84:	f04f 0100 	mov.w	r1, #0
    dc88:	4a11      	ldr	r2, [pc, #68]	; (dcd0 <parse_host_by_name+0xa8>)
    dc8a:	4b12      	ldr	r3, [pc, #72]	; (dcd4 <parse_host_by_name+0xac>)
    dc8c:	f365 0102 	bfi	r1, r5, #0, #3
    dc90:	1a9b      	subs	r3, r3, r2
    dc92:	f360 01c5 	bfi	r1, r0, #3, #3
    dc96:	08db      	lsrs	r3, r3, #3
    dc98:	f363 118f 	bfi	r1, r3, #6, #10
    dc9c:	480f      	ldr	r0, [pc, #60]	; (dcdc <parse_host_by_name+0xb4>)
    dc9e:	f016 f95a 	bl	23f56 <log_0>
		return -ENOENT;
    dca2:	f06f 0401 	mvn.w	r4, #1
    dca6:	e7e7      	b.n	dc78 <parse_host_by_name+0x50>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    dca8:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    dcaa:	490d      	ldr	r1, [pc, #52]	; (dce0 <parse_host_by_name+0xb8>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    dcac:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    dcae:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    dcb0:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    dcb2:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    dcb4:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    dcb6:	2310      	movs	r3, #16
    dcb8:	aa02      	add	r2, sp, #8
    dcba:	3104      	adds	r1, #4
    dcbc:	4628      	mov	r0, r5
    dcbe:	f003 fde9 	bl	11894 <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    dcc2:	683b      	ldr	r3, [r7, #0]
    dcc4:	9801      	ldr	r0, [sp, #4]
    dcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dcc8:	4798      	blx	r3
    dcca:	e7d5      	b.n	dc78 <parse_host_by_name+0x50>
    dccc:	20020314 	.word	0x20020314
    dcd0:	00026684 	.word	0x00026684
    dcd4:	000266f4 	.word	0x000266f4
    dcd8:	00027fd5 	.word	0x00027fd5
    dcdc:	00027ff2 	.word	0x00027ff2
    dce0:	20025e00 	.word	0x20025e00

0000dce4 <handle_at_bind>:
 *  AT#XBIND=<local_ip>,<port>
 *  AT#XBIND?
 *  AT#XBIND=? TEST command not supported
 */
static int handle_at_bind(const char *at_cmd, size_t param_offset)
{
    dce4:	b570      	push	{r4, r5, r6, lr}
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	char ip[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    dce6:	2480      	movs	r4, #128	; 0x80
	u16_t port;

	if (*(at_param) == '=') {
    dce8:	5c43      	ldrb	r3, [r0, r1]
{
    dcea:	b0a4      	sub	sp, #144	; 0x90
	if (*(at_param) == '=') {
    dcec:	2b3d      	cmp	r3, #61	; 0x3d
	char *at_param = (char *)at_cmd + param_offset;
    dcee:	eb00 0201 	add.w	r2, r0, r1
	int size = TCPIP_MAX_URL;
    dcf2:	9401      	str	r4, [sp, #4]
	if (*(at_param) == '=') {
    dcf4:	d004      	beq.n	dd00 <handle_at_bind+0x1c>
		return -EINVAL;
    dcf6:	f06f 0415 	mvn.w	r4, #21
		};
		err = do_bind(ip, port);
	}

	return err;
}
    dcfa:	4620      	mov	r0, r4
    dcfc:	b024      	add	sp, #144	; 0x90
    dcfe:	bd70      	pop	{r4, r5, r6, pc}
		if (*(at_param) == '?') {
    dd00:	7853      	ldrb	r3, [r2, #1]
    dd02:	2b3f      	cmp	r3, #63	; 0x3f
    dd04:	d0f7      	beq.n	dcf6 <handle_at_bind+0x12>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    dd06:	4a44      	ldr	r2, [pc, #272]	; (de18 <handle_at_bind+0x134>)
    dd08:	2100      	movs	r1, #0
    dd0a:	f017 fe09 	bl	25920 <at_parser_params_from_str>
		if (err < 0) {
    dd0e:	1e04      	subs	r4, r0, #0
    dd10:	dbf3      	blt.n	dcfa <handle_at_bind+0x16>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    dd12:	4841      	ldr	r0, [pc, #260]	; (de18 <handle_at_bind+0x134>)
    dd14:	f017 ff0a 	bl	25b2c <at_params_valid_count_get>
    dd18:	2802      	cmp	r0, #2
    dd1a:	d9ec      	bls.n	dcf6 <handle_at_bind+0x12>
		err = at_params_string_get(&m_param_list, 1, ip, &size);
    dd1c:	ab01      	add	r3, sp, #4
    dd1e:	aa04      	add	r2, sp, #16
    dd20:	2101      	movs	r1, #1
    dd22:	483d      	ldr	r0, [pc, #244]	; (de18 <handle_at_bind+0x134>)
    dd24:	f017 fedf 	bl	25ae6 <at_params_string_get>
		if (err < 0) {
    dd28:	1e04      	subs	r4, r0, #0
    dd2a:	dbe6      	blt.n	dcfa <handle_at_bind+0x16>
		ip[size] = '\0';
    dd2c:	2600      	movs	r6, #0
    dd2e:	9b01      	ldr	r3, [sp, #4]
    dd30:	aa24      	add	r2, sp, #144	; 0x90
    dd32:	4413      	add	r3, r2
		err = at_params_short_get(&m_param_list, 2, &port);
    dd34:	2102      	movs	r1, #2
    dd36:	f10d 0202 	add.w	r2, sp, #2
    dd3a:	4837      	ldr	r0, [pc, #220]	; (de18 <handle_at_bind+0x134>)
		ip[size] = '\0';
    dd3c:	f803 6c80 	strb.w	r6, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    dd40:	f017 febf 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    dd44:	1e04      	subs	r4, r0, #0
    dd46:	dbd8      	blt.n	dcfa <handle_at_bind+0x16>
	if (!check_for_ipv4(ip, strlen(ip))) {
    dd48:	a804      	add	r0, sp, #16
		err = do_bind(ip, port);
    dd4a:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (!check_for_ipv4(ip, strlen(ip))) {
    dd4e:	f016 fe13 	bl	24978 <strlen>
    dd52:	b2c1      	uxtb	r1, r0
    dd54:	a804      	add	r0, sp, #16
    dd56:	f015 fd50 	bl	237fa <check_for_ipv4>
    dd5a:	2501      	movs	r5, #1
    dd5c:	b978      	cbnz	r0, dd7e <handle_at_bind+0x9a>
		LOG_ERR("Not IPv4 address");
    dd5e:	f04f 0100 	mov.w	r1, #0
    dd62:	4a2e      	ldr	r2, [pc, #184]	; (de1c <handle_at_bind+0x138>)
    dd64:	4b2e      	ldr	r3, [pc, #184]	; (de20 <handle_at_bind+0x13c>)
    dd66:	f365 0102 	bfi	r1, r5, #0, #3
    dd6a:	1a9b      	subs	r3, r3, r2
    dd6c:	f360 01c5 	bfi	r1, r0, #3, #3
    dd70:	08db      	lsrs	r3, r3, #3
    dd72:	f363 118f 	bfi	r1, r3, #6, #10
    dd76:	482b      	ldr	r0, [pc, #172]	; (de24 <handle_at_bind+0x140>)
    dd78:	f016 f8ed 	bl	23f56 <log_0>
    dd7c:	e7bb      	b.n	dcf6 <handle_at_bind+0x12>
	local.sin_port = htons(port);
    dd7e:	0223      	lsls	r3, r4, #8
    dd80:	ea43 2314 	orr.w	r3, r3, r4, lsr #8
	local.sin_family = AF_INET;
    dd84:	f8ad 5008 	strh.w	r5, [sp, #8]
	local.sin_port = htons(port);
    dd88:	f8ad 300a 	strh.w	r3, [sp, #10]
	return z_impl_net_addr_pton(family, src, dst);
    dd8c:	aa03      	add	r2, sp, #12
    dd8e:	a904      	add	r1, sp, #16
    dd90:	4628      	mov	r0, r5
    dd92:	f016 ff64 	bl	24c5e <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    dd96:	4604      	mov	r4, r0
    dd98:	b1a0      	cbz	r0, ddc4 <handle_at_bind+0xe0>
		LOG_ERR("Parse failed: %d", -errno);
    dd9a:	f04f 0400 	mov.w	r4, #0
    dd9e:	4a1f      	ldr	r2, [pc, #124]	; (de1c <handle_at_bind+0x138>)
    dda0:	4b1f      	ldr	r3, [pc, #124]	; (de20 <handle_at_bind+0x13c>)
    dda2:	f365 0402 	bfi	r4, r5, #0, #3
    dda6:	1a9b      	subs	r3, r3, r2
    dda8:	f366 04c5 	bfi	r4, r6, #3, #3
    ddac:	08db      	lsrs	r3, r3, #3
    ddae:	f363 148f 	bfi	r4, r3, #6, #10
    ddb2:	f013 ffff 	bl	21db4 <z_impl_z_errno>
    ddb6:	6801      	ldr	r1, [r0, #0]
    ddb8:	4622      	mov	r2, r4
    ddba:	4249      	negs	r1, r1
    ddbc:	481a      	ldr	r0, [pc, #104]	; (de28 <handle_at_bind+0x144>)
    ddbe:	f016 f8d7 	bl	23f70 <log_1>
    ddc2:	e798      	b.n	dcf6 <handle_at_bind+0x12>
	return socket_ops->bind(sock, addr, addrlen);
    ddc4:	2208      	movs	r2, #8
    ddc6:	4b19      	ldr	r3, [pc, #100]	; (de2c <handle_at_bind+0x148>)
    ddc8:	4819      	ldr	r0, [pc, #100]	; (de30 <handle_at_bind+0x14c>)
    ddca:	681b      	ldr	r3, [r3, #0]
    ddcc:	eb0d 0102 	add.w	r1, sp, r2
    ddd0:	68db      	ldr	r3, [r3, #12]
    ddd2:	6800      	ldr	r0, [r0, #0]
    ddd4:	4798      	blx	r3
	if (ret < 0) {
    ddd6:	2800      	cmp	r0, #0
    ddd8:	da8f      	bge.n	dcfa <handle_at_bind+0x16>
		LOG_ERR("bind() failed: %d", -errno);
    ddda:	f04f 0600 	mov.w	r6, #0
    ddde:	4a0f      	ldr	r2, [pc, #60]	; (de1c <handle_at_bind+0x138>)
    dde0:	4b0f      	ldr	r3, [pc, #60]	; (de20 <handle_at_bind+0x13c>)
    dde2:	f365 0602 	bfi	r6, r5, #0, #3
    dde6:	1a9b      	subs	r3, r3, r2
    dde8:	f364 06c5 	bfi	r6, r4, #3, #3
    ddec:	08db      	lsrs	r3, r3, #3
    ddee:	f363 168f 	bfi	r6, r3, #6, #10
    ddf2:	f013 ffdf 	bl	21db4 <z_impl_z_errno>
    ddf6:	6801      	ldr	r1, [r0, #0]
    ddf8:	4632      	mov	r2, r6
    ddfa:	4249      	negs	r1, r1
    ddfc:	480d      	ldr	r0, [pc, #52]	; (de34 <handle_at_bind+0x150>)
    ddfe:	f016 f8b7 	bl	23f70 <log_1>
    de02:	f013 ffd7 	bl	21db4 <z_impl_z_errno>
		do_socket_close(-errno);
    de06:	6800      	ldr	r0, [r0, #0]
    de08:	4240      	negs	r0, r0
    de0a:	f7ff fecb 	bl	dba4 <do_socket_close>
    de0e:	f013 ffd1 	bl	21db4 <z_impl_z_errno>
		return -errno;
    de12:	6804      	ldr	r4, [r0, #0]
    de14:	4264      	negs	r4, r4
    de16:	e770      	b.n	dcfa <handle_at_bind+0x16>
    de18:	200200e0 	.word	0x200200e0
    de1c:	00026684 	.word	0x00026684
    de20:	000266f4 	.word	0x000266f4
    de24:	00027dbc 	.word	0x00027dbc
    de28:	00027dcd 	.word	0x00027dcd
    de2c:	20020314 	.word	0x20020314
    de30:	20020100 	.word	0x20020100
    de34:	00027dde 	.word	0x00027dde

0000de38 <handle_at_tcp_send>:
static int handle_at_tcp_send(const char *at_cmd, size_t param_offset)
{
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    de38:	f44f 7210 	mov.w	r2, #576	; 0x240
{
    de3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (!client.connected) {
    de40:	4d39      	ldr	r5, [pc, #228]	; (df28 <handle_at_tcp_send+0xf0>)
{
    de42:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    de46:	9201      	str	r2, [sp, #4]
	if (!client.connected) {
    de48:	796a      	ldrb	r2, [r5, #5]
	char *at_param = (char *)at_cmd + param_offset;
    de4a:	1844      	adds	r4, r0, r1
	if (!client.connected) {
    de4c:	b9aa      	cbnz	r2, de7a <handle_at_tcp_send+0x42>
		LOG_ERR("TCP not connected yet");
    de4e:	2301      	movs	r3, #1
    de50:	f04f 0100 	mov.w	r1, #0
    de54:	f363 0102 	bfi	r1, r3, #0, #3
    de58:	f362 01c5 	bfi	r1, r2, #3, #3
    de5c:	4b33      	ldr	r3, [pc, #204]	; (df2c <handle_at_tcp_send+0xf4>)
    de5e:	4a34      	ldr	r2, [pc, #208]	; (df30 <handle_at_tcp_send+0xf8>)
    de60:	4834      	ldr	r0, [pc, #208]	; (df34 <handle_at_tcp_send+0xfc>)
    de62:	1a9b      	subs	r3, r3, r2
    de64:	08db      	lsrs	r3, r3, #3
    de66:	f363 118f 	bfi	r1, r3, #6, #10
    de6a:	f016 f874 	bl	23f56 <log_0>
	int err = -EINVAL;
    de6e:	f06f 0015 	mvn.w	r0, #21
		data[size] = '\0';
		err = do_tcp_send(data);
	}

	return err;
}
    de72:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    de76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (*(at_param) == '=') {
    de7a:	5c43      	ldrb	r3, [r0, r1]
    de7c:	2b3d      	cmp	r3, #61	; 0x3d
    de7e:	d1f6      	bne.n	de6e <handle_at_tcp_send+0x36>
		if (*(at_param) == '?') {
    de80:	7863      	ldrb	r3, [r4, #1]
    de82:	2b3f      	cmp	r3, #63	; 0x3f
    de84:	d0f3      	beq.n	de6e <handle_at_tcp_send+0x36>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    de86:	4a2c      	ldr	r2, [pc, #176]	; (df38 <handle_at_tcp_send+0x100>)
    de88:	2100      	movs	r1, #0
    de8a:	f017 fd49 	bl	25920 <at_parser_params_from_str>
		if (err < 0) {
    de8e:	2800      	cmp	r0, #0
    de90:	dbef      	blt.n	de72 <handle_at_tcp_send+0x3a>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    de92:	4829      	ldr	r0, [pc, #164]	; (df38 <handle_at_tcp_send+0x100>)
    de94:	f017 fe4a 	bl	25b2c <at_params_valid_count_get>
    de98:	2801      	cmp	r0, #1
    de9a:	d9e8      	bls.n	de6e <handle_at_tcp_send+0x36>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    de9c:	ae02      	add	r6, sp, #8
    de9e:	ab01      	add	r3, sp, #4
    dea0:	4632      	mov	r2, r6
    dea2:	2101      	movs	r1, #1
    dea4:	4824      	ldr	r0, [pc, #144]	; (df38 <handle_at_tcp_send+0x100>)
    dea6:	f017 fe1e 	bl	25ae6 <at_params_string_get>
		if (err < 0) {
    deaa:	2800      	cmp	r0, #0
    deac:	dbe1      	blt.n	de72 <handle_at_tcp_send+0x3a>
		data[size] = '\0';
    deae:	2400      	movs	r4, #0
    deb0:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    deb2:	4630      	mov	r0, r6
		data[size] = '\0';
    deb4:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    deb6:	f016 fd5f 	bl	24978 <strlen>
    deba:	4607      	mov	r7, r0
	return socket_ops->send(sock, buf, len, flags);
    debc:	f8df 8088 	ldr.w	r8, [pc, #136]	; df48 <handle_at_tcp_send+0x110>
	while (offset < datalen) {
    dec0:	42a7      	cmp	r7, r4
    dec2:	d925      	bls.n	df10 <handle_at_tcp_send+0xd8>
    dec4:	f8d8 3000 	ldr.w	r3, [r8]
    dec8:	1b3a      	subs	r2, r7, r4
    deca:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    dece:	1931      	adds	r1, r6, r4
    ded0:	2300      	movs	r3, #0
    ded2:	6828      	ldr	r0, [r5, #0]
    ded4:	47c8      	blx	r9
		if (ret < 0) {
    ded6:	2800      	cmp	r0, #0
    ded8:	da24      	bge.n	df24 <handle_at_tcp_send+0xec>
    deda:	f013 ff6b 	bl	21db4 <z_impl_z_errno>
			do_socket_close(-errno);
    dede:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    dee0:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    dee4:	4240      	negs	r0, r0
    dee6:	f7ff fe5d 	bl	dba4 <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    deea:	2302      	movs	r3, #2
    deec:	4a10      	ldr	r2, [pc, #64]	; (df30 <handle_at_tcp_send+0xf8>)
    deee:	f363 0602 	bfi	r6, r3, #0, #3
    def2:	4b0e      	ldr	r3, [pc, #56]	; (df2c <handle_at_tcp_send+0xf4>)
    def4:	f36f 06c5 	bfc	r6, #3, #3
    def8:	1a9b      	subs	r3, r3, r2
    defa:	08db      	lsrs	r3, r3, #3
    defc:	f363 168f 	bfi	r6, r3, #6, #10
    df00:	f013 ff58 	bl	21db4 <z_impl_z_errno>
    df04:	6801      	ldr	r1, [r0, #0]
    df06:	4632      	mov	r2, r6
    df08:	4249      	negs	r1, r1
    df0a:	480c      	ldr	r0, [pc, #48]	; (df3c <handle_at_tcp_send+0x104>)
    df0c:	f016 f830 	bl	23f70 <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    df10:	4622      	mov	r2, r4
    df12:	490b      	ldr	r1, [pc, #44]	; (df40 <handle_at_tcp_send+0x108>)
    df14:	480b      	ldr	r0, [pc, #44]	; (df44 <handle_at_tcp_send+0x10c>)
    df16:	f003 fc61 	bl	117dc <sprintf>
	client.callback(buf);
    df1a:	480a      	ldr	r0, [pc, #40]	; (df44 <handle_at_tcp_send+0x10c>)
    df1c:	68ab      	ldr	r3, [r5, #8]
    df1e:	4798      	blx	r3
		err = do_tcp_send(data);
    df20:	2000      	movs	r0, #0
    df22:	e7a6      	b.n	de72 <handle_at_tcp_send+0x3a>
		offset += ret;
    df24:	4404      	add	r4, r0
    df26:	e7cb      	b.n	dec0 <handle_at_tcp_send+0x88>
    df28:	20020100 	.word	0x20020100
    df2c:	000266f4 	.word	0x000266f4
    df30:	00026684 	.word	0x00026684
    df34:	00027e99 	.word	0x00027e99
    df38:	200200e0 	.word	0x200200e0
    df3c:	00027eaf 	.word	0x00027eaf
    df40:	00027ec1 	.word	0x00027ec1
    df44:	2002733c 	.word	0x2002733c
    df48:	20020314 	.word	0x20020314

0000df4c <parse_host_by_ipv4>:
{
    df4c:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    df4e:	2301      	movs	r3, #1
    df50:	4a06      	ldr	r2, [pc, #24]	; (df6c <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    df52:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    df54:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    df56:	8051      	strh	r1, [r2, #2]
    df58:	4601      	mov	r1, r0
    df5a:	3204      	adds	r2, #4
    df5c:	4618      	mov	r0, r3
    df5e:	f016 fe7e 	bl	24c5e <z_impl_net_addr_pton>
    df62:	2800      	cmp	r0, #0
}
    df64:	bf18      	it	ne
    df66:	f06f 0015 	mvnne.w	r0, #21
    df6a:	bd08      	pop	{r3, pc}
    df6c:	20025e00 	.word	0x20025e00

0000df70 <do_udp_init>:
{
    df70:	b538      	push	{r3, r4, r5, lr}
    df72:	4604      	mov	r4, r0
    df74:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    df76:	f016 fcff 	bl	24978 <strlen>
    df7a:	b2c1      	uxtb	r1, r0
    df7c:	4620      	mov	r0, r4
    df7e:	f015 fc3c 	bl	237fa <check_for_ipv4>
    df82:	b1c0      	cbz	r0, dfb6 <do_udp_init+0x46>
		ret = parse_host_by_ipv4(url, port);
    df84:	4629      	mov	r1, r5
    df86:	4620      	mov	r0, r4
    df88:	f7ff ffe0 	bl	df4c <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    df8c:	4604      	mov	r4, r0
	if (ret) {
    df8e:	b180      	cbz	r0, dfb2 <do_udp_init+0x42>
		LOG_ERR("Parse failed: %d", ret);
    df90:	2301      	movs	r3, #1
    df92:	f04f 0200 	mov.w	r2, #0
    df96:	490b      	ldr	r1, [pc, #44]	; (dfc4 <do_udp_init+0x54>)
    df98:	f363 0202 	bfi	r2, r3, #0, #3
    df9c:	4b0a      	ldr	r3, [pc, #40]	; (dfc8 <do_udp_init+0x58>)
    df9e:	f36f 02c5 	bfc	r2, #3, #3
    dfa2:	1a5b      	subs	r3, r3, r1
    dfa4:	08db      	lsrs	r3, r3, #3
    dfa6:	4601      	mov	r1, r0
    dfa8:	f363 128f 	bfi	r2, r3, #6, #10
    dfac:	4807      	ldr	r0, [pc, #28]	; (dfcc <do_udp_init+0x5c>)
    dfae:	f015 ffdf 	bl	23f70 <log_1>
}
    dfb2:	4620      	mov	r0, r4
    dfb4:	bd38      	pop	{r3, r4, r5, pc}
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    dfb6:	2202      	movs	r2, #2
    dfb8:	4629      	mov	r1, r5
    dfba:	4620      	mov	r0, r4
    dfbc:	f7ff fe34 	bl	dc28 <parse_host_by_name>
    dfc0:	e7e4      	b.n	df8c <do_udp_init+0x1c>
    dfc2:	bf00      	nop
    dfc4:	00026684 	.word	0x00026684
    dfc8:	000266f4 	.word	0x000266f4
    dfcc:	00027dcd 	.word	0x00027dcd

0000dfd0 <handle_at_udp_sendto>:
 *  AT#XUDPSENDTO=<url>,<port>,<data>
 *  AT#XUDPSENDTO? READ command not supported
 *  AT#XUDPSENDTO=? TEST command not supported
 */
static int handle_at_udp_sendto(const char *at_cmd, size_t param_offset)
{
    dfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char url[TCPIP_MAX_URL];
	u16_t port;
	char data[NET_IPV4_MTU];
	int size;

	if (client.sock < 0) {
    dfd4:	4b59      	ldr	r3, [pc, #356]	; (e13c <handle_at_udp_sendto+0x16c>)
{
    dfd6:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
	if (client.sock < 0) {
    dfda:	681d      	ldr	r5, [r3, #0]
	char *at_param = (char *)at_cmd + param_offset;
    dfdc:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    dfde:	2d00      	cmp	r5, #0
    dfe0:	461e      	mov	r6, r3
    dfe2:	da15      	bge.n	e010 <handle_at_udp_sendto+0x40>
		LOG_ERR("Socket not opened yet");
    dfe4:	2301      	movs	r3, #1
    dfe6:	f04f 0100 	mov.w	r1, #0
    dfea:	4a55      	ldr	r2, [pc, #340]	; (e140 <handle_at_udp_sendto+0x170>)
    dfec:	f363 0102 	bfi	r1, r3, #0, #3
    dff0:	4b54      	ldr	r3, [pc, #336]	; (e144 <handle_at_udp_sendto+0x174>)
    dff2:	f36f 01c5 	bfc	r1, #3, #3
    dff6:	1a9b      	subs	r3, r3, r2
    dff8:	08db      	lsrs	r3, r3, #3
    dffa:	4853      	ldr	r0, [pc, #332]	; (e148 <handle_at_udp_sendto+0x178>)
    dffc:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    e000:	f015 ffa9 	bl	23f56 <log_0>
	int err = -EINVAL;
    e004:	f06f 0015 	mvn.w	r0, #21
		data[size] = '\0';
		err = do_udp_sendto(url, port, data);
	}

	return err;
}
    e008:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
    e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    e010:	791b      	ldrb	r3, [r3, #4]
    e012:	2b11      	cmp	r3, #17
    e014:	d00e      	beq.n	e034 <handle_at_udp_sendto+0x64>
		LOG_ERR("Invalid socket");
    e016:	2301      	movs	r3, #1
    e018:	f04f 0100 	mov.w	r1, #0
    e01c:	4a48      	ldr	r2, [pc, #288]	; (e140 <handle_at_udp_sendto+0x170>)
    e01e:	f363 0102 	bfi	r1, r3, #0, #3
    e022:	4b48      	ldr	r3, [pc, #288]	; (e144 <handle_at_udp_sendto+0x174>)
    e024:	f36f 01c5 	bfc	r1, #3, #3
    e028:	1a9b      	subs	r3, r3, r2
    e02a:	08db      	lsrs	r3, r3, #3
    e02c:	f363 118f 	bfi	r1, r3, #6, #10
    e030:	4846      	ldr	r0, [pc, #280]	; (e14c <handle_at_udp_sendto+0x17c>)
    e032:	e7e5      	b.n	e000 <handle_at_udp_sendto+0x30>
	if (*(at_param) == '=') {
    e034:	5c43      	ldrb	r3, [r0, r1]
    e036:	2b3d      	cmp	r3, #61	; 0x3d
    e038:	d1e4      	bne.n	e004 <handle_at_udp_sendto+0x34>
		if (*(at_param) == '?') {
    e03a:	7863      	ldrb	r3, [r4, #1]
    e03c:	2b3f      	cmp	r3, #63	; 0x3f
    e03e:	d0e1      	beq.n	e004 <handle_at_udp_sendto+0x34>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e040:	4a43      	ldr	r2, [pc, #268]	; (e150 <handle_at_udp_sendto+0x180>)
    e042:	2100      	movs	r1, #0
    e044:	f017 fc6c 	bl	25920 <at_parser_params_from_str>
		if (err < 0) {
    e048:	2800      	cmp	r0, #0
    e04a:	dbdd      	blt.n	e008 <handle_at_udp_sendto+0x38>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    e04c:	4840      	ldr	r0, [pc, #256]	; (e150 <handle_at_udp_sendto+0x180>)
    e04e:	f017 fd6d 	bl	25b2c <at_params_valid_count_get>
    e052:	2803      	cmp	r0, #3
    e054:	d9d6      	bls.n	e004 <handle_at_udp_sendto+0x34>
		size = TCPIP_MAX_URL;
    e056:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e058:	ac04      	add	r4, sp, #16
		size = TCPIP_MAX_URL;
    e05a:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e05c:	4622      	mov	r2, r4
    e05e:	ab03      	add	r3, sp, #12
    e060:	2101      	movs	r1, #1
    e062:	483b      	ldr	r0, [pc, #236]	; (e150 <handle_at_udp_sendto+0x180>)
    e064:	f017 fd3f 	bl	25ae6 <at_params_string_get>
		if (err < 0) {
    e068:	2800      	cmp	r0, #0
    e06a:	dbcd      	blt.n	e008 <handle_at_udp_sendto+0x38>
		url[size] = '\0';
    e06c:	2700      	movs	r7, #0
    e06e:	9b03      	ldr	r3, [sp, #12]
		err = at_params_short_get(&m_param_list, 2, &port);
    e070:	f10d 020a 	add.w	r2, sp, #10
    e074:	2102      	movs	r1, #2
    e076:	4836      	ldr	r0, [pc, #216]	; (e150 <handle_at_udp_sendto+0x180>)
		url[size] = '\0';
    e078:	54e7      	strb	r7, [r4, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    e07a:	f017 fd22 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    e07e:	2800      	cmp	r0, #0
    e080:	dbc2      	blt.n	e008 <handle_at_udp_sendto+0x38>
		size = NET_IPV4_MTU;
    e082:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    e086:	ad24      	add	r5, sp, #144	; 0x90
		size = NET_IPV4_MTU;
    e088:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    e08a:	462a      	mov	r2, r5
    e08c:	ab03      	add	r3, sp, #12
    e08e:	2103      	movs	r1, #3
    e090:	482f      	ldr	r0, [pc, #188]	; (e150 <handle_at_udp_sendto+0x180>)
    e092:	f017 fd28 	bl	25ae6 <at_params_string_get>
		if (err < 0) {
    e096:	2800      	cmp	r0, #0
    e098:	dbb6      	blt.n	e008 <handle_at_udp_sendto+0x38>
		data[size] = '\0';
    e09a:	9b03      	ldr	r3, [sp, #12]
	u32_t datalen = strlen(data);
    e09c:	4628      	mov	r0, r5
		data[size] = '\0';
    e09e:	54ef      	strb	r7, [r5, r3]
		err = do_udp_sendto(url, port, data);
    e0a0:	f8bd 800a 	ldrh.w	r8, [sp, #10]
	u32_t datalen = strlen(data);
    e0a4:	f016 fc68 	bl	24978 <strlen>
	ret = do_udp_init(url, port);
    e0a8:	4641      	mov	r1, r8
	u32_t datalen = strlen(data);
    e0aa:	4607      	mov	r7, r0
	ret = do_udp_init(url, port);
    e0ac:	4620      	mov	r0, r4
    e0ae:	f7ff ff5f 	bl	df70 <do_udp_init>
	if (ret < 0) {
    e0b2:	2800      	cmp	r0, #0
    e0b4:	dba8      	blt.n	e008 <handle_at_udp_sendto+0x38>
	u32_t offset = 0;
    e0b6:	2400      	movs	r4, #0
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    e0b8:	f04f 0908 	mov.w	r9, #8
    e0bc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; e160 <handle_at_udp_sendto+0x190>
    e0c0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; e164 <handle_at_udp_sendto+0x194>
	while (offset < datalen) {
    e0c4:	42a7      	cmp	r7, r4
    e0c6:	d809      	bhi.n	e0dc <handle_at_udp_sendto+0x10c>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    e0c8:	4622      	mov	r2, r4
    e0ca:	4922      	ldr	r1, [pc, #136]	; (e154 <handle_at_udp_sendto+0x184>)
    e0cc:	4822      	ldr	r0, [pc, #136]	; (e158 <handle_at_udp_sendto+0x188>)
    e0ce:	f003 fb85 	bl	117dc <sprintf>
	client.callback(buf);
    e0d2:	4821      	ldr	r0, [pc, #132]	; (e158 <handle_at_udp_sendto+0x188>)
    e0d4:	68b3      	ldr	r3, [r6, #8]
    e0d6:	4798      	blx	r3
	return 0;
    e0d8:	2000      	movs	r0, #0
    e0da:	e795      	b.n	e008 <handle_at_udp_sendto+0x38>
    e0dc:	f8d8 3000 	ldr.w	r3, [r8]
    e0e0:	e9cd a900 	strd	sl, r9, [sp]
    e0e4:	1b3a      	subs	r2, r7, r4
    e0e6:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
    e0ea:	1929      	adds	r1, r5, r4
    e0ec:	2300      	movs	r3, #0
    e0ee:	6830      	ldr	r0, [r6, #0]
    e0f0:	47d8      	blx	fp
		if (ret <= 0) {
    e0f2:	2800      	cmp	r0, #0
    e0f4:	dc1f      	bgt.n	e136 <handle_at_udp_sendto+0x166>
			LOG_ERR("sendto() failed: %d", -errno);
    e0f6:	2301      	movs	r3, #1
    e0f8:	f04f 0400 	mov.w	r4, #0
    e0fc:	4a10      	ldr	r2, [pc, #64]	; (e140 <handle_at_udp_sendto+0x170>)
    e0fe:	f363 0402 	bfi	r4, r3, #0, #3
    e102:	4b10      	ldr	r3, [pc, #64]	; (e144 <handle_at_udp_sendto+0x174>)
    e104:	f36f 04c5 	bfc	r4, #3, #3
    e108:	1a9b      	subs	r3, r3, r2
    e10a:	08db      	lsrs	r3, r3, #3
    e10c:	f363 148f 	bfi	r4, r3, #6, #10
    e110:	f013 fe50 	bl	21db4 <z_impl_z_errno>
    e114:	6801      	ldr	r1, [r0, #0]
    e116:	4622      	mov	r2, r4
    e118:	4249      	negs	r1, r1
    e11a:	4810      	ldr	r0, [pc, #64]	; (e15c <handle_at_udp_sendto+0x18c>)
    e11c:	f015 ff28 	bl	23f70 <log_1>
    e120:	f013 fe48 	bl	21db4 <z_impl_z_errno>
			do_socket_close(-errno);
    e124:	6800      	ldr	r0, [r0, #0]
    e126:	4240      	negs	r0, r0
    e128:	f7ff fd3c 	bl	dba4 <do_socket_close>
    e12c:	f013 fe42 	bl	21db4 <z_impl_z_errno>
			return -errno;
    e130:	6800      	ldr	r0, [r0, #0]
    e132:	4240      	negs	r0, r0
    e134:	e768      	b.n	e008 <handle_at_udp_sendto+0x38>
		offset += ret;
    e136:	4404      	add	r4, r0
    e138:	e7c4      	b.n	e0c4 <handle_at_udp_sendto+0xf4>
    e13a:	bf00      	nop
    e13c:	20020100 	.word	0x20020100
    e140:	00026684 	.word	0x00026684
    e144:	000266f4 	.word	0x000266f4
    e148:	00027f02 	.word	0x00027f02
    e14c:	00027f18 	.word	0x00027f18
    e150:	200200e0 	.word	0x200200e0
    e154:	00027f3b 	.word	0x00027f3b
    e158:	2002733c 	.word	0x2002733c
    e15c:	00027f27 	.word	0x00027f27
    e160:	20020314 	.word	0x20020314
    e164:	20025e00 	.word	0x20025e00

0000e168 <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    e168:	2380      	movs	r3, #128	; 0x80
{
    e16a:	b530      	push	{r4, r5, lr}
    e16c:	b0a3      	sub	sp, #140	; 0x8c
	int size = TCPIP_MAX_URL;
    e16e:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    e170:	4b52      	ldr	r3, [pc, #328]	; (e2bc <handle_at_tcp_conn+0x154>)
	char *at_param = (char *)at_cmd + param_offset;
    e172:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    e174:	681d      	ldr	r5, [r3, #0]
    e176:	2d00      	cmp	r5, #0
    e178:	461d      	mov	r5, r3
    e17a:	da14      	bge.n	e1a6 <handle_at_tcp_conn+0x3e>
		LOG_ERR("Socket not opened yet");
    e17c:	2301      	movs	r3, #1
    e17e:	f04f 0100 	mov.w	r1, #0
    e182:	4a4f      	ldr	r2, [pc, #316]	; (e2c0 <handle_at_tcp_conn+0x158>)
    e184:	f363 0102 	bfi	r1, r3, #0, #3
    e188:	4b4e      	ldr	r3, [pc, #312]	; (e2c4 <handle_at_tcp_conn+0x15c>)
    e18a:	f36f 01c5 	bfc	r1, #3, #3
    e18e:	1a9b      	subs	r3, r3, r2
    e190:	08db      	lsrs	r3, r3, #3
    e192:	f363 118f 	bfi	r1, r3, #6, #10
    e196:	484c      	ldr	r0, [pc, #304]	; (e2c8 <handle_at_tcp_conn+0x160>)
    e198:	f015 fedd 	bl	23f56 <log_0>
			return err;
    e19c:	f06f 0415 	mvn.w	r4, #21
}
    e1a0:	4620      	mov	r0, r4
    e1a2:	b023      	add	sp, #140	; 0x8c
    e1a4:	bd30      	pop	{r4, r5, pc}
	if (*(at_param) == '=') {
    e1a6:	5c42      	ldrb	r2, [r0, r1]
    e1a8:	2a3d      	cmp	r2, #61	; 0x3d
    e1aa:	d17a      	bne.n	e2a2 <handle_at_tcp_conn+0x13a>
		if (*(at_param) == '?') {
    e1ac:	7863      	ldrb	r3, [r4, #1]
    e1ae:	2b3f      	cmp	r3, #63	; 0x3f
    e1b0:	d0f4      	beq.n	e19c <handle_at_tcp_conn+0x34>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e1b2:	4a46      	ldr	r2, [pc, #280]	; (e2cc <handle_at_tcp_conn+0x164>)
    e1b4:	2100      	movs	r1, #0
    e1b6:	f017 fbb3 	bl	25920 <at_parser_params_from_str>
		if (err < 0) {
    e1ba:	1e04      	subs	r4, r0, #0
    e1bc:	dbf0      	blt.n	e1a0 <handle_at_tcp_conn+0x38>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    e1be:	4843      	ldr	r0, [pc, #268]	; (e2cc <handle_at_tcp_conn+0x164>)
    e1c0:	f017 fcb4 	bl	25b2c <at_params_valid_count_get>
    e1c4:	2802      	cmp	r0, #2
    e1c6:	d9e9      	bls.n	e19c <handle_at_tcp_conn+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e1c8:	ab01      	add	r3, sp, #4
    e1ca:	aa02      	add	r2, sp, #8
    e1cc:	2101      	movs	r1, #1
    e1ce:	483f      	ldr	r0, [pc, #252]	; (e2cc <handle_at_tcp_conn+0x164>)
    e1d0:	f017 fc89 	bl	25ae6 <at_params_string_get>
		if (err < 0) {
    e1d4:	1e04      	subs	r4, r0, #0
    e1d6:	dbe3      	blt.n	e1a0 <handle_at_tcp_conn+0x38>
		url[size] = '\0';
    e1d8:	9b01      	ldr	r3, [sp, #4]
    e1da:	aa22      	add	r2, sp, #136	; 0x88
    e1dc:	4413      	add	r3, r2
    e1de:	2200      	movs	r2, #0
		err = at_params_short_get(&m_param_list, 2, &port);
    e1e0:	2102      	movs	r1, #2
		url[size] = '\0';
    e1e2:	f803 2c80 	strb.w	r2, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    e1e6:	4839      	ldr	r0, [pc, #228]	; (e2cc <handle_at_tcp_conn+0x164>)
    e1e8:	f10d 0202 	add.w	r2, sp, #2
    e1ec:	f017 fc69 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    e1f0:	1e04      	subs	r4, r0, #0
    e1f2:	dbd5      	blt.n	e1a0 <handle_at_tcp_conn+0x38>
	if (check_for_ipv4(url, strlen(url))) {
    e1f4:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    e1f6:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    e1fa:	f016 fbbd 	bl	24978 <strlen>
    e1fe:	b2c1      	uxtb	r1, r0
    e200:	a802      	add	r0, sp, #8
    e202:	f015 fafa 	bl	237fa <check_for_ipv4>
    e206:	b1b8      	cbz	r0, e238 <handle_at_tcp_conn+0xd0>
		ret = parse_host_by_ipv4(url, port);
    e208:	4621      	mov	r1, r4
    e20a:	a802      	add	r0, sp, #8
    e20c:	f7ff fe9e 	bl	df4c <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    e210:	4604      	mov	r4, r0
	if (ret) {
    e212:	b1b8      	cbz	r0, e244 <handle_at_tcp_conn+0xdc>
		LOG_ERR("Parse failed: %d", ret);
    e214:	2301      	movs	r3, #1
    e216:	f04f 0200 	mov.w	r2, #0
    e21a:	4929      	ldr	r1, [pc, #164]	; (e2c0 <handle_at_tcp_conn+0x158>)
    e21c:	f363 0202 	bfi	r2, r3, #0, #3
    e220:	4b28      	ldr	r3, [pc, #160]	; (e2c4 <handle_at_tcp_conn+0x15c>)
    e222:	f36f 02c5 	bfc	r2, #3, #3
    e226:	1a5b      	subs	r3, r3, r1
    e228:	08db      	lsrs	r3, r3, #3
    e22a:	4601      	mov	r1, r0
    e22c:	f363 128f 	bfi	r2, r3, #6, #10
    e230:	4827      	ldr	r0, [pc, #156]	; (e2d0 <handle_at_tcp_conn+0x168>)
    e232:	f015 fe9d 	bl	23f70 <log_1>
    e236:	e7b3      	b.n	e1a0 <handle_at_tcp_conn+0x38>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    e238:	2201      	movs	r2, #1
    e23a:	4621      	mov	r1, r4
    e23c:	a802      	add	r0, sp, #8
    e23e:	f7ff fcf3 	bl	dc28 <parse_host_by_name>
    e242:	e7e5      	b.n	e210 <handle_at_tcp_conn+0xa8>
	return socket_ops->connect(sock, addr, addrlen);
    e244:	4b23      	ldr	r3, [pc, #140]	; (e2d4 <handle_at_tcp_conn+0x16c>)
    e246:	2208      	movs	r2, #8
    e248:	681b      	ldr	r3, [r3, #0]
    e24a:	4923      	ldr	r1, [pc, #140]	; (e2d8 <handle_at_tcp_conn+0x170>)
    e24c:	695b      	ldr	r3, [r3, #20]
    e24e:	6828      	ldr	r0, [r5, #0]
    e250:	4798      	blx	r3
	if (ret < 0) {
    e252:	2800      	cmp	r0, #0
    e254:	f04f 0301 	mov.w	r3, #1
    e258:	da1e      	bge.n	e298 <handle_at_tcp_conn+0x130>
		LOG_ERR("connect() failed: %d", -errno);
    e25a:	f04f 0500 	mov.w	r5, #0
    e25e:	4a18      	ldr	r2, [pc, #96]	; (e2c0 <handle_at_tcp_conn+0x158>)
    e260:	f363 0502 	bfi	r5, r3, #0, #3
    e264:	4b17      	ldr	r3, [pc, #92]	; (e2c4 <handle_at_tcp_conn+0x15c>)
    e266:	f364 05c5 	bfi	r5, r4, #3, #3
    e26a:	1a9b      	subs	r3, r3, r2
    e26c:	08db      	lsrs	r3, r3, #3
    e26e:	f363 158f 	bfi	r5, r3, #6, #10
    e272:	f013 fd9f 	bl	21db4 <z_impl_z_errno>
    e276:	6801      	ldr	r1, [r0, #0]
    e278:	462a      	mov	r2, r5
    e27a:	4249      	negs	r1, r1
    e27c:	4817      	ldr	r0, [pc, #92]	; (e2dc <handle_at_tcp_conn+0x174>)
    e27e:	f015 fe77 	bl	23f70 <log_1>
    e282:	f013 fd97 	bl	21db4 <z_impl_z_errno>
		do_socket_close(-errno);
    e286:	6800      	ldr	r0, [r0, #0]
    e288:	4240      	negs	r0, r0
    e28a:	f7ff fc8b 	bl	dba4 <do_socket_close>
    e28e:	f013 fd91 	bl	21db4 <z_impl_z_errno>
		return -errno;
    e292:	6804      	ldr	r4, [r0, #0]
    e294:	4264      	negs	r4, r4
    e296:	e783      	b.n	e1a0 <handle_at_tcp_conn+0x38>
	client.connected = true;
    e298:	716b      	strb	r3, [r5, #5]
	client.callback("#XTCPCONN: 1\r\n");
    e29a:	4811      	ldr	r0, [pc, #68]	; (e2e0 <handle_at_tcp_conn+0x178>)
    e29c:	68ab      	ldr	r3, [r5, #8]
    e29e:	4798      	blx	r3
    e2a0:	e77e      	b.n	e1a0 <handle_at_tcp_conn+0x38>
	} else if (*(at_param) == '?') {
    e2a2:	2a3f      	cmp	r2, #63	; 0x3f
    e2a4:	f47f af7a 	bne.w	e19c <handle_at_tcp_conn+0x34>
		if (client.connected) {
    e2a8:	795c      	ldrb	r4, [r3, #5]
    e2aa:	689a      	ldr	r2, [r3, #8]
    e2ac:	b11c      	cbz	r4, e2b6 <handle_at_tcp_conn+0x14e>
			client.callback("+XTCPCONN: 1\r\n");
    e2ae:	480d      	ldr	r0, [pc, #52]	; (e2e4 <handle_at_tcp_conn+0x17c>)
    e2b0:	4790      	blx	r2
		err = 0;
    e2b2:	2400      	movs	r4, #0
    e2b4:	e774      	b.n	e1a0 <handle_at_tcp_conn+0x38>
			client.callback("+XTCPCONN: 0\r\n");
    e2b6:	480c      	ldr	r0, [pc, #48]	; (e2e8 <handle_at_tcp_conn+0x180>)
    e2b8:	4790      	blx	r2
    e2ba:	e771      	b.n	e1a0 <handle_at_tcp_conn+0x38>
    e2bc:	20020100 	.word	0x20020100
    e2c0:	00026684 	.word	0x00026684
    e2c4:	000266f4 	.word	0x000266f4
    e2c8:	00027f02 	.word	0x00027f02
    e2cc:	200200e0 	.word	0x200200e0
    e2d0:	00027dcd 	.word	0x00027dcd
    e2d4:	20020314 	.word	0x20020314
    e2d8:	20025e00 	.word	0x20025e00
    e2dc:	00027e57 	.word	0x00027e57
    e2e0:	00027e6c 	.word	0x00027e6c
    e2e4:	00027e7b 	.word	0x00027e7b
    e2e8:	00027e8a 	.word	0x00027e8a

0000e2ec <do_tcp_receive>:
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    e2ec:	2208      	movs	r2, #8
{
    e2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct timeval tmo = {
    e2f2:	2700      	movs	r7, #0
    e2f4:	4e45      	ldr	r6, [pc, #276]	; (e40c <do_tcp_receive+0x120>)
{
    e2f6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    e2fa:	6833      	ldr	r3, [r6, #0]
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    e2fc:	4d44      	ldr	r5, [pc, #272]	; (e410 <do_tcp_receive+0x124>)
    e2fe:	9200      	str	r2, [sp, #0]
    e300:	69dc      	ldr	r4, [r3, #28]
	struct timeval tmo = {
    e302:	e9cd 1702 	strd	r1, r7, [sp, #8]
    e306:	eb0d 0302 	add.w	r3, sp, r2
{
    e30a:	4680      	mov	r8, r0
    e30c:	2214      	movs	r2, #20
    e30e:	2101      	movs	r1, #1
    e310:	6828      	ldr	r0, [r5, #0]
    e312:	47a0      	blx	r4
	if (ret < 0) {
    e314:	1e04      	subs	r4, r0, #0
    e316:	da1f      	bge.n	e358 <do_tcp_receive+0x6c>
    e318:	f013 fd4c 	bl	21db4 <z_impl_z_errno>
		do_socket_close(-errno);
    e31c:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    e31e:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    e322:	4240      	negs	r0, r0
    e324:	f7ff fc3e 	bl	dba4 <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    e328:	2301      	movs	r3, #1
    e32a:	4a3a      	ldr	r2, [pc, #232]	; (e414 <do_tcp_receive+0x128>)
    e32c:	f363 0502 	bfi	r5, r3, #0, #3
    e330:	4b39      	ldr	r3, [pc, #228]	; (e418 <do_tcp_receive+0x12c>)
    e332:	f367 05c5 	bfi	r5, r7, #3, #3
    e336:	1a9b      	subs	r3, r3, r2
    e338:	08db      	lsrs	r3, r3, #3
    e33a:	f363 158f 	bfi	r5, r3, #6, #10
    e33e:	f013 fd39 	bl	21db4 <z_impl_z_errno>
    e342:	6801      	ldr	r1, [r0, #0]
    e344:	462a      	mov	r2, r5
    e346:	4249      	negs	r1, r1
    e348:	4834      	ldr	r0, [pc, #208]	; (e41c <do_tcp_receive+0x130>)
    e34a:	f015 fe11 	bl	23f70 <log_1>
}
    e34e:	4620      	mov	r0, r4
    e350:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
    e354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e358:	6833      	ldr	r3, [r6, #0]
	if (length > NET_IPV4_MTU) {
    e35a:	f5b8 7f10 	cmp.w	r8, #576	; 0x240
    e35e:	ae04      	add	r6, sp, #16
    e360:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	return socket_ops->recv(sock, buf, max_len, flags);
    e362:	bf8c      	ite	hi
    e364:	f44f 7210 	movhi.w	r2, #576	; 0x240
    e368:	4642      	movls	r2, r8
    e36a:	6828      	ldr	r0, [r5, #0]
    e36c:	463b      	mov	r3, r7
    e36e:	4631      	mov	r1, r6
    e370:	47a0      	blx	r4
	if (ret < 0) {
    e372:	2800      	cmp	r0, #0
    e374:	4604      	mov	r4, r0
    e376:	da1f      	bge.n	e3b8 <do_tcp_receive+0xcc>
		LOG_WRN("recv() error: %d", -errno);
    e378:	2302      	movs	r3, #2
    e37a:	f04f 0400 	mov.w	r4, #0
    e37e:	4a25      	ldr	r2, [pc, #148]	; (e414 <do_tcp_receive+0x128>)
    e380:	f363 0402 	bfi	r4, r3, #0, #3
    e384:	4b24      	ldr	r3, [pc, #144]	; (e418 <do_tcp_receive+0x12c>)
    e386:	f36f 04c5 	bfc	r4, #3, #3
    e38a:	1a9b      	subs	r3, r3, r2
    e38c:	08db      	lsrs	r3, r3, #3
    e38e:	f363 148f 	bfi	r4, r3, #6, #10
    e392:	f013 fd0f 	bl	21db4 <z_impl_z_errno>
    e396:	6801      	ldr	r1, [r0, #0]
    e398:	4622      	mov	r2, r4
    e39a:	4249      	negs	r1, r1
    e39c:	4820      	ldr	r0, [pc, #128]	; (e420 <do_tcp_receive+0x134>)
    e39e:	f015 fde7 	bl	23f70 <log_1>
    e3a2:	f013 fd07 	bl	21db4 <z_impl_z_errno>
		do_socket_close(-errno);
    e3a6:	6800      	ldr	r0, [r0, #0]
    e3a8:	4240      	negs	r0, r0
    e3aa:	f7ff fbfb 	bl	dba4 <do_socket_close>
    e3ae:	f013 fd01 	bl	21db4 <z_impl_z_errno>
		ret = -errno;
    e3b2:	6804      	ldr	r4, [r0, #0]
    e3b4:	4264      	negs	r4, r4
    e3b6:	e7ca      	b.n	e34e <do_tcp_receive+0x62>
	} else if (ret == 0) {
    e3b8:	d113      	bne.n	e3e2 <do_tcp_receive+0xf6>
		LOG_WRN("recv() return 0");
    e3ba:	2302      	movs	r3, #2
    e3bc:	f04f 0100 	mov.w	r1, #0
    e3c0:	4a14      	ldr	r2, [pc, #80]	; (e414 <do_tcp_receive+0x128>)
    e3c2:	f363 0102 	bfi	r1, r3, #0, #3
    e3c6:	4b14      	ldr	r3, [pc, #80]	; (e418 <do_tcp_receive+0x12c>)
    e3c8:	f360 01c5 	bfi	r1, r0, #3, #3
    e3cc:	1a9b      	subs	r3, r3, r2
    e3ce:	08db      	lsrs	r3, r3, #3
    e3d0:	f363 118f 	bfi	r1, r3, #6, #10
    e3d4:	4813      	ldr	r0, [pc, #76]	; (e424 <do_tcp_receive+0x138>)
    e3d6:	f015 fdbe 	bl	23f56 <log_0>
		do_socket_close(0);
    e3da:	4620      	mov	r0, r4
    e3dc:	f7ff fbe2 	bl	dba4 <do_socket_close>
    e3e0:	e7b5      	b.n	e34e <do_tcp_receive+0x62>
		data[ret] = '\0';
    e3e2:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    e3e4:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    e3e6:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    e3e8:	480f      	ldr	r0, [pc, #60]	; (e428 <do_tcp_receive+0x13c>)
    e3ea:	4798      	blx	r3
		client.callback(data);
    e3ec:	68ab      	ldr	r3, [r5, #8]
    e3ee:	4630      	mov	r0, r6
    e3f0:	4798      	blx	r3
		client.callback("\r\n");
    e3f2:	68ab      	ldr	r3, [r5, #8]
    e3f4:	480d      	ldr	r0, [pc, #52]	; (e42c <do_tcp_receive+0x140>)
    e3f6:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    e3f8:	4622      	mov	r2, r4
    e3fa:	490d      	ldr	r1, [pc, #52]	; (e430 <do_tcp_receive+0x144>)
    e3fc:	480d      	ldr	r0, [pc, #52]	; (e434 <do_tcp_receive+0x148>)
    e3fe:	f003 f9ed 	bl	117dc <sprintf>
		client.callback(buf);
    e402:	68ab      	ldr	r3, [r5, #8]
    e404:	480b      	ldr	r0, [pc, #44]	; (e434 <do_tcp_receive+0x148>)
    e406:	4798      	blx	r3
		ret = 0;
    e408:	463c      	mov	r4, r7
    e40a:	e7a0      	b.n	e34e <do_tcp_receive+0x62>
    e40c:	20020314 	.word	0x20020314
    e410:	20020100 	.word	0x20020100
    e414:	00026684 	.word	0x00026684
    e418:	000266f4 	.word	0x000266f4
    e41c:	00027d68 	.word	0x00027d68
    e420:	00027d7f 	.word	0x00027d7f
    e424:	00027d90 	.word	0x00027d90
    e428:	00027da0 	.word	0x00027da0
    e42c:	00027e96 	.word	0x00027e96
    e430:	00027dac 	.word	0x00027dac
    e434:	2002733c 	.word	0x2002733c

0000e438 <handle_at_tcp_recv>:
	if (!client.connected) {
    e438:	4a1f      	ldr	r2, [pc, #124]	; (e4b8 <handle_at_tcp_recv+0x80>)
{
    e43a:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    e43c:	7952      	ldrb	r2, [r2, #5]
	char *at_param = (char *)at_cmd + param_offset;
    e43e:	1844      	adds	r4, r0, r1
	if (!client.connected) {
    e440:	b99a      	cbnz	r2, e46a <handle_at_tcp_recv+0x32>
		LOG_ERR("TCP not connected yet");
    e442:	2301      	movs	r3, #1
    e444:	f04f 0100 	mov.w	r1, #0
    e448:	f363 0102 	bfi	r1, r3, #0, #3
    e44c:	f362 01c5 	bfi	r1, r2, #3, #3
    e450:	4b1a      	ldr	r3, [pc, #104]	; (e4bc <handle_at_tcp_recv+0x84>)
    e452:	4a1b      	ldr	r2, [pc, #108]	; (e4c0 <handle_at_tcp_recv+0x88>)
    e454:	481b      	ldr	r0, [pc, #108]	; (e4c4 <handle_at_tcp_recv+0x8c>)
    e456:	1a9b      	subs	r3, r3, r2
    e458:	08db      	lsrs	r3, r3, #3
    e45a:	f363 118f 	bfi	r1, r3, #6, #10
    e45e:	f015 fd7a 	bl	23f56 <log_0>
	int err = -EINVAL;
    e462:	f06f 0015 	mvn.w	r0, #21
}
    e466:	b002      	add	sp, #8
    e468:	bd10      	pop	{r4, pc}
	if (*(at_param) == '=') {
    e46a:	5c43      	ldrb	r3, [r0, r1]
    e46c:	2b3d      	cmp	r3, #61	; 0x3d
    e46e:	d1f8      	bne.n	e462 <handle_at_tcp_recv+0x2a>
		if (*(at_param) == '?') {
    e470:	7863      	ldrb	r3, [r4, #1]
    e472:	2b3f      	cmp	r3, #63	; 0x3f
    e474:	d0f5      	beq.n	e462 <handle_at_tcp_recv+0x2a>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e476:	4a14      	ldr	r2, [pc, #80]	; (e4c8 <handle_at_tcp_recv+0x90>)
    e478:	2100      	movs	r1, #0
    e47a:	f017 fa51 	bl	25920 <at_parser_params_from_str>
		if (err < 0) {
    e47e:	2800      	cmp	r0, #0
    e480:	dbf1      	blt.n	e466 <handle_at_tcp_recv+0x2e>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    e482:	4811      	ldr	r0, [pc, #68]	; (e4c8 <handle_at_tcp_recv+0x90>)
    e484:	f017 fb52 	bl	25b2c <at_params_valid_count_get>
    e488:	2802      	cmp	r0, #2
    e48a:	d9ea      	bls.n	e462 <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 1, &length);
    e48c:	aa01      	add	r2, sp, #4
    e48e:	2101      	movs	r1, #1
    e490:	480d      	ldr	r0, [pc, #52]	; (e4c8 <handle_at_tcp_recv+0x90>)
    e492:	f017 fb16 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    e496:	2800      	cmp	r0, #0
    e498:	dbe5      	blt.n	e466 <handle_at_tcp_recv+0x2e>
		err = at_params_short_get(&m_param_list, 2, &time);
    e49a:	f10d 0206 	add.w	r2, sp, #6
    e49e:	2102      	movs	r1, #2
    e4a0:	4809      	ldr	r0, [pc, #36]	; (e4c8 <handle_at_tcp_recv+0x90>)
    e4a2:	f017 fb0e 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    e4a6:	2800      	cmp	r0, #0
    e4a8:	dbdd      	blt.n	e466 <handle_at_tcp_recv+0x2e>
		err = do_tcp_receive(length, time);
    e4aa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    e4ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e4b2:	f7ff ff1b 	bl	e2ec <do_tcp_receive>
    e4b6:	e7d6      	b.n	e466 <handle_at_tcp_recv+0x2e>
    e4b8:	20020100 	.word	0x20020100
    e4bc:	000266f4 	.word	0x000266f4
    e4c0:	00026684 	.word	0x00026684
    e4c4:	00027e99 	.word	0x00027e99
    e4c8:	200200e0 	.word	0x200200e0

0000e4cc <handle_at_socket>:
{
    e4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (*(at_param) == '=') {
    e4ce:	5c43      	ldrb	r3, [r0, r1]
	char *at_param = (char *)at_cmd + param_offset;
    e4d0:	1842      	adds	r2, r0, r1
	if (*(at_param) == '=') {
    e4d2:	2b3d      	cmp	r3, #61	; 0x3d
    e4d4:	f040 80a5 	bne.w	e622 <handle_at_socket+0x156>
		if (*(at_param) == '?') {
    e4d8:	7853      	ldrb	r3, [r2, #1]
    e4da:	2b3f      	cmp	r3, #63	; 0x3f
    e4dc:	f000 80b3 	beq.w	e646 <handle_at_socket+0x17a>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e4e0:	4a5a      	ldr	r2, [pc, #360]	; (e64c <handle_at_socket+0x180>)
    e4e2:	2100      	movs	r1, #0
    e4e4:	f017 fa1c 	bl	25920 <at_parser_params_from_str>
		if (err < 0) {
    e4e8:	1e04      	subs	r4, r0, #0
    e4ea:	db69      	blt.n	e5c0 <handle_at_socket+0xf4>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    e4ec:	4857      	ldr	r0, [pc, #348]	; (e64c <handle_at_socket+0x180>)
    e4ee:	f017 fb1d 	bl	25b2c <at_params_valid_count_get>
    e4f2:	2801      	cmp	r0, #1
    e4f4:	f240 80a7 	bls.w	e646 <handle_at_socket+0x17a>
		err = at_params_short_get(&m_param_list, 1, &op);
    e4f8:	aa01      	add	r2, sp, #4
    e4fa:	2101      	movs	r1, #1
    e4fc:	4853      	ldr	r0, [pc, #332]	; (e64c <handle_at_socket+0x180>)
    e4fe:	f017 fae0 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    e502:	1e04      	subs	r4, r0, #0
    e504:	db5c      	blt.n	e5c0 <handle_at_socket+0xf4>
		if (op == 1) {
    e506:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e50a:	2801      	cmp	r0, #1
    e50c:	d170      	bne.n	e5f0 <handle_at_socket+0x124>
			if (at_params_valid_count_get(&m_param_list) < 3) {
    e50e:	484f      	ldr	r0, [pc, #316]	; (e64c <handle_at_socket+0x180>)
    e510:	f017 fb0c 	bl	25b2c <at_params_valid_count_get>
    e514:	2802      	cmp	r0, #2
    e516:	f240 8096 	bls.w	e646 <handle_at_socket+0x17a>
			err = at_params_short_get(&m_param_list, 2, &type);
    e51a:	f10d 0206 	add.w	r2, sp, #6
    e51e:	2102      	movs	r1, #2
    e520:	484a      	ldr	r0, [pc, #296]	; (e64c <handle_at_socket+0x180>)
    e522:	f017 face 	bl	25ac2 <at_params_short_get>
			if (err < 0) {
    e526:	1e04      	subs	r4, r0, #0
    e528:	db4a      	blt.n	e5c0 <handle_at_socket+0xf4>
			if (client.sock > 0) {
    e52a:	4d49      	ldr	r5, [pc, #292]	; (e650 <handle_at_socket+0x184>)
    e52c:	682b      	ldr	r3, [r5, #0]
    e52e:	2b00      	cmp	r3, #0
    e530:	dd10      	ble.n	e554 <handle_at_socket+0x88>
				LOG_WRN("Socket is already opened");
    e532:	2302      	movs	r3, #2
    e534:	f04f 0100 	mov.w	r1, #0
    e538:	4a46      	ldr	r2, [pc, #280]	; (e654 <handle_at_socket+0x188>)
    e53a:	f363 0102 	bfi	r1, r3, #0, #3
    e53e:	4b46      	ldr	r3, [pc, #280]	; (e658 <handle_at_socket+0x18c>)
    e540:	f36f 01c5 	bfc	r1, #3, #3
    e544:	1a9b      	subs	r3, r3, r2
    e546:	08db      	lsrs	r3, r3, #3
    e548:	4844      	ldr	r0, [pc, #272]	; (e65c <handle_at_socket+0x190>)
    e54a:	f363 118f 	bfi	r1, r3, #6, #10
				LOG_WRN("Socket is not opened yet");
    e54e:	f015 fd02 	bl	23f56 <log_0>
    e552:	e035      	b.n	e5c0 <handle_at_socket+0xf4>
				err = do_socket_open(type);
    e554:	f89d 1006 	ldrb.w	r1, [sp, #6]
	if (type == SOCK_STREAM) {
    e558:	2901      	cmp	r1, #1
    e55a:	d134      	bne.n	e5c6 <handle_at_socket+0xfa>
	return socket_ops->socket(family, type, proto);
    e55c:	4b40      	ldr	r3, [pc, #256]	; (e660 <handle_at_socket+0x194>)
    e55e:	2206      	movs	r2, #6
    e560:	681b      	ldr	r3, [r3, #0]
    e562:	4608      	mov	r0, r1
    e564:	681b      	ldr	r3, [r3, #0]
    e566:	4798      	blx	r3
		client.ip_proto = IPPROTO_TCP;
    e568:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    e56a:	6028      	str	r0, [r5, #0]
		client.ip_proto = IPPROTO_UDP;
    e56c:	712b      	strb	r3, [r5, #4]
	if (client.sock < 0) {
    e56e:	682a      	ldr	r2, [r5, #0]
    e570:	2a00      	cmp	r2, #0
    e572:	da33      	bge.n	e5dc <handle_at_socket+0x110>
		LOG_ERR("socket() failed: %d", -errno);
    e574:	2301      	movs	r3, #1
    e576:	f04f 0400 	mov.w	r4, #0
    e57a:	4a36      	ldr	r2, [pc, #216]	; (e654 <handle_at_socket+0x188>)
    e57c:	f363 0402 	bfi	r4, r3, #0, #3
    e580:	4b35      	ldr	r3, [pc, #212]	; (e658 <handle_at_socket+0x18c>)
    e582:	f36f 04c5 	bfc	r4, #3, #3
    e586:	1a9b      	subs	r3, r3, r2
    e588:	08db      	lsrs	r3, r3, #3
    e58a:	f363 148f 	bfi	r4, r3, #6, #10
    e58e:	f013 fc11 	bl	21db4 <z_impl_z_errno>
    e592:	6801      	ldr	r1, [r0, #0]
    e594:	4622      	mov	r2, r4
    e596:	4249      	negs	r1, r1
    e598:	4832      	ldr	r0, [pc, #200]	; (e664 <handle_at_socket+0x198>)
    e59a:	f015 fce9 	bl	23f70 <log_1>
    e59e:	f013 fc09 	bl	21db4 <z_impl_z_errno>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    e5a2:	6802      	ldr	r2, [r0, #0]
    e5a4:	4930      	ldr	r1, [pc, #192]	; (e668 <handle_at_socket+0x19c>)
    e5a6:	4252      	negs	r2, r2
    e5a8:	4830      	ldr	r0, [pc, #192]	; (e66c <handle_at_socket+0x1a0>)
    e5aa:	f003 f917 	bl	117dc <sprintf>
		client.callback(buf);
    e5ae:	68ab      	ldr	r3, [r5, #8]
    e5b0:	482e      	ldr	r0, [pc, #184]	; (e66c <handle_at_socket+0x1a0>)
    e5b2:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    e5b4:	2300      	movs	r3, #0
    e5b6:	712b      	strb	r3, [r5, #4]
    e5b8:	f013 fbfc 	bl	21db4 <z_impl_z_errno>
		ret = -errno;
    e5bc:	6804      	ldr	r4, [r0, #0]
    e5be:	4264      	negs	r4, r4
}
    e5c0:	4620      	mov	r0, r4
    e5c2:	b003      	add	sp, #12
    e5c4:	bd30      	pop	{r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    e5c6:	2902      	cmp	r1, #2
    e5c8:	d1d1      	bne.n	e56e <handle_at_socket+0xa2>
    e5ca:	4b25      	ldr	r3, [pc, #148]	; (e660 <handle_at_socket+0x194>)
    e5cc:	2211      	movs	r2, #17
    e5ce:	681b      	ldr	r3, [r3, #0]
    e5d0:	2001      	movs	r0, #1
    e5d2:	681b      	ldr	r3, [r3, #0]
    e5d4:	4798      	blx	r3
		client.ip_proto = IPPROTO_UDP;
    e5d6:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    e5d8:	6028      	str	r0, [r5, #0]
    e5da:	e7c7      	b.n	e56c <handle_at_socket+0xa0>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    e5dc:	792b      	ldrb	r3, [r5, #4]
    e5de:	4924      	ldr	r1, [pc, #144]	; (e670 <handle_at_socket+0x1a4>)
    e5e0:	4822      	ldr	r0, [pc, #136]	; (e66c <handle_at_socket+0x1a0>)
    e5e2:	f003 f8fb 	bl	117dc <sprintf>
		client.callback(buf);
    e5e6:	68ab      	ldr	r3, [r5, #8]
		client.callback(buf);
    e5e8:	4820      	ldr	r0, [pc, #128]	; (e66c <handle_at_socket+0x1a0>)
    e5ea:	4798      	blx	r3
		err = 0;
    e5ec:	2400      	movs	r4, #0
    e5ee:	e7e7      	b.n	e5c0 <handle_at_socket+0xf4>
		} else if (op == 0) {
    e5f0:	2800      	cmp	r0, #0
    e5f2:	d1e5      	bne.n	e5c0 <handle_at_socket+0xf4>
			if (client.sock < 0) {
    e5f4:	4b16      	ldr	r3, [pc, #88]	; (e650 <handle_at_socket+0x184>)
    e5f6:	681b      	ldr	r3, [r3, #0]
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	da0e      	bge.n	e61a <handle_at_socket+0x14e>
				LOG_WRN("Socket is not opened yet");
    e5fc:	2302      	movs	r3, #2
    e5fe:	f04f 0100 	mov.w	r1, #0
    e602:	4a14      	ldr	r2, [pc, #80]	; (e654 <handle_at_socket+0x188>)
    e604:	f363 0102 	bfi	r1, r3, #0, #3
    e608:	4b13      	ldr	r3, [pc, #76]	; (e658 <handle_at_socket+0x18c>)
    e60a:	f360 01c5 	bfi	r1, r0, #3, #3
    e60e:	1a9b      	subs	r3, r3, r2
    e610:	08db      	lsrs	r3, r3, #3
    e612:	f363 118f 	bfi	r1, r3, #6, #10
    e616:	4817      	ldr	r0, [pc, #92]	; (e674 <handle_at_socket+0x1a8>)
    e618:	e799      	b.n	e54e <handle_at_socket+0x82>
				err = do_socket_close(0);
    e61a:	f7ff fac3 	bl	dba4 <do_socket_close>
    e61e:	4604      	mov	r4, r0
    e620:	e7ce      	b.n	e5c0 <handle_at_socket+0xf4>
	} else if (*(at_param) == '?') {
    e622:	2b3f      	cmp	r3, #63	; 0x3f
    e624:	d10f      	bne.n	e646 <handle_at_socket+0x17a>
		if (client.sock != INVALID_SOCKET) {
    e626:	4c0a      	ldr	r4, [pc, #40]	; (e650 <handle_at_socket+0x184>)
    e628:	6822      	ldr	r2, [r4, #0]
    e62a:	1c53      	adds	r3, r2, #1
    e62c:	d006      	beq.n	e63c <handle_at_socket+0x170>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    e62e:	7923      	ldrb	r3, [r4, #4]
    e630:	490f      	ldr	r1, [pc, #60]	; (e670 <handle_at_socket+0x1a4>)
    e632:	480e      	ldr	r0, [pc, #56]	; (e66c <handle_at_socket+0x1a0>)
    e634:	f003 f8d2 	bl	117dc <sprintf>
		client.callback(buf);
    e638:	68a3      	ldr	r3, [r4, #8]
    e63a:	e7d5      	b.n	e5e8 <handle_at_socket+0x11c>
			sprintf(buf, "#XSOCKET: 0\r\n");
    e63c:	490e      	ldr	r1, [pc, #56]	; (e678 <handle_at_socket+0x1ac>)
    e63e:	480b      	ldr	r0, [pc, #44]	; (e66c <handle_at_socket+0x1a0>)
    e640:	f003 f8cc 	bl	117dc <sprintf>
    e644:	e7f8      	b.n	e638 <handle_at_socket+0x16c>
			return err;
    e646:	f06f 0415 	mvn.w	r4, #21
    e64a:	e7b9      	b.n	e5c0 <handle_at_socket+0xf4>
    e64c:	200200e0 	.word	0x200200e0
    e650:	20020100 	.word	0x20020100
    e654:	00026684 	.word	0x00026684
    e658:	000266f4 	.word	0x000266f4
    e65c:	00027df0 	.word	0x00027df0
    e660:	20020314 	.word	0x20020314
    e664:	00027e09 	.word	0x00027e09
    e668:	00027d59 	.word	0x00027d59
    e66c:	2002733c 	.word	0x2002733c
    e670:	00027e1d 	.word	0x00027e1d
    e674:	00027e30 	.word	0x00027e30
    e678:	00027e49 	.word	0x00027e49

0000e67c <handle_at_udp_recvfrom>:
static int handle_at_udp_recvfrom(const char *at_cmd, size_t param_offset)
{
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    e67c:	2380      	movs	r3, #128	; 0x80
{
    e67e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e682:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	int size = TCPIP_MAX_URL;
    e686:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    e688:	4b75      	ldr	r3, [pc, #468]	; (e860 <handle_at_udp_recvfrom+0x1e4>)
	char *at_param = (char *)at_cmd + param_offset;
    e68a:	1844      	adds	r4, r0, r1
	if (client.sock < 0) {
    e68c:	681d      	ldr	r5, [r3, #0]
    e68e:	4698      	mov	r8, r3
    e690:	2d00      	cmp	r5, #0
    e692:	da16      	bge.n	e6c2 <handle_at_udp_recvfrom+0x46>
		LOG_ERR("Socket not opened yet");
    e694:	2301      	movs	r3, #1
    e696:	f04f 0100 	mov.w	r1, #0
    e69a:	4a72      	ldr	r2, [pc, #456]	; (e864 <handle_at_udp_recvfrom+0x1e8>)
    e69c:	f363 0102 	bfi	r1, r3, #0, #3
    e6a0:	4b71      	ldr	r3, [pc, #452]	; (e868 <handle_at_udp_recvfrom+0x1ec>)
    e6a2:	f36f 01c5 	bfc	r1, #3, #3
    e6a6:	1a9b      	subs	r3, r3, r2
    e6a8:	08db      	lsrs	r3, r3, #3
    e6aa:	4870      	ldr	r0, [pc, #448]	; (e86c <handle_at_udp_recvfrom+0x1f0>)
    e6ac:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    e6b0:	f015 fc51 	bl	23f56 <log_0>
		return err;
    e6b4:	f06f 0415 	mvn.w	r4, #21
		};
		err = do_udp_recvfrom(url, port, length, time);
	}

	return err;
}
    e6b8:	4620      	mov	r0, r4
    e6ba:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    e6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    e6c2:	791b      	ldrb	r3, [r3, #4]
    e6c4:	2b11      	cmp	r3, #17
    e6c6:	d00e      	beq.n	e6e6 <handle_at_udp_recvfrom+0x6a>
		LOG_ERR("Invalid socket");
    e6c8:	2301      	movs	r3, #1
    e6ca:	f04f 0100 	mov.w	r1, #0
    e6ce:	4a65      	ldr	r2, [pc, #404]	; (e864 <handle_at_udp_recvfrom+0x1e8>)
    e6d0:	f363 0102 	bfi	r1, r3, #0, #3
    e6d4:	4b64      	ldr	r3, [pc, #400]	; (e868 <handle_at_udp_recvfrom+0x1ec>)
    e6d6:	f36f 01c5 	bfc	r1, #3, #3
    e6da:	1a9b      	subs	r3, r3, r2
    e6dc:	08db      	lsrs	r3, r3, #3
    e6de:	f363 118f 	bfi	r1, r3, #6, #10
    e6e2:	4863      	ldr	r0, [pc, #396]	; (e870 <handle_at_udp_recvfrom+0x1f4>)
    e6e4:	e7e4      	b.n	e6b0 <handle_at_udp_recvfrom+0x34>
	if (*(at_param) == '=') {
    e6e6:	5c43      	ldrb	r3, [r0, r1]
    e6e8:	2b3d      	cmp	r3, #61	; 0x3d
    e6ea:	d1e3      	bne.n	e6b4 <handle_at_udp_recvfrom+0x38>
		if (*(at_param) == '?') {
    e6ec:	7863      	ldrb	r3, [r4, #1]
    e6ee:	2b3f      	cmp	r3, #63	; 0x3f
    e6f0:	d0e0      	beq.n	e6b4 <handle_at_udp_recvfrom+0x38>
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    e6f2:	4a60      	ldr	r2, [pc, #384]	; (e874 <handle_at_udp_recvfrom+0x1f8>)
    e6f4:	2100      	movs	r1, #0
    e6f6:	f017 f913 	bl	25920 <at_parser_params_from_str>
		if (err < 0) {
    e6fa:	1e04      	subs	r4, r0, #0
    e6fc:	dbdc      	blt.n	e6b8 <handle_at_udp_recvfrom+0x3c>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    e6fe:	485d      	ldr	r0, [pc, #372]	; (e874 <handle_at_udp_recvfrom+0x1f8>)
    e700:	f017 fa14 	bl	25b2c <at_params_valid_count_get>
    e704:	2804      	cmp	r0, #4
    e706:	d9d5      	bls.n	e6b4 <handle_at_udp_recvfrom+0x38>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    e708:	ad08      	add	r5, sp, #32
    e70a:	ab04      	add	r3, sp, #16
    e70c:	462a      	mov	r2, r5
    e70e:	2101      	movs	r1, #1
    e710:	4858      	ldr	r0, [pc, #352]	; (e874 <handle_at_udp_recvfrom+0x1f8>)
    e712:	f017 f9e8 	bl	25ae6 <at_params_string_get>
		if (err < 0) {
    e716:	1e04      	subs	r4, r0, #0
    e718:	dbce      	blt.n	e6b8 <handle_at_udp_recvfrom+0x3c>
		url[size] = '\0';
    e71a:	2200      	movs	r2, #0
    e71c:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    e71e:	2102      	movs	r1, #2
		url[size] = '\0';
    e720:	54ea      	strb	r2, [r5, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    e722:	4854      	ldr	r0, [pc, #336]	; (e874 <handle_at_udp_recvfrom+0x1f8>)
    e724:	f10d 020a 	add.w	r2, sp, #10
    e728:	f017 f9cb 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    e72c:	1e04      	subs	r4, r0, #0
    e72e:	dbc3      	blt.n	e6b8 <handle_at_udp_recvfrom+0x3c>
		err = at_params_short_get(&m_param_list, 3, &length);
    e730:	aa03      	add	r2, sp, #12
    e732:	2103      	movs	r1, #3
    e734:	484f      	ldr	r0, [pc, #316]	; (e874 <handle_at_udp_recvfrom+0x1f8>)
    e736:	f017 f9c4 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    e73a:	1e04      	subs	r4, r0, #0
    e73c:	dbbc      	blt.n	e6b8 <handle_at_udp_recvfrom+0x3c>
		err = at_params_short_get(&m_param_list, 4, &time);
    e73e:	f10d 020e 	add.w	r2, sp, #14
    e742:	2104      	movs	r1, #4
    e744:	484b      	ldr	r0, [pc, #300]	; (e874 <handle_at_udp_recvfrom+0x1f8>)
    e746:	f017 f9bc 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    e74a:	1e04      	subs	r4, r0, #0
    e74c:	dbb4      	blt.n	e6b8 <handle_at_udp_recvfrom+0x3c>
	int sockaddr_len = sizeof(struct sockaddr);
    e74e:	2218      	movs	r2, #24
	struct timeval tmo = {
    e750:	f04f 0900 	mov.w	r9, #0
		err = do_udp_recvfrom(url, port, length, time);
    e754:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e758:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	int sockaddr_len = sizeof(struct sockaddr);
    e75c:	af05      	add	r7, sp, #20
	ret = do_udp_init(url, port);
    e75e:	4628      	mov	r0, r5
		err = do_udp_recvfrom(url, port, length, time);
    e760:	f8bd a00c 	ldrh.w	sl, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    e764:	603a      	str	r2, [r7, #0]
	struct timeval tmo = {
    e766:	e9cd 3906 	strd	r3, r9, [sp, #24]
	ret = do_udp_init(url, port);
    e76a:	f7ff fc01 	bl	df70 <do_udp_init>
	if (ret < 0) {
    e76e:	1e04      	subs	r4, r0, #0
    e770:	dba2      	blt.n	e6b8 <handle_at_udp_recvfrom+0x3c>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    e772:	2208      	movs	r2, #8
    e774:	4d40      	ldr	r5, [pc, #256]	; (e878 <handle_at_udp_recvfrom+0x1fc>)
    e776:	2101      	movs	r1, #1
    e778:	682b      	ldr	r3, [r5, #0]
    e77a:	9200      	str	r2, [sp, #0]
    e77c:	69dc      	ldr	r4, [r3, #28]
    e77e:	2214      	movs	r2, #20
    e780:	ab06      	add	r3, sp, #24
    e782:	f8d8 0000 	ldr.w	r0, [r8]
    e786:	47a0      	blx	r4
	if (ret < 0) {
    e788:	1e04      	subs	r4, r0, #0
    e78a:	da1b      	bge.n	e7c4 <handle_at_udp_recvfrom+0x148>
		LOG_ERR("setsockopt() error: %d", -errno);
    e78c:	2301      	movs	r3, #1
    e78e:	f04f 0500 	mov.w	r5, #0
    e792:	4a34      	ldr	r2, [pc, #208]	; (e864 <handle_at_udp_recvfrom+0x1e8>)
    e794:	f363 0502 	bfi	r5, r3, #0, #3
    e798:	4b33      	ldr	r3, [pc, #204]	; (e868 <handle_at_udp_recvfrom+0x1ec>)
    e79a:	f369 05c5 	bfi	r5, r9, #3, #3
    e79e:	1a9b      	subs	r3, r3, r2
    e7a0:	08db      	lsrs	r3, r3, #3
    e7a2:	f363 158f 	bfi	r5, r3, #6, #10
    e7a6:	f013 fb05 	bl	21db4 <z_impl_z_errno>
    e7aa:	6801      	ldr	r1, [r0, #0]
    e7ac:	462a      	mov	r2, r5
    e7ae:	4249      	negs	r1, r1
    e7b0:	4832      	ldr	r0, [pc, #200]	; (e87c <handle_at_udp_recvfrom+0x200>)
    e7b2:	f015 fbdd 	bl	23f70 <log_1>
    e7b6:	f013 fafd 	bl	21db4 <z_impl_z_errno>
		do_socket_close(-errno);
    e7ba:	6800      	ldr	r0, [r0, #0]
    e7bc:	4240      	negs	r0, r0
    e7be:	f7ff f9f1 	bl	dba4 <do_socket_close>
    e7c2:	e779      	b.n	e6b8 <handle_at_udp_recvfrom+0x3c>
    e7c4:	682b      	ldr	r3, [r5, #0]
	if (length > NET_IPV4_MTU) {
    e7c6:	f5ba 7f10 	cmp.w	sl, #576	; 0x240
    e7ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    e7cc:	4b2c      	ldr	r3, [pc, #176]	; (e880 <handle_at_udp_recvfrom+0x204>)
    e7ce:	ae28      	add	r6, sp, #160	; 0xa0
    e7d0:	f8d8 0000 	ldr.w	r0, [r8]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    e7d4:	bf88      	it	hi
    e7d6:	f44f 7210 	movhi.w	r2, #576	; 0x240
    e7da:	9300      	str	r3, [sp, #0]
    e7dc:	bf98      	it	ls
    e7de:	fa0f f28a 	sxthls.w	r2, sl
    e7e2:	9701      	str	r7, [sp, #4]
    e7e4:	464b      	mov	r3, r9
    e7e6:	4631      	mov	r1, r6
    e7e8:	47a0      	blx	r4
	if (ret < 0) {
    e7ea:	2800      	cmp	r0, #0
    e7ec:	4605      	mov	r5, r0
    e7ee:	da1f      	bge.n	e830 <handle_at_udp_recvfrom+0x1b4>
		LOG_WRN("recvfrom() error: %d", -errno);
    e7f0:	2302      	movs	r3, #2
    e7f2:	f04f 0400 	mov.w	r4, #0
    e7f6:	4a1b      	ldr	r2, [pc, #108]	; (e864 <handle_at_udp_recvfrom+0x1e8>)
    e7f8:	f363 0402 	bfi	r4, r3, #0, #3
    e7fc:	4b1a      	ldr	r3, [pc, #104]	; (e868 <handle_at_udp_recvfrom+0x1ec>)
    e7fe:	f36f 04c5 	bfc	r4, #3, #3
    e802:	1a9b      	subs	r3, r3, r2
    e804:	08db      	lsrs	r3, r3, #3
    e806:	f363 148f 	bfi	r4, r3, #6, #10
    e80a:	f013 fad3 	bl	21db4 <z_impl_z_errno>
    e80e:	6801      	ldr	r1, [r0, #0]
    e810:	4622      	mov	r2, r4
    e812:	4249      	negs	r1, r1
    e814:	481b      	ldr	r0, [pc, #108]	; (e884 <handle_at_udp_recvfrom+0x208>)
    e816:	f015 fbab 	bl	23f70 <log_1>
    e81a:	f013 facb 	bl	21db4 <z_impl_z_errno>
		do_socket_close(-errno);
    e81e:	6800      	ldr	r0, [r0, #0]
    e820:	4240      	negs	r0, r0
    e822:	f7ff f9bf 	bl	dba4 <do_socket_close>
    e826:	f013 fac5 	bl	21db4 <z_impl_z_errno>
		ret = -errno;
    e82a:	6804      	ldr	r4, [r0, #0]
    e82c:	4264      	negs	r4, r4
    e82e:	e743      	b.n	e6b8 <handle_at_udp_recvfrom+0x3c>
		data[ret] = '\0';
    e830:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    e832:	f8d8 3008 	ldr.w	r3, [r8, #8]
		data[ret] = '\0';
    e836:	5434      	strb	r4, [r6, r0]
		client.callback("#XUDPRECV: ");
    e838:	4813      	ldr	r0, [pc, #76]	; (e888 <handle_at_udp_recvfrom+0x20c>)
    e83a:	4798      	blx	r3
		client.callback(data);
    e83c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e840:	4630      	mov	r0, r6
    e842:	4798      	blx	r3
		client.callback("\r\n");
    e844:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e848:	4810      	ldr	r0, [pc, #64]	; (e88c <handle_at_udp_recvfrom+0x210>)
    e84a:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    e84c:	462a      	mov	r2, r5
    e84e:	4910      	ldr	r1, [pc, #64]	; (e890 <handle_at_udp_recvfrom+0x214>)
    e850:	4810      	ldr	r0, [pc, #64]	; (e894 <handle_at_udp_recvfrom+0x218>)
    e852:	f002 ffc3 	bl	117dc <sprintf>
		client.callback(buf);
    e856:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e85a:	480e      	ldr	r0, [pc, #56]	; (e894 <handle_at_udp_recvfrom+0x218>)
    e85c:	4798      	blx	r3
    e85e:	e72b      	b.n	e6b8 <handle_at_udp_recvfrom+0x3c>
    e860:	20020100 	.word	0x20020100
    e864:	00026684 	.word	0x00026684
    e868:	000266f4 	.word	0x000266f4
    e86c:	00027f02 	.word	0x00027f02
    e870:	00027f18 	.word	0x00027f18
    e874:	200200e0 	.word	0x200200e0
    e878:	20020314 	.word	0x20020314
    e87c:	00027d68 	.word	0x00027d68
    e880:	20025e00 	.word	0x20025e00
    e884:	00027ed1 	.word	0x00027ed1
    e888:	00027ee6 	.word	0x00027ee6
    e88c:	00027e96 	.word	0x00027e96
    e890:	00027ef2 	.word	0x00027ef2
    e894:	2002733c 	.word	0x2002733c

0000e898 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const u8_t *param, u8_t length)
{
    e898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e89c:	4e14      	ldr	r6, [pc, #80]	; (e8f0 <slm_at_tcpip_parse+0x58>)
    e89e:	4607      	mov	r7, r0
	int ret = -ENOTSUP;

	ARG_UNUSED(length);

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    e8a0:	2500      	movs	r5, #0
    e8a2:	4634      	mov	r4, r6
		u8_t cmd_len = strlen(m_at_list[i].string_upper);
    e8a4:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e8a8:	4648      	mov	r0, r9
    e8aa:	f016 f865 	bl	24978 <strlen>
    e8ae:	fa5f f880 	uxtb.w	r8, r0

		if (strncmp(param, m_at_list[i].string_upper,
    e8b2:	4642      	mov	r2, r8
    e8b4:	4649      	mov	r1, r9
    e8b6:	4638      	mov	r0, r7
    e8b8:	f016 f873 	bl	249a2 <strncmp>
    e8bc:	b938      	cbnz	r0, e8ce <slm_at_tcpip_parse+0x36>
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
			break;
		} else if (strncmp(param, m_at_list[i].string_lower,
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
    e8be:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    e8c2:	68e3      	ldr	r3, [r4, #12]
    e8c4:	4641      	mov	r1, r8
    e8c6:	4638      	mov	r0, r7
			break;
		}
	}

	return ret;
}
    e8c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			ret = m_at_list[i].handler(param, cmd_len);
    e8cc:	4718      	bx	r3
		} else if (strncmp(param, m_at_list[i].string_lower,
    e8ce:	4642      	mov	r2, r8
    e8d0:	68b1      	ldr	r1, [r6, #8]
    e8d2:	4638      	mov	r0, r7
    e8d4:	f016 f865 	bl	249a2 <strncmp>
    e8d8:	2800      	cmp	r0, #0
    e8da:	d0f0      	beq.n	e8be <slm_at_tcpip_parse+0x26>
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    e8dc:	3501      	adds	r5, #1
    e8de:	2d07      	cmp	r5, #7
    e8e0:	f106 0610 	add.w	r6, r6, #16
    e8e4:	d1de      	bne.n	e8a4 <slm_at_tcpip_parse+0xc>
}
    e8e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e8ee:	bf00      	nop
    e8f0:	00026734 	.word	0x00026734

0000e8f4 <slm_at_tcpip_init>:
}

/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    e8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8f8:	4b51      	ldr	r3, [pc, #324]	; (ea40 <slm_at_tcpip_init+0x14c>)
    e8fa:	4c52      	ldr	r4, [pc, #328]	; (ea44 <slm_at_tcpip_init+0x150>)
    e8fc:	b085      	sub	sp, #20
    e8fe:	1ae4      	subs	r4, r4, r3
    e900:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e904:	b980      	cbnz	r0, e928 <slm_at_tcpip_init+0x34>
		LOG_ERR("No callback");
    e906:	2301      	movs	r3, #1
    e908:	f04f 0100 	mov.w	r1, #0
    e90c:	f363 0102 	bfi	r1, r3, #0, #3
    e910:	f360 01c5 	bfi	r1, r0, #3, #3
    e914:	f364 118f 	bfi	r1, r4, #6, #10
    e918:	484b      	ldr	r0, [pc, #300]	; (ea48 <slm_at_tcpip_init+0x154>)
    e91a:	f015 fb1c 	bl	23f56 <log_0>
		return -EINVAL;
    e91e:	f06f 0015 	mvn.w	r0, #21
	client.ip_proto = IPPROTO_IP;
	client.callback = callback;
	//init nb_iot module & udp socket
	init_nb_iot_parameters();
	return 0;
}
    e922:	b005      	add	sp, #20
    e924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.connected = false;
    e928:	2500      	movs	r5, #0
	client.sock = INVALID_SOCKET;
    e92a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e92e:	4b47      	ldr	r3, [pc, #284]	; (ea4c <slm_at_tcpip_init+0x158>)
	LOG_INF("Initializing NB-IoT Parameters");
    e930:	f04f 0100 	mov.w	r1, #0
	client.sock = INVALID_SOCKET;
    e934:	601a      	str	r2, [r3, #0]
	client.callback = callback;
    e936:	6098      	str	r0, [r3, #8]
	client.connected = false;
    e938:	715d      	strb	r5, [r3, #5]
	client.ip_proto = IPPROTO_IP;
    e93a:	711d      	strb	r5, [r3, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    e93c:	2303      	movs	r3, #3
    e93e:	f363 0102 	bfi	r1, r3, #0, #3
	return socket_ops->socket(family, type, proto);
    e942:	4f43      	ldr	r7, [pc, #268]	; (ea50 <slm_at_tcpip_init+0x15c>)
    e944:	f365 01c5 	bfi	r1, r5, #3, #3
    e948:	f364 118f 	bfi	r1, r4, #6, #10
    e94c:	4841      	ldr	r0, [pc, #260]	; (ea54 <slm_at_tcpip_init+0x160>)
    e94e:	f015 fb02 	bl	23f56 <log_0>
    e952:	683b      	ldr	r3, [r7, #0]
    e954:	f240 2201 	movw	r2, #513	; 0x201
    e958:	681b      	ldr	r3, [r3, #0]
    e95a:	4629      	mov	r1, r5
    e95c:	2066      	movs	r0, #102	; 0x66
    e95e:	4798      	blx	r3
	if (at_sock < 0) {
    e960:	1e06      	subs	r6, r0, #0
    e962:	9701      	str	r7, [sp, #4]
    e964:	db57      	blt.n	ea16 <slm_at_tcpip_init+0x122>
    e966:	f8df b108 	ldr.w	fp, [pc, #264]	; ea70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10>
		LOG_INF("%s",nb_at_commands[i]);
    e96a:	f04f 0a03 	mov.w	sl, #3
    e96e:	f36a 0902 	bfi	r9, sl, #0, #3
    e972:	f36f 09c5 	bfc	r9, #3, #3
    e976:	eb0b 0805 	add.w	r8, fp, r5
    e97a:	f364 198f 	bfi	r9, r4, #6, #10
    e97e:	464a      	mov	r2, r9
    e980:	4641      	mov	r1, r8
    e982:	4835      	ldr	r0, [pc, #212]	; (ea58 <slm_at_tcpip_init+0x164>)
    e984:	f015 faf4 	bl	23f70 <log_1>
		bytes_sent = send(at_sock, nb_at_commands[i],
    e988:	4640      	mov	r0, r8
    e98a:	f015 fff5 	bl	24978 <strlen>
	return socket_ops->send(sock, buf, len, flags);
    e98e:	9b01      	ldr	r3, [sp, #4]
    e990:	4602      	mov	r2, r0
    e992:	681b      	ldr	r3, [r3, #0]
    e994:	4641      	mov	r1, r8
    e996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e998:	4630      	mov	r0, r6
    e99a:	461f      	mov	r7, r3
    e99c:	2300      	movs	r3, #0
    e99e:	47b8      	blx	r7
		if (bytes_sent < 0) {
    e9a0:	2800      	cmp	r0, #0
    e9a2:	da0b      	bge.n	e9bc <slm_at_tcpip_init+0xc8>
			LOG_INF("NO BYTES SENT");
    e9a4:	f04f 0100 	mov.w	r1, #0
    e9a8:	f36a 0102 	bfi	r1, sl, #0, #3
    e9ac:	f36f 01c5 	bfc	r1, #3, #3
    e9b0:	482a      	ldr	r0, [pc, #168]	; (ea5c <slm_at_tcpip_init+0x168>)
    e9b2:	f364 118f 	bfi	r1, r4, #6, #10
	LOG_INF("NB-IoT Parameters Initialized");
    e9b6:	f015 face 	bl	23f56 <log_0>
    e9ba:	e029      	b.n	ea10 <slm_at_tcpip_init+0x11c>
	return socket_ops->recv(sock, buf, max_len, flags);
    e9bc:	9b01      	ldr	r3, [sp, #4]
    e9be:	2202      	movs	r2, #2
    e9c0:	681b      	ldr	r3, [r3, #0]
    e9c2:	a903      	add	r1, sp, #12
    e9c4:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
    e9c8:	4630      	mov	r0, r6
    e9ca:	2300      	movs	r3, #0
    e9cc:	47c0      	blx	r8
		} while (bytes_received == 0);
    e9ce:	2800      	cmp	r0, #0
    e9d0:	d0f4      	beq.n	e9bc <slm_at_tcpip_init+0xc8>
		if (memcmp(buf, "OK", 2) != 0) {
    e9d2:	2202      	movs	r2, #2
    e9d4:	4922      	ldr	r1, [pc, #136]	; (ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>)
    e9d6:	a803      	add	r0, sp, #12
    e9d8:	f015 fff2 	bl	249c0 <memcmp>
    e9dc:	4680      	mov	r8, r0
    e9de:	b1e0      	cbz	r0, ea1a <slm_at_tcpip_init+0x126>
			LOG_INF("NOK");
    e9e0:	2503      	movs	r5, #3
    e9e2:	f04f 0100 	mov.w	r1, #0
    e9e6:	f365 0102 	bfi	r1, r5, #0, #3
    e9ea:	f36f 01c5 	bfc	r1, #3, #3
    e9ee:	f364 118f 	bfi	r1, r4, #6, #10
    e9f2:	481c      	ldr	r0, [pc, #112]	; (ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>)
    e9f4:	f015 faaf 	bl	23f56 <log_0>
			LOG_INF("buffer: %s", buf);
    e9f8:	f04f 0200 	mov.w	r2, #0
    e9fc:	f365 0202 	bfi	r2, r5, #0, #3
    ea00:	f36f 02c5 	bfc	r2, #3, #3
    ea04:	f364 128f 	bfi	r2, r4, #6, #10
    ea08:	a903      	add	r1, sp, #12
    ea0a:	4817      	ldr	r0, [pc, #92]	; (ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>)
    ea0c:	f015 fab0 	bl	23f70 <log_1>
	close(at_sock);
    ea10:	4630      	mov	r0, r6
    ea12:	f7ff f8c1 	bl	db98 <close>
	return 0;
    ea16:	2000      	movs	r0, #0
    ea18:	e783      	b.n	e922 <slm_at_tcpip_init+0x2e>
    ea1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ea1e:	3522      	adds	r5, #34	; 0x22
    ea20:	f014 f86e 	bl	22b00 <z_impl_k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_at_commands); i++) {
    ea24:	2d88      	cmp	r5, #136	; 0x88
    ea26:	d1a0      	bne.n	e96a <slm_at_tcpip_init+0x76>
	LOG_INF("NB-IoT Parameters Initialized");
    ea28:	f04f 0100 	mov.w	r1, #0
    ea2c:	2303      	movs	r3, #3
    ea2e:	f363 0102 	bfi	r1, r3, #0, #3
    ea32:	f368 01c5 	bfi	r1, r8, #3, #3
    ea36:	f364 118f 	bfi	r1, r4, #6, #10
    ea3a:	480c      	ldr	r0, [pc, #48]	; (ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>)
    ea3c:	e7bb      	b.n	e9b6 <slm_at_tcpip_init+0xc2>
    ea3e:	bf00      	nop
    ea40:	00026684 	.word	0x00026684
    ea44:	000266f4 	.word	0x000266f4
    ea48:	0002800c 	.word	0x0002800c
    ea4c:	20020100 	.word	0x20020100
    ea50:	20020314 	.word	0x20020314
    ea54:	00028018 	.word	0x00028018
    ea58:	00028051 	.word	0x00028051
    ea5c:	00028037 	.word	0x00028037
    ea60:	00028046 	.word	0x00028046
    ea64:	00028045 	.word	0x00028045
    ea68:	00028049 	.word	0x00028049
    ea6c:	00028054 	.word	0x00028054
    ea70:	00027f4d 	.word	0x00027f4d

0000ea74 <close>:
	return socket_ops->close(sock);
    ea74:	4b01      	ldr	r3, [pc, #4]	; (ea7c <close+0x8>)
    ea76:	681b      	ldr	r3, [r3, #0]
    ea78:	685b      	ldr	r3, [r3, #4]
    ea7a:	4718      	bx	r3
    ea7c:	20020314 	.word	0x20020314

0000ea80 <do_gps_start>:
		}
	}
}

static int do_gps_start(void)
{
    ea80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_DBG("do_gps_start");
	int ret = -EINVAL;

	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    ea84:	2601      	movs	r6, #1
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    ea86:	2700      	movs	r7, #0
	nrf_gnss_delete_mask_t  delete_mask  = 0;
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    ea88:	4d74      	ldr	r5, [pc, #464]	; (ec5c <do_gps_start+0x1dc>)
{
    ea8a:	b08a      	sub	sp, #40	; 0x28
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    ea8c:	88ab      	ldrh	r3, [r5, #4]
	
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    ea8e:	f44f 7201 	mov.w	r2, #516	; 0x204
    ea92:	2102      	movs	r1, #2
    ea94:	4630      	mov	r0, r6
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    ea96:	f8ad 701e 	strh.w	r7, [sp, #30]
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    ea9a:	f8ad 6020 	strh.w	r6, [sp, #32]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    ea9e:	9709      	str	r7, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)client.mask;
    eaa0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    eaa4:	f005 fcd4 	bl	14450 <nrf_socket>
	if (client.sock < 0) {
    eaa8:	42b8      	cmp	r0, r7
	client.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    eaaa:	6028      	str	r0, [r5, #0]
	if (client.sock < 0) {
    eaac:	da35      	bge.n	eb1a <do_gps_start+0x9a>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    eaae:	f04f 0400 	mov.w	r4, #0
    eab2:	4a6b      	ldr	r2, [pc, #428]	; (ec60 <do_gps_start+0x1e0>)
    eab4:	4b6b      	ldr	r3, [pc, #428]	; (ec64 <do_gps_start+0x1e4>)
    eab6:	f366 0402 	bfi	r4, r6, #0, #3
    eaba:	1a9b      	subs	r3, r3, r2
    eabc:	f367 04c5 	bfi	r4, r7, #3, #3
    eac0:	08db      	lsrs	r3, r3, #3
    eac2:	f363 148f 	bfi	r4, r3, #6, #10
    eac6:	f013 f975 	bl	21db4 <z_impl_z_errno>
    eaca:	6801      	ldr	r1, [r0, #0]
    eacc:	4622      	mov	r2, r4
    eace:	4249      	negs	r1, r1
    ead0:	4865      	ldr	r0, [pc, #404]	; (ec68 <do_gps_start+0x1e8>)
    ead2:	f015 fa4d 	bl	23f70 <log_1>
	int ret = -EINVAL;
    ead6:	f06f 0415 	mvn.w	r4, #21
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
	client.callback(buf);
	return 0;

error:
	LOG_ERR("GPS start failed: %d", ret);
    eada:	2301      	movs	r3, #1
    eadc:	f04f 0200 	mov.w	r2, #0
    eae0:	495f      	ldr	r1, [pc, #380]	; (ec60 <do_gps_start+0x1e0>)
    eae2:	f363 0202 	bfi	r2, r3, #0, #3
    eae6:	4b5f      	ldr	r3, [pc, #380]	; (ec64 <do_gps_start+0x1e4>)
    eae8:	f36f 02c5 	bfc	r2, #3, #3
    eaec:	1a5b      	subs	r3, r3, r1
    eaee:	08db      	lsrs	r3, r3, #3
    eaf0:	f363 128f 	bfi	r2, r3, #6, #10
    eaf4:	4621      	mov	r1, r4
    eaf6:	485d      	ldr	r0, [pc, #372]	; (ec6c <do_gps_start+0x1ec>)
    eaf8:	f015 fa3a 	bl	23f70 <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    eafc:	4622      	mov	r2, r4
    eafe:	495c      	ldr	r1, [pc, #368]	; (ec70 <do_gps_start+0x1f0>)
    eb00:	485c      	ldr	r0, [pc, #368]	; (ec74 <do_gps_start+0x1f4>)
    eb02:	f002 fe6b 	bl	117dc <sprintf>
	client.callback(buf);
    eb06:	68ab      	ldr	r3, [r5, #8]
    eb08:	485a      	ldr	r0, [pc, #360]	; (ec74 <do_gps_start+0x1f4>)
    eb0a:	4798      	blx	r3
	client.running = false;
    eb0c:	2300      	movs	r3, #0
    eb0e:	71ab      	strb	r3, [r5, #6]
    eb10:	f013 f950 	bl	21db4 <z_impl_z_errno>

	return -errno;
    eb14:	6804      	ldr	r4, [r0, #0]
    eb16:	4264      	negs	r4, r4
    eb18:	e08b      	b.n	ec32 <do_gps_start+0x1b2>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    eb1a:	f04f 0802 	mov.w	r8, #2
    eb1e:	f10d 031e 	add.w	r3, sp, #30
    eb22:	f8cd 8000 	str.w	r8, [sp]
    eb26:	4642      	mov	r2, r8
    eb28:	f44f 7101 	mov.w	r1, #516	; 0x204
    eb2c:	f005 fd66 	bl	145fc <nrf_setsockopt>
	if (ret != 0) {
    eb30:	4604      	mov	r4, r0
    eb32:	b1a0      	cbz	r0, eb5e <do_gps_start+0xde>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    eb34:	f04f 0800 	mov.w	r8, #0
    eb38:	4a49      	ldr	r2, [pc, #292]	; (ec60 <do_gps_start+0x1e0>)
    eb3a:	4b4a      	ldr	r3, [pc, #296]	; (ec64 <do_gps_start+0x1e4>)
    eb3c:	f366 0802 	bfi	r8, r6, #0, #3
    eb40:	1a9b      	subs	r3, r3, r2
    eb42:	f367 08c5 	bfi	r8, r7, #3, #3
    eb46:	08db      	lsrs	r3, r3, #3
    eb48:	f363 188f 	bfi	r8, r3, #6, #10
    eb4c:	f013 f932 	bl	21db4 <z_impl_z_errno>
    eb50:	4642      	mov	r2, r8
    eb52:	6801      	ldr	r1, [r0, #0]
    eb54:	4848      	ldr	r0, [pc, #288]	; (ec78 <do_gps_start+0x1f8>)
    eb56:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    eb58:	f015 fa0a 	bl	23f70 <log_1>
    eb5c:	e7bd      	b.n	eada <do_gps_start+0x5a>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS,
    eb5e:	f8cd 8000 	str.w	r8, [sp]
    eb62:	ab08      	add	r3, sp, #32
    eb64:	4632      	mov	r2, r6
    eb66:	f44f 7101 	mov.w	r1, #516	; 0x204
    eb6a:	6828      	ldr	r0, [r5, #0]
    eb6c:	f005 fd46 	bl	145fc <nrf_setsockopt>
	if (ret != 0) {
    eb70:	4604      	mov	r4, r0
    eb72:	b190      	cbz	r0, eb9a <do_gps_start+0x11a>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    eb74:	f04f 0800 	mov.w	r8, #0
    eb78:	4a39      	ldr	r2, [pc, #228]	; (ec60 <do_gps_start+0x1e0>)
    eb7a:	4b3a      	ldr	r3, [pc, #232]	; (ec64 <do_gps_start+0x1e4>)
    eb7c:	f366 0802 	bfi	r8, r6, #0, #3
    eb80:	1a9b      	subs	r3, r3, r2
    eb82:	f367 08c5 	bfi	r8, r7, #3, #3
    eb86:	08db      	lsrs	r3, r3, #3
    eb88:	f363 188f 	bfi	r8, r3, #6, #10
    eb8c:	f013 f912 	bl	21db4 <z_impl_z_errno>
    eb90:	6801      	ldr	r1, [r0, #0]
    eb92:	4642      	mov	r2, r8
    eb94:	4249      	negs	r1, r1
    eb96:	4839      	ldr	r0, [pc, #228]	; (ec7c <do_gps_start+0x1fc>)
    eb98:	e7de      	b.n	eb58 <do_gps_start+0xd8>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    eb9a:	f8cd 8000 	str.w	r8, [sp]
    eb9e:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    eba2:	2204      	movs	r2, #4
    eba4:	f44f 7101 	mov.w	r1, #516	; 0x204
    eba8:	6828      	ldr	r0, [r5, #0]
    ebaa:	f005 fd27 	bl	145fc <nrf_setsockopt>
	if (ret != 0) {
    ebae:	4604      	mov	r4, r0
    ebb0:	b190      	cbz	r0, ebd8 <do_gps_start+0x158>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    ebb2:	f04f 0800 	mov.w	r8, #0
    ebb6:	4a2a      	ldr	r2, [pc, #168]	; (ec60 <do_gps_start+0x1e0>)
    ebb8:	4b2a      	ldr	r3, [pc, #168]	; (ec64 <do_gps_start+0x1e4>)
    ebba:	f366 0802 	bfi	r8, r6, #0, #3
    ebbe:	1a9b      	subs	r3, r3, r2
    ebc0:	f367 08c5 	bfi	r8, r7, #3, #3
    ebc4:	08db      	lsrs	r3, r3, #3
    ebc6:	f363 188f 	bfi	r8, r3, #6, #10
    ebca:	f013 f8f3 	bl	21db4 <z_impl_z_errno>
    ebce:	6801      	ldr	r1, [r0, #0]
    ebd0:	4642      	mov	r2, r8
    ebd2:	4249      	negs	r1, r1
    ebd4:	482a      	ldr	r0, [pc, #168]	; (ec80 <do_gps_start+0x200>)
    ebd6:	e7bf      	b.n	eb58 <do_gps_start+0xd8>
	ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    ebd8:	2304      	movs	r3, #4
    ebda:	2207      	movs	r2, #7
    ebdc:	9300      	str	r3, [sp, #0]
    ebde:	f44f 7101 	mov.w	r1, #516	; 0x204
    ebe2:	ab09      	add	r3, sp, #36	; 0x24
    ebe4:	6828      	ldr	r0, [r5, #0]
    ebe6:	f005 fd09 	bl	145fc <nrf_setsockopt>
	if (ret != 0) {
    ebea:	4604      	mov	r4, r0
    ebec:	b190      	cbz	r0, ec14 <do_gps_start+0x194>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    ebee:	f04f 0800 	mov.w	r8, #0
    ebf2:	4a1b      	ldr	r2, [pc, #108]	; (ec60 <do_gps_start+0x1e0>)
    ebf4:	4b1b      	ldr	r3, [pc, #108]	; (ec64 <do_gps_start+0x1e4>)
    ebf6:	f366 0802 	bfi	r8, r6, #0, #3
    ebfa:	1a9b      	subs	r3, r3, r2
    ebfc:	f367 08c5 	bfi	r8, r7, #3, #3
    ec00:	08db      	lsrs	r3, r3, #3
    ec02:	f363 188f 	bfi	r8, r3, #6, #10
    ec06:	f013 f8d5 	bl	21db4 <z_impl_z_errno>
    ec0a:	6801      	ldr	r1, [r0, #0]
    ec0c:	4642      	mov	r2, r8
    ec0e:	4249      	negs	r1, r1
    ec10:	481c      	ldr	r0, [pc, #112]	; (ec84 <do_gps_start+0x204>)
    ec12:	e7a1      	b.n	eb58 <do_gps_start+0xd8>
	if (gps_thread_id != NULL) {
    ec14:	4e1c      	ldr	r6, [pc, #112]	; (ec88 <do_gps_start+0x208>)
    ec16:	6830      	ldr	r0, [r6, #0]
    ec18:	b178      	cbz	r0, ec3a <do_gps_start+0x1ba>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    ec1a:	f014 f8ad 	bl	22d78 <z_impl_k_thread_resume>
	client.running = true;
    ec1e:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    ec20:	88aa      	ldrh	r2, [r5, #4]
    ec22:	491a      	ldr	r1, [pc, #104]	; (ec8c <do_gps_start+0x20c>)
    ec24:	4813      	ldr	r0, [pc, #76]	; (ec74 <do_gps_start+0x1f4>)
	client.running = true;
    ec26:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    ec28:	f002 fdd8 	bl	117dc <sprintf>
	client.callback(buf);
    ec2c:	68ab      	ldr	r3, [r5, #8]
    ec2e:	4811      	ldr	r0, [pc, #68]	; (ec74 <do_gps_start+0x1f4>)
    ec30:	4798      	blx	r3
}
    ec32:	4620      	mov	r0, r4
    ec34:	b00a      	add	sp, #40	; 0x28
    ec36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ec3a:	230e      	movs	r3, #14
    ec3c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    ec40:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ec44:	e9cd 4400 	strd	r4, r4, [sp]
    ec48:	4b11      	ldr	r3, [pc, #68]	; (ec90 <do_gps_start+0x210>)
    ec4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ec4e:	4911      	ldr	r1, [pc, #68]	; (ec94 <do_gps_start+0x214>)
    ec50:	4811      	ldr	r0, [pc, #68]	; (ec98 <do_gps_start+0x218>)
    ec52:	f014 f841 	bl	22cd8 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    ec56:	6030      	str	r0, [r6, #0]
    ec58:	e7e1      	b.n	ec1e <do_gps_start+0x19e>
    ec5a:	bf00      	nop
    ec5c:	2002010c 	.word	0x2002010c
    ec60:	00026684 	.word	0x00026684
    ec64:	000266b4 	.word	0x000266b4
    ec68:	00028124 	.word	0x00028124
    ec6c:	000281e8 	.word	0x000281e8
    ec70:	000281fd 	.word	0x000281fd
    ec74:	2002737c 	.word	0x2002737c
    ec78:	00028144 	.word	0x00028144
    ec7c:	0002816c 	.word	0x0002816c
    ec80:	00028197 	.word	0x00028197
    ec84:	000281b9 	.word	0x000281b9
    ec88:	200201c8 	.word	0x200201c8
    ec8c:	000281d7 	.word	0x000281d7
    ec90:	0000ee49 	.word	0x0000ee49
    ec94:	20027550 	.word	0x20027550
    ec98:	20020118 	.word	0x20020118

0000ec9c <handle_at_gpsrun>:
 *  AT#XGPSRUN=<op>[,<mask>]
 *  AT#XGPSRUN?
 *  AT#XGPSRUN=? TEST command not supported
 */
static int handle_at_gpsrun(const char *at_cmd, size_t param_offset)
{
    ec9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ec9e:	460e      	mov	r6, r1
	LOG_INF("handle_at_gpsrun");
    eca0:	2303      	movs	r3, #3
    eca2:	f04f 0100 	mov.w	r1, #0
{
    eca6:	4604      	mov	r4, r0
	LOG_INF("handle_at_gpsrun");
    eca8:	f363 0102 	bfi	r1, r3, #0, #3
    ecac:	4d58      	ldr	r5, [pc, #352]	; (ee10 <handle_at_gpsrun+0x174>)
    ecae:	4b59      	ldr	r3, [pc, #356]	; (ee14 <handle_at_gpsrun+0x178>)
    ecb0:	f36f 01c5 	bfc	r1, #3, #3
    ecb4:	1aed      	subs	r5, r5, r3
    ecb6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    ecba:	f365 118f 	bfi	r1, r5, #6, #10
    ecbe:	4856      	ldr	r0, [pc, #344]	; (ee18 <handle_at_gpsrun+0x17c>)
    ecc0:	f015 f949 	bl	23f56 <log_0>
	int err = -EINVAL;
	char *at_param = (char *)at_cmd + param_offset;
	u16_t op;

	if (*(at_param) == '=') {
    ecc4:	5da3      	ldrb	r3, [r4, r6]
	char *at_param = (char *)at_cmd + param_offset;
    ecc6:	19a2      	adds	r2, r4, r6
	if (*(at_param) == '=') {
    ecc8:	2b3d      	cmp	r3, #61	; 0x3d
    ecca:	f040 808b 	bne.w	ede4 <handle_at_gpsrun+0x148>
		at_param++;
		if (*(at_param) == '?') {
    ecce:	7853      	ldrb	r3, [r2, #1]
    ecd0:	2b3f      	cmp	r3, #63	; 0x3f
    ecd2:	d104      	bne.n	ecde <handle_at_gpsrun+0x42>
			return err;
    ecd4:	f06f 0415 	mvn.w	r4, #21
		client.callback(buf);
		err = 0;
	}

	return err;
}
    ecd8:	4620      	mov	r0, r4
    ecda:	b004      	add	sp, #16
    ecdc:	bd70      	pop	{r4, r5, r6, pc}
		err = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    ecde:	4620      	mov	r0, r4
    ece0:	4a4e      	ldr	r2, [pc, #312]	; (ee1c <handle_at_gpsrun+0x180>)
    ece2:	2100      	movs	r1, #0
    ece4:	f016 fe1c 	bl	25920 <at_parser_params_from_str>
		if (err < 0) {
    ece8:	1e04      	subs	r4, r0, #0
    ecea:	dbf5      	blt.n	ecd8 <handle_at_gpsrun+0x3c>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    ecec:	484b      	ldr	r0, [pc, #300]	; (ee1c <handle_at_gpsrun+0x180>)
    ecee:	f016 ff1d 	bl	25b2c <at_params_valid_count_get>
    ecf2:	2801      	cmp	r0, #1
    ecf4:	d9ee      	bls.n	ecd4 <handle_at_gpsrun+0x38>
		err = at_params_short_get(&m_param_list, 1, &op);
    ecf6:	f10d 020a 	add.w	r2, sp, #10
    ecfa:	2101      	movs	r1, #1
    ecfc:	4847      	ldr	r0, [pc, #284]	; (ee1c <handle_at_gpsrun+0x180>)
    ecfe:	f016 fee0 	bl	25ac2 <at_params_short_get>
		if (err < 0) {
    ed02:	1e04      	subs	r4, r0, #0
    ed04:	dbe8      	blt.n	ecd8 <handle_at_gpsrun+0x3c>
		if (op == 1) {
    ed06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    ed0a:	2b01      	cmp	r3, #1
    ed0c:	d129      	bne.n	ed62 <handle_at_gpsrun+0xc6>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    ed0e:	4843      	ldr	r0, [pc, #268]	; (ee1c <handle_at_gpsrun+0x180>)
    ed10:	f016 ff0c 	bl	25b2c <at_params_valid_count_get>
    ed14:	2802      	cmp	r0, #2
    ed16:	d906      	bls.n	ed26 <handle_at_gpsrun+0x8a>
				err = at_params_short_get(&m_param_list, 2,
    ed18:	4a41      	ldr	r2, [pc, #260]	; (ee20 <handle_at_gpsrun+0x184>)
    ed1a:	2102      	movs	r1, #2
    ed1c:	483f      	ldr	r0, [pc, #252]	; (ee1c <handle_at_gpsrun+0x180>)
    ed1e:	f016 fed0 	bl	25ac2 <at_params_short_get>
				if (err < 0) {
    ed22:	1e04      	subs	r4, r0, #0
    ed24:	dbd8      	blt.n	ecd8 <handle_at_gpsrun+0x3c>
			if (client.running) {
    ed26:	4b3f      	ldr	r3, [pc, #252]	; (ee24 <handle_at_gpsrun+0x188>)
				LOG_WRN("GPS is running");
    ed28:	f04f 0100 	mov.w	r1, #0
			if (client.running) {
    ed2c:	799b      	ldrb	r3, [r3, #6]
    ed2e:	b153      	cbz	r3, ed46 <handle_at_gpsrun+0xaa>
				LOG_WRN("GPS is running");
    ed30:	2302      	movs	r3, #2
    ed32:	f363 0102 	bfi	r1, r3, #0, #3
    ed36:	f36f 01c5 	bfc	r1, #3, #3
    ed3a:	483b      	ldr	r0, [pc, #236]	; (ee28 <handle_at_gpsrun+0x18c>)
    ed3c:	f365 118f 	bfi	r1, r5, #6, #10
				LOG_WRN("GPS is not running");
    ed40:	f015 f909 	bl	23f56 <log_0>
    ed44:	e7c8      	b.n	ecd8 <handle_at_gpsrun+0x3c>
				LOG_INF("running do_gps_start from at handler");
    ed46:	2203      	movs	r2, #3
    ed48:	f362 0102 	bfi	r1, r2, #0, #3
    ed4c:	f363 01c5 	bfi	r1, r3, #3, #3
    ed50:	f365 118f 	bfi	r1, r5, #6, #10
    ed54:	4835      	ldr	r0, [pc, #212]	; (ee2c <handle_at_gpsrun+0x190>)
    ed56:	f015 f8fe 	bl	23f56 <log_0>
				err = do_gps_start();
    ed5a:	f7ff fe91 	bl	ea80 <do_gps_start>
    ed5e:	4604      	mov	r4, r0
    ed60:	e7ba      	b.n	ecd8 <handle_at_gpsrun+0x3c>
		} else if (op == 0) {
    ed62:	2b00      	cmp	r3, #0
    ed64:	d1b8      	bne.n	ecd8 <handle_at_gpsrun+0x3c>
			if (!client.running) {
    ed66:	4e2f      	ldr	r6, [pc, #188]	; (ee24 <handle_at_gpsrun+0x188>)
    ed68:	79b2      	ldrb	r2, [r6, #6]
    ed6a:	b952      	cbnz	r2, ed82 <handle_at_gpsrun+0xe6>
				LOG_WRN("GPS is not running");
    ed6c:	f04f 0100 	mov.w	r1, #0
    ed70:	2302      	movs	r3, #2
    ed72:	f363 0102 	bfi	r1, r3, #0, #3
    ed76:	f362 01c5 	bfi	r1, r2, #3, #3
    ed7a:	f365 118f 	bfi	r1, r5, #6, #10
    ed7e:	482c      	ldr	r0, [pc, #176]	; (ee30 <handle_at_gpsrun+0x194>)
    ed80:	e7de      	b.n	ed40 <handle_at_gpsrun+0xa4>
	if (client.sock != INVALID_SOCKET) {
    ed82:	6830      	ldr	r0, [r6, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    ed84:	9303      	str	r3, [sp, #12]
	if (client.sock != INVALID_SOCKET) {
    ed86:	1c43      	adds	r3, r0, #1
    ed88:	d03a      	beq.n	ee00 <handle_at_gpsrun+0x164>
		ret = nrf_setsockopt(client.sock, NRF_SOL_GNSS,
    ed8a:	2304      	movs	r3, #4
    ed8c:	2208      	movs	r2, #8
    ed8e:	9300      	str	r3, [sp, #0]
    ed90:	f44f 7101 	mov.w	r1, #516	; 0x204
    ed94:	ab03      	add	r3, sp, #12
    ed96:	f005 fc31 	bl	145fc <nrf_setsockopt>
		if (ret != 0) {
    ed9a:	4604      	mov	r4, r0
    ed9c:	b1a8      	cbz	r0, edca <handle_at_gpsrun+0x12e>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    ed9e:	2301      	movs	r3, #1
    eda0:	f04f 0400 	mov.w	r4, #0
    eda4:	f363 0402 	bfi	r4, r3, #0, #3
    eda8:	f36f 04c5 	bfc	r4, #3, #3
    edac:	f365 148f 	bfi	r4, r5, #6, #10
    edb0:	f013 f800 	bl	21db4 <z_impl_z_errno>
    edb4:	6801      	ldr	r1, [r0, #0]
    edb6:	4622      	mov	r2, r4
    edb8:	4249      	negs	r1, r1
    edba:	481e      	ldr	r0, [pc, #120]	; (ee34 <handle_at_gpsrun+0x198>)
    edbc:	f015 f8d8 	bl	23f70 <log_1>
    edc0:	f012 fff8 	bl	21db4 <z_impl_z_errno>
			ret = -errno;
    edc4:	6804      	ldr	r4, [r0, #0]
    edc6:	4264      	negs	r4, r4
    edc8:	e786      	b.n	ecd8 <handle_at_gpsrun+0x3c>
			k_thread_suspend(gps_thread_id);
    edca:	4b1b      	ldr	r3, [pc, #108]	; (ee38 <handle_at_gpsrun+0x19c>)
    edcc:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
    edce:	f013 ffb3 	bl	22d38 <z_impl_k_thread_suspend>
			nrf_close(client.sock);
    edd2:	6830      	ldr	r0, [r6, #0]
    edd4:	f005 fb4e 	bl	14474 <nrf_close>
			client.running = false;
    edd8:	2300      	movs	r3, #0
			client.callback("#XGPSRUN: 0\r\n");
    edda:	4818      	ldr	r0, [pc, #96]	; (ee3c <handle_at_gpsrun+0x1a0>)
			client.running = false;
    eddc:	71b3      	strb	r3, [r6, #6]
			client.callback("#XGPSRUN: 0\r\n");
    edde:	68b3      	ldr	r3, [r6, #8]
    ede0:	4798      	blx	r3
    ede2:	e779      	b.n	ecd8 <handle_at_gpsrun+0x3c>
	} else if (*(at_param) == '?') {
    ede4:	2b3f      	cmp	r3, #63	; 0x3f
    ede6:	f47f af75 	bne.w	ecd4 <handle_at_gpsrun+0x38>
		if (client.running) {
    edea:	4c0e      	ldr	r4, [pc, #56]	; (ee24 <handle_at_gpsrun+0x188>)
    edec:	79a3      	ldrb	r3, [r4, #6]
    edee:	b14b      	cbz	r3, ee04 <handle_at_gpsrun+0x168>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", client.mask);
    edf0:	88a2      	ldrh	r2, [r4, #4]
    edf2:	4913      	ldr	r1, [pc, #76]	; (ee40 <handle_at_gpsrun+0x1a4>)
    edf4:	4813      	ldr	r0, [pc, #76]	; (ee44 <handle_at_gpsrun+0x1a8>)
    edf6:	f002 fcf1 	bl	117dc <sprintf>
		client.callback(buf);
    edfa:	68a3      	ldr	r3, [r4, #8]
    edfc:	4811      	ldr	r0, [pc, #68]	; (ee44 <handle_at_gpsrun+0x1a8>)
    edfe:	4798      	blx	r3
		err = 0;
    ee00:	2400      	movs	r4, #0
    ee02:	e769      	b.n	ecd8 <handle_at_gpsrun+0x3c>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    ee04:	490d      	ldr	r1, [pc, #52]	; (ee3c <handle_at_gpsrun+0x1a0>)
    ee06:	480f      	ldr	r0, [pc, #60]	; (ee44 <handle_at_gpsrun+0x1a8>)
    ee08:	f002 fce8 	bl	117dc <sprintf>
    ee0c:	e7f5      	b.n	edfa <handle_at_gpsrun+0x15e>
    ee0e:	bf00      	nop
    ee10:	000266b4 	.word	0x000266b4
    ee14:	00026684 	.word	0x00026684
    ee18:	00028358 	.word	0x00028358
    ee1c:	200200e0 	.word	0x200200e0
    ee20:	20020110 	.word	0x20020110
    ee24:	2002010c 	.word	0x2002010c
    ee28:	00028369 	.word	0x00028369
    ee2c:	00028378 	.word	0x00028378
    ee30:	0002839d 	.word	0x0002839d
    ee34:	000283b0 	.word	0x000283b0
    ee38:	200201c8 	.word	0x200201c8
    ee3c:	000283cd 	.word	0x000283cd
    ee40:	000281d7 	.word	0x000281d7
    ee44:	2002737c 	.word	0x2002737c

0000ee48 <gps_thread_fn>:
{
    ee48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		if (nrf_recv(client.sock, &gps_data, sizeof(gps_data), 0)
    ee4c:	4f58      	ldr	r7, [pc, #352]	; (efb0 <gps_thread_fn+0x168>)
    ee4e:	4c59      	ldr	r4, [pc, #356]	; (efb4 <gps_thread_fn+0x16c>)
    ee50:	463e      	mov	r6, r7
    ee52:	2300      	movs	r3, #0
    ee54:	22d8      	movs	r2, #216	; 0xd8
    ee56:	4957      	ldr	r1, [pc, #348]	; (efb4 <gps_thread_fn+0x16c>)
    ee58:	6838      	ldr	r0, [r7, #0]
    ee5a:	f005 fb6b 	bl	14534 <nrf_recv>
    ee5e:	2800      	cmp	r0, #0
    ee60:	dc27      	bgt.n	eeb2 <gps_thread_fn+0x6a>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    ee62:	2301      	movs	r3, #1
    ee64:	f04f 0400 	mov.w	r4, #0
    ee68:	4a53      	ldr	r2, [pc, #332]	; (efb8 <gps_thread_fn+0x170>)
    ee6a:	f363 0402 	bfi	r4, r3, #0, #3
    ee6e:	4b53      	ldr	r3, [pc, #332]	; (efbc <gps_thread_fn+0x174>)
    ee70:	f36f 04c5 	bfc	r4, #3, #3
    ee74:	1a9b      	subs	r3, r3, r2
    ee76:	08db      	lsrs	r3, r3, #3
    ee78:	f363 148f 	bfi	r4, r3, #6, #10
    ee7c:	f012 ff9a 	bl	21db4 <z_impl_z_errno>
    ee80:	6801      	ldr	r1, [r0, #0]
    ee82:	4622      	mov	r2, r4
    ee84:	4249      	negs	r1, r1
    ee86:	484e      	ldr	r0, [pc, #312]	; (efc0 <gps_thread_fn+0x178>)
    ee88:	f015 f872 	bl	23f70 <log_1>
    ee8c:	f012 ff92 	bl	21db4 <z_impl_z_errno>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    ee90:	6802      	ldr	r2, [r0, #0]
    ee92:	494c      	ldr	r1, [pc, #304]	; (efc4 <gps_thread_fn+0x17c>)
    ee94:	4252      	negs	r2, r2
    ee96:	484c      	ldr	r0, [pc, #304]	; (efc8 <gps_thread_fn+0x180>)
    ee98:	f002 fca0 	bl	117dc <sprintf>
			client.callback(buf);
    ee9c:	68bb      	ldr	r3, [r7, #8]
    ee9e:	484a      	ldr	r0, [pc, #296]	; (efc8 <gps_thread_fn+0x180>)
    eea0:	4798      	blx	r3
			nrf_close(client.sock);
    eea2:	6838      	ldr	r0, [r7, #0]
    eea4:	f005 fae6 	bl	14474 <nrf_close>
			client.running = false;
    eea8:	2300      	movs	r3, #0
    eeaa:	71bb      	strb	r3, [r7, #6]
}
    eeac:	b002      	add	sp, #8
    eeae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || client.has_fix) {
    eeb2:	7823      	ldrb	r3, [r4, #0]
    eeb4:	2b01      	cmp	r3, #1
    eeb6:	d12e      	bne.n	ef16 <gps_thread_fn+0xce>
    eeb8:	79f9      	ldrb	r1, [r7, #7]
    eeba:	bb61      	cbnz	r1, ef16 <gps_thread_fn+0xce>
	u8_t unhealthy = 0;
    eebc:	468c      	mov	ip, r1
	u8_t in_fix = 0;
    eebe:	460b      	mov	r3, r1
	u8_t tracked = 0;
    eec0:	460d      	mov	r5, r1
    eec2:	1860      	adds	r0, r4, r1
		if ((gps_data.pvt.sv[i].sv > 0) &&
    eec4:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
    eec8:	3a01      	subs	r2, #1
    eeca:	2a1f      	cmp	r2, #31
    eecc:	d80e      	bhi.n	eeec <gps_thread_fn+0xa4>
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    eece:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
			tracked++;
    eed2:	3501      	adds	r5, #1
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    eed4:	07d0      	lsls	r0, r2, #31
				in_fix++;
    eed6:	bf44      	itt	mi
    eed8:	3301      	addmi	r3, #1
    eeda:	b2db      	uxtbmi	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    eedc:	0712      	lsls	r2, r2, #28
				unhealthy++;
    eede:	bf48      	it	mi
    eee0:	f10c 0201 	addmi.w	r2, ip, #1
			tracked++;
    eee4:	b2ed      	uxtb	r5, r5
				unhealthy++;
    eee6:	bf48      	it	mi
    eee8:	fa5f fc82 	uxtbmi.w	ip, r2
    eeec:	310c      	adds	r1, #12
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    eeee:	2990      	cmp	r1, #144	; 0x90
    eef0:	d1e7      	bne.n	eec2 <gps_thread_fn+0x7a>
	if (last_tracked != tracked) {
    eef2:	f8df 8100 	ldr.w	r8, [pc, #256]	; eff4 <gps_thread_fn+0x1ac>
    eef6:	f898 2000 	ldrb.w	r2, [r8]
    eefa:	42aa      	cmp	r2, r5
    eefc:	d00b      	beq.n	ef16 <gps_thread_fn+0xce>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    eefe:	f8cd c000 	str.w	ip, [sp]
    ef02:	462a      	mov	r2, r5
    ef04:	4931      	ldr	r1, [pc, #196]	; (efcc <gps_thread_fn+0x184>)
    ef06:	4830      	ldr	r0, [pc, #192]	; (efc8 <gps_thread_fn+0x180>)
    ef08:	f002 fc68 	bl	117dc <sprintf>
		client.callback(buf);
    ef0c:	68b3      	ldr	r3, [r6, #8]
    ef0e:	482e      	ldr	r0, [pc, #184]	; (efc8 <gps_thread_fn+0x180>)
    ef10:	4798      	blx	r3
		last_tracked = tracked;
    ef12:	f888 5000 	strb.w	r5, [r8]
		switch (gps_data.data_id) {
    ef16:	7825      	ldrb	r5, [r4, #0]
    ef18:	2d01      	cmp	r5, #1
    ef1a:	d00b      	beq.n	ef34 <gps_thread_fn+0xec>
    ef1c:	2d02      	cmp	r5, #2
    ef1e:	d198      	bne.n	ee52 <gps_thread_fn+0xa>
			if (client.has_fix) {
    ef20:	79f3      	ldrb	r3, [r6, #7]
    ef22:	2b00      	cmp	r3, #0
    ef24:	d095      	beq.n	ee52 <gps_thread_fn+0xa>
				client.callback("#XGPSN: ");
    ef26:	68b3      	ldr	r3, [r6, #8]
    ef28:	4829      	ldr	r0, [pc, #164]	; (efd0 <gps_thread_fn+0x188>)
    ef2a:	4798      	blx	r3
				client.callback(gps_data.nmea);
    ef2c:	68b3      	ldr	r3, [r6, #8]
    ef2e:	4829      	ldr	r0, [pc, #164]	; (efd4 <gps_thread_fn+0x18c>)
    ef30:	4798      	blx	r3
    ef32:	e78e      	b.n	ee52 <gps_thread_fn+0xa>
			if (IS_FIX(gps_data.pvt.flags)) {
    ef34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ef38:	07db      	lsls	r3, r3, #31
    ef3a:	d58a      	bpl.n	ee52 <gps_thread_fn+0xa>
	printf("Longitude:  %f\n", pvt_data->pvt.longitude);
    ef3c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    ef40:	4825      	ldr	r0, [pc, #148]	; (efd8 <gps_thread_fn+0x190>)
    ef42:	f002 fc63 	bl	1180c <printf>
	printf("Latitude:   %f\n", pvt_data->pvt.latitude);
    ef46:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ef4a:	4824      	ldr	r0, [pc, #144]	; (efdc <gps_thread_fn+0x194>)
    ef4c:	f002 fc5e 	bl	1180c <printf>
	printf("Altitude:   %f\n", pvt_data->pvt.altitude);
    ef50:	6a20      	ldr	r0, [r4, #32]
    ef52:	f7fd fac9 	bl	c4e8 <__aeabi_f2d>
    ef56:	4602      	mov	r2, r0
    ef58:	460b      	mov	r3, r1
    ef5a:	4821      	ldr	r0, [pc, #132]	; (efe0 <gps_thread_fn+0x198>)
    ef5c:	f002 fc56 	bl	1180c <printf>
	printf("Speed:      %f\n", pvt_data->pvt.speed);
    ef60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ef62:	f7fd fac1 	bl	c4e8 <__aeabi_f2d>
    ef66:	4602      	mov	r2, r0
    ef68:	460b      	mov	r3, r1
    ef6a:	481e      	ldr	r0, [pc, #120]	; (efe4 <gps_thread_fn+0x19c>)
    ef6c:	f002 fc4e 	bl	1180c <printf>
	printf("Heading:    %f\n", pvt_data->pvt.heading);
    ef70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ef72:	f7fd fab9 	bl	c4e8 <__aeabi_f2d>
    ef76:	4602      	mov	r2, r0
    ef78:	460b      	mov	r3, r1
    ef7a:	481b      	ldr	r0, [pc, #108]	; (efe8 <gps_thread_fn+0x1a0>)
    ef7c:	f002 fc46 	bl	1180c <printf>
	printk("Date:       %02u-%02u-%02u\n", pvt_data->pvt.datetime.day,
    ef80:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ef82:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    ef86:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    ef8a:	4818      	ldr	r0, [pc, #96]	; (efec <gps_thread_fn+0x1a4>)
    ef8c:	f014 ffb0 	bl	23ef0 <printk>
	printk("Time (UTC): %02u:%02u:%02u\n", pvt_data->pvt.datetime.hour,
    ef90:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    ef94:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    ef98:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    ef9c:	4814      	ldr	r0, [pc, #80]	; (eff0 <gps_thread_fn+0x1a8>)
    ef9e:	f014 ffa7 	bl	23ef0 <printk>
				if (!client.has_fix) {
    efa2:	79f3      	ldrb	r3, [r6, #7]
    efa4:	2b00      	cmp	r3, #0
    efa6:	f47f af54 	bne.w	ee52 <gps_thread_fn+0xa>
					client.has_fix = true;
    efaa:	71f5      	strb	r5, [r6, #7]
    efac:	e751      	b.n	ee52 <gps_thread_fn+0xa>
    efae:	bf00      	nop
    efb0:	2002010c 	.word	0x2002010c
    efb4:	20020000 	.word	0x20020000
    efb8:	00026684 	.word	0x00026684
    efbc:	000266b4 	.word	0x000266b4
    efc0:	00028288 	.word	0x00028288
    efc4:	000281fd 	.word	0x000281fd
    efc8:	2002737c 	.word	0x2002737c
    efcc:	0002829b 	.word	0x0002829b
    efd0:	0002834f 	.word	0x0002834f
    efd4:	20020008 	.word	0x20020008
    efd8:	000282c7 	.word	0x000282c7
    efdc:	000282d7 	.word	0x000282d7
    efe0:	000282e7 	.word	0x000282e7
    efe4:	000282f7 	.word	0x000282f7
    efe8:	00028307 	.word	0x00028307
    efec:	00028317 	.word	0x00028317
    eff0:	00028333 	.word	0x00028333
    eff4:	200273bc 	.word	0x200273bc

0000eff8 <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const u8_t *param, u8_t length)
{
    eff8:	b538      	push	{r3, r4, r5, lr}
    effa:	4604      	mov	r4, r0
	int ret = -ENOTSUP;

	ARG_UNUSED(length);

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_at_list[i].string_upper);
    effc:	480c      	ldr	r0, [pc, #48]	; (f030 <slm_at_gps_parse+0x38>)
    effe:	f015 fcbb 	bl	24978 <strlen>
    f002:	b2c5      	uxtb	r5, r0

		if (strncmp(param, m_at_list[i].string_upper,
    f004:	462a      	mov	r2, r5
    f006:	490a      	ldr	r1, [pc, #40]	; (f030 <slm_at_gps_parse+0x38>)
    f008:	4620      	mov	r0, r4
    f00a:	f015 fcca 	bl	249a2 <strncmp>
    f00e:	b928      	cbnz	r0, f01c <slm_at_gps_parse+0x24>
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
			break;
		} else if (strncmp(param, m_at_list[i].string_lower,
			cmd_len) == 0) {
			ret = m_at_list[i].handler(param, cmd_len);
    f010:	4629      	mov	r1, r5
    f012:	4620      	mov	r0, r4
			break;
		}
	}

	return ret;
}
    f014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_at_list[i].handler(param, cmd_len);
    f018:	f7ff be40 	b.w	ec9c <handle_at_gpsrun>
		} else if (strncmp(param, m_at_list[i].string_lower,
    f01c:	462a      	mov	r2, r5
    f01e:	4905      	ldr	r1, [pc, #20]	; (f034 <slm_at_gps_parse+0x3c>)
    f020:	4620      	mov	r0, r4
    f022:	f015 fcbe 	bl	249a2 <strncmp>
    f026:	2800      	cmp	r0, #0
    f028:	d0f2      	beq.n	f010 <slm_at_gps_parse+0x18>
}
    f02a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f02e:	bd38      	pop	{r3, r4, r5, pc}
    f030:	000283ff 	.word	0x000283ff
    f034:	0002840a 	.word	0x0002840a

0000f038 <slm_at_gps_init>:
}

/**@brief API to initialize GPS AT commands handler
 */
int slm_at_gps_init(at_cmd_handler_t callback)
{
    f038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f03c:	4b45      	ldr	r3, [pc, #276]	; (f154 <slm_at_gps_init+0x11c>)
    f03e:	4d46      	ldr	r5, [pc, #280]	; (f158 <slm_at_gps_init+0x120>)
    f040:	b085      	sub	sp, #20
    f042:	1aed      	subs	r5, r5, r3
    f044:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (callback == NULL) {
    f048:	b980      	cbnz	r0, f06c <slm_at_gps_init+0x34>
		LOG_ERR("No callback");
    f04a:	2301      	movs	r3, #1
    f04c:	f04f 0100 	mov.w	r1, #0
    f050:	f363 0102 	bfi	r1, r3, #0, #3
    f054:	f360 01c5 	bfi	r1, r0, #3, #3
    f058:	f365 118f 	bfi	r1, r5, #6, #10
    f05c:	483f      	ldr	r0, [pc, #252]	; (f15c <slm_at_gps_init+0x124>)
    f05e:	f014 ff7a 	bl	23f56 <log_0>
		return -EINVAL;
    f062:	f06f 0015 	mvn.w	r0, #21
	client.callback = callback;
	gps_thread_id = NULL;
	enable_gps();
	do_gps_start();
	return 0;
}
    f066:	b005      	add	sp, #20
    f068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.sock = INVALID_SOCKET;
    f06c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f070:	4b3b      	ldr	r3, [pc, #236]	; (f160 <slm_at_gps_init+0x128>)
	client.running = false;
    f072:	2400      	movs	r4, #0
	client.sock = INVALID_SOCKET;
    f074:	601a      	str	r2, [r3, #0]
	client.mask =  NRF_GNSS_NMEA_GSV_MASK |
    f076:	221f      	movs	r2, #31
	client.callback = callback;
    f078:	6098      	str	r0, [r3, #8]
	client.mask =  NRF_GNSS_NMEA_GSV_MASK |
    f07a:	809a      	strh	r2, [r3, #4]
	client.running = false;
    f07c:	719c      	strb	r4, [r3, #6]
	client.has_fix = false;
    f07e:	71dc      	strb	r4, [r3, #7]
	gps_thread_id = NULL;
    f080:	4b38      	ldr	r3, [pc, #224]	; (f164 <slm_at_gps_init+0x12c>)
	LOG_INF("Initializing GPS Module");
    f082:	f04f 0100 	mov.w	r1, #0
	gps_thread_id = NULL;
    f086:	601c      	str	r4, [r3, #0]
	LOG_INF("Initializing GPS Module");
    f088:	2303      	movs	r3, #3
    f08a:	f363 0102 	bfi	r1, r3, #0, #3
	return socket_ops->socket(family, type, proto);
    f08e:	4f36      	ldr	r7, [pc, #216]	; (f168 <slm_at_gps_init+0x130>)
    f090:	f364 01c5 	bfi	r1, r4, #3, #3
    f094:	f365 118f 	bfi	r1, r5, #6, #10
    f098:	4834      	ldr	r0, [pc, #208]	; (f16c <slm_at_gps_init+0x134>)
    f09a:	f014 ff5c 	bl	23f56 <log_0>
    f09e:	683b      	ldr	r3, [r7, #0]
    f0a0:	f240 2201 	movw	r2, #513	; 0x201
    f0a4:	681b      	ldr	r3, [r3, #0]
    f0a6:	4621      	mov	r1, r4
    f0a8:	2066      	movs	r0, #102	; 0x66
    f0aa:	4798      	blx	r3
	if (at_sock < 0) {
    f0ac:	1e06      	subs	r6, r0, #0
    f0ae:	9701      	str	r7, [sp, #4]
    f0b0:	db22      	blt.n	f0f8 <slm_at_gps_init+0xc0>
    f0b2:	f8df b0c4 	ldr.w	fp, [pc, #196]	; f178 <slm_at_gps_init+0x140>
		if (memcmp(buf, "OK", 2) != 0) {
    f0b6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; f17c <slm_at_gps_init+0x144>
		LOG_INF("%s",gps_at_commands[i]);
    f0ba:	2303      	movs	r3, #3
    f0bc:	f363 0902 	bfi	r9, r3, #0, #3
    f0c0:	f36f 09c5 	bfc	r9, #3, #3
    f0c4:	eb0b 0804 	add.w	r8, fp, r4
    f0c8:	f365 198f 	bfi	r9, r5, #6, #10
    f0cc:	464a      	mov	r2, r9
    f0ce:	4641      	mov	r1, r8
    f0d0:	4827      	ldr	r0, [pc, #156]	; (f170 <slm_at_gps_init+0x138>)
    f0d2:	f014 ff4d 	bl	23f70 <log_1>
		bytes_sent = send(at_sock, gps_at_commands[i],
    f0d6:	4640      	mov	r0, r8
    f0d8:	f015 fc4e 	bl	24978 <strlen>
	return socket_ops->send(sock, buf, len, flags);
    f0dc:	9b01      	ldr	r3, [sp, #4]
    f0de:	4602      	mov	r2, r0
    f0e0:	681b      	ldr	r3, [r3, #0]
    f0e2:	4641      	mov	r1, r8
    f0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f0e6:	4630      	mov	r0, r6
    f0e8:	461f      	mov	r7, r3
    f0ea:	2300      	movs	r3, #0
    f0ec:	47b8      	blx	r7
		if (bytes_sent < 0) {
    f0ee:	2800      	cmp	r0, #0
    f0f0:	da06      	bge.n	f100 <slm_at_gps_init+0xc8>
			close(at_sock);
    f0f2:	4630      	mov	r0, r6
    f0f4:	f7ff fcbe 	bl	ea74 <close>
	do_gps_start();
    f0f8:	f7ff fcc2 	bl	ea80 <do_gps_start>
	return 0;
    f0fc:	2000      	movs	r0, #0
    f0fe:	e7b2      	b.n	f066 <slm_at_gps_init+0x2e>
	return socket_ops->recv(sock, buf, max_len, flags);
    f100:	9b01      	ldr	r3, [sp, #4]
    f102:	2202      	movs	r2, #2
    f104:	681b      	ldr	r3, [r3, #0]
    f106:	a903      	add	r1, sp, #12
    f108:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
    f10c:	4630      	mov	r0, r6
    f10e:	2300      	movs	r3, #0
    f110:	47c0      	blx	r8
		} while (bytes_received == 0);
    f112:	2800      	cmp	r0, #0
    f114:	d0f4      	beq.n	f100 <slm_at_gps_init+0xc8>
		if (memcmp(buf, "OK", 2) != 0) {
    f116:	2202      	movs	r2, #2
    f118:	4651      	mov	r1, sl
    f11a:	a803      	add	r0, sp, #12
    f11c:	f015 fc50 	bl	249c0 <memcmp>
    f120:	4680      	mov	r8, r0
    f122:	2800      	cmp	r0, #0
    f124:	d1e5      	bne.n	f0f2 <slm_at_gps_init+0xba>
	return z_impl_k_sleep(ms);
    f126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f12a:	341f      	adds	r4, #31
    f12c:	f013 fce8 	bl	22b00 <z_impl_k_sleep>
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    f130:	2c7c      	cmp	r4, #124	; 0x7c
    f132:	d1c2      	bne.n	f0ba <slm_at_gps_init+0x82>
	close(at_sock);
    f134:	4630      	mov	r0, r6
    f136:	f7ff fc9d 	bl	ea74 <close>
	LOG_INF("GPS Enabled");
    f13a:	2303      	movs	r3, #3
    f13c:	f04f 0100 	mov.w	r1, #0
    f140:	f363 0102 	bfi	r1, r3, #0, #3
    f144:	f368 01c5 	bfi	r1, r8, #3, #3
    f148:	f365 118f 	bfi	r1, r5, #6, #10
    f14c:	4809      	ldr	r0, [pc, #36]	; (f174 <slm_at_gps_init+0x13c>)
    f14e:	f014 ff02 	bl	23f56 <log_0>
    f152:	e7d1      	b.n	f0f8 <slm_at_gps_init+0xc0>
    f154:	00026684 	.word	0x00026684
    f158:	000266b4 	.word	0x000266b4
    f15c:	0002800c 	.word	0x0002800c
    f160:	2002010c 	.word	0x2002010c
    f164:	200201c8 	.word	0x200201c8
    f168:	20020314 	.word	0x20020314
    f16c:	000283db 	.word	0x000283db
    f170:	00028051 	.word	0x00028051
    f174:	000283f3 	.word	0x000283f3
    f178:	0002820c 	.word	0x0002820c
    f17c:	00028046 	.word	0x00028046

0000f180 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    f180:	680b      	ldr	r3, [r1, #0]
    f182:	3301      	adds	r3, #1
    f184:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    f186:	4b01      	ldr	r3, [pc, #4]	; (f18c <char_out+0xc>)
    f188:	681b      	ldr	r3, [r3, #0]
    f18a:	4718      	bx	r3
    f18c:	2002d3a4 	.word	0x2002d3a4

0000f190 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    f190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f194:	b085      	sub	sp, #20
    f196:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    f198:	469b      	mov	fp, r3
    f19a:	2c01      	cmp	r4, #1
    f19c:	bfb8      	it	lt
    f19e:	2401      	movlt	r4, #1
    f1a0:	2b01      	cmp	r3, #1
    f1a2:	bf0c      	ite	eq
    f1a4:	2330      	moveq	r3, #48	; 0x30
    f1a6:	2320      	movne	r3, #32
    f1a8:	4616      	mov	r6, r2
    f1aa:	4682      	mov	sl, r0
    f1ac:	4688      	mov	r8, r1
    f1ae:	2501      	movs	r5, #1
    f1b0:	270a      	movs	r7, #10
    f1b2:	2200      	movs	r2, #0
    f1b4:	f8df 906c 	ldr.w	r9, [pc, #108]	; f224 <_printk_dec_ulong+0x94>
    f1b8:	9302      	str	r3, [sp, #8]
    f1ba:	fbb6 f3f9 	udiv	r3, r6, r9
    f1be:	9301      	str	r3, [sp, #4]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    f1c0:	b90a      	cbnz	r2, f1c6 <_printk_dec_ulong+0x36>
    f1c2:	45b1      	cmp	r9, r6
    f1c4:	d81c      	bhi.n	f200 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    f1c6:	9b01      	ldr	r3, [sp, #4]
    f1c8:	4641      	mov	r1, r8
    f1ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
    f1ce:	47d0      	blx	sl
			found_largest_digit = 1;
    f1d0:	2201      	movs	r2, #1
			digits++;
    f1d2:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    f1d4:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    f1d6:	3f01      	subs	r7, #1
		remainder %= pos;
    f1d8:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    f1dc:	230a      	movs	r3, #10
	while (pos >= 10) {
    f1de:	2f01      	cmp	r7, #1
		pos /= 10;
    f1e0:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    f1e4:	d1e9      	bne.n	f1ba <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    f1e6:	4641      	mov	r1, r8
    f1e8:	f106 0030 	add.w	r0, r6, #48	; 0x30
    f1ec:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    f1ee:	f1bb 0f03 	cmp.w	fp, #3
    f1f2:	d102      	bne.n	f1fa <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    f1f4:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    f1f6:	2c00      	cmp	r4, #0
    f1f8:	dc0e      	bgt.n	f218 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    f1fa:	b005      	add	sp, #20
    f1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    f200:	42bc      	cmp	r4, r7
    f202:	dbe7      	blt.n	f1d4 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    f204:	f1bb 0f02 	cmp.w	fp, #2
    f208:	d8e4      	bhi.n	f1d4 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f20a:	4641      	mov	r1, r8
    f20c:	9802      	ldr	r0, [sp, #8]
    f20e:	9203      	str	r2, [sp, #12]
			digits++;
    f210:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    f212:	47d0      	blx	sl
			digits++;
    f214:	9a03      	ldr	r2, [sp, #12]
    f216:	e7dd      	b.n	f1d4 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    f218:	4641      	mov	r1, r8
    f21a:	2020      	movs	r0, #32
    f21c:	47d0      	blx	sl
    f21e:	3c01      	subs	r4, #1
    f220:	e7e9      	b.n	f1f6 <_printk_dec_ulong+0x66>
    f222:	bf00      	nop
    f224:	3b9aca00 	.word	0x3b9aca00

0000f228 <__printk_hook_install>:
	_char_out = fn;
    f228:	4b01      	ldr	r3, [pc, #4]	; (f230 <__printk_hook_install+0x8>)
    f22a:	6018      	str	r0, [r3, #0]
}
    f22c:	4770      	bx	lr
    f22e:	bf00      	nop
    f230:	2002d3a4 	.word	0x2002d3a4

0000f234 <vprintk>:
	struct out_context ctx = { 0 };
    f234:	2300      	movs	r3, #0
{
    f236:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    f238:	ac02      	add	r4, sp, #8
    f23a:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    f23e:	4602      	mov	r2, r0
    f240:	460b      	mov	r3, r1
    f242:	4803      	ldr	r0, [pc, #12]	; (f250 <vprintk+0x1c>)
    f244:	4621      	mov	r1, r4
    f246:	f014 fcdb 	bl	23c00 <z_vprintk>
}
    f24a:	b002      	add	sp, #8
    f24c:	bd10      	pop	{r4, pc}
    f24e:	bf00      	nop
    f250:	0000f181 	.word	0x0000f181

0000f254 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    f254:	f04f 0220 	mov.w	r2, #32
    f258:	f3ef 8311 	mrs	r3, BASEPRI
    f25c:	f382 8811 	msr	BASEPRI, r2
    f260:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f264:	2101      	movs	r1, #1
    f266:	4a04      	ldr	r2, [pc, #16]	; (f278 <nordicsemi_nrf91_init+0x24>)
    f268:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    f26c:	f383 8811 	msr	BASEPRI, r3
    f270:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f274:	2000      	movs	r0, #0
    f276:	4770      	bx	lr
    f278:	40039000 	.word	0x40039000

0000f27c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f27c:	4801      	ldr	r0, [pc, #4]	; (f284 <log_process_thread_timer_expiry_fn+0x8>)
    f27e:	f013 bc6d 	b.w	22b5c <z_impl_k_sem_give>
    f282:	bf00      	nop
    f284:	2002d540 	.word	0x2002d540

0000f288 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    f288:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    f28a:	2200      	movs	r2, #0
{
    f28c:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    f28e:	490d      	ldr	r1, [pc, #52]	; (f2c4 <enable_logger+0x3c>)
    f290:	480d      	ldr	r0, [pc, #52]	; (f2c8 <enable_logger+0x40>)
    f292:	f016 ff2e 	bl	260f2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f296:	2400      	movs	r4, #0
    f298:	230e      	movs	r3, #14
    f29a:	4d0c      	ldr	r5, [pc, #48]	; (f2cc <enable_logger+0x44>)
    f29c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f2a0:	e9cd 4404 	strd	r4, r4, [sp, #16]
    f2a4:	e9cd 4400 	strd	r4, r4, [sp]
    f2a8:	4b09      	ldr	r3, [pc, #36]	; (f2d0 <enable_logger+0x48>)
    f2aa:	f44f 7240 	mov.w	r2, #768	; 0x300
    f2ae:	4909      	ldr	r1, [pc, #36]	; (f2d4 <enable_logger+0x4c>)
    f2b0:	4628      	mov	r0, r5
    f2b2:	f013 fd11 	bl	22cd8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f2b6:	4908      	ldr	r1, [pc, #32]	; (f2d8 <enable_logger+0x50>)
    f2b8:	4628      	mov	r0, r5
    f2ba:	f016 fe76 	bl	25faa <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    f2be:	4620      	mov	r0, r4
    f2c0:	b007      	add	sp, #28
    f2c2:	bd30      	pop	{r4, r5, pc}
    f2c4:	0000f27d 	.word	0x0000f27d
    f2c8:	200201e0 	.word	0x200201e0
    f2cc:	20020228 	.word	0x20020228
    f2d0:	0000f659 	.word	0x0000f659
    f2d4:	20027950 	.word	0x20027950
    f2d8:	0002842c 	.word	0x0002842c

0000f2dc <log_core_init>:
{
    f2dc:	b508      	push	{r3, lr}
		log_msg_pool_init();
    f2de:	f000 fa4b 	bl	f778 <log_msg_pool_init>
		log_list_init(&list);
    f2e2:	4809      	ldr	r0, [pc, #36]	; (f308 <log_core_init+0x2c>)
    f2e4:	f014 fe14 	bl	23f10 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    f2e8:	2304      	movs	r3, #4
    f2ea:	2234      	movs	r2, #52	; 0x34
    f2ec:	4807      	ldr	r0, [pc, #28]	; (f30c <log_core_init+0x30>)
    f2ee:	4908      	ldr	r1, [pc, #32]	; (f310 <log_core_init+0x34>)
    f2f0:	f016 fc3d 	bl	25b6e <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    f2f4:	4b07      	ldr	r3, [pc, #28]	; (f314 <log_core_init+0x38>)
    f2f6:	4a08      	ldr	r2, [pc, #32]	; (f318 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    f2f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    f2fc:	601a      	str	r2, [r3, #0]
}
    f2fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    f302:	f000 bc6f 	b.w	fbe4 <log_output_timestamp_freq_set>
    f306:	bf00      	nop
    f308:	200201d8 	.word	0x200201d8
    f30c:	2002020c 	.word	0x2002020c
    f310:	2002b990 	.word	0x2002b990
    f314:	2002d3a8 	.word	0x2002d3a8
    f318:	00023f4f 	.word	0x00023f4f

0000f31c <dropped_notify>:
{
    f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f31e:	2500      	movs	r5, #0
    f320:	4b0c      	ldr	r3, [pc, #48]	; (f354 <dropped_notify+0x38>)
    f322:	e8d3 7fef 	ldaex	r7, [r3]
    f326:	e8c3 5fe2 	stlex	r2, r5, [r3]
    f32a:	2a00      	cmp	r2, #0
    f32c:	d1f9      	bne.n	f322 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    f32e:	4c0a      	ldr	r4, [pc, #40]	; (f358 <dropped_notify+0x3c>)
    f330:	4e0a      	ldr	r6, [pc, #40]	; (f35c <dropped_notify+0x40>)
    f332:	1b36      	subs	r6, r6, r4
    f334:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    f336:	42b5      	cmp	r5, r6
    f338:	db00      	blt.n	f33c <dropped_notify+0x20>
}
    f33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f33c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f33e:	795b      	ldrb	r3, [r3, #5]
    f340:	b12b      	cbz	r3, f34e <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    f342:	6823      	ldr	r3, [r4, #0]
    f344:	68db      	ldr	r3, [r3, #12]
    f346:	b113      	cbz	r3, f34e <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    f348:	4639      	mov	r1, r7
    f34a:	4620      	mov	r0, r4
    f34c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    f34e:	3501      	adds	r5, #1
    f350:	3410      	adds	r4, #16
    f352:	e7f0      	b.n	f336 <dropped_notify+0x1a>
    f354:	200201d0 	.word	0x200201d0
    f358:	00026704 	.word	0x00026704
    f35c:	00026714 	.word	0x00026714

0000f360 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f360:	4b04      	ldr	r3, [pc, #16]	; (f374 <log_dropped+0x14>)
    f362:	e8d3 2fef 	ldaex	r2, [r3]
    f366:	3201      	adds	r2, #1
    f368:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f36c:	2900      	cmp	r1, #0
    f36e:	d1f8      	bne.n	f362 <log_dropped+0x2>
}
    f370:	4770      	bx	lr
    f372:	bf00      	nop
    f374:	200201d0 	.word	0x200201d0

0000f378 <log_source_name_get>:
    f378:	4a04      	ldr	r2, [pc, #16]	; (f38c <log_source_name_get+0x14>)
    f37a:	4b05      	ldr	r3, [pc, #20]	; (f390 <log_source_name_get+0x18>)
    f37c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    f37e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    f382:	bf34      	ite	cc
    f384:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    f388:	2000      	movcs	r0, #0
}
    f38a:	4770      	bx	lr
    f38c:	00026684 	.word	0x00026684
    f390:	00026704 	.word	0x00026704

0000f394 <log_backend_enable>:
	id += backend - log_backend_get(0);
    f394:	4b09      	ldr	r3, [pc, #36]	; (f3bc <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    f396:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    f398:	1ac3      	subs	r3, r0, r3
    f39a:	111b      	asrs	r3, r3, #4
    f39c:	3301      	adds	r3, #1
{
    f39e:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    f3a0:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    f3a2:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    f3a4:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    f3a6:	4c06      	ldr	r4, [pc, #24]	; (f3c0 <log_backend_enable+0x2c>)
    f3a8:	715a      	strb	r2, [r3, #5]
    f3aa:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    f3ac:	6019      	str	r1, [r3, #0]
    f3ae:	b912      	cbnz	r2, f3b6 <log_backend_enable+0x22>
	z_impl_k_sem_give(sem);
    f3b0:	4804      	ldr	r0, [pc, #16]	; (f3c4 <log_backend_enable+0x30>)
    f3b2:	f013 fbd3 	bl	22b5c <z_impl_k_sem_give>
	backend_attached = true;
    f3b6:	2301      	movs	r3, #1
    f3b8:	7023      	strb	r3, [r4, #0]
}
    f3ba:	bd10      	pop	{r4, pc}
    f3bc:	00026704 	.word	0x00026704
    f3c0:	200273bd 	.word	0x200273bd
    f3c4:	2002d540 	.word	0x2002d540

0000f3c8 <log_init>:
{
    f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3ca:	4b0f      	ldr	r3, [pc, #60]	; (f408 <log_init+0x40>)
    f3cc:	e8d3 4fef 	ldaex	r4, [r3]
    f3d0:	1c62      	adds	r2, r4, #1
    f3d2:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f3d6:	2900      	cmp	r1, #0
    f3d8:	d1f8      	bne.n	f3cc <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    f3da:	b92c      	cbnz	r4, f3e8 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    f3dc:	4d0b      	ldr	r5, [pc, #44]	; (f40c <log_init+0x44>)
    f3de:	4e0c      	ldr	r6, [pc, #48]	; (f410 <log_init+0x48>)
    f3e0:	1b76      	subs	r6, r6, r5
    f3e2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    f3e4:	42b4      	cmp	r4, r6
    f3e6:	db00      	blt.n	f3ea <log_init+0x22>
}
    f3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3ea:	0127      	lsls	r7, r4, #4
		if (backend->autostart) {
    f3ec:	19eb      	adds	r3, r5, r7
    f3ee:	7b1b      	ldrb	r3, [r3, #12]
    f3f0:	b143      	cbz	r3, f404 <log_init+0x3c>
			if (backend->api->init != NULL) {
    f3f2:	59eb      	ldr	r3, [r5, r7]
    f3f4:	695b      	ldr	r3, [r3, #20]
    f3f6:	b103      	cbz	r3, f3fa <log_init+0x32>
				backend->api->init();
    f3f8:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    f3fa:	2204      	movs	r2, #4
    f3fc:	2100      	movs	r1, #0
    f3fe:	19e8      	adds	r0, r5, r7
    f400:	f7ff ffc8 	bl	f394 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    f404:	3401      	adds	r4, #1
    f406:	e7ed      	b.n	f3e4 <log_init+0x1c>
    f408:	200201d4 	.word	0x200201d4
    f40c:	00026704 	.word	0x00026704
    f410:	00026714 	.word	0x00026714

0000f414 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    f414:	4b14      	ldr	r3, [pc, #80]	; (f468 <log_strdup+0x54>)
{
    f416:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    f418:	4298      	cmp	r0, r3
{
    f41a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    f41c:	d302      	bcc.n	f424 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    f41e:	4b13      	ldr	r3, [pc, #76]	; (f46c <log_strdup+0x58>)
    f420:	4298      	cmp	r0, r3
    f422:	d31b      	bcc.n	f45c <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    f424:	2200      	movs	r2, #0
    f426:	a901      	add	r1, sp, #4
    f428:	4811      	ldr	r0, [pc, #68]	; (f470 <log_strdup+0x5c>)
    f42a:	f012 fe4b 	bl	220c4 <k_mem_slab_alloc>
	if (err != 0) {
    f42e:	4605      	mov	r5, r0
    f430:	b9b8      	cbnz	r0, f462 <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f432:	2201      	movs	r2, #1
    f434:	9b01      	ldr	r3, [sp, #4]
    f436:	e8d3 1fef 	ldaex	r1, [r3]
    f43a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    f43e:	2800      	cmp	r0, #0
    f440:	d1f9      	bne.n	f436 <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    f442:	9801      	ldr	r0, [sp, #4]
    f444:	4621      	mov	r1, r4
    f446:	222d      	movs	r2, #45	; 0x2d
    f448:	3004      	adds	r0, #4
    f44a:	f015 fa67 	bl	2491c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    f44e:	237e      	movs	r3, #126	; 0x7e
    f450:	9c01      	ldr	r4, [sp, #4]
    f452:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    f456:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    f45a:	3404      	adds	r4, #4
}
    f45c:	4620      	mov	r0, r4
    f45e:	b003      	add	sp, #12
    f460:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    f462:	4c04      	ldr	r4, [pc, #16]	; (f474 <log_strdup+0x60>)
    f464:	e7fa      	b.n	f45c <log_strdup+0x48>
    f466:	bf00      	nop
    f468:	00026398 	.word	0x00026398
    f46c:	00028e74 	.word	0x00028e74
    f470:	2002020c 	.word	0x2002020c
    f474:	00028434 	.word	0x00028434

0000f478 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    f478:	b148      	cbz	r0, f48e <log_is_strdup+0x16>
    f47a:	4b05      	ldr	r3, [pc, #20]	; (f490 <log_is_strdup+0x18>)
    f47c:	4298      	cmp	r0, r3
    f47e:	d305      	bcc.n	f48c <log_is_strdup+0x14>
    f480:	33d0      	adds	r3, #208	; 0xd0
    f482:	4298      	cmp	r0, r3
    f484:	bf2c      	ite	cs
    f486:	2000      	movcs	r0, #0
    f488:	2001      	movcc	r0, #1
    f48a:	4770      	bx	lr
    f48c:	2000      	movs	r0, #0
}
    f48e:	4770      	bx	lr
    f490:	2002b990 	.word	0x2002b990

0000f494 <z_impl_log_process>:
{
    f494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    f498:	4b50      	ldr	r3, [pc, #320]	; (f5dc <z_impl_log_process+0x148>)
{
    f49a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    f49c:	781b      	ldrb	r3, [r3, #0]
    f49e:	b903      	cbnz	r3, f4a2 <z_impl_log_process+0xe>
    f4a0:	b340      	cbz	r0, f4f4 <z_impl_log_process+0x60>
	__asm__ volatile(
    f4a2:	f04f 0320 	mov.w	r3, #32
    f4a6:	f3ef 8611 	mrs	r6, BASEPRI
    f4aa:	f383 8811 	msr	BASEPRI, r3
    f4ae:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    f4b2:	484b      	ldr	r0, [pc, #300]	; (f5e0 <z_impl_log_process+0x14c>)
    f4b4:	f014 fd3c 	bl	23f30 <log_list_head_get>
    f4b8:	4605      	mov	r5, r0
	__asm__ volatile(
    f4ba:	f386 8811 	msr	BASEPRI, r6
    f4be:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    f4c2:	b158      	cbz	r0, f4dc <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f4c4:	4b47      	ldr	r3, [pc, #284]	; (f5e4 <z_impl_log_process+0x150>)
    f4c6:	e8d3 2fef 	ldaex	r2, [r3]
    f4ca:	3a01      	subs	r2, #1
    f4cc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    f4d0:	2900      	cmp	r1, #0
    f4d2:	d1f8      	bne.n	f4c6 <z_impl_log_process+0x32>
	if (!bypass) {
    f4d4:	b18c      	cbz	r4, f4fa <z_impl_log_process+0x66>
	log_msg_put(msg);
    f4d6:	4628      	mov	r0, r5
    f4d8:	f014 fe17 	bl	2410a <log_msg_put>
	if (!bypass && dropped_cnt) {
    f4dc:	b924      	cbnz	r4, f4e8 <z_impl_log_process+0x54>
    f4de:	4b42      	ldr	r3, [pc, #264]	; (f5e8 <z_impl_log_process+0x154>)
    f4e0:	681b      	ldr	r3, [r3, #0]
    f4e2:	b10b      	cbz	r3, f4e8 <z_impl_log_process+0x54>
		dropped_notify();
    f4e4:	f7ff ff1a 	bl	f31c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    f4e8:	483d      	ldr	r0, [pc, #244]	; (f5e0 <z_impl_log_process+0x14c>)
    f4ea:	f014 fd1f 	bl	23f2c <log_list_head_peek>
    f4ee:	1c04      	adds	r4, r0, #0
    f4f0:	bf18      	it	ne
    f4f2:	2401      	movne	r4, #1
}
    f4f4:	4620      	mov	r0, r4
    f4f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    f4fa:	4b3c      	ldr	r3, [pc, #240]	; (f5ec <z_impl_log_process+0x158>)
    f4fc:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    f4fe:	b9db      	cbnz	r3, f538 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f500:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    f502:	07db      	lsls	r3, r3, #31
    f504:	d418      	bmi.n	f538 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    f506:	f014 fe0f 	bl	24128 <log_msg_str_get>
    f50a:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    f50c:	4628      	mov	r0, r5
    f50e:	f014 fddc 	bl	240ca <log_msg_nargs_get>
	u32_t mask = 0;
    f512:	4626      	mov	r6, r4
	bool arm = false;
    f514:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
    f516:	46cc      	mov	ip, r9
	u32_t arg = 0;
    f518:	4623      	mov	r3, r4
				mask |= BIT(arg);
    f51a:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
    f51e:	f81c 1b01 	ldrb.w	r1, [ip], #1
    f522:	b109      	cbz	r1, f528 <z_impl_log_process+0x94>
    f524:	4298      	cmp	r0, r3
    f526:	d80e      	bhi.n	f546 <z_impl_log_process+0xb2>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    f528:	4b31      	ldr	r3, [pc, #196]	; (f5f0 <z_impl_log_process+0x15c>)
				LOG_ERR(ERR_MSG, idx, msg_str);
    f52a:	4a32      	ldr	r2, [pc, #200]	; (f5f4 <z_impl_log_process+0x160>)
    f52c:	f8df b0dc 	ldr.w	fp, [pc, #220]	; f60c <z_impl_log_process+0x178>
    f530:	1a9b      	subs	r3, r3, r2
    f532:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
    f536:	b9d6      	cbnz	r6, f56e <z_impl_log_process+0xda>
    f538:	4e2f      	ldr	r6, [pc, #188]	; (f5f8 <z_impl_log_process+0x164>)
    f53a:	4f30      	ldr	r7, [pc, #192]	; (f5fc <z_impl_log_process+0x168>)
    f53c:	f04f 0800 	mov.w	r8, #0
    f540:	1bbf      	subs	r7, r7, r6
    f542:	113f      	asrs	r7, r7, #4
    f544:	e047      	b.n	f5d6 <z_impl_log_process+0x142>
		if (curr == '%') {
    f546:	2925      	cmp	r1, #37	; 0x25
    f548:	d102      	bne.n	f550 <z_impl_log_process+0xbc>
			arm = !arm;
    f54a:	f082 0201 	eor.w	r2, r2, #1
    f54e:	e7e6      	b.n	f51e <z_impl_log_process+0x8a>
		} else if (arm && isalpha(curr)) {
    f550:	2a00      	cmp	r2, #0
    f552:	d0e4      	beq.n	f51e <z_impl_log_process+0x8a>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    f554:	f041 0720 	orr.w	r7, r1, #32
    f558:	3f61      	subs	r7, #97	; 0x61
    f55a:	2f19      	cmp	r7, #25
    f55c:	d8df      	bhi.n	f51e <z_impl_log_process+0x8a>
			if (curr == 's') {
    f55e:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
    f560:	bf04      	itt	eq
    f562:	fa0e f203 	lsleq.w	r2, lr, r3
    f566:	4316      	orreq	r6, r2
			arg++;
    f568:	3301      	adds	r3, #1
			arm = false;
    f56a:	2200      	movs	r2, #0
    f56c:	e7d7      	b.n	f51e <z_impl_log_process+0x8a>
		idx = 31 - __builtin_clz(mask);
    f56e:	fab6 f786 	clz	r7, r6
    f572:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    f576:	4639      	mov	r1, r7
    f578:	4628      	mov	r0, r5
    f57a:	f014 fda9 	bl	240d0 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    f57e:	4b20      	ldr	r3, [pc, #128]	; (f600 <z_impl_log_process+0x16c>)
		str = (const char *)log_msg_arg_get(msg, idx);
    f580:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    f582:	4298      	cmp	r0, r3
    f584:	d302      	bcc.n	f58c <z_impl_log_process+0xf8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    f586:	4b1f      	ldr	r3, [pc, #124]	; (f604 <z_impl_log_process+0x170>)
    f588:	4298      	cmp	r0, r3
    f58a:	d313      	bcc.n	f5b4 <z_impl_log_process+0x120>
    f58c:	4610      	mov	r0, r2
    f58e:	f7ff ff73 	bl	f478 <log_is_strdup>
    f592:	b978      	cbnz	r0, f5b4 <z_impl_log_process+0x120>
    f594:	4b1c      	ldr	r3, [pc, #112]	; (f608 <z_impl_log_process+0x174>)
    f596:	429a      	cmp	r2, r3
    f598:	d00c      	beq.n	f5b4 <z_impl_log_process+0x120>
				LOG_ERR(ERR_MSG, idx, msg_str);
    f59a:	2301      	movs	r3, #1
    f59c:	f363 0802 	bfi	r8, r3, #0, #3
    f5a0:	f360 08c5 	bfi	r8, r0, #3, #3
    f5a4:	f36a 188f 	bfi	r8, sl, #6, #10
    f5a8:	4643      	mov	r3, r8
    f5aa:	464a      	mov	r2, r9
    f5ac:	4639      	mov	r1, r7
    f5ae:	4658      	mov	r0, fp
    f5b0:	f014 fcf2 	bl	23f98 <log_2>
		mask &= ~BIT(idx);
    f5b4:	2301      	movs	r3, #1
    f5b6:	fa03 f707 	lsl.w	r7, r3, r7
    f5ba:	ea26 0607 	bic.w	r6, r6, r7
    f5be:	e7ba      	b.n	f536 <z_impl_log_process+0xa2>
	return backend->cb->active;
    f5c0:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    f5c2:	795b      	ldrb	r3, [r3, #5]
    f5c4:	b123      	cbz	r3, f5d0 <z_impl_log_process+0x13c>
	backend->api->put(backend, msg);
    f5c6:	6833      	ldr	r3, [r6, #0]
    f5c8:	4629      	mov	r1, r5
    f5ca:	681b      	ldr	r3, [r3, #0]
    f5cc:	4630      	mov	r0, r6
    f5ce:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    f5d0:	f108 0801 	add.w	r8, r8, #1
    f5d4:	3610      	adds	r6, #16
    f5d6:	45b8      	cmp	r8, r7
    f5d8:	dbf2      	blt.n	f5c0 <z_impl_log_process+0x12c>
    f5da:	e77c      	b.n	f4d6 <z_impl_log_process+0x42>
    f5dc:	200273bd 	.word	0x200273bd
    f5e0:	200201d8 	.word	0x200201d8
    f5e4:	200201cc 	.word	0x200201cc
    f5e8:	200201d0 	.word	0x200201d0
    f5ec:	200273be 	.word	0x200273be
    f5f0:	000266bc 	.word	0x000266bc
    f5f4:	00026684 	.word	0x00026684
    f5f8:	00026704 	.word	0x00026704
    f5fc:	00026714 	.word	0x00026714
    f600:	00026398 	.word	0x00026398
    f604:	00028e74 	.word	0x00028e74
    f608:	00028434 	.word	0x00028434
    f60c:	00028452 	.word	0x00028452

0000f610 <z_impl_log_panic>:
{
    f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    f612:	4f0e      	ldr	r7, [pc, #56]	; (f64c <z_impl_log_panic+0x3c>)
    f614:	783d      	ldrb	r5, [r7, #0]
    f616:	b975      	cbnz	r5, f636 <z_impl_log_panic+0x26>
	log_init();
    f618:	f7ff fed6 	bl	f3c8 <log_init>
	return __log_backends_end - __log_backends_start;
    f61c:	4c0c      	ldr	r4, [pc, #48]	; (f650 <z_impl_log_panic+0x40>)
    f61e:	4e0d      	ldr	r6, [pc, #52]	; (f654 <z_impl_log_panic+0x44>)
    f620:	1b36      	subs	r6, r6, r4
    f622:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    f624:	42b5      	cmp	r5, r6
    f626:	db07      	blt.n	f638 <z_impl_log_panic+0x28>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    f628:	2000      	movs	r0, #0
    f62a:	f7ff ff33 	bl	f494 <z_impl_log_process>
		while (log_process(false) == true) {
    f62e:	2800      	cmp	r0, #0
    f630:	d1fa      	bne.n	f628 <z_impl_log_panic+0x18>
	panic_mode = true;
    f632:	2301      	movs	r3, #1
    f634:	703b      	strb	r3, [r7, #0]
}
    f636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    f638:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f63a:	795b      	ldrb	r3, [r3, #5]
    f63c:	b11b      	cbz	r3, f646 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    f63e:	6823      	ldr	r3, [r4, #0]
    f640:	4620      	mov	r0, r4
    f642:	691b      	ldr	r3, [r3, #16]
    f644:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    f646:	3501      	adds	r5, #1
    f648:	3410      	adds	r4, #16
    f64a:	e7eb      	b.n	f624 <z_impl_log_panic+0x14>
    f64c:	200273be 	.word	0x200273be
    f650:	00026704 	.word	0x00026704
    f654:	00026714 	.word	0x00026714

0000f658 <log_process_thread_func>:
{
    f658:	b508      	push	{r3, lr}
	log_init();
    f65a:	f7ff feb5 	bl	f3c8 <log_init>
	return z_impl_k_current_get();
    f65e:	f013 fa77 	bl	22b50 <z_impl_k_current_get>
	proc_tid = process_tid;
    f662:	4b0b      	ldr	r3, [pc, #44]	; (f690 <log_process_thread_func+0x38>)
    f664:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    f666:	b130      	cbz	r0, f676 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    f668:	4b0a      	ldr	r3, [pc, #40]	; (f694 <log_process_thread_func+0x3c>)
	    process_tid &&
    f66a:	681b      	ldr	r3, [r3, #0]
    f66c:	2b09      	cmp	r3, #9
    f66e:	dd02      	ble.n	f676 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    f670:	4809      	ldr	r0, [pc, #36]	; (f698 <log_process_thread_func+0x40>)
    f672:	f013 fa73 	bl	22b5c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    f676:	4c08      	ldr	r4, [pc, #32]	; (f698 <log_process_thread_func+0x40>)
    f678:	2000      	movs	r0, #0
    f67a:	f7ff ff0b 	bl	f494 <z_impl_log_process>
		if (log_process(false) == false) {
    f67e:	2800      	cmp	r0, #0
    f680:	d1fa      	bne.n	f678 <log_process_thread_func+0x20>
    f682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f686:	4620      	mov	r0, r4
    f688:	f013 fa94 	bl	22bb4 <z_impl_k_sem_take>
    f68c:	e7f4      	b.n	f678 <log_process_thread_func+0x20>
    f68e:	bf00      	nop
    f690:	200202d8 	.word	0x200202d8
    f694:	200201cc 	.word	0x200201cc
    f698:	2002d540 	.word	0x2002d540

0000f69c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    f69c:	4b24      	ldr	r3, [pc, #144]	; (f730 <msg_finalize+0x94>)
{
    f69e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f6a0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    f6a2:	8141      	strh	r1, [r0, #10]
{
    f6a4:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f6a6:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f6a8:	4c22      	ldr	r4, [pc, #136]	; (f734 <msg_finalize+0x98>)
    f6aa:	60e8      	str	r0, [r5, #12]
    f6ac:	e8d4 3fef 	ldaex	r3, [r4]
    f6b0:	3301      	adds	r3, #1
    f6b2:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f6b6:	2a00      	cmp	r2, #0
    f6b8:	d1f8      	bne.n	f6ac <msg_finalize+0x10>
	__asm__ volatile(
    f6ba:	f04f 0320 	mov.w	r3, #32
    f6be:	f3ef 8611 	mrs	r6, BASEPRI
    f6c2:	f383 8811 	msr	BASEPRI, r3
    f6c6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f6ca:	481b      	ldr	r0, [pc, #108]	; (f738 <msg_finalize+0x9c>)
    f6cc:	4629      	mov	r1, r5
    f6ce:	f014 fc23 	bl	23f18 <log_list_add_tail>
	__asm__ volatile(
    f6d2:	f386 8811 	msr	BASEPRI, r6
    f6d6:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    f6da:	4b18      	ldr	r3, [pc, #96]	; (f73c <msg_finalize+0xa0>)
    f6dc:	781a      	ldrb	r2, [r3, #0]
    f6de:	b17a      	cbz	r2, f700 <msg_finalize+0x64>
	__asm__ volatile(
    f6e0:	f04f 0320 	mov.w	r3, #32
    f6e4:	f3ef 8411 	mrs	r4, BASEPRI
    f6e8:	f383 8811 	msr	BASEPRI, r3
    f6ec:	f3bf 8f6f 	isb	sy
    f6f0:	2000      	movs	r0, #0
    f6f2:	f7ff fecf 	bl	f494 <z_impl_log_process>
	__asm__ volatile(
    f6f6:	f384 8811 	msr	BASEPRI, r4
    f6fa:	f3bf 8f6f 	isb	sy
}
    f6fe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    f700:	490f      	ldr	r1, [pc, #60]	; (f740 <msg_finalize+0xa4>)
    f702:	6823      	ldr	r3, [r4, #0]
    f704:	6809      	ldr	r1, [r1, #0]
    f706:	2900      	cmp	r1, #0
    f708:	d0f9      	beq.n	f6fe <msg_finalize+0x62>
    f70a:	2b01      	cmp	r3, #1
    f70c:	d106      	bne.n	f71c <msg_finalize+0x80>
}
    f70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    f712:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f716:	480b      	ldr	r0, [pc, #44]	; (f744 <msg_finalize+0xa8>)
    f718:	f013 bcd8 	b.w	230cc <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    f71c:	2b0a      	cmp	r3, #10
    f71e:	d1ee      	bne.n	f6fe <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    f720:	4808      	ldr	r0, [pc, #32]	; (f744 <msg_finalize+0xa8>)
    f722:	f016 fcf2 	bl	2610a <z_impl_k_timer_stop>
}
    f726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    f72a:	4807      	ldr	r0, [pc, #28]	; (f748 <msg_finalize+0xac>)
    f72c:	f013 ba16 	b.w	22b5c <z_impl_k_sem_give>
    f730:	2002d3a8 	.word	0x2002d3a8
    f734:	200201cc 	.word	0x200201cc
    f738:	200201d8 	.word	0x200201d8
    f73c:	200273be 	.word	0x200273be
    f740:	200202d8 	.word	0x200202d8
    f744:	200201e0 	.word	0x200201e0
    f748:	2002d540 	.word	0x2002d540

0000f74c <log_free>:
{
    f74c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    f74e:	3804      	subs	r0, #4
    f750:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f752:	e8d0 3fef 	ldaex	r3, [r0]
    f756:	1e5a      	subs	r2, r3, #1
    f758:	e8c0 2fe1 	stlex	r1, r2, [r0]
    f75c:	2900      	cmp	r1, #0
    f75e:	d1f8      	bne.n	f752 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    f760:	2b01      	cmp	r3, #1
    f762:	d103      	bne.n	f76c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    f764:	a901      	add	r1, sp, #4
    f766:	4803      	ldr	r0, [pc, #12]	; (f774 <log_free+0x28>)
    f768:	f012 fcda 	bl	22120 <k_mem_slab_free>
}
    f76c:	b003      	add	sp, #12
    f76e:	f85d fb04 	ldr.w	pc, [sp], #4
    f772:	bf00      	nop
    f774:	2002020c 	.word	0x2002020c

0000f778 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    f778:	2320      	movs	r3, #32
    f77a:	4902      	ldr	r1, [pc, #8]	; (f784 <log_msg_pool_init+0xc>)
    f77c:	461a      	mov	r2, r3
    f77e:	4802      	ldr	r0, [pc, #8]	; (f788 <log_msg_pool_init+0x10>)
    f780:	f016 b9f5 	b.w	25b6e <k_mem_slab_init>
    f784:	2002ba60 	.word	0x2002ba60
    f788:	200202dc 	.word	0x200202dc

0000f78c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    f78c:	2300      	movs	r3, #0
{
    f78e:	b573      	push	{r0, r1, r4, r5, r6, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    f790:	4e0a      	ldr	r6, [pc, #40]	; (f7bc <log_msg_no_space_handle+0x30>)
	union log_msg_chunk *msg = NULL;
    f792:	ac02      	add	r4, sp, #8
    f794:	f844 3d04 	str.w	r3, [r4, #-4]!
    f798:	2001      	movs	r0, #1
    f79a:	f7ff fe7b 	bl	f494 <z_impl_log_process>
    f79e:	4605      	mov	r5, r0
			log_dropped();
    f7a0:	f7ff fdde 	bl	f360 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    f7a4:	2200      	movs	r2, #0
    f7a6:	4621      	mov	r1, r4
    f7a8:	4630      	mov	r0, r6
    f7aa:	f012 fc8b 	bl	220c4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    f7ae:	b108      	cbz	r0, f7b4 <log_msg_no_space_handle+0x28>
    f7b0:	2d00      	cmp	r5, #0
    f7b2:	d1f1      	bne.n	f798 <log_msg_no_space_handle+0xc>
	} else {
		log_dropped();
	}
	return msg;

}
    f7b4:	9801      	ldr	r0, [sp, #4]
    f7b6:	b002      	add	sp, #8
    f7b8:	bd70      	pop	{r4, r5, r6, pc}
    f7ba:	bf00      	nop
    f7bc:	200202dc 	.word	0x200202dc

0000f7c0 <log_msg_chunk_alloc>:
{
    f7c0:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    f7c2:	2200      	movs	r2, #0
    f7c4:	a902      	add	r1, sp, #8
    f7c6:	f841 2d04 	str.w	r2, [r1, #-4]!
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f7ca:	4805      	ldr	r0, [pc, #20]	; (f7e0 <log_msg_chunk_alloc+0x20>)
    f7cc:	f012 fc7a 	bl	220c4 <k_mem_slab_alloc>
	if (err != 0) {
    f7d0:	b110      	cbz	r0, f7d8 <log_msg_chunk_alloc+0x18>
		msg = log_msg_no_space_handle();
    f7d2:	f7ff ffdb 	bl	f78c <log_msg_no_space_handle>
    f7d6:	9001      	str	r0, [sp, #4]
}
    f7d8:	9801      	ldr	r0, [sp, #4]
    f7da:	b003      	add	sp, #12
    f7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    f7e0:	200202dc 	.word	0x200202dc

0000f7e4 <msg_free>:
{
    f7e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f7e6:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    f7e8:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    f7ea:	f014 0401 	ands.w	r4, r4, #1
{
    f7ee:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    f7f0:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    f7f4:	d010      	beq.n	f818 <msg_free+0x34>
	if (msg->hdr.params.generic.ext == 1) {
    f7f6:	9b01      	ldr	r3, [sp, #4]
    f7f8:	7a1a      	ldrb	r2, [r3, #8]
    f7fa:	0792      	lsls	r2, r2, #30
    f7fc:	d506      	bpl.n	f80c <msg_free+0x28>
    f7fe:	695b      	ldr	r3, [r3, #20]
    f800:	ac04      	add	r4, sp, #16
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f802:	4d11      	ldr	r5, [pc, #68]	; (f848 <msg_free+0x64>)
    f804:	f844 3d04 	str.w	r3, [r4, #-4]!
	while (cont != NULL) {
    f808:	9b03      	ldr	r3, [sp, #12]
    f80a:	b9b3      	cbnz	r3, f83a <msg_free+0x56>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f80c:	a901      	add	r1, sp, #4
    f80e:	480e      	ldr	r0, [pc, #56]	; (f848 <msg_free+0x64>)
    f810:	f012 fc86 	bl	22120 <k_mem_slab_free>
}
    f814:	b004      	add	sp, #16
    f816:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    f818:	2d00      	cmp	r5, #0
    f81a:	d0ec      	beq.n	f7f6 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    f81c:	42ac      	cmp	r4, r5
    f81e:	9801      	ldr	r0, [sp, #4]
    f820:	d2e9      	bcs.n	f7f6 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    f822:	4621      	mov	r1, r4
    f824:	f014 fc54 	bl	240d0 <log_msg_arg_get>
    f828:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    f82a:	f7ff fe25 	bl	f478 <log_is_strdup>
    f82e:	b110      	cbz	r0, f836 <msg_free+0x52>
				log_free(buf);
    f830:	4630      	mov	r0, r6
    f832:	f7ff ff8b 	bl	f74c <log_free>
		for (i = 0; i < nargs; i++) {
    f836:	3401      	adds	r4, #1
    f838:	e7f0      	b.n	f81c <msg_free+0x38>
		next = cont->next;
    f83a:	681e      	ldr	r6, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f83c:	4621      	mov	r1, r4
    f83e:	4628      	mov	r0, r5
    f840:	f012 fc6e 	bl	22120 <k_mem_slab_free>
		cont = next;
    f844:	9603      	str	r6, [sp, #12]
    f846:	e7df      	b.n	f808 <msg_free+0x24>
    f848:	200202dc 	.word	0x200202dc

0000f84c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    f84c:	b40e      	push	{r1, r2, r3}
    f84e:	b503      	push	{r0, r1, lr}
    f850:	ab03      	add	r3, sp, #12
    f852:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f856:	4601      	mov	r1, r0
    f858:	4804      	ldr	r0, [pc, #16]	; (f86c <print_formatted+0x20>)
	va_start(args, fmt);
    f85a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    f85c:	f014 f9d0 	bl	23c00 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    f860:	2000      	movs	r0, #0
    f862:	b002      	add	sp, #8
    f864:	f85d eb04 	ldr.w	lr, [sp], #4
    f868:	b003      	add	sp, #12
    f86a:	4770      	bx	lr
    f86c:	000244dd 	.word	0x000244dd

0000f870 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    f870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    f874:	f011 0402 	ands.w	r4, r1, #2
{
    f878:	b085      	sub	sp, #20
    f87a:	4606      	mov	r6, r0
    f87c:	4690      	mov	r8, r2
    f87e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f882:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f886:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    f88a:	d007      	beq.n	f89c <prefix_print+0x2c>
	if (!format) {
    f88c:	f011 0f44 	tst.w	r1, #68	; 0x44
    f890:	d137      	bne.n	f902 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    f892:	461a      	mov	r2, r3
    f894:	4932      	ldr	r1, [pc, #200]	; (f960 <prefix_print+0xf0>)
    f896:	f7ff ffd9 	bl	f84c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    f89a:	4604      	mov	r4, r0
	if (color) {
    f89c:	f1b9 0f00 	cmp.w	r9, #0
    f8a0:	d00a      	beq.n	f8b8 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    f8a2:	4b30      	ldr	r3, [pc, #192]	; (f964 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    f8a4:	4930      	ldr	r1, [pc, #192]	; (f968 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    f8a6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    f8aa:	4b30      	ldr	r3, [pc, #192]	; (f96c <prefix_print+0xfc>)
    f8ac:	4630      	mov	r0, r6
    f8ae:	2a00      	cmp	r2, #0
    f8b0:	bf08      	it	eq
    f8b2:	461a      	moveq	r2, r3
    f8b4:	f7ff ffca 	bl	f84c <print_formatted>
	if (level_on) {
    f8b8:	b13d      	cbz	r5, f8ca <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    f8ba:	4b2d      	ldr	r3, [pc, #180]	; (f970 <prefix_print+0x100>)
    f8bc:	492d      	ldr	r1, [pc, #180]	; (f974 <prefix_print+0x104>)
    f8be:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    f8c2:	4630      	mov	r0, r6
    f8c4:	f7ff ffc2 	bl	f84c <print_formatted>
    f8c8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    f8ca:	f1b8 0f00 	cmp.w	r8, #0
    f8ce:	d044      	beq.n	f95a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f8d0:	2301      	movs	r3, #1
    f8d2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    f8d6:	4b28      	ldr	r3, [pc, #160]	; (f978 <prefix_print+0x108>)
    f8d8:	f017 0f10 	tst.w	r7, #16
    f8dc:	4f27      	ldr	r7, [pc, #156]	; (f97c <prefix_print+0x10c>)
    f8de:	bf18      	it	ne
    f8e0:	461f      	movne	r7, r3
    f8e2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f8e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f8ea:	f7ff fd45 	bl	f378 <log_source_name_get>
    f8ee:	4639      	mov	r1, r7
    f8f0:	4602      	mov	r2, r0
    f8f2:	4630      	mov	r0, r6
    f8f4:	f7ff ffaa 	bl	f84c <print_formatted>
    f8f8:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    f8fa:	4420      	add	r0, r4
    f8fc:	b005      	add	sp, #20
    f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    f902:	4a1f      	ldr	r2, [pc, #124]	; (f980 <prefix_print+0x110>)
    f904:	6811      	ldr	r1, [r2, #0]
    f906:	b331      	cbz	r1, f956 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    f908:	4a1e      	ldr	r2, [pc, #120]	; (f984 <prefix_print+0x114>)
    f90a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    f90e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    f910:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f914:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    f918:	fbb3 f4f1 	udiv	r4, r3, r1
    f91c:	fbb4 f2fe 	udiv	r2, r4, lr
    f920:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    f924:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    f928:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f92c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    f930:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f934:	fb01 441b 	mls	r4, r1, fp, r4
    f938:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    f93c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f940:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    f944:	e9cd b101 	strd	fp, r1, [sp, #4]
    f948:	fb0a e113 	mls	r1, sl, r3, lr
    f94c:	9100      	str	r1, [sp, #0]
    f94e:	490e      	ldr	r1, [pc, #56]	; (f988 <prefix_print+0x118>)
    f950:	f7ff ff7c 	bl	f84c <print_formatted>
    f954:	e7a1      	b.n	f89a <prefix_print+0x2a>
		length = 0;
    f956:	4608      	mov	r0, r1
    f958:	e79f      	b.n	f89a <prefix_print+0x2a>
	total += print_formatted(log_output,
    f95a:	4f08      	ldr	r7, [pc, #32]	; (f97c <prefix_print+0x10c>)
    f95c:	e7c1      	b.n	f8e2 <prefix_print+0x72>
    f95e:	bf00      	nop
    f960:	000284cf 	.word	0x000284cf
    f964:	000267cc 	.word	0x000267cc
    f968:	00028051 	.word	0x00028051
    f96c:	000284c1 	.word	0x000284c1
    f970:	000267e0 	.word	0x000267e0
    f974:	000284f4 	.word	0x000284f4
    f978:	000284c6 	.word	0x000284c6
    f97c:	000284ca 	.word	0x000284ca
    f980:	200202f8 	.word	0x200202f8
    f984:	200202fc 	.word	0x200202fc
    f988:	000284d8 	.word	0x000284d8

0000f98c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    f98c:	b538      	push	{r3, r4, r5, lr}
    f98e:	460c      	mov	r4, r1
	if (color) {
    f990:	07e1      	lsls	r1, r4, #31
{
    f992:	4605      	mov	r5, r0
	if (color) {
    f994:	d503      	bpl.n	f99e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    f996:	4a08      	ldr	r2, [pc, #32]	; (f9b8 <postfix_print+0x2c>)
    f998:	4908      	ldr	r1, [pc, #32]	; (f9bc <postfix_print+0x30>)
    f99a:	f7ff ff57 	bl	f84c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f99e:	06e2      	lsls	r2, r4, #27
    f9a0:	d408      	bmi.n	f9b4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f9a2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    f9a4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    f9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    f9aa:	bf4c      	ite	mi
    f9ac:	4904      	ldrmi	r1, [pc, #16]	; (f9c0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    f9ae:	4905      	ldrpl	r1, [pc, #20]	; (f9c4 <postfix_print+0x38>)
    f9b0:	f7ff bf4c 	b.w	f84c <print_formatted>
}
    f9b4:	bd38      	pop	{r3, r4, r5, pc}
    f9b6:	bf00      	nop
    f9b8:	000284c1 	.word	0x000284c1
    f9bc:	00028051 	.word	0x00028051
    f9c0:	00027e97 	.word	0x00027e97
    f9c4:	00027e96 	.word	0x00027e96

0000f9c8 <hexdump_line_print>:
{
    f9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9cc:	4698      	mov	r8, r3
    f9ce:	9b08      	ldr	r3, [sp, #32]
    f9d0:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f9d2:	06dd      	lsls	r5, r3, #27
{
    f9d4:	460e      	mov	r6, r1
    f9d6:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f9d8:	d405      	bmi.n	f9e6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f9da:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    f9dc:	bf4c      	ite	mi
    f9de:	4929      	ldrmi	r1, [pc, #164]	; (fa84 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    f9e0:	4929      	ldrpl	r1, [pc, #164]	; (fa88 <hexdump_line_print+0xc0>)
    f9e2:	f7ff ff33 	bl	f84c <print_formatted>
{
    f9e6:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    f9e8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; fa90 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    f9ec:	4545      	cmp	r5, r8
    f9ee:	db2a      	blt.n	fa46 <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f9f0:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    f9f2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; fa94 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    f9f6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; fa98 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    f9fa:	f8df a094 	ldr.w	sl, [pc, #148]	; fa90 <hexdump_line_print+0xc8>
		if (i < length) {
    f9fe:	42af      	cmp	r7, r5
    fa00:	d92e      	bls.n	fa60 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    fa02:	5d72      	ldrb	r2, [r6, r5]
    fa04:	4649      	mov	r1, r9
    fa06:	4620      	mov	r0, r4
    fa08:	f7ff ff20 	bl	f84c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    fa0c:	3501      	adds	r5, #1
    fa0e:	2d10      	cmp	r5, #16
    fa10:	d11f      	bne.n	fa52 <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    fa12:	491e      	ldr	r1, [pc, #120]	; (fa8c <hexdump_line_print+0xc4>)
    fa14:	4620      	mov	r0, r4
    fa16:	f7ff ff19 	bl	f84c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    fa1a:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    fa1c:	f8df 8070 	ldr.w	r8, [pc, #112]	; fa90 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    fa20:	f8df 9078 	ldr.w	r9, [pc, #120]	; fa9c <hexdump_line_print+0xd4>
		if (i < length) {
    fa24:	42af      	cmp	r7, r5
    fa26:	d927      	bls.n	fa78 <hexdump_line_print+0xb0>
			char c = (char)data[i];
    fa28:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    fa2a:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    fa2c:	f1a2 0320 	sub.w	r3, r2, #32
    fa30:	2b5f      	cmp	r3, #95	; 0x5f
    fa32:	bf28      	it	cs
    fa34:	222e      	movcs	r2, #46	; 0x2e
    fa36:	4620      	mov	r0, r4
    fa38:	f7ff ff08 	bl	f84c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    fa3c:	3501      	adds	r5, #1
    fa3e:	2d10      	cmp	r5, #16
    fa40:	d113      	bne.n	fa6a <hexdump_line_print+0xa2>
}
    fa42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    fa46:	4649      	mov	r1, r9
    fa48:	4620      	mov	r0, r4
    fa4a:	f7ff feff 	bl	f84c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    fa4e:	3501      	adds	r5, #1
    fa50:	e7cc      	b.n	f9ec <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    fa52:	076a      	lsls	r2, r5, #29
    fa54:	d1d3      	bne.n	f9fe <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    fa56:	4651      	mov	r1, sl
    fa58:	4620      	mov	r0, r4
    fa5a:	f7ff fef7 	bl	f84c <print_formatted>
    fa5e:	e7ce      	b.n	f9fe <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    fa60:	4641      	mov	r1, r8
    fa62:	4620      	mov	r0, r4
    fa64:	f7ff fef2 	bl	f84c <print_formatted>
    fa68:	e7d0      	b.n	fa0c <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    fa6a:	076b      	lsls	r3, r5, #29
    fa6c:	d1da      	bne.n	fa24 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    fa6e:	4641      	mov	r1, r8
    fa70:	4620      	mov	r0, r4
    fa72:	f7ff feeb 	bl	f84c <print_formatted>
    fa76:	e7d5      	b.n	fa24 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    fa78:	4641      	mov	r1, r8
    fa7a:	4620      	mov	r0, r4
    fa7c:	f7ff fee6 	bl	f84c <print_formatted>
    fa80:	e7dc      	b.n	fa3c <hexdump_line_print+0x74>
    fa82:	bf00      	nop
    fa84:	00027e97 	.word	0x00027e97
    fa88:	00027e96 	.word	0x00027e96
    fa8c:	00028492 	.word	0x00028492
    fa90:	00028490 	.word	0x00028490
    fa94:	0002848e 	.word	0x0002848e
    fa98:	00028488 	.word	0x00028488
    fa9c:	00028494 	.word	0x00028494

0000faa0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    faa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    faa4:	4617      	mov	r7, r2
    faa6:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.level;
    faa8:	7a8b      	ldrb	r3, [r1, #10]
    faaa:	43d2      	mvns	r2, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    faac:	f013 0407 	ands.w	r4, r3, #7
{
    fab0:	b08a      	sub	sp, #40	; 0x28
    fab2:	4605      	mov	r5, r0
    fab4:	460e      	mov	r6, r1
    fab6:	b2d2      	uxtb	r2, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    fab8:	d01b      	beq.n	faf2 <log_output_msg_process+0x52>
	return msg->hdr.ids.source_id;
    faba:	8949      	ldrh	r1, [r1, #10]
    fabc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    fac0:	0989      	lsrs	r1, r1, #6
    fac2:	9102      	str	r1, [sp, #8]
    fac4:	e9cd 4300 	strd	r4, r3, [sp]
    fac8:	f002 0201 	and.w	r2, r2, #1
    facc:	68f3      	ldr	r3, [r6, #12]
    face:	4639      	mov	r1, r7
    fad0:	f7ff fece 	bl	f870 <prefix_print>
    fad4:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    fad6:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    fad8:	07da      	lsls	r2, r3, #31
    fada:	d40c      	bmi.n	faf6 <log_output_msg_process+0x56>
		std_print(msg, log_output);
    fadc:	4629      	mov	r1, r5
    fade:	4630      	mov	r0, r6
    fae0:	f014 fb92 	bl	24208 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    fae4:	b34c      	cbz	r4, fb3a <log_output_msg_process+0x9a>
		postfix_print(log_output, flags, level);
    fae6:	4622      	mov	r2, r4
    fae8:	4639      	mov	r1, r7
    faea:	4628      	mov	r0, r5
    faec:	f7ff ff4e 	bl	f98c <postfix_print>
    faf0:	e023      	b.n	fb3a <log_output_msg_process+0x9a>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    faf2:	46a1      	mov	r9, r4
    faf4:	e7ef      	b.n	fad6 <log_output_msg_process+0x36>
	} else if (raw_string) {
    faf6:	bb34      	cbnz	r4, fb46 <log_output_msg_process+0xa6>
	size_t offset = 0;
    faf8:	4627      	mov	r7, r4
		length = log_output->size;
    fafa:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    fafc:	aa06      	add	r2, sp, #24
		length = log_output->size;
    fafe:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    fb00:	68a9      	ldr	r1, [r5, #8]
    fb02:	463b      	mov	r3, r7
    fb04:	4630      	mov	r0, r6
    fb06:	f014 fb6b 	bl	241e0 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    fb0a:	9a06      	ldr	r2, [sp, #24]
    fb0c:	686b      	ldr	r3, [r5, #4]
    fb0e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    fb10:	b13a      	cbz	r2, fb22 <log_output_msg_process+0x82>
			eol = (log_output->buf[length - 1] == '\n');
    fb12:	68ab      	ldr	r3, [r5, #8]
    fb14:	4413      	add	r3, r2
    fb16:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    fb1a:	f1a4 030a 	sub.w	r3, r4, #10
    fb1e:	425c      	negs	r4, r3
    fb20:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    fb22:	4628      	mov	r0, r5
    fb24:	f014 fccd 	bl	244c2 <log_output_flush>
		offset += length;
    fb28:	9b06      	ldr	r3, [sp, #24]
    fb2a:	441f      	add	r7, r3
	} while (length > 0);
    fb2c:	2b00      	cmp	r3, #0
    fb2e:	d1e4      	bne.n	fafa <log_output_msg_process+0x5a>
	if (eol) {
    fb30:	b11c      	cbz	r4, fb3a <log_output_msg_process+0x9a>
		print_formatted(log_output, "\r");
    fb32:	4915      	ldr	r1, [pc, #84]	; (fb88 <log_output_msg_process+0xe8>)
    fb34:	4628      	mov	r0, r5
    fb36:	f7ff fe89 	bl	f84c <print_formatted>
	}

	log_output_flush(log_output);
    fb3a:	4628      	mov	r0, r5
    fb3c:	f014 fcc1 	bl	244c2 <log_output_flush>
}
    fb40:	b00a      	add	sp, #40	; 0x28
    fb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    fb46:	4630      	mov	r0, r6
    fb48:	f014 faee 	bl	24128 <log_msg_str_get>
    fb4c:	490f      	ldr	r1, [pc, #60]	; (fb8c <log_output_msg_process+0xec>)
    fb4e:	4602      	mov	r2, r0
    fb50:	4628      	mov	r0, r5
    fb52:	f7ff fe7b 	bl	f84c <print_formatted>
	u32_t offset = 0U;
    fb56:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    fb5a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    fb5e:	aa05      	add	r2, sp, #20
    fb60:	4643      	mov	r3, r8
    fb62:	a906      	add	r1, sp, #24
    fb64:	4630      	mov	r0, r6
		length = sizeof(buf);
    fb66:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    fb6a:	f014 fb39 	bl	241e0 <log_msg_hexdump_data_get>
		if (length) {
    fb6e:	9a05      	ldr	r2, [sp, #20]
    fb70:	2a00      	cmp	r2, #0
    fb72:	d0b8      	beq.n	fae6 <log_output_msg_process+0x46>
			hexdump_line_print(log_output, buf, length,
    fb74:	464b      	mov	r3, r9
    fb76:	9700      	str	r7, [sp, #0]
    fb78:	a906      	add	r1, sp, #24
    fb7a:	4628      	mov	r0, r5
    fb7c:	f7ff ff24 	bl	f9c8 <hexdump_line_print>
			offset += length;
    fb80:	9b05      	ldr	r3, [sp, #20]
    fb82:	4498      	add	r8, r3
    fb84:	e7eb      	b.n	fb5e <log_output_msg_process+0xbe>
    fb86:	bf00      	nop
    fb88:	00028497 	.word	0x00028497
    fb8c:	00028051 	.word	0x00028051

0000fb90 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    fb90:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    fb92:	e9d0 4300 	ldrd	r4, r3, [r0]
    fb96:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    fb98:	f242 730f 	movw	r3, #9999	; 0x270f
    fb9c:	428b      	cmp	r3, r1
    fb9e:	bf28      	it	cs
    fba0:	460b      	movcs	r3, r1
    fba2:	4a0d      	ldr	r2, [pc, #52]	; (fbd8 <log_output_dropped_process+0x48>)
    fba4:	2105      	movs	r1, #5
    fba6:	4668      	mov	r0, sp
    fba8:	f001 fe00 	bl	117ac <snprintf>
    fbac:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    fbae:	462b      	mov	r3, r5
    fbb0:	4620      	mov	r0, r4
    fbb2:	220b      	movs	r2, #11
    fbb4:	4909      	ldr	r1, [pc, #36]	; (fbdc <log_output_dropped_process+0x4c>)
    fbb6:	f014 fb1a 	bl	241ee <buffer_write>
	buffer_write(outf, buf, len, dev);
    fbba:	462b      	mov	r3, r5
    fbbc:	4632      	mov	r2, r6
    fbbe:	4669      	mov	r1, sp
    fbc0:	4620      	mov	r0, r4
    fbc2:	f014 fb14 	bl	241ee <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    fbc6:	462b      	mov	r3, r5
    fbc8:	221b      	movs	r2, #27
    fbca:	4905      	ldr	r1, [pc, #20]	; (fbe0 <log_output_dropped_process+0x50>)
    fbcc:	4620      	mov	r0, r4
    fbce:	f014 fb0e 	bl	241ee <buffer_write>
}
    fbd2:	b002      	add	sp, #8
    fbd4:	bd70      	pop	{r4, r5, r6, pc}
    fbd6:	bf00      	nop
    fbd8:	00028298 	.word	0x00028298
    fbdc:	000284b5 	.word	0x000284b5
    fbe0:	00028499 	.word	0x00028499

0000fbe4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    fbe4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    fbe6:	2100      	movs	r1, #0
	timestamp_div = 1U;
    fbe8:	4a07      	ldr	r2, [pc, #28]	; (fc08 <log_output_timestamp_freq_set+0x24>)
{
    fbea:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    fbec:	4c07      	ldr	r4, [pc, #28]	; (fc0c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    fbee:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    fbf0:	42a0      	cmp	r0, r4
    fbf2:	d804      	bhi.n	fbfe <log_output_timestamp_freq_set+0x1a>
    fbf4:	b101      	cbz	r1, fbf8 <log_output_timestamp_freq_set+0x14>
    fbf6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    fbf8:	4b05      	ldr	r3, [pc, #20]	; (fc10 <log_output_timestamp_freq_set+0x2c>)
    fbfa:	6018      	str	r0, [r3, #0]
}
    fbfc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    fbfe:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    fc00:	005b      	lsls	r3, r3, #1
    fc02:	2101      	movs	r1, #1
    fc04:	e7f4      	b.n	fbf0 <log_output_timestamp_freq_set+0xc>
    fc06:	bf00      	nop
    fc08:	200202fc 	.word	0x200202fc
    fc0c:	000f4240 	.word	0x000f4240
    fc10:	200202f8 	.word	0x200202f8

0000fc14 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    fc14:	b508      	push	{r3, lr}
    fc16:	4803      	ldr	r0, [pc, #12]	; (fc24 <log_backend_uart_init+0x10>)
    fc18:	f012 f8a6 	bl	21d68 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    fc1c:	4b02      	ldr	r3, [pc, #8]	; (fc28 <log_backend_uart_init+0x14>)
    fc1e:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    fc20:	bd08      	pop	{r3, pc}
    fc22:	bf00      	nop
    fc24:	00027c83 	.word	0x00027c83
    fc28:	20020308 	.word	0x20020308

0000fc2c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    fc2c:	4801      	ldr	r0, [pc, #4]	; (fc34 <panic+0x8>)
    fc2e:	f014 bc48 	b.w	244c2 <log_output_flush>
    fc32:	bf00      	nop
    fc34:	0002680c 	.word	0x0002680c

0000fc38 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    fc38:	4801      	ldr	r0, [pc, #4]	; (fc40 <dropped+0x8>)
    fc3a:	f7ff bfa9 	b.w	fb90 <log_output_dropped_process>
    fc3e:	bf00      	nop
    fc40:	0002680c 	.word	0x0002680c

0000fc44 <put>:
{
    fc44:	b510      	push	{r4, lr}
    fc46:	460c      	mov	r4, r1
	log_msg_get(msg);
    fc48:	4608      	mov	r0, r1
    fc4a:	f014 fa35 	bl	240b8 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    fc4e:	4621      	mov	r1, r4
    fc50:	4804      	ldr	r0, [pc, #16]	; (fc64 <put+0x20>)
    fc52:	220f      	movs	r2, #15
    fc54:	f7ff ff24 	bl	faa0 <log_output_msg_process>
	log_msg_put(msg);
    fc58:	4620      	mov	r0, r4
}
    fc5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc5e:	f014 ba54 	b.w	2410a <log_msg_put>
    fc62:	bf00      	nop
    fc64:	0002680c 	.word	0x0002680c

0000fc68 <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    fc68:	4b01      	ldr	r3, [pc, #4]	; (fc70 <socket_offload_register+0x8>)
    fc6a:	6018      	str	r0, [r3, #0]
}
    fc6c:	4770      	bx	lr
    fc6e:	bf00      	nop
    fc70:	20020314 	.word	0x20020314

0000fc74 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    fc74:	280a      	cmp	r0, #10
{
    fc76:	b538      	push	{r3, r4, r5, lr}
    fc78:	4604      	mov	r4, r0
    fc7a:	4d07      	ldr	r5, [pc, #28]	; (fc98 <console_out+0x24>)
	if ('\n' == c) {
    fc7c:	d104      	bne.n	fc88 <console_out+0x14>
    fc7e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    fc80:	6843      	ldr	r3, [r0, #4]
    fc82:	210d      	movs	r1, #13
    fc84:	685b      	ldr	r3, [r3, #4]
    fc86:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    fc88:	6828      	ldr	r0, [r5, #0]
    fc8a:	6843      	ldr	r3, [r0, #4]
    fc8c:	b2e1      	uxtb	r1, r4
    fc8e:	685b      	ldr	r3, [r3, #4]
    fc90:	4798      	blx	r3

	return c;
}
    fc92:	4620      	mov	r0, r4
    fc94:	bd38      	pop	{r3, r4, r5, pc}
    fc96:	bf00      	nop
    fc98:	20020318 	.word	0x20020318

0000fc9c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    fc9c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    fc9e:	4c04      	ldr	r4, [pc, #16]	; (fcb0 <uart_console_hook_install+0x14>)
    fca0:	4620      	mov	r0, r4
    fca2:	f001 fd73 	bl	1178c <__stdout_hook_install>
	__printk_hook_install(console_out);
    fca6:	4620      	mov	r0, r4
}
    fca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    fcac:	f7ff babc 	b.w	f228 <__printk_hook_install>
    fcb0:	0000fc75 	.word	0x0000fc75

0000fcb4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    fcb4:	b508      	push	{r3, lr}
    fcb6:	4804      	ldr	r0, [pc, #16]	; (fcc8 <uart_console_init+0x14>)
    fcb8:	f012 f856 	bl	21d68 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    fcbc:	4b03      	ldr	r3, [pc, #12]	; (fccc <uart_console_init+0x18>)
    fcbe:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    fcc0:	f7ff ffec 	bl	fc9c <uart_console_hook_install>

	return 0;
}
    fcc4:	2000      	movs	r0, #0
    fcc6:	bd08      	pop	{r3, pc}
    fcc8:	00027c83 	.word	0x00027c83
    fccc:	20020318 	.word	0x20020318

0000fcd0 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    fcd0:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    fcd2:	2200      	movs	r2, #0
{
    fcd4:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    fcd6:	2101      	movs	r1, #1
    fcd8:	2005      	movs	r0, #5
    fcda:	f000 f9c1 	bl	10060 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    fcde:	2005      	movs	r0, #5
    fce0:	f000 f9ae 	bl	10040 <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    fce4:	2202      	movs	r2, #2
    fce6:	4b05      	ldr	r3, [pc, #20]	; (fcfc <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    fce8:	2000      	movs	r0, #0
    fcea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    fcee:	2203      	movs	r2, #3
    fcf0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    fcf4:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    fcf6:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    fcfa:	bd10      	pop	{r4, pc}
    fcfc:	40005000 	.word	0x40005000

0000fd00 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    fd00:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fd02:	4b10      	ldr	r3, [pc, #64]	; (fd44 <nrf_power_clock_isr+0x44>)
    fd04:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    fd06:	b162      	cbz	r2, fd22 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    fd08:	4a0f      	ldr	r2, [pc, #60]	; (fd48 <nrf_power_clock_isr+0x48>)
    fd0a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    fd0e:	07d1      	lsls	r1, r2, #31
    fd10:	d507      	bpl.n	fd22 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd12:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    fd14:	480d      	ldr	r0, [pc, #52]	; (fd4c <nrf_power_clock_isr+0x4c>)
    fd16:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    fd18:	6883      	ldr	r3, [r0, #8]
    fd1a:	7a5b      	ldrb	r3, [r3, #9]
    fd1c:	b90b      	cbnz	r3, fd22 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    fd1e:	f014 fc91 	bl	24644 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    fd22:	4b0b      	ldr	r3, [pc, #44]	; (fd50 <nrf_power_clock_isr+0x50>)
    fd24:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    fd26:	b15a      	cbz	r2, fd40 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    fd28:	4a07      	ldr	r2, [pc, #28]	; (fd48 <nrf_power_clock_isr+0x48>)
    fd2a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    fd2e:	0792      	lsls	r2, r2, #30
    fd30:	d506      	bpl.n	fd40 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd32:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    fd34:	4807      	ldr	r0, [pc, #28]	; (fd54 <nrf_power_clock_isr+0x54>)
    fd36:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    fd38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    fd3c:	f014 bc82 	b.w	24644 <clkstarted_handle>
}
    fd40:	bd08      	pop	{r3, pc}
    fd42:	bf00      	nop
    fd44:	40005100 	.word	0x40005100
    fd48:	40005000 	.word	0x40005000
    fd4c:	2002d454 	.word	0x2002d454
    fd50:	40005104 	.word	0x40005104
    fd54:	2002d460 	.word	0x2002d460

0000fd58 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    fd58:	2200      	movs	r2, #0
    fd5a:	4b0d      	ldr	r3, [pc, #52]	; (fd90 <rtc1_nrf_isr+0x38>)
    fd5c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    fd60:	f04f 0220 	mov.w	r2, #32
    fd64:	f3ef 8111 	mrs	r1, BASEPRI
    fd68:	f382 8811 	msr	BASEPRI, r2
    fd6c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    fd70:	4a08      	ldr	r2, [pc, #32]	; (fd94 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    fd72:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    fd76:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    fd78:	1ac0      	subs	r0, r0, r3
    fd7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    fd7e:	4403      	add	r3, r0
    fd80:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    fd82:	f381 8811 	msr	BASEPRI, r1
    fd86:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    fd8a:	f013 b907 	b.w	22f9c <z_clock_announce>
    fd8e:	bf00      	nop
    fd90:	40015000 	.word	0x40015000
    fd94:	20020334 	.word	0x20020334

0000fd98 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    fd98:	b570      	push	{r4, r5, r6, lr}
    fd9a:	4818      	ldr	r0, [pc, #96]	; (fdfc <z_clock_driver_init+0x64>)
    fd9c:	f011 ffe4 	bl	21d68 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    fda0:	b348      	cbz	r0, fdf6 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    fda2:	6843      	ldr	r3, [r0, #4]
    fda4:	2100      	movs	r1, #0
    fda6:	681b      	ldr	r3, [r3, #0]
    fda8:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    fdaa:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    fdac:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    fdae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fdb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    fdb6:	4d12      	ldr	r5, [pc, #72]	; (fe00 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    fdb8:	4631      	mov	r1, r6
    fdba:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    fdbe:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    fdc2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    fdc6:	4b0f      	ldr	r3, [pc, #60]	; (fe04 <z_clock_driver_init+0x6c>)
    fdc8:	2015      	movs	r0, #21
    fdca:	601c      	str	r4, [r3, #0]
    fdcc:	4b0e      	ldr	r3, [pc, #56]	; (fe08 <z_clock_driver_init+0x70>)
    fdce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    fdd2:	4622      	mov	r2, r4
    fdd4:	f000 f944 	bl	10060 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    fdd8:	2015      	movs	r0, #21
    fdda:	f000 f931 	bl	10040 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    fdde:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    fde0:	4b0a      	ldr	r3, [pc, #40]	; (fe0c <z_clock_driver_init+0x74>)
    fde2:	601e      	str	r6, [r3, #0]
    fde4:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    fde6:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    fdea:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fdec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    fdf0:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    fdf4:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    fdf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fdfa:	e7fb      	b.n	fdf4 <z_clock_driver_init+0x5c>
    fdfc:	00028531 	.word	0x00028531
    fe00:	40015000 	.word	0x40015000
    fe04:	40015140 	.word	0x40015140
    fe08:	e000e100 	.word	0xe000e100
    fe0c:	40015008 	.word	0x40015008

0000fe10 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    fe10:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    fe12:	4e21      	ldr	r6, [pc, #132]	; (fe98 <z_clock_set_timeout+0x88>)
    fe14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fe18:	bf08      	it	eq
    fe1a:	4630      	moveq	r0, r6
	__asm__ volatile(
    fe1c:	f04f 0320 	mov.w	r3, #32
    fe20:	f3ef 8411 	mrs	r4, BASEPRI
    fe24:	f383 8811 	msr	BASEPRI, r3
    fe28:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    fe2c:	491b      	ldr	r1, [pc, #108]	; (fe9c <z_clock_set_timeout+0x8c>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    fe2e:	4b1c      	ldr	r3, [pc, #112]	; (fea0 <z_clock_set_timeout+0x90>)
    fe30:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
    fe34:	681d      	ldr	r5, [r3, #0]
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    fe36:	3801      	subs	r0, #1
	return (a - b) & COUNTER_MAX;
    fe38:	1b53      	subs	r3, r2, r5
    fe3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
    fe3e:	3501      	adds	r5, #1
    fe40:	442b      	add	r3, r5
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
    fe42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += last_count;
    fe46:	42b0      	cmp	r0, r6
    fe48:	bfd4      	ite	le
    fe4a:	1818      	addle	r0, r3, r0
    fe4c:	1998      	addgt	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    fe4e:	1a82      	subs	r2, r0, r2
    fe50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fe54:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    fe58:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
    fe5a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    fe5e:	d904      	bls.n	fe6a <z_clock_set_timeout+0x5a>
	__asm__ volatile(
    fe60:	f384 8811 	msr	BASEPRI, r4
    fe64:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    fe68:	bd70      	pop	{r4, r5, r6, pc}
     return p_reg->COUNTER;
    fe6a:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    fe6e:	4a0d      	ldr	r2, [pc, #52]	; (fea4 <z_clock_set_timeout+0x94>)
	return (a - b) & COUNTER_MAX;
    fe70:	1ac3      	subs	r3, r0, r3
    fe72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    fe76:	1e5d      	subs	r5, r3, #1
    fe78:	4295      	cmp	r5, r2
    fe7a:	d905      	bls.n	fe88 <z_clock_set_timeout+0x78>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fe7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    fe80:	4b09      	ldr	r3, [pc, #36]	; (fea8 <z_clock_set_timeout+0x98>)
    fe82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fe86:	e7eb      	b.n	fe60 <z_clock_set_timeout+0x50>
		} else if (dt == 1) {
    fe88:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    fe8a:	bf02      	ittt	eq
    fe8c:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    fe8e:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    fe92:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    fe96:	e7e3      	b.n	fe60 <z_clock_set_timeout+0x50>
    fe98:	00fffffe 	.word	0x00fffffe
    fe9c:	40015000 	.word	0x40015000
    fea0:	20020334 	.word	0x20020334
    fea4:	007ffffe 	.word	0x007ffffe
    fea8:	e000e100 	.word	0xe000e100

0000feac <z_clock_elapsed>:
	__asm__ volatile(
    feac:	f04f 0220 	mov.w	r2, #32
    feb0:	f3ef 8311 	mrs	r3, BASEPRI
    feb4:	f382 8811 	msr	BASEPRI, r2
    feb8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    febc:	4a06      	ldr	r2, [pc, #24]	; (fed8 <z_clock_elapsed+0x2c>)
    febe:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    fec2:	4a06      	ldr	r2, [pc, #24]	; (fedc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    fec4:	6812      	ldr	r2, [r2, #0]
    fec6:	1a80      	subs	r0, r0, r2
    fec8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    fecc:	f383 8811 	msr	BASEPRI, r3
    fed0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    fed4:	4770      	bx	lr
    fed6:	bf00      	nop
    fed8:	40015000 	.word	0x40015000
    fedc:	20020334 	.word	0x20020334

0000fee0 <z_timer_cycle_get_32>:
	__asm__ volatile(
    fee0:	f04f 0320 	mov.w	r3, #32
    fee4:	f3ef 8211 	mrs	r2, BASEPRI
    fee8:	f383 8811 	msr	BASEPRI, r3
    feec:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    fef0:	4906      	ldr	r1, [pc, #24]	; (ff0c <z_timer_cycle_get_32+0x2c>)
    fef2:	4b07      	ldr	r3, [pc, #28]	; (ff10 <z_timer_cycle_get_32+0x30>)
    fef4:	6808      	ldr	r0, [r1, #0]
    fef6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    fefa:	f382 8811 	msr	BASEPRI, r2
    fefe:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    ff02:	1a1b      	subs	r3, r3, r0
    ff04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    ff08:	4418      	add	r0, r3
    ff0a:	4770      	bx	lr
    ff0c:	20020334 	.word	0x20020334
    ff10:	40015000 	.word	0x40015000

0000ff14 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    ff14:	4807      	ldr	r0, [pc, #28]	; (ff34 <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    ff16:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    ff18:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    ff1a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    ff1c:	d003      	beq.n	ff26 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    ff1e:	4906      	ldr	r1, [pc, #24]	; (ff38 <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    ff20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    ff24:	600a      	str	r2, [r1, #0]

0000ff26 <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    ff26:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    ff28:	f012 fe82 	bl	22c30 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    ff2c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    ff30:	4770      	bx	lr
    ff32:	0000      	.short	0x0000
    ldr r0, =_kernel
    ff34:	20025cfc 	.word	0x20025cfc
    ldr r1, =_SCS_ICSR
    ff38:	e000ed04 	.word	0xe000ed04

0000ff3c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    ff3c:	4a09      	ldr	r2, [pc, #36]	; (ff64 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    ff3e:	490a      	ldr	r1, [pc, #40]	; (ff68 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    ff40:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    ff42:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    ff44:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    ff46:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ff48:	4908      	ldr	r1, [pc, #32]	; (ff6c <arch_swap+0x30>)
    ff4a:	684b      	ldr	r3, [r1, #4]
    ff4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ff50:	604b      	str	r3, [r1, #4]
    ff52:	2300      	movs	r3, #0
    ff54:	f383 8811 	msr	BASEPRI, r3
    ff58:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    ff5c:	6893      	ldr	r3, [r2, #8]
}
    ff5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
    ff60:	4770      	bx	lr
    ff62:	bf00      	nop
    ff64:	20025cfc 	.word	0x20025cfc
    ff68:	00027a18 	.word	0x00027a18
    ff6c:	e000ed00 	.word	0xe000ed00

0000ff70 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ff70:	4929      	ldr	r1, [pc, #164]	; (10018 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ff72:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ff74:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    ff78:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ff7a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ff7e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    ff82:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    ff86:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    ff8a:	d004      	beq.n	ff96 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    ff8c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    ff90:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    ff94:	e007      	b.n	ffa6 <out_fp_endif>

0000ff96 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    ff96:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    ff9a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    ff9e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    ffa2:	f050 0004 	orrs.w	r0, r0, #4

0000ffa6 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    ffa6:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ffaa:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ffac:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ffb0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ffb4:	4f19      	ldr	r7, [pc, #100]	; (1001c <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ffb6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ffba:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    ffbc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ffbe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ffc0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    ffc2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ffc4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ffc6:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    ffca:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    ffce:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    ffd2:	d105      	bne.n	ffe0 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    ffd4:	2300      	movs	r3, #0
    vmsr fpscr, r3
    ffd6:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    ffda:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    ffde:	e005      	b.n	ffec <in_fp_endif>

0000ffe0 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    ffe0:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    ffe4:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    ffe8:	ec90 8a10 	vldmia	r0, {s16-s31}

0000ffec <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    ffec:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    fff0:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    fff4:	f383 8814 	msr	CONTROL, r3
    isb
    fff8:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    fffc:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    fffe:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   10000:	f014 fb4c 	bl	2469c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   10004:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10008:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   1000c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10010:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   10014:	4770      	bx	lr
   10016:	0000      	.short	0x0000
    ldr r1, =_kernel
   10018:	20025cfc 	.word	0x20025cfc
    ldr v4, =_SCS_ICSR
   1001c:	e000ed04 	.word	0xe000ed04

00010020 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   10020:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10024:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10026:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1002a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1002e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10030:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10034:	2902      	cmp	r1, #2
    beq _oops
   10036:	d0ff      	beq.n	10038 <_oops>

00010038 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10038:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1003a:	f014 fb24 	bl	24686 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1003e:	bd01      	pop	{r0, pc}

00010040 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10040:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   10042:	2b00      	cmp	r3, #0
   10044:	db08      	blt.n	10058 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10046:	2201      	movs	r2, #1
   10048:	f000 001f 	and.w	r0, r0, #31
   1004c:	fa02 f000 	lsl.w	r0, r2, r0
   10050:	4a02      	ldr	r2, [pc, #8]	; (1005c <arch_irq_enable+0x1c>)
   10052:	095b      	lsrs	r3, r3, #5
   10054:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   10058:	4770      	bx	lr
   1005a:	bf00      	nop
   1005c:	e000e100 	.word	0xe000e100

00010060 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10060:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10062:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   10064:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10068:	bfa8      	it	ge
   1006a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   1006e:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10072:	bfb8      	it	lt
   10074:	4b05      	ldrlt	r3, [pc, #20]	; (1008c <z_arm_irq_priority_set+0x2c>)
   10076:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10078:	bfab      	itete	ge
   1007a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1007e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10082:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10086:	5419      	strblt	r1, [r3, r0]
}
   10088:	4770      	bx	lr
   1008a:	bf00      	nop
   1008c:	e000ed14 	.word	0xe000ed14

00010090 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   10090:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   10092:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   10094:	4b04      	ldr	r3, [pc, #16]	; (100a8 <_arch_isr_direct_pm+0x18>)
   10096:	6a18      	ldr	r0, [r3, #32]
   10098:	b118      	cbz	r0, 100a2 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1009a:	2200      	movs	r2, #0
   1009c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   1009e:	f015 fd64 	bl	25b6a <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   100a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   100a4:	bd08      	pop	{r3, pc}
   100a6:	bf00      	nop
   100a8:	20025cfc 	.word	0x20025cfc

000100ac <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   100ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   100ae:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   100b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
   100b2:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
   100b4:	9300      	str	r3, [sp, #0]
   100b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
   100b8:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
   100ba:	f015 ff7b 	bl	25fb4 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   100be:	4a0c      	ldr	r2, [pc, #48]	; (100f0 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   100c0:	f1a4 0320 	sub.w	r3, r4, #32
   100c4:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   100c8:	f022 0201 	bic.w	r2, r2, #1
   100cc:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   100ce:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   100d0:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   100d2:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   100d4:	9a07      	ldr	r2, [sp, #28]
   100d6:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   100d8:	9a08      	ldr	r2, [sp, #32]
   100da:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
   100dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   100e0:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   100e2:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   100e4:	2300      	movs	r3, #0
   100e6:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   100e8:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   100ec:	b002      	add	sp, #8
   100ee:	bd70      	pop	{r4, r5, r6, pc}
   100f0:	00023b97 	.word	0x00023b97

000100f4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   100f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100f8:	461f      	mov	r7, r3
   100fa:	4606      	mov	r6, r0
   100fc:	460c      	mov	r4, r1
   100fe:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   10100:	2300      	movs	r3, #0
   10102:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   10106:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1010a:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1010e:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   10112:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   10116:	f000 fc43 	bl	109a0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   1011a:	4b0a      	ldr	r3, [pc, #40]	; (10144 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
   1011c:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1011e:	4630      	mov	r0, r6
	_current = main_thread;
   10120:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   10122:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   10126:	f014 fab9 	bl	2469c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1012a:	4638      	mov	r0, r7
   1012c:	f384 8809 	msr	PSP, r4
   10130:	2100      	movs	r1, #0
   10132:	b663      	cpsie	if
   10134:	f381 8811 	msr	BASEPRI, r1
   10138:	f3bf 8f6f 	isb	sy
   1013c:	2200      	movs	r2, #0
   1013e:	2300      	movs	r3, #0
   10140:	f013 fd29 	bl	23b96 <z_thread_entry>
   10144:	20025cfc 	.word	0x20025cfc

00010148 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   10148:	4901      	ldr	r1, [pc, #4]	; (10150 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   1014a:	2210      	movs	r2, #16
	str r2, [r1]
   1014c:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   1014e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   10150:	e000ed10 	.word	0xe000ed10

00010154 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   10154:	4040      	eors	r0, r0
	msr BASEPRI, r0
   10156:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   1015a:	bf30      	wfi

	bx lr
   1015c:	4770      	bx	lr
   1015e:	bf00      	nop

00010160 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   10160:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   10164:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   10168:	4672      	mov	r2, lr

	push {r0, lr}
   1016a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   1016c:	f000 fadc 	bl	10728 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   10170:	bd01      	pop	{r0, pc}
   10172:	bf00      	nop

00010174 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10178:	4681      	mov	r9, r0
   1017a:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
   1017c:	460c      	mov	r4, r1
   1017e:	2900      	cmp	r1, #0
   10180:	d07f      	beq.n	10282 <z_arm_fatal_error+0x10e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   10182:	f04f 0801 	mov.w	r8, #1
   10186:	f04f 0300 	mov.w	r3, #0
   1018a:	4a41      	ldr	r2, [pc, #260]	; (10290 <z_arm_fatal_error+0x11c>)
   1018c:	4d41      	ldr	r5, [pc, #260]	; (10294 <z_arm_fatal_error+0x120>)
   1018e:	f368 0302 	bfi	r3, r8, #0, #3
   10192:	1aad      	subs	r5, r5, r2
   10194:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   10198:	f36f 03c5 	bfc	r3, #3, #3
   1019c:	f365 138f 	bfi	r3, r5, #6, #10
   101a0:	f8ad 3000 	strh.w	r3, [sp]
   101a4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   101a8:	483b      	ldr	r0, [pc, #236]	; (10298 <z_arm_fatal_error+0x124>)
   101aa:	6809      	ldr	r1, [r1, #0]
   101ac:	f013 ff0c 	bl	23fc8 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   101b0:	f04f 0300 	mov.w	r3, #0
   101b4:	f368 0302 	bfi	r3, r8, #0, #3
   101b8:	f36f 03c5 	bfc	r3, #3, #3
   101bc:	f365 138f 	bfi	r3, r5, #6, #10
   101c0:	f8ad 3000 	strh.w	r3, [sp]
   101c4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   101c8:	68e1      	ldr	r1, [r4, #12]
   101ca:	4834      	ldr	r0, [pc, #208]	; (1029c <z_arm_fatal_error+0x128>)
   101cc:	f013 fefc 	bl	23fc8 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   101d0:	f04f 0200 	mov.w	r2, #0
   101d4:	f368 0202 	bfi	r2, r8, #0, #3
   101d8:	f36f 02c5 	bfc	r2, #3, #3
   101dc:	f365 128f 	bfi	r2, r5, #6, #10
   101e0:	69e1      	ldr	r1, [r4, #28]
   101e2:	482f      	ldr	r0, [pc, #188]	; (102a0 <z_arm_fatal_error+0x12c>)
   101e4:	f013 fec4 	bl	23f70 <log_1>
   101e8:	4627      	mov	r7, r4
	for (int i = 0; i < 16; i += 4) {
   101ea:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   101ec:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 102ac <z_arm_fatal_error+0x138>
   101f0:	edd7 7a08 	vldr	s15, [r7, #32]
   101f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   101f8:	edcd 7a03 	vstr	s15, [sp, #12]
   101fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   10200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10204:	edcd 7a05 	vstr	s15, [sp, #20]
   10208:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1020c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   10210:	edcd 7a07 	vstr	s15, [sp, #28]
   10214:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   10218:	2208      	movs	r2, #8
   1021a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1021e:	1c73      	adds	r3, r6, #1
   10220:	f368 0a02 	bfi	sl, r8, #0, #3
   10224:	9304      	str	r3, [sp, #16]
   10226:	f36f 0ac5 	bfc	sl, #3, #3
   1022a:	1cb3      	adds	r3, r6, #2
   1022c:	9306      	str	r3, [sp, #24]
   1022e:	f365 1a8f 	bfi	sl, r5, #6, #10
   10232:	1cf3      	adds	r3, r6, #3
   10234:	9602      	str	r6, [sp, #8]
   10236:	9308      	str	r3, [sp, #32]
   10238:	eb0d 0102 	add.w	r1, sp, r2
   1023c:	4653      	mov	r3, sl
   1023e:	4658      	mov	r0, fp
	for (int i = 0; i < 16; i += 4) {
   10240:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   10242:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   10246:	f013 feda 	bl	23ffe <log_n>
	for (int i = 0; i < 16; i += 4) {
   1024a:	2e10      	cmp	r6, #16
   1024c:	f107 0710 	add.w	r7, r7, #16
   10250:	d1ce      	bne.n	101f0 <z_arm_fatal_error+0x7c>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
   10252:	f04f 0200 	mov.w	r2, #0
   10256:	f368 0202 	bfi	r2, r8, #0, #3
   1025a:	f36f 02c5 	bfc	r2, #3, #3
   1025e:	f365 128f 	bfi	r2, r5, #6, #10
   10262:	6e21      	ldr	r1, [r4, #96]	; 0x60
   10264:	480f      	ldr	r0, [pc, #60]	; (102a4 <z_arm_fatal_error+0x130>)
   10266:	f013 fe83 	bl	23f70 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1026a:	f04f 0200 	mov.w	r2, #0
   1026e:	f368 0202 	bfi	r2, r8, #0, #3
   10272:	f36f 02c5 	bfc	r2, #3, #3
   10276:	f365 128f 	bfi	r2, r5, #6, #10
   1027a:	69a1      	ldr	r1, [r4, #24]
   1027c:	480a      	ldr	r0, [pc, #40]	; (102a8 <z_arm_fatal_error+0x134>)
   1027e:	f013 fe77 	bl	23f70 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10282:	4621      	mov	r1, r4
   10284:	4648      	mov	r0, r9
   10286:	f011 fdb9 	bl	21dfc <z_fatal_error>
}
   1028a:	b00b      	add	sp, #44	; 0x2c
   1028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10290:	00026684 	.word	0x00026684
   10294:	000266dc 	.word	0x000266dc
   10298:	0002855d 	.word	0x0002855d
   1029c:	0002858c 	.word	0x0002858c
   102a0:	000285bb 	.word	0x000285bb
   102a4:	0002860a 	.word	0x0002860a
   102a8:	0002861a 	.word	0x0002861a
   102ac:	000285ca 	.word	0x000285ca

000102b0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   102b0:	bf30      	wfi
    b z_SysNmiOnReset
   102b2:	f7ff bffd 	b.w	102b0 <z_SysNmiOnReset>
   102b6:	bf00      	nop

000102b8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   102b8:	4a11      	ldr	r2, [pc, #68]	; (10300 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   102ba:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   102bc:	4b11      	ldr	r3, [pc, #68]	; (10304 <z_arm_prep_c+0x4c>)
   102be:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   102c2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   102c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   102c8:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   102cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   102d0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   102d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   102d8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   102dc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   102e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   102e4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   102e8:	2300      	movs	r3, #0
   102ea:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   102ee:	f011 fe0b 	bl	21f08 <z_bss_zero>
	z_data_copy();
   102f2:	f011 fe13 	bl	21f1c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   102f6:	f000 fb1f 	bl	10938 <z_arm_int_lib_init>
	z_cstart();
   102fa:	f011 fe41 	bl	21f80 <z_cstart>
   102fe:	bf00      	nop
   10300:	0000c000 	.word	0x0000c000
   10304:	e000ed00 	.word	0xe000ed00

00010308 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10308:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   1030a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1030c:	4a0b      	ldr	r2, [pc, #44]	; (1033c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1030e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   10310:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10312:	bf1e      	ittt	ne
	movne	r1, #0
   10314:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10316:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   10318:	f015 fc27 	blne	25b6a <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1031c:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1031e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10322:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10326:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   1032a:	4905      	ldr	r1, [pc, #20]	; (10340 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1032c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1032e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   10330:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   10336:	4903      	ldr	r1, [pc, #12]	; (10344 <_isr_wrapper+0x3c>)
	bx r1
   10338:	4708      	bx	r1
   1033a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1033c:	20025cfc 	.word	0x20025cfc
	ldr r1, =_sw_isr_table
   10340:	00026398 	.word	0x00026398
	ldr r1, =z_arm_int_exit
   10344:	0000ff15 	.word	0x0000ff15

00010348 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   10348:	f013 fde0 	bl	23f0c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1034c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1034e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   10352:	4808      	ldr	r0, [pc, #32]	; (10374 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   10354:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   10358:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1035a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1035e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   10362:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   10364:	4308      	orrs	r0, r1
    msr CONTROL, r0
   10366:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1036a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1036e:	f7ff ffa3 	bl	102b8 <z_arm_prep_c>
   10372:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   10374:	20029190 	.word	0x20029190

00010378 <usage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   10378:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1037a:	f04f 0100 	mov.w	r1, #0
   1037e:	2601      	movs	r6, #1
   10380:	4b40      	ldr	r3, [pc, #256]	; (10484 <usage_fault.isra.2+0x10c>)
   10382:	4c41      	ldr	r4, [pc, #260]	; (10488 <usage_fault.isra.2+0x110>)
   10384:	f366 0102 	bfi	r1, r6, #0, #3
   10388:	1ae4      	subs	r4, r4, r3
   1038a:	f36f 01c5 	bfc	r1, #3, #3
   1038e:	f3c4 04c9 	ubfx	r4, r4, #3, #10

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   10392:	4d3e      	ldr	r5, [pc, #248]	; (1048c <usage_fault.isra.2+0x114>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   10394:	f364 118f 	bfi	r1, r4, #6, #10
   10398:	483d      	ldr	r0, [pc, #244]	; (10490 <usage_fault.isra.2+0x118>)
   1039a:	f013 fddc 	bl	23f56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1039e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   103a0:	0192      	lsls	r2, r2, #6
   103a2:	d50a      	bpl.n	103ba <usage_fault.isra.2+0x42>
		PR_FAULT_INFO("  Division by zero");
   103a4:	f04f 0100 	mov.w	r1, #0
   103a8:	f366 0102 	bfi	r1, r6, #0, #3
   103ac:	f36f 01c5 	bfc	r1, #3, #3
   103b0:	f364 118f 	bfi	r1, r4, #6, #10
   103b4:	4837      	ldr	r0, [pc, #220]	; (10494 <usage_fault.isra.2+0x11c>)
   103b6:	f013 fdce 	bl	23f56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   103ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   103bc:	01db      	lsls	r3, r3, #7
   103be:	d50b      	bpl.n	103d8 <usage_fault.isra.2+0x60>
		PR_FAULT_INFO("  Unaligned memory access");
   103c0:	f04f 0100 	mov.w	r1, #0
   103c4:	2301      	movs	r3, #1
   103c6:	f363 0102 	bfi	r1, r3, #0, #3
   103ca:	f36f 01c5 	bfc	r1, #3, #3
   103ce:	f364 118f 	bfi	r1, r4, #6, #10
   103d2:	4831      	ldr	r0, [pc, #196]	; (10498 <usage_fault.isra.2+0x120>)
   103d4:	f013 fdbf 	bl	23f56 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   103d8:	4d2c      	ldr	r5, [pc, #176]	; (1048c <usage_fault.isra.2+0x114>)
   103da:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   103dc:	02d6      	lsls	r6, r2, #11
   103de:	d50b      	bpl.n	103f8 <usage_fault.isra.2+0x80>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   103e0:	f04f 0100 	mov.w	r1, #0
   103e4:	2301      	movs	r3, #1
   103e6:	f363 0102 	bfi	r1, r3, #0, #3
   103ea:	f36f 01c5 	bfc	r1, #3, #3
   103ee:	f364 118f 	bfi	r1, r4, #6, #10
   103f2:	482a      	ldr	r0, [pc, #168]	; (1049c <usage_fault.isra.2+0x124>)
   103f4:	f013 fdaf 	bl	23f56 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   103f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   103fa:	0318      	lsls	r0, r3, #12
   103fc:	d50b      	bpl.n	10416 <usage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  No coprocessor instructions");
   103fe:	f04f 0100 	mov.w	r1, #0
   10402:	2301      	movs	r3, #1
   10404:	f363 0102 	bfi	r1, r3, #0, #3
   10408:	f36f 01c5 	bfc	r1, #3, #3
   1040c:	f364 118f 	bfi	r1, r4, #6, #10
   10410:	4823      	ldr	r0, [pc, #140]	; (104a0 <usage_fault.isra.2+0x128>)
   10412:	f013 fda0 	bl	23f56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   10416:	4d1d      	ldr	r5, [pc, #116]	; (1048c <usage_fault.isra.2+0x114>)
   10418:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1041a:	0351      	lsls	r1, r2, #13
   1041c:	d50b      	bpl.n	10436 <usage_fault.isra.2+0xbe>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1041e:	f04f 0100 	mov.w	r1, #0
   10422:	2301      	movs	r3, #1
   10424:	f363 0102 	bfi	r1, r3, #0, #3
   10428:	f36f 01c5 	bfc	r1, #3, #3
   1042c:	f364 118f 	bfi	r1, r4, #6, #10
   10430:	481c      	ldr	r0, [pc, #112]	; (104a4 <usage_fault.isra.2+0x12c>)
   10432:	f013 fd90 	bl	23f56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10436:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10438:	039a      	lsls	r2, r3, #14
   1043a:	d50b      	bpl.n	10454 <usage_fault.isra.2+0xdc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1043c:	f04f 0100 	mov.w	r1, #0
   10440:	2301      	movs	r3, #1
   10442:	f363 0102 	bfi	r1, r3, #0, #3
   10446:	f36f 01c5 	bfc	r1, #3, #3
   1044a:	f364 118f 	bfi	r1, r4, #6, #10
   1044e:	4816      	ldr	r0, [pc, #88]	; (104a8 <usage_fault.isra.2+0x130>)
   10450:	f013 fd81 	bl	23f56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   10454:	4d0d      	ldr	r5, [pc, #52]	; (1048c <usage_fault.isra.2+0x114>)
   10456:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10458:	03db      	lsls	r3, r3, #15
   1045a:	d50b      	bpl.n	10474 <usage_fault.isra.2+0xfc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1045c:	f04f 0100 	mov.w	r1, #0
   10460:	2301      	movs	r3, #1
   10462:	f363 0102 	bfi	r1, r3, #0, #3
   10466:	f36f 01c5 	bfc	r1, #3, #3
   1046a:	f364 118f 	bfi	r1, r4, #6, #10
   1046e:	480f      	ldr	r0, [pc, #60]	; (104ac <usage_fault.isra.2+0x134>)
   10470:	f013 fd71 	bl	23f56 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10474:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   10476:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   10478:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1047c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   10480:	62ab      	str	r3, [r5, #40]	; 0x28
}
   10482:	bd70      	pop	{r4, r5, r6, pc}
   10484:	00026684 	.word	0x00026684
   10488:	000266dc 	.word	0x000266dc
   1048c:	e000ed00 	.word	0xe000ed00
   10490:	000287a8 	.word	0x000287a8
   10494:	000287c0 	.word	0x000287c0
   10498:	000287d3 	.word	0x000287d3
   1049c:	000287ed 	.word	0x000287ed
   104a0:	00028817 	.word	0x00028817
   104a4:	00028835 	.word	0x00028835
   104a8:	0002885a 	.word	0x0002885a
   104ac:	00028874 	.word	0x00028874

000104b0 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   104b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104b4:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   104b6:	f04f 0801 	mov.w	r8, #1
   104ba:	f04f 0100 	mov.w	r1, #0
   104be:	4b3d      	ldr	r3, [pc, #244]	; (105b4 <mem_manage_fault.isra.4+0x104>)
   104c0:	4c3d      	ldr	r4, [pc, #244]	; (105b8 <mem_manage_fault.isra.4+0x108>)
   104c2:	f368 0102 	bfi	r1, r8, #0, #3
   104c6:	1ae4      	subs	r4, r4, r3
   104c8:	f36f 01c5 	bfc	r1, #3, #3
   104cc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   104d0:	4d3a      	ldr	r5, [pc, #232]	; (105bc <mem_manage_fault.isra.4+0x10c>)
	PR_FAULT_INFO("***** MPU FAULT *****");
   104d2:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   104d6:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   104d8:	4839      	ldr	r0, [pc, #228]	; (105c0 <mem_manage_fault.isra.4+0x110>)
   104da:	f013 fd3c 	bl	23f56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   104de:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   104e0:	06d1      	lsls	r1, r2, #27
   104e2:	d50a      	bpl.n	104fa <mem_manage_fault.isra.4+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   104e4:	f04f 0100 	mov.w	r1, #0
   104e8:	f368 0102 	bfi	r1, r8, #0, #3
   104ec:	f36f 01c5 	bfc	r1, #3, #3
   104f0:	f364 118f 	bfi	r1, r4, #6, #10
   104f4:	4833      	ldr	r0, [pc, #204]	; (105c4 <mem_manage_fault.isra.4+0x114>)
   104f6:	f013 fd2e 	bl	23f56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   104fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   104fc:	071a      	lsls	r2, r3, #28
   104fe:	d50b      	bpl.n	10518 <mem_manage_fault.isra.4+0x68>
		PR_FAULT_INFO("  Unstacking error");
   10500:	f04f 0100 	mov.w	r1, #0
   10504:	2301      	movs	r3, #1
   10506:	f363 0102 	bfi	r1, r3, #0, #3
   1050a:	f36f 01c5 	bfc	r1, #3, #3
   1050e:	f364 118f 	bfi	r1, r4, #6, #10
   10512:	482d      	ldr	r0, [pc, #180]	; (105c8 <mem_manage_fault.isra.4+0x118>)
   10514:	f013 fd1f 	bl	23f56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10518:	4d28      	ldr	r5, [pc, #160]	; (105bc <mem_manage_fault.isra.4+0x10c>)
   1051a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1051c:	079b      	lsls	r3, r3, #30
   1051e:	d520      	bpl.n	10562 <mem_manage_fault.isra.4+0xb2>
		PR_FAULT_INFO("  Data Access Violation");
   10520:	f04f 0801 	mov.w	r8, #1
   10524:	f04f 0100 	mov.w	r1, #0
   10528:	f368 0102 	bfi	r1, r8, #0, #3
   1052c:	f36f 01c5 	bfc	r1, #3, #3
   10530:	f364 118f 	bfi	r1, r4, #6, #10
   10534:	4825      	ldr	r0, [pc, #148]	; (105cc <mem_manage_fault.isra.4+0x11c>)
   10536:	f013 fd0e 	bl	23f56 <log_0>
		mmfar = SCB->MMFAR;
   1053a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1053c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1053e:	0618      	lsls	r0, r3, #24
   10540:	d50f      	bpl.n	10562 <mem_manage_fault.isra.4+0xb2>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10542:	f04f 0200 	mov.w	r2, #0
   10546:	f368 0202 	bfi	r2, r8, #0, #3
   1054a:	f36f 02c5 	bfc	r2, #3, #3
   1054e:	f364 128f 	bfi	r2, r4, #6, #10
   10552:	481f      	ldr	r0, [pc, #124]	; (105d0 <mem_manage_fault.isra.4+0x120>)
   10554:	f013 fd0c 	bl	23f70 <log_1>
			if (from_hard_fault) {
   10558:	b11f      	cbz	r7, 10562 <mem_manage_fault.isra.4+0xb2>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1055a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1055c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10560:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10562:	4d16      	ldr	r5, [pc, #88]	; (105bc <mem_manage_fault.isra.4+0x10c>)
   10564:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10566:	07d2      	lsls	r2, r2, #31
   10568:	d50b      	bpl.n	10582 <mem_manage_fault.isra.4+0xd2>
		PR_FAULT_INFO("  Instruction Access Violation");
   1056a:	f04f 0100 	mov.w	r1, #0
   1056e:	2301      	movs	r3, #1
   10570:	f363 0102 	bfi	r1, r3, #0, #3
   10574:	f36f 01c5 	bfc	r1, #3, #3
   10578:	f364 118f 	bfi	r1, r4, #6, #10
   1057c:	4815      	ldr	r0, [pc, #84]	; (105d4 <mem_manage_fault.isra.4+0x124>)
   1057e:	f013 fcea 	bl	23f56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10582:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10584:	069b      	lsls	r3, r3, #26
   10586:	d50b      	bpl.n	105a0 <mem_manage_fault.isra.4+0xf0>
		PR_FAULT_INFO(
   10588:	f04f 0100 	mov.w	r1, #0
   1058c:	2301      	movs	r3, #1
   1058e:	f363 0102 	bfi	r1, r3, #0, #3
   10592:	f36f 01c5 	bfc	r1, #3, #3
   10596:	f364 118f 	bfi	r1, r4, #6, #10
   1059a:	480f      	ldr	r0, [pc, #60]	; (105d8 <mem_manage_fault.isra.4+0x128>)
   1059c:	f013 fcdb 	bl	23f56 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   105a0:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   105a2:	4b06      	ldr	r3, [pc, #24]	; (105bc <mem_manage_fault.isra.4+0x10c>)
   105a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   105a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   105a8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   105ac:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   105ae:	7030      	strb	r0, [r6, #0]
}
   105b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105b4:	00026684 	.word	0x00026684
   105b8:	000266dc 	.word	0x000266dc
   105bc:	e000ed00 	.word	0xe000ed00
   105c0:	000286d0 	.word	0x000286d0
   105c4:	000286e6 	.word	0x000286e6
   105c8:	00028719 	.word	0x00028719
   105cc:	0002872c 	.word	0x0002872c
   105d0:	00028744 	.word	0x00028744
   105d4:	0002875a 	.word	0x0002875a
   105d8:	00028779 	.word	0x00028779

000105dc <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   105dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105e0:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   105e2:	f04f 0801 	mov.w	r8, #1
   105e6:	f04f 0100 	mov.w	r1, #0
   105ea:	4b44      	ldr	r3, [pc, #272]	; (106fc <bus_fault.isra.5+0x120>)
   105ec:	4c44      	ldr	r4, [pc, #272]	; (10700 <bus_fault.isra.5+0x124>)
   105ee:	f368 0102 	bfi	r1, r8, #0, #3
   105f2:	1ae4      	subs	r4, r4, r3
   105f4:	f36f 01c5 	bfc	r1, #3, #3
   105f8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   105fc:	4d41      	ldr	r5, [pc, #260]	; (10704 <bus_fault.isra.5+0x128>)
	PR_FAULT_INFO("***** BUS FAULT *****");
   105fe:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10602:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   10604:	4840      	ldr	r0, [pc, #256]	; (10708 <bus_fault.isra.5+0x12c>)
   10606:	f013 fca6 	bl	23f56 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1060a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1060c:	04d1      	lsls	r1, r2, #19
   1060e:	d50a      	bpl.n	10626 <bus_fault.isra.5+0x4a>
		PR_FAULT_INFO("  Stacking error");
   10610:	f04f 0100 	mov.w	r1, #0
   10614:	f368 0102 	bfi	r1, r8, #0, #3
   10618:	f36f 01c5 	bfc	r1, #3, #3
   1061c:	f364 118f 	bfi	r1, r4, #6, #10
   10620:	483a      	ldr	r0, [pc, #232]	; (1070c <bus_fault.isra.5+0x130>)
   10622:	f013 fc98 	bl	23f56 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10626:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10628:	051a      	lsls	r2, r3, #20
   1062a:	d50b      	bpl.n	10644 <bus_fault.isra.5+0x68>
		PR_FAULT_INFO("  Unstacking error");
   1062c:	f04f 0100 	mov.w	r1, #0
   10630:	2301      	movs	r3, #1
   10632:	f363 0102 	bfi	r1, r3, #0, #3
   10636:	f36f 01c5 	bfc	r1, #3, #3
   1063a:	f364 118f 	bfi	r1, r4, #6, #10
   1063e:	4834      	ldr	r0, [pc, #208]	; (10710 <bus_fault.isra.5+0x134>)
   10640:	f013 fc89 	bl	23f56 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10644:	4d2f      	ldr	r5, [pc, #188]	; (10704 <bus_fault.isra.5+0x128>)
   10646:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10648:	059b      	lsls	r3, r3, #22
   1064a:	d520      	bpl.n	1068e <bus_fault.isra.5+0xb2>
		PR_FAULT_INFO("  Precise data bus error");
   1064c:	f04f 0801 	mov.w	r8, #1
   10650:	f04f 0100 	mov.w	r1, #0
   10654:	f368 0102 	bfi	r1, r8, #0, #3
   10658:	f36f 01c5 	bfc	r1, #3, #3
   1065c:	f364 118f 	bfi	r1, r4, #6, #10
   10660:	482c      	ldr	r0, [pc, #176]	; (10714 <bus_fault.isra.5+0x138>)
   10662:	f013 fc78 	bl	23f56 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   10666:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10668:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1066a:	0418      	lsls	r0, r3, #16
   1066c:	d50f      	bpl.n	1068e <bus_fault.isra.5+0xb2>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1066e:	f04f 0200 	mov.w	r2, #0
   10672:	f368 0202 	bfi	r2, r8, #0, #3
   10676:	f36f 02c5 	bfc	r2, #3, #3
   1067a:	f364 128f 	bfi	r2, r4, #6, #10
   1067e:	4826      	ldr	r0, [pc, #152]	; (10718 <bus_fault.isra.5+0x13c>)
   10680:	f013 fc76 	bl	23f70 <log_1>
			if (from_hard_fault) {
   10684:	b11f      	cbz	r7, 1068e <bus_fault.isra.5+0xb2>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10686:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10688:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1068c:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1068e:	4d1d      	ldr	r5, [pc, #116]	; (10704 <bus_fault.isra.5+0x128>)
   10690:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10692:	0559      	lsls	r1, r3, #21
   10694:	d50b      	bpl.n	106ae <bus_fault.isra.5+0xd2>
		PR_FAULT_INFO("  Imprecise data bus error");
   10696:	f04f 0100 	mov.w	r1, #0
   1069a:	2301      	movs	r3, #1
   1069c:	f363 0102 	bfi	r1, r3, #0, #3
   106a0:	f36f 01c5 	bfc	r1, #3, #3
   106a4:	f364 118f 	bfi	r1, r4, #6, #10
   106a8:	481c      	ldr	r0, [pc, #112]	; (1071c <bus_fault.isra.5+0x140>)
   106aa:	f013 fc54 	bl	23f56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   106ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   106b0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   106b4:	d014      	beq.n	106e0 <bus_fault.isra.5+0x104>
		PR_FAULT_INFO("  Instruction bus error");
   106b6:	f04f 0100 	mov.w	r1, #0
   106ba:	2301      	movs	r3, #1
   106bc:	f363 0102 	bfi	r1, r3, #0, #3
   106c0:	f36f 01c5 	bfc	r1, #3, #3
   106c4:	4816      	ldr	r0, [pc, #88]	; (10720 <bus_fault.isra.5+0x144>)
   106c6:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   106ca:	f013 fc44 	bl	23f56 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   106ce:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   106d0:	4a0c      	ldr	r2, [pc, #48]	; (10704 <bus_fault.isra.5+0x128>)
   106d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   106d4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   106d8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   106da:	7030      	strb	r0, [r6, #0]
}
   106dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   106e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   106e2:	0492      	lsls	r2, r2, #18
   106e4:	d5f3      	bpl.n	106ce <bus_fault.isra.5+0xf2>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   106e6:	f04f 0100 	mov.w	r1, #0
   106ea:	2201      	movs	r2, #1
   106ec:	f362 0102 	bfi	r1, r2, #0, #3
   106f0:	f363 01c5 	bfi	r1, r3, #3, #3
   106f4:	f364 118f 	bfi	r1, r4, #6, #10
   106f8:	480a      	ldr	r0, [pc, #40]	; (10724 <bus_fault.isra.5+0x148>)
   106fa:	e7e6      	b.n	106ca <bus_fault.isra.5+0xee>
   106fc:	00026684 	.word	0x00026684
   10700:	000266dc 	.word	0x000266dc
   10704:	e000ed00 	.word	0xe000ed00
   10708:	00028648 	.word	0x00028648
   1070c:	0002865e 	.word	0x0002865e
   10710:	00028719 	.word	0x00028719
   10714:	0002866f 	.word	0x0002866f
   10718:	00028688 	.word	0x00028688
   1071c:	0002869d 	.word	0x0002869d
   10720:	000286b8 	.word	0x000286b8
   10724:	00028779 	.word	0x00028779

00010728 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   10728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1072c:	4b70      	ldr	r3, [pc, #448]	; (108f0 <z_arm_fault+0x1c8>)
{
   1072e:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10730:	685f      	ldr	r7, [r3, #4]
{
   10732:	4606      	mov	r6, r0
   10734:	4688      	mov	r8, r1
   10736:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10738:	f3c7 0708 	ubfx	r7, r7, #0, #9
   1073c:	2500      	movs	r5, #0
   1073e:	f385 8811 	msr	BASEPRI, r5
   10742:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10746:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1074a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1074e:	d12c      	bne.n	107aa <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   10750:	f012 0301 	ands.w	r3, r2, #1
   10754:	d129      	bne.n	107aa <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   10756:	0662      	lsls	r2, r4, #25
   10758:	d404      	bmi.n	10764 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1075a:	0723      	lsls	r3, r4, #28
   1075c:	d523      	bpl.n	107a6 <z_arm_fault+0x7e>
			ptr_esf = (z_arch_esf_t *)psp;
   1075e:	4646      	mov	r6, r8
	*nested_exc = false;
   10760:	2500      	movs	r5, #0
   10762:	e012      	b.n	1078a <z_arm_fault+0x62>
		PR_FAULT_INFO("Exception occurred in Secure State");
   10764:	2201      	movs	r2, #1
   10766:	f04f 0100 	mov.w	r1, #0
   1076a:	f362 0102 	bfi	r1, r2, #0, #3
   1076e:	f363 01c5 	bfi	r1, r3, #3, #3
   10772:	4a60      	ldr	r2, [pc, #384]	; (108f4 <z_arm_fault+0x1cc>)
   10774:	4b60      	ldr	r3, [pc, #384]	; (108f8 <z_arm_fault+0x1d0>)
   10776:	4861      	ldr	r0, [pc, #388]	; (108fc <z_arm_fault+0x1d4>)
   10778:	1a9b      	subs	r3, r3, r2
   1077a:	08db      	lsrs	r3, r3, #3
   1077c:	f363 118f 	bfi	r1, r3, #6, #10
   10780:	f013 fbe9 	bl	23f56 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   10784:	f014 0504 	ands.w	r5, r4, #4
   10788:	d1e9      	bne.n	1075e <z_arm_fault+0x36>
	*recoverable = false;
   1078a:	2300      	movs	r3, #0
   1078c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   10790:	1efb      	subs	r3, r7, #3
   10792:	2b09      	cmp	r3, #9
   10794:	f200 808e 	bhi.w	108b4 <z_arm_fault+0x18c>
   10798:	e8df f003 	tbb	[pc, r3]
   1079c:	6f767209 	.word	0x6f767209
   107a0:	8c8c8c8c 	.word	0x8c8c8c8c
   107a4:	7a8c      	.short	0x7a8c
			*nested_exc = true;
   107a6:	2501      	movs	r5, #1
   107a8:	e7ef      	b.n	1078a <z_arm_fault+0x62>
		return NULL;
   107aa:	462e      	mov	r6, r5
   107ac:	e7ed      	b.n	1078a <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
   107ae:	f04f 0801 	mov.w	r8, #1
   107b2:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
   107b6:	2400      	movs	r4, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   107b8:	4b4e      	ldr	r3, [pc, #312]	; (108f4 <z_arm_fault+0x1cc>)
   107ba:	4f4f      	ldr	r7, [pc, #316]	; (108f8 <z_arm_fault+0x1d0>)
   107bc:	f368 0102 	bfi	r1, r8, #0, #3
   107c0:	1aff      	subs	r7, r7, r3
   107c2:	f36f 01c5 	bfc	r1, #3, #3
   107c6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   107ca:	f367 118f 	bfi	r1, r7, #6, #10
   107ce:	484c      	ldr	r0, [pc, #304]	; (10900 <z_arm_fault+0x1d8>)
   107d0:	f013 fbc1 	bl	23f56 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   107d4:	4a46      	ldr	r2, [pc, #280]	; (108f0 <z_arm_fault+0x1c8>)
	*recoverable = false;
   107d6:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   107da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   107dc:	f013 0302 	ands.w	r3, r3, #2
   107e0:	d024      	beq.n	1082c <z_arm_fault+0x104>
		PR_EXC("  Bus fault on vector table read");
   107e2:	f04f 0100 	mov.w	r1, #0
   107e6:	f368 0102 	bfi	r1, r8, #0, #3
   107ea:	f364 01c5 	bfi	r1, r4, #3, #3
   107ee:	f367 118f 	bfi	r1, r7, #6, #10
   107f2:	4844      	ldr	r0, [pc, #272]	; (10904 <z_arm_fault+0x1dc>)
   107f4:	f013 fbaf 	bl	23f56 <log_0>
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   107f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107fc:	b99b      	cbnz	r3, 10826 <z_arm_fault+0xfe>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   107fe:	2268      	movs	r2, #104	; 0x68
   10800:	4631      	mov	r1, r6
   10802:	a802      	add	r0, sp, #8
   10804:	f014 f8ec 	bl	249e0 <memcpy>
   10808:	9b09      	ldr	r3, [sp, #36]	; 0x24
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1080a:	2d00      	cmp	r5, #0
   1080c:	d06a      	beq.n	108e4 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1080e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   10812:	b922      	cbnz	r2, 1081e <z_arm_fault+0xf6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   10814:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10818:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1081c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1081e:	a902      	add	r1, sp, #8
   10820:	4620      	mov	r0, r4
   10822:	f7ff fca7 	bl	10174 <z_arm_fatal_error>
}
   10826:	b01c      	add	sp, #112	; 0x70
   10828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1082c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   1082e:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   10832:	d0e4      	beq.n	107fe <z_arm_fault+0xd6>
		PR_EXC("  Fault escalation (see below)");
   10834:	f04f 0100 	mov.w	r1, #0
   10838:	f368 0102 	bfi	r1, r8, #0, #3
   1083c:	f363 01c5 	bfi	r1, r3, #3, #3
   10840:	f367 118f 	bfi	r1, r7, #6, #10
   10844:	4830      	ldr	r0, [pc, #192]	; (10908 <z_arm_fault+0x1e0>)
   10846:	f013 fb86 	bl	23f56 <log_0>
		if (SCB_MMFSR != 0) {
   1084a:	4b30      	ldr	r3, [pc, #192]	; (1090c <z_arm_fault+0x1e4>)
   1084c:	781b      	ldrb	r3, [r3, #0]
   1084e:	b133      	cbz	r3, 1085e <z_arm_fault+0x136>
			reason = mem_manage_fault(esf, 1, recoverable);
   10850:	4640      	mov	r0, r8
   10852:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10856:	f7ff fe2b 	bl	104b0 <mem_manage_fault.isra.4>
   1085a:	4604      	mov	r4, r0
   1085c:	e7cc      	b.n	107f8 <z_arm_fault+0xd0>
		} else if (SCB_BFSR != 0) {
   1085e:	4b2c      	ldr	r3, [pc, #176]	; (10910 <z_arm_fault+0x1e8>)
   10860:	781b      	ldrb	r3, [r3, #0]
   10862:	b12b      	cbz	r3, 10870 <z_arm_fault+0x148>
			reason = bus_fault(esf, 1, recoverable);
   10864:	4640      	mov	r0, r8
   10866:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1086a:	f7ff feb7 	bl	105dc <bus_fault.isra.5>
   1086e:	e7f4      	b.n	1085a <z_arm_fault+0x132>
		} else if (SCB_UFSR != 0) {
   10870:	4b28      	ldr	r3, [pc, #160]	; (10914 <z_arm_fault+0x1ec>)
   10872:	881c      	ldrh	r4, [r3, #0]
   10874:	b2a4      	uxth	r4, r4
   10876:	2c00      	cmp	r4, #0
   10878:	d0be      	beq.n	107f8 <z_arm_fault+0xd0>
		reason = usage_fault(esf);
   1087a:	f7ff fd7d 	bl	10378 <usage_fault.isra.2>
   1087e:	e7ec      	b.n	1085a <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   10880:	f10d 0107 	add.w	r1, sp, #7
   10884:	2000      	movs	r0, #0
   10886:	e7e6      	b.n	10856 <z_arm_fault+0x12e>
		reason = bus_fault(esf, 0, recoverable);
   10888:	f10d 0107 	add.w	r1, sp, #7
   1088c:	2000      	movs	r0, #0
   1088e:	e7ec      	b.n	1086a <z_arm_fault+0x142>
	PR_FAULT_INFO(
   10890:	2301      	movs	r3, #1
   10892:	f04f 0100 	mov.w	r1, #0
   10896:	4a17      	ldr	r2, [pc, #92]	; (108f4 <z_arm_fault+0x1cc>)
   10898:	f363 0102 	bfi	r1, r3, #0, #3
   1089c:	4b16      	ldr	r3, [pc, #88]	; (108f8 <z_arm_fault+0x1d0>)
   1089e:	f36f 01c5 	bfc	r1, #3, #3
   108a2:	1a9b      	subs	r3, r3, r2
   108a4:	08db      	lsrs	r3, r3, #3
   108a6:	f363 118f 	bfi	r1, r3, #6, #10
   108aa:	481b      	ldr	r0, [pc, #108]	; (10918 <z_arm_fault+0x1f0>)
   108ac:	f013 fb53 	bl	23f56 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   108b0:	2400      	movs	r4, #0
   108b2:	e7a1      	b.n	107f8 <z_arm_fault+0xd0>
	PR_FAULT_INFO("***** %s %d) *****",
   108b4:	2201      	movs	r2, #1
   108b6:	f04f 0300 	mov.w	r3, #0
   108ba:	490e      	ldr	r1, [pc, #56]	; (108f4 <z_arm_fault+0x1cc>)
   108bc:	f362 0302 	bfi	r3, r2, #0, #3
   108c0:	4a0d      	ldr	r2, [pc, #52]	; (108f8 <z_arm_fault+0x1d0>)
   108c2:	4816      	ldr	r0, [pc, #88]	; (1091c <z_arm_fault+0x1f4>)
   108c4:	1a52      	subs	r2, r2, r1
   108c6:	4916      	ldr	r1, [pc, #88]	; (10920 <z_arm_fault+0x1f8>)
   108c8:	08d2      	lsrs	r2, r2, #3
   108ca:	f36f 03c5 	bfc	r3, #3, #3
   108ce:	f362 138f 	bfi	r3, r2, #6, #10
   108d2:	2f0f      	cmp	r7, #15
   108d4:	bfc8      	it	gt
   108d6:	4601      	movgt	r1, r0
   108d8:	f1a7 0210 	sub.w	r2, r7, #16
   108dc:	4811      	ldr	r0, [pc, #68]	; (10924 <z_arm_fault+0x1fc>)
   108de:	f013 fb5b 	bl	23f98 <log_2>
   108e2:	e7e5      	b.n	108b0 <z_arm_fault+0x188>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   108e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   108e8:	f023 0301 	bic.w	r3, r3, #1
   108ec:	e796      	b.n	1081c <z_arm_fault+0xf4>
   108ee:	bf00      	nop
   108f0:	e000ed00 	.word	0xe000ed00
   108f4:	00026684 	.word	0x00026684
   108f8:	000266dc 	.word	0x000266dc
   108fc:	0002889f 	.word	0x0002889f
   10900:	000288c2 	.word	0x000288c2
   10904:	000288d9 	.word	0x000288d9
   10908:	000288fa 	.word	0x000288fa
   1090c:	e000ed28 	.word	0xe000ed28
   10910:	e000ed29 	.word	0xe000ed29
   10914:	e000ed2a 	.word	0xe000ed2a
   10918:	00028919 	.word	0x00028919
   1091c:	00028964 	.word	0x00028964
   10920:	0002894f 	.word	0x0002894f
   10924:	0002897d 	.word	0x0002897d

00010928 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10928:	4a02      	ldr	r2, [pc, #8]	; (10934 <z_arm_fault_init+0xc>)
   1092a:	6953      	ldr	r3, [r2, #20]
   1092c:	f043 0310 	orr.w	r3, r3, #16
   10930:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   10932:	4770      	bx	lr
   10934:	e000ed00 	.word	0xe000ed00

00010938 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   10938:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1093a:	2120      	movs	r1, #32
   1093c:	4803      	ldr	r0, [pc, #12]	; (1094c <z_arm_int_lib_init+0x14>)
   1093e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10940:	3301      	adds	r3, #1
   10942:	2b41      	cmp	r3, #65	; 0x41
   10944:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10948:	d1f9      	bne.n	1093e <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1094a:	4770      	bx	lr
   1094c:	e000e100 	.word	0xe000e100

00010950 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   10950:	b538      	push	{r3, r4, r5, lr}
   10952:	4605      	mov	r5, r0
	__asm__ volatile(
   10954:	f04f 0320 	mov.w	r3, #32
   10958:	f3ef 8411 	mrs	r4, BASEPRI
   1095c:	f383 8811 	msr	BASEPRI, r3
   10960:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   10964:	f015 fb54 	bl	26010 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   10968:	4b0b      	ldr	r3, [pc, #44]	; (10998 <z_impl_k_thread_abort+0x48>)
   1096a:	689b      	ldr	r3, [r3, #8]
   1096c:	42ab      	cmp	r3, r5
   1096e:	d10d      	bne.n	1098c <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   10970:	4b0a      	ldr	r3, [pc, #40]	; (1099c <z_impl_k_thread_abort+0x4c>)
   10972:	685a      	ldr	r2, [r3, #4]
   10974:	f3c2 0208 	ubfx	r2, r2, #0, #9
   10978:	b922      	cbnz	r2, 10984 <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
   1097a:	f012 f959 	bl	22c30 <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   1097e:	4620      	mov	r0, r4
   10980:	f7ff fadc 	bl	ff3c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10984:	685a      	ldr	r2, [r3, #4]
   10986:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1098a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   1098c:	4620      	mov	r0, r4
}
   1098e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   10992:	f015 ba4a 	b.w	25e2a <z_reschedule_irqlock>
   10996:	bf00      	nop
   10998:	20025cfc 	.word	0x20025cfc
   1099c:	e000ed00 	.word	0xe000ed00

000109a0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   109a0:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   109a2:	4b0e      	ldr	r3, [pc, #56]	; (109dc <z_arm_configure_static_mpu_regions+0x3c>)
{
   109a4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   109a6:	9302      	str	r3, [sp, #8]
   109a8:	4b0d      	ldr	r3, [pc, #52]	; (109e0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   109aa:	4c0e      	ldr	r4, [pc, #56]	; (109e4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   109ac:	9303      	str	r3, [sp, #12]
   109ae:	4b0e      	ldr	r3, [pc, #56]	; (109e8 <z_arm_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
   109b0:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
   109b2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   109b4:	ab02      	add	r3, sp, #8
   109b6:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   109ba:	4a0c      	ldr	r2, [pc, #48]	; (109ec <z_arm_configure_static_mpu_regions+0x4c>)
   109bc:	4623      	mov	r3, r4
   109be:	2101      	movs	r1, #1
   109c0:	f000 f8a0 	bl	10b04 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   109c4:	2300      	movs	r3, #0
   109c6:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   109c8:	4b09      	ldr	r3, [pc, #36]	; (109f0 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   109ca:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   109cc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   109ce:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   109d0:	9305      	str	r3, [sp, #20]
   109d2:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   109d4:	f000 f966 	bl	10ca4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   109d8:	b008      	add	sp, #32
   109da:	bd10      	pop	{r4, pc}
   109dc:	20020000 	.word	0x20020000
   109e0:	00000000 	.word	0x00000000
   109e4:	20040000 	.word	0x20040000
   109e8:	00010006 	.word	0x00010006
   109ec:	20020000 	.word	0x20020000
   109f0:	20020000 	.word	0x20020000

000109f4 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   109f4:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   109f6:	f04f 0200 	mov.w	r2, #0
   109fa:	2301      	movs	r3, #1
   109fc:	4908      	ldr	r1, [pc, #32]	; (10a20 <region_allocate_and_init.part.0+0x2c>)
   109fe:	f363 0202 	bfi	r2, r3, #0, #3
   10a02:	4b08      	ldr	r3, [pc, #32]	; (10a24 <region_allocate_and_init.part.0+0x30>)
   10a04:	f36f 02c5 	bfc	r2, #3, #3
   10a08:	1a5b      	subs	r3, r3, r1
   10a0a:	08db      	lsrs	r3, r3, #3
   10a0c:	4601      	mov	r1, r0
   10a0e:	f363 128f 	bfi	r2, r3, #6, #10
   10a12:	4805      	ldr	r0, [pc, #20]	; (10a28 <region_allocate_and_init.part.0+0x34>)
   10a14:	f013 faac 	bl	23f70 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10a18:	f06f 0015 	mvn.w	r0, #21
   10a1c:	bd08      	pop	{r3, pc}
   10a1e:	bf00      	nop
   10a20:	00026684 	.word	0x00026684
   10a24:	000266cc 	.word	0x000266cc
   10a28:	000289da 	.word	0x000289da

00010a2c <mpu_configure_region>:
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, u32_t base, u32_t size)
{
	p_attr->rbar = attr->rbar &
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
   10a2c:	7a8b      	ldrb	r3, [r1, #10]
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
   10a2e:	b470      	push	{r4, r5, r6}
   10a30:	f003 0607 	and.w	r6, r3, #7
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   10a34:	680c      	ldr	r4, [r1, #0]
   10a36:	684b      	ldr	r3, [r1, #4]
	p_attr->rbar = attr->rbar &
   10a38:	7a0a      	ldrb	r2, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   10a3a:	f024 041f 	bic.w	r4, r4, #31
   10a3e:	3b01      	subs	r3, #1
   10a40:	4423      	add	r3, r4
	if (index > (get_num_regions() - 1)) {
   10a42:	280f      	cmp	r0, #15
	p_attr->rbar = attr->rbar &
   10a44:	f002 021f 	and.w	r2, r2, #31
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   10a48:	f023 031f 	bic.w	r3, r3, #31
   10a4c:	d902      	bls.n	10a54 <mpu_configure_region+0x28>
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   10a4e:	bc70      	pop	{r4, r5, r6}
   10a50:	f7ff bfd0 	b.w	109f4 <region_allocate_and_init.part.0>
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   10a54:	4905      	ldr	r1, [pc, #20]	; (10a6c <mpu_configure_region+0x40>)
		| MPU_RLAR_EN_Msk
   10a56:	f043 0301 	orr.w	r3, r3, #1
		| (region_conf->attr.rbar &
   10a5a:	4322      	orrs	r2, r4
		| MPU_RLAR_EN_Msk
   10a5c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
   10a60:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   10a62:	60ca      	str	r2, [r1, #12]
   10a64:	bc70      	pop	{r4, r5, r6}
  mpu->RLAR = rlar;
   10a66:	610b      	str	r3, [r1, #16]
   10a68:	4770      	bx	lr
   10a6a:	bf00      	nop
   10a6c:	e000ed90 	.word	0xe000ed90

00010a70 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10a70:	2205      	movs	r2, #5
   10a72:	4b03      	ldr	r3, [pc, #12]	; (10a80 <arm_core_mpu_enable+0x10>)
   10a74:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   10a76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10a7a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10a7e:	4770      	bx	lr
   10a80:	e000ed90 	.word	0xe000ed90

00010a84 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10a84:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10a88:	2200      	movs	r2, #0
   10a8a:	4b01      	ldr	r3, [pc, #4]	; (10a90 <arm_core_mpu_disable+0xc>)
   10a8c:	605a      	str	r2, [r3, #4]
}
   10a8e:	4770      	bx	lr
   10a90:	e000ed90 	.word	0xe000ed90

00010a94 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10a94:	4917      	ldr	r1, [pc, #92]	; (10af4 <arm_mpu_init+0x60>)
{
   10a96:	b570      	push	{r4, r5, r6, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   10a98:	680c      	ldr	r4, [r1, #0]
   10a9a:	2c10      	cmp	r4, #16
   10a9c:	d827      	bhi.n	10aee <arm_mpu_init+0x5a>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   10a9e:	f7ff fff1 	bl	10a84 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10aa2:	2500      	movs	r5, #0
	MPU->MAIR0 =
   10aa4:	4a14      	ldr	r2, [pc, #80]	; (10af8 <arm_mpu_init+0x64>)
   10aa6:	4b15      	ldr	r3, [pc, #84]	; (10afc <arm_mpu_init+0x68>)
   10aa8:	6849      	ldr	r1, [r1, #4]
   10aaa:	6313      	str	r3, [r2, #48]	; 0x30
   10aac:	42ac      	cmp	r4, r5
   10aae:	f101 0610 	add.w	r6, r1, #16
   10ab2:	d105      	bne.n	10ac0 <arm_mpu_init+0x2c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   10ab4:	4b12      	ldr	r3, [pc, #72]	; (10b00 <arm_mpu_init+0x6c>)
   10ab6:	701c      	strb	r4, [r3, #0]


	arm_core_mpu_enable();
   10ab8:	f7ff ffda 	bl	10a70 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   10abc:	2000      	movs	r0, #0
}
   10abe:	bd70      	pop	{r4, r5, r6, pc}
		| (region_conf->attr.rbar &
   10ac0:	7a08      	ldrb	r0, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10ac2:	f856 3c10 	ldr.w	r3, [r6, #-16]
		| (region_conf->attr.rbar &
   10ac6:	f000 011f 	and.w	r1, r0, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10aca:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   10ace:	4319      	orrs	r1, r3
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10ad0:	f856 3c04 	ldr.w	r3, [r6, #-4]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10ad4:	0940      	lsrs	r0, r0, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10ad6:	f023 031f 	bic.w	r3, r3, #31
		| MPU_RLAR_EN_Msk
   10ada:	f043 0301 	orr.w	r3, r3, #1
   10ade:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  mpu->RNR = rnr;
   10ae2:	6095      	str	r5, [r2, #8]
  mpu->RBAR = rbar;
   10ae4:	60d1      	str	r1, [r2, #12]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10ae6:	3501      	adds	r5, #1
  mpu->RLAR = rlar;
   10ae8:	6113      	str	r3, [r2, #16]
   10aea:	4631      	mov	r1, r6
   10aec:	e7de      	b.n	10aac <arm_mpu_init+0x18>
		return -1;
   10aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10af2:	e7e4      	b.n	10abe <arm_mpu_init+0x2a>
   10af4:	000267a4 	.word	0x000267a4
   10af8:	e000ed90 	.word	0xe000ed90
   10afc:	0044ffaa 	.word	0x0044ffaa
   10b00:	200273c0 	.word	0x200273c0

00010b04 <arm_core_mpu_configure_static_mpu_regions>:
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10b04:	4b61      	ldr	r3, [pc, #388]	; (10c8c <arm_core_mpu_configure_static_mpu_regions+0x188>)
{
   10b06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b0a:	4681      	mov	r9, r0
   10b0c:	468a      	mov	sl, r1
	for (i = 0; i < regions_num; i++) {
   10b0e:	2700      	movs	r7, #0
   10b10:	4698      	mov	r8, r3
	int reg_index = start_reg_index;
   10b12:	781c      	ldrb	r4, [r3, #0]
	MPU->RNR = index;
   10b14:	4d5e      	ldr	r5, [pc, #376]	; (10c90 <arm_core_mpu_configure_static_mpu_regions+0x18c>)
	for (i = 0; i < regions_num; i++) {
   10b16:	4557      	cmp	r7, sl
   10b18:	da3c      	bge.n	10b94 <arm_core_mpu_configure_static_mpu_regions+0x90>
		if (regions[i]->size == 0U) {
   10b1a:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
   10b1e:	685e      	ldr	r6, [r3, #4]
   10b20:	2e00      	cmp	r6, #0
   10b22:	d05c      	beq.n	10bde <arm_core_mpu_configure_static_mpu_regions+0xda>
		&&
   10b24:	2e1f      	cmp	r6, #31
   10b26:	d922      	bls.n	10b6e <arm_core_mpu_configure_static_mpu_regions+0x6a>
		&&
   10b28:	06f1      	lsls	r1, r6, #27
   10b2a:	d120      	bne.n	10b6e <arm_core_mpu_configure_static_mpu_regions+0x6a>
		((part->start &
   10b2c:	681b      	ldr	r3, [r3, #0]
		&&
   10b2e:	06da      	lsls	r2, r3, #27
   10b30:	d11d      	bne.n	10b6e <arm_core_mpu_configure_static_mpu_regions+0x6a>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10b32:	4618      	mov	r0, r3
   10b34:	9301      	str	r3, [sp, #4]
   10b36:	f013 fdb9 	bl	246ac <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10b3a:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10b3c:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10b3e:	18f0      	adds	r0, r6, r3
   10b40:	3801      	subs	r0, #1
   10b42:	f013 fdb3 	bl	246ac <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10b46:	4583      	cmp	fp, r0
   10b48:	d029      	beq.n	10b9e <arm_core_mpu_configure_static_mpu_regions+0x9a>
	return -EINVAL;
   10b4a:	f06f 0b15 	mvn.w	fp, #21
			LOG_ERR("Invalid underlying region index %u",
   10b4e:	2301      	movs	r3, #1
   10b50:	f04f 0200 	mov.w	r2, #0
   10b54:	494f      	ldr	r1, [pc, #316]	; (10c94 <arm_core_mpu_configure_static_mpu_regions+0x190>)
   10b56:	f363 0202 	bfi	r2, r3, #0, #3
   10b5a:	4b4f      	ldr	r3, [pc, #316]	; (10c98 <arm_core_mpu_configure_static_mpu_regions+0x194>)
   10b5c:	f36f 02c5 	bfc	r2, #3, #3
   10b60:	1a5b      	subs	r3, r3, r1
   10b62:	08db      	lsrs	r3, r3, #3
   10b64:	f363 128f 	bfi	r2, r3, #6, #10
   10b68:	4659      	mov	r1, fp
   10b6a:	484c      	ldr	r0, [pc, #304]	; (10c9c <arm_core_mpu_configure_static_mpu_regions+0x198>)
   10b6c:	e00e      	b.n	10b8c <arm_core_mpu_configure_static_mpu_regions+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10b6e:	2301      	movs	r3, #1
   10b70:	f04f 0200 	mov.w	r2, #0
   10b74:	4947      	ldr	r1, [pc, #284]	; (10c94 <arm_core_mpu_configure_static_mpu_regions+0x190>)
   10b76:	f363 0202 	bfi	r2, r3, #0, #3
   10b7a:	4b47      	ldr	r3, [pc, #284]	; (10c98 <arm_core_mpu_configure_static_mpu_regions+0x194>)
   10b7c:	f36f 02c5 	bfc	r2, #3, #3
   10b80:	1a5b      	subs	r3, r3, r1
   10b82:	4639      	mov	r1, r7
   10b84:	08db      	lsrs	r3, r3, #3
   10b86:	4846      	ldr	r0, [pc, #280]	; (10ca0 <arm_core_mpu_configure_static_mpu_regions+0x19c>)
   10b88:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   10b8c:	f013 f9f0 	bl	23f70 <log_1>
			return -EINVAL;
   10b90:	f06f 0415 	mvn.w	r4, #21
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10b94:	f888 4000 	strb.w	r4, [r8]
}
   10b98:	b003      	add	sp, #12
   10b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   10b9e:	f11b 0f16 	cmn.w	fp, #22
   10ba2:	d0d4      	beq.n	10b4e <arm_core_mpu_configure_static_mpu_regions+0x4a>
			(u_reg_index > (reg_index - 1))) {
   10ba4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   10ba6:	455b      	cmp	r3, fp
   10ba8:	dbd1      	blt.n	10b4e <arm_core_mpu_configure_static_mpu_regions+0x4a>
	MPU->RNR = index;
   10baa:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10bae:	f8d5 c00c 	ldr.w	ip, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10bb2:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
	MPU->RNR = index;
   10bb6:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10bba:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10bbc:	f02c 0c1f 	bic.w	ip, ip, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10bc0:	e9d1 3200 	ldrd	r3, r2, [r1]
   10bc4:	1898      	adds	r0, r3, r2
		if ((regions[i]->start == u_reg_base) &&
   10bc6:	459c      	cmp	ip, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10bc8:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10bcc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   10bd0:	d118      	bne.n	10c04 <arm_core_mpu_configure_static_mpu_regions+0x100>
   10bd2:	4296      	cmp	r6, r2
   10bd4:	d105      	bne.n	10be2 <arm_core_mpu_configure_static_mpu_regions+0xde>
			mpu_configure_region(u_reg_index, regions[i]);
   10bd6:	fa5f f08b 	uxtb.w	r0, fp
   10bda:	f7ff ff27 	bl	10a2c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10bde:	3701      	adds	r7, #1
   10be0:	e799      	b.n	10b16 <arm_core_mpu_configure_static_mpu_regions+0x12>
	MPU->RNR = index;
   10be2:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10be6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   10be8:	f020 021f 	bic.w	r2, r0, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10bec:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10bf0:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10bf2:	60ea      	str	r2, [r5, #12]
			reg_index =
   10bf4:	b2e0      	uxtb	r0, r4
			reg_index =
   10bf6:	f7ff ff19 	bl	10a2c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10bfa:	f110 0f16 	cmn.w	r0, #22
   10bfe:	d0c7      	beq.n	10b90 <arm_core_mpu_configure_static_mpu_regions+0x8c>
			reg_index++;
   10c00:	1c44      	adds	r4, r0, #1
   10c02:	e7ec      	b.n	10bde <arm_core_mpu_configure_static_mpu_regions+0xda>
   10c04:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   10c06:	4296      	cmp	r6, r2
   10c08:	b2e0      	uxtb	r0, r4
   10c0a:	f023 031f 	bic.w	r3, r3, #31
   10c0e:	d107      	bne.n	10c20 <arm_core_mpu_configure_static_mpu_regions+0x11c>
	MPU->RNR = index;
   10c10:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10c14:	692a      	ldr	r2, [r5, #16]
   10c16:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10c1a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10c1c:	612b      	str	r3, [r5, #16]
   10c1e:	e7ea      	b.n	10bf6 <arm_core_mpu_configure_static_mpu_regions+0xf2>
   10c20:	9201      	str	r2, [sp, #4]
	MPU->RNR = index;
   10c22:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10c26:	692c      	ldr	r4, [r5, #16]
   10c28:	f004 0c1f 	and.w	ip, r4, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10c2c:	ea4c 0303 	orr.w	r3, ip, r3
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10c30:	612b      	str	r3, [r5, #16]
			reg_index =
   10c32:	f7ff fefb 	bl	10a2c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10c36:	f110 0f16 	cmn.w	r0, #22
   10c3a:	d0a9      	beq.n	10b90 <arm_core_mpu_configure_static_mpu_regions+0x8c>
			fill_region.base = regions[i]->start +
   10c3c:	f859 c027 	ldr.w	ip, [r9, r7, lsl #2]
	MPU->RNR = index;
   10c40:	f8c5 b008 	str.w	fp, [r5, #8]
			fill_region.base = regions[i]->start +
   10c44:	e9dc 1c00 	ldrd	r1, ip, [ip]
   10c48:	4461      	add	r1, ip
			reg_index++;
   10c4a:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10c4c:	f021 011f 	bic.w	r1, r1, #31
   10c50:	3e01      	subs	r6, #1
   10c52:	9a01      	ldr	r2, [sp, #4]
	attr->rbar = MPU->RBAR &
   10c54:	68ec      	ldr	r4, [r5, #12]
			REGION_LIMIT_ADDR((regions[i]->start +
   10c56:	440e      	add	r6, r1
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10c58:	692b      	ldr	r3, [r5, #16]
				region_allocate_and_init(reg_index,
   10c5a:	b2c0      	uxtb	r0, r0
			REGION_LIMIT_ADDR((regions[i]->start +
   10c5c:	1ab6      	subs	r6, r6, r2
	if (index > (get_num_regions() - 1)) {
   10c5e:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10c60:	ea4f 0353 	mov.w	r3, r3, lsr #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10c64:	f026 061f 	bic.w	r6, r6, #31
   10c68:	d902      	bls.n	10c70 <arm_core_mpu_configure_static_mpu_regions+0x16c>
   10c6a:	f7ff fec3 	bl	109f4 <region_allocate_and_init.part.0>
   10c6e:	e7c4      	b.n	10bfa <arm_core_mpu_configure_static_mpu_regions+0xf6>
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10c70:	005b      	lsls	r3, r3, #1
   10c72:	f003 030e 	and.w	r3, r3, #14
		| (region_conf->attr.rbar &
   10c76:	f004 041f 	and.w	r4, r4, #31
		| MPU_RLAR_EN_Msk
   10c7a:	f043 0301 	orr.w	r3, r3, #1
		| (region_conf->attr.rbar &
   10c7e:	4321      	orrs	r1, r4
		| MPU_RLAR_EN_Msk
   10c80:	431e      	orrs	r6, r3
  mpu->RNR = rnr;
   10c82:	60a8      	str	r0, [r5, #8]
  mpu->RBAR = rbar;
   10c84:	60e9      	str	r1, [r5, #12]
  mpu->RLAR = rlar;
   10c86:	612e      	str	r6, [r5, #16]
   10c88:	e7ba      	b.n	10c00 <arm_core_mpu_configure_static_mpu_regions+0xfc>
   10c8a:	bf00      	nop
   10c8c:	200273c0 	.word	0x200273c0
   10c90:	e000ed90 	.word	0xe000ed90
   10c94:	00026684 	.word	0x00026684
   10c98:	000266cc 	.word	0x000266cc
   10c9c:	000289b7 	.word	0x000289b7
   10ca0:	00028994 	.word	0x00028994

00010ca4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   10ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ca8:	4689      	mov	r9, r1
   10caa:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10cac:	2600      	movs	r6, #0
   10cae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 10d40 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10cb2:	f8df a090 	ldr.w	sl, [pc, #144]	; 10d44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
   10cb6:	4c21      	ldr	r4, [pc, #132]	; (10d3c <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10cb8:	454e      	cmp	r6, r9
   10cba:	da19      	bge.n	10cf0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
   10cbc:	f8d7 b004 	ldr.w	fp, [r7, #4]
   10cc0:	f1bb 0f00 	cmp.w	fp, #0
   10cc4:	d036      	beq.n	10d34 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
   10cc6:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10cc8:	4618      	mov	r0, r3
   10cca:	9301      	str	r3, [sp, #4]
   10ccc:	f013 fcee 	bl	246ac <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10cd0:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10cd2:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10cd4:	eb0b 0003 	add.w	r0, fp, r3
   10cd8:	3801      	subs	r0, #1
   10cda:	f013 fce7 	bl	246ac <arm_cmse_mpu_region_get>
   10cde:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
   10ce0:	4285      	cmp	r5, r0
   10ce2:	fb03 f306 	mul.w	r3, r3, r6
   10ce6:	d006      	beq.n	10cf6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
   10ce8:	f06f 0215 	mvn.w	r2, #21
   10cec:	f848 2003 	str.w	r2, [r8, r3]
}
   10cf0:	b003      	add	sp, #12
   10cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
   10cf6:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
   10cfa:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
   10cfe:	d0f7      	beq.n	10cf0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
   10d00:	f89a 2000 	ldrb.w	r2, [sl]
   10d04:	42aa      	cmp	r2, r5
   10d06:	ddf3      	ble.n	10cf0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
   10d08:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   10d0a:	4443      	add	r3, r8
	MPU->RNR = index;
   10d0c:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   10d0e:	68e0      	ldr	r0, [r4, #12]
   10d10:	7b19      	ldrb	r1, [r3, #12]
   10d12:	f360 0104 	bfi	r1, r0, #0, #5
   10d16:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10d18:	6921      	ldr	r1, [r4, #16]
   10d1a:	7b18      	ldrb	r0, [r3, #12]
   10d1c:	0849      	lsrs	r1, r1, #1
   10d1e:	f361 1047 	bfi	r0, r1, #5, #3
   10d22:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   10d24:	68e2      	ldr	r2, [r4, #12]
   10d26:	f022 021f 	bic.w	r2, r2, #31
   10d2a:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   10d2c:	6922      	ldr	r2, [r4, #16]
   10d2e:	f022 021f 	bic.w	r2, r2, #31
   10d32:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10d34:	3601      	adds	r6, #1
   10d36:	370c      	adds	r7, #12
   10d38:	e7be      	b.n	10cb8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   10d3a:	bf00      	nop
   10d3c:	e000ed90 	.word	0xe000ed90
   10d40:	20020338 	.word	0x20020338
   10d44:	200273c0 	.word	0x200273c0

00010d48 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   10d48:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   10d4a:	4b1e      	ldr	r3, [pc, #120]	; (10dc4 <arm_core_mpu_configure_dynamic_mpu_regions+0x7c>)
   10d4c:	4606      	mov	r6, r0
   10d4e:	7818      	ldrb	r0, [r3, #0]
   10d50:	460d      	mov	r5, r1

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10d52:	4602      	mov	r2, r0
  mpu->RLAR = 0U;
   10d54:	2100      	movs	r1, #0
   10d56:	4b1c      	ldr	r3, [pc, #112]	; (10dc8 <arm_core_mpu_configure_dynamic_mpu_regions+0x80>)
   10d58:	2a0f      	cmp	r2, #15
   10d5a:	dd07      	ble.n	10d6c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
   10d5c:	2400      	movs	r4, #0
	/* We are going to skip the full partition of the background areas.
	 * So we can disable MPU regions inside which dynamic memroy regions
	 * may be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		ARM_MPU_ClrRegion(dyn_reg_info[i].index);
   10d5e:	4a1b      	ldr	r2, [pc, #108]	; (10dcc <arm_core_mpu_configure_dynamic_mpu_regions+0x84>)
   10d60:	6812      	ldr	r2, [r2, #0]
  mpu->RNR = rnr;
   10d62:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   10d64:	611c      	str	r4, [r3, #16]
	for (i = 0; i < regions_num; i++) {
   10d66:	42ac      	cmp	r4, r5
   10d68:	db04      	blt.n	10d74 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
}
   10d6a:	bd70      	pop	{r4, r5, r6, pc}
  mpu->RNR = rnr;
   10d6c:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   10d6e:	6119      	str	r1, [r3, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10d70:	3201      	adds	r2, #1
   10d72:	e7f1      	b.n	10d58 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		if (regions[i]->size == 0U) {
   10d74:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   10d78:	684b      	ldr	r3, [r1, #4]
   10d7a:	b303      	cbz	r3, 10dbe <arm_core_mpu_configure_dynamic_mpu_regions+0x76>
		&&
   10d7c:	2b1f      	cmp	r3, #31
   10d7e:	d812      	bhi.n	10da6 <arm_core_mpu_configure_dynamic_mpu_regions+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   10d80:	2301      	movs	r3, #1
   10d82:	f04f 0200 	mov.w	r2, #0
   10d86:	4912      	ldr	r1, [pc, #72]	; (10dd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x88>)
   10d88:	f363 0202 	bfi	r2, r3, #0, #3
   10d8c:	4b11      	ldr	r3, [pc, #68]	; (10dd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x8c>)
   10d8e:	f36f 02c5 	bfc	r2, #3, #3
   10d92:	1a5b      	subs	r3, r3, r1
   10d94:	08db      	lsrs	r3, r3, #3
   10d96:	4621      	mov	r1, r4
}
   10d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Partition %u: sanity check failed.", i);
   10d9c:	f363 128f 	bfi	r2, r3, #6, #10
   10da0:	480d      	ldr	r0, [pc, #52]	; (10dd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x90>)
   10da2:	f013 b8e5 	b.w	23f70 <log_1>
		&&
   10da6:	06da      	lsls	r2, r3, #27
   10da8:	d1ea      	bne.n	10d80 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>
		((part->start &
   10daa:	680b      	ldr	r3, [r1, #0]
		&&
   10dac:	06db      	lsls	r3, r3, #27
   10dae:	d1e7      	bne.n	10d80 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>
		reg_index = mpu_configure_region(reg_index, regions[i]);
   10db0:	b2c0      	uxtb	r0, r0
   10db2:	f7ff fe3b 	bl	10a2c <mpu_configure_region>
		if (reg_index == -EINVAL) {
   10db6:	f110 0f16 	cmn.w	r0, #22
   10dba:	d0d6      	beq.n	10d6a <arm_core_mpu_configure_dynamic_mpu_regions+0x22>
		reg_index++;
   10dbc:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
   10dbe:	3401      	adds	r4, #1
   10dc0:	e7d1      	b.n	10d66 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
   10dc2:	bf00      	nop
   10dc4:	200273c0 	.word	0x200273c0
   10dc8:	e000ed90 	.word	0xe000ed90
   10dcc:	20020338 	.word	0x20020338
   10dd0:	00026684 	.word	0x00026684
   10dd4:	000266cc 	.word	0x000266cc
   10dd8:	00028994 	.word	0x00028994

00010ddc <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
   10ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10de0:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
   10de2:	2300      	movs	r3, #0
{
   10de4:	b09d      	sub	sp, #116	; 0x74
   10de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
   10dea:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
   10dec:	7810      	ldrb	r0, [r2, #0]
   10dee:	1c53      	adds	r3, r2, #1
   10df0:	9306      	str	r3, [sp, #24]
   10df2:	b158      	cbz	r0, 10e0c <z_prf+0x30>
		if (c != '%') {
   10df4:	2825      	cmp	r0, #37	; 0x25
   10df6:	f000 8089 	beq.w	10f0c <z_prf+0x130>
			PUTC(c);
   10dfa:	9903      	ldr	r1, [sp, #12]
   10dfc:	9b02      	ldr	r3, [sp, #8]
   10dfe:	4798      	blx	r3
   10e00:	3001      	adds	r0, #1
   10e02:	f040 840d 	bne.w	11620 <z_prf+0x844>
   10e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e0a:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   10e0c:	9801      	ldr	r0, [sp, #4]
   10e0e:	b01d      	add	sp, #116	; 0x74
   10e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   10e14:	2c23      	cmp	r4, #35	; 0x23
   10e16:	d070      	beq.n	10efa <z_prf+0x11e>
   10e18:	d865      	bhi.n	10ee6 <z_prf+0x10a>
   10e1a:	2c00      	cmp	r4, #0
   10e1c:	d0f6      	beq.n	10e0c <z_prf+0x30>
					fspace = true;
   10e1e:	2c20      	cmp	r4, #32
   10e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10e22:	bf08      	it	eq
   10e24:	2301      	moveq	r3, #1
   10e26:	930c      	str	r3, [sp, #48]	; 0x30
					fplus = true;
   10e28:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   10e2c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   10e30:	48bb      	ldr	r0, [pc, #748]	; (11120 <z_prf+0x344>)
   10e32:	f818 4b01 	ldrb.w	r4, [r8], #1
   10e36:	4621      	mov	r1, r4
   10e38:	f013 fd83 	bl	24942 <strchr>
   10e3c:	2800      	cmp	r0, #0
   10e3e:	d1e9      	bne.n	10e14 <z_prf+0x38>
			if (c == '*') {
   10e40:	2c2a      	cmp	r4, #42	; 0x2a
   10e42:	d16a      	bne.n	10f1a <z_prf+0x13e>
				width = va_arg(vargs, int);
   10e44:	6832      	ldr	r2, [r6, #0]
   10e46:	1d33      	adds	r3, r6, #4
				if (width < 0) {
   10e48:	2a00      	cmp	r2, #0
				width = va_arg(vargs, int);
   10e4a:	9207      	str	r2, [sp, #28]
					width = -width;
   10e4c:	bfbe      	ittt	lt
   10e4e:	4252      	neglt	r2, r2
   10e50:	9207      	strlt	r2, [sp, #28]
					fminus = true;
   10e52:	2201      	movlt	r2, #1
				width = va_arg(vargs, int);
   10e54:	461e      	mov	r6, r3
					fminus = true;
   10e56:	bfb8      	it	lt
   10e58:	920d      	strlt	r2, [sp, #52]	; 0x34
				c = *format++;
   10e5a:	9a06      	ldr	r2, [sp, #24]
   10e5c:	7854      	ldrb	r4, [r2, #1]
   10e5e:	f102 0802 	add.w	r8, r2, #2
			if (c == '.') {
   10e62:	2c2e      	cmp	r4, #46	; 0x2e
   10e64:	d17e      	bne.n	10f64 <z_prf+0x188>
				if (c == '*') {
   10e66:	f898 3000 	ldrb.w	r3, [r8]
   10e6a:	2b2a      	cmp	r3, #42	; 0x2a
   10e6c:	d177      	bne.n	10f5e <z_prf+0x182>
					precision = va_arg(vargs, int);
   10e6e:	6835      	ldr	r5, [r6, #0]
				c = *format++;
   10e70:	f108 0801 	add.w	r8, r8, #1
					precision = va_arg(vargs, int);
   10e74:	3604      	adds	r6, #4
				c = *format++;
   10e76:	f898 4000 	ldrb.w	r4, [r8]
   10e7a:	f108 0801 	add.w	r8, r8, #1
			if (strchr("hlz", c) != NULL) {
   10e7e:	4621      	mov	r1, r4
   10e80:	48a8      	ldr	r0, [pc, #672]	; (11124 <z_prf+0x348>)
   10e82:	4627      	mov	r7, r4
   10e84:	f013 fd5d 	bl	24942 <strchr>
   10e88:	2800      	cmp	r0, #0
   10e8a:	d06e      	beq.n	10f6a <z_prf+0x18e>
				c = *format++;
   10e8c:	f108 0301 	add.w	r3, r8, #1
				} else if (i == 'h' && c == 'h') {
   10e90:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   10e92:	9306      	str	r3, [sp, #24]
   10e94:	f898 4000 	ldrb.w	r4, [r8]
				} else if (i == 'h' && c == 'h') {
   10e98:	d107      	bne.n	10eaa <z_prf+0xce>
   10e9a:	2c68      	cmp	r4, #104	; 0x68
   10e9c:	d105      	bne.n	10eaa <z_prf+0xce>
					i = 'H';
   10e9e:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   10ea0:	f108 0302 	add.w	r3, r8, #2
   10ea4:	f898 4001 	ldrb.w	r4, [r8, #1]
   10ea8:	9306      	str	r3, [sp, #24]
			switch (c) {
   10eaa:	2c67      	cmp	r4, #103	; 0x67
   10eac:	d87c      	bhi.n	10fa8 <z_prf+0x1cc>
   10eae:	2c65      	cmp	r4, #101	; 0x65
   10eb0:	f080 813a 	bcs.w	11128 <z_prf+0x34c>
   10eb4:	2c47      	cmp	r4, #71	; 0x47
   10eb6:	d85c      	bhi.n	10f72 <z_prf+0x196>
   10eb8:	2c45      	cmp	r4, #69	; 0x45
   10eba:	f080 8135 	bcs.w	11128 <z_prf+0x34c>
   10ebe:	2c00      	cmp	r4, #0
   10ec0:	d0a4      	beq.n	10e0c <z_prf+0x30>
   10ec2:	2c25      	cmp	r4, #37	; 0x25
   10ec4:	f000 83a8 	beq.w	11618 <z_prf+0x83c>
				PUTC('%');
   10ec8:	9903      	ldr	r1, [sp, #12]
   10eca:	2025      	movs	r0, #37	; 0x25
   10ecc:	9b02      	ldr	r3, [sp, #8]
   10ece:	4798      	blx	r3
   10ed0:	3001      	adds	r0, #1
   10ed2:	d098      	beq.n	10e06 <z_prf+0x2a>
				PUTC(c);
   10ed4:	9903      	ldr	r1, [sp, #12]
   10ed6:	4620      	mov	r0, r4
   10ed8:	9b02      	ldr	r3, [sp, #8]
   10eda:	4798      	blx	r3
   10edc:	3001      	adds	r0, #1
   10ede:	d092      	beq.n	10e06 <z_prf+0x2a>
				count += 2;
   10ee0:	9b01      	ldr	r3, [sp, #4]
   10ee2:	3302      	adds	r3, #2
   10ee4:	e39e      	b.n	11624 <z_prf+0x848>
				switch (c) {
   10ee6:	2c2d      	cmp	r4, #45	; 0x2d
   10ee8:	d00d      	beq.n	10f06 <z_prf+0x12a>
   10eea:	2c30      	cmp	r4, #48	; 0x30
   10eec:	d008      	beq.n	10f00 <z_prf+0x124>
					fplus = true;
   10eee:	2c2b      	cmp	r4, #43	; 0x2b
   10ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ef2:	bf08      	it	eq
   10ef4:	2301      	moveq	r3, #1
   10ef6:	9309      	str	r3, [sp, #36]	; 0x24
   10ef8:	e796      	b.n	10e28 <z_prf+0x4c>
					falt = true;
   10efa:	2301      	movs	r3, #1
   10efc:	9305      	str	r3, [sp, #20]
					break;
   10efe:	e793      	b.n	10e28 <z_prf+0x4c>
					fzero = true;
   10f00:	2301      	movs	r3, #1
   10f02:	9308      	str	r3, [sp, #32]
					break;
   10f04:	e790      	b.n	10e28 <z_prf+0x4c>
					fminus = true;
   10f06:	2301      	movs	r3, #1
   10f08:	930d      	str	r3, [sp, #52]	; 0x34
   10f0a:	e78d      	b.n	10e28 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
   10f0c:	2300      	movs	r3, #0
   10f0e:	9308      	str	r3, [sp, #32]
   10f10:	930c      	str	r3, [sp, #48]	; 0x30
   10f12:	9309      	str	r3, [sp, #36]	; 0x24
   10f14:	930d      	str	r3, [sp, #52]	; 0x34
   10f16:	9305      	str	r3, [sp, #20]
   10f18:	e788      	b.n	10e2c <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10f1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   10f1e:	2b09      	cmp	r3, #9
				width = 0;
   10f20:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
   10f22:	d89e      	bhi.n	10e62 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10f24:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   10f26:	f8dd 8018 	ldr.w	r8, [sp, #24]
   10f2a:	f818 4b01 	ldrb.w	r4, [r8], #1
   10f2e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10f32:	2b09      	cmp	r3, #9
   10f34:	d895      	bhi.n	10e62 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10f36:	9b07      	ldr	r3, [sp, #28]
   10f38:	fb02 4403 	mla	r4, r2, r3, r4
   10f3c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10f40:	e9cd 8306 	strd	r8, r3, [sp, #24]
   10f44:	e7ef      	b.n	10f26 <z_prf+0x14a>
   10f46:	4690      	mov	r8, r2
   10f48:	fb01 3505 	mla	r5, r1, r5, r3
   10f4c:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   10f4e:	4642      	mov	r2, r8
   10f50:	f812 3b01 	ldrb.w	r3, [r2], #1
   10f54:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   10f58:	2809      	cmp	r0, #9
   10f5a:	d9f4      	bls.n	10f46 <z_prf+0x16a>
   10f5c:	e78b      	b.n	10e76 <z_prf+0x9a>
	int i = 0;
   10f5e:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   10f60:	210a      	movs	r1, #10
   10f62:	e7f4      	b.n	10f4e <z_prf+0x172>
			precision = -1;
   10f64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10f68:	e789      	b.n	10e7e <z_prf+0xa2>
   10f6a:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
   10f6e:	4607      	mov	r7, r0
   10f70:	e79b      	b.n	10eaa <z_prf+0xce>
			switch (c) {
   10f72:	2c63      	cmp	r4, #99	; 0x63
   10f74:	d059      	beq.n	1102a <z_prf+0x24e>
   10f76:	d821      	bhi.n	10fbc <z_prf+0x1e0>
   10f78:	2c58      	cmp	r4, #88	; 0x58
   10f7a:	d1a5      	bne.n	10ec8 <z_prf+0xec>
   10f7c:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
   10f7e:	2c6f      	cmp	r4, #111	; 0x6f
   10f80:	9304      	str	r3, [sp, #16]
   10f82:	6831      	ldr	r1, [r6, #0]
   10f84:	f040 831c 	bne.w	115c0 <z_prf+0x7e4>
	if (alt_form) {
   10f88:	9b05      	ldr	r3, [sp, #20]
   10f8a:	af15      	add	r7, sp, #84	; 0x54
   10f8c:	2b00      	cmp	r3, #0
   10f8e:	f000 830b 	beq.w	115a8 <z_prf+0x7cc>
		*buf++ = '0';
   10f92:	2330      	movs	r3, #48	; 0x30
   10f94:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
   10f98:	2900      	cmp	r1, #0
   10f9a:	f040 830e 	bne.w	115ba <z_prf+0x7de>
			*buf++ = 0;
   10f9e:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
   10fa2:	468b      	mov	fp, r1
			return 1;
   10fa4:	2701      	movs	r7, #1
   10fa6:	e026      	b.n	10ff6 <z_prf+0x21a>
			switch (c) {
   10fa8:	2c70      	cmp	r4, #112	; 0x70
   10faa:	f000 82e8 	beq.w	1157e <z_prf+0x7a2>
   10fae:	d827      	bhi.n	11000 <z_prf+0x224>
   10fb0:	2c6e      	cmp	r4, #110	; 0x6e
   10fb2:	f000 82cf 	beq.w	11554 <z_prf+0x778>
   10fb6:	d8e1      	bhi.n	10f7c <z_prf+0x1a0>
   10fb8:	2c69      	cmp	r4, #105	; 0x69
   10fba:	d185      	bne.n	10ec8 <z_prf+0xec>
   10fbc:	6834      	ldr	r4, [r6, #0]
   10fbe:	1d33      	adds	r3, r6, #4
	if (value < 0) {
   10fc0:	2c00      	cmp	r4, #0
   10fc2:	9304      	str	r3, [sp, #16]
   10fc4:	f280 809e 	bge.w	11104 <z_prf+0x328>
		*buf++ = '-';
   10fc8:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   10fca:	4261      	negs	r1, r4
		*buf++ = '-';
   10fcc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		*buf++ = ' ';
   10fd0:	f10d 0755 	add.w	r7, sp, #85	; 0x55
	return _to_x(buf, value, 10);
   10fd4:	4638      	mov	r0, r7
   10fd6:	220a      	movs	r2, #10
   10fd8:	f013 fd50 	bl	24a7c <_to_x>
				if (fplus || fspace || val < 0) {
   10fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
   10fde:	4407      	add	r7, r0
   10fe0:	a815      	add	r0, sp, #84	; 0x54
   10fe2:	1a3f      	subs	r7, r7, r0
				if (fplus || fspace || val < 0) {
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	f040 8320 	bne.w	1162a <z_prf+0x84e>
   10fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10fec:	2b00      	cmp	r3, #0
   10fee:	f040 831c 	bne.w	1162a <z_prf+0x84e>
   10ff2:	ea4f 7bd4 	mov.w	fp, r4, lsr #31
			if (precision >= 0) {
   10ff6:	2d00      	cmp	r5, #0
   10ff8:	f2c0 831c 	blt.w	11634 <z_prf+0x858>
   10ffc:	ae15      	add	r6, sp, #84	; 0x54
   10ffe:	e01e      	b.n	1103e <z_prf+0x262>
			switch (c) {
   11000:	2c75      	cmp	r4, #117	; 0x75
   11002:	d0bb      	beq.n	10f7c <z_prf+0x1a0>
   11004:	2c78      	cmp	r4, #120	; 0x78
   11006:	d0b9      	beq.n	10f7c <z_prf+0x1a0>
   11008:	2c73      	cmp	r4, #115	; 0x73
   1100a:	f47f af5d 	bne.w	10ec8 <z_prf+0xec>
					precision = INT_MAX;
   1100e:	2d00      	cmp	r5, #0
   11010:	bfb8      	it	lt
   11012:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   11016:	2700      	movs	r7, #0
				cptr = va_arg(vargs, char *);
   11018:	1d33      	adds	r3, r6, #4
   1101a:	6836      	ldr	r6, [r6, #0]
   1101c:	9304      	str	r3, [sp, #16]
				for (clen = 0; clen < precision; clen++) {
   1101e:	42bd      	cmp	r5, r7
   11020:	f040 82bd 	bne.w	1159e <z_prf+0x7c2>
   11024:	2500      	movs	r5, #0
   11026:	46ab      	mov	fp, r5
   11028:	e009      	b.n	1103e <z_prf+0x262>
				break;
   1102a:	f04f 0b00 	mov.w	fp, #0
				clen = 1;
   1102e:	2701      	movs	r7, #1
				break;
   11030:	465d      	mov	r5, fp
				buf[0] = va_arg(vargs, int);
   11032:	1d33      	adds	r3, r6, #4
   11034:	9304      	str	r3, [sp, #16]
   11036:	6833      	ldr	r3, [r6, #0]
   11038:	ae1c      	add	r6, sp, #112	; 0x70
   1103a:	f806 3d1c 	strb.w	r3, [r6, #-28]!
				zero_head = precision - clen + prefix;
   1103e:	eba5 0a07 	sub.w	sl, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   11042:	2500      	movs	r5, #0
   11044:	46a8      	mov	r8, r5
   11046:	46a9      	mov	r9, r5
				zero_head = precision - clen + prefix;
   11048:	44da      	add	sl, fp
   1104a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
			width -= clen + zero_head;
   1104e:	9b07      	ldr	r3, [sp, #28]
   11050:	eb0a 0407 	add.w	r4, sl, r7
   11054:	1b1c      	subs	r4, r3, r4
			if (!fminus && width > 0) {
   11056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11058:	b913      	cbnz	r3, 11060 <z_prf+0x284>
   1105a:	2c00      	cmp	r4, #0
   1105c:	f300 8309 	bgt.w	11672 <z_prf+0x896>
   11060:	eb06 030b 	add.w	r3, r6, fp
			while (prefix-- > 0) {
   11064:	429e      	cmp	r6, r3
   11066:	f040 8306 	bne.w	11676 <z_prf+0x89a>
   1106a:	4653      	mov	r3, sl
			while (zero_head-- > 0) {
   1106c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   11070:	f080 830d 	bcs.w	1168e <z_prf+0x8b2>
			clen -= prefix;
   11074:	eba7 070b 	sub.w	r7, r7, fp
			if (zero.predot) {
   11078:	f1b9 0f00 	cmp.w	r9, #0
   1107c:	f000 832c 	beq.w	116d8 <z_prf+0x8fc>
				c = *cptr;
   11080:	7830      	ldrb	r0, [r6, #0]
   11082:	19f2      	adds	r2, r6, r7
   11084:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
				while (isdigit(c)) {
   11088:	2909      	cmp	r1, #9
   1108a:	eba2 0306 	sub.w	r3, r2, r6
   1108e:	f240 8309 	bls.w	116a4 <z_prf+0x8c8>
   11092:	464a      	mov	r2, r9
				while (zero.predot-- > 0) {
   11094:	2a00      	cmp	r2, #0
   11096:	f040 8310 	bne.w	116ba <z_prf+0x8de>
				clen -= zero.predot;
   1109a:	eba3 0909 	sub.w	r9, r3, r9
			if (zero.postdot) {
   1109e:	f1b8 0f00 	cmp.w	r8, #0
   110a2:	d018      	beq.n	110d6 <z_prf+0x2fa>
   110a4:	eb06 0309 	add.w	r3, r6, r9
					c = *cptr++;
   110a8:	f816 2b01 	ldrb.w	r2, [r6], #1
   110ac:	9307      	str	r3, [sp, #28]
					PUTC(c);
   110ae:	9903      	ldr	r1, [sp, #12]
   110b0:	4610      	mov	r0, r2
   110b2:	9b02      	ldr	r3, [sp, #8]
   110b4:	9205      	str	r2, [sp, #20]
   110b6:	4798      	blx	r3
   110b8:	3001      	adds	r0, #1
   110ba:	f43f aea4 	beq.w	10e06 <z_prf+0x2a>
				} while (c != '.');
   110be:	9a05      	ldr	r2, [sp, #20]
   110c0:	9b07      	ldr	r3, [sp, #28]
   110c2:	2a2e      	cmp	r2, #46	; 0x2e
   110c4:	eba3 0906 	sub.w	r9, r3, r6
   110c8:	d1ee      	bne.n	110a8 <z_prf+0x2cc>
   110ca:	4643      	mov	r3, r8
				while (zero.postdot-- > 0) {
   110cc:	2b00      	cmp	r3, #0
   110ce:	f300 8305 	bgt.w	116dc <z_prf+0x900>
				clen -= zero.postdot;
   110d2:	eba9 0908 	sub.w	r9, r9, r8
			if (zero.trail) {
   110d6:	b19d      	cbz	r5, 11100 <z_prf+0x324>
				c = *cptr;
   110d8:	7830      	ldrb	r0, [r6, #0]
   110da:	eb06 0809 	add.w	r8, r6, r9
   110de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
				while (isdigit(c) || c == '.') {
   110e2:	2b09      	cmp	r3, #9
   110e4:	eba8 0906 	sub.w	r9, r8, r6
   110e8:	f240 8305 	bls.w	116f6 <z_prf+0x91a>
   110ec:	282e      	cmp	r0, #46	; 0x2e
   110ee:	f000 8302 	beq.w	116f6 <z_prf+0x91a>
   110f2:	46a8      	mov	r8, r5
				while (zero.trail-- > 0) {
   110f4:	f1b8 0f00 	cmp.w	r8, #0
   110f8:	f300 8306 	bgt.w	11708 <z_prf+0x92c>
				clen -= zero.trail;
   110fc:	eba9 0905 	sub.w	r9, r9, r5
   11100:	44b1      	add	r9, r6
   11102:	e314      	b.n	1172e <z_prf+0x952>
	} else if (fplus) {
   11104:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11106:	b123      	cbz	r3, 11112 <z_prf+0x336>
		*buf++ = '+';
   11108:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   1110a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   1110e:	4621      	mov	r1, r4
   11110:	e75e      	b.n	10fd0 <z_prf+0x1f4>
	} else if (fspace) {
   11112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11114:	b10b      	cbz	r3, 1111a <z_prf+0x33e>
		*buf++ = ' ';
   11116:	2320      	movs	r3, #32
   11118:	e7f7      	b.n	1110a <z_prf+0x32e>
	} else if (fspace) {
   1111a:	4621      	mov	r1, r4
   1111c:	af15      	add	r7, sp, #84	; 0x54
   1111e:	e759      	b.n	10fd4 <z_prf+0x1f8>
   11120:	00028a00 	.word	0x00028a00
   11124:	00028a06 	.word	0x00028a06
				u.d = va_arg(vargs, double);
   11128:	3607      	adds	r6, #7
   1112a:	f026 0607 	bic.w	r6, r6, #7
				double_val = u.i;
   1112e:	e9d6 0100 	ldrd	r0, r1, [r6]
	fract = (double_temp << 11) & ~HIGHBIT64;
   11132:	02c2      	lsls	r2, r0, #11
   11134:	4690      	mov	r8, r2
				u.d = va_arg(vargs, double);
   11136:	f106 0308 	add.w	r3, r6, #8
   1113a:	9304      	str	r3, [sp, #16]
	fract = (double_temp << 11) & ~HIGHBIT64;
   1113c:	02cb      	lsls	r3, r1, #11
   1113e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
	if (sign) {
   11142:	2800      	cmp	r0, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   11144:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
	if (sign) {
   11148:	f171 0300 	sbcs.w	r3, r1, #0
	exp = double_temp >> 52 & 0x7ff;
   1114c:	f3c1 560a 	ubfx	r6, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   11150:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if (sign) {
   11154:	da42      	bge.n	111dc <z_prf+0x400>
		*buf++ = '-';
   11156:	212d      	movs	r1, #45	; 0x2d
		*buf++ = ' ';
   11158:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
   1115c:	f10d 0755 	add.w	r7, sp, #85	; 0x55
	if (exp == 0x7ff) {
   11160:	f240 71ff 	movw	r1, #2047	; 0x7ff
   11164:	428e      	cmp	r6, r1
   11166:	d154      	bne.n	11212 <z_prf+0x436>
		if (!fract) {
   11168:	ea58 0309 	orrs.w	r3, r8, r9
   1116c:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   11170:	f107 0003 	add.w	r0, r7, #3
   11174:	d142      	bne.n	111fc <z_prf+0x420>
			if (isupper(c)) {
   11176:	2c19      	cmp	r4, #25
   11178:	d83a      	bhi.n	111f0 <z_prf+0x414>
				*buf++ = 'I';
   1117a:	2349      	movs	r3, #73	; 0x49
   1117c:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
   1117e:	234e      	movs	r3, #78	; 0x4e
   11180:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
   11182:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
   11184:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   11186:	46a8      	mov	r8, r5
   11188:	46a9      	mov	r9, r5
				*buf++ = 'n';
   1118a:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
   1118c:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   1118e:	af15      	add	r7, sp, #84	; 0x54
   11190:	1bc0      	subs	r0, r0, r7
				if (fplus || fspace || (buf[0] == '-')) {
   11192:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11194:	2b00      	cmp	r3, #0
   11196:	f040 81da 	bne.w	1154e <z_prf+0x772>
   1119a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1119c:	2b00      	cmp	r3, #0
   1119e:	f040 81d6 	bne.w	1154e <z_prf+0x772>
   111a2:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
   111a6:	f1ab 032d 	sub.w	r3, fp, #45	; 0x2d
   111aa:	f1d3 0b00 	rsbs	fp, r3, #0
   111ae:	eb4b 0b03 	adc.w	fp, fp, r3
				if (!isdigit(buf[prefix])) {
   111b2:	ab1c      	add	r3, sp, #112	; 0x70
   111b4:	445b      	add	r3, fp
   111b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
				clen += zero.predot + zero.postdot + zero.trail;
   111ba:	eb08 0709 	add.w	r7, r8, r9
   111be:	3b30      	subs	r3, #48	; 0x30
   111c0:	442f      	add	r7, r5
				if (!isdigit(buf[prefix])) {
   111c2:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
   111c4:	4407      	add	r7, r0
				if (!isdigit(buf[prefix])) {
   111c6:	f200 823b 	bhi.w	11640 <z_prf+0x864>
			} else if (fzero) {
   111ca:	9b08      	ldr	r3, [sp, #32]
   111cc:	2b00      	cmp	r3, #0
   111ce:	f000 823b 	beq.w	11648 <z_prf+0x86c>
				zero_head = width - clen;
   111d2:	9b07      	ldr	r3, [sp, #28]
   111d4:	ae15      	add	r6, sp, #84	; 0x54
   111d6:	eba3 0a07 	sub.w	sl, r3, r7
   111da:	e736      	b.n	1104a <z_prf+0x26e>
	} else if (fplus) {
   111dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111de:	b10b      	cbz	r3, 111e4 <z_prf+0x408>
		*buf++ = '+';
   111e0:	212b      	movs	r1, #43	; 0x2b
   111e2:	e7b9      	b.n	11158 <z_prf+0x37c>
	} else if (fspace) {
   111e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   111e6:	b10b      	cbz	r3, 111ec <z_prf+0x410>
		*buf++ = ' ';
   111e8:	2120      	movs	r1, #32
   111ea:	e7b5      	b.n	11158 <z_prf+0x37c>
	} else if (fspace) {
   111ec:	af15      	add	r7, sp, #84	; 0x54
   111ee:	e7b7      	b.n	11160 <z_prf+0x384>
				*buf++ = 'i';
   111f0:	2369      	movs	r3, #105	; 0x69
   111f2:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
   111f4:	236e      	movs	r3, #110	; 0x6e
   111f6:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
   111f8:	2366      	movs	r3, #102	; 0x66
   111fa:	e7c3      	b.n	11184 <z_prf+0x3a8>
			if (isupper(c)) {
   111fc:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   111fe:	bf99      	ittee	ls
   11200:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
   11202:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
   11204:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
   11206:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
   11208:	bf94      	ite	ls
   1120a:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
   1120c:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
   1120e:	707a      	strb	r2, [r7, #1]
   11210:	e7b8      	b.n	11184 <z_prf+0x3a8>
		c = 'f';
   11212:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   11214:	ea48 0006 	orr.w	r0, r8, r6
   11218:	ea49 71e6 	orr.w	r1, r9, r6, asr #31
		c = 'f';
   1121c:	bf08      	it	eq
   1121e:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   11220:	ea50 0301 	orrs.w	r3, r0, r1
   11224:	f000 80da 	beq.w	113dc <z_prf+0x600>
		if (exp == 0) {
   11228:	2e00      	cmp	r6, #0
   1122a:	d07a      	beq.n	11322 <z_prf+0x546>
		fract |= HIGHBIT64;
   1122c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11230:	4610      	mov	r0, r2
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   11232:	f2a6 38fe 	subw	r8, r6, #1022	; 0x3fe
		fract |= HIGHBIT64;
   11236:	2600      	movs	r6, #0
   11238:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
   1123c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   11240:	e969 010c 	strd	r0, r1, [r9, #-48]!	; 0x30
	while (exp <= -3) {
   11244:	f118 0f02 	cmn.w	r8, #2
   11248:	db7a      	blt.n	11340 <z_prf+0x564>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   1124a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   1124e:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
   11252:	f1b8 0f00 	cmp.w	r8, #0
   11256:	f300 80a4 	bgt.w	113a2 <z_prf+0x5c6>
		_rlrshift(&fract);
   1125a:	a810      	add	r0, sp, #64	; 0x40
		exp++;
   1125c:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   11260:	f013 fc2c 	bl	24abc <_rlrshift>
	while (exp < (0 + 4)) {
   11264:	f1b8 0f04 	cmp.w	r8, #4
   11268:	d1f7      	bne.n	1125a <z_prf+0x47e>
		precision = 6;		/* Default precision if none given */
   1126a:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   1126c:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   11270:	bfb8      	it	lt
   11272:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   11274:	2b47      	cmp	r3, #71	; 0x47
   11276:	f040 80b9 	bne.w	113ec <z_prf+0x610>
		if (decexp < (-4 + 1) || decexp > precision) {
   1127a:	1cf2      	adds	r2, r6, #3
   1127c:	db02      	blt.n	11284 <z_prf+0x4a8>
   1127e:	42b5      	cmp	r5, r6
   11280:	f280 80af 	bge.w	113e2 <z_prf+0x606>
			c += 'e' - 'g';
   11284:	3c02      	subs	r4, #2
   11286:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   11288:	2d00      	cmp	r5, #0
   1128a:	f000 8275 	beq.w	11778 <z_prf+0x99c>
		if (!falt && (precision > 0)) {
   1128e:	9b05      	ldr	r3, [sp, #20]
				precision--;
   11290:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   11292:	2b00      	cmp	r3, #0
   11294:	f040 8270 	bne.w	11778 <z_prf+0x99c>
   11298:	2d00      	cmp	r5, #0
   1129a:	bfd4      	ite	le
   1129c:	f04f 0a00 	movle.w	sl, #0
   112a0:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   112a4:	2c66      	cmp	r4, #102	; 0x66
   112a6:	f040 8269 	bne.w	1177c <z_prf+0x9a0>
		if (exp < 0) {
   112aa:	eb15 0806 	adds.w	r8, r5, r6
   112ae:	f140 80a3 	bpl.w	113f8 <z_prf+0x61c>
	digit_count = 16;
   112b2:	2310      	movs	r3, #16
   112b4:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   112b6:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   112ba:	930f      	str	r3, [sp, #60]	; 0x3c
	ltemp = 0x0800000000000000;
   112bc:	2200      	movs	r2, #0
   112be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   112c2:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   112c6:	e969 230a 	strd	r2, r3, [r9, #-40]!	; 0x28
	while (exp--) {
   112ca:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   112ce:	f080 8095 	bcs.w	113fc <z_prf+0x620>
	fract += ltemp;
   112d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   112d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   112da:	eb12 0800 	adds.w	r8, r2, r0
   112de:	eb43 0901 	adc.w	r9, r3, r1
   112e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
   112e6:	f009 4870 	and.w	r8, r9, #4026531840	; 0xf0000000
   112ea:	f04f 0900 	mov.w	r9, #0
   112ee:	ea58 0309 	orrs.w	r3, r8, r9
   112f2:	d006      	beq.n	11302 <z_prf+0x526>
		_ldiv5(&fract);
   112f4:	a810      	add	r0, sp, #64	; 0x40
   112f6:	f013 fbf4 	bl	24ae2 <_ldiv5>
		_rlrshift(&fract);
   112fa:	a810      	add	r0, sp, #64	; 0x40
   112fc:	f013 fbde 	bl	24abc <_rlrshift>
		decexp++;
   11300:	3601      	adds	r6, #1
	if (c == 'f') {
   11302:	2c66      	cmp	r4, #102	; 0x66
   11304:	f040 80c4 	bne.w	11490 <z_prf+0x6b4>
		if (decexp > 0) {
   11308:	2e00      	cmp	r6, #0
   1130a:	dc7d      	bgt.n	11408 <z_prf+0x62c>
			*buf++ = '0';
   1130c:	2330      	movs	r3, #48	; 0x30
   1130e:	703b      	strb	r3, [r7, #0]
		if (falt || (precision > 0)) {
   11310:	9b05      	ldr	r3, [sp, #20]
			*buf++ = '0';
   11312:	f107 0b01 	add.w	fp, r7, #1
		if (falt || (precision > 0)) {
   11316:	2b00      	cmp	r3, #0
   11318:	f040 808d 	bne.w	11436 <z_prf+0x65a>
			zero.predot = zero.postdot = zero.trail = 0;
   1131c:	4699      	mov	r9, r3
   1131e:	e085      	b.n	1142c <z_prf+0x650>
				exp--;
   11320:	3e01      	subs	r6, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   11322:	eb18 0808 	adds.w	r8, r8, r8
   11326:	eb49 0909 	adc.w	r9, r9, r9
   1132a:	f1b8 0f00 	cmp.w	r8, #0
   1132e:	f179 0300 	sbcs.w	r3, r9, #0
   11332:	daf5      	bge.n	11320 <z_prf+0x544>
   11334:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   11338:	e778      	b.n	1122c <z_prf+0x450>
			_rlrshift(&fract);
   1133a:	4648      	mov	r0, r9
   1133c:	f013 fbbe 	bl	24abc <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   11340:	e9dd a010 	ldrd	sl, r0, [sp, #64]	; 0x40
   11344:	2300      	movs	r3, #0
   11346:	930b      	str	r3, [sp, #44]	; 0x2c
   11348:	2300      	movs	r3, #0
   1134a:	900a      	str	r0, [sp, #40]	; 0x28
   1134c:	4abb      	ldr	r2, [pc, #748]	; (1163c <z_prf+0x860>)
   1134e:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
   11352:	4563      	cmp	r3, ip
   11354:	bf08      	it	eq
   11356:	455a      	cmpeq	r2, fp
   11358:	f108 0801 	add.w	r8, r8, #1
   1135c:	d3ed      	bcc.n	1133a <z_prf+0x55e>
		fract *= 5U;
   1135e:	2205      	movs	r2, #5
		decexp--;
   11360:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   11364:	fbaa ab02 	umull	sl, fp, sl, r2
   11368:	fb02 bb00 	mla	fp, r2, r0, fp
   1136c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
		decexp--;
   11370:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   11372:	2300      	movs	r3, #0
   11374:	2100      	movs	r1, #0
   11376:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1137a:	4299      	cmp	r1, r3
   1137c:	bf08      	it	eq
   1137e:	4558      	cmpeq	r0, fp
   11380:	d206      	bcs.n	11390 <z_prf+0x5b4>
   11382:	f1bc 0f00 	cmp.w	ip, #0
   11386:	f43f af5d 	beq.w	11244 <z_prf+0x468>
   1138a:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   1138e:	e759      	b.n	11244 <z_prf+0x468>
			fract <<= 1;
   11390:	eb1a 0a0a 	adds.w	sl, sl, sl
   11394:	eb4b 0b0b 	adc.w	fp, fp, fp
			exp--;
   11398:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1139c:	f04f 0c01 	mov.w	ip, #1
   113a0:	e7e7      	b.n	11372 <z_prf+0x596>
		_ldiv5(&fract);
   113a2:	a810      	add	r0, sp, #64	; 0x40
   113a4:	f013 fb9d 	bl	24ae2 <_ldiv5>
   113a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
   113ac:	f04f 0c00 	mov.w	ip, #0
		exp--;
   113b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   113b4:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   113b6:	2300      	movs	r3, #0
   113b8:	459b      	cmp	fp, r3
   113ba:	bf08      	it	eq
   113bc:	458a      	cmpeq	sl, r1
   113be:	d206      	bcs.n	113ce <z_prf+0x5f2>
   113c0:	f1bc 0f00 	cmp.w	ip, #0
   113c4:	f43f af45 	beq.w	11252 <z_prf+0x476>
   113c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   113cc:	e741      	b.n	11252 <z_prf+0x476>
			fract <<= 1;
   113ce:	1800      	adds	r0, r0, r0
   113d0:	4149      	adcs	r1, r1
			exp--;
   113d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   113d6:	f04f 0c01 	mov.w	ip, #1
   113da:	e7ec      	b.n	113b6 <z_prf+0x5da>
	if ((exp | fract) != 0) {
   113dc:	2600      	movs	r6, #0
   113de:	46b0      	mov	r8, r6
   113e0:	e73b      	b.n	1125a <z_prf+0x47e>
		if (!falt && (precision > 0)) {
   113e2:	9b05      	ldr	r3, [sp, #20]
			precision -= decexp;
   113e4:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   113e6:	b923      	cbnz	r3, 113f2 <z_prf+0x616>
			c = 'f';
   113e8:	2466      	movs	r4, #102	; 0x66
   113ea:	e755      	b.n	11298 <z_prf+0x4bc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   113ec:	f04f 0a00 	mov.w	sl, #0
   113f0:	e758      	b.n	112a4 <z_prf+0x4c8>
   113f2:	f04f 0a00 	mov.w	sl, #0
   113f6:	e758      	b.n	112aa <z_prf+0x4ce>
		if (exp < 0) {
   113f8:	2466      	movs	r4, #102	; 0x66
   113fa:	e1c1      	b.n	11780 <z_prf+0x9a4>
		_ldiv5(&ltemp);
   113fc:	4648      	mov	r0, r9
   113fe:	f013 fb70 	bl	24ae2 <_ldiv5>
		_rlrshift(&ltemp);
   11402:	f013 fb5b 	bl	24abc <_rlrshift>
   11406:	e760      	b.n	112ca <z_prf+0x4ee>
		if (decexp > 0) {
   11408:	46bb      	mov	fp, r7
			while (decexp > 0 && digit_count > 0) {
   1140a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1140c:	2b00      	cmp	r3, #0
   1140e:	dd07      	ble.n	11420 <z_prf+0x644>
				*buf++ = _get_digit(&fract, &digit_count);
   11410:	a90f      	add	r1, sp, #60	; 0x3c
   11412:	a810      	add	r0, sp, #64	; 0x40
   11414:	f013 fb95 	bl	24b42 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   11418:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   1141a:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
   1141e:	d1f4      	bne.n	1140a <z_prf+0x62e>
		if (falt || (precision > 0)) {
   11420:	9b05      	ldr	r3, [sp, #20]
   11422:	2b00      	cmp	r3, #0
   11424:	f040 819f 	bne.w	11766 <z_prf+0x98a>
			zp->predot = decexp;
   11428:	46b1      	mov	r9, r6
			decexp = 0;
   1142a:	461e      	mov	r6, r3
		if (falt || (precision > 0)) {
   1142c:	2d00      	cmp	r5, #0
   1142e:	dc04      	bgt.n	1143a <z_prf+0x65e>
			zero.predot = zero.postdot = zero.trail = 0;
   11430:	f04f 0800 	mov.w	r8, #0
   11434:	e020      	b.n	11478 <z_prf+0x69c>
   11436:	f04f 0900 	mov.w	r9, #0
			*buf++ = '.';
   1143a:	222e      	movs	r2, #46	; 0x2e
   1143c:	f10b 0301 	add.w	r3, fp, #1
   11440:	f88b 2000 	strb.w	r2, [fp]
		if (decexp < 0 && precision > 0) {
   11444:	2e00      	cmp	r6, #0
   11446:	f000 8195 	beq.w	11774 <z_prf+0x998>
   1144a:	2d00      	cmp	r5, #0
   1144c:	dd1e      	ble.n	1148c <z_prf+0x6b0>
			zp->postdot = -decexp;
   1144e:	f1c6 0800 	rsb	r8, r6, #0
   11452:	45a8      	cmp	r8, r5
   11454:	bfa8      	it	ge
   11456:	46a8      	movge	r8, r5
			precision -= zp->postdot;
   11458:	eba5 0508 	sub.w	r5, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
   1145c:	469b      	mov	fp, r3
   1145e:	e006      	b.n	1146e <z_prf+0x692>
			*buf++ = _get_digit(&fract, &digit_count);
   11460:	a90f      	add	r1, sp, #60	; 0x3c
   11462:	a810      	add	r0, sp, #64	; 0x40
   11464:	f013 fb6d 	bl	24b42 <_get_digit>
			precision--;
   11468:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   1146a:	f80b 0b01 	strb.w	r0, [fp], #1
		while (precision > 0 && digit_count > 0) {
   1146e:	2d00      	cmp	r5, #0
   11470:	dd02      	ble.n	11478 <z_prf+0x69c>
   11472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11474:	2b00      	cmp	r3, #0
   11476:	dcf3      	bgt.n	11460 <z_prf+0x684>
	if (prune_zero) {
   11478:	f1ba 0f00 	cmp.w	sl, #0
   1147c:	d11e      	bne.n	114bc <z_prf+0x6e0>
	*buf = 0;
   1147e:	2300      	movs	r3, #0
	return buf - start;
   11480:	af15      	add	r7, sp, #84	; 0x54
	*buf = 0;
   11482:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
   11486:	ebab 0007 	sub.w	r0, fp, r7
   1148a:	e682      	b.n	11192 <z_prf+0x3b6>
			*buf++ = '.';
   1148c:	469b      	mov	fp, r3
   1148e:	e7cf      	b.n	11430 <z_prf+0x654>
		*buf = _get_digit(&fract, &digit_count);
   11490:	a90f      	add	r1, sp, #60	; 0x3c
   11492:	a810      	add	r0, sp, #64	; 0x40
   11494:	f013 fb55 	bl	24b42 <_get_digit>
		if (falt || (precision > 0)) {
   11498:	9b05      	ldr	r3, [sp, #20]
		if (*buf++ != '0') {
   1149a:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   1149c:	7038      	strb	r0, [r7, #0]
			decexp--;
   1149e:	bf18      	it	ne
   114a0:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   114a4:	2b00      	cmp	r3, #0
   114a6:	d13c      	bne.n	11522 <z_prf+0x746>
   114a8:	2d00      	cmp	r5, #0
   114aa:	dc3a      	bgt.n	11522 <z_prf+0x746>
		if (*buf++ != '0') {
   114ac:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
   114b0:	f1ba 0f00 	cmp.w	sl, #0
   114b4:	d048      	beq.n	11548 <z_prf+0x76c>
			zero.predot = zero.postdot = zero.trail = 0;
   114b6:	f04f 0900 	mov.w	r9, #0
   114ba:	46c8      	mov	r8, r9
		while (*--buf == '0')
   114bc:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   114c0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   114c4:	2a30      	cmp	r2, #48	; 0x30
   114c6:	d03d      	beq.n	11544 <z_prf+0x768>
   114c8:	2a2e      	cmp	r2, #46	; 0x2e
   114ca:	bf08      	it	eq
   114cc:	469b      	moveq	fp, r3
   114ce:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   114d0:	f004 03df 	and.w	r3, r4, #223	; 0xdf
   114d4:	2b45      	cmp	r3, #69	; 0x45
   114d6:	d1d2      	bne.n	1147e <z_prf+0x6a2>
		if (decexp < 0) {
   114d8:	2e00      	cmp	r6, #0
			*buf++ = '-';
   114da:	bfb4      	ite	lt
   114dc:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   114de:	232b      	movge	r3, #43	; 0x2b
		*buf++ = c;
   114e0:	465a      	mov	r2, fp
			decexp = -decexp;
   114e2:	bfb8      	it	lt
   114e4:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   114e6:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   114e8:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '+';
   114ec:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
   114f0:	dd0a      	ble.n	11508 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
   114f2:	2164      	movs	r1, #100	; 0x64
   114f4:	fb96 f3f1 	sdiv	r3, r6, r1
			decexp %= 100;
   114f8:	fb01 6613 	mls	r6, r1, r3, r6
			*buf++ = (decexp / 100) + '0';
   114fc:	f103 0030 	add.w	r0, r3, #48	; 0x30
   11500:	f10b 0203 	add.w	r2, fp, #3
   11504:	f88b 0002 	strb.w	r0, [fp, #2]
		*buf++ = (decexp / 10) + '0';
   11508:	210a      	movs	r1, #10
   1150a:	fb96 f3f1 	sdiv	r3, r6, r1
   1150e:	4693      	mov	fp, r2
		decexp %= 10;
   11510:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   11514:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
   11518:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1151a:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
   1151e:	7056      	strb	r6, [r2, #1]
   11520:	e7ad      	b.n	1147e <z_prf+0x6a2>
			*buf++ = '.';
   11522:	232e      	movs	r3, #46	; 0x2e
   11524:	f107 0b02 	add.w	fp, r7, #2
   11528:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   1152a:	2d00      	cmp	r5, #0
   1152c:	ddc0      	ble.n	114b0 <z_prf+0x6d4>
   1152e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11530:	2b00      	cmp	r3, #0
   11532:	ddbd      	ble.n	114b0 <z_prf+0x6d4>
			*buf++ = _get_digit(&fract, &digit_count);
   11534:	a90f      	add	r1, sp, #60	; 0x3c
   11536:	a810      	add	r0, sp, #64	; 0x40
   11538:	f013 fb03 	bl	24b42 <_get_digit>
			precision--;
   1153c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   1153e:	f80b 0b01 	strb.w	r0, [fp], #1
   11542:	e7f2      	b.n	1152a <z_prf+0x74e>
		while (*--buf == '0')
   11544:	469b      	mov	fp, r3
   11546:	e7b9      	b.n	114bc <z_prf+0x6e0>
			zero.predot = zero.postdot = zero.trail = 0;
   11548:	46d1      	mov	r9, sl
   1154a:	46d0      	mov	r8, sl
   1154c:	e7c0      	b.n	114d0 <z_prf+0x6f4>
					prefix = 1;
   1154e:	f04f 0b01 	mov.w	fp, #1
   11552:	e62e      	b.n	111b2 <z_prf+0x3d6>
   11554:	4632      	mov	r2, r6
   11556:	f852 3b04 	ldr.w	r3, [r2], #4
				switch (i) {
   1155a:	2f68      	cmp	r7, #104	; 0x68
   1155c:	9204      	str	r2, [sp, #16]
   1155e:	d006      	beq.n	1156e <z_prf+0x792>
   11560:	2f6c      	cmp	r7, #108	; 0x6c
   11562:	d009      	beq.n	11578 <z_prf+0x79c>
   11564:	2f48      	cmp	r7, #72	; 0x48
   11566:	d107      	bne.n	11578 <z_prf+0x79c>
					*va_arg(vargs, char *) = count;
   11568:	9a01      	ldr	r2, [sp, #4]
   1156a:	701a      	strb	r2, [r3, #0]
					break;
   1156c:	e001      	b.n	11572 <z_prf+0x796>
					*va_arg(vargs, short *) = count;
   1156e:	9a01      	ldr	r2, [sp, #4]
   11570:	801a      	strh	r2, [r3, #0]
				continue;
   11572:	9e04      	ldr	r6, [sp, #16]
   11574:	9a06      	ldr	r2, [sp, #24]
   11576:	e439      	b.n	10dec <z_prf+0x10>
					*va_arg(vargs, int *) = count;
   11578:	9a01      	ldr	r2, [sp, #4]
   1157a:	601a      	str	r2, [r3, #0]
					break;
   1157c:	e7f9      	b.n	11572 <z_prf+0x796>
				val = (uintptr_t) va_arg(vargs, void *);
   1157e:	1d33      	adds	r3, r6, #4
   11580:	9304      	str	r3, [sp, #16]
		*buf++ = '0';
   11582:	f647 0330 	movw	r3, #30768	; 0x7830
				clen = _to_hex(buf, val, true, 'x');
   11586:	6831      	ldr	r1, [r6, #0]
	len = _to_x(buf, value, 16);
   11588:	2210      	movs	r2, #16
   1158a:	f10d 0056 	add.w	r0, sp, #86	; 0x56
		*buf++ = '0';
   1158e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16);
   11592:	f013 fa73 	bl	24a7c <_to_x>
				prefix = 2;
   11596:	f04f 0b02 	mov.w	fp, #2
	return len + (buf - buf0);
   1159a:	1c87      	adds	r7, r0, #2
				break;
   1159c:	e52b      	b.n	10ff6 <z_prf+0x21a>
					if (cptr[clen] == '\0') {
   1159e:	5df3      	ldrb	r3, [r6, r7]
   115a0:	2b00      	cmp	r3, #0
   115a2:	d045      	beq.n	11630 <z_prf+0x854>
				for (clen = 0; clen < precision; clen++) {
   115a4:	3701      	adds	r7, #1
   115a6:	e53a      	b.n	1101e <z_prf+0x242>
	if (alt_form) {
   115a8:	4638      	mov	r0, r7
	return (buf - buf0) + _to_x(buf, value, 8);
   115aa:	2208      	movs	r2, #8
   115ac:	1bc7      	subs	r7, r0, r7
   115ae:	f013 fa65 	bl	24a7c <_to_x>
   115b2:	4407      	add	r7, r0
			prefix = 0;
   115b4:	f04f 0b00 	mov.w	fp, #0
   115b8:	e51d      	b.n	10ff6 <z_prf+0x21a>
		*buf++ = '0';
   115ba:	f10d 0055 	add.w	r0, sp, #85	; 0x55
   115be:	e7f4      	b.n	115aa <z_prf+0x7ce>
				} else if (c == 'u') {
   115c0:	2c75      	cmp	r4, #117	; 0x75
   115c2:	d105      	bne.n	115d0 <z_prf+0x7f4>
	return _to_x(buf, value, 10);
   115c4:	220a      	movs	r2, #10
   115c6:	a815      	add	r0, sp, #84	; 0x54
   115c8:	f013 fa58 	bl	24a7c <_to_x>
   115cc:	4607      	mov	r7, r0
   115ce:	e7f1      	b.n	115b4 <z_prf+0x7d8>
	if (alt_form) {
   115d0:	9b05      	ldr	r3, [sp, #20]
   115d2:	b1fb      	cbz	r3, 11614 <z_prf+0x838>
		*buf++ = '0';
   115d4:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   115d8:	f10d 0656 	add.w	r6, sp, #86	; 0x56
		*buf++ = '0';
   115dc:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16);
   115e0:	2210      	movs	r2, #16
   115e2:	4630      	mov	r0, r6
   115e4:	f013 fa4a 	bl	24a7c <_to_x>
	if (prefix == 'X') {
   115e8:	2c58      	cmp	r4, #88	; 0x58
   115ea:	d10c      	bne.n	11606 <z_prf+0x82a>
   115ec:	f10d 0353 	add.w	r3, sp, #83	; 0x53
		if (*buf >= 'a' && *buf <= 'z') {
   115f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   115f4:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   115f8:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
   115fa:	bf9c      	itt	ls
   115fc:	3a20      	subls	r2, #32
   115fe:	701a      	strbls	r2, [r3, #0]
	} while (*buf++);
   11600:	781a      	ldrb	r2, [r3, #0]
   11602:	2a00      	cmp	r2, #0
   11604:	d1f4      	bne.n	115f0 <z_prf+0x814>
	return len + (buf - buf0);
   11606:	af15      	add	r7, sp, #84	; 0x54
			prefix = 0;
   11608:	9b05      	ldr	r3, [sp, #20]
	return len + (buf - buf0);
   1160a:	1bf7      	subs	r7, r6, r7
   1160c:	4407      	add	r7, r0
			prefix = 0;
   1160e:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   11612:	e4f0      	b.n	10ff6 <z_prf+0x21a>
	if (alt_form) {
   11614:	ae15      	add	r6, sp, #84	; 0x54
   11616:	e7e3      	b.n	115e0 <z_prf+0x804>
				PUTC('%');
   11618:	9903      	ldr	r1, [sp, #12]
   1161a:	4620      	mov	r0, r4
   1161c:	f7ff bbee 	b.w	10dfc <z_prf+0x20>
				count++;
   11620:	9b01      	ldr	r3, [sp, #4]
   11622:	3301      	adds	r3, #1
				count += 2;
   11624:	9301      	str	r3, [sp, #4]
				continue;
   11626:	9604      	str	r6, [sp, #16]
   11628:	e7a3      	b.n	11572 <z_prf+0x796>
					prefix = 1;
   1162a:	f04f 0b01 	mov.w	fp, #1
   1162e:	e4e2      	b.n	10ff6 <z_prf+0x21a>
   11630:	461d      	mov	r5, r3
   11632:	e4f8      	b.n	11026 <z_prf+0x24a>
			zero.predot = zero.postdot = zero.trail = 0;
   11634:	2500      	movs	r5, #0
   11636:	46a8      	mov	r8, r5
   11638:	46a9      	mov	r9, r5
   1163a:	e5c6      	b.n	111ca <z_prf+0x3ee>
   1163c:	33333332 	.word	0x33333332
			cptr = buf;
   11640:	ae15      	add	r6, sp, #84	; 0x54
				zero_head = 0;
   11642:	f04f 0a00 	mov.w	sl, #0
   11646:	e502      	b.n	1104e <z_prf+0x272>
   11648:	ae15      	add	r6, sp, #84	; 0x54
   1164a:	f8dd a020 	ldr.w	sl, [sp, #32]
   1164e:	e4fe      	b.n	1104e <z_prf+0x272>
   11650:	9305      	str	r3, [sp, #20]
					PUTC(' ');
   11652:	9903      	ldr	r1, [sp, #12]
   11654:	9b02      	ldr	r3, [sp, #8]
   11656:	2020      	movs	r0, #32
   11658:	4798      	blx	r3
   1165a:	3001      	adds	r0, #1
   1165c:	9b05      	ldr	r3, [sp, #20]
   1165e:	f43f abd2 	beq.w	10e06 <z_prf+0x2a>
				while (width-- > 0) {
   11662:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   11666:	d2f3      	bcs.n	11650 <z_prf+0x874>
				count += width;
   11668:	9a01      	ldr	r2, [sp, #4]
   1166a:	4422      	add	r2, r4
   1166c:	9201      	str	r2, [sp, #4]
				while (width-- > 0) {
   1166e:	461c      	mov	r4, r3
   11670:	e4f6      	b.n	11060 <z_prf+0x284>
   11672:	4623      	mov	r3, r4
   11674:	e7f5      	b.n	11662 <z_prf+0x886>
   11676:	9305      	str	r3, [sp, #20]
				PUTC(*cptr++);
   11678:	9903      	ldr	r1, [sp, #12]
   1167a:	9b02      	ldr	r3, [sp, #8]
   1167c:	f816 0b01 	ldrb.w	r0, [r6], #1
   11680:	4798      	blx	r3
   11682:	3001      	adds	r0, #1
   11684:	9b05      	ldr	r3, [sp, #20]
   11686:	f47f aced 	bne.w	11064 <z_prf+0x288>
   1168a:	f7ff bbbc 	b.w	10e06 <z_prf+0x2a>
   1168e:	9305      	str	r3, [sp, #20]
				PUTC('0');
   11690:	9903      	ldr	r1, [sp, #12]
   11692:	9b02      	ldr	r3, [sp, #8]
   11694:	2030      	movs	r0, #48	; 0x30
   11696:	4798      	blx	r3
   11698:	3001      	adds	r0, #1
   1169a:	9b05      	ldr	r3, [sp, #20]
   1169c:	f47f ace6 	bne.w	1106c <z_prf+0x290>
   116a0:	f7ff bbb1 	b.w	10e06 <z_prf+0x2a>
					PUTC(c);
   116a4:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   116a8:	9205      	str	r2, [sp, #20]
   116aa:	4798      	blx	r3
   116ac:	3001      	adds	r0, #1
   116ae:	f43f abaa 	beq.w	10e06 <z_prf+0x2a>
					c = *++cptr;
   116b2:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   116b6:	9a05      	ldr	r2, [sp, #20]
   116b8:	e4e4      	b.n	11084 <z_prf+0x2a8>
   116ba:	9305      	str	r3, [sp, #20]
					PUTC('0');
   116bc:	9903      	ldr	r1, [sp, #12]
   116be:	9b02      	ldr	r3, [sp, #8]
   116c0:	2030      	movs	r0, #48	; 0x30
   116c2:	9207      	str	r2, [sp, #28]
   116c4:	4798      	blx	r3
   116c6:	9a07      	ldr	r2, [sp, #28]
   116c8:	3001      	adds	r0, #1
   116ca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   116ce:	9b05      	ldr	r3, [sp, #20]
   116d0:	f47f ace0 	bne.w	11094 <z_prf+0x2b8>
   116d4:	f7ff bb97 	b.w	10e06 <z_prf+0x2a>
			clen -= prefix;
   116d8:	46b9      	mov	r9, r7
   116da:	e4e0      	b.n	1109e <z_prf+0x2c2>
   116dc:	9305      	str	r3, [sp, #20]
					PUTC('0');
   116de:	9903      	ldr	r1, [sp, #12]
   116e0:	9b02      	ldr	r3, [sp, #8]
   116e2:	2030      	movs	r0, #48	; 0x30
   116e4:	4798      	blx	r3
   116e6:	9b05      	ldr	r3, [sp, #20]
   116e8:	3001      	adds	r0, #1
   116ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   116ee:	f47f aced 	bne.w	110cc <z_prf+0x2f0>
   116f2:	f7ff bb88 	b.w	10e06 <z_prf+0x2a>
					PUTC(c);
   116f6:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   116fa:	4798      	blx	r3
   116fc:	3001      	adds	r0, #1
   116fe:	f43f ab82 	beq.w	10e06 <z_prf+0x2a>
					c = *++cptr;
   11702:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11706:	e4ea      	b.n	110de <z_prf+0x302>
					PUTC('0');
   11708:	9903      	ldr	r1, [sp, #12]
   1170a:	2030      	movs	r0, #48	; 0x30
   1170c:	9b02      	ldr	r3, [sp, #8]
   1170e:	4798      	blx	r3
   11710:	3001      	adds	r0, #1
   11712:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   11716:	f47f aced 	bne.w	110f4 <z_prf+0x318>
   1171a:	f7ff bb74 	b.w	10e06 <z_prf+0x2a>
				PUTC(*cptr++);
   1171e:	9903      	ldr	r1, [sp, #12]
   11720:	f816 0b01 	ldrb.w	r0, [r6], #1
   11724:	9b02      	ldr	r3, [sp, #8]
   11726:	4798      	blx	r3
   11728:	3001      	adds	r0, #1
   1172a:	f43f ab6c 	beq.w	10e06 <z_prf+0x2a>
   1172e:	eba9 0306 	sub.w	r3, r9, r6
			while (clen-- > 0) {
   11732:	2b00      	cmp	r3, #0
   11734:	dcf3      	bgt.n	1171e <z_prf+0x942>
			count += prefix;
   11736:	9b01      	ldr	r3, [sp, #4]
			if (width > 0) {
   11738:	2c00      	cmp	r4, #0
			count += prefix;
   1173a:	445b      	add	r3, fp
   1173c:	469b      	mov	fp, r3
			count += zero_head;
   1173e:	44d3      	add	fp, sl
			count += clen;
   11740:	eb07 030b 	add.w	r3, r7, fp
   11744:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   11746:	f77f af14 	ble.w	11572 <z_prf+0x796>
				count += width;
   1174a:	4423      	add	r3, r4
   1174c:	9301      	str	r3, [sp, #4]
				while (width-- > 0) {
   1174e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   11752:	f4ff af0e 	bcc.w	11572 <z_prf+0x796>
					PUTC(' ');
   11756:	9903      	ldr	r1, [sp, #12]
   11758:	2020      	movs	r0, #32
   1175a:	9b02      	ldr	r3, [sp, #8]
   1175c:	4798      	blx	r3
   1175e:	3001      	adds	r0, #1
   11760:	d1f5      	bne.n	1174e <z_prf+0x972>
   11762:	f7ff bb50 	b.w	10e06 <z_prf+0x2a>
			*buf++ = '.';
   11766:	222e      	movs	r2, #46	; 0x2e
			zp->predot = decexp;
   11768:	46b1      	mov	r9, r6
			decexp = 0;
   1176a:	2600      	movs	r6, #0
			*buf++ = '.';
   1176c:	f10b 0301 	add.w	r3, fp, #1
   11770:	f88b 2000 	strb.w	r2, [fp]
			zero.predot = zero.postdot = zero.trail = 0;
   11774:	46b0      	mov	r8, r6
   11776:	e671      	b.n	1145c <z_prf+0x680>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   11778:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   1177c:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   11780:	2310      	movs	r3, #16
   11782:	4598      	cmp	r8, r3
   11784:	930f      	str	r3, [sp, #60]	; 0x3c
   11786:	bfa8      	it	ge
   11788:	4698      	movge	r8, r3
   1178a:	e597      	b.n	112bc <z_prf+0x4e0>

0001178c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1178c:	4b01      	ldr	r3, [pc, #4]	; (11794 <__stdout_hook_install+0x8>)
   1178e:	6018      	str	r0, [r3, #0]
}
   11790:	4770      	bx	lr
   11792:	bf00      	nop
   11794:	2002d3ac 	.word	0x2002d3ac

00011798 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
   11798:	2902      	cmp	r1, #2
   1179a:	d102      	bne.n	117a2 <z_impl_zephyr_fputc+0xa>
   1179c:	4b02      	ldr	r3, [pc, #8]	; (117a8 <z_impl_zephyr_fputc+0x10>)
   1179e:	681b      	ldr	r3, [r3, #0]
   117a0:	4718      	bx	r3
}
   117a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   117a6:	4770      	bx	lr
   117a8:	2002d3ac 	.word	0x2002d3ac

000117ac <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   117ac:	b40c      	push	{r2, r3}
   117ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   117b0:	b909      	cbnz	r1, 117b6 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   117b2:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   117b6:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   117ba:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   117bc:	9a06      	ldr	r2, [sp, #24]
   117be:	a902      	add	r1, sp, #8
   117c0:	4805      	ldr	r0, [pc, #20]	; (117d8 <snprintf+0x2c>)
	va_start(vargs, format);
   117c2:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   117c4:	f7ff fb0a 	bl	10ddc <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   117c8:	2200      	movs	r2, #0
   117ca:	9b02      	ldr	r3, [sp, #8]
   117cc:	701a      	strb	r2, [r3, #0]
	return r;
}
   117ce:	b005      	add	sp, #20
   117d0:	f85d eb04 	ldr.w	lr, [sp], #4
   117d4:	b002      	add	sp, #8
   117d6:	4770      	bx	lr
   117d8:	00024b83 	.word	0x00024b83

000117dc <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   117dc:	b40e      	push	{r1, r2, r3}
   117de:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   117e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   117e4:	ab05      	add	r3, sp, #20
   117e6:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   117ea:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   117ec:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   117ee:	4806      	ldr	r0, [pc, #24]	; (11808 <sprintf+0x2c>)
   117f0:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   117f2:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   117f4:	f7ff faf2 	bl	10ddc <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   117f8:	2200      	movs	r2, #0
   117fa:	9b02      	ldr	r3, [sp, #8]
   117fc:	701a      	strb	r2, [r3, #0]
	return r;
}
   117fe:	b004      	add	sp, #16
   11800:	f85d eb04 	ldr.w	lr, [sp], #4
   11804:	b003      	add	sp, #12
   11806:	4770      	bx	lr
   11808:	00024b83 	.word	0x00024b83

0001180c <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
   1180c:	b40f      	push	{r0, r1, r2, r3}
   1180e:	b507      	push	{r0, r1, r2, lr}
   11810:	ab04      	add	r3, sp, #16
   11812:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = z_prf(fputc, DESC(stdout), format, vargs);
   11816:	2102      	movs	r1, #2
   11818:	4804      	ldr	r0, [pc, #16]	; (1182c <printf+0x20>)
	va_start(vargs, format);
   1181a:	9301      	str	r3, [sp, #4]
	r = z_prf(fputc, DESC(stdout), format, vargs);
   1181c:	f7ff fade 	bl	10ddc <z_prf>
	va_end(vargs);

	return r;
}
   11820:	b003      	add	sp, #12
   11822:	f85d eb04 	ldr.w	lr, [sp], #4
   11826:	b004      	add	sp, #16
   11828:	4770      	bx	lr
   1182a:	bf00      	nop
   1182c:	00024b7f 	.word	0x00024b7f

00011830 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   11830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11832:	4e09      	ldr	r6, [pc, #36]	; (11858 <net_if_init+0x28>)

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   11834:	2400      	movs	r4, #0
   11836:	4637      	mov	r7, r6
   11838:	4d08      	ldr	r5, [pc, #32]	; (1185c <net_if_init+0x2c>)
   1183a:	1bad      	subs	r5, r5, r6
   1183c:	42ac      	cmp	r4, r5
   1183e:	eb06 0004 	add.w	r0, r6, r4
   11842:	d100      	bne.n	11846 <net_if_init+0x16>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   11844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   11846:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   11848:	681b      	ldr	r3, [r3, #0]
   1184a:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   1184c:	b113      	cbz	r3, 11854 <net_if_init+0x24>
   1184e:	681b      	ldr	r3, [r3, #0]
   11850:	b103      	cbz	r3, 11854 <net_if_init+0x24>
	api->init(iface);
   11852:	4798      	blx	r3
   11854:	3420      	adds	r4, #32
   11856:	e7f1      	b.n	1183c <net_if_init+0xc>
   11858:	2002d5c0 	.word	0x2002d5c0
   1185c:	2002d5e0 	.word	0x2002d5e0

00011860 <net_if_post_init>:

void net_if_post_init(void)
{
   11860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11862:	4e0a      	ldr	r6, [pc, #40]	; (1188c <net_if_post_init+0x2c>)
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   11864:	2400      	movs	r4, #0
   11866:	4637      	mov	r7, r6
   11868:	4d09      	ldr	r5, [pc, #36]	; (11890 <net_if_post_init+0x30>)
   1186a:	1bad      	subs	r5, r5, r6
   1186c:	42ac      	cmp	r4, r5
   1186e:	eb04 0306 	add.w	r3, r4, r6
   11872:	d100      	bne.n	11876 <net_if_post_init+0x16>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   11874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   11876:	5938      	ldr	r0, [r7, r4]
   11878:	2103      	movs	r1, #3
   1187a:	300c      	adds	r0, #12
   1187c:	f013 f99d 	bl	24bba <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   11880:	b910      	cbnz	r0, 11888 <net_if_post_init+0x28>
			net_if_up(iface);
   11882:	4618      	mov	r0, r3
   11884:	f013 f99f 	bl	24bc6 <net_if_up>
   11888:	3420      	adds	r4, #32
   1188a:	e7ef      	b.n	1186c <net_if_post_init+0xc>
   1188c:	2002d5c0 	.word	0x2002d5c0
   11890:	2002d5e0 	.word	0x2002d5e0

00011894 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   11894:	2300      	movs	r3, #0
{
   11896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   1189a:	2802      	cmp	r0, #2
{
   1189c:	b087      	sub	sp, #28
   1189e:	4682      	mov	sl, r0
   118a0:	468b      	mov	fp, r1
   118a2:	4691      	mov	r9, r2
	unsigned char zeros[8] = { 0 };
   118a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (family == AF_INET6) {
   118a8:	d13f      	bne.n	1192a <z_impl_net_addr_ntop+0x96>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   118aa:	9103      	str	r1, [sp, #12]
   118ac:	a904      	add	r1, sp, #16
   118ae:	b2dc      	uxtb	r4, r3
{
   118b0:	2200      	movs	r2, #0
   118b2:	e007      	b.n	118c4 <z_impl_net_addr_ntop+0x30>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   118b4:	7808      	ldrb	r0, [r1, #0]
   118b6:	3201      	adds	r2, #1
   118b8:	3001      	adds	r0, #1
   118ba:	7008      	strb	r0, [r1, #0]
			for (j = i; j < 8; j++) {
   118bc:	18a0      	adds	r0, r4, r2
   118be:	b2c0      	uxtb	r0, r0
   118c0:	2807      	cmp	r0, #7
   118c2:	d804      	bhi.n	118ce <z_impl_net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   118c4:	1898      	adds	r0, r3, r2
   118c6:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
   118ca:	2800      	cmp	r0, #0
   118cc:	d0f2      	beq.n	118b4 <z_impl_net_addr_ntop+0x20>
   118ce:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   118d0:	2b08      	cmp	r3, #8
   118d2:	f101 0101 	add.w	r1, r1, #1
   118d6:	d1ea      	bne.n	118ae <z_impl_net_addr_ntop+0x1a>
   118d8:	2300      	movs	r3, #0
	s8_t pos = -1;
   118da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   118de:	f04f 0801 	mov.w	r8, #1
			}
		}

		for (i = 0U; i < 8; i++) {
			if (zeros[i] > longest) {
   118e2:	aa04      	add	r2, sp, #16
   118e4:	5cd2      	ldrb	r2, [r2, r3]
   118e6:	4542      	cmp	r2, r8
				longest = zeros[i];
				pos = i;
   118e8:	bf88      	it	hi
   118ea:	b25f      	sxtbhi	r7, r3
   118ec:	f103 0301 	add.w	r3, r3, #1
   118f0:	bf88      	it	hi
   118f2:	4690      	movhi	r8, r2
		for (i = 0U; i < 8; i++) {
   118f4:	2b08      	cmp	r3, #8
   118f6:	d1f4      	bne.n	118e2 <z_impl_net_addr_ntop+0x4e>
		len = 8;
   118f8:	9302      	str	r3, [sp, #8]
   118fa:	f1b8 0f01 	cmp.w	r8, #1
   118fe:	f04f 033a 	mov.w	r3, #58	; 0x3a
   11902:	bf08      	it	eq
   11904:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
   11908:	9301      	str	r3, [sp, #4]
	bool needcolon = false;
   1190a:	2200      	movs	r2, #0
	char *ptr = dst;
   1190c:	464c      	mov	r4, r9
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1190e:	4616      	mov	r6, r2
   11910:	9b02      	ldr	r3, [sp, #8]
   11912:	429e      	cmp	r6, r3
   11914:	db19      	blt.n	1194a <z_impl_net_addr_ntop+0xb6>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   11916:	454c      	cmp	r4, r9
   11918:	d009      	beq.n	1192e <z_impl_net_addr_ntop+0x9a>
   1191a:	2300      	movs	r3, #0
		return NULL;
	}

	if (family == AF_INET) {
   1191c:	f1ba 0f01 	cmp.w	sl, #1
		*(ptr - 1) = '\0';
   11920:	bf0c      	ite	eq
   11922:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   11926:	7023      	strbne	r3, [r4, #0]
   11928:	e003      	b.n	11932 <z_impl_net_addr_ntop+0x9e>
	} else if (family == AF_INET) {
   1192a:	2801      	cmp	r0, #1
   1192c:	d005      	beq.n	1193a <z_impl_net_addr_ntop+0xa6>
		return NULL;
   1192e:	f04f 0900 	mov.w	r9, #0
	}

	return dst;
}
   11932:	4648      	mov	r0, r9
   11934:	b007      	add	sp, #28
   11936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1193a:	232e      	movs	r3, #46	; 0x2e
   1193c:	2604      	movs	r6, #4
	s8_t pos = -1;
   1193e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		delim = '.';
   11942:	e9cd 3601 	strd	r3, r6, [sp, #4]
	u8_t i, bl, bh, longest = 1U;
   11946:	4680      	mov	r8, r0
   11948:	e7df      	b.n	1190a <z_impl_net_addr_ntop+0x76>
		if (len == 4) {
   1194a:	9b02      	ldr	r3, [sp, #8]
   1194c:	2b04      	cmp	r3, #4
   1194e:	d12d      	bne.n	119ac <z_impl_net_addr_ntop+0x118>
			value = (u32_t)addr->s4_addr[i];
   11950:	f81b 1006 	ldrb.w	r1, [fp, r6]
			if (value == 0U) {
   11954:	b949      	cbnz	r1, 1196a <z_impl_net_addr_ntop+0xd6>
				*ptr++ = '0';
   11956:	2330      	movs	r3, #48	; 0x30
   11958:	4620      	mov	r0, r4
   1195a:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   1195e:	9b01      	ldr	r3, [sp, #4]
   11960:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   11962:	3601      	adds	r6, #1
   11964:	b2f6      	uxtb	r6, r6
   11966:	4604      	mov	r4, r0
   11968:	e7d2      	b.n	11910 <z_impl_net_addr_ntop+0x7c>
			l = net_value_to_udec(ptr, value, 0);
   1196a:	4623      	mov	r3, r4
   1196c:	2009      	movs	r0, #9
   1196e:	f04f 0e00 	mov.w	lr, #0
   11972:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 11a34 <z_impl_net_addr_ntop+0x1a0>
		temp = value / divisor;
   11976:	fbb1 f5fc 	udiv	r5, r1, ip
		if ((precision > i) || (temp != 0)) {
   1197a:	4586      	cmp	lr, r0
		value = value % divisor;
   1197c:	fb0c 1115 	mls	r1, ip, r5, r1
		if ((precision > i) || (temp != 0)) {
   11980:	dc00      	bgt.n	11984 <z_impl_net_addr_ntop+0xf0>
   11982:	b11d      	cbz	r5, 1198c <z_impl_net_addr_ntop+0xf8>
			*buf++ = (char) (temp + '0');
   11984:	4686      	mov	lr, r0
   11986:	3530      	adds	r5, #48	; 0x30
   11988:	701d      	strb	r5, [r3, #0]
   1198a:	3301      	adds	r3, #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1198c:	250a      	movs	r5, #10
   1198e:	3801      	subs	r0, #1
   11990:	fbbc fcf5 	udiv	ip, ip, r5
   11994:	1c45      	adds	r5, r0, #1
   11996:	d1ee      	bne.n	11976 <z_impl_net_addr_ntop+0xe2>
	*buf = 0;
   11998:	f04f 0100 	mov.w	r1, #0
   1199c:	7019      	strb	r1, [r3, #0]
	return buf - start;
   1199e:	1b1b      	subs	r3, r3, r4
			ptr += l;
   119a0:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   119a2:	9901      	ldr	r1, [sp, #4]
			ptr += l;
   119a4:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   119a6:	3001      	adds	r0, #1
   119a8:	54e1      	strb	r1, [r4, r3]
			continue;
   119aa:	e7da      	b.n	11962 <z_impl_net_addr_ntop+0xce>
		if (i == pos) {
   119ac:	42b7      	cmp	r7, r6
   119ae:	d10e      	bne.n	119ce <z_impl_net_addr_ntop+0x13a>
			if (needcolon || i == 0U) {
   119b0:	b902      	cbnz	r2, 119b4 <z_impl_net_addr_ntop+0x120>
   119b2:	b91f      	cbnz	r7, 119bc <z_impl_net_addr_ntop+0x128>
				*ptr++ = ':';
   119b4:	233a      	movs	r3, #58	; 0x3a
   119b6:	3401      	adds	r4, #1
   119b8:	f804 3c01 	strb.w	r3, [r4, #-1]
			*ptr++ = ':';
   119bc:	233a      	movs	r3, #58	; 0x3a
   119be:	7023      	strb	r3, [r4, #0]
			i += longest - 1U;
   119c0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   119c4:	441e      	add	r6, r3
			*ptr++ = ':';
   119c6:	1c60      	adds	r0, r4, #1
			i += longest - 1U;
   119c8:	b2f6      	uxtb	r6, r6
			needcolon = false;
   119ca:	2200      	movs	r2, #0
			continue;
   119cc:	e7c9      	b.n	11962 <z_impl_net_addr_ntop+0xce>
		if (needcolon) {
   119ce:	b11a      	cbz	r2, 119d8 <z_impl_net_addr_ntop+0x144>
			*ptr++ = ':';
   119d0:	233a      	movs	r3, #58	; 0x3a
   119d2:	3401      	adds	r4, #1
   119d4:	f804 3c01 	strb.w	r3, [r4, #-1]
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   119d8:	9b03      	ldr	r3, [sp, #12]
   119da:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   119de:	021d      	lsls	r5, r3, #8
   119e0:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   119e4:	b22d      	sxth	r5, r5
		bh = value >> 8;
   119e6:	f3c5 2307 	ubfx	r3, r5, #8, #8
		bl = value & 0xff;
   119ea:	b2ed      	uxtb	r5, r5
		if (bh) {
   119ec:	b1ab      	cbz	r3, 11a1a <z_impl_net_addr_ntop+0x186>
			if (bh > 0x0f) {
   119ee:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   119f0:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   119f2:	d90b      	bls.n	11a0c <z_impl_net_addr_ntop+0x178>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   119f4:	2300      	movs	r3, #0
   119f6:	2261      	movs	r2, #97	; 0x61
   119f8:	4620      	mov	r0, r4
   119fa:	f013 f913 	bl	24c24 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   119fe:	2301      	movs	r3, #1
   11a00:	2261      	movs	r2, #97	; 0x61
   11a02:	4629      	mov	r1, r5
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11a04:	f013 f90e 	bl	24c24 <net_byte_to_hex>
		needcolon = true;
   11a08:	2201      	movs	r2, #1
   11a0a:	e7aa      	b.n	11962 <z_impl_net_addr_ntop+0xce>
				if (bh < 10) {
   11a0c:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   11a0e:	bf94      	ite	ls
   11a10:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   11a12:	3157      	addhi	r1, #87	; 0x57
   11a14:	1c60      	adds	r0, r4, #1
   11a16:	7021      	strb	r1, [r4, #0]
   11a18:	e7f1      	b.n	119fe <z_impl_net_addr_ntop+0x16a>
		} else if (bl > 0x0f) {
   11a1a:	2d0f      	cmp	r5, #15
   11a1c:	d903      	bls.n	11a26 <z_impl_net_addr_ntop+0x192>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   11a1e:	2261      	movs	r2, #97	; 0x61
   11a20:	4629      	mov	r1, r5
   11a22:	4620      	mov	r0, r4
   11a24:	e7ee      	b.n	11a04 <z_impl_net_addr_ntop+0x170>
			if (bl < 10) {
   11a26:	2d09      	cmp	r5, #9
				*ptr++ = (char)(bl + '0');
   11a28:	bf94      	ite	ls
   11a2a:	3530      	addls	r5, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   11a2c:	3557      	addhi	r5, #87	; 0x57
   11a2e:	1c60      	adds	r0, r4, #1
   11a30:	7025      	strb	r5, [r4, #0]
   11a32:	e7e9      	b.n	11a08 <z_impl_net_addr_ntop+0x174>
   11a34:	3b9aca00 	.word	0x3b9aca00

00011a38 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   11a38:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   11a3a:	4b09      	ldr	r3, [pc, #36]	; (11a60 <gpio_nrfx_init+0x28>)
   11a3c:	781a      	ldrb	r2, [r3, #0]
   11a3e:	b96a      	cbnz	r2, 11a5c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   11a40:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   11a42:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   11a44:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   11a46:	2105      	movs	r1, #5
   11a48:	f7fe fb0a 	bl	10060 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   11a4c:	2031      	movs	r0, #49	; 0x31
   11a4e:	f7fe faf7 	bl	10040 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   11a52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   11a56:	4b03      	ldr	r3, [pc, #12]	; (11a64 <gpio_nrfx_init+0x2c>)
   11a58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   11a5c:	2000      	movs	r0, #0
   11a5e:	bd08      	pop	{r3, pc}
   11a60:	200273c1 	.word	0x200273c1
   11a64:	40031000 	.word	0x40031000

00011a68 <gpiote_pin_int_cfg>:
{
   11a68:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config->config_info;
   11a6a:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   11a6c:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11a6e:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   11a70:	4c4d      	ldr	r4, [pc, #308]	; (11ba8 <gpiote_pin_int_cfg+0x140>)
   11a72:	7918      	ldrb	r0, [r3, #4]
   11a74:	f001 031f 	and.w	r3, r1, #31
   11a78:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11a7c:	2000      	movs	r0, #0
   11a7e:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   11a82:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11a84:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   11a88:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   11a8c:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   11a90:	42b3      	cmp	r3, r6
   11a92:	d169      	bne.n	11b68 <gpiote_pin_int_cfg+0x100>
		    && (intenset & BIT(i))) {
   11a94:	fa25 f600 	lsr.w	r6, r5, r0
   11a98:	07f6      	lsls	r6, r6, #31
   11a9a:	d565      	bpl.n	11b68 <gpiote_pin_int_cfg+0x100>
   11a9c:	0085      	lsls	r5, r0, #2
   11a9e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   11aa2:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   11aa6:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   11aaa:	f026 0601 	bic.w	r6, r6, #1
   11aae:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   11ab2:	2501      	movs	r5, #1
   11ab4:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   11ab8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   11abc:	4d3b      	ldr	r5, [pc, #236]	; (11bac <gpiote_pin_int_cfg+0x144>)
   11abe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11ac2:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   11ac6:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11aca:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   11ace:	6890      	ldr	r0, [r2, #8]
   11ad0:	40c8      	lsrs	r0, r1
   11ad2:	f010 0001 	ands.w	r0, r0, #1
   11ad6:	d046      	beq.n	11b66 <gpiote_pin_int_cfg+0xfe>
   11ad8:	68d0      	ldr	r0, [r2, #12]
   11ada:	40c8      	lsrs	r0, r1
   11adc:	f010 0001 	ands.w	r0, r0, #1
   11ae0:	d041      	beq.n	11b66 <gpiote_pin_int_cfg+0xfe>
		if (data->trig_edge & BIT(pin)) {
   11ae2:	6950      	ldr	r0, [r2, #20]
   11ae4:	40c8      	lsrs	r0, r1
   11ae6:	f010 0001 	ands.w	r0, r0, #1
   11aea:	d049      	beq.n	11b80 <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   11aec:	6990      	ldr	r0, [r2, #24]
   11aee:	40c8      	lsrs	r0, r1
   11af0:	07c0      	lsls	r0, r0, #31
   11af2:	d43d      	bmi.n	11b70 <gpiote_pin_int_cfg+0x108>
			} else if (((data->active_level & BIT(pin)) != 0U)
   11af4:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   11af6:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   11af8:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   11afa:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   11afe:	f000 0001 	and.w	r0, r0, #1
   11b02:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   11b06:	4288      	cmp	r0, r1
   11b08:	bf0c      	ite	eq
   11b0a:	2102      	moveq	r1, #2
   11b0c:	2101      	movne	r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   11b0e:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   11b10:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   11b14:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   11b18:	f010 0003 	ands.w	r0, r0, #3
   11b1c:	d12a      	bne.n	11b74 <gpiote_pin_int_cfg+0x10c>
			nrf_gpiote_event_t evt =
   11b1e:	00af      	lsls	r7, r5, #2
   11b20:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
   11b24:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11b28:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11b2c:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11b2e:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   11b32:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   11b36:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11b3a:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
   11b3e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   11b42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    return ((uint32_t)p_reg + event);
   11b46:	4b1a      	ldr	r3, [pc, #104]	; (11bb0 <gpiote_pin_int_cfg+0x148>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11b48:	4331      	orrs	r1, r6
   11b4a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11b4e:	51d8      	str	r0, [r3, r7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   11b50:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   11b54:	f043 0301 	orr.w	r3, r3, #1
   11b58:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   11b5c:	2301      	movs	r3, #1
   11b5e:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   11b62:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   11b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11b68:	3001      	adds	r0, #1
   11b6a:	2808      	cmp	r0, #8
   11b6c:	d18a      	bne.n	11a84 <gpiote_pin_int_cfg+0x1c>
   11b6e:	e7a5      	b.n	11abc <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   11b70:	2103      	movs	r1, #3
   11b72:	e7cc      	b.n	11b0e <gpiote_pin_int_cfg+0xa6>
   11b74:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   11b76:	2d08      	cmp	r5, #8
   11b78:	d1ca      	bne.n	11b10 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   11b7a:	f06f 0012 	mvn.w	r0, #18
   11b7e:	e7f2      	b.n	11b66 <gpiote_pin_int_cfg+0xfe>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11b80:	6913      	ldr	r3, [r2, #16]
   11b82:	69d2      	ldr	r2, [r2, #28]
   11b84:	4053      	eors	r3, r2
   11b86:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   11b8a:	f011 0f01 	tst.w	r1, #1
   11b8e:	bf14      	ite	ne
   11b90:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   11b94:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11b98:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   11b9c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11ba0:	4313      	orrs	r3, r2
   11ba2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   11ba6:	e7de      	b.n	11b66 <gpiote_pin_int_cfg+0xfe>
   11ba8:	40031000 	.word	0x40031000
   11bac:	40842500 	.word	0x40842500
   11bb0:	40031100 	.word	0x40031100

00011bb4 <gpio_nrfx_config>:
{
   11bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb8:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   11bba:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11bbc:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   11bc0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   11bc4:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11bc6:	d049      	beq.n	11c5c <gpio_nrfx_config+0xa8>
   11bc8:	dc2c      	bgt.n	11c24 <gpio_nrfx_config+0x70>
   11bca:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11bce:	d03d      	beq.n	11c4c <gpio_nrfx_config+0x98>
   11bd0:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   11bd4:	d03e      	beq.n	11c54 <gpio_nrfx_config+0xa0>
   11bd6:	bb60      	cbnz	r0, 11c32 <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   11bd8:	f406 7740 	and.w	r7, r6, #768	; 0x300
   11bdc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   11be0:	d03e      	beq.n	11c60 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
   11be2:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   11be6:	4263      	negs	r3, r4
   11be8:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11bea:	2901      	cmp	r1, #1
		from_pin = pin;
   11bec:	bf19      	ittee	ne
   11bee:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   11bf0:	46a1      	movne	r9, r4
		to_pin   = 31U;
   11bf2:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   11bf6:	2400      	moveq	r4, #0
   11bf8:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   11bfc:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   11c00:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   11c04:	ea47 070c 	orr.w	r7, r7, ip
   11c08:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11c0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 11cd8 <gpio_nrfx_config+0x124>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   11c10:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11c14:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11c18:	45a1      	cmp	r9, r4
   11c1a:	d223      	bcs.n	11c64 <gpio_nrfx_config+0xb0>
	return 0;
   11c1c:	2000      	movs	r0, #0
}
   11c1e:	b003      	add	sp, #12
   11c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11c24:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   11c28:	d016      	beq.n	11c58 <gpio_nrfx_config+0xa4>
   11c2a:	dc05      	bgt.n	11c38 <gpio_nrfx_config+0x84>
   11c2c:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   11c30:	d00e      	beq.n	11c50 <gpio_nrfx_config+0x9c>
		return -EINVAL;
   11c32:	f06f 0015 	mvn.w	r0, #21
   11c36:	e7f2      	b.n	11c1e <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   11c38:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   11c3c:	d004      	beq.n	11c48 <gpio_nrfx_config+0x94>
   11c3e:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   11c42:	d1f6      	bne.n	11c32 <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
   11c44:	2007      	movs	r0, #7
		break;
   11c46:	e7c7      	b.n	11bd8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   11c48:	2006      	movs	r0, #6
		break;
   11c4a:	e7c5      	b.n	11bd8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   11c4c:	2001      	movs	r0, #1
		break;
   11c4e:	e7c3      	b.n	11bd8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   11c50:	2003      	movs	r0, #3
		break;
   11c52:	e7c1      	b.n	11bd8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   11c54:	2004      	movs	r0, #4
		break;
   11c56:	e7bf      	b.n	11bd8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   11c58:	2005      	movs	r0, #5
		break;
   11c5a:	e7bd      	b.n	11bd8 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   11c5c:	2002      	movs	r0, #2
   11c5e:	e7bb      	b.n	11bd8 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   11c60:	2303      	movs	r3, #3
   11c62:	e7c2      	b.n	11bea <gpio_nrfx_config+0x36>
	return port->config->config_info;
   11c64:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   11c68:	6892      	ldr	r2, [r2, #8]
   11c6a:	7911      	ldrb	r1, [r2, #4]
   11c6c:	f004 021f 	and.w	r2, r4, #31
   11c70:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11c74:	3280      	adds	r2, #128	; 0x80
   11c76:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
   11c7a:	68a9      	ldr	r1, [r5, #8]
   11c7c:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11c80:	2b00      	cmp	r3, #0
   11c82:	d025      	beq.n	11cd0 <gpio_nrfx_config+0x11c>
   11c84:	4311      	orrs	r1, r2
   11c86:	60a9      	str	r1, [r5, #8]
   11c88:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   11c8a:	06b0      	lsls	r0, r6, #26
   11c8c:	bf4c      	ite	mi
   11c8e:	4311      	orrmi	r1, r2
   11c90:	4391      	bicpl	r1, r2
   11c92:	6169      	str	r1, [r5, #20]
   11c94:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   11c96:	0670      	lsls	r0, r6, #25
   11c98:	bf4c      	ite	mi
   11c9a:	4311      	orrmi	r1, r2
   11c9c:	4391      	bicpl	r1, r2
   11c9e:	61a9      	str	r1, [r5, #24]
   11ca0:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
   11ca2:	0770      	lsls	r0, r6, #29
   11ca4:	bf4c      	ite	mi
   11ca6:	4311      	orrmi	r1, r2
   11ca8:	4391      	bicpl	r1, r2
   11caa:	6129      	str	r1, [r5, #16]
   11cac:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   11cae:	0630      	lsls	r0, r6, #24
   11cb0:	bf4c      	ite	mi
   11cb2:	430a      	orrmi	r2, r1
   11cb4:	ea21 0202 	bicpl.w	r2, r1, r2
   11cb8:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   11cba:	4621      	mov	r1, r4
   11cbc:	4640      	mov	r0, r8
   11cbe:	9301      	str	r3, [sp, #4]
   11cc0:	f7ff fed2 	bl	11a68 <gpiote_pin_int_cfg>
		if (res != 0) {
   11cc4:	2800      	cmp	r0, #0
   11cc6:	d1aa      	bne.n	11c1e <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11cc8:	3401      	adds	r4, #1
   11cca:	b2e4      	uxtb	r4, r4
   11ccc:	9b01      	ldr	r3, [sp, #4]
   11cce:	e7a3      	b.n	11c18 <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   11cd0:	ea21 0102 	bic.w	r1, r1, r2
   11cd4:	e7d7      	b.n	11c86 <gpio_nrfx_config+0xd2>
   11cd6:	bf00      	nop
   11cd8:	40842500 	.word	0x40842500

00011cdc <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11cdc:	494e      	ldr	r1, [pc, #312]	; (11e18 <gpiote_event_handler+0x13c>)
{
   11cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ce2:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   11ce4:	2d00      	cmp	r5, #0
   11ce6:	d061      	beq.n	11dac <gpiote_event_handler+0xd0>
	struct gpio_nrfx_data *data = get_port_data(port);
   11ce8:	4b4c      	ldr	r3, [pc, #304]	; (11e1c <gpiote_event_handler+0x140>)
	u32_t pin = 0U;
   11cea:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   11cec:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   11cee:	681b      	ldr	r3, [r3, #0]
   11cf0:	f8df e134 	ldr.w	lr, [pc, #308]	; 11e28 <gpiote_event_handler+0x14c>
   11cf4:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11cf6:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   11cfa:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   11cfc:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   11d00:	4320      	orrs	r0, r4
   11d02:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   11d06:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   11d08:	69d4      	ldr	r4, [r2, #28]
   11d0a:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   11d0c:	6900      	ldr	r0, [r0, #16]
   11d0e:	4054      	eors	r4, r2
   11d10:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   11d12:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   11d14:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   11d18:	bb9b      	cbnz	r3, 11d82 <gpiote_event_handler+0xa6>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11d1a:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11d1c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   11d1e:	2601      	movs	r6, #1
   11d20:	469c      	mov	ip, r3
    return p_reg->INTENSET & mask;
   11d22:	483f      	ldr	r0, [pc, #252]	; (11e20 <gpiote_event_handler+0x144>)
   11d24:	4f3f      	ldr	r7, [pc, #252]	; (11e24 <gpiote_event_handler+0x148>)
   11d26:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   11d2a:	fa06 f103 	lsl.w	r1, r6, r3
   11d2e:	4211      	tst	r1, r2
   11d30:	d00e      	beq.n	11d50 <gpiote_event_handler+0x74>
   11d32:	19d9      	adds	r1, r3, r7
   11d34:	0089      	lsls	r1, r1, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11d36:	680a      	ldr	r2, [r1, #0]
   11d38:	b152      	cbz	r2, 11d50 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11d3a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   11d3e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11d42:	f8c1 c000 	str.w	ip, [r1]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11d46:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   11d4a:	fa06 f202 	lsl.w	r2, r6, r2
   11d4e:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11d50:	3301      	adds	r3, #1
   11d52:	2b08      	cmp	r3, #8
   11d54:	d1e7      	bne.n	11d26 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   11d56:	b35c      	cbz	r4, 11db0 <gpiote_event_handler+0xd4>
	struct gpio_nrfx_data *data = get_port_data(port);
   11d58:	4f30      	ldr	r7, [pc, #192]	; (11e1c <gpiote_event_handler+0x140>)
   11d5a:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11d5e:	f8d8 1000 	ldr.w	r1, [r8]
   11d62:	b329      	cbz	r1, 11db0 <gpiote_event_handler+0xd4>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   11d64:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   11d66:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11d6a:	688a      	ldr	r2, [r1, #8]
   11d6c:	4023      	ands	r3, r4
   11d6e:	4213      	tst	r3, r2
   11d70:	d003      	beq.n	11d7a <gpiote_event_handler+0x9e>
			cb->handler(port, cb, pins);
   11d72:	684b      	ldr	r3, [r1, #4]
   11d74:	4622      	mov	r2, r4
   11d76:	4638      	mov	r0, r7
   11d78:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11d7a:	b1ce      	cbz	r6, 11db0 <gpiote_event_handler+0xd4>
   11d7c:	4631      	mov	r1, r6
   11d7e:	6836      	ldr	r6, [r6, #0]
   11d80:	e7f1      	b.n	11d66 <gpiote_event_handler+0x8a>
		if (level_pins & bit) {
   11d82:	4203      	tst	r3, r0
   11d84:	d00f      	beq.n	11da6 <gpiote_event_handler+0xca>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11d86:	f897 c004 	ldrb.w	ip, [r7, #4]
   11d8a:	f006 021f 	and.w	r2, r6, #31
   11d8e:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   11d92:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11d96:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   11d9a:	ea23 0300 	bic.w	r3, r3, r0
   11d9e:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11da2:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   11da6:	3601      	adds	r6, #1
		bit <<= 1;
   11da8:	0040      	lsls	r0, r0, #1
   11daa:	e7b5      	b.n	11d18 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   11dac:	462c      	mov	r4, r5
   11dae:	e7b5      	b.n	11d1c <gpiote_event_handler+0x40>
	if (port_event) {
   11db0:	b185      	cbz	r5, 11dd4 <gpiote_event_handler+0xf8>
	u32_t bit = 1U << pin;
   11db2:	2401      	movs	r4, #1
	u32_t pin = 0U;
   11db4:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   11db6:	4b19      	ldr	r3, [pc, #100]	; (11e1c <gpiote_event_handler+0x140>)
   11db8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 11e28 <gpiote_event_handler+0x14c>
   11dbc:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   11dbe:	681b      	ldr	r3, [r3, #0]
   11dc0:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   11dc2:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   11dc6:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   11dc8:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   11dcc:	4301      	orrs	r1, r0
   11dce:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   11dd2:	b90b      	cbnz	r3, 11dd8 <gpiote_event_handler+0xfc>
}
   11dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   11dd8:	421c      	tst	r4, r3
   11dda:	d01a      	beq.n	11e12 <gpiote_event_handler+0x136>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11ddc:	7930      	ldrb	r0, [r6, #4]
   11dde:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11de2:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11de4:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11de8:	6910      	ldr	r0, [r2, #16]
   11dea:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   11dee:	4078      	eors	r0, r7
   11df0:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   11df2:	f010 0f01 	tst.w	r0, #1
   11df6:	bf14      	ite	ne
   11df8:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   11dfc:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11e00:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   11e04:	ea23 0304 	bic.w	r3, r3, r4
   11e08:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11e0c:	4338      	orrs	r0, r7
   11e0e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   11e12:	3501      	adds	r5, #1
		bit <<= 1;
   11e14:	0064      	lsls	r4, r4, #1
   11e16:	e7dc      	b.n	11dd2 <gpiote_event_handler+0xf6>
   11e18:	4003117c 	.word	0x4003117c
   11e1c:	2002d4c0 	.word	0x2002d4c0
   11e20:	40031000 	.word	0x40031000
   11e24:	1000c440 	.word	0x1000c440
   11e28:	40842500 	.word	0x40842500

00011e2c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11e2e:	794b      	ldrb	r3, [r1, #5]
   11e30:	2b01      	cmp	r3, #1
   11e32:	d029      	beq.n	11e88 <uarte_nrfx_configure+0x5c>
   11e34:	2b03      	cmp	r3, #3
   11e36:	d124      	bne.n	11e82 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11e38:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11e3a:	798b      	ldrb	r3, [r1, #6]
   11e3c:	2b03      	cmp	r3, #3
   11e3e:	d120      	bne.n	11e82 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11e40:	79cc      	ldrb	r4, [r1, #7]
   11e42:	b12c      	cbz	r4, 11e50 <uarte_nrfx_configure+0x24>
   11e44:	2c01      	cmp	r4, #1
   11e46:	d11c      	bne.n	11e82 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   11e48:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   11e4a:	689b      	ldr	r3, [r3, #8]
   11e4c:	791b      	ldrb	r3, [r3, #4]
   11e4e:	b1c3      	cbz	r3, 11e82 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11e50:	790a      	ldrb	r2, [r1, #4]
   11e52:	b112      	cbz	r2, 11e5a <uarte_nrfx_configure+0x2e>
   11e54:	2a02      	cmp	r2, #2
   11e56:	d114      	bne.n	11e82 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11e58:	220e      	movs	r2, #14
	switch (baudrate) {
   11e5a:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   11e5e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   11e60:	689b      	ldr	r3, [r3, #8]
   11e62:	681d      	ldr	r5, [r3, #0]
	switch (baudrate) {
   11e64:	680b      	ldr	r3, [r1, #0]
   11e66:	42bb      	cmp	r3, r7
   11e68:	d06f      	beq.n	11f4a <uarte_nrfx_configure+0x11e>
   11e6a:	d829      	bhi.n	11ec0 <uarte_nrfx_configure+0x94>
   11e6c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11e70:	d065      	beq.n	11f3e <uarte_nrfx_configure+0x112>
   11e72:	d814      	bhi.n	11e9e <uarte_nrfx_configure+0x72>
   11e74:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11e78:	d04f      	beq.n	11f1a <uarte_nrfx_configure+0xee>
   11e7a:	d807      	bhi.n	11e8c <uarte_nrfx_configure+0x60>
   11e7c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11e80:	d078      	beq.n	11f74 <uarte_nrfx_configure+0x148>
		return -ENOTSUP;
   11e82:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11e86:	e056      	b.n	11f36 <uarte_nrfx_configure+0x10a>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   11e88:	2600      	movs	r6, #0
   11e8a:	e7d6      	b.n	11e3a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   11e8c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11e90:	d052      	beq.n	11f38 <uarte_nrfx_configure+0x10c>
   11e92:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   11e96:	d1f4      	bne.n	11e82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11e98:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11e9c:	e03f      	b.n	11f1e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11e9e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11ea2:	d04e      	beq.n	11f42 <uarte_nrfx_configure+0x116>
   11ea4:	d804      	bhi.n	11eb0 <uarte_nrfx_configure+0x84>
   11ea6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11eaa:	d1ea      	bne.n	11e82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11eac:	4b33      	ldr	r3, [pc, #204]	; (11f7c <uarte_nrfx_configure+0x150>)
   11eae:	e036      	b.n	11f1e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11eb0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11eb4:	d047      	beq.n	11f46 <uarte_nrfx_configure+0x11a>
   11eb6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   11eba:	d1e2      	bne.n	11e82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11ebc:	4b30      	ldr	r3, [pc, #192]	; (11f80 <uarte_nrfx_configure+0x154>)
   11ebe:	e02e      	b.n	11f1e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11ec0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11ec4:	d04a      	beq.n	11f5c <uarte_nrfx_configure+0x130>
   11ec6:	d812      	bhi.n	11eee <uarte_nrfx_configure+0xc2>
   11ec8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11ecc:	42bb      	cmp	r3, r7
   11ece:	d03f      	beq.n	11f50 <uarte_nrfx_configure+0x124>
   11ed0:	d805      	bhi.n	11ede <uarte_nrfx_configure+0xb2>
   11ed2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   11ed6:	d1d4      	bne.n	11e82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11ed8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11edc:	e01f      	b.n	11f1e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11ede:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11ee2:	d038      	beq.n	11f56 <uarte_nrfx_configure+0x12a>
   11ee4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11ee8:	d1cb      	bne.n	11e82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11eea:	4b26      	ldr	r3, [pc, #152]	; (11f84 <uarte_nrfx_configure+0x158>)
   11eec:	e017      	b.n	11f1e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11eee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11ef2:	d039      	beq.n	11f68 <uarte_nrfx_configure+0x13c>
   11ef4:	d808      	bhi.n	11f08 <uarte_nrfx_configure+0xdc>
   11ef6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   11efa:	d032      	beq.n	11f62 <uarte_nrfx_configure+0x136>
   11efc:	4f22      	ldr	r7, [pc, #136]	; (11f88 <uarte_nrfx_configure+0x15c>)
   11efe:	42bb      	cmp	r3, r7
   11f00:	d1bf      	bne.n	11e82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11f02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11f06:	e00a      	b.n	11f1e <uarte_nrfx_configure+0xf2>
	switch (baudrate) {
   11f08:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11f0c:	d02f      	beq.n	11f6e <uarte_nrfx_configure+0x142>
   11f0e:	4f1f      	ldr	r7, [pc, #124]	; (11f8c <uarte_nrfx_configure+0x160>)
   11f10:	42bb      	cmp	r3, r7
   11f12:	d1b6      	bne.n	11e82 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11f18:	e001      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00027000;
   11f1a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11f1e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11f22:	ea44 0306 	orr.w	r3, r4, r6
   11f26:	4313      	orrs	r3, r2
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11f28:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11f2c:	6883      	ldr	r3, [r0, #8]
   11f2e:	c903      	ldmia	r1, {r0, r1}
   11f30:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11f34:	2000      	movs	r0, #0
}
   11f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11f38:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11f3c:	e7ef      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11f3e:	4b14      	ldr	r3, [pc, #80]	; (11f90 <uarte_nrfx_configure+0x164>)
   11f40:	e7ed      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11f42:	4b14      	ldr	r3, [pc, #80]	; (11f94 <uarte_nrfx_configure+0x168>)
   11f44:	e7eb      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11f46:	4b14      	ldr	r3, [pc, #80]	; (11f98 <uarte_nrfx_configure+0x16c>)
   11f48:	e7e9      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11f4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11f4e:	e7e6      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11f50:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11f54:	e7e3      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11f56:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11f5a:	e7e0      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11f5c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11f60:	e7dd      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11f62:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11f66:	e7da      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11f68:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11f6c:	e7d7      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11f6e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11f72:	e7d4      	b.n	11f1e <uarte_nrfx_configure+0xf2>
		nrf_baudrate = 0x00014000;
   11f74:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11f78:	e7d1      	b.n	11f1e <uarte_nrfx_configure+0xf2>
   11f7a:	bf00      	nop
   11f7c:	00275000 	.word	0x00275000
   11f80:	0075c000 	.word	0x0075c000
   11f84:	013a9000 	.word	0x013a9000
   11f88:	0003d090 	.word	0x0003d090
   11f8c:	000f4240 	.word	0x000f4240
   11f90:	0013b000 	.word	0x0013b000
   11f94:	003af000 	.word	0x003af000
   11f98:	004ea000 	.word	0x004ea000

00011f9c <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   11f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11fa0:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11fa2:	f04f 0e03 	mov.w	lr, #3
   11fa6:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   11faa:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   11fac:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   11fae:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11fb0:	fa05 f702 	lsl.w	r7, r5, r2
   11fb4:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   11fb6:	4b1f      	ldr	r3, [pc, #124]	; (12034 <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11fb8:	6886      	ldr	r6, [r0, #8]
   11fba:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11fbc:	f102 0780 	add.w	r7, r2, #128	; 0x80
   11fc0:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   11fc4:	684f      	ldr	r7, [r1, #4]
   11fc6:	f107 0880 	add.w	r8, r7, #128	; 0x80
   11fca:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   11fce:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   11fd2:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11fd6:	688f      	ldr	r7, [r1, #8]
   11fd8:	1c7a      	adds	r2, r7, #1
   11fda:	d010      	beq.n	11ffe <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   11fdc:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   11fde:	1c51      	adds	r1, r2, #1
   11fe0:	d00d      	beq.n	11ffe <uarte_instance_init.constprop.4+0x62>
   11fe2:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11fe6:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   11fe8:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11fea:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   11fee:	f107 0180 	add.w	r1, r7, #128	; 0x80
   11ff2:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   11ff6:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   11ffa:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   11ffe:	4631      	mov	r1, r6
   12000:	f7ff ff14 	bl	11e2c <uarte_nrfx_configure>
	if (err) {
   12004:	b9a0      	cbnz	r0, 12030 <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12006:	2308      	movs	r3, #8
   12008:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1200c:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12010:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   12014:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   12018:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1201a:	68b2      	ldr	r2, [r6, #8]
   1201c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12020:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12022:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12024:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12028:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1202c:	60a3      	str	r3, [r4, #8]
   1202e:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   12030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12034:	40842500 	.word	0x40842500

00012038 <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   12038:	b530      	push	{r4, r5, lr}
   1203a:	b085      	sub	sp, #20
   1203c:	466c      	mov	r4, sp
   1203e:	4605      	mov	r5, r0
   12040:	4b08      	ldr	r3, [pc, #32]	; (12064 <uarte_2_init+0x2c>)
   12042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   12044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   12048:	2200      	movs	r2, #0
   1204a:	2101      	movs	r1, #1
   1204c:	200a      	movs	r0, #10
   1204e:	f7fe f807 	bl	10060 <z_arm_irq_priority_set>
   12052:	200a      	movs	r0, #10
   12054:	f7fd fff4 	bl	10040 <arch_irq_enable>
   12058:	4621      	mov	r1, r4
   1205a:	4628      	mov	r0, r5
   1205c:	f7ff ff9e 	bl	11f9c <uarte_instance_init.constprop.4>
   12060:	b005      	add	sp, #20
   12062:	bd30      	pop	{r4, r5, pc}
   12064:	00026714 	.word	0x00026714

00012068 <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   12068:	b530      	push	{r4, r5, lr}
   1206a:	b085      	sub	sp, #20
   1206c:	466c      	mov	r4, sp
   1206e:	4605      	mov	r5, r0
   12070:	4b08      	ldr	r3, [pc, #32]	; (12094 <uarte_0_init+0x2c>)
   12072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   12074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   12078:	2200      	movs	r2, #0
   1207a:	2101      	movs	r1, #1
   1207c:	2008      	movs	r0, #8
   1207e:	f7fd ffef 	bl	10060 <z_arm_irq_priority_set>
   12082:	2008      	movs	r0, #8
   12084:	f7fd ffdc 	bl	10040 <arch_irq_enable>
   12088:	4621      	mov	r1, r4
   1208a:	4628      	mov	r0, r5
   1208c:	f7ff ff86 	bl	11f9c <uarte_instance_init.constprop.4>
   12090:	b005      	add	sp, #20
   12092:	bd30      	pop	{r4, r5, pc}
   12094:	00026724 	.word	0x00026724

00012098 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   12098:	2200      	movs	r2, #0
{
   1209a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1209c:	4611      	mov	r1, r2
   1209e:	202a      	movs	r0, #42	; 0x2a
   120a0:	f7fd ffde 	bl	10060 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   120a4:	f002 faee 	bl	14684 <bsd_init>
   120a8:	4b01      	ldr	r3, [pc, #4]	; (120b0 <_bsdlib_init+0x18>)
   120aa:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   120ac:	2000      	movs	r0, #0
   120ae:	bd08      	pop	{r3, pc}
   120b0:	2002036c 	.word	0x2002036c

000120b4 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   120b4:	2200      	movs	r2, #0
   120b6:	4b0e      	ldr	r3, [pc, #56]	; (120f0 <thread_monitor_entry_get+0x3c>)
{
   120b8:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   120ba:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   120bc:	4b0d      	ldr	r3, [pc, #52]	; (120f4 <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
   120be:	4616      	mov	r6, r2
   120c0:	461f      	mov	r7, r3
		if (entry->id == id) {
   120c2:	58bd      	ldr	r5, [r7, r2]
   120c4:	18b9      	adds	r1, r7, r2
   120c6:	4285      	cmp	r5, r0
   120c8:	d00d      	beq.n	120e6 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   120ca:	b175      	cbz	r5, 120ea <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
   120cc:	684d      	ldr	r5, [r1, #4]
   120ce:	3208      	adds	r2, #8
   120d0:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
   120d2:	42b5      	cmp	r5, r6
   120d4:	bfc4      	itt	gt
   120d6:	462e      	movgt	r6, r5
   120d8:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   120da:	2a50      	cmp	r2, #80	; 0x50
   120dc:	d1f1      	bne.n	120c2 <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   120de:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
   120e0:	3c01      	subs	r4, #1
	new_entry->id = id;
   120e2:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   120e4:	605c      	str	r4, [r3, #4]
}
   120e6:	4608      	mov	r0, r1
   120e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120ea:	460b      	mov	r3, r1
   120ec:	e7f7      	b.n	120de <thread_monitor_entry_get+0x2a>
   120ee:	bf00      	nop
   120f0:	20020370 	.word	0x20020370
   120f4:	2002037c 	.word	0x2002037c

000120f8 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   120f8:	4668      	mov	r0, sp
   120fa:	f020 0107 	bic.w	r1, r0, #7
   120fe:	468d      	mov	sp, r1
   12100:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12102:	4b0d      	ldr	r3, [pc, #52]	; (12138 <rpc_proxy_irq_handler+0x40>)
   12104:	e8d3 2fef 	ldaex	r2, [r3]
   12108:	3201      	adds	r2, #1
   1210a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1210e:	2900      	cmp	r1, #0
   12110:	d1f8      	bne.n	12104 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   12112:	f00c f9a9 	bl	1e468 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   12116:	4b09      	ldr	r3, [pc, #36]	; (1213c <rpc_proxy_irq_handler+0x44>)
   12118:	681c      	ldr	r4, [r3, #0]
   1211a:	b124      	cbz	r4, 12126 <rpc_proxy_irq_handler+0x2e>
   1211c:	1d20      	adds	r0, r4, #4
   1211e:	f010 fd1d 	bl	22b5c <z_impl_k_sem_give>
   12122:	6824      	ldr	r4, [r4, #0]
   12124:	e7f9      	b.n	1211a <rpc_proxy_irq_handler+0x22>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   12126:	f7fd ffb3 	bl	10090 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1212a:	f7fd fef3 	bl	ff14 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1212e:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   12132:	4685      	mov	sp, r0
   12134:	4770      	bx	lr
   12136:	bf00      	nop
   12138:	20020370 	.word	0x20020370
   1213c:	20020374 	.word	0x20020374

00012140 <bsd_os_timedwait>:
{
   12140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12144:	460d      	mov	r5, r1
   12146:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   12148:	f013 ffc5 	bl	260d6 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   1214c:	682b      	ldr	r3, [r5, #0]
   1214e:	4606      	mov	r6, r0
   12150:	2b00      	cmp	r3, #0
   12152:	460f      	mov	r7, r1
   12154:	d103      	bne.n	1215e <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   12156:	f010 fc85 	bl	22a64 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1215a:	203c      	movs	r0, #60	; 0x3c
   1215c:	e06a      	b.n	12234 <bsd_os_timedwait+0xf4>
		*timeout = K_FOREVER;
   1215e:	bfbc      	itt	lt
   12160:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   12164:	602b      	strlt	r3, [r5, #0]
	z_impl_k_sem_init(sem, initial_count, limit);
   12166:	2201      	movs	r2, #1
   12168:	2100      	movs	r1, #0
   1216a:	a802      	add	r0, sp, #8
   1216c:	f013 ff0b 	bl	25f86 <z_impl_k_sem_init>
   12170:	f10d 0804 	add.w	r8, sp, #4
   12174:	f04f 0320 	mov.w	r3, #32
   12178:	f3ef 8911 	mrs	r9, BASEPRI
   1217c:	f383 8811 	msr	BASEPRI, r3
   12180:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   12184:	f010 fce4 	bl	22b50 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   12188:	f7ff ff94 	bl	120b4 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1218c:	4c32      	ldr	r4, [pc, #200]	; (12258 <bsd_os_timedwait+0x118>)
   1218e:	6843      	ldr	r3, [r0, #4]
   12190:	6822      	ldr	r2, [r4, #0]
   12192:	4293      	cmp	r3, r2
   12194:	f04f 0300 	mov.w	r3, #0
   12198:	d108      	bne.n	121ac <bsd_os_timedwait+0x6c>
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
   1219a:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1219c:	4b2f      	ldr	r3, [pc, #188]	; (1225c <bsd_os_timedwait+0x11c>)
   1219e:	685a      	ldr	r2, [r3, #4]
   121a0:	2a00      	cmp	r2, #0
   121a2:	d14a      	bne.n	1223a <bsd_os_timedwait+0xfa>
	list->head = node;
   121a4:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
   121a8:	2301      	movs	r3, #1
   121aa:	e000      	b.n	121ae <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   121ac:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   121ae:	f389 8811 	msr	BASEPRI, r9
   121b2:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   121b6:	2b00      	cmp	r3, #0
   121b8:	d03b      	beq.n	12232 <bsd_os_timedwait+0xf2>
	(void)k_sem_take(&thread.sem, *timeout);
   121ba:	6829      	ldr	r1, [r5, #0]
	return z_impl_k_sem_take(sem, timeout);
   121bc:	a802      	add	r0, sp, #8
   121be:	f010 fcf9 	bl	22bb4 <z_impl_k_sem_take>
	__asm__ volatile(
   121c2:	f04f 0320 	mov.w	r3, #32
   121c6:	f3ef 8911 	mrs	r9, BASEPRI
   121ca:	f383 8811 	msr	BASEPRI, r3
   121ce:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   121d2:	2100      	movs	r1, #0
   121d4:	4b21      	ldr	r3, [pc, #132]	; (1225c <bsd_os_timedwait+0x11c>)
   121d6:	681a      	ldr	r2, [r3, #0]
   121d8:	b15a      	cbz	r2, 121f2 <bsd_os_timedwait+0xb2>
   121da:	4542      	cmp	r2, r8
   121dc:	d138      	bne.n	12250 <bsd_os_timedwait+0x110>
   121de:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   121e0:	2900      	cmp	r1, #0
   121e2:	d12f      	bne.n	12244 <bsd_os_timedwait+0x104>
   121e4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   121e6:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   121e8:	4291      	cmp	r1, r2
   121ea:	d100      	bne.n	121ee <bsd_os_timedwait+0xae>
	list->tail = node;
   121ec:	6058      	str	r0, [r3, #4]
	parent->next = child;
   121ee:	2300      	movs	r3, #0
   121f0:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   121f2:	f010 fcad 	bl	22b50 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   121f6:	f7ff ff5d 	bl	120b4 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   121fa:	6823      	ldr	r3, [r4, #0]
   121fc:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   121fe:	f389 8811 	msr	BASEPRI, r9
   12202:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   12206:	682c      	ldr	r4, [r5, #0]
   12208:	1c63      	adds	r3, r4, #1
   1220a:	d012      	beq.n	12232 <bsd_os_timedwait+0xf2>
	return z_impl_k_uptime_get();
   1220c:	f013 ff63 	bl	260d6 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   12210:	1b86      	subs	r6, r0, r6
   12212:	eb61 0707 	sbc.w	r7, r1, r7
   12216:	17e3      	asrs	r3, r4, #31
   12218:	1ba2      	subs	r2, r4, r6
   1221a:	eb63 0307 	sbc.w	r3, r3, r7
   1221e:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
   12220:	2a00      	cmp	r2, #0
   12222:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
   12226:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
   12228:	bfb8      	it	lt
   1222a:	2000      	movlt	r0, #0
   1222c:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
   1222e:	2800      	cmp	r0, #0
   12230:	d093      	beq.n	1215a <bsd_os_timedwait+0x1a>
	return 0;
   12232:	2000      	movs	r0, #0
}
   12234:	b009      	add	sp, #36	; 0x24
   12236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1223a:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1223e:	f8c3 8004 	str.w	r8, [r3, #4]
   12242:	e7b1      	b.n	121a8 <bsd_os_timedwait+0x68>
	parent->next = child;
   12244:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   12246:	6858      	ldr	r0, [r3, #4]
   12248:	4290      	cmp	r0, r2
	list->tail = node;
   1224a:	bf08      	it	eq
   1224c:	6059      	streq	r1, [r3, #4]
   1224e:	e7ce      	b.n	121ee <bsd_os_timedwait+0xae>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12250:	4611      	mov	r1, r2
   12252:	6812      	ldr	r2, [r2, #0]
   12254:	e7c0      	b.n	121d8 <bsd_os_timedwait+0x98>
   12256:	bf00      	nop
   12258:	20020370 	.word	0x20020370
   1225c:	20020374 	.word	0x20020374

00012260 <bsd_os_errno_set>:
	switch (err_code) {
   12260:	282d      	cmp	r0, #45	; 0x2d
{
   12262:	b510      	push	{r4, lr}
   12264:	4604      	mov	r4, r0
	switch (err_code) {
   12266:	d07d      	beq.n	12364 <bsd_os_errno_set+0x104>
   12268:	dc39      	bgt.n	122de <bsd_os_errno_set+0x7e>
   1226a:	280e      	cmp	r0, #14
   1226c:	d07a      	beq.n	12364 <bsd_os_errno_set+0x104>
   1226e:	dc22      	bgt.n	122b6 <bsd_os_errno_set+0x56>
   12270:	2808      	cmp	r0, #8
   12272:	d077      	beq.n	12364 <bsd_os_errno_set+0x104>
   12274:	dc1a      	bgt.n	122ac <bsd_os_errno_set+0x4c>
   12276:	2802      	cmp	r0, #2
   12278:	d074      	beq.n	12364 <bsd_os_errno_set+0x104>
   1227a:	2805      	cmp	r0, #5
   1227c:	d072      	beq.n	12364 <bsd_os_errno_set+0x104>
   1227e:	2801      	cmp	r0, #1
   12280:	d070      	beq.n	12364 <bsd_os_errno_set+0x104>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   12282:	2301      	movs	r3, #1
   12284:	f04f 0200 	mov.w	r2, #0
   12288:	4948      	ldr	r1, [pc, #288]	; (123ac <bsd_os_errno_set+0x14c>)
   1228a:	f363 0202 	bfi	r2, r3, #0, #3
   1228e:	4b48      	ldr	r3, [pc, #288]	; (123b0 <bsd_os_errno_set+0x150>)
   12290:	f36f 02c5 	bfc	r2, #3, #3
   12294:	1a5b      	subs	r3, r3, r1
   12296:	08db      	lsrs	r3, r3, #3
   12298:	f363 128f 	bfi	r2, r3, #6, #10
   1229c:	4621      	mov	r1, r4
   1229e:	4845      	ldr	r0, [pc, #276]	; (123b4 <bsd_os_errno_set+0x154>)
   122a0:	f011 fe66 	bl	23f70 <log_1>
   122a4:	f00f fd86 	bl	21db4 <z_impl_z_errno>
		errno = 0xBAADBAAD;
   122a8:	4b43      	ldr	r3, [pc, #268]	; (123b8 <bsd_os_errno_set+0x158>)
   122aa:	e04d      	b.n	12348 <bsd_os_errno_set+0xe8>
	switch (err_code) {
   122ac:	280c      	cmp	r0, #12
   122ae:	d059      	beq.n	12364 <bsd_os_errno_set+0x104>
   122b0:	dc47      	bgt.n	12342 <bsd_os_errno_set+0xe2>
   122b2:	2809      	cmp	r0, #9
   122b4:	e7e4      	b.n	12280 <bsd_os_errno_set+0x20>
   122b6:	2828      	cmp	r0, #40	; 0x28
   122b8:	d073      	beq.n	123a2 <bsd_os_errno_set+0x142>
   122ba:	dc05      	bgt.n	122c8 <bsd_os_errno_set+0x68>
   122bc:	2818      	cmp	r0, #24
   122be:	d051      	beq.n	12364 <bsd_os_errno_set+0x104>
   122c0:	2823      	cmp	r0, #35	; 0x23
   122c2:	d043      	beq.n	1234c <bsd_os_errno_set+0xec>
   122c4:	2816      	cmp	r0, #22
   122c6:	e7db      	b.n	12280 <bsd_os_errno_set+0x20>
   122c8:	282a      	cmp	r0, #42	; 0x2a
   122ca:	d04b      	beq.n	12364 <bsd_os_errno_set+0x104>
   122cc:	db42      	blt.n	12354 <bsd_os_errno_set+0xf4>
   122ce:	282b      	cmp	r0, #43	; 0x2b
   122d0:	d048      	beq.n	12364 <bsd_os_errno_set+0x104>
   122d2:	282c      	cmp	r0, #44	; 0x2c
   122d4:	d1d5      	bne.n	12282 <bsd_os_errno_set+0x22>
   122d6:	f00f fd6d 	bl	21db4 <z_impl_z_errno>
		errno = ESOCKTNOSUPPORT;
   122da:	232c      	movs	r3, #44	; 0x2c
   122dc:	e034      	b.n	12348 <bsd_os_errno_set+0xe8>
	switch (err_code) {
   122de:	283c      	cmp	r0, #60	; 0x3c
   122e0:	d040      	beq.n	12364 <bsd_os_errno_set+0x104>
   122e2:	dc15      	bgt.n	12310 <bsd_os_errno_set+0xb0>
   122e4:	2833      	cmp	r0, #51	; 0x33
   122e6:	d03d      	beq.n	12364 <bsd_os_errno_set+0x104>
   122e8:	dc05      	bgt.n	122f6 <bsd_os_errno_set+0x96>
   122ea:	2830      	cmp	r0, #48	; 0x30
   122ec:	d03a      	beq.n	12364 <bsd_os_errno_set+0x104>
   122ee:	2832      	cmp	r0, #50	; 0x32
   122f0:	d034      	beq.n	1235c <bsd_os_errno_set+0xfc>
   122f2:	282f      	cmp	r0, #47	; 0x2f
   122f4:	e7c4      	b.n	12280 <bsd_os_errno_set+0x20>
   122f6:	2836      	cmp	r0, #54	; 0x36
   122f8:	d034      	beq.n	12364 <bsd_os_errno_set+0x104>
   122fa:	dc01      	bgt.n	12300 <bsd_os_errno_set+0xa0>
   122fc:	2834      	cmp	r0, #52	; 0x34
   122fe:	e7bf      	b.n	12280 <bsd_os_errno_set+0x20>
   12300:	2838      	cmp	r0, #56	; 0x38
   12302:	d02f      	beq.n	12364 <bsd_os_errno_set+0x104>
   12304:	2839      	cmp	r0, #57	; 0x39
   12306:	d1bc      	bne.n	12282 <bsd_os_errno_set+0x22>
   12308:	f00f fd54 	bl	21db4 <z_impl_z_errno>
		errno = ENOTCONN;
   1230c:	2339      	movs	r3, #57	; 0x39
   1230e:	e01b      	b.n	12348 <bsd_os_errno_set+0xe8>
	switch (err_code) {
   12310:	287d      	cmp	r0, #125	; 0x7d
   12312:	d033      	beq.n	1237c <bsd_os_errno_set+0x11c>
   12314:	dc09      	bgt.n	1232a <bsd_os_errno_set+0xca>
   12316:	2870      	cmp	r0, #112	; 0x70
   12318:	d028      	beq.n	1236c <bsd_os_errno_set+0x10c>
   1231a:	2873      	cmp	r0, #115	; 0x73
   1231c:	d02a      	beq.n	12374 <bsd_os_errno_set+0x114>
   1231e:	2869      	cmp	r0, #105	; 0x69
   12320:	d1af      	bne.n	12282 <bsd_os_errno_set+0x22>
   12322:	f00f fd47 	bl	21db4 <z_impl_z_errno>
		errno = ENOBUFS;
   12326:	2337      	movs	r3, #55	; 0x37
   12328:	e00e      	b.n	12348 <bsd_os_errno_set+0xe8>
	switch (err_code) {
   1232a:	287f      	cmp	r0, #127	; 0x7f
   1232c:	d02f      	beq.n	1238e <bsd_os_errno_set+0x12e>
   1232e:	db29      	blt.n	12384 <bsd_os_errno_set+0x124>
   12330:	2880      	cmp	r0, #128	; 0x80
   12332:	d031      	beq.n	12398 <bsd_os_errno_set+0x138>
   12334:	2881      	cmp	r0, #129	; 0x81
   12336:	d1a4      	bne.n	12282 <bsd_os_errno_set+0x22>
   12338:	f00f fd3c 	bl	21db4 <z_impl_z_errno>
		errno = EKEYREJECTED;
   1233c:	f240 73d4 	movw	r3, #2004	; 0x7d4
   12340:	e002      	b.n	12348 <bsd_os_errno_set+0xe8>
   12342:	f00f fd37 	bl	21db4 <z_impl_z_errno>
		errno = EACCES;
   12346:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   12348:	6003      	str	r3, [r0, #0]
}
   1234a:	e00e      	b.n	1236a <bsd_os_errno_set+0x10a>
   1234c:	f00f fd32 	bl	21db4 <z_impl_z_errno>
		errno = EAGAIN;
   12350:	230b      	movs	r3, #11
   12352:	e7f9      	b.n	12348 <bsd_os_errno_set+0xe8>
   12354:	f00f fd2e 	bl	21db4 <z_impl_z_errno>
		errno = EPROTOTYPE;
   12358:	2329      	movs	r3, #41	; 0x29
   1235a:	e7f5      	b.n	12348 <bsd_os_errno_set+0xe8>
   1235c:	f00f fd2a 	bl	21db4 <z_impl_z_errno>
		errno = ENETDOWN;
   12360:	233e      	movs	r3, #62	; 0x3e
   12362:	e7f1      	b.n	12348 <bsd_os_errno_set+0xe8>
   12364:	f00f fd26 	bl	21db4 <z_impl_z_errno>
		errno = ETIMEDOUT;
   12368:	6004      	str	r4, [r0, #0]
}
   1236a:	bd10      	pop	{r4, pc}
   1236c:	f00f fd22 	bl	21db4 <z_impl_z_errno>
		errno = EHOSTDOWN;
   12370:	2343      	movs	r3, #67	; 0x43
   12372:	e7e9      	b.n	12348 <bsd_os_errno_set+0xe8>
   12374:	f00f fd1e 	bl	21db4 <z_impl_z_errno>
		errno = EINPROGRESS;
   12378:	2344      	movs	r3, #68	; 0x44
   1237a:	e7e5      	b.n	12348 <bsd_os_errno_set+0xe8>
   1237c:	f00f fd1a 	bl	21db4 <z_impl_z_errno>
		errno = ECANCELED;
   12380:	2348      	movs	r3, #72	; 0x48
   12382:	e7e1      	b.n	12348 <bsd_os_errno_set+0xe8>
   12384:	f00f fd16 	bl	21db4 <z_impl_z_errno>
		errno = ENOKEY;
   12388:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1238c:	e7dc      	b.n	12348 <bsd_os_errno_set+0xe8>
   1238e:	f00f fd11 	bl	21db4 <z_impl_z_errno>
		errno = EKEYEXPIRED;
   12392:	f240 73d2 	movw	r3, #2002	; 0x7d2
   12396:	e7d7      	b.n	12348 <bsd_os_errno_set+0xe8>
   12398:	f00f fd0c 	bl	21db4 <z_impl_z_errno>
		errno = EKEYREVOKED;
   1239c:	f240 73d3 	movw	r3, #2003	; 0x7d3
   123a0:	e7d2      	b.n	12348 <bsd_os_errno_set+0xe8>
   123a2:	f00f fd07 	bl	21db4 <z_impl_z_errno>
		errno = EMSGSIZE;
   123a6:	2324      	movs	r3, #36	; 0x24
   123a8:	e7ce      	b.n	12348 <bsd_os_errno_set+0xe8>
   123aa:	bf00      	nop
   123ac:	00026684 	.word	0x00026684
   123b0:	000266a4 	.word	0x000266a4
   123b4:	00028a3a 	.word	0x00028a3a
   123b8:	baadbaad 	.word	0xbaadbaad

000123bc <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   123bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   123c0:	4b01      	ldr	r3, [pc, #4]	; (123c8 <bsd_os_application_irq_set+0xc>)
   123c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   123c6:	4770      	bx	lr
   123c8:	e000e100 	.word	0xe000e100

000123cc <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   123cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   123d0:	4b01      	ldr	r3, [pc, #4]	; (123d8 <bsd_os_application_irq_clear+0xc>)
   123d2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   123d6:	4770      	bx	lr
   123d8:	e000e100 	.word	0xe000e100

000123dc <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   123dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   123e0:	4b01      	ldr	r3, [pc, #4]	; (123e8 <bsd_os_trace_irq_set+0xc>)
   123e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   123e6:	4770      	bx	lr
   123e8:	e000e100 	.word	0xe000e100

000123ec <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   123ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   123f0:	4b01      	ldr	r3, [pc, #4]	; (123f8 <bsd_os_trace_irq_clear+0xc>)
   123f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   123f6:	4770      	bx	lr
   123f8:	e000e100 	.word	0xe000e100

000123fc <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   123fc:	b500      	push	{lr}
   123fe:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   12400:	2218      	movs	r2, #24
   12402:	2100      	movs	r1, #0
   12404:	a802      	add	r0, sp, #8
   12406:	f012 fb18 	bl	24a3a <memset>
   1240a:	2301      	movs	r3, #1
   1240c:	9301      	str	r3, [sp, #4]
   1240e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12412:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1241a:	9306      	str	r3, [sp, #24]
   1241c:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   1241e:	2200      	movs	r2, #0
   12420:	a901      	add	r1, sp, #4
   12422:	4804      	ldr	r0, [pc, #16]	; (12434 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   12424:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   12428:	f00f fbae 	bl	21b88 <nrfx_uarte_init>
#endif
}
   1242c:	b009      	add	sp, #36	; 0x24
   1242e:	f85d fb04 	ldr.w	pc, [sp], #4
   12432:	bf00      	nop
   12434:	000268d0 	.word	0x000268d0

00012438 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   12438:	b508      	push	{r3, lr}
	list->head = NULL;
   1243a:	2300      	movs	r3, #0
   1243c:	4a08      	ldr	r2, [pc, #32]	; (12460 <bsd_os_init+0x28>)
	list->tail = NULL;
   1243e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12442:	4a08      	ldr	r2, [pc, #32]	; (12464 <bsd_os_init+0x2c>)
   12444:	e8d2 1fef 	ldaex	r1, [r2]
   12448:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1244c:	2800      	cmp	r0, #0
   1244e:	d1f9      	bne.n	12444 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   12450:	f012 fe8f 	bl	25172 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   12454:	f7ff ffd2 	bl	123fc <trace_uart_init>
	trace_task_create();
}
   12458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   1245c:	f012 be7e 	b.w	2515c <trace_task_create>
   12460:	20020374 	.word	0x20020374
   12464:	20020370 	.word	0x20020370

00012468 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   12468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1246c:	4607      	mov	r7, r0
   1246e:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   12470:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   12472:	f8df 8024 	ldr.w	r8, [pc, #36]	; 12498 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   12476:	b914      	cbnz	r4, 1247e <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   12478:	4620      	mov	r0, r4
   1247a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   1247e:	2cff      	cmp	r4, #255	; 0xff
   12480:	4626      	mov	r6, r4
   12482:	bf28      	it	cs
   12484:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   12486:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   12488:	4632      	mov	r2, r6
   1248a:	4439      	add	r1, r7
   1248c:	4640      	mov	r0, r8
   1248e:	f00f fc0f 	bl	21cb0 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   12492:	1ba4      	subs	r4, r4, r6
   12494:	e7ef      	b.n	12476 <bsd_os_trace_put+0xe>
   12496:	bf00      	nop
   12498:	000268d0 	.word	0x000268d0

0001249c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1249c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   124a0:	d03c      	beq.n	1251c <z_to_nrf_optname+0x80>
   124a2:	dc04      	bgt.n	124ae <z_to_nrf_optname+0x12>
   124a4:	2801      	cmp	r0, #1
   124a6:	d047      	beq.n	12538 <z_to_nrf_optname+0x9c>
			break;
		}
		break;

	default:
		retval = -1;
   124a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   124ac:	4770      	bx	lr
	switch (z_in_level) {
   124ae:	f240 2302 	movw	r3, #514	; 0x202
   124b2:	4298      	cmp	r0, r3
   124b4:	d052      	beq.n	1255c <z_to_nrf_optname+0xc0>
   124b6:	f240 2303 	movw	r3, #515	; 0x203
   124ba:	4298      	cmp	r0, r3
   124bc:	d1f4      	bne.n	124a8 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   124be:	3901      	subs	r1, #1
   124c0:	2913      	cmp	r1, #19
   124c2:	d8f1      	bhi.n	124a8 <z_to_nrf_optname+0xc>
   124c4:	a301      	add	r3, pc, #4	; (adr r3, 124cc <z_to_nrf_optname+0x30>)
   124c6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   124ca:	bf00      	nop
   124cc:	00012569 	.word	0x00012569
   124d0:	0001252d 	.word	0x0001252d
   124d4:	00012551 	.word	0x00012551
   124d8:	00012545 	.word	0x00012545
   124dc:	00012535 	.word	0x00012535
   124e0:	00012555 	.word	0x00012555
   124e4:	00012559 	.word	0x00012559
   124e8:	000124a9 	.word	0x000124a9
   124ec:	000124a9 	.word	0x000124a9
   124f0:	000124a9 	.word	0x000124a9
   124f4:	000124a9 	.word	0x000124a9
   124f8:	000124a9 	.word	0x000124a9
   124fc:	000124a9 	.word	0x000124a9
   12500:	000124a9 	.word	0x000124a9
   12504:	000124a9 	.word	0x000124a9
   12508:	000124a9 	.word	0x000124a9
   1250c:	000124a9 	.word	0x000124a9
   12510:	000124a9 	.word	0x000124a9
   12514:	000124a9 	.word	0x000124a9
   12518:	00012549 	.word	0x00012549
		switch (z_in_optname) {
   1251c:	3901      	subs	r1, #1
   1251e:	2905      	cmp	r1, #5
   12520:	d8c2      	bhi.n	124a8 <z_to_nrf_optname+0xc>
   12522:	e8df f001 	tbb	[pc, r1]
   12526:	0703      	.short	0x0703
   12528:	210f1917 	.word	0x210f1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   1252c:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   1252e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   12530:	2000      	movs	r0, #0
			break;
   12532:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   12534:	2305      	movs	r3, #5
   12536:	e7fa      	b.n	1252e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   12538:	2914      	cmp	r1, #20
   1253a:	d005      	beq.n	12548 <z_to_nrf_optname+0xac>
   1253c:	2919      	cmp	r1, #25
   1253e:	d005      	beq.n	1254c <z_to_nrf_optname+0xb0>
   12540:	2904      	cmp	r1, #4
   12542:	d1b1      	bne.n	124a8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   12544:	2304      	movs	r3, #4
   12546:	e7f2      	b.n	1252e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   12548:	2314      	movs	r3, #20
   1254a:	e7f0      	b.n	1252e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   1254c:	6011      	str	r1, [r2, #0]
   1254e:	e7ef      	b.n	12530 <z_to_nrf_optname+0x94>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   12550:	2303      	movs	r3, #3
   12552:	e7ec      	b.n	1252e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   12554:	2306      	movs	r3, #6
   12556:	e7ea      	b.n	1252e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   12558:	2307      	movs	r3, #7
   1255a:	e7e8      	b.n	1252e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   1255c:	2902      	cmp	r1, #2
   1255e:	d0e5      	beq.n	1252c <z_to_nrf_optname+0x90>
   12560:	2903      	cmp	r1, #3
   12562:	d0f5      	beq.n	12550 <z_to_nrf_optname+0xb4>
   12564:	2901      	cmp	r1, #1
   12566:	d19f      	bne.n	124a8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   12568:	2301      	movs	r3, #1
   1256a:	e7e0      	b.n	1252e <z_to_nrf_optname+0x92>

0001256c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1256c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1256e:	4b03      	ldr	r3, [pc, #12]	; (1257c <nrf91_socket_iface_init+0x10>)
   12570:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   12572:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   12574:	4802      	ldr	r0, [pc, #8]	; (12580 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   12576:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   12578:	f7fd bb76 	b.w	fc68 <socket_offload_register>
   1257c:	200203cc 	.word	0x200203cc
   12580:	000268d8 	.word	0x000268d8

00012584 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12584:	4b0a      	ldr	r3, [pc, #40]	; (125b0 <find_node+0x2c>)
{
   12586:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12588:	681b      	ldr	r3, [r3, #0]
{
   1258a:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1258c:	b143      	cbz	r3, 125a0 <find_node+0x1c>
	return node->next;
   1258e:	2400      	movs	r4, #0
   12590:	6818      	ldr	r0, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   12592:	685e      	ldr	r6, [r3, #4]
   12594:	428e      	cmp	r6, r1
   12596:	d105      	bne.n	125a4 <find_node+0x20>
   12598:	689e      	ldr	r6, [r3, #8]
   1259a:	4296      	cmp	r6, r2
   1259c:	d102      	bne.n	125a4 <find_node+0x20>
			*prev_out = prev;
   1259e:	602c      	str	r4, [r5, #0]
			return curr;
		}
		prev = curr;
	}
	return NULL;
   125a0:	4618      	mov	r0, r3
}
   125a2:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   125a4:	2800      	cmp	r0, #0
   125a6:	d0fc      	beq.n	125a2 <find_node+0x1e>
   125a8:	461c      	mov	r4, r3
   125aa:	4603      	mov	r3, r0
   125ac:	6800      	ldr	r0, [r0, #0]
   125ae:	e7f0      	b.n	12592 <find_node+0xe>
   125b0:	200203d0 	.word	0x200203d0

000125b4 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   125b4:	b510      	push	{r4, lr}
	list->head = NULL;
   125b6:	2400      	movs	r4, #0
   125b8:	4b03      	ldr	r3, [pc, #12]	; (125c8 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   125ba:	4804      	ldr	r0, [pc, #16]	; (125cc <module_init+0x18>)
	list->tail = NULL;
   125bc:	e9c3 4400 	strd	r4, r4, [r3]
   125c0:	f000 fce6 	bl	12f90 <at_cmd_set_notification_handler>
	return 0;
}
   125c4:	4620      	mov	r0, r4
   125c6:	bd10      	pop	{r4, pc}
   125c8:	200203d0 	.word	0x200203d0
   125cc:	000125d1 	.word	0x000125d1

000125d0 <notif_dispatch>:
{
   125d0:	b538      	push	{r3, r4, r5, lr}
   125d2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   125d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   125d8:	4809      	ldr	r0, [pc, #36]	; (12600 <notif_dispatch+0x30>)
   125da:	f00f ff1b 	bl	22414 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   125de:	4b09      	ldr	r3, [pc, #36]	; (12604 <notif_dispatch+0x34>)
   125e0:	681b      	ldr	r3, [r3, #0]
   125e2:	b143      	cbz	r3, 125f6 <notif_dispatch+0x26>
	return node->next;
   125e4:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   125e6:	689a      	ldr	r2, [r3, #8]
   125e8:	4629      	mov	r1, r5
   125ea:	6858      	ldr	r0, [r3, #4]
   125ec:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   125ee:	b114      	cbz	r4, 125f6 <notif_dispatch+0x26>
   125f0:	4623      	mov	r3, r4
   125f2:	6824      	ldr	r4, [r4, #0]
   125f4:	e7f7      	b.n	125e6 <notif_dispatch+0x16>
	z_impl_k_mutex_unlock(mutex);
   125f6:	4802      	ldr	r0, [pc, #8]	; (12600 <notif_dispatch+0x30>)
}
   125f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   125fc:	f00f bf7c 	b.w	224f8 <z_impl_k_mutex_unlock>
   12600:	2002d584 	.word	0x2002d584
   12604:	200203d0 	.word	0x200203d0

00012608 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   12608:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1260a:	4606      	mov	r6, r0
	if (handler == NULL) {
   1260c:	460d      	mov	r5, r1
   1260e:	b369      	cbz	r1, 1266c <at_notif_register_handler+0x64>
	return z_impl_k_mutex_lock(mutex, timeout);
   12610:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12614:	4817      	ldr	r0, [pc, #92]	; (12674 <at_notif_register_handler+0x6c>)
   12616:	f00f fefd 	bl	22414 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1261a:	462a      	mov	r2, r5
   1261c:	4631      	mov	r1, r6
   1261e:	a801      	add	r0, sp, #4
   12620:	f7ff ffb0 	bl	12584 <find_node>
   12624:	4604      	mov	r4, r0
   12626:	b120      	cbz	r0, 12632 <at_notif_register_handler+0x2a>
	z_impl_k_mutex_unlock(mutex);
   12628:	4812      	ldr	r0, [pc, #72]	; (12674 <at_notif_register_handler+0x6c>)
   1262a:	f00f ff65 	bl	224f8 <z_impl_k_mutex_unlock>
	return 0;
   1262e:	2000      	movs	r0, #0
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
   12630:	e009      	b.n	12646 <at_notif_register_handler+0x3e>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   12632:	200c      	movs	r0, #12
   12634:	f00f fe2e 	bl	22294 <k_malloc>
   12638:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   1263a:	b930      	cbnz	r0, 1264a <at_notif_register_handler+0x42>
   1263c:	480d      	ldr	r0, [pc, #52]	; (12674 <at_notif_register_handler+0x6c>)
   1263e:	f00f ff5b 	bl	224f8 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   12642:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   12646:	b002      	add	sp, #8
   12648:	bd70      	pop	{r4, r5, r6, pc}
	memset(to_ins, 0, sizeof(struct notif_handler));
   1264a:	220c      	movs	r2, #12
   1264c:	4621      	mov	r1, r4
   1264e:	f012 f9f4 	bl	24a3a <memset>
	to_ins->ctx     = ctx;
   12652:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   12654:	4a08      	ldr	r2, [pc, #32]	; (12678 <at_notif_register_handler+0x70>)
	parent->next = child;
   12656:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   12658:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1265a:	e9c3 6501 	strd	r6, r5, [r3, #4]
   1265e:	b911      	cbnz	r1, 12666 <at_notif_register_handler+0x5e>
	list->head = node;
   12660:	e9c2 3300 	strd	r3, r3, [r2]
   12664:	e7e0      	b.n	12628 <at_notif_register_handler+0x20>
	parent->next = child;
   12666:	600b      	str	r3, [r1, #0]
	list->tail = node;
   12668:	6053      	str	r3, [r2, #4]
   1266a:	e7dd      	b.n	12628 <at_notif_register_handler+0x20>
		return -EINVAL;
   1266c:	f06f 0015 	mvn.w	r0, #21
   12670:	e7e9      	b.n	12646 <at_notif_register_handler+0x3e>
   12672:	bf00      	nop
   12674:	2002d584 	.word	0x2002d584
   12678:	200203d0 	.word	0x200203d0

0001267c <at_parse_detect_type>:
{
	state      = IDLE;
}

static int at_parse_detect_type(const char **str, int index)
{
   1267c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   1267e:	6804      	ldr	r4, [r0, #0]

	if ((index == 0) &&
   12680:	2900      	cmp	r1, #0
{
   12682:	4605      	mov	r5, r0
   12684:	7823      	ldrb	r3, [r4, #0]
	if ((index == 0) &&
   12686:	d14e      	bne.n	12726 <at_parse_detect_type+0xaa>
 * @retval true  If character is + or %
 * @retval false If character is something else
 */
static inline bool is_notification(char chr)
{
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12688:	2b2b      	cmp	r3, #43	; 0x2b
   1268a:	4e38      	ldr	r6, [pc, #224]	; (1276c <at_parse_detect_type+0xf0>)
   1268c:	d001      	beq.n	12692 <at_parse_detect_type+0x16>
   1268e:	2b25      	cmp	r3, #37	; 0x25
   12690:	d104      	bne.n	1269c <at_parse_detect_type+0x20>
	state = new_state;
   12692:	2305      	movs	r3, #5
   12694:	7033      	strb	r3, [r6, #0]
		*str = tmpstr;
		return -1;
	}

	*str = tmpstr;
	return 0;
   12696:	2000      	movs	r0, #0
	*str = tmpstr;
   12698:	602c      	str	r4, [r5, #0]
}
   1269a:	bd70      	pop	{r4, r5, r6, pc}
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
	if (strlen(str) < 3) {
   1269c:	4620      	mov	r0, r4
   1269e:	f012 f96b 	bl	24978 <strlen>
   126a2:	2802      	cmp	r0, #2
   126a4:	d93d      	bls.n	12722 <at_parse_detect_type+0xa6>
		return false;
	}

	if ((toupper(str[0]) == 'A') && (toupper(str[1]) == 'T') &&
   126a6:	7823      	ldrb	r3, [r4, #0]
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   126a8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   126ac:	2a19      	cmp	r2, #25
   126ae:	bf98      	it	ls
   126b0:	3b20      	subls	r3, #32
   126b2:	2b41      	cmp	r3, #65	; 0x41
   126b4:	d135      	bne.n	12722 <at_parse_detect_type+0xa6>
   126b6:	7863      	ldrb	r3, [r4, #1]
   126b8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   126bc:	2a19      	cmp	r2, #25
   126be:	bf98      	it	ls
   126c0:	3b20      	subls	r3, #32
   126c2:	2b54      	cmp	r3, #84	; 0x54
   126c4:	d12d      	bne.n	12722 <at_parse_detect_type+0xa6>
	    ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   126c6:	78a3      	ldrb	r3, [r4, #2]
   126c8:	2b25      	cmp	r3, #37	; 0x25
   126ca:	d003      	beq.n	126d4 <at_parse_detect_type+0x58>
	     (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   126cc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   126d0:	2b23      	cmp	r3, #35	; 0x23
   126d2:	d126      	bne.n	12722 <at_parse_detect_type+0xa6>
	state = new_state;
   126d4:	2306      	movs	r3, #6
   126d6:	e7dd      	b.n	12694 <at_parse_detect_type+0x18>
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   126d8:	2b22      	cmp	r3, #34	; 0x22
   126da:	d015      	beq.n	12708 <at_parse_detect_type+0x8c>
 * @retval true  If character is (
 * @retval false If character is something else
 */
static inline bool is_array_start(char chr)
{
	if (chr == '(') {
   126dc:	2b28      	cmp	r3, #40	; 0x28
   126de:	d018      	beq.n	12712 <at_parse_detect_type+0x96>
	if ((chr == '\r') ||
   126e0:	2b0d      	cmp	r3, #13
   126e2:	d001      	beq.n	126e8 <at_parse_detect_type+0x6c>
   126e4:	2b0a      	cmp	r3, #10
   126e6:	d134      	bne.n	12752 <at_parse_detect_type+0xd6>
		  (state == NUMBER)) {
   126e8:	4a20      	ldr	r2, [pc, #128]	; (1276c <at_parse_detect_type+0xf0>)
   126ea:	7811      	ldrb	r1, [r2, #0]
	} else if (is_lfcr(*tmpstr) &&
   126ec:	2903      	cmp	r1, #3
   126ee:	d12e      	bne.n	1274e <at_parse_detect_type+0xd2>
   126f0:	4621      	mov	r1, r4
		while (is_lfcr(*tmpstr)) {
   126f2:	780b      	ldrb	r3, [r1, #0]
   126f4:	460c      	mov	r4, r1
   126f6:	2b0d      	cmp	r3, #13
   126f8:	f101 0101 	add.w	r1, r1, #1
   126fc:	d0f9      	beq.n	126f2 <at_parse_detect_type+0x76>
   126fe:	2b0a      	cmp	r3, #10
   12700:	d0f7      	beq.n	126f2 <at_parse_detect_type+0x76>
	state = new_state;
   12702:	2304      	movs	r3, #4
   12704:	7013      	strb	r3, [r2, #0]
   12706:	e7c6      	b.n	12696 <at_parse_detect_type+0x1a>
   12708:	2202      	movs	r2, #2
   1270a:	4b18      	ldr	r3, [pc, #96]	; (1276c <at_parse_detect_type+0xf0>)
		tmpstr++;
   1270c:	3401      	adds	r4, #1
	state = new_state;
   1270e:	701a      	strb	r2, [r3, #0]
   12710:	e7c1      	b.n	12696 <at_parse_detect_type+0x1a>
   12712:	2201      	movs	r2, #1
   12714:	4b15      	ldr	r3, [pc, #84]	; (1276c <at_parse_detect_type+0xf0>)
		tmpstr++;
   12716:	4414      	add	r4, r2
	state = new_state;
   12718:	701a      	strb	r2, [r3, #0]
   1271a:	e7bc      	b.n	12696 <at_parse_detect_type+0x1a>
		return -1;
   1271c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12720:	e7bb      	b.n	1269a <at_parse_detect_type+0x1e>
	state = new_state;
   12722:	2302      	movs	r3, #2
   12724:	e7b6      	b.n	12694 <at_parse_detect_type+0x18>
	} else if ((index > 0) &&
   12726:	dd03      	ble.n	12730 <at_parse_detect_type+0xb4>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12728:	2b2b      	cmp	r3, #43	; 0x2b
   1272a:	d0f7      	beq.n	1271c <at_parse_detect_type+0xa0>
   1272c:	2b25      	cmp	r3, #37	; 0x25
   1272e:	d0f5      	beq.n	1271c <at_parse_detect_type+0xa0>
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) ||
	    (chr == '-') ||
   12730:	f1a3 022b 	sub.w	r2, r3, #43	; 0x2b
   12734:	b2d2      	uxtb	r2, r2
   12736:	2a0e      	cmp	r2, #14
   12738:	d8ce      	bhi.n	126d8 <at_parse_detect_type+0x5c>
   1273a:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   1273e:	fa21 f202 	lsr.w	r2, r1, r2
   12742:	07d2      	lsls	r2, r2, #31
   12744:	d5ca      	bpl.n	126dc <at_parse_detect_type+0x60>
	state = new_state;
   12746:	2203      	movs	r2, #3
   12748:	4b08      	ldr	r3, [pc, #32]	; (1276c <at_parse_detect_type+0xf0>)
   1274a:	701a      	strb	r2, [r3, #0]
   1274c:	e7a3      	b.n	12696 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) &&
   1274e:	2907      	cmp	r1, #7
   12750:	d0a1      	beq.n	12696 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) ||
   12752:	3b2c      	subs	r3, #44	; 0x2c
   12754:	b2db      	uxtb	r3, r3
   12756:	2b11      	cmp	r3, #17
   12758:	d8e0      	bhi.n	1271c <at_parse_detect_type+0xa0>
   1275a:	4a05      	ldr	r2, [pc, #20]	; (12770 <at_parse_detect_type+0xf4>)
   1275c:	fa22 f303 	lsr.w	r3, r2, r3
   12760:	07db      	lsls	r3, r3, #31
   12762:	d5db      	bpl.n	1271c <at_parse_detect_type+0xa0>
	state = new_state;
   12764:	4b01      	ldr	r3, [pc, #4]	; (1276c <at_parse_detect_type+0xf0>)
   12766:	2207      	movs	r2, #7
   12768:	e7ef      	b.n	1274a <at_parse_detect_type+0xce>
   1276a:	bf00      	nop
   1276c:	20027402 	.word	0x20027402
   12770:	00024001 	.word	0x00024001

00012774 <at_parse_process_element>:

static int at_parse_process_element(const char **str,
				    int index,
				    struct at_param_list *const list)
{
   12774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const char *tmpstr = *str;
   12778:	6804      	ldr	r4, [r0, #0]
{
   1277a:	b0a2      	sub	sp, #136	; 0x88
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1277c:	7823      	ldrb	r3, [r4, #0]
   1277e:	4680      	mov	r8, r0
   12780:	460f      	mov	r7, r1
   12782:	4616      	mov	r6, r2
   12784:	2b00      	cmp	r3, #0
   12786:	f000 80b2 	beq.w	128ee <at_parse_process_element+0x17a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1278a:	4b5a      	ldr	r3, [pc, #360]	; (128f4 <at_parse_process_element+0x180>)
   1278c:	781d      	ldrb	r5, [r3, #0]
   1278e:	2d05      	cmp	r5, #5
   12790:	d110      	bne.n	127b4 <at_parse_process_element+0x40>
		const char *start_ptr = tmpstr++;
   12792:	1c65      	adds	r5, r4, #1

		while (is_valid_notification_char(*tmpstr)) {
   12794:	462a      	mov	r2, r5
	chr = toupper(chr);
   12796:	f812 3b01 	ldrb.w	r3, [r2], #1
   1279a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1279e:	2919      	cmp	r1, #25
   127a0:	bf98      	it	ls
   127a2:	3b20      	subls	r3, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   127a4:	3b41      	subs	r3, #65	; 0x41
   127a6:	b2db      	uxtb	r3, r3
   127a8:	2b19      	cmp	r3, #25
   127aa:	d901      	bls.n	127b0 <at_parse_process_element+0x3c>

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list,
   127ac:	1b2b      	subs	r3, r5, r4
   127ae:	e02e      	b.n	1280e <at_parse_process_element+0x9a>
   127b0:	4615      	mov	r5, r2
   127b2:	e7ef      	b.n	12794 <at_parse_process_element+0x20>
	} else if (state == COMMAND) {
   127b4:	2d06      	cmp	r5, #6
   127b6:	d10e      	bne.n	127d6 <at_parse_process_element+0x62>
		tmpstr += sizeof("AT+") - 1;
   127b8:	1ce5      	adds	r5, r4, #3
		while (is_valid_notification_char(*tmpstr)) {
   127ba:	462a      	mov	r2, r5
	chr = toupper(chr);
   127bc:	f812 3b01 	ldrb.w	r3, [r2], #1
   127c0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   127c4:	2919      	cmp	r1, #25
   127c6:	bf98      	it	ls
   127c8:	3b20      	subls	r3, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   127ca:	3b41      	subs	r3, #65	; 0x41
   127cc:	b2db      	uxtb	r3, r3
   127ce:	2b19      	cmp	r3, #25
   127d0:	d8ec      	bhi.n	127ac <at_parse_process_element+0x38>
   127d2:	4615      	mov	r5, r2
   127d4:	e7f1      	b.n	127ba <at_parse_process_element+0x46>
	} else if (state == OPTIONAL) {
   127d6:	2d07      	cmp	r5, #7
   127d8:	d108      	bne.n	127ec <at_parse_process_element+0x78>
		at_params_empty_put(list, index);
   127da:	4610      	mov	r0, r2
   127dc:	f013 f906 	bl	259ec <at_params_empty_put>
				     index,
				     start_ptr, tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   127e0:	2000      	movs	r0, #0
	*str = tmpstr;
   127e2:	f8c8 4000 	str.w	r4, [r8]
}
   127e6:	b022      	add	sp, #136	; 0x88
   127e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == STRING) {
   127ec:	2d02      	cmp	r5, #2
   127ee:	d117      	bne.n	12820 <at_parse_process_element+0xac>
   127f0:	4623      	mov	r3, r4
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   127f2:	f242 4101 	movw	r1, #9217	; 0x2401
		while (!is_dblquote(*tmpstr) &&
   127f6:	461d      	mov	r5, r3
   127f8:	f815 2b01 	ldrb.w	r2, [r5], #1
	if (chr == '"') {
   127fc:	2a22      	cmp	r2, #34	; 0x22
   127fe:	d005      	beq.n	1280c <at_parse_process_element+0x98>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12800:	2a0d      	cmp	r2, #13
   12802:	d80b      	bhi.n	1281c <at_parse_process_element+0xa8>
   12804:	fa21 f202 	lsr.w	r2, r1, r2
   12808:	07d2      	lsls	r2, r2, #31
   1280a:	d507      	bpl.n	1281c <at_parse_process_element+0xa8>
		at_params_string_put(list,
   1280c:	1b1b      	subs	r3, r3, r4
		at_params_string_put(list,
   1280e:	4622      	mov	r2, r4
   12810:	4639      	mov	r1, r7
   12812:	4630      	mov	r0, r6
   12814:	f013 f90f 	bl	25a36 <at_params_string_put>
   12818:	462c      	mov	r4, r5
   1281a:	e7e1      	b.n	127e0 <at_parse_process_element+0x6c>
	if ((chr >= 'A') && (chr <= 'Z')) {
   1281c:	462b      	mov	r3, r5
   1281e:	e7ea      	b.n	127f6 <at_parse_process_element+0x82>
	} else if (state == ARRAY) {
   12820:	2d01      	cmp	r5, #1
   12822:	d13b      	bne.n	1289c <at_parse_process_element+0x128>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   12824:	4620      	mov	r0, r4
   12826:	220a      	movs	r2, #10
   12828:	a901      	add	r1, sp, #4
   1282a:	f011 ffe1 	bl	247f0 <strtoul>
	if ((chr == AT_PARAM_SEPARATOR) ||
   1282e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 128f8 <at_parse_process_element+0x184>
		tmpstr = next;
   12832:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   12834:	9002      	str	r0, [sp, #8]
		while (!is_array_stop(*tmpstr) &&
   12836:	7823      	ldrb	r3, [r4, #0]
	if (chr == ')') {
   12838:	2b29      	cmp	r3, #41	; 0x29
   1283a:	d025      	beq.n	12888 <at_parse_process_element+0x114>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1283c:	b323      	cbz	r3, 12888 <at_parse_process_element+0x114>
	if ((chr == AT_PARAM_SEPARATOR) ||
   1283e:	3b2c      	subs	r3, #44	; 0x2c
   12840:	b2db      	uxtb	r3, r3
   12842:	2b11      	cmp	r3, #17
   12844:	f104 0401 	add.w	r4, r4, #1
   12848:	d8f5      	bhi.n	12836 <at_parse_process_element+0xc2>
   1284a:	fa29 f303 	lsr.w	r3, r9, r3
   1284e:	07db      	lsls	r3, r3, #31
   12850:	d5f1      	bpl.n	12836 <at_parse_process_element+0xc2>
				      (u32_t)strtoul(++tmpstr, &next, 10);
   12852:	220a      	movs	r2, #10
   12854:	a901      	add	r1, sp, #4
   12856:	4620      	mov	r0, r4
   12858:	f011 ffca 	bl	247f0 <strtoul>
				tmparray[i++] =
   1285c:	ab22      	add	r3, sp, #136	; 0x88
   1285e:	f105 0a01 	add.w	sl, r5, #1
   12862:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   12866:	f845 0c80 	str.w	r0, [r5, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1286a:	4620      	mov	r0, r4
   1286c:	f012 f884 	bl	24978 <strlen>
   12870:	4605      	mov	r5, r0
   12872:	9801      	ldr	r0, [sp, #4]
   12874:	f012 f880 	bl	24978 <strlen>
   12878:	4285      	cmp	r5, r0
   1287a:	d006      	beq.n	1288a <at_parse_process_element+0x116>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1287c:	f1ba 0f20 	cmp.w	sl, #32
					tmpstr = next;
   12880:	9c01      	ldr	r4, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12882:	d002      	beq.n	1288a <at_parse_process_element+0x116>
   12884:	4655      	mov	r5, sl
   12886:	e7d6      	b.n	12836 <at_parse_process_element+0xc2>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12888:	46aa      	mov	sl, r5
		at_params_array_put(list, index,
   1288a:	ea4f 038a 	mov.w	r3, sl, lsl #2
   1288e:	aa02      	add	r2, sp, #8
   12890:	4639      	mov	r1, r7
   12892:	4630      	mov	r0, r6
   12894:	f013 f8f2 	bl	25a7c <at_params_array_put>
		tmpstr++;
   12898:	3401      	adds	r4, #1
   1289a:	e7a1      	b.n	127e0 <at_parse_process_element+0x6c>
	} else if (state == NUMBER) {
   1289c:	2d03      	cmp	r5, #3
   1289e:	d114      	bne.n	128ca <at_parse_process_element+0x156>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   128a0:	220a      	movs	r2, #10
   128a2:	4620      	mov	r0, r4
   128a4:	a902      	add	r1, sp, #8
   128a6:	f011 ffa3 	bl	247f0 <strtoul>
		if (value <= USHRT_MAX) {
   128aa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   128ae:	4602      	mov	r2, r0
		tmpstr = next;
   128b0:	9c02      	ldr	r4, [sp, #8]
		if (value <= USHRT_MAX) {
   128b2:	d205      	bcs.n	128c0 <at_parse_process_element+0x14c>
			at_params_short_put(list, index, (u16_t)value);
   128b4:	b282      	uxth	r2, r0
   128b6:	4639      	mov	r1, r7
   128b8:	4630      	mov	r0, r6
   128ba:	f013 f884 	bl	259c6 <at_params_short_put>
   128be:	e78f      	b.n	127e0 <at_parse_process_element+0x6c>
			at_params_int_put(list, index, value);
   128c0:	4639      	mov	r1, r7
   128c2:	4630      	mov	r0, r6
   128c4:	f013 f8a4 	bl	25a10 <at_params_int_put>
   128c8:	e78a      	b.n	127e0 <at_parse_process_element+0x6c>
	} else if (state == SMS_PDU) {
   128ca:	2d04      	cmp	r5, #4
   128cc:	d188      	bne.n	127e0 <at_parse_process_element+0x6c>
   128ce:	4625      	mov	r5, r4
		while (isxdigit(*tmpstr)) {
   128d0:	462a      	mov	r2, r5
   128d2:	f812 3b01 	ldrb.w	r3, [r2], #1
	return (int)(((ua - (unsigned)'0') < 10U) ||
   128d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   128da:	2909      	cmp	r1, #9
   128dc:	d905      	bls.n	128ea <at_parse_process_element+0x176>
			((ua | 32U) - (unsigned)'a' < 6U));
   128de:	f043 0320 	orr.w	r3, r3, #32
   128e2:	3b61      	subs	r3, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   128e4:	2b05      	cmp	r3, #5
   128e6:	f63f af61 	bhi.w	127ac <at_parse_process_element+0x38>
	if (chr == ')') {
   128ea:	4615      	mov	r5, r2
   128ec:	e7f0      	b.n	128d0 <at_parse_process_element+0x15c>
		return -1;
   128ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128f2:	e778      	b.n	127e6 <at_parse_process_element+0x72>
   128f4:	20027402 	.word	0x20027402
   128f8:	00024001 	.word	0x00024001

000128fc <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list * const list,
				  size_t max_params_count)
{
   128fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12900:	4689      	mov	r9, r1
   12902:	4616      	mov	r6, r2
   12904:	4698      	mov	r8, r3
	int err = 0;

	if (at_params_str == NULL ||
   12906:	4604      	mov	r4, r0
   12908:	2800      	cmp	r0, #0
   1290a:	d07f      	beq.n	12a0c <at_parser_max_params_from_str+0x110>
   1290c:	2a00      	cmp	r2, #0
   1290e:	d07d      	beq.n	12a0c <at_parser_max_params_from_str+0x110>
	    list == NULL || list->params == NULL) {
   12910:	6853      	ldr	r3, [r2, #4]
   12912:	2b00      	cmp	r3, #0
   12914:	d07a      	beq.n	12a0c <at_parser_max_params_from_str+0x110>
	state      = IDLE;
   12916:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   12918:	4610      	mov	r0, r2
   1291a:	f013 f83c 	bl	25996 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1291e:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   12920:	af02      	add	r7, sp, #8
	max_params_count = MIN(max_params_count, list->param_count);
   12922:	4590      	cmp	r8, r2
	const char *str = *at_params_str;
   12924:	f847 4d04 	str.w	r4, [r7, #-4]!
	max_params_count = MIN(max_params_count, list->param_count);
   12928:	bf28      	it	cs
   1292a:	4690      	movcs	r8, r2
	int index = 0;
   1292c:	462c      	mov	r4, r5
	state      = IDLE;
   1292e:	4b39      	ldr	r3, [pc, #228]	; (12a14 <at_parser_max_params_from_str+0x118>)
	if ((chr == AT_PARAM_SEPARATOR) ||
   12930:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 12a18 <at_parser_max_params_from_str+0x11c>
   12934:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) &&
   12936:	9a01      	ldr	r2, [sp, #4]
   12938:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1293a:	2b00      	cmp	r3, #0
   1293c:	d04a      	beq.n	129d4 <at_parser_max_params_from_str+0xd8>
   1293e:	45a0      	cmp	r8, r4
   12940:	d948      	bls.n	129d4 <at_parser_max_params_from_str+0xd8>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12942:	2b20      	cmp	r3, #32
   12944:	d002      	beq.n	1294c <at_parser_max_params_from_str+0x50>
   12946:	3b09      	subs	r3, #9
   12948:	2b04      	cmp	r3, #4
   1294a:	d801      	bhi.n	12950 <at_parser_max_params_from_str+0x54>
			str++;
   1294c:	3201      	adds	r2, #1
   1294e:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   12950:	4621      	mov	r1, r4
   12952:	4638      	mov	r0, r7
   12954:	f7ff fe92 	bl	1267c <at_parse_detect_type>
   12958:	1c42      	adds	r2, r0, #1
   1295a:	d03b      	beq.n	129d4 <at_parser_max_params_from_str+0xd8>
		if (at_parse_process_element(&str, index, list) == -1) {
   1295c:	4632      	mov	r2, r6
   1295e:	4621      	mov	r1, r4
   12960:	4638      	mov	r0, r7
   12962:	f7ff ff07 	bl	12774 <at_parse_process_element>
   12966:	1c43      	adds	r3, r0, #1
   12968:	d034      	beq.n	129d4 <at_parser_max_params_from_str+0xd8>
		if (is_separator(*str)) {
   1296a:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) ||
   1296c:	781a      	ldrb	r2, [r3, #0]
   1296e:	3a2c      	subs	r2, #44	; 0x2c
   12970:	b2d2      	uxtb	r2, r2
   12972:	2a11      	cmp	r2, #17
   12974:	d81b      	bhi.n	129ae <at_parser_max_params_from_str+0xb2>
   12976:	fa2a f202 	lsr.w	r2, sl, r2
   1297a:	07d1      	lsls	r1, r2, #31
   1297c:	d517      	bpl.n	129ae <at_parser_max_params_from_str+0xb2>
			if (is_lfcr(*(str+1))) {
   1297e:	785b      	ldrb	r3, [r3, #1]
	if ((chr == '\r') ||
   12980:	2b0d      	cmp	r3, #13
   12982:	d001      	beq.n	12988 <at_parser_max_params_from_str+0x8c>
   12984:	2b0a      	cmp	r3, #10
   12986:	d10f      	bne.n	129a8 <at_parser_max_params_from_str+0xac>
				index++;
   12988:	3401      	adds	r4, #1
				if (index == max_params) {
   1298a:	45a0      	cmp	r8, r4
   1298c:	d039      	beq.n	12a02 <at_parser_max_params_from_str+0x106>
				if (at_parse_detect_type(&str, index) == -1) {
   1298e:	4621      	mov	r1, r4
   12990:	4638      	mov	r0, r7
   12992:	f7ff fe73 	bl	1267c <at_parse_detect_type>
   12996:	1c42      	adds	r2, r0, #1
   12998:	d01c      	beq.n	129d4 <at_parser_max_params_from_str+0xd8>
				if (at_parse_process_element(&str,
   1299a:	4632      	mov	r2, r6
   1299c:	4621      	mov	r1, r4
   1299e:	4638      	mov	r0, r7
   129a0:	f7ff fee8 	bl	12774 <at_parse_process_element>
   129a4:	1c43      	adds	r3, r0, #1
   129a6:	d015      	beq.n	129d4 <at_parser_max_params_from_str+0xd8>
			str++;
   129a8:	9b01      	ldr	r3, [sp, #4]
   129aa:	3301      	adds	r3, #1
   129ac:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   129ae:	9a01      	ldr	r2, [sp, #4]
   129b0:	7813      	ldrb	r3, [r2, #0]
   129b2:	2b0d      	cmp	r3, #13
   129b4:	d11e      	bne.n	129f4 <at_parser_max_params_from_str+0xf8>
   129b6:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   129b8:	7813      	ldrb	r3, [r2, #0]
   129ba:	4611      	mov	r1, r2
   129bc:	2b0d      	cmp	r3, #13
   129be:	f102 0201 	add.w	r2, r2, #1
   129c2:	d0f9      	beq.n	129b8 <at_parser_max_params_from_str+0xbc>
   129c4:	2b0a      	cmp	r3, #10
   129c6:	d0f7      	beq.n	129b8 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   129c8:	b11b      	cbz	r3, 129d2 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   129ca:	2b2b      	cmp	r3, #43	; 0x2b
   129cc:	d001      	beq.n	129d2 <at_parser_max_params_from_str+0xd6>
   129ce:	2b25      	cmp	r3, #37	; 0x25
   129d0:	d112      	bne.n	129f8 <at_parser_max_params_from_str+0xfc>
				str += i;
   129d2:	9101      	str	r1, [sp, #4]
	*at_params_str = str;
   129d4:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   129d6:	b9b5      	cbnz	r5, 12a06 <at_parser_max_params_from_str+0x10a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   129d8:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   129da:	2a00      	cmp	r2, #0
   129dc:	bf0c      	ite	eq
   129de:	2000      	moveq	r0, #0
   129e0:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   129e4:	f1b9 0f00 	cmp.w	r9, #0
   129e8:	d001      	beq.n	129ee <at_parser_max_params_from_str+0xf2>
		*next_param_str = (char *)at_params_str;
   129ea:	f8c9 3000 	str.w	r3, [r9]
	}

	return err;
}
   129ee:	b002      	add	sp, #8
   129f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((chr == '\r') ||
   129f4:	2b0a      	cmp	r3, #10
   129f6:	d0de      	beq.n	129b6 <at_parser_max_params_from_str+0xba>
		index++;
   129f8:	3401      	adds	r4, #1
			oversized = true;
   129fa:	45a0      	cmp	r8, r4
   129fc:	bf08      	it	eq
   129fe:	2501      	moveq	r5, #1
   12a00:	e799      	b.n	12936 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   12a02:	2501      	movs	r5, #1
   12a04:	e7e6      	b.n	129d4 <at_parser_max_params_from_str+0xd8>
		return -E2BIG;
   12a06:	f06f 0006 	mvn.w	r0, #6
   12a0a:	e7eb      	b.n	129e4 <at_parser_max_params_from_str+0xe8>
		return -EINVAL;
   12a0c:	f06f 0015 	mvn.w	r0, #21
   12a10:	e7ed      	b.n	129ee <at_parser_max_params_from_str+0xf2>
   12a12:	bf00      	nop
   12a14:	20027402 	.word	0x20027402
   12a18:	00024001 	.word	0x00024001

00012a1c <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   12a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   12a1e:	b1da      	cbz	r2, 12a58 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   12a20:	2300      	movs	r3, #0
	bool id_found = false;
   12a22:	461c      	mov	r4, r3
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   12a24:	4e0e      	ldr	r6, [pc, #56]	; (12a60 <abi_getter+0x44>)
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   12a26:	4f0f      	ldr	r7, [pc, #60]	; (12a64 <abi_getter+0x48>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   12a28:	42b3      	cmp	r3, r6
   12a2a:	d306      	bcc.n	12a3a <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   12a2c:	2c00      	cmp	r4, #0
   12a2e:	bf14      	ite	ne
   12a30:	f06f 0008 	mvnne.w	r0, #8
   12a34:	f06f 0001 	mvneq.w	r0, #1
   12a38:	e009      	b.n	12a4e <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   12a3a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
		if (ext_abi->abi_id == id) {
   12a3e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   12a42:	4560      	cmp	r0, ip
   12a44:	d106      	bne.n	12a54 <abi_getter+0x38>
			if (index-- == 0) {
   12a46:	1e4c      	subs	r4, r1, #1
   12a48:	b911      	cbnz	r1, 12a50 <abi_getter+0x34>
				return 0;
   12a4a:	4608      	mov	r0, r1
				*abi = ext_abi;
   12a4c:	6015      	str	r5, [r2, #0]
}
   12a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   12a50:	4621      	mov	r1, r4
			id_found = true;
   12a52:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   12a54:	3301      	adds	r3, #1
   12a56:	e7e7      	b.n	12a28 <abi_getter+0xc>
		return -EFAULT;
   12a58:	f06f 000d 	mvn.w	r0, #13
   12a5c:	e7f7      	b.n	12a4e <abi_getter+0x32>
   12a5e:	bf00      	nop
   12a60:	00000000 	.word	0x00000000
   12a64:	00028e74 	.word	0x00028e74

00012a68 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   12a68:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   12a6a:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   12a6c:	b118      	cbz	r0, 12a76 <callback_worker+0xe>
		data->callback(data->data);
   12a6e:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   12a72:	300c      	adds	r0, #12
   12a74:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   12a76:	a901      	add	r1, sp, #4
   12a78:	4802      	ldr	r0, [pc, #8]	; (12a84 <callback_worker+0x1c>)
   12a7a:	f00f fb51 	bl	22120 <k_mem_slab_free>
}
   12a7e:	b003      	add	sp, #12
   12a80:	f85d fb04 	ldr.w	pc, [sp], #4
   12a84:	2002d508 	.word	0x2002d508

00012a88 <open_socket>:
{
   12a88:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   12a8a:	4b09      	ldr	r3, [pc, #36]	; (12ab0 <open_socket+0x28>)
   12a8c:	f240 2201 	movw	r2, #513	; 0x201
   12a90:	681b      	ldr	r3, [r3, #0]
   12a92:	2100      	movs	r1, #0
   12a94:	681b      	ldr	r3, [r3, #0]
   12a96:	2066      	movs	r0, #102	; 0x66
   12a98:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   12a9a:	4b06      	ldr	r3, [pc, #24]	; (12ab4 <open_socket+0x2c>)
   12a9c:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   12a9e:	3001      	adds	r0, #1
   12aa0:	d104      	bne.n	12aac <open_socket+0x24>
   12aa2:	f00f f987 	bl	21db4 <z_impl_z_errno>
		return -errno;
   12aa6:	6800      	ldr	r0, [r0, #0]
   12aa8:	4240      	negs	r0, r0
}
   12aaa:	bd08      	pop	{r3, pc}
	return 0;
   12aac:	2000      	movs	r0, #0
   12aae:	e7fc      	b.n	12aaa <open_socket+0x22>
   12ab0:	20020314 	.word	0x20020314
   12ab4:	200203d8 	.word	0x200203d8

00012ab8 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   12ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12abc:	4681      	mov	r9, r0
   12abe:	460e      	mov	r6, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   12ac0:	f011 ff5a 	bl	24978 <strlen>
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));
   12ac4:	f04f 0804 	mov.w	r8, #4
   12ac8:	f04f 0500 	mov.w	r5, #0
   12acc:	4b31      	ldr	r3, [pc, #196]	; (12b94 <at_write+0xdc>)
   12ace:	4c32      	ldr	r4, [pc, #200]	; (12b98 <at_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   12ad0:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   12ad2:	4648      	mov	r0, r9
   12ad4:	1ae4      	subs	r4, r4, r3
   12ad6:	f7fc fc9d 	bl	f414 <log_strdup>
   12ada:	f368 0502 	bfi	r5, r8, #0, #3
   12ade:	f36f 05c5 	bfc	r5, #3, #3
   12ae2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   12ae6:	f364 158f 	bfi	r5, r4, #6, #10
   12aea:	462b      	mov	r3, r5
   12aec:	4602      	mov	r2, r0
   12aee:	492b      	ldr	r1, [pc, #172]	; (12b9c <at_write+0xe4>)
   12af0:	482b      	ldr	r0, [pc, #172]	; (12ba0 <at_write+0xe8>)
   12af2:	f011 fa51 	bl	23f98 <log_2>
	return socket_ops->send(sock, buf, len, flags);
   12af6:	4b2b      	ldr	r3, [pc, #172]	; (12ba4 <at_write+0xec>)
   12af8:	482b      	ldr	r0, [pc, #172]	; (12ba8 <at_write+0xf0>)
   12afa:	681b      	ldr	r3, [r3, #0]
   12afc:	463a      	mov	r2, r7
   12afe:	6add      	ldr	r5, [r3, #44]	; 0x2c
   12b00:	4649      	mov	r1, r9
   12b02:	2300      	movs	r3, #0
   12b04:	6800      	ldr	r0, [r0, #0]
   12b06:	47a8      	blx	r5

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);

	if (bytes_sent == -1) {
   12b08:	1c43      	adds	r3, r0, #1
   12b0a:	4605      	mov	r5, r0
   12b0c:	d11e      	bne.n	12b4c <at_write+0x94>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   12b0e:	2701      	movs	r7, #1
   12b10:	f04f 0500 	mov.w	r5, #0
   12b14:	f367 0502 	bfi	r5, r7, #0, #3
   12b18:	f36f 05c5 	bfc	r5, #3, #3
   12b1c:	f364 158f 	bfi	r5, r4, #6, #10
   12b20:	f00f f948 	bl	21db4 <z_impl_z_errno>
   12b24:	462a      	mov	r2, r5
   12b26:	6801      	ldr	r1, [r0, #0]
   12b28:	4820      	ldr	r0, [pc, #128]	; (12bac <at_write+0xf4>)
   12b2a:	f011 fa21 	bl	23f70 <log_1>
   12b2e:	f00f f941 	bl	21db4 <z_impl_z_errno>
		ret.code  = -errno;
   12b32:	6803      	ldr	r3, [r0, #0]
		ret.state = AT_CMD_ERROR;
   12b34:	f88d 7004 	strb.w	r7, [sp, #4]
		ret.code  = -errno;
   12b38:	425b      	negs	r3, r3
   12b3a:	9300      	str	r3, [sp, #0]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   12b3c:	b116      	cbz	r6, 12b44 <at_write+0x8c>
		*state = ret.state;
   12b3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12b42:	7033      	strb	r3, [r6, #0]
	}

	return ret.code;
}
   12b44:	9800      	ldr	r0, [sp, #0]
   12b46:	b003      	add	sp, #12
   12b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   12b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b50:	4669      	mov	r1, sp
   12b52:	4817      	ldr	r0, [pc, #92]	; (12bb0 <at_write+0xf8>)
   12b54:	f00f fc00 	bl	22358 <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   12b58:	f04f 0300 	mov.w	r3, #0
   12b5c:	f368 0302 	bfi	r3, r8, #0, #3
   12b60:	f36f 03c5 	bfc	r3, #3, #3
   12b64:	f364 138f 	bfi	r3, r4, #6, #10
   12b68:	462a      	mov	r2, r5
   12b6a:	490c      	ldr	r1, [pc, #48]	; (12b9c <at_write+0xe4>)
   12b6c:	4811      	ldr	r0, [pc, #68]	; (12bb4 <at_write+0xfc>)
   12b6e:	f011 fa13 	bl	23f98 <log_2>
		if (bytes_sent != bytes_to_send) {
   12b72:	42af      	cmp	r7, r5
   12b74:	d0e2      	beq.n	12b3c <at_write+0x84>
			LOG_ERR("Bytes sent (%d) was not the "
   12b76:	2201      	movs	r2, #1
   12b78:	f04f 0300 	mov.w	r3, #0
   12b7c:	f362 0302 	bfi	r3, r2, #0, #3
   12b80:	f36f 03c5 	bfc	r3, #3, #3
   12b84:	f364 138f 	bfi	r3, r4, #6, #10
   12b88:	463a      	mov	r2, r7
   12b8a:	4629      	mov	r1, r5
   12b8c:	480a      	ldr	r0, [pc, #40]	; (12bb8 <at_write+0x100>)
   12b8e:	f011 fa03 	bl	23f98 <log_2>
   12b92:	e7d3      	b.n	12b3c <at_write+0x84>
   12b94:	00026684 	.word	0x00026684
   12b98:	0002668c 	.word	0x0002668c
   12b9c:	00028a8d 	.word	0x00028a8d
   12ba0:	00028b87 	.word	0x00028b87
   12ba4:	20020314 	.word	0x20020314
   12ba8:	200203d8 	.word	0x200203d8
   12bac:	00028b9e 	.word	0x00028b9e
   12bb0:	2002d598 	.word	0x2002d598
   12bb4:	00028bc1 	.word	0x00028bc1
   12bb8:	00028bd4 	.word	0x00028bd4

00012bbc <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   12bbc:	b570      	push	{r4, r5, r6, lr}
   12bbe:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   12bc0:	f7ff ff62 	bl	12a88 <open_socket>
   12bc4:	4d1e      	ldr	r5, [pc, #120]	; (12c40 <at_cmd_driver_init+0x84>)
   12bc6:	4b1f      	ldr	r3, [pc, #124]	; (12c44 <at_cmd_driver_init+0x88>)
	if (err) {
   12bc8:	4604      	mov	r4, r0
   12bca:	1aed      	subs	r5, r5, r3
   12bcc:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   12bd0:	b178      	cbz	r0, 12bf2 <at_cmd_driver_init+0x36>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   12bd2:	f04f 0200 	mov.w	r2, #0
   12bd6:	2301      	movs	r3, #1
   12bd8:	f363 0202 	bfi	r2, r3, #0, #3
   12bdc:	f36f 02c5 	bfc	r2, #3, #3
   12be0:	4601      	mov	r1, r0
   12be2:	4819      	ldr	r0, [pc, #100]	; (12c48 <at_cmd_driver_init+0x8c>)
   12be4:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   12be8:	f011 f9c2 	bl	23f70 <log_1>

	return 0;
}
   12bec:	4620      	mov	r0, r4
   12bee:	b006      	add	sp, #24
   12bf0:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("Common AT socket created");
   12bf2:	2604      	movs	r6, #4
   12bf4:	f04f 0200 	mov.w	r2, #0
   12bf8:	f366 0202 	bfi	r2, r6, #0, #3
   12bfc:	f360 02c5 	bfi	r2, r0, #3, #3
   12c00:	f365 128f 	bfi	r2, r5, #6, #10
   12c04:	4911      	ldr	r1, [pc, #68]	; (12c4c <at_cmd_driver_init+0x90>)
   12c06:	4812      	ldr	r0, [pc, #72]	; (12c50 <at_cmd_driver_init+0x94>)
   12c08:	f011 f9b2 	bl	23f70 <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12c0c:	230a      	movs	r3, #10
   12c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12c12:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12c16:	490f      	ldr	r1, [pc, #60]	; (12c54 <at_cmd_driver_init+0x98>)
   12c18:	e9cd 4404 	strd	r4, r4, [sp, #16]
   12c1c:	e9cd 4400 	strd	r4, r4, [sp]
   12c20:	4b0d      	ldr	r3, [pc, #52]	; (12c58 <at_cmd_driver_init+0x9c>)
   12c22:	480e      	ldr	r0, [pc, #56]	; (12c5c <at_cmd_driver_init+0xa0>)
   12c24:	f010 f858 	bl	22cd8 <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   12c28:	f04f 0200 	mov.w	r2, #0
   12c2c:	f366 0202 	bfi	r2, r6, #0, #3
   12c30:	f364 02c5 	bfi	r2, r4, #3, #3
   12c34:	f365 128f 	bfi	r2, r5, #6, #10
   12c38:	4904      	ldr	r1, [pc, #16]	; (12c4c <at_cmd_driver_init+0x90>)
   12c3a:	4809      	ldr	r0, [pc, #36]	; (12c60 <at_cmd_driver_init+0xa4>)
   12c3c:	e7d4      	b.n	12be8 <at_cmd_driver_init+0x2c>
   12c3e:	bf00      	nop
   12c40:	0002668c 	.word	0x0002668c
   12c44:	00026684 	.word	0x00026684
   12c48:	00028ac9 	.word	0x00028ac9
   12c4c:	00028ab6 	.word	0x00028ab6
   12c50:	00028aeb 	.word	0x00028aeb
   12c54:	20027c50 	.word	0x20027c50
   12c58:	00012c65 	.word	0x00012c65
   12c5c:	200203ec 	.word	0x200203ec
   12c60:	00028b08 	.word	0x00028b08

00012c64 <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   12c64:	2304      	movs	r3, #4
   12c66:	f04f 0200 	mov.w	r2, #0
{
   12c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   12c6e:	f363 0202 	bfi	r2, r3, #0, #3
   12c72:	499d      	ldr	r1, [pc, #628]	; (12ee8 <socket_thread_fn+0x284>)
   12c74:	4b9d      	ldr	r3, [pc, #628]	; (12eec <socket_thread_fn+0x288>)
   12c76:	f36f 02c5 	bfc	r2, #3, #3
   12c7a:	1a5b      	subs	r3, r3, r1
   12c7c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
{
   12c80:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   12c82:	f363 128f 	bfi	r2, r3, #6, #10
   12c86:	499a      	ldr	r1, [pc, #616]	; (12ef0 <socket_thread_fn+0x28c>)
   12c88:	489a      	ldr	r0, [pc, #616]	; (12ef4 <socket_thread_fn+0x290>)
   12c8a:	9300      	str	r3, [sp, #0]
   12c8c:	f011 f970 	bl	23f70 <log_1>
		ret.code  = 0;
   12c90:	2400      	movs	r4, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   12c92:	f8df b284 	ldr.w	fp, [pc, #644]	; 12f18 <socket_thread_fn+0x2b4>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   12c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12c9a:	a903      	add	r1, sp, #12
   12c9c:	4896      	ldr	r0, [pc, #600]	; (12ef8 <socket_thread_fn+0x294>)
   12c9e:	f00f fa11 	bl	220c4 <k_mem_slab_alloc>
		item->callback = NULL;
   12ca2:	9903      	ldr	r1, [sp, #12]
   12ca4:	f8db 3000 	ldr.w	r3, [fp]
   12ca8:	4894      	ldr	r0, [pc, #592]	; (12efc <socket_thread_fn+0x298>)
   12caa:	f8c1 4a98 	str.w	r4, [r1, #2712]	; 0xa98
   12cae:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   12cb0:	310c      	adds	r1, #12
		ret.code  = 0;
   12cb2:	9404      	str	r4, [sp, #16]
		ret.state = AT_CMD_OK;
   12cb4:	f88d 4014 	strb.w	r4, [sp, #20]
   12cb8:	4623      	mov	r3, r4
   12cba:	f640 228c 	movw	r2, #2700	; 0xa8c
   12cbe:	6800      	ldr	r0, [r0, #0]
   12cc0:	47a8      	blx	r5
		if (bytes_read < 0) {
   12cc2:	1e01      	subs	r1, r0, #0
   12cc4:	da5e      	bge.n	12d84 <socket_thread_fn+0x120>
			LOG_ERR("AT socket recv failed with err %d",
   12cc6:	2501      	movs	r5, #1
   12cc8:	9b00      	ldr	r3, [sp, #0]
   12cca:	f365 0a02 	bfi	sl, r5, #0, #3
   12cce:	f364 0ac5 	bfi	sl, r4, #3, #3
   12cd2:	f363 1a8f 	bfi	sl, r3, #6, #10
   12cd6:	4652      	mov	r2, sl
   12cd8:	4889      	ldr	r0, [pc, #548]	; (12f00 <socket_thread_fn+0x29c>)
   12cda:	f011 f949 	bl	23f70 <log_1>
	return socket_ops->close(sock);
   12cde:	f8db 3000 	ldr.w	r3, [fp]
   12ce2:	4a86      	ldr	r2, [pc, #536]	; (12efc <socket_thread_fn+0x298>)
   12ce4:	685b      	ldr	r3, [r3, #4]
   12ce6:	6810      	ldr	r0, [r2, #0]
   12ce8:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   12cea:	2800      	cmp	r0, #0
   12cec:	d130      	bne.n	12d50 <socket_thread_fn+0xec>
			    (open_socket() == 0)) {
   12cee:	f7ff fecb 	bl	12a88 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   12cf2:	bb68      	cbnz	r0, 12d50 <socket_thread_fn+0xec>
				LOG_INF("AT socket recovered");
   12cf4:	2303      	movs	r3, #3
   12cf6:	f363 0602 	bfi	r6, r3, #0, #3
   12cfa:	9b00      	ldr	r3, [sp, #0]
   12cfc:	f360 06c5 	bfi	r6, r0, #3, #3
   12d00:	f363 168f 	bfi	r6, r3, #6, #10
   12d04:	4631      	mov	r1, r6
   12d06:	487f      	ldr	r0, [pc, #508]	; (12f04 <socket_thread_fn+0x2a0>)
   12d08:	f011 f925 	bl	23f56 <log_0>
				ret.state = AT_CMD_ERROR;
   12d0c:	f88d 5014 	strb.w	r5, [sp, #20]
   12d10:	f00f f850 	bl	21db4 <z_impl_z_errno>
				ret.code  = -errno;
   12d14:	6803      	ldr	r3, [r0, #0]
   12d16:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   12d18:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   12d1a:	9903      	ldr	r1, [sp, #12]
   12d1c:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   12d20:	2b00      	cmp	r3, #0
   12d22:	f040 80bd 	bne.w	12ea0 <socket_thread_fn+0x23c>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   12d26:	a903      	add	r1, sp, #12
   12d28:	4873      	ldr	r0, [pc, #460]	; (12ef8 <socket_thread_fn+0x294>)
   12d2a:	f00f f9f9 	bl	22120 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   12d2e:	4b76      	ldr	r3, [pc, #472]	; (12f08 <socket_thread_fn+0x2a4>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   12d30:	689b      	ldr	r3, [r3, #8]
   12d32:	2b00      	cmp	r3, #0
   12d34:	d1ac      	bne.n	12c90 <socket_thread_fn+0x2c>
   12d36:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12d3a:	2a04      	cmp	r2, #4
   12d3c:	d0a8      	beq.n	12c90 <socket_thread_fn+0x2c>
			current_cmd_handler = NULL;
   12d3e:	4a73      	ldr	r2, [pc, #460]	; (12f0c <socket_thread_fn+0x2a8>)
   12d40:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(q, data, timeout);
   12d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d46:	a904      	add	r1, sp, #16
   12d48:	4871      	ldr	r0, [pc, #452]	; (12f10 <socket_thread_fn+0x2ac>)
   12d4a:	f00f fab3 	bl	222b4 <z_impl_k_msgq_put>
   12d4e:	e79f      	b.n	12c90 <socket_thread_fn+0x2c>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   12d50:	2301      	movs	r3, #1
   12d52:	f04f 0400 	mov.w	r4, #0
   12d56:	f363 0402 	bfi	r4, r3, #0, #3
   12d5a:	9b00      	ldr	r3, [sp, #0]
   12d5c:	f36f 04c5 	bfc	r4, #3, #3
   12d60:	f363 148f 	bfi	r4, r3, #6, #10
   12d64:	f00f f826 	bl	21db4 <z_impl_z_errno>
   12d68:	4622      	mov	r2, r4
   12d6a:	6801      	ldr	r1, [r0, #0]
   12d6c:	4869      	ldr	r0, [pc, #420]	; (12f14 <socket_thread_fn+0x2b0>)
   12d6e:	f011 f8ff 	bl	23f70 <log_1>
   12d72:	4b69      	ldr	r3, [pc, #420]	; (12f18 <socket_thread_fn+0x2b4>)
   12d74:	4a61      	ldr	r2, [pc, #388]	; (12efc <socket_thread_fn+0x298>)
   12d76:	681b      	ldr	r3, [r3, #0]
   12d78:	6810      	ldr	r0, [r2, #0]
   12d7a:	685b      	ldr	r3, [r3, #4]
   12d7c:	4798      	blx	r3
}
   12d7e:	b007      	add	sp, #28
   12d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   12d84:	f640 238c 	movw	r3, #2700	; 0xa8c
   12d88:	4299      	cmp	r1, r3
   12d8a:	d003      	beq.n	12d94 <socket_thread_fn+0x130>
			   item->data[bytes_read - 1] != '\0') {
   12d8c:	9803      	ldr	r0, [sp, #12]
   12d8e:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   12d90:	7acd      	ldrb	r5, [r1, #11]
   12d92:	b175      	cbz	r5, 12db2 <socket_thread_fn+0x14e>
			LOG_ERR("AT message to large for reception buffer or "
   12d94:	2301      	movs	r3, #1
   12d96:	f363 0702 	bfi	r7, r3, #0, #3
   12d9a:	9b00      	ldr	r3, [sp, #0]
   12d9c:	f36f 07c5 	bfc	r7, #3, #3
   12da0:	f363 178f 	bfi	r7, r3, #6, #10
   12da4:	4639      	mov	r1, r7
   12da6:	485d      	ldr	r0, [pc, #372]	; (12f1c <socket_thread_fn+0x2b8>)
   12da8:	f011 f8d5 	bl	23f56 <log_0>
			ret.code  = -ENOBUFS;
   12dac:	f06f 0336 	mvn.w	r3, #54	; 0x36
   12db0:	e7b2      	b.n	12d18 <socket_thread_fn+0xb4>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   12db2:	f04f 0b04 	mov.w	fp, #4
   12db6:	9b00      	ldr	r3, [sp, #0]
   12db8:	f36b 0802 	bfi	r8, fp, #0, #3
   12dbc:	f365 08c5 	bfi	r8, r5, #3, #3
   12dc0:	300c      	adds	r0, #12
   12dc2:	f363 188f 	bfi	r8, r3, #6, #10
   12dc6:	f7fc fb25 	bl	f414 <log_strdup>
   12dca:	4643      	mov	r3, r8
   12dcc:	4602      	mov	r2, r0
   12dce:	4948      	ldr	r1, [pc, #288]	; (12ef0 <socket_thread_fn+0x28c>)
   12dd0:	4853      	ldr	r0, [pc, #332]	; (12f20 <socket_thread_fn+0x2bc>)
   12dd2:	f011 f8e1 	bl	23f98 <log_2>
		payload_len = get_return_code(item->data, &ret);
   12dd6:	9b03      	ldr	r3, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12dd8:	4952      	ldr	r1, [pc, #328]	; (12f24 <socket_thread_fn+0x2c0>)
		payload_len = get_return_code(item->data, &ret);
   12dda:	f103 040c 	add.w	r4, r3, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12dde:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   12de0:	f88d b014 	strb.w	fp, [sp, #20]
		payload_len = get_return_code(item->data, &ret);
   12de4:	9301      	str	r3, [sp, #4]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   12de6:	f011 fd7c 	bl	248e2 <strstr>
		if (tmpstr) {
   12dea:	4683      	mov	fp, r0
   12dec:	b1f8      	cbz	r0, 12e2e <socket_thread_fn+0x1ca>
			ret->state = AT_CMD_OK;
   12dee:	f88d 5014 	strb.w	r5, [sp, #20]
			ret->code  = 0;
   12df2:	9504      	str	r5, [sp, #16]
		buf[new_len++] = '\0';
   12df4:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   12df6:	ebab 0204 	sub.w	r2, fp, r4
		buf[new_len++] = '\0';
   12dfa:	3201      	adds	r2, #1
   12dfc:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   12e00:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12e04:	2b04      	cmp	r3, #4
   12e06:	d066      	beq.n	12ed6 <socket_thread_fn+0x272>
			if ((response_buf_len > 0) &&
   12e08:	4b47      	ldr	r3, [pc, #284]	; (12f28 <socket_thread_fn+0x2c4>)
   12e0a:	681b      	ldr	r3, [r3, #0]
   12e0c:	2b00      	cmp	r3, #0
   12e0e:	d042      	beq.n	12e96 <socket_thread_fn+0x232>
			    (response_buf != NULL)) {
   12e10:	4d46      	ldr	r5, [pc, #280]	; (12f2c <socket_thread_fn+0x2c8>)
   12e12:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   12e14:	2800      	cmp	r0, #0
   12e16:	d03e      	beq.n	12e96 <socket_thread_fn+0x232>
				if (response_buf_len > payload_len) {
   12e18:	4293      	cmp	r3, r2
   12e1a:	d92c      	bls.n	12e76 <socket_thread_fn+0x212>
					memcpy(response_buf, item->data,
   12e1c:	9903      	ldr	r1, [sp, #12]
   12e1e:	310c      	adds	r1, #12
   12e20:	f011 fdde 	bl	249e0 <memcpy>
				response_buf_len = 0;
   12e24:	2300      	movs	r3, #0
   12e26:	4a40      	ldr	r2, [pc, #256]	; (12f28 <socket_thread_fn+0x2c4>)
				response_buf     = NULL;
   12e28:	602b      	str	r3, [r5, #0]
				response_buf_len = 0;
   12e2a:	6013      	str	r3, [r2, #0]
				goto next;
   12e2c:	e775      	b.n	12d1a <socket_thread_fn+0xb6>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   12e2e:	4940      	ldr	r1, [pc, #256]	; (12f30 <socket_thread_fn+0x2cc>)
   12e30:	4620      	mov	r0, r4
   12e32:	f011 fd56 	bl	248e2 <strstr>
		if (tmpstr) {
   12e36:	4683      	mov	fp, r0
   12e38:	b140      	cbz	r0, 12e4c <socket_thread_fn+0x1e8>
			ret->state = AT_CMD_ERROR_CMS;
   12e3a:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12e3c:	9801      	ldr	r0, [sp, #4]
			ret->state = AT_CMD_ERROR_CME;
   12e3e:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12e42:	3017      	adds	r0, #23
   12e44:	f011 fc3b 	bl	246be <atoi>
   12e48:	9004      	str	r0, [sp, #16]
   12e4a:	e7d3      	b.n	12df4 <socket_thread_fn+0x190>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   12e4c:	4939      	ldr	r1, [pc, #228]	; (12f34 <socket_thread_fn+0x2d0>)
   12e4e:	4620      	mov	r0, r4
   12e50:	f011 fd47 	bl	248e2 <strstr>
		if (tmpstr) {
   12e54:	4683      	mov	fp, r0
   12e56:	b108      	cbz	r0, 12e5c <socket_thread_fn+0x1f8>
			ret->state = AT_CMD_ERROR_CME;
   12e58:	2303      	movs	r3, #3
   12e5a:	e7ef      	b.n	12e3c <socket_thread_fn+0x1d8>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   12e5c:	4936      	ldr	r1, [pc, #216]	; (12f38 <socket_thread_fn+0x2d4>)
   12e5e:	4620      	mov	r0, r4
   12e60:	f011 fd3f 	bl	248e2 <strstr>
		if (tmpstr) {
   12e64:	4683      	mov	fp, r0
   12e66:	b388      	cbz	r0, 12ecc <socket_thread_fn+0x268>
			ret->state = AT_CMD_ERROR;
   12e68:	2301      	movs	r3, #1
   12e6a:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   12e6e:	f06f 0307 	mvn.w	r3, #7
   12e72:	9304      	str	r3, [sp, #16]
   12e74:	e7be      	b.n	12df4 <socket_thread_fn+0x190>
					LOG_ERR("Response buffer not large "
   12e76:	2301      	movs	r3, #1
   12e78:	f363 0902 	bfi	r9, r3, #0, #3
   12e7c:	9b00      	ldr	r3, [sp, #0]
   12e7e:	f36f 09c5 	bfc	r9, #3, #3
   12e82:	f363 198f 	bfi	r9, r3, #6, #10
   12e86:	4649      	mov	r1, r9
   12e88:	482c      	ldr	r0, [pc, #176]	; (12f3c <socket_thread_fn+0x2d8>)
   12e8a:	f011 f864 	bl	23f56 <log_0>
					ret.code  = -EMSGSIZE;
   12e8e:	f06f 0323 	mvn.w	r3, #35	; 0x23
   12e92:	9304      	str	r3, [sp, #16]
   12e94:	e7c6      	b.n	12e24 <socket_thread_fn+0x1c0>
		if (payload_len == 0) {
   12e96:	2a00      	cmp	r2, #0
   12e98:	f43f af3f 	beq.w	12d1a <socket_thread_fn+0xb6>
			item->callback = current_cmd_handler;
   12e9c:	4b1b      	ldr	r3, [pc, #108]	; (12f0c <socket_thread_fn+0x2a8>)
   12e9e:	e01e      	b.n	12ede <socket_thread_fn+0x27a>
   12ea0:	4b27      	ldr	r3, [pc, #156]	; (12f40 <socket_thread_fn+0x2dc>)
   12ea2:	2200      	movs	r2, #0
   12ea4:	604b      	str	r3, [r1, #4]
   12ea6:	460b      	mov	r3, r1
   12ea8:	600a      	str	r2, [r1, #0]
   12eaa:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12eae:	e8d3 2fef 	ldaex	r2, [r3]
   12eb2:	f042 0001 	orr.w	r0, r2, #1
   12eb6:	e8c3 0fe4 	stlex	r4, r0, [r3]
   12eba:	2c00      	cmp	r4, #0
   12ebc:	d1f7      	bne.n	12eae <socket_thread_fn+0x24a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   12ebe:	07d3      	lsls	r3, r2, #31
   12ec0:	f53f af35 	bmi.w	12d2e <socket_thread_fn+0xca>
		k_queue_append(&work_q->queue, work);
   12ec4:	481f      	ldr	r0, [pc, #124]	; (12f44 <socket_thread_fn+0x2e0>)
   12ec6:	f012 fef4 	bl	25cb2 <k_queue_append>
   12eca:	e730      	b.n	12d2e <socket_thread_fn+0xca>
		new_len = strlen(buf) + 1;
   12ecc:	4620      	mov	r0, r4
   12ece:	f011 fd53 	bl	24978 <strlen>
   12ed2:	1c42      	adds	r2, r0, #1
   12ed4:	e794      	b.n	12e00 <socket_thread_fn+0x19c>
		if (payload_len == 0) {
   12ed6:	2a00      	cmp	r2, #0
   12ed8:	f43f af1f 	beq.w	12d1a <socket_thread_fn+0xb6>
			item->callback = notification_handler;
   12edc:	4b1a      	ldr	r3, [pc, #104]	; (12f48 <socket_thread_fn+0x2e4>)
			item->callback = current_cmd_handler;
   12ede:	681a      	ldr	r2, [r3, #0]
   12ee0:	9b03      	ldr	r3, [sp, #12]
   12ee2:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   12ee6:	e718      	b.n	12d1a <socket_thread_fn+0xb6>
   12ee8:	00026684 	.word	0x00026684
   12eec:	0002668c 	.word	0x0002668c
   12ef0:	00028a7c 	.word	0x00028a7c
   12ef4:	00028c06 	.word	0x00028c06
   12ef8:	2002d508 	.word	0x2002d508
   12efc:	200203d8 	.word	0x200203d8
   12f00:	00028c23 	.word	0x00028c23
   12f04:	00028c45 	.word	0x00028c45
   12f08:	2002d558 	.word	0x2002d558
   12f0c:	200203dc 	.word	0x200203dc
   12f10:	2002d598 	.word	0x2002d598
   12f14:	00028c59 	.word	0x00028c59
   12f18:	20020314 	.word	0x20020314
   12f1c:	00028c90 	.word	0x00028c90
   12f20:	00028cda 	.word	0x00028cda
   12f24:	00028046 	.word	0x00028046
   12f28:	200203e8 	.word	0x200203e8
   12f2c:	200203e4 	.word	0x200203e4
   12f30:	00028cec 	.word	0x00028cec
   12f34:	00028cf8 	.word	0x00028cf8
   12f38:	00028d04 	.word	0x00028d04
   12f3c:	00028d0a 	.word	0x00028d0a
   12f40:	00012a69 	.word	0x00012a69
   12f44:	20025d3c 	.word	0x20025d3c
   12f48:	200203e0 	.word	0x200203e0

00012f4c <at_cmd_write>:
{
   12f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f50:	4605      	mov	r5, r0
   12f52:	4688      	mov	r8, r1
   12f54:	4617      	mov	r7, r2
   12f56:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   12f58:	4c0a      	ldr	r4, [pc, #40]	; (12f84 <at_cmd_write+0x38>)
   12f5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12f5e:	4620      	mov	r0, r4
   12f60:	f00f fe28 	bl	22bb4 <z_impl_k_sem_take>
	response_buf     = buf;
   12f64:	4b08      	ldr	r3, [pc, #32]	; (12f88 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   12f66:	4631      	mov	r1, r6
	response_buf     = buf;
   12f68:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   12f6c:	4b07      	ldr	r3, [pc, #28]	; (12f8c <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   12f6e:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   12f70:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   12f72:	f7ff fda1 	bl	12ab8 <at_write>
   12f76:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   12f78:	4620      	mov	r0, r4
   12f7a:	f00f fdef 	bl	22b5c <z_impl_k_sem_give>
}
   12f7e:	4628      	mov	r0, r5
   12f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f84:	2002d558 	.word	0x2002d558
   12f88:	200203e4 	.word	0x200203e4
   12f8c:	200203e8 	.word	0x200203e8

00012f90 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   12f90:	2204      	movs	r2, #4
   12f92:	f04f 0300 	mov.w	r3, #0
{
   12f96:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   12f98:	f362 0302 	bfi	r3, r2, #0, #3
   12f9c:	4c15      	ldr	r4, [pc, #84]	; (12ff4 <at_cmd_set_notification_handler+0x64>)
   12f9e:	4a16      	ldr	r2, [pc, #88]	; (12ff8 <at_cmd_set_notification_handler+0x68>)
   12fa0:	f36f 03c5 	bfc	r3, #3, #3
   12fa4:	1aa4      	subs	r4, r4, r2
   12fa6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (notification_handler != NULL && handler != notification_handler) {
   12faa:	4d14      	ldr	r5, [pc, #80]	; (12ffc <at_cmd_set_notification_handler+0x6c>)
	LOG_DBG("Setting notification handler to %p", handler);
   12fac:	4602      	mov	r2, r0
   12fae:	4914      	ldr	r1, [pc, #80]	; (13000 <at_cmd_set_notification_handler+0x70>)
{
   12fb0:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   12fb2:	f364 138f 	bfi	r3, r4, #6, #10
   12fb6:	4813      	ldr	r0, [pc, #76]	; (13004 <at_cmd_set_notification_handler+0x74>)
   12fb8:	f010 ffee 	bl	23f98 <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   12fbc:	6829      	ldr	r1, [r5, #0]
   12fbe:	b169      	cbz	r1, 12fdc <at_cmd_set_notification_handler+0x4c>
   12fc0:	428e      	cmp	r6, r1
   12fc2:	d00b      	beq.n	12fdc <at_cmd_set_notification_handler+0x4c>
		LOG_WRN("Forgetting prior notification handler %p",
   12fc4:	f04f 0200 	mov.w	r2, #0
   12fc8:	2302      	movs	r3, #2
   12fca:	f363 0202 	bfi	r2, r3, #0, #3
   12fce:	f36f 02c5 	bfc	r2, #3, #3
   12fd2:	f364 128f 	bfi	r2, r4, #6, #10
   12fd6:	480c      	ldr	r0, [pc, #48]	; (13008 <at_cmd_set_notification_handler+0x78>)
   12fd8:	f010 ffca 	bl	23f70 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   12fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12fe0:	480a      	ldr	r0, [pc, #40]	; (1300c <at_cmd_set_notification_handler+0x7c>)
   12fe2:	f00f fde7 	bl	22bb4 <z_impl_k_sem_take>
	notification_handler = handler;
   12fe6:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   12fe8:	4808      	ldr	r0, [pc, #32]	; (1300c <at_cmd_set_notification_handler+0x7c>)
}
   12fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12fee:	f00f bdb5 	b.w	22b5c <z_impl_k_sem_give>
   12ff2:	bf00      	nop
   12ff4:	0002668c 	.word	0x0002668c
   12ff8:	00026684 	.word	0x00026684
   12ffc:	200203e0 	.word	0x200203e0
   13000:	00028a96 	.word	0x00028a96
   13004:	00028b37 	.word	0x00028b37
   13008:	00028b5e 	.word	0x00028b5e
   1300c:	2002d558 	.word	0x2002d558

00013010 <ip_client_event_handler>:
   13010:	1b08f850 	.word	0x1b08f850
   13014:	f0060c09 	.word	0xf0060c09
   13018:	bf00bb3d 	.word	0xbf00bb3d

0001301c <rpc_ip_client_init>:
   1301c:	f00b4801 	.word	0xf00b4801
   13020:	bf00ba9d 	.word	0xbf00ba9d
   13024:	00026918 	.word	0x00026918

00013028 <rpc_ip_client_request_alloc>:
   13028:	b5102300 	.word	0xb5102300
   1302c:	9301b082 	.word	0x9301b082
   13030:	4604b158 	.word	0x4604b158
   13034:	2004aa01 	.word	0x2004aa01
   13038:	fcc8f00b 	.word	0xfcc8f00b
   1303c:	9b01b918 	.word	0x9b01b918
   13040:	3308b10b 	.word	0x3308b10b
   13044:	b0026023 	.word	0xb0026023
   13048:	2007bd10 	.word	0x2007bd10
   1304c:	bd10b002 	.word	0xbd10b002

00013050 <rpc_ip_client_request_send>:
   13050:	4370f401 	.word	0x4370f401
   13054:	4fe0f5b3 	.word	0x4fe0f5b3
   13058:	b160d10b 	.word	0xb160d10b
   1305c:	f8304603 	.word	0xf8304603
   13060:	20042c08 	.word	0x20042c08
   13064:	4101ea42 	.word	0x4101ea42
   13068:	1d08f843 	.word	0x1d08f843
   1306c:	f00b4619 	.word	0xf00b4619
   13070:	200fbc95 	.word	0x200fbc95
   13074:	20074770 	.word	0x20074770
   13078:	bf004770 	.word	0xbf004770

0001307c <rpc_ip_client_message_free>:
   1307c:	f1a0b120 	.word	0xf1a0b120
   13080:	20040108 	.word	0x20040108
   13084:	bcd4f00b 	.word	0xbcd4f00b
   13088:	47702007 	.word	0x47702007

0001308c <rpc_ip_client_data_free>:
   1308c:	4601b118 	.word	0x4601b118
   13090:	f00b2004 	.word	0xf00b2004
   13094:	2007bddf 	.word	0x2007bddf
   13098:	bf004770 	.word	0xbf004770

0001309c <symbol_0001c77>:
   1309c:	4603b430 	.word	0x4603b430
   130a0:	f5b26800 	.word	0xf5b26800
   130a4:	eba03f80 	.word	0xeba03f80
   130a8:	d2140101 	.word	0xd2140101
   130ac:	dd512902 	.word	0xdd512902
   130b0:	60191e41 	.word	0x60191e41
   130b4:	2c01f800 	.word	0x2c01f800
   130b8:	24826819 	.word	0x24826819
   130bc:	60181e48 	.word	0x60181e48
   130c0:	0a122003 	.word	0x0a122003
   130c4:	2c01f801 	.word	0x2c01f801
   130c8:	1e51681a 	.word	0x1e51681a
   130cc:	f8026019 	.word	0xf8026019
   130d0:	bc304c01 	.word	0xbc304c01
   130d4:	f1b24770 	.word	0xf1b24770
   130d8:	d21a7f80 	.word	0xd21a7f80
   130dc:	dd392903 	.word	0xdd392903
   130e0:	1e412483 	.word	0x1e412483
   130e4:	f8006019 	.word	0xf8006019
   130e8:	68192c01 	.word	0x68192c01
   130ec:	1e4d0a10 	.word	0x1e4d0a10
   130f0:	f801601d 	.word	0xf801601d
   130f4:	68190c01 	.word	0x68190c01
   130f8:	1e480c12 	.word	0x1e480c12
   130fc:	f8016018 	.word	0xf8016018
   13100:	681a2c01 	.word	0x681a2c01
   13104:	1e512004 	.word	0x1e512004
   13108:	f8026019 	.word	0xf8026019
   1310c:	bc304c01 	.word	0xbc304c01
   13110:	29044770 	.word	0x29044770
   13114:	2484dd1e 	.word	0x2484dd1e
   13118:	60191e41 	.word	0x60191e41
   1311c:	2c01f800 	.word	0x2c01f800
   13120:	0a106819 	.word	0x0a106819
   13124:	601d1e4d 	.word	0x601d1e4d
   13128:	0c01f801 	.word	0x0c01f801
   1312c:	0c106819 	.word	0x0c106819
   13130:	601d1e4d 	.word	0x601d1e4d
   13134:	0c01f801 	.word	0x0c01f801
   13138:	0e126819 	.word	0x0e126819
   1313c:	60181e48 	.word	0x60181e48
   13140:	2c01f801 	.word	0x2c01f801
   13144:	2005681a 	.word	0x2005681a
   13148:	60191e51 	.word	0x60191e51
   1314c:	4c01f802 	.word	0x4c01f802
   13150:	4770bc30 	.word	0x4770bc30
   13154:	006bf06f 	.word	0x006bf06f
   13158:	bf00e7bb 	.word	0xbf00e7bb

0001315c <symbol_000646e>:
   1315c:	6804b430 	.word	0x6804b430
   13160:	46032a7f 	.word	0x46032a7f
   13164:	0101eba4 	.word	0x0101eba4
   13168:	2900d808 	.word	0x2900d808
   1316c:	1e61dd6c 	.word	0x1e61dd6c
   13170:	20016001 	.word	0x20016001
   13174:	2c01f804 	.word	0x2c01f804
   13178:	4770bc30 	.word	0x4770bc30
   1317c:	d80e2aff 	.word	0xd80e2aff
   13180:	dd612901 	.word	0xdd612901
   13184:	1e602181 	.word	0x1e602181
   13188:	f8046018 	.word	0xf8046018
   1318c:	681a2c01 	.word	0x681a2c01
   13190:	1e542002 	.word	0x1e542002
   13194:	f802601c 	.word	0xf802601c
   13198:	bc301c01 	.word	0xbc301c01
   1319c:	f5b24770 	.word	0xf5b24770
   131a0:	d31c3f80 	.word	0xd31c3f80
   131a4:	7f80f1b2 	.word	0x7f80f1b2
   131a8:	2903d22e 	.word	0x2903d22e
   131ac:	2583dd4c 	.word	0x2583dd4c
   131b0:	60011e61 	.word	0x60011e61
   131b4:	2c01f804 	.word	0x2c01f804
   131b8:	0a106801 	.word	0x0a106801
   131bc:	601c1e4c 	.word	0x601c1e4c
   131c0:	0c01f801 	.word	0x0c01f801
   131c4:	0c126819 	.word	0x0c126819
   131c8:	60181e48 	.word	0x60181e48
   131cc:	2c01f801 	.word	0x2c01f801
   131d0:	2004681a 	.word	0x2004681a
   131d4:	60191e51 	.word	0x60191e51
   131d8:	5c01f802 	.word	0x5c01f802
   131dc:	2902e7cc 	.word	0x2902e7cc
   131e0:	2582dd32 	.word	0x2582dd32
   131e4:	60011e61 	.word	0x60011e61
   131e8:	2c01f804 	.word	0x2c01f804
   131ec:	0a126801 	.word	0x0a126801
   131f0:	60181e48 	.word	0x60181e48
   131f4:	2c01f801 	.word	0x2c01f801
   131f8:	2003681a 	.word	0x2003681a
   131fc:	60191e51 	.word	0x60191e51
   13200:	5c01f802 	.word	0x5c01f802
   13204:	4770bc30 	.word	0x4770bc30
   13208:	dd1d2904 	.word	0xdd1d2904
   1320c:	1e612584 	.word	0x1e612584
   13210:	f8046001 	.word	0xf8046001
   13214:	68012c01 	.word	0x68012c01
   13218:	1e4c0a10 	.word	0x1e4c0a10
   1321c:	f801601c 	.word	0xf801601c
   13220:	68190c01 	.word	0x68190c01
   13224:	1e4c0c10 	.word	0x1e4c0c10
   13228:	f801601c 	.word	0xf801601c
   1322c:	68190c01 	.word	0x68190c01
   13230:	1e480e12 	.word	0x1e480e12
   13234:	f8016018 	.word	0xf8016018
   13238:	681a2c01 	.word	0x681a2c01
   1323c:	1e512005 	.word	0x1e512005
   13240:	f8026019 	.word	0xf8026019
   13244:	e7975c01 	.word	0xe7975c01
   13248:	006bf06f 	.word	0x006bf06f
   1324c:	bf00e794 	.word	0xbf00e794

00013250 <symbol_00036c0>:
   13250:	1a596803 	.word	0x1a596803
   13254:	dd052900 	.word	0xdd052900
   13258:	60011e59 	.word	0x60011e59
   1325c:	f8032001 	.word	0xf8032001
   13260:	47702c01 	.word	0x47702c01
   13264:	006bf06f 	.word	0x006bf06f
   13268:	bf004770 	.word	0xbf004770

0001326c <symbol_0008475>:
   1326c:	6805b5f8 	.word	0x6805b5f8
   13270:	d83f42a9 	.word	0xd83f42a9
   13274:	1a69460f 	.word	0x1a69460f
   13278:	d83b428b 	.word	0xd83b428b
   1327c:	461c4606 	.word	0x461c4606
   13280:	46111ae8 	.word	0x46111ae8
   13284:	461a6030 	.word	0x461a6030
   13288:	fbaaf011 	.word	0xfbaaf011
   1328c:	46202c00 	.word	0x46202c00
   13290:	2c7fdb15 	.word	0x2c7fdb15
   13294:	6833d814 	.word	0x6833d814
   13298:	2a001bda 	.word	0x2a001bda
   1329c:	2001dd2a 	.word	0x2001dd2a
   132a0:	60321e5a 	.word	0x60321e5a
   132a4:	4c01f803 	.word	0x4c01f803
   132a8:	34016833 	.word	0x34016833
   132ac:	2f001bdf 	.word	0x2f001bdf
   132b0:	2206dd20 	.word	0x2206dd20
   132b4:	60311e59 	.word	0x60311e59
   132b8:	f8034420 	.word	0xf8034420
   132bc:	bdf82c01 	.word	0xbdf82c01
   132c0:	d80f2cff 	.word	0xd80f2cff
   132c4:	1bda6833 	.word	0x1bda6833
   132c8:	dd132a01 	.word	0xdd132a01
   132cc:	1e592281 	.word	0x1e592281
   132d0:	f8036031 	.word	0xf8036031
   132d4:	68334c01 	.word	0x68334c01
   132d8:	1e592002 	.word	0x1e592002
   132dc:	f8036031 	.word	0xf8036031
   132e0:	e7e12c01 	.word	0xe7e12c01
   132e4:	46394622 	.word	0x46394622
   132e8:	f7ff4630 	.word	0xf7ff4630
   132ec:	2800fed7 	.word	0x2800fed7
   132f0:	bdf8dada 	.word	0xbdf8dada
   132f4:	006bf06f 	.word	0x006bf06f
   132f8:	bf00bdf8 	.word	0xbf00bdf8

000132fc <symbol_0002662>:
   132fc:	41f0e92d 	.word	0x41f0e92d
   13300:	8018f8dd 	.word	0x8018f8dd
   13304:	f1b86805 	.word	0xf1b86805
   13308:	d1130f00 	.word	0xd1130f00
   1330c:	2c001a6c 	.word	0x2c001a6c
   13310:	8087f340 	.word	0x8087f340
   13314:	60041e6c 	.word	0x60041e6c
   13318:	8c01f805 	.word	0x8c01f805
   1331c:	1a656804 	.word	0x1a656804
   13320:	dd7e2d00 	.word	0xdd7e2d00
   13324:	f04f2505 	.word	0xf04f2505
   13328:	1e660802 	.word	0x1e660802
   1332c:	f8046006 	.word	0xf8046006
   13330:	68055c01 	.word	0x68055c01
   13334:	d87442a9 	.word	0xd87442a9
   13338:	42a31a6c 	.word	0x42a31a6c
   1333c:	4606d871 	.word	0x4606d871
   13340:	1ae8461c 	.word	0x1ae8461c
   13344:	6030460f 	.word	0x6030460f
   13348:	461a4611 	.word	0x461a4611
   1334c:	fb48f011 	.word	0xfb48f011
   13350:	46202c00 	.word	0x46202c00
   13354:	2c7fdb2f 	.word	0x2c7fdb2f
   13358:	6833d841 	.word	0x6833d841
   1335c:	2a001bda 	.word	0x2a001bda
   13360:	2001dd5f 	.word	0x2001dd5f
   13364:	60321e5a 	.word	0x60321e5a
   13368:	4c01f803 	.word	0x4c01f803
   1336c:	34016833 	.word	0x34016833
   13370:	2a001bda 	.word	0x2a001bda
   13374:	2206dd55 	.word	0x2206dd55
   13378:	1e594404 	.word	0x1e594404
   1337c:	60312c00 	.word	0x60312c00
   13380:	f8034620 	.word	0xf8034620
   13384:	db162c01 	.word	0xdb162c01
   13388:	2c7f4444 	.word	0x2c7f4444
   1338c:	6833d815 	.word	0x6833d815
   13390:	2a001bda 	.word	0x2a001bda
   13394:	2001dd45 	.word	0x2001dd45
   13398:	60321e5a 	.word	0x60321e5a
   1339c:	4c01f803 	.word	0x4c01f803
   133a0:	34016833 	.word	0x34016833
   133a4:	2f001bdf 	.word	0x2f001bdf
   133a8:	2230dd3b 	.word	0x2230dd3b
   133ac:	60311e59 	.word	0x60311e59
   133b0:	f8034420 	.word	0xf8034420
   133b4:	e8bd2c01 	.word	0xe8bd2c01
   133b8:	2cff81f0 	.word	0x2cff81f0
   133bc:	6833d821 	.word	0x6833d821
   133c0:	2a011bda 	.word	0x2a011bda
   133c4:	2281dd2d 	.word	0x2281dd2d
   133c8:	60311e59 	.word	0x60311e59
   133cc:	4c01f803 	.word	0x4c01f803
   133d0:	20026833 	.word	0x20026833
   133d4:	60311e59 	.word	0x60311e59
   133d8:	2c01f803 	.word	0x2c01f803
   133dc:	2cffe7e0 	.word	0x2cffe7e0
   133e0:	6833d817 	.word	0x6833d817
   133e4:	2a011bda 	.word	0x2a011bda
   133e8:	2281dd1b 	.word	0x2281dd1b
   133ec:	60311e59 	.word	0x60311e59
   133f0:	4c01f803 	.word	0x4c01f803
   133f4:	20026833 	.word	0x20026833
   133f8:	60311e59 	.word	0x60311e59
   133fc:	2c01f803 	.word	0x2c01f803
   13400:	4622e7b4 	.word	0x4622e7b4
   13404:	46304639 	.word	0x46304639
   13408:	fe48f7ff 	.word	0xfe48f7ff
   1340c:	dbd22800 	.word	0xdbd22800
   13410:	4622e7c6 	.word	0x4622e7c6
   13414:	46304639 	.word	0x46304639
   13418:	fe40f7ff 	.word	0xfe40f7ff
   1341c:	daa52800 	.word	0xdaa52800
   13420:	f06fe7c9 	.word	0xf06fe7c9
   13424:	e7c6006b 	.word	0xe7c6006b

00013428 <symbol_0005bf5>:
   13428:	4ff0e92d 	.word	0x4ff0e92d
   1342c:	b0d72400 	.word	0xb0d72400
   13430:	73abf50d 	.word	0x73abf50d
   13434:	46914688 	.word	0x46914688
   13438:	4306e9cd 	.word	0x4306e9cd
   1343c:	f0014607 	.word	0xf0014607
   13440:	2802f95d 	.word	0x2802f95d
   13444:	2385d159 	.word	0x2385d159
   13448:	ae0b6878 	.word	0xae0b6878
   1344c:	46229301 	.word	0x46229301
   13450:	0188f100 	.word	0x0188f100
   13454:	ab0a9600 	.word	0xab0a9600
   13458:	f004940a 	.word	0xf004940a
   1345c:	ad2dfbc5 	.word	0xad2dfbc5
   13460:	b9684604 	.word	0xb9684604
   13464:	42a89807 	.word	0x42a89807
   13468:	9a0ad37f 	.word	0x9a0ad37f
   1346c:	42931b43 	.word	0x42931b43
   13470:	1a83d37b 	.word	0x1a83d37b
   13474:	46314618 	.word	0x46314618
   13478:	f0119307 	.word	0xf0119307
   1347c:	9c0afab1 	.word	0x9c0afab1
   13480:	db312c00 	.word	0xdb312c00
   13484:	1b5a9b07 	.word	0x1b5a9b07
   13488:	dd6e2a00 	.word	0xdd6e2a00
   1348c:	1e5a2100 	.word	0x1e5a2100
   13490:	0a01f104 	.word	0x0a01f104
   13494:	a8079207 	.word	0xa8079207
   13498:	1c01f803 	.word	0x1c01f803
   1349c:	46294652 	.word	0x46294652
   134a0:	fe5cf7ff 	.word	0xfe5cf7ff
   134a4:	db1f1e04 	.word	0xdb1f1e04
   134a8:	46292203 	.word	0x46292203
   134ac:	f7ffa807 	.word	0xf7ffa807
   134b0:	f1b0fecf 	.word	0xf1b0fecf
   134b4:	db1b0b00 	.word	0xdb1b0b00
   134b8:	f0014638 	.word	0xf0014638
   134bc:	aa08f91f 	.word	0xaa08f91f
   134c0:	f00ba909 	.word	0xf00ba909
   134c4:	4603fcd7 	.word	0x4603fcd7
   134c8:	2b00b1c8 	.word	0x2b00b1c8
   134cc:	f1c3db50 	.word	0xf1c3db50
   134d0:	a90602a2 	.word	0xa90602a2
   134d4:	9101e9cd 	.word	0x9101e9cd
   134d8:	8000f8cd 	.word	0x8000f8cd
   134dc:	4925442a 	.word	0x4925442a
   134e0:	f0044825 	.word	0xf0044825
   134e4:	4604ffa1 	.word	0x4604ffa1
   134e8:	b0574620 	.word	0xb0574620
   134ec:	8ff0e8bd 	.word	0x8ff0e8bd
   134f0:	4620465c 	.word	0x4620465c
   134f4:	e8bdb057 	.word	0xe8bdb057
   134f8:	4c208ff0 	.word	0x4c208ff0
   134fc:	9005e7f4 	.word	0x9005e7f4
   13500:	f0014638 	.word	0xf0014638
   13504:	2802f8fb 	.word	0x2802f8fb
   13508:	d01d9b05 	.word	0xd01d9b05
   1350c:	e9dd4618 	.word	0xe9dd4618
   13510:	90003208 	.word	0x90003208
   13514:	a8074629 	.word	0xa8074629
   13518:	fef0f7ff 	.word	0xfef0f7ff
   1351c:	db222800 	.word	0xdb222800
   13520:	44a34454 	.word	0x44a34454
   13524:	465a4483 	.word	0x465a4483
   13528:	a8074629 	.word	0xa8074629
   1352c:	fe16f7ff 	.word	0xfe16f7ff
   13530:	dbd91e04 	.word	0xdbd91e04
   13534:	2230a807 	.word	0x2230a807
   13538:	f7ff4629 	.word	0xf7ff4629
   1353c:	1e03fe89 	.word	0x1e03fe89
   13540:	44a3db16 	.word	0x44a3db16
   13544:	e7c0445b 	.word	0xe7c0445b
   13548:	4632687b 	.word	0x4632687b
   1354c:	a90a7818 	.word	0xa90a7818
   13550:	fcacf00b 	.word	0xfcacf00b
   13554:	6833b928 	.word	0x6833b928
   13558:	46299a0a 	.word	0x46299a0a
   1355c:	f7ffa807 	.word	0xf7ffa807
   13560:	2800fe85 	.word	0x2800fe85
   13564:	4604dad3 	.word	0x4604dad3
   13568:	f06fe7be 	.word	0xf06fe7be
   1356c:	e7bb046b 	.word	0xe7bb046b
   13570:	e7b9461c 	.word	0xe7b9461c
   13574:	00026928 	.word	0x00026928
   13578:	00026944 	.word	0x00026944
   1357c:	ffffc680 	.word	0xffffc680

00013580 <authenticated_atcmd_init>:
   13580:	4c3bb5f0 	.word	0x4c3bb5f0
   13584:	6826b0c7 	.word	0x6826b0c7
   13588:	2701bb16 	.word	0x2701bb16
   1358c:	60274839 	.word	0x60274839
   13590:	f9f2f011 	.word	0xf9f2f011
   13594:	f5c04605 	.word	0xf5c04605
   13598:	46317380 	.word	0x46317380
   1359c:	7280f44f 	.word	0x7280f44f
   135a0:	9302a806 	.word	0x9302a806
   135a4:	fa49f011 	.word	0xfa49f011
   135a8:	4932462a 	.word	0x4932462a
   135ac:	f011a806 	.word	0xf011a806
   135b0:	aa06fa17 	.word	0xaa06fa17
   135b4:	ab029700 	.word	0xab029700
   135b8:	2120442a 	.word	0x2120442a
   135bc:	f00a482e 	.word	0xf00a482e
   135c0:	4606fed5 	.word	0x4606fed5
   135c4:	2300b138 	.word	0x2300b138
   135c8:	60232023 	.word	0x60232023
   135cc:	bdf0b047 	.word	0xbdf0b047
   135d0:	b047200e 	.word	0xb047200e
   135d4:	2022bdf0 	.word	0x2022bdf0
   135d8:	60279b02 	.word	0x60279b02
   135dc:	af06441d 	.word	0xaf06441d
   135e0:	5578ab06 	.word	0x5578ab06
   135e4:	f240442b 	.word	0xf240442b
   135e8:	21022201 	.word	0x21022201
   135ec:	705e2066 	.word	0x705e2066
   135f0:	f9c0f000 	.word	0xf9c0f000
   135f4:	dbe61e07 	.word	0xdbe61e07
   135f8:	f0114820 	.word	0xf0114820
   135fc:	4633f9bd 	.word	0x4633f9bd
   13600:	491e4602 	.word	0x491e4602
   13604:	6600e9cd 	.word	0x6600e9cd
   13608:	f0004638 	.word	0xf0004638
   1360c:	3502f95d 	.word	0x3502f95d
   13610:	4633a903 	.word	0x4633a903
   13614:	e9cd220a 	.word	0xe9cd220a
   13618:	46386600 	.word	0x46386600
   1361c:	fa3cf000 	.word	0xfa3cf000
   13620:	6600e9cd 	.word	0x6600e9cd
   13624:	462aa906 	.word	0x462aa906
   13628:	46384633 	.word	0x46384633
   1362c:	f94cf000 	.word	0xf94cf000
   13630:	d00342a8 	.word	0xd00342a8
   13634:	f0004638 	.word	0xf0004638
   13638:	e7c4f9e7 	.word	0xe7c4f9e7
   1363c:	6600e9cd 	.word	0x6600e9cd
   13640:	220a4633 	.word	0x220a4633
   13644:	4638a903 	.word	0x4638a903
   13648:	fa26f000 	.word	0xfa26f000
   1364c:	ddf12801 	.word	0xddf12801
   13650:	2202a803 	.word	0x2202a803
   13654:	f011490a 	.word	0xf011490a
   13658:	4605f9a4 	.word	0x4605f9a4
   1365c:	d1e92800 	.word	0xd1e92800
   13660:	46382302 	.word	0x46382302
   13664:	f0006023 	.word	0xf0006023
   13668:	4628f9cf 	.word	0x4628f9cf
   1366c:	bf00e7ae 	.word	0xbf00e7ae
   13670:	2002049c 	.word	0x2002049c
   13674:	00026960 	.word	0x00026960
   13678:	2002740c 	.word	0x2002740c
   1367c:	00026970 	.word	0x00026970
   13680:	00026980 	.word	0x00026980

00013684 <gnss_client_event_handler>:
   13684:	1b08f850 	.word	0x1b08f850
   13688:	f0060c09 	.word	0xf0060c09
   1368c:	bf00bda5 	.word	0xbf00bda5

00013690 <rpc_gnss_client_init>:
   13690:	f00a4801 	.word	0xf00a4801
   13694:	bf00bf63 	.word	0xbf00bf63
   13698:	00026a08 	.word	0x00026a08

0001369c <rpc_gnss_client_request_alloc>:
   1369c:	b5102300 	.word	0xb5102300
   136a0:	9301b082 	.word	0x9301b082
   136a4:	4604b158 	.word	0x4604b158
   136a8:	2007aa01 	.word	0x2007aa01
   136ac:	f98ef00b 	.word	0xf98ef00b
   136b0:	9b01b918 	.word	0x9b01b918
   136b4:	3308b10b 	.word	0x3308b10b
   136b8:	b0026023 	.word	0xb0026023
   136bc:	2007bd10 	.word	0x2007bd10
   136c0:	bd10b002 	.word	0xbd10b002

000136c4 <rpc_gnss_client_request_send>:
   136c4:	4370f401 	.word	0x4370f401
   136c8:	5f80f5b3 	.word	0x5f80f5b3
   136cc:	b160d10b 	.word	0xb160d10b
   136d0:	f8304603 	.word	0xf8304603
   136d4:	20072c08 	.word	0x20072c08
   136d8:	4101ea42 	.word	0x4101ea42
   136dc:	1d08f843 	.word	0x1d08f843
   136e0:	f00b4619 	.word	0xf00b4619
   136e4:	200fb95b 	.word	0x200fb95b
   136e8:	20074770 	.word	0x20074770
   136ec:	bf004770 	.word	0xbf004770

000136f0 <rpc_gnss_client_message_free>:
   136f0:	f1a0b120 	.word	0xf1a0b120
   136f4:	20070108 	.word	0x20070108
   136f8:	b99af00b 	.word	0xb99af00b
   136fc:	47702007 	.word	0x47702007

00013700 <rpc_gnss_client_data_free>:
   13700:	4601b118 	.word	0x4601b118
   13704:	f00b2007 	.word	0xf00b2007
   13708:	2007baa5 	.word	0x2007baa5
   1370c:	bf004770 	.word	0xbf004770

00013710 <eckey_can_do>:
   13710:	28023802 	.word	0x28023802
   13714:	2000bf8c 	.word	0x2000bf8c
   13718:	47702001 	.word	0x47702001

0001371c <eckey_get_bitlen>:
   1371c:	47706d80 	.word	0x47706d80

00013720 <eckey_debug>:
   13720:	4b032202 	.word	0x4b032202
   13724:	60883088 	.word	0x60883088
   13728:	604b700a 	.word	0x604b700a
   1372c:	bf004770 	.word	0xbf004770
   13730:	00026a18 	.word	0x00026a18

00013734 <eckeydh_can_do>:
   13734:	28013802 	.word	0x28013802
   13738:	2000bf8c 	.word	0x2000bf8c
   1373c:	47702001 	.word	0x47702001

00013740 <eckey_free_wrap>:
   13740:	4604b510 	.word	0x4604b510
   13744:	fc48f003 	.word	0xfc48f003
   13748:	e8bd4620 	.word	0xe8bd4620
   1374c:	f00b4010 	.word	0xf00b4010
   13750:	bf00bfe9 	.word	0xbf00bfe9

00013754 <eckey_alloc_wrap>:
   13754:	21acb510 	.word	0x21acb510
   13758:	f00b2001 	.word	0xf00b2001
   1375c:	4604ffcf 	.word	0x4604ffcf
   13760:	f003b108 	.word	0xf003b108
   13764:	4620fbd3 	.word	0x4620fbd3
   13768:	bf00bd10 	.word	0xbf00bd10

0001376c <eckey_check_pair>:
   1376c:	bbacf004 	.word	0xbbacf004

00013770 <symbol_0005c7f>:
   13770:	4ff0e92d 	.word	0x4ff0e92d
   13774:	c024f8dd 	.word	0xc024f8dd
   13778:	0f00f1bc 	.word	0x0f00f1bc
   1377c:	4c42d065 	.word	0x4c42d065
   13780:	540cfba4 	.word	0x540cfba4
   13784:	eb040864 	.word	0xeb040864
   13788:	45c40844 	.word	0x45c40844
   1378c:	3401bf18 	.word	0x3401bf18
   13790:	4f80f1b4 	.word	0x4f80f1b4
   13794:	00a4d271 	.word	0x00a4d271
   13798:	428c3401 	.word	0x428c3401
   1379c:	2800d869 	.word	0x2800d869
   137a0:	f1b8d067 	.word	0xf1b8d067
   137a4:	d0610f00 	.word	0xd0610f00
   137a8:	27004686 	.word	0x27004686
   137ac:	1cdc4e37 	.word	0x1cdc4e37
   137b0:	f8142500 	.word	0xf8142500
   137b4:	f8141c03 	.word	0xf8141c03
   137b8:	f8143c02 	.word	0xf8143c02
   137bc:	ea4fbc01 	.word	0xea4fbc01
   137c0:	010909a1 	.word	0x010909a1
   137c4:	0130f001 	.word	0x0130f001
   137c8:	1a13eb06 	.word	0x1a13eb06
   137cc:	9009f816 	.word	0x9009f816
   137d0:	f81a009b 	.word	0xf81a009b
   137d4:	f003a001 	.word	0xf003a001
   137d8:	eb06013c 	.word	0xeb06013c
   137dc:	5c59139b 	.word	0x5c59139b
   137e0:	0507f369 	.word	0x0507f369
   137e4:	033ff00b 	.word	0x033ff00b
   137e8:	f36a5cf3 	.word	0xf36a5cf3
   137ec:	f361250f 	.word	0xf361250f
   137f0:	37034517 	.word	0x37034517
   137f4:	651ff363 	.word	0x651ff363
   137f8:	0104f10e 	.word	0x0104f10e
   137fc:	f8ce45b8 	.word	0xf8ce45b8
   13800:	46235000 	.word	0x46235000
   13804:	f104468e 	.word	0xf104468e
   13808:	d8d10403 	.word	0xd8d10403
   1380c:	d91445bc 	.word	0xd91445bc
   13810:	4d1e781c 	.word	0x4d1e781c
   13814:	10a63701 	.word	0x10a63701
   13818:	ea4f4567 	.word	0xea4f4567
   1381c:	f0041404 	.word	0xf0041404
   13820:	f8150430 	.word	0xf8150430
   13824:	d315e006 	.word	0xd315e006
   13828:	5d2b263d 	.word	0x5d2b263d
   1382c:	e000f881 	.word	0xe000f881
   13830:	233d704b 	.word	0x233d704b
   13834:	70cb708e 	.word	0x70cb708e
   13838:	23003104 	.word	0x23003104
   1383c:	1a08469c 	.word	0x1a08469c
   13840:	700b6010 	.word	0x700b6010
   13844:	e8bd4660 	.word	0xe8bd4660
   13848:	f8c28ff0 	.word	0xf8c28ff0
   1384c:	4660c000 	.word	0x4660c000
   13850:	8ff0e8bd 	.word	0x8ff0e8bd
   13854:	f881785b 	.word	0xf881785b
   13858:	eb05e000 	.word	0xeb05e000
   1385c:	5d341613 	.word	0x5d341613
   13860:	f003009b 	.word	0xf003009b
   13864:	704c033c 	.word	0x704c033c
   13868:	e7e25cee 	.word	0xe7e25cee
   1386c:	46014647 	.word	0x46014647
   13870:	6014e7cc 	.word	0x6014e7cc
   13874:	0c29f06f 	.word	0x0c29f06f
   13878:	f04fe7e4 	.word	0xf04fe7e4
   1387c:	f06f33ff 	.word	0xf06f33ff
   13880:	60130c29 	.word	0x60130c29
   13884:	bf00e7de 	.word	0xbf00e7de
   13888:	aaaaaaab 	.word	0xaaaaaaab
   1388c:	00026a80 	.word	0x00026a80

00013890 <packet_free_cb>:
   13890:	f0006800 	.word	0xf0006800
   13894:	bf00b9eb 	.word	0xbf00b9eb

00013898 <packet_free_cb>:
   13898:	4604b510 	.word	0x4604b510
   1389c:	f0066800 	.word	0xf0066800
   138a0:	68a0f9a5 	.word	0x68a0f9a5
   138a4:	e8bdb118 	.word	0xe8bdb118
   138a8:	f00b4010 	.word	0xf00b4010
   138ac:	bd10bf3b 	.word	0xbd10bf3b

000138b0 <packet_free_cb>:
   138b0:	4604b510 	.word	0x4604b510
   138b4:	f7ff6800 	.word	0xf7ff6800
   138b8:	68a0ff23 	.word	0x68a0ff23
   138bc:	e8bdb118 	.word	0xe8bdb118
   138c0:	f00b4010 	.word	0xf00b4010
   138c4:	bd10bf2f 	.word	0xbd10bf2f

000138c8 <at_interface_write>:
   138c8:	b083b5f0 	.word	0xb083b5f0
   138cc:	4615460f 	.word	0x4615460f
   138d0:	f0044606 	.word	0xf0044606
   138d4:	2800fcf3 	.word	0x2800fcf3
   138d8:	6803d047 	.word	0x6803d047
   138dc:	039b4604 	.word	0x039b4604
   138e0:	6803d543 	.word	0x6803d543
   138e4:	f4234629 	.word	0xf4234629
   138e8:	60033300 	.word	0x60033300
   138ec:	a8016803 	.word	0xa8016803
   138f0:	1300f443 	.word	0x1300f443
   138f4:	f0006023 	.word	0xf0006023
   138f8:	bba0f98f 	.word	0xbba0f98f
   138fc:	9b012204 	.word	0x9b012204
   13900:	7258721a 	.word	0x7258721a
   13904:	72d87298 	.word	0x72d87298
   13908:	b98560de 	.word	0xb98560de
   1390c:	21014618 	.word	0x21014618
   13910:	f996f000 	.word	0xf996f000
   13914:	f44fb9d0 	.word	0xf44fb9d0
   13918:	46303200 	.word	0x46303200
   1391c:	f04f4611 	.word	0xf04f4611
   13920:	f00433ff 	.word	0xf00433ff
   13924:	b9a8fc5f 	.word	0xb9a8fc5f
   13928:	b0034628 	.word	0xb0034628
   1392c:	4639bdf0 	.word	0x4639bdf0
   13930:	462a6818 	.word	0x462a6818
   13934:	f854f011 	.word	0xf854f011
   13938:	98012101 	.word	0x98012101
   1393c:	f980f000 	.word	0xf980f000
   13940:	d0e82800 	.word	0xd0e82800
   13944:	68189b01 	.word	0x68189b01
   13948:	f990f000 	.word	0xf990f000
   1394c:	f0009801 	.word	0xf0009801
   13950:	2023f985 	.word	0x2023f985
   13954:	f4436823 	.word	0xf4436823
   13958:	60233300 	.word	0x60233300
   1395c:	fc80f7fe 	.word	0xfc80f7fe
   13960:	30fff04f 	.word	0x30fff04f
   13964:	200ce7e1 	.word	0x200ce7e1
   13968:	2016e7f4 	.word	0x2016e7f4
   1396c:	bf00e7f6 	.word	0xbf00e7f6

00013970 <at_interface_init>:
   13970:	b94cf000 	.word	0xb94cf000

00013974 <at_interface_open>:
   13974:	41f0e92d 	.word	0x41f0e92d
   13978:	b0822500 	.word	0xb0822500
   1397c:	f843ab02 	.word	0xf843ab02
   13980:	46805d08 	.word	0x46805d08
   13984:	4618460f 	.word	0x4618460f
   13988:	21024616 	.word	0x21024616
   1398c:	f0044a1d 	.word	0xf0044a1d
   13990:	9b00fb85 	.word	0x9b00fb85
   13994:	b30b4604 	.word	0xb30b4604
   13998:	8703e9c3 	.word	0x8703e9c3
   1399c:	4629615e 	.word	0x4629615e
   139a0:	f000a801 	.word	0xf000a801
   139a4:	b9e8f939 	.word	0xb9e8f939
   139a8:	9b012204 	.word	0x9b012204
   139ac:	72582105 	.word	0x72582105
   139b0:	72d87298 	.word	0x72d87298
   139b4:	60dc721a 	.word	0x60dc721a
   139b8:	f0004618 	.word	0xf0004618
   139bc:	b9d8f941 	.word	0xb9d8f941
   139c0:	f04f2202 	.word	0xf04f2202
   139c4:	461133ff 	.word	0x461133ff
   139c8:	f0044620 	.word	0xf0044620
   139cc:	4605fc0b 	.word	0x4605fc0b
   139d0:	9a00b948 	.word	0x9a00b948
   139d4:	f4436813 	.word	0xf4436813
   139d8:	60133300 	.word	0x60133300
   139dc:	b0024620 	.word	0xb0024620
   139e0:	81f0e8bd 	.word	0x81f0e8bd
   139e4:	4620250c 	.word	0x4620250c
   139e8:	fbaef004 	.word	0xfbaef004
   139ec:	f7fe4628 	.word	0xf7fe4628
   139f0:	f04ffc37 	.word	0xf04ffc37
   139f4:	e7f134ff 	.word	0xe7f134ff
   139f8:	f0009801 	.word	0xf0009801
   139fc:	2523f92f 	.word	0x2523f92f
   13a00:	bf00e7f1 	.word	0xbf00e7f1
   13a04:	00013891 	.word	0x00013891

00013a08 <at_interface_close>:
   13a08:	b083b5f0 	.word	0xb083b5f0
   13a0c:	f0044606 	.word	0xf0044606
   13a10:	2800fc55 	.word	0x2800fc55
   13a14:	230dd03d 	.word	0x230dd03d
   13a18:	60036807 	.word	0x60036807
   13a1c:	46046803 	.word	0x46046803
   13a20:	d41f039b 	.word	0xd41f039b
   13a24:	a8012100 	.word	0xa8012100
   13a28:	f8f6f000 	.word	0xf8f6f000
   13a2c:	2204bb20 	.word	0x2204bb20
   13a30:	21069b01 	.word	0x21069b01
   13a34:	72987258 	.word	0x72987258
   13a38:	721a72d8 	.word	0x721a72d8
   13a3c:	461860de 	.word	0x461860de
   13a40:	f8fef000 	.word	0xf8fef000
   13a44:	220eb9d0 	.word	0x220eb9d0
   13a48:	33fff04f 	.word	0x33fff04f
   13a4c:	46304611 	.word	0x46304611
   13a50:	fbc8f004 	.word	0xfbc8f004
   13a54:	b9a84605 	.word	0xb9a84605
   13a58:	f0044630 	.word	0xf0044630
   13a5c:	4628fb75 	.word	0x4628fb75
   13a60:	bdf0b003 	.word	0xbdf0b003
   13a64:	21006803 	.word	0x21006803
   13a68:	3300f423 	.word	0x3300f423
   13a6c:	a8016003 	.word	0xa8016003
   13a70:	f8d2f000 	.word	0xf8d2f000
   13a74:	d0da2800 	.word	0xd0da2800
   13a78:	e003250c 	.word	0xe003250c
   13a7c:	f0009801 	.word	0xf0009801
   13a80:	2523f8ed 	.word	0x2523f8ed
   13a84:	46286027 	.word	0x46286027
   13a88:	fbeaf7fe 	.word	0xfbeaf7fe
   13a8c:	35fff04f 	.word	0x35fff04f
   13a90:	2516e7e5 	.word	0x2516e7e5
   13a94:	bf00e7f7 	.word	0xbf00e7f7

00013a98 <at_interface_read>:
   13a98:	41f0e92d 	.word	0x41f0e92d
   13a9c:	4688b084 	.word	0x4688b084
   13aa0:	461e4615 	.word	0x461e4615
   13aa4:	f0044607 	.word	0xf0044607
   13aa8:	2800fc09 	.word	0x2800fc09
   13aac:	2300d049 	.word	0x2300d049
   13ab0:	8500e9cd 	.word	0x8500e9cd
   13ab4:	0502f016 	.word	0x0502f016
   13ab8:	e9cd4604 	.word	0xe9cd4604
   13abc:	d00e3302 	.word	0xd00e3302
   13ac0:	2d00e01e 	.word	0x2d00e01e
   13ac4:	f44fd133 	.word	0xf44fd133
   13ac8:	6a233280 	.word	0x6a233280
   13acc:	2b004611 	.word	0x2b004611
   13ad0:	f04fbf08 	.word	0xf04fbf08
   13ad4:	463833ff 	.word	0x463833ff
   13ad8:	fb84f004 	.word	0xfb84f004
   13adc:	68234605 	.word	0x68234605
   13ae0:	f42369e0 	.word	0xf42369e0
   13ae4:	60233380 	.word	0x60233380
   13ae8:	46326803 	.word	0x46326803
   13aec:	4669689b 	.word	0x4669689b
   13af0:	f1b04798 	.word	0xf1b04798
   13af4:	dbe40800 	.word	0xdbe40800
   13af8:	b0044640 	.word	0xb0044640
   13afc:	81f0e8bd 	.word	0x81f0e8bd
   13b00:	69c06803 	.word	0x69c06803
   13b04:	3380f423 	.word	0x3380f423
   13b08:	68036023 	.word	0x68036023
   13b0c:	689b4632 	.word	0x689b4632
   13b10:	47984669 	.word	0x47984669
   13b14:	0800f1b0 	.word	0x0800f1b0
   13b18:	f1b8daee 	.word	0xf1b8daee
   13b1c:	d1eb3fff 	.word	0xd1eb3fff
   13b20:	f7fe2023 	.word	0xf7fe2023
   13b24:	4640fb9d 	.word	0x4640fb9d
   13b28:	e8bdb004 	.word	0xe8bdb004
   13b2c:	f1b881f0 	.word	0xf1b881f0
   13b30:	d1e13fff 	.word	0xd1e13fff
   13b34:	f7fe4628 	.word	0xf7fe4628
   13b38:	4640fb93 	.word	0x4640fb93
   13b3c:	e8bdb004 	.word	0xe8bdb004
   13b40:	201681f0 	.word	0x201681f0
   13b44:	fb8cf7fe 	.word	0xfb8cf7fe
   13b48:	38fff04f 	.word	0x38fff04f
   13b4c:	bf00e7d4 	.word	0xbf00e7d4

00013b50 <at_interface_getopt>:
   13b50:	bc12f004 	.word	0xbc12f004

00013b54 <at_interface_setopt>:
   13b54:	bbdaf004 	.word	0xbbdaf004

00013b58 <rpc_at_event_handler>:
   13b58:	4606b570 	.word	0x4606b570
   13b5c:	68c0b084 	.word	0x68c0b084
   13b60:	f004460d 	.word	0xf004460d
   13b64:	4604fbab 	.word	0x4604fbab
   13b68:	6803b348 	.word	0x6803b348
   13b6c:	2b01b29b 	.word	0x2b01b29b
   13b70:	6803d01f 	.word	0x6803d01f
   13b74:	2b0db29b 	.word	0x2b0db29b
   13b78:	6803d029 	.word	0x6803d029
   13b7c:	2b02b29b 	.word	0x2b02b29b
   13b80:	3d03d02d 	.word	0x3d03d02d
   13b84:	d8172d01 	.word	0xd8172d01
   13b88:	68732500 	.word	0x68732500
   13b8c:	e9cd6832 	.word	0xe9cd6832
   13b90:	e9cd5502 	.word	0xe9cd5502
   13b94:	69e02300 	.word	0x69e02300
   13b98:	68034669 	.word	0x68034669
   13b9c:	4798685b 	.word	0x4798685b
   13ba0:	d0193001 	.word	0xd0193001
   13ba4:	68234628 	.word	0x68234628
   13ba8:	3380f443 	.word	0x3380f443
   13bac:	b0046023 	.word	0xb0046023
   13bb0:	2d02bd70 	.word	0x2d02bd70
   13bb4:	6005d1e5 	.word	0x6005d1e5
   13bb8:	b0042000 	.word	0xb0042000
   13bbc:	6830bd70 	.word	0x6830bd70
   13bc0:	d0f92800 	.word	0xd0f92800
   13bc4:	f852f000 	.word	0xf852f000
   13bc8:	b0044620 	.word	0xb0044620
   13bcc:	2d02bd70 	.word	0x2d02bd70
   13bd0:	230ed1d7 	.word	0x230ed1d7
   13bd4:	e7ef6003 	.word	0xe7ef6003
   13bd8:	b0042002 	.word	0xb0042002
   13bdc:	6803bd70 	.word	0x6803bd70
   13be0:	d5ce029b 	.word	0xd5ce029b
   13be4:	d1cc2d02 	.word	0xd1cc2d02
   13be8:	f4236803 	.word	0xf4236803
   13bec:	60031300 	.word	0x60031300
   13bf0:	f4436803 	.word	0xf4436803
   13bf4:	60033300 	.word	0x60033300
   13bf8:	bf00e7de 	.word	0xbf00e7de

00013bfc <at_client_evt_handler>:
   13bfc:	f850b120 	.word	0xf850b120
   13c00:	0c091b08 	.word	0x0c091b08
   13c04:	bfa8f7ff 	.word	0xbfa8f7ff
   13c08:	bf004770 	.word	0xbf004770

00013c0c <rpc_at_client_init>:
   13c0c:	f00a4801 	.word	0xf00a4801
   13c10:	bf00bca5 	.word	0xbf00bca5
   13c14:	00026ac0 	.word	0x00026ac0

00013c18 <rpc_at_client_request_alloc>:
   13c18:	2300b180 	.word	0x2300b180
   13c1c:	b082b510 	.word	0xb082b510
   13c20:	4604aa02 	.word	0x4604aa02
   13c24:	3d04f842 	.word	0x3d04f842
   13c28:	f00a2003 	.word	0xf00a2003
   13c2c:	b918fecf 	.word	0xb918fecf
   13c30:	b10b9b01 	.word	0xb10b9b01
   13c34:	60233308 	.word	0x60233308
   13c38:	bd10b002 	.word	0xbd10b002
   13c3c:	4770200e 	.word	0x4770200e

00013c40 <rpc_at_client_request_send>:
   13c40:	4603b150 	.word	0x4603b150
   13c44:	2c08f830 	.word	0x2c08f830
   13c48:	ea422003 	.word	0xea422003
   13c4c:	f8434101 	.word	0xf8434101
   13c50:	46191d08 	.word	0x46191d08
   13c54:	bea2f00a 	.word	0xbea2f00a
   13c58:	4770200e 	.word	0x4770200e

00013c5c <rpc_at_client_message_free>:
   13c5c:	f1a0b120 	.word	0xf1a0b120
   13c60:	20030108 	.word	0x20030108
   13c64:	bee4f00a 	.word	0xbee4f00a
   13c68:	4770200e 	.word	0x4770200e

00013c6c <rpc_at_client_data_free>:
   13c6c:	4601b118 	.word	0x4601b118
   13c70:	f00a2003 	.word	0xf00a2003
   13c74:	200ebfef 	.word	0x200ebfef
   13c78:	bf004770 	.word	0xbf004770

00013c7c <logobj_event_handler>:
   13c7c:	4b3bb530 	.word	0x4b3bb530
   13c80:	681db085 	.word	0x681db085
   13c84:	d04c2d00 	.word	0xd04c2d00
   13c88:	0302f248 	.word	0x0302f248
   13c8c:	d0534299 	.word	0xd0534299
   13c90:	f248d91c 	.word	0xf248d91c
   13c94:	42990303 	.word	0x42990303
   13c98:	f249d05a 	.word	0xf249d05a
   13c9c:	42990301 	.word	0x42990301
   13ca0:	2400d147 	.word	0x2400d147
   13ca4:	68026843 	.word	0x68026843
   13ca8:	4402e9cd 	.word	0x4402e9cd
   13cac:	2300e9cd 	.word	0x2300e9cd
   13cb0:	466969e8 	.word	0x466969e8
   13cb4:	685b6803 	.word	0x685b6803
   13cb8:	30014798 	.word	0x30014798
   13cbc:	4620d04e 	.word	0x4620d04e
   13cc0:	f443682b 	.word	0xf443682b
   13cc4:	602b3380 	.word	0x602b3380
   13cc8:	bd30b005 	.word	0xbd30b005
   13ccc:	0301f248 	.word	0x0301f248
   13cd0:	d12e4299 	.word	0xd12e4299
   13cd4:	2b0068c3 	.word	0x2b0068c3
   13cd8:	6828d135 	.word	0x6828d135
   13cdc:	0080f410 	.word	0x0080f410
   13ce0:	682bd03e 	.word	0x682bd03e
   13ce4:	2b01b29b 	.word	0x2b01b29b
   13ce8:	682bd105 	.word	0x682bd105
   13cec:	041b0c1b 	.word	0x041b0c1b
   13cf0:	0302f043 	.word	0x0302f043
   13cf4:	4b1e602b 	.word	0x4b1e602b
   13cf8:	f002781a 	.word	0xf002781a
   13cfc:	2a0001ff 	.word	0x2a0001ff
   13d00:	4a1cd031 	.word	0x4a1cd031
   13d04:	b9097811 	.word	0xb9097811
   13d08:	70112101 	.word	0x70112101
   13d0c:	70182000 	.word	0x70182000
   13d10:	f423682b 	.word	0xf423682b
   13d14:	602b0380 	.word	0x602b0380
   13d18:	f443682b 	.word	0xf443682b
   13d1c:	602b0300 	.word	0x602b0300
   13d20:	6800e7d2 	.word	0x6800e7d2
   13d24:	d0cf2800 	.word	0xd0cf2800
   13d28:	ff60f005 	.word	0xff60f005
   13d2c:	b0054628 	.word	0xb0054628
   13d30:	2000bd30 	.word	0x2000bd30
   13d34:	bd30b005 	.word	0xbd30b005
   13d38:	f413682b 	.word	0xf413682b
   13d3c:	d00b0380 	.word	0xd00b0380
   13d40:	280068c0 	.word	0x280068c0
   13d44:	230ed0e4 	.word	0x230ed0e4
   13d48:	606b2000 	.word	0x606b2000
   13d4c:	bd30b005 	.word	0xbd30b005
   13d50:	2b0168c3 	.word	0x2b0168c3
   13d54:	e7f6d1a5 	.word	0xe7f6d1a5
   13d58:	e7b54618 	.word	0xe7b54618
   13d5c:	e7b32002 	.word	0xe7b32002
   13d60:	606b230e 	.word	0x606b230e
   13d64:	4a03e7b0 	.word	0x4a03e7b0
   13d68:	e7cf7011 	.word	0xe7cf7011
   13d6c:	200204a4 	.word	0x200204a4
   13d70:	20027403 	.word	0x20027403
   13d74:	20027404 	.word	0x20027404

00013d78 <logobj_interface_init>:
   13d78:	b5102300 	.word	0xb5102300
   13d7c:	4a084907 	.word	0x4a084907
   13d80:	48094c08 	.word	0x48094c08
   13d84:	60037023 	.word	0x60037023
   13d88:	6013700b 	.word	0x6013700b
   13d8c:	fef2f005 	.word	0xfef2f005
   13d90:	bf183000 	.word	0xbf183000
   13d94:	42402001 	.word	0x42402001
   13d98:	bf00bd10 	.word	0xbf00bd10
   13d9c:	20027403 	.word	0x20027403
   13da0:	200204a0 	.word	0x200204a0
   13da4:	20027404 	.word	0x20027404
   13da8:	200204a4 	.word	0x200204a4

00013dac <logobj_interface_open>:
   13dac:	e92d2300 	.word	0xe92d2300
   13db0:	286647f0 	.word	0x286647f0
   13db4:	9300b082 	.word	0x9300b082
   13db8:	2902d172 	.word	0x2902d172
   13dbc:	d16f4689 	.word	0xd16f4689
   13dc0:	2305f240 	.word	0x2305f240
   13dc4:	4692429a 	.word	0x4692429a
   13dc8:	4f48d16a 	.word	0x4f48d16a
   13dcc:	2d00683d 	.word	0x2d00683d
   13dd0:	4680d17c 	.word	0x4680d17c
   13dd4:	46684a46 	.word	0x46684a46
   13dd8:	f960f004 	.word	0xf960f004
   13ddc:	46069b00 	.word	0x46069b00
   13de0:	d07d2b00 	.word	0xd07d2b00
   13de4:	22044629 	.word	0x22044629
   13de8:	603b4842 	.word	0x603b4842
   13dec:	fe25f010 	.word	0xfe25f010
   13df0:	46299c00 	.word	0x46299c00
   13df4:	8903e9c4 	.word	0x8903e9c4
   13df8:	a014f8c4 	.word	0xa014f8c4
   13dfc:	f005a801 	.word	0xf005a801
   13e00:	2800febf 	.word	0x2800febf
   13e04:	2201d13c 	.word	0x2201d13c
   13e08:	9b012104 	.word	0x9b012104
   13e0c:	73584d3a 	.word	0x73584d3a
   13e10:	73d87398 	.word	0x73d87398
   13e14:	72987258 	.word	0x72987258
   13e18:	721972d8 	.word	0x721972d8
   13e1c:	731a702a 	.word	0x731a702a
   13e20:	46186822 	.word	0x46186822
   13e24:	0280f442 	.word	0x0280f442
   13e28:	f2476022 	.word	0xf2476022
   13e2c:	f0050101 	.word	0xf0050101
   13e30:	bb38febf 	.word	0xbb38febf
   13e34:	0200f44f 	.word	0x0200f44f
   13e38:	33fff04f 	.word	0x33fff04f
   13e3c:	46304611 	.word	0x46304611
   13e40:	f9d0f004 	.word	0xf9d0f004
   13e44:	b3104604 	.word	0xb3104604
   13e48:	2e009a00 	.word	0x2e009a00
   13e4c:	f4436813 	.word	0xf4436813
   13e50:	60133300 	.word	0x60133300
   13e54:	68139a00 	.word	0x68139a00
   13e58:	0380f423 	.word	0x0380f423
   13e5c:	9a006013 	.word	0x9a006013
   13e60:	f4236813 	.word	0xf4236813
   13e64:	60130300 	.word	0x60130300
   13e68:	2300da36 	.word	0x2300da36
   13e6c:	603b4620 	.word	0x603b4620
   13e70:	36fff04f 	.word	0x36fff04f
   13e74:	f9f4f7fe 	.word	0xf9f4f7fe
   13e78:	b0024630 	.word	0xb0024630
   13e7c:	87f0e8bd 	.word	0x87f0e8bd
   13e80:	e7e1240c 	.word	0xe7e1240c
   13e84:	f0059801 	.word	0xf0059801
   13e88:	2405fea9 	.word	0x2405fea9
   13e8c:	4630e7dc 	.word	0x4630e7dc
   13e90:	fa14f004 	.word	0xfa14f004
   13e94:	6844b150 	.word	0x6844b150
   13e98:	2300b144 	.word	0x2300b144
   13e9c:	e7d36043 	.word	0xe7d36043
   13ea0:	f7fe2016 	.word	0xf7fe2016
   13ea4:	f04ff9dd 	.word	0xf04ff9dd
   13ea8:	e7e536ff 	.word	0xe7e536ff
   13eac:	68139a00 	.word	0x68139a00
   13eb0:	3300f443 	.word	0x3300f443
   13eb4:	9a006013 	.word	0x9a006013
   13eb8:	f4236813 	.word	0xf4236813
   13ebc:	60130380 	.word	0x60130380
   13ec0:	68139a00 	.word	0x68139a00
   13ec4:	0300f423 	.word	0x0300f423
   13ec8:	e7d56013 	.word	0xe7d56013
   13ecc:	f7fe2001 	.word	0xf7fe2001
   13ed0:	f04ff9c7 	.word	0xf04ff9c7
   13ed4:	e7cf36ff 	.word	0xe7cf36ff
   13ed8:	f0044630 	.word	0xf0044630
   13edc:	e7c4f935 	.word	0xe7c4f935
   13ee0:	f7fe2018 	.word	0xf7fe2018
   13ee4:	f04ff9bd 	.word	0xf04ff9bd
   13ee8:	e7c536ff 	.word	0xe7c536ff
   13eec:	200204a4 	.word	0x200204a4
   13ef0:	00013899 	.word	0x00013899
   13ef4:	200204a0 	.word	0x200204a0
   13ef8:	20027403 	.word	0x20027403

00013efc <logobj_interface_read>:
   13efc:	43f0e92d 	.word	0x43f0e92d
   13f00:	2900b085 	.word	0x2900b085
   13f04:	2a00d05e 	.word	0x2a00d05e
   13f08:	dd5b4616 	.word	0xdd5b4616
   13f0c:	4680461f 	.word	0x4680461f
   13f10:	f004460d 	.word	0xf004460d
   13f14:	4604f9d3 	.word	0x4604f9d3
   13f18:	d0592800 	.word	0xd0592800
   13f1c:	07ba69c0 	.word	0x07ba69c0
   13f20:	68db6803 	.word	0x68db6803
   13f24:	4798d524 	.word	0x4798d524
   13f28:	d03b3001 	.word	0xd03b3001
   13f2c:	69e06823 	.word	0x69e06823
   13f30:	3380f413 	.word	0x3380f413
   13f34:	2100d038 	.word	0x2100d038
   13f38:	463a6823 	.word	0x463a6823
   13f3c:	3380f423 	.word	0x3380f423
   13f40:	e9cd6023 	.word	0xe9cd6023
   13f44:	e9cd1102 	.word	0xe9cd1102
   13f48:	68035600 	.word	0x68035600
   13f4c:	689b4669 	.word	0x689b4669
   13f50:	46054798 	.word	0x46054798
   13f54:	680369e0 	.word	0x680369e0
   13f58:	479868db 	.word	0x479868db
   13f5c:	d0033001 	.word	0xd0033001
   13f60:	f4436823 	.word	0xf4436823
   13f64:	60233380 	.word	0x60233380
   13f68:	b0054628 	.word	0xb0054628
   13f6c:	83f0e8bd 	.word	0x83f0e8bd
   13f70:	f0126822 	.word	0xf0126822
   13f74:	d1d65980 	.word	0xd1d65980
   13f78:	1c434798 	.word	0x1c434798
   13f7c:	f44fd1d6 	.word	0xf44fd1d6
   13f80:	6a233280 	.word	0x6a233280
   13f84:	2b004611 	.word	0x2b004611
   13f88:	4603bf08 	.word	0x4603bf08
   13f8c:	f0044640 	.word	0xf0044640
   13f90:	b158f929 	.word	0xb158f929
   13f94:	35fff04f 	.word	0x35fff04f
   13f98:	f962f7fe 	.word	0xf962f7fe
   13f9c:	b0054628 	.word	0xb0054628
   13fa0:	83f0e8bd 	.word	0x83f0e8bd
   13fa4:	e7f52023 	.word	0xe7f52023
   13fa8:	e7d4461d 	.word	0xe7d4461d
   13fac:	f0044640 	.word	0xf0044640
   13fb0:	4603f985 	.word	0x4603f985
   13fb4:	d0b92800 	.word	0xd0b92800
   13fb8:	28006840 	.word	0x28006840
   13fbc:	f8c3d0b6 	.word	0xf8c3d0b6
   13fc0:	e7e79004 	.word	0xe7e79004
   13fc4:	f7fe2016 	.word	0xf7fe2016
   13fc8:	f04ff94b 	.word	0xf04ff94b
   13fcc:	e7cb35ff 	.word	0xe7cb35ff
   13fd0:	f7fe2009 	.word	0xf7fe2009
   13fd4:	f04ff945 	.word	0xf04ff945
   13fd8:	e7c535ff 	.word	0xe7c535ff

00013fdc <logobj_interface_write>:
   13fdc:	41f0e92d 	.word	0x41f0e92d
   13fe0:	2900b082 	.word	0x2900b082
   13fe4:	2a04d05b 	.word	0x2a04d05b
   13fe8:	461ed159 	.word	0x461ed159
   13fec:	460d4607 	.word	0x460d4607
   13ff0:	f964f004 	.word	0xf964f004
   13ff4:	28004604 	.word	0x28004604
   13ff8:	07b0d067 	.word	0x07b0d067
   13ffc:	6823d526 	.word	0x6823d526
   14000:	d55e039b 	.word	0xd55e039b
   14004:	68232600 	.word	0x68232600
   14008:	f4232100 	.word	0xf4232100
   1400c:	60233300 	.word	0x60233300
   14010:	f8d5a801 	.word	0xf8d5a801
   14014:	f0058000 	.word	0xf0058000
   14018:	b9f8fdb3 	.word	0xb9f8fdb3
   1401c:	9b012504 	.word	0x9b012504
   14020:	0103f247 	.word	0x0103f247
   14024:	800cf8c3 	.word	0x800cf8c3
   14028:	72987258 	.word	0x72987258
   1402c:	721d72d8 	.word	0x721d72d8
   14030:	f0054618 	.word	0xf0054618
   14034:	4680fdbd 	.word	0x4680fdbd
   14038:	b9cebb40 	.word	0xb9cebb40
   1403c:	68234628 	.word	0x68234628
   14040:	3300f443 	.word	0x3300f443
   14044:	b0026023 	.word	0xb0026023
   14048:	81f0e8bd 	.word	0x81f0e8bd
   1404c:	00d96823 	.word	0x00d96823
   14050:	6823d4d5 	.word	0x6823d4d5
   14054:	d536039a 	.word	0xd536039a
   14058:	e7d42601 	.word	0xe7d42601
   1405c:	6823200c 	.word	0x6823200c
   14060:	3300f443 	.word	0x3300f443
   14064:	f7fe6023 	.word	0xf7fe6023
   14068:	f04ff8fb 	.word	0xf04ff8fb
   1406c:	e7ea30ff 	.word	0xe7ea30ff
   14070:	3280f44f 	.word	0x3280f44f
   14074:	33fff04f 	.word	0x33fff04f
   14078:	46384611 	.word	0x46384611
   1407c:	f8b2f004 	.word	0xf8b2f004
   14080:	6823b198 	.word	0x6823b198
   14084:	3300f443 	.word	0x3300f443
   14088:	e7ec6023 	.word	0xe7ec6023
   1408c:	f0059801 	.word	0xf0059801
   14090:	6823fda5 	.word	0x6823fda5
   14094:	f4432005 	.word	0xf4432005
   14098:	60233300 	.word	0x60233300
   1409c:	2016e7e3 	.word	0x2016e7e3
   140a0:	f8def7fe 	.word	0xf8def7fe
   140a4:	30fff04f 	.word	0x30fff04f
   140a8:	4638e7cd 	.word	0x4638e7cd
   140ac:	f906f004 	.word	0xf906f004
   140b0:	28004603 	.word	0x28004603
   140b4:	6840d0c2 	.word	0x6840d0c2
   140b8:	d0bf2800 	.word	0xd0bf2800
   140bc:	8004f8c3 	.word	0x8004f8c3
   140c0:	2073e7df 	.word	0x2073e7df
   140c4:	2009e7cf 	.word	0x2009e7cf
   140c8:	2009e7cd 	.word	0x2009e7cd
   140cc:	f8c8f7fe 	.word	0xf8c8f7fe
   140d0:	30fff04f 	.word	0x30fff04f
   140d4:	bf00e7b7 	.word	0xbf00e7b7

000140d8 <logobj_interface_setopt>:
   140d8:	2901b5f0 	.word	0x2901b5f0
   140dc:	d068b085 	.word	0xd068b085
   140e0:	f240461e 	.word	0xf240461e
   140e4:	42992305 	.word	0x42992305
   140e8:	8095f040 	.word	0x8095f040
   140ec:	46154607 	.word	0x46154607
   140f0:	f8e4f004 	.word	0xf8e4f004
   140f4:	28004604 	.word	0x28004604
   140f8:	80b2f000 	.word	0x80b2f000
   140fc:	d0192d01 	.word	0xd0192d01
   14100:	d0102d02 	.word	0xd0102d02
   14104:	6803252a 	.word	0x6803252a
   14108:	0380f423 	.word	0x0380f423
   1410c:	68236023 	.word	0x68236023
   14110:	f4234628 	.word	0xf4234628
   14114:	60230300 	.word	0x60230300
   14118:	f8a2f7fe 	.word	0xf8a2f7fe
   1411c:	35fff04f 	.word	0x35fff04f
   14120:	b0054628 	.word	0xb0054628
   14124:	b116bdf0 	.word	0xb116bdf0
   14128:	2b019b0a 	.word	0x2b019b0a
   1412c:	6823d049 	.word	0x6823d049
   14130:	e7e92516 	.word	0xe7e92516
   14134:	d0fa2e00 	.word	0xd0fa2e00
   14138:	2b049b0a 	.word	0x2b049b0a
   1413c:	2100d1f7 	.word	0x2100d1f7
   14140:	f005a803 	.word	0xf005a803
   14144:	4605fd1d 	.word	0x4605fd1d
   14148:	d16a2800 	.word	0xd16a2800
   1414c:	22089803 	.word	0x22089803
   14150:	300c4629 	.word	0x300c4629
   14154:	fc71f010 	.word	0xfc71f010
   14158:	46319803 	.word	0x46319803
   1415c:	300c9a0a 	.word	0x300c9a0a
   14160:	fc3ef010 	.word	0xfc3ef010
   14164:	98032308 	.word	0x98032308
   14168:	0102f247 	.word	0x0102f247
   1416c:	72457203 	.word	0x72457203
   14170:	72c57285 	.word	0x72c57285
   14174:	f4436823 	.word	0xf4436823
   14178:	60230380 	.word	0x60230380
   1417c:	fd18f005 	.word	0xfd18f005
   14180:	d1512800 	.word	0xd1512800
   14184:	0200f44f 	.word	0x0200f44f
   14188:	33fff04f 	.word	0x33fff04f
   1418c:	46384611 	.word	0x46384611
   14190:	f828f004 	.word	0xf828f004
   14194:	28004605 	.word	0x28004605
   14198:	4638d13b 	.word	0x4638d13b
   1419c:	f88ef004 	.word	0xf88ef004
   141a0:	d04f2800 	.word	0xd04f2800
   141a4:	2b006843 	.word	0x2b006843
   141a8:	2200d04c 	.word	0x2200d04c
   141ac:	6042461d 	.word	0x6042461d
   141b0:	9c0ae02f 	.word	0x9c0ae02f
   141b4:	f0049400 	.word	0xf0049400
   141b8:	4605f8a9 	.word	0x4605f8a9
   141bc:	b0054628 	.word	0xb0054628
   141c0:	2100bdf0 	.word	0x2100bdf0
   141c4:	7835a803 	.word	0x7835a803
   141c8:	fcdaf005 	.word	0xfcdaf005
   141cc:	2d01bb48 	.word	0x2d01bb48
   141d0:	4b26bf08 	.word	0x4b26bf08
   141d4:	0204f04f 	.word	0x0204f04f
   141d8:	701dbf08 	.word	0x701dbf08
   141dc:	98032300 	.word	0x98032300
   141e0:	0101f247 	.word	0x0101f247
   141e4:	60c57243 	.word	0x60c57243
   141e8:	72c37283 	.word	0x72c37283
   141ec:	68237202 	.word	0x68237202
   141f0:	0380f443 	.word	0x0380f443
   141f4:	f0056023 	.word	0xf0056023
   141f8:	4606fcdb 	.word	0x4606fcdb
   141fc:	f44fb9a0 	.word	0xf44fb9a0
   14200:	f04f0200 	.word	0xf04f0200
   14204:	461133ff 	.word	0x461133ff
   14208:	f0034638 	.word	0xf0034638
   1420c:	4605ffeb 	.word	0x4605ffeb
   14210:	6823b180 	.word	0x6823b180
   14214:	202ae778 	.word	0x202ae778
   14218:	f822f7fe 	.word	0xf822f7fe
   1421c:	35fff04f 	.word	0x35fff04f
   14220:	6823e77e 	.word	0x6823e77e
   14224:	e76f250c 	.word	0xe76f250c
   14228:	f0059803 	.word	0xf0059803
   1422c:	2505fcd7 	.word	0x2505fcd7
   14230:	e7696823 	.word	0xe7696823
   14234:	f0044638 	.word	0xf0044638
   14238:	b140f841 	.word	0xb140f841
   1423c:	b1356845 	.word	0xb1356845
   14240:	e7e66046 	.word	0xe7e66046
   14244:	22044631 	.word	0x22044631
   14248:	f0104809 	.word	0xf0104809
   1424c:	6823fbc9 	.word	0x6823fbc9
   14250:	0380f423 	.word	0x0380f423
   14254:	68236023 	.word	0x68236023
   14258:	0300f423 	.word	0x0300f423
   1425c:	e75f6023 	.word	0xe75f6023
   14260:	f7fd2009 	.word	0xf7fd2009
   14264:	f04ffffd 	.word	0xf04ffffd
   14268:	e75935ff 	.word	0xe75935ff
   1426c:	20027403 	.word	0x20027403
   14270:	200204a0 	.word	0x200204a0

00014274 <logobj_interface_getopt>:
   14274:	2901b5f0 	.word	0x2901b5f0
   14278:	9e08b083 	.word	0x9e08b083
   1427c:	461fd030 	.word	0x461fd030
   14280:	2305f240 	.word	0x2305f240
   14284:	d1344299 	.word	0xd1344299
   14288:	f0044615 	.word	0xf0044615
   1428c:	2800f817 	.word	0x2800f817
   14290:	2d01d037 	.word	0x2d01d037
   14294:	2d02d015 	.word	0x2d02d015
   14298:	b387d10b 	.word	0xb387d10b
   1429c:	b3736833 	.word	0xb3736833
   142a0:	22012300 	.word	0x22012300
   142a4:	491a4618 	.word	0x491a4618
   142a8:	70397809 	.word	0x70397809
   142ac:	b0036032 	.word	0xb0036032
   142b0:	2009bdf0 	.word	0x2009bdf0
   142b4:	ffd4f7fd 	.word	0xffd4f7fd
   142b8:	33fff04f 	.word	0x33fff04f
   142bc:	b0034618 	.word	0xb0034618
   142c0:	b1e7bdf0 	.word	0xb1e7bdf0
   142c4:	2b036833 	.word	0x2b036833
   142c8:	4638d919 	.word	0x4638d919
   142cc:	49112204 	.word	0x49112204
   142d0:	fb86f010 	.word	0xfb86f010
   142d4:	22042300 	.word	0x22042300
   142d8:	60324618 	.word	0x60324618
   142dc:	bdf0b003 	.word	0xbdf0b003
   142e0:	f0049600 	.word	0xf0049600
   142e4:	4603f849 	.word	0x4603f849
   142e8:	d1e32800 	.word	0xd1e32800
   142ec:	b0034618 	.word	0xb0034618
   142f0:	202abdf0 	.word	0x202abdf0
   142f4:	ffb4f7fd 	.word	0xffb4f7fd
   142f8:	33fff04f 	.word	0x33fff04f
   142fc:	2016e7de 	.word	0x2016e7de
   14300:	2009e7d8 	.word	0x2009e7d8
   14304:	ffacf7fd 	.word	0xffacf7fd
   14308:	33fff04f 	.word	0x33fff04f
   1430c:	bf00e7d6 	.word	0xbf00e7d6
   14310:	20027404 	.word	0x20027404
   14314:	200204a0 	.word	0x200204a0

00014318 <logobj_interface_close>:
   14318:	4604b510 	.word	0x4604b510
   1431c:	ffcef003 	.word	0xffcef003
   14320:	4620b138 	.word	0x4620b138
   14324:	ff10f003 	.word	0xff10f003
   14328:	4a052300 	.word	0x4a052300
   1432c:	60134618 	.word	0x60134618
   14330:	2009bd10 	.word	0x2009bd10
   14334:	ff94f7fd 	.word	0xff94f7fd
   14338:	30fff04f 	.word	0x30fff04f
   1433c:	bf00bd10 	.word	0xbf00bd10
   14340:	200204a4 	.word	0x200204a4

00014344 <transport_reset>:
   14344:	47702000 	.word	0x47702000

00014348 <transport_data_free>:
   14348:	e9d34b0b 	.word	0xe9d34b0b
   1434c:	44132300 	.word	0x44132300
   14350:	d20d4298 	.word	0xd20d4298
   14354:	d80b4282 	.word	0xd80b4282
   14358:	4604b510 	.word	0x4604b510
   1435c:	feecf005 	.word	0xfeecf005
   14360:	4a06b140 	.word	0x4a06b140
   14364:	60026084 	.word	0x60026084
   14368:	4010e8bd 	.word	0x4010e8bd
   1436c:	be2cf005 	.word	0xbe2cf005
   14370:	b9eef00b 	.word	0xb9eef00b
   14374:	bf00bd10 	.word	0xbf00bd10
   14378:	200204a8 	.word	0x200204a8
   1437c:	00020001 	.word	0x00020001

00014380 <rpc_transport_ipc_init>:
   14380:	d02b2800 	.word	0xd02b2800
   14384:	b089b530 	.word	0xb089b530
   14388:	4669aa01 	.word	0x4669aa01
   1438c:	f0054604 	.word	0xf0054604
   14390:	4603fd31 	.word	0x4603fd31
   14394:	4a13b140 	.word	0x4a13b140
   14398:	0028f104 	.word	0x0028f104
   1439c:	e882c803 	.word	0xe882c803
   143a0:	46180003 	.word	0x46180003
   143a4:	bd30b009 	.word	0xbd30b009
   143a8:	1200e9dd 	.word	0x1200e9dd
   143ac:	f0004620 	.word	0xf0004620
   143b0:	4603f9ab 	.word	0x4603f9ab
   143b4:	d1ee2800 	.word	0xd1ee2800
   143b8:	490c4b0b 	.word	0x490c4b0b
   143bc:	4a0d480c 	.word	0x4a0d480c
   143c0:	4d0d9303 	.word	0x4d0d9303
   143c4:	91044b0d 	.word	0x91044b0d
   143c8:	490d9005 	.word	0x490d9005
   143cc:	9307a802 	.word	0x9307a802
   143d0:	92029506 	.word	0x92029506
   143d4:	fa3af00a 	.word	0xfa3af00a
   143d8:	e7dc4603 	.word	0xe7dc4603
   143dc:	4618230e 	.word	0x4618230e
   143e0:	bf004770 	.word	0xbf004770
   143e4:	200204a8 	.word	0x200204a8
   143e8:	0001a0c9 	.word	0x0001a0c9
   143ec:	0001a199 	.word	0x0001a199
   143f0:	00014d25 	.word	0x00014d25
   143f4:	00019fc9 	.word	0x00019fc9
   143f8:	00014349 	.word	0x00014349
   143fc:	00014345 	.word	0x00014345
   14400:	200204b0 	.word	0x200204b0

00014404 <rpc_transport_rx_handle>:
   14404:	b508b160 	.word	0xb508b160
   14408:	b2db6843 	.word	0xb2db6843
   1440c:	d00e2b02 	.word	0xd00e2b02
   14410:	0c1b6803 	.word	0x0c1b6803
   14414:	d0052b02 	.word	0xd0052b02
   14418:	d00e2b04 	.word	0xd00e2b04
   1441c:	bd082000 	.word	0xbd082000
   14420:	47702000 	.word	0x47702000
   14424:	f00b6880 	.word	0xf00b6880
   14428:	2000f993 	.word	0x2000f993
   1442c:	4601bd08 	.word	0x4601bd08
   14430:	4008e8bd 	.word	0x4008e8bd
   14434:	f00a4803 	.word	0xf00a4803
   14438:	4802b8fb 	.word	0x4802b8fb
   1443c:	fa66f00a 	.word	0xfa66f00a
   14440:	bd082000 	.word	0xbd082000
   14444:	200204b0 	.word	0x200204b0
   14448:	bf004770 	.word	0xbf004770

0001444c <rpc_transport_ipc_fault_handler>:
   1444c:	b916f000 	.word	0xb916f000

00014450 <nrf_socket>:
   14450:	4604b570 	.word	0x4604b570
   14454:	4616460d 	.word	0x4616460d
   14458:	f8bef007 	.word	0xf8bef007
   1445c:	6803b130 	.word	0x6803b130
   14460:	46294632 	.word	0x46294632
   14464:	e8bd4620 	.word	0xe8bd4620
   14468:	47184070 	.word	0x47184070
   1446c:	30fff04f 	.word	0x30fff04f
   14470:	bf00bd70 	.word	0xbf00bd70

00014474 <nrf_close>:
   14474:	4604b510 	.word	0x4604b510
   14478:	f902f007 	.word	0xf902f007
   1447c:	6843b120 	.word	0x6843b120
   14480:	e8bd4620 	.word	0xe8bd4620
   14484:	47184010 	.word	0x47184010
   14488:	30fff04f 	.word	0x30fff04f
   1448c:	bf00bd10 	.word	0xbf00bd10

00014490 <nrf_sendto>:
   14490:	47f0e92d 	.word	0x47f0e92d
   14494:	e9dd460d 	.word	0xe9dd460d
   14498:	46168908 	.word	0x46168908
   1449c:	4604461f 	.word	0x4604461f
   144a0:	f8eef007 	.word	0xf8eef007
   144a4:	e9cdb158 	.word	0xe9cdb158
   144a8:	f8d08908 	.word	0xf8d08908
   144ac:	463be008 	.word	0x463be008
   144b0:	46294632 	.word	0x46294632
   144b4:	46f44620 	.word	0x46f44620
   144b8:	47f0e8bd 	.word	0x47f0e8bd
   144bc:	f04f4760 	.word	0xf04f4760
   144c0:	e8bd30ff 	.word	0xe8bd30ff
   144c4:	bf0087f0 	.word	0xbf0087f0

000144c8 <nrf_send>:
   144c8:	41f0e92d 	.word	0x41f0e92d
   144cc:	460eb082 	.word	0x460eb082
   144d0:	46984617 	.word	0x46984617
   144d4:	f0074605 	.word	0xf0074605
   144d8:	b160f8d3 	.word	0xb160f8d3
   144dc:	20004604 	.word	0x20004604
   144e0:	0000e9cd 	.word	0x0000e9cd
   144e4:	463a4643 	.word	0x463a4643
   144e8:	46284631 	.word	0x46284631
   144ec:	47a068a4 	.word	0x47a068a4
   144f0:	e8bdb002 	.word	0xe8bdb002
   144f4:	f04f81f0 	.word	0xf04f81f0
   144f8:	e7f930ff 	.word	0xe7f930ff

000144fc <nrf_recvfrom>:
   144fc:	47f0e92d 	.word	0x47f0e92d
   14500:	e9dd460d 	.word	0xe9dd460d
   14504:	46168908 	.word	0x46168908
   14508:	4604461f 	.word	0x4604461f
   1450c:	f8b8f007 	.word	0xf8b8f007
   14510:	e9cdb158 	.word	0xe9cdb158
   14514:	f8d08908 	.word	0xf8d08908
   14518:	463be00c 	.word	0x463be00c
   1451c:	46294632 	.word	0x46294632
   14520:	46f44620 	.word	0x46f44620
   14524:	47f0e8bd 	.word	0x47f0e8bd
   14528:	f04f4760 	.word	0xf04f4760
   1452c:	e8bd30ff 	.word	0xe8bd30ff
   14530:	bf0087f0 	.word	0xbf0087f0

00014534 <nrf_recv>:
   14534:	41f0e92d 	.word	0x41f0e92d
   14538:	460eb082 	.word	0x460eb082
   1453c:	46984617 	.word	0x46984617
   14540:	f0074605 	.word	0xf0074605
   14544:	b160f89d 	.word	0xb160f89d
   14548:	20004604 	.word	0x20004604
   1454c:	0000e9cd 	.word	0x0000e9cd
   14550:	463a4643 	.word	0x463a4643
   14554:	46284631 	.word	0x46284631
   14558:	47a068e4 	.word	0x47a068e4
   1455c:	e8bdb002 	.word	0xe8bdb002
   14560:	f04f81f0 	.word	0xf04f81f0
   14564:	e7f930ff 	.word	0xe7f930ff

00014568 <nrf_connect>:
   14568:	460db570 	.word	0x460db570
   1456c:	46044616 	.word	0x46044616
   14570:	f886f007 	.word	0xf886f007
   14574:	6943b130 	.word	0x6943b130
   14578:	46294632 	.word	0x46294632
   1457c:	e8bd4620 	.word	0xe8bd4620
   14580:	47184070 	.word	0x47184070
   14584:	30fff04f 	.word	0x30fff04f
   14588:	bf00bd70 	.word	0xbf00bd70

0001458c <nrf_listen>:
   1458c:	460db570 	.word	0x460db570
   14590:	f0074604 	.word	0xf0074604
   14594:	b128f875 	.word	0xb128f875
   14598:	46296983 	.word	0x46296983
   1459c:	e8bd4620 	.word	0xe8bd4620
   145a0:	47184070 	.word	0x47184070
   145a4:	30fff04f 	.word	0x30fff04f
   145a8:	bf00bd70 	.word	0xbf00bd70

000145ac <nrf_accept>:
   145ac:	41f0e92d 	.word	0x41f0e92d
   145b0:	4616460d 	.word	0x4616460d
   145b4:	f0074604 	.word	0xf0074604
   145b8:	b140f863 	.word	0xb140f863
   145bc:	463269c7 	.word	0x463269c7
   145c0:	46204629 	.word	0x46204629
   145c4:	e8bd46bc 	.word	0xe8bd46bc
   145c8:	230041f0 	.word	0x230041f0
   145cc:	f04f4760 	.word	0xf04f4760
   145d0:	e8bd30ff 	.word	0xe8bd30ff
   145d4:	bf0081f0 	.word	0xbf0081f0

000145d8 <nrf_bind>:
   145d8:	460db570 	.word	0x460db570
   145dc:	46044616 	.word	0x46044616
   145e0:	f84ef007 	.word	0xf84ef007
   145e4:	6903b130 	.word	0x6903b130
   145e8:	46294632 	.word	0x46294632
   145ec:	e8bd4620 	.word	0xe8bd4620
   145f0:	47184070 	.word	0x47184070
   145f4:	30fff04f 	.word	0x30fff04f
   145f8:	bf00bd70 	.word	0xbf00bd70

000145fc <nrf_setsockopt>:
   145fc:	41f0e92d 	.word	0x41f0e92d
   14600:	8018f8dd 	.word	0x8018f8dd
   14604:	4616460d 	.word	0x4616460d
   14608:	4604461f 	.word	0x4604461f
   1460c:	f838f007 	.word	0xf838f007
   14610:	f8cdb158 	.word	0xf8cdb158
   14614:	f8d08018 	.word	0xf8d08018
   14618:	463be020 	.word	0x463be020
   1461c:	46294632 	.word	0x46294632
   14620:	46f44620 	.word	0x46f44620
   14624:	41f0e8bd 	.word	0x41f0e8bd
   14628:	f04f4760 	.word	0xf04f4760
   1462c:	e8bd30ff 	.word	0xe8bd30ff
   14630:	bf0081f0 	.word	0xbf0081f0

00014634 <nrf_getsockopt>:
   14634:	41f0e92d 	.word	0x41f0e92d
   14638:	8018f8dd 	.word	0x8018f8dd
   1463c:	4616460d 	.word	0x4616460d
   14640:	4604461f 	.word	0x4604461f
   14644:	f81cf007 	.word	0xf81cf007
   14648:	f8cdb158 	.word	0xf8cdb158
   1464c:	f8d08018 	.word	0xf8d08018
   14650:	463be024 	.word	0x463be024
   14654:	46294632 	.word	0x46294632
   14658:	46f44620 	.word	0x46f44620
   1465c:	41f0e8bd 	.word	0x41f0e8bd
   14660:	f04f4760 	.word	0xf04f4760
   14664:	e8bd30ff 	.word	0xe8bd30ff
   14668:	bf0081f0 	.word	0xbf0081f0

0001466c <nrf_getaddrinfo>:
   1466c:	b8f8f00d 	.word	0xb8f8f00d

00014670 <nrf_freeaddrinfo>:
   14670:	b8f8f00d 	.word	0xb8f8f00d

00014674 <nrf_poll>:
   14674:	b8f8f00d 	.word	0xb8f8f00d

00014678 <nrf_fcntl>:
   14678:	b950f00d 	.word	0xb950f00d

0001467c <bsd_platform_error_handler>:
   1467c:	f7f9b508 	.word	0xf7f9b508
   14680:	bd08f805 	.word	0xbd08f805

00014684 <bsd_init>:
   14684:	4c06b510 	.word	0x4c06b510
   14688:	b92b7823 	.word	0xb92b7823
   1468c:	ff38f006 	.word	0xff38f006
   14690:	2301b908 	.word	0x2301b908
   14694:	bd107023 	.word	0xbd107023
   14698:	30fff04f 	.word	0x30fff04f
   1469c:	bf00bd10 	.word	0xbf00bd10
   146a0:	20027405 	.word	0x20027405

000146a4 <symbol_000fa2a>:
   146a4:	2300b110 	.word	0x2300b110
   146a8:	3300e9c0 	.word	0x3300e9c0
   146ac:	bf004770 	.word	0xbf004770

000146b0 <symbol_00066b4>:
   146b0:	d0052802 	.word	0xd0052802
   146b4:	28034b03 	.word	0x28034b03
   146b8:	4618bf0c 	.word	0x4618bf0c
   146bc:	47702000 	.word	0x47702000
   146c0:	47704801 	.word	0x47704801
   146c4:	00026a50 	.word	0x00026a50
   146c8:	00026a20 	.word	0x00026a20

000146cc <symbol_000194a>:
   146cc:	b159b160 	.word	0xb159b160
   146d0:	6806b570 	.word	0x6806b570
   146d4:	6a4bb966 	.word	0x6a4bb966
   146d8:	460d4604 	.word	0x460d4604
   146dc:	60604798 	.word	0x60604798
   146e0:	6025b120 	.word	0x6025b120
   146e4:	bd704630 	.word	0xbd704630
   146e8:	47704802 	.word	0x47704802
   146ec:	bd704802 	.word	0xbd704802
   146f0:	bd704800 	.word	0xbd704800
   146f4:	ffffc180 	.word	0xffffc180
   146f8:	ffffc080 	.word	0xffffc080

000146fc <symbol_00005ae>:
   146fc:	6800b110 	.word	0x6800b110
   14700:	7800b100 	.word	0x7800b100
   14704:	bf004770 	.word	0xbf004770

00014708 <rpc_transport_ipc_rx_init>:
   14708:	f0002800 	.word	0xf0002800
   1470c:	e92d80ff 	.word	0xe92d80ff
   14710:	68054ff0 	.word	0x68054ff0
   14714:	2d00b095 	.word	0x2d00b095
   14718:	80eef000 	.word	0x80eef000
   1471c:	2b006883 	.word	0x2b006883
   14720:	80eaf000 	.word	0x80eaf000
   14724:	2f006907 	.word	0x2f006907
   14728:	80e6f000 	.word	0x80e6f000
   1472c:	2c006a84 	.word	0x2c006a84
   14730:	80e2f000 	.word	0x80e2f000
   14734:	2c1b6844 	.word	0x2c1b6844
   14738:	80e3f240 	.word	0x80e3f240
   1473c:	2c0b68c4 	.word	0x2c0b68c4
   14740:	80dff240 	.word	0x80dff240
   14744:	e014f8d0 	.word	0xe014f8d0
   14748:	0f17f1be 	.word	0x0f17f1be
   1474c:	80d9f240 	.word	0x80d9f240
   14750:	46042600 	.word	0x46042600
   14754:	e9cd486f 	.word	0xe9cd486f
   14758:	f8df1200 	.word	0xf8df1200
   1475c:	496ea1d8 	.word	0x496ea1d8
   14760:	6ba08006 	.word	0x6ba08006
   14764:	c1d0f8df 	.word	0xc1d0f8df
   14768:	81d0f8df 	.word	0x81d0f8df
   1476c:	b1d0f8df 	.word	0xb1d0f8df
   14770:	91d0f8df 	.word	0x91d0f8df
   14774:	600e4672 	.word	0x600e4672
   14778:	0000f8ca 	.word	0x0000f8ca
   1477c:	46384631 	.word	0x46384631
   14780:	6000f8cc 	.word	0x6000f8cc
   14784:	3000f8cb 	.word	0x3000f8cb
   14788:	6000f8c8 	.word	0x6000f8c8
   1478c:	6000f8c9 	.word	0x6000f8c9
   14790:	f953f010 	.word	0xf953f010
   14794:	463869e3 	.word	0x463869e3
   14798:	69a3603b 	.word	0x69a3603b
   1479c:	f001607b 	.word	0xf001607b
   147a0:	2201fd45 	.word	0x2201fd45
   147a4:	0c04f04f 	.word	0x0c04f04f
   147a8:	495d4b5c 	.word	0x495d4b5c
   147ac:	5610f8c3 	.word	0x5610f8c3
   147b0:	20806809 	.word	0x20806809
   147b4:	495b9104 	.word	0x495b9104
   147b8:	e010f8dd 	.word	0xe010f8dd
   147bc:	6614f8c3 	.word	0x6614f8c3
   147c0:	702e6809 	.word	0x702e6809
   147c4:	706e9103 	.word	0x706e9103
   147c8:	70aa70ee 	.word	0x70aa70ee
   147cc:	6aa19903 	.word	0x6aa19903
   147d0:	e000f8db 	.word	0xe000f8db
   147d4:	6ae16069 	.word	0x6ae16069
   147d8:	60a99c01 	.word	0x60a99c01
   147dc:	9c0060ec 	.word	0x9c0060ec
   147e0:	61af4951 	.word	0x61af4951
   147e4:	e014f8c5 	.word	0xe014f8c5
   147e8:	f8c3612c 	.word	0xf8c3612c
   147ec:	680c2590 	.word	0x680c2590
   147f0:	6192f5a1 	.word	0x6192f5a1
   147f4:	9c059405 	.word	0x9c059405
   147f8:	c598f8c3 	.word	0xc598f8c3
   147fc:	4498f8d1 	.word	0x4498f8d1
   14800:	6780f44f 	.word	0x6780f44f
   14804:	9c069406 	.word	0x9c069406
   14808:	f8c32410 	.word	0xf8c32410
   1480c:	f8d145a0 	.word	0xf8d145a0
   14810:	4d4644a0 	.word	0x4d4644a0
   14814:	9c079407 	.word	0x9c079407
   14818:	f8c32440 	.word	0xf8c32440
   1481c:	f8d145a8 	.word	0xf8d145a8
   14820:	940844a8 	.word	0x940844a8
   14824:	f8c39c08 	.word	0xf8c39c08
   14828:	f8d105ac 	.word	0xf8d105ac
   1482c:	900904ac 	.word	0x900904ac
   14830:	f8c39809 	.word	0xf8c39809
   14834:	68086100 	.word	0x68086100
   14838:	980a900a 	.word	0x980a900a
   1483c:	6108f8c3 	.word	0x6108f8c3
   14840:	900b6888 	.word	0x900b6888
   14844:	f8c3980b 	.word	0xf8c3980b
   14848:	69086110 	.word	0x69086110
   1484c:	980c900c 	.word	0x980c900c
   14850:	6118f8c3 	.word	0x6118f8c3
   14854:	900d6988 	.word	0x900d6988
   14858:	f8c3980d 	.word	0xf8c3980d
   1485c:	69c8611c 	.word	0x69c8611c
   14860:	7101f501 	.word	0x7101f501
   14864:	980e900e 	.word	0x980e900e
   14868:	0304f8d3 	.word	0x0304f8d3
   1486c:	f8c34310 	.word	0xf8c34310
   14870:	680c0304 	.word	0x680c0304
   14874:	940f482e 	.word	0x940f482e
   14878:	f8d39c0f 	.word	0xf8d39c0f
   1487c:	ea444304 	.word	0xea444304
   14880:	f8c3040c 	.word	0xf8c3040c
   14884:	680c4304 	.word	0x680c4304
   14888:	9c109410 	.word	0x9c109410
   1488c:	4304f8d3 	.word	0x4304f8d3
   14890:	0410f044 	.word	0x0410f044
   14894:	4304f8c3 	.word	0x4304f8c3
   14898:	9411680c 	.word	0x9411680c
   1489c:	f8d39c11 	.word	0xf8d39c11
   148a0:	f0444304 	.word	0xf0444304
   148a4:	f8c30440 	.word	0xf8c30440
   148a8:	680c4304 	.word	0x680c4304
   148ac:	9c129412 	.word	0x9c129412
   148b0:	4304f8d3 	.word	0x4304f8d3
   148b4:	0480f044 	.word	0x0480f044
   148b8:	4304f8c3 	.word	0x4304f8c3
   148bc:	3000f8da 	.word	0x3000f8da
   148c0:	015b6809 	.word	0x015b6809
   148c4:	b2db9113 	.word	0xb2db9113
   148c8:	f8c89913 	.word	0xf8c89913
   148cc:	f8802000 	.word	0xf8802000
   148d0:	f8c0332a 	.word	0xf8c0332a
   148d4:	60477184 	.word	0x60477184
   148d8:	f8c59602 	.word	0xf8c59602
   148dc:	f8d56610 	.word	0xf8d56610
   148e0:	93023610 	.word	0x93023610
   148e4:	f8d89b02 	.word	0xf8d89b02
   148e8:	2b013000 	.word	0x2b013000
   148ec:	f8d9d0fb 	.word	0xf8d9d0fb
   148f0:	b0150000 	.word	0xb0150000
   148f4:	8ff0e8bd 	.word	0x8ff0e8bd
   148f8:	000ef24c 	.word	0x000ef24c
   148fc:	e8bdb015 	.word	0xe8bdb015
   14900:	f24c8ff0 	.word	0xf24c8ff0
   14904:	b0150009 	.word	0xb0150009
   14908:	8ff0e8bd 	.word	0x8ff0e8bd
   1490c:	000ef24c 	.word	0x000ef24c
   14910:	bf004770 	.word	0xbf004770
   14914:	20025e18 	.word	0x20025e18
   14918:	200204c0 	.word	0x200204c0
   1491c:	4002a000 	.word	0x4002a000
   14920:	4002a610 	.word	0x4002a610
   14924:	4002a614 	.word	0x4002a614
   14928:	4002a590 	.word	0x4002a590
   1492c:	40005000 	.word	0x40005000
   14930:	e000e100 	.word	0xe000e100
   14934:	200204b8 	.word	0x200204b8
   14938:	200204c4 	.word	0x200204c4
   1493c:	200204bc 	.word	0x200204bc
   14940:	200204c8 	.word	0x200204c8
   14944:	200204b4 	.word	0x200204b4

00014948 <IPC_IRQHandler>:
   14948:	4ff0e92d 	.word	0x4ff0e92d
   1494c:	6580f44f 	.word	0x6580f44f
   14950:	b0874ca7 	.word	0xb0874ca7
   14954:	5084f8c4 	.word	0x5084f8c4
   14958:	8f4ff3bf 	.word	0x8f4ff3bf
   1495c:	8f6ff3bf 	.word	0x8f6ff3bf
   14960:	f8c44ea4 	.word	0xf8c44ea4
   14964:	f8d65184 	.word	0xf8d65184
   14968:	061f330c 	.word	0x061f330c
   1496c:	80c8f100 	.word	0x80c8f100
   14970:	f8d34ba0 	.word	0xf8d34ba0
   14974:	07d0230c 	.word	0x07d0230c
   14978:	80d4f100 	.word	0x80d4f100
   1497c:	230cf8d3 	.word	0x230cf8d3
   14980:	0240f012 	.word	0x0240f012
   14984:	80b6f040 	.word	0x80b6f040
   14988:	130cf8d3 	.word	0x130cf8d3
   1498c:	f1000749 	.word	0xf1000749
   14990:	f8d380e6 	.word	0xf8d380e6
   14994:	06da330c 	.word	0x06da330c
   14998:	809df140 	.word	0x809df140
   1499c:	4a952100 	.word	0x4a952100
   149a0:	f8c24b95 	.word	0xf8c24b95
   149a4:	681b1110 	.word	0x681b1110
   149a8:	9b049304 	.word	0x9b049304
   149ac:	8270f8df 	.word	0x8270f8df
   149b0:	f8df4f92 	.word	0xf8df4f92
   149b4:	f8d89270 	.word	0xf8d89270
   149b8:	f8daa000 	.word	0xf8daa000
   149bc:	29001000 	.word	0x29001000
   149c0:	2200d03f 	.word	0x2200d03f
   149c4:	e0024614 	.word	0xe0024614
   149c8:	428c3401 	.word	0x428c3401
   149cc:	eb0ad227 	.word	0xeb0ad227
   149d0:	68ab05c4 	.word	0x68ab05c4
   149d4:	d0f72b00 	.word	0xd0f72b00
   149d8:	b2f6686e 	.word	0xb2f6686e
   149dc:	d1f32e01 	.word	0xd1f32e01
   149e0:	f8b96868 	.word	0xf8b96868
   149e4:	ebb33000 	.word	0xebb33000
   149e8:	d1ed4f10 	.word	0xd1ed4f10
   149ec:	3301686a 	.word	0x3301686a
   149f0:	02fff022 	.word	0x02fff022
   149f4:	0202f042 	.word	0x0202f042
   149f8:	68a8606a 	.word	0x68a8606a
   149fc:	3000f8a9 	.word	0x3000f8a9
   14a00:	fd00f7ff 	.word	0xfd00f7ff
   14a04:	b9284632 	.word	0xb9284632
   14a08:	f023686b 	.word	0xf023686b
   14a0c:	f04303ff 	.word	0xf04303ff
   14a10:	606b0303 	.word	0x606b0303
   14a14:	1000f8da 	.word	0x1000f8da
   14a18:	428c3401 	.word	0x428c3401
   14a1c:	2a00d3d7 	.word	0x2a00d3d7
   14a20:	b171d1cd 	.word	0xb171d1cd
   14a24:	eb0a4613 	.word	0xeb0a4613
   14a28:	689002c3 	.word	0x689002c3
   14a2c:	b1303301 	.word	0xb1303301
   14a30:	b004f8d2 	.word	0xb004f8d2
   14a34:	fb8bfa5f 	.word	0xfb8bfa5f
   14a38:	0f01f1bb 	.word	0x0f01f1bb
   14a3c:	428bd003 	.word	0x428bd003
   14a40:	f04fd1f1 	.word	0xf04fd1f1
   14a44:	f8d70b00 	.word	0xf8d70b00
   14a48:	f8daa000 	.word	0xf8daa000
   14a4c:	2a002000 	.word	0x2a002000
   14a50:	2100d03d 	.word	0x2100d03d
   14a54:	e002460c 	.word	0xe002460c
   14a58:	42943401 	.word	0x42943401
   14a5c:	eb0ad227 	.word	0xeb0ad227
   14a60:	68ab05c4 	.word	0x68ab05c4
   14a64:	d0f72b00 	.word	0xd0f72b00
   14a68:	b2f6686e 	.word	0xb2f6686e
   14a6c:	d1f32e01 	.word	0xd1f32e01
   14a70:	f8b96868 	.word	0xf8b96868
   14a74:	ebb33000 	.word	0xebb33000
   14a78:	d1ed4f10 	.word	0xd1ed4f10
   14a7c:	3301686a 	.word	0x3301686a
   14a80:	02fff022 	.word	0x02fff022
   14a84:	0202f042 	.word	0x0202f042
   14a88:	68a8606a 	.word	0x68a8606a
   14a8c:	3000f8a9 	.word	0x3000f8a9
   14a90:	fcb8f7ff 	.word	0xfcb8f7ff
   14a94:	b9284631 	.word	0xb9284631
   14a98:	f022686a 	.word	0xf022686a
   14a9c:	f04303ff 	.word	0xf04303ff
   14aa0:	606b0303 	.word	0x606b0303
   14aa4:	2000f8da 	.word	0x2000f8da
   14aa8:	42943401 	.word	0x42943401
   14aac:	2900d3d7 	.word	0x2900d3d7
   14ab0:	b162d1cd 	.word	0xb162d1cd
   14ab4:	eb0a460b 	.word	0xeb0a460b
   14ab8:	688801c3 	.word	0x688801c3
   14abc:	b1203301 	.word	0xb1203301
   14ac0:	b2c96849 	.word	0xb2c96849
   14ac4:	f43f2901 	.word	0xf43f2901
   14ac8:	4293af76 	.word	0x4293af76
   14acc:	f1bbd1f3 	.word	0xf1bbd1f3
   14ad0:	f47f0f00 	.word	0xf47f0f00
   14ad4:	f44faf70 	.word	0xf44faf70
   14ad8:	4b496180 	.word	0x4b496180
   14adc:	681b4a44 	.word	0x681b4a44
   14ae0:	b2db015b 	.word	0xb2db015b
   14ae4:	332af882 	.word	0x332af882
   14ae8:	1184f8c2 	.word	0x1184f8c2
   14aec:	b0076051 	.word	0xb0076051
   14af0:	8ff0e8bd 	.word	0x8ff0e8bd
   14af4:	4b432206 	.word	0x4b432206
   14af8:	b007601a 	.word	0xb007601a
   14afc:	8ff0e8bd 	.word	0x8ff0e8bd
   14b00:	fc7cf001 	.word	0xfc7cf001
   14b04:	fde8f001 	.word	0xfde8f001
   14b08:	d1492800 	.word	0xd1492800
   14b0c:	f8c64b3e 	.word	0xf8c64b3e
   14b10:	681b011c 	.word	0x681b011c
   14b14:	9b019301 	.word	0x9b019301
   14b18:	f8d34b36 	.word	0xf8d34b36
   14b1c:	07d0230c 	.word	0x07d0230c
   14b20:	af2cf57f 	.word	0xaf2cf57f
   14b24:	f2482000 	.word	0xf2482000
   14b28:	49380202 	.word	0x49380202
   14b2c:	0100f8c3 	.word	0x0100f8c3
   14b30:	91026809 	.word	0x91026809
   14b34:	f8d39902 	.word	0xf8d39902
   14b38:	42933614 	.word	0x42933614
   14b3c:	d81ed040 	.word	0xd81ed040
   14b40:	d04f2b00 	.word	0xd04f2b00
   14b44:	d9422b02 	.word	0xd9422b02
   14b48:	0201f248 	.word	0x0201f248
   14b4c:	d1494293 	.word	0xd1494293
   14b50:	22072003 	.word	0x22072003
   14b54:	4b2e492b 	.word	0x4b2e492b
   14b58:	601a6008 	.word	0x601a6008
   14b5c:	4d29e7cd 	.word	0x4d29e7cd
   14b60:	f8c36829 	.word	0xf8c36829
   14b64:	29012108 	.word	0x29012108
   14b68:	d05d492a 	.word	0xd05d492a
   14b6c:	9203680a 	.word	0x9203680a
   14b70:	f8d39a03 	.word	0xf8d39a03
   14b74:	06db330c 	.word	0x06db330c
   14b78:	af10f53f 	.word	0xaf10f53f
   14b7c:	4a26e716 	.word	0x4a26e716
   14b80:	d8144293 	.word	0xd8144293
   14b84:	6f88f1b3 	.word	0x6f88f1b3
   14b88:	f248d814 	.word	0xf248d814
   14b8c:	42930203 	.word	0x42930203
   14b90:	2003d128 	.word	0x2003d128
   14b94:	491b2204 	.word	0x491b2204
   14b98:	60084b1d 	.word	0x60084b1d
   14b9c:	e7ac601a 	.word	0xe7ac601a
   14ba0:	f88423e0 	.word	0xf88423e0
   14ba4:	6065332a 	.word	0x6065332a
   14ba8:	e8bdb007 	.word	0xe8bdb007
   14bac:	4a1b8ff0 	.word	0x4a1b8ff0
   14bb0:	d1174293 	.word	0xd1174293
   14bb4:	49132003 	.word	0x49132003
   14bb8:	60084a15 	.word	0x60084a15
   14bbc:	e79c6013 	.word	0xe79c6013
   14bc0:	22062003 	.word	0x22062003
   14bc4:	4b12490f 	.word	0x4b12490f
   14bc8:	601a6008 	.word	0x601a6008
   14bcc:	2303e795 	.word	0x2303e795
   14bd0:	490c4618 	.word	0x490c4618
   14bd4:	600b4a0e 	.word	0x600b4a0e
   14bd8:	b0076013 	.word	0xb0076013
   14bdc:	4ff0e8bd 	.word	0x4ff0e8bd
   14be0:	bc34f7ff 	.word	0xbc34f7ff
   14be4:	49072303 	.word	0x49072303
   14be8:	600b4a09 	.word	0x600b4a09
   14bec:	e7846013 	.word	0xe7846013
   14bf0:	e000e100 	.word	0xe000e100
   14bf4:	4002a000 	.word	0x4002a000
   14bf8:	4002a110 	.word	0x4002a110
   14bfc:	200204c0 	.word	0x200204c0
   14c00:	200204b8 	.word	0x200204b8
   14c04:	200204bc 	.word	0x200204bc
   14c08:	4002a11c 	.word	0x4002a11c
   14c0c:	4002a100 	.word	0x4002a100
   14c10:	200204b4 	.word	0x200204b4
   14c14:	4002a108 	.word	0x4002a108
   14c18:	04400004 	.word	0x04400004
   14c1c:	05500001 	.word	0x05500001
   14c20:	200204c4 	.word	0x200204c4
   14c24:	20025e18 	.word	0x20025e18
   14c28:	680b4a37 	.word	0x680b4a37
   14c2c:	93056812 	.word	0x93056812
   14c30:	48366893 	.word	0x48366893
   14c34:	60034936 	.word	0x60034936
   14c38:	9a056854 	.word	0x9a056854
   14c3c:	b16b600c 	.word	0xb16b600c
   14c40:	681bb164 	.word	0x681bb164
   14c44:	d8022b10 	.word	0xd8022b10
   14c48:	2a106822 	.word	0x2a106822
   14c4c:	2103d90c 	.word	0x2103d90c
   14c50:	0206f24c 	.word	0x0206f24c
   14c54:	60294b2f 	.word	0x60294b2f
   14c58:	e74e601a 	.word	0xe74e601a
   14c5c:	22102103 	.word	0x22102103
   14c60:	60294b2c 	.word	0x60294b2c
   14c64:	e748601a 	.word	0xe748601a
   14c68:	80b4f8df 	.word	0x80b4f8df
   14c6c:	d0422a00 	.word	0xd0422a00
   14c70:	f1042300 	.word	0xf1042300
   14c74:	461e0904 	.word	0x461e0904
   14c78:	3601e002 	.word	0x3601e002
   14c7c:	d22a4296 	.word	0xd22a4296
   14c80:	19e100f7 	.word	0x19e100f7
   14c84:	28006888 	.word	0x28006888
   14c88:	f8d1d0f7 	.word	0xf8d1d0f7
   14c8c:	fa5fa004 	.word	0xfa5fa004
   14c90:	f1bafa8a 	.word	0xf1bafa8a
   14c94:	d1f00f01 	.word	0xd1f00f01
   14c98:	c004f8d1 	.word	0xc004f8d1
   14c9c:	0000f8b8 	.word	0x0000f8b8
   14ca0:	4f1cebb0 	.word	0x4f1cebb0
   14ca4:	684bd1e9 	.word	0x684bd1e9
   14ca8:	f0231c42 	.word	0xf0231c42
   14cac:	f04303ff 	.word	0xf04303ff
   14cb0:	604b0302 	.word	0x604b0302
   14cb4:	f8a86888 	.word	0xf8a86888
   14cb8:	f7ff2000 	.word	0xf7ff2000
   14cbc:	4653fba3 	.word	0x4653fba3
   14cc0:	f859b938 	.word	0xf859b938
   14cc4:	f0222007 	.word	0xf0222007
   14cc8:	f04202ff 	.word	0xf04202ff
   14ccc:	f8490203 	.word	0xf8490203
   14cd0:	68222007 	.word	0x68222007
   14cd4:	2b00e7d1 	.word	0x2b00e7d1
   14cd8:	b912d1c8 	.word	0xb912d1c8
   14cdc:	4293e00b 	.word	0x4293e00b
   14ce0:	eb04d009 	.word	0xeb04d009
   14ce4:	688801c3 	.word	0x688801c3
   14ce8:	28003301 	.word	0x28003301
   14cec:	6849d0f7 	.word	0x6849d0f7
   14cf0:	2901b2c9 	.word	0x2901b2c9
   14cf4:	2002d1f3 	.word	0x2002d1f3
   14cf8:	f44f4b07 	.word	0xf44f4b07
   14cfc:	4a076180 	.word	0x4a076180
   14d00:	6028681b 	.word	0x6028681b
   14d04:	bf00e6ec 	.word	0xbf00e6ec
   14d08:	200204c8 	.word	0x200204c8
   14d0c:	200204c4 	.word	0x200204c4
   14d10:	200204c0 	.word	0x200204c0
   14d14:	200204b4 	.word	0x200204b4
   14d18:	200204b8 	.word	0x200204b8
   14d1c:	e000e100 	.word	0xe000e100
   14d20:	20025e18 	.word	0x20025e18

00014d24 <rpc_transport_msg_free>:
   14d24:	4b18b430 	.word	0x4b18b430
   14d28:	6825681c 	.word	0x6825681c
   14d2c:	68a3b16d 	.word	0x68a3b16d
   14d30:	d0274283 	.word	0xd0274283
   14d34:	e0022300 	.word	0xe0022300
   14d38:	42816889 	.word	0x42816889
   14d3c:	3301d019 	.word	0x3301d019
   14d40:	42ab00da 	.word	0x42ab00da
   14d44:	0102eb04 	.word	0x0102eb04
   14d48:	4b10d1f6 	.word	0x4b10d1f6
   14d4c:	6825681c 	.word	0x6825681c
   14d50:	68a3b16d 	.word	0x68a3b16d
   14d54:	d0154283 	.word	0xd0154283
   14d58:	e0022300 	.word	0xe0022300
   14d5c:	42816889 	.word	0x42816889
   14d60:	3301d007 	.word	0x3301d007
   14d64:	429d00da 	.word	0x429d00da
   14d68:	0102eb04 	.word	0x0102eb04
   14d6c:	bc30d1f6 	.word	0xbc30d1f6
   14d70:	32044770 	.word	0x32044770
   14d74:	f02358a3 	.word	0xf02358a3
   14d78:	f04303ff 	.word	0xf04303ff
   14d7c:	50a30303 	.word	0x50a30303
   14d80:	4770bc30 	.word	0x4770bc30
   14d84:	e7f52204 	.word	0xe7f52204
   14d88:	200204c4 	.word	0x200204c4
   14d8c:	200204c0 	.word	0x200204c0

00014d90 <block_cipher_df>:
   14d90:	4ff0e92d 	.word	0x4ff0e92d
   14d94:	7fc0f5b2 	.word	0x7fc0f5b2
   14d98:	7d49f5ad 	.word	0x7d49f5ad
   14d9c:	8119f200 	.word	0x8119f200
   14da0:	460c4692 	.word	0x460c4692
   14da4:	72d0f44f 	.word	0x72d0f44f
   14da8:	46812100 	.word	0x46812100
   14dac:	f00fa860 	.word	0xf00fa860
   14db0:	a81afe44 	.word	0xa81afe44
   14db4:	fcd8f00a 	.word	0xfcd8f00a
   14db8:	23302000 	.word	0x23302000
   14dbc:	ea4fad66 	.word	0xea4fad66
   14dc0:	f8ad221a 	.word	0xf8ad221a
   14dc4:	f88d0190 	.word	0xf88d0190
   14dc8:	46212192 	.word	0x46212192
   14dcc:	46284652 	.word	0x46284652
   14dd0:	3197f88d 	.word	0x3197f88d
   14dd4:	a193f88d 	.word	0xa193f88d
   14dd8:	f00fae06 	.word	0xf00fae06
   14ddc:	2280fe01 	.word	0x2280fe01
   14de0:	f8054633 	.word	0xf8054633
   14de4:	af0e200a 	.word	0xaf0e200a
   14de8:	f8031b99 	.word	0xf8031b99
   14dec:	429f1b01 	.word	0x429f1b01
   14df0:	f44fd1fa 	.word	0xf44fd1fa
   14df4:	46317280 	.word	0x46317280
   14df8:	f00aa81a 	.word	0xf00aa81a
   14dfc:	4683fcc1 	.word	0x4683fcc1
   14e00:	f0402800 	.word	0xf0402800
   14e04:	900180c8 	.word	0x900180c8
   14e08:	0a19f10a 	.word	0x0a19f10a
   14e0c:	2210ac02 	.word	0x2210ac02
   14e10:	46202100 	.word	0x46202100
   14e14:	fe11f00f 	.word	0xfe11f00f
   14e18:	ad6446d0 	.word	0xad6446d0
   14e1c:	f8157822 	.word	0xf8157822
   14e20:	f8943c10 	.word	0xf8943c10
   14e24:	f815c001 	.word	0xf815c001
   14e28:	78a01c0f 	.word	0x78a01c0f
   14e2c:	f8154053 	.word	0xf8154053
   14e30:	ea8c2c0e 	.word	0xea8c2c0e
   14e34:	40500c01 	.word	0x40500c01
   14e38:	f81578e1 	.word	0xf81578e1
   14e3c:	f8942c0d 	.word	0xf8942c0d
   14e40:	4051e004 	.word	0x4051e004
   14e44:	2c0cf815 	.word	0x2c0cf815
   14e48:	ea8e7023 	.word	0xea8e7023
   14e4c:	f8150202 	.word	0xf8150202
   14e50:	f8943c0b 	.word	0xf8943c0b
   14e54:	f884e005 	.word	0xf884e005
   14e58:	ea8ec001 	.word	0xea8ec001
   14e5c:	f8150303 	.word	0xf8150303
   14e60:	f894cc0a 	.word	0xf894cc0a
   14e64:	70a0e006 	.word	0x70a0e006
   14e68:	0c0cea8e 	.word	0x0c0cea8e
   14e6c:	0c09f815 	.word	0x0c09f815
   14e70:	e007f894 	.word	0xe007f894
   14e74:	ea8e70e1 	.word	0xea8e70e1
   14e78:	f8150000 	.word	0xf8150000
   14e7c:	f8941c08 	.word	0xf8941c08
   14e80:	7122e008 	.word	0x7122e008
   14e84:	0101ea8e 	.word	0x0101ea8e
   14e88:	2c07f815 	.word	0x2c07f815
   14e8c:	e009f894 	.word	0xe009f894
   14e90:	ea8e7163 	.word	0xea8e7163
   14e94:	7aa30202 	.word	0x7aa30202
   14e98:	ec06f815 	.word	0xec06f815
   14e9c:	c006f884 	.word	0xc006f884
   14ea0:	030eea83 	.word	0x030eea83
   14ea4:	722171e0 	.word	0x722171e0
   14ea8:	72a37262 	.word	0x72a37262
   14eac:	f8157ae1 	.word	0xf8157ae1
   14eb0:	f8943c05 	.word	0xf8943c05
   14eb4:	7b60c00c 	.word	0x7b60c00c
   14eb8:	f815404b 	.word	0xf815404b
   14ebc:	f8152c04 	.word	0xf8152c04
   14ec0:	ea8c1c03 	.word	0xea8c1c03
   14ec4:	40410202 	.word	0x40410202
   14ec8:	c00ef894 	.word	0xc00ef894
   14ecc:	0c02f815 	.word	0x0c02f815
   14ed0:	e00ff894 	.word	0xe00ff894
   14ed4:	0000ea8c 	.word	0x0000ea8c
   14ed8:	cc01f815 	.word	0xcc01f815
   14edc:	ea8e72e3 	.word	0xea8e72e3
   14ee0:	73220c0c 	.word	0x73220c0c
   14ee4:	73a07361 	.word	0x73a07361
   14ee8:	46224623 	.word	0x46224623
   14eec:	a81a2101 	.word	0xa81a2101
   14ef0:	c00ff884 	.word	0xc00ff884
   14ef4:	fbc2f00b 	.word	0xfbc2f00b
   14ef8:	0f10f1b8 	.word	0x0f10f1b8
   14efc:	bf944683 	.word	0xbf944683
   14f00:	0808eba8 	.word	0x0808eba8
   14f04:	0810f1a8 	.word	0x0810f1a8
   14f08:	d1452800 	.word	0xd1452800
   14f0c:	f1b83510 	.word	0xf1b83510
   14f10:	d1830f00 	.word	0xd1830f00
   14f14:	22109d01 	.word	0x22109d01
   14f18:	19784621 	.word	0x19784621
   14f1c:	fd60f00f 	.word	0xfd60f00f
   14f20:	3183f89d 	.word	0x3183f89d
   14f24:	0210f105 	.word	0x0210f105
   14f28:	2a303301 	.word	0x2a303301
   14f2c:	f88d9201 	.word	0xf88d9201
   14f30:	f47f3183 	.word	0xf47f3183
   14f34:	f44faf6c 	.word	0xf44faf6c
   14f38:	46397280 	.word	0x46397280
   14f3c:	f00aa81a 	.word	0xf00aa81a
   14f40:	4683fc1f 	.word	0x4683fc1f
   14f44:	464dbb40 	.word	0x464dbb40
   14f48:	0830f109 	.word	0x0830f109
   14f4c:	461aab16 	.word	0x461aab16
   14f50:	a81a2101 	.word	0xa81a2101
   14f54:	fb92f00b 	.word	0xfb92f00b
   14f58:	b9e84683 	.word	0xb9e84683
   14f5c:	46282210 	.word	0x46282210
   14f60:	4415a916 	.word	0x4415a916
   14f64:	fd3cf00f 	.word	0xfd3cf00f
   14f68:	d1ef4545 	.word	0xd1ef4545
   14f6c:	f00aa81a 	.word	0xf00aa81a
   14f70:	a860fc01 	.word	0xa860fc01
   14f74:	71d0f44f 	.word	0x71d0f44f
   14f78:	fc38f006 	.word	0xfc38f006
   14f7c:	21304638 	.word	0x21304638
   14f80:	fc34f006 	.word	0xfc34f006
   14f84:	21204630 	.word	0x21204630
   14f88:	fc30f006 	.word	0xfc30f006
   14f8c:	21104620 	.word	0x21104620
   14f90:	fc2cf006 	.word	0xfc2cf006
   14f94:	ac02e018 	.word	0xac02e018
   14f98:	f00aa81a 	.word	0xf00aa81a
   14f9c:	a860fbeb 	.word	0xa860fbeb
   14fa0:	71d0f44f 	.word	0x71d0f44f
   14fa4:	fc22f006 	.word	0xfc22f006
   14fa8:	21304638 	.word	0x21304638
   14fac:	fc1ef006 	.word	0xfc1ef006
   14fb0:	21204630 	.word	0x21204630
   14fb4:	fc1af006 	.word	0xfc1af006
   14fb8:	21104620 	.word	0x21104620
   14fbc:	fc16f006 	.word	0xfc16f006
   14fc0:	21304648 	.word	0x21304648
   14fc4:	fc12f006 	.word	0xfc12f006
   14fc8:	f50d4658 	.word	0xf50d4658
   14fcc:	e8bd7d49 	.word	0xe8bd7d49
   14fd0:	f06f8ff0 	.word	0xf06f8ff0
   14fd4:	e7f70b37 	.word	0xe7f70b37

00014fd8 <symbol_000078b>:
   14fd8:	72a0f44f 	.word	0x72a0f44f
   14fdc:	f00f2100 	.word	0xf00f2100
   14fe0:	bf00bd2c 	.word	0xbf00bd2c

00014fe4 <symbol_0001c64>:
   14fe4:	b510b158 	.word	0xb510b158
   14fe8:	30204604 	.word	0x30204604
   14fec:	fbc2f00a 	.word	0xfbc2f00a
   14ff0:	e8bd4620 	.word	0xe8bd4620
   14ff4:	f44f4010 	.word	0xf44f4010
   14ff8:	f00671a0 	.word	0xf00671a0
   14ffc:	4770bbf7 	.word	0x4770bbf7

00015000 <symbol_000ccf0>:
   15000:	6983b5f0 	.word	0x6983b5f0
   15004:	f5b3b0ed 	.word	0xf5b3b0ed
   15008:	f2007fc0 	.word	0xf2007fc0
   1500c:	f5c380e1 	.word	0xf5c380e1
   15010:	429373c0 	.word	0x429373c0
   15014:	80dcf0c0 	.word	0x80dcf0c0
   15018:	46154604 	.word	0x46154604
   1501c:	f44f460e 	.word	0xf44f460e
   15020:	210072c0 	.word	0x210072c0
   15024:	f00fa80c 	.word	0xf00fa80c
   15028:	a90cfd08 	.word	0xa90cfd08
   1502c:	3138f8d4 	.word	0x3138f8d4
   15030:	f8d469a2 	.word	0xf8d469a2
   15034:	4798013c 	.word	0x4798013c
   15038:	f0402800 	.word	0xf0402800
   1503c:	69a780cc 	.word	0x69a780cc
   15040:	b94db106 	.word	0xb94db106
   15044:	463aa90c 	.word	0x463aa90c
   15048:	f7ff4608 	.word	0xf7ff4608
   1504c:	4605fea1 	.word	0x4605fea1
   15050:	4628b188 	.word	0x4628b188
   15054:	bdf0b06d 	.word	0xbdf0b06d
   15058:	462aab0c 	.word	0x462aab0c
   1505c:	463119d8 	.word	0x463119d8
   15060:	fcbef00f 	.word	0xfcbef00f
   15064:	a90c442f 	.word	0xa90c442f
   15068:	4608463a 	.word	0x4608463a
   1506c:	fe90f7ff 	.word	0xfe90f7ff
   15070:	28004605 	.word	0x28004605
   15074:	4668d1ed 	.word	0x4668d1ed
   15078:	46292230 	.word	0x46292230
   1507c:	fcddf00f 	.word	0xfcddf00f
   15080:	f104462e 	.word	0xf104462e
   15084:	7be20720 	.word	0x7be20720
   15088:	0306eb0d 	.word	0x0306eb0d
   1508c:	b2d23201 	.word	0xb2d23201
   15090:	2a0073e2 	.word	0x2a0073e2
   15094:	7ba2d14d 	.word	0x7ba2d14d
   15098:	b2d23201 	.word	0xb2d23201
   1509c:	2a0073a2 	.word	0x2a0073a2
   150a0:	7b62d147 	.word	0x7b62d147
   150a4:	b2d23201 	.word	0xb2d23201
   150a8:	2a007362 	.word	0x2a007362
   150ac:	7b22d141 	.word	0x7b22d141
   150b0:	b2d23201 	.word	0xb2d23201
   150b4:	2a007322 	.word	0x2a007322
   150b8:	7ae2d13b 	.word	0x7ae2d13b
   150bc:	b2d23201 	.word	0xb2d23201
   150c0:	2a0072e2 	.word	0x2a0072e2
   150c4:	7aa2d135 	.word	0x7aa2d135
   150c8:	b2d23201 	.word	0xb2d23201
   150cc:	2a0072a2 	.word	0x2a0072a2
   150d0:	7a62d12f 	.word	0x7a62d12f
   150d4:	b2d23201 	.word	0xb2d23201
   150d8:	bb527262 	.word	0xbb527262
   150dc:	32017a22 	.word	0x32017a22
   150e0:	7222b2d2 	.word	0x7222b2d2
   150e4:	79e2bb2a 	.word	0x79e2bb2a
   150e8:	b2d23201 	.word	0xb2d23201
   150ec:	bb0271e2 	.word	0xbb0271e2
   150f0:	320179a2 	.word	0x320179a2
   150f4:	71a2b2d2 	.word	0x71a2b2d2
   150f8:	7962b9da 	.word	0x7962b9da
   150fc:	b2d23201 	.word	0xb2d23201
   15100:	b9b27162 	.word	0xb9b27162
   15104:	32017922 	.word	0x32017922
   15108:	7122b2d2 	.word	0x7122b2d2
   1510c:	78e2b98a 	.word	0x78e2b98a
   15110:	b2d23201 	.word	0xb2d23201
   15114:	b96270e2 	.word	0xb96270e2
   15118:	320178a2 	.word	0x320178a2
   1511c:	70a2b2d2 	.word	0x70a2b2d2
   15120:	7862b93a 	.word	0x7862b93a
   15124:	b2d23201 	.word	0xb2d23201
   15128:	b9127062 	.word	0xb9127062
   1512c:	32017822 	.word	0x32017822
   15130:	46227022 	.word	0x46227022
   15134:	46382101 	.word	0x46382101
   15138:	faa0f00b 	.word	0xfaa0f00b
   1513c:	28004605 	.word	0x28004605
   15140:	3610d187 	.word	0x3610d187
   15144:	d19e2e30 	.word	0xd19e2e30
   15148:	9b0c9901 	.word	0x9b0c9901
   1514c:	9a0d9800 	.word	0x9a0d9800
   15150:	404a4058 	.word	0x404a4058
   15154:	99029b0e 	.word	0x99029b0e
   15158:	40599000 	.word	0x40599000
   1515c:	9b0f9803 	.word	0x9b0f9803
   15160:	40439201 	.word	0x40439201
   15164:	98049a10 	.word	0x98049a10
   15168:	40509102 	.word	0x40509102
   1516c:	9a119905 	.word	0x9a119905
   15170:	40519303 	.word	0x40519303
   15174:	9a069b12 	.word	0x9a069b12
   15178:	405a9004 	.word	0x405a9004
   1517c:	9b139807 	.word	0x9b139807
   15180:	40589105 	.word	0x40589105
   15184:	9b149908 	.word	0x9b149908
   15188:	40599206 	.word	0x40599206
   1518c:	9b159a09 	.word	0x9b159a09
   15190:	405a9007 	.word	0x405a9007
   15194:	9b16980a 	.word	0x9b16980a
   15198:	40439108 	.word	0x40439108
   1519c:	2309e9cd 	.word	0x2309e9cd
   151a0:	9b179a0b 	.word	0x9b179a0b
   151a4:	40534638 	.word	0x40534638
   151a8:	f44f4669 	.word	0xf44f4669
   151ac:	930b7280 	.word	0x930b7280
   151b0:	fae6f00a 	.word	0xfae6f00a
   151b4:	28004605 	.word	0x28004605
   151b8:	af4bf47f 	.word	0xaf4bf47f
   151bc:	a9082210 	.word	0xa9082210
   151c0:	f00f4620 	.word	0xf00f4620
   151c4:	2301fc0d 	.word	0x2301fc0d
   151c8:	61234628 	.word	0x61234628
   151cc:	bdf0b06d 	.word	0xbdf0b06d
   151d0:	0537f06f 	.word	0x0537f06f
   151d4:	f06fe73d 	.word	0xf06fe73d
   151d8:	e73a0533 	.word	0xe73a0533

000151dc <symbol_0001e1e>:
   151dc:	41f0e92d 	.word	0x41f0e92d
   151e0:	46164604 	.word	0x46164604
   151e4:	b0882220 	.word	0xb0882220
   151e8:	460f18a5 	.word	0x460f18a5
   151ec:	21004668 	.word	0x21004668
   151f0:	f00f4698 	.word	0xf00f4698
   151f4:	4628fc22 	.word	0x4628fc22
   151f8:	fab6f00a 	.word	0xfab6f00a
   151fc:	f2422220 	.word	0xf2422220
   15200:	f8c47310 	.word	0xf8c47310
   15204:	e9c47138 	.word	0xe9c47138
   15208:	46282306 	.word	0x46282306
   1520c:	613cf8c4 	.word	0x613cf8c4
   15210:	f44f4669 	.word	0xf44f4669
   15214:	f00a7280 	.word	0xf00a7280
   15218:	b920fab3 	.word	0xb920fab3
   1521c:	46204641 	.word	0x46204641
   15220:	f7ff9a0e 	.word	0xf7ff9a0e
   15224:	b008feed 	.word	0xb008feed
   15228:	81f0e8bd 	.word	0x81f0e8bd

0001522c <symbol_000268c>:
   1522c:	4ff0e92d 	.word	0x4ff0e92d
   15230:	6f80f5b2 	.word	0x6f80f5b2
   15234:	f200b0f9 	.word	0xf200b0f9
   15238:	46048226 	.word	0x46048226
   1523c:	460f4615 	.word	0x460f4615
   15240:	46682230 	.word	0x46682230
   15244:	f00f2100 	.word	0xf00f2100
   15248:	6922fbf8 	.word	0x6922fbf8
   1524c:	429a69e3 	.word	0x429a69e3
   15250:	6963dc01 	.word	0x6963dc01
   15254:	69a3b313 	.word	0x69a3b313
   15258:	7fc0f5b3 	.word	0x7fc0f5b3
   1525c:	8216f200 	.word	0x8216f200
   15260:	0a60f10d 	.word	0x0a60f10d
   15264:	72c0f44f 	.word	0x72c0f44f
   15268:	46502100 	.word	0x46502100
   1526c:	fbe5f00f 	.word	0xfbe5f00f
   15270:	f8d44651 	.word	0xf8d44651
   15274:	69a23138 	.word	0x69a23138
   15278:	013cf8d4 	.word	0x013cf8d4
   1527c:	f06f4798 	.word	0xf06f4798
   15280:	b9380933 	.word	0xb9380933
   15284:	465169a2 	.word	0x465169a2
   15288:	f7ff4650 	.word	0xf7ff4650
   1528c:	4681fd81 	.word	0x4681fd81
   15290:	d0772800 	.word	0xd0772800
   15294:	b0794648 	.word	0xb0794648
   15298:	8ff0e8bd 	.word	0x8ff0e8bd
   1529c:	0820f104 	.word	0x0820f104
   152a0:	f0002d00 	.word	0xf0002d00
   152a4:	ae0c812b 	.word	0xae0c812b
   152a8:	2d10e00e 	.word	0x2d10e00e
   152ac:	bf2846a9 	.word	0xbf2846a9
   152b0:	0910f04f 	.word	0x0910f04f
   152b4:	46314638 	.word	0x46314638
   152b8:	f00f464a 	.word	0xf00f464a
   152bc:	ebb5fb91 	.word	0xebb5fb91
   152c0:	444f0509 	.word	0x444f0509
   152c4:	811af000 	.word	0x811af000
   152c8:	33017be3 	.word	0x33017be3
   152cc:	73e3b2db 	.word	0x73e3b2db
   152d0:	d14d2b00 	.word	0xd14d2b00
   152d4:	33017ba3 	.word	0x33017ba3
   152d8:	73a3b2db 	.word	0x73a3b2db
   152dc:	d1472b00 	.word	0xd1472b00
   152e0:	33017b63 	.word	0x33017b63
   152e4:	7363b2db 	.word	0x7363b2db
   152e8:	d1412b00 	.word	0xd1412b00
   152ec:	33017b23 	.word	0x33017b23
   152f0:	7323b2db 	.word	0x7323b2db
   152f4:	d13b2b00 	.word	0xd13b2b00
   152f8:	33017ae3 	.word	0x33017ae3
   152fc:	72e3b2db 	.word	0x72e3b2db
   15300:	d1352b00 	.word	0xd1352b00
   15304:	33017aa3 	.word	0x33017aa3
   15308:	72a3b2db 	.word	0x72a3b2db
   1530c:	d12f2b00 	.word	0xd12f2b00
   15310:	33017a63 	.word	0x33017a63
   15314:	7263b2db 	.word	0x7263b2db
   15318:	7a23bb53 	.word	0x7a23bb53
   1531c:	b2db3301 	.word	0xb2db3301
   15320:	bb2b7223 	.word	0xbb2b7223
   15324:	330179e3 	.word	0x330179e3
   15328:	71e3b2db 	.word	0x71e3b2db
   1532c:	79a3bb03 	.word	0x79a3bb03
   15330:	b2db3301 	.word	0xb2db3301
   15334:	b9db71a3 	.word	0xb9db71a3
   15338:	33017963 	.word	0x33017963
   1533c:	7163b2db 	.word	0x7163b2db
   15340:	7923b9b3 	.word	0x7923b9b3
   15344:	b2db3301 	.word	0xb2db3301
   15348:	b98b7123 	.word	0xb98b7123
   1534c:	330178e3 	.word	0x330178e3
   15350:	70e3b2db 	.word	0x70e3b2db
   15354:	78a3b963 	.word	0x78a3b963
   15358:	b2db3301 	.word	0xb2db3301
   1535c:	b93b70a3 	.word	0xb93b70a3
   15360:	33017863 	.word	0x33017863
   15364:	7063b2db 	.word	0x7063b2db
   15368:	7823b913 	.word	0x7823b913
   1536c:	70233301 	.word	0x70233301
   15370:	46224633 	.word	0x46224633
   15374:	46402101 	.word	0x46402101
   15378:	f980f00b 	.word	0xf980f00b
   1537c:	28004681 	.word	0x28004681
   15380:	e787d093 	.word	0xe787d093
   15384:	4630ae0c 	.word	0x4630ae0c
   15388:	46492230 	.word	0x46492230
   1538c:	fb55f00f 	.word	0xfb55f00f
   15390:	f10446cb 	.word	0xf10446cb
   15394:	7be20820 	.word	0x7be20820
   15398:	030beb06 	.word	0x030beb06
   1539c:	b2d23201 	.word	0xb2d23201
   153a0:	2a0073e2 	.word	0x2a0073e2
   153a4:	7ba2d14d 	.word	0x7ba2d14d
   153a8:	b2d23201 	.word	0xb2d23201
   153ac:	2a0073a2 	.word	0x2a0073a2
   153b0:	7b62d147 	.word	0x7b62d147
   153b4:	b2d23201 	.word	0xb2d23201
   153b8:	2a007362 	.word	0x2a007362
   153bc:	7b22d141 	.word	0x7b22d141
   153c0:	b2d23201 	.word	0xb2d23201
   153c4:	2a007322 	.word	0x2a007322
   153c8:	7ae2d13b 	.word	0x7ae2d13b
   153cc:	b2d23201 	.word	0xb2d23201
   153d0:	2a0072e2 	.word	0x2a0072e2
   153d4:	7aa2d135 	.word	0x7aa2d135
   153d8:	b2d23201 	.word	0xb2d23201
   153dc:	2a0072a2 	.word	0x2a0072a2
   153e0:	7a62d12f 	.word	0x7a62d12f
   153e4:	b2d23201 	.word	0xb2d23201
   153e8:	bb527262 	.word	0xbb527262
   153ec:	32017a22 	.word	0x32017a22
   153f0:	7222b2d2 	.word	0x7222b2d2
   153f4:	79e2bb2a 	.word	0x79e2bb2a
   153f8:	b2d23201 	.word	0xb2d23201
   153fc:	bb0271e2 	.word	0xbb0271e2
   15400:	320179a2 	.word	0x320179a2
   15404:	71a2b2d2 	.word	0x71a2b2d2
   15408:	7962b9da 	.word	0x7962b9da
   1540c:	b2d23201 	.word	0xb2d23201
   15410:	b9b27162 	.word	0xb9b27162
   15414:	32017922 	.word	0x32017922
   15418:	7122b2d2 	.word	0x7122b2d2
   1541c:	78e2b98a 	.word	0x78e2b98a
   15420:	b2d23201 	.word	0xb2d23201
   15424:	b96270e2 	.word	0xb96270e2
   15428:	320178a2 	.word	0x320178a2
   1542c:	70a2b2d2 	.word	0x70a2b2d2
   15430:	7862b93a 	.word	0x7862b93a
   15434:	b2d23201 	.word	0xb2d23201
   15438:	b9127062 	.word	0xb9127062
   1543c:	32017822 	.word	0x32017822
   15440:	46227022 	.word	0x46227022
   15444:	46402101 	.word	0x46402101
   15448:	f918f00b 	.word	0xf918f00b
   1544c:	28004681 	.word	0x28004681
   15450:	af20f47f 	.word	0xaf20f47f
   15454:	0b10f10b 	.word	0x0b10f10b
   15458:	0f30f1bb 	.word	0x0f30f1bb
   1545c:	6870d19b 	.word	0x6870d19b
   15460:	3000f8da 	.word	0x3000f8da
   15464:	f8da6831 	.word	0xf8da6831
   15468:	40592004 	.word	0x40592004
   1546c:	f8da4042 	.word	0xf8da4042
   15470:	68b03008 	.word	0x68b03008
   15474:	ea836031 	.word	0xea836031
   15478:	f8da0100 	.word	0xf8da0100
   1547c:	68f0300c 	.word	0x68f0300c
   15480:	40586072 	.word	0x40586072
   15484:	f8da6932 	.word	0xf8da6932
   15488:	60b13010 	.word	0x60b13010
   1548c:	f8da4053 	.word	0xf8da4053
   15490:	69721014 	.word	0x69721014
   15494:	404a60f0 	.word	0x404a60f0
   15498:	f8da69b0 	.word	0xf8da69b0
   1549c:	61331018 	.word	0x61331018
   154a0:	f8da4048 	.word	0xf8da4048
   154a4:	69f1301c 	.word	0x69f1301c
   154a8:	404b6172 	.word	0x404b6172
   154ac:	f8da6a32 	.word	0xf8da6a32
   154b0:	61b01020 	.word	0x61b01020
   154b4:	6a704051 	.word	0x6a704051
   154b8:	2024f8da 	.word	0x2024f8da
   154bc:	405061f3 	.word	0x405061f3
   154c0:	3028f8da 	.word	0x3028f8da
   154c4:	62316ab2 	.word	0x62316ab2
   154c8:	e9c64053 	.word	0xe9c64053
   154cc:	6af20309 	.word	0x6af20309
   154d0:	302cf8da 	.word	0x302cf8da
   154d4:	40534631 	.word	0x40534631
   154d8:	f44f4640 	.word	0xf44f4640
   154dc:	62f37280 	.word	0x62f37280
   154e0:	f94ef00a 	.word	0xf94ef00a
   154e4:	28004681 	.word	0x28004681
   154e8:	aed4f47f 	.word	0xaed4f47f
   154ec:	a9142210 	.word	0xa9142210
   154f0:	f00f4620 	.word	0xf00f4620
   154f4:	2301fa75 	.word	0x2301fa75
   154f8:	e6d16123 	.word	0xe6d16123
   154fc:	0a60f10d 	.word	0x0a60f10d
   15500:	22304650 	.word	0x22304650
   15504:	f00f2100 	.word	0xf00f2100
   15508:	2500fa98 	.word	0x2500fa98
   1550c:	eb0a7be2 	.word	0xeb0a7be2
   15510:	32010305 	.word	0x32010305
   15514:	73e2b2d2 	.word	0x73e2b2d2
   15518:	d14d2a00 	.word	0xd14d2a00
   1551c:	32017ba2 	.word	0x32017ba2
   15520:	73a2b2d2 	.word	0x73a2b2d2
   15524:	d1472a00 	.word	0xd1472a00
   15528:	32017b62 	.word	0x32017b62
   1552c:	7362b2d2 	.word	0x7362b2d2
   15530:	d1412a00 	.word	0xd1412a00
   15534:	32017b22 	.word	0x32017b22
   15538:	7322b2d2 	.word	0x7322b2d2
   1553c:	d13b2a00 	.word	0xd13b2a00
   15540:	32017ae2 	.word	0x32017ae2
   15544:	72e2b2d2 	.word	0x72e2b2d2
   15548:	d1352a00 	.word	0xd1352a00
   1554c:	32017aa2 	.word	0x32017aa2
   15550:	72a2b2d2 	.word	0x72a2b2d2
   15554:	d12f2a00 	.word	0xd12f2a00
   15558:	32017a62 	.word	0x32017a62
   1555c:	7262b2d2 	.word	0x7262b2d2
   15560:	7a22bb52 	.word	0x7a22bb52
   15564:	b2d23201 	.word	0xb2d23201
   15568:	bb2a7222 	.word	0xbb2a7222
   1556c:	320179e2 	.word	0x320179e2
   15570:	71e2b2d2 	.word	0x71e2b2d2
   15574:	79a2bb02 	.word	0x79a2bb02
   15578:	b2d23201 	.word	0xb2d23201
   1557c:	b9da71a2 	.word	0xb9da71a2
   15580:	32017962 	.word	0x32017962
   15584:	7162b2d2 	.word	0x7162b2d2
   15588:	7922b9b2 	.word	0x7922b9b2
   1558c:	b2d23201 	.word	0xb2d23201
   15590:	b98a7122 	.word	0xb98a7122
   15594:	320178e2 	.word	0x320178e2
   15598:	70e2b2d2 	.word	0x70e2b2d2
   1559c:	78a2b962 	.word	0x78a2b962
   155a0:	b2d23201 	.word	0xb2d23201
   155a4:	b93a70a2 	.word	0xb93a70a2
   155a8:	32017862 	.word	0x32017862
   155ac:	7062b2d2 	.word	0x7062b2d2
   155b0:	7822b912 	.word	0x7822b912
   155b4:	70223201 	.word	0x70223201
   155b8:	21014622 	.word	0x21014622
   155bc:	f00b4640 	.word	0xf00b4640
   155c0:	4681f85d 	.word	0x4681f85d
   155c4:	f47f2800 	.word	0xf47f2800
   155c8:	3510ae65 	.word	0x3510ae65
   155cc:	d19d2d30 	.word	0xd19d2d30
   155d0:	1200e9da 	.word	0x1200e9da
   155d4:	98019b00 	.word	0x98019b00
   155d8:	40424059 	.word	0x40424059
   155dc:	3008f8da 	.word	0x3008f8da
   155e0:	f8ca9802 	.word	0xf8ca9802
   155e4:	ea831000 	.word	0xea831000
   155e8:	f8da0100 	.word	0xf8da0100
   155ec:	9803300c 	.word	0x9803300c
   155f0:	2004f8ca 	.word	0x2004f8ca
   155f4:	9a044058 	.word	0x9a044058
   155f8:	3010f8da 	.word	0x3010f8da
   155fc:	1008f8ca 	.word	0x1008f8ca
   15600:	99054053 	.word	0x99054053
   15604:	2014f8da 	.word	0x2014f8da
   15608:	000cf8ca 	.word	0x000cf8ca
   1560c:	9806404a 	.word	0x9806404a
   15610:	1018f8da 	.word	0x1018f8da
   15614:	3010f8ca 	.word	0x3010f8ca
   15618:	9b074048 	.word	0x9b074048
   1561c:	101cf8da 	.word	0x101cf8da
   15620:	2014f8ca 	.word	0x2014f8ca
   15624:	f8da404b 	.word	0xf8da404b
   15628:	99082020 	.word	0x99082020
   1562c:	0018f8ca 	.word	0x0018f8ca
   15630:	f8da4051 	.word	0xf8da4051
   15634:	9a090024 	.word	0x9a090024
   15638:	301cf8ca 	.word	0x301cf8ca
   1563c:	f8da4050 	.word	0xf8da4050
   15640:	9a0a3028 	.word	0x9a0a3028
   15644:	1020f8ca 	.word	0x1020f8ca
   15648:	e9ca4053 	.word	0xe9ca4053
   1564c:	9a0b0309 	.word	0x9a0b0309
   15650:	302cf8da 	.word	0x302cf8da
   15654:	40534640 	.word	0x40534640
   15658:	f44f4651 	.word	0xf44f4651
   1565c:	f8ca7280 	.word	0xf8ca7280
   15660:	f00a302c 	.word	0xf00a302c
   15664:	4681f88d 	.word	0x4681f88d
   15668:	f47f2800 	.word	0xf47f2800
   1566c:	2210ae13 	.word	0x2210ae13
   15670:	4620a920 	.word	0x4620a920
   15674:	f9b4f00f 	.word	0xf9b4f00f
   15678:	69234648 	.word	0x69234648
   1567c:	61233301 	.word	0x61233301
   15680:	e8bdb079 	.word	0xe8bdb079
   15684:	f06f8ff0 	.word	0xf06f8ff0
   15688:	e6030935 	.word	0xe6030935
   1568c:	0937f06f 	.word	0x0937f06f
   15690:	bf00e600 	.word	0xbf00e600

00015694 <packet_handler_create>:
   15694:	b5382801 	.word	0xb5382801
   15698:	4614460d 	.word	0x4614460d
   1569c:	db11d00d 	.word	0xdb11d00d
   156a0:	dc0f2803 	.word	0xdc0f2803
   156a4:	f00a2010 	.word	0xf00a2010
   156a8:	2218f81f 	.word	0x2218f81f
   156ac:	4b08b120 	.word	0x4b08b120
   156b0:	44136045 	.word	0x44136045
   156b4:	60036084 	.word	0x60036084
   156b8:	2014bd38 	.word	0x2014bd38
   156bc:	f814f00a 	.word	0xf814f00a
   156c0:	e7f32230 	.word	0xe7f32230
   156c4:	f00a200c 	.word	0xf00a200c
   156c8:	2200f80f 	.word	0x2200f80f
   156cc:	bf00e7ee 	.word	0xbf00e7ee
   156d0:	00026ad0 	.word	0x00026ad0

000156d4 <packet_handler_delete>:
   156d4:	4604b510 	.word	0x4604b510
   156d8:	691b6803 	.word	0x691b6803
   156dc:	68234798 	.word	0x68234798
   156e0:	695b4620 	.word	0x695b4620
   156e4:	46204798 	.word	0x46204798
   156e8:	4010e8bd 	.word	0x4010e8bd
   156ec:	b81af00a 	.word	0xb81af00a

000156f0 <symbol_0002469>:
   156f0:	460db570 	.word	0x460db570
   156f4:	f0014604 	.word	0xf0014604
   156f8:	2d03fc23 	.word	0x2d03fc23
   156fc:	d1257025 	.word	0xd1257025
   15700:	25012308 	.word	0x25012308
   15704:	49154a14 	.word	0x49154a14
   15708:	622360a3 	.word	0x622360a3
   1570c:	62e36523 	.word	0x62e36523
   15710:	60e263a3 	.word	0x60e263a3
   15714:	4a134b12 	.word	0x4a134b12
   15718:	48144e13 	.word	0x48144e13
   1571c:	65606321 	.word	0x65606321
   15720:	64a363e2 	.word	0x64a363e2
   15724:	61e56065 	.word	0x61e56065
   15728:	62a564e5 	.word	0x62a564e5
   1572c:	e9c46365 	.word	0xe9c46365
   15730:	62665510 	.word	0x62665510
   15734:	f0061d20 	.word	0xf0061d20
   15738:	65a0fde7 	.word	0x65a0fde7
   1573c:	004cf104 	.word	0x004cf104
   15740:	fde2f006 	.word	0xfde2f006
   15744:	0517e9c4 	.word	0x0517e9c4
   15748:	bd702000 	.word	0xbd702000
   1574c:	f0014620 	.word	0xf0014620
   15750:	4807fbf7 	.word	0x4807fbf7
   15754:	bf00bd70 	.word	0xbf00bd70
   15758:	00026b98 	.word	0x00026b98
   1575c:	00026b38 	.word	0x00026b38
   15760:	2002d3f4 	.word	0x2002d3f4
   15764:	00026b58 	.word	0x00026b58
   15768:	00026b18 	.word	0x00026b18
   1576c:	00026b78 	.word	0x00026b78
   15770:	ffffb180 	.word	0xffffb180

00015774 <secure_client_socket>:
   15774:	41f0e92d 	.word	0x41f0e92d
   15778:	680b460c 	.word	0x680b460c
   1577c:	f4236989 	.word	0xf4236989
   15780:	60233300 	.word	0x60233300
   15784:	23006822 	.word	0x23006822
   15788:	1280f422 	.word	0x1280f422
   1578c:	f2476022 	.word	0xf2476022
   15790:	68270281 	.word	0x68270281
   15794:	f0024606 	.word	0xf0024606
   15798:	2800fedb 	.word	0x2800fedb
   1579c:	4605d03b 	.word	0x4605d03b
   157a0:	eb064b28 	.word	0xeb064b28
   157a4:	eb0301c6 	.word	0xeb0301c6
   157a8:	22240181 	.word	0x22240181
   157ac:	f00f3014 	.word	0xf00f3014
   157b0:	68abf917 	.word	0x68abf917
   157b4:	8090f8df 	.word	0x8090f8df
   157b8:	60ab3324 	.word	0x60ab3324
   157bc:	46296823 	.word	0x46296823
   157c0:	0308ea03 	.word	0x0308ea03
   157c4:	030af043 	.word	0x030af043
   157c8:	f2476023 	.word	0xf2476023
   157cc:	463b0281 	.word	0x463b0281
   157d0:	f0024620 	.word	0xf0024620
   157d4:	b960fedd 	.word	0xb960fedd
   157d8:	00db6823 	.word	0x00db6823
   157dc:	f04fd40b 	.word	0xf04fd40b
   157e0:	f64f33ff 	.word	0xf64f33ff
   157e4:	210b72ff 	.word	0x210b72ff
   157e8:	f0024630 	.word	0xf0024630
   157ec:	b128fee5 	.word	0xb128fee5
   157f0:	e8bd6027 	.word	0xe8bd6027
   157f4:	207381f0 	.word	0x207381f0
   157f8:	81f0e8bd 	.word	0x81f0e8bd
   157fc:	6280f04f 	.word	0x6280f04f
   15800:	46114630 	.word	0x46114630
   15804:	33fff04f 	.word	0x33fff04f
   15808:	fed6f002 	.word	0xfed6f002
   1580c:	2873b130 	.word	0x2873b130
   15810:	6027d0ef 	.word	0x6027d0ef
   15814:	200ce7ed 	.word	0x200ce7ed
   15818:	81f0e8bd 	.word	0x81f0e8bd
   1581c:	f0236823 	.word	0xf0236823
   15820:	60236380 	.word	0x60236380
   15824:	ea036823 	.word	0xea036823
   15828:	f0480808 	.word	0xf0480808
   1582c:	6023030c 	.word	0x6023030c
   15830:	f4436823 	.word	0xf4436823
   15834:	60233300 	.word	0x60233300
   15838:	f4436823 	.word	0xf4436823
   1583c:	60231380 	.word	0x60231380
   15840:	81f0e8bd 	.word	0x81f0e8bd
   15844:	200204cc 	.word	0x200204cc
   15848:	ffff0000 	.word	0xffff0000

0001584c <tls_interface_init>:
   1584c:	47702000 	.word	0x47702000

00015850 <tls_interface_open>:
   15850:	f020b538 	.word	0xf020b538
   15854:	2b020308 	.word	0x2b020308
   15858:	202fd006 	.word	0x202fd006
   1585c:	fd00f7fc 	.word	0xfd00f7fc
   15860:	35fff04f 	.word	0x35fff04f
   15864:	bd384628 	.word	0xbd384628
   15868:	1e4a4614 	.word	0x1e4a4614
   1586c:	d8282a01 	.word	0xd8282a01
   15870:	2901bb14 	.word	0x2901bb14
   15874:	2301bf06 	.word	0x2301bf06
   15878:	7482f44f 	.word	0x7482f44f
   1587c:	7487f44f 	.word	0x7487f44f
   15880:	f002461a 	.word	0xf002461a
   15884:	1e05fec5 	.word	0x1e05fec5
   15888:	4b15db26 	.word	0x4b15db26
   1588c:	00c5eb05 	.word	0x00c5eb05
   15890:	0080eb03 	.word	0x0080eb03
   15894:	49132224 	.word	0x49132224
   15898:	f8a2f00f 	.word	0xf8a2f00f
   1589c:	f0024628 	.word	0xf0024628
   158a0:	6803fd0d 	.word	0x6803fd0d
   158a4:	f4236144 	.word	0xf4236144
   158a8:	60031380 	.word	0x60031380
   158ac:	f4236803 	.word	0xf4236803
   158b0:	60033300 	.word	0x60033300
   158b4:	bd384628 	.word	0xbd384628
   158b8:	d0082901 	.word	0xd0082901
   158bc:	7f87f5b4 	.word	0x7f87f5b4
   158c0:	2016d0de 	.word	0x2016d0de
   158c4:	fcccf7fc 	.word	0xfcccf7fc
   158c8:	35fff04f 	.word	0x35fff04f
   158cc:	f5b4e7ca 	.word	0xf5b4e7ca
   158d0:	d1f67f82 	.word	0xd1f67f82
   158d4:	e7d3460b 	.word	0xe7d3460b
   158d8:	35fff04f 	.word	0x35fff04f
   158dc:	bf00e7c2 	.word	0xbf00e7c2
   158e0:	200204cc 	.word	0x200204cc
   158e4:	00026bb8 	.word	0x00026bb8

000158e8 <tls_interface_close>:
   158e8:	4604b510 	.word	0x4604b510
   158ec:	fce6f002 	.word	0xfce6f002
   158f0:	4620b120 	.word	0x4620b120
   158f4:	4010e8bd 	.word	0x4010e8bd
   158f8:	bf36f002 	.word	0xbf36f002
   158fc:	f7fc2009 	.word	0xf7fc2009
   15900:	f04ffcaf 	.word	0xf04ffcaf
   15904:	bd1030ff 	.word	0xbd1030ff

00015908 <tls_interface_sendto>:
   15908:	47f0e92d 	.word	0x47f0e92d
   1590c:	e9dd460d 	.word	0xe9dd460d
   15910:	46168908 	.word	0x46168908
   15914:	4604461f 	.word	0x4604461f
   15918:	fcd0f002 	.word	0xfcd0f002
   1591c:	d03b2800 	.word	0xd03b2800
   15920:	b29b6803 	.word	0xb29b6803
   15924:	d0392b0c 	.word	0xd0392b0c
   15928:	b29b6803 	.word	0xb29b6803
   1592c:	d1112b0b 	.word	0xd1112b0b
   15930:	eb044b20 	.word	0xeb044b20
   15934:	f81304c4 	.word	0xf81304c4
   15938:	2b023024 	.word	0x2b023024
   1593c:	6903d038 	.word	0x6903d038
   15940:	bf142b01 	.word	0xbf142b01
   15944:	202a2039 	.word	0x202a2039
   15948:	fc8af7fc 	.word	0xfc8af7fc
   1594c:	30fff04f 	.word	0x30fff04f
   15950:	87f0e8bd 	.word	0x87f0e8bd
   15954:	2b016903 	.word	0x2b016903
   15958:	2b02d00b 	.word	0x2b02d00b
   1595c:	2039d001 	.word	0x2039d001
   15960:	6803e7f2 	.word	0x6803e7f2
   15964:	2b02b29b 	.word	0x2b02b29b
   15968:	6803d007 	.word	0x6803d007
   1596c:	2b04b29b 	.word	0x2b04b29b
   15970:	6803d003 	.word	0x6803d003
   15974:	2b05b29b 	.word	0x2b05b29b
   15978:	4b0ed1f1 	.word	0x4b0ed1f1
   1597c:	02c4eb04 	.word	0x02c4eb04
   15980:	3022f813 	.word	0x3022f813
   15984:	d1ea2b02 	.word	0xd1ea2b02
   15988:	46204601 	.word	0x46204601
   1598c:	fef2f7ff 	.word	0xfef2f7ff
   15990:	d0032800 	.word	0xd0032800
   15994:	e7d9dcd8 	.word	0xe7d9dcd8
   15998:	e7d52009 	.word	0xe7d52009
   1599c:	8908e9cd 	.word	0x8908e9cd
   159a0:	4632463b 	.word	0x4632463b
   159a4:	46204629 	.word	0x46204629
   159a8:	47f0e8bd 	.word	0x47f0e8bd
   159ac:	bf4cf002 	.word	0xbf4cf002
   159b0:	e7c92023 	.word	0xe7c92023
   159b4:	200204cc 	.word	0x200204cc

000159b8 <tls_interface_recvfrom>:
   159b8:	47f0e92d 	.word	0x47f0e92d
   159bc:	e9dd460d 	.word	0xe9dd460d
   159c0:	46168908 	.word	0x46168908
   159c4:	4604461f 	.word	0x4604461f
   159c8:	fc78f002 	.word	0xfc78f002
   159cc:	d0382800 	.word	0xd0382800
   159d0:	b29b6803 	.word	0xb29b6803
   159d4:	d00f2b0c 	.word	0xd00f2b0c
   159d8:	b29b6803 	.word	0xb29b6803
   159dc:	d00b2b0d 	.word	0xd00b2b0d
   159e0:	2b016903 	.word	0x2b016903
   159e4:	2b02d01a 	.word	0x2b02d01a
   159e8:	2023d010 	.word	0x2023d010
   159ec:	fc38f7fc 	.word	0xfc38f7fc
   159f0:	30fff04f 	.word	0x30fff04f
   159f4:	87f0e8bd 	.word	0x87f0e8bd
   159f8:	8908e9cd 	.word	0x8908e9cd
   159fc:	4632463b 	.word	0x4632463b
   15a00:	46204629 	.word	0x46204629
   15a04:	47f0e8bd 	.word	0x47f0e8bd
   15a08:	b858f003 	.word	0xb858f003
   15a0c:	b29b6803 	.word	0xb29b6803
   15a10:	d0072b02 	.word	0xd0072b02
   15a14:	b29b6803 	.word	0xb29b6803
   15a18:	d0032b04 	.word	0xd0032b04
   15a1c:	b29b6803 	.word	0xb29b6803
   15a20:	d1e22b05 	.word	0xd1e22b05
   15a24:	eb044b08 	.word	0xeb044b08
   15a28:	f81302c4 	.word	0xf81302c4
   15a2c:	2b023022 	.word	0x2b023022
   15a30:	4601d1db 	.word	0x4601d1db
   15a34:	f7ff4620 	.word	0xf7ff4620
   15a38:	2800fe9d 	.word	0x2800fe9d
   15a3c:	dcd5d0dc 	.word	0xdcd5d0dc
   15a40:	2009e7d6 	.word	0x2009e7d6
   15a44:	bf00e7d2 	.word	0xbf00e7d2
   15a48:	200204cc 	.word	0x200204cc

00015a4c <tls_interface_bind>:
   15a4c:	43f8e92d 	.word	0x43f8e92d
   15a50:	4617460c 	.word	0x4617460c
   15a54:	f0024606 	.word	0xf0024606
   15a58:	2800fc31 	.word	0x2800fc31
   15a5c:	6803d04c 	.word	0x6803d04c
   15a60:	b29b4605 	.word	0xb29b4605
   15a64:	d1502b02 	.word	0xd1502b02
   15a68:	463a4621 	.word	0x463a4621
   15a6c:	f0034630 	.word	0xf0034630
   15a70:	4604f9fb 	.word	0x4604f9fb
   15a74:	2c00b120 	.word	0x2c00b120
   15a78:	4620dc3f 	.word	0x4620dc3f
   15a7c:	83f8e8bd 	.word	0x83f8e8bd
   15a80:	07c6eb06 	.word	0x07c6eb06
   15a84:	8094f8df 	.word	0x8094f8df
   15a88:	f81800bf 	.word	0xf81800bf
   15a8c:	2b013007 	.word	0x2b013007
   15a90:	4603d1f3 	.word	0x4603d1f3
   15a94:	0281f247 	.word	0x0281f247
   15a98:	463069a9 	.word	0x463069a9
   15a9c:	fd58f002 	.word	0xfd58f002
   15aa0:	b3b04681 	.word	0xb3b04681
   15aa4:	0107eb08 	.word	0x0107eb08
   15aa8:	30142224 	.word	0x30142224
   15aac:	ff98f00e 	.word	0xff98f00e
   15ab0:	3008f8d9 	.word	0x3008f8d9
   15ab4:	33244649 	.word	0x33244649
   15ab8:	3008f8c9 	.word	0x3008f8c9
   15abc:	2304682a 	.word	0x2304682a
   15ac0:	04120c12 	.word	0x04120c12
   15ac4:	020af042 	.word	0x020af042
   15ac8:	4628602a 	.word	0x4628602a
   15acc:	0281f247 	.word	0x0281f247
   15ad0:	fd5ef002 	.word	0xfd5ef002
   15ad4:	682bb9f8 	.word	0x682bb9f8
   15ad8:	d41800db 	.word	0xd41800db
   15adc:	f04f4630 	.word	0xf04f4630
   15ae0:	f64f33ff 	.word	0xf64f33ff
   15ae4:	210b72ff 	.word	0x210b72ff
   15ae8:	fd66f002 	.word	0xfd66f002
   15aec:	d0c42800 	.word	0xd0c42800
   15af0:	46042304 	.word	0x46042304
   15af4:	e7be602b 	.word	0xe7be602b
   15af8:	46202409 	.word	0x46202409
   15afc:	34fff04f 	.word	0x34fff04f
   15b00:	fbaef7fc 	.word	0xfbaef7fc
   15b04:	e8bd4620 	.word	0xe8bd4620
   15b08:	242d83f8 	.word	0x242d83f8
   15b0c:	2473e7f5 	.word	0x2473e7f5
   15b10:	240ce7f3 	.word	0x240ce7f3
   15b14:	4604e7f1 	.word	0x4604e7f1
   15b18:	bf00e7ad 	.word	0xbf00e7ad
   15b1c:	200204cc 	.word	0x200204cc

00015b20 <tls_interface_connect>:
   15b20:	460eb5f8 	.word	0x460eb5f8
   15b24:	46044617 	.word	0x46044617
   15b28:	fbc8f002 	.word	0xfbc8f002
   15b2c:	4b13b1e8 	.word	0x4b13b1e8
   15b30:	02c4eb04 	.word	0x02c4eb04
   15b34:	3022f813 	.word	0x3022f813
   15b38:	d11c2b02 	.word	0xd11c2b02
   15b3c:	46056803 	.word	0x46056803
   15b40:	2b02b29b 	.word	0x2b02b29b
   15b44:	6803d003 	.word	0x6803d003
   15b48:	2b04b29b 	.word	0x2b04b29b
   15b4c:	463ad113 	.word	0x463ad113
   15b50:	46204631 	.word	0x46204631
   15b54:	f8def003 	.word	0xf8def003
   15b58:	2800b110 	.word	0x2800b110
   15b5c:	bdf8dc06 	.word	0xbdf8dc06
   15b60:	46204629 	.word	0x46204629
   15b64:	fe06f7ff 	.word	0xfe06f7ff
   15b68:	2009e7f7 	.word	0x2009e7f7
   15b6c:	fb78f7fc 	.word	0xfb78f7fc
   15b70:	30fff04f 	.word	0x30fff04f
   15b74:	202dbdf8 	.word	0x202dbdf8
   15b78:	bf00e7f8 	.word	0xbf00e7f8
   15b7c:	200204cc 	.word	0x200204cc

00015b80 <tls_interface_listen>:
   15b80:	47f0e92d 	.word	0x47f0e92d
   15b84:	4606460f 	.word	0x4606460f
   15b88:	fb98f002 	.word	0xfb98f002
   15b8c:	d06b2800 	.word	0xd06b2800
   15b90:	46046903 	.word	0x46046903
   15b94:	d1652b01 	.word	0xd1652b01
   15b98:	b29b6803 	.word	0xb29b6803
   15b9c:	d0562b04 	.word	0xd0562b04
   15ba0:	b29b6823 	.word	0xb29b6823
   15ba4:	d15d2b0b 	.word	0xd15d2b0b
   15ba8:	f8df00f3 	.word	0xf8df00f3
   15bac:	199a90c0 	.word	0x199a90c0
   15bb0:	2022f819 	.word	0x2022f819
   15bb4:	d1552a01 	.word	0xd1552a01
   15bb8:	44332201 	.word	0x44332201
   15bbc:	f809009d 	.word	0xf809009d
   15bc0:	69a12005 	.word	0x69a12005
   15bc4:	f2472300 	.word	0xf2472300
   15bc8:	46300281 	.word	0x46300281
   15bcc:	8000f8d4 	.word	0x8000f8d4
   15bd0:	fcbef002 	.word	0xfcbef002
   15bd4:	28004682 	.word	0x28004682
   15bd8:	eb09d042 	.word	0xeb09d042
   15bdc:	22240105 	.word	0x22240105
   15be0:	f00e3014 	.word	0xf00e3014
   15be4:	f8dafefd 	.word	0xf8dafefd
   15be8:	46513008 	.word	0x46513008
   15bec:	f8ca3324 	.word	0xf8ca3324
   15bf0:	68223008 	.word	0x68223008
   15bf4:	0c124643 	.word	0x0c124643
   15bf8:	f0420412 	.word	0xf0420412
   15bfc:	6022020a 	.word	0x6022020a
   15c00:	f2474620 	.word	0xf2474620
   15c04:	f0020281 	.word	0xf0020281
   15c08:	b9e0fcc3 	.word	0xb9e0fcc3
   15c0c:	00db6823 	.word	0x00db6823
   15c10:	f04fd40e 	.word	0xf04fd40e
   15c14:	f64f33ff 	.word	0xf64f33ff
   15c18:	210b72ff 	.word	0x210b72ff
   15c1c:	f0024630 	.word	0xf0024630
   15c20:	b160fccb 	.word	0xb160fccb
   15c24:	f8c42800 	.word	0xf8c42800
   15c28:	dc028000 	.word	0xdc028000
   15c2c:	87f0e8bd 	.word	0x87f0e8bd
   15c30:	f7fc2073 	.word	0xf7fc2073
   15c34:	f04ffb15 	.word	0xf04ffb15
   15c38:	e8bd30ff 	.word	0xe8bd30ff
   15c3c:	463987f0 	.word	0x463987f0
   15c40:	f0034630 	.word	0xf0034630
   15c44:	2800f9a7 	.word	0x2800f9a7
   15c48:	e8bddcf3 	.word	0xe8bddcf3
   15c4c:	00f387f0 	.word	0x00f387f0
   15c50:	9018f8df 	.word	0x9018f8df
   15c54:	f819199a 	.word	0xf819199a
   15c58:	2a022022 	.word	0x2a022022
   15c5c:	e7abd1a0 	.word	0xe7abd1a0
   15c60:	e7e6200c 	.word	0xe7e6200c
   15c64:	e7e4202d 	.word	0xe7e4202d
   15c68:	e7e22009 	.word	0xe7e22009
   15c6c:	200204cc 	.word	0x200204cc

00015c70 <tls_interface_accept>:
   15c70:	460cb5f8 	.word	0x460cb5f8
   15c74:	461f4616 	.word	0x461f4616
   15c78:	f0024605 	.word	0xf0024605
   15c7c:	2800fb1f 	.word	0x2800fb1f
   15c80:	6800d03b 	.word	0x6800d03b
   15c84:	2806b280 	.word	0x2806b280
   15c88:	4621d137 	.word	0x4621d137
   15c8c:	4632463b 	.word	0x4632463b
   15c90:	f0034628 	.word	0xf0034628
   15c94:	4604f9f5 	.word	0x4604f9f5
   15c98:	2c00b118 	.word	0x2c00b118
   15c9c:	4620dc2e 	.word	0x4620dc2e
   15ca0:	4628bdf8 	.word	0x4628bdf8
   15ca4:	fb0af002 	.word	0xfb0af002
   15ca8:	4f186803 	.word	0x4f186803
   15cac:	3300f423 	.word	0x3300f423
   15cb0:	68036003 	.word	0x68036003
   15cb4:	05c5eb05 	.word	0x05c5eb05
   15cb8:	1380f423 	.word	0x1380f423
   15cbc:	60034606 	.word	0x60034606
   15cc0:	0185eb07 	.word	0x0185eb07
   15cc4:	46382224 	.word	0x46382224
   15cc8:	fe8af00e 	.word	0xfe8af00e
   15ccc:	703b2302 	.word	0x703b2302
   15cd0:	46206833 	.word	0x46206833
   15cd4:	041b0c1b 	.word	0x041b0c1b
   15cd8:	030bf043 	.word	0x030bf043
   15cdc:	f64f6033 	.word	0xf64f6033
   15ce0:	f04f72ff 	.word	0xf04f72ff
   15ce4:	210c33ff 	.word	0x210c33ff
   15ce8:	fc66f002 	.word	0xfc66f002
   15cec:	28004604 	.word	0x28004604
   15cf0:	2000d0d5 	.word	0x2000d0d5
   15cf4:	fd38f002 	.word	0xfd38f002
   15cf8:	2409e7cf 	.word	0x2409e7cf
   15cfc:	f04f4620 	.word	0xf04f4620
   15d00:	f7fc34ff 	.word	0xf7fc34ff
   15d04:	4620faad 	.word	0x4620faad
   15d08:	bf00bdf8 	.word	0xbf00bdf8
   15d0c:	200204cc 	.word	0x200204cc

00015d10 <tls_interface_setopt>:
   15d10:	41f0e92d 	.word	0x41f0e92d
   15d14:	7f8df5b1 	.word	0x7f8df5b1
   15d18:	d11d9f06 	.word	0xd11d9f06
   15d1c:	b1c3461c 	.word	0xb1c3461c
   15d20:	4605b1bf 	.word	0x4605b1bf
   15d24:	f0024616 	.word	0xf0024616
   15d28:	b1c8fac9 	.word	0xb1c8fac9
   15d2c:	b29b6803 	.word	0xb29b6803
   15d30:	d0072b02 	.word	0xd0072b02
   15d34:	b29b6803 	.word	0xb29b6803
   15d38:	d0032b04 	.word	0xd0032b04
   15d3c:	b29b6803 	.word	0xb29b6803
   15d40:	d10d2b05 	.word	0xd10d2b05
   15d44:	2e033e01 	.word	0x2e033e01
   15d48:	e8dfd851 	.word	0xe8dfd851
   15d4c:	3225f006 	.word	0x3225f006
   15d50:	200e0b18 	.word	0x200e0b18
   15d54:	81f0e8bd 	.word	0x81f0e8bd
   15d58:	41f0e8bd 	.word	0x41f0e8bd
   15d5c:	bac8f003 	.word	0xbac8f003
   15d60:	e7f72009 	.word	0xe7f72009
   15d64:	d1392f04 	.word	0xd1392f04
   15d68:	2b026823 	.word	0x2b026823
   15d6c:	4a21d836 	.word	0x4a21d836
   15d70:	05c5eb05 	.word	0x05c5eb05
   15d74:	0585eb02 	.word	0x0585eb02
   15d78:	200070ab 	.word	0x200070ab
   15d7c:	2f01e7ea 	.word	0x2f01e7ea
   15d80:	7823d12c 	.word	0x7823d12c
   15d84:	d8292b01 	.word	0xd8292b01
   15d88:	eb054a1a 	.word	0xeb054a1a
   15d8c:	eb0205c5 	.word	0xeb0205c5
   15d90:	70530285 	.word	0x70530285
   15d94:	e7dd2000 	.word	0xe7dd2000
   15d98:	d11f2f04 	.word	0xd11f2f04
   15d9c:	b1f86820 	.word	0xb1f86820
   15da0:	d11b2801 	.word	0xd11b2801
   15da4:	eb054b13 	.word	0xeb054b13
   15da8:	f80305c5 	.word	0xf80305c5
   15dac:	20000025 	.word	0x20000025
   15db0:	ea5fe7d0 	.word	0xea5fe7d0
   15db4:	d0110c97 	.word	0xd0110c97
   15db8:	0603f017 	.word	0x0603f017
   15dbc:	eb05d10e 	.word	0xeb05d10e
   15dc0:	00ad05c5 	.word	0x00ad05c5
   15dc4:	1d284b0b 	.word	0x1d284b0b
   15dc8:	442b4418 	.word	0x442b4418
   15dcc:	4621463a 	.word	0x4621463a
   15dd0:	c003f883 	.word	0xc003f883
   15dd4:	fe04f00e 	.word	0xfe04f00e
   15dd8:	e7bb4630 	.word	0xe7bb4630
   15ddc:	e7b92016 	.word	0xe7b92016
   15de0:	4b042202 	.word	0x4b042202
   15de4:	05c5eb05 	.word	0x05c5eb05
   15de8:	2025f803 	.word	0x2025f803
   15dec:	202ae7b2 	.word	0x202ae7b2
   15df0:	bf00e7b0 	.word	0xbf00e7b0
   15df4:	200204cc 	.word	0x200204cc

00015df8 <tls_interface_getopt>:
   15df8:	41f0e92d 	.word	0x41f0e92d
   15dfc:	7f8df5b1 	.word	0x7f8df5b1
   15e00:	d1129f06 	.word	0xd1129f06
   15e04:	b16b461d 	.word	0xb16b461d
   15e08:	4606b167 	.word	0x4606b167
   15e0c:	f0024614 	.word	0xf0024614
   15e10:	2800fa55 	.word	0x2800fa55
   15e14:	3c01d04f 	.word	0x3c01d04f
   15e18:	d8522c03 	.word	0xd8522c03
   15e1c:	f004e8df 	.word	0xf004e8df
   15e20:	09152139 	.word	0x09152139
   15e24:	e8bd200e 	.word	0xe8bd200e
   15e28:	e8bd81f0 	.word	0xe8bd81f0
   15e2c:	f00341f0 	.word	0xf00341f0
   15e30:	683bbb1b 	.word	0x683bbb1b
   15e34:	d13c2b04 	.word	0xd13c2b04
   15e38:	eb064b23 	.word	0xeb064b23
   15e3c:	eb0306c6 	.word	0xeb0306c6
   15e40:	78b30686 	.word	0x78b30686
   15e44:	602b2000 	.word	0x602b2000
   15e48:	683be7ed 	.word	0x683be7ed
   15e4c:	d1302b04 	.word	0xd1302b04
   15e50:	eb064b1d 	.word	0xeb064b1d
   15e54:	eb0306c6 	.word	0xeb0306c6
   15e58:	78730686 	.word	0x78730686
   15e5c:	602b2000 	.word	0x602b2000
   15e60:	eb06e7e1 	.word	0xeb06e7e1
   15e64:	491806c6 	.word	0x491806c6
   15e68:	00b6683b 	.word	0x00b6683b
   15e6c:	f013198a 	.word	0xf013198a
   15e70:	78d00403 	.word	0x78d00403
   15e74:	089bd121 	.word	0x089bd121
   15e78:	bf284283 	.word	0xbf284283
   15e7c:	009a4603 	.word	0x009a4603
   15e80:	3604b1db 	.word	0x3604b1db
   15e84:	603a4431 	.word	0x603a4431
   15e88:	f00e4628 	.word	0xf00e4628
   15e8c:	4620fda9 	.word	0x4620fda9
   15e90:	683be7c9 	.word	0x683be7c9
   15e94:	d10c2b04 	.word	0xd10c2b04
   15e98:	eb064b0b 	.word	0xeb064b0b
   15e9c:	f81306c6 	.word	0xf81306c6
   15ea0:	20003026 	.word	0x20003026
   15ea4:	0301f1a3 	.word	0x0301f1a3
   15ea8:	f383fab3 	.word	0xf383fab3
   15eac:	602b095b 	.word	0x602b095b
   15eb0:	2016e7b9 	.word	0x2016e7b9
   15eb4:	2009e7b7 	.word	0x2009e7b7
   15eb8:	2800e7b5 	.word	0x2800e7b5
   15ebc:	6038d1f9 	.word	0x6038d1f9
   15ec0:	202ae7b1 	.word	0x202ae7b1
   15ec4:	bf00e7af 	.word	0xbf00e7af
   15ec8:	200204cc 	.word	0x200204cc

00015ecc <tls_rpc_ip_event_handler>:
   15ecc:	f248b538 	.word	0xf248b538
   15ed0:	42ab0581 	.word	0x42ab0581
   15ed4:	d053460c 	.word	0xd053460c
   15ed8:	0182f249 	.word	0x0182f249
   15edc:	d02d428b 	.word	0xd02d428b
   15ee0:	0102f248 	.word	0x0102f248
   15ee4:	d001428b 	.word	0xd001428b
   15ee8:	bd382001 	.word	0xbd382001
   15eec:	d0fb2c00 	.word	0xd0fb2c00
   15ef0:	f5b36963 	.word	0xf5b36963
   15ef4:	d0027f82 	.word	0xd0027f82
   15ef8:	7f87f5b3 	.word	0x7f87f5b3
   15efc:	6823d1f4 	.word	0x6823d1f4
   15f00:	5300f023 	.word	0x5300f023
   15f04:	69556023 	.word	0x69556023
   15f08:	d1482d00 	.word	0xd1482d00
   15f0c:	0c1b6823 	.word	0x0c1b6823
   15f10:	f043041b 	.word	0xf043041b
   15f14:	60230305 	.word	0x60230305
   15f18:	00da6823 	.word	0x00da6823
   15f1c:	4b25d50c 	.word	0x4b25d50c
   15f20:	02c0eb00 	.word	0x02c0eb00
   15f24:	3022f813 	.word	0x3022f813
   15f28:	d1052b02 	.word	0xd1052b02
   15f2c:	f7ff4621 	.word	0xf7ff4621
   15f30:	b108fc21 	.word	0xb108fc21
   15f34:	d1352873 	.word	0xd1352873
   15f38:	bd382000 	.word	0xbd382000
   15f3c:	d0fb2c00 	.word	0xd0fb2c00
   15f40:	b29b6823 	.word	0xb29b6823
   15f44:	d1f72b0b 	.word	0xd1f72b0b
   15f48:	bb486910 	.word	0xbb486910
   15f4c:	f0436823 	.word	0xf0436823
   15f50:	60236380 	.word	0x60236380
   15f54:	00db6823 	.word	0x00db6823
   15f58:	6823d5ee 	.word	0x6823d5ee
   15f5c:	6380f023 	.word	0x6380f023
   15f60:	68236023 	.word	0x68236023
   15f64:	041b0c1b 	.word	0x041b0c1b
   15f68:	030cf043 	.word	0x030cf043
   15f6c:	68236023 	.word	0x68236023
   15f70:	3300f443 	.word	0x3300f443
   15f74:	68236023 	.word	0x68236023
   15f78:	1380f443 	.word	0x1380f443
   15f7c:	bd386023 	.word	0xbd386023
   15f80:	d0d92900 	.word	0xd0d92900
   15f84:	b29b680b 	.word	0xb29b680b
   15f88:	d1d52b0a 	.word	0xd1d52b0a
   15f8c:	b9386950 	.word	0xb9386950
   15f90:	0c1b680b 	.word	0x0c1b680b
   15f94:	f043041b 	.word	0xf043041b
   15f98:	600b030b 	.word	0x600b030b
   15f9c:	4628bd38 	.word	0x4628bd38
   15fa0:	faccf002 	.word	0xfaccf002
   15fa4:	68236060 	.word	0x68236060
   15fa8:	f4432000 	.word	0xf4432000
   15fac:	60232380 	.word	0x60232380
   15fb0:	bf00bd38 	.word	0xbf00bd38
   15fb4:	200204cc 	.word	0x200204cc

00015fb8 <rpc_gnss_serialize_utc>:
   15fb8:	b1d84603 	.word	0xb1d84603
   15fbc:	2000b1d1 	.word	0x2000b1d1
   15fc0:	70482201 	.word	0x70482201
   15fc4:	685a700a 	.word	0x685a700a
   15fc8:	f8c12010 	.word	0xf8c12010
   15fcc:	681a2006 	.word	0x681a2006
   15fd0:	2002f8c1 	.word	0x2002f8c1
   15fd4:	200af993 	.word	0x200af993
   15fd8:	f993730a 	.word	0xf993730a
   15fdc:	73ca200d 	.word	0x73ca200d
   15fe0:	200cf993 	.word	0x200cf993
   15fe4:	7a1a738a 	.word	0x7a1a738a
   15fe8:	7ada728a 	.word	0x7ada728a
   15fec:	7a5b734a 	.word	0x7a5b734a
   15ff0:	477072cb 	.word	0x477072cb
   15ff4:	30fff04f 	.word	0x30fff04f
   15ff8:	bf004770 	.word	0xbf004770

00015ffc <rpc_gnss_serialize_ephe>:
   15ffc:	28004603 	.word	0x28004603
   16000:	2900d04b 	.word	0x2900d04b
   16004:	2000d049 	.word	0x2000d049
   16008:	70482202 	.word	0x70482202
   1600c:	68da700a 	.word	0x68da700a
   16010:	f8c12040 	.word	0xf8c12040
   16014:	f9b3200b 	.word	0xf9b3200b
   16018:	f8a12008 	.word	0xf8a12008
   1601c:	f9932009 	.word	0xf9932009
   16020:	720a2006 	.word	0x720a2006
   16024:	2044f9b3 	.word	0x2044f9b3
   16028:	f9b3878a 	.word	0xf9b3878a
   1602c:	86ca203e 	.word	0x86ca203e
   16030:	2042f9b3 	.word	0x2042f9b3
   16034:	f9b3874a 	.word	0xf9b3874a
   16038:	868a203c 	.word	0x868a203c
   1603c:	2046f9b3 	.word	0x2046f9b3
   16040:	f9b387ca 	.word	0xf9b387ca
   16044:	870a2040 	.word	0x870a2040
   16048:	201cf9b3 	.word	0x201cf9b3
   1604c:	6a9a830a 	.word	0x6a9a830a
   16050:	2022f8c1 	.word	0x2022f8c1
   16054:	744a7c9a 	.word	0x744a7c9a
   16058:	70ca785a 	.word	0x70ca785a
   1605c:	62ca6b5a 	.word	0x62ca6b5a
   16060:	202cf9b3 	.word	0x202cf9b3
   16064:	885a84ca 	.word	0x885a84ca
   16068:	6a1a808a 	.word	0x6a1a808a
   1606c:	201af8c1 	.word	0x201af8c1
   16070:	630a6b9a 	.word	0x630a6b9a
   16074:	f8c16a5a 	.word	0xf8c16a5a
   16078:	6b1a201e 	.word	0x6b1a201e
   1607c:	781a628a 	.word	0x781a628a
   16080:	f993708a 	.word	0xf993708a
   16084:	73ca2010 	.word	0x73ca2010
   16088:	80ca889a 	.word	0x80ca889a
   1608c:	824a8a9a 	.word	0x824a8a9a
   16090:	740a7c5a 	.word	0x740a7c5a
   16094:	614b699b 	.word	0x614b699b
   16098:	f04f4770 	.word	0xf04f4770
   1609c:	477030ff 	.word	0x477030ff

000160a0 <rpc_gnss_serialize_alm>:
   160a0:	b3604603 	.word	0xb3604603
   160a4:	2000b359 	.word	0x2000b359
   160a8:	70482203 	.word	0x70482203
   160ac:	f9b3700a 	.word	0xf9b3700a
   160b0:	2021201c 	.word	0x2021201c
   160b4:	201df8a1 	.word	0x201df8a1
   160b8:	201ef9b3 	.word	0x201ef9b3
   160bc:	201ff8a1 	.word	0x201ff8a1
   160c0:	2006f9b3 	.word	0x2006f9b3
   160c4:	889a810a 	.word	0x889a810a
   160c8:	78da80ca 	.word	0x78da80ca
   160cc:	699a714a 	.word	0x699a714a
   160d0:	2019f8c1 	.word	0x2019f8c1
   160d4:	f8c1691a 	.word	0xf8c1691a
   160d8:	f9b32011 	.word	0xf9b32011
   160dc:	814a2008 	.word	0x814a2008
   160e0:	f8c168da 	.word	0xf8c168da
   160e4:	7a9a200d 	.word	0x7a9a200d
   160e8:	781a730a 	.word	0x781a730a
   160ec:	789a708a 	.word	0x789a708a
   160f0:	695a710a 	.word	0x695a710a
   160f4:	2015f8c1 	.word	0x2015f8c1
   160f8:	70cb785b 	.word	0x70cb785b
   160fc:	f04f4770 	.word	0xf04f4770
   16100:	477030ff 	.word	0x477030ff

00016104 <rpc_gnss_serialize_klob>:
   16104:	b1f04603 	.word	0xb1f04603
   16108:	2000b1e9 	.word	0x2000b1e9
   1610c:	70482204 	.word	0x70482204
   16110:	f993700a 	.word	0xf993700a
   16114:	200a2000 	.word	0x200a2000
   16118:	f993708a 	.word	0xf993708a
   1611c:	70ca2001 	.word	0x70ca2001
   16120:	2002f993 	.word	0x2002f993
   16124:	f993710a 	.word	0xf993710a
   16128:	714a2003 	.word	0x714a2003
   1612c:	2004f993 	.word	0x2004f993
   16130:	f993718a 	.word	0xf993718a
   16134:	71ca2005 	.word	0x71ca2005
   16138:	2006f993 	.word	0x2006f993
   1613c:	f993720a 	.word	0xf993720a
   16140:	724b3007 	.word	0x724b3007
   16144:	f04f4770 	.word	0xf04f4770
   16148:	477030ff 	.word	0x477030ff

0001614c <rpc_gnss_serialize_nequick>:
   1614c:	b1984603 	.word	0xb1984603
   16150:	2000b191 	.word	0x2000b191
   16154:	70482205 	.word	0x70482205
   16158:	f9b3700a 	.word	0xf9b3700a
   1615c:	200a2000 	.word	0x200a2000
   16160:	f9b3804a 	.word	0xf9b3804a
   16164:	808a2002 	.word	0x808a2002
   16168:	2004f9b3 	.word	0x2004f9b3
   1616c:	799a80ca 	.word	0x799a80ca
   16170:	79db720a 	.word	0x79db720a
   16174:	4770724b 	.word	0x4770724b
   16178:	30fff04f 	.word	0x30fff04f
   1617c:	bf004770 	.word	0xbf004770

00016180 <rpc_gnss_serialize_time_and_sv_tow>:
   16180:	b309b310 	.word	0xb309b310
   16184:	2500b470 	.word	0x2500b470
   16188:	460c2606 	.word	0x460c2606
   1618c:	700e704d 	.word	0x700e704d
   16190:	8805462b 	.word	0x8805462b
   16194:	804d4602 	.word	0x804d4602
   16198:	f8c168c5 	.word	0xf8c168c5
   1619c:	8905500a 	.word	0x8905500a
   161a0:	6840810d 	.word	0x6840810d
   161a4:	8a156048 	.word	0x8a156048
   161a8:	0043eb03 	.word	0x0043eb03
   161ac:	81c54408 	.word	0x81c54408
   161b0:	33017c90 	.word	0x33017c90
   161b4:	74202b20 	.word	0x74202b20
   161b8:	0204f102 	.word	0x0204f102
   161bc:	0403f104 	.word	0x0403f104
   161c0:	206ed1f1 	.word	0x206ed1f1
   161c4:	4770bc70 	.word	0x4770bc70
   161c8:	30fff04f 	.word	0x30fff04f
   161cc:	bf004770 	.word	0xbf004770

000161d0 <rpc_gnss_serialize_location>:
   161d0:	b1c84603 	.word	0xb1c84603
   161d4:	2000b1c1 	.word	0x2000b1c1
   161d8:	70482207 	.word	0x70482207
   161dc:	f9b3700a 	.word	0xf9b3700a
   161e0:	20112008 	.word	0x20112008
   161e4:	7b9a814a 	.word	0x7b9a814a
   161e8:	681a740a 	.word	0x681a740a
   161ec:	2002f8c1 	.word	0x2002f8c1
   161f0:	f8c1685a 	.word	0xf8c1685a
   161f4:	7b1a2006 	.word	0x7b1a2006
   161f8:	7b5a738a 	.word	0x7b5a738a
   161fc:	7a9a73ca 	.word	0x7a9a73ca
   16200:	7adb730a 	.word	0x7adb730a
   16204:	4770734b 	.word	0x4770734b
   16208:	30fff04f 	.word	0x30fff04f
   1620c:	bf004770 	.word	0xbf004770

00016210 <rpc_gnss_serialize_integrity>:
   16210:	b141b148 	.word	0xb141b148
   16214:	23082200 	.word	0x23082200
   16218:	700b704a 	.word	0x700b704a
   1621c:	20066803 	.word	0x20066803
   16220:	3002f8c1 	.word	0x3002f8c1
   16224:	f04f4770 	.word	0xf04f4770
   16228:	477030ff 	.word	0x477030ff

0001622c <ipc_trace_init>:
   1622c:	60184b01 	.word	0x60184b01
   16230:	bf004770 	.word	0xbf004770
   16234:	200205f8 	.word	0x200205f8

00016238 <bsd_os_trace_irq_handler>:
   16238:	4b6cb5f0 	.word	0x4b6cb5f0
   1623c:	781bb083 	.word	0x781bb083
   16240:	f0002b00 	.word	0xf0002b00
   16244:	4b6a80ad 	.word	0x4b6a80ad
   16248:	68a2681c 	.word	0x68a2681c
   1624c:	429a6863 	.word	0x429a6863
   16250:	f64bd02d 	.word	0xf64bd02d
   16254:	f8ad63ef 	.word	0xf8ad63ef
   16258:	78233000 	.word	0x78233000
   1625c:	f88d466e 	.word	0xf88d466e
   16260:	68633004 	.word	0x68633004
   16264:	429a2105 	.word	0x429a2105
   16268:	6927bf2a 	.word	0x6927bf2a
   1626c:	1abf1a9f 	.word	0x1abf1a9f
   16270:	bf94429a 	.word	0xbf94429a
   16274:	68e52500 	.word	0x68e52500
   16278:	bf88b2bf 	.word	0xbf88b2bf
   1627c:	46301b5b 	.word	0x46301b5b
   16280:	b29dbf88 	.word	0xb29dbf88
   16284:	7002f8ad 	.word	0x7002f8ad
   16288:	f8eef7fc 	.word	0xf8eef7fc
   1628c:	1002f8bd 	.word	0x1002f8bd
   16290:	f7fc68a0 	.word	0xf7fc68a0
   16294:	68a3f8e9 	.word	0x68a3f8e9
   16298:	441f6922 	.word	0x441f6922
   1629c:	bf084297 	.word	0xbf084297
   162a0:	60a768e3 	.word	0x60a768e3
   162a4:	60a3bf08 	.word	0x60a3bf08
   162a8:	f0402d00 	.word	0xf0402d00
   162ac:	4b51808d 	.word	0x4b51808d
   162b0:	68a2681c 	.word	0x68a2681c
   162b4:	429a6863 	.word	0x429a6863
   162b8:	f64bd02c 	.word	0xf64bd02c
   162bc:	f8ad63ef 	.word	0xf8ad63ef
   162c0:	78233000 	.word	0x78233000
   162c4:	f88d466e 	.word	0xf88d466e
   162c8:	68633004 	.word	0x68633004
   162cc:	429a2105 	.word	0x429a2105
   162d0:	6927bf2a 	.word	0x6927bf2a
   162d4:	1abf1a9f 	.word	0x1abf1a9f
   162d8:	bf94429a 	.word	0xbf94429a
   162dc:	68e52500 	.word	0x68e52500
   162e0:	bf88b2bf 	.word	0xbf88b2bf
   162e4:	46301b5b 	.word	0x46301b5b
   162e8:	b29dbf88 	.word	0xb29dbf88
   162ec:	7002f8ad 	.word	0x7002f8ad
   162f0:	f8baf7fc 	.word	0xf8baf7fc
   162f4:	1002f8bd 	.word	0x1002f8bd
   162f8:	f7fc68a0 	.word	0xf7fc68a0
   162fc:	68a3f8b5 	.word	0x68a3f8b5
   16300:	441f6922 	.word	0x441f6922
   16304:	bf084297 	.word	0xbf084297
   16308:	60a768e3 	.word	0x60a768e3
   1630c:	60a3bf08 	.word	0x60a3bf08
   16310:	d1482d00 	.word	0xd1482d00
   16314:	681c4b38 	.word	0x681c4b38
   16318:	686368a2 	.word	0x686368a2
   1631c:	d02b429a 	.word	0xd02b429a
   16320:	63eff64b 	.word	0x63eff64b
   16324:	3000f8ad 	.word	0x3000f8ad
   16328:	466e7823 	.word	0x466e7823
   1632c:	3004f88d 	.word	0x3004f88d
   16330:	21056863 	.word	0x21056863
   16334:	bf2a429a 	.word	0xbf2a429a
   16338:	1a9f6927 	.word	0x1a9f6927
   1633c:	429a1abf 	.word	0x429a1abf
   16340:	2500bf94 	.word	0x2500bf94
   16344:	b2bf68e5 	.word	0xb2bf68e5
   16348:	1b5bbf88 	.word	0x1b5bbf88
   1634c:	bf884630 	.word	0xbf884630
   16350:	f8adb29d 	.word	0xf8adb29d
   16354:	f7fc7002 	.word	0xf7fc7002
   16358:	f8bdf887 	.word	0xf8bdf887
   1635c:	68a01002 	.word	0x68a01002
   16360:	f882f7fc 	.word	0xf882f7fc
   16364:	692268a3 	.word	0x692268a3
   16368:	4297441f 	.word	0x4297441f
   1636c:	68e3bf08 	.word	0x68e3bf08
   16370:	bf0860a7 	.word	0xbf0860a7
   16374:	b90d60a3 	.word	0xb90d60a3
   16378:	bdf0b003 	.word	0xbdf0b003
   1637c:	21054630 	.word	0x21054630
   16380:	5002f8ad 	.word	0x5002f8ad
   16384:	f870f7fc 	.word	0xf870f7fc
   16388:	1002f8bd 	.word	0x1002f8bd
   1638c:	f7fc68e0 	.word	0xf7fc68e0
   16390:	f8bdf86b 	.word	0xf8bdf86b
   16394:	68e32002 	.word	0x68e32002
   16398:	60a34413 	.word	0x60a34413
   1639c:	bdf0b003 	.word	0xbdf0b003
   163a0:	f824f7fc 	.word	0xf824f7fc
   163a4:	2105e74f 	.word	0x2105e74f
   163a8:	f8ad4630 	.word	0xf8ad4630
   163ac:	f7fc5002 	.word	0xf7fc5002
   163b0:	f8bdf85b 	.word	0xf8bdf85b
   163b4:	68e01002 	.word	0x68e01002
   163b8:	f856f7fc 	.word	0xf856f7fc
   163bc:	2002f8bd 	.word	0x2002f8bd
   163c0:	441368e3 	.word	0x441368e3
   163c4:	e7a560a3 	.word	0xe7a560a3
   163c8:	46302105 	.word	0x46302105
   163cc:	5002f8ad 	.word	0x5002f8ad
   163d0:	f84af7fc 	.word	0xf84af7fc
   163d4:	1002f8bd 	.word	0x1002f8bd
   163d8:	f7fc68e0 	.word	0xf7fc68e0
   163dc:	f8bdf845 	.word	0xf8bdf845
   163e0:	68e32002 	.word	0x68e32002
   163e4:	60a34413 	.word	0x60a34413
   163e8:	bf00e761 	.word	0xbf00e761
   163ec:	20027406 	.word	0x20027406
   163f0:	200205f4 	.word	0x200205f4
   163f4:	200205ec 	.word	0x200205ec
   163f8:	200205f0 	.word	0x200205f0

000163fc <ipc_trace_handle>:
   163fc:	e92d2200 	.word	0xe92d2200
   16400:	4bb04ff0 	.word	0x4bb04ff0
   16404:	681bb083 	.word	0x681bb083
   16408:	695c6919 	.word	0x695c6919
   1640c:	741a7c18 	.word	0x741a7c18
   16410:	745a7c58 	.word	0x745a7c58
   16414:	749a7c98 	.word	0x749a7c98
   16418:	74da7cd8 	.word	0x74da7cd8
   1641c:	751a7d18 	.word	0x751a7d18
   16420:	755a7d58 	.word	0x755a7d58
   16424:	759a7d98 	.word	0x759a7d98
   16428:	75da7dd8 	.word	0x75da7dd8
   1642c:	3901b1b9 	.word	0x3901b1b9
   16430:	d8142903 	.word	0xd8142903
   16434:	f011e8df 	.word	0xf011e8df
   16438:	010300d6 	.word	0x010300d6
   1643c:	00160004 	.word	0x00160004
   16440:	20032501 	.word	0x20032501
   16444:	f06f2200 	.word	0xf06f2200
   16448:	4c9f015f 	.word	0x4c9f015f
   1644c:	7a1c7025 	.word	0x7a1c7025
   16450:	7a587218 	.word	0x7a587218
   16454:	7a98725a 	.word	0x7a98725a
   16458:	7ada729a 	.word	0x7ada729a
   1645c:	b00372d9 	.word	0xb00372d9
   16460:	8ff0e8bd 	.word	0x8ff0e8bd
   16464:	22002104 	.word	0x22002104
   16468:	005ff06f 	.word	0x005ff06f
   1646c:	72197a1c 	.word	0x72197a1c
   16470:	725a7a59 	.word	0x725a7a59
   16474:	7a9c4994 	.word	0x7a9c4994
   16478:	7adc729a 	.word	0x7adc729a
   1647c:	700a72d8 	.word	0x700a72d8
   16480:	2b00780b 	.word	0x2b00780b
   16484:	8117f000 	.word	0x8117f000
   16488:	681c4b90 	.word	0x681c4b90
   1648c:	686368a2 	.word	0x686368a2
   16490:	d02d429a 	.word	0xd02d429a
   16494:	63eff64b 	.word	0x63eff64b
   16498:	3000f8ad 	.word	0x3000f8ad
   1649c:	466e7823 	.word	0x466e7823
   164a0:	3004f88d 	.word	0x3004f88d
   164a4:	21056863 	.word	0x21056863
   164a8:	bf2a429a 	.word	0xbf2a429a
   164ac:	1a9f6927 	.word	0x1a9f6927
   164b0:	429a1abf 	.word	0x429a1abf
   164b4:	2500bf94 	.word	0x2500bf94
   164b8:	b2bf68e5 	.word	0xb2bf68e5
   164bc:	1b5bbf88 	.word	0x1b5bbf88
   164c0:	bf884630 	.word	0xbf884630
   164c4:	f8adb29d 	.word	0xf8adb29d
   164c8:	f7fb7002 	.word	0xf7fb7002
   164cc:	f8bdffcd 	.word	0xf8bdffcd
   164d0:	68a01002 	.word	0x68a01002
   164d4:	ffc8f7fb 	.word	0xffc8f7fb
   164d8:	692268a3 	.word	0x692268a3
   164dc:	4297441f 	.word	0x4297441f
   164e0:	68e3bf08 	.word	0x68e3bf08
   164e4:	bf0860a7 	.word	0xbf0860a7
   164e8:	2d0060a3 	.word	0x2d0060a3
   164ec:	80d2f040 	.word	0x80d2f040
   164f0:	681c4b77 	.word	0x681c4b77
   164f4:	686368a2 	.word	0x686368a2
   164f8:	d02d429a 	.word	0xd02d429a
   164fc:	63eff64b 	.word	0x63eff64b
   16500:	3000f8ad 	.word	0x3000f8ad
   16504:	466e7823 	.word	0x466e7823
   16508:	3004f88d 	.word	0x3004f88d
   1650c:	21056863 	.word	0x21056863
   16510:	bf2a429a 	.word	0xbf2a429a
   16514:	1a9f6927 	.word	0x1a9f6927
   16518:	429a1abf 	.word	0x429a1abf
   1651c:	2500bf94 	.word	0x2500bf94
   16520:	b2bf68e5 	.word	0xb2bf68e5
   16524:	1b5bbf88 	.word	0x1b5bbf88
   16528:	bf884630 	.word	0xbf884630
   1652c:	f8adb29d 	.word	0xf8adb29d
   16530:	f7fb7002 	.word	0xf7fb7002
   16534:	f8bdff99 	.word	0xf8bdff99
   16538:	68a01002 	.word	0x68a01002
   1653c:	ff94f7fb 	.word	0xff94f7fb
   16540:	692268a3 	.word	0x692268a3
   16544:	4297441f 	.word	0x4297441f
   16548:	68e3bf08 	.word	0x68e3bf08
   1654c:	bf0860a7 	.word	0xbf0860a7
   16550:	2d0060a3 	.word	0x2d0060a3
   16554:	808df040 	.word	0x808df040
   16558:	681c4b5e 	.word	0x681c4b5e
   1655c:	686368a2 	.word	0x686368a2
   16560:	f43f429a 	.word	0xf43f429a
   16564:	f64baf7c 	.word	0xf64baf7c
   16568:	f8ad63ef 	.word	0xf8ad63ef
   1656c:	78233000 	.word	0x78233000
   16570:	f88d466e 	.word	0xf88d466e
   16574:	68633004 	.word	0x68633004
   16578:	429a2105 	.word	0x429a2105
   1657c:	6927bf2a 	.word	0x6927bf2a
   16580:	1abf1a9f 	.word	0x1abf1a9f
   16584:	bf94429a 	.word	0xbf94429a
   16588:	68e52500 	.word	0x68e52500
   1658c:	bf88b2bf 	.word	0xbf88b2bf
   16590:	46301b5b 	.word	0x46301b5b
   16594:	b29dbf88 	.word	0xb29dbf88
   16598:	7002f8ad 	.word	0x7002f8ad
   1659c:	ff64f7fb 	.word	0xff64f7fb
   165a0:	1002f8bd 	.word	0x1002f8bd
   165a4:	f7fb68a0 	.word	0xf7fb68a0
   165a8:	68a3ff5f 	.word	0x68a3ff5f
   165ac:	441f6922 	.word	0x441f6922
   165b0:	bf084297 	.word	0xbf084297
   165b4:	60a768e3 	.word	0x60a768e3
   165b8:	60a3bf08 	.word	0x60a3bf08
   165bc:	f43f2d00 	.word	0xf43f2d00
   165c0:	2105af4e 	.word	0x2105af4e
   165c4:	f8ad4630 	.word	0xf8ad4630
   165c8:	f7fb5002 	.word	0xf7fb5002
   165cc:	f8bdff4d 	.word	0xf8bdff4d
   165d0:	68e01002 	.word	0x68e01002
   165d4:	ff48f7fb 	.word	0xff48f7fb
   165d8:	2002f8bd 	.word	0x2002f8bd
   165dc:	441368e3 	.word	0x441368e3
   165e0:	e73c60a3 	.word	0xe73c60a3
   165e4:	78114a38 	.word	0x78114a38
   165e8:	2100b109 	.word	0x2100b109
   165ec:	68a57011 	.word	0x68a57011
   165f0:	d0392d00 	.word	0xd0392d00
   165f4:	0c00f04f 	.word	0x0c00f04f
   165f8:	a0d4f8df 	.word	0xa0d4f8df
   165fc:	b0ccf8df 	.word	0xb0ccf8df
   16600:	46e14934 	.word	0x46e14934
   16604:	46624666 	.word	0x46624666
   16608:	e000f8d1 	.word	0xe000f8d1
   1660c:	8000f8da 	.word	0x8000f8da
   16610:	7000f8db 	.word	0x7000f8db
   16614:	2963e008 	.word	0x2963e008
   16618:	2961d016 	.word	0x2961d016
   1661c:	4607bf04 	.word	0x4607bf04
   16620:	32012601 	.word	0x32012601
   16624:	d01342aa 	.word	0xd01342aa
   16628:	eb041c91 	.word	0xeb041c91
   1662c:	68480181 	.word	0x68480181
   16630:	29627801 	.word	0x29627801
   16634:	4680d1ef 	.word	0x4680d1ef
   16638:	0901f04f 	.word	0x0901f04f
   1663c:	f7fbe7f1 	.word	0xf7fbe7f1
   16640:	b003fecd 	.word	0xb003fecd
   16644:	8ff0e8bd 	.word	0x8ff0e8bd
   16648:	f04f4686 	.word	0xf04f4686
   1664c:	e7e80c01 	.word	0xe7e80c01
   16650:	f1b9bba6 	.word	0xf1b9bba6
   16654:	d0010f00 	.word	0xd0010f00
   16658:	8000f8ca 	.word	0x8000f8ca
   1665c:	0f00f1bc 	.word	0x0f00f1bc
   16660:	4a1cd002 	.word	0x4a1cd002
   16664:	e000f8c2 	.word	0xe000f8c2
   16668:	22002001 	.word	0x22002001
   1666c:	015ff06f 	.word	0x015ff06f
   16670:	2105e6ed 	.word	0x2105e6ed
   16674:	f8ad4630 	.word	0xf8ad4630
   16678:	f7fb5002 	.word	0xf7fb5002
   1667c:	f8bdfef5 	.word	0xf8bdfef5
   16680:	68e01002 	.word	0x68e01002
   16684:	fef0f7fb 	.word	0xfef0f7fb
   16688:	2002f8bd 	.word	0x2002f8bd
   1668c:	441368e3 	.word	0x441368e3
   16690:	e76160a3 	.word	0xe76160a3
   16694:	46302105 	.word	0x46302105
   16698:	5002f8ad 	.word	0x5002f8ad
   1669c:	fee4f7fb 	.word	0xfee4f7fb
   166a0:	1002f8bd 	.word	0x1002f8bd
   166a4:	f7fb68e0 	.word	0xf7fb68e0
   166a8:	f8bdfedf 	.word	0xf8bdfedf
   166ac:	68e32002 	.word	0x68e32002
   166b0:	60a34413 	.word	0x60a34413
   166b4:	f7fbe71c 	.word	0xf7fbe71c
   166b8:	e6e5fe99 	.word	0xe6e5fe99
   166bc:	7000f8cb 	.word	0x7000f8cb
   166c0:	bf00e7c7 	.word	0xbf00e7c7
   166c4:	200205f8 	.word	0x200205f8
   166c8:	20027406 	.word	0x20027406
   166cc:	200205f4 	.word	0x200205f4
   166d0:	200205ec 	.word	0x200205ec
   166d4:	200205f0 	.word	0x200205f0

000166d8 <rpc_trace_coredump_in_progress>:
   166d8:	78184b01 	.word	0x78184b01
   166dc:	bf004770 	.word	0xbf004770
   166e0:	20027406 	.word	0x20027406

000166e4 <ecp_modp>:
   166e4:	6e4bb570 	.word	0x6e4bb570
   166e8:	2b004604 	.word	0x2b004604
   166ec:	6803d03d 	.word	0x6803d03d
   166f0:	2b00460d 	.word	0x2b00460d
   166f4:	4620db2f 	.word	0x4620db2f
   166f8:	fe06f005 	.word	0xfe06f005
   166fc:	ebb06dab 	.word	0xebb06dab
   16700:	d82d0f43 	.word	0xd82d0f43
   16704:	46206e6b 	.word	0x46206e6b
   16708:	46064798 	.word	0x46064798
   1670c:	3504bb08 	.word	0x3504bb08
   16710:	2100e00a 	.word	0x2100e00a
   16714:	f0064620 	.word	0xf0064620
   16718:	b1a0f8c7 	.word	0xb1a0f8c7
   1671c:	4621462a 	.word	0x4621462a
   16720:	f0064620 	.word	0xf0064620
   16724:	b9e8fa79 	.word	0xb9e8fa79
   16728:	2b006823 	.word	0x2b006823
   1672c:	4629dbf1 	.word	0x4629dbf1
   16730:	f0064620 	.word	0xf0064620
   16734:	2800f851 	.word	0x2800f851
   16738:	462adb0b 	.word	0x462adb0b
   1673c:	46204621 	.word	0x46204621
   16740:	f9aaf006 	.word	0xf9aaf006
   16744:	4629b970 	.word	0x4629b970
   16748:	f0064620 	.word	0xf0064620
   1674c:	2800f845 	.word	0x2800f845
   16750:	4630daf3 	.word	0x4630daf3
   16754:	2100bd70 	.word	0x2100bd70
   16758:	f8a6f006 	.word	0xf8a6f006
   1675c:	d0ca2800 	.word	0xd0ca2800
   16760:	e7f64e05 	.word	0xe7f64e05
   16764:	46304606 	.word	0x46304606
   16768:	1d0abd70 	.word	0x1d0abd70
   1676c:	4070e8bd 	.word	0x4070e8bd
   16770:	f0074601 	.word	0xf0074601
   16774:	bf00b84d 	.word	0xbf00b84d
   16778:	ffffb080 	.word	0xffffb080

0001677c <ecp_double_jac>:
   1677c:	43f0e92d 	.word	0x43f0e92d
   16780:	b08d4606 	.word	0xb08d4606
   16784:	46884668 	.word	0x46884668
   16788:	f0054615 	.word	0xf0054615
   1678c:	a803fb63 	.word	0xa803fb63
   16790:	fb60f005 	.word	0xfb60f005
   16794:	f005a806 	.word	0xf005a806
   16798:	a809fb5d 	.word	0xa809fb5d
   1679c:	fb5af005 	.word	0xfb5af005
   167a0:	2b0069b3 	.word	0x2b0069b3
   167a4:	80b2f000 	.word	0x80b2f000
   167a8:	4629462a 	.word	0x4629462a
   167ac:	f006a803 	.word	0xf006a803
   167b0:	4604fb67 	.word	0x4604fb67
   167b4:	4668b178 	.word	0x4668b178
   167b8:	fb54f005 	.word	0xfb54f005
   167bc:	f005a803 	.word	0xf005a803
   167c0:	a806fb51 	.word	0xa806fb51
   167c4:	fb4ef005 	.word	0xfb4ef005
   167c8:	f005a809 	.word	0xf005a809
   167cc:	4620fb4b 	.word	0x4620fb4b
   167d0:	e8bdb00d 	.word	0xe8bdb00d
   167d4:	463183f0 	.word	0x463183f0
   167d8:	f7ffa803 	.word	0xf7ffa803
   167dc:	4604ff83 	.word	0x4604ff83
   167e0:	d1e82800 	.word	0xd1e82800
   167e4:	a9032203 	.word	0xa9032203
   167e8:	f0064668 	.word	0xf0064668
   167ec:	4604fc41 	.word	0x4604fc41
   167f0:	d1e02800 	.word	0xd1e02800
   167f4:	e0071d37 	.word	0xe0071d37
   167f8:	4669463a 	.word	0x4669463a
   167fc:	f0064668 	.word	0xf0064668
   16800:	4604f94b 	.word	0x4604f94b
   16804:	d1d62800 	.word	0xd1d62800
   16808:	46684639 	.word	0x46684639
   1680c:	ffe4f005 	.word	0xffe4f005
   16810:	daf12800 	.word	0xdaf12800
   16814:	0910f106 	.word	0x0910f106
   16818:	21004648 	.word	0x21004648
   1681c:	f844f006 	.word	0xf844f006
   16820:	f0402800 	.word	0xf0402800
   16824:	f10580e2 	.word	0xf10580e2
   16828:	464a090c 	.word	0x464a090c
   1682c:	a8064649 	.word	0xa8064649
   16830:	fb26f006 	.word	0xfb26f006
   16834:	28004604 	.word	0x28004604
   16838:	4631d1bd 	.word	0x4631d1bd
   1683c:	f7ffa806 	.word	0xf7ffa806
   16840:	4604ff51 	.word	0x4604ff51
   16844:	d1b62800 	.word	0xd1b62800
   16848:	a8062101 	.word	0xa8062101
   1684c:	fe9ef005 	.word	0xfe9ef005
   16850:	b1404604 	.word	0xb1404604
   16854:	a906e7af 	.word	0xa906e7af
   16858:	4608463a 	.word	0x4608463a
   1685c:	f91cf006 	.word	0xf91cf006
   16860:	28004604 	.word	0x28004604
   16864:	4639d1a7 	.word	0x4639d1a7
   16868:	f005a806 	.word	0xf005a806
   1686c:	2800ffb5 	.word	0x2800ffb5
   16870:	aa06daf1 	.word	0xaa06daf1
   16874:	a8034629 	.word	0xa8034629
   16878:	fb02f006 	.word	0xfb02f006
   1687c:	28004604 	.word	0x28004604
   16880:	4631d199 	.word	0x4631d199
   16884:	f7ffa803 	.word	0xf7ffa803
   16888:	4604ff2d 	.word	0x4604ff2d
   1688c:	d1922800 	.word	0xd1922800
   16890:	a8032101 	.word	0xa8032101
   16894:	fe7af005 	.word	0xfe7af005
   16898:	b1404604 	.word	0xb1404604
   1689c:	a903e78b 	.word	0xa903e78b
   168a0:	4608463a 	.word	0x4608463a
   168a4:	f8f8f006 	.word	0xf8f8f006
   168a8:	28004604 	.word	0x28004604
   168ac:	4639d183 	.word	0x4639d183
   168b0:	f005a803 	.word	0xf005a803
   168b4:	2800ff91 	.word	0x2800ff91
   168b8:	aa06daf1 	.word	0xaa06daf1
   168bc:	a8094611 	.word	0xa8094611
   168c0:	fadef006 	.word	0xfadef006
   168c4:	28004604 	.word	0x28004604
   168c8:	af75f47f 	.word	0xaf75f47f
   168cc:	a8094631 	.word	0xa8094631
   168d0:	ff08f7ff 	.word	0xff08f7ff
   168d4:	28004604 	.word	0x28004604
   168d8:	af6df47f 	.word	0xaf6df47f
   168dc:	a8092101 	.word	0xa8092101
   168e0:	fe54f005 	.word	0xfe54f005
   168e4:	28004604 	.word	0x28004604
   168e8:	af65f47f 	.word	0xaf65f47f
   168ec:	a8094639 	.word	0xa8094639
   168f0:	ff72f005 	.word	0xff72f005
   168f4:	f2c02800 	.word	0xf2c02800
   168f8:	a90980c5 	.word	0xa90980c5
   168fc:	4608463a 	.word	0x4608463a
   16900:	f8caf006 	.word	0xf8caf006
   16904:	28004604 	.word	0x28004604
   16908:	e754d0f0 	.word	0xe754d0f0
   1690c:	0218f105 	.word	0x0218f105
   16910:	a8034611 	.word	0xa8034611
   16914:	fab4f006 	.word	0xfab4f006
   16918:	28004604 	.word	0x28004604
   1691c:	af4bf47f 	.word	0xaf4bf47f
   16920:	a8034631 	.word	0xa8034631
   16924:	fedef7ff 	.word	0xfedef7ff
   16928:	28004604 	.word	0x28004604
   1692c:	af43f47f 	.word	0xaf43f47f
   16930:	4629aa03 	.word	0x4629aa03
   16934:	f006a806 	.word	0xf006a806
   16938:	4604f96f 	.word	0x4604f96f
   1693c:	f47f2800 	.word	0xf47f2800
   16940:	1d37af3a 	.word	0x1d37af3a
   16944:	a906e008 	.word	0xa906e008
   16948:	4608463a 	.word	0x4608463a
   1694c:	f8a4f006 	.word	0xf8a4f006
   16950:	28004604 	.word	0x28004604
   16954:	af2ff47f 	.word	0xaf2ff47f
   16958:	a8064639 	.word	0xa8064639
   1695c:	ff3cf005 	.word	0xff3cf005
   16960:	daf02800 	.word	0xdaf02800
   16964:	4629aa03 	.word	0x4629aa03
   16968:	f006a809 	.word	0xf006a809
   1696c:	4604f9c9 	.word	0x4604f9c9
   16970:	e720b170 	.word	0xe720b170
   16974:	a8092100 	.word	0xa8092100
   16978:	ff96f005 	.word	0xff96f005
   1697c:	a909b158 	.word	0xa909b158
   16980:	4608463a 	.word	0x4608463a
   16984:	f948f006 	.word	0xf948f006
   16988:	28004604 	.word	0x28004604
   1698c:	af13f47f 	.word	0xaf13f47f
   16990:	2b009b09 	.word	0x2b009b09
   16994:	aa09dbee 	.word	0xaa09dbee
   16998:	a803a906 	.word	0xa803a906
   1699c:	fa70f006 	.word	0xfa70f006
   169a0:	28004604 	.word	0x28004604
   169a4:	af07f47f 	.word	0xaf07f47f
   169a8:	a8034631 	.word	0xa8034631
   169ac:	fe9af7ff 	.word	0xfe9af7ff
   169b0:	28004604 	.word	0x28004604
   169b4:	aefff47f 	.word	0xaefff47f
   169b8:	a9032203 	.word	0xa9032203
   169bc:	f0064668 	.word	0xf0064668
   169c0:	4604fb57 	.word	0x4604fb57
   169c4:	f47f2800 	.word	0xf47f2800
   169c8:	4639aef6 	.word	0x4639aef6
   169cc:	f0054668 	.word	0xf0054668
   169d0:	2800ff03 	.word	0x2800ff03
   169d4:	af27f6ff 	.word	0xaf27f6ff
   169d8:	4669463a 	.word	0x4669463a
   169dc:	f0064668 	.word	0xf0064668
   169e0:	4604f85b 	.word	0x4604f85b
   169e4:	d0f02800 	.word	0xd0f02800
   169e8:	f105e6e5 	.word	0xf105e6e5
   169ec:	46110218 	.word	0x46110218
   169f0:	f006a803 	.word	0xf006a803
   169f4:	4604fa45 	.word	0x4604fa45
   169f8:	f47f2800 	.word	0xf47f2800
   169fc:	4631aedc 	.word	0x4631aedc
   16a00:	f7ffa803 	.word	0xf7ffa803
   16a04:	4604fe6f 	.word	0x4604fe6f
   16a08:	f47f2800 	.word	0xf47f2800
   16a0c:	aa03aed4 	.word	0xaa03aed4
   16a10:	a8064611 	.word	0xa8064611
   16a14:	fa34f006 	.word	0xfa34f006
   16a18:	28004604 	.word	0x28004604
   16a1c:	aecbf47f 	.word	0xaecbf47f
   16a20:	a8064631 	.word	0xa8064631
   16a24:	fe5ef7ff 	.word	0xfe5ef7ff
   16a28:	28004604 	.word	0x28004604
   16a2c:	aec3f47f 	.word	0xaec3f47f
   16a30:	a906464a 	.word	0xa906464a
   16a34:	f006a803 	.word	0xf006a803
   16a38:	4604fa23 	.word	0x4604fa23
   16a3c:	f47f2800 	.word	0xf47f2800
   16a40:	4631aeba 	.word	0x4631aeba
   16a44:	f7ffa803 	.word	0xf7ffa803
   16a48:	4604fe4d 	.word	0x4604fe4d
   16a4c:	f47f2800 	.word	0xf47f2800
   16a50:	aa03aeb2 	.word	0xaa03aeb2
   16a54:	46684669 	.word	0x46684669
   16a58:	f8def006 	.word	0xf8def006
   16a5c:	28004604 	.word	0x28004604
   16a60:	aea9f47f 	.word	0xaea9f47f
   16a64:	46684639 	.word	0x46684639
   16a68:	feb6f005 	.word	0xfeb6f005
   16a6c:	f6ff2800 	.word	0xf6ff2800
   16a70:	463aaeda 	.word	0x463aaeda
   16a74:	46684669 	.word	0x46684669
   16a78:	f80ef006 	.word	0xf80ef006
   16a7c:	28004604 	.word	0x28004604
   16a80:	e698d0f0 	.word	0xe698d0f0
   16a84:	4669466a 	.word	0x4669466a
   16a88:	f006a806 	.word	0xf006a806
   16a8c:	4604f9f9 	.word	0x4604f9f9
   16a90:	f47f2800 	.word	0xf47f2800
   16a94:	4631ae90 	.word	0x4631ae90
   16a98:	f7ffa806 	.word	0xf7ffa806
   16a9c:	4604fe23 	.word	0x4604fe23
   16aa0:	f47f2800 	.word	0xf47f2800
   16aa4:	a906ae88 	.word	0xa906ae88
   16aa8:	4608aa03 	.word	0x4608aa03
   16aac:	f928f006 	.word	0xf928f006
   16ab0:	28004604 	.word	0x28004604
   16ab4:	ae7ff47f 	.word	0xae7ff47f
   16ab8:	2b009b06 	.word	0x2b009b06
   16abc:	2100da0d 	.word	0x2100da0d
   16ac0:	f005a806 	.word	0xf005a806
   16ac4:	b140fef1 	.word	0xb140fef1
   16ac8:	463aa906 	.word	0x463aa906
   16acc:	f0064608 	.word	0xf0064608
   16ad0:	4604f8a3 	.word	0x4604f8a3
   16ad4:	d0ef2800 	.word	0xd0ef2800
   16ad8:	a906e66d 	.word	0xa906e66d
   16adc:	4608aa03 	.word	0x4608aa03
   16ae0:	f90ef006 	.word	0xf90ef006
   16ae4:	28004604 	.word	0x28004604
   16ae8:	ae65f47f 	.word	0xae65f47f
   16aec:	2b009b06 	.word	0x2b009b06
   16af0:	2100da0d 	.word	0x2100da0d
   16af4:	f005a806 	.word	0xf005a806
   16af8:	b140fed7 	.word	0xb140fed7
   16afc:	463aa906 	.word	0x463aa906
   16b00:	f0064608 	.word	0xf0064608
   16b04:	4604f889 	.word	0x4604f889
   16b08:	d0ef2800 	.word	0xd0ef2800
   16b0c:	a903e653 	.word	0xa903e653
   16b10:	4608aa06 	.word	0x4608aa06
   16b14:	f8f4f006 	.word	0xf8f4f006
   16b18:	28004604 	.word	0x28004604
   16b1c:	ae4bf47f 	.word	0xae4bf47f
   16b20:	2b009b03 	.word	0x2b009b03
   16b24:	2100da0d 	.word	0x2100da0d
   16b28:	f005a803 	.word	0xf005a803
   16b2c:	b140febd 	.word	0xb140febd
   16b30:	463aa903 	.word	0x463aa903
   16b34:	f0064608 	.word	0xf0064608
   16b38:	4604f86f 	.word	0x4604f86f
   16b3c:	d0ef2800 	.word	0xd0ef2800
   16b40:	a903e639 	.word	0xa903e639
   16b44:	4608466a 	.word	0x4608466a
   16b48:	f99af006 	.word	0xf99af006
   16b4c:	28004604 	.word	0x28004604
   16b50:	ae31f47f 	.word	0xae31f47f
   16b54:	a8034631 	.word	0xa8034631
   16b58:	fdc4f7ff 	.word	0xfdc4f7ff
   16b5c:	28004604 	.word	0x28004604
   16b60:	ae29f47f 	.word	0xae29f47f
   16b64:	aa09a903 	.word	0xaa09a903
   16b68:	f0064608 	.word	0xf0064608
   16b6c:	4604f8c9 	.word	0x4604f8c9
   16b70:	f47f2800 	.word	0xf47f2800
   16b74:	9b03ae20 	.word	0x9b03ae20
   16b78:	da0d2b00 	.word	0xda0d2b00
   16b7c:	a8032100 	.word	0xa8032100
   16b80:	fe92f005 	.word	0xfe92f005
   16b84:	a903b140 	.word	0xa903b140
   16b88:	4608463a 	.word	0x4608463a
   16b8c:	f844f006 	.word	0xf844f006
   16b90:	28004604 	.word	0x28004604
   16b94:	e60ed0ef 	.word	0xe60ed0ef
   16b98:	0218f105 	.word	0x0218f105
   16b9c:	a8094649 	.word	0xa8094649
   16ba0:	f96ef006 	.word	0xf96ef006
   16ba4:	28004604 	.word	0x28004604
   16ba8:	ae05f47f 	.word	0xae05f47f
   16bac:	a8094631 	.word	0xa8094631
   16bb0:	fd98f7ff 	.word	0xfd98f7ff
   16bb4:	28004604 	.word	0x28004604
   16bb8:	adfdf47f 	.word	0xadfdf47f
   16bbc:	a8092101 	.word	0xa8092101
   16bc0:	fce4f005 	.word	0xfce4f005
   16bc4:	28004604 	.word	0x28004604
   16bc8:	adf5f47f 	.word	0xadf5f47f
   16bcc:	a8094639 	.word	0xa8094639
   16bd0:	fe02f005 	.word	0xfe02f005
   16bd4:	db082800 	.word	0xdb082800
   16bd8:	463aa909 	.word	0x463aa909
   16bdc:	f0054608 	.word	0xf0054608
   16be0:	4604ff5b 	.word	0x4604ff5b
   16be4:	d0f12800 	.word	0xd0f12800
   16be8:	a906e5e5 	.word	0xa906e5e5
   16bec:	f0054640 	.word	0xf0054640
   16bf0:	4604f9b5 	.word	0x4604f9b5
   16bf4:	f47f2800 	.word	0xf47f2800
   16bf8:	a903adde 	.word	0xa903adde
   16bfc:	000cf108 	.word	0x000cf108
   16c00:	f9acf005 	.word	0xf9acf005
   16c04:	28004604 	.word	0x28004604
   16c08:	add5f47f 	.word	0xadd5f47f
   16c0c:	0018f108 	.word	0x0018f108
   16c10:	f005a909 	.word	0xf005a909
   16c14:	4604f9a3 	.word	0x4604f9a3
   16c18:	bf00e5cd 	.word	0xbf00e5cd

00016c1c <ecp_normalize_jac>:
   16c1c:	f101b5f0 	.word	0xf101b5f0
   16c20:	b0870518 	.word	0xb0870518
   16c24:	4607460e 	.word	0x4607460e
   16c28:	46282100 	.word	0x46282100
   16c2c:	fe3cf005 	.word	0xfe3cf005
   16c30:	4604b918 	.word	0x4604b918
   16c34:	b0074620 	.word	0xb0074620
   16c38:	4668bdf0 	.word	0x4668bdf0
   16c3c:	f90af005 	.word	0xf90af005
   16c40:	f005a803 	.word	0xf005a803
   16c44:	4668f907 	.word	0x4668f907
   16c48:	46291d3a 	.word	0x46291d3a
   16c4c:	f936f007 	.word	0xf936f007
   16c50:	b1404604 	.word	0xb1404604
   16c54:	f0054668 	.word	0xf0054668
   16c58:	a803f905 	.word	0xa803f905
   16c5c:	f902f005 	.word	0xf902f005
   16c60:	b0074620 	.word	0xb0074620
   16c64:	466abdf0 	.word	0x466abdf0
   16c68:	a8034669 	.word	0xa8034669
   16c6c:	f908f006 	.word	0xf908f006
   16c70:	28004604 	.word	0x28004604
   16c74:	4639d1ee 	.word	0x4639d1ee
   16c78:	f7ffa803 	.word	0xf7ffa803
   16c7c:	4604fd33 	.word	0x4604fd33
   16c80:	d1e72800 	.word	0xd1e72800
   16c84:	4631aa03 	.word	0x4631aa03
   16c88:	f0064630 	.word	0xf0064630
   16c8c:	4604f8f9 	.word	0x4604f8f9
   16c90:	d1df2800 	.word	0xd1df2800
   16c94:	46304639 	.word	0x46304639
   16c98:	fd24f7ff 	.word	0xfd24f7ff
   16c9c:	28004604 	.word	0x28004604
   16ca0:	360cd1d8 	.word	0x360cd1d8
   16ca4:	46304631 	.word	0x46304631
   16ca8:	f006aa03 	.word	0xf006aa03
   16cac:	4604f8e9 	.word	0x4604f8e9
   16cb0:	d1cf2800 	.word	0xd1cf2800
   16cb4:	46304639 	.word	0x46304639
   16cb8:	fd14f7ff 	.word	0xfd14f7ff
   16cbc:	28004604 	.word	0x28004604
   16cc0:	466ad1c8 	.word	0x466ad1c8
   16cc4:	46304631 	.word	0x46304631
   16cc8:	f8daf006 	.word	0xf8daf006
   16ccc:	28004604 	.word	0x28004604
   16cd0:	4639d1c0 	.word	0x4639d1c0
   16cd4:	f7ff4630 	.word	0xf7ff4630
   16cd8:	4604fd05 	.word	0x4604fd05
   16cdc:	d1b92800 	.word	0xd1b92800
   16ce0:	21014628 	.word	0x21014628
   16ce4:	fac6f005 	.word	0xfac6f005
   16ce8:	e7b34604 	.word	0xe7b34604

00016cec <ecp_normalize_jac_many.part.3>:
   16cec:	4ff0e92d 	.word	0x4ff0e92d
   16cf0:	b08b4682 	.word	0xb08b4682
   16cf4:	4610468b 	.word	0x4610468b
   16cf8:	4616210c 	.word	0x4616210c
   16cfc:	fcfef008 	.word	0xfcfef008
   16d00:	f0002800 	.word	0xf0002800
   16d04:	468080fe 	.word	0x468080fe
   16d08:	f005a801 	.word	0xf005a801
   16d0c:	a804f8a3 	.word	0xa804f8a3
   16d10:	f8a0f005 	.word	0xf8a0f005
   16d14:	f005a807 	.word	0xf005a807
   16d18:	f8dbf89d 	.word	0xf8dbf89d
   16d1c:	46401000 	.word	0x46401000
   16d20:	f0053118 	.word	0xf0053118
   16d24:	4604f91b 	.word	0x4604f91b
   16d28:	2e01bb60 	.word	0x2e01bb60
   16d2c:	46d9d946 	.word	0x46d9d946
   16d30:	f1082701 	.word	0xf1082701
   16d34:	e008050c 	.word	0xe008050c
   16d38:	46514628 	.word	0x46514628
   16d3c:	fcd2f7ff 	.word	0xfcd2f7ff
   16d40:	4604350c 	.word	0x4604350c
   16d44:	42beb968 	.word	0x42beb968
   16d48:	f859d038 	.word	0xf859d038
   16d4c:	f1a52f04 	.word	0xf1a52f04
   16d50:	3218010c 	.word	0x3218010c
   16d54:	f0064628 	.word	0xf0064628
   16d58:	3701f893 	.word	0x3701f893
   16d5c:	28004604 	.word	0x28004604
   16d60:	a801d0ea 	.word	0xa801d0ea
   16d64:	f87ef005 	.word	0xf87ef005
   16d68:	f005a804 	.word	0xf005a804
   16d6c:	a807f87b 	.word	0xa807f87b
   16d70:	f878f005 	.word	0xf878f005
   16d74:	a901e010 	.word	0xa901e010
   16d78:	f005a804 	.word	0xf005a804
   16d7c:	4604f8ef 	.word	0x4604f8ef
   16d80:	d0532800 	.word	0xd0532800
   16d84:	f005a801 	.word	0xf005a801
   16d88:	a804f86d 	.word	0xa804f86d
   16d8c:	f86af005 	.word	0xf86af005
   16d90:	f005a807 	.word	0xf005a807
   16d94:	b156f867 	.word	0xb156f867
   16d98:	eb064645 	.word	0xeb064645
   16d9c:	eb080646 	.word	0xeb080646
   16da0:	46280686 	.word	0x46280686
   16da4:	f005350c 	.word	0xf005350c
   16da8:	42b5f85d 	.word	0x42b5f85d
   16dac:	4640d1f9 	.word	0x4640d1f9
   16db0:	fcb8f008 	.word	0xfcb8f008
   16db4:	b00b4620 	.word	0xb00b4620
   16db8:	8ff0e8bd 	.word	0x8ff0e8bd
   16dbc:	0546eb06 	.word	0x0546eb06
   16dc0:	f1a500ad 	.word	0xf1a500ad
   16dc4:	4441010c 	.word	0x4441010c
   16dc8:	0204f10a 	.word	0x0204f10a
   16dcc:	f007a801 	.word	0xf007a801
   16dd0:	4604f875 	.word	0x4604f875
   16dd4:	d1d52800 	.word	0xd1d52800
   16dd8:	4380f106 	.word	0x4380f106
   16ddc:	3b013d18 	.word	0x3b013d18
   16de0:	eb0b4445 	.word	0xeb0b4445
   16de4:	1e770b83 	.word	0x1e770b83
   16de8:	d0c42f00 	.word	0xd0c42f00
   16dec:	a901462a 	.word	0xa901462a
   16df0:	f006a804 	.word	0xf006a804
   16df4:	4604f845 	.word	0x4604f845
   16df8:	d1c32800 	.word	0xd1c32800
   16dfc:	a8044651 	.word	0xa8044651
   16e00:	fc70f7ff 	.word	0xfc70f7ff
   16e04:	28004604 	.word	0x28004604
   16e08:	f8dbd1bc 	.word	0xf8dbd1bc
   16e0c:	a9012000 	.word	0xa9012000
   16e10:	46083218 	.word	0x46083218
   16e14:	f834f006 	.word	0xf834f006
   16e18:	28004604 	.word	0x28004604
   16e1c:	4651d1b2 	.word	0x4651d1b2
   16e20:	f7ffa801 	.word	0xf7ffa801
   16e24:	4604fc5f 	.word	0x4604fc5f
   16e28:	d1ab2800 	.word	0xd1ab2800
   16e2c:	4611aa04 	.word	0x4611aa04
   16e30:	f006a807 	.word	0xf006a807
   16e34:	4604f825 	.word	0x4604f825
   16e38:	d1a32800 	.word	0xd1a32800
   16e3c:	a8074651 	.word	0xa8074651
   16e40:	fc50f7ff 	.word	0xfc50f7ff
   16e44:	28004604 	.word	0x28004604
   16e48:	f8dbd19c 	.word	0xf8dbd19c
   16e4c:	aa071000 	.word	0xaa071000
   16e50:	f0064608 	.word	0xf0064608
   16e54:	4604f815 	.word	0x4604f815
   16e58:	d1932800 	.word	0xd1932800
   16e5c:	f8db4651 	.word	0xf8db4651
   16e60:	f7ff0000 	.word	0xf7ff0000
   16e64:	4604fc3f 	.word	0x4604fc3f
   16e68:	d18b2800 	.word	0xd18b2800
   16e6c:	1000f8db 	.word	0x1000f8db
   16e70:	310caa07 	.word	0x310caa07
   16e74:	f0064608 	.word	0xf0064608
   16e78:	4604f803 	.word	0x4604f803
   16e7c:	d1812800 	.word	0xd1812800
   16e80:	0000f8db 	.word	0x0000f8db
   16e84:	300c4651 	.word	0x300c4651
   16e88:	fc2cf7ff 	.word	0xfc2cf7ff
   16e8c:	28004604 	.word	0x28004604
   16e90:	af78f47f 	.word	0xaf78f47f
   16e94:	1000f8db 	.word	0x1000f8db
   16e98:	310caa04 	.word	0x310caa04
   16e9c:	f0054608 	.word	0xf0054608
   16ea0:	4604ffef 	.word	0x4604ffef
   16ea4:	f47f2800 	.word	0xf47f2800
   16ea8:	f8dbaf6d 	.word	0xf8dbaf6d
   16eac:	46510000 	.word	0x46510000
   16eb0:	f7ff300c 	.word	0xf7ff300c
   16eb4:	4604fc17 	.word	0x4604fc17
   16eb8:	f47f2800 	.word	0xf47f2800
   16ebc:	f8daaf63 	.word	0xf8daaf63
   16ec0:	f8db1008 	.word	0xf8db1008
   16ec4:	f0040000 	.word	0xf0040000
   16ec8:	4604ffe7 	.word	0x4604ffe7
   16ecc:	f47f2800 	.word	0xf47f2800
   16ed0:	f8dbaf59 	.word	0xf8dbaf59
   16ed4:	f8da0000 	.word	0xf8da0000
   16ed8:	300c1008 	.word	0x300c1008
   16edc:	ffdcf004 	.word	0xffdcf004
   16ee0:	28004604 	.word	0x28004604
   16ee4:	af4ef47f 	.word	0xaf4ef47f
   16ee8:	0000f8db 	.word	0x0000f8db
   16eec:	30183d0c 	.word	0x30183d0c
   16ef0:	0b04f1ab 	.word	0x0b04f1ab
   16ef4:	ffb6f004 	.word	0xffb6f004
   16ef8:	f43f2f00 	.word	0xf43f2f00
   16efc:	3f01af43 	.word	0x3f01af43
   16f00:	4c01e772 	.word	0x4c01e772
   16f04:	bf00e756 	.word	0xbf00e756
   16f08:	ffffb280 	.word	0xffffb280

00016f0c <symbol_0002b14>:
   16f0c:	b510b1b8 	.word	0xb510b1b8
   16f10:	227c4604 	.word	0x227c4604
   16f14:	f00d2100 	.word	0xf00d2100
   16f18:	f104fd90 	.word	0xf104fd90
   16f1c:	f004007c 	.word	0xf004007c
   16f20:	f104ff99 	.word	0xf104ff99
   16f24:	f0040088 	.word	0xf0040088
   16f28:	f104ff95 	.word	0xf104ff95
   16f2c:	f0040094 	.word	0xf0040094
   16f30:	f104ff91 	.word	0xf104ff91
   16f34:	e8bd00a0 	.word	0xe8bd00a0
   16f38:	f0044010 	.word	0xf0044010
   16f3c:	4770bf8b 	.word	0x4770bf8b

00016f40 <symbol_0000ef7>:
   16f40:	d0482800 	.word	0xd0482800
   16f44:	6e03b570 	.word	0x6e03b570
   16f48:	2b014604 	.word	0x2b014604
   16f4c:	6f60d123 	.word	0x6f60d123
   16f50:	6fa2b1c8 	.word	0x6fa2b1c8
   16f54:	2600b1aa 	.word	0x2600b1aa
   16f58:	03c6eb06 	.word	0x03c6eb06
   16f5c:	0583eb10 	.word	0x0583eb10
   16f60:	4628d035 	.word	0x4628d035
   16f64:	ff7ef004 	.word	0xff7ef004
   16f68:	000cf105 	.word	0x000cf105
   16f6c:	ff7af004 	.word	0xff7af004
   16f70:	0018f105 	.word	0x0018f105
   16f74:	ff76f004 	.word	0xff76f004
   16f78:	36016fa2 	.word	0x36016fa2
   16f7c:	6f604296 	.word	0x6f604296
   16f80:	f008d3ea 	.word	0xf008d3ea
   16f84:	2200fbcf 	.word	0x2200fbcf
   16f88:	037cf104 	.word	0x037cf104
   16f8c:	34017022 	.word	0x34017022
   16f90:	d1fb429c 	.word	0xd1fb429c
   16f94:	3004bd70 	.word	0x3004bd70
   16f98:	ff64f004 	.word	0xff64f004
   16f9c:	0010f104 	.word	0x0010f104
   16fa0:	ff60f004 	.word	0xff60f004
   16fa4:	001cf104 	.word	0x001cf104
   16fa8:	ff5cf004 	.word	0xff5cf004
   16fac:	0028f104 	.word	0x0028f104
   16fb0:	ff58f004 	.word	0xff58f004
   16fb4:	0034f104 	.word	0x0034f104
   16fb8:	ff54f004 	.word	0xff54f004
   16fbc:	0040f104 	.word	0x0040f104
   16fc0:	ff50f004 	.word	0xff50f004
   16fc4:	004cf104 	.word	0x004cf104
   16fc8:	ff4cf004 	.word	0xff4cf004
   16fcc:	3601e7bf 	.word	0x3601e7bf
   16fd0:	d3c14296 	.word	0xd3c14296
   16fd4:	4770e7d5 	.word	0x4770e7d5

00016fd8 <symbol_0001d5f>:
   16fd8:	b510b1a8 	.word	0xb510b1a8
   16fdc:	f7ff4604 	.word	0xf7ff4604
   16fe0:	f104ffaf 	.word	0xf104ffaf
   16fe4:	f004007c 	.word	0xf004007c
   16fe8:	f104ff3d 	.word	0xf104ff3d
   16fec:	f0040088 	.word	0xf0040088
   16ff0:	f104ff39 	.word	0xf104ff39
   16ff4:	f0040094 	.word	0xf0040094
   16ff8:	f104ff35 	.word	0xf104ff35
   16ffc:	e8bd00a0 	.word	0xe8bd00a0
   17000:	f0044010 	.word	0xf0044010
   17004:	4770bf2f 	.word	0x4770bf2f

00017008 <symbol_000d41f>:
   17008:	2101b510 	.word	0x2101b510
   1700c:	f0054604 	.word	0xf0054604
   17010:	b100f931 	.word	0xb100f931
   17014:	2101bd10 	.word	0x2101bd10
   17018:	000cf104 	.word	0x000cf104
   1701c:	f92af005 	.word	0xf92af005
   17020:	d1f72800 	.word	0xd1f72800
   17024:	f1044601 	.word	0xf1044601
   17028:	e8bd0018 	.word	0xe8bd0018
   1702c:	f0054010 	.word	0xf0054010
   17030:	bf00b921 	.word	0xbf00b921

00017034 <ecp_add_mixed>:
   17034:	47f0e92d 	.word	0x47f0e92d
   17038:	0518f102 	.word	0x0518f102
   1703c:	4681b096 	.word	0x4681b096
   17040:	46284688 	.word	0x46284688
   17044:	46172100 	.word	0x46172100
   17048:	f005461e 	.word	0xf005461e
   1704c:	2800fc2d 	.word	0x2800fc2d
   17050:	6a33d048 	.word	0x6a33d048
   17054:	f106b18b 	.word	0xf106b18b
   17058:	46200418 	.word	0x46200418
   1705c:	f0052100 	.word	0xf0052100
   17060:	2800fc23 	.word	0x2800fc23
   17064:	80d7f000 	.word	0x80d7f000
   17068:	b1336a33 	.word	0xb1336a33
   1706c:	21014620 	.word	0x21014620
   17070:	fc1af005 	.word	0xfc1af005
   17074:	f0402800 	.word	0xf0402800
   17078:	a80180e7 	.word	0xa80180e7
   1707c:	feeaf004 	.word	0xfeeaf004
   17080:	f004a804 	.word	0xf004a804
   17084:	a807fee7 	.word	0xa807fee7
   17088:	fee4f004 	.word	0xfee4f004
   1708c:	f004a80a 	.word	0xf004a80a
   17090:	a80dfee1 	.word	0xa80dfee1
   17094:	fedef004 	.word	0xfedef004
   17098:	f004a810 	.word	0xf004a810
   1709c:	a813fedb 	.word	0xa813fedb
   170a0:	fed8f004 	.word	0xfed8f004
   170a4:	4629462a 	.word	0x4629462a
   170a8:	f005a801 	.word	0xf005a801
   170ac:	4604fee9 	.word	0x4604fee9
   170b0:	a801b380 	.word	0xa801b380
   170b4:	fed6f004 	.word	0xfed6f004
   170b8:	f004a804 	.word	0xf004a804
   170bc:	a807fed3 	.word	0xa807fed3
   170c0:	fed0f004 	.word	0xfed0f004
   170c4:	f004a80a 	.word	0xf004a80a
   170c8:	a80dfecd 	.word	0xa80dfecd
   170cc:	fecaf004 	.word	0xfecaf004
   170d0:	f004a810 	.word	0xf004a810
   170d4:	a813fec7 	.word	0xa813fec7
   170d8:	fec4f004 	.word	0xfec4f004
   170dc:	b0164620 	.word	0xb0164620
   170e0:	87f0e8bd 	.word	0x87f0e8bd
   170e4:	46404631 	.word	0x46404631
   170e8:	ff38f004 	.word	0xff38f004
   170ec:	28004604 	.word	0x28004604
   170f0:	f106d1f4 	.word	0xf106d1f4
   170f4:	f108010c 	.word	0xf108010c
   170f8:	f004000c 	.word	0xf004000c
   170fc:	4604ff2f 	.word	0x4604ff2f
   17100:	d1eb2800 	.word	0xd1eb2800
   17104:	0118f106 	.word	0x0118f106
   17108:	0018f108 	.word	0x0018f108
   1710c:	ff26f004 	.word	0xff26f004
   17110:	e7e34604 	.word	0xe7e34604
   17114:	a8014649 	.word	0xa8014649
   17118:	fae4f7ff 	.word	0xfae4f7ff
   1711c:	28004604 	.word	0x28004604
   17120:	462ad1c7 	.word	0x462ad1c7
   17124:	a804a901 	.word	0xa804a901
   17128:	feaaf005 	.word	0xfeaaf005
   1712c:	28004604 	.word	0x28004604
   17130:	4649d1bf 	.word	0x4649d1bf
   17134:	f7ffa804 	.word	0xf7ffa804
   17138:	4604fad5 	.word	0x4604fad5
   1713c:	d1b82800 	.word	0xd1b82800
   17140:	4632a901 	.word	0x4632a901
   17144:	f0054608 	.word	0xf0054608
   17148:	4604fe9b 	.word	0x4604fe9b
   1714c:	d1b02800 	.word	0xd1b02800
   17150:	a8014649 	.word	0xa8014649
   17154:	fac6f7ff 	.word	0xfac6f7ff
   17158:	28004604 	.word	0x28004604
   1715c:	a904d1a9 	.word	0xa904d1a9
   17160:	020cf106 	.word	0x020cf106
   17164:	f0054608 	.word	0xf0054608
   17168:	4604fe8b 	.word	0x4604fe8b
   1716c:	d1a02800 	.word	0xd1a02800
   17170:	a8044649 	.word	0xa8044649
   17174:	fab6f7ff 	.word	0xfab6f7ff
   17178:	28004604 	.word	0x28004604
   1717c:	a901d199 	.word	0xa901d199
   17180:	4608463a 	.word	0x4608463a
   17184:	fdbcf005 	.word	0xfdbcf005
   17188:	28004604 	.word	0x28004604
   1718c:	f109d191 	.word	0xf109d191
   17190:	e00c0604 	.word	0xe00c0604
   17194:	a8012100 	.word	0xa8012100
   17198:	fb86f005 	.word	0xfb86f005
   1719c:	a901b150 	.word	0xa901b150
   171a0:	46084632 	.word	0x46084632
   171a4:	fd38f005 	.word	0xfd38f005
   171a8:	28004604 	.word	0x28004604
   171ac:	9b01d181 	.word	0x9b01d181
   171b0:	dbef2b00 	.word	0xdbef2b00
   171b4:	f107a904 	.word	0xf107a904
   171b8:	4632060c 	.word	0x4632060c
   171bc:	f0054608 	.word	0xf0054608
   171c0:	4604fd9f 	.word	0x4604fd9f
   171c4:	f47f2800 	.word	0xf47f2800
   171c8:	f109af74 	.word	0xf109af74
   171cc:	e00d0a04 	.word	0xe00d0a04
   171d0:	a8042100 	.word	0xa8042100
   171d4:	fb68f005 	.word	0xfb68f005
   171d8:	a904b158 	.word	0xa904b158
   171dc:	46084652 	.word	0x46084652
   171e0:	fd1af005 	.word	0xfd1af005
   171e4:	28004604 	.word	0x28004604
   171e8:	af63f47f 	.word	0xaf63f47f
   171ec:	2b009b04 	.word	0x2b009b04
   171f0:	2100dbee 	.word	0x2100dbee
   171f4:	f005a801 	.word	0xf005a801
   171f8:	4601fb57 	.word	0x4601fb57
   171fc:	a804bb30 	.word	0xa804bb30
   17200:	fb52f005 	.word	0xfb52f005
   17204:	d17f2800 	.word	0xd17f2800
   17208:	4641463a 	.word	0x4641463a
   1720c:	f7ff4648 	.word	0xf7ff4648
   17210:	4604fab5 	.word	0x4604fab5
   17214:	4639e74d 	.word	0x4639e74d
   17218:	f0044640 	.word	0xf0044640
   1721c:	4604fe9f 	.word	0x4604fe9f
   17220:	f47f2800 	.word	0xf47f2800
   17224:	f107af5b 	.word	0xf107af5b
   17228:	f108010c 	.word	0xf108010c
   1722c:	f004000c 	.word	0xf004000c
   17230:	4604fe95 	.word	0x4604fe95
   17234:	f47f2800 	.word	0xf47f2800
   17238:	4629af51 	.word	0x4629af51
   1723c:	0018f108 	.word	0x0018f108
   17240:	fe8cf004 	.word	0xfe8cf004
   17244:	e7494604 	.word	0xe7494604
   17248:	e7474c8b 	.word	0xe7474c8b
   1724c:	aa014629 	.word	0xaa014629
   17250:	f005a813 	.word	0xf005a813
   17254:	4604fe15 	.word	0x4604fe15
   17258:	f47f2800 	.word	0xf47f2800
   1725c:	4649af2a 	.word	0x4649af2a
   17260:	f7ffa813 	.word	0xf7ffa813
   17264:	4604fa3f 	.word	0x4604fa3f
   17268:	f47f2800 	.word	0xf47f2800
   1726c:	aa01af22 	.word	0xaa01af22
   17270:	a8074611 	.word	0xa8074611
   17274:	fe04f005 	.word	0xfe04f005
   17278:	28004604 	.word	0x28004604
   1727c:	af19f47f 	.word	0xaf19f47f
   17280:	a8074649 	.word	0xa8074649
   17284:	fa2ef7ff 	.word	0xfa2ef7ff
   17288:	28004604 	.word	0x28004604
   1728c:	af11f47f 	.word	0xaf11f47f
   17290:	a907aa01 	.word	0xa907aa01
   17294:	f005a80a 	.word	0xf005a80a
   17298:	4604fdf3 	.word	0x4604fdf3
   1729c:	f47f2800 	.word	0xf47f2800
   172a0:	4649af08 	.word	0x4649af08
   172a4:	f7ffa80a 	.word	0xf7ffa80a
   172a8:	4604fa1d 	.word	0x4604fa1d
   172ac:	f47f2800 	.word	0xf47f2800
   172b0:	a907af00 	.word	0xa907af00
   172b4:	4608463a 	.word	0x4608463a
   172b8:	fde2f005 	.word	0xfde2f005
   172bc:	28004604 	.word	0x28004604
   172c0:	aef7f47f 	.word	0xaef7f47f
   172c4:	a8074649 	.word	0xa8074649
   172c8:	fa0cf7ff 	.word	0xfa0cf7ff
   172cc:	28004604 	.word	0x28004604
   172d0:	aeeff47f 	.word	0xaeeff47f
   172d4:	a9072202 	.word	0xa9072202
   172d8:	f005a801 	.word	0xf005a801
   172dc:	4604fec9 	.word	0x4604fec9
   172e0:	f47f2800 	.word	0xf47f2800
   172e4:	f109aee6 	.word	0xf109aee6
   172e8:	46290504 	.word	0x46290504
   172ec:	f005a801 	.word	0xf005a801
   172f0:	2800fa73 	.word	0x2800fa73
   172f4:	a901db0d 	.word	0xa901db0d
   172f8:	4608462a 	.word	0x4608462a
   172fc:	fbccf005 	.word	0xfbccf005
   17300:	28004604 	.word	0x28004604
   17304:	e6d4d0f1 	.word	0xe6d4d0f1
   17308:	f7ff4640 	.word	0xf7ff4640
   1730c:	4604fe7d 	.word	0x4604fe7d
   17310:	aa04e6cf 	.word	0xaa04e6cf
   17314:	a80d4611 	.word	0xa80d4611
   17318:	fdb2f005 	.word	0xfdb2f005
   1731c:	28004604 	.word	0x28004604
   17320:	aec7f47f 	.word	0xaec7f47f
   17324:	a80d4649 	.word	0xa80d4649
   17328:	f9dcf7ff 	.word	0xf9dcf7ff
   1732c:	28004604 	.word	0x28004604
   17330:	aebff47f 	.word	0xaebff47f
   17334:	aa01a90d 	.word	0xaa01a90d
   17338:	f0054608 	.word	0xf0054608
   1733c:	4604fce1 	.word	0x4604fce1
   17340:	f47f2800 	.word	0xf47f2800
   17344:	9b0daeb6 	.word	0x9b0daeb6
   17348:	da0d2b00 	.word	0xda0d2b00
   1734c:	a80d2100 	.word	0xa80d2100
   17350:	faaaf005 	.word	0xfaaaf005
   17354:	a90db140 	.word	0xa90db140
   17358:	4608462a 	.word	0x4608462a
   1735c:	fc5cf005 	.word	0xfc5cf005
   17360:	28004604 	.word	0x28004604
   17364:	e6a4d0ef 	.word	0xe6a4d0ef
   17368:	aa0aa90d 	.word	0xaa0aa90d
   1736c:	f0054608 	.word	0xf0054608
   17370:	4604fcc7 	.word	0x4604fcc7
   17374:	f47f2800 	.word	0xf47f2800
   17378:	9b0dae9c 	.word	0x9b0dae9c
   1737c:	da0d2b00 	.word	0xda0d2b00
   17380:	a80d2100 	.word	0xa80d2100
   17384:	fa90f005 	.word	0xfa90f005
   17388:	a90db140 	.word	0xa90db140
   1738c:	4608462a 	.word	0x4608462a
   17390:	fc42f005 	.word	0xfc42f005
   17394:	28004604 	.word	0x28004604
   17398:	e68ad0ef 	.word	0xe68ad0ef
   1739c:	aa0da907 	.word	0xaa0da907
   173a0:	f0054608 	.word	0xf0054608
   173a4:	4604fcad 	.word	0x4604fcad
   173a8:	f47f2800 	.word	0xf47f2800
   173ac:	9b07ae82 	.word	0x9b07ae82
   173b0:	da0d2b00 	.word	0xda0d2b00
   173b4:	a8072100 	.word	0xa8072100
   173b8:	fa76f005 	.word	0xfa76f005
   173bc:	a907b140 	.word	0xa907b140
   173c0:	4608462a 	.word	0x4608462a
   173c4:	fc28f005 	.word	0xfc28f005
   173c8:	28004604 	.word	0x28004604
   173cc:	e670d0ef 	.word	0xe670d0ef
   173d0:	aa04a907 	.word	0xaa04a907
   173d4:	f0054608 	.word	0xf0054608
   173d8:	4604fd53 	.word	0x4604fd53
   173dc:	f47f2800 	.word	0xf47f2800
   173e0:	4649ae68 	.word	0x4649ae68
   173e4:	f7ffa807 	.word	0xf7ffa807
   173e8:	4604f97d 	.word	0x4604f97d
   173ec:	f47f2800 	.word	0xf47f2800
   173f0:	a90aae60 	.word	0xa90aae60
   173f4:	46084632 	.word	0x46084632
   173f8:	fd42f005 	.word	0xfd42f005
   173fc:	28004604 	.word	0x28004604
   17400:	ae57f47f 	.word	0xae57f47f
   17404:	a80a4649 	.word	0xa80a4649
   17408:	f96cf7ff 	.word	0xf96cf7ff
   1740c:	28004604 	.word	0x28004604
   17410:	ae4ff47f 	.word	0xae4ff47f
   17414:	a907aa0a 	.word	0xa907aa0a
   17418:	f005a810 	.word	0xf005a810
   1741c:	4604fc71 	.word	0x4604fc71
   17420:	f47f2800 	.word	0xf47f2800
   17424:	9b10ae46 	.word	0x9b10ae46
   17428:	da0d2b00 	.word	0xda0d2b00
   1742c:	a8102100 	.word	0xa8102100
   17430:	fa3af005 	.word	0xfa3af005
   17434:	a910b140 	.word	0xa910b140
   17438:	4608462a 	.word	0x4608462a
   1743c:	fbecf005 	.word	0xfbecf005
   17440:	28004604 	.word	0x28004604
   17444:	e634d0ef 	.word	0xe634d0ef
   17448:	4640a90d 	.word	0x4640a90d
   1744c:	fd86f004 	.word	0xfd86f004
   17450:	28004604 	.word	0x28004604
   17454:	ae2df47f 	.word	0xae2df47f
   17458:	f108a910 	.word	0xf108a910
   1745c:	f004000c 	.word	0xf004000c
   17460:	4604fd7d 	.word	0x4604fd7d
   17464:	f47f2800 	.word	0xf47f2800
   17468:	f108ae24 	.word	0xf108ae24
   1746c:	a9130018 	.word	0xa9130018
   17470:	fd74f004 	.word	0xfd74f004
   17474:	e61c4604 	.word	0xe61c4604
   17478:	ffffb080 	.word	0xffffb080

0001747c <ecp_mul_comb>:
   1747c:	4ff0e92d 	.word	0x4ff0e92d
   17480:	46984605 	.word	0x46984605
   17484:	034cf105 	.word	0x034cf105
   17488:	b0e5461c 	.word	0xb0e5461c
   1748c:	9104a80d 	.word	0x9104a80d
   17490:	93084617 	.word	0x93084617
   17494:	fcdef004 	.word	0xfcdef004
   17498:	f004a810 	.word	0xf004a810
   1749c:	4620fcdb 	.word	0x4620fcdb
   174a0:	f0042100 	.word	0xf0042100
   174a4:	2801ff21 	.word	0x2801ff21
   174a8:	f0409007 	.word	0xf0409007
   174ac:	6deb81c9 	.word	0x6deb81c9
   174b0:	090cf108 	.word	0x090cf108
   174b4:	7fc0f5b3 	.word	0x7fc0f5b3
   174b8:	2605bf2c 	.word	0x2605bf2c
   174bc:	46482604 	.word	0x46482604
   174c0:	0134f105 	.word	0x0134f105
   174c4:	f04fbf2c 	.word	0xf04fbf2c
   174c8:	f04f0a06 	.word	0xf04f0a06
   174cc:	46b30a05 	.word	0x46b30a05
   174d0:	f982f005 	.word	0xf982f005
   174d4:	d0722800 	.word	0xd0722800
   174d8:	42a66dec 	.word	0x42a66dec
   174dc:	2301d245 	.word	0x2301d245
   174e0:	32fff10b 	.word	0x32fff10b
   174e4:	93024093 	.word	0x93024093
   174e8:	b2db4434 	.word	0xb2db4434
   174ec:	93033c01 	.word	0x93033c01
   174f0:	fbb42300 	.word	0xfbb42300
   174f4:	9802f4f6 	.word	0x9802f4f6
   174f8:	93059206 	.word	0x93059206
   174fc:	f0082124 	.word	0xf0082124
   17500:	9001f8fd 	.word	0x9001f8fd
   17504:	d0402800 	.word	0xd0402800
   17508:	f0044641 	.word	0xf0044641
   1750c:	f8ddfd27 	.word	0xf8ddfd27
   17510:	4683a004 	.word	0x4683a004
   17514:	f0002800 	.word	0xf0002800
   17518:	9b058086 	.word	0x9b058086
   1751c:	d17b2b00 	.word	0xd17b2b00
   17520:	9c012500 	.word	0x9c012500
   17524:	35019e03 	.word	0x35019e03
   17528:	4620b154 	.word	0x4620b154
   1752c:	fc9af004 	.word	0xfc9af004
   17530:	000cf104 	.word	0x000cf104
   17534:	fc96f004 	.word	0xfc96f004
   17538:	0018f104 	.word	0x0018f104
   1753c:	fc92f004 	.word	0xfc92f004
   17540:	429eb2eb 	.word	0x429eb2eb
   17544:	0424f104 	.word	0x0424f104
   17548:	9801d8ed 	.word	0x9801d8ed
   1754c:	f8eaf008 	.word	0xf8eaf008
   17550:	f004a80d 	.word	0xf004a80d
   17554:	a810fc87 	.word	0xa810fc87
   17558:	fc84f004 	.word	0xfc84f004
   1755c:	0f00f1bb 	.word	0x0f00f1bb
   17560:	4658d11b 	.word	0x4658d11b
   17564:	e8bdb065 	.word	0xe8bdb065
   17568:	26028ff0 	.word	0x26028ff0
   1756c:	22012300 	.word	0x22012300
   17570:	21244630 	.word	0x21244630
   17574:	6602e9cd 	.word	0x6602e9cd
   17578:	3205e9cd 	.word	0x3205e9cd
   1757c:	f8bef008 	.word	0xf8bef008
   17580:	08643401 	.word	0x08643401
   17584:	28009001 	.word	0x28009001
   17588:	a80dd1be 	.word	0xa80dd1be
   1758c:	fc6af004 	.word	0xfc6af004
   17590:	f004a810 	.word	0xf004a810
   17594:	f8dffc67 	.word	0xf8dffc67
   17598:	9c04b644 	.word	0x9c04b644
   1759c:	d0e02c00 	.word	0xd0e02c00
   175a0:	f0044620 	.word	0xf0044620
   175a4:	f104fc5f 	.word	0xf104fc5f
   175a8:	f004000c 	.word	0xf004000c
   175ac:	f104fc5b 	.word	0xf104fc5b
   175b0:	f0040018 	.word	0xf0040018
   175b4:	4658fc57 	.word	0x4658fc57
   175b8:	e8bdb065 	.word	0xe8bdb065
   175bc:	f1058ff0 	.word	0xf1058ff0
   175c0:	46400128 	.word	0x46400128
   175c4:	f908f005 	.word	0xf908f005
   175c8:	d1852800 	.word	0xd1852800
   175cc:	459a6deb 	.word	0x459a6deb
   175d0:	82f4f0c0 	.word	0x82f4f0c0
   175d4:	1c5c2602 	.word	0x1c5c2602
   175d8:	e9cd2301 	.word	0xe9cd2301
   175dc:	08646602 	.word	0x08646602
   175e0:	6f6b9306 	.word	0x6f6b9306
   175e4:	2b009301 	.word	0x2b009301
   175e8:	80eaf000 	.word	0x80eaf000
   175ec:	46382100 	.word	0x46382100
   175f0:	fe7af004 	.word	0xfe7af004
   175f4:	46804639 	.word	0x46804639
   175f8:	f004a80d 	.word	0xf004a80d
   175fc:	4683fcaf 	.word	0x4683fcaf
   17600:	463ab950 	.word	0x463ab950
   17604:	a8109908 	.word	0xa8109908
   17608:	fb7af005 	.word	0xfb7af005
   1760c:	28004683 	.word	0x28004683
   17610:	9b07d036 	.word	0x9b07d036
   17614:	d0832b00 	.word	0xd0832b00
   17618:	f004a80d 	.word	0xf004a80d
   1761c:	a810fc23 	.word	0xa810fc23
   17620:	fc20f004 	.word	0xfc20f004
   17624:	4649e7b9 	.word	0x4649e7b9
   17628:	000cf10a 	.word	0x000cf10a
   1762c:	fc96f004 	.word	0xfc96f004
   17630:	28004683 	.word	0x28004683
   17634:	af71f47f 	.word	0xaf71f47f
   17638:	f1089b01 	.word	0xf1089b01
   1763c:	f1030118 	.word	0xf1030118
   17640:	f0040018 	.word	0xf0040018
   17644:	4683fc8b 	.word	0x4683fc8b
   17648:	f47f2800 	.word	0xf47f2800
   1764c:	462aaf66 	.word	0x462aaf66
   17650:	0901f04f 	.word	0x0901f04f
   17654:	46254651 	.word	0x46254651
   17658:	464c4682 	.word	0x464c4682
   1765c:	96094690 	.word	0x96094690
   17660:	9e06970a 	.word	0x9e06970a
   17664:	eb049f01 	.word	0xeb049f01
   17668:	eb0704c4 	.word	0xeb0704c4
   1766c:	46200484 	.word	0x46200484
   17670:	fc74f004 	.word	0xfc74f004
   17674:	f0002800 	.word	0xf0002800
   17678:	468380a7 	.word	0x468380a7
   1767c:	e74d9b05 	.word	0xe74d9b05
   17680:	33fff118 	.word	0x33fff118
   17684:	2301bf18 	.word	0x2301bf18
   17688:	461aa910 	.word	0x461aa910
   1768c:	9302a80d 	.word	0x9302a80d
   17690:	fd92f004 	.word	0xfd92f004
   17694:	28004683 	.word	0x28004683
   17698:	a822d1bb 	.word	0xa822d1bb
   1769c:	46591c62 	.word	0x46591c62
   176a0:	f9cbf00d 	.word	0xf9cbf00d
   176a4:	f10db3d4 	.word	0xf10db3d4
   176a8:	46d80988 	.word	0x46d80988
   176ac:	46c246cb 	.word	0x46c246cb
   176b0:	46512700 	.word	0x46512700
   176b4:	f004a80d 	.word	0xf004a80d
   176b8:	f89bfe17 	.word	0xf89bfe17
   176bc:	40b83000 	.word	0x40b83000
   176c0:	43033701 	.word	0x43033701
   176c4:	44a242b7 	.word	0x44a242b7
   176c8:	3000f88b 	.word	0x3000f88b
   176cc:	f108d1f1 	.word	0xf108d1f1
   176d0:	45a00801 	.word	0x45a00801
   176d4:	0b01f10b 	.word	0x0b01f10b
   176d8:	2300d1e9 	.word	0x2300d1e9
   176dc:	0c01f04f 	.word	0x0c01f04f
   176e0:	1088f89d 	.word	0x1088f89d
   176e4:	6f01f819 	.word	0x6f01f819
   176e8:	0c01f10c 	.word	0x0c01f10c
   176ec:	0203ea86 	.word	0x0203ea86
   176f0:	f00043d0 	.word	0xf00043d0
   176f4:	fb000001 	.word	0xfb000001
   176f8:	b252f701 	.word	0xb252f701
   176fc:	4033b27f 	.word	0x4033b27f
   17700:	0607ea02 	.word	0x0607ea02
   17704:	ea41407a 	.word	0xea41407a
   17708:	433310c0 	.word	0x433310c0
   1770c:	45e0b2d1 	.word	0x45e0b2d1
   17710:	0c01f809 	.word	0x0c01f809
   17714:	f889b2db 	.word	0xf889b2db
   17718:	d2e31000 	.word	0xd2e31000
   1771c:	a8192600 	.word	0xa8192600
   17720:	fb98f004 	.word	0xfb98f004
   17724:	f004a81c 	.word	0xf004a81c
   17728:	a81ffb95 	.word	0xa81ffb95
   1772c:	fb92f004 	.word	0xfb92f004
   17730:	f813ab22 	.word	0xf813ab22
   17734:	44239004 	.word	0x44239004
   17738:	9b049306 	.word	0x9b049306
   1773c:	469b4632 	.word	0x469b4632
   17740:	95059f01 	.word	0x95059f01
   17744:	9f03463d 	.word	0x9f03463d
   17748:	0845f3c9 	.word	0x0845f3c9
   1774c:	0a0cf103 	.word	0x0a0cf103
   17750:	0408eba2 	.word	0x0408eba2
   17754:	f484fab4 	.word	0xf484fab4
   17758:	46290964 	.word	0x46290964
   1775c:	46584622 	.word	0x46584622
   17760:	fd2af004 	.word	0xfd2af004
   17764:	f1053601 	.word	0xf1053601
   17768:	3524010c 	.word	0x3524010c
   1776c:	d16a2800 	.word	0xd16a2800
   17770:	46504622 	.word	0x46504622
   17774:	fd20f004 	.word	0xfd20f004
   17778:	2800b2f2 	.word	0x2800b2f2
   1777c:	42bad163 	.word	0x42bad163
   17780:	9d05d3e6 	.word	0x9d05d3e6
   17784:	1d2ba816 	.word	0x1d2ba816
   17788:	9308461c 	.word	0x9308461c
   1778c:	fb62f004 	.word	0xfb62f004
   17790:	4621a816 	.word	0x4621a816
   17794:	f0054652 	.word	0xf0054652
   17798:	4683fab3 	.word	0x4683fab3
   1779c:	f0002800 	.word	0xf0002800
   177a0:	a81680c3 	.word	0xa81680c3
   177a4:	fb5ef004 	.word	0xfb5ef004
   177a8:	f004a819 	.word	0xf004a819
   177ac:	a81cfb5b 	.word	0xa81cfb5b
   177b0:	fb58f004 	.word	0xfb58f004
   177b4:	f004a81f 	.word	0xf004a81f
   177b8:	9b07fb55 	.word	0x9b07fb55
   177bc:	e6ac9305 	.word	0xe6ac9305
   177c0:	98022301 	.word	0x98022301
   177c4:	e6999305 	.word	0xe6999305
   177c8:	0b59ea4f 	.word	0x0b59ea4f
   177cc:	0bcbeb0b 	.word	0x0bcbeb0b
   177d0:	0b8beb07 	.word	0x0b8beb07
   177d4:	010cf10b 	.word	0x010cf10b
   177d8:	000cf104 	.word	0x000cf104
   177dc:	fbbef004 	.word	0xfbbef004
   177e0:	f47f2800 	.word	0xf47f2800
   177e4:	f10baf4a 	.word	0xf10baf4a
   177e8:	f1040118 	.word	0xf1040118
   177ec:	f0040018 	.word	0xf0040018
   177f0:	2800fbb5 	.word	0x2800fbb5
   177f4:	af41f47f 	.word	0xaf41f47f
   177f8:	4683b165 	.word	0x4683b165
   177fc:	46214622 	.word	0x46214622
   17800:	f7fe4640 	.word	0xf7fe4640
   17804:	f10bffbb 	.word	0xf10bffbb
   17808:	28000b01 	.word	0x28000b01
   1780c:	af35f47f 	.word	0xaf35f47f
   17810:	d1f345ab 	.word	0xd1f345ab
   17814:	0949ea4f 	.word	0x0949ea4f
   17818:	f989fa5f 	.word	0xf989fa5f
   1781c:	0301f10a 	.word	0x0301f10a
   17820:	f842aa22 	.word	0xf842aa22
   17824:	fa5f402a 	.word	0xfa5f402a
   17828:	fa39fa83 	.word	0xfa39fa83
   1782c:	464cf306 	.word	0x464cf306
   17830:	ea4fd10b 	.word	0xea4fd10b
   17834:	eb010159 	.word	0xeb010159
   17838:	eb0701c1 	.word	0xeb0701c1
   1783c:	e7120181 	.word	0xe7120181
   17840:	b39cf8df 	.word	0xb39cf8df
   17844:	4683e68d 	.word	0x4683e68d
   17848:	4652e7ae 	.word	0x4652e7ae
   1784c:	462c2a01 	.word	0x462c2a01
   17850:	46459e09 	.word	0x46459e09
   17854:	d9619f0a 	.word	0xd9619f0a
   17858:	4640a922 	.word	0x4640a922
   1785c:	fa46f7ff 	.word	0xfa46f7ff
   17860:	f1bb4683 	.word	0xf1bb4683
   17864:	f47f0f00 	.word	0xf47f0f00
   17868:	2301ae58 	.word	0x2301ae58
   1786c:	46da9a01 	.word	0x46da9a01
   17870:	970b3a24 	.word	0x970b3a24
   17874:	461f4693 	.word	0x461f4693
   17878:	4609e9cd 	.word	0x4609e9cd
   1787c:	eb03b303 	.word	0xeb03b303
   17880:	ea4f03c3 	.word	0xea4f03c3
   17884:	9b010883 	.word	0x9b010883
   17888:	0424f1a8 	.word	0x0424f1a8
   1788c:	eb03441c 	.word	0xeb03441c
   17890:	e0050908 	.word	0xe0050908
   17894:	45a3aa22 	.word	0x45a3aa22
   17898:	602af842 	.word	0x602af842
   1789c:	d00f469a 	.word	0xd00f469a
   178a0:	0604eb08 	.word	0x0604eb08
   178a4:	4622464b 	.word	0x4622464b
   178a8:	46284631 	.word	0x46284631
   178ac:	fbc2f7ff 	.word	0xfbc2f7ff
   178b0:	0301f10a 	.word	0x0301f10a
   178b4:	b2db3c24 	.word	0xb2db3c24
   178b8:	d0eb2800 	.word	0xd0eb2800
   178bc:	e6dd4683 	.word	0xe6dd4683
   178c0:	9a06007b 	.word	0x9a06007b
   178c4:	fa37b2df 	.word	0xfa37b2df
   178c8:	463bf202 	.word	0x463bf202
   178cc:	f1bad0d6 	.word	0xf1bad0d6
   178d0:	e9dd0f01 	.word	0xe9dd0f01
   178d4:	9f0b4609 	.word	0x9f0b4609
   178d8:	8167f240 	.word	0x8167f240
   178dc:	a9224652 	.word	0xa9224652
   178e0:	f7ff4628 	.word	0xf7ff4628
   178e4:	4683fa03 	.word	0x4683fa03
   178e8:	f1bb9b05 	.word	0xf1bb9b05
   178ec:	f47f0f00 	.word	0xf47f0f00
   178f0:	b123ae15 	.word	0xb123ae15
   178f4:	676b9b01 	.word	0x676b9b01
   178f8:	67ab9b02 	.word	0x67ab9b02
   178fc:	4619e676 	.word	0x4619e676
   17900:	f0044638 	.word	0xf0044638
   17904:	4639fcf1 	.word	0x4639fcf1
   17908:	a80d4680 	.word	0xa80d4680
   1790c:	fb26f004 	.word	0xfb26f004
   17910:	28004683 	.word	0x28004683
   17914:	ae04f47f 	.word	0xae04f47f
   17918:	e6729007 	.word	0xe6729007
   1791c:	46289922 	.word	0x46289922
   17920:	f97cf7ff 	.word	0xf97cf7ff
   17924:	e79c4683 	.word	0xe79c4683
   17928:	46504601 	.word	0x46504601
   1792c:	ffbcf004 	.word	0xffbcf004
   17930:	bf181c02 	.word	0xbf181c02
   17934:	a9162201 	.word	0xa9162201
   17938:	12d9ea02 	.word	0x12d9ea02
   1793c:	f0044650 	.word	0xf0044650
   17940:	4683fc3b 	.word	0x4683fc3b
   17944:	f004a816 	.word	0xf004a816
   17948:	f1bbfa8d 	.word	0xf1bbfa8d
   1794c:	f47f0f00 	.word	0xf47f0f00
   17950:	9b04af2b 	.word	0x9b04af2b
   17954:	f1032101 	.word	0xf1032101
   17958:	46200418 	.word	0x46200418
   1795c:	fc8af004 	.word	0xfc8af004
   17960:	28004683 	.word	0x28004683
   17964:	af20f47f 	.word	0xaf20f47f
   17968:	2b009b6e 	.word	0x2b009b6e
   1796c:	8082f000 	.word	0x8082f000
   17970:	6dab260c 	.word	0x6dab260c
   17974:	3307a813 	.word	0x3307a813
   17978:	f00408df 	.word	0xf00408df
   1797c:	a816fa6b 	.word	0xa816fa6b
   17980:	fa68f004 	.word	0xfa68f004
   17984:	8020f8dd 	.word	0x8020f8dd
   17988:	9a6e9b6f 	.word	0x9a6e9b6f
   1798c:	a8134639 	.word	0xa8134639
   17990:	f9e2f006 	.word	0xf9e2f006
   17994:	2101e006 	.word	0x2101e006
   17998:	f004a813 	.word	0xf004a813
   1799c:	2800fead 	.word	0x2800fead
   179a0:	80c8f040 	.word	0x80c8f040
   179a4:	a8134641 	.word	0xa8134641
   179a8:	ff16f004 	.word	0xff16f004
   179ac:	daf22800 	.word	0xdaf22800
   179b0:	f0003e01 	.word	0xf0003e01
   179b4:	21018100 	.word	0x21018100
   179b8:	f004a813 	.word	0xf004a813
   179bc:	2800ff75 	.word	0x2800ff75
   179c0:	aa13dde2 	.word	0xaa13dde2
   179c4:	46204621 	.word	0x46204621
   179c8:	fa5af005 	.word	0xfa5af005
   179cc:	b1304683 	.word	0xb1304683
   179d0:	f004a813 	.word	0xf004a813
   179d4:	a816fa47 	.word	0xa816fa47
   179d8:	fa44f004 	.word	0xfa44f004
   179dc:	4620e6e4 	.word	0x4620e6e4
   179e0:	f7fe4629 	.word	0xf7fe4629
   179e4:	4683fe7f 	.word	0x4683fe7f
   179e8:	d1f12800 	.word	0xd1f12800
   179ec:	4611aa13 	.word	0x4611aa13
   179f0:	f005a816 	.word	0xf005a816
   179f4:	4683fa45 	.word	0x4683fa45
   179f8:	d1e92800 	.word	0xd1e92800
   179fc:	a8164629 	.word	0xa8164629
   17a00:	fe70f7fe 	.word	0xfe70f7fe
   17a04:	28004683 	.word	0x28004683
   17a08:	9804d1e2 	.word	0x9804d1e2
   17a0c:	4601aa16 	.word	0x4601aa16
   17a10:	fa36f005 	.word	0xfa36f005
   17a14:	28004683 	.word	0x28004683
   17a18:	4629d1da 	.word	0x4629d1da
   17a1c:	f7fe9804 	.word	0xf7fe9804
   17a20:	4683fe61 	.word	0x4683fe61
   17a24:	d1d32800 	.word	0xd1d32800
   17a28:	aa13a916 	.word	0xaa13a916
   17a2c:	f0054608 	.word	0xf0054608
   17a30:	4683fa27 	.word	0x4683fa27
   17a34:	d1cb2800 	.word	0xd1cb2800
   17a38:	a8164629 	.word	0xa8164629
   17a3c:	fe52f7fe 	.word	0xfe52f7fe
   17a40:	28004683 	.word	0x28004683
   17a44:	aa16d1c4 	.word	0xaa16d1c4
   17a48:	46504651 	.word	0x46504651
   17a4c:	fa18f005 	.word	0xfa18f005
   17a50:	28004683 	.word	0x28004683
   17a54:	4629d1bc 	.word	0x4629d1bc
   17a58:	f7fe4650 	.word	0xf7fe4650
   17a5c:	4683fe43 	.word	0x4683fe43
   17a60:	f004a813 	.word	0xf004a813
   17a64:	a816f9ff 	.word	0xa816f9ff
   17a68:	f9fcf004 	.word	0xf9fcf004
   17a6c:	0f00f1bb 	.word	0x0f00f1bb
   17a70:	ae9af47f 	.word	0xae9af47f
   17a74:	f8dd46ab 	.word	0xf8dd46ab
   17a78:	f8dd8018 	.word	0xf8dd8018
   17a7c:	f8cd900c 	.word	0xf8cd900c
   17a80:	f8dda018 	.word	0xf8dda018
   17a84:	ab22a010 	.word	0xab22a010
   17a88:	d0554543 	.word	0xd0554543
   17a8c:	46514652 	.word	0x46514652
   17a90:	f7fe4658 	.word	0xf7fe4658
   17a94:	4602fe73 	.word	0x4602fe73
   17a98:	d1492800 	.word	0xd1492800
   17a9c:	46044606 	.word	0x46044606
   17aa0:	3d01f818 	.word	0x3d01f818
   17aa4:	93059d01 	.word	0x93059d01
   17aa8:	0745f3c3 	.word	0x0745f3c3
   17aac:	fab41be4 	.word	0xfab41be4
   17ab0:	0964f484 	.word	0x0964f484
   17ab4:	46224629 	.word	0x46224629
   17ab8:	f004a819 	.word	0xf004a819
   17abc:	3601fb7d 	.word	0x3601fb7d
   17ac0:	010cf105 	.word	0x010cf105
   17ac4:	28003524 	.word	0x28003524
   17ac8:	aebdf47f 	.word	0xaebdf47f
   17acc:	a81c4622 	.word	0xa81c4622
   17ad0:	fb72f004 	.word	0xfb72f004
   17ad4:	2800b2f4 	.word	0x2800b2f4
   17ad8:	aeb5f47f 	.word	0xaeb5f47f
   17adc:	d8e545a1 	.word	0xd8e545a1
   17ae0:	f004a816 	.word	0xf004a816
   17ae4:	aa1cf9b7 	.word	0xaa1cf9b7
   17ae8:	a8169908 	.word	0xa8169908
   17aec:	f908f005 	.word	0xf908f005
   17af0:	4683b108 	.word	0x4683b108
   17af4:	4601e655 	.word	0x4601e655
   17af8:	f004a81c 	.word	0xf004a81c
   17afc:	1c02fed5 	.word	0x1c02fed5
   17b00:	2201bf18 	.word	0x2201bf18
   17b04:	a9169b05 	.word	0xa9169b05
   17b08:	12d3ea02 	.word	0x12d3ea02
   17b0c:	f004a81c 	.word	0xf004a81c
   17b10:	9005fb53 	.word	0x9005fb53
   17b14:	f004a816 	.word	0xf004a816
   17b18:	9a05f9a5 	.word	0x9a05f9a5
   17b1c:	4652b942 	.word	0x4652b942
   17b20:	4651ab19 	.word	0x4651ab19
   17b24:	f7ff4658 	.word	0xf7ff4658
   17b28:	4602fa85 	.word	0x4602fa85
   17b2c:	d0aa2800 	.word	0xd0aa2800
   17b30:	e6394693 	.word	0xe6394693
   17b34:	e74b4683 	.word	0xe74b4683
   17b38:	f8dda819 	.word	0xf8dda819
   17b3c:	f004a018 	.word	0xf004a018
   17b40:	a81cf991 	.word	0xa81cf991
   17b44:	f98ef004 	.word	0xf98ef004
   17b48:	f004a81f 	.word	0xf004a81f
   17b4c:	a819f98b 	.word	0xa819f98b
   17b50:	f980f004 	.word	0xf980f004
   17b54:	99084652 	.word	0x99084652
   17b58:	f005a819 	.word	0xf005a819
   17b5c:	465df8d1 	.word	0x465df8d1
   17b60:	b1184683 	.word	0xb1184683
   17b64:	f004a819 	.word	0xf004a819
   17b68:	e552f97d 	.word	0xe552f97d
   17b6c:	46504659 	.word	0x46504659
   17b70:	fe9af004 	.word	0xfe9af004
   17b74:	a9199b02 	.word	0xa9199b02
   17b78:	bf082800 	.word	0xbf082800
   17b7c:	46502300 	.word	0x46502300
   17b80:	f004461a 	.word	0xf004461a
   17b84:	4683fb19 	.word	0x4683fb19
   17b88:	f004a819 	.word	0xf004a819
   17b8c:	f1bbf96b 	.word	0xf1bbf96b
   17b90:	f47f0f00 	.word	0xf47f0f00
   17b94:	4628ad3e 	.word	0x4628ad3e
   17b98:	f7ff9904 	.word	0xf7ff9904
   17b9c:	9b07f83f 	.word	0x9b07f83f
   17ba0:	2b004683 	.word	0x2b004683
   17ba4:	acd4f47f 	.word	0xacd4f47f
   17ba8:	9922e4ba 	.word	0x9922e4ba
   17bac:	f7ff4628 	.word	0xf7ff4628
   17bb0:	4683f835 	.word	0x4683f835
   17bb4:	f8dfe698 	.word	0xf8dfe698
   17bb8:	e5f5b02c 	.word	0xe5f5b02c
   17bbc:	f10a2201 	.word	0xf10a2201
   17bc0:	eb0a31ff 	.word	0xeb0a31ff
   17bc4:	fa020403 	.word	0xfa020403
   17bc8:	3c01f301 	.word	0x3c01f301
   17bcc:	b2db9302 	.word	0xb2db9302
   17bd0:	fbb49106 	.word	0xfbb49106
   17bd4:	4656f4fa 	.word	0x4656f4fa
   17bd8:	e5029303 	.word	0xe5029303
   17bdc:	ffffb280 	.word	0xffffb280
   17be0:	ffffb080 	.word	0xffffb080
   17be4:	ffffb300 	.word	0xffffb300

00017be8 <symbol_000637b>:
   17be8:	43f8e92d 	.word	0x43f8e92d
   17bec:	e9dd2a01 	.word	0xe9dd2a01
   17bf0:	d8437808 	.word	0xd8437808
   17bf4:	4681460d 	.word	0x4681460d
   17bf8:	f1052100 	.word	0xf1052100
   17bfc:	461e0018 	.word	0x461e0018
   17c00:	f0044614 	.word	0xf0044614
   17c04:	b938fe51 	.word	0xb938fe51
   17c08:	0f00f1b8 	.word	0x0f00f1b8
   17c0c:	2301d038 	.word	0x2301d038
   17c10:	60337038 	.word	0x60337038
   17c14:	83f8e8bd 	.word	0x83f8e8bd
   17c18:	0004f109 	.word	0x0004f109
   17c1c:	fba2f004 	.word	0xfba2f004
   17c20:	b9c44681 	.word	0xb9c44681
   17c24:	33010043 	.word	0x33010043
   17c28:	60334598 	.word	0x60334598
   17c2c:	2304d328 	.word	0x2304d328
   17c30:	46024639 	.word	0x46024639
   17c34:	3b01f801 	.word	0x3b01f801
   17c38:	f0044628 	.word	0xf0044628
   17c3c:	2800fc55 	.word	0x2800fc55
   17c40:	f109d1e8 	.word	0xf109d1e8
   17c44:	f1050101 	.word	0xf1050101
   17c48:	4439000c 	.word	0x4439000c
   17c4c:	e8bd464a 	.word	0xe8bd464a
   17c50:	f00443f8 	.word	0xf00443f8
   17c54:	1c43bc49 	.word	0x1c43bc49
   17c58:	60334598 	.word	0x60334598
   17c5c:	2100d310 	.word	0x2100d310
   17c60:	000cf105 	.word	0x000cf105
   17c64:	fb40f004 	.word	0xfb40f004
   17c68:	30024639 	.word	0x30024639
   17c6c:	0b01f801 	.word	0x0b01f801
   17c70:	4628464a 	.word	0x4628464a
   17c74:	43f8e8bd 	.word	0x43f8e8bd
   17c78:	bc36f004 	.word	0xbc36f004
   17c7c:	e7c94801 	.word	0xe7c94801
   17c80:	e7c74801 	.word	0xe7c74801
   17c84:	ffffb080 	.word	0xffffb080
   17c88:	ffffb100 	.word	0xffffb100

00017c8c <symbol_0007a22>:
   17c8c:	d0412b00 	.word	0xd0412b00
   17c90:	461eb5f8 	.word	0x461eb5f8
   17c94:	46147813 	.word	0x46147813
   17c98:	b9ab460d 	.word	0xb9ab460d
   17c9c:	d1352e01 	.word	0xd1352e01
   17ca0:	46284631 	.word	0x46284631
   17ca4:	fae6f004 	.word	0xfae6f004
   17ca8:	bdf8b100 	.word	0xbdf8b100
   17cac:	f1054631 	.word	0xf1054631
   17cb0:	f004000c 	.word	0xf004000c
   17cb4:	2800fadf 	.word	0x2800fadf
   17cb8:	4601d1f7 	.word	0x4601d1f7
   17cbc:	0018f105 	.word	0x0018f105
   17cc0:	40f8e8bd 	.word	0x40f8e8bd
   17cc4:	bad6f004 	.word	0xbad6f004
   17cc8:	f0043004 	.word	0xf0043004
   17ccc:	7823fb4b 	.word	0x7823fb4b
   17cd0:	2b044607 	.word	0x2b044607
   17cd4:	0043d11c 	.word	0x0043d11c
   17cd8:	429e3301 	.word	0x429e3301
   17cdc:	4602d116 	.word	0x4602d116
   17ce0:	46281c61 	.word	0x46281c61
   17ce4:	fb6ef004 	.word	0xfb6ef004
   17ce8:	d1de2800 	.word	0xd1de2800
   17cec:	44211c79 	.word	0x44211c79
   17cf0:	f105463a 	.word	0xf105463a
   17cf4:	f004000c 	.word	0xf004000c
   17cf8:	2800fb65 	.word	0x2800fb65
   17cfc:	f105d1d5 	.word	0xf105d1d5
   17d00:	21010018 	.word	0x21010018
   17d04:	40f8e8bd 	.word	0x40f8e8bd
   17d08:	bab4f004 	.word	0xbab4f004
   17d0c:	bdf84802 	.word	0xbdf84802
   17d10:	bdf84802 	.word	0xbdf84802
   17d14:	47704800 	.word	0x47704800
   17d18:	ffffb080 	.word	0xffffb080
   17d1c:	ffffb180 	.word	0xffffb180

00017d20 <symbol_000e8bc>:
   17d20:	41f0e92d 	.word	0x41f0e92d
   17d24:	b086460c 	.word	0xb086460c
   17d28:	21014605 	.word	0x21014605
   17d2c:	0018f104 	.word	0x0018f104
   17d30:	fdbaf004 	.word	0xfdbaf004
   17d34:	f0402800 	.word	0xf0402800
   17d38:	6b2b809f 	.word	0x6b2b809f
   17d3c:	f0002b00 	.word	0xf0002b00
   17d40:	6beb80a0 	.word	0x6beb80a0
   17d44:	f0002b00 	.word	0xf0002b00
   17d48:	4601809c 	.word	0x4601809c
   17d4c:	46204606 	.word	0x46204606
   17d50:	fdaaf004 	.word	0xfdaaf004
   17d54:	f2c02800 	.word	0xf2c02800
   17d58:	f104808f 	.word	0xf104808f
   17d5c:	4631070c 	.word	0x4631070c
   17d60:	f0044638 	.word	0xf0044638
   17d64:	2800fda1 	.word	0x2800fda1
   17d68:	8086f2c0 	.word	0x8086f2c0
   17d6c:	0804f105 	.word	0x0804f105
   17d70:	46204641 	.word	0x46204641
   17d74:	fd30f004 	.word	0xfd30f004
   17d78:	da7d2800 	.word	0xda7d2800
   17d7c:	46384641 	.word	0x46384641
   17d80:	fd2af004 	.word	0xfd2af004
   17d84:	da772800 	.word	0xda772800
   17d88:	f0044668 	.word	0xf0044668
   17d8c:	a803f863 	.word	0xa803f863
   17d90:	f860f004 	.word	0xf860f004
   17d94:	4639463a 	.word	0x4639463a
   17d98:	f0054668 	.word	0xf0054668
   17d9c:	4606f871 	.word	0x4606f871
   17da0:	4668b148 	.word	0x4668b148
   17da4:	f85ef004 	.word	0xf85ef004
   17da8:	f004a803 	.word	0xf004a803
   17dac:	4630f85b 	.word	0x4630f85b
   17db0:	e8bdb006 	.word	0xe8bdb006
   17db4:	462981f0 	.word	0x462981f0
   17db8:	f7fe4668 	.word	0xf7fe4668
   17dbc:	4606fc93 	.word	0x4606fc93
   17dc0:	d1ee2800 	.word	0xd1ee2800
   17dc4:	46214622 	.word	0x46214622
   17dc8:	f005a803 	.word	0xf005a803
   17dcc:	4606f859 	.word	0x4606f859
   17dd0:	d1e62800 	.word	0xd1e62800
   17dd4:	a8034629 	.word	0xa8034629
   17dd8:	fc84f7fe 	.word	0xfc84f7fe
   17ddc:	28004606 	.word	0x28004606
   17de0:	69abd1df 	.word	0x69abd1df
   17de4:	d04e2b00 	.word	0xd04e2b00
   17de8:	f105a903 	.word	0xf105a903
   17dec:	46080210 	.word	0x46080210
   17df0:	ff12f004 	.word	0xff12f004
   17df4:	28004606 	.word	0x28004606
   17df8:	e007d1d3 	.word	0xe007d1d3
   17dfc:	4642a903 	.word	0x4642a903
   17e00:	f0044608 	.word	0xf0044608
   17e04:	4606fe49 	.word	0x4606fe49
   17e08:	d1ca2800 	.word	0xd1ca2800
   17e0c:	a8034641 	.word	0xa8034641
   17e10:	fce2f004 	.word	0xfce2f004
   17e14:	daf12800 	.word	0xdaf12800
   17e18:	4622a903 	.word	0x4622a903
   17e1c:	f0054608 	.word	0xf0054608
   17e20:	4606f82f 	.word	0x4606f82f
   17e24:	d1bc2800 	.word	0xd1bc2800
   17e28:	a8034629 	.word	0xa8034629
   17e2c:	fc5af7fe 	.word	0xfc5af7fe
   17e30:	28004606 	.word	0x28004606
   17e34:	a903d1b5 	.word	0xa903d1b5
   17e38:	021cf105 	.word	0x021cf105
   17e3c:	f0044608 	.word	0xf0044608
   17e40:	4606feeb 	.word	0x4606feeb
   17e44:	d1ac2800 	.word	0xd1ac2800
   17e48:	a903e007 	.word	0xa903e007
   17e4c:	46084642 	.word	0x46084642
   17e50:	fe22f004 	.word	0xfe22f004
   17e54:	28004606 	.word	0x28004606
   17e58:	4641d1a3 	.word	0x4641d1a3
   17e5c:	f004a803 	.word	0xf004a803
   17e60:	2800fcbb 	.word	0x2800fcbb
   17e64:	a903daf1 	.word	0xa903daf1
   17e68:	f0044668 	.word	0xf0044668
   17e6c:	4e14fcb5 	.word	0x4e14fcb5
   17e70:	bf082800 	.word	0xbf082800
   17e74:	e7942600 	.word	0xe7942600
   17e78:	46304e11 	.word	0x46304e11
   17e7c:	e8bdb006 	.word	0xe8bdb006
   17e80:	4e1081f0 	.word	0x4e1081f0
   17e84:	a903e793 	.word	0xa903e793
   17e88:	46082203 	.word	0x46082203
   17e8c:	ffacf004 	.word	0xffacf004
   17e90:	28004606 	.word	0x28004606
   17e94:	e00ed185 	.word	0xe00ed185
   17e98:	a8032100 	.word	0xa8032100
   17e9c:	fd04f004 	.word	0xfd04f004
   17ea0:	d0b92800 	.word	0xd0b92800
   17ea4:	4642a903 	.word	0x4642a903
   17ea8:	f0044608 	.word	0xf0044608
   17eac:	4606feb5 	.word	0x4606feb5
   17eb0:	f47f2800 	.word	0xf47f2800
   17eb4:	9b03af76 	.word	0x9b03af76
   17eb8:	dbed2b00 	.word	0xdbed2b00
   17ebc:	bf00e7ac 	.word	0xbf00e7ac
   17ec0:	ffffb380 	.word	0xffffb380
   17ec4:	ffffb080 	.word	0xffffb080

00017ec8 <symbol_0001f66>:
   17ec8:	43f0e92d 	.word	0x43f0e92d
   17ecc:	b0ab7803 	.word	0xb0ab7803
   17ed0:	f0002b00 	.word	0xf0002b00
   17ed4:	780a80c4 	.word	0x780a80c4
   17ed8:	f040429a 	.word	0xf040429a
   17edc:	f10180c0 	.word	0xf10180c0
   17ee0:	460c0788 	.word	0x460c0788
   17ee4:	46394605 	.word	0x46394605
   17ee8:	f0043088 	.word	0xf0043088
   17eec:	2800fc75 	.word	0x2800fc75
   17ef0:	80b5f040 	.word	0x80b5f040
   17ef4:	0994f104 	.word	0x0994f104
   17ef8:	f1054649 	.word	0xf1054649
   17efc:	f0040094 	.word	0xf0040094
   17f00:	2800fc6b 	.word	0x2800fc6b
   17f04:	80abf040 	.word	0x80abf040
   17f08:	08a0f104 	.word	0x08a0f104
   17f0c:	00a0f105 	.word	0x00a0f105
   17f10:	f0044641 	.word	0xf0044641
   17f14:	4606fc61 	.word	0x4606fc61
   17f18:	f0402800 	.word	0xf0402800
   17f1c:	462580a0 	.word	0x462580a0
   17f20:	f003a802 	.word	0xf003a802
   17f24:	a805ff97 	.word	0xa805ff97
   17f28:	ff94f003 	.word	0xff94f003
   17f2c:	f003a808 	.word	0xf003a808
   17f30:	4631ff91 	.word	0x4631ff91
   17f34:	a80b227c 	.word	0xa80b227c
   17f38:	fd7ff00c 	.word	0xfd7ff00c
   17f3c:	1b7cf815 	.word	0x1b7cf815
   17f40:	f7fda80b 	.word	0xf7fda80b
   17f44:	f104fbd5 	.word	0xf104fbd5
   17f48:	21010040 	.word	0x21010040
   17f4c:	f0043428 	.word	0xf0043428
   17f50:	2800fcab 	.word	0x2800fcab
   17f54:	8081f040 	.word	0x8081f040
   17f58:	2b009b17 	.word	0x2b009b17
   17f5c:	9b1ad07d 	.word	0x9b1ad07d
   17f60:	d07a2b00 	.word	0xd07a2b00
   17f64:	46282101 	.word	0x46282101
   17f68:	fc9ef004 	.word	0xfc9ef004
   17f6c:	f2c02800 	.word	0xf2c02800
   17f70:	a91e8083 	.word	0xa91e8083
   17f74:	f0044628 	.word	0xf0044628
   17f78:	2800fc2f 	.word	0x2800fc2f
   17f7c:	4621da7c 	.word	0x4621da7c
   17f80:	f7ffa80b 	.word	0xf7ffa80b
   17f84:	4606fecd 	.word	0x4606fecd
   17f88:	9b17b980 	.word	0x9b17b980
   17f8c:	d0642b00 	.word	0xd0642b00
   17f90:	2b009b1a 	.word	0x2b009b1a
   17f94:	e9cdd061 	.word	0xe9cdd061
   17f98:	46230000 	.word	0x46230000
   17f9c:	a902462a 	.word	0xa902462a
   17fa0:	f7ffa80b 	.word	0xf7ffa80b
   17fa4:	4606fa6b 	.word	0x4606fa6b
   17fa8:	d04c2800 	.word	0xd04c2800
   17fac:	f003a802 	.word	0xf003a802
   17fb0:	a805ff59 	.word	0xa805ff59
   17fb4:	ff56f003 	.word	0xff56f003
   17fb8:	f003a808 	.word	0xf003a808
   17fbc:	9b23ff53 	.word	0x9b23ff53
   17fc0:	d1262b01 	.word	0xd1262b01
   17fc4:	b1c89828 	.word	0xb1c89828
   17fc8:	b1aa9a29 	.word	0xb1aa9a29
   17fcc:	eb052500 	.word	0xeb052500
   17fd0:	eb1003c5 	.word	0xeb1003c5
   17fd4:	d0320483 	.word	0xd0320483
   17fd8:	f0034620 	.word	0xf0034620
   17fdc:	f104ff43 	.word	0xf104ff43
   17fe0:	f003000c 	.word	0xf003000c
   17fe4:	f104ff3f 	.word	0xf104ff3f
   17fe8:	f0030018 	.word	0xf0030018
   17fec:	9a29ff3b 	.word	0x9a29ff3b
   17ff0:	42953501 	.word	0x42953501
   17ff4:	d3ea9828 	.word	0xd3ea9828
   17ff8:	fb94f007 	.word	0xfb94f007
   17ffc:	ab0b2200 	.word	0xab0b2200
   18000:	a92a701a 	.word	0xa92a701a
   18004:	428b3301 	.word	0x428b3301
   18008:	4630d1fa 	.word	0x4630d1fa
   1800c:	e8bdb02b 	.word	0xe8bdb02b
   18010:	a80c83f0 	.word	0xa80c83f0
   18014:	ff26f003 	.word	0xff26f003
   18018:	f003a80f 	.word	0xf003a80f
   1801c:	a812ff23 	.word	0xa812ff23
   18020:	ff20f003 	.word	0xff20f003
   18024:	f003a815 	.word	0xf003a815
   18028:	a818ff1d 	.word	0xa818ff1d
   1802c:	ff1af003 	.word	0xff1af003
   18030:	f003a81b 	.word	0xf003a81b
   18034:	a81eff17 	.word	0xa81eff17
   18038:	ff14f003 	.word	0xff14f003
   1803c:	3501e7c2 	.word	0x3501e7c2
   18040:	d3c44295 	.word	0xd3c44295
   18044:	4639e7d8 	.word	0x4639e7d8
   18048:	f004a802 	.word	0xf004a802
   1804c:	b920fbc5 	.word	0xb920fbc5
   18050:	a8054649 	.word	0xa8054649
   18054:	fbc0f004 	.word	0xfbc0f004
   18058:	4e08b130 	.word	0x4e08b130
   1805c:	4e07e7a6 	.word	0x4e07e7a6
   18060:	b02b4630 	.word	0xb02b4630
   18064:	83f0e8bd 	.word	0x83f0e8bd
   18068:	a8084641 	.word	0xa8084641
   1806c:	fbb4f004 	.word	0xfbb4f004
   18070:	28004606 	.word	0x28004606
   18074:	e7f0d09a 	.word	0xe7f0d09a
   18078:	e7974e01 	.word	0xe7974e01
   1807c:	ffffb080 	.word	0xffffb080
   18080:	ffffb380 	.word	0xffffb380

00018084 <interface_init>:
   18084:	f44fb508 	.word	0xf44fb508
   18088:	21007290 	.word	0x21007290
   1808c:	f00c4802 	.word	0xf00c4802
   18090:	2000fcd4 	.word	0x2000fcd4
   18094:	bf00bd08 	.word	0xbf00bd08
   18098:	2002742c 	.word	0x2002742c

0001809c <interface_socket_allocate>:
   1809c:	4b29b5f8 	.word	0x4b29b5f8
   180a0:	681d4606 	.word	0x681d4606
   180a4:	b1e54608 	.word	0xb1e54608
   180a8:	2c006a5c 	.word	0x2c006a5c
   180ac:	6c9cd03d 	.word	0x6c9cd03d
   180b0:	d03c2c00 	.word	0xd03c2c00
   180b4:	2c006edc 	.word	0x2c006edc
   180b8:	f8d3d03b 	.word	0xf8d3d03b
   180bc:	b1791090 	.word	0xb1791090
   180c0:	10b4f8d3 	.word	0x10b4f8d3
   180c4:	f8d3b3b9 	.word	0xf8d3b3b9
   180c8:	b3b110d8 	.word	0xb3b110d8
   180cc:	10fcf8d3 	.word	0x10fcf8d3
   180d0:	f04fb3a9 	.word	0xf04fb3a9
   180d4:	200c35ff 	.word	0x200c35ff
   180d8:	f8c2f7fa 	.word	0xf8c2f7fa
   180dc:	bdf84628 	.word	0xbdf84628
   180e0:	f04f2504 	.word	0xf04f2504
   180e4:	f04f0c01 	.word	0xf04f0c01
   180e8:	eb0537ff 	.word	0xeb0537ff
   180ec:	00a404c5 	.word	0x00a404c5
   180f0:	c004f843 	.word	0xc004f843
   180f4:	4611441c 	.word	0x4611441c
   180f8:	462261a7 	.word	0x462261a7
   180fc:	facaf7fd 	.word	0xfacaf7fd
   18100:	61e04603 	.word	0x61e04603
   18104:	681bb158 	.word	0x681bb158
   18108:	4798681b 	.word	0x4798681b
   1810c:	6034b910 	.word	0x6034b910
   18110:	bdf84628 	.word	0xbdf84628
   18114:	f7fd69e0 	.word	0xf7fd69e0
   18118:	2300fadd 	.word	0x2300fadd
   1811c:	462061e3 	.word	0x462061e3
   18120:	21002224 	.word	0x21002224
   18124:	fc89f00c 	.word	0xfc89f00c
   18128:	2501e7d3 	.word	0x2501e7d3
   1812c:	2502e7d9 	.word	0x2502e7d9
   18130:	2503e7d7 	.word	0x2503e7d7
   18134:	2505e7d5 	.word	0x2505e7d5
   18138:	2506e7d3 	.word	0x2506e7d3
   1813c:	2507e7d1 	.word	0x2507e7d1
   18140:	bf00e7cf 	.word	0xbf00e7cf
   18144:	2002742c 	.word	0x2002742c

00018148 <interface_socket_free>:
   18148:	d9002807 	.word	0xd9002807
   1814c:	b5104770 	.word	0xb5104770
   18150:	eb004c07 	.word	0xeb004c07
   18154:	eb0400c0 	.word	0xeb0400c0
   18158:	69e00480 	.word	0x69e00480
   1815c:	f7fdb108 	.word	0xf7fdb108
   18160:	4620fab9 	.word	0x4620fab9
   18164:	4010e8bd 	.word	0x4010e8bd
   18168:	21002224 	.word	0x21002224
   1816c:	bc65f00c 	.word	0xbc65f00c
   18170:	2002742c 	.word	0x2002742c

00018174 <interface_socket_packet_handler_update>:
   18174:	e92d2807 	.word	0xe92d2807
   18178:	d81e43f8 	.word	0xd81e43f8
   1817c:	08c0ea4f 	.word	0x08c0ea4f
   18180:	eb084e17 	.word	0xeb084e17
   18184:	009b0300 	.word	0x009b0300
   18188:	18f558f4 	.word	0x18f558f4
   1818c:	460bb1ac 	.word	0x460bb1ac
   18190:	46114604 	.word	0x46114604
   18194:	462a4618 	.word	0x462a4618
   18198:	901cf8d5 	.word	0x901cf8d5
   1819c:	fa7af7fd 	.word	0xfa7af7fd
   181a0:	b1d061e8 	.word	0xb1d061e8
   181a4:	681b6803 	.word	0x681b6803
   181a8:	46074798 	.word	0x46074798
   181ac:	4648b948 	.word	0x4648b948
   181b0:	fa90f7fd 	.word	0xfa90f7fd
   181b4:	e8bd4638 	.word	0xe8bd4638
   181b8:	270583f8 	.word	0x270583f8
   181bc:	e8bd4638 	.word	0xe8bd4638
   181c0:	69e883f8 	.word	0x69e883f8
   181c4:	fa86f7fd 	.word	0xfa86f7fd
   181c8:	0004eb08 	.word	0x0004eb08
   181cc:	0680eb06 	.word	0x0680eb06
   181d0:	901cf8c6 	.word	0x901cf8c6
   181d4:	e8bd4638 	.word	0xe8bd4638
   181d8:	270483f8 	.word	0x270483f8
   181dc:	bf00e7f4 	.word	0xbf00e7f4
   181e0:	2002742c 	.word	0x2002742c

000181e4 <interface_socket_wait>:
   181e4:	eb00b5f0 	.word	0xeb00b5f0
   181e8:	4c0e00c0 	.word	0x4c0e00c0
   181ec:	58250080 	.word	0x58250080
   181f0:	4015b083 	.word	0x4015b083
   181f4:	9301428d 	.word	0x9301428d
   181f8:	d0104404 	.word	0xd0104404
   181fc:	b9736863 	.word	0xb9736863
   18200:	4616460f 	.word	0x4616460f
   18204:	e0064625 	.word	0xe0064625
   18208:	b943686b 	.word	0xb943686b
   1820c:	4620a901 	.word	0x4620a901
   18210:	ff96f7f9 	.word	0xff96f7f9
   18214:	682bb920 	.word	0x682bb920
   18218:	42bb4033 	.word	0x42bb4033
   1821c:	2000d1f4 	.word	0x2000d1f4
   18220:	bdf0b003 	.word	0xbdf0b003
   18224:	2002742c 	.word	0x2002742c

00018228 <interface_from_internal_id_search>:
   18228:	681a4b23 	.word	0x681a4b23
   1822c:	699ab112 	.word	0x699ab112
   18230:	d0324282 	.word	0xd0324282
   18234:	b1126a5a 	.word	0xb1126a5a
   18238:	42826bda 	.word	0x42826bda
   1823c:	6c9ad02f 	.word	0x6c9ad02f
   18240:	6e1ab112 	.word	0x6e1ab112
   18244:	d02c4282 	.word	0xd02c4282
   18248:	b11a6eda 	.word	0xb11a6eda
   1824c:	2084f8d3 	.word	0x2084f8d3
   18250:	d0284282 	.word	0xd0284282
   18254:	2090f8d3 	.word	0x2090f8d3
   18258:	f8d3b11a 	.word	0xf8d3b11a
   1825c:	428220a8 	.word	0x428220a8
   18260:	f8d3d023 	.word	0xf8d3d023
   18264:	b11a20b4 	.word	0xb11a20b4
   18268:	20ccf8d3 	.word	0x20ccf8d3
   1826c:	d01e4282 	.word	0xd01e4282
   18270:	20d8f8d3 	.word	0x20d8f8d3
   18274:	f8d3b11a 	.word	0xf8d3b11a
   18278:	428220f0 	.word	0x428220f0
   1827c:	f8d3d019 	.word	0xf8d3d019
   18280:	b13a20fc 	.word	0xb13a20fc
   18284:	3114f8d3 	.word	0x3114f8d3
   18288:	bf144283 	.word	0xbf144283
   1828c:	30fff04f 	.word	0x30fff04f
   18290:	47702007 	.word	0x47702007
   18294:	30fff04f 	.word	0x30fff04f
   18298:	20004770 	.word	0x20004770
   1829c:	20014770 	.word	0x20014770
   182a0:	20024770 	.word	0x20024770
   182a4:	20034770 	.word	0x20034770
   182a8:	20044770 	.word	0x20044770
   182ac:	20054770 	.word	0x20054770
   182b0:	20064770 	.word	0x20064770
   182b4:	bf004770 	.word	0xbf004770
   182b8:	2002742c 	.word	0x2002742c

000182bc <interface_socket_from_handle_get>:
   182bc:	d8072807 	.word	0xd8072807
   182c0:	00c0eb00 	.word	0x00c0eb00
   182c4:	00804b03 	.word	0x00804b03
   182c8:	b10a581a 	.word	0xb10a581a
   182cc:	47704418 	.word	0x47704418
   182d0:	47702000 	.word	0x47702000
   182d4:	2002742c 	.word	0x2002742c

000182d8 <interface_socket_event_get>:
   182d8:	2807b119 	.word	0x2807b119
   182dc:	2310d902 	.word	0x2310d902
   182e0:	4770600b 	.word	0x4770600b
   182e4:	00c0eb00 	.word	0x00c0eb00
   182e8:	00804b07 	.word	0x00804b07
   182ec:	2a00581a 	.word	0x2a00581a
   182f0:	581bd0f5 	.word	0x581bd0f5
   182f4:	f0030c1b 	.word	0xf0030c1b
   182f8:	2a0a020a 	.word	0x2a0a020a
   182fc:	f003bf14 	.word	0xf003bf14
   18300:	f003030f 	.word	0xf003030f
   18304:	e7eb030d 	.word	0xe7eb030d
   18308:	2002742c 	.word	0x2002742c

0001830c <interface_socket_setopt>:
   1830c:	b5702807 	.word	0xb5702807
   18310:	eb00d827 	.word	0xeb00d827
   18314:	4c1600c0 	.word	0x4c1600c0
   18318:	58250080 	.word	0x58250080
   1831c:	2901b30d 	.word	0x2901b30d
   18320:	2a14d119 	.word	0x2a14d119
   18324:	b183d117 	.word	0xb183d117
   18328:	2a089a04 	.word	0x2a089a04
   1832c:	f44fd10d 	.word	0xf44fd10d
   18330:	685a757a 	.word	0x685a757a
   18334:	68194e0f 	.word	0x68194e0f
   18338:	2302fba6 	.word	0x2302fba6
   1833c:	fb05099b 	.word	0xfb05099b
   18340:	44203301 	.word	0x44203301
   18344:	20006203 	.word	0x20006203
   18348:	2016bd70 	.word	0x2016bd70
   1834c:	ff88f7f9 	.word	0xff88f7f9
   18350:	30fff04f 	.word	0x30fff04f
   18354:	202abd70 	.word	0x202abd70
   18358:	ff82f7f9 	.word	0xff82f7f9
   1835c:	30fff04f 	.word	0x30fff04f
   18360:	2009bd70 	.word	0x2009bd70
   18364:	ff7cf7f9 	.word	0xff7cf7f9
   18368:	30fff04f 	.word	0x30fff04f
   1836c:	bf00bd70 	.word	0xbf00bd70
   18370:	2002742c 	.word	0x2002742c
   18374:	10624dd3 	.word	0x10624dd3

00018378 <interface_socket_getopt>:
   18378:	2807b570 	.word	0x2807b570
   1837c:	d8219d04 	.word	0xd8219d04
   18380:	eb004c13 	.word	0xeb004c13
   18384:	008000c0 	.word	0x008000c0
   18388:	44045826 	.word	0x44045826
   1838c:	2901b1d6 	.word	0x2901b1d6
   18390:	2a04d112 	.word	0x2a04d112
   18394:	b14bd110 	.word	0xb14bd110
   18398:	682ab145 	.word	0x682ab145
   1839c:	d1052a04 	.word	0xd1052a04
   183a0:	68612200 	.word	0x68612200
   183a4:	60194610 	.word	0x60194610
   183a8:	bd706062 	.word	0xbd706062
   183ac:	f7f92016 	.word	0xf7f92016
   183b0:	f04fff57 	.word	0xf04fff57
   183b4:	bd7030ff 	.word	0xbd7030ff
   183b8:	f7f9202a 	.word	0xf7f9202a
   183bc:	f04fff51 	.word	0xf04fff51
   183c0:	bd7030ff 	.word	0xbd7030ff
   183c4:	f7f92009 	.word	0xf7f92009
   183c8:	f04fff4b 	.word	0xf04fff4b
   183cc:	bd7030ff 	.word	0xbd7030ff
   183d0:	2002742c 	.word	0x2002742c

000183d4 <interface_socket_fcntl>:
   183d4:	b5102807 	.word	0xb5102807
   183d8:	eb00d818 	.word	0xeb00d818
   183dc:	4c1100c0 	.word	0x4c1100c0
   183e0:	58e00083 	.word	0x58e00083
   183e4:	2901b190 	.word	0x2901b190
   183e8:	2902d005 	.word	0x2902d005
   183ec:	58e0d114 	.word	0x58e0d114
   183f0:	7000f3c0 	.word	0x7000f3c0
   183f4:	f012bd10 	.word	0xf012bd10
   183f8:	58e20001 	.word	0x58e20001
   183fc:	2000bf1a 	.word	0x2000bf1a
   18400:	5280f042 	.word	0x5280f042
   18404:	5280f022 	.word	0x5280f022
   18408:	bd1050e2 	.word	0xbd1050e2
   1840c:	f7f92009 	.word	0xf7f92009
   18410:	f04fff27 	.word	0xf04fff27
   18414:	bd1030ff 	.word	0xbd1030ff
   18418:	f7f92016 	.word	0xf7f92016
   1841c:	f04fff21 	.word	0xf04fff21
   18420:	bd1030ff 	.word	0xbd1030ff
   18424:	2002742c 	.word	0x2002742c

00018428 <symbol_00026c2>:
   18428:	4ff0e92d 	.word	0x4ff0e92d
   1842c:	2100460e 	.word	0x2100460e
   18430:	b0854605 	.word	0xb0854605
   18434:	93004608 	.word	0x93004608
   18438:	461c4617 	.word	0x461c4617
   1843c:	aa034613 	.word	0xaa034613
   18440:	9038f8dd 	.word	0x9038f8dd
   18444:	f994f7fb 	.word	0xf994f7fb
   18448:	f00c4628 	.word	0xf00c4628
   1844c:	4682fa95 	.word	0x4682fa95
   18450:	f00c4630 	.word	0xf00c4630
   18454:	9903fa91 	.word	0x9903fa91
   18458:	eb031c4b 	.word	0xeb031c4b
   1845c:	44531391 	.word	0x44531391
   18460:	9b0f4418 	.word	0x9b0f4418
   18464:	d8534298 	.word	0xd8534298
   18468:	f0072001 	.word	0xf0072001
   1846c:	4682f947 	.word	0x4682f947
   18470:	d0522800 	.word	0xd0522800
   18474:	94009903 	.word	0x94009903
   18478:	aa03463b 	.word	0xaa03463b
   1847c:	f978f7fb 	.word	0xf978f7fb
   18480:	28004680 	.word	0x28004680
   18484:	4628d13d 	.word	0x4628d13d
   18488:	fa76f00c 	.word	0xfa76f00c
   1848c:	46024629 	.word	0x46024629
   18490:	f00c4648 	.word	0xf00c4648
   18494:	4628faa5 	.word	0x4628faa5
   18498:	fa6ef00c 	.word	0xfa6ef00c
   1849c:	eb099b03 	.word	0xeb099b03
   184a0:	b19b0400 	.word	0xb19b0400
   184a4:	270a46d3 	.word	0x270a46d3
   184a8:	bf282b40 	.word	0xbf282b40
   184ac:	461d2340 	.word	0x461d2340
   184b0:	461a4659 	.word	0x461a4659
   184b4:	f00c4620 	.word	0xf00c4620
   184b8:	9b03fa93 	.word	0x9b03fa93
   184bc:	1b5b442c 	.word	0x1b5b442c
   184c0:	44ab7027 	.word	0x44ab7027
   184c4:	93033401 	.word	0x93033401
   184c8:	d1ed2b00 	.word	0xd1ed2b00
   184cc:	f00c4630 	.word	0xf00c4630
   184d0:	4631fa53 	.word	0x4631fa53
   184d4:	46204602 	.word	0x46204602
   184d8:	fa82f00c 	.word	0xfa82f00c
   184dc:	f00c4630 	.word	0xf00c4630
   184e0:	2100fa4b 	.word	0x2100fa4b
   184e4:	18234602 	.word	0x18234602
   184e8:	330154a1 	.word	0x330154a1
   184ec:	eba39a10 	.word	0xeba39a10
   184f0:	46500309 	.word	0x46500309
   184f4:	f0076013 	.word	0xf0076013
   184f8:	4640f915 	.word	0x4640f915
   184fc:	e8bdb005 	.word	0xe8bdb005
   18500:	46508ff0 	.word	0x46508ff0
   18504:	f90ef007 	.word	0xf90ef007
   18508:	b0054640 	.word	0xb0054640
   1850c:	8ff0e8bd 	.word	0x8ff0e8bd
   18510:	f06f9b10 	.word	0xf06f9b10
   18514:	60180829 	.word	0x60180829
   18518:	f8dfe7ef 	.word	0xf8dfe7ef
   1851c:	e7ec8004 	.word	0xe7ec8004
   18520:	ffffee80 	.word	0xffffee80

00018524 <ip_recvd_packet_free_cb>:
   18524:	4604b510 	.word	0x4604b510
   18528:	f7fa6800 	.word	0xf7fa6800
   1852c:	68a0fdaf 	.word	0x68a0fdaf
   18530:	e8bdb118 	.word	0xe8bdb118
   18534:	f0074010 	.word	0xf0074010
   18538:	bd10b8f5 	.word	0xbd10b8f5

0001853c <rpc_error_to_nrf_bsd_error>:
   1853c:	bf9a2810 	.word	0xbf9a2810
   18540:	f8534b02 	.word	0xf8534b02
   18544:	202d0020 	.word	0x202d0020
   18548:	bf004770 	.word	0xbf004770
   1854c:	00026bdc 	.word	0x00026bdc

00018550 <ip_interface_request_create>:
   18550:	2500b570 	.word	0x2500b570
   18554:	ac02b082 	.word	0xac02b082
   18558:	5d04f844 	.word	0x5d04f844
   1855c:	460d4606 	.word	0x460d4606
   18560:	46194620 	.word	0x46194620
   18564:	f7fa4614 	.word	0xf7fa4614
   18568:	b960fd5f 	.word	0xb960fd5f
   1856c:	22089b01 	.word	0x22089b01
   18570:	72987258 	.word	0x72987258
   18574:	461872d8 	.word	0x461872d8
   18578:	4406ea44 	.word	0x4406ea44
   1857c:	611d60dc 	.word	0x611d60dc
   18580:	b002721a 	.word	0xb002721a
   18584:	9b01bd70 	.word	0x9b01bd70
   18588:	b0024618 	.word	0xb0024618
   1858c:	bf00bd70 	.word	0xbf00bd70

00018590 <ip_interface_request_send>:
   18590:	460cb570 	.word	0x460cb570
   18594:	46114605 	.word	0x46114605
   18598:	461e4620 	.word	0x461e4620
   1859c:	fd58f7fa 	.word	0xfd58f7fa
   185a0:	bd70b900 	.word	0xbd70b900
   185a4:	b1086820 	.word	0xb1086820
   185a8:	fd70f7fa 	.word	0xfd70f7fa
   185ac:	f7fa4620 	.word	0xf7fa4620
   185b0:	602efd65 	.word	0x602efd65
   185b4:	bd702023 	.word	0xbd702023

000185b8 <ip_interface_wait>:
   185b8:	4605b538 	.word	0x4605b538
   185bc:	fe12f7ff 	.word	0xfe12f7ff
   185c0:	b1084604 	.word	0xb1084604
   185c4:	bd384620 	.word	0xbd384620
   185c8:	f7ff4628 	.word	0xf7ff4628
   185cc:	2800fe77 	.word	0x2800fe77
   185d0:	6844d0f8 	.word	0x6844d0f8
   185d4:	d0f52c00 	.word	0xd0f52c00
   185d8:	60432300 	.word	0x60432300
   185dc:	bd384620 	.word	0xbd384620

000185e0 <ip_interface_init>:
   185e0:	2300b538 	.word	0x2300b538
   185e4:	4c084d07 	.word	0x4c084d07
   185e8:	22204619 	.word	0x22204619
   185ec:	602b4807 	.word	0x602b4807
   185f0:	f00c6023 	.word	0xf00c6023
   185f4:	f7fafa22 	.word	0xf7fafa22
   185f8:	3000fd11 	.word	0x3000fd11
   185fc:	2001bf18 	.word	0x2001bf18
   18600:	bd384240 	.word	0xbd384240
   18604:	2002060c 	.word	0x2002060c
   18608:	20020608 	.word	0x20020608
   1860c:	20020614 	.word	0x20020614

00018610 <ip_interface_open>:
   18610:	41f0e92d 	.word	0x41f0e92d
   18614:	20004606 	.word	0x20004606
   18618:	0308f026 	.word	0x0308f026
   1861c:	2b02b082 	.word	0x2b02b082
   18620:	4617460c 	.word	0x4617460c
   18624:	d0029000 	.word	0xd0029000
   18628:	f0402e05 	.word	0xf0402e05
   1862c:	1e638084 	.word	0x1e638084
   18630:	d85c2b02 	.word	0xd85c2b02
   18634:	d1542f00 	.word	0xd1542f00
   18638:	d0672c01 	.word	0xd0672c01
   1863c:	bf182c03 	.word	0xbf182c03
   18640:	4a482702 	.word	0x4a482702
   18644:	46684621 	.word	0x46684621
   18648:	fd28f7ff 	.word	0xfd28f7ff
   1864c:	46809b00 	.word	0x46809b00
   18650:	d0592b00 	.word	0xd0592b00
   18654:	a8022100 	.word	0xa8022100
   18658:	1d04f840 	.word	0x1d04f840
   1865c:	6403e9c3 	.word	0x6403e9c3
   18660:	f7fa615f 	.word	0xf7fa615f
   18664:	2800fce1 	.word	0x2800fce1
   18668:	f247d14b 	.word	0xf247d14b
   1866c:	f04f0201 	.word	0xf04f0201
   18670:	210833ff 	.word	0x210833ff
   18674:	ea429d01 	.word	0xea429d01
   18678:	60ea4208 	.word	0x60ea4208
   1867c:	72a87268 	.word	0x72a87268
   18680:	722972e8 	.word	0x722972e8
   18684:	746b742b 	.word	0x746b742b
   18688:	74eb74ab 	.word	0x74eb74ab
   1868c:	2e0568ab 	.word	0x2e0568ab
   18690:	030cf103 	.word	0x030cf103
   18694:	d00360ab 	.word	0xd00360ab
   18698:	bf142e0a 	.word	0xbf142e0a
   1869c:	26022601 	.word	0x26022601
   186a0:	61ef616e 	.word	0x61ef616e
   186a4:	f24761ac 	.word	0xf24761ac
   186a8:	46280101 	.word	0x46280101
   186ac:	f7fa9f00 	.word	0xf7fa9f00
   186b0:	4606fccf 	.word	0x4606fccf
   186b4:	6828b360 	.word	0x6828b360
   186b8:	f7fab108 	.word	0xf7fab108
   186bc:	4628fce7 	.word	0x4628fce7
   186c0:	fcdcf7fa 	.word	0xfcdcf7fa
   186c4:	25232301 	.word	0x25232301
   186c8:	4640603b 	.word	0x4640603b
   186cc:	fd3cf7ff 	.word	0xfd3cf7ff
   186d0:	f7f94628 	.word	0xf7f94628
   186d4:	f04ffdc5 	.word	0xf04ffdc5
   186d8:	464038ff 	.word	0x464038ff
   186dc:	e8bdb002 	.word	0xe8bdb002
   186e0:	2c0181f0 	.word	0x2c0181f0
   186e4:	2c02d009 	.word	0x2c02d009
   186e8:	2f02d109 	.word	0x2f02d109
   186ec:	2016d0a9 	.word	0x2016d0a9
   186f0:	fdb6f7f9 	.word	0xfdb6f7f9
   186f4:	38fff04f 	.word	0x38fff04f
   186f8:	2f01e7ef 	.word	0x2f01e7ef
   186fc:	2702d1f7 	.word	0x2702d1f7
   18700:	9d01e79f 	.word	0x9d01e79f
   18704:	d1c12d00 	.word	0xd1c12d00
   18708:	e7de250c 	.word	0xe7de250c
   1870c:	e7984627 	.word	0xe7984627
   18710:	33fff04f 	.word	0x33fff04f
   18714:	72fff64f 	.word	0x72fff64f
   18718:	46402102 	.word	0x46402102
   1871c:	fd62f7ff 	.word	0xfd62f7ff
   18720:	28004605 	.word	0x28004605
   18724:	4640d1d1 	.word	0x4640d1d1
   18728:	fdc8f7ff 	.word	0xfdc8f7ff
   1872c:	6845b148 	.word	0x6845b148
   18730:	6046b13d 	.word	0x6046b13d
   18734:	202fe7c9 	.word	0x202fe7c9
   18738:	fd92f7f9 	.word	0xfd92f7f9
   1873c:	38fff04f 	.word	0x38fff04f
   18740:	3c02e7cb 	.word	0x3c02e7cb
   18744:	d8c82c01 	.word	0xd8c82c01
   18748:	9b004640 	.word	0x9b004640
   1874c:	f442681a 	.word	0xf442681a
   18750:	601a3200 	.word	0x601a3200
   18754:	f442681a 	.word	0xf442681a
   18758:	601a1280 	.word	0x601a1280
   1875c:	e8bdb002 	.word	0xe8bdb002
   18760:	bf0081f0 	.word	0xbf0081f0
   18764:	00018525 	.word	0x00018525

00018768 <ip_interface_close>:
   18768:	41f0e92d 	.word	0x41f0e92d
   1876c:	4606b082 	.word	0x4606b082
   18770:	fda4f7ff 	.word	0xfda4f7ff
   18774:	d0632800 	.word	0xd0632800
   18778:	21004604 	.word	0x21004604
   1877c:	6827a802 	.word	0x6827a802
   18780:	1d04f840 	.word	0x1d04f840
   18784:	8018f8d4 	.word	0x8018f8d4
   18788:	fc4ef7fa 	.word	0xfc4ef7fa
   1878c:	d13a2800 	.word	0xd13a2800
   18790:	0309f247 	.word	0x0309f247
   18794:	9d012208 	.word	0x9d012208
   18798:	4306ea43 	.word	0x4306ea43
   1879c:	f8c560eb 	.word	0xf8c560eb
   187a0:	72688010 	.word	0x72688010
   187a4:	72e872a8 	.word	0x72e872a8
   187a8:	6823722a 	.word	0x6823722a
   187ac:	0109f247 	.word	0x0109f247
   187b0:	041b0c1b 	.word	0x041b0c1b
   187b4:	030df043 	.word	0x030df043
   187b8:	68236023 	.word	0x68236023
   187bc:	f4234628 	.word	0xf4234628
   187c0:	60233300 	.word	0x60233300
   187c4:	f4236823 	.word	0xf4236823
   187c8:	60231380 	.word	0x60231380
   187cc:	fc40f7fa 	.word	0xfc40f7fa
   187d0:	f04fbb40 	.word	0xf04fbb40
   187d4:	f64f33ff 	.word	0xf64f33ff
   187d8:	210e72ff 	.word	0x210e72ff
   187dc:	f7ff4630 	.word	0xf7ff4630
   187e0:	4604fd01 	.word	0x4604fd01
   187e4:	4c17b1a0 	.word	0x4c17b1a0
   187e8:	0026f854 	.word	0x0026f854
   187ec:	f7fab120 	.word	0xf7fab120
   187f0:	2300fc45 	.word	0x2300fc45
   187f4:	3026f844 	.word	0x3026f844
   187f8:	f7ff4630 	.word	0xf7ff4630
   187fc:	2000fca5 	.word	0x2000fca5
   18800:	e8bdb002 	.word	0xe8bdb002
   18804:	9d0181f0 	.word	0x9d0181f0
   18808:	2d00200c 	.word	0x2d00200c
   1880c:	e012d1cd 	.word	0xe012d1cd
   18810:	f7ff4630 	.word	0xf7ff4630
   18814:	2800fd53 	.word	0x2800fd53
   18818:	6843d0e5 	.word	0x6843d0e5
   1881c:	d0e22b00 	.word	0xd0e22b00
   18820:	e7e06044 	.word	0xe7e06044
   18824:	b1086828 	.word	0xb1086828
   18828:	fc30f7fa 	.word	0xfc30f7fa
   1882c:	f7fa4628 	.word	0xf7fa4628
   18830:	2023fc25 	.word	0x2023fc25
   18834:	f7f96027 	.word	0xf7f96027
   18838:	f04ffd13 	.word	0xf04ffd13
   1883c:	e7df30ff 	.word	0xe7df30ff
   18840:	e7f82009 	.word	0xe7f82009
   18844:	20020614 	.word	0x20020614

00018848 <ip_interface_sendto>:
   18848:	4ff0e92d 	.word	0x4ff0e92d
   1884c:	b0892500 	.word	0xb0892500
   18850:	46149103 	.word	0x46149103
   18854:	95079301 	.word	0x95079301
   18858:	9e124607 	.word	0x9e124607
   1885c:	fd2ef7ff 	.word	0xfd2ef7ff
   18860:	f0002800 	.word	0xf0002800
   18864:	f5b48124 	.word	0xf5b48124
   18868:	f3005f80 	.word	0xf3005f80
   1886c:	69038118 	.word	0x69038118
   18870:	2b014605 	.word	0x2b014605
   18874:	80d1f000 	.word	0x80d1f000
   18878:	0390682a 	.word	0x0390682a
   1887c:	682ad423 	.word	0x682ad423
   18880:	d4060091 	.word	0xd4060091
   18884:	f0002b01 	.word	0xf0002b01
   18888:	682b80ed 	.word	0x682b80ed
   1888c:	f140031a 	.word	0xf140031a
   18890:	682b8102 	.word	0x682b8102
   18894:	f140031b 	.word	0xf140031b
   18898:	68a88106 	.word	0x68a88106
   1889c:	9218f8df 	.word	0x9218f8df
   188a0:	f0402800 	.word	0xf0402800
   188a4:	682b8096 	.word	0x682b8096
   188a8:	f1400118 	.word	0xf1400118
   188ac:	682b8082 	.word	0x682b8082
   188b0:	6300f023 	.word	0x6300f023
   188b4:	f859602b 	.word	0xf859602b
   188b8:	28000027 	.word	0x28000027
   188bc:	4620d17c 	.word	0x4620d17c
   188c0:	e8bdb009 	.word	0xe8bdb009
   188c4:	f2478ff0 	.word	0xf2478ff0
   188c8:	f04f0806 	.word	0xf04f0806
   188cc:	043b0a0c 	.word	0x043b0a0c
   188d0:	91e4f8df 	.word	0x91e4f8df
   188d4:	46219304 	.word	0x46219304
   188d8:	f7faa807 	.word	0xf7faa807
   188dc:	2804fba5 	.word	0x2804fba5
   188e0:	2800d0f9 	.word	0x2800d0f9
   188e4:	9b07d171 	.word	0x9b07d171
   188e8:	a008f883 	.word	0xa008f883
   188ec:	72987258 	.word	0x72987258
   188f0:	b33e72d8 	.word	0xb33e72d8
   188f4:	687168ea 	.word	0x687168ea
   188f8:	d10a428a 	.word	0xd10a428a
   188fc:	f1032a02 	.word	0xf1032a02
   18900:	7831001c 	.word	0x7831001c
   18904:	8090f000 	.word	0x8090f000
   18908:	d1022a0a 	.word	0xd1022a0a
   1890c:	f0002924 	.word	0xf0002924
   18910:	681880af 	.word	0x681880af
   18914:	f7fab110 	.word	0xf7fab110
   18918:	9b07fbb9 	.word	0x9b07fbb9
   1891c:	f7fa4618 	.word	0xf7fa4618
   18920:	2016fbad 	.word	0x2016fbad
   18924:	031a682b 	.word	0x031a682b
   18928:	682bd453 	.word	0x682bd453
   1892c:	2b0db29b 	.word	0x2b0db29b
   18930:	682bd0b6 	.word	0x682bd0b6
   18934:	1300f423 	.word	0x1300f423
   18938:	682b602b 	.word	0x682b602b
   1893c:	3300f443 	.word	0x3300f443
   18940:	e7ad602b 	.word	0xe7ad602b
   18944:	99014642 	.word	0x99014642
   18948:	69a96159 	.word	0x69a96159
   1894c:	61199804 	.word	0x61199804
   18950:	43029903 	.word	0x43029903
   18954:	605c60da 	.word	0x605c60da
   18958:	6818b119 	.word	0x6818b119
   1895c:	f00c4622 	.word	0xf00c4622
   18960:	682bf83f 	.word	0x682bf83f
   18964:	93054641 	.word	0x93054641
   18968:	f423682b 	.word	0xf423682b
   1896c:	602b3300 	.word	0x602b3300
   18970:	f443682b 	.word	0xf443682b
   18974:	602b1300 	.word	0x602b1300
   18978:	46189b07 	.word	0x46189b07
   1897c:	f7fa9302 	.word	0xf7fa9302
   18980:	9b02fb67 	.word	0x9b02fb67
   18984:	bb584683 	.word	0xbb584683
   18988:	3200f44f 	.word	0x3200f44f
   1898c:	33fff04f 	.word	0x33fff04f
   18990:	46384611 	.word	0x46384611
   18994:	fc26f7ff 	.word	0xfc26f7ff
   18998:	682bb370 	.word	0x682bb370
   1899c:	d4370319 	.word	0xd4370319
   189a0:	d1bf280c 	.word	0xd1bf280c
   189a4:	0027f859 	.word	0x0027f859
   189a8:	d0942800 	.word	0xd0942800
   189ac:	fb66f7fa 	.word	0xfb66f7fa
   189b0:	f859e791 	.word	0xf859e791
   189b4:	69840027 	.word	0x69840027
   189b8:	fb60f7fa 	.word	0xfb60f7fa
   189bc:	46202300 	.word	0x46202300
   189c0:	3027f849 	.word	0x3027f849
   189c4:	e8bdb009 	.word	0xe8bdb009
   189c8:	682b8ff0 	.word	0x682b8ff0
   189cc:	031a200c 	.word	0x031a200c
   189d0:	f7f9d5ab 	.word	0xf7f9d5ab
   189d4:	f04ffc45 	.word	0xf04ffc45
   189d8:	f85934ff 	.word	0xf85934ff
   189dc:	e76c0027 	.word	0xe76c0027
   189e0:	469b6818 	.word	0x469b6818
   189e4:	f7fab108 	.word	0xf7fab108
   189e8:	4658fb51 	.word	0x4658fb51
   189ec:	fb46f7fa 	.word	0xfb46f7fa
   189f0:	20239b05 	.word	0x20239b05
   189f4:	e795602b 	.word	0xe795602b
   189f8:	f7ff4638 	.word	0xf7ff4638
   189fc:	4603fc5f 	.word	0x4603fc5f
   18a00:	6840b1f0 	.word	0x6840b1f0
   18a04:	f8c3b1e0 	.word	0xf8c3b1e0
   18a08:	682bb004 	.word	0x682bb004
   18a0c:	d5c70319 	.word	0xd5c70319
   18a10:	682b68a8 	.word	0x682b68a8
   18a14:	d588031e 	.word	0xd588031e
   18a18:	2e00e742 	.word	0x2e00e742
   18a1c:	af2cf43f 	.word	0xaf2cf43f
   18a20:	f8df2016 	.word	0xf8df2016
   18a24:	e7d49094 	.word	0xe7d49094
   18a28:	f47f2910 	.word	0xf47f2910
   18a2c:	2204af72 	.word	0x2204af72
   18a30:	835a8931 	.word	0x835a8931
   18a34:	f1068319 	.word	0xf1068319
   18a38:	f00b010c 	.word	0xf00b010c
   18a3c:	e01effd1 	.word	0xe01effd1
   18a40:	031b682b 	.word	0x031b682b
   18a44:	af2ff53f 	.word	0xaf2ff53f
   18a48:	b29b682b 	.word	0xb29b682b
   18a4c:	f43f2b0d 	.word	0xf43f2b0d
   18a50:	682baf2a 	.word	0x682baf2a
   18a54:	1300f423 	.word	0x1300f423
   18a58:	682b602b 	.word	0x682b602b
   18a5c:	3300f443 	.word	0x3300f443
   18a60:	e720602b 	.word	0xe720602b
   18a64:	b29b682b 	.word	0xb29b682b
   18a68:	f47f2b05 	.word	0xf47f2b05
   18a6c:	e70caf12 	.word	0xe70caf12
   18a70:	89312210 	.word	0x89312210
   18a74:	8319835a 	.word	0x8319835a
   18a78:	f00b18b1 	.word	0xf00b18b1
   18a7c:	f247ffb1 	.word	0xf247ffb1
   18a80:	9b070207 	.word	0x9b070207
   18a84:	68994690 	.word	0x68994690
   18a88:	31048b58 	.word	0x31048b58
   18a8c:	98014401 	.word	0x98014401
   18a90:	61586099 	.word	0x61586099
   18a94:	2023e759 	.word	0x2023e759
   18a98:	901cf8df 	.word	0x901cf8df
   18a9c:	2028e799 	.word	0x2028e799
   18aa0:	9014f8df 	.word	0x9014f8df
   18aa4:	2039e795 	.word	0x2039e795
   18aa8:	900cf8df 	.word	0x900cf8df
   18aac:	2009e791 	.word	0x2009e791
   18ab0:	9004f8df 	.word	0x9004f8df
   18ab4:	bf00e78d 	.word	0xbf00e78d
   18ab8:	20020614 	.word	0x20020614

00018abc <ip_interface_recvfrom>:
   18abc:	4ff0e92d 	.word	0x4ff0e92d
   18ac0:	2a00b085 	.word	0x2a00b085
   18ac4:	8110f000 	.word	0x8110f000
   18ac8:	4699468a 	.word	0x4699468a
   18acc:	46164607 	.word	0x46164607
   18ad0:	fbf4f7ff 	.word	0xfbf4f7ff
   18ad4:	28004604 	.word	0x28004604
   18ad8:	810df000 	.word	0x810df000
   18adc:	02d96803 	.word	0x02d96803
   18ae0:	f019d565 	.word	0xf019d565
   18ae4:	bf180f02 	.word	0xbf180f02
   18ae8:	0800f04f 	.word	0x0800f04f
   18aec:	3bfff04f 	.word	0x3bfff04f
   18af0:	6803bf08 	.word	0x6803bf08
   18af4:	0510f009 	.word	0x0510f009
   18af8:	f083bf04 	.word	0xf083bf04
   18afc:	f3c85880 	.word	0xf3c85880
   18b00:	68237800 	.word	0x68237800
   18b04:	d56d03da 	.word	0xd56d03da
   18b08:	69e06823 	.word	0x69e06823
   18b0c:	3380f423 	.word	0x3380f423
   18b10:	68036023 	.word	0x68036023
   18b14:	479868db 	.word	0x479868db
   18b18:	3ffff1b0 	.word	0x3ffff1b0
   18b1c:	f0004683 	.word	0xf0004683
   18b20:	42868081 	.word	0x42868081
   18b24:	6923dd03 	.word	0x6923dd03
   18b28:	f0002b01 	.word	0xf0002b01
   18b2c:	250080a7 	.word	0x250080a7
   18b30:	9b0f69e0 	.word	0x9b0f69e0
   18b34:	681bb103 	.word	0x681bb103
   18b38:	e9cd9a0e 	.word	0xe9cd9a0e
   18b3c:	e9cda600 	.word	0xe9cda600
   18b40:	68032302 	.word	0x68032302
   18b44:	689b464a 	.word	0x689b464a
   18b48:	47984669 	.word	0x47984669
   18b4c:	69e04683 	.word	0x69e04683
   18b50:	3ffff1bb 	.word	0x3ffff1bb
   18b54:	bf186803 	.word	0xbf186803
   18b58:	68db2601 	.word	0x68db2601
   18b5c:	2600bf0a 	.word	0x2600bf0a
   18b60:	0800f04f 	.word	0x0800f04f
   18b64:	0823f04f 	.word	0x0823f04f
   18b68:	30014798 	.word	0x30014798
   18b6c:	2d00d135 	.word	0x2d00d135
   18b70:	80b6f000 	.word	0x80b6f000
   18b74:	f0002e00 	.word	0xf0002e00
   18b78:	682380a6 	.word	0x682380a6
   18b7c:	d5060319 	.word	0xd5060319
   18b80:	b29b6823 	.word	0xb29b6823
   18b84:	d0022b0d 	.word	0xd0022b0d
   18b88:	2b016923 	.word	0x2b016923
   18b8c:	6823d025 	.word	0x6823d025
   18b90:	4f80f013 	.word	0x4f80f013
   18b94:	f0406823 	.word	0xf0406823
   18b98:	031a80b1 	.word	0x031a80b1
   18b9c:	f1b8d475 	.word	0xf1b8d475
   18ba0:	f0400f00 	.word	0xf0400f00
   18ba4:	4658808a 	.word	0x4658808a
   18ba8:	e8bdb005 	.word	0xe8bdb005
   18bac:	68038ff0 	.word	0x68038ff0
   18bb0:	2b06b29b 	.word	0x2b06b29b
   18bb4:	6803d073 	.word	0x6803d073
   18bb8:	2b07b29b 	.word	0x2b07b29b
   18bbc:	f04fbf0c 	.word	0xf04fbf0c
   18bc0:	f04f0809 	.word	0xf04f0809
   18bc4:	69e00839 	.word	0x69e00839
   18bc8:	68db6803 	.word	0x68db6803
   18bcc:	f1b04798 	.word	0xf1b04798
   18bd0:	46833fff 	.word	0x46833fff
   18bd4:	f04fd0db 	.word	0xf04fd0db
   18bd8:	68233bff 	.word	0x68233bff
   18bdc:	3380f443 	.word	0x3380f443
   18be0:	e7dc6023 	.word	0xe7dc6023
   18be4:	0f00f1b8 	.word	0x0f00f1b8
   18be8:	8081f000 	.word	0x8081f000
   18bec:	3280f44f 	.word	0x3280f44f
   18bf0:	46116a23 	.word	0x46116a23
   18bf4:	bf082b00 	.word	0xbf082b00
   18bf8:	33fff04f 	.word	0x33fff04f
   18bfc:	f7ff4638 	.word	0xf7ff4638
   18c00:	4680faf1 	.word	0x4680faf1
   18c04:	6823b358 	.word	0x6823b358
   18c08:	031b69e0 	.word	0x031b69e0
   18c0c:	6823d521 	.word	0x6823d521
   18c10:	2b0db29b 	.word	0x2b0db29b
   18c14:	6925d01d 	.word	0x6925d01d
   18c18:	0501f1a5 	.word	0x0501f1a5
   18c1c:	f585fab5 	.word	0xf585fab5
   18c20:	e786096d 	.word	0xe786096d
   18c24:	03186823 	.word	0x03186823
   18c28:	6823d5dc 	.word	0x6823d5dc
   18c2c:	2b0db29b 	.word	0x2b0db29b
   18c30:	6923d0d8 	.word	0x6923d0d8
   18c34:	2b0169e0 	.word	0x2b0169e0
   18c38:	f04fd034 	.word	0xf04fd034
   18c3c:	68230839 	.word	0x68230839
   18c40:	041b0c1b 	.word	0x041b0c1b
   18c44:	030df043 	.word	0x030df043
   18c48:	68236023 	.word	0x68236023
   18c4c:	1380f423 	.word	0x1380f423
   18c50:	68036023 	.word	0x68036023
   18c54:	479868db 	.word	0x479868db
   18c58:	d1be3001 	.word	0xd1be3001
   18c5c:	4638e797 	.word	0x4638e797
   18c60:	fb2cf7ff 	.word	0xfb2cf7ff
   18c64:	f8d0b138 	.word	0xf8d0b138
   18c68:	f1b88004 	.word	0xf1b88004
   18c6c:	d0020f00 	.word	0xd0020f00
   18c70:	60432300 	.word	0x60432300
   18c74:	f04fe7c7 	.word	0xf04fe7c7
   18c78:	e7420801 	.word	0xe7420801
   18c7c:	6823b11d 	.word	0x6823b11d
   18c80:	d5b300db 	.word	0xd5b300db
   18c84:	69e0e753 	.word	0x69e0e753
   18c88:	6823e753 	.word	0x6823e753
   18c8c:	2b0db29b 	.word	0x2b0db29b
   18c90:	68a3d185 	.word	0x68a3d185
   18c94:	d0822b00 	.word	0xd0822b00
   18c98:	8008f8d4 	.word	0x8008f8d4
   18c9c:	f04fe77f 	.word	0xf04fe77f
   18ca0:	e7900809 	.word	0xe7900809
   18ca4:	68db6803 	.word	0x68db6803
   18ca8:	30014798 	.word	0x30014798
   18cac:	f04fd00b 	.word	0xf04fd00b
   18cb0:	68230823 	.word	0x68230823
   18cb4:	3380f443 	.word	0x3380f443
   18cb8:	46406023 	.word	0x46406023
   18cbc:	fad0f7f9 	.word	0xfad0f7f9
   18cc0:	3bfff04f 	.word	0x3bfff04f
   18cc4:	6823e76f 	.word	0x6823e76f
   18cc8:	0b00f04f 	.word	0x0b00f04f
   18ccc:	041b0c1b 	.word	0x041b0c1b
   18cd0:	030df043 	.word	0x030df043
   18cd4:	68236023 	.word	0x68236023
   18cd8:	1380f423 	.word	0x1380f423
   18cdc:	e7626023 	.word	0xe7626023
   18ce0:	f47f2e00 	.word	0xf47f2e00
   18ce4:	e752af4a 	.word	0xe752af4a
   18ce8:	0816f04f 	.word	0x0816f04f
   18cec:	f04fe7e5 	.word	0xf04fe7e5
   18cf0:	69e00823 	.word	0x69e00823
   18cf4:	f04fe7ad 	.word	0xf04fe7ad
   18cf8:	e7de0809 	.word	0xe7de0809
   18cfc:	4380f023 	.word	0x4380f023
   18d00:	68236023 	.word	0x68236023
   18d04:	0869f04f 	.word	0x0869f04f
   18d08:	041b0c1b 	.word	0x041b0c1b
   18d0c:	030df043 	.word	0x030df043
   18d10:	e7d26023 	.word	0xe7d26023

00018d14 <ip_interface_connect>:
   18d14:	41f0e92d 	.word	0x41f0e92d
   18d18:	2900b082 	.word	0x2900b082
   18d1c:	2a00d044 	.word	0x2a00d044
   18d20:	4606d042 	.word	0x4606d042
   18d24:	f7ff460f 	.word	0xf7ff460f
   18d28:	4605fac9 	.word	0x4605fac9
   18d2c:	f0002800 	.word	0xf0002800
   18d30:	68038096 	.word	0x68038096
   18d34:	2b02b29b 	.word	0x2b02b29b
   18d38:	6803d004 	.word	0x6803d004
   18d3c:	2b04b29b 	.word	0x2b04b29b
   18d40:	808df040 	.word	0x808df040
   18d44:	f0116829 	.word	0xf0116829
   18d48:	f0405100 	.word	0xf0405100
   18d4c:	a8028084 	.word	0xa8028084
   18d50:	1d04f840 	.word	0x1d04f840
   18d54:	8018f8d5 	.word	0x8018f8d5
   18d58:	f966f7fa 	.word	0xf966f7fa
   18d5c:	2108bb70 	.word	0x2108bb70
   18d60:	9c010433 	.word	0x9c010433
   18d64:	42e0f443 	.word	0x42e0f443
   18d68:	0202f042 	.word	0x0202f042
   18d6c:	f8c460e2 	.word	0xf8c460e2
   18d70:	72608010 	.word	0x72608010
   18d74:	72e072a0 	.word	0x72e072a0
   18d78:	f4437221 	.word	0xf4437221
   18d7c:	f04343e0 	.word	0xf04343e0
   18d80:	60e30302 	.word	0x60e30302
   18d84:	69aa68a3 	.word	0x69aa68a3
   18d88:	61223304 	.word	0x61223304
   18d8c:	68eb60a3 	.word	0x68eb60a3
   18d90:	4293687a 	.word	0x4293687a
   18d94:	2b02d108 	.word	0x2b02d108
   18d98:	0018f104 	.word	0x0018f104
   18d9c:	d03a783a 	.word	0xd03a783a
   18da0:	d1012b0a 	.word	0xd1012b0a
   18da4:	d00e2a24 	.word	0xd00e2a24
   18da8:	46202416 	.word	0x46202416
   18dac:	fa58f7f9 	.word	0xfa58f7f9
   18db0:	34fff04f 	.word	0x34fff04f
   18db4:	b0024620 	.word	0xb0024620
   18db8:	81f0e8bd 	.word	0x81f0e8bd
   18dbc:	2c009c01 	.word	0x2c009c01
   18dc0:	0433d04f 	.word	0x0433d04f
   18dc4:	2210e7d9 	.word	0x2210e7d9
   18dc8:	18b9893b 	.word	0x18b9893b
   18dcc:	82a382e2 	.word	0x82a382e2
   18dd0:	fe06f00b 	.word	0xfe06f00b
   18dd4:	8ae268a3 	.word	0x8ae268a3
   18dd8:	0102f247 	.word	0x0102f247
   18ddc:	60a34413 	.word	0x60a34413
   18de0:	682b682f 	.word	0x682b682f
   18de4:	f0434620 	.word	0xf0434620
   18de8:	602b5300 	.word	0x602b5300
   18dec:	f930f7fa 	.word	0xf930f7fa
   18df0:	682bb9e0 	.word	0x682bb9e0
   18df4:	5880f013 	.word	0x5880f013
   18df8:	f04fd12f 	.word	0xf04fd12f
   18dfc:	f64f33ff 	.word	0xf64f33ff
   18e00:	210572ff 	.word	0x210572ff
   18e04:	f7ff4630 	.word	0xf7ff4630
   18e08:	4604f9ed 	.word	0x4604f9ed
   18e0c:	2c73b1c0 	.word	0x2c73b1c0
   18e10:	602fd0cb 	.word	0x602fd0cb
   18e14:	2a10e7c9 	.word	0x2a10e7c9
   18e18:	2204d1c6 	.word	0x2204d1c6
   18e1c:	f107893b 	.word	0xf107893b
   18e20:	82e2010c 	.word	0x82e2010c
   18e24:	f00b82a3 	.word	0xf00b82a3
   18e28:	e7d3fddb 	.word	0xe7d3fddb
   18e2c:	b1086820 	.word	0xb1086820
   18e30:	f92cf7fa 	.word	0xf92cf7fa
   18e34:	f7fa4620 	.word	0xf7fa4620
   18e38:	2423f921 	.word	0x2423f921
   18e3c:	e7b4602f 	.word	0xe7b4602f
   18e40:	f7ff4630 	.word	0xf7ff4630
   18e44:	2800fa3b 	.word	0x2800fa3b
   18e48:	6844d0b4 	.word	0x6844d0b4
   18e4c:	d0b12c00 	.word	0xd0b12c00
   18e50:	8004f8c0 	.word	0x8004f8c0
   18e54:	2472e7db 	.word	0x2472e7db
   18e58:	2473e7a7 	.word	0x2473e7a7
   18e5c:	2409e7a5 	.word	0x2409e7a5
   18e60:	240ce7a3 	.word	0x240ce7a3
   18e64:	bf00e7a1 	.word	0xbf00e7a1

00018e68 <ip_interface_bind>:
   18e68:	41f0e92d 	.word	0x41f0e92d
   18e6c:	b389b082 	.word	0xb389b082
   18e70:	4607b382 	.word	0x4607b382
   18e74:	f7ff460e 	.word	0xf7ff460e
   18e78:	4605fa21 	.word	0x4605fa21
   18e7c:	d07b2800 	.word	0xd07b2800
   18e80:	b29b6803 	.word	0xb29b6803
   18e84:	d1772b02 	.word	0xd1772b02
   18e88:	a8022100 	.word	0xa8022100
   18e8c:	1d04f840 	.word	0x1d04f840
   18e90:	8018f8d5 	.word	0x8018f8d5
   18e94:	f8c8f7fa 	.word	0xf8c8f7fa
   18e98:	f247bb30 	.word	0xf247bb30
   18e9c:	22080305 	.word	0x22080305
   18ea0:	ea439c01 	.word	0xea439c01
   18ea4:	60e34307 	.word	0x60e34307
   18ea8:	8010f8c4 	.word	0x8010f8c4
   18eac:	72a07260 	.word	0x72a07260
   18eb0:	722272e0 	.word	0x722272e0
   18eb4:	330468a3 	.word	0x330468a3
   18eb8:	68eb60a3 	.word	0x68eb60a3
   18ebc:	42936872 	.word	0x42936872
   18ec0:	2b02d108 	.word	0x2b02d108
   18ec4:	0018f104 	.word	0x0018f104
   18ec8:	d03c7832 	.word	0xd03c7832
   18ecc:	d1012b0a 	.word	0xd1012b0a
   18ed0:	d00e2a24 	.word	0xd00e2a24
   18ed4:	46202416 	.word	0x46202416
   18ed8:	f9c2f7f9 	.word	0xf9c2f7f9
   18edc:	34fff04f 	.word	0x34fff04f
   18ee0:	b0024620 	.word	0xb0024620
   18ee4:	81f0e8bd 	.word	0x81f0e8bd
   18ee8:	2c009c01 	.word	0x2c009c01
   18eec:	240cd1e2 	.word	0x240cd1e2
   18ef0:	2210e7f1 	.word	0x2210e7f1
   18ef4:	18b18933 	.word	0x18b18933
   18ef8:	82a382e2 	.word	0x82a382e2
   18efc:	fd70f00b 	.word	0xfd70f00b
   18f00:	8ae268a3 	.word	0x8ae268a3
   18f04:	0105f247 	.word	0x0105f247
   18f08:	60a34413 	.word	0x60a34413
   18f0c:	4620682b 	.word	0x4620682b
   18f10:	041b0c1b 	.word	0x041b0c1b
   18f14:	0303f043 	.word	0x0303f043
   18f18:	682e602b 	.word	0x682e602b
   18f1c:	f898f7fa 	.word	0xf898f7fa
   18f20:	b9d84680 	.word	0xb9d84680
   18f24:	33fff04f 	.word	0x33fff04f
   18f28:	72fff64f 	.word	0x72fff64f
   18f2c:	46382104 	.word	0x46382104
   18f30:	f958f7ff 	.word	0xf958f7ff
   18f34:	b3084604 	.word	0xb3084604
   18f38:	0c1b682b 	.word	0x0c1b682b
   18f3c:	f043041b 	.word	0xf043041b
   18f40:	602b0302 	.word	0x602b0302
   18f44:	2a10e7c7 	.word	0x2a10e7c7
   18f48:	2204d1c4 	.word	0x2204d1c4
   18f4c:	f1068933 	.word	0xf1068933
   18f50:	82e2010c 	.word	0x82e2010c
   18f54:	f00b82a3 	.word	0xf00b82a3
   18f58:	e7d1fd43 	.word	0xe7d1fd43
   18f5c:	b1086820 	.word	0xb1086820
   18f60:	f894f7fa 	.word	0xf894f7fa
   18f64:	04360c36 	.word	0x04360c36
   18f68:	f0464620 	.word	0xf0464620
   18f6c:	f7fa0602 	.word	0xf7fa0602
   18f70:	2423f885 	.word	0x2423f885
   18f74:	e7ae602e 	.word	0xe7ae602e
   18f78:	e7ac2409 	.word	0xe7ac2409
   18f7c:	f7ff4638 	.word	0xf7ff4638
   18f80:	2800f99d 	.word	0x2800f99d
   18f84:	6844d0ac 	.word	0x6844d0ac
   18f88:	d0a92c00 	.word	0xd0a92c00
   18f8c:	8004f8c0 	.word	0x8004f8c0
   18f90:	bf00e7d2 	.word	0xbf00e7d2

00018f94 <ip_interface_listen>:
   18f94:	41f0e92d 	.word	0x41f0e92d
   18f98:	4606b082 	.word	0x4606b082
   18f9c:	f98ef7ff 	.word	0xf98ef7ff
   18fa0:	d0672800 	.word	0xd0672800
   18fa4:	46056803 	.word	0x46056803
   18fa8:	2b04b29b 	.word	0x2b04b29b
   18fac:	2100d162 	.word	0x2100d162
   18fb0:	46304a32 	.word	0x46304a32
   18fb4:	f8def7ff 	.word	0xf8def7ff
   18fb8:	28004601 	.word	0x28004601
   18fbc:	a802d15c 	.word	0xa802d15c
   18fc0:	1d04f840 	.word	0x1d04f840
   18fc4:	f7fa69af 	.word	0xf7fa69af
   18fc8:	bba8f82f 	.word	0xbba8f82f
   18fcc:	0308f247 	.word	0x0308f247
   18fd0:	9c012208 	.word	0x9c012208
   18fd4:	4306ea43 	.word	0x4306ea43
   18fd8:	612760e3 	.word	0x612760e3
   18fdc:	72a07260 	.word	0x72a07260
   18fe0:	722272e0 	.word	0x722272e0
   18fe4:	f24768a3 	.word	0xf24768a3
   18fe8:	33040108 	.word	0x33040108
   18fec:	682b60a3 	.word	0x682b60a3
   18ff0:	0c1b4620 	.word	0x0c1b4620
   18ff4:	f043041b 	.word	0xf043041b
   18ff8:	602b0306 	.word	0x602b0306
   18ffc:	f7fa682f 	.word	0xf7fa682f
   19000:	4680f827 	.word	0x4680f827
   19004:	f04fb9e8 	.word	0xf04fb9e8
   19008:	f64f33ff 	.word	0xf64f33ff
   1900c:	210772ff 	.word	0x210772ff
   19010:	f7ff4630 	.word	0xf7ff4630
   19014:	4604f8e7 	.word	0x4604f8e7
   19018:	682bb308 	.word	0x682bb308
   1901c:	041b0c1b 	.word	0x041b0c1b
   19020:	0304f043 	.word	0x0304f043
   19024:	4620602b 	.word	0x4620602b
   19028:	f91af7f9 	.word	0xf91af7f9
   1902c:	34fff04f 	.word	0x34fff04f
   19030:	b0024620 	.word	0xb0024620
   19034:	81f0e8bd 	.word	0x81f0e8bd
   19038:	2c009c01 	.word	0x2c009c01
   1903c:	240cd1d2 	.word	0x240cd1d2
   19040:	6820e7f1 	.word	0x6820e7f1
   19044:	f7fab108 	.word	0xf7fab108
   19048:	0c3ff821 	.word	0x0c3ff821
   1904c:	4620043f 	.word	0x4620043f
   19050:	0704f047 	.word	0x0704f047
   19054:	f812f7fa 	.word	0xf812f7fa
   19058:	602f2423 	.word	0x602f2423
   1905c:	4630e7e3 	.word	0x4630e7e3
   19060:	f92cf7ff 	.word	0xf92cf7ff
   19064:	d0e32800 	.word	0xd0e32800
   19068:	2c006844 	.word	0x2c006844
   1906c:	f8c0d0e0 	.word	0xf8c0d0e0
   19070:	e7d28004 	.word	0xe7d28004
   19074:	e7d62409 	.word	0xe7d62409
   19078:	e7d42423 	.word	0xe7d42423
   1907c:	00018525 	.word	0x00018525

00019080 <ip_interface_accept>:
   19080:	4ff0e92d 	.word	0x4ff0e92d
   19084:	b0852500 	.word	0xb0852500
   19088:	4690460f 	.word	0x4690460f
   1908c:	46069502 	.word	0x46069502
   19090:	f914f7ff 	.word	0xf914f7ff
   19094:	28004604 	.word	0x28004604
   19098:	811cf000 	.word	0x811cf000
   1909c:	b29b6803 	.word	0xb29b6803
   190a0:	d10a2b07 	.word	0xd10a2b07
   190a4:	68056803 	.word	0x68056803
   190a8:	d41600db 	.word	0xd41600db
   190ac:	3580f415 	.word	0x3580f415
   190b0:	6805d019 	.word	0x6805d019
   190b4:	3580f415 	.word	0x3580f415
   190b8:	f04fd124 	.word	0xf04fd124
   190bc:	9b020909 	.word	0x9b020909
   190c0:	4628b113 	.word	0x4628b113
   190c4:	f840f7ff 	.word	0xf840f7ff
   190c8:	f04f4648 	.word	0xf04f4648
   190cc:	f7f939ff 	.word	0xf7f939ff
   190d0:	4648f8c7 	.word	0x4648f8c7
   190d4:	e8bdb005 	.word	0xe8bdb005
   190d8:	f4158ff0 	.word	0xf4158ff0
   190dc:	d16d3580 	.word	0xd16d3580
   190e0:	0923f04f 	.word	0x0923f04f
   190e4:	f44fe7eb 	.word	0xf44fe7eb
   190e8:	f04f3280 	.word	0xf04f3280
   190ec:	461133ff 	.word	0x461133ff
   190f0:	f7ff4630 	.word	0xf7ff4630
   190f4:	4681f877 	.word	0x4681f877
   190f8:	d07e2800 	.word	0xd07e2800
   190fc:	f4156825 	.word	0xf4156825
   19100:	d0dc3580 	.word	0xd0dc3580
   19104:	30fff04f 	.word	0x30fff04f
   19108:	e9cd2300 	.word	0xe9cd2300
   1910c:	4a750300 	.word	0x4a750300
   19110:	a8026921 	.word	0xa8026921
   19114:	ffc2f7fe 	.word	0xffc2f7fe
   19118:	46059b02 	.word	0x46059b02
   1911c:	f0002b00 	.word	0xf0002b00
   19120:	210080dd 	.word	0x210080dd
   19124:	a8046962 	.word	0xa8046962
   19128:	68e2615a 	.word	0x68e2615a
   1912c:	1d04f840 	.word	0x1d04f840
   19130:	692260da 	.word	0x692260da
   19134:	f8d4611a 	.word	0xf8d4611a
   19138:	f7f99018 	.word	0xf7f99018
   1913c:	2800ff75 	.word	0x2800ff75
   19140:	f247d143 	.word	0xf247d143
   19144:	2108030c 	.word	0x2108030c
   19148:	b00cf8dd 	.word	0xb00cf8dd
   1914c:	4306ea43 	.word	0x4306ea43
   19150:	300cf8cb 	.word	0x300cf8cb
   19154:	9010f8cb 	.word	0x9010f8cb
   19158:	0009f88b 	.word	0x0009f88b
   1915c:	000af88b 	.word	0x000af88b
   19160:	000bf88b 	.word	0x000bf88b
   19164:	1008f88b 	.word	0x1008f88b
   19168:	f2476823 	.word	0xf2476823
   1916c:	0c1b010c 	.word	0x0c1b010c
   19170:	f043041b 	.word	0xf043041b
   19174:	60230308 	.word	0x60230308
   19178:	f8d44658 	.word	0xf8d44658
   1917c:	f7f99000 	.word	0xf7f99000
   19180:	4682ff67 	.word	0x4682ff67
   19184:	6822bb48 	.word	0x6822bb48
   19188:	f04f9900 	.word	0xf04f9900
   1918c:	400a33ff 	.word	0x400a33ff
   19190:	21096022 	.word	0x21096022
   19194:	72fff64f 	.word	0x72fff64f
   19198:	f7ff4630 	.word	0xf7ff4630
   1919c:	4681f823 	.word	0x4681f823
   191a0:	f0002800 	.word	0xf0002800
   191a4:	68238085 	.word	0x68238085
   191a8:	431a9a01 	.word	0x431a9a01
   191ac:	68236022 	.word	0x68236022
   191b0:	041b0c1b 	.word	0x041b0c1b
   191b4:	0307f043 	.word	0x0307f043
   191b8:	e7806023 	.word	0xe7806023
   191bc:	5280f06f 	.word	0x5280f06f
   191c0:	5380f04f 	.word	0x5380f04f
   191c4:	2300e9cd 	.word	0x2300e9cd
   191c8:	f8dde7a1 	.word	0xf8dde7a1
   191cc:	f04fb00c 	.word	0xf04fb00c
   191d0:	f1bb090c 	.word	0xf1bb090c
   191d4:	d1c70f00 	.word	0xd1c70f00
   191d8:	f8dbe771 	.word	0xf8dbe771
   191dc:	b1080000 	.word	0xb1080000
   191e0:	ff54f7f9 	.word	0xff54f7f9
   191e4:	4919ea4f 	.word	0x4919ea4f
   191e8:	ea4f4658 	.word	0xea4f4658
   191ec:	f7f94909 	.word	0xf7f94909
   191f0:	f049ff45 	.word	0xf049ff45
   191f4:	60230307 	.word	0x60230307
   191f8:	4630e772 	.word	0x4630e772
   191fc:	f85ef7ff 	.word	0xf85ef7ff
   19200:	f8d0b130 	.word	0xf8d0b130
   19204:	f1b99004 	.word	0xf1b99004
   19208:	d0010f00 	.word	0xd0010f00
   1920c:	e7756045 	.word	0xe7756045
   19210:	03d96823 	.word	0x03d96823
   19214:	af76f53f 	.word	0xaf76f53f
   19218:	99024d33 	.word	0x99024d33
   1921c:	3026f855 	.word	0x3026f855
   19220:	618b699b 	.word	0x618b699b
   19224:	68cbb147 	.word	0x68cbb147
   19228:	d0242b0a 	.word	0xd0242b0a
   1922c:	d1032b02 	.word	0xd1032b02
   19230:	2000f8d8 	.word	0x2000f8d8
   19234:	d0322a10 	.word	0xd0322a10
   19238:	482c680a 	.word	0x482c680a
   1923c:	f0424002 	.word	0xf0424002
   19240:	600a0205 	.word	0x600a0205
   19244:	68119a02 	.word	0x68119a02
   19248:	3100f441 	.word	0x3100f441
   1924c:	68116011 	.word	0x68116011
   19250:	1180f441 	.word	0x1180f441
   19254:	68236011 	.word	0x68236011
   19258:	f0434003 	.word	0xf0434003
   1925c:	60230307 	.word	0x60230307
   19260:	0026f855 	.word	0x0026f855
   19264:	ff0af7f9 	.word	0xff0af7f9
   19268:	46482300 	.word	0x46482300
   1926c:	3026f845 	.word	0x3026f845
   19270:	e8bdb005 	.word	0xe8bdb005
   19274:	f8d88ff0 	.word	0xf8d88ff0
   19278:	2a242000 	.word	0x2a242000
   1927c:	703ad1dc 	.word	0x703ad1dc
   19280:	607b2210 	.word	0x607b2210
   19284:	3026f855 	.word	0x3026f855
   19288:	0010f107 	.word	0x0010f107
   1928c:	813b8b9b 	.word	0x813b8b9b
   19290:	1026f855 	.word	0x1026f855
   19294:	f00b3120 	.word	0xf00b3120
   19298:	9902fba3 	.word	0x9902fba3
   1929c:	703ae7cc 	.word	0x703ae7cc
   192a0:	f855607b 	.word	0xf855607b
   192a4:	f1073026 	.word	0xf1073026
   192a8:	8b9b000c 	.word	0x8b9b000c
   192ac:	e7ee2204 	.word	0xe7ee2204
   192b0:	f7ff4630 	.word	0xf7ff4630
   192b4:	b138f803 	.word	0xb138f803
   192b8:	9004f8d0 	.word	0x9004f8d0
   192bc:	0f00f1b9 	.word	0x0f00f1b9
   192c0:	f8c0d002 	.word	0xf8c0d002
   192c4:	e76ea004 	.word	0xe76ea004
   192c8:	9a016823 	.word	0x9a016823
   192cc:	431346a9 	.word	0x431346a9
   192d0:	e7a16023 	.word	0xe7a16023
   192d4:	f04f4605 	.word	0xf04f4605
   192d8:	e6f00909 	.word	0xe6f00909
   192dc:	090cf04f 	.word	0x090cf04f
   192e0:	bf00e6f2 	.word	0xbf00e6f2
   192e4:	00018525 	.word	0x00018525
   192e8:	20020614 	.word	0x20020614
   192ec:	ffff0000 	.word	0xffff0000

000192f0 <ip_interface_setopt>:
   192f0:	41f0e92d 	.word	0x41f0e92d
   192f4:	b0842901 	.word	0xb0842901
   192f8:	809cf040 	.word	0x809cf040
   192fc:	4690460e 	.word	0x4690460e
   19300:	4607461d 	.word	0x4607461d
   19304:	ffdaf7fe 	.word	0xffdaf7fe
   19308:	28004604 	.word	0x28004604
   1930c:	80a5f000 	.word	0x80a5f000
   19310:	0f19f1b8 	.word	0x0f19f1b8
   19314:	2d00d16e 	.word	0x2d00d16e
   19318:	8092f000 	.word	0x8092f000
   1931c:	f00b4628 	.word	0xf00b4628
   19320:	9b0afb2b 	.word	0x9b0afb2b
   19324:	f0404298 	.word	0xf0404298
   19328:	6823808b 	.word	0x6823808b
   1932c:	2b02b29b 	.word	0x2b02b29b
   19330:	4629d173 	.word	0x4629d173
   19334:	f00768e0 	.word	0xf00768e0
   19338:	9002feb9 	.word	0x9002feb9
   1933c:	bf083001 	.word	0xbf083001
   19340:	d04e2516 	.word	0xd04e2516
   19344:	025b6823 	.word	0x025b6823
   19348:	6823d44a 	.word	0x6823d44a
   1934c:	0300f413 	.word	0x0300f413
   19350:	6826d146 	.word	0x6826d146
   19354:	a8046822 	.word	0xa8046822
   19358:	0280f442 	.word	0x0280f442
   1935c:	21046022 	.word	0x21046022
   19360:	3d04f840 	.word	0x3d04f840
   19364:	8018f8d4 	.word	0x8018f8d4
   19368:	fe5ef7f9 	.word	0xfe5ef7f9
   1936c:	d14e2800 	.word	0xd14e2800
   19370:	0203f247 	.word	0x0203f247
   19374:	21082300 	.word	0x21082300
   19378:	ea429d03 	.word	0xea429d03
   1937c:	60ea4207 	.word	0x60ea4207
   19380:	8010f8c5 	.word	0x8010f8c5
   19384:	726b7229 	.word	0x726b7229
   19388:	72eb72ab 	.word	0x72eb72ab
   1938c:	0c08f04f 	.word	0x0c08f04f
   19390:	20102300 	.word	0x20102300
   19394:	68aa2130 	.word	0x68aa2130
   19398:	4462756b 	.word	0x4462756b
   1939c:	75ab60aa 	.word	0x75ab60aa
   193a0:	76ab75eb 	.word	0x76ab75eb
   193a4:	f88576eb 	.word	0xf88576eb
   193a8:	7628c014 	.word	0x7628c014
   193ac:	22047669 	.word	0x22047669
   193b0:	010ceb0d 	.word	0x010ceb0d
   193b4:	f00b6828 	.word	0xf00b6828
   193b8:	f247fb13 	.word	0xf247fb13
   193bc:	46280103 	.word	0x46280103
   193c0:	fe46f7f9 	.word	0xfe46f7f9
   193c4:	bb504680 	.word	0xbb504680
   193c8:	0200f44f 	.word	0x0200f44f
   193cc:	33fff04f 	.word	0x33fff04f
   193d0:	46384611 	.word	0x46384611
   193d4:	ff06f7fe 	.word	0xff06f7fe
   193d8:	b3984605 	.word	0xb3984605
   193dc:	e0006026 	.word	0xe0006026
   193e0:	46282523 	.word	0x46282523
   193e4:	ff3cf7f8 	.word	0xff3cf7f8
   193e8:	35fff04f 	.word	0x35fff04f
   193ec:	b0044628 	.word	0xb0044628
   193f0:	81f0e8bd 	.word	0x81f0e8bd
   193f4:	46429b0a 	.word	0x46429b0a
   193f8:	46319300 	.word	0x46319300
   193fc:	4638462b 	.word	0x4638462b
   19400:	ff84f7fe 	.word	0xff84f7fe
   19404:	46284605 	.word	0x46284605
   19408:	e8bdb004 	.word	0xe8bdb004
   1940c:	9d0381f0 	.word	0x9d0381f0
   19410:	d1bb2d00 	.word	0xd1bb2d00
   19414:	250c6026 	.word	0x250c6026
   19418:	2509e7e3 	.word	0x2509e7e3
   1941c:	6828e7e1 	.word	0x6828e7e1
   19420:	f7f9b108 	.word	0xf7f9b108
   19424:	4628fe33 	.word	0x4628fe33
   19428:	fe28f7f9 	.word	0xfe28f7f9
   1942c:	60262523 	.word	0x60262523
   19430:	e7d66026 	.word	0xe7d66026
   19434:	f7f8202a 	.word	0xf7f8202a
   19438:	f04fff13 	.word	0xf04fff13
   1943c:	e7d535ff 	.word	0xe7d535ff
   19440:	e7ce250e 	.word	0xe7ce250e
   19444:	f7fe4638 	.word	0xf7fe4638
   19448:	b120ff39 	.word	0xb120ff39
   1944c:	b1156845 	.word	0xb1156845
   19450:	8004f8c0 	.word	0x8004f8c0
   19454:	6026e7c2 	.word	0x6026e7c2
   19458:	2009e7c8 	.word	0x2009e7c8
   1945c:	ff00f7f8 	.word	0xff00f7f8
   19460:	35fff04f 	.word	0x35fff04f
   19464:	bf00e7c2 	.word	0xbf00e7c2

00019468 <ip_interface_getopt>:
   19468:	bf86f7fe 	.word	0xbf86f7fe

0001946c <ip_interface_getaddrinfo>:
   1946c:	4ff0e92d 	.word	0x4ff0e92d
   19470:	0c00f04f 	.word	0x0c00f04f
   19474:	4e722401 	.word	0x4e722401
   19478:	a1d0f8df 	.word	0xa1d0f8df
   1947c:	91d0f8df 	.word	0x91d0f8df
   19480:	4607b085 	.word	0x4607b085
   19484:	93014615 	.word	0x93014615
   19488:	c000f8a6 	.word	0xc000f8a6
   1948c:	4000f8ca 	.word	0x4000f8ca
   19490:	4000f8c9 	.word	0x4000f8c9
   19494:	4608b171 	.word	0x4608b171
   19498:	4661220a 	.word	0x4661220a
   1949c:	f932f00b 	.word	0xf932f00b
   194a0:	73fef64f 	.word	0x73fef64f
   194a4:	429a1e42 	.word	0x429a1e42
   194a8:	8083f200 	.word	0x8083f200
   194ac:	ea430203 	.word	0xea430203
   194b0:	80302020 	.word	0x80302020
   194b4:	819cf8df 	.word	0x819cf8df
   194b8:	3000f8d8 	.word	0x3000f8d8
   194bc:	d1742b00 	.word	0xd1742b00
   194c0:	60134a60 	.word	0x60134a60
   194c4:	60134a60 	.word	0x60134a60
   194c8:	d0622f00 	.word	0xd0622f00
   194cc:	f00b4638 	.word	0xf00b4638
   194d0:	4683fa53 	.word	0x4683fa53
   194d4:	69eab125 	.word	0x69eab125
   194d8:	6851b112 	.word	0x6851b112
   194dc:	d06c2966 	.word	0xd06c2966
   194e0:	32fff04f 	.word	0x32fff04f
   194e4:	ae042100 	.word	0xae042100
   194e8:	1d04f846 	.word	0x1d04f846
   194ec:	46594630 	.word	0x46594630
   194f0:	f7f99200 	.word	0xf7f99200
   194f4:	9a00fd99 	.word	0x9a00fd99
   194f8:	d14c2800 	.word	0xd14c2800
   194fc:	010df247 	.word	0x010df247
   19500:	0c08f04f 	.word	0x0c08f04f
   19504:	ea419c03 	.word	0xea419c03
   19508:	60e14102 	.word	0x60e14102
   1950c:	72606122 	.word	0x72606122
   19510:	72e072a0 	.word	0x72e072a0
   19514:	c008f884 	.word	0xc008f884
   19518:	d0762d00 	.word	0xd0762d00
   1951c:	f022686a 	.word	0xf022686a
   19520:	29020108 	.word	0x29020108
   19524:	2a05d05c 	.word	0x2a05d05c
   19528:	68a9d178 	.word	0x68a9d178
   1952c:	f8c92902 	.word	0xf8c92902
   19530:	d0611000 	.word	0xd0611000
   19534:	68ea61a2 	.word	0x68ea61a2
   19538:	68aa6222 	.word	0x68aa6222
   1953c:	682a61e2 	.word	0x682a61e2
   19540:	68a26162 	.word	0x68a26162
   19544:	60a23210 	.word	0x60a23210
   19548:	6820b12f 	.word	0x6820b12f
   1954c:	465ab118 	.word	0x465ab118
   19550:	f00b4639 	.word	0xf00b4639
   19554:	2301fa45 	.word	0x2301fa45
   19558:	010df247 	.word	0x010df247
   1955c:	f8c84620 	.word	0xf8c84620
   19560:	f7f93000 	.word	0xf7f93000
   19564:	2800fd75 	.word	0x2800fd75
   19568:	f04fd156 	.word	0xf04fd156
   1956c:	930333ff 	.word	0x930333ff
   19570:	46204631 	.word	0x46204631
   19574:	fde4f7f8 	.word	0xfde4f7f8
   19578:	3000f8d8 	.word	0x3000f8d8
   1957c:	d0f72b01 	.word	0xd0f72b01
   19580:	68184b31 	.word	0x68184b31
   19584:	d13b2800 	.word	0xd13b2800
   19588:	9a014b2e 	.word	0x9a014b2e
   1958c:	6013681b 	.word	0x6013681b
   19590:	46bbe00c 	.word	0x46bbe00c
   19594:	9c03e79e 	.word	0x9c03e79e
   19598:	d1bd2c00 	.word	0xd1bd2c00
   1959c:	2300200c 	.word	0x2300200c
   195a0:	3000f8c8 	.word	0x3000f8c8
   195a4:	e8bdb005 	.word	0xe8bdb005
   195a8:	20738ff0 	.word	0x20738ff0
   195ac:	e8bdb005 	.word	0xe8bdb005
   195b0:	20168ff0 	.word	0x20168ff0
   195b4:	e8bdb005 	.word	0xe8bdb005
   195b8:	68918ff0 	.word	0x68918ff0
   195bc:	7f00f5b1 	.word	0x7f00f5b1
   195c0:	f240d18e 	.word	0xf240d18e
   195c4:	68d02102 	.word	0x68d02102
   195c8:	d1894288 	.word	0xd1894288
   195cc:	29006991 	.word	0x29006991
   195d0:	6868d086 	.word	0x6868d086
   195d4:	fd6af007 	.word	0xfd6af007
   195d8:	d0811c43 	.word	0xd0811c43
   195dc:	e7814602 	.word	0xe7814602
   195e0:	290268a9 	.word	0x290268a9
   195e4:	1000f8c9 	.word	0x1000f8c9
   195e8:	2a05d006 	.word	0x2a05d006
   195ec:	2a0ad0a2 	.word	0x2a0ad0a2
   195f0:	2201bf14 	.word	0x2201bf14
   195f4:	e79d2202 	.word	0xe79d2202
   195f8:	f8ca2102 	.word	0xf8ca2102
   195fc:	e7f41000 	.word	0xe7f41000
   19600:	68184b11 	.word	0x68184b11
   19604:	d0d12800 	.word	0xd0d12800
   19608:	4629e7c9 	.word	0x4629e7c9
   1960c:	f1042210 	.word	0xf1042210
   19610:	f00b0014 	.word	0xf00b0014
   19614:	e794fa12 	.word	0xe794fa12
   19618:	e7c02023 	.word	0xe7c02023
   1961c:	f7f8202f 	.word	0xf7f8202f
   19620:	68a2fe1f 	.word	0x68a2fe1f
   19624:	60a23210 	.word	0x60a23210
   19628:	f04fb917 	.word	0xf04fb917
   1962c:	e7b630ff 	.word	0xe7b630ff
   19630:	28006820 	.word	0x28006820
   19634:	465ad0f9 	.word	0x465ad0f9
   19638:	f00b4639 	.word	0xf00b4639
   1963c:	e7f4f9d1 	.word	0xe7f4f9d1
   19640:	20025e1a 	.word	0x20025e1a
   19644:	2002060c 	.word	0x2002060c
   19648:	20020604 	.word	0x20020604
   1964c:	200205fc 	.word	0x200205fc
   19650:	20020600 	.word	0x20020600
   19654:	20020608 	.word	0x20020608

00019658 <ip_interface_freeaddrinfo>:
   19658:	4c0bb538 	.word	0x4c0bb538
   1965c:	2b026823 	.word	0x2b026823
   19660:	bd38d000 	.word	0xbd38d000
   19664:	4605b130 	.word	0x4605b130
   19668:	f0066940 	.word	0xf0066940
   1966c:	4628f85b 	.word	0x4628f85b
   19670:	f858f006 	.word	0xf858f006
   19674:	4a052300 	.word	0x4a052300
   19678:	60234905 	.word	0x60234905
   1967c:	68086013 	.word	0x68086013
   19680:	4038e8bd 	.word	0x4038e8bd
   19684:	bd02f7f9 	.word	0xbd02f7f9
   19688:	20020608 	.word	0x20020608
   1968c:	20020604 	.word	0x20020604
   19690:	20020610 	.word	0x20020610

00019694 <rpc_ip_event_handler>:
   19694:	4ff0e92d 	.word	0x4ff0e92d
   19698:	4310f401 	.word	0x4310f401
   1969c:	4f10f5b3 	.word	0x4f10f5b3
   196a0:	b0894605 	.word	0xb0894605
   196a4:	68c0460e 	.word	0x68c0460e
   196a8:	0c04d05e 	.word	0x0c04d05e
   196ac:	f7fe4620 	.word	0xf7fe4620
   196b0:	f248fe05 	.word	0xf248fe05
   196b4:	429e030d 	.word	0x429e030d
   196b8:	46a04607 	.word	0x46a04607
   196bc:	2f00d041 	.word	0x2f00d041
   196c0:	4640d04e 	.word	0x4640d04e
   196c4:	462a4633 	.word	0x462a4633
   196c8:	f7fc4639 	.word	0xf7fc4639
   196cc:	2800fbff 	.word	0x2800fbff
   196d0:	f248d042 	.word	0xf248d042
   196d4:	429e0307 	.word	0x429e0307
   196d8:	f248d961 	.word	0xf248d961
   196dc:	429e030c 	.word	0x429e030c
   196e0:	816bf000 	.word	0x816bf000
   196e4:	8106f240 	.word	0x8106f240
   196e8:	0302f249 	.word	0x0302f249
   196ec:	f000429e 	.word	0xf000429e
   196f0:	f249808c 	.word	0xf249808c
   196f4:	429e0303 	.word	0x429e0303
   196f8:	8180f000 	.word	0x8180f000
   196fc:	0301f249 	.word	0x0301f249
   19700:	d12d429e 	.word	0xd12d429e
   19704:	f414683c 	.word	0xf414683c
   19708:	f0001480 	.word	0xf0001480
   1970c:	68ab81c3 	.word	0x68ab81c3
   19710:	f2002b04 	.word	0xf2002b04
   19714:	240081eb 	.word	0x240081eb
   19718:	68294626 	.word	0x68294626
   1971c:	e9cd686a 	.word	0xe9cd686a
   19720:	e9cd6406 	.word	0xe9cd6406
   19724:	69f81204 	.word	0x69f81204
   19728:	6803a904 	.word	0x6803a904
   1972c:	4798685b 	.word	0x4798685b
   19730:	f0003001 	.word	0xf0003001
   19734:	683b81cc 	.word	0x683b81cc
   19738:	f4432000 	.word	0xf4432000
   1973c:	603b3380 	.word	0x603b3380
   19740:	f8dfe00b 	.word	0xf8dfe00b
   19744:	682f9344 	.word	0x682f9344
   19748:	3000f8d9 	.word	0x3000f8d9
   1974c:	d0152b01 	.word	0xd0152b01
   19750:	4638b117 	.word	0x4638b117
   19754:	fc9af7f9 	.word	0xfc9af7f9
   19758:	b0092000 	.word	0xb0092000
   1975c:	8ff0e8bd 	.word	0x8ff0e8bd
   19760:	28006828 	.word	0x28006828
   19764:	e7f7d1f6 	.word	0xe7f7d1f6
   19768:	fd5ef7fe 	.word	0xfd5ef7fe
   1976c:	f7fe4680 	.word	0xf7fe4680
   19770:	4607fda5 	.word	0x4607fda5
   19774:	2f004644 	.word	0x2f004644
   19778:	e7f1d1a3 	.word	0xe7f1d1a3
   1977c:	2b00696b 	.word	0x2b00696b
   19780:	2b10d048 	.word	0x2b10d048
   19784:	4ababf96 	.word	0x4ababf96
   19788:	f852212d 	.word	0xf852212d
   1978c:	23021023 	.word	0x23021023
   19790:	60114ab8 	.word	0x60114ab8
   19794:	3000f8c9 	.word	0x3000f8c9
   19798:	d1da2f00 	.word	0xd1da2f00
   1979c:	f248e7dc 	.word	0xf248e7dc
   197a0:	429e0306 	.word	0x429e0306
   197a4:	80e6f080 	.word	0x80e6f080
   197a8:	0302f248 	.word	0x0302f248
   197ac:	f000429e 	.word	0xf000429e
   197b0:	d91880c8 	.word	0xd91880c8
   197b4:	0303f248 	.word	0x0303f248
   197b8:	f000429e 	.word	0xf000429e
   197bc:	f2488112 	.word	0xf2488112
   197c0:	429e0305 	.word	0x429e0305
   197c4:	683bd1cc 	.word	0x683bd1cc
   197c8:	2b03b29b 	.word	0x2b03b29b
   197cc:	696bd1c4 	.word	0x696bd1c4
   197d0:	f0002b00 	.word	0xf0002b00
   197d4:	2b10817e 	.word	0x2b10817e
   197d8:	813bf200 	.word	0x813bf200
   197dc:	f8524aa4 	.word	0xf8524aa4
   197e0:	607b3023 	.word	0x607b3023
   197e4:	f248e7b8 	.word	0xf248e7b8
   197e8:	429e0301 	.word	0x429e0301
   197ec:	683bd1b8 	.word	0x683bd1b8
   197f0:	d1b12b01 	.word	0xd1b12b01
   197f4:	28006968 	.word	0x28006968
   197f8:	8173f000 	.word	0x8173f000
   197fc:	f2002810 	.word	0xf2002810
   19800:	4b9b8128 	.word	0x4b9b8128
   19804:	3020f853 	.word	0x3020f853
   19808:	683be7eb 	.word	0x683be7eb
   1980c:	2b07b29b 	.word	0x2b07b29b
   19810:	e790d1a2 	.word	0xe790d1a2
   19814:	601f4b98 	.word	0x601f4b98
   19818:	016369ac 	.word	0x016369ac
   1981c:	93034618 	.word	0x93034618
   19820:	ff62f005 	.word	0xff62f005
   19824:	28009002 	.word	0x28009002
   19828:	8103f000 	.word	0x8103f000
   1982c:	192800e5 	.word	0x192800e5
   19830:	f0050080 	.word	0xf0050080
   19834:	2800ff59 	.word	0x2800ff59
   19838:	810df000 	.word	0x810df000
   1983c:	d0782c00 	.word	0xd0782c00
   19840:	0210f105 	.word	0x0210f105
   19844:	93011883 	.word	0x93011883
   19848:	24049b02 	.word	0x24049b02
   1984c:	a23cf8df 	.word	0xa23cf8df
   19850:	b23cf8df 	.word	0xb23cf8df
   19854:	0810f100 	.word	0x0810f100
   19858:	0620f103 	.word	0x0620f103
   1985c:	220ae01d 	.word	0x220ae01d
   19860:	2c0cf848 	.word	0x2c0cf848
   19864:	0224f04f 	.word	0x0224f04f
   19868:	f8084640 	.word	0xf8084640
   1986c:	f8282c10 	.word	0xf8282c10
   19870:	f8563c08 	.word	0xf8563c08
   19874:	f00b2c10 	.word	0xf00b2c10
   19878:	f856f8b3 	.word	0xf856f8b3
   1987c:	f1083c10 	.word	0xf1083c10
   19880:	441c0808 	.word	0x441c0808
   19884:	f846193b 	.word	0xf846193b
   19888:	9b013c08 	.word	0x9b013c08
   1988c:	6c04f846 	.word	0x6c04f846
   19890:	442c4598 	.word	0x442c4598
   19894:	0620f106 	.word	0x0620f106
   19898:	593bd045 	.word	0x593bd045
   1989c:	f846193a 	.word	0xf846193a
   198a0:	68533c20 	.word	0x68533c20
   198a4:	1000f8da 	.word	0x1000f8da
   198a8:	bf142b02 	.word	0xbf142b02
   198ac:	200a2002 	.word	0x200a2002
   198b0:	3000f8db 	.word	0x3000f8db
   198b4:	0107e946 	.word	0x0107e946
   198b8:	3c14f846 	.word	0x3c14f846
   198bc:	f1a88a10 	.word	0xf1a88a10
   198c0:	f8460310 	.word	0xf8460310
   198c4:	8a550c10 	.word	0x8a550c10
   198c8:	3c0cf846 	.word	0x3c0cf846
   198cc:	34144b6b 	.word	0x34144b6b
   198d0:	eb072804 	.word	0xeb072804
   198d4:	881b0104 	.word	0x881b0104
   198d8:	2210d1c1 	.word	0x2210d1c1
   198dc:	f8282002 	.word	0xf8282002
   198e0:	f8483c08 	.word	0xf8483c08
   198e4:	f8080c0c 	.word	0xf8080c0c
   198e8:	f8562c10 	.word	0xf8562c10
   198ec:	f1a82c10 	.word	0xf1a82c10
   198f0:	e7c00004 	.word	0xe7c00004
   198f4:	0308f248 	.word	0x0308f248
   198f8:	d04e429e 	.word	0xd04e429e
   198fc:	0309f248 	.word	0x0309f248
   19900:	f47f429e 	.word	0xf47f429e
   19904:	683baf2d 	.word	0x683baf2d
   19908:	2b0db29b 	.word	0x2b0db29b
   1990c:	af24f47f 	.word	0xaf24f47f
   19910:	28006968 	.word	0x28006968
   19914:	af72f47f 	.word	0xaf72f47f
   19918:	0c1b683b 	.word	0x0c1b683b
   1991c:	f043041b 	.word	0xf043041b
   19920:	603b030e 	.word	0x603b030e
   19924:	2200e719 	.word	0x2200e719
   19928:	1302e9dd 	.word	0x1302e9dd
   1992c:	f843440b 	.word	0xf843440b
   19930:	22022c04 	.word	0x22022c04
   19934:	f8c94b52 	.word	0xf8c94b52
   19938:	9a022000 	.word	0x9a022000
   1993c:	601a2000 	.word	0x601a2000
   19940:	683be70b 	.word	0x683be70b
   19944:	f57f0099 	.word	0xf57f0099
   19948:	683baf07 	.word	0x683baf07
   1994c:	5300f023 	.word	0x5300f023
   19950:	6968603b 	.word	0x6968603b
   19954:	f0002800 	.word	0xf0002800
   19958:	281080a2 	.word	0x281080a2
   1995c:	232dbf8e 	.word	0x232dbf8e
   19960:	f8534b43 	.word	0xf8534b43
   19964:	20003020 	.word	0x20003020
   19968:	683b607b 	.word	0x683b607b
   1996c:	2380f443 	.word	0x2380f443
   19970:	e6f2603b 	.word	0xe6f2603b
   19974:	029a683b 	.word	0x029a683b
   19978:	aeeef57f 	.word	0xaeeef57f
   1997c:	2b00696b 	.word	0x2b00696b
   19980:	809cf000 	.word	0x809cf000
   19984:	f47f2b6b 	.word	0xf47f2b6b
   19988:	693baf26 	.word	0x693baf26
   1998c:	f0002b01 	.word	0xf0002b01
   19990:	230c80b1 	.word	0x230c80b1
   19994:	607b2000 	.word	0x607b2000
   19998:	683be6df 	.word	0x683be6df
   1999c:	2b06b29b 	.word	0x2b06b29b
   199a0:	aedaf47f 	.word	0xaedaf47f
   199a4:	28006968 	.word	0x28006968
   199a8:	af28f47f 	.word	0xaf28f47f
   199ac:	0c1b683b 	.word	0x0c1b683b
   199b0:	f043041b 	.word	0xf043041b
   199b4:	603b0307 	.word	0x603b0307
   199b8:	683be6cf 	.word	0x683be6cf
   199bc:	2b08b29b 	.word	0x2b08b29b
   199c0:	aecaf47f 	.word	0xaecaf47f
   199c4:	2b00696b 	.word	0x2b00696b
   199c8:	af05f47f 	.word	0xaf05f47f
   199cc:	20014b2d 	.word	0x20014b2d
   199d0:	5024f843 	.word	0x5024f843
   199d4:	0c1b683b 	.word	0x0c1b683b
   199d8:	f043041b 	.word	0xf043041b
   199dc:	603b0309 	.word	0x603b0309
   199e0:	683be6bb 	.word	0x683be6bb
   199e4:	f57f025b 	.word	0xf57f025b
   199e8:	6968aeb7 	.word	0x6968aeb7
   199ec:	f47f2800 	.word	0xf47f2800
   199f0:	683baf05 	.word	0x683baf05
   199f4:	0300f443 	.word	0x0300f443
   199f8:	e6ae603b 	.word	0xe6ae603b
   199fc:	f443683b 	.word	0xf443683b
   19a00:	603b2300 	.word	0x603b2300
   19a04:	f423683b 	.word	0xf423683b
   19a08:	603b1300 	.word	0x603b1300
   19a0c:	f423683b 	.word	0xf423683b
   19a10:	603b3300 	.word	0x603b3300
   19a14:	2b6c692b 	.word	0x2b6c692b
   19a18:	2b10d021 	.word	0x2b10d021
   19a1c:	232dbf8c 	.word	0x232dbf8c
   19a20:	f04f4a13 	.word	0xf04f4a13
   19a24:	bf980000 	.word	0xbf980000
   19a28:	3023f852 	.word	0x3023f852
   19a2c:	60bb607b 	.word	0x60bb607b
   19a30:	f005e693 	.word	0xf005e693
   19a34:	200cfe77 	.word	0x200cfe77
   19a38:	490e2302 	.word	0x490e2302
   19a3c:	60084a10 	.word	0x60084a10
   19a40:	9902682f 	.word	0x9902682f
   19a44:	f8c96011 	.word	0xf8c96011
   19a48:	2f003000 	.word	0x2f003000
   19a4c:	ae81f47f 	.word	0xae81f47f
   19a50:	232de682 	.word	0x232de682
   19a54:	220ce6c5 	.word	0x220ce6c5
   19a58:	601a4b06 	.word	0x601a4b06
   19a5c:	2239e769 	.word	0x2239e769
   19a60:	2000683b 	.word	0x2000683b
   19a64:	4380f043 	.word	0x4380f043
   19a68:	607a603b 	.word	0x607a603b
   19a6c:	e67460ba 	.word	0xe67460ba
   19a70:	00026bdc 	.word	0x00026bdc
   19a74:	20020604 	.word	0x20020604
   19a78:	20020610 	.word	0x20020610
   19a7c:	20025e1a 	.word	0x20025e1a
   19a80:	2002060c 	.word	0x2002060c
   19a84:	20020614 	.word	0x20020614
   19a88:	20020608 	.word	0x20020608
   19a8c:	20020600 	.word	0x20020600
   19a90:	200205fc 	.word	0x200205fc
   19a94:	f7f96828 	.word	0xf7f96828
   19a98:	4620faf9 	.word	0x4620faf9
   19a9c:	683be65d 	.word	0x683be65d
   19aa0:	3300f443 	.word	0x3300f443
   19aa4:	683b603b 	.word	0x683b603b
   19aa8:	1380f443 	.word	0x1380f443
   19aac:	683b603b 	.word	0x683b603b
   19ab0:	041b0c1b 	.word	0x041b0c1b
   19ab4:	0305f043 	.word	0x0305f043
   19ab8:	e64e603b 	.word	0xe64e603b
   19abc:	4a28683b 	.word	0x4a28683b
   19ac0:	3300f443 	.word	0x3300f443
   19ac4:	2001603b 	.word	0x2001603b
   19ac8:	5024f842 	.word	0x5024f842
   19acc:	2002e645 	.word	0x2002e645
   19ad0:	683be643 	.word	0x683be643
   19ad4:	0c1b2000 	.word	0x0c1b2000
   19ad8:	f043041b 	.word	0xf043041b
   19adc:	603b0304 	.word	0x603b0304
   19ae0:	2302e63b 	.word	0x2302e63b
   19ae4:	69ab603b 	.word	0x69ab603b
   19ae8:	e63661bb 	.word	0xe63661bb
   19aec:	b94c8a6c 	.word	0xb94c8a6c
   19af0:	e6124626 	.word	0xe6124626
   19af4:	683b220c 	.word	0x683b220c
   19af8:	f0432000 	.word	0xf0432000
   19afc:	603b6300 	.word	0x603b6300
   19b00:	e62a607a 	.word	0xe62a607a
   19b04:	f0052024 	.word	0xf0052024
   19b08:	4606fdef 	.word	0x4606fdef
   19b0c:	8a6ab158 	.word	0x8a6ab158
   19b10:	d0182a10 	.word	0xd0182a10
   19b14:	d00a2a04 	.word	0xd00a2a04
   19b18:	f7f96828 	.word	0xf7f96828
   19b1c:	4630fab7 	.word	0x4630fab7
   19b20:	fe00f005 	.word	0xfe00f005
   19b24:	6828e618 	.word	0x6828e618
   19b28:	fab0f7f9 	.word	0xfab0f7f9
   19b2c:	2302e614 	.word	0x2302e614
   19b30:	60432410 	.word	0x60432410
   19b34:	8a2b7004 	.word	0x8a2b7004
   19b38:	0114f105 	.word	0x0114f105
   19b3c:	300c8103 	.word	0x300c8103
   19b40:	ff4ef00a 	.word	0xff4ef00a
   19b44:	230ae5e9 	.word	0x230ae5e9
   19b48:	60432424 	.word	0x60432424
   19b4c:	8a2b7004 	.word	0x8a2b7004
   19b50:	0114f105 	.word	0x0114f105
   19b54:	30108103 	.word	0x30108103
   19b58:	ff42f00a 	.word	0xff42f00a
   19b5c:	bf00e5dd 	.word	0xbf00e5dd
   19b60:	20020614 	.word	0x20020614

00019b64 <rpc_logobj_client_evt_handler>:
   19b64:	f850b120 	.word	0xf850b120
   19b68:	0c091b08 	.word	0x0c091b08
   19b6c:	b886f7fa 	.word	0xb886f7fa
   19b70:	bf004770 	.word	0xbf004770

00019b74 <rpc_logobj_client_init>:
   19b74:	f0044801 	.word	0xf0044801
   19b78:	bf00bcf1 	.word	0xbf00bcf1
   19b7c:	00026c20 	.word	0x00026c20

00019b80 <rpc_logobj_client_request_alloc>:
   19b80:	b5102300 	.word	0xb5102300
   19b84:	9301b082 	.word	0x9301b082
   19b88:	b170b961 	.word	0xb170b961
   19b8c:	aa014604 	.word	0xaa014604
   19b90:	f0042009 	.word	0xf0042009
   19b94:	b918ff1b 	.word	0xb918ff1b
   19b98:	b10b9b01 	.word	0xb10b9b01
   19b9c:	60233308 	.word	0x60233308
   19ba0:	bd10b002 	.word	0xbd10b002
   19ba4:	b002200f 	.word	0xb002200f
   19ba8:	200ebd10 	.word	0x200ebd10
   19bac:	bd10b002 	.word	0xbd10b002

00019bb0 <rpc_logobj_client_request_send>:
   19bb0:	4370f401 	.word	0x4370f401
   19bb4:	4fe0f5b3 	.word	0x4fe0f5b3
   19bb8:	b160d10b 	.word	0xb160d10b
   19bbc:	f8304603 	.word	0xf8304603
   19bc0:	20092c08 	.word	0x20092c08
   19bc4:	4101ea42 	.word	0x4101ea42
   19bc8:	1d08f843 	.word	0x1d08f843
   19bcc:	f0044619 	.word	0xf0044619
   19bd0:	200fbee5 	.word	0x200fbee5
   19bd4:	200e4770 	.word	0x200e4770
   19bd8:	bf004770 	.word	0xbf004770

00019bdc <rpc_logobj_client_message_free>:
   19bdc:	f1a0b120 	.word	0xf1a0b120
   19be0:	20090108 	.word	0x20090108
   19be4:	bf24f004 	.word	0xbf24f004
   19be8:	4770200e 	.word	0x4770200e

00019bec <rpc_logobj_client_data_free>:
   19bec:	4601b118 	.word	0x4601b118
   19bf0:	f0052009 	.word	0xf0052009
   19bf4:	200eb82f 	.word	0x200eb82f
   19bf8:	bf004770 	.word	0xbf004770

00019bfc <datagram_handler_init>:
   19bfc:	4604b510 	.word	0x4604b510
   19c00:	f005200c 	.word	0xf005200c
   19c04:	60e0fd71 	.word	0x60e0fd71
   19c08:	e8bdb118 	.word	0xe8bdb118
   19c0c:	f0004010 	.word	0xf0004010
   19c10:	2004b8bd 	.word	0x2004b8bd
   19c14:	bf00bd10 	.word	0xbf00bd10

00019c18 <datagram_handler_put>:
   19c18:	4606b570 	.word	0x4606b570
   19c1c:	460d2014 	.word	0x460d2014
   19c20:	fd62f005 	.word	0xfd62f005
   19c24:	682bb178 	.word	0x682bb178
   19c28:	60434604 	.word	0x60434604
   19c2c:	4601686b 	.word	0x4601686b
   19c30:	68eb6083 	.word	0x68eb6083
   19c34:	68ab60c3 	.word	0x68ab60c3
   19c38:	68f06103 	.word	0x68f06103
   19c3c:	f8b0f000 	.word	0xf8b0f000
   19c40:	6868b920 	.word	0x6868b920
   19c44:	f04fbd70 	.word	0xf04fbd70
   19c48:	bd7030ff 	.word	0xbd7030ff
   19c4c:	f0054620 	.word	0xf0054620
   19c50:	f04ffd69 	.word	0xf04ffd69
   19c54:	bd7030ff 	.word	0xbd7030ff

00019c58 <datagram_handler_get>:
   19c58:	4606b5f0 	.word	0x4606b5f0
   19c5c:	68c0b085 	.word	0x68c0b085
   19c60:	4617460c 	.word	0x4617460c
   19c64:	f8bcf000 	.word	0xf8bcf000
   19c68:	d0372800 	.word	0xd0372800
   19c6c:	46056882 	.word	0x46056882
   19c70:	0300e9d4 	.word	0x0300e9d4
   19c74:	bf28429a 	.word	0xbf28429a
   19c78:	6062461a 	.word	0x6062461a
   19c7c:	6869b110 	.word	0x6869b110
   19c80:	feaef00a 	.word	0xfeaef00a
   19c84:	b11868a0 	.word	0xb11868a0
   19c88:	b10b692b 	.word	0xb10b692b
   19c8c:	b9e268ea 	.word	0xb9e268ea
   19c90:	60e32300 	.word	0x60e32300
   19c94:	d502073b 	.word	0xd502073b
   19c98:	b0056860 	.word	0xb0056860
   19c9c:	68f0bdf0 	.word	0x68f0bdf0
   19ca0:	f894f000 	.word	0xf894f000
   19ca4:	28004605 	.word	0x28004605
   19ca8:	e9d0d0f6 	.word	0xe9d0d0f6
   19cac:	69023101 	.word	0x69023101
   19cb0:	68c39300 	.word	0x68c39300
   19cb4:	1201e9cd 	.word	0x1201e9cd
   19cb8:	46689303 	.word	0x46689303
   19cbc:	3101e9d6 	.word	0x3101e9d6
   19cc0:	46284798 	.word	0x46284798
   19cc4:	fd2ef005 	.word	0xfd2ef005
   19cc8:	68e3e7e6 	.word	0x68e3e7e6
   19ccc:	bf28429a 	.word	0xbf28429a
   19cd0:	60e2461a 	.word	0x60e2461a
   19cd4:	f00a6929 	.word	0xf00a6929
   19cd8:	e7dbfe83 	.word	0xe7dbfe83
   19cdc:	30fff04f 	.word	0x30fff04f
   19ce0:	bf00e7db 	.word	0xbf00e7db

00019ce4 <datagram_handler_available>:
   19ce4:	68c0b508 	.word	0x68c0b508
   19ce8:	f87af000 	.word	0xf87af000
   19cec:	6880b108 	.word	0x6880b108
   19cf0:	f04fbd08 	.word	0xf04fbd08
   19cf4:	bd0830ff 	.word	0xbd0830ff

00019cf8 <datagram_handler_flush>:
   19cf8:	4605b530 	.word	0x4605b530
   19cfc:	b08568c0 	.word	0xb08568c0
   19d00:	e01ab9a8 	.word	0xe01ab9a8
   19d04:	f00068e8 	.word	0xf00068e8
   19d08:	4604f861 	.word	0x4604f861
   19d0c:	e9d0b170 	.word	0xe9d0b170
   19d10:	e9d40101 	.word	0xe9d40101
   19d14:	e9cd3203 	.word	0xe9cd3203
   19d18:	e9cd0100 	.word	0xe9cd0100
   19d1c:	e9d52302 	.word	0xe9d52302
   19d20:	46683101 	.word	0x46683101
   19d24:	46204798 	.word	0x46204798
   19d28:	fcfcf005 	.word	0xfcfcf005
   19d2c:	f00068e8 	.word	0xf00068e8
   19d30:	2800f85d 	.word	0x2800f85d
   19d34:	b005d1e6 	.word	0xb005d1e6
   19d38:	2008bd30 	.word	0x2008bd30
   19d3c:	bd30b005 	.word	0xbd30b005

00019d40 <datagram_handler_free>:
   19d40:	4605b530 	.word	0x4605b530
   19d44:	b08568c0 	.word	0xb08568c0
   19d48:	e01cb9a0 	.word	0xe01cb9a0
   19d4c:	f83ef000 	.word	0xf83ef000
   19d50:	b1704604 	.word	0xb1704604
   19d54:	0101e9d0 	.word	0x0101e9d0
   19d58:	3203e9d4 	.word	0x3203e9d4
   19d5c:	0100e9cd 	.word	0x0100e9cd
   19d60:	2302e9cd 	.word	0x2302e9cd
   19d64:	3101e9d5 	.word	0x3101e9d5
   19d68:	47984668 	.word	0x47984668
   19d6c:	f0054620 	.word	0xf0054620
   19d70:	68e8fcd9 	.word	0x68e8fcd9
   19d74:	f83af000 	.word	0xf83af000
   19d78:	68e84604 	.word	0x68e84604
   19d7c:	d1e52c00 	.word	0xd1e52c00
   19d80:	fcd0f005 	.word	0xfcd0f005
   19d84:	b00560ec 	.word	0xb00560ec
   19d88:	bf00bd30 	.word	0xbf00bd30

00019d8c <linked_list_init>:
   19d8c:	2300b128 	.word	0x2300b128
   19d90:	e9c06003 	.word	0xe9c06003
   19d94:	46183301 	.word	0x46183301
   19d98:	20074770 	.word	0x20074770
   19d9c:	bf004770 	.word	0xbf004770

00019da0 <linked_list_push>:
   19da0:	46036802 	.word	0x46036802
   19da4:	d00e3201 	.word	0xd00e3201
   19da8:	600a2200 	.word	0x600a2200
   19dac:	b13a6802 	.word	0xb13a6802
   19db0:	60116882 	.word	0x60116882
   19db4:	681a6081 	.word	0x681a6081
   19db8:	32012000 	.word	0x32012000
   19dbc:	4770601a 	.word	0x4770601a
   19dc0:	1101e9c0 	.word	0x1101e9c0
   19dc4:	2004e7f7 	.word	0x2004e7f7
   19dc8:	bf004770 	.word	0xbf004770

00019dcc <linked_list_pop>:
   19dcc:	68004603 	.word	0x68004603
   19dd0:	6858b128 	.word	0x6858b128
   19dd4:	6801681a 	.word	0x6801681a
   19dd8:	60593a01 	.word	0x60593a01
   19ddc:	4770601a 	.word	0x4770601a

00019de0 <linked_list_peek>:
   19de0:	b10b6803 	.word	0xb10b6803
   19de4:	47706840 	.word	0x47706840
   19de8:	47704618 	.word	0x47704618

00019dec <linked_list_size_get>:
   19dec:	47706800 	.word	0x47706800

00019df0 <linked_list_get_next>:
   19df0:	47706800 	.word	0x47706800

00019df4 <rpc_transport_ipc_tx_init>:
   19df4:	f0002800 	.word	0xf0002800
   19df8:	290080b8 	.word	0x290080b8
   19dfc:	80b5f000 	.word	0x80b5f000
   19e00:	f0002a00 	.word	0xf0002a00
   19e04:	e92d80b2 	.word	0xe92d80b2
   19e08:	6a044ff0 	.word	0x6a044ff0
   19e0c:	2c00b085 	.word	0x2c00b085
   19e10:	80a6f000 	.word	0x80a6f000
   19e14:	28006a40 	.word	0x28006a40
   19e18:	80a2f000 	.word	0x80a2f000
   19e1c:	4587f642 	.word	0x4587f642
   19e20:	0a00f04f 	.word	0x0a00f04f
   19e24:	42a84e55 	.word	0x42a84e55
   19e28:	a000f886 	.word	0xa000f886
   19e2c:	80a0f240 	.word	0x80a0f240
   19e30:	f8df2708 	.word	0xf8df2708
   19e34:	46209180 	.word	0x46209180
   19e38:	460d4616 	.word	0x460d4616
   19e3c:	46512244 	.word	0x46512244
   19e40:	4000f8c9 	.word	0x4000f8c9
   19e44:	fdf9f00a 	.word	0xfdf9f00a
   19e48:	2000f8d9 	.word	0x2000f8d9
   19e4c:	0344f104 	.word	0x0344f104
   19e50:	8164f8df 	.word	0x8164f8df
   19e54:	a001f882 	.word	0xa001f882
   19e58:	a002f882 	.word	0xa002f882
   19e5c:	a003f882 	.word	0xa003f882
   19e60:	46187017 	.word	0x46187017
   19e64:	46512244 	.word	0x46512244
   19e68:	3000f8c8 	.word	0x3000f8c8
   19e6c:	fde5f00a 	.word	0xfde5f00a
   19e70:	2000f8d8 	.word	0x2000f8d8
   19e74:	0388f104 	.word	0x0388f104
   19e78:	b140f8df 	.word	0xb140f8df
   19e7c:	f8827017 	.word	0xf8827017
   19e80:	f882a001 	.word	0xf882a001
   19e84:	f882a002 	.word	0xf882a002
   19e88:	4618a003 	.word	0x4618a003
   19e8c:	7200f44f 	.word	0x7200f44f
   19e90:	f8cb4651 	.word	0xf8cb4651
   19e94:	f00a3000 	.word	0xf00a3000
   19e98:	4b39fdd0 	.word	0x4b39fdd0
   19e9c:	7c22f504 	.word	0x7c22f504
   19ea0:	c000f8c3 	.word	0xc000f8c3
   19ea4:	46604651 	.word	0x46604651
   19ea8:	7200f44f 	.word	0x7200f44f
   19eac:	fdc5f00a 	.word	0xfdc5f00a
   19eb0:	5c20f44f 	.word	0x5c20f44f
   19eb4:	f04f2106 	.word	0xf04f2106
   19eb8:	f44f0e01 	.word	0xf44f0e01
   19ebc:	f44f3001 	.word	0xf44f3001
   19ec0:	4b303288 	.word	0x4b303288
   19ec4:	6491f504 	.word	0x6491f504
   19ec8:	4c2f605c 	.word	0x4c2f605c
   19ecc:	c008f8c3 	.word	0xc008f8c3
   19ed0:	f8a38199 	.word	0xf8a38199
   19ed4:	4619e000 	.word	0x4619e000
   19ed8:	4b2c611c 	.word	0x4b2c611c
   19edc:	c0e0f8df 	.word	0xc0e0f8df
   19ee0:	482b6120 	.word	0x482b6120
   19ee4:	f5036063 	.word	0xf5036063
   19ee8:	60a073c0 	.word	0x60a073c0
   19eec:	c000f8c4 	.word	0xc000f8c4
   19ef0:	60e34828 	.word	0x60e34828
   19ef4:	f0056162 	.word	0xf0056162
   19ef8:	2800fadd 	.word	0x2800fadd
   19efc:	f04fd132 	.word	0xf04fd132
   19f00:	24200c02 	.word	0x24200c02
   19f04:	1000f8d9 	.word	0x1000f8d9
   19f08:	2000f8db 	.word	0x2000f8db
   19f0c:	4b1c6029 	.word	0x4b1c6029
   19f10:	1000f8d8 	.word	0x1000f8d8
   19f14:	e0acf8df 	.word	0xe0acf8df
   19f18:	60314d1f 	.word	0x60314d1f
   19f1c:	2000f8ce 	.word	0x2000f8ce
   19f20:	491e681b 	.word	0x491e681b
   19f24:	7200f502 	.word	0x7200f502
   19f28:	4e1d602a 	.word	0x4e1d602a
   19f2c:	4d1e4a1d 	.word	0x4d1e4a1d
   19f30:	f503600b 	.word	0xf503600b
   19f34:	491d7300 	.word	0x491d7300
   19f38:	80286033 	.word	0x80286033
   19f3c:	c514f8c2 	.word	0xc514f8c2
   19f40:	4b1b6809 	.word	0x4b1b6809
   19f44:	99039103 	.word	0x99039103
   19f48:	751cf8c2 	.word	0x751cf8c2
   19f4c:	443b6819 	.word	0x443b6819
   19f50:	99029102 	.word	0x99029102
   19f54:	4524f8c2 	.word	0x4524f8c2
   19f58:	9301681b 	.word	0x9301681b
   19f5c:	e0019b01 	.word	0xe0019b01
   19f60:	0007f24c 	.word	0x0007f24c
   19f64:	e8bdb005 	.word	0xe8bdb005
   19f68:	f24c8ff0 	.word	0xf24c8ff0
   19f6c:	4770000e 	.word	0x4770000e
   19f70:	0004f24c 	.word	0x0004f24c
   19f74:	e8bdb005 	.word	0xe8bdb005
   19f78:	bf008ff0 	.word	0xbf008ff0
   19f7c:	20027407 	.word	0x20027407
   19f80:	20020664 	.word	0x20020664
   19f84:	20020650 	.word	0x20020650
   19f88:	20020674 	.word	0x20020674
   19f8c:	00040080 	.word	0x00040080
   19f90:	00040100 	.word	0x00040100
   19f94:	2002063c 	.word	0x2002063c
   19f98:	20020648 	.word	0x20020648
   19f9c:	20020644 	.word	0x20020644
   19fa0:	20020640 	.word	0x20020640
   19fa4:	4002a000 	.word	0x4002a000
   19fa8:	20025e1c 	.word	0x20025e1c
   19fac:	4002a514 	.word	0x4002a514
   19fb0:	4002a51c 	.word	0x4002a51c
   19fb4:	20020670 	.word	0x20020670
   19fb8:	20020668 	.word	0x20020668
   19fbc:	2002066c 	.word	0x2002066c
   19fc0:	00080040 	.word	0x00080040
   19fc4:	2002064c 	.word	0x2002064c

00019fc8 <rpc_transport_ipc_tx_send>:
   19fc8:	d05f2800 	.word	0xd05f2800
   19fcc:	4b33b470 	.word	0x4b33b470
   19fd0:	681ab083 	.word	0x681ab083
   19fd4:	42824b32 	.word	0x42824b32
   19fd8:	681bd81e 	.word	0x681bd81e
   19fdc:	42834931 	.word	0x42834931
   19fe0:	d8036809 	.word	0xd8036809
   19fe4:	68244c30 	.word	0x68244c30
   19fe8:	d8474284 	.word	0xd8474284
   19fec:	d90e4281 	.word	0xd90e4281
   19ff0:	781b4b2e 	.word	0x781b4b2e
   19ff4:	d14c2b00 	.word	0xd14c2b00
   19ff8:	492d1a83 	.word	0x492d1a83
   19ffc:	069b099e 	.word	0x069b099e
   1a000:	4c2c680a 	.word	0x4c2c680a
   1a004:	0103f04f 	.word	0x0103f04f
   1a008:	0502f04f 	.word	0x0502f04f
   1a00c:	f24cd014 	.word	0xf24cd014
   1a010:	b0030010 	.word	0xb0030010
   1a014:	4770bc70 	.word	0x4770bc70
   1a018:	4298681b 	.word	0x4298681b
   1a01c:	4a22d3f7 	.word	0x4a22d3f7
   1a020:	42906812 	.word	0x42906812
   1a024:	2101d2f3 	.word	0x2101d2f3
   1a028:	4a231ac3 	.word	0x4a231ac3
   1a02c:	069b099e 	.word	0x069b099e
   1a030:	6812460d 	.word	0x6812460d
   1a034:	d1ea4c21 	.word	0xd1ea4c21
   1a038:	b2db6843 	.word	0xb2db6843
   1a03c:	d120429d 	.word	0xd120429d
   1a040:	eb022020 	.word	0xeb022020
   1a044:	4d1e02c6 	.word	0x4d1e02c6
   1a048:	882e6853 	.word	0x882e6853
   1a04c:	ea43b29b 	.word	0xea43b29b
   1a050:	f0234306 	.word	0xf0234306
   1a054:	f04303ff 	.word	0xf04303ff
   1a058:	60530301 	.word	0x60530301
   1a05c:	3801bf00 	.word	0x3801bf00
   1a060:	2201d1fc 	.word	0x2201d1fc
   1a064:	f8434b17 	.word	0xf8434b17
   1a068:	68222021 	.word	0x68222021
   1a06c:	9201882b 	.word	0x9201882b
   1a070:	33019a01 	.word	0x33019a01
   1a074:	b003802b 	.word	0xb003802b
   1a078:	4770bc70 	.word	0x4770bc70
   1a07c:	d9d24281 	.word	0xd9d24281
   1a080:	f24ce7b6 	.word	0xf24ce7b6
   1a084:	b0030007 	.word	0xb0030007
   1a088:	4770bc70 	.word	0x4770bc70
   1a08c:	000ef24c 	.word	0x000ef24c
   1a090:	f24c4770 	.word	0xf24c4770
   1a094:	b003000f 	.word	0xb003000f
   1a098:	4770bc70 	.word	0x4770bc70
   1a09c:	2002064c 	.word	0x2002064c
   1a0a0:	20020644 	.word	0x20020644
   1a0a4:	20020648 	.word	0x20020648
   1a0a8:	20020640 	.word	0x20020640
   1a0ac:	20027407 	.word	0x20027407
   1a0b0:	20020670 	.word	0x20020670
   1a0b4:	4002a00c 	.word	0x4002a00c
   1a0b8:	20020668 	.word	0x20020668
   1a0bc:	4002a004 	.word	0x4002a004
   1a0c0:	20025e1c 	.word	0x20025e1c
   1a0c4:	4002a000 	.word	0x4002a000

0001a0c8 <rpc_transport_ipc_tx_rpc_data_alloc>:
   1a0c8:	781b4b18 	.word	0x781b4b18
   1a0cc:	b4f0bb63 	.word	0xb4f0bb63
   1a0d0:	f0034a17 	.word	0xf0034a17
   1a0d4:	681400ff 	.word	0x681400ff
   1a0d8:	68254b16 	.word	0x68254b16
   1a0dc:	b1a5681e 	.word	0xb1a5681e
   1a0e0:	00c14607 	.word	0x00c14607
   1a0e4:	685a1863 	.word	0x685a1863
   1a0e8:	2a03b2d2 	.word	0x2a03b2d2
   1a0ec:	609fd104 	.word	0x609fd104
   1a0f0:	f022685a 	.word	0xf022685a
   1a0f4:	605a02ff 	.word	0x605a02ff
   1a0f8:	f012685a 	.word	0xf012685a
   1a0fc:	d1010fff 	.word	0xd1010fff
   1a100:	b12b689b 	.word	0xb12b689b
   1a104:	42a83001 	.word	0x42a83001
   1a108:	2000d1eb 	.word	0x2000d1eb
   1a10c:	4770bcf0 	.word	0x4770bcf0
   1a110:	1080eb06 	.word	0x1080eb06
   1a114:	60884421 	.word	0x60884421
   1a118:	f0236843 	.word	0xf0236843
   1a11c:	f04303ff 	.word	0xf04303ff
   1a120:	60430302 	.word	0x60430302
   1a124:	4770bcf0 	.word	0x4770bcf0
   1a128:	47702000 	.word	0x47702000
   1a12c:	20027407 	.word	0x20027407
   1a130:	20020670 	.word	0x20020670
   1a134:	2002066c 	.word	0x2002066c

0001a138 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1a138:	4a15b4f0 	.word	0x4a15b4f0
   1a13c:	68144b15 	.word	0x68144b15
   1a140:	6825681e 	.word	0x6825681e
   1a144:	2000b1ad 	.word	0x2000b1ad
   1a148:	00c14607 	.word	0x00c14607
   1a14c:	685a1863 	.word	0x685a1863
   1a150:	2a03b2d2 	.word	0x2a03b2d2
   1a154:	609fd104 	.word	0x609fd104
   1a158:	f022685a 	.word	0xf022685a
   1a15c:	605a02ff 	.word	0x605a02ff
   1a160:	f012685a 	.word	0xf012685a
   1a164:	d1010fff 	.word	0xd1010fff
   1a168:	b12b689b 	.word	0xb12b689b
   1a16c:	42853001 	.word	0x42853001
   1a170:	2000d1eb 	.word	0x2000d1eb
   1a174:	4770bcf0 	.word	0x4770bcf0
   1a178:	1080eb06 	.word	0x1080eb06
   1a17c:	60884421 	.word	0x60884421
   1a180:	f0236843 	.word	0xf0236843
   1a184:	f04303ff 	.word	0xf04303ff
   1a188:	60430301 	.word	0x60430301
   1a18c:	4770bcf0 	.word	0x4770bcf0
   1a190:	20020668 	.word	0x20020668
   1a194:	20020664 	.word	0x20020664

0001a198 <rpc_transport_ipc_tx_data_alloc>:
   1a198:	781b4b03 	.word	0x781b4b03
   1a19c:	f005b90b 	.word	0xf005b90b
   1a1a0:	2000bacd 	.word	0x2000bacd
   1a1a4:	bf004770 	.word	0xbf004770
   1a1a8:	20027407 	.word	0x20027407

0001a1ac <null_handler_init>:
   1a1ac:	47702000 	.word	0x47702000

0001a1b0 <null_handler_put>:
   1a1b0:	460cb510 	.word	0x460cb510
   1a1b4:	3101e9d0 	.word	0x3101e9d0
   1a1b8:	47984620 	.word	0x47984620
   1a1bc:	bd106860 	.word	0xbd106860

0001a1c0 <null_handler_get>:
   1a1c0:	30fff04f 	.word	0x30fff04f
   1a1c4:	bf004770 	.word	0xbf004770

0001a1c8 <null_handler_available>:
   1a1c8:	30fff04f 	.word	0x30fff04f
   1a1cc:	bf004770 	.word	0xbf004770

0001a1d0 <null_handler_flush>:
   1a1d0:	47702000 	.word	0x47702000

0001a1d4 <null_handler_free>:
   1a1d4:	bf004770 	.word	0xbf004770

0001a1d8 <rpc_gnss_event_handler>:
   1a1d8:	4b5db5f0 	.word	0x4b5db5f0
   1a1dc:	68004606 	.word	0x68004606
   1a1e0:	6802881b 	.word	0x6802881b
   1a1e4:	ebb34c5b 	.word	0xebb34c5b
   1a1e8:	b0854f12 	.word	0xb0854f12
   1a1ec:	6020460d 	.word	0x6020460d
   1a1f0:	f505d033 	.word	0xf505d033
   1a1f4:	33ff433f 	.word	0x33ff433f
   1a1f8:	2b02b29b 	.word	0x2b02b29b
   1a1fc:	4c56d80e 	.word	0x4c56d80e
   1a200:	075a6823 	.word	0x075a6823
   1a204:	6823d40d 	.word	0x6823d40d
   1a208:	d503079b 	.word	0xd503079b
   1a20c:	0303f244 	.word	0x0303f244
   1a210:	d006429d 	.word	0xd006429d
   1a214:	b1086830 	.word	0xb1086830
   1a218:	fa72f7f9 	.word	0xfa72f7f9
   1a21c:	b0052000 	.word	0xb0052000
   1a220:	2002bdf0 	.word	0x2002bdf0
   1a224:	fa60f005 	.word	0xfa60f005
   1a228:	28004607 	.word	0x28004607
   1a22c:	2302d0f2 	.word	0x2302d0f2
   1a230:	68318005 	.word	0x68318005
   1a234:	48496872 	.word	0x48496872
   1a238:	0086e88d 	.word	0x0086e88d
   1a23c:	93036800 	.word	0x93036800
   1a240:	46696803 	.word	0x46696803
   1a244:	4798685b 	.word	0x4798685b
   1a248:	d06d3001 	.word	0xd06d3001
   1a24c:	68232000 	.word	0x68232000
   1a250:	3380f443 	.word	0x3380f443
   1a254:	b0056023 	.word	0xb0056023
   1a258:	4c3fbdf0 	.word	0x4c3fbdf0
   1a25c:	01da6823 	.word	0x01da6823
   1a260:	f242d523 	.word	0xf242d523
   1a264:	42991302 	.word	0x42991302
   1a268:	6843d11f 	.word	0x6843d11f
   1a26c:	6823b91b 	.word	0x6823b91b
   1a270:	7300f043 	.word	0x7300f043
   1a274:	68236023 	.word	0x68236023
   1a278:	7380f023 	.word	0x7380f023
   1a27c:	68236023 	.word	0x68236023
   1a280:	d430025b 	.word	0xd430025b
   1a284:	0305f242 	.word	0x0305f242
   1a288:	d12c429d 	.word	0xd12c429d
   1a28c:	02996823 	.word	0x02996823
   1a290:	6843d529 	.word	0x6843d529
   1a294:	d1552b00 	.word	0xd1552b00
   1a298:	f4236823 	.word	0xf4236823
   1a29c:	60231300 	.word	0x60231300
   1a2a0:	f4436823 	.word	0xf4436823
   1a2a4:	60233300 	.word	0x60233300
   1a2a8:	6823e01d 	.word	0x6823e01d
   1a2ac:	d50e025f 	.word	0xd50e025f
   1a2b0:	1303f242 	.word	0x1303f242
   1a2b4:	d10a429d 	.word	0xd10a429d
   1a2b8:	b91b6843 	.word	0xb91b6843
   1a2bc:	f4436823 	.word	0xf4436823
   1a2c0:	60230300 	.word	0x60230300
   1a2c4:	f4236823 	.word	0xf4236823
   1a2c8:	60230380 	.word	0x60230380
   1a2cc:	f242e00b 	.word	0xf242e00b
   1a2d0:	429d0301 	.word	0x429d0301
   1a2d4:	6843d10a 	.word	0x6843d10a
   1a2d8:	6823b92b 	.word	0x6823b92b
   1a2dc:	041b0c1b 	.word	0x041b0c1b
   1a2e0:	0302f043 	.word	0x0302f043
   1a2e4:	f7f96023 	.word	0xf7f96023
   1a2e8:	e782fa0b 	.word	0xe782fa0b
   1a2ec:	0304f242 	.word	0x0304f242
   1a2f0:	d1c7429d 	.word	0xd1c7429d
   1a2f4:	b9936843 	.word	0xb9936843
   1a2f8:	f4436823 	.word	0xf4436823
   1a2fc:	60230300 	.word	0x60230300
   1a300:	b29b6823 	.word	0xb29b6823
   1a304:	68232b03 	.word	0x68232b03
   1a308:	b29bd016 	.word	0xb29bd016
   1a30c:	d1d92b04 	.word	0xd1d92b04
   1a310:	0c1b6823 	.word	0x0c1b6823
   1a314:	f043041b 	.word	0xf043041b
   1a318:	60230302 	.word	0x60230302
   1a31c:	6823e7d2 	.word	0x6823e7d2
   1a320:	2b03b29b 	.word	0x2b03b29b
   1a324:	e7f3d1ce 	.word	0xe7f3d1ce
   1a328:	f0054638 	.word	0xf0054638
   1a32c:	6830f9fb 	.word	0x6830f9fb
   1a330:	f47f2800 	.word	0xf47f2800
   1a334:	e771af71 	.word	0xe771af71
   1a338:	041b0c1b 	.word	0x041b0c1b
   1a33c:	0304f043 	.word	0x0304f043
   1a340:	e7bf6023 	.word	0xe7bf6023
   1a344:	f4236823 	.word	0xf4236823
   1a348:	60231300 	.word	0x60231300
   1a34c:	bf00e7cb 	.word	0xbf00e7cb
   1a350:	20025e1e 	.word	0x20025e1e
   1a354:	20020634 	.word	0x20020634
   1a358:	2002068c 	.word	0x2002068c
   1a35c:	20020690 	.word	0x20020690

0001a360 <gnss_interface_write>:
   1a360:	43f0e92d 	.word	0x43f0e92d
   1a364:	b09f4a75 	.word	0xb09f4a75
   1a368:	9d264290 	.word	0x9d264290
   1a36c:	80d3f040 	.word	0x80d3f040
   1a370:	f0002900 	.word	0xf0002900
   1a374:	2d0080c8 	.word	0x2d0080c8
   1a378:	80c5f000 	.word	0x80c5f000
   1a37c:	2a029a27 	.word	0x2a029a27
   1a380:	80c1f040 	.word	0x80c1f040
   1a384:	68224c6e 	.word	0x68224c6e
   1a388:	2a02b292 	.word	0x2a02b292
   1a38c:	6822d004 	.word	0x6822d004
   1a390:	2a04b292 	.word	0x2a04b292
   1a394:	80c5f040 	.word	0x80c5f040
   1a398:	f1000798 	.word	0xf1000798
   1a39c:	682080c8 	.word	0x682080c8
   1a3a0:	3000f410 	.word	0x3000f410
   1a3a4:	6822d065 	.word	0x6822d065
   1a3a8:	f422882b 	.word	0xf422882b
   1a3ac:	60223200 	.word	0x60223200
   1a3b0:	3b016822 	.word	0x3b016822
   1a3b4:	1200f442 	.word	0x1200f442
   1a3b8:	2b076022 	.word	0x2b076022
   1a3bc:	80a3f200 	.word	0x80a3f200
   1a3c0:	f003e8df 	.word	0xf003e8df
   1a3c4:	696e7378 	.word	0x696e7378
   1a3c8:	045f5a64 	.word	0x045f5a64
   1a3cc:	a9024608 	.word	0xa9024608
   1a3d0:	ff1ef7fb 	.word	0xff1ef7fb
   1a3d4:	46682172 	.word	0x46682172
   1a3d8:	f960f7f9 	.word	0xf960f7f9
   1a3dc:	98004605 	.word	0x98004605
   1a3e0:	d16c2d00 	.word	0xd16c2d00
   1a3e4:	d06a2800 	.word	0xd06a2800
   1a3e8:	0605f241 	.word	0x0605f241
   1a3ec:	0c49f04f 	.word	0x0c49f04f
   1a3f0:	f04f2272 	.word	0xf04f2272
   1a3f4:	f04f0e76 	.word	0xf04f0e76
   1a3f8:	f04f0943 	.word	0xf04f0943
   1a3fc:	4f510854 	.word	0x4f510854
   1a400:	883ba91e 	.word	0x883ba91e
   1a404:	c00ff880 	.word	0xc00ff880
   1a408:	b29b3301 	.word	0xb29b3301
   1a40c:	4c03ea46 	.word	0x4c03ea46
   1a410:	cd74f841 	.word	0xcd74f841
   1a414:	71857145 	.word	0x71857145
   1a418:	720571c5 	.word	0x720571c5
   1a41c:	72857245 	.word	0x72857245
   1a420:	710272c5 	.word	0x710272c5
   1a424:	900cf880 	.word	0x900cf880
   1a428:	800df880 	.word	0x800df880
   1a42c:	e00ef880 	.word	0xe00ef880
   1a430:	803b6800 	.word	0x803b6800
   1a434:	fad4f00a 	.word	0xfad4f00a
   1a438:	46314b43 	.word	0x46314b43
   1a43c:	601d9800 	.word	0x601d9800
   1a440:	f940f7f9 	.word	0xf940f7f9
   1a444:	d1472800 	.word	0xd1472800
   1a448:	02996823 	.word	0x02996823
   1a44c:	4e3fd50d 	.word	0x4e3fd50d
   1a450:	e0014d3a 	.word	0xe0014d3a
   1a454:	d14f2800 	.word	0xd14f2800
   1a458:	46284631 	.word	0x46284631
   1a45c:	fe70f7f7 	.word	0xfe70f7f7
   1a460:	029a6823 	.word	0x029a6823
   1a464:	2800d4f6 	.word	0x2800d4f6
   1a468:	6823d146 	.word	0x6823d146
   1a46c:	d53e039b 	.word	0xd53e039b
   1a470:	b01f2000 	.word	0xb01f2000
   1a474:	83f0e8bd 	.word	0x83f0e8bd
   1a478:	a9024608 	.word	0xa9024608
   1a47c:	fe80f7fb 	.word	0xfe80f7fb
   1a480:	4608e7a8 	.word	0x4608e7a8
   1a484:	f7fba902 	.word	0xf7fba902
   1a488:	e7a3fea3 	.word	0xe7a3fea3
   1a48c:	a9024608 	.word	0xa9024608
   1a490:	fe5cf7fb 	.word	0xfe5cf7fb
   1a494:	4608e79e 	.word	0x4608e79e
   1a498:	f7fba902 	.word	0xf7fba902
   1a49c:	e799fe33 	.word	0xe799fe33
   1a4a0:	a9024608 	.word	0xa9024608
   1a4a4:	fdfcf7fb 	.word	0xfdfcf7fb
   1a4a8:	4608e794 	.word	0x4608e794
   1a4ac:	f7fba902 	.word	0xf7fba902
   1a4b0:	e78ffda5 	.word	0xe78ffda5
   1a4b4:	a9024608 	.word	0xa9024608
   1a4b8:	fd7ef7fb 	.word	0xfd7ef7fb
   1a4bc:	6803e78a 	.word	0x6803e78a
   1a4c0:	4618b11b 	.word	0x4618b11b
   1a4c4:	f91cf7f9 	.word	0xf91cf7f9
   1a4c8:	f7f99800 	.word	0xf7f99800
   1a4cc:	2023f911 	.word	0x2023f911
   1a4d0:	fec6f7f7 	.word	0xfec6f7f7
   1a4d4:	30fff04f 	.word	0x30fff04f
   1a4d8:	f4236823 	.word	0xf4236823
   1a4dc:	60231300 	.word	0x60231300
   1a4e0:	f4436823 	.word	0xf4436823
   1a4e4:	60233300 	.word	0x60233300
   1a4e8:	e8bdb01f 	.word	0xe8bdb01f
   1a4ec:	200583f0 	.word	0x200583f0
   1a4f0:	f4436823 	.word	0xf4436823
   1a4f4:	60233300 	.word	0x60233300
   1a4f8:	feb2f7f7 	.word	0xfeb2f7f7
   1a4fc:	30fff04f 	.word	0x30fff04f
   1a500:	e8bdb01f 	.word	0xe8bdb01f
   1a504:	201683f0 	.word	0x201683f0
   1a508:	feaaf7f7 	.word	0xfeaaf7f7
   1a50c:	30fff04f 	.word	0x30fff04f
   1a510:	e8bdb01f 	.word	0xe8bdb01f
   1a514:	200983f0 	.word	0x200983f0
   1a518:	fea2f7f7 	.word	0xfea2f7f7
   1a51c:	30fff04f 	.word	0x30fff04f
   1a520:	2039e7a7 	.word	0x2039e7a7
   1a524:	fe9cf7f7 	.word	0xfe9cf7f7
   1a528:	30fff04f 	.word	0x30fff04f
   1a52c:	202de7a1 	.word	0x202de7a1
   1a530:	fe96f7f7 	.word	0xfe96f7f7
   1a534:	30fff04f 	.word	0x30fff04f
   1a538:	bf00e79b 	.word	0xbf00e79b
   1a53c:	49765443 	.word	0x49765443
   1a540:	2002068c 	.word	0x2002068c
   1a544:	20025e1e 	.word	0x20025e1e
   1a548:	20020634 	.word	0x20020634
   1a54c:	2002d3f8 	.word	0x2002d3f8

0001a550 <gnss_interface_read>:
   1a550:	4ff0e92d 	.word	0x4ff0e92d
   1a554:	b0b74c4a 	.word	0xb0b74c4a
   1a558:	f04042a0 	.word	0xf04042a0
   1a55c:	468881ec 	.word	0x468881ec
   1a560:	f0002900 	.word	0xf0002900
   1a564:	2ad781e2 	.word	0x2ad781e2
   1a568:	81dff240 	.word	0x81dff240
   1a56c:	46994d45 	.word	0x46994d45
   1a570:	b29b682b 	.word	0xb29b682b
   1a574:	d0042b04 	.word	0xd0042b04
   1a578:	b29b682b 	.word	0xb29b682b
   1a57c:	f0402b02 	.word	0xf0402b02
   1a580:	210281e0 	.word	0x210281e0
   1a584:	240020b6 	.word	0x240020b6
   1a588:	f10d682b 	.word	0xf10d682b
   1a58c:	f423020e 	.word	0xf423020e
   1a590:	602b3380 	.word	0x602b3380
   1a594:	a0f4f8df 	.word	0xa0f4f8df
   1a598:	4f3bab08 	.word	0x4f3bab08
   1a59c:	90054e38 	.word	0x90054e38
   1a5a0:	93049107 	.word	0x93049107
   1a5a4:	ea099206 	.word	0xea099206
   1a5a8:	f8da0b01 	.word	0xf8da0b01
   1a5ac:	464a0000 	.word	0x464a0000
   1a5b0:	a9046803 	.word	0xa9046803
   1a5b4:	4798689b 	.word	0x4798689b
   1a5b8:	da112800 	.word	0xda112800
   1a5bc:	0f00f1bb 	.word	0x0f00f1bb
   1a5c0:	682bd138 	.word	0x682bd138
   1a5c4:	d4f003d8 	.word	0xd4f003d8
   1a5c8:	e7eeb10c 	.word	0xe7eeb10c
   1a5cc:	4639b930 	.word	0x4639b930
   1a5d0:	f7f74630 	.word	0xf7f74630
   1a5d4:	682bfdb5 	.word	0x682bfdb5
   1a5d8:	d5f703d9 	.word	0xd5f703d9
   1a5dc:	e7e44604 	.word	0xe7e44604
   1a5e0:	0202f244 	.word	0x0202f244
   1a5e4:	300ef8bd 	.word	0x300ef8bd
   1a5e8:	d0394293 	.word	0xd0394293
   1a5ec:	0201f244 	.word	0x0201f244
   1a5f0:	d04d4293 	.word	0xd04d4293
   1a5f4:	0203f244 	.word	0x0203f244
   1a5f8:	f0404293 	.word	0xf0404293
   1a5fc:	22018196 	.word	0x22018196
   1a600:	9b082414 	.word	0x9b082414
   1a604:	2000f888 	.word	0x2000f888
   1a608:	f8c89a09 	.word	0xf8c89a09
   1a60c:	f8bd3008 	.word	0xf8bd3008
   1a610:	e9c83028 	.word	0xe9c83028
   1a614:	f8da2303 	.word	0xf8da2303
   1a618:	68030000 	.word	0x68030000
   1a61c:	479868db 	.word	0x479868db
   1a620:	dd032800 	.word	0xdd032800
   1a624:	f443682b 	.word	0xf443682b
   1a628:	602b3380 	.word	0x602b3380
   1a62c:	b0374620 	.word	0xb0374620
   1a630:	8ff0e8bd 	.word	0x8ff0e8bd
   1a634:	46031c42 	.word	0x46031c42
   1a638:	b93cd1d2 	.word	0xb93cd1d2
   1a63c:	2023461c 	.word	0x2023461c
   1a640:	fe0ef7f7 	.word	0xfe0ef7f7
   1a644:	b0374620 	.word	0xb0374620
   1a648:	8ff0e8bd 	.word	0x8ff0e8bd
   1a64c:	46209001 	.word	0x46209001
   1a650:	fe06f7f7 	.word	0xfe06f7f7
   1a654:	461c9b01 	.word	0x461c9b01
   1a658:	b0374620 	.word	0xb0374620
   1a65c:	8ff0e8bd 	.word	0x8ff0e8bd
   1a660:	f00aa808 	.word	0xf00aa808
   1a664:	2302f989 	.word	0x2302f989
   1a668:	b2a41c44 	.word	0xb2a41c44
   1a66c:	3b08f808 	.word	0x3b08f808
   1a670:	a9084622 	.word	0xa9084622
   1a674:	f00a4640 	.word	0xf00a4640
   1a678:	3408f9b3 	.word	0x3408f9b3
   1a67c:	bf00e7cb 	.word	0xbf00e7cb
   1a680:	49765443 	.word	0x49765443
   1a684:	2002068c 	.word	0x2002068c
   1a688:	2002d3f8 	.word	0x2002d3f8
   1a68c:	20020690 	.word	0x20020690
   1a690:	a8092401 	.word	0xa8092401
   1a694:	e9c8c80f 	.word	0xe9c8c80f
   1a698:	e9c80102 	.word	0xe9c80102
   1a69c:	990d2304 	.word	0x990d2304
   1a6a0:	f8889a0e 	.word	0xf8889a0e
   1a6a4:	9b0f4000 	.word	0x9b0f4000
   1a6a8:	1018f8c8 	.word	0x1018f8c8
   1a6ac:	f8c89910 	.word	0xf8c89910
   1a6b0:	f8c8201c 	.word	0xf8c8201c
   1a6b4:	f89d3020 	.word	0xf89d3020
   1a6b8:	f8dd205d 	.word	0xf8dd205d
   1a6bc:	f8c8304d 	.word	0xf8c8304d
   1a6c0:	f8dd1024 	.word	0xf8dd1024
   1a6c4:	f8881051 	.word	0xf8881051
   1a6c8:	f8dd2044 	.word	0xf8dd2044
   1a6cc:	f8c82055 	.word	0xf8c82055
   1a6d0:	f8dd3034 	.word	0xf8dd3034
   1a6d4:	f8c83059 	.word	0xf8c83059
   1a6d8:	f8bd1038 	.word	0xf8bd1038
   1a6dc:	f8c81044 	.word	0xf8c81044
   1a6e0:	f8c8203c 	.word	0xf8c8203c
   1a6e4:	f8dd3040 	.word	0xf8dd3040
   1a6e8:	f89d2046 	.word	0xf89d2046
   1a6ec:	f8a8304a 	.word	0xf8a8304a
   1a6f0:	f8881028 	.word	0xf8881028
   1a6f4:	f8c8302e 	.word	0xf8c8302e
   1a6f8:	f89d202a 	.word	0xf89d202a
   1a6fc:	f89d004b 	.word	0xf89d004b
   1a700:	9b18204c 	.word	0x9b18204c
   1a704:	406cf89d 	.word	0x406cf89d
   1a708:	2002ea40 	.word	0x2002ea40
   1a70c:	206bf89d 	.word	0x206bf89d
   1a710:	210ff3c3 	.word	0x210ff3c3
   1a714:	ea429b1d 	.word	0xea429b1d
   1a718:	f8a82204 	.word	0xf8a82204
   1a71c:	f8a80030 	.word	0xf8a80030
   1a720:	f8bd104a 	.word	0xf8bd104a
   1a724:	f3c3105e 	.word	0xf3c3105e
   1a728:	f8a8230f 	.word	0xf8a8230f
   1a72c:	f89d2056 	.word	0xf89d2056
   1a730:	f8a82060 	.word	0xf8a82060
   1a734:	f8dd3062 	.word	0xf8dd3062
   1a738:	f8a83063 	.word	0xf8a83063
   1a73c:	f8881046 	.word	0xf8881046
   1a740:	f8bd2048 	.word	0xf8bd2048
   1a744:	f89d2068 	.word	0xf89d2068
   1a748:	f8c81067 	.word	0xf8c81067
   1a74c:	f89d304c 	.word	0xf89d304c
   1a750:	f888306a 	.word	0xf888306a
   1a754:	f8a81050 	.word	0xf8a81050
   1a758:	f8882052 	.word	0xf8882052
   1a75c:	f8bd3054 	.word	0xf8bd3054
   1a760:	f8dd3072 	.word	0xf8dd3072
   1a764:	f89d106d 	.word	0xf89d106d
   1a768:	f8c82071 	.word	0xf8c82071
   1a76c:	f8881058 	.word	0xf8881058
   1a770:	f89d205c 	.word	0xf89d205c
   1a774:	f8dd1074 	.word	0xf8dd1074
   1a778:	f8a82077 	.word	0xf8a82077
   1a77c:	f89d305e 	.word	0xf89d305e
   1a780:	f888307b 	.word	0xf888307b
   1a784:	f8c81060 	.word	0xf8c81060
   1a788:	f8882064 	.word	0xf8882064
   1a78c:	f89d3068 	.word	0xf89d3068
   1a790:	f89d3080 	.word	0xf89d3080
   1a794:	9a22107f 	.word	0x9a22107f
   1a798:	0094f89d 	.word	0x0094f89d
   1a79c:	2103ea41 	.word	0x2103ea41
   1a7a0:	3093f89d 	.word	0x3093f89d
   1a7a4:	220ff3c2 	.word	0x220ff3c2
   1a7a8:	106ef8a8 	.word	0x106ef8a8
   1a7ac:	107cf8bd 	.word	0x107cf8bd
   1a7b0:	2300ea43 	.word	0x2300ea43
   1a7b4:	207af8a8 	.word	0x207af8a8
   1a7b8:	207ef89d 	.word	0x207ef89d
   1a7bc:	3086f8a8 	.word	0x3086f8a8
   1a7c0:	3081f8dd 	.word	0x3081f8dd
   1a7c4:	106af8a8 	.word	0x106af8a8
   1a7c8:	206cf888 	.word	0x206cf888
   1a7cc:	2086f8bd 	.word	0x2086f8bd
   1a7d0:	1085f89d 	.word	0x1085f89d
   1a7d4:	3070f8c8 	.word	0x3070f8c8
   1a7d8:	3088f89d 	.word	0x3088f89d
   1a7dc:	1074f888 	.word	0x1074f888
   1a7e0:	2076f8a8 	.word	0x2076f8a8
   1a7e4:	3078f888 	.word	0x3078f888
   1a7e8:	3090f8bd 	.word	0x3090f8bd
   1a7ec:	108bf8dd 	.word	0x108bf8dd
   1a7f0:	208ff89d 	.word	0x208ff89d
   1a7f4:	107cf8c8 	.word	0x107cf8c8
   1a7f8:	2080f888 	.word	0x2080f888
   1a7fc:	1092f89d 	.word	0x1092f89d
   1a800:	2095f8dd 	.word	0x2095f8dd
   1a804:	3082f8a8 	.word	0x3082f8a8
   1a808:	3099f89d 	.word	0x3099f89d
   1a80c:	1084f888 	.word	0x1084f888
   1a810:	2088f8c8 	.word	0x2088f8c8
   1a814:	308cf888 	.word	0x308cf888
   1a818:	009af8bd 	.word	0x009af8bd
   1a81c:	f89d9b27 	.word	0xf89d9b27
   1a820:	f89d40a8 	.word	0xf89d40a8
   1a824:	f3c320a7 	.word	0xf3c320a7
   1a828:	9b2c210f 	.word	0x9b2c210f
   1a82c:	2204ea42 	.word	0x2204ea42
   1a830:	1092f8a8 	.word	0x1092f8a8
   1a834:	109cf89d 	.word	0x109cf89d
   1a838:	209ef8a8 	.word	0x209ef8a8
   1a83c:	230ff3c3 	.word	0x230ff3c3
   1a840:	209ff8dd 	.word	0x209ff8dd
   1a844:	008ef8a8 	.word	0x008ef8a8
   1a848:	30aaf8a8 	.word	0x30aaf8a8
   1a84c:	1090f888 	.word	0x1090f888
   1a850:	30a3f89d 	.word	0x30a3f89d
   1a854:	10a4f8bd 	.word	0x10a4f8bd
   1a858:	2094f8c8 	.word	0x2094f8c8
   1a85c:	20a6f89d 	.word	0x20a6f89d
   1a860:	3098f888 	.word	0x3098f888
   1a864:	30a9f8dd 	.word	0x30a9f8dd
   1a868:	109af8a8 	.word	0x109af8a8
   1a86c:	209cf888 	.word	0x209cf888
   1a870:	20aef8bd 	.word	0x20aef8bd
   1a874:	10adf89d 	.word	0x10adf89d
   1a878:	30a0f8c8 	.word	0x30a0f8c8
   1a87c:	30b0f89d 	.word	0x30b0f89d
   1a880:	10a4f888 	.word	0x10a4f888
   1a884:	20a6f8a8 	.word	0x20a6f8a8
   1a888:	30a8f888 	.word	0x30a8f888
   1a88c:	30b8f8bd 	.word	0x30b8f8bd
   1a890:	10b3f8dd 	.word	0x10b3f8dd
   1a894:	20b7f89d 	.word	0x20b7f89d
   1a898:	10acf8c8 	.word	0x10acf8c8
   1a89c:	20b0f888 	.word	0x20b0f888
   1a8a0:	30b2f8a8 	.word	0x30b2f8a8
   1a8a4:	30bcf89d 	.word	0x30bcf89d
   1a8a8:	10bbf89d 	.word	0x10bbf89d
   1a8ac:	00d0f89d 	.word	0x00d0f89d
   1a8b0:	ea419a31 	.word	0xea419a31
   1a8b4:	f89d2103 	.word	0xf89d2103
   1a8b8:	f89d30cf 	.word	0xf89d30cf
   1a8bc:	ea4340ba 	.word	0xea4340ba
   1a8c0:	f3c22300 	.word	0xf3c22300
   1a8c4:	f8a8220f 	.word	0xf8a8220f
   1a8c8:	f8a810b6 	.word	0xf8a810b6
   1a8cc:	f88830ce 	.word	0xf88830ce
   1a8d0:	f8a840b4 	.word	0xf8a840b4
   1a8d4:	f8bd20c2 	.word	0xf8bd20c2
   1a8d8:	f89d20c2 	.word	0xf89d20c2
   1a8dc:	f89d10c1 	.word	0xf89d10c1
   1a8e0:	f8dd30c4 	.word	0xf8dd30c4
   1a8e4:	f88800bd 	.word	0xf88800bd
   1a8e8:	f8a810bc 	.word	0xf8a810bc
   1a8ec:	f8c820be 	.word	0xf8c820be
   1a8f0:	f88800b8 	.word	0xf88800b8
   1a8f4:	f8bd30c0 	.word	0xf8bd30c0
   1a8f8:	f8dd30cc 	.word	0xf8dd30cc
   1a8fc:	f89d10c7 	.word	0xf89d10c7
   1a900:	f8c820cb 	.word	0xf8c820cb
   1a904:	f88810c4 	.word	0xf88810c4
   1a908:	f89d20c8 	.word	0xf89d20c8
   1a90c:	f8dd10ce 	.word	0xf8dd10ce
   1a910:	f8a820d1 	.word	0xf8a820d1
   1a914:	f89d30ca 	.word	0xf89d30ca
   1a918:	f88830d5 	.word	0xf88830d5
   1a91c:	f8c810cc 	.word	0xf8c810cc
   1a920:	f88820d0 	.word	0xf88820d0
   1a924:	24d830d4 	.word	0x24d830d4
   1a928:	2016e675 	.word	0x2016e675
   1a92c:	fc98f7f7 	.word	0xfc98f7f7
   1a930:	34fff04f 	.word	0x34fff04f
   1a934:	2009e67a 	.word	0x2009e67a
   1a938:	fc92f7f7 	.word	0xfc92f7f7
   1a93c:	34fff04f 	.word	0x34fff04f
   1a940:	2039e674 	.word	0x2039e674
   1a944:	fc8cf7f7 	.word	0xfc8cf7f7
   1a948:	34fff04f 	.word	0x34fff04f
   1a94c:	bf00e66e 	.word	0xbf00e66e

0001a950 <gnss_interface_setopt>:
   1a950:	47f0e92d 	.word	0x47f0e92d
   1a954:	1402f241 	.word	0x1402f241
   1a958:	b0864222 	.word	0xb0864222
   1a95c:	d0044d9b 	.word	0xd0044d9b
   1a960:	b2a4682c 	.word	0xb2a4682c
   1a964:	f0402c02 	.word	0xf0402c02
   1a968:	682c8104 	.word	0x682c8104
   1a96c:	f1000264 	.word	0xf1000264
   1a970:	f5b18127 	.word	0xf5b18127
   1a974:	f0407f01 	.word	0xf0407f01
   1a978:	4995811d 	.word	0x4995811d
   1a97c:	f0404288 	.word	0xf0404288
   1a980:	3a018113 	.word	0x3a018113
   1a984:	f2002a08 	.word	0xf2002a08
   1a988:	e8df80ec 	.word	0xe8df80ec
   1a98c:	0075f012 	.word	0x0075f012
   1a990:	00c200d8 	.word	0x00c200d8
   1a994:	008100cc 	.word	0x008100cc
   1a998:	0098008c 	.word	0x0098008c
   1a99c:	000900af 	.word	0x000900af
   1a9a0:	2a019a0e 	.word	0x2a019a0e
   1a9a4:	80ddf040 	.word	0x80ddf040
   1a9a8:	1603f241 	.word	0x1603f241
   1a9ac:	46372240 	.word	0x46372240
   1a9b0:	9202781b 	.word	0x9202781b
   1a9b4:	3015f88d 	.word	0x3015f88d
   1a9b8:	2112682b 	.word	0x2112682b
   1a9bc:	0380f443 	.word	0x0380f443
   1a9c0:	602b4668 	.word	0x602b4668
   1a9c4:	fe6af7f8 	.word	0xfe6af7f8
   1a9c8:	98004604 	.word	0x98004604
   1a9cc:	f0402c00 	.word	0xf0402c00
   1a9d0:	280080d6 	.word	0x280080d6
   1a9d4:	80d3f000 	.word	0x80d3f000
   1a9d8:	f04f2212 	.word	0xf04f2212
   1a9dc:	f04f0876 	.word	0xf04f0876
   1a9e0:	f04f0e49 	.word	0xf04f0e49
   1a9e4:	f04f0a43 	.word	0xf04f0a43
   1a9e8:	f8df0954 	.word	0xf8df0954
   1a9ec:	a906c1ec 	.word	0xa906c1ec
   1a9f0:	3000f8bc 	.word	0x3000f8bc
   1a9f4:	800ef880 	.word	0x800ef880
   1a9f8:	b29b3301 	.word	0xb29b3301
   1a9fc:	4603ea46 	.word	0x4603ea46
   1aa00:	6d14f841 	.word	0x6d14f841
   1aa04:	71847144 	.word	0x71847144
   1aa08:	720471c4 	.word	0x720471c4
   1aa0c:	72847244 	.word	0x72847244
   1aa10:	710272c4 	.word	0x710272c4
   1aa14:	a00cf880 	.word	0xa00cf880
   1aa18:	900df880 	.word	0x900df880
   1aa1c:	e00ff880 	.word	0xe00ff880
   1aa20:	81b8f8df 	.word	0x81b8f8df
   1aa24:	f8ac6800 	.word	0xf8ac6800
   1aa28:	f0093000 	.word	0xf0093000
   1aa2c:	4639ffd9 	.word	0x4639ffd9
   1aa30:	f8c89800 	.word	0xf8c89800
   1aa34:	f7f84000 	.word	0xf7f84000
   1aa38:	2800fe45 	.word	0x2800fe45
   1aa3c:	80aaf040 	.word	0x80aaf040
   1aa40:	4e634f64 	.word	0x4e634f64
   1aa44:	46304639 	.word	0x46304639
   1aa48:	fb7af7f7 	.word	0xfb7af7f7
   1aa4c:	f414682c 	.word	0xf414682c
   1aa50:	d1f70480 	.word	0xd1f70480
   1aa54:	0000f8d8 	.word	0x0000f8d8
   1aa58:	f7f8b118 	.word	0xf7f8b118
   1aa5c:	f8c8fe51 	.word	0xf8c8fe51
   1aa60:	682b4000 	.word	0x682b4000
   1aa64:	d576021b 	.word	0xd576021b
   1aa68:	682b2000 	.word	0x682b2000
   1aa6c:	0300f423 	.word	0x0300f423
   1aa70:	b006602b 	.word	0xb006602b
   1aa74:	87f0e8bd 	.word	0x87f0e8bd
   1aa78:	2a029a0e 	.word	0x2a029a0e
   1aa7c:	2208d171 	.word	0x2208d171
   1aa80:	1603f241 	.word	0x1603f241
   1aa84:	9202881b 	.word	0x9202881b
   1aa88:	300ff8ad 	.word	0x300ff8ad
   1aa8c:	e7934637 	.word	0xe7934637
   1aa90:	2a019a0e 	.word	0x2a019a0e
   1aa94:	f241d165 	.word	0xf241d165
   1aa98:	781b1603 	.word	0x781b1603
   1aa9c:	f88d9202 	.word	0xf88d9202
   1aaa0:	4637300c 	.word	0x4637300c
   1aaa4:	9a0ee788 	.word	0x9a0ee788
   1aaa8:	d15a2a01 	.word	0xd15a2a01
   1aaac:	f2412202 	.word	0xf2412202
   1aab0:	781b1603 	.word	0x781b1603
   1aab4:	f88d9202 	.word	0xf88d9202
   1aab8:	4637300d 	.word	0x4637300d
   1aabc:	682ae77c 	.word	0x682ae77c
   1aac0:	2a02b292 	.word	0x2a02b292
   1aac4:	9a0ed155 	.word	0x9a0ed155
   1aac8:	d14a2a04 	.word	0xd14a2a04
   1aacc:	f2412101 	.word	0xf2412101
   1aad0:	682a0604 	.word	0x682a0604
   1aad4:	0c136818 	.word	0x0c136818
   1aad8:	f043041b 	.word	0xf043041b
   1aadc:	f8cd0303 	.word	0xf8cd0303
   1aae0:	602b0009 	.word	0x602b0009
   1aae4:	1008f88d 	.word	0x1008f88d
   1aae8:	e7654637 	.word	0xe7654637
   1aaec:	b29b682b 	.word	0xb29b682b
   1aaf0:	d13e2b04 	.word	0xd13e2b04
   1aaf4:	f2412300 	.word	0xf2412300
   1aaf8:	f88d0604 	.word	0xf88d0604
   1aafc:	f88d3008 	.word	0xf88d3008
   1ab00:	f88d3009 	.word	0xf88d3009
   1ab04:	f88d300a 	.word	0xf88d300a
   1ab08:	f88d300b 	.word	0xf88d300b
   1ab0c:	4637300c 	.word	0x4637300c
   1ab10:	9a0ee752 	.word	0x9a0ee752
   1ab14:	d1242a01 	.word	0xd1242a01
   1ab18:	2b01781b 	.word	0x2b01781b
   1ab1c:	f241d121 	.word	0xf241d121
   1ab20:	46371603 	.word	0x46371603
   1ab24:	9a0ee748 	.word	0x9a0ee748
   1ab28:	d11a2a02 	.word	0xd11a2a02
   1ab2c:	f2412220 	.word	0xf2412220
   1ab30:	881b1603 	.word	0x881b1603
   1ab34:	f8ad9202 	.word	0xf8ad9202
   1ab38:	46373013 	.word	0x46373013
   1ab3c:	9a0ee73c 	.word	0x9a0ee73c
   1ab40:	d10e2a02 	.word	0xd10e2a02
   1ab44:	f2412210 	.word	0xf2412210
   1ab48:	881b1603 	.word	0x881b1603
   1ab4c:	f8ad9202 	.word	0xf8ad9202
   1ab50:	46373011 	.word	0x46373011
   1ab54:	200ee730 	.word	0x200ee730
   1ab58:	fb82f7f7 	.word	0xfb82f7f7
   1ab5c:	30fff04f 	.word	0x30fff04f
   1ab60:	2016e783 	.word	0x2016e783
   1ab64:	fb7cf7f7 	.word	0xfb7cf7f7
   1ab68:	30fff04f 	.word	0x30fff04f
   1ab6c:	e8bdb006 	.word	0xe8bdb006
   1ab70:	200e87f0 	.word	0x200e87f0
   1ab74:	fb74f7f7 	.word	0xfb74f7f7
   1ab78:	30fff04f 	.word	0x30fff04f
   1ab7c:	6803e779 	.word	0x6803e779
   1ab80:	4618b11b 	.word	0x4618b11b
   1ab84:	fdbcf7f8 	.word	0xfdbcf7f8
   1ab88:	f7f89800 	.word	0xf7f89800
   1ab8c:	2023fdb1 	.word	0x2023fdb1
   1ab90:	fb66f7f7 	.word	0xfb66f7f7
   1ab94:	200e682b 	.word	0x200e682b
   1ab98:	0380f423 	.word	0x0380f423
   1ab9c:	f7f7602b 	.word	0xf7f7602b
   1aba0:	f04ffb5f 	.word	0xf04ffb5f
   1aba4:	e76430ff 	.word	0xe76430ff
   1aba8:	f7f72009 	.word	0xf7f72009
   1abac:	f04ffb59 	.word	0xf04ffb59
   1abb0:	e75e30ff 	.word	0xe75e30ff
   1abb4:	f7f7202a 	.word	0xf7f7202a
   1abb8:	f04ffb53 	.word	0xf04ffb53
   1abbc:	e75830ff 	.word	0xe75830ff
   1abc0:	f7f72073 	.word	0xf7f72073
   1abc4:	f04ffb4d 	.word	0xf04ffb4d
   1abc8:	e75230ff 	.word	0xe75230ff
   1abcc:	2002068c 	.word	0x2002068c
   1abd0:	49765443 	.word	0x49765443
   1abd4:	2002d3f8 	.word	0x2002d3f8
   1abd8:	20025e1e 	.word	0x20025e1e
   1abdc:	20020634 	.word	0x20020634

0001abe0 <gnss_interface_getopt>:
   1abe0:	4ff0e92d 	.word	0x4ff0e92d
   1abe4:	b0874c81 	.word	0xb0874c81
   1abe8:	46986825 	.word	0x46986825
   1abec:	2d02b2ad 	.word	0x2d02b2ad
   1abf0:	f0409b10 	.word	0xf0409b10
   1abf4:	682580dc 	.word	0x682580dc
   1abf8:	f10003ee 	.word	0xf10003ee
   1abfc:	682580f0 	.word	0x682580f0
   1ac00:	f10001ed 	.word	0xf10001ed
   1ac04:	f5b180e6 	.word	0xf5b180e6
   1ac08:	f0407f01 	.word	0xf0407f01
   1ac0c:	497880d6 	.word	0x497880d6
   1ac10:	f0404288 	.word	0xf0404288
   1ac14:	f1b880d8 	.word	0xf1b880d8
   1ac18:	d00b0f00 	.word	0xd00b0f00
   1ac1c:	1e57b153 	.word	0x1e57b153
   1ac20:	d8072f05 	.word	0xd8072f05
   1ac24:	f007e8df 	.word	0xf007e8df
   1ac28:	0f030f0f 	.word	0x0f030f0f
   1ac2c:	681b0303 	.word	0x681b0303
   1ac30:	d00b2b01 	.word	0xd00b2b01
   1ac34:	f7f72016 	.word	0xf7f72016
   1ac38:	f04ffb13 	.word	0xf04ffb13
   1ac3c:	462835ff 	.word	0x462835ff
   1ac40:	e8bdb007 	.word	0xe8bdb007
   1ac44:	681b8ff0 	.word	0x681b8ff0
   1ac48:	d1f32b02 	.word	0xd1f32b02
   1ac4c:	22126823 	.word	0x22126823
   1ac50:	7380f043 	.word	0x7380f043
   1ac54:	a8012100 	.word	0xa8012100
   1ac58:	f0096023 	.word	0xf0096023
   1ac5c:	2112feee 	.word	0x2112feee
   1ac60:	f7f84668 	.word	0xf7f84668
   1ac64:	4605fd1b 	.word	0x4605fd1b
   1ac68:	2d009800 	.word	0x2d009800
   1ac6c:	808af040 	.word	0x808af040
   1ac70:	f0002800 	.word	0xf0002800
   1ac74:	f2418087 	.word	0xf2418087
   1ac78:	f04f1602 	.word	0xf04f1602
   1ac7c:	22120e49 	.word	0x22120e49
   1ac80:	0976f04f 	.word	0x0976f04f
   1ac84:	0b43f04f 	.word	0x0b43f04f
   1ac88:	0a54f04f 	.word	0x0a54f04f
   1ac8c:	c168f8df 	.word	0xc168f8df
   1ac90:	e00ff880 	.word	0xe00ff880
   1ac94:	3000f8bc 	.word	0x3000f8bc
   1ac98:	900ef880 	.word	0x900ef880
   1ac9c:	b29b3301 	.word	0xb29b3301
   1aca0:	4e03ea46 	.word	0x4e03ea46
   1aca4:	e004f8cd 	.word	0xe004f8cd
   1aca8:	71857145 	.word	0x71857145
   1acac:	720571c5 	.word	0x720571c5
   1acb0:	72857245 	.word	0x72857245
   1acb4:	a90172c5 	.word	0xa90172c5
   1acb8:	f8807102 	.word	0xf8807102
   1acbc:	f880b00c 	.word	0xf880b00c
   1acc0:	f8dfa00d 	.word	0xf8dfa00d
   1acc4:	68009138 	.word	0x68009138
   1acc8:	3000f8ac 	.word	0x3000f8ac
   1accc:	fe88f009 	.word	0xfe88f009
   1acd0:	98004631 	.word	0x98004631
   1acd4:	5000f8c9 	.word	0x5000f8c9
   1acd8:	fcf4f7f8 	.word	0xfcf4f7f8
   1acdc:	d15c2800 	.word	0xd15c2800
   1ace0:	4d434e44 	.word	0x4d434e44
   1ace4:	46284631 	.word	0x46284631
   1ace8:	fa2af7f7 	.word	0xfa2af7f7
   1acec:	01db6823 	.word	0x01db6823
   1acf0:	f8d9d4f8 	.word	0xf8d9d4f8
   1acf4:	b1d80000 	.word	0xb1d80000
   1acf8:	f0156825 	.word	0xf0156825
   1acfc:	d00f7500 	.word	0xd00f7500
   1ad00:	d8372f05 	.word	0xd8372f05
   1ad04:	f007e8df 	.word	0xf007e8df
   1ad08:	2b26201a 	.word	0x2b26201a
   1ad0c:	25000331 	.word	0x25000331
   1ad10:	f8887b43 	.word	0xf8887b43
   1ad14:	f7f83000 	.word	0xf7f83000
   1ad18:	2300fcf3 	.word	0x2300fcf3
   1ad1c:	3000f8c9 	.word	0x3000f8c9
   1ad20:	f0236823 	.word	0xf0236823
   1ad24:	60237300 	.word	0x60237300
   1ad28:	b0074628 	.word	0xb0074628
   1ad2c:	8ff0e8bd 	.word	0x8ff0e8bd
   1ad30:	46056823 	.word	0x46056823
   1ad34:	7300f023 	.word	0x7300f023
   1ad38:	e7f56023 	.word	0xe7f56023
   1ad3c:	300ff8b0 	.word	0x300ff8b0
   1ad40:	f8a82500 	.word	0xf8a82500
   1ad44:	e7e63000 	.word	0xe7e63000
   1ad48:	3011f8b0 	.word	0x3011f8b0
   1ad4c:	f8a82500 	.word	0xf8a82500
   1ad50:	e7e03000 	.word	0xe7e03000
   1ad54:	25007b83 	.word	0x25007b83
   1ad58:	3000f888 	.word	0x3000f888
   1ad5c:	f8b0e7db 	.word	0xf8b0e7db
   1ad60:	25003013 	.word	0x25003013
   1ad64:	3000f8a8 	.word	0x3000f8a8
   1ad68:	7b03e7d5 	.word	0x7b03e7d5
   1ad6c:	f8882500 	.word	0xf8882500
   1ad70:	e7d03000 	.word	0xe7d03000
   1ad74:	f7f72016 	.word	0xf7f72016
   1ad78:	f04ffa73 	.word	0xf04ffa73
   1ad7c:	f8d935ff 	.word	0xf8d935ff
   1ad80:	e7c80000 	.word	0xe7c80000
   1ad84:	b11b6803 	.word	0xb11b6803
   1ad88:	f7f84618 	.word	0xf7f84618
   1ad8c:	9800fcb9 	.word	0x9800fcb9
   1ad90:	fcaef7f8 	.word	0xfcaef7f8
   1ad94:	f7f72023 	.word	0xf7f72023
   1ad98:	6823fa63 	.word	0x6823fa63
   1ad9c:	f023200e 	.word	0xf023200e
   1ada0:	60237380 	.word	0x60237380
   1ada4:	35fff04f 	.word	0x35fff04f
   1ada8:	fa5af7f7 	.word	0xfa5af7f7
   1adac:	200ee747 	.word	0x200ee747
   1adb0:	fa56f7f7 	.word	0xfa56f7f7
   1adb4:	35fff04f 	.word	0x35fff04f
   1adb8:	202ae741 	.word	0x202ae741
   1adbc:	fa50f7f7 	.word	0xfa50f7f7
   1adc0:	35fff04f 	.word	0x35fff04f
   1adc4:	2009e73b 	.word	0x2009e73b
   1adc8:	fa4af7f7 	.word	0xfa4af7f7
   1adcc:	35fff04f 	.word	0x35fff04f
   1add0:	2073e735 	.word	0x2073e735
   1add4:	fa44f7f7 	.word	0xfa44f7f7
   1add8:	35fff04f 	.word	0x35fff04f
   1addc:	2005e72f 	.word	0x2005e72f
   1ade0:	fa3ef7f7 	.word	0xfa3ef7f7
   1ade4:	35fff04f 	.word	0x35fff04f
   1ade8:	bf00e729 	.word	0xbf00e729
   1adec:	2002068c 	.word	0x2002068c
   1adf0:	49765443 	.word	0x49765443
   1adf4:	2002d3f8 	.word	0x2002d3f8
   1adf8:	20025e1e 	.word	0x20025e1e
   1adfc:	20020634 	.word	0x20020634

0001ae00 <gnss_interface_init>:
   1ae00:	b5382100 	.word	0xb5382100
   1ae04:	4d0a4c09 	.word	0x4d0a4c09
   1ae08:	480a6822 	.word	0x480a6822
   1ae0c:	402a4b0a 	.word	0x402a4b0a
   1ae10:	80016022 	.word	0x80016022
   1ae14:	f7f86019 	.word	0xf7f86019
   1ae18:	b928fc3b 	.word	0xb928fc3b
   1ae1c:	402b6823 	.word	0x402b6823
   1ae20:	0301f043 	.word	0x0301f043
   1ae24:	bd386023 	.word	0xbd386023
   1ae28:	bd382003 	.word	0xbd382003
   1ae2c:	2002068c 	.word	0x2002068c
   1ae30:	ffff0000 	.word	0xffff0000
   1ae34:	20025e1e 	.word	0x20025e1e
   1ae38:	20020634 	.word	0x20020634

0001ae3c <gnss_interface_open>:
   1ae3c:	b5102801 	.word	0xb5102801
   1ae40:	f5b2d120 	.word	0xf5b2d120
   1ae44:	d11d7f01 	.word	0xd11d7f01
   1ae48:	d11b2902 	.word	0xd11b2902
   1ae4c:	68234c13 	.word	0x68234c13
   1ae50:	2b01b29b 	.word	0x2b01b29b
   1ae54:	6823d11c 	.word	0x6823d11c
   1ae58:	0c1b4608 	.word	0x0c1b4608
   1ae5c:	f043041b 	.word	0xf043041b
   1ae60:	22000302 	.word	0x22000302
   1ae64:	6023490e 	.word	0x6023490e
   1ae68:	fc14f7fa 	.word	0xfc14f7fa
   1ae6c:	60104a0d 	.word	0x60104a0d
   1ae70:	6823b170 	.word	0x6823b170
   1ae74:	f4436802 	.word	0xf4436802
   1ae78:	68123300 	.word	0x68123300
   1ae7c:	47906023 	.word	0x47906023
   1ae80:	bd104809 	.word	0xbd104809
   1ae84:	f7f72016 	.word	0xf7f72016
   1ae88:	f04ff9eb 	.word	0xf04ff9eb
   1ae8c:	bd1030ff 	.word	0xbd1030ff
   1ae90:	f7f7200e 	.word	0xf7f7200e
   1ae94:	f04ff9e5 	.word	0xf04ff9e5
   1ae98:	bd1030ff 	.word	0xbd1030ff
   1ae9c:	2002068c 	.word	0x2002068c
   1aea0:	000138b1 	.word	0x000138b1
   1aea4:	20020690 	.word	0x20020690
   1aea8:	49765443 	.word	0x49765443

0001aeac <gnss_interface_close>:
   1aeac:	4b13b530 	.word	0x4b13b530
   1aeb0:	4298b083 	.word	0x4298b083
   1aeb4:	4c12d11c 	.word	0x4c12d11c
   1aeb8:	b29b6823 	.word	0xb29b6823
   1aebc:	d00f2b04 	.word	0xd00f2b04
   1aec0:	68284d10 	.word	0x68284d10
   1aec4:	f7fab118 	.word	0xf7fab118
   1aec8:	2300fc05 	.word	0x2300fc05
   1aecc:	2000602b 	.word	0x2000602b
   1aed0:	0c1b6823 	.word	0x0c1b6823
   1aed4:	f043041b 	.word	0xf043041b
   1aed8:	60230301 	.word	0x60230301
   1aedc:	bd30b003 	.word	0xbd30b003
   1aee0:	22082300 	.word	0x22082300
   1aee4:	f44f9300 	.word	0xf44f9300
   1aee8:	f7f97101 	.word	0xf7f97101
   1aeec:	e7e7fb87 	.word	0xe7e7fb87
   1aef0:	f7f72009 	.word	0xf7f72009
   1aef4:	f04ff9b5 	.word	0xf04ff9b5
   1aef8:	e7ef30ff 	.word	0xe7ef30ff
   1aefc:	49765443 	.word	0x49765443
   1af00:	2002068c 	.word	0x2002068c
   1af04:	20020690 	.word	0x20020690

0001af08 <rpc_dfu_event_handler>:
   1af08:	4a08b508 	.word	0x4a08b508
   1af0c:	881268c1 	.word	0x881268c1
   1af10:	ebb24603 	.word	0xebb24603
   1af14:	d0054f11 	.word	0xd0054f11
   1af18:	b1106800 	.word	0xb1106800
   1af1c:	f81ef004 	.word	0xf81ef004
   1af20:	bd082000 	.word	0xbd082000
   1af24:	20014a02 	.word	0x20014a02
   1af28:	bd086013 	.word	0xbd086013
   1af2c:	20025e20 	.word	0x20025e20
   1af30:	20020638 	.word	0x20020638

0001af34 <mfu_interface_init>:
   1af34:	b5102300 	.word	0xb5102300
   1af38:	49094808 	.word	0x49094808
   1af3c:	4c0a4a09 	.word	0x4c0a4a09
   1af40:	600b8003 	.word	0x600b8003
   1af44:	60236013 	.word	0x60236013
   1af48:	ffd2f003 	.word	0xffd2f003
   1af4c:	2301b910 	.word	0x2301b910
   1af50:	bd106023 	.word	0xbd106023
   1af54:	30fff04f 	.word	0x30fff04f
   1af58:	bf00bd10 	.word	0xbf00bd10
   1af5c:	20025e20 	.word	0x20025e20
   1af60:	20020638 	.word	0x20020638
   1af64:	2002069c 	.word	0x2002069c
   1af68:	20020694 	.word	0x20020694

0001af6c <mfu_interface_open>:
   1af6c:	b5082801 	.word	0xb5082801
   1af70:	f240d10b 	.word	0xf240d10b
   1af74:	429a2303 	.word	0x429a2303
   1af78:	4b09d107 	.word	0x4b09d107
   1af7c:	2a01681a 	.word	0x2a01681a
   1af80:	2202d109 	.word	0x2202d109
   1af84:	4807601a 	.word	0x4807601a
   1af88:	2016bd08 	.word	0x2016bd08
   1af8c:	f968f7f7 	.word	0xf968f7f7
   1af90:	30fff04f 	.word	0x30fff04f
   1af94:	f7f7bd08 	.word	0xf7f7bd08
   1af98:	f04ff963 	.word	0xf04ff963
   1af9c:	bd0830ff 	.word	0xbd0830ff
   1afa0:	20020694 	.word	0x20020694
   1afa4:	49765432 	.word	0x49765432

0001afa8 <mfu_interface_close>:
   1afa8:	4c32b5f0 	.word	0x4c32b5f0
   1afac:	6823b083 	.word	0x6823b083
   1afb0:	2a011e9a 	.word	0x2a011e9a
   1afb4:	2b03d857 	.word	0x2b03d857
   1afb8:	2301d004 	.word	0x2301d004
   1afbc:	60232000 	.word	0x60232000
   1afc0:	bdf0b003 	.word	0xbdf0b003
   1afc4:	46682100 	.word	0x46682100
   1afc8:	ff98f003 	.word	0xff98f003
   1afcc:	28004603 	.word	0x28004603
   1afd0:	2104d13d 	.word	0x2104d13d
   1afd4:	98004e28 	.word	0x98004e28
   1afd8:	72018832 	.word	0x72018832
   1afdc:	b2923201 	.word	0xb2923201
   1afe0:	f0410411 	.word	0xf0410411
   1afe4:	4d250106 	.word	0x4d250106
   1afe8:	710360c1 	.word	0x710360c1
   1afec:	71837143 	.word	0x71837143
   1aff0:	724371c3 	.word	0x724371c3
   1aff4:	72c37283 	.word	0x72c37283
   1aff8:	80322106 	.word	0x80322106
   1affc:	f003602b 	.word	0xf003602b
   1b000:	b9d8ff91 	.word	0xb9d8ff91
   1b004:	33fff04f 	.word	0x33fff04f
   1b008:	4627ae02 	.word	0x4627ae02
   1b00c:	3d04f846 	.word	0x3d04f846
   1b010:	4631e004 	.word	0x4631e004
   1b014:	f7f74638 	.word	0xf7f74638
   1b018:	b9f0f893 	.word	0xb9f0f893
   1b01c:	28006828 	.word	0x28006828
   1b020:	6905d0f7 	.word	0x6905d0f7
   1b024:	ff92f003 	.word	0xff92f003
   1b028:	d0c62d00 	.word	0xd0c62d00
   1b02c:	20084b14 	.word	0x20084b14
   1b030:	f7f7601d 	.word	0xf7f7601d
   1b034:	f04ff915 	.word	0xf04ff915
   1b038:	e7c130ff 	.word	0xe7c130ff
   1b03c:	68039800 	.word	0x68039800
   1b040:	4618b11b 	.word	0x4618b11b
   1b044:	ff8af003 	.word	0xff8af003
   1b048:	f0039800 	.word	0xf0039800
   1b04c:	200cff7f 	.word	0x200cff7f
   1b050:	f906f7f7 	.word	0xf906f7f7
   1b054:	30fff04f 	.word	0x30fff04f
   1b058:	203ce7b2 	.word	0x203ce7b2
   1b05c:	f900f7f7 	.word	0xf900f7f7
   1b060:	30fff04f 	.word	0x30fff04f
   1b064:	2001e7ac 	.word	0x2001e7ac
   1b068:	f8faf7f7 	.word	0xf8faf7f7
   1b06c:	30fff04f 	.word	0x30fff04f
   1b070:	bf00e7a6 	.word	0xbf00e7a6
   1b074:	20020694 	.word	0x20020694
   1b078:	20025e20 	.word	0x20025e20
   1b07c:	20020638 	.word	0x20020638
   1b080:	20020698 	.word	0x20020698

0001b084 <mfu_interface_sendto>:
   1b084:	47f0e92d 	.word	0x47f0e92d
   1b088:	46154e5a 	.word	0x46154e5a
   1b08c:	b0826833 	.word	0xb0826833
   1b090:	2a011e9a 	.word	0x2a011e9a
   1b094:	80a7f200 	.word	0x80a7f200
   1b098:	2900460f 	.word	0x2900460f
   1b09c:	809df000 	.word	0x809df000
   1b0a0:	f0002d00 	.word	0xf0002d00
   1b0a4:	2b02809a 	.word	0x2b02809a
   1b0a8:	d04e46e8 	.word	0xd04e46e8
   1b0ac:	46294640 	.word	0x46294640
   1b0b0:	ff24f003 	.word	0xff24f003
   1b0b4:	b1404606 	.word	0xb1404606
   1b0b8:	f7f7200c 	.word	0xf7f7200c
   1b0bc:	f04ff8d1 	.word	0xf04ff8d1
   1b0c0:	462835ff 	.word	0x462835ff
   1b0c4:	e8bdb002 	.word	0xe8bdb002
   1b0c8:	9b0087f0 	.word	0x9b0087f0
   1b0cc:	68184639 	.word	0x68184639
   1b0d0:	f009462a 	.word	0xf009462a
   1b0d4:	2104fc85 	.word	0x2104fc85
   1b0d8:	98004c47 	.word	0x98004c47
   1b0dc:	60458823 	.word	0x60458823
   1b0e0:	b29b3301 	.word	0xb29b3301
   1b0e4:	8023041a 	.word	0x8023041a
   1b0e8:	4c44430a 	.word	0x4c44430a
   1b0ec:	724660c2 	.word	0x724660c2
   1b0f0:	72c67286 	.word	0x72c67286
   1b0f4:	60267201 	.word	0x60267201
   1b0f8:	ff14f003 	.word	0xff14f003
   1b0fc:	d1622800 	.word	0xd1622800
   1b100:	33fff04f 	.word	0x33fff04f
   1b104:	4f3bae02 	.word	0x4f3bae02
   1b108:	3d04f846 	.word	0x3d04f846
   1b10c:	4631e004 	.word	0x4631e004
   1b110:	f7f74638 	.word	0xf7f74638
   1b114:	b978f815 	.word	0xb978f815
   1b118:	28006820 	.word	0x28006820
   1b11c:	6904d0f7 	.word	0x6904d0f7
   1b120:	ff14f003 	.word	0xff14f003
   1b124:	d0cc2c00 	.word	0xd0cc2c00
   1b128:	20084b35 	.word	0x20084b35
   1b12c:	f04f601c 	.word	0xf04f601c
   1b130:	f7f735ff 	.word	0xf7f735ff
   1b134:	e7c4f895 	.word	0xe7c4f895
   1b138:	35fff04f 	.word	0x35fff04f
   1b13c:	f7f7203c 	.word	0xf7f7203c
   1b140:	4628f88f 	.word	0x4628f88f
   1b144:	e8bdb002 	.word	0xe8bdb002
   1b148:	464087f0 	.word	0x464087f0
   1b14c:	f0032100 	.word	0xf0032100
   1b150:	4602fed5 	.word	0x4602fed5
   1b154:	d1af2800 	.word	0xd1af2800
   1b158:	0c08f04f 	.word	0x0c08f04f
   1b15c:	48294926 	.word	0x48294926
   1b160:	6804880b 	.word	0x6804880b
   1b164:	98003301 	.word	0x98003301
   1b168:	800bb29b 	.word	0x800bb29b
   1b16c:	f043041b 	.word	0xf043041b
   1b170:	61040303 	.word	0x61040303
   1b174:	60c34c21 	.word	0x60c34c21
   1b178:	71427102 	.word	0x71427102
   1b17c:	71c27182 	.word	0x71c27182
   1b180:	72827242 	.word	0x72827242
   1b184:	f88072c2 	.word	0xf88072c2
   1b188:	2103c008 	.word	0x2103c008
   1b18c:	f0036022 	.word	0xf0036022
   1b190:	b9c0fec9 	.word	0xb9c0fec9
   1b194:	33fff04f 	.word	0x33fff04f
   1b198:	0908f10d 	.word	0x0908f10d
   1b19c:	3d04f849 	.word	0x3d04f849
   1b1a0:	e00546b2 	.word	0xe00546b2
   1b1a4:	46504649 	.word	0x46504649
   1b1a8:	ffcaf7f6 	.word	0xffcaf7f6
   1b1ac:	d1c32800 	.word	0xd1c32800
   1b1b0:	28006820 	.word	0x28006820
   1b1b4:	6904d0f6 	.word	0x6904d0f6
   1b1b8:	fec8f003 	.word	0xfec8f003
   1b1bc:	d1b32c00 	.word	0xd1b32c00
   1b1c0:	60332303 	.word	0x60332303
   1b1c4:	9800e772 	.word	0x9800e772
   1b1c8:	b11b6803 	.word	0xb11b6803
   1b1cc:	f0034618 	.word	0xf0034618
   1b1d0:	9800fec5 	.word	0x9800fec5
   1b1d4:	febaf003 	.word	0xfebaf003
   1b1d8:	2016e76e 	.word	0x2016e76e
   1b1dc:	f840f7f7 	.word	0xf840f7f7
   1b1e0:	35fff04f 	.word	0x35fff04f
   1b1e4:	2001e76d 	.word	0x2001e76d
   1b1e8:	f83af7f7 	.word	0xf83af7f7
   1b1ec:	35fff04f 	.word	0x35fff04f
   1b1f0:	bf00e767 	.word	0xbf00e767
   1b1f4:	20020694 	.word	0x20020694
   1b1f8:	20025e20 	.word	0x20025e20
   1b1fc:	20020638 	.word	0x20020638
   1b200:	20020698 	.word	0x20020698
   1b204:	2002069c 	.word	0x2002069c

0001b208 <mfu_interface_setopt>:
   1b208:	4846b5f0 	.word	0x4846b5f0
   1b20c:	6800b083 	.word	0x6800b083
   1b210:	28013802 	.word	0x28013802
   1b214:	f240d877 	.word	0xf240d877
   1b218:	42812003 	.word	0x42812003
   1b21c:	3a04d16d 	.word	0x3a04d16d
   1b220:	d85c2a03 	.word	0xd85c2a03
   1b224:	f002e8df 	.word	0xf002e8df
   1b228:	514e024b 	.word	0x514e024b
   1b22c:	46252407 	.word	0x46252407
   1b230:	46682100 	.word	0x46682100
   1b234:	fe62f003 	.word	0xfe62f003
   1b238:	28004603 	.word	0x28004603
   1b23c:	2704d138 	.word	0x2704d138
   1b240:	98004e39 	.word	0x98004e39
   1b244:	46298832 	.word	0x46298832
   1b248:	b2923201 	.word	0xb2923201
   1b24c:	4502ea44 	.word	0x4502ea44
   1b250:	60c54c36 	.word	0x60c54c36
   1b254:	71437103 	.word	0x71437103
   1b258:	71c37183 	.word	0x71c37183
   1b25c:	72837243 	.word	0x72837243
   1b260:	720772c3 	.word	0x720772c3
   1b264:	60238032 	.word	0x60238032
   1b268:	fe5cf003 	.word	0xfe5cf003
   1b26c:	f04fb9b8 	.word	0xf04fb9b8
   1b270:	ad0233ff 	.word	0xad0233ff
   1b274:	f8454e2b 	.word	0xf8454e2b
   1b278:	e0053d04 	.word	0xe0053d04
   1b27c:	46304629 	.word	0x46304629
   1b280:	ff5ef7f6 	.word	0xff5ef7f6
   1b284:	d1312800 	.word	0xd1312800
   1b288:	28006820 	.word	0x28006820
   1b28c:	6904d0f6 	.word	0x6904d0f6
   1b290:	fe5cf003 	.word	0xfe5cf003
   1b294:	d13c2c00 	.word	0xd13c2c00
   1b298:	b0034620 	.word	0xb0034620
   1b29c:	9800bdf0 	.word	0x9800bdf0
   1b2a0:	b11b6803 	.word	0xb11b6803
   1b2a4:	f0034618 	.word	0xf0034618
   1b2a8:	9800fe59 	.word	0x9800fe59
   1b2ac:	fe4ef003 	.word	0xfe4ef003
   1b2b0:	f7f6200c 	.word	0xf7f6200c
   1b2b4:	f04fffd5 	.word	0xf04fffd5
   1b2b8:	b00330ff 	.word	0xb00330ff
   1b2bc:	2405bdf0 	.word	0x2405bdf0
   1b2c0:	e7b54625 	.word	0xe7b54625
   1b2c4:	46252408 	.word	0x46252408
   1b2c8:	b1b3e7b2 	.word	0xb1b3e7b2
   1b2cc:	2a049a08 	.word	0x2a049a08
   1b2d0:	2000d113 	.word	0x2000d113
   1b2d4:	4b16681a 	.word	0x4b16681a
   1b2d8:	b003601a 	.word	0xb003601a
   1b2dc:	202abdf0 	.word	0x202abdf0
   1b2e0:	ffbef7f6 	.word	0xffbef7f6
   1b2e4:	30fff04f 	.word	0x30fff04f
   1b2e8:	bdf0b003 	.word	0xbdf0b003
   1b2ec:	f7f6203c 	.word	0xf7f6203c
   1b2f0:	f04fffb7 	.word	0xf04fffb7
   1b2f4:	b00330ff 	.word	0xb00330ff
   1b2f8:	2016bdf0 	.word	0x2016bdf0
   1b2fc:	ffb0f7f6 	.word	0xffb0f7f6
   1b300:	30fff04f 	.word	0x30fff04f
   1b304:	2001e7c9 	.word	0x2001e7c9
   1b308:	ffaaf7f6 	.word	0xffaaf7f6
   1b30c:	30fff04f 	.word	0x30fff04f
   1b310:	4b08e7c3 	.word	0x4b08e7c3
   1b314:	601c2008 	.word	0x601c2008
   1b318:	ffa2f7f6 	.word	0xffa2f7f6
   1b31c:	30fff04f 	.word	0x30fff04f
   1b320:	bf00e7bb 	.word	0xbf00e7bb
   1b324:	20020694 	.word	0x20020694
   1b328:	20025e20 	.word	0x20025e20
   1b32c:	20020638 	.word	0x20020638
   1b330:	2002069c 	.word	0x2002069c
   1b334:	20020698 	.word	0x20020698

0001b338 <mfu_interface_getopt>:
   1b338:	2003f240 	.word	0x2003f240
   1b33c:	41f0e92d 	.word	0x41f0e92d
   1b340:	b0824281 	.word	0xb0824281
   1b344:	f0409e08 	.word	0xf0409e08
   1b348:	461d80ae 	.word	0x461d80ae
   1b34c:	f0002b00 	.word	0xf0002b00
   1b350:	2e0080aa 	.word	0x2e0080aa
   1b354:	80a7f000 	.word	0x80a7f000
   1b358:	681b4b5e 	.word	0x681b4b5e
   1b35c:	2b013b02 	.word	0x2b013b02
   1b360:	80a7f200 	.word	0x80a7f200
   1b364:	2a133a01 	.word	0x2a133a01
   1b368:	e8dfd879 	.word	0xe8dfd879
   1b36c:	5f17f002 	.word	0x5f17f002
   1b370:	78787878 	.word	0x78787878
   1b374:	78787872 	.word	0x78787872
   1b378:	78787878 	.word	0x78787878
   1b37c:	78787878 	.word	0x78787878
   1b380:	68330a78 	.word	0x68330a78
   1b384:	f0402b04 	.word	0xf0402b04
   1b388:	2200808e 	.word	0x2200808e
   1b38c:	4b524610 	.word	0x4b524610
   1b390:	601a6819 	.word	0x601a6819
   1b394:	b0026029 	.word	0xb0026029
   1b398:	81f0e8bd 	.word	0x81f0e8bd
   1b39c:	2b246833 	.word	0x2b246833
   1b3a0:	8081f040 	.word	0x8081f040
   1b3a4:	46a02401 	.word	0x46a02401
   1b3a8:	46682100 	.word	0x46682100
   1b3ac:	fda6f003 	.word	0xfda6f003
   1b3b0:	d1462800 	.word	0xd1462800
   1b3b4:	9b004949 	.word	0x9b004949
   1b3b8:	f1b8880a 	.word	0xf1b8880a
   1b3bc:	f1020f03 	.word	0xf1020f03
   1b3c0:	b2920201 	.word	0xb2920201
   1b3c4:	4402ea44 	.word	0x4402ea44
   1b3c8:	800a7118 	.word	0x800a7118
   1b3cc:	715860dc 	.word	0x715860dc
   1b3d0:	71d87198 	.word	0x71d87198
   1b3d4:	2104d04b 	.word	0x2104d04b
   1b3d8:	4f412200 	.word	0x4f412200
   1b3dc:	46186099 	.word	0x46186099
   1b3e0:	603a4641 	.word	0x603a4641
   1b3e4:	fd9ef003 	.word	0xfd9ef003
   1b3e8:	d14d2800 	.word	0xd14d2800
   1b3ec:	33fff04f 	.word	0x33fff04f
   1b3f0:	f844ac02 	.word	0xf844ac02
   1b3f4:	f8df3d04 	.word	0xf8df3d04
   1b3f8:	e00580dc 	.word	0xe00580dc
   1b3fc:	46404621 	.word	0x46404621
   1b400:	fe9ef7f6 	.word	0xfe9ef7f6
   1b404:	d1372800 	.word	0xd1372800
   1b408:	29006839 	.word	0x29006839
   1b40c:	690cd0f6 	.word	0x690cd0f6
   1b410:	d1542c00 	.word	0xd1542c00
   1b414:	31146832 	.word	0x31146832
   1b418:	f0094628 	.word	0xf0094628
   1b41c:	6838fae1 	.word	0x6838fae1
   1b420:	fd94f003 	.word	0xfd94f003
   1b424:	b0024620 	.word	0xb0024620
   1b428:	81f0e8bd 	.word	0x81f0e8bd
   1b42c:	2b046833 	.word	0x2b046833
   1b430:	2402d139 	.word	0x2402d139
   1b434:	46682100 	.word	0x46682100
   1b438:	f00346a0 	.word	0xf00346a0
   1b43c:	2800fd5f 	.word	0x2800fd5f
   1b440:	200cd0b8 	.word	0x200cd0b8
   1b444:	ff0cf7f6 	.word	0xff0cf7f6
   1b448:	30fff04f 	.word	0x30fff04f
   1b44c:	e8bdb002 	.word	0xe8bdb002
   1b450:	683381f0 	.word	0x683381f0
   1b454:	d1262b04 	.word	0xd1262b04
   1b458:	46a02409 	.word	0x46a02409
   1b45c:	202ae7a4 	.word	0x202ae7a4
   1b460:	fefef7f6 	.word	0xfefef7f6
   1b464:	30fff04f 	.word	0x30fff04f
   1b468:	e8bdb002 	.word	0xe8bdb002
   1b46c:	4a1d81f0 	.word	0x4a1d81f0
   1b470:	68122108 	.word	0x68122108
   1b474:	e7af611a 	.word	0xe7af611a
   1b478:	f7f6203c 	.word	0xf7f6203c
   1b47c:	f04ffef1 	.word	0xf04ffef1
   1b480:	b00230ff 	.word	0xb00230ff
   1b484:	81f0e8bd 	.word	0x81f0e8bd
   1b488:	68039800 	.word	0x68039800
   1b48c:	4618b11b 	.word	0x4618b11b
   1b490:	fd64f003 	.word	0xfd64f003
   1b494:	f0039800 	.word	0xf0039800
   1b498:	200cfd59 	.word	0x200cfd59
   1b49c:	fee0f7f6 	.word	0xfee0f7f6
   1b4a0:	30fff04f 	.word	0x30fff04f
   1b4a4:	2016e7d2 	.word	0x2016e7d2
   1b4a8:	fedaf7f6 	.word	0xfedaf7f6
   1b4ac:	30fff04f 	.word	0x30fff04f
   1b4b0:	2001e771 	.word	0x2001e771
   1b4b4:	fed4f7f6 	.word	0xfed4f7f6
   1b4b8:	30fff04f 	.word	0x30fff04f
   1b4bc:	4b06e76b 	.word	0x4b06e76b
   1b4c0:	601c2008 	.word	0x601c2008
   1b4c4:	feccf7f6 	.word	0xfeccf7f6
   1b4c8:	f0036838 	.word	0xf0036838
   1b4cc:	f04ffd3f 	.word	0xf04ffd3f
   1b4d0:	e76030ff 	.word	0xe76030ff
   1b4d4:	20020694 	.word	0x20020694
   1b4d8:	20020698 	.word	0x20020698
   1b4dc:	20025e20 	.word	0x20025e20
   1b4e0:	20020638 	.word	0x20020638
   1b4e4:	2002069c 	.word	0x2002069c

0001b4e8 <unimplemented_method>:
   1b4e8:	b508b40f 	.word	0xb508b40f
   1b4ec:	f7f6202d 	.word	0xf7f6202d
   1b4f0:	e8bdfeb7 	.word	0xe8bdfeb7
   1b4f4:	f04f4008 	.word	0xf04f4008
   1b4f8:	b00430ff 	.word	0xb00430ff
   1b4fc:	bf004770 	.word	0xbf004770

0001b500 <bsd_platform_init>:
   1b500:	b093b5f0 	.word	0xb093b5f0
   1b504:	ff62f003 	.word	0xff62f003
   1b508:	d1522800 	.word	0xd1522800
   1b50c:	a801492b 	.word	0xa801492b
   1b510:	ffd0f003 	.word	0xffd0f003
   1b514:	d14c2800 	.word	0xd14c2800
   1b518:	ff8ef7f6 	.word	0xff8ef7f6
   1b51c:	f814f003 	.word	0xf814f003
   1b520:	d1462800 	.word	0xd1462800
   1b524:	f44f2320 	.word	0xf44f2320
   1b528:	22084180 	.word	0x22084180
   1b52c:	5c40f44f 	.word	0x5c40f44f
   1b530:	4e244f23 	.word	0x4e244f23
   1b534:	93059303 	.word	0x93059303
   1b538:	4d239307 	.word	0x4d239307
   1b53c:	910d9109 	.word	0x910d9109
   1b540:	49234c22 	.word	0x49234c22
   1b544:	e9cd4b23 	.word	0xe9cd4b23
   1b548:	eb0d0010 	.word	0xeb0d0010
   1b54c:	f8cd0002 	.word	0xf8cd0002
   1b550:	e9cdc02c 	.word	0xe9cdc02c
   1b554:	9702220e 	.word	0x9702220e
   1b558:	95069604 	.word	0x95069604
   1b55c:	910a9408 	.word	0x910a9408
   1b560:	f7f8930c 	.word	0xf7f8930c
   1b564:	b108ff0d 	.word	0xb108ff0d
   1b568:	bdf0b013 	.word	0xbdf0b013
   1b56c:	fd8af7fc 	.word	0xfd8af7fc
   1b570:	f7f8b9f8 	.word	0xf7f8b9f8
   1b574:	b9e0f9fd 	.word	0xb9e0f9fd
   1b578:	f832f7fd 	.word	0xf832f7fd
   1b57c:	f7fab9c8 	.word	0xf7fab9c8
   1b580:	b9b0f965 	.word	0xb9b0f965
   1b584:	fcd6f7ff 	.word	0xfcd6f7ff
   1b588:	f7f7b998 	.word	0xf7f7b998
   1b58c:	b980fff9 	.word	0xb980fff9
   1b590:	f8e6f000 	.word	0xf8e6f000
   1b594:	f005b968 	.word	0xf005b968
   1b598:	b950f90f 	.word	0xb950f90f
   1b59c:	fc30f7ff 	.word	0xfc30f7ff
   1b5a0:	f7f8b938 	.word	0xf7f8b938
   1b5a4:	3000fbe9 	.word	0x3000fbe9
   1b5a8:	2001bf18 	.word	0x2001bf18
   1b5ac:	b0134240 	.word	0xb0134240
   1b5b0:	f04fbdf0 	.word	0xf04fbdf0
   1b5b4:	b01330ff 	.word	0xb01330ff
   1b5b8:	bf00bdf0 	.word	0xbf00bdf0
   1b5bc:	00026d8c 	.word	0x00026d8c
   1b5c0:	20010000 	.word	0x20010000
   1b5c4:	20010040 	.word	0x20010040
   1b5c8:	20010020 	.word	0x20010020
   1b5cc:	20017060 	.word	0x20017060
   1b5d0:	20010060 	.word	0x20010060
   1b5d4:	20013060 	.word	0x20013060

0001b5d8 <bsd_platform_af_method_table_get>:
   1b5d8:	d02a2805 	.word	0xd02a2805
   1b5dc:	d914b508 	.word	0xd914b508
   1b5e0:	d016280a 	.word	0xd016280a
   1b5e4:	d10b2866 	.word	0xd10b2866
   1b5e8:	2302f240 	.word	0x2302f240
   1b5ec:	d032429a 	.word	0xd032429a
   1b5f0:	2305f240 	.word	0x2305f240
   1b5f4:	d032429a 	.word	0xd032429a
   1b5f8:	2301f240 	.word	0x2301f240
   1b5fc:	d02c429a 	.word	0xd02c429a
   1b600:	f7f62016 	.word	0xf7f62016
   1b604:	2000fe2d 	.word	0x2000fe2d
   1b608:	2801bd08 	.word	0x2801bd08
   1b60c:	2802d016 	.word	0x2802d016
   1b610:	f5a2d1f6 	.word	0xf5a2d1f6
   1b614:	2a0a7282 	.word	0x2a0a7282
   1b618:	2301d819 	.word	0x2301d819
   1b61c:	4103f240 	.word	0x4103f240
   1b620:	fa034810 	.word	0xfa034810
   1b624:	420af202 	.word	0x420af202
   1b628:	0328f100 	.word	0x0328f100
   1b62c:	4618bf18 	.word	0x4618bf18
   1b630:	2903bd08 	.word	0x2903bd08
   1b634:	bf18480c 	.word	0xbf18480c
   1b638:	47702000 	.word	0x47702000
   1b63c:	2303f240 	.word	0x2303f240
   1b640:	d006429a 	.word	0xd006429a
   1b644:	7f01f5b2 	.word	0x7f01f5b2
   1b648:	4808d1da 	.word	0x4808d1da
   1b64c:	4805bd08 	.word	0x4805bd08
   1b650:	4807bd08 	.word	0x4807bd08
   1b654:	4807bd08 	.word	0x4807bd08
   1b658:	4807bd08 	.word	0x4807bd08
   1b65c:	4807bd08 	.word	0x4807bd08
   1b660:	bf00bd08 	.word	0xbf00bd08
   1b664:	00026c58 	.word	0x00026c58
   1b668:	00026d48 	.word	0x00026d48
   1b66c:	00026cf8 	.word	0x00026cf8
   1b670:	00026ca8 	.word	0x00026ca8
   1b674:	00026cd0 	.word	0x00026cd0
   1b678:	00026c30 	.word	0x00026c30
   1b67c:	00026d20 	.word	0x00026d20

0001b680 <bsd_platform_fd_method_table_get>:
   1b680:	4605b538 	.word	0x4605b538
   1b684:	fe1af7fc 	.word	0xfe1af7fc
   1b688:	b9504604 	.word	0xb9504604
   1b68c:	43ab4b2a 	.word	0x43ab4b2a
   1b690:	4b2ad032 	.word	0x4b2ad032
   1b694:	d04343ab 	.word	0xd04343ab
   1b698:	43ab4b29 	.word	0x43ab4b29
   1b69c:	4829d146 	.word	0x4829d146
   1b6a0:	68c3bd38 	.word	0x68c3bd38
   1b6a4:	2b056942 	.word	0x2b056942
   1b6a8:	d911d034 	.word	0xd911d034
   1b6ac:	d0132b0a 	.word	0xd0132b0a
   1b6b0:	d12a2b66 	.word	0xd12a2b66
   1b6b4:	2302f240 	.word	0x2302f240
   1b6b8:	d031429a 	.word	0xd031429a
   1b6bc:	2305f240 	.word	0x2305f240
   1b6c0:	d031429a 	.word	0xd031429a
   1b6c4:	2301f240 	.word	0x2301f240
   1b6c8:	d11e429a 	.word	0xd11e429a
   1b6cc:	bd38481e 	.word	0xbd38481e
   1b6d0:	d0132b01 	.word	0xd0132b01
   1b6d4:	d1182b02 	.word	0xd1182b02
   1b6d8:	7282f5a2 	.word	0x7282f5a2
   1b6dc:	d8212a0a 	.word	0xd8212a0a
   1b6e0:	f2402301 	.word	0xf2402301
   1b6e4:	48194103 	.word	0x48194103
   1b6e8:	f202fa03 	.word	0xf202fa03
   1b6ec:	f100420a 	.word	0xf100420a
   1b6f0:	bf180428 	.word	0xbf180428
   1b6f4:	bd384620 	.word	0xbd384620
   1b6f8:	bd384815 	.word	0xbd384815
   1b6fc:	2303f240 	.word	0x2303f240
   1b700:	d0f9429a 	.word	0xd0f9429a
   1b704:	7f01f5b2 	.word	0x7f01f5b2
   1b708:	2016d0c9 	.word	0x2016d0c9
   1b70c:	fda8f7f6 	.word	0xfda8f7f6
   1b710:	bd382000 	.word	0xbd382000
   1b714:	480f6903 	.word	0x480f6903
   1b718:	bf182b03 	.word	0xbf182b03
   1b71c:	bd382000 	.word	0xbd382000
   1b720:	bd38480d 	.word	0xbd38480d
   1b724:	bd384809 	.word	0xbd384809
   1b728:	bd38480c 	.word	0xbd38480c
   1b72c:	f7f62009 	.word	0xf7f62009
   1b730:	4620fd97 	.word	0x4620fd97
   1b734:	bf00bd38 	.word	0xbf00bd38
   1b738:	49765432 	.word	0x49765432
   1b73c:	789a0000 	.word	0x789a0000
   1b740:	49765443 	.word	0x49765443
   1b744:	00026cf8 	.word	0x00026cf8
   1b748:	00026c30 	.word	0x00026c30
   1b74c:	00026c58 	.word	0x00026c58
   1b750:	00026ca8 	.word	0x00026ca8
   1b754:	00026d48 	.word	0x00026d48
   1b758:	00026cd0 	.word	0x00026cd0
   1b75c:	00026d20 	.word	0x00026d20

0001b760 <nrf_inbuilt_key_init>:
   1b760:	b086b570 	.word	0xb086b570
   1b764:	a802491d 	.word	0xa802491d
   1b768:	fea4f003 	.word	0xfea4f003
   1b76c:	4601bb00 	.word	0x4601bb00
   1b770:	f2404604 	.word	0xf2404604
   1b774:	20662201 	.word	0x20662201
   1b778:	f8fcf7f8 	.word	0xf8fcf7f8
   1b77c:	28004e18 	.word	0x28004e18
   1b780:	60304605 	.word	0x60304605
   1b784:	4817db10 	.word	0x4817db10
   1b788:	f8f6f009 	.word	0xf8f6f009
   1b78c:	46024623 	.word	0x46024623
   1b790:	46284914 	.word	0x46284914
   1b794:	94009401 	.word	0x94009401
   1b798:	f896f7f8 	.word	0xf896f7f8
   1b79c:	48114605 	.word	0x48114605
   1b7a0:	f8eaf009 	.word	0xf8eaf009
   1b7a4:	d00742a8 	.word	0xd00742a8
   1b7a8:	46202405 	.word	0x46202405
   1b7ac:	bd70b006 	.word	0xbd70b006
   1b7b0:	46202469 	.word	0x46202469
   1b7b4:	bd70b006 	.word	0xbd70b006
   1b7b8:	e9cd6830 	.word	0xe9cd6830
   1b7bc:	a9034400 	.word	0xa9034400
   1b7c0:	220a4623 	.word	0x220a4623
   1b7c4:	f968f7f8 	.word	0xf968f7f8
   1b7c8:	dded2801 	.word	0xdded2801
   1b7cc:	2202a803 	.word	0x2202a803
   1b7d0:	f0094905 	.word	0xf0094905
   1b7d4:	2800f8e6 	.word	0x2800f8e6
   1b7d8:	e7e5d0e7 	.word	0xe7e5d0e7
   1b7dc:	2002d400 	.word	0x2002d400
   1b7e0:	2002d3fc 	.word	0x2002d3fc
   1b7e4:	00026da0 	.word	0x00026da0
   1b7e8:	00026980 	.word	0x00026980

0001b7ec <symbol_0005436>:
   1b7ec:	460a4b02 	.word	0x460a4b02
   1b7f0:	2100681b 	.word	0x2100681b
   1b7f4:	bf004718 	.word	0xbf004718
   1b7f8:	2002d414 	.word	0x2002d414

0001b7fc <mpi_mul_hlp>:
   1b7fc:	e92d280f 	.word	0xe92d280f
   1b800:	46864ff0 	.word	0x46864ff0
   1b804:	82e0f240 	.word	0x82e0f240
   1b808:	0800f04f 	.word	0x0800f04f
   1b80c:	f1014684 	.word	0xf1014684
   1b810:	f1020440 	.word	0xf1020440
   1b814:	f8540040 	.word	0xf8540040
   1b818:	f8506c40 	.word	0xf8506c40
   1b81c:	fba35c40 	.word	0xfba35c40
   1b820:	eb186706 	.word	0xeb186706
   1b824:	bf2c0806 	.word	0xbf2c0806
   1b828:	0901f04f 	.word	0x0901f04f
   1b82c:	0900f04f 	.word	0x0900f04f
   1b830:	0508eb15 	.word	0x0508eb15
   1b834:	f04f444f 	.word	0xf04f444f
   1b838:	bf280900 	.word	0xbf280900
   1b83c:	0901f04f 	.word	0x0901f04f
   1b840:	5c40f840 	.word	0x5c40f840
   1b844:	6c3cf854 	.word	0x6c3cf854
   1b848:	fba344b9 	.word	0xfba344b9
   1b84c:	eb19ab06 	.word	0xeb19ab06
   1b850:	bf2c090a 	.word	0xbf2c090a
   1b854:	0801f04f 	.word	0x0801f04f
   1b858:	0800f04f 	.word	0x0800f04f
   1b85c:	6c3cf850 	.word	0x6c3cf850
   1b860:	050beb08 	.word	0x050beb08
   1b864:	0609eb16 	.word	0x0609eb16
   1b868:	0800f04f 	.word	0x0800f04f
   1b86c:	f04fbf28 	.word	0xf04fbf28
   1b870:	f8400801 	.word	0xf8400801
   1b874:	f8546c3c 	.word	0xf8546c3c
   1b878:	44a86c38 	.word	0x44a86c38
   1b87c:	6706fba3 	.word	0x6706fba3
   1b880:	0806eb18 	.word	0x0806eb18
   1b884:	f04fbf2c 	.word	0xf04fbf2c
   1b888:	f04f0901 	.word	0xf04f0901
   1b88c:	f8500900 	.word	0xf8500900
   1b890:	444f5c38 	.word	0x444f5c38
   1b894:	0508eb15 	.word	0x0508eb15
   1b898:	0900f04f 	.word	0x0900f04f
   1b89c:	f04fbf28 	.word	0xf04fbf28
   1b8a0:	f8400901 	.word	0xf8400901
   1b8a4:	f8545c38 	.word	0xf8545c38
   1b8a8:	44b96c34 	.word	0x44b96c34
   1b8ac:	ab06fba3 	.word	0xab06fba3
   1b8b0:	090aeb19 	.word	0x090aeb19
   1b8b4:	f04fbf2c 	.word	0xf04fbf2c
   1b8b8:	f04f0801 	.word	0xf04f0801
   1b8bc:	f8500800 	.word	0xf8500800
   1b8c0:	eb086c34 	.word	0xeb086c34
   1b8c4:	eb16050b 	.word	0xeb16050b
   1b8c8:	f04f0609 	.word	0xf04f0609
   1b8cc:	bf280800 	.word	0xbf280800
   1b8d0:	0801f04f 	.word	0x0801f04f
   1b8d4:	6c34f840 	.word	0x6c34f840
   1b8d8:	6c30f854 	.word	0x6c30f854
   1b8dc:	fba344a8 	.word	0xfba344a8
   1b8e0:	eb186706 	.word	0xeb186706
   1b8e4:	bf2c0806 	.word	0xbf2c0806
   1b8e8:	0901f04f 	.word	0x0901f04f
   1b8ec:	0900f04f 	.word	0x0900f04f
   1b8f0:	5c30f850 	.word	0x5c30f850
   1b8f4:	eb15444f 	.word	0xeb15444f
   1b8f8:	f04f0508 	.word	0xf04f0508
   1b8fc:	bf280900 	.word	0xbf280900
   1b900:	0901f04f 	.word	0x0901f04f
   1b904:	5c30f840 	.word	0x5c30f840
   1b908:	6c2cf854 	.word	0x6c2cf854
   1b90c:	fba344b9 	.word	0xfba344b9
   1b910:	eb19ab06 	.word	0xeb19ab06
   1b914:	bf2c090a 	.word	0xbf2c090a
   1b918:	0801f04f 	.word	0x0801f04f
   1b91c:	0800f04f 	.word	0x0800f04f
   1b920:	6c2cf850 	.word	0x6c2cf850
   1b924:	050beb08 	.word	0x050beb08
   1b928:	0609eb16 	.word	0x0609eb16
   1b92c:	0800f04f 	.word	0x0800f04f
   1b930:	f04fbf28 	.word	0xf04fbf28
   1b934:	f8400801 	.word	0xf8400801
   1b938:	f8546c2c 	.word	0xf8546c2c
   1b93c:	44a86c28 	.word	0x44a86c28
   1b940:	6706fba3 	.word	0x6706fba3
   1b944:	0806eb18 	.word	0x0806eb18
   1b948:	f04fbf2c 	.word	0xf04fbf2c
   1b94c:	f04f0901 	.word	0xf04f0901
   1b950:	f8500900 	.word	0xf8500900
   1b954:	444f5c28 	.word	0x444f5c28
   1b958:	0508eb15 	.word	0x0508eb15
   1b95c:	0900f04f 	.word	0x0900f04f
   1b960:	f04fbf28 	.word	0xf04fbf28
   1b964:	f8400901 	.word	0xf8400901
   1b968:	f8545c28 	.word	0xf8545c28
   1b96c:	44b96c24 	.word	0x44b96c24
   1b970:	ab06fba3 	.word	0xab06fba3
   1b974:	090aeb19 	.word	0x090aeb19
   1b978:	f04fbf2c 	.word	0xf04fbf2c
   1b97c:	f04f0801 	.word	0xf04f0801
   1b980:	f8500800 	.word	0xf8500800
   1b984:	eb086c24 	.word	0xeb086c24
   1b988:	eb16050b 	.word	0xeb16050b
   1b98c:	f04f0609 	.word	0xf04f0609
   1b990:	bf280800 	.word	0xbf280800
   1b994:	0801f04f 	.word	0x0801f04f
   1b998:	6c24f840 	.word	0x6c24f840
   1b99c:	6c20f854 	.word	0x6c20f854
   1b9a0:	fba344a8 	.word	0xfba344a8
   1b9a4:	eb186706 	.word	0xeb186706
   1b9a8:	bf2c0806 	.word	0xbf2c0806
   1b9ac:	0901f04f 	.word	0x0901f04f
   1b9b0:	0900f04f 	.word	0x0900f04f
   1b9b4:	5c20f850 	.word	0x5c20f850
   1b9b8:	eb15444f 	.word	0xeb15444f
   1b9bc:	f04f0508 	.word	0xf04f0508
   1b9c0:	bf280900 	.word	0xbf280900
   1b9c4:	0901f04f 	.word	0x0901f04f
   1b9c8:	5c20f840 	.word	0x5c20f840
   1b9cc:	6c1cf854 	.word	0x6c1cf854
   1b9d0:	fba344b9 	.word	0xfba344b9
   1b9d4:	eb19ab06 	.word	0xeb19ab06
   1b9d8:	bf2c090a 	.word	0xbf2c090a
   1b9dc:	0801f04f 	.word	0x0801f04f
   1b9e0:	0800f04f 	.word	0x0800f04f
   1b9e4:	6c1cf850 	.word	0x6c1cf850
   1b9e8:	050beb08 	.word	0x050beb08
   1b9ec:	0609eb16 	.word	0x0609eb16
   1b9f0:	0800f04f 	.word	0x0800f04f
   1b9f4:	f04fbf28 	.word	0xf04fbf28
   1b9f8:	f8400801 	.word	0xf8400801
   1b9fc:	f8546c1c 	.word	0xf8546c1c
   1ba00:	44a86c18 	.word	0x44a86c18
   1ba04:	6706fba3 	.word	0x6706fba3
   1ba08:	0806eb18 	.word	0x0806eb18
   1ba0c:	f04fbf2c 	.word	0xf04fbf2c
   1ba10:	f04f0901 	.word	0xf04f0901
   1ba14:	f8500900 	.word	0xf8500900
   1ba18:	444f5c18 	.word	0x444f5c18
   1ba1c:	0508eb15 	.word	0x0508eb15
   1ba20:	0900f04f 	.word	0x0900f04f
   1ba24:	f04fbf28 	.word	0xf04fbf28
   1ba28:	f8400901 	.word	0xf8400901
   1ba2c:	f8545c18 	.word	0xf8545c18
   1ba30:	44b96c14 	.word	0x44b96c14
   1ba34:	ab06fba3 	.word	0xab06fba3
   1ba38:	090aeb19 	.word	0x090aeb19
   1ba3c:	f04fbf2c 	.word	0xf04fbf2c
   1ba40:	f04f0801 	.word	0xf04f0801
   1ba44:	f8500800 	.word	0xf8500800
   1ba48:	eb086c14 	.word	0xeb086c14
   1ba4c:	eb16050b 	.word	0xeb16050b
   1ba50:	f04f0609 	.word	0xf04f0609
   1ba54:	bf280800 	.word	0xbf280800
   1ba58:	0801f04f 	.word	0x0801f04f
   1ba5c:	6c14f840 	.word	0x6c14f840
   1ba60:	6c10f854 	.word	0x6c10f854
   1ba64:	fba344a8 	.word	0xfba344a8
   1ba68:	eb186706 	.word	0xeb186706
   1ba6c:	bf2c0806 	.word	0xbf2c0806
   1ba70:	0901f04f 	.word	0x0901f04f
   1ba74:	0900f04f 	.word	0x0900f04f
   1ba78:	5c10f850 	.word	0x5c10f850
   1ba7c:	eb15444f 	.word	0xeb15444f
   1ba80:	f04f0508 	.word	0xf04f0508
   1ba84:	bf280900 	.word	0xbf280900
   1ba88:	0901f04f 	.word	0x0901f04f
   1ba8c:	5c10f840 	.word	0x5c10f840
   1ba90:	6c0cf854 	.word	0x6c0cf854
   1ba94:	fba344b9 	.word	0xfba344b9
   1ba98:	eb19ab06 	.word	0xeb19ab06
   1ba9c:	bf2c090a 	.word	0xbf2c090a
   1baa0:	0801f04f 	.word	0x0801f04f
   1baa4:	0800f04f 	.word	0x0800f04f
   1baa8:	6c0cf850 	.word	0x6c0cf850
   1baac:	050beb08 	.word	0x050beb08
   1bab0:	0609eb16 	.word	0x0609eb16
   1bab4:	0800f04f 	.word	0x0800f04f
   1bab8:	f04fbf28 	.word	0xf04fbf28
   1babc:	f8400801 	.word	0xf8400801
   1bac0:	f8546c0c 	.word	0xf8546c0c
   1bac4:	44a86c08 	.word	0x44a86c08
   1bac8:	6706fba3 	.word	0x6706fba3
   1bacc:	0806eb18 	.word	0x0806eb18
   1bad0:	f04fbf2c 	.word	0xf04fbf2c
   1bad4:	f04f0901 	.word	0xf04f0901
   1bad8:	f8500900 	.word	0xf8500900
   1badc:	444f5c08 	.word	0x444f5c08
   1bae0:	0508eb15 	.word	0x0508eb15
   1bae4:	0900f04f 	.word	0x0900f04f
   1bae8:	f04fbf28 	.word	0xf04fbf28
   1baec:	f8400901 	.word	0xf8400901
   1baf0:	f8545c08 	.word	0xf8545c08
   1baf4:	44b96c04 	.word	0x44b96c04
   1baf8:	ab06fba3 	.word	0xab06fba3
   1bafc:	090aeb19 	.word	0x090aeb19
   1bb00:	f04fbf2c 	.word	0xf04fbf2c
   1bb04:	f04f0801 	.word	0xf04f0801
   1bb08:	f8500800 	.word	0xf8500800
   1bb0c:	eb086c04 	.word	0xeb086c04
   1bb10:	eb16050b 	.word	0xeb16050b
   1bb14:	f04f0609 	.word	0xf04f0609
   1bb18:	bf280800 	.word	0xbf280800
   1bb1c:	0801f04f 	.word	0x0801f04f
   1bb20:	0c10f1ac 	.word	0x0c10f1ac
   1bb24:	0f0ff1bc 	.word	0x0f0ff1bc
   1bb28:	6c04f840 	.word	0x6c04f840
   1bb2c:	f10444a8 	.word	0xf10444a8
   1bb30:	f1000440 	.word	0xf1000440
   1bb34:	f63f0040 	.word	0xf63f0040
   1bb38:	f1aeae6e 	.word	0xf1aeae6e
   1bb3c:	09000010 	.word	0x09000010
   1bb40:	01803001 	.word	0x01803001
   1bb44:	44024401 	.word	0x44024401
   1bb48:	000ff00e 	.word	0x000ff00e
   1bb4c:	68172807 	.word	0x68172807
   1bb50:	8092f240 	.word	0x8092f240
   1bb54:	6856680c 	.word	0x6856680c
   1bb58:	9a04fba3 	.word	0x9a04fba3
   1bb5c:	0809eb18 	.word	0x0809eb18
   1bb60:	f04fbf2c 	.word	0xf04fbf2c
   1bb64:	f04f0c01 	.word	0xf04f0c01
   1bb68:	eb170c00 	.word	0xeb170c00
   1bb6c:	bf2c0708 	.word	0xbf2c0708
   1bb70:	24002401 	.word	0x24002401
   1bb74:	684f6017 	.word	0x684f6017
   1bb78:	050ceb0a 	.word	0x050ceb0a
   1bb7c:	8907fba3 	.word	0x8907fba3
   1bb80:	eb14442c 	.word	0xeb14442c
   1bb84:	bf2c0408 	.word	0xbf2c0408
   1bb88:	25002501 	.word	0x25002501
   1bb8c:	eb0519a6 	.word	0xeb0519a6
   1bb90:	f04f0709 	.word	0xf04f0709
   1bb94:	bf280500 	.word	0xbf280500
   1bb98:	60562501 	.word	0x60562501
   1bb9c:	443d688e 	.word	0x443d688e
   1bba0:	7806fba3 	.word	0x7806fba3
   1bba4:	bf2c19ed 	.word	0xbf2c19ed
   1bba8:	24002401 	.word	0x24002401
   1bbac:	eb086896 	.word	0xeb086896
   1bbb0:	19ad0704 	.word	0x19ad0704
   1bbb4:	0400f04f 	.word	0x0400f04f
   1bbb8:	2401bf28 	.word	0x2401bf28
   1bbbc:	68ce6095 	.word	0x68ce6095
   1bbc0:	fba3443c 	.word	0xfba3443c
   1bbc4:	19e47806 	.word	0x19e47806
   1bbc8:	2501bf2c 	.word	0x2501bf2c
   1bbcc:	68d62500 	.word	0x68d62500
   1bbd0:	0705eb08 	.word	0x0705eb08
   1bbd4:	f04f19a4 	.word	0xf04f19a4
   1bbd8:	bf280500 	.word	0xbf280500
   1bbdc:	60d42501 	.word	0x60d42501
   1bbe0:	443d690e 	.word	0x443d690e
   1bbe4:	7806fba3 	.word	0x7806fba3
   1bbe8:	bf2c19ed 	.word	0xbf2c19ed
   1bbec:	24002401 	.word	0x24002401
   1bbf0:	eb086916 	.word	0xeb086916
   1bbf4:	19ad0704 	.word	0x19ad0704
   1bbf8:	0400f04f 	.word	0x0400f04f
   1bbfc:	2401bf28 	.word	0x2401bf28
   1bc00:	694e6115 	.word	0x694e6115
   1bc04:	fba3443c 	.word	0xfba3443c
   1bc08:	19e47806 	.word	0x19e47806
   1bc0c:	2501bf2c 	.word	0x2501bf2c
   1bc10:	69562500 	.word	0x69562500
   1bc14:	0705eb08 	.word	0x0705eb08
   1bc18:	f04f19a4 	.word	0xf04f19a4
   1bc1c:	bf280500 	.word	0xbf280500
   1bc20:	61542501 	.word	0x61542501
   1bc24:	443d698e 	.word	0x443d698e
   1bc28:	7806fba3 	.word	0x7806fba3
   1bc2c:	bf2c19ed 	.word	0xbf2c19ed
   1bc30:	24002401 	.word	0x24002401
   1bc34:	eb086996 	.word	0xeb086996
   1bc38:	19ad0704 	.word	0x19ad0704
   1bc3c:	0400f04f 	.word	0x0400f04f
   1bc40:	2401bf28 	.word	0x2401bf28
   1bc44:	69ce6195 	.word	0x69ce6195
   1bc48:	fba3443c 	.word	0xfba3443c
   1bc4c:	eb149a06 	.word	0xeb149a06
   1bc50:	bf2c0409 	.word	0xbf2c0409
   1bc54:	0801f04f 	.word	0x0801f04f
   1bc58:	0800f04f 	.word	0x0800f04f
   1bc5c:	eb0869d6 	.word	0xeb0869d6
   1bc60:	19a4050a 	.word	0x19a4050a
   1bc64:	0800f04f 	.word	0x0800f04f
   1bc68:	f04fbf28 	.word	0xf04fbf28
   1bc6c:	61d40801 	.word	0x61d40801
   1bc70:	44a83120 	.word	0x44a83120
   1bc74:	32203808 	.word	0x32203808
   1bc78:	f0002800 	.word	0xf0002800
   1bc7c:	680c8097 	.word	0x680c8097
   1bc80:	fba36816 	.word	0xfba36816
   1bc84:	eb199a04 	.word	0xeb199a04
   1bc88:	bf2c0808 	.word	0xbf2c0808
   1bc8c:	24002401 	.word	0x24002401
   1bc90:	0608eb16 	.word	0x0608eb16
   1bc94:	0500f04f 	.word	0x0500f04f
   1bc98:	2501bf28 	.word	0x2501bf28
   1bc9c:	28014454 	.word	0x28014454
   1bca0:	0804eb05 	.word	0x0804eb05
   1bca4:	d07f6016 	.word	0xd07f6016
   1bca8:	6856684c 	.word	0x6856684c
   1bcac:	9a04fba3 	.word	0x9a04fba3
   1bcb0:	0808eb19 	.word	0x0808eb19
   1bcb4:	2401bf2c 	.word	0x2401bf2c
   1bcb8:	eb162400 	.word	0xeb162400
   1bcbc:	f04f0608 	.word	0xf04f0608
   1bcc0:	bf280500 	.word	0xbf280500
   1bcc4:	44542501 	.word	0x44542501
   1bcc8:	eb052802 	.word	0xeb052802
   1bccc:	60560804 	.word	0x60560804
   1bcd0:	688cd06a 	.word	0x688cd06a
   1bcd4:	fba36896 	.word	0xfba36896
   1bcd8:	eb199a04 	.word	0xeb199a04
   1bcdc:	bf2c0808 	.word	0xbf2c0808
   1bce0:	24002401 	.word	0x24002401
   1bce4:	0608eb16 	.word	0x0608eb16
   1bce8:	0500f04f 	.word	0x0500f04f
   1bcec:	2501bf28 	.word	0x2501bf28
   1bcf0:	28034454 	.word	0x28034454
   1bcf4:	0804eb05 	.word	0x0804eb05
   1bcf8:	d0556096 	.word	0xd0556096
   1bcfc:	68d668cc 	.word	0x68d668cc
   1bd00:	9a04fba3 	.word	0x9a04fba3
   1bd04:	0808eb19 	.word	0x0808eb19
   1bd08:	2401bf2c 	.word	0x2401bf2c
   1bd0c:	eb162400 	.word	0xeb162400
   1bd10:	f04f0608 	.word	0xf04f0608
   1bd14:	bf280500 	.word	0xbf280500
   1bd18:	44542501 	.word	0x44542501
   1bd1c:	eb052804 	.word	0xeb052804
   1bd20:	60d60804 	.word	0x60d60804
   1bd24:	690cd040 	.word	0x690cd040
   1bd28:	fba36916 	.word	0xfba36916
   1bd2c:	eb199a04 	.word	0xeb199a04
   1bd30:	bf2c0408 	.word	0xbf2c0408
   1bd34:	0801f04f 	.word	0x0801f04f
   1bd38:	0800f04f 	.word	0x0800f04f
   1bd3c:	eb0a19a6 	.word	0xeb0a19a6
   1bd40:	f04f0508 	.word	0xf04f0508
   1bd44:	bf280800 	.word	0xbf280800
   1bd48:	0801f04f 	.word	0x0801f04f
   1bd4c:	44a82805 	.word	0x44a82805
   1bd50:	d0296116 	.word	0xd0296116
   1bd54:	6956694c 	.word	0x6956694c
   1bd58:	9a04fba3 	.word	0x9a04fba3
   1bd5c:	0409eb18 	.word	0x0409eb18
   1bd60:	f04fbf2c 	.word	0xf04fbf2c
   1bd64:	f04f0801 	.word	0xf04f0801
   1bd68:	19a60800 	.word	0x19a60800
   1bd6c:	0508eb0a 	.word	0x0508eb0a
   1bd70:	0800f04f 	.word	0x0800f04f
   1bd74:	f04fbf28 	.word	0xf04fbf28
   1bd78:	28060801 	.word	0x28060801
   1bd7c:	615644a8 	.word	0x615644a8
   1bd80:	698cd012 	.word	0x698cd012
   1bd84:	fba36991 	.word	0xfba36991
   1bd88:	eb144504 	.word	0xeb144504
   1bd8c:	bf2c0808 	.word	0xbf2c0808
   1bd90:	23002301 	.word	0x23002301
   1bd94:	0108eb11 	.word	0x0108eb11
   1bd98:	0400f04f 	.word	0x0400f04f
   1bd9c:	2401bf28 	.word	0x2401bf28
   1bda0:	eb04442b 	.word	0xeb04442b
   1bda4:	61910803 	.word	0x61910803
   1bda8:	0280eb02 	.word	0x0280eb02
   1bdac:	23006815 	.word	0x23006815
   1bdb0:	0508eb15 	.word	0x0508eb15
   1bdb4:	2301bf28 	.word	0x2301bf28
   1bdb8:	5b04f842 	.word	0x5b04f842
   1bdbc:	0801f04f 	.word	0x0801f04f
   1bdc0:	d1f32b00 	.word	0xd1f32b00
   1bdc4:	8ff0e8bd 	.word	0x8ff0e8bd
   1bdc8:	0800f04f 	.word	0x0800f04f
   1bdcc:	bf00e6be 	.word	0xbf00e6be

0001bdd0 <symbol_0002616>:
   1bdd0:	2b006843 	.word	0x2b006843
   1bdd4:	b430d033 	.word	0xb430d033
   1bdd8:	4280f103 	.word	0x4280f103
   1bddc:	3a016885 	.word	0x3a016885
   1bde0:	4022f855 	.word	0x4022f855
   1bde4:	0282eb05 	.word	0x0282eb05
   1bde8:	e009b11c 	.word	0xe009b11c
   1bdec:	4d04f852 	.word	0x4d04f852
   1bdf0:	3b01b934 	.word	0x3b01b934
   1bdf4:	688bd1fa 	.word	0x688bd1fa
   1bdf8:	b9d06818 	.word	0xb9d06818
   1bdfc:	4770bc30 	.word	0x4770bc30
   1be00:	6812688a 	.word	0x6812688a
   1be04:	2b01b192 	.word	0x2b01b192
   1be08:	6800d810 	.word	0x6800d810
   1be0c:	2800680b 	.word	0x2800680b
   1be10:	2b00dd01 	.word	0x2b00dd01
   1be14:	2b00db11 	.word	0x2b00db11
   1be18:	2800dd01 	.word	0x2800dd01
   1be1c:	682bdb16 	.word	0x682bdb16
   1be20:	d8eb4293 	.word	0xd8eb4293
   1be24:	bc30d306 	.word	0xbc30d306
   1be28:	47702000 	.word	0x47702000
   1be2c:	bc306800 	.word	0xbc306800
   1be30:	68084770 	.word	0x68084770
   1be34:	bc304240 	.word	0xbc304240
   1be38:	20014770 	.word	0x20014770
   1be3c:	688be7de 	.word	0x688be7de
   1be40:	b9006818 	.word	0xb9006818
   1be44:	68084770 	.word	0x68084770
   1be48:	e7fb4240 	.word	0xe7fb4240
   1be4c:	30fff04f 	.word	0x30fff04f
   1be50:	bf00e7d4 	.word	0xbf00e7d4

0001be54 <symbol_00038d0>:
   1be54:	2300b120 	.word	0x2300b120
   1be58:	e9c02201 	.word	0xe9c02201
   1be5c:	60832300 	.word	0x60832300
   1be60:	bf004770 	.word	0xbf004770

0001be64 <symbol_000fb6e>:
   1be64:	b510b1b0 	.word	0xb510b1b0
   1be68:	68804604 	.word	0x68804604
   1be6c:	6862b160 	.word	0x6862b160
   1be70:	b13a1e53 	.word	0xb13a1e53
   1be74:	3b012200 	.word	0x3b012200
   1be78:	60021c59 	.word	0x60021c59
   1be7c:	0004f100 	.word	0x0004f100
   1be80:	68a0d1f9 	.word	0x68a0d1f9
   1be84:	fc4ef003 	.word	0xfc4ef003
   1be88:	22012300 	.word	0x22012300
   1be8c:	2300e9c4 	.word	0x2300e9c4
   1be90:	bd1060a3 	.word	0xbd1060a3
   1be94:	bf004770 	.word	0xbf004770

0001be98 <symbol_0006423>:
   1be98:	6842b570 	.word	0x6842b570
   1be9c:	428a4605 	.word	0x428a4605
   1bea0:	d807460c 	.word	0xd807460c
   1bea4:	7310f242 	.word	0x7310f242
   1bea8:	d8514299 	.word	0xd8514299
   1beac:	d335428a 	.word	0xd335428a
   1beb0:	bd702000 	.word	0xbd702000
   1beb4:	d0101e51 	.word	0xd0101e51
   1beb8:	f8536883 	.word	0xf8536883
   1bebc:	28000021 	.word	0x28000021
   1bec0:	f102d149 	.word	0xf102d149
   1bec4:	3a014280 	.word	0x3a014280
   1bec8:	0382eb03 	.word	0x0382eb03
   1becc:	f853e003 	.word	0xf853e003
   1bed0:	b9180d04 	.word	0xb9180d04
   1bed4:	1e4a4611 	.word	0x1e4a4611
   1bed8:	2101d1f9 	.word	0x2101d1f9
   1bedc:	bf38428c 	.word	0xbf38428c
   1bee0:	2104460c 	.word	0x2104460c
   1bee4:	f0034620 	.word	0xf0034620
   1bee8:	4606fc09 	.word	0x4606fc09
   1beec:	68a9b380 	.word	0x68a9b380
   1bef0:	00a2b181 	.word	0x00a2b181
   1bef4:	fd74f008 	.word	0xfd74f008
   1bef8:	2001e9d5 	.word	0x2001e9d5
   1befc:	b13a1e53 	.word	0xb13a1e53
   1bf00:	3b012200 	.word	0x3b012200
   1bf04:	60021c59 	.word	0x60021c59
   1bf08:	0004f100 	.word	0x0004f100
   1bf0c:	68a8d1f9 	.word	0x68a8d1f9
   1bf10:	fc08f003 	.word	0xfc08f003
   1bf14:	4601e9c5 	.word	0x4601e9c5
   1bf18:	bd702000 	.word	0xbd702000
   1bf1c:	46202104 	.word	0x46202104
   1bf20:	fbecf003 	.word	0xfbecf003
   1bf24:	b1984606 	.word	0xb1984606
   1bf28:	290068a9 	.word	0x290068a9
   1bf2c:	686ad0f2 	.word	0x686ad0f2
   1bf30:	f0080092 	.word	0xf0080092
   1bf34:	e9d5fd55 	.word	0xe9d5fd55
   1bf38:	1e532001 	.word	0x1e532001
   1bf3c:	d0e72a00 	.word	0xd0e72a00
   1bf40:	3b012200 	.word	0x3b012200
   1bf44:	60021c59 	.word	0x60021c59
   1bf48:	0004f100 	.word	0x0004f100
   1bf4c:	e7ded1f9 	.word	0xe7ded1f9
   1bf50:	000ff06f 	.word	0x000ff06f
   1bf54:	4611bd70 	.word	0x4611bd70
   1bf58:	bf00e7c0 	.word	0xbf00e7c0

0001bf5c <symbol_00084df>:
   1bf5c:	d0524288 	.word	0xd0524288
   1bf60:	688ab5f8 	.word	0x688ab5f8
   1bf64:	4605460e 	.word	0x4605460e
   1bf68:	d04e2a00 	.word	0xd04e2a00
   1bf6c:	1e4b6849 	.word	0x1e4b6849
   1bf70:	f852d00e 	.word	0xf852d00e
   1bf74:	28000023 	.word	0x28000023
   1bf78:	f101d13b 	.word	0xf101d13b
   1bf7c:	39014180 	.word	0x39014180
   1bf80:	0281eb02 	.word	0x0281eb02
   1bf84:	f852e002 	.word	0xf852e002
   1bf88:	bb900d04 	.word	0xbb900d04
   1bf8c:	d1fa3b01 	.word	0xd1fa3b01
   1bf90:	68332401 	.word	0x68332401
   1bf94:	686a602b 	.word	0x686a602b
   1bf98:	d30c42a2 	.word	0xd30c42a2
   1bf9c:	009268af 	.word	0x009268af
   1bfa0:	46382100 	.word	0x46382100
   1bfa4:	fd49f008 	.word	0xfd49f008
   1bfa8:	68b100a2 	.word	0x68b100a2
   1bfac:	f00868a8 	.word	0xf00868a8
   1bfb0:	2000fd17 	.word	0x2000fd17
   1bfb4:	2104bdf8 	.word	0x2104bdf8
   1bfb8:	f0034620 	.word	0xf0034620
   1bfbc:	4607fb9f 	.word	0x4607fb9f
   1bfc0:	68a9b1f0 	.word	0x68a9b1f0
   1bfc4:	686ab189 	.word	0x686ab189
   1bfc8:	f0080092 	.word	0xf0080092
   1bfcc:	e9d5fd09 	.word	0xe9d5fd09
   1bfd0:	1e532001 	.word	0x1e532001
   1bfd4:	2200b13a 	.word	0x2200b13a
   1bfd8:	1c593b01 	.word	0x1c593b01
   1bfdc:	f1006002 	.word	0xf1006002
   1bfe0:	d1f90004 	.word	0xd1f90004
   1bfe4:	f00368a8 	.word	0xf00368a8
   1bfe8:	4622fb9d 	.word	0x4622fb9d
   1bfec:	4701e9c5 	.word	0x4701e9c5
   1bff0:	f242e7d5 	.word	0xf242e7d5
   1bff4:	68317210 	.word	0x68317210
   1bff8:	42941c5c 	.word	0x42941c5c
   1bffc:	d9ca6029 	.word	0xd9ca6029
   1c000:	000ff06f 	.word	0x000ff06f
   1c004:	2000bdf8 	.word	0x2000bdf8
   1c008:	28004770 	.word	0x28004770
   1c00c:	6880d0d1 	.word	0x6880d0d1
   1c010:	6869b158 	.word	0x6869b158
   1c014:	b1311e4b 	.word	0xb1311e4b
   1c018:	1c5c3b01 	.word	0x1c5c3b01
   1c01c:	f1006002 	.word	0xf1006002
   1c020:	d1f90004 	.word	0xd1f90004
   1c024:	f00368a8 	.word	0xf00368a8
   1c028:	2000fb7d 	.word	0x2000fb7d
   1c02c:	e9c52301 	.word	0xe9c52301
   1c030:	60a83000 	.word	0x60a83000
   1c034:	bf00bdf8 	.word	0xbf00bdf8

0001c038 <symbol_000fa6b>:
   1c038:	684bb5f0 	.word	0x684bb5f0
   1c03c:	b085460d 	.word	0xb085460d
   1c040:	46064614 	.word	0x46064614
   1c044:	b17b6851 	.word	0xb17b6851
   1c048:	f10368a8 	.word	0xf10368a8
   1c04c:	3a014280 	.word	0x3a014280
   1c050:	7022f850 	.word	0x7022f850
   1c054:	0082eb00 	.word	0x0082eb00
   1c058:	e04fb127 	.word	0xe04fb127
   1c05c:	2d04f850 	.word	0x2d04f850
   1c060:	d14b2a00 	.word	0xd14b2a00
   1c064:	d1f93b01 	.word	0xd1f93b01
   1c068:	f101b189 	.word	0xf101b189
   1c06c:	68a74080 	.word	0x68a74080
   1c070:	f8573801 	.word	0xf8573801
   1c074:	2a002020 	.word	0x2a002020
   1c078:	8099f040 	.word	0x8099f040
   1c07c:	0080eb07 	.word	0x0080eb07
   1c080:	f850e003 	.word	0xf850e003
   1c084:	2a002d04 	.word	0x2a002d04
   1c088:	3901d142 	.word	0x3901d142
   1c08c:	2300d1f9 	.word	0x2300d1f9
   1c090:	42b42201 	.word	0x42b42201
   1c094:	2301e9cd 	.word	0x2301e9cd
   1c098:	d07f9303 	.word	0xd07f9303
   1c09c:	d00542b5 	.word	0xd00542b5
   1c0a0:	46304629 	.word	0x46304629
   1c0a4:	ff5af7ff 	.word	0xff5af7ff
   1c0a8:	b9a84607 	.word	0xb9a84607
   1c0ac:	60332301 	.word	0x60332301
   1c0b0:	b1806860 	.word	0xb1806860
   1c0b4:	c008f8d4 	.word	0xc008f8d4
   1c0b8:	4380f100 	.word	0x4380f100
   1c0bc:	f85c3b01 	.word	0xf85c3b01
   1c0c0:	eb0c2023 	.word	0xeb0c2023
   1c0c4:	b1220383 	.word	0xb1220383
   1c0c8:	f853e042 	.word	0xf853e042
   1c0cc:	2a002d04 	.word	0x2a002d04
   1c0d0:	3801d13e 	.word	0x3801d13e
   1c0d4:	2700d1f9 	.word	0x2700d1f9
   1c0d8:	b1609803 	.word	0xb1609803
   1c0dc:	1e539a02 	.word	0x1e539a02
   1c0e0:	2200b13a 	.word	0x2200b13a
   1c0e4:	1c593b01 	.word	0x1c593b01
   1c0e8:	f1006002 	.word	0xf1006002
   1c0ec:	d1f90004 	.word	0xd1f90004
   1c0f0:	f0039803 	.word	0xf0039803
   1c0f4:	4638fb17 	.word	0x4638fb17
   1c0f8:	bdf0b005 	.word	0xbdf0b005
   1c0fc:	d0c62900 	.word	0xd0c62900
   1c100:	4080f101 	.word	0x4080f101
   1c104:	380168a7 	.word	0x380168a7
   1c108:	2020f857 	.word	0x2020f857
   1c10c:	d0b52a00 	.word	0xd0b52a00
   1c110:	d8bc428b 	.word	0xd8bc428b
   1c114:	2b00d34b 	.word	0x2b00d34b
   1c118:	68a8d0b9 	.word	0x68a8d0b9
   1c11c:	4180f103 	.word	0x4180f103
   1c120:	f8503901 	.word	0xf8503901
   1c124:	f857c021 	.word	0xf857c021
   1c128:	0089e021 	.word	0x0089e021
   1c12c:	440845e6 	.word	0x440845e6
   1c130:	0201eb07 	.word	0x0201eb07
   1c134:	d83ad3ab 	.word	0xd83ad3ab
   1c138:	e0064601 	.word	0xe0064601
   1c13c:	7d04f851 	.word	0x7d04f851
   1c140:	0d04f852 	.word	0x0d04f852
   1c144:	d8a24287 	.word	0xd8a24287
   1c148:	3b01d331 	.word	0x3b01d331
   1c14c:	e79ed1f6 	.word	0xe79ed1f6
   1c150:	462b2500 	.word	0x462b2500
   1c154:	f85168b1 	.word	0xf85168b1
   1c158:	35016b04 	.word	0x35016b04
   1c15c:	f8411af2 	.word	0xf8411af2
   1c160:	f85c2c04 	.word	0xf85c2c04
   1c164:	460c7b04 	.word	0x460c7b04
   1c168:	bf2c42ba 	.word	0xbf2c42ba
   1c16c:	0e00f04f 	.word	0x0e00f04f
   1c170:	0e01f04f 	.word	0x0e01f04f
   1c174:	429e1bd2 	.word	0x429e1bd2
   1c178:	4673bf2c 	.word	0x4673bf2c
   1c17c:	0301f10e 	.word	0x0301f10e
   1c180:	f8414285 	.word	0xf8414285
   1c184:	d3e62c04 	.word	0xd3e62c04
   1c188:	e7a4b90b 	.word	0xe7a4b90b
   1c18c:	68222301 	.word	0x68222301
   1c190:	429a1ad1 	.word	0x429a1ad1
   1c194:	1b04f844 	.word	0x1b04f844
   1c198:	e79cd3f8 	.word	0xe79cd3f8
   1c19c:	a8014621 	.word	0xa8014621
   1c1a0:	fedcf7ff 	.word	0xfedcf7ff
   1c1a4:	28004607 	.word	0x28004607
   1c1a8:	ac01d196 	.word	0xac01d196
   1c1ac:	f06fe776 	.word	0xf06fe776
   1c1b0:	46380709 	.word	0x46380709
   1c1b4:	bdf0b005 	.word	0xbdf0b005

0001c1b8 <symbol_0006ccd>:
   1c1b8:	7310f242 	.word	0x7310f242
   1c1bc:	41f0e92d 	.word	0x41f0e92d
   1c1c0:	4256684f 	.word	0x4256684f
   1c1c4:	429f4316 	.word	0x429f4316
   1c1c8:	16c0f3c6 	.word	0x16c0f3c6
   1c1cc:	6842d84f 	.word	0x6842d84f
   1c1d0:	42974604 	.word	0x42974604
   1c1d4:	d82c460d 	.word	0xd82c460d
   1c1d8:	68236829 	.word	0x68236829
   1c1dc:	f106fb01 	.word	0xf106fb01
   1c1e0:	0701f1c6 	.word	0x0701f1c6
   1c1e4:	1307fb03 	.word	0x1307fb03
   1c1e8:	686b6023 	.word	0x686b6023
   1c1ec:	2300b18b 	.word	0x2300b18b
   1c1f0:	68aa68a1 	.word	0x68aa68a1
   1c1f4:	0023f851 	.word	0x0023f851
   1c1f8:	2023f852 	.word	0x2023f852
   1c1fc:	f007fb00 	.word	0xf007fb00
   1c200:	0206fb02 	.word	0x0206fb02
   1c204:	2023f841 	.word	0x2023f841
   1c208:	3301686a 	.word	0x3301686a
   1c20c:	d8ef429a 	.word	0xd8ef429a
   1c210:	42936862 	.word	0x42936862
   1c214:	009ad20a 	.word	0x009ad20a
   1c218:	330168a0 	.word	0x330168a0
   1c21c:	fb075881 	.word	0xfb075881
   1c220:	5081f101 	.word	0x5081f101
   1c224:	32046861 	.word	0x32046861
   1c228:	d8f54299 	.word	0xd8f54299
   1c22c:	e8bd2000 	.word	0xe8bd2000
   1c230:	210481f0 	.word	0x210481f0
   1c234:	f0034638 	.word	0xf0034638
   1c238:	4680fa61 	.word	0x4680fa61
   1c23c:	68a1b1b8 	.word	0x68a1b1b8
   1c240:	6862b189 	.word	0x6862b189
   1c244:	f0080092 	.word	0xf0080092
   1c248:	e9d4fbcb 	.word	0xe9d4fbcb
   1c24c:	1e532001 	.word	0x1e532001
   1c250:	2200b13a 	.word	0x2200b13a
   1c254:	1c593b01 	.word	0x1c593b01
   1c258:	f1006002 	.word	0xf1006002
   1c25c:	d1f90004 	.word	0xd1f90004
   1c260:	f00368a0 	.word	0xf00368a0
   1c264:	463afa5f 	.word	0x463afa5f
   1c268:	7801e9c4 	.word	0x7801e9c4
   1c26c:	f06fe7b4 	.word	0xf06fe7b4
   1c270:	e7dc000f 	.word	0xe7dc000f

0001c274 <symbol_000b345>:
   1c274:	6845b5f8 	.word	0x6845b5f8
   1c278:	460e4604 	.word	0x460e4604
   1c27c:	6887b19d 	.word	0x6887b19d
   1c280:	463800aa 	.word	0x463800aa
   1c284:	f0082100 	.word	0xf0082100
   1c288:	2e00fbd8 	.word	0x2e00fbd8
   1c28c:	2301bfac 	.word	0x2301bfac
   1c290:	33fff04f 	.word	0x33fff04f
   1c294:	71e6ea86 	.word	0x71e6ea86
   1c298:	eba168a2 	.word	0xeba168a2
   1c29c:	601171e6 	.word	0x601171e6
   1c2a0:	20006023 	.word	0x20006023
   1c2a4:	2104bdf8 	.word	0x2104bdf8
   1c2a8:	f0032001 	.word	0xf0032001
   1c2ac:	4607fa27 	.word	0x4607fa27
   1c2b0:	68a1b1b8 	.word	0x68a1b1b8
   1c2b4:	6862b181 	.word	0x6862b181
   1c2b8:	f0080092 	.word	0xf0080092
   1c2bc:	e9d4fb91 	.word	0xe9d4fb91
   1c2c0:	1e532001 	.word	0x1e532001
   1c2c4:	3b01b132 	.word	0x3b01b132
   1c2c8:	60051c5a 	.word	0x60051c5a
   1c2cc:	0004f100 	.word	0x0004f100
   1c2d0:	68a0d1f9 	.word	0x68a0d1f9
   1c2d4:	fa26f003 	.word	0xfa26f003
   1c2d8:	22042301 	.word	0x22042301
   1c2dc:	3701e9c4 	.word	0x3701e9c4
   1c2e0:	f06fe7cf 	.word	0xf06fe7cf
   1c2e4:	bdf8000f 	.word	0xbdf8000f

0001c2e8 <symbol_0007f0f>:
   1c2e8:	ebb16843 	.word	0xebb16843
   1c2ec:	d2091f43 	.word	0xd2091f43
   1c2f0:	094a6883 	.word	0x094a6883
   1c2f4:	0022f853 	.word	0x0022f853
   1c2f8:	011ff001 	.word	0x011ff001
   1c2fc:	f00040c8 	.word	0xf00040c8
   1c300:	47700001 	.word	0x47700001
   1c304:	47702000 	.word	0x47702000

0001c308 <symbol_00030c0>:
   1c308:	b3136843 	.word	0xb3136843
   1c30c:	6882b410 	.word	0x6882b410
   1c310:	d0241e58 	.word	0xd0241e58
   1c314:	1020f852 	.word	0x1020f852
   1c318:	f103b9e9 	.word	0xf103b9e9
   1c31c:	3b014380 	.word	0x3b014380
   1c320:	0383eb02 	.word	0x0383eb02
   1c324:	f853e002 	.word	0xf853e002
   1c328:	b9a11d04 	.word	0xb9a11d04
   1c32c:	d1fa3801 	.word	0xd1fa3801
   1c330:	68112420 	.word	0x68112420
   1c334:	f04f2200 	.word	0xf04f2200
   1c338:	e0024300 	.word	0xe0024300
   1c33c:	2a203201 	.word	0x2a203201
   1c340:	420bd004 	.word	0x420bd004
   1c344:	0353ea4f 	.word	0x0353ea4f
   1c348:	1aa0d0f8 	.word	0x1aa0d0f8
   1c34c:	4b04f85d 	.word	0x4b04f85d
   1c350:	46184770 	.word	0x46184770
   1c354:	01404770 	.word	0x01404770
   1c358:	0420f100 	.word	0x0420f100
   1c35c:	6811e7ea 	.word	0x6811e7ea
   1c360:	e7e72420 	.word	0xe7e72420

0001c364 <symbol_000b7da>:
   1c364:	b3236843 	.word	0xb3236843
   1c368:	6882b410 	.word	0x6882b410
   1c36c:	d0261e58 	.word	0xd0261e58
   1c370:	1020f852 	.word	0x1020f852
   1c374:	f103b9f9 	.word	0xf103b9f9
   1c378:	3b014380 	.word	0x3b014380
   1c37c:	0383eb02 	.word	0x0383eb02
   1c380:	f853e002 	.word	0xf853e002
   1c384:	b9b11d04 	.word	0xb9b11d04
   1c388:	d1fa3801 	.word	0xd1fa3801
   1c38c:	68112420 	.word	0x68112420
   1c390:	f04f2200 	.word	0xf04f2200
   1c394:	e0024300 	.word	0xe0024300
   1c398:	2a203201 	.word	0x2a203201
   1c39c:	420bd004 	.word	0x420bd004
   1c3a0:	0353ea4f 	.word	0x0353ea4f
   1c3a4:	1aa0d0f8 	.word	0x1aa0d0f8
   1c3a8:	08c03007 	.word	0x08c03007
   1c3ac:	4b04f85d 	.word	0x4b04f85d
   1c3b0:	46184770 	.word	0x46184770
   1c3b4:	01404770 	.word	0x01404770
   1c3b8:	0420f100 	.word	0x0420f100
   1c3bc:	6811e7e8 	.word	0x6811e7e8
   1c3c0:	e7e52420 	.word	0xe7e52420

0001c3c4 <symbol_000eaf4>:
   1c3c4:	43f8e92d 	.word	0x43f8e92d
   1c3c8:	460f4605 	.word	0x460f4605
   1c3cc:	2a004616 	.word	0x2a004616
   1c3d0:	780cd07e 	.word	0x780cd07e
   1c3d4:	b124460b 	.word	0xb124460b
   1c3d8:	f813e07e 	.word	0xf813e07e
   1c3dc:	2a002f01 	.word	0x2a002f01
   1c3e0:	3401d146 	.word	0x3401d146
   1c3e4:	d1f842a6 	.word	0xd1f842a6
   1c3e8:	8004f8d5 	.word	0x8004f8d5
   1c3ec:	0f00f1b8 	.word	0x0f00f1b8
   1c3f0:	2104d169 	.word	0x2104d169
   1c3f4:	f0032001 	.word	0xf0032001
   1c3f8:	4681f981 	.word	0x4681f981
   1c3fc:	d06d2800 	.word	0xd06d2800
   1c400:	b18968a9 	.word	0xb18968a9
   1c404:	0092686a 	.word	0x0092686a
   1c408:	faeaf008 	.word	0xfaeaf008
   1c40c:	2001e9d5 	.word	0x2001e9d5
   1c410:	b13a1e53 	.word	0xb13a1e53
   1c414:	3b014642 	.word	0x3b014642
   1c418:	60021c59 	.word	0x60021c59
   1c41c:	0004f100 	.word	0x0004f100
   1c420:	68a8d1f9 	.word	0x68a8d1f9
   1c424:	f97ef003 	.word	0xf97ef003
   1c428:	22042301 	.word	0x22042301
   1c42c:	3901e9c5 	.word	0x3901e9c5
   1c430:	46482100 	.word	0x46482100
   1c434:	fb01f008 	.word	0xfb01f008
   1c438:	22012300 	.word	0x22012300
   1c43c:	42a668a9 	.word	0x42a668a9
   1c440:	602a600b 	.word	0x602a600b
   1c444:	eb07d911 	.word	0xeb07d911
   1c448:	1b340c06 	.word	0x1b340c06
   1c44c:	f02368ae 	.word	0xf02368ae
   1c450:	00df0103 	.word	0x00df0103
   1c454:	0d01f81c 	.word	0x0d01f81c
   1c458:	f0075872 	.word	0xf0075872
   1c45c:	40b80718 	.word	0x40b80718
   1c460:	43023301 	.word	0x43023301
   1c464:	507242a3 	.word	0x507242a3
   1c468:	2000d1f0 	.word	0x2000d1f0
   1c46c:	83f8e8bd 	.word	0x83f8e8bd
   1c470:	f0121b32 	.word	0xf0121b32
   1c474:	bf180803 	.word	0xbf180803
   1c478:	0801f04f 	.word	0x0801f04f
   1c47c:	7310f242 	.word	0x7310f242
   1c480:	0892eb08 	.word	0x0892eb08
   1c484:	d8294598 	.word	0xd8294598
   1c488:	4598686b 	.word	0x4598686b
   1c48c:	2104d929 	.word	0x2104d929
   1c490:	f0034640 	.word	0xf0034640
   1c494:	4681f933 	.word	0x4681f933
   1c498:	68a9b300 	.word	0x68a9b300
   1c49c:	686ab189 	.word	0x686ab189
   1c4a0:	f0080092 	.word	0xf0080092
   1c4a4:	e9d5fa9d 	.word	0xe9d5fa9d
   1c4a8:	1e532001 	.word	0x1e532001
   1c4ac:	2200b13a 	.word	0x2200b13a
   1c4b0:	1c593b01 	.word	0x1c593b01
   1c4b4:	f1006002 	.word	0xf1006002
   1c4b8:	d1f90004 	.word	0xd1f90004
   1c4bc:	f00368a8 	.word	0xf00368a8
   1c4c0:	e9c5f931 	.word	0xe9c5f931
   1c4c4:	ea4f8901 	.word	0xea4f8901
   1c4c8:	f8d50288 	.word	0xf8d50288
   1c4cc:	e7af9008 	.word	0xe7af9008
   1c4d0:	8004f8d0 	.word	0x8004f8d0
   1c4d4:	e7894614 	.word	0xe7894614
   1c4d8:	e7ca2400 	.word	0xe7ca2400
   1c4dc:	000ff06f 	.word	0x000ff06f
   1c4e0:	4698e7c4 	.word	0x4698e7c4
   1c4e4:	bf00e782 	.word	0xbf00e782

0001c4e8 <symbol_000116e>:
   1c4e8:	41f0e92d 	.word	0x41f0e92d
   1c4ec:	46886844 	.word	0x46886844
   1c4f0:	d03e2c00 	.word	0xd03e2c00
   1c4f4:	1e624615 	.word	0x1e624615
   1c4f8:	68804607 	.word	0x68804607
   1c4fc:	f850d040 	.word	0xf850d040
   1c500:	bb991022 	.word	0xbb991022
   1c504:	4380f104 	.word	0x4380f104
   1c508:	eb003b01 	.word	0xeb003b01
   1c50c:	e0020383 	.word	0xe0020383
   1c510:	1d04f853 	.word	0x1d04f853
   1c514:	3a01bb51 	.word	0x3a01bb51
   1c518:	2627d1fa 	.word	0x2627d1fa
   1c51c:	22006801 	.word	0x22006801
   1c520:	4300f04f 	.word	0x4300f04f
   1c524:	3201e002 	.word	0x3201e002
   1c528:	d0032a20 	.word	0xd0032a20
   1c52c:	ea4f420b 	.word	0xea4f420b
   1c530:	d0f80353 	.word	0xd0f80353
   1c534:	08f61ab6 	.word	0x08f61ab6
   1c538:	d32442b5 	.word	0xd32442b5
   1c53c:	2100462a 	.word	0x2100462a
   1c540:	f0084640 	.word	0xf0084640
   1c544:	b176fa7a 	.word	0xb176fa7a
   1c548:	44a82300 	.word	0x44a82300
   1c54c:	f02368b9 	.word	0xf02368b9
   1c550:	588c0203 	.word	0x588c0203
   1c554:	f00500dd 	.word	0xf00500dd
   1c558:	33010518 	.word	0x33010518
   1c55c:	42b340ec 	.word	0x42b340ec
   1c560:	4d01f808 	.word	0x4d01f808
   1c564:	2000d1f2 	.word	0x2000d1f2
   1c568:	81f0e8bd 	.word	0x81f0e8bd
   1c56c:	36270156 	.word	0x36270156
   1c570:	4608e7d5 	.word	0x4608e7d5
   1c574:	f0084621 	.word	0xf0084621
   1c578:	4620fa60 	.word	0x4620fa60
   1c57c:	81f0e8bd 	.word	0x81f0e8bd
   1c580:	26276801 	.word	0x26276801
   1c584:	f06fe7cb 	.word	0xf06fe7cb
   1c588:	e7ed0007 	.word	0xe7ed0007

0001c58c <symbol_0004fb7>:
   1c58c:	41f0e92d 	.word	0x41f0e92d
   1c590:	46046843 	.word	0x46046843
   1c594:	f001094d 	.word	0xf001094d
   1c598:	b343061f 	.word	0xb343061f
   1c59c:	f8d01e5a 	.word	0xf8d01e5a
   1c5a0:	f000e008 	.word	0xf000e008
   1c5a4:	f85e8099 	.word	0xf85e8099
   1c5a8:	f1bcc022 	.word	0xf1bcc022
   1c5ac:	f0400f00 	.word	0xf0400f00
   1c5b0:	f103809c 	.word	0xf103809c
   1c5b4:	38014080 	.word	0x38014080
   1c5b8:	0080eb0e 	.word	0x0080eb0e
   1c5bc:	f850e003 	.word	0xf850e003
   1c5c0:	2f007d04 	.word	0x2f007d04
   1c5c4:	3a01d15e 	.word	0x3a01d15e
   1c5c8:	f04fd1f9 	.word	0xf04fd1f9
   1c5cc:	f8de0820 	.word	0xf8de0820
   1c5d0:	20007000 	.word	0x20007000
   1c5d4:	4200f04f 	.word	0x4200f04f
   1c5d8:	3001e002 	.word	0x3001e002
   1c5dc:	d0052820 	.word	0xd0052820
   1c5e0:	ea4f423a 	.word	0xea4f423a
   1c5e4:	d0f80252 	.word	0xd0f80252
   1c5e8:	0c00eba8 	.word	0x0c00eba8
   1c5ec:	ebb14461 	.word	0xebb14461
   1c5f0:	d90b1f43 	.word	0xd90b1f43
   1c5f4:	021ff011 	.word	0x021ff011
   1c5f8:	2201bf18 	.word	0x2201bf18
   1c5fc:	7010f242 	.word	0x7010f242
   1c600:	1751eb02 	.word	0x1751eb02
   1c604:	d86d4287 	.word	0xd86d4287
   1c608:	d840429f 	.word	0xd840429f
   1c60c:	429db1f5 	.word	0x429db1f5
   1c610:	f06fd25d 	.word	0xf06fd25d
   1c614:	1b7f4740 	.word	0x1b7f4740
   1c618:	ebc719da 	.word	0xebc719da
   1c61c:	00927787 	.word	0x00927787
   1c620:	68a000bf 	.word	0x68a000bf
   1c624:	19c13b01 	.word	0x19c13b01
   1c628:	44115880 	.word	0x44115880
   1c62c:	f841429d 	.word	0xf841429d
   1c630:	f1a20c04 	.word	0xf1a20c04
   1c634:	d1f40204 	.word	0xd1f40204
   1c638:	f1032100 	.word	0xf1032100
   1c63c:	3b014380 	.word	0x3b014380
   1c640:	68a2009b 	.word	0x68a2009b
   1c644:	3b0450d1 	.word	0x3b0450d1
   1c648:	d1fa1d1a 	.word	0xd1fa1d1a
   1c64c:	6863b1be 	.word	0x6863b1be
   1c650:	d214429d 	.word	0xd214429d
   1c654:	f1c62700 	.word	0xf1c62700
   1c658:	00ab0c20 	.word	0x00ab0c20
   1c65c:	350168a0 	.word	0x350168a0
   1c660:	fa0158c1 	.word	0xfa0158c1
   1c664:	50c2f206 	.word	0x50c2f206
   1c668:	58c268a0 	.word	0x58c268a0
   1c66c:	50c2433a 	.word	0x50c2433a
   1c670:	fa216862 	.word	0xfa216862
   1c674:	42aaf70c 	.word	0x42aaf70c
   1c678:	0304f103 	.word	0x0304f103
   1c67c:	2000d8ee 	.word	0x2000d8ee
   1c680:	81f0e8bd 	.word	0x81f0e8bd
   1c684:	1c42ea4f 	.word	0x1c42ea4f
   1c688:	0820f10c 	.word	0x0820f10c
   1c68c:	2104e7a1 	.word	0x2104e7a1
   1c690:	f0034638 	.word	0xf0034638
   1c694:	4680f833 	.word	0x4680f833
   1c698:	68a1b320 	.word	0x68a1b320
   1c69c:	6862b189 	.word	0x6862b189
   1c6a0:	f0080092 	.word	0xf0080092
   1c6a4:	e9d4f99d 	.word	0xe9d4f99d
   1c6a8:	1e532001 	.word	0x1e532001
   1c6ac:	2200b13a 	.word	0x2200b13a
   1c6b0:	1c593b01 	.word	0x1c593b01
   1c6b4:	f1006002 	.word	0xf1006002
   1c6b8:	d1f90004 	.word	0xd1f90004
   1c6bc:	f00368a0 	.word	0xf00368a0
   1c6c0:	463bf831 	.word	0x463bf831
   1c6c4:	7801e9c4 	.word	0x7801e9c4
   1c6c8:	d0bf2d00 	.word	0xd0bf2d00
   1c6cc:	2b00e79f 	.word	0x2b00e79f
   1c6d0:	2e00d1b2 	.word	0x2e00d1b2
   1c6d4:	e7d2d1bb 	.word	0xe7d2d1bb
   1c6d8:	7000f8de 	.word	0x7000f8de
   1c6dc:	f04f4694 	.word	0xf04f4694
   1c6e0:	e7760820 	.word	0xe7760820
   1c6e4:	000ff06f 	.word	0x000ff06f
   1c6e8:	0152e7ca 	.word	0x0152e7ca
   1c6ec:	f1024667 	.word	0xf1024667
   1c6f0:	46940820 	.word	0x46940820
   1c6f4:	bf00e76d 	.word	0xbf00e76d

0001c6f8 <symbol_0000994>:
   1c6f8:	6844b5f8 	.word	0x6844b5f8
   1c6fc:	42ac094d 	.word	0x42ac094d
   1c700:	f001d33a 	.word	0xf001d33a
   1c704:	d032011f 	.word	0xd032011f
   1c708:	2300b1b5 	.word	0x2300b1b5
   1c70c:	688400aa 	.word	0x688400aa
   1c710:	320458a6 	.word	0x320458a6
   1c714:	6023f844 	.word	0x6023f844
   1c718:	33016844 	.word	0x33016844
   1c71c:	429e1b66 	.word	0x429e1b66
   1c720:	429cd8f5 	.word	0x429cd8f5
   1c724:	2500d908 	.word	0x2500d908
   1c728:	6884009a 	.word	0x6884009a
   1c72c:	50a53301 	.word	0x50a53301
   1c730:	32046844 	.word	0x32046844
   1c734:	d8f8429c 	.word	0xd8f8429c
   1c738:	b1b4b1b9 	.word	0xb1b4b1b9
   1c73c:	f1042700 	.word	0xf1042700
   1c740:	3b014380 	.word	0x3b014380
   1c744:	f1c1009b 	.word	0xf1c1009b
   1c748:	68860c20 	.word	0x68860c20
   1c74c:	58f53c01 	.word	0x58f53c01
   1c750:	f201fa25 	.word	0xf201fa25
   1c754:	688650f2 	.word	0x688650f2
   1c758:	ea4258f2 	.word	0xea4258f2
   1c75c:	50f20207 	.word	0x50f20207
   1c760:	f70cfa05 	.word	0xf70cfa05
   1c764:	0304f1a3 	.word	0x0304f1a3
   1c768:	2000d1ef 	.word	0x2000d1ef
   1c76c:	b919bdf8 	.word	0xb919bdf8
   1c770:	d0fa2c00 	.word	0xd0fa2c00
   1c774:	e7d6460b 	.word	0xe7d6460b
   1c778:	b1644605 	.word	0xb1644605
   1c77c:	00a26886 	.word	0x00a26886
   1c780:	21004630 	.word	0x21004630
   1c784:	f959f008 	.word	0xf959f008
   1c788:	22012300 	.word	0x22012300
   1c78c:	461868a9 	.word	0x461868a9
   1c790:	602a600b 	.word	0x602a600b
   1c794:	2104bdf8 	.word	0x2104bdf8
   1c798:	f0022001 	.word	0xf0022001
   1c79c:	4606ffaf 	.word	0x4606ffaf
   1c7a0:	68a9b1b8 	.word	0x68a9b1b8
   1c7a4:	686ab181 	.word	0x686ab181
   1c7a8:	f0080092 	.word	0xf0080092
   1c7ac:	e9d5f919 	.word	0xe9d5f919
   1c7b0:	1e532001 	.word	0x1e532001
   1c7b4:	3b01b132 	.word	0x3b01b132
   1c7b8:	60041c5a 	.word	0x60041c5a
   1c7bc:	0004f100 	.word	0x0004f100
   1c7c0:	68a8d1f9 	.word	0x68a8d1f9
   1c7c4:	ffaef002 	.word	0xffaef002
   1c7c8:	22042301 	.word	0x22042301
   1c7cc:	3601e9c5 	.word	0x3601e9c5
   1c7d0:	f06fe7d6 	.word	0xf06fe7d6
   1c7d4:	bdf8000f 	.word	0xbdf8000f

0001c7d8 <symbol_000242f>:
   1c7d8:	6843b470 	.word	0x6843b470
   1c7dc:	b173684a 	.word	0xb173684a
   1c7e0:	f1036884 	.word	0xf1036884
   1c7e4:	3d014580 	.word	0x3d014580
   1c7e8:	6025f854 	.word	0x6025f854
   1c7ec:	0485eb04 	.word	0x0485eb04
   1c7f0:	e01ab11e 	.word	0xe01ab11e
   1c7f4:	5d04f854 	.word	0x5d04f854
   1c7f8:	3b01b9bd 	.word	0x3b01b9bd
   1c7fc:	b18ad1fa 	.word	0xb18ad1fa
   1c800:	4480f102 	.word	0x4480f102
   1c804:	3c01688e 	.word	0x3c01688e
   1c808:	5024f856 	.word	0x5024f856
   1c80c:	eb06b9cd 	.word	0xeb06b9cd
   1c810:	e0020484 	.word	0xe0020484
   1c814:	5d04f854 	.word	0x5d04f854
   1c818:	3a01b98d 	.word	0x3a01b98d
   1c81c:	2b00d1fa 	.word	0x2b00d1fa
   1c820:	6802d037 	.word	0x6802d037
   1c824:	bc704610 	.word	0xbc704610
   1c828:	2a004770 	.word	0x2a004770
   1c82c:	f102d0f9 	.word	0xf102d0f9
   1c830:	688e4480 	.word	0x688e4480
   1c834:	f8563c01 	.word	0xf8563c01
   1c838:	2d005024 	.word	0x2d005024
   1c83c:	4293d0e7 	.word	0x4293d0e7
   1c840:	4293d8ef 	.word	0x4293d8ef
   1c844:	d2036809 	.word	0xd2036809
   1c848:	424abc70 	.word	0x424abc70
   1c84c:	47704610 	.word	0x47704610
   1c850:	2a006802 	.word	0x2a006802
   1c854:	2900dd01 	.word	0x2900dd01
   1c858:	2900db24 	.word	0x2900db24
   1c85c:	2a00dd01 	.word	0x2a00dd01
   1c860:	b1b3db1d 	.word	0xb1b3db1d
   1c864:	f1036884 	.word	0xf1036884
   1c868:	39014180 	.word	0x39014180
   1c86c:	5021f854 	.word	0x5021f854
   1c870:	0021f856 	.word	0x0021f856
   1c874:	42850089 	.word	0x42850089
   1c878:	4431440c 	.word	0x4431440c
   1c87c:	d30cd8d2 	.word	0xd30cd8d2
   1c880:	d0063b01 	.word	0xd0063b01
   1c884:	5d04f854 	.word	0x5d04f854
   1c888:	0d04f851 	.word	0x0d04f851
   1c88c:	d9f64285 	.word	0xd9f64285
   1c890:	461ae7c8 	.word	0x461ae7c8
   1c894:	4610bc70 	.word	0x4610bc70
   1c898:	42524770 	.word	0x42524770
   1c89c:	f04fe7c2 	.word	0xf04fe7c2
   1c8a0:	e7bf32ff 	.word	0xe7bf32ff
   1c8a4:	e7bd2201 	.word	0xe7bd2201

0001c8a8 <symbol_000ccad>:
   1c8a8:	2900b4f0 	.word	0x2900b4f0
   1c8ac:	68434605 	.word	0x68434605
   1c8b0:	2b00db32 	.word	0x2b00db32
   1c8b4:	6886d042 	.word	0x6886d042
   1c8b8:	4280f103 	.word	0x4280f103
   1c8bc:	f8563a01 	.word	0xf8563a01
   1c8c0:	eb060022 	.word	0xeb060022
   1c8c4:	b9680282 	.word	0xb9680282
   1c8c8:	30fff04f 	.word	0x30fff04f
   1c8cc:	e0022701 	.word	0xe0022701
   1c8d0:	4d04f852 	.word	0x4d04f852
   1c8d4:	3b01b93c 	.word	0x3b01b93c
   1c8d8:	2900d1fa 	.word	0x2900d1fa
   1c8dc:	2000bf08 	.word	0x2000bf08
   1c8e0:	4770bcf0 	.word	0x4770bcf0
   1c8e4:	b1a12701 	.word	0xb1a12701
   1c8e8:	d8122b01 	.word	0xd8122b01
   1c8ec:	28006828 	.word	0x28006828
   1c8f0:	1c7bdd01 	.word	0x1c7bdd01
   1c8f4:	2f01d01e 	.word	0x2f01d01e
   1c8f8:	2800d101 	.word	0x2800d101
   1c8fc:	2900db24 	.word	0x2900db24
   1c900:	bfb86833 	.word	0xbfb86833
   1c904:	42994249 	.word	0x42994249
   1c908:	d815d3ea 	.word	0xd815d3ea
   1c90c:	2000bcf0 	.word	0x2000bcf0
   1c910:	68284770 	.word	0x68284770
   1c914:	4770bcf0 	.word	0x4770bcf0
   1c918:	6886b163 	.word	0x6886b163
   1c91c:	4280f103 	.word	0x4280f103
   1c920:	f8563a01 	.word	0xf8563a01
   1c924:	eb060022 	.word	0xeb060022
   1c928:	b9500282 	.word	0xb9500282
   1c92c:	f04f2001 	.word	0xf04f2001
   1c930:	e7d037ff 	.word	0xe7d037ff
   1c934:	e7d32001 	.word	0xe7d32001
   1c938:	e7d14240 	.word	0xe7d14240
   1c93c:	30fff04f 	.word	0x30fff04f
   1c940:	f04fe7cb 	.word	0xf04fe7cb
   1c944:	e7cf37ff 	.word	0xe7cf37ff
   1c948:	30fff04f 	.word	0x30fff04f
   1c94c:	bf00e7c8 	.word	0xbf00e7c8

0001c950 <symbol_000c914>:
   1c950:	e92d4290 	.word	0xe92d4290
   1c954:	460747f0 	.word	0x460747f0
   1c958:	d006460c 	.word	0xd006460c
   1c95c:	46154288 	.word	0x46154288
   1c960:	f7ffd002 	.word	0xf7ffd002
   1c964:	b9a0fafb 	.word	0xb9a0fafb
   1c968:	2301462c 	.word	0x2301462c
   1c96c:	6865603b 	.word	0x6865603b
   1c970:	68a3b175 	.word	0x68a3b175
   1c974:	4280f105 	.word	0x4280f105
   1c978:	f8533a01 	.word	0xf8533a01
   1c97c:	eb031022 	.word	0xeb031022
   1c980:	b1190282 	.word	0xb1190282
   1c984:	f852e007 	.word	0xf852e007
   1c988:	b9211d04 	.word	0xb9211d04
   1c98c:	d1fa3d01 	.word	0xd1fa3d01
   1c990:	e8bd2000 	.word	0xe8bd2000
   1c994:	f24287f0 	.word	0xf24287f0
   1c998:	42957210 	.word	0x42957210
   1c99c:	687ad875 	.word	0x687ad875
   1c9a0:	d27642aa 	.word	0xd27642aa
   1c9a4:	46282104 	.word	0x46282104
   1c9a8:	fea8f002 	.word	0xfea8f002
   1c9ac:	28004606 	.word	0x28004606
   1c9b0:	68b9d06b 	.word	0x68b9d06b
   1c9b4:	687ab189 	.word	0x687ab189
   1c9b8:	f0080092 	.word	0xf0080092
   1c9bc:	e9d7f811 	.word	0xe9d7f811
   1c9c0:	1e532001 	.word	0x1e532001
   1c9c4:	2200b13a 	.word	0x2200b13a
   1c9c8:	1c593b01 	.word	0x1c593b01
   1c9cc:	f1006002 	.word	0xf1006002
   1c9d0:	d1f90004 	.word	0xd1f90004
   1c9d4:	f00268b8 	.word	0xf00268b8
   1c9d8:	e9c7fea5 	.word	0xe9c7fea5
   1c9dc:	68a35601 	.word	0x68a35601
   1c9e0:	ea4f2400 	.word	0xea4f2400
   1c9e4:	f1a30a85 	.word	0xf1a30a85
   1c9e8:	eb060c04 	.word	0xeb060c04
   1c9ec:	2200000a 	.word	0x2200000a
   1c9f0:	f10c6833 	.word	0xf10c6833
   1c9f4:	f8dc0c04 	.word	0xf8dc0c04
   1c9f8:	191b1000 	.word	0x191b1000
   1c9fc:	bf284614 	.word	0xbf284614
   1ca00:	185b2201 	.word	0x185b2201
   1ca04:	2401bf28 	.word	0x2401bf28
   1ca08:	3b04f846 	.word	0x3b04f846
   1ca0c:	44144286 	.word	0x44144286
   1ca10:	2c00d1ed 	.word	0x2c00d1ed
   1ca14:	f242d0bc 	.word	0xf242d0bc
   1ca18:	f04f7810 	.word	0xf04f7810
   1ca1c:	e00f0900 	.word	0xe00f0900
   1ca20:	eb0568bd 	.word	0xeb0568bd
   1ca24:	6803000a 	.word	0x6803000a
   1ca28:	191c2200 	.word	0x191c2200
   1ca2c:	2201bf28 	.word	0x2201bf28
   1ca30:	4b04f840 	.word	0x4b04f840
   1ca34:	0a04f10a 	.word	0x0a04f10a
   1ca38:	24014635 	.word	0x24014635
   1ca3c:	d0a72a00 	.word	0xd0a72a00
   1ca40:	1c6e687b 	.word	0x1c6e687b
   1ca44:	d8ee42ab 	.word	0xd8ee42ab
   1ca48:	d81e4546 	.word	0xd81e4546
   1ca4c:	d2e742b3 	.word	0xd2e742b3
   1ca50:	46302104 	.word	0x46302104
   1ca54:	fe52f002 	.word	0xfe52f002
   1ca58:	b1b04605 	.word	0xb1b04605
   1ca5c:	b18968b9 	.word	0xb18968b9
   1ca60:	0092687a 	.word	0x0092687a
   1ca64:	ffbcf007 	.word	0xffbcf007
   1ca68:	2001e9d7 	.word	0x2001e9d7
   1ca6c:	b13a1e53 	.word	0xb13a1e53
   1ca70:	1c5a3b01 	.word	0x1c5a3b01
   1ca74:	9000f8c0 	.word	0x9000f8c0
   1ca78:	0004f100 	.word	0x0004f100
   1ca7c:	68b8d1f8 	.word	0x68b8d1f8
   1ca80:	fe50f002 	.word	0xfe50f002
   1ca84:	6501e9c7 	.word	0x6501e9c7
   1ca88:	f06fe7cb 	.word	0xf06fe7cb
   1ca8c:	e8bd000f 	.word	0xe8bd000f
   1ca90:	68be87f0 	.word	0x68be87f0
   1ca94:	bf00e7a4 	.word	0xbf00e7a4

0001ca98 <symbol_0004fdf>:
   1ca98:	684bb5f0 	.word	0x684bb5f0
   1ca9c:	b085460d 	.word	0xb085460d
   1caa0:	46064614 	.word	0x46064614
   1caa4:	b17b6851 	.word	0xb17b6851
   1caa8:	f10368a8 	.word	0xf10368a8
   1caac:	3a014280 	.word	0x3a014280
   1cab0:	7022f850 	.word	0x7022f850
   1cab4:	0082eb00 	.word	0x0082eb00
   1cab8:	e04fb127 	.word	0xe04fb127
   1cabc:	2d04f850 	.word	0x2d04f850
   1cac0:	d14b2a00 	.word	0xd14b2a00
   1cac4:	d1f93b01 	.word	0xd1f93b01
   1cac8:	f101b189 	.word	0xf101b189
   1cacc:	68a74080 	.word	0x68a74080
   1cad0:	f8573801 	.word	0xf8573801
   1cad4:	2a002020 	.word	0x2a002020
   1cad8:	8099f040 	.word	0x8099f040
   1cadc:	0080eb07 	.word	0x0080eb07
   1cae0:	f850e003 	.word	0xf850e003
   1cae4:	2a002d04 	.word	0x2a002d04
   1cae8:	3901d142 	.word	0x3901d142
   1caec:	2300d1f9 	.word	0x2300d1f9
   1caf0:	42b42201 	.word	0x42b42201
   1caf4:	2301e9cd 	.word	0x2301e9cd
   1caf8:	d07f9303 	.word	0xd07f9303
   1cafc:	d00542b5 	.word	0xd00542b5
   1cb00:	46304629 	.word	0x46304629
   1cb04:	fa2af7ff 	.word	0xfa2af7ff
   1cb08:	b9a84607 	.word	0xb9a84607
   1cb0c:	60332301 	.word	0x60332301
   1cb10:	b1806860 	.word	0xb1806860
   1cb14:	c008f8d4 	.word	0xc008f8d4
   1cb18:	4380f100 	.word	0x4380f100
   1cb1c:	f85c3b01 	.word	0xf85c3b01
   1cb20:	eb0c2023 	.word	0xeb0c2023
   1cb24:	b1220383 	.word	0xb1220383
   1cb28:	f853e042 	.word	0xf853e042
   1cb2c:	2a002d04 	.word	0x2a002d04
   1cb30:	3801d13e 	.word	0x3801d13e
   1cb34:	2700d1f9 	.word	0x2700d1f9
   1cb38:	b1609803 	.word	0xb1609803
   1cb3c:	1e539a02 	.word	0x1e539a02
   1cb40:	2200b13a 	.word	0x2200b13a
   1cb44:	1c593b01 	.word	0x1c593b01
   1cb48:	f1006002 	.word	0xf1006002
   1cb4c:	d1f90004 	.word	0xd1f90004
   1cb50:	f0029803 	.word	0xf0029803
   1cb54:	4638fde7 	.word	0x4638fde7
   1cb58:	bdf0b005 	.word	0xbdf0b005
   1cb5c:	d0c62900 	.word	0xd0c62900
   1cb60:	4080f101 	.word	0x4080f101
   1cb64:	380168a7 	.word	0x380168a7
   1cb68:	2020f857 	.word	0x2020f857
   1cb6c:	d0b52a00 	.word	0xd0b52a00
   1cb70:	d8bc428b 	.word	0xd8bc428b
   1cb74:	2b00d34b 	.word	0x2b00d34b
   1cb78:	68a8d0b9 	.word	0x68a8d0b9
   1cb7c:	4180f103 	.word	0x4180f103
   1cb80:	f8503901 	.word	0xf8503901
   1cb84:	f857c021 	.word	0xf857c021
   1cb88:	0089e021 	.word	0x0089e021
   1cb8c:	440845e6 	.word	0x440845e6
   1cb90:	0201eb07 	.word	0x0201eb07
   1cb94:	d83ad3ab 	.word	0xd83ad3ab
   1cb98:	e0064601 	.word	0xe0064601
   1cb9c:	7d04f851 	.word	0x7d04f851
   1cba0:	0d04f852 	.word	0x0d04f852
   1cba4:	d8a24287 	.word	0xd8a24287
   1cba8:	3b01d331 	.word	0x3b01d331
   1cbac:	e79ed1f6 	.word	0xe79ed1f6
   1cbb0:	462b2500 	.word	0x462b2500
   1cbb4:	f85168b1 	.word	0xf85168b1
   1cbb8:	35016b04 	.word	0x35016b04
   1cbbc:	f8411af2 	.word	0xf8411af2
   1cbc0:	f85c2c04 	.word	0xf85c2c04
   1cbc4:	460c7b04 	.word	0x460c7b04
   1cbc8:	bf2c42ba 	.word	0xbf2c42ba
   1cbcc:	0e00f04f 	.word	0x0e00f04f
   1cbd0:	0e01f04f 	.word	0x0e01f04f
   1cbd4:	429e1bd2 	.word	0x429e1bd2
   1cbd8:	4673bf2c 	.word	0x4673bf2c
   1cbdc:	0301f10e 	.word	0x0301f10e
   1cbe0:	f8414285 	.word	0xf8414285
   1cbe4:	d3e62c04 	.word	0xd3e62c04
   1cbe8:	e7a4b90b 	.word	0xe7a4b90b
   1cbec:	68222301 	.word	0x68222301
   1cbf0:	429a1ad1 	.word	0x429a1ad1
   1cbf4:	1b04f844 	.word	0x1b04f844
   1cbf8:	e79cd3f8 	.word	0xe79cd3f8
   1cbfc:	a8014621 	.word	0xa8014621
   1cc00:	f9acf7ff 	.word	0xf9acf7ff
   1cc04:	28004607 	.word	0x28004607
   1cc08:	ac01d196 	.word	0xac01d196
   1cc0c:	f06fe776 	.word	0xf06fe776
   1cc10:	46380709 	.word	0x46380709
   1cc14:	bdf0b005 	.word	0xbdf0b005

0001cc18 <symbol_0005cc7>:
   1cc18:	41f0e92d 	.word	0x41f0e92d
   1cc1c:	6813680c 	.word	0x6813680c
   1cc20:	fb034605 	.word	0xfb034605
   1cc24:	2b00f304 	.word	0x2b00f304
   1cc28:	684bda39 	.word	0x684bda39
   1cc2c:	460e4617 	.word	0x460e4617
   1cc30:	b1836852 	.word	0xb1836852
   1cc34:	f1036889 	.word	0xf1036889
   1cc38:	38014080 	.word	0x38014080
   1cc3c:	c020f851 	.word	0xc020f851
   1cc40:	0180eb01 	.word	0x0180eb01
   1cc44:	0f00f1bc 	.word	0x0f00f1bc
   1cc48:	e02ed003 	.word	0xe02ed003
   1cc4c:	0d04f851 	.word	0x0d04f851
   1cc50:	3b01bb58 	.word	0x3b01bb58
   1cc54:	b17ad1fa 	.word	0xb17ad1fa
   1cc58:	4180f102 	.word	0x4180f102
   1cc5c:	c008f8d7 	.word	0xc008f8d7
   1cc60:	f85c3901 	.word	0xf85c3901
   1cc64:	b9780021 	.word	0xb9780021
   1cc68:	0181eb0c 	.word	0x0181eb0c
   1cc6c:	f851e002 	.word	0xf851e002
   1cc70:	bb280d04 	.word	0xbb280d04
   1cc74:	d1fa3a01 	.word	0xd1fa3a01
   1cc78:	4631463a 	.word	0x4631463a
   1cc7c:	f7ff4628 	.word	0xf7ff4628
   1cc80:	b148ff0b 	.word	0xb148ff0b
   1cc84:	81f0e8bd 	.word	0x81f0e8bd
   1cc88:	46394632 	.word	0x46394632
   1cc8c:	f7ff4628 	.word	0xf7ff4628
   1cc90:	2800ff03 	.word	0x2800ff03
   1cc94:	4264d1f6 	.word	0x4264d1f6
   1cc98:	e8bd602c 	.word	0xe8bd602c
   1cc9c:	f7ff81f0 	.word	0xf7ff81f0
   1cca0:	2800fe57 	.word	0x2800fe57
   1cca4:	602cd1ee 	.word	0x602cd1ee
   1cca8:	2a00e7f7 	.word	0x2a00e7f7
   1ccac:	f102d0e4 	.word	0xf102d0e4
   1ccb0:	f8d74180 	.word	0xf8d74180
   1ccb4:	3901c008 	.word	0x3901c008
   1ccb8:	0021f85c 	.word	0x0021f85c
   1ccbc:	d0d32800 	.word	0xd0d32800
   1ccc0:	d8d94293 	.word	0xd8d94293
   1ccc4:	2b00d3e0 	.word	0x2b00d3e0
   1ccc8:	68b0d0d6 	.word	0x68b0d0d6
   1cccc:	4180f103 	.word	0x4180f103
   1ccd0:	f8503901 	.word	0xf8503901
   1ccd4:	f85c8021 	.word	0xf85c8021
   1ccd8:	0089e021 	.word	0x0089e021
   1ccdc:	440845f0 	.word	0x440845f0
   1cce0:	0201eb0c 	.word	0x0201eb0c
   1cce4:	d3cfd8c8 	.word	0xd3cfd8c8
   1cce8:	e0064601 	.word	0xe0064601
   1ccec:	cd04f851 	.word	0xcd04f851
   1ccf0:	0d04f852 	.word	0x0d04f852
   1ccf4:	d8bf4584 	.word	0xd8bf4584
   1ccf8:	3b01d3c6 	.word	0x3b01d3c6
   1ccfc:	e7bbd1f6 	.word	0xe7bbd1f6

0001cd00 <symbol_000d773>:
   1cd00:	41f0e92d 	.word	0x41f0e92d
   1cd04:	6813680c 	.word	0x6813680c
   1cd08:	fb034605 	.word	0xfb034605
   1cd0c:	2b00f304 	.word	0x2b00f304
   1cd10:	684bdd64 	.word	0x684bdd64
   1cd14:	460e4617 	.word	0x460e4617
   1cd18:	b1836852 	.word	0xb1836852
   1cd1c:	f1036889 	.word	0xf1036889
   1cd20:	38014080 	.word	0x38014080
   1cd24:	c020f851 	.word	0xc020f851
   1cd28:	0180eb01 	.word	0x0180eb01
   1cd2c:	0f00f1bc 	.word	0x0f00f1bc
   1cd30:	e01fd003 	.word	0xe01fd003
   1cd34:	0d04f851 	.word	0x0d04f851
   1cd38:	3b01b9e0 	.word	0x3b01b9e0
   1cd3c:	b182d1fa 	.word	0xb182d1fa
   1cd40:	4180f102 	.word	0x4180f102
   1cd44:	c008f8d7 	.word	0xc008f8d7
   1cd48:	f85c3901 	.word	0xf85c3901
   1cd4c:	28000021 	.word	0x28000021
   1cd50:	eb0cd13b 	.word	0xeb0cd13b
   1cd54:	e0020181 	.word	0xe0020181
   1cd58:	0d04f851 	.word	0x0d04f851
   1cd5c:	3a01b9a8 	.word	0x3a01b9a8
   1cd60:	463ad1fa 	.word	0x463ad1fa
   1cd64:	46284631 	.word	0x46284631
   1cd68:	fe96f7ff 	.word	0xfe96f7ff
   1cd6c:	602cb900 	.word	0x602cb900
   1cd70:	81f0e8bd 	.word	0x81f0e8bd
   1cd74:	d0f42a00 	.word	0xd0f42a00
   1cd78:	4180f102 	.word	0x4180f102
   1cd7c:	c008f8d7 	.word	0xc008f8d7
   1cd80:	f85c3901 	.word	0xf85c3901
   1cd84:	28000021 	.word	0x28000021
   1cd88:	4293d0e3 	.word	0x4293d0e3
   1cd8c:	d31cd8e9 	.word	0xd31cd8e9
   1cd90:	d0e62b00 	.word	0xd0e62b00
   1cd94:	f10368b0 	.word	0xf10368b0
   1cd98:	39014180 	.word	0x39014180
   1cd9c:	8021f850 	.word	0x8021f850
   1cda0:	e021f85c 	.word	0xe021f85c
   1cda4:	45f00089 	.word	0x45f00089
   1cda8:	eb0c4408 	.word	0xeb0c4408
   1cdac:	d8d80201 	.word	0xd8d80201
   1cdb0:	4601d30b 	.word	0x4601d30b
   1cdb4:	f851e006 	.word	0xf851e006
   1cdb8:	f852cd04 	.word	0xf852cd04
   1cdbc:	45840d04 	.word	0x45840d04
   1cdc0:	d302d8cf 	.word	0xd302d8cf
   1cdc4:	d1f63b01 	.word	0xd1f63b01
   1cdc8:	4632e7cb 	.word	0x4632e7cb
   1cdcc:	46284639 	.word	0x46284639
   1cdd0:	fe62f7ff 	.word	0xfe62f7ff
   1cdd4:	d1cb2800 	.word	0xd1cb2800
   1cdd8:	e7c84264 	.word	0xe7c84264
   1cddc:	fdb8f7ff 	.word	0xfdb8f7ff
   1cde0:	d0c42800 	.word	0xd0c42800
   1cde4:	81f0e8bd 	.word	0x81f0e8bd

0001cde8 <symbol_000f268>:
   1cde8:	bfac2a00 	.word	0xbfac2a00
   1cdec:	f04f2301 	.word	0xf04f2301
   1cdf0:	b5f033ff 	.word	0xb5f033ff
   1cdf4:	680d2601 	.word	0x680d2601
   1cdf8:	7ce2ea82 	.word	0x7ce2ea82
   1cdfc:	f703fb05 	.word	0xf703fb05
   1ce00:	ebacb085 	.word	0xebacb085
   1ce04:	2f007ce2 	.word	0x2f007ce2
   1ce08:	e9cd9602 	.word	0xe9cd9602
   1ce0c:	f8cdc300 	.word	0xf8cdc300
   1ce10:	4606d00c 	.word	0x4606d00c
   1ce14:	684bdd2c 	.word	0x684bdd2c
   1ce18:	b173460c 	.word	0xb173460c
   1ce1c:	f10368a7 	.word	0xf10368a7
   1ce20:	39014180 	.word	0x39014180
   1ce24:	0021f857 	.word	0x0021f857
   1ce28:	0181eb07 	.word	0x0181eb07
   1ce2c:	e00eb118 	.word	0xe00eb118
   1ce30:	0d04f851 	.word	0x0d04f851
   1ce34:	3b01b958 	.word	0x3b01b958
   1ce38:	b982d1fa 	.word	0xb982d1fa
   1ce3c:	aa014621 	.word	0xaa014621
   1ce40:	f7ff4630 	.word	0xf7ff4630
   1ce44:	b900f8f9 	.word	0xb900f8f9
   1ce48:	b0056035 	.word	0xb0056035
   1ce4c:	2a00bdf0 	.word	0x2a00bdf0
   1ce50:	2b01d0f4 	.word	0x2b01d0f4
   1ce54:	683bd8f2 	.word	0x683bd8f2
   1ce58:	d3ef459c 	.word	0xd3ef459c
   1ce5c:	4622d9ee 	.word	0x4622d9ee
   1ce60:	4630a901 	.word	0x4630a901
   1ce64:	fe18f7ff 	.word	0xfe18f7ff
   1ce68:	d1ee2800 	.word	0xd1ee2800
   1ce6c:	e7eb426d 	.word	0xe7eb426d
   1ce70:	f7ffaa01 	.word	0xf7ffaa01
   1ce74:	2800fd6d 	.word	0x2800fd6d
   1ce78:	b005d0e6 	.word	0xb005d0e6
   1ce7c:	bf00bdf0 	.word	0xbf00bdf0

0001ce80 <symbol_000b923>:
   1ce80:	47f0e92d 	.word	0x47f0e92d
   1ce84:	23004606 	.word	0x23004606
   1ce88:	b0862001 	.word	0xb0862001
   1ce8c:	4690428e 	.word	0x4690428e
   1ce90:	90039000 	.word	0x90039000
   1ce94:	3301e9cd 	.word	0x3301e9cd
   1ce98:	3304e9cd 	.word	0x3304e9cd
   1ce9c:	80d1f000 	.word	0x80d1f000
   1cea0:	4546460f 	.word	0x4546460f
   1cea4:	80d5f000 	.word	0x80d5f000
   1cea8:	b185687d 	.word	0xb185687d
   1ceac:	f10568bb 	.word	0xf10568bb
   1ceb0:	3a014280 	.word	0x3a014280
   1ceb4:	1022f853 	.word	0x1022f853
   1ceb8:	0382eb03 	.word	0x0382eb03
   1cebc:	e0bab129 	.word	0xe0bab129
   1cec0:	2d04f853 	.word	0x2d04f853
   1cec4:	f0402a00 	.word	0xf0402a00
   1cec8:	3d0180b6 	.word	0x3d0180b6
   1cecc:	f8d8d1f8 	.word	0xf8d8d1f8
   1ced0:	25004004 	.word	0x25004004
   1ced4:	d03d2c00 	.word	0xd03d2c00
   1ced8:	3008f8d8 	.word	0x3008f8d8
   1cedc:	4280f104 	.word	0x4280f104
   1cee0:	f8533a01 	.word	0xf8533a01
   1cee4:	eb031022 	.word	0xeb031022
   1cee8:	b1190382 	.word	0xb1190382
   1ceec:	f853e004 	.word	0xf853e004
   1cef0:	b90a2d04 	.word	0xb90a2d04
   1cef4:	d1fa3c01 	.word	0xd1fa3c01
   1cef8:	7310f242 	.word	0x7310f242
   1cefc:	0905eb04 	.word	0x0905eb04
   1cf00:	f2004599 	.word	0xf2004599
   1cf04:	f8d680b0 	.word	0xf8d680b0
   1cf08:	45d1a004 	.word	0x45d1a004
   1cf0c:	2104d925 	.word	0x2104d925
   1cf10:	f0024648 	.word	0xf0024648
   1cf14:	4682fbf3 	.word	0x4682fbf3
   1cf18:	f0002800 	.word	0xf0002800
   1cf1c:	68b180a4 	.word	0x68b180a4
   1cf20:	6872b189 	.word	0x6872b189
   1cf24:	f0070092 	.word	0xf0070092
   1cf28:	e9d6fd5b 	.word	0xe9d6fd5b
   1cf2c:	1e532001 	.word	0x1e532001
   1cf30:	2200b13a 	.word	0x2200b13a
   1cf34:	1c593b01 	.word	0x1c593b01
   1cf38:	f1006002 	.word	0xf1006002
   1cf3c:	d1f90004 	.word	0xd1f90004
   1cf40:	f00268b0 	.word	0xf00268b0
   1cf44:	e9c6fbef 	.word	0xe9c6fbef
   1cf48:	ea4f9a01 	.word	0xea4f9a01
   1cf4c:	f8d60289 	.word	0xf8d60289
   1cf50:	e0259008 	.word	0xe0259008
   1cf54:	f8d64625 	.word	0xf8d64625
   1cf58:	f1baa004 	.word	0xf1baa004
   1cf5c:	f0400f00 	.word	0xf0400f00
   1cf60:	21048085 	.word	0x21048085
   1cf64:	f0022001 	.word	0xf0022001
   1cf68:	4681fbc9 	.word	0x4681fbc9
   1cf6c:	d07a2800 	.word	0xd07a2800
   1cf70:	b18968b1 	.word	0xb18968b1
   1cf74:	00926872 	.word	0x00926872
   1cf78:	fd32f007 	.word	0xfd32f007
   1cf7c:	2001e9d6 	.word	0x2001e9d6
   1cf80:	b13a1e53 	.word	0xb13a1e53
   1cf84:	3b014652 	.word	0x3b014652
   1cf88:	60021c59 	.word	0x60021c59
   1cf8c:	0004f100 	.word	0x0004f100
   1cf90:	68b0d1f9 	.word	0x68b0d1f9
   1cf94:	fbc6f002 	.word	0xfbc6f002
   1cf98:	22042301 	.word	0x22042301
   1cf9c:	3901e9c6 	.word	0x3901e9c6
   1cfa0:	46482100 	.word	0x46482100
   1cfa4:	fd49f007 	.word	0xfd49f007
   1cfa8:	23012100 	.word	0x23012100
   1cfac:	601168b2 	.word	0x601168b2
   1cfb0:	b19c6033 	.word	0xb19c6033
   1cfb4:	4980f104 	.word	0x4980f104
   1cfb8:	39fff109 	.word	0x39fff109
   1cfbc:	0989ea4f 	.word	0x0989ea4f
   1cfc0:	3008f8d8 	.word	0x3008f8d8
   1cfc4:	f85368b2 	.word	0xf85368b2
   1cfc8:	444a3009 	.word	0x444a3009
   1cfcc:	462868b9 	.word	0x462868b9
   1cfd0:	fc14f7fe 	.word	0xfc14f7fe
   1cfd4:	f1a93c01 	.word	0xf1a93c01
   1cfd8:	d1f10904 	.word	0xd1f10904
   1cfdc:	683a2400 	.word	0x683a2400
   1cfe0:	3000f8d8 	.word	0x3000f8d8
   1cfe4:	f302fb03 	.word	0xf302fb03
   1cfe8:	98056033 	.word	0x98056033
   1cfec:	9a04b160 	.word	0x9a04b160
   1cff0:	b13a1e53 	.word	0xb13a1e53
   1cff4:	3b012200 	.word	0x3b012200
   1cff8:	60021c5d 	.word	0x60021c5d
   1cffc:	0004f100 	.word	0x0004f100
   1d000:	9805d1f9 	.word	0x9805d1f9
   1d004:	fb8ef002 	.word	0xfb8ef002
   1d008:	23012200 	.word	0x23012200
   1d00c:	e9cd9802 	.word	0xe9cd9802
   1d010:	92053203 	.word	0x92053203
   1d014:	9901b158 	.word	0x9901b158
   1d018:	b1311e4b 	.word	0xb1311e4b
   1d01c:	1c593b01 	.word	0x1c593b01
   1d020:	f1006002 	.word	0xf1006002
   1d024:	d1f90004 	.word	0xd1f90004
   1d028:	f0029802 	.word	0xf0029802
   1d02c:	4620fb7b 	.word	0x4620fb7b
   1d030:	e8bdb006 	.word	0xe8bdb006
   1d034:	f8d887f0 	.word	0xf8d887f0
   1d038:	2c004004 	.word	0x2c004004
   1d03c:	af4cf47f 	.word	0xaf4cf47f
   1d040:	4668e75a 	.word	0x4668e75a
   1d044:	ff8af7fe 	.word	0xff8af7fe
   1d048:	28004604 	.word	0x28004604
   1d04c:	466fd1cd 	.word	0x466fd1cd
   1d050:	a803e727 	.word	0xa803e727
   1d054:	f7fe4631 	.word	0xf7fe4631
   1d058:	4604ff81 	.word	0x4604ff81
   1d05c:	d1c42800 	.word	0xd1c42800
   1d060:	080cf10d 	.word	0x080cf10d
   1d064:	f06fe720 	.word	0xf06fe720
   1d068:	e7be040f 	.word	0xe7be040f
   1d06c:	e76c46d1 	.word	0xe76c46d1

0001d070 <symbol_0008c0f>:
   1d070:	b5002301 	.word	0xb5002301
   1d074:	9200b085 	.word	0x9200b085
   1d078:	e9cdaa01 	.word	0xe9cdaa01
   1d07c:	f8cd3301 	.word	0xf8cd3301
   1d080:	f7ffd00c 	.word	0xf7ffd00c
   1d084:	b005fefd 	.word	0xb005fefd
   1d088:	fb04f85d 	.word	0xfb04f85d

0001d08c <symbol_0007bb0>:
   1d08c:	4ff0e92d 	.word	0x4ff0e92d
   1d090:	b0a3685e 	.word	0xb0a3685e
   1d094:	f8d3b196 	.word	0xf8d3b196
   1d098:	f1068008 	.word	0xf1068008
   1d09c:	f1094980 	.word	0xf1094980
   1d0a0:	f85839ff 	.word	0xf85839ff
   1d0a4:	eb085029 	.word	0xeb085029
   1d0a8:	b96d0e89 	.word	0xb96d0e89
   1d0ac:	463746f4 	.word	0x463746f4
   1d0b0:	f85ce002 	.word	0xf85ce002
   1d0b4:	b93c4d04 	.word	0xb93c4d04
   1d0b8:	d1fa3f01 	.word	0xd1fa3f01
   1d0bc:	060bf06f 	.word	0x060bf06f
   1d0c0:	b0234630 	.word	0xb0234630
   1d0c4:	8ff0e8bd 	.word	0x8ff0e8bd
   1d0c8:	2d00681d 	.word	0x2d00681d
   1d0cc:	4614d0f6 	.word	0x4614d0f6
   1d0d0:	2200468a 	.word	0x2200468a
   1d0d4:	469b2101 	.word	0x469b2101
   1d0d8:	46056863 	.word	0x46056863
   1d0dc:	91139110 	.word	0x91139110
   1d0e0:	91199116 	.word	0x91199116
   1d0e4:	e9cd911c 	.word	0xe9cd911c
   1d0e8:	e9cd2211 	.word	0xe9cd2211
   1d0ec:	e9cd2214 	.word	0xe9cd2214
   1d0f0:	e9cd2217 	.word	0xe9cd2217
   1d0f4:	e9cd221a 	.word	0xe9cd221a
   1d0f8:	2b00221d 	.word	0x2b00221d
   1d0fc:	821af000 	.word	0x821af000
   1d100:	f10368a2 	.word	0xf10368a2
   1d104:	39014180 	.word	0x39014180
   1d108:	0021f852 	.word	0x0021f852
   1d10c:	0281eb02 	.word	0x0281eb02
   1d110:	e07bb120 	.word	0xe07bb120
   1d114:	1d04f852 	.word	0x1d04f852
   1d118:	d1772900 	.word	0xd1772900
   1d11c:	d1f93b01 	.word	0xd1f93b01
   1d120:	2029f858 	.word	0x2029f858
   1d124:	d1772a00 	.word	0xd1772a00
   1d128:	e0034672 	.word	0xe0034672
   1d12c:	1d04f852 	.word	0x1d04f852
   1d130:	d16f2900 	.word	0xd16f2900
   1d134:	d1f93e01 	.word	0xd1f93e01
   1d138:	4621a810 	.word	0x4621a810
   1d13c:	ff0ef7fe 	.word	0xff0ef7fe
   1d140:	28004606 	.word	0x28004606
   1d144:	8092f000 	.word	0x8092f000
   1d148:	98122700 	.word	0x98122700
   1d14c:	9a11b160 	.word	0x9a11b160
   1d150:	b13a1e53 	.word	0xb13a1e53
   1d154:	3b012200 	.word	0x3b012200
   1d158:	60021c5c 	.word	0x60021c5c
   1d15c:	0004f100 	.word	0x0004f100
   1d160:	9812d1f9 	.word	0x9812d1f9
   1d164:	fadef002 	.word	0xfadef002
   1d168:	23012200 	.word	0x23012200
   1d16c:	e9cd9815 	.word	0xe9cd9815
   1d170:	92123210 	.word	0x92123210
   1d174:	9914b158 	.word	0x9914b158
   1d178:	b1311e4b 	.word	0xb1311e4b
   1d17c:	1c593b01 	.word	0x1c593b01
   1d180:	f1006002 	.word	0xf1006002
   1d184:	d1f90004 	.word	0xd1f90004
   1d188:	f0029815 	.word	0xf0029815
   1d18c:	2200facb 	.word	0x2200facb
   1d190:	98182301 	.word	0x98182301
   1d194:	3213e9cd 	.word	0x3213e9cd
   1d198:	b1589215 	.word	0xb1589215
   1d19c:	1e4b9917 	.word	0x1e4b9917
   1d1a0:	3b01b131 	.word	0x3b01b131
   1d1a4:	60021c5d 	.word	0x60021c5d
   1d1a8:	0004f100 	.word	0x0004f100
   1d1ac:	9818d1f9 	.word	0x9818d1f9
   1d1b0:	fab8f002 	.word	0xfab8f002
   1d1b4:	23012200 	.word	0x23012200
   1d1b8:	e9cd981b 	.word	0xe9cd981b
   1d1bc:	92183216 	.word	0x92183216
   1d1c0:	991ab158 	.word	0x991ab158
   1d1c4:	b1311e4b 	.word	0xb1311e4b
   1d1c8:	1c5c3b01 	.word	0x1c5c3b01
   1d1cc:	f1006002 	.word	0xf1006002
   1d1d0:	d1f90004 	.word	0xd1f90004
   1d1d4:	f002981b 	.word	0xf002981b
   1d1d8:	2100faa5 	.word	0x2100faa5
   1d1dc:	911b2301 	.word	0x911b2301
   1d1e0:	3119e9cd 	.word	0x3119e9cd
   1d1e4:	f43f2f00 	.word	0xf43f2f00
   1d1e8:	9a1daf6b 	.word	0x9a1daf6b
   1d1ec:	b1321e53 	.word	0xb1321e53
   1d1f0:	3b01463a 	.word	0x3b01463a
   1d1f4:	60111c58 	.word	0x60111c58
   1d1f8:	0204f102 	.word	0x0204f102
   1d1fc:	4638d1f9 	.word	0x4638d1f9
   1d200:	fa90f002 	.word	0xfa90f002
   1d204:	b0234630 	.word	0xb0234630
   1d208:	8ff0e8bd 	.word	0x8ff0e8bd
   1d20c:	2029f858 	.word	0x2029f858
   1d210:	d0892a00 	.word	0xd0892a00
   1d214:	d38f429e 	.word	0xd38f429e
   1d218:	f200429e 	.word	0xf200429e
   1d21c:	2b008190 	.word	0x2b008190
   1d220:	68a1d08a 	.word	0x68a1d08a
   1d224:	4280f103 	.word	0x4280f103
   1d228:	f8513a01 	.word	0xf8513a01
   1d22c:	f8580022 	.word	0xf8580022
   1d230:	00926022 	.word	0x00926022
   1d234:	44114286 	.word	0x44114286
   1d238:	f4ff4490 	.word	0xf4ff4490
   1d23c:	f200af7d 	.word	0xf200af7d
   1d240:	460a817e 	.word	0x460a817e
   1d244:	f852e008 	.word	0xf852e008
   1d248:	f8580d04 	.word	0xf8580d04
   1d24c:	42881d04 	.word	0x42881d04
   1d250:	af72f63f 	.word	0xaf72f63f
   1d254:	8173f0c0 	.word	0x8173f0c0
   1d258:	d1f43b01 	.word	0xd1f43b01
   1d25c:	4621a810 	.word	0x4621a810
   1d260:	fe7cf7fe 	.word	0xfe7cf7fe
   1d264:	28004606 	.word	0x28004606
   1d268:	af6ef47f 	.word	0xaf6ef47f
   1d26c:	4659a813 	.word	0x4659a813
   1d270:	fe74f7fe 	.word	0xfe74f7fe
   1d274:	28004606 	.word	0x28004606
   1d278:	af66f47f 	.word	0xaf66f47f
   1d27c:	7210f242 	.word	0x7210f242
   1d280:	68672301 	.word	0x68672301
   1d284:	37029313 	.word	0x37029313
   1d288:	93104297 	.word	0x93104297
   1d28c:	8193f200 	.word	0x8193f200
   1d290:	805cf8dd 	.word	0x805cf8dd
   1d294:	d91d4547 	.word	0xd91d4547
   1d298:	46382104 	.word	0x46382104
   1d29c:	fa2ef002 	.word	0xfa2ef002
   1d2a0:	28004681 	.word	0x28004681
   1d2a4:	8187f000 	.word	0x8187f000
   1d2a8:	b1819918 	.word	0xb1819918
   1d2ac:	00929a17 	.word	0x00929a17
   1d2b0:	fb96f007 	.word	0xfb96f007
   1d2b4:	2017e9dd 	.word	0x2017e9dd
   1d2b8:	b1321e53 	.word	0xb1321e53
   1d2bc:	1c5a3b01 	.word	0x1c5a3b01
   1d2c0:	f1006006 	.word	0xf1006006
   1d2c4:	d1f90004 	.word	0xd1f90004
   1d2c8:	f0029818 	.word	0xf0029818
   1d2cc:	46b8fa2b 	.word	0x46b8fa2b
   1d2d0:	7917e9cd 	.word	0x7917e9cd
   1d2d4:	0f00f1b8 	.word	0x0f00f1b8
   1d2d8:	8171f000 	.word	0x8171f000
   1d2dc:	ea4f9e18 	.word	0xea4f9e18
   1d2e0:	27000288 	.word	0x27000288
   1d2e4:	46394630 	.word	0x46394630
   1d2e8:	fba7f007 	.word	0xfba7f007
   1d2ec:	9b182201 	.word	0x9b182201
   1d2f0:	9b1a601f 	.word	0x9b1a601f
   1d2f4:	42939216 	.word	0x42939216
   1d2f8:	81b2f240 	.word	0x81b2f240
   1d2fc:	20032104 	.word	0x20032104
   1d300:	f9fcf002 	.word	0xf9fcf002
   1d304:	28004607 	.word	0x28004607
   1d308:	8155f000 	.word	0x8155f000
   1d30c:	9a142303 	.word	0x9a142303
   1d310:	301de9cd 	.word	0x301de9cd
   1d314:	2a009203 	.word	0x2a009203
   1d318:	8171f000 	.word	0x8171f000
   1d31c:	0901f1b2 	.word	0x0901f1b2
   1d320:	f0009915 	.word	0xf0009915
   1d324:	f85181cf 	.word	0xf85181cf
   1d328:	28000029 	.word	0x28000029
   1d32c:	81c5f040 	.word	0x81c5f040
   1d330:	4280f102 	.word	0x4280f102
   1d334:	464b3a01 	.word	0x464b3a01
   1d338:	0282eb01 	.word	0x0282eb01
   1d33c:	f852e004 	.word	0xf852e004
   1d340:	28000d04 	.word	0x28000d04
   1d344:	81aef040 	.word	0x81aef040
   1d348:	d1f83b01 	.word	0xd1f83b01
   1d34c:	68082620 	.word	0x68082620
   1d350:	f04f2200 	.word	0xf04f2200
   1d354:	e0024100 	.word	0xe0024100
   1d358:	2a203201 	.word	0x2a203201
   1d35c:	4201d004 	.word	0x4201d004
   1d360:	0151ea4f 	.word	0x0151ea4f
   1d364:	1ab3d0f8 	.word	0x1ab3d0f8
   1d368:	031ff003 	.word	0x031ff003
   1d36c:	f0402b1f 	.word	0xf0402b1f
   1d370:	2300819f 	.word	0x2300819f
   1d374:	9b119302 	.word	0x9b119302
   1d378:	9304a813 	.word	0x9304a813
   1d37c:	eba33b01 	.word	0xeba33b01
   1d380:	93010809 	.word	0x93010809
   1d384:	1348ea4f 	.word	0x1348ea4f
   1d388:	93054619 	.word	0x93054619
   1d38c:	f8fef7ff 	.word	0xf8fef7ff
   1d390:	28004606 	.word	0x28004606
   1d394:	aed9f47f 	.word	0xaed9f47f
   1d398:	0888ea4f 	.word	0x0888ea4f
   1d39c:	9818e00d 	.word	0x9818e00d
   1d3a0:	f850a910 	.word	0xf850a910
   1d3a4:	aa133008 	.word	0xaa133008
   1d3a8:	f8403301 	.word	0xf8403301
   1d3ac:	46083008 	.word	0x46083008
   1d3b0:	fca6f7ff 	.word	0xfca6f7ff
   1d3b4:	f0402800 	.word	0xf0402800
   1d3b8:	a9138179 	.word	0xa9138179
   1d3bc:	f7ffa810 	.word	0xf7ffa810
   1d3c0:	2800fa0b 	.word	0x2800fa0b
   1d3c4:	9905daeb 	.word	0x9905daeb
   1d3c8:	f7ffa813 	.word	0xf7ffa813
   1d3cc:	4606f995 	.word	0x4606f995
   1d3d0:	f47f2800 	.word	0xf47f2800
   1d3d4:	f06faeba 	.word	0xf06faeba
   1d3d8:	9a030303 	.word	0x9a030303
   1d3dc:	b508e9cd 	.word	0xb508e9cd
   1d3e0:	4780f102 	.word	0x4780f102
   1d3e4:	fb039a04 	.word	0xfb039a04
   1d3e8:	f102f309 	.word	0xf102f309
   1d3ec:	3a024280 	.word	0x3a024280
   1d3f0:	46150092 	.word	0x46150092
   1d3f4:	ea4f9305 	.word	0xea4f9305
   1d3f8:	93030389 	.word	0x93030389
   1d3fc:	63c9ebc9 	.word	0x63c9ebc9
   1d400:	e9cd3f02 	.word	0xe9cd3f02
   1d404:	e9cd3006 	.word	0xe9cd3006
   1d408:	00b9a40a 	.word	0x00b9a40a
   1d40c:	9b019104 	.word	0x9b019104
   1d410:	f240454b 	.word	0xf240454b
   1d414:	98038173 	.word	0x98038173
   1d418:	9a159912 	.word	0x9a159912
   1d41c:	0a04f105 	.word	0x0a04f105
   1d420:	f8515812 	.word	0xf8515812
   1d424:	9805300a 	.word	0x9805300a
   1d428:	eb004293 	.word	0xeb004293
   1d42c:	9e180405 	.word	0x9e180405
   1d430:	814cf0c0 	.word	0x814cf0c0
   1d434:	33fff04f 	.word	0x33fff04f
   1d438:	26015133 	.word	0x26015133
   1d43c:	9f1e9a18 	.word	0x9f1e9a18
   1d440:	f1a55913 	.word	0xf1a55913
   1d444:	44330b04 	.word	0x44330b04
   1d448:	e04b5113 	.word	0xe04b5113
   1d44c:	806cf8dd 	.word	0x806cf8dd
   1d450:	46400092 	.word	0x46400092
   1d454:	f0072100 	.word	0xf0072100
   1d458:	2200faf0 	.word	0x2200faf0
   1d45c:	601a9b1b 	.word	0x601a9b1b
   1d460:	f1b99619 	.word	0xf1b99619
   1d464:	f0000f00 	.word	0xf0000f00
   1d468:	9b1580f9 	.word	0x9b1580f9
   1d46c:	589b9a04 	.word	0x589b9a04
   1d470:	99039a1b 	.word	0x99039a1b
   1d474:	9a156013 	.word	0x9a156013
   1d478:	58529b1b 	.word	0x58529b1b
   1d47c:	605aa919 	.word	0x605aa919
   1d480:	f10d9b18 	.word	0xf10d9b18
   1d484:	591b083c 	.word	0x591b083c
   1d488:	4608aa1f 	.word	0x4608aa1f
   1d48c:	e9cd930f 	.word	0xe9cd930f
   1d490:	f8cd661f 	.word	0xf8cd661f
   1d494:	f7ff8084 	.word	0xf7ff8084
   1d498:	2800fcf3 	.word	0x2800fcf3
   1d49c:	8106f040 	.word	0x8106f040
   1d4a0:	2a009a1d 	.word	0x2a009a1d
   1d4a4:	80c2f000 	.word	0x80c2f000
   1d4a8:	21000092 	.word	0x21000092
   1d4ac:	f0074638 	.word	0xf0074638
   1d4b0:	2300fac4 	.word	0x2300fac4
   1d4b4:	9b01603b 	.word	0x9b01603b
   1d4b8:	2b01961c 	.word	0x2b01961c
   1d4bc:	9b12a91c 	.word	0x9b12a91c
   1d4c0:	80edf000 	.word	0x80edf000
   1d4c4:	300bf853 	.word	0x300bf853
   1d4c8:	603ba819 	.word	0x603ba819
   1d4cc:	595b9b12 	.word	0x595b9b12
   1d4d0:	9b12607b 	.word	0x9b12607b
   1d4d4:	300af853 	.word	0x300af853
   1d4d8:	f7ff60bb 	.word	0xf7ff60bb
   1d4dc:	2800f97d 	.word	0x2800f97d
   1d4e0:	811cf340 	.word	0x811cf340
   1d4e4:	59139a18 	.word	0x59139a18
   1d4e8:	51133b01 	.word	0x51133b01
   1d4ec:	2a009a1a 	.word	0x2a009a1a
   1d4f0:	2104d1ac 	.word	0x2104d1ac
   1d4f4:	f0022001 	.word	0xf0022001
   1d4f8:	4680f901 	.word	0x4680f901
   1d4fc:	f0002800 	.word	0xf0002800
   1d500:	991b8140 	.word	0x991b8140
   1d504:	9a1ab191 	.word	0x9a1ab191
   1d508:	f0070092 	.word	0xf0070092
   1d50c:	e9ddfa69 	.word	0xe9ddfa69
   1d510:	4602101a 	.word	0x4602101a
   1d514:	b1391e4b 	.word	0xb1391e4b
   1d518:	3b012100 	.word	0x3b012100
   1d51c:	1c596011 	.word	0x1c596011
   1d520:	0204f102 	.word	0x0204f102
   1d524:	981bd1f8 	.word	0x981bd1f8
   1d528:	f8fcf002 	.word	0xf8fcf002
   1d52c:	e9cd2204 	.word	0xe9cd2204
   1d530:	e78e681a 	.word	0xe78e681a
   1d534:	2029f858 	.word	0x2029f858
   1d538:	f43f2a00 	.word	0xf43f2a00
   1d53c:	b355adf5 	.word	0xb355adf5
   1d540:	b9ee686e 	.word	0xb9ee686e
   1d544:	20012104 	.word	0x20012104
   1d548:	f8d8f002 	.word	0xf8d8f002
   1d54c:	b3904607 	.word	0xb3904607
   1d550:	b18168a9 	.word	0xb18168a9
   1d554:	0092686a 	.word	0x0092686a
   1d558:	fa42f007 	.word	0xfa42f007
   1d55c:	2001e9d5 	.word	0x2001e9d5
   1d560:	b1321e53 	.word	0xb1321e53
   1d564:	1c593b01 	.word	0x1c593b01
   1d568:	f1006006 	.word	0xf1006006
   1d56c:	d1f90004 	.word	0xd1f90004
   1d570:	f00268a8 	.word	0xf00268a8
   1d574:	2301f8d7 	.word	0x2301f8d7
   1d578:	e9c52204 	.word	0xe9c52204
   1d57c:	e0013701 	.word	0xe0013701
   1d580:	00b268af 	.word	0x00b268af
   1d584:	46382100 	.word	0x46382100
   1d588:	fa57f007 	.word	0xfa57f007
   1d58c:	23012100 	.word	0x23012100
   1d590:	601168aa 	.word	0x601168aa
   1d594:	f1ba602b 	.word	0xf1ba602b
   1d598:	d0070f00 	.word	0xd0070f00
   1d59c:	46504621 	.word	0x46504621
   1d5a0:	fcdcf7fe 	.word	0xfcdcf7fe
   1d5a4:	28004606 	.word	0x28004606
   1d5a8:	adcef47f 	.word	0xadcef47f
   1d5ac:	46302600 	.word	0x46302600
   1d5b0:	e8bdb023 	.word	0xe8bdb023
   1d5b4:	27008ff0 	.word	0x27008ff0
   1d5b8:	060ff06f 	.word	0x060ff06f
   1d5bc:	2104e5c5 	.word	0x2104e5c5
   1d5c0:	f0022001 	.word	0xf0022001
   1d5c4:	4606f89b 	.word	0x4606f89b
   1d5c8:	d0f42800 	.word	0xd0f42800
   1d5cc:	b1899918 	.word	0xb1899918
   1d5d0:	00929a17 	.word	0x00929a17
   1d5d4:	fa04f007 	.word	0xfa04f007
   1d5d8:	3017e9dd 	.word	0x3017e9dd
   1d5dc:	b13b1e5a 	.word	0xb13b1e5a
   1d5e0:	3a014643 	.word	0x3a014643
   1d5e4:	60031c57 	.word	0x60031c57
   1d5e8:	0004f100 	.word	0x0004f100
   1d5ec:	9818d1f9 	.word	0x9818d1f9
   1d5f0:	f898f002 	.word	0xf898f002
   1d5f4:	22042301 	.word	0x22042301
   1d5f8:	3617e9cd 	.word	0x3617e9cd
   1d5fc:	231fe671 	.word	0x231fe671
   1d600:	93024619 	.word	0x93024619
   1d604:	f7fea810 	.word	0xf7fea810
   1d608:	4606ffc1 	.word	0x4606ffc1
   1d60c:	f47f2800 	.word	0xf47f2800
   1d610:	9902ad9c 	.word	0x9902ad9c
   1d614:	f7fea813 	.word	0xf7fea813
   1d618:	4606ffb9 	.word	0x4606ffb9
   1d61c:	f47f2800 	.word	0xf47f2800
   1d620:	9b14ad94 	.word	0x9b14ad94
   1d624:	f1039303 	.word	0xf1039303
   1d628:	e6a439ff 	.word	0xe6a439ff
   1d62c:	20012104 	.word	0x20012104
   1d630:	f002920d 	.word	0xf002920d
   1d634:	4603f863 	.word	0x4603f863
   1d638:	f0002800 	.word	0xf0002800
   1d63c:	b14780a2 	.word	0xb14780a2
   1d640:	46399a0d 	.word	0x46399a0d
   1d644:	f007900c 	.word	0xf007900c
   1d648:	4638f9cb 	.word	0x4638f9cb
   1d64c:	f86af002 	.word	0xf86af002
   1d650:	461f9b0c 	.word	0x461f9b0c
   1d654:	e9cd2204 	.word	0xe9cd2204
   1d658:	e726631d 	.word	0xe726631d
   1d65c:	e707464b 	.word	0xe707464b
   1d660:	20022104 	.word	0x20022104
   1d664:	f84af002 	.word	0xf84af002
   1d668:	28004606 	.word	0x28004606
   1d66c:	991bd0a3 	.word	0x991bd0a3
   1d670:	9a1ab189 	.word	0x9a1ab189
   1d674:	f0070092 	.word	0xf0070092
   1d678:	e9ddf9b3 	.word	0xe9ddf9b3
   1d67c:	4618131a 	.word	0x4618131a
   1d680:	b1311e4a 	.word	0xb1311e4a
   1d684:	1c503a01 	.word	0x1c503a01
   1d688:	f103601f 	.word	0xf103601f
   1d68c:	d1f90304 	.word	0xd1f90304
   1d690:	f002981b 	.word	0xf002981b
   1d694:	2302f847 	.word	0x2302f847
   1d698:	361ae9cd 	.word	0x361ae9cd
   1d69c:	595be62e 	.word	0x595be62e
   1d6a0:	e715a819 	.word	0xe715a819
   1d6a4:	f103015b 	.word	0xf103015b
   1d6a8:	e6510620 	.word	0xe6510620
   1d6ac:	e54c4606 	.word	0xe54c4606
   1d6b0:	031ff1c3 	.word	0x031ff1c3
   1d6b4:	46199302 	.word	0x46199302
   1d6b8:	ea4fe7a4 	.word	0xea4fe7a4
   1d6bc:	f1031349 	.word	0xf1031349
   1d6c0:	e6450620 	.word	0xe6450620
   1d6c4:	26206808 	.word	0x26206808
   1d6c8:	e641464b 	.word	0xe641464b
   1d6cc:	b192594f 	.word	0xb192594f
   1d6d0:	f04f469c 	.word	0xf04f469c
   1d6d4:	46610b00 	.word	0x46610b00
   1d6d8:	ea4b465b 	.word	0xea4b465b
   1d6dc:	f7ee0007 	.word	0xf7ee0007
   1d6e0:	2300ff5b 	.word	0x2300ff5b
   1d6e4:	32fff04f 	.word	0x32fff04f
   1d6e8:	bf08428b 	.word	0xbf08428b
   1d6ec:	d2004282 	.word	0xd2004282
   1d6f0:	51304610 	.word	0x51304610
   1d6f4:	f04fe6a1 	.word	0xf04fe6a1
   1d6f8:	e7fa30ff 	.word	0xe7fa30ff
   1d6fc:	6b07e9dd 	.word	0x6b07e9dd
   1d700:	5a09e9dd 	.word	0x5a09e9dd
   1d704:	2d009c0b 	.word	0x2d009c0b
   1d708:	a916d05f 	.word	0xa916d05f
   1d70c:	f7fe4628 	.word	0xf7fe4628
   1d710:	2800fc25 	.word	0x2800fc25
   1d714:	4606d053 	.word	0x4606d053
   1d718:	e5169f1e 	.word	0xe5169f1e
   1d71c:	9b182501 	.word	0x9b182501
   1d720:	591baa1f 	.word	0x591baa1f
   1d724:	a819a913 	.word	0xa819a913
   1d728:	f8cd930f 	.word	0xf8cd930f
   1d72c:	e9cd8084 	.word	0xe9cd8084
   1d730:	f7ff551f 	.word	0xf7ff551f
   1d734:	2800fba5 	.word	0x2800fba5
   1d738:	9b06d1b8 	.word	0x9b06d1b8
   1d73c:	f1039a01 	.word	0xf1039a01
   1d740:	3b016300 	.word	0x3b016300
   1d744:	015e4413 	.word	0x015e4413
   1d748:	a8194631 	.word	0xa8194631
   1d74c:	ff1ef7fe 	.word	0xff1ef7fe
   1d750:	d1ab2800 	.word	0xd1ab2800
   1d754:	aa19a910 	.word	0xaa19a910
   1d758:	f7ff4608 	.word	0xf7ff4608
   1d75c:	4603fad1 	.word	0x4603fad1
   1d760:	a91fbb58 	.word	0xa91fbb58
   1d764:	930fa810 	.word	0x930fa810
   1d768:	551fe9cd 	.word	0x551fe9cd
   1d76c:	8084f8cd 	.word	0x8084f8cd
   1d770:	fb2ef7fe 	.word	0xfb2ef7fe
   1d774:	db072800 	.word	0xdb072800
   1d778:	465d9b01 	.word	0x465d9b01
   1d77c:	93013b01 	.word	0x93013b01
   1d780:	f06fe645 	.word	0xf06fe645
   1d784:	e4e0060f 	.word	0xe4e0060f
   1d788:	a819a913 	.word	0xa819a913
   1d78c:	fbe6f7fe 	.word	0xfbe6f7fe
   1d790:	d18b2800 	.word	0xd18b2800
   1d794:	a8194631 	.word	0xa8194631
   1d798:	fef8f7fe 	.word	0xfef8f7fe
   1d79c:	d1852800 	.word	0xd1852800
   1d7a0:	aa19a910 	.word	0xaa19a910
   1d7a4:	f7ff4608 	.word	0xf7ff4608
   1d7a8:	2800fa37 	.word	0x2800fa37
   1d7ac:	af7ef47f 	.word	0xaf7ef47f
   1d7b0:	59139a18 	.word	0x59139a18
   1d7b4:	51133b01 	.word	0x51133b01
   1d7b8:	4606e7de 	.word	0x4606e7de
   1d7bc:	f8dbe4c5 	.word	0xf8dbe4c5
   1d7c0:	68223000 	.word	0x68223000
   1d7c4:	f302fb03 	.word	0xf302fb03
   1d7c8:	f1ba602b 	.word	0xf1ba602b
   1d7cc:	d0050f00 	.word	0xd0050f00
   1d7d0:	a8109902 	.word	0xa8109902
   1d7d4:	ff90f7fe 	.word	0xff90f7fe
   1d7d8:	b1084606 	.word	0xb1084606
   1d7dc:	e4b49f1e 	.word	0xe4b49f1e
   1d7e0:	a9106823 	.word	0xa9106823
   1d7e4:	93104650 	.word	0x93104650
   1d7e8:	fbb8f7fe 	.word	0xfbb8f7fe
   1d7ec:	28004606 	.word	0x28004606
   1d7f0:	2401d1f4 	.word	0x2401d1f4
   1d7f4:	a91fab0f 	.word	0xa91fab0f
   1d7f8:	960f4650 	.word	0x960f4650
   1d7fc:	441fe9cd 	.word	0x441fe9cd
   1d800:	f7fe9321 	.word	0xf7fe9321
   1d804:	2800fae5 	.word	0x2800fae5
   1d808:	f8cad1e8 	.word	0xf8cad1e8
   1d80c:	e7e54000 	.word	0xe7e54000

0001d810 <symbol_000dbba>:
   1d810:	41f0e92d 	.word	0x41f0e92d
   1d814:	46176853 	.word	0x46176853
   1d818:	6894b183 	.word	0x6894b183
   1d81c:	4580f103 	.word	0x4580f103
   1d820:	f8543d01 	.word	0xf8543d01
   1d824:	eb042025 	.word	0xeb042025
   1d828:	b12a0485 	.word	0xb12a0485
   1d82c:	f854e11a 	.word	0xf854e11a
   1d830:	2d005d04 	.word	0x2d005d04
   1d834:	8116f040 	.word	0x8116f040
   1d838:	d1f83b01 	.word	0xd1f83b01
   1d83c:	4606460a 	.word	0x4606460a
   1d840:	463b4601 	.word	0x463b4601
   1d844:	f7ff2000 	.word	0xf7ff2000
   1d848:	2800fc21 	.word	0x2800fc21
   1d84c:	f06fd151 	.word	0xf06fd151
   1d850:	68714840 	.word	0x68714840
   1d854:	68b0b191 	.word	0x68b0b191
   1d858:	0308eb01 	.word	0x0308eb01
   1d85c:	c023f850 	.word	0xc023f850
   1d860:	0283eb00 	.word	0x0283eb00
   1d864:	0f00f1bc 	.word	0x0f00f1bc
   1d868:	4614d156 	.word	0x4614d156
   1d86c:	e003460b 	.word	0xe003460b
   1d870:	5d04f854 	.word	0x5d04f854
   1d874:	d14f2d00 	.word	0xd14f2d00
   1d878:	d1f93b01 	.word	0xd1f93b01
   1d87c:	4440f06f 	.word	0x4440f06f
   1d880:	46304639 	.word	0x46304639
   1d884:	ffa8f7fe 	.word	0xffa8f7fe
   1d888:	db422800 	.word	0xdb422800
   1d88c:	683b6835 	.word	0x683b6835
   1d890:	f305fb03 	.word	0xf305fb03
   1d894:	dd2e2b00 	.word	0xdd2e2b00
   1d898:	687a6873 	.word	0x687a6873
   1d89c:	68b1b183 	.word	0x68b1b183
   1d8a0:	f8511918 	.word	0xf8511918
   1d8a4:	eb01c020 	.word	0xeb01c020
   1d8a8:	f1bc0180 	.word	0xf1bc0180
   1d8ac:	d0050f00 	.word	0xd0050f00
   1d8b0:	f851e090 	.word	0xf851e090
   1d8b4:	28000d04 	.word	0x28000d04
   1d8b8:	808cf040 	.word	0x808cf040
   1d8bc:	d1f83b01 	.word	0xd1f83b01
   1d8c0:	f8d7b18a 	.word	0xf8d7b18a
   1d8c4:	1911c008 	.word	0x1911c008
   1d8c8:	0021f85c 	.word	0x0021f85c
   1d8cc:	f0402800 	.word	0xf0402800
   1d8d0:	eb0c80be 	.word	0xeb0c80be
   1d8d4:	e0040181 	.word	0xe0040181
   1d8d8:	0d04f851 	.word	0x0d04f851
   1d8dc:	f0402800 	.word	0xf0402800
   1d8e0:	3a018083 	.word	0x3a018083
   1d8e4:	463ad1f8 	.word	0x463ad1f8
   1d8e8:	46304631 	.word	0x46304631
   1d8ec:	f8d4f7ff 	.word	0xf8d4f7ff
   1d8f0:	e8bdb140 	.word	0xe8bdb140
   1d8f4:	463a81f0 	.word	0x463a81f0
   1d8f8:	46304631 	.word	0x46304631
   1d8fc:	f828f7ff 	.word	0xf828f7ff
   1d900:	d1f62800 	.word	0xd1f62800
   1d904:	46396035 	.word	0x46396035
   1d908:	f7fe4630 	.word	0xf7fe4630
   1d90c:	2800ff65 	.word	0x2800ff65
   1d910:	2000dabc 	.word	0x2000dabc
   1d914:	81f0e8bd 	.word	0x81f0e8bd
   1d918:	2c006834 	.word	0x2c006834
   1d91c:	683bdaae 	.word	0x683bdaae
   1d920:	f304fb03 	.word	0xf304fb03
   1d924:	da232b00 	.word	0xda232b00
   1d928:	0f00f1bc 	.word	0x0f00f1bc
   1d92c:	4613d129 	.word	0x4613d129
   1d930:	f853e002 	.word	0xf853e002
   1d934:	bb222d04 	.word	0xbb222d04
   1d938:	d1fa3901 	.word	0xd1fa3901
   1d93c:	b173687b 	.word	0xb173687b
   1d940:	c008f8d7 	.word	0xc008f8d7
   1d944:	0208eb03 	.word	0x0208eb03
   1d948:	5022f85c 	.word	0x5022f85c
   1d94c:	0282eb0c 	.word	0x0282eb0c
   1d950:	e071b11d 	.word	0xe071b11d
   1d954:	5d04f852 	.word	0x5d04f852
   1d958:	3b01bb05 	.word	0x3b01bb05
   1d95c:	463ad1fa 	.word	0x463ad1fa
   1d960:	46304631 	.word	0x46304631
   1d964:	f898f7ff 	.word	0xf898f7ff
   1d968:	d1c22800 	.word	0xd1c22800
   1d96c:	e7706034 	.word	0xe7706034
   1d970:	4631463a 	.word	0x4631463a
   1d974:	f7fe4630 	.word	0xf7fe4630
   1d978:	2800ffeb 	.word	0x2800ffeb
   1d97c:	e8bdd0f6 	.word	0xe8bdd0f6
   1d980:	687b81f0 	.word	0x687b81f0
   1d984:	d0ea2b00 	.word	0xd0ea2b00
   1d988:	c008f8d7 	.word	0xc008f8d7
   1d98c:	0208eb03 	.word	0x0208eb03
   1d990:	5022f85c 	.word	0x5022f85c
   1d994:	0282eb0c 	.word	0x0282eb0c
   1d998:	d0de2d00 	.word	0xd0de2d00
   1d99c:	d8de4299 	.word	0xd8de4299
   1d9a0:	2900d34a 	.word	0x2900d34a
   1d9a4:	eb01d0db 	.word	0xeb01d0db
   1d9a8:	f8500308 	.word	0xf8500308
   1d9ac:	f85c2023 	.word	0xf85c2023
   1d9b0:	009b5023 	.word	0x009b5023
   1d9b4:	44184295 	.word	0x44184295
   1d9b8:	d3d04463 	.word	0xd3d04463
   1d9bc:	e03bd907 	.word	0xe03bd907
   1d9c0:	5d04f850 	.word	0x5d04f850
   1d9c4:	2d04f853 	.word	0x2d04f853
   1d9c8:	d8c84295 	.word	0xd8c84295
   1d9cc:	3901d334 	.word	0x3901d334
   1d9d0:	e7c4d1f6 	.word	0xe7c4d1f6
   1d9d4:	d0862a00 	.word	0xd0862a00
   1d9d8:	c008f8d7 	.word	0xc008f8d7
   1d9dc:	f85c1911 	.word	0xf85c1911
   1d9e0:	28000021 	.word	0x28000021
   1d9e4:	af75f43f 	.word	0xaf75f43f
   1d9e8:	f63f4293 	.word	0xf63f4293
   1d9ec:	d32eaf7c 	.word	0xd32eaf7c
   1d9f0:	f43f2b00 	.word	0xf43f2b00
   1d9f4:	68b1af78 	.word	0x68b1af78
   1d9f8:	f851191a 	.word	0xf851191a
   1d9fc:	f85c0022 	.word	0xf85c0022
   1da00:	0092e022 	.word	0x0092e022
   1da04:	44114586 	.word	0x44114586
   1da08:	f4ff4462 	.word	0xf4ff4462
   1da0c:	d908af6c 	.word	0xd908af6c
   1da10:	f851e01d 	.word	0xf851e01d
   1da14:	f852cd04 	.word	0xf852cd04
   1da18:	45840d04 	.word	0x45840d04
   1da1c:	af63f63f 	.word	0xaf63f63f
   1da20:	3b01d315 	.word	0x3b01d315
   1da24:	463ad1f5 	.word	0x463ad1f5
   1da28:	46304631 	.word	0x46304631
   1da2c:	f834f7ff 	.word	0xf834f7ff
   1da30:	f47f2800 	.word	0xf47f2800
   1da34:	e765af5e 	.word	0xe765af5e
   1da38:	46394632 	.word	0x46394632
   1da3c:	f7ff4630 	.word	0xf7ff4630
   1da40:	2800f82b 	.word	0x2800f82b
   1da44:	af55f47f 	.word	0xaf55f47f
   1da48:	60344264 	.word	0x60344264
   1da4c:	4632e701 	.word	0x4632e701
   1da50:	46304639 	.word	0x46304639
   1da54:	f820f7ff 	.word	0xf820f7ff
   1da58:	f47f2800 	.word	0xf47f2800
   1da5c:	426daf4a 	.word	0x426daf4a
   1da60:	e70d6035 	.word	0xe70d6035
   1da64:	2b00683b 	.word	0x2b00683b
   1da68:	aee8f6bf 	.word	0xaee8f6bf
   1da6c:	0009f06f 	.word	0x0009f06f
   1da70:	bf00e73f 	.word	0xbf00e73f

0001da74 <symbol_0005f38>:
   1da74:	41f0e92d 	.word	0x41f0e92d
   1da78:	2501460f 	.word	0x2501460f
   1da7c:	68bb2100 	.word	0x68bb2100
   1da80:	4604b086 	.word	0x4604b086
   1da84:	95004616 	.word	0x95004616
   1da88:	e9cd9503 	.word	0xe9cd9503
   1da8c:	e9cd1101 	.word	0xe9cd1101
   1da90:	2b001104 	.word	0x2b001104
   1da94:	6879d040 	.word	0x6879d040
   1da98:	d0111e4a 	.word	0xd0111e4a
   1da9c:	0022f853 	.word	0x0022f853
   1daa0:	f0402800 	.word	0xf0402800
   1daa4:	f10180c4 	.word	0xf10180c4
   1daa8:	39014180 	.word	0x39014180
   1daac:	0381eb03 	.word	0x0381eb03
   1dab0:	f853e004 	.word	0xf853e004
   1dab4:	29001d04 	.word	0x29001d04
   1dab8:	80b9f040 	.word	0x80b9f040
   1dabc:	d1f83a01 	.word	0xd1f83a01
   1dac0:	683b2501 	.word	0x683b2501
   1dac4:	21049300 	.word	0x21049300
   1dac8:	f0014628 	.word	0xf0014628
   1dacc:	4680fe17 	.word	0x4680fe17
   1dad0:	f0002800 	.word	0xf0002800
   1dad4:	9902813c 	.word	0x9902813c
   1dad8:	9a01b189 	.word	0x9a01b189
   1dadc:	f0060092 	.word	0xf0060092
   1dae0:	e9ddff7f 	.word	0xe9ddff7f
   1dae4:	1e532001 	.word	0x1e532001
   1dae8:	2200b13a 	.word	0x2200b13a
   1daec:	1c593b01 	.word	0x1c593b01
   1daf0:	f1006002 	.word	0xf1006002
   1daf4:	d1f90004 	.word	0xd1f90004
   1daf8:	f0019802 	.word	0xf0019802
   1dafc:	e9cdfe13 	.word	0xe9cdfe13
   1db00:	00ad5801 	.word	0x00ad5801
   1db04:	2100462a 	.word	0x2100462a
   1db08:	f0064640 	.word	0xf0064640
   1db0c:	462aff96 	.word	0x462aff96
   1db10:	980268b9 	.word	0x980268b9
   1db14:	ff64f006 	.word	0xff64f006
   1db18:	a8034631 	.word	0xa8034631
   1db1c:	fa1ef7fe 	.word	0xfa1ef7fe
   1db20:	28004607 	.word	0x28004607
   1db24:	9e01d15d 	.word	0x9e01d15d
   1db28:	f0002e00 	.word	0xf0002e00
   1db2c:	4601810e 	.word	0x4601810e
   1db30:	3d049d02 	.word	0x3d049d02
   1db34:	f8552200 	.word	0xf8552200
   1db38:	e0040f04 	.word	0xe0040f04
   1db3c:	f1012a20 	.word	0xf1012a20
   1db40:	f0000101 	.word	0xf0000101
   1db44:	fa208081 	.word	0xfa208081
   1db48:	f013f302 	.word	0xf013f302
   1db4c:	f1020301 	.word	0xf1020301
   1db50:	d0f30201 	.word	0xd0f30201
   1db54:	b1b59d04 	.word	0xb1b59d04
   1db58:	46842000 	.word	0x46842000
   1db5c:	3f049f05 	.word	0x3f049f05
   1db60:	f8572200 	.word	0xf8572200
   1db64:	e0036f04 	.word	0xe0036f04
   1db68:	f1002a20 	.word	0xf1002a20
   1db6c:	d0710001 	.word	0xd0710001
   1db70:	f302fa26 	.word	0xf302fa26
   1db74:	0301f013 	.word	0x0301f013
   1db78:	0201f102 	.word	0x0201f102
   1db7c:	4281d0f4 	.word	0x4281d0f4
   1db80:	4601bf28 	.word	0x4601bf28
   1db84:	4668460d 	.word	0x4668460d
   1db88:	f7fe4629 	.word	0xf7fe4629
   1db8c:	4607fdb5 	.word	0x4607fdb5
   1db90:	4629bb38 	.word	0x4629bb38
   1db94:	f7fea803 	.word	0xf7fea803
   1db98:	4607fdaf 	.word	0x4607fdaf
   1db9c:	2301bb08 	.word	0x2301bb08
   1dba0:	4640f06f 	.word	0x4640f06f
   1dba4:	93009303 	.word	0x93009303
   1dba8:	b17f9f01 	.word	0xb17f9f01
   1dbac:	19ba9802 	.word	0x19ba9802
   1dbb0:	3022f850 	.word	0x3022f850
   1dbb4:	0282eb00 	.word	0x0282eb00
   1dbb8:	d1512b00 	.word	0xd1512b00
   1dbbc:	e003463b 	.word	0xe003463b
   1dbc0:	1d04f852 	.word	0x1d04f852
   1dbc4:	d14b2900 	.word	0xd14b2900
   1dbc8:	d1f93b01 	.word	0xd1f93b01
   1dbcc:	a8034629 	.word	0xa8034629
   1dbd0:	fcdcf7fe 	.word	0xfcdcf7fe
   1dbd4:	b9204607 	.word	0xb9204607
   1dbd8:	4620a903 	.word	0x4620a903
   1dbdc:	f9bef7fe 	.word	0xf9bef7fe
   1dbe0:	98024607 	.word	0x98024607
   1dbe4:	9a01b160 	.word	0x9a01b160
   1dbe8:	b13a1e53 	.word	0xb13a1e53
   1dbec:	3b012200 	.word	0x3b012200
   1dbf0:	60021c5c 	.word	0x60021c5c
   1dbf4:	0004f100 	.word	0x0004f100
   1dbf8:	9802d1f9 	.word	0x9802d1f9
   1dbfc:	fd92f001 	.word	0xfd92f001
   1dc00:	23012200 	.word	0x23012200
   1dc04:	e9cd9805 	.word	0xe9cd9805
   1dc08:	92023200 	.word	0x92023200
   1dc0c:	9904b158 	.word	0x9904b158
   1dc10:	b1311e4b 	.word	0xb1311e4b
   1dc14:	1c593b01 	.word	0x1c593b01
   1dc18:	f1006002 	.word	0xf1006002
   1dc1c:	d1f90004 	.word	0xd1f90004
   1dc20:	f0019805 	.word	0xf0019805
   1dc24:	4638fd7f 	.word	0x4638fd7f
   1dc28:	e8bdb006 	.word	0xe8bdb006
   1dc2c:	f24281f0 	.word	0xf24281f0
   1dc30:	68397310 	.word	0x68397310
   1dc34:	429d1c55 	.word	0x429d1c55
   1dc38:	f2009100 	.word	0xf2009100
   1dc3c:	2d008083 	.word	0x2d008083
   1dc40:	af41f47f 	.word	0xaf41f47f
   1dc44:	e75d46a8 	.word	0xe75d46a8
   1dc48:	42be3701 	.word	0x42be3701
   1dc4c:	af72f47f 	.word	0xaf72f47f
   1dc50:	e77f4619 	.word	0xe77f4619
   1dc54:	0c01f10c 	.word	0x0c01f10c
   1dc58:	d18145ac 	.word	0xd18145ac
   1dc5c:	e792461d 	.word	0xe792461d
   1dc60:	2b009b00 	.word	0x2b009b00
   1dc64:	2100d0b2 	.word	0x2100d0b2
   1dc68:	f1a0468e 	.word	0xf1a0468e
   1dc6c:	22000c04 	.word	0x22000c04
   1dc70:	0f04f85c 	.word	0x0f04f85c
   1dc74:	2a20e003 	.word	0x2a20e003
   1dc78:	0101f101 	.word	0x0101f101
   1dc7c:	fa20d042 	.word	0xfa20d042
   1dc80:	f013f302 	.word	0xf013f302
   1dc84:	f1020301 	.word	0xf1020301
   1dc88:	d0f40201 	.word	0xd0f40201
   1dc8c:	f7fe4668 	.word	0xf7fe4668
   1dc90:	4607fd33 	.word	0x4607fd33
   1dc94:	d1a42800 	.word	0xd1a42800
   1dc98:	c010f8dd 	.word	0xc010f8dd
   1dc9c:	0f00f1bc 	.word	0x0f00f1bc
   1dca0:	4601d04e 	.word	0x4601d04e
   1dca4:	9f054686 	.word	0x9f054686
   1dca8:	22003f04 	.word	0x22003f04
   1dcac:	0f04f857 	.word	0x0f04f857
   1dcb0:	2a20e003 	.word	0x2a20e003
   1dcb4:	0101f101 	.word	0x0101f101
   1dcb8:	fa20d02a 	.word	0xfa20d02a
   1dcbc:	f013f302 	.word	0xf013f302
   1dcc0:	f1020301 	.word	0xf1020301
   1dcc4:	d0f40201 	.word	0xd0f40201
   1dcc8:	f7fea803 	.word	0xf7fea803
   1dccc:	4607fd15 	.word	0x4607fd15
   1dcd0:	d1862800 	.word	0xd1862800
   1dcd4:	4668a903 	.word	0x4668a903
   1dcd8:	fd7ef7fe 	.word	0xfd7ef7fe
   1dcdc:	db1d2800 	.word	0xdb1d2800
   1dce0:	4669aa03 	.word	0x4669aa03
   1dce4:	f7fe4668 	.word	0xf7fe4668
   1dce8:	4607fed7 	.word	0x4607fed7
   1dcec:	f47f2800 	.word	0xf47f2800
   1dcf0:	2101af78 	.word	0x2101af78
   1dcf4:	f7fe4668 	.word	0xf7fe4668
   1dcf8:	4607fcff 	.word	0x4607fcff
   1dcfc:	f43f2800 	.word	0xf43f2800
   1dd00:	e76eaf53 	.word	0xe76eaf53
   1dd04:	0e01f10e 	.word	0x0e01f10e
   1dd08:	d1b045be 	.word	0xd1b045be
   1dd0c:	e7bd4619 	.word	0xe7bd4619
   1dd10:	0e01f10e 	.word	0x0e01f10e
   1dd14:	d1c845e6 	.word	0xd1c845e6
   1dd18:	e7d54619 	.word	0xe7d54619
   1dd1c:	466aa903 	.word	0x466aa903
   1dd20:	f7fe4608 	.word	0xf7fe4608
   1dd24:	4607feb9 	.word	0x4607feb9
   1dd28:	f47f2800 	.word	0xf47f2800
   1dd2c:	2101af5a 	.word	0x2101af5a
   1dd30:	f7fea803 	.word	0xf7fea803
   1dd34:	4607fce1 	.word	0x4607fce1
   1dd38:	f43f2800 	.word	0xf43f2800
   1dd3c:	e750af35 	.word	0xe750af35
   1dd40:	e7c14661 	.word	0xe7c14661
   1dd44:	070ff06f 	.word	0x070ff06f
   1dd48:	4631e75a 	.word	0x4631e75a
   1dd4c:	9802e702 	.word	0x9802e702
   1dd50:	070ff06f 	.word	0x070ff06f
   1dd54:	bf00e746 	.word	0xbf00e746

0001dd58 <symbol_000644e>:
   1dd58:	43f0e92d 	.word	0x43f0e92d
   1dd5c:	6f80f5b1 	.word	0x6f80f5b1
   1dd60:	4d04f2ad 	.word	0x4d04f2ad
   1dd64:	80a5f200 	.word	0x80a5f200
   1dd68:	4617460d 	.word	0x4617460d
   1dd6c:	46694606 	.word	0x46694606
   1dd70:	462a4618 	.word	0x462a4618
   1dd74:	460747b8 	.word	0x460747b8
   1dd78:	4638b120 	.word	0x4638b120
   1dd7c:	4d04f20d 	.word	0x4d04f20d
   1dd80:	83f0e8bd 	.word	0x83f0e8bd
   1dd84:	f0002d00 	.word	0xf0002d00
   1dd88:	f89d808a 	.word	0xf89d808a
   1dd8c:	2b003000 	.word	0x2b003000
   1dd90:	8089f040 	.word	0x8089f040
   1dd94:	4604466b 	.word	0x4604466b
   1dd98:	f813e003 	.word	0xf813e003
   1dd9c:	2a002f01 	.word	0x2a002f01
   1dda0:	3401d14d 	.word	0x3401d14d
   1dda4:	d1f842a5 	.word	0xd1f842a5
   1dda8:	8004f8d6 	.word	0x8004f8d6
   1ddac:	0f00f1b8 	.word	0x0f00f1b8
   1ddb0:	2104d170 	.word	0x2104d170
   1ddb4:	f0012001 	.word	0xf0012001
   1ddb8:	4681fca1 	.word	0x4681fca1
   1ddbc:	d0752800 	.word	0xd0752800
   1ddc0:	b18968b1 	.word	0xb18968b1
   1ddc4:	00926872 	.word	0x00926872
   1ddc8:	fe0af006 	.word	0xfe0af006
   1ddcc:	2001e9d6 	.word	0x2001e9d6
   1ddd0:	b13a1e53 	.word	0xb13a1e53
   1ddd4:	3b014642 	.word	0x3b014642
   1ddd8:	60021c59 	.word	0x60021c59
   1dddc:	0004f100 	.word	0x0004f100
   1dde0:	68b0d1f9 	.word	0x68b0d1f9
   1dde4:	fc9ef001 	.word	0xfc9ef001
   1dde8:	22042301 	.word	0x22042301
   1ddec:	3901e9c6 	.word	0x3901e9c6
   1ddf0:	46482100 	.word	0x46482100
   1ddf4:	fe21f006 	.word	0xfe21f006
   1ddf8:	22012300 	.word	0x22012300
   1ddfc:	42a568b1 	.word	0x42a568b1
   1de00:	6032600b 	.word	0x6032600b
   1de04:	eb0dd9b9 	.word	0xeb0dd9b9
   1de08:	1b2c0205 	.word	0x1b2c0205
   1de0c:	f02368b1 	.word	0xf02368b1
   1de10:	ea4f0803 	.word	0xea4f0803
   1de14:	f8120ec3 	.word	0xf8120ec3
   1de18:	f851cd01 	.word	0xf851cd01
   1de1c:	f00e0008 	.word	0xf00e0008
   1de20:	fa0c0e18 	.word	0xfa0c0e18
   1de24:	3301fc0e 	.word	0x3301fc0e
   1de28:	000cea40 	.word	0x000cea40
   1de2c:	f84142a3 	.word	0xf84142a3
   1de30:	d1eb0008 	.word	0xd1eb0008
   1de34:	f20d4638 	.word	0xf20d4638
   1de38:	e8bd4d04 	.word	0xe8bd4d04
   1de3c:	1b2a83f0 	.word	0x1b2a83f0
   1de40:	0803f012 	.word	0x0803f012
   1de44:	f04fbf18 	.word	0xf04fbf18
   1de48:	f2420801 	.word	0xf2420801
   1de4c:	eb087310 	.word	0xeb087310
   1de50:	45980892 	.word	0x45980892
   1de54:	6873d82a 	.word	0x6873d82a
   1de58:	d92d4598 	.word	0xd92d4598
   1de5c:	46402104 	.word	0x46402104
   1de60:	fc4cf001 	.word	0xfc4cf001
   1de64:	b3084681 	.word	0xb3084681
   1de68:	b18968b1 	.word	0xb18968b1
   1de6c:	00926872 	.word	0x00926872
   1de70:	fdb6f006 	.word	0xfdb6f006
   1de74:	2001e9d6 	.word	0x2001e9d6
   1de78:	b13a1e53 	.word	0xb13a1e53
   1de7c:	3b012200 	.word	0x3b012200
   1de80:	60021c59 	.word	0x60021c59
   1de84:	0004f100 	.word	0x0004f100
   1de88:	68b0d1f9 	.word	0x68b0d1f9
   1de8c:	fc4af001 	.word	0xfc4af001
   1de90:	8901e9c6 	.word	0x8901e9c6
   1de94:	0288ea4f 	.word	0x0288ea4f
   1de98:	9008f8d6 	.word	0x9008f8d6
   1de9c:	f8d6e7a8 	.word	0xf8d6e7a8
   1dea0:	462c8004 	.word	0x462c8004
   1dea4:	462ae782 	.word	0x462ae782
   1dea8:	e7c94604 	.word	0xe7c94604
   1deac:	070ff06f 	.word	0x070ff06f
   1deb0:	f06fe763 	.word	0xf06fe763
   1deb4:	e7600703 	.word	0xe7600703
   1deb8:	e7774698 	.word	0xe7774698

0001debc <symbol_0004482>:
   1debc:	43f0e92d 	.word	0x43f0e92d
   1dec0:	b0a16853 	.word	0xb0a16853
   1dec4:	6894b17b 	.word	0x6894b17b
   1dec8:	4c80f103 	.word	0x4c80f103
   1decc:	3cfff10c 	.word	0x3cfff10c
   1ded0:	502cf854 	.word	0x502cf854
   1ded4:	048ceb04 	.word	0x048ceb04
   1ded8:	e00ab11d 	.word	0xe00ab11d
   1dedc:	5d04f854 	.word	0x5d04f854
   1dee0:	3b01b93d 	.word	0x3b01b93d
   1dee4:	f06fd1fa 	.word	0xf06fd1fa
   1dee8:	46200403 	.word	0x46200403
   1deec:	e8bdb021 	.word	0xe8bdb021
   1def0:	681383f0 	.word	0x681383f0
   1def4:	ddf62b00 	.word	0xddf62b00
   1def8:	23002401 	.word	0x23002401
   1defc:	a8024606 	.word	0xa8024606
   1df00:	94089405 	.word	0x94089405
   1df04:	940e940b 	.word	0x940e940b
   1df08:	94119402 	.word	0x94119402
   1df0c:	94179414 	.word	0x94179414
   1df10:	460f941a 	.word	0x460f941a
   1df14:	e9cd4615 	.word	0xe9cd4615
   1df18:	e9cd3306 	.word	0xe9cd3306
   1df1c:	e9cd3309 	.word	0xe9cd3309
   1df20:	e9cd330c 	.word	0xe9cd330c
   1df24:	e9cd330f 	.word	0xe9cd330f
   1df28:	e9cd3303 	.word	0xe9cd3303
   1df2c:	e9cd3312 	.word	0xe9cd3312
   1df30:	e9cd3315 	.word	0xe9cd3315
   1df34:	e9cd3318 	.word	0xe9cd3318
   1df38:	f7ff331b 	.word	0xf7ff331b
   1df3c:	4604fd9b 	.word	0x4604fd9b
   1df40:	9b03b9a0 	.word	0x9b03b9a0
   1df44:	9904b183 	.word	0x9904b183
   1df48:	4480f103 	.word	0x4480f103
   1df4c:	f8513c01 	.word	0xf8513c01
   1df50:	eb012024 	.word	0xeb012024
   1df54:	b12a0484 	.word	0xb12a0484
   1df58:	f854e0b5 	.word	0xf854e0b5
   1df5c:	2a002d04 	.word	0x2a002d04
   1df60:	80b1f040 	.word	0x80b1f040
   1df64:	d1f83b01 	.word	0xd1f83b01
   1df68:	040df06f 	.word	0x040df06f
   1df6c:	b1609807 	.word	0xb1609807
   1df70:	1e539a06 	.word	0x1e539a06
   1df74:	2200b13a 	.word	0x2200b13a
   1df78:	1c593b01 	.word	0x1c593b01
   1df7c:	f1006002 	.word	0xf1006002
   1df80:	d1f90004 	.word	0xd1f90004
   1df84:	f0019807 	.word	0xf0019807
   1df88:	2200fbcd 	.word	0x2200fbcd
   1df8c:	980a2301 	.word	0x980a2301
   1df90:	3205e9cd 	.word	0x3205e9cd
   1df94:	b1589207 	.word	0xb1589207
   1df98:	1e4b9909 	.word	0x1e4b9909
   1df9c:	3b01b131 	.word	0x3b01b131
   1dfa0:	60021c5f 	.word	0x60021c5f
   1dfa4:	0004f100 	.word	0x0004f100
   1dfa8:	980ad1f9 	.word	0x980ad1f9
   1dfac:	fbbaf001 	.word	0xfbbaf001
   1dfb0:	23012200 	.word	0x23012200
   1dfb4:	e9cd980d 	.word	0xe9cd980d
   1dfb8:	920a3208 	.word	0x920a3208
   1dfbc:	990cb158 	.word	0x990cb158
   1dfc0:	b1311e4b 	.word	0xb1311e4b
   1dfc4:	1c5e3b01 	.word	0x1c5e3b01
   1dfc8:	f1006002 	.word	0xf1006002
   1dfcc:	d1f90004 	.word	0xd1f90004
   1dfd0:	f001980d 	.word	0xf001980d
   1dfd4:	2200fba7 	.word	0x2200fba7
   1dfd8:	98102301 	.word	0x98102301
   1dfdc:	320be9cd 	.word	0x320be9cd
   1dfe0:	b158920d 	.word	0xb158920d
   1dfe4:	1e4b990f 	.word	0x1e4b990f
   1dfe8:	3b01b131 	.word	0x3b01b131
   1dfec:	60021c5d 	.word	0x60021c5d
   1dff0:	0004f100 	.word	0x0004f100
   1dff4:	9810d1f9 	.word	0x9810d1f9
   1dff8:	fb94f001 	.word	0xfb94f001
   1dffc:	23012200 	.word	0x23012200
   1e000:	e9cd9804 	.word	0xe9cd9804
   1e004:	9210320e 	.word	0x9210320e
   1e008:	9903b158 	.word	0x9903b158
   1e00c:	b1311e4b 	.word	0xb1311e4b
   1e010:	1c593b01 	.word	0x1c593b01
   1e014:	f1006002 	.word	0xf1006002
   1e018:	d1f90004 	.word	0xd1f90004
   1e01c:	f0019804 	.word	0xf0019804
   1e020:	2200fb81 	.word	0x2200fb81
   1e024:	98132301 	.word	0x98132301
   1e028:	3202e9cd 	.word	0x3202e9cd
   1e02c:	b1589204 	.word	0xb1589204
   1e030:	1e4b9912 	.word	0x1e4b9912
   1e034:	3b01b131 	.word	0x3b01b131
   1e038:	60021c5f 	.word	0x60021c5f
   1e03c:	0004f100 	.word	0x0004f100
   1e040:	9813d1f9 	.word	0x9813d1f9
   1e044:	fb6ef001 	.word	0xfb6ef001
   1e048:	23012200 	.word	0x23012200
   1e04c:	e9cd9816 	.word	0xe9cd9816
   1e050:	92133211 	.word	0x92133211
   1e054:	9915b158 	.word	0x9915b158
   1e058:	b1311e4b 	.word	0xb1311e4b
   1e05c:	1c5e3b01 	.word	0x1c5e3b01
   1e060:	f1006002 	.word	0xf1006002
   1e064:	d1f90004 	.word	0xd1f90004
   1e068:	f0019816 	.word	0xf0019816
   1e06c:	2200fb5b 	.word	0x2200fb5b
   1e070:	98192301 	.word	0x98192301
   1e074:	3214e9cd 	.word	0x3214e9cd
   1e078:	b1589216 	.word	0xb1589216
   1e07c:	1e4b9918 	.word	0x1e4b9918
   1e080:	3b01b131 	.word	0x3b01b131
   1e084:	60021c5d 	.word	0x60021c5d
   1e088:	0004f100 	.word	0x0004f100
   1e08c:	9819d1f9 	.word	0x9819d1f9
   1e090:	fb48f001 	.word	0xfb48f001
   1e094:	23012200 	.word	0x23012200
   1e098:	e9cd981c 	.word	0xe9cd981c
   1e09c:	92193217 	.word	0x92193217
   1e0a0:	f43f2800 	.word	0xf43f2800
   1e0a4:	991baf22 	.word	0x991baf22
   1e0a8:	b1311e4b 	.word	0xb1311e4b
   1e0ac:	1c593b01 	.word	0x1c593b01
   1e0b0:	f1006002 	.word	0xf1006002
   1e0b4:	d1f90004 	.word	0xd1f90004
   1e0b8:	f001981c 	.word	0xf001981c
   1e0bc:	4620fb33 	.word	0x4620fb33
   1e0c0:	e8bdb021 	.word	0xe8bdb021
   1e0c4:	2b0183f0 	.word	0x2b0183f0
   1e0c8:	d96b9a02 	.word	0xd96b9a02
   1e0cc:	f47f2a00 	.word	0xf47f2a00
   1e0d0:	4639af4b 	.word	0x4639af4b
   1e0d4:	462aa805 	.word	0x462aa805
   1e0d8:	fb9af7ff 	.word	0xfb9af7ff
   1e0dc:	28004604 	.word	0x28004604
   1e0e0:	af44f47f 	.word	0xaf44f47f
   1e0e4:	a905a808 	.word	0xa905a808
   1e0e8:	ff38f7fd 	.word	0xff38f7fd
   1e0ec:	28004604 	.word	0x28004604
   1e0f0:	af3cf47f 	.word	0xaf3cf47f
   1e0f4:	4629a811 	.word	0x4629a811
   1e0f8:	ff30f7fd 	.word	0xff30f7fd
   1e0fc:	28004604 	.word	0x28004604
   1e100:	af34f47f 	.word	0xaf34f47f
   1e104:	4629a814 	.word	0x4629a814
   1e108:	ff28f7fd 	.word	0xff28f7fd
   1e10c:	28004604 	.word	0x28004604
   1e110:	af2cf47f 	.word	0xaf2cf47f
   1e114:	2101a80b 	.word	0x2101a80b
   1e118:	f8acf7fe 	.word	0xf8acf7fe
   1e11c:	28004604 	.word	0x28004604
   1e120:	af24f47f 	.word	0xaf24f47f
   1e124:	a80e4601 	.word	0xa80e4601
   1e128:	f8a4f7fe 	.word	0xf8a4f7fe
   1e12c:	28004604 	.word	0x28004604
   1e130:	af1cf47f 	.word	0xaf1cf47f
   1e134:	a8174601 	.word	0xa8174601
   1e138:	f89cf7fe 	.word	0xf89cf7fe
   1e13c:	28004604 	.word	0x28004604
   1e140:	af14f47f 	.word	0xaf14f47f
   1e144:	2101a81a 	.word	0x2101a81a
   1e148:	f894f7fe 	.word	0xf894f7fe
   1e14c:	28004604 	.word	0x28004604
   1e150:	af0cf47f 	.word	0xaf0cf47f
   1e154:	f04f4681 	.word	0xf04f4681
   1e158:	af010801 	.word	0xaf010801
   1e15c:	681b9b0a 	.word	0x681b9b0a
   1e160:	d42c07da 	.word	0xd42c07da
   1e164:	a8082101 	.word	0xa8082101
   1e168:	fac6f7fe 	.word	0xfac6f7fe
   1e16c:	28004604 	.word	0x28004604
   1e170:	aefcf47f 	.word	0xaefcf47f
   1e174:	681b9b0d 	.word	0x681b9b0d
   1e178:	d44407d8 	.word	0xd44407d8
   1e17c:	681b9b10 	.word	0x681b9b10
   1e180:	d44007d9 	.word	0xd44007d9
   1e184:	a80b2101 	.word	0xa80b2101
   1e188:	fab6f7fe 	.word	0xfab6f7fe
   1e18c:	28004604 	.word	0x28004604
   1e190:	aeecf47f 	.word	0xaeecf47f
   1e194:	a80e2101 	.word	0xa80e2101
   1e198:	faaef7fe 	.word	0xfaaef7fe
   1e19c:	28004604 	.word	0x28004604
   1e1a0:	e6e3d0dc 	.word	0xe6e3d0dc
   1e1a4:	f6ff2a00 	.word	0xf6ff2a00
   1e1a8:	680baedf 	.word	0x680baedf
   1e1ac:	d88d2b01 	.word	0xd88d2b01
   1e1b0:	d18e2b00 	.word	0xd18e2b00
   1e1b4:	2a004252 	.word	0x2a004252
   1e1b8:	aed6f47f 	.word	0xaed6f47f
   1e1bc:	9b16e789 	.word	0x9b16e789
   1e1c0:	07d8681b 	.word	0x07d8681b
   1e1c4:	2101d443 	.word	0x2101d443
   1e1c8:	f7fea814 	.word	0xf7fea814
   1e1cc:	4604fa95 	.word	0x4604fa95
   1e1d0:	f47f2800 	.word	0xf47f2800
   1e1d4:	9b19aecb 	.word	0x9b19aecb
   1e1d8:	07db681b 	.word	0x07db681b
   1e1dc:	9b1cd425 	.word	0x9b1cd425
   1e1e0:	07dc681b 	.word	0x07dc681b
   1e1e4:	2101d421 	.word	0x2101d421
   1e1e8:	f7fea817 	.word	0xf7fea817
   1e1ec:	4604fa85 	.word	0x4604fa85
   1e1f0:	f47f2800 	.word	0xf47f2800
   1e1f4:	2101aebb 	.word	0x2101aebb
   1e1f8:	f7fea81a 	.word	0xf7fea81a
   1e1fc:	4604fa7d 	.word	0x4604fa7d
   1e200:	d0dc2800 	.word	0xd0dc2800
   1e204:	a90be6b2 	.word	0xa90be6b2
   1e208:	4608aa11 	.word	0x4608aa11
   1e20c:	fd04f7fe 	.word	0xfd04f7fe
   1e210:	28004604 	.word	0x28004604
   1e214:	aeaaf47f 	.word	0xaeaaf47f
   1e218:	aa05a90e 	.word	0xaa05a90e
   1e21c:	f7fe4608 	.word	0xf7fe4608
   1e220:	4604fd6f 	.word	0x4604fd6f
   1e224:	d0ad2800 	.word	0xd0ad2800
   1e228:	a917e6a0 	.word	0xa917e6a0
   1e22c:	4608aa11 	.word	0x4608aa11
   1e230:	fcf2f7fe 	.word	0xfcf2f7fe
   1e234:	28004604 	.word	0x28004604
   1e238:	ae98f47f 	.word	0xae98f47f
   1e23c:	aa05a91a 	.word	0xaa05a91a
   1e240:	f7fe4608 	.word	0xf7fe4608
   1e244:	4604fd5d 	.word	0x4604fd5d
   1e248:	d0cc2800 	.word	0xd0cc2800
   1e24c:	a914e68e 	.word	0xa914e68e
   1e250:	f7fea808 	.word	0xf7fea808
   1e254:	2800fac1 	.word	0x2800fac1
   1e258:	a908db3d 	.word	0xa908db3d
   1e25c:	4608aa14 	.word	0x4608aa14
   1e260:	fd4ef7fe 	.word	0xfd4ef7fe
   1e264:	28004604 	.word	0x28004604
   1e268:	ae80f47f 	.word	0xae80f47f
   1e26c:	aa17a90b 	.word	0xaa17a90b
   1e270:	f7fe4608 	.word	0xf7fe4608
   1e274:	4604fd45 	.word	0x4604fd45
   1e278:	f47f2800 	.word	0xf47f2800
   1e27c:	a90eae77 	.word	0xa90eae77
   1e280:	4608aa1a 	.word	0x4608aa1a
   1e284:	fd3cf7fe 	.word	0xfd3cf7fe
   1e288:	28004604 	.word	0x28004604
   1e28c:	ae6ef47f 	.word	0xae6ef47f
   1e290:	a808a91d 	.word	0xa808a91d
   1e294:	9004f8cd 	.word	0x9004f8cd
   1e298:	881de9cd 	.word	0x881de9cd
   1e29c:	f7fd971f 	.word	0xf7fd971f
   1e2a0:	2800fd97 	.word	0x2800fd97
   1e2a4:	af5af47f 	.word	0xaf5af47f
   1e2a8:	f04f4680 	.word	0xf04f4680
   1e2ac:	a91d0901 	.word	0xa91d0901
   1e2b0:	f8cda817 	.word	0xf8cda817
   1e2b4:	e9cd8004 	.word	0xe9cd8004
   1e2b8:	971f991d 	.word	0x971f991d
   1e2bc:	fd88f7fd 	.word	0xfd88f7fd
   1e2c0:	da232800 	.word	0xda232800
   1e2c4:	462aa917 	.word	0x462aa917
   1e2c8:	f7fe4608 	.word	0xf7fe4608
   1e2cc:	4604fca5 	.word	0x4604fca5
   1e2d0:	d0ec2800 	.word	0xd0ec2800
   1e2d4:	a914e64a 	.word	0xa914e64a
   1e2d8:	4608aa08 	.word	0x4608aa08
   1e2dc:	fd10f7fe 	.word	0xfd10f7fe
   1e2e0:	28004604 	.word	0x28004604
   1e2e4:	ae42f47f 	.word	0xae42f47f
   1e2e8:	aa0ba917 	.word	0xaa0ba917
   1e2ec:	f7fe4608 	.word	0xf7fe4608
   1e2f0:	4604fd07 	.word	0x4604fd07
   1e2f4:	f47f2800 	.word	0xf47f2800
   1e2f8:	a91aae39 	.word	0xa91aae39
   1e2fc:	4608aa0e 	.word	0x4608aa0e
   1e300:	fcfef7fe 	.word	0xfcfef7fe
   1e304:	28004604 	.word	0x28004604
   1e308:	e62fd0c2 	.word	0xe62fd0c2
   1e30c:	a8174629 	.word	0xa8174629
   1e310:	fa62f7fe 	.word	0xfa62f7fe
   1e314:	db082800 	.word	0xdb082800
   1e318:	462aa917 	.word	0x462aa917
   1e31c:	f7fe4608 	.word	0xf7fe4608
   1e320:	4604fcef 	.word	0x4604fcef
   1e324:	d0f12800 	.word	0xd0f12800
   1e328:	a917e620 	.word	0xa917e620
   1e32c:	f7fd4630 	.word	0xf7fd4630
   1e330:	4604fe15 	.word	0x4604fe15
   1e334:	bf00e61a 	.word	0xbf00e61a

0001e338 <entropy_callback>:
   1e338:	4c0ab538 	.word	0x4c0ab538
   1e33c:	78254b0a 	.word	0x78254b0a
   1e340:	bf282a07 	.word	0xbf282a07
   1e344:	46082207 	.word	0x46082207
   1e348:	1145eb03 	.word	0x1145eb03
   1e34c:	fb48f006 	.word	0xfb48f006
   1e350:	20007823 	.word	0x20007823
   1e354:	b2db3301 	.word	0xb2db3301
   1e358:	bf082b07 	.word	0xbf082b07
   1e35c:	70232300 	.word	0x70232300
   1e360:	bf00bd38 	.word	0xbf00bd38
   1e364:	20027408 	.word	0x20027408
   1e368:	00026dac 	.word	0x00026dac

0001e36c <es256_key_generate>:
   1e36c:	b0e5b5f0 	.word	0xb0e5b5f0
   1e370:	71a8f89d 	.word	0x71a8f89d
   1e374:	b152b158 	.word	0xb152b158
   1e378:	291fb14b 	.word	0x291fb14b
   1e37c:	6819d907 	.word	0x6819d907
   1e380:	d904293f 	.word	0xd904293f
   1e384:	2955b13f 	.word	0x2955b13f
   1e388:	240cd805 	.word	0x240cd805
   1e38c:	2416e000 	.word	0x2416e000
   1e390:	b0654620 	.word	0xb0654620
   1e394:	461dbdf0 	.word	0x461dbdf0
   1e398:	21002304 	.word	0x21002304
   1e39c:	46164604 	.word	0x46164604
   1e3a0:	f44fa814 	.word	0xf44fa814
   1e3a4:	f88d72a0 	.word	0xf88d72a0
   1e3a8:	f006300c 	.word	0xf006300c
   1e3ac:	a814fb46 	.word	0xa814fb46
   1e3b0:	fe12f7f6 	.word	0xfe12f7f6
   1e3b4:	49292300 	.word	0x49292300
   1e3b8:	a814461a 	.word	0xa814461a
   1e3bc:	f7f69300 	.word	0xf7f69300
   1e3c0:	a814ff0d 	.word	0xa814ff0d
   1e3c4:	46212220 	.word	0x46212220
   1e3c8:	ff30f7f6 	.word	0xff30f7f6
   1e3cc:	a814b9b8 	.word	0xa814b9b8
   1e3d0:	fe08f7f6 	.word	0xfe08f7f6
   1e3d4:	f10d4621 	.word	0xf10d4621
   1e3d8:	f004000d 	.word	0xf004000d
   1e3dc:	4604fef9 	.word	0x4604fef9
   1e3e0:	b1c7b9b8 	.word	0xb1c7b9b8
   1e3e4:	f7f6a814 	.word	0xf7f6a814
   1e3e8:	2002f95d 	.word	0x2002f95d
   1e3ec:	f960f7f6 	.word	0xf960f7f6
   1e3f0:	a8144601 	.word	0xa8144601
   1e3f4:	f96af7f6 	.word	0xf96af7f6
   1e3f8:	240eb1a8 	.word	0x240eb1a8
   1e3fc:	4a18e7c8 	.word	0x4a18e7c8
   1e400:	78114b18 	.word	0x78114b18
   1e404:	22074620 	.word	0x22074620
   1e408:	1141eb03 	.word	0x1141eb03
   1e40c:	fae8f006 	.word	0xfae8f006
   1e410:	2423e7dd 	.word	0x2423e7dd
   1e414:	a903e7bc 	.word	0xa903e7bc
   1e418:	22401c70 	.word	0x22401c70
   1e41c:	fae0f006 	.word	0xfae0f006
   1e420:	602b2341 	.word	0x602b2341
   1e424:	2103e7b4 	.word	0x2103e7b4
   1e428:	f7f79815 	.word	0xf7f79815
   1e42c:	2800f961 	.word	0x2800f961
   1e430:	9815d1e3 	.word	0x9815d1e3
   1e434:	f100aa03 	.word	0xf100aa03
   1e438:	23410188 	.word	0x23410188
   1e43c:	fc26f7f9 	.word	0xfc26f7f9
   1e440:	d1da2800 	.word	0xd1da2800
   1e444:	a8144631 	.word	0xa8144631
   1e448:	f7f4682a 	.word	0xf7f4682a
   1e44c:	23b2ffed 	.word	0x23b2ffed
   1e450:	602b4604 	.word	0x602b4604
   1e454:	d09b2800 	.word	0xd09b2800
   1e458:	bf00e7cf 	.word	0xbf00e7cf
   1e45c:	0001e339 	.word	0x0001e339
   1e460:	20027408 	.word	0x20027408
   1e464:	00026dac 	.word	0x00026dac

0001e468 <bsd_os_application_irq_handler>:
   1e468:	41f0e92d 	.word	0x41f0e92d
   1e46c:	f7f34c33 	.word	0xf7f34c33
   1e470:	f04fffad 	.word	0xf04fffad
   1e474:	4d320803 	.word	0x4d320803
   1e478:	f1044f32 	.word	0xf1044f32
   1e47c:	e0040680 	.word	0xe0040680
   1e480:	d0062b04 	.word	0xd0062b04
   1e484:	42b43408 	.word	0x42b43408
   1e488:	f814d03b 	.word	0xf814d03b
   1e48c:	2b023c04 	.word	0x2b023c04
   1e490:	6820d1f6 	.word	0x6820d1f6
   1e494:	6803882a 	.word	0x6803882a
   1e498:	429ab29b 	.word	0x429ab29b
   1e49c:	8a2ad033 	.word	0x8a2ad033
   1e4a0:	d032429a 	.word	0xd032429a
   1e4a4:	429a8c2a 	.word	0x429a8c2a
   1e4a8:	8e2ad031 	.word	0x8e2ad031
   1e4ac:	d030429a 	.word	0xd030429a
   1e4b0:	2040f8b5 	.word	0x2040f8b5
   1e4b4:	d036429a 	.word	0xd036429a
   1e4b8:	2050f8b5 	.word	0x2050f8b5
   1e4bc:	d034429a 	.word	0xd034429a
   1e4c0:	2060f8b5 	.word	0x2060f8b5
   1e4c4:	d032429a 	.word	0xd032429a
   1e4c8:	2070f8b5 	.word	0x2070f8b5
   1e4cc:	d030429a 	.word	0xd030429a
   1e4d0:	2080f8b5 	.word	0x2080f8b5
   1e4d4:	d02e429a 	.word	0xd02e429a
   1e4d8:	2090f8b5 	.word	0x2090f8b5
   1e4dc:	bf08429a 	.word	0xbf08429a
   1e4e0:	d1cf2309 	.word	0xd1cf2309
   1e4e4:	1303eb05 	.word	0x1303eb05
   1e4e8:	68d9685a 	.word	0x68d9685a
   1e4ec:	b9904790 	.word	0xb9904790
   1e4f0:	68202201 	.word	0x68202201
   1e4f4:	2c04f804 	.word	0x2c04f804
   1e4f8:	340868fb 	.word	0x340868fb
   1e4fc:	42b44798 	.word	0x42b44798
   1e500:	e8bdd1c3 	.word	0xe8bdd1c3
   1e504:	230081f0 	.word	0x230081f0
   1e508:	2301e7ec 	.word	0x2301e7ec
   1e50c:	2302e7ea 	.word	0x2302e7ea
   1e510:	2303e7e8 	.word	0x2303e7e8
   1e514:	2802e7e6 	.word	0x2802e7e6
   1e518:	2304bf0a 	.word	0x2304bf0a
   1e51c:	8c04f804 	.word	0x8c04f804
   1e520:	3c04f804 	.word	0x3c04f804
   1e524:	2304e7ae 	.word	0x2304e7ae
   1e528:	2305e7dc 	.word	0x2305e7dc
   1e52c:	2306e7da 	.word	0x2306e7da
   1e530:	2307e7d8 	.word	0x2307e7d8
   1e534:	2308e7d6 	.word	0x2308e7d6
   1e538:	bf00e7d4 	.word	0xbf00e7d4
   1e53c:	200217dc 	.word	0x200217dc
   1e540:	200216a0 	.word	0x200216a0
   1e544:	20021740 	.word	0x20021740

0001e548 <rpc_framework_init>:
   1e548:	22a0b508 	.word	0x22a0b508
   1e54c:	48022100 	.word	0x48022100
   1e550:	fa73f006 	.word	0xfa73f006
   1e554:	bd082000 	.word	0xbd082000
   1e558:	200216a0 	.word	0x200216a0

0001e55c <rpc_client_register>:
   1e55c:	2b008803 	.word	0x2b008803
   1e560:	6842d045 	.word	0x6842d045
   1e564:	2a004601 	.word	0x2a004601
   1e568:	4a30d050 	.word	0x4a30d050
   1e56c:	42838810 	.word	0x42838810
   1e570:	e92dd03d 	.word	0xe92dd03d
   1e574:	8a1447f0 	.word	0x8a1447f0
   1e578:	d03542a3 	.word	0xd03542a3
   1e57c:	42ab8c15 	.word	0x42ab8c15
   1e580:	8e16d032 	.word	0x8e16d032
   1e584:	d02f42b3 	.word	0xd02f42b3
   1e588:	7040f8b2 	.word	0x7040f8b2
   1e58c:	d02b42bb 	.word	0xd02b42bb
   1e590:	c050f8b2 	.word	0xc050f8b2
   1e594:	d0274563 	.word	0xd0274563
   1e598:	e060f8b2 	.word	0xe060f8b2
   1e59c:	d0234573 	.word	0xd0234573
   1e5a0:	8070f8b2 	.word	0x8070f8b2
   1e5a4:	d01f4543 	.word	0xd01f4543
   1e5a8:	9080f8b2 	.word	0x9080f8b2
   1e5ac:	d01b454b 	.word	0xd01b454b
   1e5b0:	a090f8b2 	.word	0xa090f8b2
   1e5b4:	d0174553 	.word	0xd0174553
   1e5b8:	b35cb1e0 	.word	0xb35cb1e0
   1e5bc:	b36eb365 	.word	0xb36eb365
   1e5c0:	f1bcb377 	.word	0xf1bcb377
   1e5c4:	d02d0f00 	.word	0xd02d0f00
   1e5c8:	0f00f1be 	.word	0x0f00f1be
   1e5cc:	f1b8d020 	.word	0xf1b8d020
   1e5d0:	d0290f00 	.word	0xd0290f00
   1e5d4:	0f00f1b9 	.word	0x0f00f1b9
   1e5d8:	2009d00b 	.word	0x2009d00b
   1e5dc:	0f00f1ba 	.word	0x0f00f1ba
   1e5e0:	2004d008 	.word	0x2004d008
   1e5e4:	87f0e8bd 	.word	0x87f0e8bd
   1e5e8:	e8bd2007 	.word	0xe8bd2007
   1e5ec:	200787f0 	.word	0x200787f0
   1e5f0:	20084770 	.word	0x20084770
   1e5f4:	52130100 	.word	0x52130100
   1e5f8:	4402684b 	.word	0x4402684b
   1e5fc:	688b6053 	.word	0x688b6053
   1e600:	60932000 	.word	0x60932000
   1e604:	60d368cb 	.word	0x60d368cb
   1e608:	87f0e8bd 	.word	0x87f0e8bd
   1e60c:	4770200e 	.word	0x4770200e
   1e610:	e7ef2006 	.word	0xe7ef2006
   1e614:	e7ed2001 	.word	0xe7ed2001
   1e618:	e7eb2002 	.word	0xe7eb2002
   1e61c:	e7e92003 	.word	0xe7e92003
   1e620:	e7e72004 	.word	0xe7e72004
   1e624:	e7e52005 	.word	0xe7e52005
   1e628:	e7e32007 	.word	0xe7e32007
   1e62c:	200216a0 	.word	0x200216a0

0001e630 <rpc_transport_input>:
   1e630:	4a82b538 	.word	0x4a82b538
   1e634:	8810680b 	.word	0x8810680b
   1e638:	4298b29b 	.word	0x4298b29b
   1e63c:	8a10d027 	.word	0x8a10d027
   1e640:	d0244298 	.word	0xd0244298
   1e644:	42988c10 	.word	0x42988c10
   1e648:	8e10d021 	.word	0x8e10d021
   1e64c:	d01e4298 	.word	0xd01e4298
   1e650:	0040f8b2 	.word	0x0040f8b2
   1e654:	d01a4298 	.word	0xd01a4298
   1e658:	0050f8b2 	.word	0x0050f8b2
   1e65c:	d0164298 	.word	0xd0164298
   1e660:	0060f8b2 	.word	0x0060f8b2
   1e664:	d0124298 	.word	0xd0124298
   1e668:	0070f8b2 	.word	0x0070f8b2
   1e66c:	d00e4298 	.word	0xd00e4298
   1e670:	0080f8b2 	.word	0x0080f8b2
   1e674:	d00a4298 	.word	0xd00a4298
   1e678:	2090f8b2 	.word	0x2090f8b2
   1e67c:	d006429a 	.word	0xd006429a
   1e680:	b1186888 	.word	0xb1186888
   1e684:	691b4b6e 	.word	0x691b4b6e
   1e688:	20004798 	.word	0x20004798
   1e68c:	6888bd38 	.word	0x6888bd38
   1e690:	f0002800 	.word	0xf0002800
   1e694:	4a6b8098 	.word	0x4a6b8098
   1e698:	2c006814 	.word	0x2c006814
   1e69c:	6894d03c 	.word	0x6894d03c
   1e6a0:	f0002c00 	.word	0xf0002c00
   1e6a4:	6914809a 	.word	0x6914809a
   1e6a8:	f0002c00 	.word	0xf0002c00
   1e6ac:	6994809a 	.word	0x6994809a
   1e6b0:	f0002c00 	.word	0xf0002c00
   1e6b4:	6a14809a 	.word	0x6a14809a
   1e6b8:	f0002c00 	.word	0xf0002c00
   1e6bc:	6a94809a 	.word	0x6a94809a
   1e6c0:	f0002c00 	.word	0xf0002c00
   1e6c4:	6b148084 	.word	0x6b148084
   1e6c8:	f0002c00 	.word	0xf0002c00
   1e6cc:	6b948098 	.word	0x6b948098
   1e6d0:	f0002c00 	.word	0xf0002c00
   1e6d4:	6c148096 	.word	0x6c148096
   1e6d8:	f0002c00 	.word	0xf0002c00
   1e6dc:	6c948096 	.word	0x6c948096
   1e6e0:	f0002c00 	.word	0xf0002c00
   1e6e4:	6d148096 	.word	0x6d148096
   1e6e8:	f0002c00 	.word	0xf0002c00
   1e6ec:	6d948096 	.word	0x6d948096
   1e6f0:	f0002c00 	.word	0xf0002c00
   1e6f4:	6e148098 	.word	0x6e148098
   1e6f8:	f0002c00 	.word	0xf0002c00
   1e6fc:	6e948098 	.word	0x6e948098
   1e700:	f0002c00 	.word	0xf0002c00
   1e704:	6f148096 	.word	0x6f148096
   1e708:	f0002c00 	.word	0xf0002c00
   1e70c:	6f948094 	.word	0x6f948094
   1e710:	2001b10c 	.word	0x2001b10c
   1e714:	240fbd38 	.word	0x240fbd38
   1e718:	05c4eb02 	.word	0x05c4eb02
   1e71c:	0034f842 	.word	0x0034f842
   1e720:	4b4980ab 	.word	0x4b4980ab
   1e724:	2a01781a 	.word	0x2a01781a
   1e728:	7a1ad053 	.word	0x7a1ad053
   1e72c:	d0412a01 	.word	0xd0412a01
   1e730:	2a017c1a 	.word	0x2a017c1a
   1e734:	7e1ad04f 	.word	0x7e1ad04f
   1e738:	d0502a01 	.word	0xd0502a01
   1e73c:	2020f893 	.word	0x2020f893
   1e740:	d0502a01 	.word	0xd0502a01
   1e744:	2028f893 	.word	0x2028f893
   1e748:	d0502a01 	.word	0xd0502a01
   1e74c:	2030f893 	.word	0x2030f893
   1e750:	d03a2a01 	.word	0xd03a2a01
   1e754:	2038f893 	.word	0x2038f893
   1e758:	d04c2a01 	.word	0xd04c2a01
   1e75c:	2040f893 	.word	0x2040f893
   1e760:	d04a2a01 	.word	0xd04a2a01
   1e764:	2048f893 	.word	0x2048f893
   1e768:	d04c2a01 	.word	0xd04c2a01
   1e76c:	2050f893 	.word	0x2050f893
   1e770:	d04c2a01 	.word	0xd04c2a01
   1e774:	2058f893 	.word	0x2058f893
   1e778:	d04c2a01 	.word	0xd04c2a01
   1e77c:	2060f893 	.word	0x2060f893
   1e780:	d04c2a01 	.word	0xd04c2a01
   1e784:	2068f893 	.word	0x2068f893
   1e788:	d04a2a01 	.word	0xd04a2a01
   1e78c:	2070f893 	.word	0x2070f893
   1e790:	d04a2a01 	.word	0xd04a2a01
   1e794:	2078f893 	.word	0x2078f893
   1e798:	d00a2a01 	.word	0xd00a2a01
   1e79c:	d0b82c10 	.word	0xd0b82c10
   1e7a0:	4b282200 	.word	0x4b282200
   1e7a4:	eb032001 	.word	0xeb032001
   1e7a8:	808a01c4 	.word	0x808a01c4
   1e7ac:	2034f843 	.word	0x2034f843
   1e7b0:	220fbd38 	.word	0x220fbd38
   1e7b4:	eb032402 	.word	0xeb032402
   1e7b8:	f80300c2 	.word	0xf80300c2
   1e7bc:	60414032 	.word	0x60414032
   1e7c0:	fdfcf7f3 	.word	0xfdfcf7f3
   1e7c4:	2410e7a5 	.word	0x2410e7a5
   1e7c8:	2206e7ab 	.word	0x2206e7ab
   1e7cc:	2405e7f2 	.word	0x2405e7f2
   1e7d0:	2200e7a2 	.word	0x2200e7a2
   1e7d4:	2202e7ee 	.word	0x2202e7ee
   1e7d8:	2401e7ec 	.word	0x2401e7ec
   1e7dc:	2203e79c 	.word	0x2203e79c
   1e7e0:	2402e7e8 	.word	0x2402e7e8
   1e7e4:	2204e798 	.word	0x2204e798
   1e7e8:	2403e7e4 	.word	0x2403e7e4
   1e7ec:	2205e794 	.word	0x2205e794
   1e7f0:	2404e7e0 	.word	0x2404e7e0
   1e7f4:	2207e790 	.word	0x2207e790
   1e7f8:	2208e7dc 	.word	0x2208e7dc
   1e7fc:	2406e7da 	.word	0x2406e7da
   1e800:	2407e78a 	.word	0x2407e78a
   1e804:	2209e788 	.word	0x2209e788
   1e808:	2408e7d4 	.word	0x2408e7d4
   1e80c:	220ae784 	.word	0x220ae784
   1e810:	2409e7d0 	.word	0x2409e7d0
   1e814:	220be780 	.word	0x220be780
   1e818:	240ae7cc 	.word	0x240ae7cc
   1e81c:	220ce77c 	.word	0x220ce77c
   1e820:	220de7c8 	.word	0x220de7c8
   1e824:	240be7c6 	.word	0x240be7c6
   1e828:	220ee776 	.word	0x220ee776
   1e82c:	240ce7c2 	.word	0x240ce7c2
   1e830:	240de772 	.word	0x240de772
   1e834:	240ee770 	.word	0x240ee770
   1e838:	bf00e76e 	.word	0xbf00e76e
   1e83c:	200216a0 	.word	0x200216a0
   1e840:	20021740 	.word	0x20021740
   1e844:	20021758 	.word	0x20021758
   1e848:	200217d8 	.word	0x200217d8

0001e84c <rpc_transport_register>:
   1e84c:	2900b4f0 	.word	0x2900b4f0
   1e850:	2800d052 	.word	0x2800d052
   1e854:	6883d050 	.word	0x6883d050
   1e858:	d04d2b00 	.word	0xd04d2b00
   1e85c:	2b006903 	.word	0x2b006903
   1e860:	6843d04a 	.word	0x6843d04a
   1e864:	d0472b00 	.word	0xd0472b00
   1e868:	2b0068c3 	.word	0x2b0068c3
   1e86c:	6803d044 	.word	0x6803d044
   1e870:	d0412b00 	.word	0xd0412b00
   1e874:	2b006943 	.word	0x2b006943
   1e878:	2601d03e 	.word	0x2601d03e
   1e87c:	46042500 	.word	0x46042500
   1e880:	4a1f460f 	.word	0x4a1f460f
   1e884:	f8df4b1f 	.word	0xf8df4b1f
   1e888:	7416c080 	.word	0x7416c080
   1e88c:	f8827616 	.word	0xf8827616
   1e890:	f8826020 	.word	0xf8826020
   1e894:	f8826028 	.word	0xf8826028
   1e898:	f8826030 	.word	0xf8826030
   1e89c:	f8826038 	.word	0xf8826038
   1e8a0:	f8826040 	.word	0xf8826040
   1e8a4:	f8826048 	.word	0xf8826048
   1e8a8:	f8826050 	.word	0xf8826050
   1e8ac:	f8826058 	.word	0xf8826058
   1e8b0:	f8826060 	.word	0xf8826060
   1e8b4:	f8826068 	.word	0xf8826068
   1e8b8:	f8826070 	.word	0xf8826070
   1e8bc:	611d6078 	.word	0x611d6078
   1e8c0:	621d619d 	.word	0x621d619d
   1e8c4:	631d629d 	.word	0x631d629d
   1e8c8:	641d639d 	.word	0x641d639d
   1e8cc:	651d649d 	.word	0x651d649d
   1e8d0:	661d659d 	.word	0x661d659d
   1e8d4:	671d669d 	.word	0x671d669d
   1e8d8:	7016679d 	.word	0x7016679d
   1e8dc:	601d7216 	.word	0x601d7216
   1e8e0:	cc0f609d 	.word	0xcc0f609d
   1e8e4:	000fe8ac 	.word	0x000fe8ac
   1e8e8:	0003e894 	.word	0x0003e894
   1e8ec:	0003e88c 	.word	0x0003e88c
   1e8f0:	4628603e 	.word	0x4628603e
   1e8f4:	4770bcf0 	.word	0x4770bcf0
   1e8f8:	4628250e 	.word	0x4628250e
   1e8fc:	4770bcf0 	.word	0x4770bcf0
   1e900:	200217d8 	.word	0x200217d8
   1e904:	20021758 	.word	0x20021758
   1e908:	20021740 	.word	0x20021740

0001e90c <rpc_transport_unregister>:
   1e90c:	d03a2800 	.word	0xd03a2800
   1e910:	47f0e92d 	.word	0x47f0e92d
   1e914:	4c1d4680 	.word	0x4c1d4680
   1e918:	05a0f104 	.word	0x05a0f104
   1e91c:	341068a3 	.word	0x341068a3
   1e920:	4798b103 	.word	0x4798b103
   1e924:	d1f942ac 	.word	0xd1f942ac
   1e928:	0901f04f 	.word	0x0901f04f
   1e92c:	4c182600 	.word	0x4c182600
   1e930:	f8df4d18 	.word	0xf8df4d18
   1e934:	f104a064 	.word	0xf104a064
   1e938:	f8140780 	.word	0xf8140780
   1e93c:	2b013c04 	.word	0x2b013c04
   1e940:	f8dad005 	.word	0xf8dad005
   1e944:	6820300c 	.word	0x6820300c
   1e948:	f8044798 	.word	0xf8044798
   1e94c:	f8559c04 	.word	0xf8559c04
   1e950:	34080c04 	.word	0x34080c04
   1e954:	f8dab128 	.word	0xf8dab128
   1e958:	47983010 	.word	0x47983010
   1e95c:	f845802e 	.word	0xf845802e
   1e960:	42bc6c04 	.word	0x42bc6c04
   1e964:	0508f105 	.word	0x0508f105
   1e968:	f8d8d1e7 	.word	0xf8d8d1e7
   1e96c:	22180000 	.word	0x22180000
   1e970:	eb003801 	.word	0xeb003801
   1e974:	eb0a0040 	.word	0xeb0a0040
   1e978:	210000c0 	.word	0x210000c0
   1e97c:	f85df006 	.word	0xf85df006
   1e980:	e8bd2000 	.word	0xe8bd2000
   1e984:	200e87f0 	.word	0x200e87f0
   1e988:	bf004770 	.word	0xbf004770
   1e98c:	200216a0 	.word	0x200216a0
   1e990:	200217dc 	.word	0x200217dc
   1e994:	2002175c 	.word	0x2002175c
   1e998:	20021740 	.word	0x20021740

0001e99c <rpc_message_send>:
   1e99c:	b171b168 	.word	0xb171b168
   1e9a0:	68534a09 	.word	0x68534a09
   1e9a4:	684bb16b 	.word	0x684bb16b
   1e9a8:	f0238008 	.word	0xf0238008
   1e9ac:	f04303ff 	.word	0xf04303ff
   1e9b0:	68120302 	.word	0x68120302
   1e9b4:	4608604b 	.word	0x4608604b
   1e9b8:	20074710 	.word	0x20074710
   1e9bc:	200e4770 	.word	0x200e4770
   1e9c0:	20084770 	.word	0x20084770
   1e9c4:	bf004770 	.word	0xbf004770
   1e9c8:	20021740 	.word	0x20021740

0001e9cc <rpc_message_alloc>:
   1e9cc:	b330b35a 	.word	0xb330b35a
   1e9d0:	e92d2300 	.word	0xe92d2300
   1e9d4:	4f1541f0 	.word	0x4f1541f0
   1e9d8:	687b6013 	.word	0x687b6013
   1e9dc:	4615b30b 	.word	0x4615b30b
   1e9e0:	4606460c 	.word	0x4606460c
   1e9e4:	4798b959 	.word	0x4798b959
   1e9e8:	b1a84603 	.word	0xb1a84603
   1e9ec:	60dc46a0 	.word	0x60dc46a0
   1e9f0:	8008f8c3 	.word	0x8008f8c3
   1e9f4:	602b801e 	.word	0x602b801e
   1e9f8:	e8bd2000 	.word	0xe8bd2000
   1e9fc:	68bb81f0 	.word	0x68bb81f0
   1ea00:	47984608 	.word	0x47984608
   1ea04:	b1384680 	.word	0xb1384680
   1ea08:	4798687b 	.word	0x4798687b
   1ea0c:	28004603 	.word	0x28004603
   1ea10:	693bd1ed 	.word	0x693bd1ed
   1ea14:	47984640 	.word	0x47984640
   1ea18:	e8bd2004 	.word	0xe8bd2004
   1ea1c:	200781f0 	.word	0x200781f0
   1ea20:	20084770 	.word	0x20084770
   1ea24:	200ee7f9 	.word	0x200ee7f9
   1ea28:	bf004770 	.word	0xbf004770
   1ea2c:	20021740 	.word	0x20021740

0001ea30 <rpc_message_free>:
   1ea30:	f0002800 	.word	0xf0002800
   1ea34:	2900808c 	.word	0x2900808c
   1ea38:	80e9f000 	.word	0x80e9f000
   1ea3c:	4a83b538 	.word	0x4a83b538
   1ea40:	2b006853 	.word	0x2b006853
   1ea44:	8085f000 	.word	0x8085f000
   1ea48:	46084c81 	.word	0x46084c81
   1ea4c:	42996863 	.word	0x42996863
   1ea50:	8085f000 	.word	0x8085f000
   1ea54:	429868e3 	.word	0x429868e3
   1ea58:	808ef000 	.word	0x808ef000
   1ea5c:	42986963 	.word	0x42986963
   1ea60:	8090f000 	.word	0x8090f000
   1ea64:	429869e3 	.word	0x429869e3
   1ea68:	8092f000 	.word	0x8092f000
   1ea6c:	42986a63 	.word	0x42986a63
   1ea70:	8095f000 	.word	0x8095f000
   1ea74:	42986ae3 	.word	0x42986ae3
   1ea78:	8098f000 	.word	0x8098f000
   1ea7c:	42986b63 	.word	0x42986b63
   1ea80:	809bf000 	.word	0x809bf000
   1ea84:	42986be3 	.word	0x42986be3
   1ea88:	809ef000 	.word	0x809ef000
   1ea8c:	42986c63 	.word	0x42986c63
   1ea90:	80a1f000 	.word	0x80a1f000
   1ea94:	42986ce3 	.word	0x42986ce3
   1ea98:	80a4f000 	.word	0x80a4f000
   1ea9c:	42986d63 	.word	0x42986d63
   1eaa0:	80a7f000 	.word	0x80a7f000
   1eaa4:	42986de3 	.word	0x42986de3
   1eaa8:	80aaf000 	.word	0x80aaf000
   1eaac:	42986e63 	.word	0x42986e63
   1eab0:	80aff000 	.word	0x80aff000
   1eab4:	42986ee3 	.word	0x42986ee3
   1eab8:	80b2f000 	.word	0x80b2f000
   1eabc:	42986f63 	.word	0x42986f63
   1eac0:	80b5f000 	.word	0x80b5f000
   1eac4:	42836fe3 	.word	0x42836fe3
   1eac8:	80b8f000 	.word	0x80b8f000
   1eacc:	479868d3 	.word	0x479868d3
   1ead0:	2b047823 	.word	0x2b047823
   1ead4:	7a23d03f 	.word	0x7a23d03f
   1ead8:	d03c2b04 	.word	0xd03c2b04
   1eadc:	2b047c23 	.word	0x2b047c23
   1eae0:	7e23d039 	.word	0x7e23d039
   1eae4:	d0362b04 	.word	0xd0362b04
   1eae8:	3020f894 	.word	0x3020f894
   1eaec:	d0322b04 	.word	0xd0322b04
   1eaf0:	3028f894 	.word	0x3028f894
   1eaf4:	d02e2b04 	.word	0xd02e2b04
   1eaf8:	3030f894 	.word	0x3030f894
   1eafc:	d02a2b04 	.word	0xd02a2b04
   1eb00:	3038f894 	.word	0x3038f894
   1eb04:	d0262b04 	.word	0xd0262b04
   1eb08:	3040f894 	.word	0x3040f894
   1eb0c:	d0222b04 	.word	0xd0222b04
   1eb10:	3048f894 	.word	0x3048f894
   1eb14:	d01e2b04 	.word	0xd01e2b04
   1eb18:	3050f894 	.word	0x3050f894
   1eb1c:	d01a2b04 	.word	0xd01a2b04
   1eb20:	3058f894 	.word	0x3058f894
   1eb24:	d0162b04 	.word	0xd0162b04
   1eb28:	3060f894 	.word	0x3060f894
   1eb2c:	d0122b04 	.word	0xd0122b04
   1eb30:	3068f894 	.word	0x3068f894
   1eb34:	d00e2b04 	.word	0xd00e2b04
   1eb38:	3070f894 	.word	0x3070f894
   1eb3c:	d00a2b04 	.word	0xd00a2b04
   1eb40:	3078f894 	.word	0x3078f894
   1eb44:	bf182b04 	.word	0xbf182b04
   1eb48:	d0042000 	.word	0xd0042000
   1eb4c:	2007bd38 	.word	0x2007bd38
   1eb50:	20084770 	.word	0x20084770
   1eb54:	f7f3bd38 	.word	0xf7f3bd38
   1eb58:	2000fc31 	.word	0x2000fc31
   1eb5c:	7821bd38 	.word	0x7821bd38
   1eb60:	f47f2903 	.word	0xf47f2903
   1eb64:	2100af77 	.word	0x2100af77
   1eb68:	46182501 	.word	0x46182501
   1eb6c:	f80468d2 	.word	0xf80468d2
   1eb70:	47905031 	.word	0x47905031
   1eb74:	bd382000 	.word	0xbd382000
   1eb78:	29037a21 	.word	0x29037a21
   1eb7c:	af6ef47f 	.word	0xaf6ef47f
   1eb80:	e7f12101 	.word	0xe7f12101
   1eb84:	29037c21 	.word	0x29037c21
   1eb88:	af6cf47f 	.word	0xaf6cf47f
   1eb8c:	e7eb2102 	.word	0xe7eb2102
   1eb90:	29037e21 	.word	0x29037e21
   1eb94:	6a63d0e8 	.word	0x6a63d0e8
   1eb98:	f47f4298 	.word	0xf47f4298
   1eb9c:	f894af6b 	.word	0xf894af6b
   1eba0:	29031020 	.word	0x29031020
   1eba4:	af66f47f 	.word	0xaf66f47f
   1eba8:	e7dd2104 	.word	0xe7dd2104
   1ebac:	1028f894 	.word	0x1028f894
   1ebb0:	f47f2903 	.word	0xf47f2903
   1ebb4:	2105af63 	.word	0x2105af63
   1ebb8:	f894e7d6 	.word	0xf894e7d6
   1ebbc:	29031030 	.word	0x29031030
   1ebc0:	af60f47f 	.word	0xaf60f47f
   1ebc4:	e7cf2106 	.word	0xe7cf2106
   1ebc8:	1038f894 	.word	0x1038f894
   1ebcc:	f47f2903 	.word	0xf47f2903
   1ebd0:	2107af5d 	.word	0x2107af5d
   1ebd4:	f894e7c8 	.word	0xf894e7c8
   1ebd8:	29031040 	.word	0x29031040
   1ebdc:	af5af47f 	.word	0xaf5af47f
   1ebe0:	e7c12108 	.word	0xe7c12108
   1ebe4:	1048f894 	.word	0x1048f894
   1ebe8:	f47f2903 	.word	0xf47f2903
   1ebec:	2109af57 	.word	0x2109af57
   1ebf0:	f894e7ba 	.word	0xf894e7ba
   1ebf4:	29031050 	.word	0x29031050
   1ebf8:	af54f47f 	.word	0xaf54f47f
   1ebfc:	e7b3210a 	.word	0xe7b3210a
   1ec00:	1058f894 	.word	0x1058f894
   1ec04:	f47f2903 	.word	0xf47f2903
   1ec08:	210baf51 	.word	0x210baf51
   1ec0c:	200ee7ac 	.word	0x200ee7ac
   1ec10:	f8944770 	.word	0xf8944770
   1ec14:	29031060 	.word	0x29031060
   1ec18:	af4cf47f 	.word	0xaf4cf47f
   1ec1c:	e7a3210c 	.word	0xe7a3210c
   1ec20:	1068f894 	.word	0x1068f894
   1ec24:	f47f2903 	.word	0xf47f2903
   1ec28:	210daf49 	.word	0x210daf49
   1ec2c:	f894e79c 	.word	0xf894e79c
   1ec30:	29031070 	.word	0x29031070
   1ec34:	af46f47f 	.word	0xaf46f47f
   1ec38:	e795210e 	.word	0xe795210e
   1ec3c:	3078f894 	.word	0x3078f894
   1ec40:	f47f2b03 	.word	0xf47f2b03
   1ec44:	4603af43 	.word	0x4603af43
   1ec48:	e78d210f 	.word	0xe78d210f
   1ec4c:	20021740 	.word	0x20021740
   1ec50:	200217d8 	.word	0x200217d8

0001ec54 <rpc_message_data_free>:
   1ec54:	f0002800 	.word	0xf0002800
   1ec58:	29008091 	.word	0x29008091
   1ec5c:	80e4f000 	.word	0x80e4f000
   1ec60:	4a81b538 	.word	0x4a81b538
   1ec64:	2b006853 	.word	0x2b006853
   1ec68:	808af000 	.word	0x808af000
   1ec6c:	681c4b7f 	.word	0x681c4b7f
   1ec70:	f00042a1 	.word	0xf00042a1
   1ec74:	689c8087 	.word	0x689c8087
   1ec78:	f00042a1 	.word	0xf00042a1
   1ec7c:	691c808f 	.word	0x691c808f
   1ec80:	f00042a1 	.word	0xf00042a1
   1ec84:	699c8091 	.word	0x699c8091
   1ec88:	f00042a1 	.word	0xf00042a1
   1ec8c:	6a1c8093 	.word	0x6a1c8093
   1ec90:	f00042a1 	.word	0xf00042a1
   1ec94:	6a9c8095 	.word	0x6a9c8095
   1ec98:	f00042a1 	.word	0xf00042a1
   1ec9c:	6b1c8097 	.word	0x6b1c8097
   1eca0:	f00042a1 	.word	0xf00042a1
   1eca4:	6b9c8099 	.word	0x6b9c8099
   1eca8:	f00042a1 	.word	0xf00042a1
   1ecac:	6c1c809b 	.word	0x6c1c809b
   1ecb0:	f00042a1 	.word	0xf00042a1
   1ecb4:	6c9c809d 	.word	0x6c9c809d
   1ecb8:	f00042a1 	.word	0xf00042a1
   1ecbc:	6d1c80a0 	.word	0x6d1c80a0
   1ecc0:	f00042a1 	.word	0xf00042a1
   1ecc4:	6d9c80a3 	.word	0x6d9c80a3
   1ecc8:	f00042a1 	.word	0xf00042a1
   1eccc:	6e1c80a6 	.word	0x6e1c80a6
   1ecd0:	f00042a1 	.word	0xf00042a1
   1ecd4:	6e9c80ab 	.word	0x6e9c80ab
   1ecd8:	f00042a1 	.word	0xf00042a1
   1ecdc:	6f1c80ae 	.word	0x6f1c80ae
   1ece0:	f00042a1 	.word	0xf00042a1
   1ece4:	6f9c80b1 	.word	0x6f9c80b1
   1ece8:	f000428c 	.word	0xf000428c
   1ecec:	691380b4 	.word	0x691380b4
   1ecf0:	47984608 	.word	0x47984608
   1ecf4:	781a4b5e 	.word	0x781a4b5e
   1ecf8:	d03b2a04 	.word	0xd03b2a04
   1ecfc:	2a047a1a 	.word	0x2a047a1a
   1ed00:	7c1ad038 	.word	0x7c1ad038
   1ed04:	d0352a04 	.word	0xd0352a04
   1ed08:	2a047e1a 	.word	0x2a047e1a
   1ed0c:	f893d032 	.word	0xf893d032
   1ed10:	2a042020 	.word	0x2a042020
   1ed14:	f893d02e 	.word	0xf893d02e
   1ed18:	2a042028 	.word	0x2a042028
   1ed1c:	f893d02a 	.word	0xf893d02a
   1ed20:	2a042030 	.word	0x2a042030
   1ed24:	f893d026 	.word	0xf893d026
   1ed28:	2a042038 	.word	0x2a042038
   1ed2c:	f893d022 	.word	0xf893d022
   1ed30:	2a042040 	.word	0x2a042040
   1ed34:	f893d01e 	.word	0xf893d01e
   1ed38:	2a042048 	.word	0x2a042048
   1ed3c:	f893d01a 	.word	0xf893d01a
   1ed40:	2a042050 	.word	0x2a042050
   1ed44:	f893d016 	.word	0xf893d016
   1ed48:	2a042058 	.word	0x2a042058
   1ed4c:	f893d012 	.word	0xf893d012
   1ed50:	2a042060 	.word	0x2a042060
   1ed54:	f893d00e 	.word	0xf893d00e
   1ed58:	2a042068 	.word	0x2a042068
   1ed5c:	f893d00a 	.word	0xf893d00a
   1ed60:	2a042070 	.word	0x2a042070
   1ed64:	f893d006 	.word	0xf893d006
   1ed68:	2b043078 	.word	0x2b043078
   1ed6c:	2000bf18 	.word	0x2000bf18
   1ed70:	bd38d000 	.word	0xbd38d000
   1ed74:	fb22f7f3 	.word	0xfb22f7f3
   1ed78:	bd382000 	.word	0xbd382000
   1ed7c:	47702007 	.word	0x47702007
   1ed80:	bd382008 	.word	0xbd382008
   1ed84:	4284889c 	.word	0x4284889c
   1ed88:	af75f47f 	.word	0xaf75f47f
   1ed8c:	20002400 	.word	0x20002400
   1ed90:	05c4eb03 	.word	0x05c4eb03
   1ed94:	0034f843 	.word	0x0034f843
   1ed98:	e7a880a8 	.word	0xe7a880a8
   1ed9c:	4284899c 	.word	0x4284899c
   1eda0:	af6df47f 	.word	0xaf6df47f
   1eda4:	e7f22401 	.word	0xe7f22401
   1eda8:	42848a9c 	.word	0x42848a9c
   1edac:	af6bf47f 	.word	0xaf6bf47f
   1edb0:	e7ec2402 	.word	0xe7ec2402
   1edb4:	42848b9c 	.word	0x42848b9c
   1edb8:	af69f47f 	.word	0xaf69f47f
   1edbc:	e7e62403 	.word	0xe7e62403
   1edc0:	42848c9c 	.word	0x42848c9c
   1edc4:	af67f47f 	.word	0xaf67f47f
   1edc8:	e7e02404 	.word	0xe7e02404
   1edcc:	42848d9c 	.word	0x42848d9c
   1edd0:	af65f47f 	.word	0xaf65f47f
   1edd4:	e7da2405 	.word	0xe7da2405
   1edd8:	42848e9c 	.word	0x42848e9c
   1eddc:	af63f47f 	.word	0xaf63f47f
   1ede0:	e7d42406 	.word	0xe7d42406
   1ede4:	42848f9c 	.word	0x42848f9c
   1ede8:	af61f47f 	.word	0xaf61f47f
   1edec:	e7ce2407 	.word	0xe7ce2407
   1edf0:	4044f8b3 	.word	0x4044f8b3
   1edf4:	f47f4284 	.word	0xf47f4284
   1edf8:	2408af5e 	.word	0x2408af5e
   1edfc:	f8b3e7c7 	.word	0xf8b3e7c7
   1ee00:	4284404c 	.word	0x4284404c
   1ee04:	af5bf47f 	.word	0xaf5bf47f
   1ee08:	e7c02409 	.word	0xe7c02409
   1ee0c:	4054f8b3 	.word	0x4054f8b3
   1ee10:	f47f4284 	.word	0xf47f4284
   1ee14:	240aaf58 	.word	0x240aaf58
   1ee18:	f8b3e7b9 	.word	0xf8b3e7b9
   1ee1c:	4284405c 	.word	0x4284405c
   1ee20:	af55f47f 	.word	0xaf55f47f
   1ee24:	e7b2240b 	.word	0xe7b2240b
   1ee28:	4770200e 	.word	0x4770200e
   1ee2c:	4064f8b3 	.word	0x4064f8b3
   1ee30:	f47f4284 	.word	0xf47f4284
   1ee34:	240caf50 	.word	0x240caf50
   1ee38:	f8b3e7a9 	.word	0xf8b3e7a9
   1ee3c:	4284406c 	.word	0x4284406c
   1ee40:	af4df47f 	.word	0xaf4df47f
   1ee44:	e7a2240d 	.word	0xe7a2240d
   1ee48:	4074f8b3 	.word	0x4074f8b3
   1ee4c:	f47f4284 	.word	0xf47f4284
   1ee50:	240eaf4a 	.word	0x240eaf4a
   1ee54:	f8b3e79b 	.word	0xf8b3e79b
   1ee58:	4284407c 	.word	0x4284407c
   1ee5c:	240fbf08 	.word	0x240fbf08
   1ee60:	af45f47f 	.word	0xaf45f47f
   1ee64:	bf00e793 	.word	0xbf00e793
   1ee68:	20021740 	.word	0x20021740
   1ee6c:	20021758 	.word	0x20021758
   1ee70:	200217d8 	.word	0x200217d8

0001ee74 <symbol_000fb79>:
   1ee74:	b4302801 	.word	0xb4302801
   1ee78:	d1034b0a 	.word	0xd1034b0a
   1ee7c:	7c1de00a 	.word	0x7c1de00a
   1ee80:	d0084285 	.word	0xd0084285
   1ee84:	4f14f853 	.word	0x4f14f853
   1ee88:	d1f82c00 	.word	0xd1f82c00
   1ee8c:	002df06f 	.word	0x002df06f
   1ee90:	4770bc30 	.word	0x4770bc30
   1ee94:	600c4c04 	.word	0x600c4c04
   1ee98:	2000685b 	.word	0x2000685b
   1ee9c:	6013bc30 	.word	0x6013bc30
   1eea0:	bf004770 	.word	0xbf004770
   1eea4:	00026ecc 	.word	0x00026ecc
   1eea8:	00026e98 	.word	0x00026e98

0001eeac <symbol_000494c>:
   1eeac:	b4302803 	.word	0xb4302803
   1eeb0:	d1034b0a 	.word	0xd1034b0a
   1eeb4:	7c1de00a 	.word	0x7c1de00a
   1eeb8:	d0084285 	.word	0xd0084285
   1eebc:	4f14f853 	.word	0x4f14f853
   1eec0:	d1f82c00 	.word	0xd1f82c00
   1eec4:	002df06f 	.word	0x002df06f
   1eec8:	4770bc30 	.word	0x4770bc30
   1eecc:	600c4c04 	.word	0x600c4c04
   1eed0:	2000685b 	.word	0x2000685b
   1eed4:	6013bc30 	.word	0x6013bc30
   1eed8:	bf004770 	.word	0xbf004770
   1eedc:	00026ea4 	.word	0x00026ea4
   1eee0:	00026e8c 	.word	0x00026e8c

0001eee4 <dfu_client_event_handler>:
   1eee4:	1b08f850 	.word	0x1b08f850
   1eee8:	f7fc0c09 	.word	0xf7fc0c09
   1eeec:	bf00b80d 	.word	0xbf00b80d

0001eef0 <rpc_dfu_client_init>:
   1eef0:	f7ff4801 	.word	0xf7ff4801
   1eef4:	bf00bb33 	.word	0xbf00bb33
   1eef8:	00026f1c 	.word	0x00026f1c

0001eefc <rpc_dfu_client_request_alloc>:
   1eefc:	b5102300 	.word	0xb5102300
   1ef00:	9301b082 	.word	0x9301b082
   1ef04:	4604b158 	.word	0x4604b158
   1ef08:	2006aa01 	.word	0x2006aa01
   1ef0c:	fd5ef7ff 	.word	0xfd5ef7ff
   1ef10:	9b01b918 	.word	0x9b01b918
   1ef14:	3308b10b 	.word	0x3308b10b
   1ef18:	b0026023 	.word	0xb0026023
   1ef1c:	2007bd10 	.word	0x2007bd10
   1ef20:	bd10b002 	.word	0xbd10b002

0001ef24 <rpc_dfu_client_request_send>:
   1ef24:	4f70f411 	.word	0x4f70f411
   1ef28:	b160d10b 	.word	0xb160d10b
   1ef2c:	f8304603 	.word	0xf8304603
   1ef30:	20062c08 	.word	0x20062c08
   1ef34:	4101ea42 	.word	0x4101ea42
   1ef38:	1d08f843 	.word	0x1d08f843
   1ef3c:	f7ff4619 	.word	0xf7ff4619
   1ef40:	200fbd2d 	.word	0x200fbd2d
   1ef44:	20074770 	.word	0x20074770
   1ef48:	bf004770 	.word	0xbf004770

0001ef4c <rpc_dfu_client_message_free>:
   1ef4c:	f1a0b120 	.word	0xf1a0b120
   1ef50:	20060108 	.word	0x20060108
   1ef54:	bd6cf7ff 	.word	0xbd6cf7ff
   1ef58:	47702007 	.word	0x47702007

0001ef5c <rpc_dfu_client_data_free>:
   1ef5c:	4601b118 	.word	0x4601b118
   1ef60:	f7ff2006 	.word	0xf7ff2006
   1ef64:	2007be77 	.word	0x2007be77
   1ef68:	bf004770 	.word	0xbf004770

0001ef6c <mem_free>:
   1ef6c:	4ff0e92d 	.word	0x4ff0e92d
   1ef70:	c0ccf8df 	.word	0xc0ccf8df
   1ef74:	9000b083 	.word	0x9000b083
   1ef78:	0b3cf10c 	.word	0x0b3cf10c
   1ef7c:	3008f8dc 	.word	0x3008f8dc
   1ef80:	f8dcb12b 	.word	0xf8dcb12b
   1ef84:	9c002000 	.word	0x9c002000
   1ef88:	42a07810 	.word	0x42a07810
   1ef8c:	f10cd006 	.word	0xf10cd006
   1ef90:	45e30c0c 	.word	0x45e30c0c
   1ef94:	b003d1f2 	.word	0xb003d1f2
   1ef98:	8ff0e8bd 	.word	0x8ff0e8bd
   1ef9c:	a004f8dc 	.word	0xa004f8dc
   1efa0:	080aeb03 	.word	0x080aeb03
   1efa4:	d2f245c2 	.word	0xd2f245c2
   1efa8:	f8cd6853 	.word	0xf8cd6853
   1efac:	46d6c004 	.word	0x46d6c004
   1efb0:	f8d2469c 	.word	0xf8d2469c
   1efb4:	89979010 	.word	0x89979010
   1efb8:	000aebae 	.word	0x000aebae
   1efbc:	f8b9b3df 	.word	0xf8b9b3df
   1efc0:	42902002 	.word	0x42902002
   1efc4:	4665d31c 	.word	0x4665d31c
   1efc8:	f1092400 	.word	0xf1092400
   1efcc:	e0030304 	.word	0xe0030304
   1efd0:	3304885a 	.word	0x3304885a
   1efd4:	d8154282 	.word	0xd8154282
   1efd8:	6c04f833 	.word	0x6c04f833
   1efdc:	42a73401 	.word	0x42a73401
   1efe0:	5506fb02 	.word	0x5506fb02
   1efe4:	0002eba0 	.word	0x0002eba0
   1efe8:	d1f1461e 	.word	0xd1f1461e
   1efec:	42812000 	.word	0x42812000
   1eff0:	f10ed00d 	.word	0xf10ed00d
   1eff4:	45f00e01 	.word	0x45f00e01
   1eff8:	f8ddd1de 	.word	0xf8ddd1de
   1effc:	e7c6c004 	.word	0xe7c6c004
   1f000:	464e4665 	.word	0x464e4665
   1f004:	fb008833 	.word	0xfb008833
   1f008:	42815003 	.word	0x42815003
   1f00c:	f5bed1f1 	.word	0xf5bed1f1
   1f010:	f8dd7f00 	.word	0xf8dd7f00
   1f014:	d0bac004 	.word	0xd0bac004
   1f018:	4a082301 	.word	0x4a082301
   1f01c:	115eea4f 	.word	0x115eea4f
   1f020:	0021f852 	.word	0x0021f852
   1f024:	0e1ff00e 	.word	0x0e1ff00e
   1f028:	fe0efa03 	.word	0xfe0efa03
   1f02c:	0000ea4e 	.word	0x0000ea4e
   1f030:	0021f842 	.word	0x0021f842
   1f034:	4638e7af 	.word	0x4638e7af
   1f038:	bf00e7d9 	.word	0xbf00e7d9
   1f03c:	20021858 	.word	0x20021858
   1f040:	2002189c 	.word	0x2002189c

0001f044 <mem_alloc.constprop.5>:
   1f044:	d0502800 	.word	0xd0502800
   1f048:	f8d34b6d 	.word	0xf8d34b6d
   1f04c:	42902088 	.word	0x42902088
   1f050:	e92dd84b 	.word	0xe92dd84b
   1f054:	f8d34ff0 	.word	0xf8d34ff0
   1f058:	b083b08c 	.word	0xb083b08c
   1f05c:	0f00f1bb 	.word	0x0f00f1bb
   1f060:	f10bd054 	.word	0xf10bd054
   1f064:	469132ff 	.word	0x469132ff
   1f068:	f04f2600 	.word	0xf04f2600
   1f06c:	4f650812 	.word	0x4f650812
   1f070:	f10b9201 	.word	0xf10b9201
   1f074:	eb060e11 	.word	0xeb060e11
   1f078:	f8530209 	.word	0xf8530209
   1f07c:	32014038 	.word	0x32014038
   1f080:	eb040852 	.word	0xeb040852
   1f084:	f1020c44 	.word	0xf1020c44
   1f088:	f8530112 	.word	0xf8530112
   1f08c:	f8575031 	.word	0xf8575031
   1f090:	f853a02c 	.word	0xf853a02c
   1f094:	eb03403e 	.word	0xeb03403e
   1f098:	f8dc0cc8 	.word	0xf8dc0cc8
   1f09c:	eb05c004 	.word	0xeb05c004
   1f0a0:	eb040545 	.word	0xeb040545
   1f0a4:	f8da0444 	.word	0xf8da0444
   1f0a8:	f857a010 	.word	0xf857a010
   1f0ac:	f8575025 	.word	0xf8575025
   1f0b0:	f83a4024 	.word	0xf83a4024
   1f0b4:	eb03a02c 	.word	0xeb03a02c
   1f0b8:	eb0301c1 	.word	0xeb0301c1
   1f0bc:	68490cce 	.word	0x68490cce
   1f0c0:	6924692d 	.word	0x6924692d
   1f0c4:	c004f8dc 	.word	0xc004f8dc
   1f0c8:	f8354550 	.word	0xf8354550
   1f0cc:	f8345021 	.word	0xf8345021
   1f0d0:	d915102c 	.word	0xd915102c
   1f0d4:	d2114288 	.word	0xd2114288
   1f0d8:	d90842a8 	.word	0xd90842a8
   1f0dc:	45b11c56 	.word	0x45b11c56
   1f0e0:	8087f0c0 	.word	0x8087f0c0
   1f0e4:	0813f102 	.word	0x0813f102
   1f0e8:	2000e7c5 	.word	0x2000e7c5
   1f0ec:	f1024770 	.word	0xf1024770
   1f0f0:	454e39ff 	.word	0x454e39ff
   1f0f4:	f102d87d 	.word	0xf102d87d
   1f0f8:	e7bc0e11 	.word	0xe7bc0e11
   1f0fc:	0601f109 	.word	0x0601f109
   1f100:	d00745b3 	.word	0xd00745b3
   1f104:	d0012e10 	.word	0xd0012e10
   1f108:	d80845b3 	.word	0xd80845b3
   1f10c:	b0032000 	.word	0xb0032000
   1f110:	8ff0e8bd 	.word	0x8ff0e8bd
   1f114:	2a109a01 	.word	0x2a109a01
   1f118:	4616bf18 	.word	0x4616bf18
   1f11c:	f8dfd0f6 	.word	0xf8dfd0f6
   1f120:	eb03c0e8 	.word	0xeb03c0e8
   1f124:	e9d808c6 	.word	0xe9d808c6
   1f128:	eb022424 	.word	0xeb022424
   1f12c:	f8570242 	.word	0xf8570242
   1f130:	eb073022 	.word	0xeb073022
   1f134:	f8d20282 	.word	0xf8d20282
   1f138:	691de004 	.word	0x691de004
   1f13c:	d0562c00 	.word	0xd0562c00
   1f140:	4670462a 	.word	0x4670462a
   1f144:	eb0500a4 	.word	0xeb0500a4
   1f148:	88510904 	.word	0x88510904
   1f14c:	45913204 	.word	0x45913204
   1f150:	d1fa4408 	.word	0xd1fa4408
   1f154:	f8b11929 	.word	0xf8b11929
   1f158:	4482a002 	.word	0x4482a002
   1f15c:	d9184582 	.word	0xd9184582
   1f160:	f85c0941 	.word	0xf85c0941
   1f164:	f0002021 	.word	0xf0002021
   1f168:	fa22041f 	.word	0xfa22041f
   1f16c:	f019f904 	.word	0xf019f904
   1f170:	d0070f01 	.word	0xd0070f01
   1f174:	f85ce013 	.word	0xf85ce013
   1f178:	fa222021 	.word	0xfa222021
   1f17c:	f019f904 	.word	0xf019f904
   1f180:	d10c0f01 	.word	0xd10c0f01
   1f184:	45823001 	.word	0x45823001
   1f188:	1150ea4f 	.word	0x1150ea4f
   1f18c:	041ff000 	.word	0x041ff000
   1f190:	3601d1f1 	.word	0x3601d1f1
   1f194:	f108455e 	.word	0xf108455e
   1f198:	d3c40808 	.word	0xd3c40808
   1f19c:	2601e7b6 	.word	0x2601e7b6
   1f1a0:	f404fa06 	.word	0xf404fa06
   1f1a4:	ea22899e 	.word	0xea22899e
   1f1a8:	eba00204 	.word	0xeba00204
   1f1ac:	f84c000e 	.word	0xf84c000e
   1f1b0:	685c2021 	.word	0x685c2021
   1f1b4:	d0a92e00 	.word	0xd0a92e00
   1f1b8:	4282886a 	.word	0x4282886a
   1f1bc:	2100d811 	.word	0x2100d811
   1f1c0:	e0031d2b 	.word	0xe0031d2b
   1f1c4:	3304885a 	.word	0x3304885a
   1f1c8:	d80a4282 	.word	0xd80a4282
   1f1cc:	5c04f833 	.word	0x5c04f833
   1f1d0:	428e3101 	.word	0x428e3101
   1f1d4:	4405fb02 	.word	0x4405fb02
   1f1d8:	0002eba0 	.word	0x0002eba0
   1f1dc:	d1f1461d 	.word	0xd1f1461d
   1f1e0:	882be794 	.word	0x882be794
   1f1e4:	4003fb00 	.word	0x4003fb00
   1f1e8:	e8bdb003 	.word	0xe8bdb003
   1f1ec:	46708ff0 	.word	0x46708ff0
   1f1f0:	f1bbe7b0 	.word	0xf1bbe7b0
   1f1f4:	bf080f10 	.word	0xbf080f10
   1f1f8:	d090260f 	.word	0xd090260f
   1f1fc:	bf00e786 	.word	0xbf00e786
   1f200:	200218d8 	.word	0x200218d8
   1f204:	2002189c 	.word	0x2002189c
   1f208:	20021858 	.word	0x20021858

0001f20c <mem_alloc.constprop.4>:
   1f20c:	d04c2800 	.word	0xd04c2800
   1f210:	681a4b6b 	.word	0x681a4b6b
   1f214:	d8484290 	.word	0xd8484290
   1f218:	4ff0e92d 	.word	0x4ff0e92d
   1f21c:	b083685f 	.word	0xb083685f
   1f220:	2f009700 	.word	0x2f009700
   1f224:	1e7ad051 	.word	0x1e7ad051
   1f228:	21004696 	.word	0x21004696
   1f22c:	0c01f04f 	.word	0x0c01f04f
   1f230:	92014c64 	.word	0x92014c64
   1f234:	020eeb01 	.word	0x020eeb01
   1f238:	f8533201 	.word	0xf8533201
   1f23c:	0852503c 	.word	0x0852503c
   1f240:	0801f102 	.word	0x0801f102
   1f244:	0545eb05 	.word	0x0545eb05
   1f248:	9037f853 	.word	0x9037f853
   1f24c:	a025f854 	.word	0xa025f854
   1f250:	6038f853 	.word	0x6038f853
   1f254:	0549eb09 	.word	0x0549eb09
   1f258:	09cceb03 	.word	0x09cceb03
   1f25c:	9004f8d9 	.word	0x9004f8d9
   1f260:	0646eb06 	.word	0x0646eb06
   1f264:	a010f8da 	.word	0xa010f8da
   1f268:	6026f854 	.word	0x6026f854
   1f26c:	5025f854 	.word	0x5025f854
   1f270:	a029f83a 	.word	0xa029f83a
   1f274:	0bc8eb03 	.word	0x0bc8eb03
   1f278:	09c7eb03 	.word	0x09c7eb03
   1f27c:	f8db6936 	.word	0xf8db6936
   1f280:	692db004 	.word	0x692db004
   1f284:	9004f8d9 	.word	0x9004f8d9
   1f288:	f8364550 	.word	0xf8364550
   1f28c:	f835602b 	.word	0xf835602b
   1f290:	d9135029 	.word	0xd9135029
   1f294:	d21042a8 	.word	0xd21042a8
   1f298:	d90842b0 	.word	0xd90842b0
   1f29c:	464145c6 	.word	0x464145c6
   1f2a0:	8087f0c0 	.word	0x8087f0c0
   1f2a4:	0c01f108 	.word	0x0c01f108
   1f2a8:	2000e7c4 	.word	0x2000e7c4
   1f2ac:	f1024770 	.word	0xf1024770
   1f2b0:	45713eff 	.word	0x45713eff
   1f2b4:	4617d87d 	.word	0x4617d87d
   1f2b8:	4639e7bc 	.word	0x4639e7bc
   1f2bc:	428a9a00 	.word	0x428a9a00
   1f2c0:	2910d007 	.word	0x2910d007
   1f2c4:	428ad001 	.word	0x428ad001
   1f2c8:	2000d808 	.word	0x2000d808
   1f2cc:	e8bdb003 	.word	0xe8bdb003
   1f2d0:	9a018ff0 	.word	0x9a018ff0
   1f2d4:	bf182a10 	.word	0xbf182a10
   1f2d8:	d0f64611 	.word	0xd0f64611
   1f2dc:	c0e8f8df 	.word	0xc0e8f8df
   1f2e0:	9000f8dd 	.word	0x9000f8dd
   1f2e4:	08c1eb03 	.word	0x08c1eb03
   1f2e8:	2602e9d8 	.word	0x2602e9d8
   1f2ec:	0242eb02 	.word	0x0242eb02
   1f2f0:	3022f854 	.word	0x3022f854
   1f2f4:	0282eb04 	.word	0x0282eb04
   1f2f8:	e004f8d2 	.word	0xe004f8d2
   1f2fc:	2e00691f 	.word	0x2e00691f
   1f300:	463ad055 	.word	0x463ad055
   1f304:	00b64670 	.word	0x00b64670
   1f308:	0a06eb07 	.word	0x0a06eb07
   1f30c:	32048855 	.word	0x32048855
   1f310:	44284592 	.word	0x44284592
   1f314:	19bdd1fa 	.word	0x19bdd1fa
   1f318:	b002f8b5 	.word	0xb002f8b5
   1f31c:	45834483 	.word	0x45834483
   1f320:	0945d918 	.word	0x0945d918
   1f324:	2025f85c 	.word	0x2025f85c
   1f328:	061ff000 	.word	0x061ff000
   1f32c:	fa06fa22 	.word	0xfa06fa22
   1f330:	0f01f01a 	.word	0x0f01f01a
   1f334:	e013d007 	.word	0xe013d007
   1f338:	2025f85c 	.word	0x2025f85c
   1f33c:	fa06fa22 	.word	0xfa06fa22
   1f340:	0f01f01a 	.word	0x0f01f01a
   1f344:	3001d10c 	.word	0x3001d10c
   1f348:	ea4f4583 	.word	0xea4f4583
   1f34c:	f0001550 	.word	0xf0001550
   1f350:	d1f1061f 	.word	0xd1f1061f
   1f354:	45493101 	.word	0x45493101
   1f358:	0808f108 	.word	0x0808f108
   1f35c:	e7b4d3c4 	.word	0xe7b4d3c4
   1f360:	40b12101 	.word	0x40b12101
   1f364:	ea22899e 	.word	0xea22899e
   1f368:	eba00201 	.word	0xeba00201
   1f36c:	f84c000e 	.word	0xf84c000e
   1f370:	685c2025 	.word	0x685c2025
   1f374:	d0a82e00 	.word	0xd0a82e00
   1f378:	4282887a 	.word	0x4282887a
   1f37c:	2100d811 	.word	0x2100d811
   1f380:	e0031d3b 	.word	0xe0031d3b
   1f384:	3304885a 	.word	0x3304885a
   1f388:	d80a4282 	.word	0xd80a4282
   1f38c:	5c04f833 	.word	0x5c04f833
   1f390:	428e3101 	.word	0x428e3101
   1f394:	0002eba0 	.word	0x0002eba0
   1f398:	4405fb02 	.word	0x4405fb02
   1f39c:	d1f1461f 	.word	0xd1f1461f
   1f3a0:	883be793 	.word	0x883be793
   1f3a4:	4003fb00 	.word	0x4003fb00
   1f3a8:	e8bdb003 	.word	0xe8bdb003
   1f3ac:	46708ff0 	.word	0x46708ff0
   1f3b0:	9a00e7b1 	.word	0x9a00e7b1
   1f3b4:	bf082a10 	.word	0xbf082a10
   1f3b8:	d08f210f 	.word	0xd08f210f
   1f3bc:	bf00e785 	.word	0xbf00e785
   1f3c0:	200218d8 	.word	0x200218d8
   1f3c4:	2002189c 	.word	0x2002189c
   1f3c8:	20021858 	.word	0x20021858

0001f3cc <nrf_mem_init>:
   1f3cc:	2200b570 	.word	0x2200b570
   1f3d0:	48332501 	.word	0x48332501
   1f3d4:	f8500951 	.word	0xf8500951
   1f3d8:	f0024021 	.word	0xf0024021
   1f3dc:	fa05031f 	.word	0xfa05031f
   1f3e0:	3201f303 	.word	0x3201f303
   1f3e4:	f5b24323 	.word	0xf5b24323
   1f3e8:	f8407f00 	.word	0xf8407f00
   1f3ec:	d1f13021 	.word	0xd1f13021
   1f3f0:	4b2c2400 	.word	0x4b2c2400
   1f3f4:	223c4621 	.word	0x223c4621
   1f3f8:	601c482b 	.word	0x601c482b
   1f3fc:	fb1df005 	.word	0xfb1df005
   1f400:	22052110 	.word	0x22052110
   1f404:	4e2a4b29 	.word	0x4e2a4b29
   1f408:	4400e9c3 	.word	0x4400e9c3
   1f40c:	615960d9 	.word	0x615960d9
   1f410:	625961d9 	.word	0x625961d9
   1f414:	635962d9 	.word	0x635962d9
   1f418:	645963d9 	.word	0x645963d9
   1f41c:	655964d9 	.word	0x655964d9
   1f420:	665965d9 	.word	0x665965d9
   1f424:	675966d9 	.word	0x675966d9
   1f428:	609a67d9 	.word	0x609a67d9
   1f42c:	619a611a 	.word	0x619a611a
   1f430:	629a621a 	.word	0x629a621a
   1f434:	639a631a 	.word	0x639a631a
   1f438:	649a641a 	.word	0x649a641a
   1f43c:	659a651a 	.word	0x659a651a
   1f440:	669a661a 	.word	0x669a661a
   1f444:	679a671a 	.word	0x679a671a
   1f448:	2120e9c3 	.word	0x2120e9c3
   1f44c:	4422e9c3 	.word	0x4422e9c3
   1f450:	2124e9c3 	.word	0x2124e9c3
   1f454:	2126e9c3 	.word	0x2126e9c3
   1f458:	2128e9c3 	.word	0x2128e9c3
   1f45c:	212ae9c3 	.word	0x212ae9c3
   1f460:	212ce9c3 	.word	0x212ce9c3
   1f464:	212ee9c3 	.word	0x212ee9c3
   1f468:	2130e9c3 	.word	0x2130e9c3
   1f46c:	2132e9c3 	.word	0x2132e9c3
   1f470:	2134e9c3 	.word	0x2134e9c3
   1f474:	2136e9c3 	.word	0x2136e9c3
   1f478:	2138e9c3 	.word	0x2138e9c3
   1f47c:	213ae9c3 	.word	0x213ae9c3
   1f480:	213ce9c3 	.word	0x213ce9c3
   1f484:	213ee9c3 	.word	0x213ee9c3
   1f488:	1104f8c3 	.word	0x1104f8c3
   1f48c:	2100f8c3 	.word	0x2100f8c3
   1f490:	110cf8c3 	.word	0x110cf8c3
   1f494:	2108f8c3 	.word	0x2108f8c3
   1f498:	70354620 	.word	0x70354620
   1f49c:	bf00bd70 	.word	0xbf00bd70
   1f4a0:	20021858 	.word	0x20021858
   1f4a4:	20021898 	.word	0x20021898
   1f4a8:	2002189c 	.word	0x2002189c
   1f4ac:	200218d8 	.word	0x200218d8
   1f4b0:	20027409 	.word	0x20027409

0001f4b4 <nrf_mem_register>:
   1f4b4:	4ff0e92d 	.word	0x4ff0e92d
   1f4b8:	b0874b87 	.word	0xb0874b87
   1f4bc:	2b00781b 	.word	0x2b00781b
   1f4c0:	808cf000 	.word	0x808cf000
   1f4c4:	b321b328 	.word	0xb321b328
   1f4c8:	f8df780b 	.word	0xf8df780b
   1f4cc:	eb038218 	.word	0xeb038218
   1f4d0:	eb081303 	.word	0xeb081303
   1f4d4:	685b03c3 	.word	0x685b03c3
   1f4d8:	c00cf8b1 	.word	0xc00cf8b1
   1f4dc:	2b104463 	.word	0x2b104463
   1f4e0:	f04fd811 	.word	0xf04fd811
   1f4e4:	46890a00 	.word	0x46890a00
   1f4e8:	4f7d4b7c 	.word	0x4f7d4b7c
   1f4ec:	ea4f681b 	.word	0xea4f681b
   1f4f0:	93000e8c 	.word	0x93000e8c
   1f4f4:	b19168b9 	.word	0xb19168b9
   1f4f8:	0a01f10a 	.word	0x0a01f10a
   1f4fc:	0f05f1ba 	.word	0x0f05f1ba
   1f500:	070cf107 	.word	0x070cf107
   1f504:	f248d1f6 	.word	0xf248d1f6
   1f508:	46581b07 	.word	0x46581b07
   1f50c:	e8bdb007 	.word	0xe8bdb007
   1f510:	f2488ff0 	.word	0xf2488ff0
   1f514:	46581b0e 	.word	0x46581b0e
   1f518:	e8bdb007 	.word	0xe8bdb007
   1f51c:	f1bc8ff0 	.word	0xf1bc8ff0
   1f520:	d0610f00 	.word	0xd0610f00
   1f524:	460c460d 	.word	0x460c460d
   1f528:	3010f8d9 	.word	0x3010f8d9
   1f52c:	0b03eb0e 	.word	0x0b03eb0e
   1f530:	f833885a 	.word	0xf833885a
   1f534:	44156b04 	.word	0x44156b04
   1f538:	fb02459b 	.word	0xfb02459b
   1f53c:	d1f74406 	.word	0xd1f74406
   1f540:	3008f8d9 	.word	0x3008f8d9
   1f544:	d3d742a3 	.word	0xd3d742a3
   1f548:	442b9b00 	.word	0x442b9b00
   1f54c:	7f00f5b3 	.word	0x7f00f5b3
   1f550:	4c63d2d2 	.word	0x4c63d2d2
   1f554:	024aeb0a 	.word	0x024aeb0a
   1f558:	f8c00092 	.word	0xf8c00092
   1f55c:	18a0a000 	.word	0x18a0a000
   1f560:	9002f844 	.word	0x9002f844
   1f564:	468b9a00 	.word	0x468b9a00
   1f568:	2501e9c0 	.word	0x2501e9c0
   1f56c:	2001f899 	.word	0x2001f899
   1f570:	2a01485a 	.word	0x2a01485a
   1f574:	d0c86003 	.word	0xd0c86003
   1f578:	300cf8b9 	.word	0x300cf8b9
   1f57c:	d0c42b00 	.word	0xd0c42b00
   1f580:	f8cd2500 	.word	0xf8cd2500
   1f584:	f8cd9004 	.word	0xf8cd9004
   1f588:	f8cda00c 	.word	0xf8cda00c
   1f58c:	9b01b014 	.word	0x9b01b014
   1f590:	691a781f 	.word	0x691a781f
   1f594:	eb03013b 	.word	0xeb03013b
   1f598:	93000907 	.word	0x93000907
   1f59c:	03c9eb08 	.word	0x03c9eb08
   1f5a0:	f8326859 	.word	0xf8326859
   1f5a4:	91024025 	.word	0x91024025
   1f5a8:	9a03bb39 	.word	0x9a03bb39
   1f5ac:	609a60dd 	.word	0x609a60dd
   1f5b0:	443b9b00 	.word	0x443b9b00
   1f5b4:	eb08461f 	.word	0xeb08461f
   1f5b8:	684b01c3 	.word	0x684b01c3
   1f5bc:	2037f858 	.word	0x2037f858
   1f5c0:	42943301 	.word	0x42943301
   1f5c4:	d912604b 	.word	0xd912604b
   1f5c8:	f8489b01 	.word	0xf8489b01
   1f5cc:	899b4037 	.word	0x899b4037
   1f5d0:	429d3501 	.word	0x429d3501
   1f5d4:	f8ddd3db 	.word	0xf8ddd3db
   1f5d8:	e796b014 	.word	0xe796b014
   1f5dc:	1b08f248 	.word	0x1b08f248
   1f5e0:	b0074658 	.word	0xb0074658
   1f5e4:	8ff0e8bd 	.word	0x8ff0e8bd
   1f5e8:	46659b00 	.word	0x46659b00
   1f5ec:	9b01e7ae 	.word	0x9b01e7ae
   1f5f0:	899b3501 	.word	0x899b3501
   1f5f4:	d8ca42ab 	.word	0xd8ca42ab
   1f5f8:	2600e7ed 	.word	0x2600e7ed
   1f5fc:	3afff101 	.word	0x3afff101
   1f600:	eb069504 	.word	0xeb069504
   1f604:	eb09000a 	.word	0xeb09000a
   1f608:	32010206 	.word	0x32010206
   1f60c:	f8583001 	.word	0xf8583001
   1f610:	0840c032 	.word	0x0840c032
   1f614:	eb094d32 	.word	0xeb094d32
   1f618:	eb090100 	.word	0xeb090100
   1f61c:	3101030a 	.word	0x3101030a
   1f620:	eb0c3301 	.word	0xeb0c3301
   1f624:	f8580c4c 	.word	0xf8580c4c
   1f628:	f855e031 	.word	0xf855e031
   1f62c:	f858b02c 	.word	0xf858b02c
   1f630:	eb08c033 	.word	0xeb08c033
   1f634:	eb0e02c2 	.word	0xeb0e02c2
   1f638:	eb0c0e4e 	.word	0xeb0c0e4e
   1f63c:	f8db0c4c 	.word	0xf8db0c4c
   1f640:	6852b010 	.word	0x6852b010
   1f644:	e02ef855 	.word	0xe02ef855
   1f648:	c02cf855 	.word	0xc02cf855
   1f64c:	01c1eb08 	.word	0x01c1eb08
   1f650:	03c3eb08 	.word	0x03c3eb08
   1f654:	2022f83b 	.word	0x2022f83b
   1f658:	e010f8de 	.word	0xe010f8de
   1f65c:	f8dc6849 	.word	0xf8dc6849
   1f660:	685bc010 	.word	0x685bc010
   1f664:	f83e4294 	.word	0xf83e4294
   1f668:	f83c1021 	.word	0xf83c1021
   1f66c:	d92d3023 	.word	0xd92d3023
   1f670:	d22d429c 	.word	0xd22d429c
   1f674:	d924428c 	.word	0xd924428c
   1f678:	45b21c46 	.word	0x45b21c46
   1f67c:	2610d2c1 	.word	0x2610d2c1
   1f680:	9a029d04 	.word	0x9a029d04
   1f684:	d91142b2 	.word	0xd91142b2
   1f688:	443b9b00 	.word	0x443b9b00
   1f68c:	4433441a 	.word	0x4433441a
   1f690:	0ac2eb08 	.word	0x0ac2eb08
   1f694:	09c3eb08 	.word	0x09c3eb08
   1f698:	46512208 	.word	0x46512208
   1f69c:	0002eb0a 	.word	0x0002eb0a
   1f6a0:	0a08f1aa 	.word	0x0a08f1aa
   1f6a4:	f99cf005 	.word	0xf99cf005
   1f6a8:	d1f545d1 	.word	0xd1f545d1
   1f6ac:	99039b00 	.word	0x99039b00
   1f6b0:	4433443b 	.word	0x4433443b
   1f6b4:	eb083301 	.word	0xeb083301
   1f6b8:	f84802c3 	.word	0xf84802c3
   1f6bc:	60551033 	.word	0x60551033
   1f6c0:	f100e776 	.word	0xf100e776
   1f6c4:	45563aff 	.word	0x45563aff
   1f6c8:	e7d8d99b 	.word	0xe7d8d99b
   1f6cc:	e7d89d04 	.word	0xe7d89d04
   1f6d0:	f10a9d04 	.word	0xf10a9d04
   1f6d4:	e7d40601 	.word	0xe7d40601
   1f6d8:	20027409 	.word	0x20027409
   1f6dc:	20021898 	.word	0x20021898
   1f6e0:	2002189c 	.word	0x2002189c
   1f6e4:	200218d8 	.word	0x200218d8

0001f6e8 <nrf_malloc>:
   1f6e8:	781b4b03 	.word	0x781b4b03
   1f6ec:	f7ffb10b 	.word	0xf7ffb10b
   1f6f0:	4618bd8d 	.word	0x4618bd8d
   1f6f4:	bf004770 	.word	0xbf004770
   1f6f8:	20027409 	.word	0x20027409

0001f6fc <nrf_calloc>:
   1f6fc:	4b08b538 	.word	0x4b08b538
   1f700:	b155781d 	.word	0xb155781d
   1f704:	f400fb01 	.word	0xf400fb01
   1f708:	f7ff4620 	.word	0xf7ff4620
   1f70c:	4605fd7f 	.word	0x4605fd7f
   1f710:	4622b118 	.word	0x4622b118
   1f714:	f0052100 	.word	0xf0052100
   1f718:	4628f990 	.word	0x4628f990
   1f71c:	bf00bd38 	.word	0xbf00bd38
   1f720:	20027409 	.word	0x20027409

0001f724 <nrf_free>:
   1f724:	781b4b04 	.word	0x781b4b04
   1f728:	b118b123 	.word	0xb118b123
   1f72c:	20004601 	.word	0x20004601
   1f730:	bc1cf7ff 	.word	0xbc1cf7ff
   1f734:	bf004770 	.word	0xbf004770
   1f738:	20027409 	.word	0x20027409

0001f73c <nrf_shared_malloc>:
   1f73c:	781b4b03 	.word	0x781b4b03
   1f740:	f7ffb10b 	.word	0xf7ffb10b
   1f744:	4618bc7f 	.word	0x4618bc7f
   1f748:	bf004770 	.word	0xbf004770
   1f74c:	20027409 	.word	0x20027409

0001f750 <nrf_shared_free>:
   1f750:	781b4b04 	.word	0x781b4b04
   1f754:	b118b123 	.word	0xb118b123
   1f758:	20014601 	.word	0x20014601
   1f75c:	bc06f7ff 	.word	0xbc06f7ff
   1f760:	bf004770 	.word	0xbf004770
   1f764:	20027409 	.word	0x20027409

0001f768 <symbol_0003897>:
   1f768:	728cf44f 	.word	0x728cf44f
   1f76c:	f0052100 	.word	0xf0052100
   1f770:	bf00b964 	.word	0xbf00b964

0001f774 <symbol_0006f61>:
   1f774:	f44fb118 	.word	0xf44fb118
   1f778:	f7fc718c 	.word	0xf7fc718c
   1f77c:	4770b837 	.word	0x4770b837

0001f780 <symbol_000468b>:
   1f780:	f0002ac0 	.word	0xf0002ac0
   1f784:	f5b28184 	.word	0xf5b28184
   1f788:	f0007f80 	.word	0xf0007f80
   1f78c:	2a80817d 	.word	0x2a80817d
   1f790:	f06fd002 	.word	0xf06fd002
   1f794:	4770001f 	.word	0x4770001f
   1f798:	6003230a 	.word	0x6003230a
   1f79c:	4ff0e92d 	.word	0x4ff0e92d
   1f7a0:	f04f4607 	.word	0xf04f4607
   1f7a4:	f1000c00 	.word	0xf1000c00
   1f7a8:	b0850408 	.word	0xb0850408
   1f7ac:	f8470952 	.word	0xf8470952
   1f7b0:	788b4f04 	.word	0x788b4f04
   1f7b4:	780e784d 	.word	0x780e784d
   1f7b8:	ea43041b 	.word	0xea43041b
   1f7bc:	78cd2305 	.word	0x78cd2305
   1f7c0:	f10c4333 	.word	0xf10c4333
   1f7c4:	ea430c01 	.word	0xea430c01
   1f7c8:	45946305 	.word	0x45946305
   1f7cc:	3f04f847 	.word	0x3f04f847
   1f7d0:	0104f101 	.word	0x0104f101
   1f7d4:	6803d3ed 	.word	0x6803d3ed
   1f7d8:	f0002b0c 	.word	0xf0002b0c
   1f7dc:	2b0e81bf 	.word	0x2b0e81bf
   1f7e0:	8158f000 	.word	0x8158f000
   1f7e4:	f0402b0a 	.word	0xf0402b0a
   1f7e8:	6944814b 	.word	0x6944814b
   1f7ec:	f3c44bd8 	.word	0xf3c44bd8
   1f7f0:	68812207 	.word	0x68812207
   1f7f4:	0e255c9a 	.word	0x0e255c9a
   1f7f8:	f0815d5e 	.word	0xf0815d5e
   1f7fc:	b2e50101 	.word	0xb2e50101
   1f800:	404a5d5d 	.word	0x404a5d5d
   1f804:	4107f3c4 	.word	0x4107f3c4
   1f808:	4206ea82 	.word	0x4206ea82
   1f80c:	ea825c5e 	.word	0xea825c5e
   1f810:	68c16505 	.word	0x68c16505
   1f814:	2206ea85 	.word	0x2206ea85
   1f818:	40516907 	.word	0x40516907
   1f81c:	0907ea81 	.word	0x0907ea81
   1f820:	0404ea89 	.word	0x0404ea89
   1f824:	2507f3c4 	.word	0x2507f3c4
   1f828:	0e265d5d 	.word	0x0e265d5d
   1f82c:	f0825d9e 	.word	0xf0825d9e
   1f830:	ea850c02 	.word	0xea850c02
   1f834:	ea85050c 	.word	0xea85050c
   1f838:	b2e64506 	.word	0xb2e64506
   1f83c:	c006f813 	.word	0xc006f813
   1f840:	4607f3c4 	.word	0x4607f3c4
   1f844:	ea855d9e 	.word	0xea855d9e
   1f848:	ea85650c 	.word	0xea85650c
   1f84c:	406f2506 	.word	0x406f2506
   1f850:	0c04ea87 	.word	0x0c04ea87
   1f854:	2607f3cc 	.word	0x2607f3cc
   1f858:	ea4f5d9e 	.word	0xea4f5d9e
   1f85c:	f8136e1c 	.word	0xf8136e1c
   1f860:	f085e00e 	.word	0xf085e00e
   1f864:	ea860804 	.word	0xea860804
   1f868:	ea860608 	.word	0xea860608
   1f86c:	fa5f460e 	.word	0xfa5f460e
   1f870:	f813fe8c 	.word	0xf813fe8c
   1f874:	6182e00e 	.word	0x6182e00e
   1f878:	4207f3cc 	.word	0x4207f3cc
   1f87c:	660eea86 	.word	0x660eea86
   1f880:	e002f813 	.word	0xe002f813
   1f884:	0201ea85 	.word	0x0201ea85
   1f888:	260eea86 	.word	0x260eea86
   1f88c:	0802ea86 	.word	0x0802ea86
   1f890:	0e04ea88 	.word	0x0e04ea88
   1f894:	f3ce61c1 	.word	0xf3ce61c1
   1f898:	5c592107 	.word	0x5c592107
   1f89c:	6a1eea4f 	.word	0x6a1eea4f
   1f8a0:	a00af813 	.word	0xa00af813
   1f8a4:	0b08f086 	.word	0x0b08f086
   1f8a8:	010bea81 	.word	0x010bea81
   1f8ac:	410aea81 	.word	0x410aea81
   1f8b0:	fa8efa5f 	.word	0xfa8efa5f
   1f8b4:	a00af813 	.word	0xa00af813
   1f8b8:	f3ce6244 	.word	0xf3ce6244
   1f8bc:	5d1c4407 	.word	0x5d1c4407
   1f8c0:	610aea81 	.word	0x610aea81
   1f8c4:	2104ea81 	.word	0x2104ea81
   1f8c8:	0a07ea81 	.word	0x0a07ea81
   1f8cc:	040eea8a 	.word	0x040eea8a
   1f8d0:	630762c2 	.word	0x630762c2
   1f8d4:	2207f3c4 	.word	0x2207f3c4
   1f8d8:	0707ea88 	.word	0x0707ea88
   1f8dc:	680ee9c0 	.word	0x680ee9c0
   1f8e0:	9020f8c0 	.word	0x9020f8c0
   1f8e4:	f8c06285 	.word	0xf8c06285
   1f8e8:	f8c0c034 	.word	0xf8c0c034
   1f8ec:	6407e044 	.word	0x6407e044
   1f8f0:	f8136481 	.word	0xf8136481
   1f8f4:	0e22c002 	.word	0x0e22c002
   1f8f8:	f0815c9a 	.word	0xf0815c9a
   1f8fc:	ea8c0510 	.word	0xea8c0510
   1f900:	ea8c0c05 	.word	0xea8c0c05
   1f904:	b2e24c02 	.word	0xb2e24c02
   1f908:	f3c45c9d 	.word	0xf3c45c9d
   1f90c:	5c9a4207 	.word	0x5c9a4207
   1f910:	6c05ea8c 	.word	0x6c05ea8c
   1f914:	2c02ea8c 	.word	0x2c02ea8c
   1f918:	0108ea81 	.word	0x0108ea81
   1f91c:	090cea81 	.word	0x090cea81
   1f920:	0209ea8e 	.word	0x0209ea8e
   1f924:	2507f3c2 	.word	0x2507f3c2
   1f928:	0e155d5e 	.word	0x0e155d5e
   1f92c:	f08c5d5d 	.word	0xf08c5d5d
   1f930:	407e0720 	.word	0x407e0720
   1f934:	4605ea86 	.word	0x4605ea86
   1f938:	5d5db2d5 	.word	0x5d5db2d5
   1f93c:	f3c264c1 	.word	0xf3c264c1
   1f940:	5c594107 	.word	0x5c594107
   1f944:	6605ea86 	.word	0x6605ea86
   1f948:	2601ea86 	.word	0x2601ea86
   1f94c:	0e06ea8a 	.word	0x0e06ea8a
   1f950:	080eea82 	.word	0x080eea82
   1f954:	2107f3c8 	.word	0x2107f3c8
   1f958:	ea4f5c5f 	.word	0xea4f5c5f
   1f95c:	5c596118 	.word	0x5c596118
   1f960:	0540f086 	.word	0x0540f086
   1f964:	ea87406f 	.word	0xea87406f
   1f968:	fa5f4701 	.word	0xfa5f4701
   1f96c:	5c59f188 	.word	0x5c59f188
   1f970:	0509ea8a 	.word	0x0509ea8a
   1f974:	6701ea87 	.word	0x6701ea87
   1f978:	4107f3c8 	.word	0x4107f3c8
   1f97c:	f8c05c59 	.word	0xf8c05c59
   1f980:	ea87a050 	.word	0xea87a050
   1f984:	ea892701 	.word	0xea892701
   1f988:	66050a06 	.word	0x66050a06
   1f98c:	0507ea8a 	.word	0x0507ea8a
   1f990:	0105ea82 	.word	0x0105ea82
   1f994:	f3c16544 	.word	0xf3c16544
   1f998:	5d1c2407 	.word	0x5d1c2407
   1f99c:	6b11ea4f 	.word	0x6b11ea4f
   1f9a0:	b00bf813 	.word	0xb00bf813
   1f9a4:	f0876642 	.word	0xf0876642
   1f9a8:	40620280 	.word	0x40620280
   1f9ac:	ea82b2cc 	.word	0xea82b2cc
   1f9b0:	f813420b 	.word	0xf813420b
   1f9b4:	f3c1b004 	.word	0xf3c1b004
   1f9b8:	5d1c4407 	.word	0x5d1c4407
   1f9bc:	620bea82 	.word	0x620bea82
   1f9c0:	2204ea82 	.word	0x2204ea82
   1f9c4:	0402ea8e 	.word	0x0402ea8e
   1f9c8:	c058f8c0 	.word	0xc058f8c0
   1f9cc:	0c04ea81 	.word	0x0c04ea81
   1f9d0:	67c56686 	.word	0x67c56686
   1f9d4:	0605ea8e 	.word	0x0605ea8e
   1f9d8:	40556787 	.word	0x40556787
   1f9dc:	2707f3cc 	.word	0x2707f3cc
   1f9e0:	ae1be9c0 	.word	0xae1be9c0
   1f9e4:	1084f8c0 	.word	0x1084f8c0
   1f9e8:	2088f8c0 	.word	0x2088f8c0
   1f9ec:	6080f8c0 	.word	0x6080f8c0
   1f9f0:	905cf8c0 	.word	0x905cf8c0
   1f9f4:	8074f8c0 	.word	0x8074f8c0
   1f9f8:	508cf8c0 	.word	0x508cf8c0
   1f9fc:	f0825dde 	.word	0xf0825dde
   1fa00:	ea4f021b 	.word	0xea4f021b
   1fa04:	f813671c 	.word	0xf813671c
   1fa08:	4056e007 	.word	0x4056e007
   1fa0c:	f28cfa5f 	.word	0xf28cfa5f
   1fa10:	f3cc5c9f 	.word	0xf3cc5c9f
   1fa14:	5c9a4207 	.word	0x5c9a4207
   1fa18:	460eea86 	.word	0x460eea86
   1fa1c:	6607ea86 	.word	0x6607ea86
   1fa20:	2602ea86 	.word	0x2602ea86
   1fa24:	40694075 	.word	0x40694075
   1fa28:	2207f3c1 	.word	0x2207f3c1
   1fa2c:	0e0f5c9a 	.word	0x0e0f5c9a
   1fa30:	f0865ddf 	.word	0xf0865ddf
   1fa34:	ea820e36 	.word	0xea820e36
   1fa38:	ea82020e 	.word	0xea82020e
   1fa3c:	b2cf4207 	.word	0xb2cf4207
   1fa40:	e007f813 	.word	0xe007f813
   1fa44:	4707f3c1 	.word	0x4707f3c1
   1fa48:	ea825ddf 	.word	0xea825ddf
   1fa4c:	ea83630e 	.word	0xea83630e
   1fa50:	ea832307 	.word	0xea832307
   1fa54:	ea820204 	.word	0xea820204
   1fa58:	e9c00e01 	.word	0xe9c00e01
   1fa5c:	e9c06526 	.word	0xe9c06526
   1fa60:	f8c02e2c 	.word	0xf8c02e2c
   1fa64:	ea834090 	.word	0xea834090
   1fa68:	406c0705 	.word	0x406c0705
   1fa6c:	c094f8c0 	.word	0xc094f8c0
   1fa70:	10a4f8c0 	.word	0x10a4f8c0
   1fa74:	30a8f8c0 	.word	0x30a8f8c0
   1fa78:	70acf8c0 	.word	0x70acf8c0
   1fa7c:	40a0f8c0 	.word	0x40a0f8c0
   1fa80:	b0052000 	.word	0xb0052000
   1fa84:	8ff0e8bd 	.word	0x8ff0e8bd
   1fa88:	6003230e 	.word	0x6003230e
   1fa8c:	230ce686 	.word	0x230ce686
   1fa90:	e6836003 	.word	0xe6836003
   1fa94:	ce03e9d0 	.word	0xce03e9d0
   1fa98:	8907e9d0 	.word	0x8907e9d0
   1fa9c:	7205e9d0 	.word	0x7205e9d0
   1faa0:	68836a46 	.word	0x68836a46
   1faa4:	f8df4670 	.word	0xf8df4670
   1faa8:	4d29a0b0 	.word	0x4d29a0b0
   1faac:	c000f8cd 	.word	0xc000f8cd
   1fab0:	bf04f85a 	.word	0xbf04f85a
   1fab4:	2c07f3c6 	.word	0x2c07f3c6
   1fab8:	e00cf815 	.word	0xe00cf815
   1fabc:	6c16ea4f 	.word	0x6c16ea4f
   1fac0:	030bea83 	.word	0x030bea83
   1fac4:	b00cf815 	.word	0xb00cf815
   1fac8:	fc86fa5f 	.word	0xfc86fa5f
   1facc:	0303ea8e 	.word	0x0303ea8e
   1fad0:	c00cf815 	.word	0xc00cf815
   1fad4:	4e07f3c6 	.word	0x4e07f3c6
   1fad8:	430bea83 	.word	0x430bea83
   1fadc:	e00ef815 	.word	0xe00ef815
   1fae0:	630cea83 	.word	0x630cea83
   1fae4:	ea839900 	.word	0xea839900
   1fae8:	4059230e 	.word	0x4059230e
   1faec:	40474048 	.word	0x40474048
   1faf0:	fc87fa5f 	.word	0xfc87fa5f
   1faf4:	e00cf815 	.word	0xe00cf815
   1faf8:	6c17ea4f 	.word	0x6c17ea4f
   1fafc:	b00cf815 	.word	0xb00cf815
   1fb00:	2c07f3c7 	.word	0x2c07f3c7
   1fb04:	0202ea8e 	.word	0x0202ea8e
   1fb08:	c00cf815 	.word	0xc00cf815
   1fb0c:	4e07f3c7 	.word	0x4e07f3c7
   1fb10:	620bea82 	.word	0x620bea82
   1fb14:	e00ef815 	.word	0xe00ef815
   1fb18:	220cea82 	.word	0x220cea82
   1fb1c:	420eea82 	.word	0x420eea82
   1fb20:	0802ea88 	.word	0x0802ea88
   1fb24:	3108e9c4 	.word	0x3108e9c4
   1fb28:	490a9100 	.word	0x490a9100
   1fb2c:	0908ea89 	.word	0x0908ea89
   1fb30:	0609ea86 	.word	0x0609ea86
   1fb34:	e9c4458a 	.word	0xe9c4458a
   1fb38:	e9c4070a 	.word	0xe9c4070a
   1fb3c:	e9c4960e 	.word	0xe9c4960e
   1fb40:	f104280c 	.word	0xf104280c
   1fb44:	d1b30420 	.word	0xd1b30420
   1fb48:	b0052000 	.word	0xb0052000
   1fb4c:	8ff0e8bd 	.word	0x8ff0e8bd
   1fb50:	00026f2c 	.word	0x00026f2c
   1fb54:	00027444 	.word	0x00027444
   1fb58:	00027428 	.word	0x00027428
   1fb5c:	4bb269c2 	.word	0x4bb269c2
   1fb60:	2407f3c2 	.word	0x2407f3c2
   1fb64:	5d1d6881 	.word	0x5d1d6881
   1fb68:	5d1e0e14 	.word	0x5d1e0e14
   1fb6c:	0101f081 	.word	0x0101f081
   1fb70:	5d1cb2d4 	.word	0x5d1cb2d4
   1fb74:	f3c2404d 	.word	0xf3c2404d
   1fb78:	5c594107 	.word	0x5c594107
   1fb7c:	4506ea85 	.word	0x4506ea85
   1fb80:	ea8568c7 	.word	0xea8568c7
   1fb84:	ea856504 	.word	0xea856504
   1fb88:	69012501 	.word	0x69012501
   1fb8c:	6946406f 	.word	0x6946406f
   1fb90:	0907ea81 	.word	0x0907ea81
   1fb94:	ea866984 	.word	0xea866984
   1fb98:	ea840609 	.word	0xea840609
   1fb9c:	ea820806 	.word	0xea820806
   1fba0:	f3c20208 	.word	0xf3c20208
   1fba4:	f8132407 	.word	0xf8132407
   1fba8:	ea4fe004 	.word	0xea4fe004
   1fbac:	f8136c12 	.word	0xf8136c12
   1fbb0:	f085a00c 	.word	0xf085a00c
   1fbb4:	fa5f0402 	.word	0xfa5f0402
   1fbb8:	ea8efc82 	.word	0xea8efc82
   1fbbc:	f8130404 	.word	0xf8130404
   1fbc0:	f3c2e00c 	.word	0xf3c2e00c
   1fbc4:	f8134c07 	.word	0xf8134c07
   1fbc8:	ea84c00c 	.word	0xea84c00c
   1fbcc:	ea84440a 	.word	0xea84440a
   1fbd0:	ea84640e 	.word	0xea84640e
   1fbd4:	4061240c 	.word	0x4061240c
   1fbd8:	460c9401 	.word	0x460c9401
   1fbdc:	62056981 	.word	0x62056981
   1fbe0:	ea824061 	.word	0xea824061
   1fbe4:	91030c01 	.word	0x91030c01
   1fbe8:	2e07f3cc 	.word	0x2e07f3cc
   1fbec:	f8139901 	.word	0xf8139901
   1fbf0:	ea4fe00e 	.word	0xea4fe00e
   1fbf4:	f8136a1c 	.word	0xf8136a1c
   1fbf8:	f081a00a 	.word	0xf081a00a
   1fbfc:	ea8e0b04 	.word	0xea8e0b04
   1fc00:	ea8e0e0b 	.word	0xea8e0e0b
   1fc04:	fa5f4a0a 	.word	0xfa5f4a0a
   1fc08:	f813fe8c 	.word	0xf813fe8c
   1fc0c:	e9c0e00e 	.word	0xe9c0e00e
   1fc10:	ea8a960a 	.word	0xea8a960a
   1fc14:	f3cc650e 	.word	0xf3cc650e
   1fc18:	f8134e07 	.word	0xf8134e07
   1fc1c:	ea87e00e 	.word	0xea87e00e
   1fc20:	ea850a01 	.word	0xea850a01
   1fc24:	ea8a250e 	.word	0xea8a250e
   1fc28:	ea860e05 	.word	0xea860e05
   1fc2c:	9100010e 	.word	0x9100010e
   1fc30:	ea864621 	.word	0xea864621
   1fc34:	9c000904 	.word	0x9c000904
   1fc38:	820ce9c0 	.word	0x820ce9c0
   1fc3c:	0604ea82 	.word	0x0604ea82
   1fc40:	f8c06247 	.word	0xf8c06247
   1fc44:	9102a03c 	.word	0x9102a03c
   1fc48:	9f036401 	.word	0x9f036401
   1fc4c:	2407f3c6 	.word	0x2407f3c6
   1fc50:	080eea81 	.word	0x080eea81
   1fc54:	7c12e9c0 	.word	0x7c12e9c0
   1fc58:	ea4f5d1c 	.word	0xea4f5d1c
   1fc5c:	e9c06c16 	.word	0xe9c06c16
   1fc60:	f8c05e14 	.word	0xf8c05e14
   1fc64:	f0858058 	.word	0xf0858058
   1fc68:	f8130508 	.word	0xf8130508
   1fc6c:	fa5f800c 	.word	0xfa5f800c
   1fc70:	9901fc86 	.word	0x9901fc86
   1fc74:	c00cf813 	.word	0xc00cf813
   1fc78:	f3c64065 	.word	0xf3c64065
   1fc7c:	5d1c4407 	.word	0x5d1c4407
   1fc80:	4508ea85 	.word	0x4508ea85
   1fc84:	ea856381 	.word	0xea856381
   1fc88:	9902650c 	.word	0x9902650c
   1fc8c:	2504ea85 	.word	0x2504ea85
   1fc90:	91014069 	.word	0x91014069
   1fc94:	69844639 	.word	0x69844639
   1fc98:	9044f8c0 	.word	0x9044f8c0
   1fc9c:	0805ea84 	.word	0x0805ea84
   1fca0:	0908ea86 	.word	0x0908ea86
   1fca4:	2407f3c9 	.word	0x2407f3c9
   1fca8:	a004f813 	.word	0xa004f813
   1fcac:	6419ea4f 	.word	0x6419ea4f
   1fcb0:	f0855d1c 	.word	0xf0855d1c
   1fcb4:	ea8a0c10 	.word	0xea8a0c10
   1fcb8:	fa5f0c0c 	.word	0xfa5f0c0c
   1fcbc:	f813fa89 	.word	0xf813fa89
   1fcc0:	ea8ca00a 	.word	0xea8ca00a
   1fcc4:	f3c94c04 	.word	0xf3c94c04
   1fcc8:	5d1c4407 	.word	0x5d1c4407
   1fccc:	6c0aea8c 	.word	0x6c0aea8c
   1fcd0:	0e05ea8e 	.word	0x0e05ea8e
   1fcd4:	2c04ea8c 	.word	0x2c04ea8c
   1fcd8:	040cea8e 	.word	0x040cea8e
   1fcdc:	f8c04062 	.word	0xf8c04062
   1fce0:	f3c2e06c 	.word	0xf3c2e06c
   1fce4:	f8132e07 	.word	0xf8132e07
   1fce8:	ea4fe00e 	.word	0xea4fe00e
   1fcec:	f8136a12 	.word	0xf8136a12
   1fcf0:	f08ca00a 	.word	0xf08ca00a
   1fcf4:	ea8e0b20 	.word	0xea8e0b20
   1fcf8:	ea8e0e0b 	.word	0xea8e0e0b
   1fcfc:	fa5f4a0a 	.word	0xfa5f4a0a
   1fd00:	f813fe82 	.word	0xf813fe82
   1fd04:	9f00e00e 	.word	0x9f00e00e
   1fd08:	6a0eea8a 	.word	0x6a0eea8a
   1fd0c:	4e07f3c2 	.word	0x4e07f3c2
   1fd10:	b00ef813 	.word	0xb00ef813
   1fd14:	0e07ea81 	.word	0x0e07ea81
   1fd18:	ea8a9901 	.word	0xea8a9901
   1fd1c:	ea812b0b 	.word	0xea812b0b
   1fd20:	9f000a0b 	.word	0x9f000a0b
   1fd24:	e060f8c0 	.word	0xe060f8c0
   1fd28:	0e0aea88 	.word	0x0e0aea88
   1fd2c:	664665c7 	.word	0x664665c7
   1fd30:	907cf8c0 	.word	0x907cf8c0
   1fd34:	060eea82 	.word	0x060eea82
   1fd38:	ea876701 	.word	0xea876701
   1fd3c:	404f0904 	.word	0x404f0904
   1fd40:	66854061 	.word	0x66854061
   1fd44:	1088f8c0 	.word	0x1088f8c0
   1fd48:	2507f3c6 	.word	0x2507f3c6
   1fd4c:	0109ea88 	.word	0x0109ea88
   1fd50:	1090f8c0 	.word	0x1090f8c0
   1fd54:	0e315d5d 	.word	0x0e315d5d
   1fd58:	f8c05c59 	.word	0xf8c05c59
   1fd5c:	f8c04084 	.word	0xf8c04084
   1fd60:	ea84b098 	.word	0xea84b098
   1fd64:	6747040b 	.word	0x6747040b
   1fd68:	0b40f08b 	.word	0x0b40f08b
   1fd6c:	5ddfb2f7 	.word	0x5ddfb2f7
   1fd70:	60acf8c0 	.word	0x60acf8c0
   1fd74:	050bea85 	.word	0x050bea85
   1fd78:	4607f3c6 	.word	0x4607f3c6
   1fd7c:	4501ea85 	.word	0x4501ea85
   1fd80:	ea855d99 	.word	0xea855d99
   1fd84:	ea856507 	.word	0xea856507
   1fd88:	f8c02501 	.word	0xf8c02501
   1fd8c:	406c409c 	.word	0x406c409c
   1fd90:	0604ea89 	.word	0x0604ea89
   1fd94:	2094f8c0 	.word	0x2094f8c0
   1fd98:	f3c24072 	.word	0xf3c24072
   1fd9c:	f8c02107 	.word	0xf8c02107
   1fda0:	5c59c080 	.word	0x5c59c080
   1fda4:	0c0aea89 	.word	0x0c0aea89
   1fda8:	f8c00e17 	.word	0xf8c00e17
   1fdac:	f8c0908c 	.word	0xf8c0908c
   1fdb0:	f813c0a4 	.word	0xf813c0a4
   1fdb4:	f0859007 	.word	0xf0859007
   1fdb8:	b2d70c80 	.word	0xb2d70c80
   1fdbc:	010cea81 	.word	0x010cea81
   1fdc0:	c007f813 	.word	0xc007f813
   1fdc4:	4707f3c2 	.word	0x4707f3c2
   1fdc8:	ea815ddf 	.word	0xea815ddf
   1fdcc:	ea814109 	.word	0xea814109
   1fdd0:	ea83630c 	.word	0xea83630c
   1fdd4:	f8c02307 	.word	0xf8c02307
   1fdd8:	ea838078 	.word	0xea838078
   1fddc:	ea830c0a 	.word	0xea830c0a
   1fde0:	f8c00808 	.word	0xf8c00808
   1fde4:	ea8ee0a8 	.word	0xea8ee0a8
   1fde8:	ea880706 	.word	0xea880706
   1fdec:	ea8c0b02 	.word	0xea8c0b02
   1fdf0:	ea830906 	.word	0xea830906
   1fdf4:	ea8a0e04 	.word	0xea8a0e04
   1fdf8:	f8c00104 	.word	0xf8c00104
   1fdfc:	e9c0a0a0 	.word	0xe9c0a0a0
   1fe00:	f8c07230 	.word	0xf8c07230
   1fe04:	e9c060bc 	.word	0xe9c060bc
   1fe08:	e9c0542c 	.word	0xe9c0542c
   1fe0c:	f8c08b36 	.word	0xf8c08b36
   1fe10:	e9c030c8 	.word	0xe9c030c8
   1fe14:	f8c0c934 	.word	0xf8c0c934
   1fe18:	f8c0e0cc 	.word	0xf8c0e0cc
   1fe1c:	200010b8 	.word	0x200010b8
   1fe20:	e8bdb005 	.word	0xe8bdb005
   1fe24:	bf008ff0 	.word	0xbf008ff0
   1fe28:	00026f2c 	.word	0x00026f2c

0001fe2c <symbol_000e9b3>:
   1fe2c:	4ff0e92d 	.word	0x4ff0e92d
   1fe30:	0400e9d0 	.word	0x0400e9d0
   1fe34:	46061040 	.word	0x46061040
   1fe38:	f8d16823 	.word	0xf8d16823
   1fe3c:	b089a000 	.word	0xb089a000
   1fe40:	0a03ea8a 	.word	0x0a03ea8a
   1fe44:	800cf8d1 	.word	0x800cf8d1
   1fe48:	3e0168e3 	.word	0x3e0168e3
   1fe4c:	68659006 	.word	0x68659006
   1fe50:	68a0684f 	.word	0x68a0684f
   1fe54:	688a9205 	.word	0x688a9205
   1fe58:	0803ea88 	.word	0x0803ea88
   1fe5c:	f1042e00 	.word	0xf1042e00
   1fe60:	96010310 	.word	0x96010310
   1fe64:	0507ea85 	.word	0x0507ea85
   1fe68:	0200ea82 	.word	0x0200ea82
   1fe6c:	f8df9304 	.word	0xf8df9304
   1fe70:	f340b3e8 	.word	0xf340b3e8
   1fe74:	462b80db 	.word	0x462b80db
   1fe78:	0930f104 	.word	0x0930f104
   1fe7c:	f18afa5f 	.word	0xf18afa5f
   1fe80:	f788fa5f 	.word	0xf788fa5f
   1fe84:	b2d4b2de 	.word	0xb2d4b2de
   1fe88:	0021f85b 	.word	0x0021f85b
   1fe8c:	5027f85b 	.word	0x5027f85b
   1fe90:	7026f85b 	.word	0x7026f85b
   1fe94:	6024f85b 	.word	0x6024f85b
   1fe98:	4c20f859 	.word	0x4c20f859
   1fe9c:	6118ea4f 	.word	0x6118ea4f
   1fea0:	0c04ea80 	.word	0x0c04ea80
   1fea4:	0c14f859 	.word	0x0c14f859
   1fea8:	1021f85b 	.word	0x1021f85b
   1feac:	0e00ea85 	.word	0x0e00ea85
   1feb0:	f85b0e10 	.word	0xf85b0e10
   1feb4:	f3c35020 	.word	0xf3c35020
   1feb8:	ea8c2407 	.word	0xea8c2407
   1febc:	f3c22c31 	.word	0xf3c22c31
   1fec0:	f3c24107 	.word	0xf3c24107
   1fec4:	f85b2207 	.word	0xf85b2207
   1fec8:	f85b4024 	.word	0xf85b4024
   1fecc:	ea8e0022 	.word	0xea8e0022
   1fed0:	0e1d2235 	.word	0x0e1d2235
   1fed4:	4307f3c3 	.word	0x4307f3c3
   1fed8:	3023f85b 	.word	0x3023f85b
   1fedc:	6c34ea8c 	.word	0x6c34ea8c
   1fee0:	4c18f859 	.word	0x4c18f859
   1fee4:	f85b9302 	.word	0xf85b9302
   1fee8:	f8595025 	.word	0xf8595025
   1feec:	ea4f3c1c 	.word	0xea4f3c1c
   1fef0:	f85b6e1a 	.word	0xf85b6e1a
   1fef4:	4066e02e 	.word	0x4066e02e
   1fef8:	f3ca405f 	.word	0xf3ca405f
   1fefc:	ea862407 	.word	0xea862407
   1ff00:	f3c82635 	.word	0xf3c82635
   1ff04:	f3c82507 	.word	0xf3c82507
   1ff08:	ea874807 	.word	0xea874807
   1ff0c:	f85b273e 	.word	0xf85b273e
   1ff10:	f85b4024 	.word	0xf85b4024
   1ff14:	f85be025 	.word	0xf85be025
   1ff18:	9b025028 	.word	0x9b025028
   1ff1c:	6030ea87 	.word	0x6030ea87
   1ff20:	4035ea80 	.word	0x4035ea80
   1ff24:	1021f85b 	.word	0x1021f85b
   1ff28:	6434ea82 	.word	0x6434ea82
   1ff2c:	4433ea84 	.word	0x4433ea84
   1ff30:	ea8cb2c3 	.word	0xea8cb2c3
   1ff34:	f85b4131 	.word	0xf85b4131
   1ff38:	f3ca3023 	.word	0xf3ca3023
   1ff3c:	f85b4a07 	.word	0xf85b4a07
   1ff40:	b2ca702a 	.word	0xb2ca702a
   1ff44:	6c14ea4f 	.word	0x6c14ea4f
   1ff48:	2022f85b 	.word	0x2022f85b
   1ff4c:	663eea86 	.word	0x663eea86
   1ff50:	f8599302 	.word	0xf8599302
   1ff54:	ea863c10 	.word	0xea863c10
   1ff58:	f85b4637 	.word	0xf85b4637
   1ff5c:	f3c0e02c 	.word	0xf3c0e02c
   1ff60:	f85b2707 	.word	0xf85b2707
   1ff64:	ea82c027 	.word	0xea82c027
   1ff68:	f3c60a03 	.word	0xf3c60a03
   1ff6c:	f3c64507 	.word	0xf3c64507
   1ff70:	f85b2207 	.word	0xf85b2207
   1ff74:	f85b3022 	.word	0xf85b3022
   1ff78:	ea8a5025 	.word	0xea8a5025
   1ff7c:	f3c42a3e 	.word	0xf3c42a3e
   1ff80:	0e0f4207 	.word	0x0e0f4207
   1ff84:	6a3cea8a 	.word	0x6a3cea8a
   1ff88:	7027f85b 	.word	0x7027f85b
   1ff8c:	ea8a9303 	.word	0xea8a9303
   1ff90:	f85b4a35 	.word	0xf85b4a35
   1ff94:	f8598022 	.word	0xf8598022
   1ff98:	9b025c0c 	.word	0x9b025c0c
   1ff9c:	406bb2f2 	.word	0x406bb2f2
   1ffa0:	2022f85b 	.word	0x2022f85b
   1ffa4:	2337ea83 	.word	0x2337ea83
   1ffa8:	7c08f859 	.word	0x7c08f859
   1ffac:	fc84fa5f 	.word	0xfc84fa5f
   1ffb0:	2407f3c4 	.word	0x2407f3c4
   1ffb4:	502cf85b 	.word	0x502cf85b
   1ffb8:	0e364057 	.word	0x0e364057
   1ffbc:	2024f85b 	.word	0x2024f85b
   1ffc0:	4c04f859 	.word	0x4c04f859
   1ffc4:	6e10ea4f 	.word	0x6e10ea4f
   1ffc8:	6026f85b 	.word	0x6026f85b
   1ffcc:	f85b406c 	.word	0xf85b406c
   1ffd0:	ea84e02e 	.word	0xea84e02e
   1ffd4:	f3c12636 	.word	0xf3c12636
   1ffd8:	f3c12407 	.word	0xf3c12407
   1ffdc:	f85b4107 	.word	0xf85b4107
   1ffe0:	ea871021 	.word	0xea871021
   1ffe4:	ea8e2e3e 	.word	0xea8e2e3e
   1ffe8:	f3c06232 	.word	0xf3c06232
   1ffec:	f85b4007 	.word	0xf85b4007
   1fff0:	9d034024 	.word	0x9d034024
   1fff4:	4231ea82 	.word	0x4231ea82
   1fff8:	f85b9901 	.word	0xf85b9901
   1fffc:	ea830020 	.word	0xea830020
   20000:	ea866335 	.word	0xea866335
   20004:	39016634 	.word	0x39016634
   20008:	4338ea83 	.word	0x4338ea83
   2000c:	0920f109 	.word	0x0920f109
   20010:	4830ea86 	.word	0x4830ea86
   20014:	f47f9101 	.word	0xf47f9101
   20018:	461daf31 	.word	0x461daf31
   2001c:	99049b06 	.word	0x99049b06
   20020:	6300f103 	.word	0x6300f103
   20024:	eb013b01 	.word	0xeb013b01
   20028:	93041343 	.word	0x93041343
   2002c:	fa5f2400 	.word	0xfa5f2400
   20030:	f85bf38a 	.word	0xf85bf38a
   20034:	9b047023 	.word	0x9b047023
   20038:	fa5f46a1 	.word	0xfa5f46a1
   2003c:	6819fc85 	.word	0x6819fc85
   20040:	6318ea4f 	.word	0x6318ea4f
   20044:	46a69407 	.word	0x46a69407
   20048:	402cf85b 	.word	0x402cf85b
   2004c:	c023f85b 	.word	0xc023f85b
   20050:	f3c54079 	.word	0xf3c54079
   20054:	f85b2307 	.word	0xf85b2307
   20058:	f3c23023 	.word	0xf3c23023
   2005c:	ea814707 	.word	0xea814707
   20060:	fa5f213c 	.word	0xfa5f213c
   20064:	f85bfc82 	.word	0xf85bfc82
   20068:	f85b002c 	.word	0xf85b002c
   2006c:	ea817027 	.word	0xea817027
   20070:	90036133 	.word	0x90036133
   20074:	4037ea81 	.word	0x4037ea81
   20078:	fa5f9f04 	.word	0xfa5f9f04
   2007c:	f85bf688 	.word	0xf85bf688
   20080:	68fb6026 	.word	0x68fb6026
   20084:	40739001 	.word	0x40739001
   20088:	f85b0e16 	.word	0xf85b0e16
   2008c:	98046026 	.word	0x98046026
   20090:	2636ea83 	.word	0x2636ea83
   20094:	f85b0e2b 	.word	0xf85b0e2b
   20098:	f3c53023 	.word	0xf3c53023
   2009c:	496d4507 	.word	0x496d4507
   200a0:	7025f85b 	.word	0x7025f85b
   200a4:	f89d9306 	.word	0xf89d9306
   200a8:	6843c004 	.word	0x6843c004
   200ac:	651aea4f 	.word	0x651aea4f
   200b0:	5025f85b 	.word	0x5025f85b
   200b4:	2207f3c2 	.word	0x2207f3c2
   200b8:	2022f85b 	.word	0x2022f85b
   200bc:	c00cf811 	.word	0xc00cf811
   200c0:	69044063 	.word	0x69044063
   200c4:	2535ea83 	.word	0x2535ea83
   200c8:	2307f3ca 	.word	0x2307f3ca
   200cc:	3023f85b 	.word	0x3023f85b
   200d0:	0c04ea8c 	.word	0x0c04ea8c
   200d4:	6532ea85 	.word	0x6532ea85
   200d8:	68829c03 	.word	0x68829c03
   200dc:	6633ea86 	.word	0x6633ea86
   200e0:	f3c84660 	.word	0xf3c84660
   200e4:	ea842307 	.word	0xea842307
   200e8:	9c060c02 	.word	0x9c060c02
   200ec:	3023f85b 	.word	0x3023f85b
   200f0:	4a07f3ca 	.word	0x4a07f3ca
   200f4:	202af85b 	.word	0x202af85b
   200f8:	2c34ea8c 	.word	0x2c34ea8c
   200fc:	4807f3c8 	.word	0x4807f3c8
   20100:	4637ea86 	.word	0x4637ea86
   20104:	6c33ea8c 	.word	0x6c33ea8c
   20108:	7028f85b 	.word	0x7028f85b
   2010c:	4232ea8c 	.word	0x4232ea8c
   20110:	4537ea85 	.word	0x4537ea85
   20114:	4c07f3c2 	.word	0x4c07f3c2
   20118:	5ccb0e33 	.word	0x5ccb0e33
   2011c:	a00cf811 	.word	0xa00cf811
   20120:	fc85fa5f 	.word	0xfc85fa5f
   20124:	400cf811 	.word	0x400cf811
   20128:	2707f3c5 	.word	0x2707f3c5
   2012c:	464c9403 	.word	0x464c9403
   20130:	ea805dcf 	.word	0xea805dcf
   20134:	98016303 	.word	0x98016303
   20138:	2307ea83 	.word	0x2307ea83
   2013c:	fb82fa5f 	.word	0xfb82fa5f
   20140:	430aea83 	.word	0x430aea83
   20144:	b00bf811 	.word	0xb00bf811
   20148:	6c10ea4f 	.word	0x6c10ea4f
   2014c:	f3639804 	.word	0xf3639804
   20150:	f8110407 	.word	0xf8110407
   20154:	f8cd800c 	.word	0xf8cd800c
   20158:	9402b018 	.word	0x9402b018
   2015c:	2c07f3c2 	.word	0x2c07f3c2
   20160:	ea4f9c03 	.word	0xea4f9c03
   20164:	69426b12 	.word	0x69426b12
   20168:	c00cf811 	.word	0xc00cf811
   2016c:	f3c64062 	.word	0xf3c64062
   20170:	5dcf4707 	.word	0x5dcf4707
   20174:	6808ea82 	.word	0x6808ea82
   20178:	6a15ea4f 	.word	0x6a15ea4f
   2017c:	ea886982 	.word	0xea886982
   20180:	9c062c0c 	.word	0x9c062c0c
   20184:	f886fa5f 	.word	0xf886fa5f
   20188:	4707ea8c 	.word	0x4707ea8c
   2018c:	8008f811 	.word	0x8008f811
   20190:	c00af811 	.word	0xc00af811
   20194:	a01cf8d0 	.word	0xa01cf8d0
   20198:	40629801 	.word	0x40629801
   2019c:	0a0aea88 	.word	0x0a0aea88
   201a0:	620cea82 	.word	0x620cea82
   201a4:	4807f3c0 	.word	0x4807f3c0
   201a8:	2c07f3c0 	.word	0x2c07f3c0
   201ac:	f8112000 	.word	0xf8112000
   201b0:	f3c6b00b 	.word	0xf3c6b00b
   201b4:	5d8e2607 	.word	0x5d8e2607
   201b8:	6b0bea8a 	.word	0x6b0bea8a
   201bc:	4507f3c5 	.word	0x4507f3c5
   201c0:	a00cf811 	.word	0xa00cf811
   201c4:	f8115d4d 	.word	0xf8115d4d
   201c8:	ea821008 	.word	0xea821008
   201cc:	ea8b2606 	.word	0xea8b2606
   201d0:	9c022b0a 	.word	0x9c022b0a
   201d4:	4b05ea8b 	.word	0x4b05ea8b
   201d8:	4601ea86 	.word	0x4601ea86
   201dc:	2c13ea4f 	.word	0x2c13ea4f
   201e0:	ea4f0a31 	.word	0xea4f0a31
   201e4:	f366221b 	.word	0xf366221b
   201e8:	f36b0e07 	.word	0xf36b0e07
   201ec:	f36c0007 	.word	0xf36c0007
   201f0:	ea4f240f 	.word	0xea4f240f
   201f4:	f3624c13 	.word	0xf3624c13
   201f8:	f361200f 	.word	0xf361200f
   201fc:	f36c2e0f 	.word	0xf36c2e0f
   20200:	0c314417 	.word	0x0c314417
   20204:	4e17f361 	.word	0x4e17f361
   20208:	46204601 	.word	0x46204601
   2020c:	f3630e1b 	.word	0xf3630e1b
   20210:	9b05601f 	.word	0x9b05601f
   20214:	60180a3d 	.word	0x60180a3d
   20218:	f3672000 	.word	0xf3672000
   2021c:	ea4f0907 	.word	0xea4f0907
   20220:	f365421b 	.word	0xf365421b
   20224:	0c3d290f 	.word	0x0c3d290f
   20228:	4917f365 	.word	0x4917f365
   2022c:	0e360e3f 	.word	0x0e360e3f
   20230:	4117f362 	.word	0x4117f362
   20234:	6b1bea4f 	.word	0x6b1bea4f
   20238:	691ff367 	.word	0x691ff367
   2023c:	6e1ff366 	.word	0x6e1ff366
   20240:	611ff36b 	.word	0x611ff36b
   20244:	9004f8c3 	.word	0x9004f8c3
   20248:	e008f8c3 	.word	0xe008f8c3
   2024c:	b00960d9 	.word	0xb00960d9
   20250:	8ff0e8bd 	.word	0x8ff0e8bd
   20254:	00026f2c 	.word	0x00026f2c
   20258:	0002702c 	.word	0x0002702c

0002025c <symbol_000e471>:
   2025c:	4ff0e92d 	.word	0x4ff0e92d
   20260:	3500e9d0 	.word	0x3500e9d0
   20264:	682fb089 	.word	0x682fb089
   20268:	f8d1105b 	.word	0xf8d1105b
   2026c:	9306a000 	.word	0x9306a000
   20270:	684c3b01 	.word	0x684c3b01
   20274:	ea8a9301 	.word	0xea8a9301
   20278:	68eb0a07 	.word	0x68eb0a07
   2027c:	68c9688f 	.word	0x68c9688f
   20280:	40596868 	.word	0x40596868
   20284:	68ae9b01 	.word	0x68ae9b01
   20288:	2b009205 	.word	0x2b009205
   2028c:	0210f105 	.word	0x0210f105
   20290:	0004ea80 	.word	0x0004ea80
   20294:	0706ea87 	.word	0x0706ea87
   20298:	f8df9204 	.word	0xf8df9204
   2029c:	f340b3dc 	.word	0xf340b3dc
   202a0:	46d180d7 	.word	0x46d180d7
   202a4:	0830f105 	.word	0x0830f105
   202a8:	f489fa5f 	.word	0xf489fa5f
   202ac:	5024f85b 	.word	0x5024f85b
   202b0:	6c20f858 	.word	0x6c20f858
   202b4:	fc80fa5f 	.word	0xfc80fa5f
   202b8:	f85b0e04 	.word	0xf85b0e04
   202bc:	f85bc02c 	.word	0xf85bc02c
   202c0:	406e4024 	.word	0x406e4024
   202c4:	5c1cf858 	.word	0x5c1cf858
   202c8:	2e07f3c1 	.word	0x2e07f3c1
   202cc:	a02ef85b 	.word	0xa02ef85b
   202d0:	0505ea8c 	.word	0x0505ea8c
   202d4:	2e34ea86 	.word	0x2e34ea86
   202d8:	b2fbb2ca 	.word	0xb2fbb2ca
   202dc:	6c17ea4f 	.word	0x6c17ea4f
   202e0:	4407f3c7 	.word	0x4407f3c7
   202e4:	2707f3c7 	.word	0x2707f3c7
   202e8:	6027f85b 	.word	0x6027f85b
   202ec:	2022f85b 	.word	0x2022f85b
   202f0:	7c14f858 	.word	0x7c14f858
   202f4:	3023f85b 	.word	0x3023f85b
   202f8:	ea4f407a 	.word	0xea4f407a
   202fc:	f85b6719 	.word	0xf85b6719
   20300:	f85b7027 	.word	0xf85b7027
   20304:	ea82c02c 	.word	0xea82c02c
   20308:	ea822237 	.word	0xea822237
   2030c:	f8586636 	.word	0xf8586636
   20310:	ea852c18 	.word	0xea852c18
   20314:	ea8e2c3c 	.word	0xea8e2c3c
   20318:	0e0d6e3a 	.word	0x0e0d6e3a
   2031c:	0a02ea83 	.word	0x0a02ea83
   20320:	2307f3c9 	.word	0x2307f3c9
   20324:	3023f85b 	.word	0x3023f85b
   20328:	5025f85b 	.word	0x5025f85b
   2032c:	4107f3c1 	.word	0x4107f3c1
   20330:	1021f85b 	.word	0x1021f85b
   20334:	2707f3c0 	.word	0x2707f3c0
   20338:	2535ea8a 	.word	0x2535ea8a
   2033c:	4a07f3c0 	.word	0x4a07f3c0
   20340:	6033ea8c 	.word	0x6033ea8c
   20344:	4031ea80 	.word	0x4031ea80
   20348:	4024f85b 	.word	0x4024f85b
   2034c:	ea8e0e03 	.word	0xea8e0e03
   20350:	f85b4434 	.word	0xf85b4434
   20354:	b2e13023 	.word	0xb2e13023
   20358:	f3c99302 	.word	0xf3c99302
   2035c:	f8584907 	.word	0xf8584907
   20360:	f85b3c10 	.word	0xf85b3c10
   20364:	f85b1021 	.word	0xf85b1021
   20368:	f3c42029 	.word	0xf3c42029
   2036c:	f85b2c07 	.word	0xf85b2c07
   20370:	f85b9027 	.word	0xf85b9027
   20374:	4059702a 	.word	0x4059702a
   20378:	302cf85b 	.word	0x302cf85b
   2037c:	4637ea86 	.word	0x4637ea86
   20380:	6539ea85 	.word	0x6539ea85
   20384:	4532ea85 	.word	0x4532ea85
   20388:	2707f3c6 	.word	0x2707f3c6
   2038c:	9b029303 	.word	0x9b029303
   20390:	4e07f3c5 	.word	0x4e07f3c5
   20394:	7027f85b 	.word	0x7027f85b
   20398:	902ef85b 	.word	0x902ef85b
   2039c:	4c07f3c6 	.word	0x4c07f3c6
   203a0:	ea4fb2c2 	.word	0xea4fb2c2
   203a4:	ea816e15 	.word	0xea816e15
   203a8:	b2e92333 	.word	0xb2e92333
   203ac:	a02cf85b 	.word	0xa02cf85b
   203b0:	6337ea83 	.word	0x6337ea83
   203b4:	2022f85b 	.word	0x2022f85b
   203b8:	e02ef85b 	.word	0xe02ef85b
   203bc:	1021f85b 	.word	0x1021f85b
   203c0:	7c0cf858 	.word	0x7c0cf858
   203c4:	6c16ea4f 	.word	0x6c16ea4f
   203c8:	b2f6407a 	.word	0xb2f6407a
   203cc:	2e3eea82 	.word	0x2e3eea82
   203d0:	2026f85b 	.word	0x2026f85b
   203d4:	6c08f858 	.word	0x6c08f858
   203d8:	4939ea83 	.word	0x4939ea83
   203dc:	40710e23 	.word	0x40710e23
   203e0:	6023f85b 	.word	0x6023f85b
   203e4:	3c04f858 	.word	0x3c04f858
   203e8:	702cf85b 	.word	0x702cf85b
   203ec:	f3c54053 	.word	0xf3c54053
   203f0:	ea832507 	.word	0xea832507
   203f4:	f85b2636 	.word	0xf85b2636
   203f8:	f3c05025 	.word	0xf3c05025
   203fc:	f3c02307 	.word	0xf3c02307
   20400:	ea814007 	.word	0xea814007
   20404:	f85b2137 	.word	0xf85b2137
   20408:	f85b7023 	.word	0xf85b7023
   2040c:	ea863020 	.word	0xea863020
   20410:	ea816635 	.word	0xea816635
   20414:	f3c46737 	.word	0xf3c46737
   20418:	9a034407 	.word	0x9a034407
   2041c:	4133ea86 	.word	0x4133ea86
   20420:	f85b9b01 	.word	0xf85b9b01
   20424:	ea8e4024 	.word	0xea8e4024
   20428:	3b016e32 	.word	0x3b016e32
   2042c:	403aea8e 	.word	0x403aea8e
   20430:	4734ea87 	.word	0x4734ea87
   20434:	0820f108 	.word	0x0820f108
   20438:	f47f9301 	.word	0xf47f9301
   2043c:	46caaf35 	.word	0x46caaf35
   20440:	9a049b06 	.word	0x9a049b06
   20444:	6300f103 	.word	0x6300f103
   20448:	eb023b01 	.word	0xeb023b01
   2044c:	93041343 	.word	0x93041343
   20450:	f38afa5f 	.word	0xf38afa5f
   20454:	5023f85b 	.word	0x5023f85b
   20458:	fa5f9b04 	.word	0xfa5f9b04
   2045c:	681cf881 	.word	0x681cf881
   20460:	f85b0e03 	.word	0xf85b0e03
   20464:	f85b2028 	.word	0xf85b2028
   20468:	f3c18023 	.word	0xf3c18023
   2046c:	f85b2307 	.word	0xf85b2307
   20470:	406c3023 	.word	0x406c3023
   20474:	4507f3c7 	.word	0x4507f3c7
   20478:	5025f85b 	.word	0x5025f85b
   2047c:	2438ea84 	.word	0x2438ea84
   20480:	f887fa5f 	.word	0xf887fa5f
   20484:	6028f85b 	.word	0x6028f85b
   20488:	6433ea84 	.word	0x6433ea84
   2048c:	4535ea84 	.word	0x4535ea84
   20490:	462e9602 	.word	0x462e9602
   20494:	fa5f9c04 	.word	0xfa5f9c04
   20498:	f85bf980 	.word	0xf85bf980
   2049c:	68639029 	.word	0x68639029
   204a0:	f85b0e3c 	.word	0xf85b0e3c
   204a4:	96014024 	.word	0x96014024
   204a8:	0303ea89 	.word	0x0303ea89
   204ac:	ea839e04 	.word	0xea839e04
   204b0:	f3c72434 	.word	0xf3c72434
   204b4:	0e0b2707 	.word	0x0e0b2707
   204b8:	f85b4d6e 	.word	0xf85b4d6e
   204bc:	f89d9027 	.word	0xf89d9027
   204c0:	f85b8004 	.word	0xf85b8004
   204c4:	68f37023 	.word	0x68f37023
   204c8:	0e00f04f 	.word	0x0e00f04f
   204cc:	8008f815 	.word	0x8008f815
   204d0:	69324053 	.word	0x69324053
   204d4:	4107f3c1 	.word	0x4107f3c1
   204d8:	0802ea88 	.word	0x0802ea88
   204dc:	97034642 	.word	0x97034642
   204e0:	7021f85b 	.word	0x7021f85b
   204e4:	611aea4f 	.word	0x611aea4f
   204e8:	1021f85b 	.word	0x1021f85b
   204ec:	e018f8cd 	.word	0xe018f8cd
   204f0:	2331ea83 	.word	0x2331ea83
   204f4:	6939ea83 	.word	0x6939ea83
   204f8:	2307f3ca 	.word	0x2307f3ca
   204fc:	3023f85b 	.word	0x3023f85b
   20500:	9e0268b1 	.word	0x9e0268b1
   20504:	6333ea84 	.word	0x6333ea84
   20508:	4737ea83 	.word	0x4737ea83
   2050c:	0801ea86 	.word	0x0801ea86
   20510:	2307f3c0 	.word	0x2307f3c0
   20514:	f3ca9e03 	.word	0xf3ca9e03
   20518:	f3c04a07 	.word	0xf3c04a07
   2051c:	f85b4007 	.word	0xf85b4007
   20520:	f85b102a 	.word	0xf85b102a
   20524:	f8cd4023 	.word	0xf8cd4023
   20528:	f85be01c 	.word	0xf85be01c
   2052c:	0e383020 	.word	0x0e383020
   20530:	ea885c28 	.word	0xea885c28
   20534:	ea892836 	.word	0xea892836
   20538:	ea884933 	.word	0xea884933
   2053c:	ea886834 	.word	0xea886834
   20540:	f3c94131 	.word	0xf3c94131
   20544:	ea822407 	.word	0xea822407
   20548:	9a016000 	.word	0x9a016000
   2054c:	8004f815 	.word	0x8004f815
   20550:	4307f3c1 	.word	0x4307f3c1
   20554:	6a11ea4f 	.word	0x6a11ea4f
   20558:	f8155cec 	.word	0xf8155cec
   2055c:	f3c2b00a 	.word	0xf3c2b00a
   20560:	9a042a07 	.word	0x9a042a07
   20564:	ea80b2fb 	.word	0xea80b2fb
   20568:	ea802008 	.word	0xea802008
   2056c:	5ceb4004 	.word	0x5ceb4004
   20570:	f8156954 	.word	0xf8156954
   20574:	f3c9a00a 	.word	0xf3c9a00a
   20578:	40634807 	.word	0x40634807
   2057c:	6008f815 	.word	0x6008f815
   20580:	6b0bea83 	.word	0x6b0bea83
   20584:	2b0aea8b 	.word	0x2b0aea8b
   20588:	4b06ea8b 	.word	0x4b06ea8b
   2058c:	260046f4 	.word	0x260046f4
   20590:	f881fa5f 	.word	0xf881fa5f
   20594:	f8156994 	.word	0xf8156994
   20598:	ea4f8008 	.word	0xea4f8008
   2059c:	f8d26319 	.word	0xf8d26319
   205a0:	5ceba01c 	.word	0x5ceba01c
   205a4:	fa5f9a01 	.word	0xfa5f9a01
   205a8:	f815f989 	.word	0xf815f989
   205ac:	ea889009 	.word	0xea889009
   205b0:	ea880804 	.word	0xea880804
   205b4:	0e136803 	.word	0x0e136803
   205b8:	090aea89 	.word	0x090aea89
   205bc:	a003f815 	.word	0xa003f815
   205c0:	4307f3c2 	.word	0x4307f3c2
   205c4:	f3c75cec 	.word	0xf3c75cec
   205c8:	5ceb2307 	.word	0x5ceb2307
   205cc:	2107f3c1 	.word	0x2107f3c1
   205d0:	ea885c69 	.word	0xea885c69
   205d4:	ea882803 	.word	0xea882803
   205d8:	ea894804 	.word	0xea894804
   205dc:	ea4f690a 	.word	0xea4f690a
   205e0:	ea89241b 	.word	0xea89241b
   205e4:	f36b2901 	.word	0xf36b2901
   205e8:	ea4f0c07 	.word	0xea4f0c07
   205ec:	f3682118 	.word	0xf3682118
   205f0:	22000607 	.word	0x22000607
   205f4:	260ff361 	.word	0x260ff361
   205f8:	2c0ff364 	.word	0x2c0ff364
   205fc:	441bea4f 	.word	0x441bea4f
   20600:	4c17f364 	.word	0x4c17f364
   20604:	f3c74634 	.word	0xf3c74634
   20608:	5ded4707 	.word	0x5ded4707
   2060c:	0e07f360 	.word	0x0e07f360
   20610:	4905ea89 	.word	0x4905ea89
   20614:	2319ea4f 	.word	0x2319ea4f
   20618:	f3690a05 	.word	0xf3690a05
   2061c:	ea4f0207 	.word	0xea4f0207
   20620:	f3634118 	.word	0xf3634118
   20624:	f365220f 	.word	0xf365220f
   20628:	0c052e0f 	.word	0x0c052e0f
   2062c:	4417f361 	.word	0x4417f361
   20630:	4e17f365 	.word	0x4e17f365
   20634:	46110e00 	.word	0x46110e00
   20638:	6e1ff360 	.word	0x6e1ff360
   2063c:	ea4f4620 	.word	0xea4f4620
   20640:	ea4f4319 	.word	0xea4f4319
   20644:	f3636818 	.word	0xf3636818
   20648:	9b054117 	.word	0x9b054117
   2064c:	601ff368 	.word	0x601ff368
   20650:	20006098 	.word	0x20006098
   20654:	6b1bea4f 	.word	0x6b1bea4f
   20658:	6919ea4f 	.word	0x6919ea4f
   2065c:	6c1ff36b 	.word	0x6c1ff36b
   20660:	611ff369 	.word	0x611ff369
   20664:	e000f8c3 	.word	0xe000f8c3
   20668:	c004f8c3 	.word	0xc004f8c3
   2066c:	b00960d9 	.word	0xb00960d9
   20670:	8ff0e8bd 	.word	0x8ff0e8bd
   20674:	00027454 	.word	0x00027454
   20678:	00027554 	.word	0x00027554

0002067c <symbol_0005bab>:
   2067c:	4614b410 	.word	0x4614b410
   20680:	461a2901 	.word	0x461a2901
   20684:	d0034621 	.word	0xd0034621
   20688:	4b04f85d 	.word	0x4b04f85d
   2068c:	bde6f7ff 	.word	0xbde6f7ff
   20690:	4b04f85d 	.word	0x4b04f85d
   20694:	bbcaf7ff 	.word	0xbbcaf7ff

00020698 <ok_rsp_parser>:
   20698:	47702000 	.word	0x47702000

0002069c <pdn_state_get_parser>:
   2069c:	b5702200 	.word	0xb5702200
   206a0:	b084780b 	.word	0xb084780b
   206a4:	e9cd460e 	.word	0xe9cd460e
   206a8:	e9cd2200 	.word	0xe9cd2200
   206ac:	b3232202 	.word	0xb3232202
   206b0:	2b20460c 	.word	0x2b20460c
   206b4:	d01b460d 	.word	0xd01b460d
   206b8:	3201700b 	.word	0x3201700b
   206bc:	3f01f814 	.word	0x3f01f814
   206c0:	460d18b1 	.word	0x460d18b1
   206c4:	d1f42b00 	.word	0xd1f42b00
   206c8:	4b0d2200 	.word	0x4b0d2200
   206cc:	f853702a 	.word	0xf853702a
   206d0:	4a0c3020 	.word	0x4a0c3020
   206d4:	2110681b 	.word	0x2110681b
   206d8:	f7f14668 	.word	0xf7f14668
   206dc:	4669f867 	.word	0x4669f867
   206e0:	f0044630 	.word	0xf0044630
   206e4:	3000f8fe 	.word	0x3000f8fe
   206e8:	2001bf18 	.word	0x2001bf18
   206ec:	bd70b004 	.word	0xbd70b004
   206f0:	3f01f814 	.word	0x3f01f814
   206f4:	d1dc2b00 	.word	0xd1dc2b00
   206f8:	460de7e6 	.word	0x460de7e6
   206fc:	bf00e7e4 	.word	0xbf00e7e4
   20700:	20021aec 	.word	0x20021aec
   20704:	000279f8 	.word	0x000279f8

00020708 <pdn_id_get_parser>:
   20708:	780bb570 	.word	0x780bb570
   2070c:	b3134606 	.word	0xb3134606
   20710:	24004608 	.word	0x24004608
   20714:	2b20460a 	.word	0x2b20460a
   20718:	d0174615 	.word	0xd0174615
   2071c:	34017013 	.word	0x34017013
   20720:	3f01f810 	.word	0x3f01f810
   20724:	4615190a 	.word	0x4615190a
   20728:	d1f42b00 	.word	0xd1f42b00
   2072c:	46082300 	.word	0x46082300
   20730:	213a702b 	.word	0x213a702b
   20734:	f905f004 	.word	0xf905f004
   20738:	3001b130 	.word	0x3001b130
   2073c:	ffbff003 	.word	0xffbff003
   20740:	f8534b06 	.word	0xf8534b06
   20744:	60583026 	.word	0x60583026
   20748:	bd702000 	.word	0xbd702000
   2074c:	3f01f810 	.word	0x3f01f810
   20750:	d1e02b00 	.word	0xd1e02b00
   20754:	460de7ea 	.word	0x460de7ea
   20758:	bf00e7e8 	.word	0xbf00e7e8
   2075c:	20021aec 	.word	0x20021aec

00020760 <context_create_parser>:
   20760:	780bb570 	.word	0x780bb570
   20764:	b3134606 	.word	0xb3134606
   20768:	24004608 	.word	0x24004608
   2076c:	2b20460a 	.word	0x2b20460a
   20770:	d0174615 	.word	0xd0174615
   20774:	34017013 	.word	0x34017013
   20778:	3f01f810 	.word	0x3f01f810
   2077c:	4615190a 	.word	0x4615190a
   20780:	d1f42b00 	.word	0xd1f42b00
   20784:	46082300 	.word	0x46082300
   20788:	213a702b 	.word	0x213a702b
   2078c:	f8d9f004 	.word	0xf8d9f004
   20790:	4b08b130 	.word	0x4b08b130
   20794:	f8533001 	.word	0xf8533001
   20798:	f0034026 	.word	0xf0034026
   2079c:	6020ff90 	.word	0x6020ff90
   207a0:	bd702000 	.word	0xbd702000
   207a4:	3f01f810 	.word	0x3f01f810
   207a8:	d1e02b00 	.word	0xd1e02b00
   207ac:	460de7ea 	.word	0x460de7ea
   207b0:	bf00e7e8 	.word	0xbf00e7e8
   207b4:	20021aec 	.word	0x20021aec

000207b8 <pdn_interface_init>:
   207b8:	33fff04f 	.word	0x33fff04f
   207bc:	4c09b510 	.word	0x4c09b510
   207c0:	21002228 	.word	0x21002228
   207c4:	60234808 	.word	0x60234808
   207c8:	f937f004 	.word	0xf937f004
   207cc:	2201f240 	.word	0x2201f240
   207d0:	20662100 	.word	0x20662100
   207d4:	f8cef7f3 	.word	0xf8cef7f3
   207d8:	60202800 	.word	0x60202800
   207dc:	2003bfb4 	.word	0x2003bfb4
   207e0:	bd102000 	.word	0xbd102000
   207e4:	200219e8 	.word	0x200219e8
   207e8:	20021aec 	.word	0x20021aec

000207ec <pdn_interface_open>:
   207ec:	43f0e92d 	.word	0x43f0e92d
   207f0:	b0832866 	.word	0xb0832866
   207f4:	80bcf040 	.word	0x80bcf040
   207f8:	7f00f5b1 	.word	0x7f00f5b1
   207fc:	80aaf040 	.word	0x80aaf040
   20800:	2302f240 	.word	0x2302f240
   20804:	f040429a 	.word	0xf040429a
   20808:	4c6280a5 	.word	0x4c6280a5
   2080c:	b34d6825 	.word	0xb34d6825
   20810:	2b006863 	.word	0x2b006863
   20814:	8098f000 	.word	0x8098f000
   20818:	2b0068a3 	.word	0x2b0068a3
   2081c:	8096f000 	.word	0x8096f000
   20820:	2b0068e3 	.word	0x2b0068e3
   20824:	8094f000 	.word	0x8094f000
   20828:	2b006923 	.word	0x2b006923
   2082c:	8098f000 	.word	0x8098f000
   20830:	2b006963 	.word	0x2b006963
   20834:	8098f000 	.word	0x8098f000
   20838:	2b0069a3 	.word	0x2b0069a3
   2083c:	8096f000 	.word	0x8096f000
   20840:	2b0069e3 	.word	0x2b0069e3
   20844:	808ef000 	.word	0x808ef000
   20848:	b1536a23 	.word	0xb1536a23
   2084c:	25096a63 	.word	0x25096a63
   20850:	200cb143 	.word	0x200cb143
   20854:	fd04f7f1 	.word	0xfd04f7f1
   20858:	30fff04f 	.word	0x30fff04f
   2085c:	e8bdb003 	.word	0xe8bdb003
   20860:	250883f0 	.word	0x250883f0
   20864:	f7fe2074 	.word	0xf7fe2074
   20868:	f844ff3f 	.word	0xf844ff3f
   2086c:	28000025 	.word	0x28000025
   20870:	2274d0ef 	.word	0x2274d0ef
   20874:	f0042100 	.word	0xf0042100
   20878:	2101f8e0 	.word	0x2101f8e0
   2087c:	f04f2003 	.word	0xf04f2003
   20880:	f85437ff 	.word	0xf85437ff
   20884:	4a443025 	.word	0x4a443025
   20888:	f8546099 	.word	0xf8546099
   2088c:	f44f3025 	.word	0xf44f3025
   20890:	67187180 	.word	0x67187180
   20894:	4841605f 	.word	0x4841605f
   20898:	810cf8df 	.word	0x810cf8df
   2089c:	ff86f7f0 	.word	0xff86f7f0
   208a0:	f8d8483e 	.word	0xf8d8483e
   208a4:	26009000 	.word	0x26009000
   208a8:	f866f004 	.word	0xf866f004
   208ac:	46024633 	.word	0x46024633
   208b0:	4648493a 	.word	0x4648493a
   208b4:	96009601 	.word	0x96009601
   208b8:	f806f7f3 	.word	0xf806f7f3
   208bc:	48374681 	.word	0x48374681
   208c0:	f85af004 	.word	0xf85af004
   208c4:	d1594548 	.word	0xd1594548
   208c8:	e9cd4633 	.word	0xe9cd4633
   208cc:	f44f6600 	.word	0xf44f6600
   208d0:	49327280 	.word	0x49327280
   208d4:	0000f8d8 	.word	0x0000f8d8
   208d8:	f8def7f3 	.word	0xf8def7f3
   208dc:	48304606 	.word	0x48304606
   208e0:	f84af004 	.word	0xf84af004
   208e4:	db154286 	.word	0xdb154286
   208e8:	492c4602 	.word	0x492c4602
   208ec:	f004482c 	.word	0xf004482c
   208f0:	b978f858 	.word	0xb978f858
   208f4:	46284929 	.word	0x46284929
   208f8:	ff32f7ff 	.word	0xff32f7ff
   208fc:	2202b9b0 	.word	0x2202b9b0
   20900:	3025f854 	.word	0x3025f854
   20904:	40f1f045 	.word	0x40f1f045
   20908:	10d0f440 	.word	0x10d0f440
   2090c:	b003609a 	.word	0xb003609a
   20910:	83f0e8bd 	.word	0x83f0e8bd
   20914:	f0044823 	.word	0xf0044823
   20918:	4920f82f 	.word	0x4920f82f
   2091c:	48214602 	.word	0x48214602
   20920:	f83ff004 	.word	0xf83ff004
   20924:	2008b960 	.word	0x2008b960
   20928:	fc9af7f1 	.word	0xfc9af7f1
   2092c:	0025f854 	.word	0x0025f854
   20930:	fef8f7fe 	.word	0xfef8f7fe
   20934:	f04f2300 	.word	0xf04f2300
   20938:	f84430ff 	.word	0xf84430ff
   2093c:	e78d3025 	.word	0xe78d3025
   20940:	f7f12005 	.word	0xf7f12005
   20944:	e7f1fc8d 	.word	0xe7f1fc8d
   20948:	e78b2501 	.word	0xe78b2501
   2094c:	e7892502 	.word	0xe7892502
   20950:	e7872503 	.word	0xe7872503
   20954:	f7f12016 	.word	0xf7f12016
   20958:	f04ffc83 	.word	0xf04ffc83
   2095c:	e77d30ff 	.word	0xe77d30ff
   20960:	e77f2504 	.word	0xe77f2504
   20964:	e77d2507 	.word	0xe77d2507
   20968:	e77b2505 	.word	0xe77b2505
   2096c:	e7792506 	.word	0xe7792506
   20970:	f7f1202f 	.word	0xf7f1202f
   20974:	f04ffc75 	.word	0xf04ffc75
   20978:	e76f30ff 	.word	0xe76f30ff
   2097c:	f7f12005 	.word	0xf7f12005
   20980:	f854fc6f 	.word	0xf854fc6f
   20984:	f7fe0025 	.word	0xf7fe0025
   20988:	f844fecd 	.word	0xf844fecd
   2098c:	46386025 	.word	0x46386025
   20990:	bf00e764 	.word	0xbf00e764
   20994:	20021aec 	.word	0x20021aec
   20998:	000279d4 	.word	0x000279d4
   2099c:	200219ec 	.word	0x200219ec
   209a0:	000279e4 	.word	0x000279e4
   209a4:	000279f0 	.word	0x000279f0
   209a8:	200219e8 	.word	0x200219e8

000209ac <pdn_interface_connect>:
   209ac:	4ff0e92d 	.word	0x4ff0e92d
   209b0:	2900b083 	.word	0x2900b083
   209b4:	813ef000 	.word	0x813ef000
   209b8:	46912a64 	.word	0x46912a64
   209bc:	813af200 	.word	0x813af200
   209c0:	46084605 	.word	0x46084605
   209c4:	f0034688 	.word	0xf0034688
   209c8:	2864ffd7 	.word	0x2864ffd7
   209cc:	8132f200 	.word	0x8132f200
   209d0:	43ab4ba5 	.word	0x43ab4ba5
   209d4:	8125f040 	.word	0x8125f040
   209d8:	45f1f025 	.word	0x45f1f025
   209dc:	15d0f425 	.word	0x15d0f425
   209e0:	f3002d09 	.word	0xf3002d09
   209e4:	4fa1811e 	.word	0x4fa1811e
   209e8:	3025f857 	.word	0x3025f857
   209ec:	f0002b00 	.word	0xf0002b00
   209f0:	689a8118 	.word	0x689a8118
   209f4:	f0002a00 	.word	0xf0002a00
   209f8:	2d008114 	.word	0x2d008114
   209fc:	8111f2c0 	.word	0x8111f2c0
   20a00:	2b02689b 	.word	0x2b02689b
   20a04:	810df040 	.word	0x810df040
   20a08:	4a9a4e99 	.word	0x4a9a4e99
   20a0c:	7180f44f 	.word	0x7180f44f
   20a10:	f7f04630 	.word	0xf7f04630
   20a14:	f857fecb 	.word	0xf857fecb
   20a18:	46043025 	.word	0x46043025
   20a1c:	7180f5c0 	.word	0x7180f5c0
   20a20:	4a95681b 	.word	0x4a95681b
   20a24:	f7f01830 	.word	0xf7f01830
   20a28:	f857fec1 	.word	0xf857fec1
   20a2c:	44043025 	.word	0x44043025
   20a30:	f0036f1b 	.word	0xf0036f1b
   20a34:	2a030203 	.word	0x2a030203
   20a38:	80eaf000 	.word	0x80eaf000
   20a3c:	eb06079b 	.word	0xeb06079b
   20a40:	f5c40004 	.word	0xf5c40004
   20a44:	bf4c7180 	.word	0xbf4c7180
   20a48:	4b8d4b8c 	.word	0x4b8d4b8c
   20a4c:	f7f04a8d 	.word	0xf7f04a8d
   20a50:	4404fead 	.word	0x4404fead
   20a54:	4a8c4643 	.word	0x4a8c4643
   20a58:	7180f5c4 	.word	0x7180f5c4
   20a5c:	f7f01930 	.word	0xf7f01930
   20a60:	4420fea5 	.word	0x4420fea5
   20a64:	7f80f5b0 	.word	0x7f80f5b0
   20a68:	80f7f300 	.word	0x80f7f300
   20a6c:	a238f8df 	.word	0xa238f8df
   20a70:	f8da487f 	.word	0xf8da487f
   20a74:	2400b000 	.word	0x2400b000
   20a78:	ff7ef003 	.word	0xff7ef003
   20a7c:	46024623 	.word	0x46024623
   20a80:	4658497b 	.word	0x4658497b
   20a84:	94009401 	.word	0x94009401
   20a88:	ff1ef7f2 	.word	0xff1ef7f2
   20a8c:	48784683 	.word	0x48784683
   20a90:	ff72f003 	.word	0xff72f003
   20a94:	d0084558 	.word	0xd0084558
   20a98:	f7f12005 	.word	0xf7f12005
   20a9c:	f04ffbe1 	.word	0xf04ffbe1
   20aa0:	462034ff 	.word	0x462034ff
   20aa4:	e8bdb003 	.word	0xe8bdb003
   20aa8:	46238ff0 	.word	0x46238ff0
   20aac:	4400e9cd 	.word	0x4400e9cd
   20ab0:	7280f44f 	.word	0x7280f44f
   20ab4:	f8da496e 	.word	0xf8da496e
   20ab8:	f7f20000 	.word	0xf7f20000
   20abc:	4604ffed 	.word	0x4604ffed
   20ac0:	f0034872 	.word	0xf0034872
   20ac4:	4284ff59 	.word	0x4284ff59
   20ac8:	8091f2c0 	.word	0x8091f2c0
   20acc:	49684602 	.word	0x49684602
   20ad0:	f003486e 	.word	0xf003486e
   20ad4:	2800ff66 	.word	0x2800ff66
   20ad8:	8089f040 	.word	0x8089f040
   20adc:	46284964 	.word	0x46284964
   20ae0:	fddaf7ff 	.word	0xfddaf7ff
   20ae4:	28004604 	.word	0x28004604
   20ae8:	4a69d1db 	.word	0x4a69d1db
   20aec:	7180f44f 	.word	0x7180f44f
   20af0:	f7f0485f 	.word	0xf7f0485f
   20af4:	f857fe5b 	.word	0xf857fe5b
   20af8:	f5c03025 	.word	0xf5c03025
   20afc:	681b7180 	.word	0x681b7180
   20b00:	44304a64 	.word	0x44304a64
   20b04:	fe52f7f0 	.word	0xfe52f7f0
   20b08:	f8da4859 	.word	0xf8da4859
   20b0c:	f003b000 	.word	0xf003b000
   20b10:	4623ff33 	.word	0x4623ff33
   20b14:	49564602 	.word	0x49564602
   20b18:	94014658 	.word	0x94014658
   20b1c:	f7f29400 	.word	0xf7f29400
   20b20:	4683fed3 	.word	0x4683fed3
   20b24:	f0034852 	.word	0xf0034852
   20b28:	4558ff27 	.word	0x4558ff27
   20b2c:	4623d1b4 	.word	0x4623d1b4
   20b30:	7280f44f 	.word	0x7280f44f
   20b34:	f8da494e 	.word	0xf8da494e
   20b38:	e9cd0000 	.word	0xe9cd0000
   20b3c:	f7f24400 	.word	0xf7f24400
   20b40:	4683ffab 	.word	0x4683ffab
   20b44:	f0034851 	.word	0xf0034851
   20b48:	4583ff17 	.word	0x4583ff17
   20b4c:	4602db4f 	.word	0x4602db4f
   20b50:	484e4947 	.word	0x484e4947
   20b54:	ff25f003 	.word	0xff25f003
   20b58:	d1482800 	.word	0xd1482800
   20b5c:	f8572103 	.word	0xf8572103
   20b60:	464a3025 	.word	0x464a3025
   20b64:	f8576099 	.word	0xf8576099
   20b68:	46410025 	.word	0x46410025
   20b6c:	f003300c 	.word	0xf003300c
   20b70:	4a49ff37 	.word	0x4a49ff37
   20b74:	7180f44f 	.word	0x7180f44f
   20b78:	f7f0483d 	.word	0xf7f0483d
   20b7c:	4601fe17 	.word	0x4601fe17
   20b80:	3025f857 	.word	0x3025f857
   20b84:	7180f5c1 	.word	0x7180f5c1
   20b88:	4a42681b 	.word	0x4a42681b
   20b8c:	f7f01830 	.word	0xf7f01830
   20b90:	4837fe0d 	.word	0x4837fe0d
   20b94:	6000f8da 	.word	0x6000f8da
   20b98:	feeef003 	.word	0xfeeef003
   20b9c:	46024623 	.word	0x46024623
   20ba0:	46304933 	.word	0x46304933
   20ba4:	94009401 	.word	0x94009401
   20ba8:	fe8ef7f2 	.word	0xfe8ef7f2
   20bac:	48304606 	.word	0x48304606
   20bb0:	fee2f003 	.word	0xfee2f003
   20bb4:	d15342b0 	.word	0xd15342b0
   20bb8:	f44f4623 	.word	0xf44f4623
   20bbc:	492c7280 	.word	0x492c7280
   20bc0:	0000f8da 	.word	0x0000f8da
   20bc4:	4400e9cd 	.word	0x4400e9cd
   20bc8:	ff66f7f2 	.word	0xff66f7f2
   20bcc:	48334606 	.word	0x48334606
   20bd0:	fed2f003 	.word	0xfed2f003
   20bd4:	db334286 	.word	0xdb334286
   20bd8:	49254602 	.word	0x49254602
   20bdc:	f003482f 	.word	0xf003482f
   20be0:	bb68fee0 	.word	0xbb68fee0
   20be4:	49224628 	.word	0x49224628
   20be8:	fd8ef7ff 	.word	0xfd8ef7ff
   20bec:	482ce759 	.word	0x482ce759
   20bf0:	fec2f003 	.word	0xfec2f003
   20bf4:	4602491e 	.word	0x4602491e
   20bf8:	f0034829 	.word	0xf0034829
   20bfc:	2800fed2 	.word	0x2800fed2
   20c00:	af4af47f 	.word	0xaf4af47f
   20c04:	f7f12008 	.word	0xf7f12008
   20c08:	f04ffb2b 	.word	0xf04ffb2b
   20c0c:	e74834ff 	.word	0xe74834ff
   20c10:	7180f5c4 	.word	0x7180f5c4
   20c14:	4b231930 	.word	0x4b231930
   20c18:	f7f04a1a 	.word	0xf7f04a1a
   20c1c:	4404fdc7 	.word	0x4404fdc7
   20c20:	f04fe718 	.word	0xf04fe718
   20c24:	200934ff 	.word	0x200934ff
   20c28:	fb1af7f1 	.word	0xfb1af7f1
   20c2c:	b0034620 	.word	0xb0034620
   20c30:	8ff0e8bd 	.word	0x8ff0e8bd
   20c34:	f7f12016 	.word	0xf7f12016
   20c38:	f04ffb13 	.word	0xf04ffb13
   20c3c:	e73034ff 	.word	0xe73034ff
   20c40:	f0034817 	.word	0xf0034817
   20c44:	490afe99 	.word	0x490afe99
   20c48:	48154602 	.word	0x48154602
   20c4c:	fea9f003 	.word	0xfea9f003
   20c50:	2008b930 	.word	0x2008b930
   20c54:	fb04f7f1 	.word	0xfb04f7f1
   20c58:	f04fe723 	.word	0xf04fe723
   20c5c:	e72034ff 	.word	0xe72034ff
   20c60:	f7f12005 	.word	0xf7f12005
   20c64:	e71cfafd 	.word	0xe71cfafd
   20c68:	789a0000 	.word	0x789a0000
   20c6c:	20021aec 	.word	0x20021aec
   20c70:	200219ec 	.word	0x200219ec
   20c74:	00027960 	.word	0x00027960
   20c78:	0002796c 	.word	0x0002796c
   20c7c:	00027980 	.word	0x00027980
   20c80:	00027988 	.word	0x00027988
   20c84:	00027978 	.word	0x00027978
   20c88:	000279b8 	.word	0x000279b8
   20c8c:	00026980 	.word	0x00026980
   20c90:	0002798c 	.word	0x0002798c
   20c94:	00027998 	.word	0x00027998
   20c98:	0002799c 	.word	0x0002799c
   20c9c:	000279ac 	.word	0x000279ac
   20ca0:	000279f0 	.word	0x000279f0
   20ca4:	00027970 	.word	0x00027970
   20ca8:	200219e8 	.word	0x200219e8

00020cac <pdn_interface_close>:
   20cac:	43f0e92d 	.word	0x43f0e92d
   20cb0:	b0834b63 	.word	0xb0834b63
   20cb4:	f0404383 	.word	0xf0404383
   20cb8:	f020809d 	.word	0xf020809d
   20cbc:	f42444f1 	.word	0xf42444f1
   20cc0:	2c0914d0 	.word	0x2c0914d0
   20cc4:	8096f300 	.word	0x8096f300
   20cc8:	f8554d5e 	.word	0xf8554d5e
   20ccc:	28000024 	.word	0x28000024
   20cd0:	8090f000 	.word	0x8090f000
   20cd4:	2b006883 	.word	0x2b006883
   20cd8:	808cf000 	.word	0x808cf000
   20cdc:	2b036883 	.word	0x2b036883
   20ce0:	f7fed008 	.word	0xf7fed008
   20ce4:	2300fd1f 	.word	0x2300fd1f
   20ce8:	f8454618 	.word	0xf8454618
   20cec:	b0033024 	.word	0xb0033024
   20cf0:	83f0e8bd 	.word	0x83f0e8bd
   20cf4:	4a554e54 	.word	0x4a554e54
   20cf8:	7180f44f 	.word	0x7180f44f
   20cfc:	f7f04630 	.word	0xf7f04630
   20d00:	f855fd55 	.word	0xf855fd55
   20d04:	f5c03024 	.word	0xf5c03024
   20d08:	681b7180 	.word	0x681b7180
   20d0c:	44304a50 	.word	0x44304a50
   20d10:	814cf8df 	.word	0x814cf8df
   20d14:	fd4af7f0 	.word	0xfd4af7f0
   20d18:	f8d84630 	.word	0xf8d84630
   20d1c:	27009000 	.word	0x27009000
   20d20:	fe2af003 	.word	0xfe2af003
   20d24:	46024631 	.word	0x46024631
   20d28:	4648463b 	.word	0x4648463b
   20d2c:	97009701 	.word	0x97009701
   20d30:	fdcaf7f2 	.word	0xfdcaf7f2
   20d34:	46304681 	.word	0x46304681
   20d38:	fe1ef003 	.word	0xfe1ef003
   20d3c:	d1764548 	.word	0xd1764548
   20d40:	e9cd463b 	.word	0xe9cd463b
   20d44:	f44f7700 	.word	0xf44f7700
   20d48:	46317280 	.word	0x46317280
   20d4c:	0000f8d8 	.word	0x0000f8d8
   20d50:	fea2f7f2 	.word	0xfea2f7f2
   20d54:	483f4607 	.word	0x483f4607
   20d58:	fe0ef003 	.word	0xfe0ef003
   20d5c:	da4f4287 	.word	0xda4f4287
   20d60:	f003483d 	.word	0xf003483d
   20d64:	4938fe09 	.word	0x4938fe09
   20d68:	483b4602 	.word	0x483b4602
   20d6c:	fe19f003 	.word	0xfe19f003
   20d70:	d15c2800 	.word	0xd15c2800
   20d74:	f7f12008 	.word	0xf7f12008
   20d78:	4a38fa73 	.word	0x4a38fa73
   20d7c:	7180f44f 	.word	0x7180f44f
   20d80:	f7f04831 	.word	0xf7f04831
   20d84:	4601fd13 	.word	0x4601fd13
   20d88:	3024f855 	.word	0x3024f855
   20d8c:	7180f5c1 	.word	0x7180f5c1
   20d90:	4a2f681b 	.word	0x4a2f681b
   20d94:	f7f01830 	.word	0xf7f01830
   20d98:	482bfd09 	.word	0x482bfd09
   20d9c:	7000f8d8 	.word	0x7000f8d8
   20da0:	f0032600 	.word	0xf0032600
   20da4:	4633fde9 	.word	0x4633fde9
   20da8:	49274602 	.word	0x49274602
   20dac:	96014638 	.word	0x96014638
   20db0:	f7f29600 	.word	0xf7f29600
   20db4:	4607fd89 	.word	0x4607fd89
   20db8:	f0034823 	.word	0xf0034823
   20dbc:	42b8fddd 	.word	0x42b8fddd
   20dc0:	4633d139 	.word	0x4633d139
   20dc4:	6600e9cd 	.word	0x6600e9cd
   20dc8:	7280f44f 	.word	0x7280f44f
   20dcc:	f8d8491e 	.word	0xf8d8491e
   20dd0:	f7f20000 	.word	0xf7f20000
   20dd4:	4606fe61 	.word	0x4606fe61
   20dd8:	f003481e 	.word	0xf003481e
   20ddc:	4286fdcd 	.word	0x4286fdcd
   20de0:	4602db16 	.word	0x4602db16
   20de4:	481b4918 	.word	0x481b4918
   20de8:	fddbf003 	.word	0xfddbf003
   20dec:	f855b980 	.word	0xf855b980
   20df0:	e7760024 	.word	0xe7760024
   20df4:	f7f12009 	.word	0xf7f12009
   20df8:	f04ffa33 	.word	0xf04ffa33
   20dfc:	e77630ff 	.word	0xe77630ff
   20e00:	46314602 	.word	0x46314602
   20e04:	f0034813 	.word	0xf0034813
   20e08:	2800fdcc 	.word	0x2800fdcc
   20e0c:	e7a7d0b5 	.word	0xe7a7d0b5
   20e10:	f0034811 	.word	0xf0034811
   20e14:	490cfdb1 	.word	0x490cfdb1
   20e18:	480f4602 	.word	0x480f4602
   20e1c:	fdc1f003 	.word	0xfdc1f003
   20e20:	2008b948 	.word	0x2008b948
   20e24:	fa1cf7f1 	.word	0xfa1cf7f1
   20e28:	0024f855 	.word	0x0024f855
   20e2c:	2005e759 	.word	0x2005e759
   20e30:	fa16f7f1 	.word	0xfa16f7f1
   20e34:	2005e7a1 	.word	0x2005e7a1
   20e38:	fa12f7f1 	.word	0xfa12f7f1
   20e3c:	bf00e7d7 	.word	0xbf00e7d7
   20e40:	789a0000 	.word	0x789a0000
   20e44:	20021aec 	.word	0x20021aec
   20e48:	200219ec 	.word	0x200219ec
   20e4c:	00027954 	.word	0x00027954
   20e50:	00027998 	.word	0x00027998
   20e54:	00026980 	.word	0x00026980
   20e58:	000279f0 	.word	0x000279f0
   20e5c:	00027960 	.word	0x00027960
   20e60:	200219e8 	.word	0x200219e8

00020e64 <pdn_interface_setopt>:
   20e64:	f240b510 	.word	0xf240b510
   20e68:	42a12402 	.word	0x42a12402
   20e6c:	b153d10b 	.word	0xb153d10b
   20e70:	b1419902 	.word	0xb1419902
   20e74:	43814925 	.word	0x43814925
   20e78:	2009d00b 	.word	0x2009d00b
   20e7c:	f9f0f7f1 	.word	0xf9f0f7f1
   20e80:	30fff04f 	.word	0x30fff04f
   20e84:	2016bd10 	.word	0x2016bd10
   20e88:	f9eaf7f1 	.word	0xf9eaf7f1
   20e8c:	30fff04f 	.word	0x30fff04f
   20e90:	f020bd10 	.word	0xf020bd10
   20e94:	f42040f1 	.word	0xf42040f1
   20e98:	280910d0 	.word	0x280910d0
   20e9c:	491cdced 	.word	0x491cdced
   20ea0:	1020f851 	.word	0x1020f851
   20ea4:	d0e82900 	.word	0xd0e82900
   20ea8:	2c00688c 	.word	0x2c00688c
   20eac:	2800d0e5 	.word	0x2800d0e5
   20eb0:	2a01dbe3 	.word	0x2a01dbe3
   20eb4:	202dd001 	.word	0x202dd001
   20eb8:	688ae7e6 	.word	0x688ae7e6
   20ebc:	688ab1fa 	.word	0x688ab1fa
   20ec0:	d01c2a03 	.word	0xd01c2a03
   20ec4:	2a04688a 	.word	0x2a04688a
   20ec8:	9a02d019 	.word	0x9a02d019
   20ecc:	1e420890 	.word	0x1e420890
   20ed0:	d8d82a01 	.word	0xd8d82a01
   20ed4:	07929a02 	.word	0x07929a02
   20ed8:	681ad1d5 	.word	0x681ad1d5
   20edc:	d0102a02 	.word	0xd0102a02
   20ee0:	d1d02a0a 	.word	0xd1d02a0a
   20ee4:	28022202 	.word	0x28022202
   20ee8:	685bd106 	.word	0x685bd106
   20eec:	d00a2b02 	.word	0xd00a2b02
   20ef0:	d1c82b0a 	.word	0xd1c82b0a
   20ef4:	0202f042 	.word	0x0202f042
   20ef8:	2000670a 	.word	0x2000670a
   20efc:	200ee7c4 	.word	0x200ee7c4
   20f00:	2201e7c2 	.word	0x2201e7c2
   20f04:	f042e7ef 	.word	0xf042e7ef
   20f08:	e7f50201 	.word	0xe7f50201
   20f0c:	789a0000 	.word	0x789a0000
   20f10:	20021aec 	.word	0x20021aec

00020f14 <pdn_interface_getopt>:
   20f14:	43f0e92d 	.word	0x43f0e92d
   20f18:	2402f240 	.word	0x2402f240
   20f1c:	42a1b083 	.word	0x42a1b083
   20f20:	f0409d0a 	.word	0xf0409d0a
   20f24:	461e80a9 	.word	0x461e80a9
   20f28:	f0002b00 	.word	0xf0002b00
   20f2c:	2d0080a5 	.word	0x2d0080a5
   20f30:	80a2f000 	.word	0x80a2f000
   20f34:	43834b56 	.word	0x43834b56
   20f38:	8084f040 	.word	0x8084f040
   20f3c:	44f1f020 	.word	0x44f1f020
   20f40:	14d0f424 	.word	0x14d0f424
   20f44:	dc7d2c09 	.word	0xdc7d2c09
   20f48:	f8534b52 	.word	0xf8534b52
   20f4c:	2b003024 	.word	0x2b003024
   20f50:	6899d078 	.word	0x6899d078
   20f54:	d0752900 	.word	0xd0752900
   20f58:	db732c00 	.word	0xdb732c00
   20f5c:	d00e2a02 	.word	0xd00e2a02
   20f60:	d0082a03 	.word	0xd0082a03
   20f64:	d0152a01 	.word	0xd0152a01
   20f68:	f7f1202d 	.word	0xf7f1202d
   20f6c:	2000f979 	.word	0x2000f979
   20f70:	e8bdb003 	.word	0xe8bdb003
   20f74:	682b83f0 	.word	0x682b83f0
   20f78:	2016bb23 	.word	0x2016bb23
   20f7c:	682ae7f5 	.word	0x682ae7f5
   20f80:	d0fa2a00 	.word	0xd0fa2a00
   20f84:	20002201 	.word	0x20002201
   20f88:	7033681b 	.word	0x7033681b
   20f8c:	b003602a 	.word	0xb003602a
   20f90:	83f0e8bd 	.word	0x83f0e8bd
   20f94:	2a00689a 	.word	0x2a00689a
   20f98:	689ad052 	.word	0x689ad052
   20f9c:	d04f2a04 	.word	0xd04f2a04
   20fa0:	2a07682a 	.word	0x2a07682a
   20fa4:	f012d9e9 	.word	0xf012d9e9
   20fa8:	d1e60203 	.word	0xd1e60203
   20fac:	07996f1b 	.word	0x07996f1b
   20fb0:	2104d45d 	.word	0x2104d45d
   20fb4:	d50207db 	.word	0xd50207db
   20fb8:	50b32302 	.word	0x50b32302
   20fbc:	602a460a 	.word	0x602a460a
   20fc0:	e7d52000 	.word	0xe7d52000
   20fc4:	f44f4a34 	.word	0xf44f4a34
   20fc8:	48347180 	.word	0x48347180
   20fcc:	80d8f8df 	.word	0x80d8f8df
   20fd0:	fbecf7f0 	.word	0xfbecf7f0
   20fd4:	f8d84831 	.word	0xf8d84831
   20fd8:	27009000 	.word	0x27009000
   20fdc:	fcccf003 	.word	0xfcccf003
   20fe0:	4602463b 	.word	0x4602463b
   20fe4:	4648492d 	.word	0x4648492d
   20fe8:	97009701 	.word	0x97009701
   20fec:	fc6cf7f2 	.word	0xfc6cf7f2
   20ff0:	482a4681 	.word	0x482a4681
   20ff4:	fcc0f003 	.word	0xfcc0f003
   20ff8:	d1434548 	.word	0xd1434548
   20ffc:	e9cd463b 	.word	0xe9cd463b
   21000:	f44f7700 	.word	0xf44f7700
   21004:	49257280 	.word	0x49257280
   21008:	0000f8d8 	.word	0x0000f8d8
   2100c:	fd44f7f2 	.word	0xfd44f7f2
   21010:	48234607 	.word	0x48234607
   21014:	fcb0f003 	.word	0xfcb0f003
   21018:	db194287 	.word	0xdb194287
   2101c:	491f4602 	.word	0x491f4602
   21020:	f003481f 	.word	0xf003481f
   21024:	4607fcbe 	.word	0x4607fcbe
   21028:	4620b990 	.word	0x4620b990
   2102c:	f7ff491b 	.word	0xf7ff491b
   21030:	2800fb35 	.word	0x2800fb35
   21034:	2301db99 	.word	0x2301db99
   21038:	46387030 	.word	0x46387030
   2103c:	e797602b 	.word	0xe797602b
   21040:	e792200e 	.word	0xe792200e
   21044:	f7f12009 	.word	0xf7f12009
   21048:	f04ff90b 	.word	0xf04ff90b
   2104c:	e78f30ff 	.word	0xe78f30ff
   21050:	f0034814 	.word	0xf0034814
   21054:	4911fc91 	.word	0x4911fc91
   21058:	48124602 	.word	0x48124602
   2105c:	fca1f003 	.word	0xfca1f003
   21060:	2008b980 	.word	0x2008b980
   21064:	f8fcf7f1 	.word	0xf8fcf7f1
   21068:	30fff04f 	.word	0x30fff04f
   2106c:	220ae77d 	.word	0x220ae77d
   21070:	60322108 	.word	0x60322108
   21074:	e79d2204 	.word	0xe79d2204
   21078:	f7f12016 	.word	0xf7f12016
   2107c:	f04ff8f1 	.word	0xf04ff8f1
   21080:	e77530ff 	.word	0xe77530ff
   21084:	f7f12005 	.word	0xf7f12005
   21088:	f04ff8eb 	.word	0xf04ff8eb
   2108c:	e76c30ff 	.word	0xe76c30ff
   21090:	789a0000 	.word	0x789a0000
   21094:	20021aec 	.word	0x20021aec
   21098:	000279c0 	.word	0x000279c0
   2109c:	200219ec 	.word	0x200219ec
   210a0:	000279cc 	.word	0x000279cc
   210a4:	000279f0 	.word	0x000279f0
   210a8:	200219e8 	.word	0x200219e8

000210ac <pdn_interface_pdn_id_get>:
   210ac:	f0002900 	.word	0xf0002900
   210b0:	e92d83b9 	.word	0xe92d83b9
   210b4:	4ca343f0 	.word	0x4ca343f0
   210b8:	b0832802 	.word	0xb0832802
   210bc:	6823460d 	.word	0x6823460d
   210c0:	8094f000 	.word	0x8094f000
   210c4:	d03f280a 	.word	0xd03f280a
   210c8:	689bb11b 	.word	0x689bb11b
   210cc:	f0002b03 	.word	0xf0002b03
   210d0:	68638127 	.word	0x68638127
   210d4:	689bb11b 	.word	0x689bb11b
   210d8:	f0002b03 	.word	0xf0002b03
   210dc:	68a38110 	.word	0x68a38110
   210e0:	689bb11b 	.word	0x689bb11b
   210e4:	f0002b03 	.word	0xf0002b03
   210e8:	68e380f9 	.word	0x68e380f9
   210ec:	689bb11b 	.word	0x689bb11b
   210f0:	f0002b03 	.word	0xf0002b03
   210f4:	692380e2 	.word	0x692380e2
   210f8:	689bb11b 	.word	0x689bb11b
   210fc:	f0002b03 	.word	0xf0002b03
   21100:	69638123 	.word	0x69638123
   21104:	689bb11b 	.word	0x689bb11b
   21108:	f0002b03 	.word	0xf0002b03
   2110c:	69a38161 	.word	0x69a38161
   21110:	689bb11b 	.word	0x689bb11b
   21114:	f0002b03 	.word	0xf0002b03
   21118:	69e3814a 	.word	0x69e3814a
   2111c:	689bb11b 	.word	0x689bb11b
   21120:	f0002b03 	.word	0xf0002b03
   21124:	6a238133 	.word	0x6a238133
   21128:	689bb11b 	.word	0x689bb11b
   2112c:	f0002b03 	.word	0xf0002b03
   21130:	6a63811c 	.word	0x6a63811c
   21134:	689bb11b 	.word	0x689bb11b
   21138:	f0002b03 	.word	0xf0002b03
   2113c:	f04f80ad 	.word	0xf04f80ad
   21140:	b00330ff 	.word	0xb00330ff
   21144:	83f0e8bd 	.word	0x83f0e8bd
   21148:	689bb11b 	.word	0x689bb11b
   2114c:	f0002b03 	.word	0xf0002b03
   21150:	68638335 	.word	0x68638335
   21154:	689bb11b 	.word	0x689bb11b
   21158:	f0002b03 	.word	0xf0002b03
   2115c:	68a382fd 	.word	0x68a382fd
   21160:	689bb11b 	.word	0x689bb11b
   21164:	f0002b03 	.word	0xf0002b03
   21168:	68e382d5 	.word	0x68e382d5
   2116c:	689eb11b 	.word	0x689eb11b
   21170:	f0002e03 	.word	0xf0002e03
   21174:	692381f0 	.word	0x692381f0
   21178:	689bb11b 	.word	0x689bb11b
   2117c:	f0002b03 	.word	0xf0002b03
   21180:	69638203 	.word	0x69638203
   21184:	689bb11b 	.word	0x689bb11b
   21188:	f0002b03 	.word	0xf0002b03
   2118c:	69a38215 	.word	0x69a38215
   21190:	689bb11b 	.word	0x689bb11b
   21194:	f0002b03 	.word	0xf0002b03
   21198:	69e38227 	.word	0x69e38227
   2119c:	689bb11b 	.word	0x689bb11b
   211a0:	f0002b03 	.word	0xf0002b03
   211a4:	6a238239 	.word	0x6a238239
   211a8:	689bb11b 	.word	0x689bb11b
   211ac:	f0002b03 	.word	0xf0002b03
   211b0:	6a63824d 	.word	0x6a63824d
   211b4:	d0c22b00 	.word	0xd0c22b00
   211b8:	2b03689b 	.word	0x2b03689b
   211bc:	4628d1bf 	.word	0x4628d1bf
   211c0:	fbdaf003 	.word	0xfbdaf003
   211c4:	6a604606 	.word	0x6a604606
   211c8:	f003300c 	.word	0xf003300c
   211cc:	42b0fbd5 	.word	0x42b0fbd5
   211d0:	6a61d1b5 	.word	0x6a61d1b5
   211d4:	310c4628 	.word	0x310c4628
   211d8:	fbd6f003 	.word	0xfbd6f003
   211dc:	d1ae2800 	.word	0xd1ae2800
   211e0:	6f1a6a63 	.word	0x6f1a6a63
   211e4:	d5aa0792 	.word	0xd5aa0792
   211e8:	e11a2609 	.word	0xe11a2609
   211ec:	689bb11b 	.word	0x689bb11b
   211f0:	f0002b03 	.word	0xf0002b03
   211f4:	686382fd 	.word	0x686382fd
   211f8:	689bb11b 	.word	0x689bb11b
   211fc:	f0002b03 	.word	0xf0002b03
   21200:	68a382c5 	.word	0x68a382c5
   21204:	689bb11b 	.word	0x689bb11b
   21208:	f0002b03 	.word	0xf0002b03
   2120c:	68e38269 	.word	0x68e38269
   21210:	689eb11b 	.word	0x689eb11b
   21214:	f0002e03 	.word	0xf0002e03
   21218:	692380ec 	.word	0x692380ec
   2121c:	689bb11b 	.word	0x689bb11b
   21220:	f0002b03 	.word	0xf0002b03
   21224:	6963814a 	.word	0x6963814a
   21228:	689bb11b 	.word	0x689bb11b
   2122c:	f0002b03 	.word	0xf0002b03
   21230:	69a3815e 	.word	0x69a3815e
   21234:	689bb11b 	.word	0x689bb11b
   21238:	f0002b03 	.word	0xf0002b03
   2123c:	69e38172 	.word	0x69e38172
   21240:	689bb11b 	.word	0x689bb11b
   21244:	f0002b03 	.word	0xf0002b03
   21248:	6a23821b 	.word	0x6a23821b
   2124c:	689bb11b 	.word	0x689bb11b
   21250:	f0002b03 	.word	0xf0002b03
   21254:	6a63822d 	.word	0x6a63822d
   21258:	f43f2b00 	.word	0xf43f2b00
   2125c:	689baf70 	.word	0x689baf70
   21260:	f47f2b03 	.word	0xf47f2b03
   21264:	4628af6c 	.word	0x4628af6c
   21268:	fb86f003 	.word	0xfb86f003
   2126c:	6a604606 	.word	0x6a604606
   21270:	f003300c 	.word	0xf003300c
   21274:	4286fb81 	.word	0x4286fb81
   21278:	af61f47f 	.word	0xaf61f47f
   2127c:	46286a61 	.word	0x46286a61
   21280:	f003310c 	.word	0xf003310c
   21284:	2800fb81 	.word	0x2800fb81
   21288:	af59f47f 	.word	0xaf59f47f
   2128c:	6f1a6a63 	.word	0x6f1a6a63
   21290:	f57f07d2 	.word	0xf57f07d2
   21294:	e7a7af54 	.word	0xe7a7af54
   21298:	f0034628 	.word	0xf0034628
   2129c:	4606fb6d 	.word	0x4606fb6d
   212a0:	300c6a60 	.word	0x300c6a60
   212a4:	fb68f003 	.word	0xfb68f003
   212a8:	f47f42b0 	.word	0xf47f42b0
   212ac:	6a61af48 	.word	0x6a61af48
   212b0:	310c4628 	.word	0x310c4628
   212b4:	fb68f003 	.word	0xfb68f003
   212b8:	4628e741 	.word	0x4628e741
   212bc:	fb5cf003 	.word	0xfb5cf003
   212c0:	68e04606 	.word	0x68e04606
   212c4:	f003300c 	.word	0xf003300c
   212c8:	4286fb57 	.word	0x4286fb57
   212cc:	af13f47f 	.word	0xaf13f47f
   212d0:	462868e1 	.word	0x462868e1
   212d4:	f003310c 	.word	0xf003310c
   212d8:	e70cfb57 	.word	0xe70cfb57
   212dc:	f0034628 	.word	0xf0034628
   212e0:	4606fb4b 	.word	0x4606fb4b
   212e4:	300c68a0 	.word	0x300c68a0
   212e8:	fb46f003 	.word	0xfb46f003
   212ec:	f47f4286 	.word	0xf47f4286
   212f0:	68a1aefc 	.word	0x68a1aefc
   212f4:	310c4628 	.word	0x310c4628
   212f8:	fb46f003 	.word	0xfb46f003
   212fc:	4628e6f5 	.word	0x4628e6f5
   21300:	fb3af003 	.word	0xfb3af003
   21304:	68604606 	.word	0x68604606
   21308:	f003300c 	.word	0xf003300c
   2130c:	4286fb35 	.word	0x4286fb35
   21310:	aee5f47f 	.word	0xaee5f47f
   21314:	46286861 	.word	0x46286861
   21318:	f003310c 	.word	0xf003310c
   2131c:	e6defb35 	.word	0xe6defb35
   21320:	f0034608 	.word	0xf0034608
   21324:	4606fb29 	.word	0x4606fb29
   21328:	300c6820 	.word	0x300c6820
   2132c:	fb24f003 	.word	0xfb24f003
   21330:	f47f4286 	.word	0xf47f4286
   21334:	6821aece 	.word	0x6821aece
   21338:	310c4628 	.word	0x310c4628
   2133c:	fb24f003 	.word	0xfb24f003
   21340:	bf00e6c7 	.word	0xbf00e6c7
   21344:	20021aec 	.word	0x20021aec
   21348:	f0034628 	.word	0xf0034628
   2134c:	4606fb15 	.word	0x4606fb15
   21350:	300c6920 	.word	0x300c6920
   21354:	fb10f003 	.word	0xfb10f003
   21358:	f47f4286 	.word	0xf47f4286
   2135c:	6921aed2 	.word	0x6921aed2
   21360:	310c4628 	.word	0x310c4628
   21364:	fb10f003 	.word	0xfb10f003
   21368:	4628e6cb 	.word	0x4628e6cb
   2136c:	fb04f003 	.word	0xfb04f003
   21370:	6a204606 	.word	0x6a204606
   21374:	f003300c 	.word	0xf003300c
   21378:	4286faff 	.word	0x4286faff
   2137c:	aed9f47f 	.word	0xaed9f47f
   21380:	46286a21 	.word	0x46286a21
   21384:	f003310c 	.word	0xf003310c
   21388:	e6d2faff 	.word	0xe6d2faff
   2138c:	f0034628 	.word	0xf0034628
   21390:	4606faf3 	.word	0x4606faf3
   21394:	300c69e0 	.word	0x300c69e0
   21398:	faeef003 	.word	0xfaeef003
   2139c:	f47f4286 	.word	0xf47f4286
   213a0:	69e1aec2 	.word	0x69e1aec2
   213a4:	310c4628 	.word	0x310c4628
   213a8:	faeef003 	.word	0xfaeef003
   213ac:	4628e6bb 	.word	0x4628e6bb
   213b0:	fae2f003 	.word	0xfae2f003
   213b4:	69a04606 	.word	0x69a04606
   213b8:	f003300c 	.word	0xf003300c
   213bc:	4286fadd 	.word	0x4286fadd
   213c0:	aeabf47f 	.word	0xaeabf47f
   213c4:	462869a1 	.word	0x462869a1
   213c8:	f003310c 	.word	0xf003310c
   213cc:	e6a4fadd 	.word	0xe6a4fadd
   213d0:	f0034628 	.word	0xf0034628
   213d4:	4606fad1 	.word	0x4606fad1
   213d8:	300c6960 	.word	0x300c6960
   213dc:	faccf003 	.word	0xfaccf003
   213e0:	f47f4286 	.word	0xf47f4286
   213e4:	6961ae94 	.word	0x6961ae94
   213e8:	310c4628 	.word	0x310c4628
   213ec:	faccf003 	.word	0xfaccf003
   213f0:	4628e68d 	.word	0x4628e68d
   213f4:	fac0f003 	.word	0xfac0f003
   213f8:	68e04607 	.word	0x68e04607
   213fc:	f003300c 	.word	0xf003300c
   21400:	4287fabb 	.word	0x4287fabb
   21404:	af09f47f 	.word	0xaf09f47f
   21408:	462868e1 	.word	0x462868e1
   2140c:	f003310c 	.word	0xf003310c
   21410:	2800fabb 	.word	0x2800fabb
   21414:	af01f47f 	.word	0xaf01f47f
   21418:	6f1a68e3 	.word	0x6f1a68e3
   2141c:	f57f07d1 	.word	0xf57f07d1
   21420:	6858aefc 	.word	0x6858aefc
   21424:	f47f1c43 	.word	0xf47f1c43
   21428:	4dc6ae8c 	.word	0x4dc6ae8c
   2142c:	f44f4ac6 	.word	0xf44f4ac6
   21430:	46287180 	.word	0x46287180
   21434:	f9baf7f0 	.word	0xf9baf7f0
   21438:	3026f854 	.word	0x3026f854
   2143c:	7180f5c0 	.word	0x7180f5c0
   21440:	4ac2681b 	.word	0x4ac2681b
   21444:	f8df4428 	.word	0xf8df4428
   21448:	f7f0830c 	.word	0xf7f0830c
   2144c:	4628f9af 	.word	0x4628f9af
   21450:	9000f8d8 	.word	0x9000f8d8
   21454:	f0032700 	.word	0xf0032700
   21458:	4629fa8f 	.word	0x4629fa8f
   2145c:	463b4602 	.word	0x463b4602
   21460:	97014648 	.word	0x97014648
   21464:	f7f29700 	.word	0xf7f29700
   21468:	4681fa2f 	.word	0x4681fa2f
   2146c:	f0034628 	.word	0xf0034628
   21470:	4548fa83 	.word	0x4548fa83
   21474:	81e9f040 	.word	0x81e9f040
   21478:	f44f463b 	.word	0xf44f463b
   2147c:	e9cd7280 	.word	0xe9cd7280
   21480:	46297700 	.word	0x46297700
   21484:	0000f8d8 	.word	0x0000f8d8
   21488:	fb06f7f2 	.word	0xfb06f7f2
   2148c:	48b04607 	.word	0x48b04607
   21490:	fa72f003 	.word	0xfa72f003
   21494:	46024287 	.word	0x46024287
   21498:	81c7f2c0 	.word	0x81c7f2c0
   2149c:	48ac4629 	.word	0x48ac4629
   214a0:	fa7ff003 	.word	0xfa7ff003
   214a4:	f0402800 	.word	0xf0402800
   214a8:	462981c0 	.word	0x462981c0
   214ac:	f7ff4630 	.word	0xf7ff4630
   214b0:	f854f92b 	.word	0xf854f92b
   214b4:	68583026 	.word	0x68583026
   214b8:	4628e643 	.word	0x4628e643
   214bc:	fa5cf003 	.word	0xfa5cf003
   214c0:	69204606 	.word	0x69204606
   214c4:	f003300c 	.word	0xf003300c
   214c8:	4286fa57 	.word	0x4286fa57
   214cc:	aeabf47f 	.word	0xaeabf47f
   214d0:	46286921 	.word	0x46286921
   214d4:	f003310c 	.word	0xf003310c
   214d8:	2800fa57 	.word	0x2800fa57
   214dc:	aea3f47f 	.word	0xaea3f47f
   214e0:	6f1a6923 	.word	0x6f1a6923
   214e4:	f57f07d2 	.word	0xf57f07d2
   214e8:	2604ae9e 	.word	0x2604ae9e
   214ec:	4628e799 	.word	0x4628e799
   214f0:	fa42f003 	.word	0xfa42f003
   214f4:	69604606 	.word	0x69604606
   214f8:	f003300c 	.word	0xf003300c
   214fc:	4286fa3d 	.word	0x4286fa3d
   21500:	ae97f47f 	.word	0xae97f47f
   21504:	46286961 	.word	0x46286961
   21508:	f003310c 	.word	0xf003310c
   2150c:	2800fa3d 	.word	0x2800fa3d
   21510:	ae8ff47f 	.word	0xae8ff47f
   21514:	6f1a6963 	.word	0x6f1a6963
   21518:	f57f07d7 	.word	0xf57f07d7
   2151c:	2605ae8a 	.word	0x2605ae8a
   21520:	4628e77f 	.word	0x4628e77f
   21524:	fa28f003 	.word	0xfa28f003
   21528:	69a04606 	.word	0x69a04606
   2152c:	f003300c 	.word	0xf003300c
   21530:	4286fa23 	.word	0x4286fa23
   21534:	ae83f47f 	.word	0xae83f47f
   21538:	462869a1 	.word	0x462869a1
   2153c:	f003310c 	.word	0xf003310c
   21540:	2800fa23 	.word	0x2800fa23
   21544:	ae7bf47f 	.word	0xae7bf47f
   21548:	6f1a69a3 	.word	0x6f1a69a3
   2154c:	f57f07d6 	.word	0xf57f07d6
   21550:	2606ae76 	.word	0x2606ae76
   21554:	4628e765 	.word	0x4628e765
   21558:	fa0ef003 	.word	0xfa0ef003
   2155c:	68e04607 	.word	0x68e04607
   21560:	f003300c 	.word	0xf003300c
   21564:	4287fa09 	.word	0x4287fa09
   21568:	ae05f47f 	.word	0xae05f47f
   2156c:	462868e1 	.word	0x462868e1
   21570:	f003310c 	.word	0xf003310c
   21574:	2800fa09 	.word	0x2800fa09
   21578:	adfdf47f 	.word	0xadfdf47f
   2157c:	6f1a68e3 	.word	0x6f1a68e3
   21580:	f53f0791 	.word	0xf53f0791
   21584:	e5f6af4e 	.word	0xe5f6af4e
   21588:	f0034628 	.word	0xf0034628
   2158c:	4606f9f5 	.word	0x4606f9f5
   21590:	300c6920 	.word	0x300c6920
   21594:	f9f0f003 	.word	0xf9f0f003
   21598:	f47f4286 	.word	0xf47f4286
   2159c:	6921adf2 	.word	0x6921adf2
   215a0:	310c4628 	.word	0x310c4628
   215a4:	f9f0f003 	.word	0xf9f0f003
   215a8:	f47f2800 	.word	0xf47f2800
   215ac:	6923adea 	.word	0x6923adea
   215b0:	07926f1a 	.word	0x07926f1a
   215b4:	e5e4d499 	.word	0xe5e4d499
   215b8:	f0034628 	.word	0xf0034628
   215bc:	4606f9dd 	.word	0x4606f9dd
   215c0:	300c6960 	.word	0x300c6960
   215c4:	f9d8f003 	.word	0xf9d8f003
   215c8:	f47f4286 	.word	0xf47f4286
   215cc:	6961ade0 	.word	0x6961ade0
   215d0:	310c4628 	.word	0x310c4628
   215d4:	f9d8f003 	.word	0xf9d8f003
   215d8:	f47f2800 	.word	0xf47f2800
   215dc:	6963add8 	.word	0x6963add8
   215e0:	07976f1a 	.word	0x07976f1a
   215e4:	e5d2d49b 	.word	0xe5d2d49b
   215e8:	f0034628 	.word	0xf0034628
   215ec:	4606f9c5 	.word	0x4606f9c5
   215f0:	300c69a0 	.word	0x300c69a0
   215f4:	f9c0f003 	.word	0xf9c0f003
   215f8:	f47f4286 	.word	0xf47f4286
   215fc:	69a1adce 	.word	0x69a1adce
   21600:	310c4628 	.word	0x310c4628
   21604:	f9c0f003 	.word	0xf9c0f003
   21608:	f47f2800 	.word	0xf47f2800
   2160c:	69a3adc6 	.word	0x69a3adc6
   21610:	07966f1a 	.word	0x07966f1a
   21614:	e5c0d49d 	.word	0xe5c0d49d
   21618:	f0034628 	.word	0xf0034628
   2161c:	4606f9ad 	.word	0x4606f9ad
   21620:	300c69e0 	.word	0x300c69e0
   21624:	f9a8f003 	.word	0xf9a8f003
   21628:	f47f4286 	.word	0xf47f4286
   2162c:	69e1adbc 	.word	0x69e1adbc
   21630:	310c4628 	.word	0x310c4628
   21634:	f9a8f003 	.word	0xf9a8f003
   21638:	f47f2800 	.word	0xf47f2800
   2163c:	69e3adb4 	.word	0x69e3adb4
   21640:	07906f1a 	.word	0x07906f1a
   21644:	adaff57f 	.word	0xadaff57f
   21648:	e6ea2607 	.word	0xe6ea2607
   2164c:	f0034628 	.word	0xf0034628
   21650:	4606f993 	.word	0x4606f993
   21654:	300c6a20 	.word	0x300c6a20
   21658:	f98ef003 	.word	0xf98ef003
   2165c:	f47f4286 	.word	0xf47f4286
   21660:	6a21ada8 	.word	0x6a21ada8
   21664:	310c4628 	.word	0x310c4628
   21668:	f98ef003 	.word	0xf98ef003
   2166c:	f47f2800 	.word	0xf47f2800
   21670:	6a23ada0 	.word	0x6a23ada0
   21674:	07916f1a 	.word	0x07916f1a
   21678:	ad9bf57f 	.word	0xad9bf57f
   2167c:	e6d02608 	.word	0xe6d02608
   21680:	f0034628 	.word	0xf0034628
   21684:	4606f979 	.word	0x4606f979
   21688:	300c69e0 	.word	0x300c69e0
   2168c:	f974f003 	.word	0xf974f003
   21690:	f47f4286 	.word	0xf47f4286
   21694:	69e1adda 	.word	0x69e1adda
   21698:	310c4628 	.word	0x310c4628
   2169c:	f974f003 	.word	0xf974f003
   216a0:	f47f2800 	.word	0xf47f2800
   216a4:	69e3add2 	.word	0x69e3add2
   216a8:	07d06f1a 	.word	0x07d06f1a
   216ac:	e5ccd4cc 	.word	0xe5ccd4cc
   216b0:	f0034628 	.word	0xf0034628
   216b4:	4606f961 	.word	0x4606f961
   216b8:	300c6a20 	.word	0x300c6a20
   216bc:	f95cf003 	.word	0xf95cf003
   216c0:	f47f4286 	.word	0xf47f4286
   216c4:	6a21adc8 	.word	0x6a21adc8
   216c8:	310c4628 	.word	0x310c4628
   216cc:	f95cf003 	.word	0xf95cf003
   216d0:	f47f2800 	.word	0xf47f2800
   216d4:	6a23adc0 	.word	0x6a23adc0
   216d8:	07d16f1a 	.word	0x07d16f1a
   216dc:	e5bad4ce 	.word	0xe5bad4ce
   216e0:	f0034628 	.word	0xf0034628
   216e4:	4606f949 	.word	0x4606f949
   216e8:	300c68a0 	.word	0x300c68a0
   216ec:	f944f003 	.word	0xf944f003
   216f0:	f47f4286 	.word	0xf47f4286
   216f4:	68a1ad8c 	.word	0x68a1ad8c
   216f8:	310c4628 	.word	0x310c4628
   216fc:	f944f003 	.word	0xf944f003
   21700:	f47f2800 	.word	0xf47f2800
   21704:	68a3ad84 	.word	0x68a3ad84
   21708:	07d06f1a 	.word	0x07d06f1a
   2170c:	ad7ff57f 	.word	0xad7ff57f
   21710:	e6862602 	.word	0xe6862602
   21714:	f0034628 	.word	0xf0034628
   21718:	4606f92f 	.word	0x4606f92f
   2171c:	300c68a0 	.word	0x300c68a0
   21720:	f92af003 	.word	0xf92af003
   21724:	f47f4286 	.word	0xf47f4286
   21728:	68a1ad20 	.word	0x68a1ad20
   2172c:	310c4628 	.word	0x310c4628
   21730:	f92af003 	.word	0xf92af003
   21734:	f47f2800 	.word	0xf47f2800
   21738:	68a3ad18 	.word	0x68a3ad18
   2173c:	07906f1a 	.word	0x07906f1a
   21740:	e512d4e6 	.word	0xe512d4e6
   21744:	200219ec 	.word	0x200219ec
   21748:	0002799c 	.word	0x0002799c
   2174c:	00027998 	.word	0x00027998
   21750:	000279ac 	.word	0x000279ac
   21754:	200219e8 	.word	0x200219e8
   21758:	f0034628 	.word	0xf0034628
   2175c:	4606f90d 	.word	0x4606f90d
   21760:	300c6860 	.word	0x300c6860
   21764:	f908f003 	.word	0xf908f003
   21768:	f47f4286 	.word	0xf47f4286
   2176c:	6861acf8 	.word	0x6861acf8
   21770:	310c4628 	.word	0x310c4628
   21774:	f908f003 	.word	0xf908f003
   21778:	f47f2800 	.word	0xf47f2800
   2177c:	6863acf0 	.word	0x6863acf0
   21780:	07966f1a 	.word	0x07966f1a
   21784:	acebf57f 	.word	0xacebf57f
   21788:	e64a2601 	.word	0xe64a2601
   2178c:	f0034628 	.word	0xf0034628
   21790:	4606f8f3 	.word	0x4606f8f3
   21794:	300c6860 	.word	0x300c6860
   21798:	f8eef003 	.word	0xf8eef003
   2179c:	f47f4286 	.word	0xf47f4286
   217a0:	6861ad30 	.word	0x6861ad30
   217a4:	310c4628 	.word	0x310c4628
   217a8:	f8eef003 	.word	0xf8eef003
   217ac:	f47f2800 	.word	0xf47f2800
   217b0:	6863ad28 	.word	0x6863ad28
   217b4:	07d66f1a 	.word	0x07d66f1a
   217b8:	e522d4e6 	.word	0xe522d4e6
   217bc:	f0034608 	.word	0xf0034608
   217c0:	4606f8db 	.word	0x4606f8db
   217c4:	300c6820 	.word	0x300c6820
   217c8:	f8d6f003 	.word	0xf8d6f003
   217cc:	f47f4286 	.word	0xf47f4286
   217d0:	6821acc0 	.word	0x6821acc0
   217d4:	310c4628 	.word	0x310c4628
   217d8:	f8d6f003 	.word	0xf8d6f003
   217dc:	28004606 	.word	0x28004606
   217e0:	acb7f47f 	.word	0xacb7f47f
   217e4:	6f1a6823 	.word	0x6f1a6823
   217e8:	f53f0797 	.word	0xf53f0797
   217ec:	e4b0ae1a 	.word	0xe4b0ae1a
   217f0:	f0034608 	.word	0xf0034608
   217f4:	4606f8c1 	.word	0x4606f8c1
   217f8:	300c6820 	.word	0x300c6820
   217fc:	f8bcf003 	.word	0xf8bcf003
   21800:	f47f4286 	.word	0xf47f4286
   21804:	6821acf8 	.word	0x6821acf8
   21808:	310c4628 	.word	0x310c4628
   2180c:	f8bcf003 	.word	0xf8bcf003
   21810:	28004606 	.word	0x28004606
   21814:	aceff47f 	.word	0xaceff47f
   21818:	6f1a6823 	.word	0x6f1a6823
   2181c:	f53f07d7 	.word	0xf53f07d7
   21820:	e4e8ae00 	.word	0xe4e8ae00
   21824:	30fff04f 	.word	0x30fff04f
   21828:	480b4770 	.word	0x480b4770
   2182c:	f8a4f003 	.word	0xf8a4f003
   21830:	4602490a 	.word	0x4602490a
   21834:	f0034808 	.word	0xf0034808
   21838:	b930f8b4 	.word	0xb930f8b4
   2183c:	f7f02008 	.word	0xf7f02008
   21840:	f854fd0f 	.word	0xf854fd0f
   21844:	68583026 	.word	0x68583026
   21848:	2005e47b 	.word	0x2005e47b
   2184c:	fd08f7f0 	.word	0xfd08f7f0
   21850:	3026f854 	.word	0x3026f854
   21854:	e4746858 	.word	0xe4746858
   21858:	000279f0 	.word	0x000279f0
   2185c:	200219ec 	.word	0x200219ec

00021860 <bsd_platform_getaddrinfo>:
   21860:	be04f7f7 	.word	0xbe04f7f7

00021864 <bsd_platform_freeaddrinfo>:
   21864:	bef8f7f7 	.word	0xbef8f7f7

00021868 <bsd_platform_poll>:
   21868:	43f0e92d 	.word	0x43f0e92d
   2186c:	72e2ea42 	.word	0x72e2ea42
   21870:	9200b083 	.word	0x9200b083
   21874:	d0482800 	.word	0xd0482800
   21878:	2b071e4b 	.word	0x2b071e4b
   2187c:	4680d845 	.word	0x4680d845
   21880:	24004605 	.word	0x24004605
   21884:	07c1eb00 	.word	0x07c1eb00
   21888:	682888ab 	.word	0x682888ab
   2188c:	0303f003 	.word	0x0303f003
   21890:	f043a901 	.word	0xf043a901
   21894:	f7f6061c 	.word	0xf7f6061c
   21898:	9b01fd1f 	.word	0x9b01fd1f
   2189c:	40333508 	.word	0x40333508
   218a0:	3c02f825 	.word	0x3c02f825
   218a4:	3401b103 	.word	0x3401b103
   218a8:	d1ed42af 	.word	0xd1ed42af
   218ac:	4669bb9c 	.word	0x4669bb9c
   218b0:	f7f04640 	.word	0xf7f04640
   218b4:	4607fc45 	.word	0x4607fc45
   218b8:	283cb108 	.word	0x283cb108
   218bc:	46c1d11d 	.word	0x46c1d11d
   218c0:	f8b92600 	.word	0xf8b92600
   218c4:	f8d93004 	.word	0xf8d93004
   218c8:	f0030000 	.word	0xf0030000
   218cc:	a9010303 	.word	0xa9010303
   218d0:	041cf043 	.word	0x041cf043
   218d4:	fd00f7f6 	.word	0xfd00f7f6
   218d8:	f1099b01 	.word	0xf1099b01
   218dc:	40230908 	.word	0x40230908
   218e0:	3c02f829 	.word	0x3c02f829
   218e4:	3601b103 	.word	0x3601b103
   218e8:	d1ea454d 	.word	0xd1ea454d
   218ec:	2f00b90e 	.word	0x2f00b90e
   218f0:	4630d0dd 	.word	0x4630d0dd
   218f4:	e8bdb003 	.word	0xe8bdb003
   218f8:	202383f0 	.word	0x202383f0
   218fc:	fcb0f7f0 	.word	0xfcb0f7f0
   21900:	30fff04f 	.word	0x30fff04f
   21904:	e8bdb003 	.word	0xe8bdb003
   21908:	201683f0 	.word	0x201683f0
   2190c:	fca8f7f0 	.word	0xfca8f7f0
   21910:	30fff04f 	.word	0x30fff04f
   21914:	4620e7ee 	.word	0x4620e7ee
   21918:	bf00e7ec 	.word	0xbf00e7ec

0002191c <bsd_platform_fcntl>:
   2191c:	4b06b508 	.word	0x4b06b508
   21920:	d0034383 	.word	0xd0034383
   21924:	4008e8bd 	.word	0x4008e8bd
   21928:	bd54f7f6 	.word	0xbd54f7f6
   2192c:	f7f0202d 	.word	0xf7f0202d
   21930:	f04ffc97 	.word	0xf04ffc97
   21934:	bd0830ff 	.word	0xbd0830ff
   21938:	49765432 	.word	0x49765432

0002193c <stream_handler_init>:
   2193c:	4604b510 	.word	0x4604b510
   21940:	f7fd200c 	.word	0xf7fd200c
   21944:	60e0fed1 	.word	0x60e0fed1
   21948:	2300b128 	.word	0x2300b128
   2194c:	e8bd6123 	.word	0xe8bd6123
   21950:	f7f84010 	.word	0xf7f84010
   21954:	2004ba1b 	.word	0x2004ba1b
   21958:	bf00bd10 	.word	0xbf00bd10

0002195c <stream_handler_put>:
   2195c:	4606b570 	.word	0x4606b570
   21960:	460d2014 	.word	0x460d2014
   21964:	fec0f7fd 	.word	0xfec0f7fd
   21968:	682bb178 	.word	0x682bb178
   2196c:	60434604 	.word	0x60434604
   21970:	4601686b 	.word	0x4601686b
   21974:	68eb6083 	.word	0x68eb6083
   21978:	68ab60c3 	.word	0x68ab60c3
   2197c:	68f06103 	.word	0x68f06103
   21980:	fa0ef7f8 	.word	0xfa0ef7f8
   21984:	6868b920 	.word	0x6868b920
   21988:	f04fbd70 	.word	0xf04fbd70
   2198c:	bd7030ff 	.word	0xbd7030ff
   21990:	f7fd4620 	.word	0xf7fd4620
   21994:	f04ffec7 	.word	0xf04ffec7
   21998:	bd7030ff 	.word	0xbd7030ff

0002199c <stream_handler_get>:
   2199c:	4ff0e92d 	.word	0x4ff0e92d
   219a0:	b0874682 	.word	0xb0874682
   219a4:	468968c0 	.word	0x468968c0
   219a8:	f7f84693 	.word	0xf7f84693
   219ac:	2800fa19 	.word	0x2800fa19
   219b0:	4605d072 	.word	0x4605d072
   219b4:	0008f8d9 	.word	0x0008f8d9
   219b8:	692bb120 	.word	0x692bb120
   219bc:	68eab113 	.word	0x68eab113
   219c0:	d15c2a00 	.word	0xd15c2a00
   219c4:	f8c92300 	.word	0xf8c92300
   219c8:	f8d9300c 	.word	0xf8d9300c
   219cc:	f8d92000 	.word	0xf8d92000
   219d0:	f8da8004 	.word	0xf8da8004
   219d4:	92011010 	.word	0x92011010
   219d8:	0f00f1b8 	.word	0x0f00f1b8
   219dc:	f00bd05a 	.word	0xf00bd05a
   219e0:	24000308 	.word	0x24000308
   219e4:	e0109300 	.word	0xe0109300
   219e8:	3010f8da 	.word	0x3010f8da
   219ec:	f8ca443b 	.word	0xf8ca443b
   219f0:	46283010 	.word	0x46283010
   219f4:	f9fcf7f8 	.word	0xf9fcf7f8
   219f8:	4605443c 	.word	0x4605443c
   219fc:	d0382800 	.word	0xd0382800
   21a00:	d93645a0 	.word	0xd93645a0
   21a04:	f8d92100 	.word	0xf8d92100
   21a08:	68ae2000 	.word	0x68ae2000
   21a0c:	0b04eba8 	.word	0x0b04eba8
   21a10:	455e1a76 	.word	0x455e1a76
   21a14:	bf284637 	.word	0xbf284637
   21a18:	b132465f 	.word	0xb132465f
   21a1c:	9b016868 	.word	0x9b016868
   21a20:	463a4401 	.word	0x463a4401
   21a24:	f0021918 	.word	0xf0021918
   21a28:	9b00ffdb 	.word	0x9b00ffdb
   21a2c:	d1e02b00 	.word	0xd1e02b00
   21a30:	d8d9455e 	.word	0xd8d9455e
   21a34:	000cf8da 	.word	0x000cf8da
   21a38:	f9c8f7f8 	.word	0xf9c8f7f8
   21a3c:	b1704606 	.word	0xb1704606
   21a40:	2301e9d0 	.word	0x2301e9d0
   21a44:	0103e9d0 	.word	0x0103e9d0
   21a48:	2302e9cd 	.word	0x2302e9cd
   21a4c:	1004e9cd 	.word	0x1004e9cd
   21a50:	3101e9da 	.word	0x3101e9da
   21a54:	4798a802 	.word	0x4798a802
   21a58:	f7fd4630 	.word	0xf7fd4630
   21a5c:	2300fe63 	.word	0x2300fe63
   21a60:	f8ca4628 	.word	0xf8ca4628
   21a64:	f7f83010 	.word	0xf7f83010
   21a68:	443cf9c3 	.word	0x443cf9c3
   21a6c:	28004605 	.word	0x28004605
   21a70:	4620d1c6 	.word	0x4620d1c6
   21a74:	4004f8c9 	.word	0x4004f8c9
   21a78:	e8bdb007 	.word	0xe8bdb007
   21a7c:	f8d98ff0 	.word	0xf8d98ff0
   21a80:	429a300c 	.word	0x429a300c
   21a84:	461abf28 	.word	0x461abf28
   21a88:	200cf8c9 	.word	0x200cf8c9
   21a8c:	f0026929 	.word	0xf0026929
   21a90:	e79affa7 	.word	0xe79affa7
   21a94:	e7ec4644 	.word	0xe7ec4644
   21a98:	30fff04f 	.word	0x30fff04f
   21a9c:	bf00e7ec 	.word	0xbf00e7ec

00021aa0 <stream_handler_available>:
   21aa0:	4604b510 	.word	0x4604b510
   21aa4:	f7f868c0 	.word	0xf7f868c0
   21aa8:	b150f99b 	.word	0xb150f99b
   21aac:	42646924 	.word	0x42646924
   21ab0:	441c6883 	.word	0x441c6883
   21ab4:	f99cf7f8 	.word	0xf99cf7f8
   21ab8:	d1f92800 	.word	0xd1f92800
   21abc:	70e4ea24 	.word	0x70e4ea24
   21ac0:	f04fbd10 	.word	0xf04fbd10
   21ac4:	bd1030ff 	.word	0xbd1030ff

00021ac8 <stream_handler_flush>:
   21ac8:	4605b530 	.word	0x4605b530
   21acc:	b08568c0 	.word	0xb08568c0
   21ad0:	e01ab9a8 	.word	0xe01ab9a8
   21ad4:	f7f868e8 	.word	0xf7f868e8
   21ad8:	4604f979 	.word	0x4604f979
   21adc:	e9d0b170 	.word	0xe9d0b170
   21ae0:	e9d40101 	.word	0xe9d40101
   21ae4:	e9cd3203 	.word	0xe9cd3203
   21ae8:	e9cd0100 	.word	0xe9cd0100
   21aec:	e9d52302 	.word	0xe9d52302
   21af0:	46683101 	.word	0x46683101
   21af4:	46204798 	.word	0x46204798
   21af8:	fe14f7fd 	.word	0xfe14f7fd
   21afc:	f7f868e8 	.word	0xf7f868e8
   21b00:	2800f975 	.word	0x2800f975
   21b04:	b005d1e6 	.word	0xb005d1e6
   21b08:	2008bd30 	.word	0x2008bd30
   21b0c:	bd30b005 	.word	0xbd30b005

00021b10 <stream_handler_free>:
   21b10:	4605b530 	.word	0x4605b530
   21b14:	b08568c0 	.word	0xb08568c0
   21b18:	e01cb9a0 	.word	0xe01cb9a0
   21b1c:	f956f7f8 	.word	0xf956f7f8
   21b20:	b1704604 	.word	0xb1704604
   21b24:	0101e9d0 	.word	0x0101e9d0
   21b28:	3203e9d4 	.word	0x3203e9d4
   21b2c:	0100e9cd 	.word	0x0100e9cd
   21b30:	2302e9cd 	.word	0x2302e9cd
   21b34:	3101e9d5 	.word	0x3101e9d5
   21b38:	47984668 	.word	0x47984668
   21b3c:	f7fd4620 	.word	0xf7fd4620
   21b40:	68e8fdf1 	.word	0x68e8fdf1
   21b44:	f952f7f8 	.word	0xf952f7f8
   21b48:	68e84604 	.word	0x68e84604
   21b4c:	d1e52c00 	.word	0xd1e52c00
   21b50:	fde8f7fd 	.word	0xfde8f7fd
   21b54:	b00560ec 	.word	0xb00560ec
   21b58:	bf00bd30 	.word	0xbf00bd30

00021b5c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   21b5c:	4a07      	ldr	r2, [pc, #28]	; (21b7c <SystemInit+0x20>)
   21b5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   21b62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   21b66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   21b6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21b6e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   21b72:	4b03      	ldr	r3, [pc, #12]	; (21b80 <SystemInit+0x24>)
   21b74:	4a03      	ldr	r2, [pc, #12]	; (21b84 <SystemInit+0x28>)
   21b76:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21b78:	4770      	bx	lr
   21b7a:	bf00      	nop
   21b7c:	e000ed00 	.word	0xe000ed00
   21b80:	2002d418 	.word	0x2002d418
   21b84:	03d09000 	.word	0x03d09000

00021b88 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   21b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b8c:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21b8e:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21b90:	2024      	movs	r0, #36	; 0x24
   21b92:	4d42      	ldr	r5, [pc, #264]	; (21c9c <nrfx_uarte_init+0x114>)
   21b94:	fb00 5004 	mla	r0, r0, r4, r5
   21b98:	f890 0020 	ldrb.w	r0, [r0, #32]
   21b9c:	2800      	cmp	r0, #0
   21b9e:	d17a      	bne.n	21c96 <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   21ba0:	680f      	ldr	r7, [r1, #0]
   21ba2:	1c7b      	adds	r3, r7, #1
   21ba4:	d009      	beq.n	21bba <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21ba6:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21ba8:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   21bac:	483c      	ldr	r0, [pc, #240]	; (21ca0 <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21bae:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   21bb0:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21bb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
   21bb6:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   21bba:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   21bbe:	f891 801b 	ldrb.w	r8, [r1, #27]
   21bc2:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   21bc6:	bf1f      	itttt	ne
   21bc8:	f04f 0e00 	movne.w	lr, #0
   21bcc:	4834      	ldrne	r0, [pc, #208]	; (21ca0 <nrfx_uarte_init+0x118>)
   21bce:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   21bd2:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   21bd6:	6948      	ldr	r0, [r1, #20]
   21bd8:	6833      	ldr	r3, [r6, #0]
   21bda:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   21bde:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   21be2:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   21be4:	f1be 0f01 	cmp.w	lr, #1
   21be8:	ea40 0008 	orr.w	r0, r0, r8
   21bec:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   21bf0:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   21bf4:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   21bf8:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   21bfc:	d120      	bne.n	21c40 <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   21bfe:	688f      	ldr	r7, [r1, #8]
   21c00:	1c78      	adds	r0, r7, #1
   21c02:	bf1f      	itttt	ne
   21c04:	f04f 0e00 	movne.w	lr, #0
   21c08:	f8df c094 	ldrne.w	ip, [pc, #148]	; 21ca0 <nrfx_uarte_init+0x118>
   21c0c:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   21c10:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   21c14:	68c8      	ldr	r0, [r1, #12]
   21c16:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21c1a:	d00d      	beq.n	21c38 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21c1c:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21c20:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   21c24:	f8df e078 	ldr.w	lr, [pc, #120]	; 21ca0 <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21c28:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   21c2c:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21c30:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   21c34:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   21c38:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   21c3c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   21c40:	2324      	movs	r3, #36	; 0x24
   21c42:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   21c44:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   21c46:	18e8      	adds	r0, r5, r3
   21c48:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   21c4a:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   21c4c:	b192      	cbz	r2, 21c74 <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21c4e:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   21c50:	6830      	ldr	r0, [r6, #0]
   21c52:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   21c56:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   21c5a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   21c5e:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   21c62:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   21c66:	4b0f      	ldr	r3, [pc, #60]	; (21ca4 <nrfx_uarte_init+0x11c>)
   21c68:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   21c6c:	f340 3007 	sbfx	r0, r0, #12, #8
   21c70:	f7ee f9e6 	bl	10040 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21c74:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   21c76:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   21c78:	480b      	ldr	r0, [pc, #44]	; (21ca8 <nrfx_uarte_init+0x120>)
   21c7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   21c7e:	2324      	movs	r3, #36	; 0x24
   21c80:	2200      	movs	r2, #0
   21c82:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   21c86:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   21c8a:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   21c8c:	2201      	movs	r2, #1
   21c8e:	f883 2020 	strb.w	r2, [r3, #32]
}
   21c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   21c96:	4805      	ldr	r0, [pc, #20]	; (21cac <nrfx_uarte_init+0x124>)
   21c98:	e7fb      	b.n	21c92 <nrfx_uarte_init+0x10a>
   21c9a:	bf00      	nop
   21c9c:	20021b14 	.word	0x20021b14
   21ca0:	40842500 	.word	0x40842500
   21ca4:	00420310 	.word	0x00420310
   21ca8:	0bad0000 	.word	0x0bad0000
   21cac:	0bad0005 	.word	0x0bad0005

00021cb0 <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21cb0:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   21cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   21cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   21cba:	d12e      	bne.n	21d1a <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   21cbc:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21cbe:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   21cc0:	4f19      	ldr	r7, [pc, #100]	; (21d28 <nrfx_uarte_tx+0x78>)
   21cc2:	fb04 7405 	mla	r4, r4, r5, r7
   21cc6:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   21cc8:	bb4e      	cbnz	r6, 21d1e <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   21cca:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   21ccc:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21cce:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   21cd2:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   21cd6:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21cd8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21cdc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21ce0:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   21ce2:	60a1      	str	r1, [r4, #8]
   21ce4:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   21ce6:	6862      	ldr	r2, [r4, #4]
   21ce8:	b9da      	cbnz	r2, 21d22 <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21cea:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   21cee:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   21cf2:	b919      	cbnz	r1, 21cfc <nrfx_uarte_tx+0x4c>
   21cf4:	2a00      	cmp	r2, #0
   21cf6:	d0f8      	beq.n	21cea <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   21cf8:	480c      	ldr	r0, [pc, #48]	; (21d2c <nrfx_uarte_tx+0x7c>)
   21cfa:	e008      	b.n	21d0e <nrfx_uarte_tx+0x5e>
        if (txstopped)
   21cfc:	2a00      	cmp	r2, #0
   21cfe:	d1fb      	bne.n	21cf8 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21d00:	2201      	movs	r2, #1
   21d02:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21d04:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   21d08:	2a00      	cmp	r2, #0
   21d0a:	d0fb      	beq.n	21d04 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   21d0c:	4808      	ldr	r0, [pc, #32]	; (21d30 <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   21d0e:	2324      	movs	r3, #36	; 0x24
   21d10:	fb03 7505 	mla	r5, r3, r5, r7
   21d14:	2300      	movs	r3, #0
   21d16:	616b      	str	r3, [r5, #20]
}
   21d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   21d1a:	4806      	ldr	r0, [pc, #24]	; (21d34 <nrfx_uarte_tx+0x84>)
   21d1c:	e7fc      	b.n	21d18 <nrfx_uarte_tx+0x68>
        return err_code;
   21d1e:	4806      	ldr	r0, [pc, #24]	; (21d38 <nrfx_uarte_tx+0x88>)
   21d20:	e7fa      	b.n	21d18 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   21d22:	4803      	ldr	r0, [pc, #12]	; (21d30 <nrfx_uarte_tx+0x80>)
   21d24:	e7f8      	b.n	21d18 <nrfx_uarte_tx+0x68>
   21d26:	bf00      	nop
   21d28:	20021b14 	.word	0x20021b14
   21d2c:	0bad0008 	.word	0x0bad0008
   21d30:	0bad0000 	.word	0x0bad0000
   21d34:	0bad000a 	.word	0x0bad000a
   21d38:	0bad000b 	.word	0x0bad000b

00021d3c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   21d3c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   21d3e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   21d40:	4b08      	ldr	r3, [pc, #32]	; (21d64 <z_sys_device_do_config_level+0x28>)
   21d42:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21d46:	3001      	adds	r0, #1
   21d48:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   21d4c:	42a5      	cmp	r5, r4
   21d4e:	d800      	bhi.n	21d52 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   21d50:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   21d52:	6823      	ldr	r3, [r4, #0]
   21d54:	4620      	mov	r0, r4
   21d56:	685b      	ldr	r3, [r3, #4]
   21d58:	4798      	blx	r3
		if (retval != 0) {
   21d5a:	b100      	cbz	r0, 21d5e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   21d5c:	6066      	str	r6, [r4, #4]
								info++) {
   21d5e:	340c      	adds	r4, #12
   21d60:	e7f4      	b.n	21d4c <z_sys_device_do_config_level+0x10>
   21d62:	bf00      	nop
   21d64:	00027a04 	.word	0x00027a04

00021d68 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   21d68:	4b10      	ldr	r3, [pc, #64]	; (21dac <z_impl_device_get_binding+0x44>)
{
   21d6a:	b570      	push	{r4, r5, r6, lr}
   21d6c:	4605      	mov	r5, r0
   21d6e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   21d70:	4c0f      	ldr	r4, [pc, #60]	; (21db0 <z_impl_device_get_binding+0x48>)
   21d72:	429c      	cmp	r4, r3
   21d74:	d104      	bne.n	21d80 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   21d76:	4c0e      	ldr	r4, [pc, #56]	; (21db0 <z_impl_device_get_binding+0x48>)
   21d78:	42b4      	cmp	r4, r6
   21d7a:	d109      	bne.n	21d90 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   21d7c:	2400      	movs	r4, #0
   21d7e:	e012      	b.n	21da6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   21d80:	6862      	ldr	r2, [r4, #4]
   21d82:	b11a      	cbz	r2, 21d8c <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   21d84:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   21d86:	6812      	ldr	r2, [r2, #0]
   21d88:	42aa      	cmp	r2, r5
   21d8a:	d00c      	beq.n	21da6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   21d8c:	340c      	adds	r4, #12
   21d8e:	e7f0      	b.n	21d72 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   21d90:	6863      	ldr	r3, [r4, #4]
   21d92:	b90b      	cbnz	r3, 21d98 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   21d94:	340c      	adds	r4, #12
   21d96:	e7ef      	b.n	21d78 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   21d98:	6823      	ldr	r3, [r4, #0]
   21d9a:	4628      	mov	r0, r5
   21d9c:	6819      	ldr	r1, [r3, #0]
   21d9e:	f002 fdf3 	bl	24988 <strcmp>
   21da2:	2800      	cmp	r0, #0
   21da4:	d1f6      	bne.n	21d94 <z_impl_device_get_binding+0x2c>
}
   21da6:	4620      	mov	r0, r4
   21da8:	bd70      	pop	{r4, r5, r6, pc}
   21daa:	bf00      	nop
   21dac:	2002d508 	.word	0x2002d508
   21db0:	2002d424 	.word	0x2002d424

00021db4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   21db4:	4b01      	ldr	r3, [pc, #4]	; (21dbc <z_impl_z_errno+0x8>)
   21db6:	6898      	ldr	r0, [r3, #8]
}
   21db8:	3054      	adds	r0, #84	; 0x54
   21dba:	4770      	bx	lr
   21dbc:	20025cfc 	.word	0x20025cfc

00021dc0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   21dc0:	b510      	push	{r4, lr}
   21dc2:	4604      	mov	r4, r0
	z_impl_log_panic();
   21dc4:	f7ed fc24 	bl	f610 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   21dc8:	2301      	movs	r3, #1
   21dca:	f04f 0100 	mov.w	r1, #0
   21dce:	4a08      	ldr	r2, [pc, #32]	; (21df0 <k_sys_fatal_error_handler+0x30>)
   21dd0:	f363 0102 	bfi	r1, r3, #0, #3
   21dd4:	4b07      	ldr	r3, [pc, #28]	; (21df4 <k_sys_fatal_error_handler+0x34>)
   21dd6:	f36f 01c5 	bfc	r1, #3, #3
   21dda:	1a9b      	subs	r3, r3, r2
   21ddc:	08db      	lsrs	r3, r3, #3
   21dde:	4806      	ldr	r0, [pc, #24]	; (21df8 <k_sys_fatal_error_handler+0x38>)
   21de0:	f363 118f 	bfi	r1, r3, #6, #10
   21de4:	f002 f8b7 	bl	23f56 <log_0>
	arch_system_halt(reason);
   21de8:	4620      	mov	r0, r4
   21dea:	f003 feb5 	bl	25b58 <arch_system_halt>
   21dee:	bf00      	nop
   21df0:	00026684 	.word	0x00026684
   21df4:	000266dc 	.word	0x000266dc
   21df8:	00028d39 	.word	0x00028d39

00021dfc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21dfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21e00:	4605      	mov	r5, r0
   21e02:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   21e04:	f000 fea4 	bl	22b50 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21e08:	2201      	movs	r2, #1
   21e0a:	f04f 0300 	mov.w	r3, #0
   21e0e:	4c29      	ldr	r4, [pc, #164]	; (21eb4 <z_fatal_error+0xb8>)
   21e10:	f362 0302 	bfi	r3, r2, #0, #3
   21e14:	4a28      	ldr	r2, [pc, #160]	; (21eb8 <z_fatal_error+0xbc>)
   21e16:	2d04      	cmp	r5, #4
   21e18:	eba4 0402 	sub.w	r4, r4, r2
   21e1c:	f36f 03c5 	bfc	r3, #3, #3
   21e20:	bf98      	it	ls
   21e22:	4a26      	ldrls	r2, [pc, #152]	; (21ebc <z_fatal_error+0xc0>)
   21e24:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21e28:	f364 138f 	bfi	r3, r4, #6, #10
   21e2c:	f8ad 3000 	strh.w	r3, [sp]
   21e30:	4607      	mov	r7, r0
   21e32:	f04f 0300 	mov.w	r3, #0
   21e36:	bf94      	ite	ls
   21e38:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   21e3c:	4a20      	ldrhi	r2, [pc, #128]	; (21ec0 <z_fatal_error+0xc4>)
   21e3e:	4629      	mov	r1, r5
   21e40:	4820      	ldr	r0, [pc, #128]	; (21ec4 <z_fatal_error+0xc8>)
   21e42:	f002 f8c1 	bl	23fc8 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21e46:	f8d8 301c 	ldr.w	r3, [r8, #28]
   21e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   21e4e:	b15b      	cbz	r3, 21e68 <z_fatal_error+0x6c>
		LOG_ERR("Fault during interrupt handling\n");
   21e50:	f04f 0100 	mov.w	r1, #0
   21e54:	2301      	movs	r3, #1
   21e56:	f363 0102 	bfi	r1, r3, #0, #3
   21e5a:	f36f 01c5 	bfc	r1, #3, #3
   21e5e:	f364 118f 	bfi	r1, r4, #6, #10
   21e62:	4819      	ldr	r0, [pc, #100]	; (21ec8 <z_fatal_error+0xcc>)
   21e64:	f002 f877 	bl	23f56 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21e68:	f04f 0600 	mov.w	r6, #0
   21e6c:	2301      	movs	r3, #1
   21e6e:	f363 0602 	bfi	r6, r3, #0, #3
   21e72:	f36f 06c5 	bfc	r6, #3, #3
	const char *thread_name = k_thread_name_get(thread);
   21e76:	4638      	mov	r0, r7
	LOG_ERR("Current thread: %p (%s)", thread,
   21e78:	f364 168f 	bfi	r6, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   21e7c:	f004 f898 	bl	25fb0 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   21e80:	b1b0      	cbz	r0, 21eb0 <z_fatal_error+0xb4>
   21e82:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   21e84:	4b11      	ldr	r3, [pc, #68]	; (21ecc <z_fatal_error+0xd0>)
   21e86:	2a00      	cmp	r2, #0
   21e88:	bf08      	it	eq
   21e8a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   21e8c:	f7ed fac2 	bl	f414 <log_strdup>
   21e90:	4633      	mov	r3, r6
   21e92:	4602      	mov	r2, r0
   21e94:	4639      	mov	r1, r7
   21e96:	480e      	ldr	r0, [pc, #56]	; (21ed0 <z_fatal_error+0xd4>)
   21e98:	f002 f87e 	bl	23f98 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   21e9c:	4641      	mov	r1, r8
   21e9e:	4628      	mov	r0, r5
   21ea0:	f7ff ff8e 	bl	21dc0 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   21ea4:	4638      	mov	r0, r7
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   21ea6:	b002      	add	sp, #8
   21ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21eac:	f7ee bd50 	b.w	10950 <z_impl_k_thread_abort>
		thread_name = "unknown";
   21eb0:	4806      	ldr	r0, [pc, #24]	; (21ecc <z_fatal_error+0xd0>)
   21eb2:	e7eb      	b.n	21e8c <z_fatal_error+0x90>
   21eb4:	000266dc 	.word	0x000266dc
   21eb8:	00026684 	.word	0x00026684
   21ebc:	00027a1c 	.word	0x00027a1c
   21ec0:	00028d92 	.word	0x00028d92
   21ec4:	00028da8 	.word	0x00028da8
   21ec8:	00028dd0 	.word	0x00028dd0
   21ecc:	00028da0 	.word	0x00028da0
   21ed0:	00028df1 	.word	0x00028df1

00021ed4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   21ed4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   21ed6:	4d0b      	ldr	r5, [pc, #44]	; (21f04 <idle+0x30>)
	__asm__ volatile(
   21ed8:	f04f 0220 	mov.w	r2, #32
   21edc:	f3ef 8311 	mrs	r3, BASEPRI
   21ee0:	f382 8811 	msr	BASEPRI, r2
   21ee4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   21ee8:	f004 f8c7 	bl	2607a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21eec:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   21eee:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21ef0:	2802      	cmp	r0, #2
   21ef2:	bfd8      	it	le
   21ef4:	4608      	movle	r0, r1
   21ef6:	f004 f8d0 	bl	2609a <z_set_timeout_expiry>
	_kernel.idle = ticks;
   21efa:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   21efc:	f7ee f92a 	bl	10154 <arch_cpu_idle>
   21f00:	e7ea      	b.n	21ed8 <idle+0x4>
   21f02:	bf00      	nop
   21f04:	20025cfc 	.word	0x20025cfc

00021f08 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   21f08:	4802      	ldr	r0, [pc, #8]	; (21f14 <z_bss_zero+0xc>)
   21f0a:	4a03      	ldr	r2, [pc, #12]	; (21f18 <z_bss_zero+0x10>)
   21f0c:	2100      	movs	r1, #0
   21f0e:	1a12      	subs	r2, r2, r0
   21f10:	f002 bd93 	b.w	24a3a <memset>
   21f14:	20020000 	.word	0x20020000
   21f18:	2002754c 	.word	0x2002754c

00021f1c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   21f1c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   21f1e:	4806      	ldr	r0, [pc, #24]	; (21f38 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   21f20:	4a06      	ldr	r2, [pc, #24]	; (21f3c <z_data_copy+0x20>)
   21f22:	4907      	ldr	r1, [pc, #28]	; (21f40 <z_data_copy+0x24>)
   21f24:	1a12      	subs	r2, r2, r0
   21f26:	f002 fd5b 	bl	249e0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   21f2e:	4a05      	ldr	r2, [pc, #20]	; (21f44 <z_data_copy+0x28>)
   21f30:	4905      	ldr	r1, [pc, #20]	; (21f48 <z_data_copy+0x2c>)
   21f32:	4806      	ldr	r0, [pc, #24]	; (21f4c <z_data_copy+0x30>)
   21f34:	f002 bd54 	b.w	249e0 <memcpy>
   21f38:	2002d3a4 	.word	0x2002d3a4
   21f3c:	2002d5fc 	.word	0x2002d5fc
   21f40:	00028e74 	.word	0x00028e74
   21f44:	00000000 	.word	0x00000000
   21f48:	00028e74 	.word	0x00028e74
   21f4c:	20020000 	.word	0x20020000

00021f50 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21f50:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21f52:	2002      	movs	r0, #2
   21f54:	f7ff fef2 	bl	21d3c <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   21f58:	4807      	ldr	r0, [pc, #28]	; (21f78 <bg_thread_main+0x28>)
   21f5a:	f001 ffc9 	bl	23ef0 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   21f5e:	2003      	movs	r0, #3
   21f60:	f7ff feec 	bl	21d3c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   21f64:	f000 ff1c 	bl	22da0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   21f68:	f001 fc28 	bl	237bc <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21f6c:	4a03      	ldr	r2, [pc, #12]	; (21f7c <bg_thread_main+0x2c>)
   21f6e:	7b13      	ldrb	r3, [r2, #12]
   21f70:	f023 0301 	bic.w	r3, r3, #1
   21f74:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21f76:	bd08      	pop	{r3, pc}
   21f78:	00028e09 	.word	0x00028e09
   21f7c:	20021be8 	.word	0x20021be8

00021f80 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   21f80:	b580      	push	{r7, lr}
   21f82:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   21f84:	f7ed f9aa 	bl	f2dc <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   21f88:	4b34      	ldr	r3, [pc, #208]	; (2205c <z_cstart+0xdc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21f8a:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21f8e:	2400      	movs	r4, #0
   21f90:	23e0      	movs	r3, #224	; 0xe0
   21f92:	4d33      	ldr	r5, [pc, #204]	; (22060 <z_cstart+0xe0>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   21f94:	2701      	movs	r7, #1
   21f96:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21f9a:	77ec      	strb	r4, [r5, #31]
   21f9c:	762c      	strb	r4, [r5, #24]
   21f9e:	766c      	strb	r4, [r5, #25]
   21fa0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21fa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   21fa4:	4e2f      	ldr	r6, [pc, #188]	; (22064 <z_cstart+0xe4>)
   21fa6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21faa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21fac:	f7ee fcbc 	bl	10928 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21fb0:	f7ee f8ca 	bl	10148 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21fb8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21fba:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   21fbc:	ab06      	add	r3, sp, #24
   21fbe:	22b0      	movs	r2, #176	; 0xb0
   21fc0:	4621      	mov	r1, r4
   21fc2:	4618      	mov	r0, r3
   21fc4:	f002 fd39 	bl	24a3a <memset>
	_current = &dummy_thread;
   21fc8:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21fca:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   21fcc:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21fd0:	f7ff feb4 	bl	21d3c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21fd4:	4638      	mov	r0, r7
   21fd6:	f7ff feb1 	bl	21d3c <z_sys_device_do_config_level>
	z_sched_init();
   21fda:	f000 fd37 	bl	22a4c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21fde:	4b22      	ldr	r3, [pc, #136]	; (22068 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   21fe0:	4d22      	ldr	r5, [pc, #136]	; (2206c <z_cstart+0xec>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21fe2:	e9cd 7304 	strd	r7, r3, [sp, #16]
   21fe6:	2307      	movs	r3, #7
   21fe8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   21fec:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21ff0:	e9cd 4400 	strd	r4, r4, [sp]
   21ff4:	4b1e      	ldr	r3, [pc, #120]	; (22070 <z_cstart+0xf0>)
   21ff6:	491f      	ldr	r1, [pc, #124]	; (22074 <z_cstart+0xf4>)
   21ff8:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   21ffa:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   21ffc:	f000 fe52 	bl	22ca4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22000:	7b6b      	ldrb	r3, [r5, #13]
   22002:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22006:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2200a:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2200c:	d104      	bne.n	22018 <z_cstart+0x98>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   2200e:	69ab      	ldr	r3, [r5, #24]
   22010:	b913      	cbnz	r3, 22018 <z_cstart+0x98>
		z_add_thread_to_ready_q(thread);
   22012:	4628      	mov	r0, r5
   22014:	f000 fb56 	bl	226c4 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   22018:	4b17      	ldr	r3, [pc, #92]	; (22078 <z_cstart+0xf8>)
   2201a:	2201      	movs	r2, #1
   2201c:	9305      	str	r3, [sp, #20]
   2201e:	230f      	movs	r3, #15
   22020:	e9cd 3203 	strd	r3, r2, [sp, #12]
   22024:	2300      	movs	r3, #0
   22026:	4d15      	ldr	r5, [pc, #84]	; (2207c <z_cstart+0xfc>)
   22028:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2202c:	9300      	str	r3, [sp, #0]
   2202e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   22032:	4b13      	ldr	r3, [pc, #76]	; (22080 <z_cstart+0x100>)
   22034:	4913      	ldr	r1, [pc, #76]	; (22084 <z_cstart+0x104>)
   22036:	4628      	mov	r0, r5
   22038:	f000 fe34 	bl	22ca4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2203c:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   2203e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   22042:	f023 0304 	bic.w	r3, r3, #4
   22046:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   22048:	4b0f      	ldr	r3, [pc, #60]	; (22088 <z_cstart+0x108>)
   2204a:	490a      	ldr	r1, [pc, #40]	; (22074 <z_cstart+0xf4>)
	list->tail = (sys_dnode_t *)list;
   2204c:	e9c6 3306 	strd	r3, r3, [r6, #24]
   22050:	4806      	ldr	r0, [pc, #24]	; (2206c <z_cstart+0xec>)
   22052:	4b07      	ldr	r3, [pc, #28]	; (22070 <z_cstart+0xf0>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   22054:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   22056:	f7ee f84d 	bl	100f4 <arch_switch_to_main_thread>
   2205a:	bf00      	nop
   2205c:	20029990 	.word	0x20029990
   22060:	e000ed00 	.word	0xe000ed00
   22064:	20025cfc 	.word	0x20025cfc
   22068:	00028e54 	.word	0x00028e54
   2206c:	20021be8 	.word	0x20021be8
   22070:	00021f51 	.word	0x00021f51
   22074:	20028050 	.word	0x20028050
   22078:	00028e59 	.word	0x00028e59
   2207c:	20021b38 	.word	0x20021b38
   22080:	00021ed5 	.word	0x00021ed5
   22084:	20029050 	.word	0x20029050
   22088:	20025d14 	.word	0x20025d14

0002208c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2208c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   2208e:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22090:	4b0a      	ldr	r3, [pc, #40]	; (220bc <init_mem_slab_module+0x30>)
   22092:	480b      	ldr	r0, [pc, #44]	; (220c0 <init_mem_slab_module+0x34>)
   22094:	4283      	cmp	r3, r0
   22096:	d301      	bcc.n	2209c <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   22098:	2000      	movs	r0, #0
   2209a:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   2209c:	2100      	movs	r1, #0
	p = slab->buffer;
   2209e:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   220a0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   220a2:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   220a4:	42a9      	cmp	r1, r5
   220a6:	d101      	bne.n	220ac <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   220a8:	331c      	adds	r3, #28
   220aa:	e7f3      	b.n	22094 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   220ac:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   220ae:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   220b0:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   220b2:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   220b4:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   220b6:	4432      	add	r2, r6
   220b8:	e7f4      	b.n	220a4 <init_mem_slab_module+0x18>
   220ba:	bf00      	nop
   220bc:	2002d508 	.word	0x2002d508
   220c0:	2002d524 	.word	0x2002d524

000220c4 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   220c4:	b510      	push	{r4, lr}
   220c6:	4613      	mov	r3, r2
   220c8:	460c      	mov	r4, r1
   220ca:	f04f 0220 	mov.w	r2, #32
   220ce:	f3ef 8111 	mrs	r1, BASEPRI
   220d2:	f382 8811 	msr	BASEPRI, r2
   220d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   220da:	6942      	ldr	r2, [r0, #20]
   220dc:	b162      	cbz	r2, 220f8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   220de:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   220e0:	6943      	ldr	r3, [r0, #20]
   220e2:	681b      	ldr	r3, [r3, #0]
   220e4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   220e6:	6983      	ldr	r3, [r0, #24]
   220e8:	3301      	adds	r3, #1
   220ea:	6183      	str	r3, [r0, #24]
		result = 0;
   220ec:	2000      	movs	r0, #0
	__asm__ volatile(
   220ee:	f381 8811 	msr	BASEPRI, r1
   220f2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   220f6:	e00d      	b.n	22114 <k_mem_slab_alloc+0x50>
	} else if (timeout == K_NO_WAIT) {
   220f8:	b91b      	cbnz	r3, 22102 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   220fa:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   220fc:	f06f 000b 	mvn.w	r0, #11
   22100:	e7f5      	b.n	220ee <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   22102:	4602      	mov	r2, r0
   22104:	4804      	ldr	r0, [pc, #16]	; (22118 <k_mem_slab_alloc+0x54>)
   22106:	f000 fc1d 	bl	22944 <z_pend_curr>
		if (result == 0) {
   2210a:	b918      	cbnz	r0, 22114 <k_mem_slab_alloc+0x50>
			*mem = _current->base.swap_data;
   2210c:	4b03      	ldr	r3, [pc, #12]	; (2211c <k_mem_slab_alloc+0x58>)
   2210e:	689b      	ldr	r3, [r3, #8]
   22110:	695b      	ldr	r3, [r3, #20]
   22112:	6023      	str	r3, [r4, #0]
}
   22114:	bd10      	pop	{r4, pc}
   22116:	bf00      	nop
   22118:	2002740a 	.word	0x2002740a
   2211c:	20025cfc 	.word	0x20025cfc

00022120 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   22120:	b570      	push	{r4, r5, r6, lr}
   22122:	4604      	mov	r4, r0
   22124:	460d      	mov	r5, r1
	__asm__ volatile(
   22126:	f04f 0320 	mov.w	r3, #32
   2212a:	f3ef 8611 	mrs	r6, BASEPRI
   2212e:	f383 8811 	msr	BASEPRI, r3
   22132:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22136:	f003 fee3 	bl	25f00 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   2213a:	b180      	cbz	r0, 2215e <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2213c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2213e:	682a      	ldr	r2, [r5, #0]
   22140:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22142:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22144:	7b42      	ldrb	r2, [r0, #13]
   22146:	06d2      	lsls	r2, r2, #27
   22148:	d103      	bne.n	22152 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   2214a:	6983      	ldr	r3, [r0, #24]
   2214c:	b90b      	cbnz	r3, 22152 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   2214e:	f000 fab9 	bl	226c4 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   22152:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   22154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   22158:	4807      	ldr	r0, [pc, #28]	; (22178 <k_mem_slab_free+0x58>)
   2215a:	f003 be5b 	b.w	25e14 <z_reschedule>
		**(char ***)mem = slab->free_list;
   2215e:	682b      	ldr	r3, [r5, #0]
   22160:	6962      	ldr	r2, [r4, #20]
   22162:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   22164:	682b      	ldr	r3, [r5, #0]
   22166:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   22168:	69a3      	ldr	r3, [r4, #24]
   2216a:	3b01      	subs	r3, #1
   2216c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2216e:	f386 8811 	msr	BASEPRI, r6
   22172:	f3bf 8f6f 	isb	sy
}
   22176:	bd70      	pop	{r4, r5, r6, pc}
   22178:	2002740a 	.word	0x2002740a

0002217c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   2217c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2217e:	4c07      	ldr	r4, [pc, #28]	; (2219c <init_static_pools+0x20>)
   22180:	4d07      	ldr	r5, [pc, #28]	; (221a0 <init_static_pools+0x24>)
   22182:	42ac      	cmp	r4, r5
   22184:	d301      	bcc.n	2218a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   22186:	2000      	movs	r0, #0
   22188:	bd38      	pop	{r3, r4, r5, pc}
   2218a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   2218e:	4620      	mov	r0, r4
   22190:	e9c4 3305 	strd	r3, r3, [r4, #20]
   22194:	f001 fb66 	bl	23864 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   22198:	341c      	adds	r4, #28
   2219a:	e7f2      	b.n	22182 <init_static_pools+0x6>
   2219c:	2002d524 	.word	0x2002d524
   221a0:	2002d540 	.word	0x2002d540

000221a4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   221a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   221a8:	1e1c      	subs	r4, r3, #0
{
   221aa:	b085      	sub	sp, #20
   221ac:	4607      	mov	r7, r0
   221ae:	460d      	mov	r5, r1
   221b0:	4692      	mov	sl, r2
	if (timeout > 0) {
   221b2:	dd3b      	ble.n	2222c <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   221b4:	f003 ff8f 	bl	260d6 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   221b8:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   221bc:	4b1d      	ldr	r3, [pc, #116]	; (22234 <k_mem_pool_alloc+0x90>)
   221be:	4e1e      	ldr	r6, [pc, #120]	; (22238 <k_mem_pool_alloc+0x94>)
   221c0:	1afb      	subs	r3, r7, r3
   221c2:	109b      	asrs	r3, r3, #2
   221c4:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   221c6:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   221ca:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   221cc:	ab03      	add	r3, sp, #12
   221ce:	aa02      	add	r2, sp, #8
   221d0:	9500      	str	r5, [sp, #0]
   221d2:	4651      	mov	r1, sl
   221d4:	4638      	mov	r0, r7
   221d6:	f001 fb91 	bl	238fc <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   221da:	796b      	ldrb	r3, [r5, #5]
   221dc:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   221de:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   221e0:	f362 0303 	bfi	r3, r2, #0, #4
   221e4:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   221e6:	686b      	ldr	r3, [r5, #4]
   221e8:	9a03      	ldr	r2, [sp, #12]
   221ea:	f362 331f 	bfi	r3, r2, #12, #20
   221ee:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   221f0:	b1c8      	cbz	r0, 22226 <k_mem_pool_alloc+0x82>
   221f2:	b1c4      	cbz	r4, 22226 <k_mem_pool_alloc+0x82>
   221f4:	f110 0f0c 	cmn.w	r0, #12
   221f8:	d115      	bne.n	22226 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   221fa:	f04f 0320 	mov.w	r3, #32
   221fe:	f3ef 8011 	mrs	r0, BASEPRI
   22202:	f383 8811 	msr	BASEPRI, r3
   22206:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   2220a:	4622      	mov	r2, r4
   2220c:	4659      	mov	r1, fp
   2220e:	f000 fb75 	bl	228fc <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   22212:	1c63      	adds	r3, r4, #1
   22214:	d0da      	beq.n	221cc <k_mem_pool_alloc+0x28>
   22216:	f003 ff5e 	bl	260d6 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   2221a:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   2221e:	2c00      	cmp	r4, #0
   22220:	dcd4      	bgt.n	221cc <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   22222:	f06f 000a 	mvn.w	r0, #10
}
   22226:	b005      	add	sp, #20
   22228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   2222c:	f04f 0800 	mov.w	r8, #0
   22230:	e7c4      	b.n	221bc <k_mem_pool_alloc+0x18>
   22232:	bf00      	nop
   22234:	2002d524 	.word	0x2002d524
   22238:	b6db6db7 	.word	0xb6db6db7

0002223c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   2223c:	b570      	push	{r4, r5, r6, lr}
   2223e:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   22240:	6802      	ldr	r2, [r0, #0]
   22242:	7841      	ldrb	r1, [r0, #1]
   22244:	4e11      	ldr	r6, [pc, #68]	; (2228c <k_mem_pool_free_id+0x50>)
   22246:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2224a:	00a4      	lsls	r4, r4, #2
   2224c:	0b12      	lsrs	r2, r2, #12
   2224e:	f001 010f 	and.w	r1, r1, #15
   22252:	1930      	adds	r0, r6, r4
   22254:	f001 fc0a 	bl	23a6c <z_sys_mem_pool_block_free>
   22258:	f04f 0320 	mov.w	r3, #32
   2225c:	f3ef 8511 	mrs	r5, BASEPRI
   22260:	f383 8811 	msr	BASEPRI, r3
   22264:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   22268:	f104 0014 	add.w	r0, r4, #20
   2226c:	4430      	add	r0, r6
   2226e:	f003 fe74 	bl	25f5a <z_unpend_all>

	if (need_sched != 0) {
   22272:	b128      	cbz	r0, 22280 <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   22274:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   22276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2227a:	4805      	ldr	r0, [pc, #20]	; (22290 <k_mem_pool_free_id+0x54>)
   2227c:	f003 bdca 	b.w	25e14 <z_reschedule>
	__asm__ volatile(
   22280:	f385 8811 	msr	BASEPRI, r5
   22284:	f3bf 8f6f 	isb	sy
}
   22288:	bd70      	pop	{r4, r5, r6, pc}
   2228a:	bf00      	nop
   2228c:	2002d524 	.word	0x2002d524
   22290:	2002740a 	.word	0x2002740a

00022294 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   22294:	4601      	mov	r1, r0
   22296:	4801      	ldr	r0, [pc, #4]	; (2229c <k_malloc+0x8>)
   22298:	f003 bc7b 	b.w	25b92 <k_mem_pool_malloc>
   2229c:	2002d524 	.word	0x2002d524

000222a0 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   222a0:	4b03      	ldr	r3, [pc, #12]	; (222b0 <z_thread_malloc+0x10>)
{
   222a2:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   222a4:	689b      	ldr	r3, [r3, #8]
   222a6:	6e18      	ldr	r0, [r3, #96]	; 0x60
   222a8:	b108      	cbz	r0, 222ae <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   222aa:	f003 bc72 	b.w	25b92 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   222ae:	4770      	bx	lr
   222b0:	20025cfc 	.word	0x20025cfc

000222b4 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   222b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   222b8:	4613      	mov	r3, r2
   222ba:	4604      	mov	r4, r0
   222bc:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   222be:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   222c2:	f04f 0220 	mov.w	r2, #32
   222c6:	f3ef 8611 	mrs	r6, BASEPRI
   222ca:	f382 8811 	msr	BASEPRI, r2
   222ce:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   222d2:	6a01      	ldr	r1, [r0, #32]
   222d4:	68c2      	ldr	r2, [r0, #12]
   222d6:	4291      	cmp	r1, r2
   222d8:	d22e      	bcs.n	22338 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   222da:	f003 fe11 	bl	25f00 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   222de:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   222e0:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   222e2:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   222e4:	b198      	cbz	r0, 2230e <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   222e6:	6940      	ldr	r0, [r0, #20]
   222e8:	f002 fb7a 	bl	249e0 <memcpy>
   222ec:	2300      	movs	r3, #0
   222ee:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   222f0:	7b6b      	ldrb	r3, [r5, #13]
   222f2:	06db      	lsls	r3, r3, #27
   222f4:	d104      	bne.n	22300 <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   222f6:	69ab      	ldr	r3, [r5, #24]
   222f8:	b913      	cbnz	r3, 22300 <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   222fa:	4628      	mov	r0, r5
   222fc:	f000 f9e2 	bl	226c4 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   22300:	4640      	mov	r0, r8
   22302:	4631      	mov	r1, r6
   22304:	f003 fd86 	bl	25e14 <z_reschedule>
			return 0;
   22308:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   2230e:	69e0      	ldr	r0, [r4, #28]
   22310:	f002 fb66 	bl	249e0 <memcpy>
		result = 0;
   22314:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   22316:	69e3      	ldr	r3, [r4, #28]
   22318:	68a2      	ldr	r2, [r4, #8]
   2231a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2231c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   2231e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   22320:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22322:	bf04      	itt	eq
   22324:	6923      	ldreq	r3, [r4, #16]
   22326:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   22328:	6a23      	ldr	r3, [r4, #32]
   2232a:	3301      	adds	r3, #1
   2232c:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   2232e:	f386 8811 	msr	BASEPRI, r6
   22332:	f3bf 8f6f 	isb	sy
	return result;
   22336:	e7e8      	b.n	2230a <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   22338:	b14b      	cbz	r3, 2234e <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   2233a:	4a06      	ldr	r2, [pc, #24]	; (22354 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2233c:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   2233e:	6892      	ldr	r2, [r2, #8]
   22340:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22342:	4602      	mov	r2, r0
   22344:	4640      	mov	r0, r8
}
   22346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2234a:	f000 bafb 	b.w	22944 <z_pend_curr>
		result = -ENOMSG;
   2234e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   22352:	e7ec      	b.n	2232e <z_impl_k_msgq_put+0x7a>
   22354:	20025cfc 	.word	0x20025cfc

00022358 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   22358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2235c:	4604      	mov	r4, r0
   2235e:	4613      	mov	r3, r2
   22360:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   22362:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   22366:	f04f 0220 	mov.w	r2, #32
   2236a:	f3ef 8611 	mrs	r6, BASEPRI
   2236e:	f382 8811 	msr	BASEPRI, r2
   22372:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   22376:	6a22      	ldr	r2, [r4, #32]
   22378:	2a00      	cmp	r2, #0
   2237a:	d037      	beq.n	223ec <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   2237c:	68a2      	ldr	r2, [r4, #8]
   2237e:	69a1      	ldr	r1, [r4, #24]
   22380:	f002 fb2e 	bl	249e0 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   22384:	69a3      	ldr	r3, [r4, #24]
   22386:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22388:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   2238a:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   2238c:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   2238e:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   22390:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   22392:	bf04      	itt	eq
   22394:	6923      	ldreq	r3, [r4, #16]
   22396:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   22398:	6a23      	ldr	r3, [r4, #32]
   2239a:	3b01      	subs	r3, #1
   2239c:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2239e:	f003 fdaf 	bl	25f00 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   223a2:	4605      	mov	r5, r0
   223a4:	2800      	cmp	r0, #0
   223a6:	d02e      	beq.n	22406 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   223a8:	68a2      	ldr	r2, [r4, #8]
   223aa:	6941      	ldr	r1, [r0, #20]
   223ac:	69e0      	ldr	r0, [r4, #28]
   223ae:	f002 fb17 	bl	249e0 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   223b2:	69e3      	ldr	r3, [r4, #28]
   223b4:	68a2      	ldr	r2, [r4, #8]
   223b6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   223b8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   223ba:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   223bc:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   223be:	bf04      	itt	eq
   223c0:	6923      	ldreq	r3, [r4, #16]
   223c2:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   223c4:	6a23      	ldr	r3, [r4, #32]
   223c6:	3301      	adds	r3, #1
   223c8:	6223      	str	r3, [r4, #32]
   223ca:	2300      	movs	r3, #0
   223cc:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   223ce:	7b6b      	ldrb	r3, [r5, #13]
   223d0:	06db      	lsls	r3, r3, #27
   223d2:	d104      	bne.n	223de <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   223d4:	69ab      	ldr	r3, [r5, #24]
   223d6:	b913      	cbnz	r3, 223de <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   223d8:	4628      	mov	r0, r5
   223da:	f000 f973 	bl	226c4 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   223de:	4638      	mov	r0, r7
   223e0:	4631      	mov	r1, r6
   223e2:	f003 fd17 	bl	25e14 <z_reschedule>
			return 0;
   223e6:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   223e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   223ec:	b14b      	cbz	r3, 22402 <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   223ee:	4a08      	ldr	r2, [pc, #32]	; (22410 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   223f0:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   223f2:	6892      	ldr	r2, [r2, #8]
   223f4:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   223f6:	4622      	mov	r2, r4
   223f8:	4631      	mov	r1, r6
}
   223fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   223fe:	f000 baa1 	b.w	22944 <z_pend_curr>
		result = -ENOMSG;
   22402:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   22406:	f386 8811 	msr	BASEPRI, r6
   2240a:	f3bf 8f6f 	isb	sy
	return result;
   2240e:	e7eb      	b.n	223e8 <z_impl_k_msgq_get+0x90>
   22410:	20025cfc 	.word	0x20025cfc

00022414 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   22414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22416:	4604      	mov	r4, r0
   22418:	460f      	mov	r7, r1
	__asm__ volatile(
   2241a:	f04f 0320 	mov.w	r3, #32
   2241e:	f3ef 8511 	mrs	r5, BASEPRI
   22422:	f383 8811 	msr	BASEPRI, r3
   22426:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2242a:	68c2      	ldr	r2, [r0, #12]
   2242c:	4930      	ldr	r1, [pc, #192]	; (224f0 <z_impl_k_mutex_lock+0xdc>)
   2242e:	b15a      	cbz	r2, 22448 <z_impl_k_mutex_lock+0x34>
   22430:	6880      	ldr	r0, [r0, #8]
   22432:	688e      	ldr	r6, [r1, #8]
   22434:	42b0      	cmp	r0, r6
   22436:	d015      	beq.n	22464 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   22438:	b9b7      	cbnz	r7, 22468 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   2243a:	f385 8811 	msr	BASEPRI, r5
   2243e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   22442:	f06f 000f 	mvn.w	r0, #15
   22446:	e00c      	b.n	22462 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   22448:	688b      	ldr	r3, [r1, #8]
   2244a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2244e:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   22450:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   22452:	3201      	adds	r2, #1
   22454:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   22456:	60a3      	str	r3, [r4, #8]
   22458:	f385 8811 	msr	BASEPRI, r5
   2245c:	f3bf 8f6f 	isb	sy
		return 0;
   22460:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   22462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   22464:	6923      	ldr	r3, [r4, #16]
   22466:	e7f2      	b.n	2244e <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   22468:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2246c:	f996 100e 	ldrsb.w	r1, [r6, #14]
   22470:	4299      	cmp	r1, r3
   22472:	bfa8      	it	ge
   22474:	4619      	movge	r1, r3
   22476:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2247a:	4299      	cmp	r1, r3
   2247c:	da2b      	bge.n	224d6 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   2247e:	f000 faa3 	bl	229c8 <z_set_prio>
   22482:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   22484:	463b      	mov	r3, r7
   22486:	4622      	mov	r2, r4
   22488:	4629      	mov	r1, r5
   2248a:	481a      	ldr	r0, [pc, #104]	; (224f4 <z_impl_k_mutex_lock+0xe0>)
   2248c:	f000 fa5a 	bl	22944 <z_pend_curr>
	if (got_mutex == 0) {
   22490:	2800      	cmp	r0, #0
   22492:	d0e6      	beq.n	22462 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   22494:	f04f 0320 	mov.w	r3, #32
   22498:	f3ef 8511 	mrs	r5, BASEPRI
   2249c:	f383 8811 	msr	BASEPRI, r3
   224a0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   224a4:	6823      	ldr	r3, [r4, #0]
   224a6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   224a8:	429c      	cmp	r4, r3
   224aa:	d007      	beq.n	224bc <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   224ac:	b133      	cbz	r3, 224bc <z_impl_k_mutex_lock+0xa8>
   224ae:	f993 300e 	ldrsb.w	r3, [r3, #14]
   224b2:	4299      	cmp	r1, r3
   224b4:	bfa8      	it	ge
   224b6:	4619      	movge	r1, r3
   224b8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   224bc:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   224be:	f990 300e 	ldrsb.w	r3, [r0, #14]
   224c2:	4299      	cmp	r1, r3
   224c4:	d109      	bne.n	224da <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   224c6:	b16e      	cbz	r6, 224e4 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   224c8:	4629      	mov	r1, r5
   224ca:	480a      	ldr	r0, [pc, #40]	; (224f4 <z_impl_k_mutex_lock+0xe0>)
   224cc:	f003 fca2 	bl	25e14 <z_reschedule>
	return -EAGAIN;
   224d0:	f06f 000a 	mvn.w	r0, #10
   224d4:	e7c5      	b.n	22462 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   224d6:	2600      	movs	r6, #0
   224d8:	e7d4      	b.n	22484 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   224da:	f000 fa75 	bl	229c8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   224de:	2800      	cmp	r0, #0
   224e0:	d1f2      	bne.n	224c8 <z_impl_k_mutex_lock+0xb4>
   224e2:	e7f0      	b.n	224c6 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   224e4:	f385 8811 	msr	BASEPRI, r5
   224e8:	f3bf 8f6f 	isb	sy
   224ec:	e7f0      	b.n	224d0 <z_impl_k_mutex_lock+0xbc>
   224ee:	bf00      	nop
   224f0:	20025cfc 	.word	0x20025cfc
   224f4:	2002740a 	.word	0x2002740a

000224f8 <z_impl_k_mutex_unlock>:
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   224f8:	4b1e      	ldr	r3, [pc, #120]	; (22574 <z_impl_k_mutex_unlock+0x7c>)
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   224fa:	b570      	push	{r4, r5, r6, lr}
   224fc:	689a      	ldr	r2, [r3, #8]
   224fe:	4604      	mov	r4, r0
   22500:	7bd3      	ldrb	r3, [r2, #15]
   22502:	3b01      	subs	r3, #1
   22504:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   22506:	68c3      	ldr	r3, [r0, #12]
   22508:	2b01      	cmp	r3, #1
   2250a:	d005      	beq.n	22518 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   2250c:	3b01      	subs	r3, #1
   2250e:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   22510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   22514:	f000 b8ba 	b.w	2268c <k_sched_unlock>
	__asm__ volatile(
   22518:	f04f 0320 	mov.w	r3, #32
   2251c:	f3ef 8611 	mrs	r6, BASEPRI
   22520:	f383 8811 	msr	BASEPRI, r3
   22524:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   22528:	6901      	ldr	r1, [r0, #16]
   2252a:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   2252c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22530:	4299      	cmp	r1, r3
   22532:	d001      	beq.n	22538 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   22534:	f000 fa48 	bl	229c8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   22538:	4620      	mov	r0, r4
   2253a:	f003 fce1 	bl	25f00 <z_unpend_first_thread>
   2253e:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   22540:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   22542:	b180      	cbz	r0, 22566 <z_impl_k_mutex_unlock+0x6e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22544:	7b43      	ldrb	r3, [r0, #13]
   22546:	06db      	lsls	r3, r3, #27
   22548:	d103      	bne.n	22552 <z_impl_k_mutex_unlock+0x5a>
	if (z_is_thread_ready(thread)) {
   2254a:	6983      	ldr	r3, [r0, #24]
   2254c:	b90b      	cbnz	r3, 22552 <z_impl_k_mutex_unlock+0x5a>
		z_add_thread_to_ready_q(thread);
   2254e:	f000 f8b9 	bl	226c4 <z_add_thread_to_ready_q>
	__asm__ volatile(
   22552:	f386 8811 	msr	BASEPRI, r6
   22556:	f3bf 8f6f 	isb	sy
   2255a:	2300      	movs	r3, #0
   2255c:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   2255e:	f995 300e 	ldrsb.w	r3, [r5, #14]
   22562:	6123      	str	r3, [r4, #16]
   22564:	e7d4      	b.n	22510 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   22566:	60e0      	str	r0, [r4, #12]
   22568:	f386 8811 	msr	BASEPRI, r6
   2256c:	f3bf 8f6f 	isb	sy
   22570:	e7ce      	b.n	22510 <z_impl_k_mutex_unlock+0x18>
   22572:	bf00      	nop
   22574:	20025cfc 	.word	0x20025cfc

00022578 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   22578:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2257a:	4c08      	ldr	r4, [pc, #32]	; (2259c <z_reset_time_slice+0x24>)
   2257c:	6823      	ldr	r3, [r4, #0]
   2257e:	b15b      	cbz	r3, 22598 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   22580:	f7ed fc94 	bl	feac <z_clock_elapsed>
   22584:	6823      	ldr	r3, [r4, #0]
   22586:	4a06      	ldr	r2, [pc, #24]	; (225a0 <z_reset_time_slice+0x28>)
   22588:	4418      	add	r0, r3
   2258a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2258c:	2100      	movs	r1, #0
	}
}
   2258e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   22592:	4618      	mov	r0, r3
   22594:	f003 bd81 	b.w	2609a <z_set_timeout_expiry>
}
   22598:	bd10      	pop	{r4, pc}
   2259a:	bf00      	nop
   2259c:	20025d38 	.word	0x20025d38
   225a0:	20025cfc 	.word	0x20025cfc

000225a4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   225a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225a6:	460d      	mov	r5, r1
	__asm__ volatile(
   225a8:	f04f 0320 	mov.w	r3, #32
   225ac:	f3ef 8411 	mrs	r4, BASEPRI
   225b0:	f383 8811 	msr	BASEPRI, r3
   225b4:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   225b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   225bc:	f240 36e7 	movw	r6, #999	; 0x3e7
   225c0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   225c2:	2200      	movs	r2, #0
   225c4:	fbe1 6700 	umlal	r6, r7, r1, r0
   225c8:	4b09      	ldr	r3, [pc, #36]	; (225f0 <k_sched_time_slice_set+0x4c>)
   225ca:	4630      	mov	r0, r6
   225cc:	611a      	str	r2, [r3, #16]
   225ce:	4639      	mov	r1, r7
   225d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   225d4:	2300      	movs	r3, #0
   225d6:	f7e9 ffdf 	bl	c598 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   225da:	4b06      	ldr	r3, [pc, #24]	; (225f4 <k_sched_time_slice_set+0x50>)
   225dc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   225de:	4b06      	ldr	r3, [pc, #24]	; (225f8 <k_sched_time_slice_set+0x54>)
   225e0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   225e2:	f7ff ffc9 	bl	22578 <z_reset_time_slice>
	__asm__ volatile(
   225e6:	f384 8811 	msr	BASEPRI, r4
   225ea:	f3bf 8f6f 	isb	sy
	}
}
   225ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   225f0:	20025cfc 	.word	0x20025cfc
   225f4:	20025d38 	.word	0x20025d38
   225f8:	20025d34 	.word	0x20025d34

000225fc <k_sched_lock>:
	__asm__ volatile(
   225fc:	f04f 0320 	mov.w	r3, #32
   22600:	f3ef 8111 	mrs	r1, BASEPRI
   22604:	f383 8811 	msr	BASEPRI, r3
   22608:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2260c:	4b04      	ldr	r3, [pc, #16]	; (22620 <k_sched_lock+0x24>)
   2260e:	689a      	ldr	r2, [r3, #8]
   22610:	7bd3      	ldrb	r3, [r2, #15]
   22612:	3b01      	subs	r3, #1
   22614:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   22616:	f381 8811 	msr	BASEPRI, r1
   2261a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2261e:	4770      	bx	lr
   22620:	20025cfc 	.word	0x20025cfc

00022624 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   22624:	4b09      	ldr	r3, [pc, #36]	; (2264c <z_priq_dumb_remove+0x28>)
   22626:	f103 0228 	add.w	r2, r3, #40	; 0x28
   2262a:	4282      	cmp	r2, r0
   2262c:	d105      	bne.n	2263a <z_priq_dumb_remove+0x16>
   2262e:	689b      	ldr	r3, [r3, #8]
   22630:	428b      	cmp	r3, r1
   22632:	d102      	bne.n	2263a <z_priq_dumb_remove+0x16>
   22634:	7b4b      	ldrb	r3, [r1, #13]
   22636:	06db      	lsls	r3, r3, #27
   22638:	d107      	bne.n	2264a <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2263a:	e9d1 2300 	ldrd	r2, r3, [r1]
   2263e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   22640:	680a      	ldr	r2, [r1, #0]
   22642:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   22644:	2300      	movs	r3, #0
	node->prev = NULL;
   22646:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2264a:	4770      	bx	lr
   2264c:	20025cfc 	.word	0x20025cfc

00022650 <update_cache>:
{
   22650:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   22652:	4c0d      	ldr	r4, [pc, #52]	; (22688 <update_cache+0x38>)
{
   22654:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   22656:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2265a:	f003 fc1a 	bl	25e92 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   2265e:	4605      	mov	r5, r0
   22660:	b900      	cbnz	r0, 22664 <update_cache+0x14>
   22662:	68e5      	ldr	r5, [r4, #12]
   22664:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
   22666:	b94a      	cbnz	r2, 2267c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   22668:	7b5a      	ldrb	r2, [r3, #13]
   2266a:	06d2      	lsls	r2, r2, #27
   2266c:	d106      	bne.n	2267c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2266e:	69aa      	ldr	r2, [r5, #24]
   22670:	b922      	cbnz	r2, 2267c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   22672:	89da      	ldrh	r2, [r3, #14]
   22674:	2a7f      	cmp	r2, #127	; 0x7f
   22676:	d901      	bls.n	2267c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   22678:	6263      	str	r3, [r4, #36]	; 0x24
}
   2267a:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   2267c:	429d      	cmp	r5, r3
   2267e:	d001      	beq.n	22684 <update_cache+0x34>
			z_reset_time_slice();
   22680:	f7ff ff7a 	bl	22578 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   22684:	6265      	str	r5, [r4, #36]	; 0x24
}
   22686:	e7f8      	b.n	2267a <update_cache+0x2a>
   22688:	20025cfc 	.word	0x20025cfc

0002268c <k_sched_unlock>:
{
   2268c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2268e:	f04f 0320 	mov.w	r3, #32
   22692:	f3ef 8411 	mrs	r4, BASEPRI
   22696:	f383 8811 	msr	BASEPRI, r3
   2269a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2269e:	4b08      	ldr	r3, [pc, #32]	; (226c0 <k_sched_unlock+0x34>)
		update_cache(0);
   226a0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   226a2:	689a      	ldr	r2, [r3, #8]
   226a4:	7bd3      	ldrb	r3, [r2, #15]
   226a6:	3301      	adds	r3, #1
   226a8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   226aa:	f7ff ffd1 	bl	22650 <update_cache>
	__asm__ volatile(
   226ae:	f384 8811 	msr	BASEPRI, r4
   226b2:	f3bf 8f6f 	isb	sy
}
   226b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   226ba:	f003 bbc2 	b.w	25e42 <z_reschedule_unlocked>
   226be:	bf00      	nop
   226c0:	20025cfc 	.word	0x20025cfc

000226c4 <z_add_thread_to_ready_q>:
{
   226c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   226c6:	f04f 0320 	mov.w	r3, #32
   226ca:	f3ef 8411 	mrs	r4, BASEPRI
   226ce:	f383 8811 	msr	BASEPRI, r3
   226d2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   226d6:	4a16      	ldr	r2, [pc, #88]	; (22730 <z_add_thread_to_ready_q+0x6c>)
   226d8:	4611      	mov	r1, r2
   226da:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   226de:	428b      	cmp	r3, r1
   226e0:	d00c      	beq.n	226fc <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   226e2:	b15b      	cbz	r3, 226fc <z_add_thread_to_ready_q+0x38>
   226e4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   226e6:	f990 500e 	ldrsb.w	r5, [r0, #14]
   226ea:	f993 700e 	ldrsb.w	r7, [r3, #14]
   226ee:	42af      	cmp	r7, r5
   226f0:	dc0b      	bgt.n	2270a <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
   226f2:	42b3      	cmp	r3, r6
   226f4:	d002      	beq.n	226fc <z_add_thread_to_ready_q+0x38>
   226f6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   226f8:	2b00      	cmp	r3, #0
   226fa:	d1f6      	bne.n	226ea <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   226fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   226fe:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   22700:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   22702:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   22704:	6018      	str	r0, [r3, #0]
	list->tail = node;
   22706:	62d0      	str	r0, [r2, #44]	; 0x2c
   22708:	e005      	b.n	22716 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
   2270a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2270c:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   22710:	685a      	ldr	r2, [r3, #4]
   22712:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   22714:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   22716:	7b43      	ldrb	r3, [r0, #13]
   22718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2271c:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   2271e:	2000      	movs	r0, #0
   22720:	f7ff ff96 	bl	22650 <update_cache>
	__asm__ volatile(
   22724:	f384 8811 	msr	BASEPRI, r4
   22728:	f3bf 8f6f 	isb	sy
}
   2272c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2272e:	bf00      	nop
   22730:	20025cfc 	.word	0x20025cfc

00022734 <z_move_thread_to_end_of_prio_q>:
{
   22734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22736:	4604      	mov	r4, r0
	__asm__ volatile(
   22738:	f04f 0320 	mov.w	r3, #32
   2273c:	f3ef 8511 	mrs	r5, BASEPRI
   22740:	f383 8811 	msr	BASEPRI, r3
   22744:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   22748:	7b43      	ldrb	r3, [r0, #13]
   2274a:	065a      	lsls	r2, r3, #25
   2274c:	d503      	bpl.n	22756 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2274e:	4601      	mov	r1, r0
   22750:	4818      	ldr	r0, [pc, #96]	; (227b4 <z_move_thread_to_end_of_prio_q+0x80>)
   22752:	f7ff ff67 	bl	22624 <z_priq_dumb_remove>
	return list->head == list;
   22756:	4a18      	ldr	r2, [pc, #96]	; (227b8 <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22758:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2275c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   22760:	428b      	cmp	r3, r1
   22762:	d00b      	beq.n	2277c <z_move_thread_to_end_of_prio_q+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22764:	b153      	cbz	r3, 2277c <z_move_thread_to_end_of_prio_q+0x48>
	if (t1->base.prio < t2->base.prio) {
   22766:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2276a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2276e:	42b7      	cmp	r7, r6
   22770:	dc0a      	bgt.n	22788 <z_move_thread_to_end_of_prio_q+0x54>
	return (node == list->tail) ? NULL : node->next;
   22772:	4283      	cmp	r3, r0
   22774:	d002      	beq.n	2277c <z_move_thread_to_end_of_prio_q+0x48>
   22776:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22778:	2b00      	cmp	r3, #0
   2277a:	d1f6      	bne.n	2276a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   2277c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   22780:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   22782:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22784:	62d4      	str	r4, [r2, #44]	; 0x2c
   22786:	e005      	b.n	22794 <z_move_thread_to_end_of_prio_q+0x60>
	node->prev = successor->prev;
   22788:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2278a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2278e:	6859      	ldr	r1, [r3, #4]
   22790:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22792:	605c      	str	r4, [r3, #4]
   22794:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   22796:	6890      	ldr	r0, [r2, #8]
   22798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2279c:	7363      	strb	r3, [r4, #13]
   2279e:	1b03      	subs	r3, r0, r4
   227a0:	4258      	negs	r0, r3
   227a2:	4158      	adcs	r0, r3
   227a4:	f7ff ff54 	bl	22650 <update_cache>
	__asm__ volatile(
   227a8:	f385 8811 	msr	BASEPRI, r5
   227ac:	f3bf 8f6f 	isb	sy
}
   227b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   227b2:	bf00      	nop
   227b4:	20025d24 	.word	0x20025d24
   227b8:	20025cfc 	.word	0x20025cfc

000227bc <z_time_slice>:
	if (pending_current == _current) {
   227bc:	4a15      	ldr	r2, [pc, #84]	; (22814 <z_time_slice+0x58>)
   227be:	4916      	ldr	r1, [pc, #88]	; (22818 <z_time_slice+0x5c>)
{
   227c0:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   227c2:	680c      	ldr	r4, [r1, #0]
   227c4:	6893      	ldr	r3, [r2, #8]
   227c6:	42a3      	cmp	r3, r4
   227c8:	4614      	mov	r4, r2
   227ca:	d103      	bne.n	227d4 <z_time_slice+0x18>
}
   227cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   227d0:	f7ff bed2 	b.w	22578 <z_reset_time_slice>
	pending_current = NULL;
   227d4:	2500      	movs	r5, #0
   227d6:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   227d8:	4910      	ldr	r1, [pc, #64]	; (2281c <z_time_slice+0x60>)
   227da:	6809      	ldr	r1, [r1, #0]
   227dc:	b1b9      	cbz	r1, 2280e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   227de:	89d9      	ldrh	r1, [r3, #14]
   227e0:	297f      	cmp	r1, #127	; 0x7f
   227e2:	d814      	bhi.n	2280e <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   227e4:	490e      	ldr	r1, [pc, #56]	; (22820 <z_time_slice+0x64>)
   227e6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   227ea:	6809      	ldr	r1, [r1, #0]
   227ec:	428d      	cmp	r5, r1
   227ee:	db0e      	blt.n	2280e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   227f0:	490c      	ldr	r1, [pc, #48]	; (22824 <z_time_slice+0x68>)
   227f2:	428b      	cmp	r3, r1
   227f4:	d00b      	beq.n	2280e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   227f6:	6999      	ldr	r1, [r3, #24]
   227f8:	b949      	cbnz	r1, 2280e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   227fa:	6911      	ldr	r1, [r2, #16]
   227fc:	4281      	cmp	r1, r0
   227fe:	dc03      	bgt.n	22808 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   22800:	4618      	mov	r0, r3
   22802:	f7ff ff97 	bl	22734 <z_move_thread_to_end_of_prio_q>
   22806:	e7e1      	b.n	227cc <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   22808:	1a09      	subs	r1, r1, r0
   2280a:	6111      	str	r1, [r2, #16]
}
   2280c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   2280e:	2300      	movs	r3, #0
   22810:	6123      	str	r3, [r4, #16]
   22812:	e7fb      	b.n	2280c <z_time_slice+0x50>
   22814:	20025cfc 	.word	0x20025cfc
   22818:	20025d30 	.word	0x20025d30
   2281c:	20025d38 	.word	0x20025d38
   22820:	20025d34 	.word	0x20025d34
   22824:	20021b38 	.word	0x20021b38

00022828 <z_remove_thread_from_ready_q>:
{
   22828:	b538      	push	{r3, r4, r5, lr}
   2282a:	4604      	mov	r4, r0
	__asm__ volatile(
   2282c:	f04f 0320 	mov.w	r3, #32
   22830:	f3ef 8511 	mrs	r5, BASEPRI
   22834:	f383 8811 	msr	BASEPRI, r3
   22838:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2283c:	7b43      	ldrb	r3, [r0, #13]
   2283e:	065a      	lsls	r2, r3, #25
   22840:	d507      	bpl.n	22852 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   22842:	4601      	mov	r1, r0
   22844:	4809      	ldr	r0, [pc, #36]	; (2286c <z_remove_thread_from_ready_q+0x44>)
   22846:	f7ff feed 	bl	22624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2284a:	7b63      	ldrb	r3, [r4, #13]
   2284c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   22850:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   22852:	4b07      	ldr	r3, [pc, #28]	; (22870 <z_remove_thread_from_ready_q+0x48>)
   22854:	6898      	ldr	r0, [r3, #8]
   22856:	1b03      	subs	r3, r0, r4
   22858:	4258      	negs	r0, r3
   2285a:	4158      	adcs	r0, r3
   2285c:	f7ff fef8 	bl	22650 <update_cache>
	__asm__ volatile(
   22860:	f385 8811 	msr	BASEPRI, r5
   22864:	f3bf 8f6f 	isb	sy
}
   22868:	bd38      	pop	{r3, r4, r5, pc}
   2286a:	bf00      	nop
   2286c:	20025d24 	.word	0x20025d24
   22870:	20025cfc 	.word	0x20025cfc

00022874 <pend>:
{
   22874:	b570      	push	{r4, r5, r6, lr}
   22876:	4604      	mov	r4, r0
   22878:	460d      	mov	r5, r1
   2287a:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   2287c:	f7ff ffd4 	bl	22828 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   22880:	7b63      	ldrb	r3, [r4, #13]
   22882:	f043 0302 	orr.w	r3, r3, #2
   22886:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22888:	b1ed      	cbz	r5, 228c6 <pend+0x52>
	return list->head == list;
   2288a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2288c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2288e:	429d      	cmp	r5, r3
   22890:	d00c      	beq.n	228ac <pend+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22892:	b15b      	cbz	r3, 228ac <pend+0x38>
	if (t1->base.prio < t2->base.prio) {
   22894:	f994 200e 	ldrsb.w	r2, [r4, #14]
   22898:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2289c:	4291      	cmp	r1, r2
   2289e:	dc0c      	bgt.n	228ba <pend+0x46>
	return (node == list->tail) ? NULL : node->next;
   228a0:	6869      	ldr	r1, [r5, #4]
   228a2:	428b      	cmp	r3, r1
   228a4:	d002      	beq.n	228ac <pend+0x38>
   228a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   228a8:	2b00      	cmp	r3, #0
   228aa:	d1f5      	bne.n	22898 <pend+0x24>
	node->prev = list->tail;
   228ac:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   228ae:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   228b0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   228b2:	686b      	ldr	r3, [r5, #4]
   228b4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   228b6:	606c      	str	r4, [r5, #4]
   228b8:	e005      	b.n	228c6 <pend+0x52>
	node->prev = successor->prev;
   228ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   228bc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   228c0:	685a      	ldr	r2, [r3, #4]
   228c2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   228c4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   228c6:	1c73      	adds	r3, r6, #1
   228c8:	d015      	beq.n	228f6 <pend+0x82>
   228ca:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   228ce:	f240 30e7 	movw	r0, #999	; 0x3e7
   228d2:	2100      	movs	r1, #0
   228d4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   228d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   228dc:	fbc5 0106 	smlal	r0, r1, r5, r6
   228e0:	2300      	movs	r3, #0
   228e2:	f7e9 fe59 	bl	c598 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   228e6:	4904      	ldr	r1, [pc, #16]	; (228f8 <pend+0x84>)
   228e8:	1c42      	adds	r2, r0, #1
   228ea:	f104 0018 	add.w	r0, r4, #24
}
   228ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   228f2:	f000 bb0f 	b.w	22f14 <z_add_timeout>
   228f6:	bd70      	pop	{r4, r5, r6, pc}
   228f8:	00025e9f 	.word	0x00025e9f

000228fc <z_pend_curr_irqlock>:
{
   228fc:	b570      	push	{r4, r5, r6, lr}
   228fe:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   22900:	4d0e      	ldr	r5, [pc, #56]	; (2293c <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   22902:	4c0f      	ldr	r4, [pc, #60]	; (22940 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   22904:	68a8      	ldr	r0, [r5, #8]
   22906:	f7ff ffb5 	bl	22874 <pend>
	pending_current = _current;
   2290a:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   2290c:	4630      	mov	r0, r6
	pending_current = _current;
   2290e:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   22910:	f003 fa45 	bl	25d9e <z_swap_irqlock>
	__asm__ volatile(
   22914:	f04f 0220 	mov.w	r2, #32
   22918:	f3ef 8311 	mrs	r3, BASEPRI
   2291c:	f382 8811 	msr	BASEPRI, r2
   22920:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   22924:	6822      	ldr	r2, [r4, #0]
   22926:	68a9      	ldr	r1, [r5, #8]
   22928:	4291      	cmp	r1, r2
			pending_current = NULL;
   2292a:	bf04      	itt	eq
   2292c:	2200      	moveq	r2, #0
   2292e:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   22930:	f383 8811 	msr	BASEPRI, r3
   22934:	f3bf 8f6f 	isb	sy
}
   22938:	bd70      	pop	{r4, r5, r6, pc}
   2293a:	bf00      	nop
   2293c:	20025cfc 	.word	0x20025cfc
   22940:	20025d30 	.word	0x20025d30

00022944 <z_pend_curr>:
{
   22944:	b510      	push	{r4, lr}
   22946:	460c      	mov	r4, r1
   22948:	4611      	mov	r1, r2
	pending_current = _current;
   2294a:	4a06      	ldr	r2, [pc, #24]	; (22964 <z_pend_curr+0x20>)
   2294c:	6890      	ldr	r0, [r2, #8]
   2294e:	4a06      	ldr	r2, [pc, #24]	; (22968 <z_pend_curr+0x24>)
   22950:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   22952:	461a      	mov	r2, r3
   22954:	f7ff ff8e 	bl	22874 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   22958:	4620      	mov	r0, r4
}
   2295a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2295e:	f003 ba1e 	b.w	25d9e <z_swap_irqlock>
   22962:	bf00      	nop
   22964:	20025cfc 	.word	0x20025cfc
   22968:	20025d30 	.word	0x20025d30

0002296c <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   2296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   2296e:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   22970:	f003 fbad 	bl	260ce <z_tick_get_32>
   22974:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   22976:	f04f 0320 	mov.w	r3, #32
   2297a:	f3ef 8711 	mrs	r7, BASEPRI
   2297e:	f383 8811 	msr	BASEPRI, r3
   22982:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   22986:	4d0d      	ldr	r5, [pc, #52]	; (229bc <z_tick_sleep.part.19+0x50>)
   22988:	4b0d      	ldr	r3, [pc, #52]	; (229c0 <z_tick_sleep.part.19+0x54>)
   2298a:	68a8      	ldr	r0, [r5, #8]
   2298c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   2298e:	f7ff ff4b 	bl	22828 <z_remove_thread_from_ready_q>
   22992:	68a8      	ldr	r0, [r5, #8]
   22994:	490b      	ldr	r1, [pc, #44]	; (229c4 <z_tick_sleep.part.19+0x58>)
   22996:	4632      	mov	r2, r6
   22998:	3018      	adds	r0, #24
   2299a:	f000 fabb 	bl	22f14 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   2299e:	68aa      	ldr	r2, [r5, #8]
   229a0:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   229a2:	7b53      	ldrb	r3, [r2, #13]
   229a4:	f043 0310 	orr.w	r3, r3, #16
   229a8:	7353      	strb	r3, [r2, #13]
   229aa:	f003 f9f8 	bl	25d9e <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   229ae:	f003 fb8e 	bl	260ce <z_tick_get_32>
   229b2:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   229b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   229b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   229ba:	bf00      	nop
   229bc:	20025cfc 	.word	0x20025cfc
   229c0:	20025d30 	.word	0x20025d30
   229c4:	00025e9f 	.word	0x00025e9f

000229c8 <z_set_prio>:
{
   229c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   229cc:	4604      	mov	r4, r0
   229ce:	f04f 0320 	mov.w	r3, #32
   229d2:	f3ef 8911 	mrs	r9, BASEPRI
   229d6:	f383 8811 	msr	BASEPRI, r3
   229da:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   229de:	f003 f9d5 	bl	25d8c <z_is_thread_ready>
   229e2:	b24e      	sxtb	r6, r1
		if (need_sched) {
   229e4:	4680      	mov	r8, r0
   229e6:	b368      	cbz	r0, 22a44 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   229e8:	4d17      	ldr	r5, [pc, #92]	; (22a48 <z_set_prio+0x80>)
   229ea:	4621      	mov	r1, r4
   229ec:	f105 0728 	add.w	r7, r5, #40	; 0x28
   229f0:	4638      	mov	r0, r7
   229f2:	f7ff fe17 	bl	22624 <z_priq_dumb_remove>
	return list->head == list;
   229f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   229f8:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   229fa:	42bb      	cmp	r3, r7
   229fc:	462a      	mov	r2, r5
   229fe:	d00a      	beq.n	22a16 <z_set_prio+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a00:	b14b      	cbz	r3, 22a16 <z_set_prio+0x4e>
   22a02:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   22a04:	f993 000e 	ldrsb.w	r0, [r3, #14]
   22a08:	42b0      	cmp	r0, r6
   22a0a:	dc0b      	bgt.n	22a24 <z_set_prio+0x5c>
	return (node == list->tail) ? NULL : node->next;
   22a0c:	4299      	cmp	r1, r3
   22a0e:	d002      	beq.n	22a16 <z_set_prio+0x4e>
   22a10:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a12:	2b00      	cmp	r3, #0
   22a14:	d1f6      	bne.n	22a04 <z_set_prio+0x3c>
	node->prev = list->tail;
   22a16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   22a18:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   22a1a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   22a1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   22a1e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22a20:	62d4      	str	r4, [r2, #44]	; 0x2c
   22a22:	e005      	b.n	22a30 <z_set_prio+0x68>
	node->prev = successor->prev;
   22a24:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22a26:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   22a2a:	685a      	ldr	r2, [r3, #4]
   22a2c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22a2e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   22a30:	2001      	movs	r0, #1
   22a32:	f7ff fe0d 	bl	22650 <update_cache>
	__asm__ volatile(
   22a36:	f389 8811 	msr	BASEPRI, r9
   22a3a:	f3bf 8f6f 	isb	sy
}
   22a3e:	4640      	mov	r0, r8
   22a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			thread->base.prio = prio;
   22a44:	73a6      	strb	r6, [r4, #14]
   22a46:	e7f6      	b.n	22a36 <z_set_prio+0x6e>
   22a48:	20025cfc 	.word	0x20025cfc

00022a4c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   22a4c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   22a4e:	4b04      	ldr	r3, [pc, #16]	; (22a60 <z_sched_init+0x14>)
   22a50:	4608      	mov	r0, r1
   22a52:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   22a56:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   22a5a:	f7ff bda3 	b.w	225a4 <k_sched_time_slice_set>
   22a5e:	bf00      	nop
   22a60:	20025cfc 	.word	0x20025cfc

00022a64 <z_impl_k_yield>:
{
   22a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   22a66:	4c24      	ldr	r4, [pc, #144]	; (22af8 <z_impl_k_yield+0x94>)
   22a68:	4b24      	ldr	r3, [pc, #144]	; (22afc <z_impl_k_yield+0x98>)
   22a6a:	68a2      	ldr	r2, [r4, #8]
   22a6c:	429a      	cmp	r2, r3
   22a6e:	d036      	beq.n	22ade <z_impl_k_yield+0x7a>
	__asm__ volatile(
   22a70:	f04f 0320 	mov.w	r3, #32
   22a74:	f3ef 8611 	mrs	r6, BASEPRI
   22a78:	f383 8811 	msr	BASEPRI, r3
   22a7c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   22a80:	f104 0528 	add.w	r5, r4, #40	; 0x28
   22a84:	68a1      	ldr	r1, [r4, #8]
   22a86:	4628      	mov	r0, r5
   22a88:	f7ff fdcc 	bl	22624 <z_priq_dumb_remove>
	return list->head == list;
   22a8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   22a8e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a90:	42aa      	cmp	r2, r5
   22a92:	d00c      	beq.n	22aae <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a94:	b15a      	cbz	r2, 22aae <z_impl_k_yield+0x4a>
   22a96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   22a98:	f993 100e 	ldrsb.w	r1, [r3, #14]
   22a9c:	f992 700e 	ldrsb.w	r7, [r2, #14]
   22aa0:	428f      	cmp	r7, r1
   22aa2:	dc0b      	bgt.n	22abc <z_impl_k_yield+0x58>
	return (node == list->tail) ? NULL : node->next;
   22aa4:	4282      	cmp	r2, r0
   22aa6:	d002      	beq.n	22aae <z_impl_k_yield+0x4a>
   22aa8:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22aaa:	2a00      	cmp	r2, #0
   22aac:	d1f6      	bne.n	22a9c <z_impl_k_yield+0x38>
	node->prev = list->tail;
   22aae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   22ab0:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   22ab2:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   22ab4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   22ab6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   22ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
   22aba:	e005      	b.n	22ac8 <z_impl_k_yield+0x64>
	node->prev = successor->prev;
   22abc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22abe:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   22ac2:	6851      	ldr	r1, [r2, #4]
   22ac4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   22ac6:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   22ac8:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   22aca:	2001      	movs	r0, #1
   22acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   22ad0:	735a      	strb	r2, [r3, #13]
   22ad2:	f7ff fdbd 	bl	22650 <update_cache>
	__asm__ volatile(
   22ad6:	f386 8811 	msr	BASEPRI, r6
   22ada:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22ade:	f04f 0320 	mov.w	r3, #32
   22ae2:	f3ef 8011 	mrs	r0, BASEPRI
   22ae6:	f383 8811 	msr	BASEPRI, r3
   22aea:	f3bf 8f6f 	isb	sy
}
   22aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   22af2:	f003 b954 	b.w	25d9e <z_swap_irqlock>
   22af6:	bf00      	nop
   22af8:	20025cfc 	.word	0x20025cfc
   22afc:	20021b38 	.word	0x20021b38

00022b00 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   22b00:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   22b02:	1c43      	adds	r3, r0, #1
{
   22b04:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   22b06:	d105      	bne.n	22b14 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   22b08:	4b10      	ldr	r3, [pc, #64]	; (22b4c <z_impl_k_sleep+0x4c>)
   22b0a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   22b0c:	f000 f914 	bl	22d38 <z_impl_k_thread_suspend>
		return K_FOREVER;
   22b10:	4620      	mov	r0, r4
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   22b12:	bd38      	pop	{r3, r4, r5, pc}
   22b14:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   22b18:	f240 30e7 	movw	r0, #999	; 0x3e7
   22b1c:	2100      	movs	r1, #0
   22b1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22b22:	fbe5 0104 	umlal	r0, r1, r5, r4
   22b26:	2300      	movs	r3, #0
   22b28:	f7e9 fd36 	bl	c598 <__aeabi_uldivmod>
	if (ticks == 0) {
   22b2c:	4604      	mov	r4, r0
   22b2e:	b948      	cbnz	r0, 22b44 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   22b30:	f7ff ff98 	bl	22a64 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   22b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   22b38:	fb84 0100 	smull	r0, r1, r4, r0
   22b3c:	0bc4      	lsrs	r4, r0, #15
   22b3e:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   22b42:	e7e6      	b.n	22b12 <z_impl_k_sleep+0x12>
   22b44:	f7ff ff12 	bl	2296c <z_tick_sleep.part.19>
   22b48:	4604      	mov	r4, r0
   22b4a:	e7f3      	b.n	22b34 <z_impl_k_sleep+0x34>
   22b4c:	20025cfc 	.word	0x20025cfc

00022b50 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   22b50:	4b01      	ldr	r3, [pc, #4]	; (22b58 <z_impl_k_current_get+0x8>)
   22b52:	6898      	ldr	r0, [r3, #8]
   22b54:	4770      	bx	lr
   22b56:	bf00      	nop
   22b58:	20025cfc 	.word	0x20025cfc

00022b5c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22b5c:	b570      	push	{r4, r5, r6, lr}
   22b5e:	4604      	mov	r4, r0
   22b60:	f04f 0320 	mov.w	r3, #32
   22b64:	f3ef 8611 	mrs	r6, BASEPRI
   22b68:	f383 8811 	msr	BASEPRI, r3
   22b6c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   22b70:	f003 f9c6 	bl	25f00 <z_unpend_first_thread>
	if (thread != NULL) {
   22b74:	4605      	mov	r5, r0
   22b76:	b170      	cbz	r0, 22b96 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22b78:	7b43      	ldrb	r3, [r0, #13]
   22b7a:	06db      	lsls	r3, r3, #27
   22b7c:	d103      	bne.n	22b86 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   22b7e:	6983      	ldr	r3, [r0, #24]
   22b80:	b90b      	cbnz	r3, 22b86 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   22b82:	f7ff fd9f 	bl	226c4 <z_add_thread_to_ready_q>
   22b86:	2300      	movs	r3, #0
   22b88:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   22b8a:	4631      	mov	r1, r6
}
   22b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   22b90:	4807      	ldr	r0, [pc, #28]	; (22bb0 <z_impl_k_sem_give+0x54>)
   22b92:	f003 b93f 	b.w	25e14 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22b96:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   22b9a:	429a      	cmp	r2, r3
   22b9c:	bf18      	it	ne
   22b9e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22ba0:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22ba2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22ba4:	f104 0010 	add.w	r0, r4, #16
   22ba8:	f003 fbe1 	bl	2636e <z_handle_obj_poll_events>
   22bac:	e7ed      	b.n	22b8a <z_impl_k_sem_give+0x2e>
   22bae:	bf00      	nop
   22bb0:	2002740a 	.word	0x2002740a

00022bb4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   22bb4:	b410      	push	{r4}
   22bb6:	4602      	mov	r2, r0
   22bb8:	460b      	mov	r3, r1
   22bba:	f04f 0020 	mov.w	r0, #32
   22bbe:	f3ef 8111 	mrs	r1, BASEPRI
   22bc2:	f380 8811 	msr	BASEPRI, r0
   22bc6:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   22bca:	6894      	ldr	r4, [r2, #8]
   22bcc:	b14c      	cbz	r4, 22be2 <z_impl_k_sem_take+0x2e>
		sem->count--;
   22bce:	3c01      	subs	r4, #1
   22bd0:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   22bd2:	f381 8811 	msr	BASEPRI, r1
   22bd6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   22bda:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   22bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
   22be0:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   22be2:	b933      	cbnz	r3, 22bf2 <z_impl_k_sem_take+0x3e>
   22be4:	f381 8811 	msr	BASEPRI, r1
   22be8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   22bec:	f06f 000f 	mvn.w	r0, #15
   22bf0:	e7f4      	b.n	22bdc <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22bf2:	4802      	ldr	r0, [pc, #8]	; (22bfc <z_impl_k_sem_take+0x48>)
}
   22bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22bf8:	f7ff bea4 	b.w	22944 <z_pend_curr>
   22bfc:	2002740a 	.word	0x2002740a

00022c00 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   22c00:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   22c02:	4c08      	ldr	r4, [pc, #32]	; (22c24 <k_sys_work_q_init+0x24>)
   22c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22c08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   22c0c:	4906      	ldr	r1, [pc, #24]	; (22c28 <k_sys_work_q_init+0x28>)
   22c0e:	4620      	mov	r0, r4
   22c10:	f000 f920 	bl	22e54 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   22c14:	4905      	ldr	r1, [pc, #20]	; (22c2c <k_sys_work_q_init+0x2c>)
   22c16:	f104 0010 	add.w	r0, r4, #16
   22c1a:	f003 f9c6 	bl	25faa <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   22c1e:	2000      	movs	r0, #0
   22c20:	bd10      	pop	{r4, pc}
   22c22:	bf00      	nop
   22c24:	20025d3c 	.word	0x20025d3c
   22c28:	20029990 	.word	0x20029990
   22c2c:	00028e5e 	.word	0x00028e5e

00022c30 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   22c30:	4b09      	ldr	r3, [pc, #36]	; (22c58 <z_check_stack_sentinel+0x28>)
   22c32:	689b      	ldr	r3, [r3, #8]
   22c34:	7b5a      	ldrb	r2, [r3, #13]
   22c36:	07d2      	lsls	r2, r2, #31
   22c38:	d40d      	bmi.n	22c56 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   22c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   22c3c:	681a      	ldr	r2, [r3, #0]
   22c3e:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   22c42:	d008      	beq.n	22c56 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   22c44:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   22c48:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   22c4a:	4040      	eors	r0, r0
   22c4c:	f380 8811 	msr	BASEPRI, r0
   22c50:	f04f 0002 	mov.w	r0, #2
   22c54:	df02      	svc	2
	}
}
   22c56:	4770      	bx	lr
   22c58:	20025cfc 	.word	0x20025cfc

00022c5c <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   22c5c:	b510      	push	{r4, lr}
   22c5e:	4602      	mov	r2, r0
	__asm__ volatile(
   22c60:	f04f 0320 	mov.w	r3, #32
   22c64:	f3ef 8411 	mrs	r4, BASEPRI
   22c68:	f383 8811 	msr	BASEPRI, r3
   22c6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   22c70:	7b43      	ldrb	r3, [r0, #13]
   22c72:	0759      	lsls	r1, r3, #29
   22c74:	d404      	bmi.n	22c80 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   22c76:	f384 8811 	msr	BASEPRI, r4
   22c7a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   22c7e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22c80:	f023 0304 	bic.w	r3, r3, #4
   22c84:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   22c86:	f003 f987 	bl	25f98 <z_is_thread_ready>
   22c8a:	b110      	cbz	r0, 22c92 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   22c8c:	4610      	mov	r0, r2
   22c8e:	f7ff fd19 	bl	226c4 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   22c92:	4621      	mov	r1, r4
}
   22c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   22c98:	4801      	ldr	r0, [pc, #4]	; (22ca0 <z_impl_k_thread_start+0x44>)
   22c9a:	f003 b8bb 	b.w	25e14 <z_reschedule>
   22c9e:	bf00      	nop
   22ca0:	2002740a 	.word	0x2002740a

00022ca4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   22ca4:	b530      	push	{r4, r5, lr}
   22ca6:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22ca8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   22caa:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22cac:	9504      	str	r5, [sp, #16]
   22cae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   22cb0:	9503      	str	r5, [sp, #12]
   22cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   22cb4:	9502      	str	r5, [sp, #8]
   22cb6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   22cb8:	9501      	str	r5, [sp, #4]
   22cba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   22cbc:	9500      	str	r5, [sp, #0]
   22cbe:	f7ed f9f5 	bl	100ac <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   22cc2:	4b04      	ldr	r3, [pc, #16]	; (22cd4 <z_setup_new_thread+0x30>)
   22cc4:	689b      	ldr	r3, [r3, #8]
   22cc6:	b913      	cbnz	r3, 22cce <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   22cc8:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   22cca:	b007      	add	sp, #28
   22ccc:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   22cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   22cd0:	e7fa      	b.n	22cc8 <z_setup_new_thread+0x24>
   22cd2:	bf00      	nop
   22cd4:	20025cfc 	.word	0x20025cfc

00022cd8 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   22cd8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22cda:	2600      	movs	r6, #0
{
   22cdc:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22cde:	9605      	str	r6, [sp, #20]
   22ce0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   22ce2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22ce4:	9604      	str	r6, [sp, #16]
   22ce6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   22ce8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22cea:	9603      	str	r6, [sp, #12]
   22cec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   22cee:	9602      	str	r6, [sp, #8]
   22cf0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   22cf2:	9601      	str	r6, [sp, #4]
   22cf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   22cf6:	9600      	str	r6, [sp, #0]
   22cf8:	f7ff ffd4 	bl	22ca4 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   22cfc:	1c6b      	adds	r3, r5, #1
   22cfe:	d003      	beq.n	22d08 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   22d00:	b92d      	cbnz	r5, 22d0e <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   22d02:	4620      	mov	r0, r4
   22d04:	f7ff ffaa 	bl	22c5c <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   22d08:	4620      	mov	r0, r4
   22d0a:	b006      	add	sp, #24
   22d0c:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   22d0e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22d12:	f240 30e7 	movw	r0, #999	; 0x3e7
   22d16:	2100      	movs	r1, #0
   22d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22d1c:	2300      	movs	r3, #0
   22d1e:	fbe6 0105 	umlal	r0, r1, r6, r5
   22d22:	f7e9 fc39 	bl	c598 <__aeabi_uldivmod>
   22d26:	4903      	ldr	r1, [pc, #12]	; (22d34 <z_impl_k_thread_create+0x5c>)
   22d28:	1c42      	adds	r2, r0, #1
   22d2a:	f104 0018 	add.w	r0, r4, #24
   22d2e:	f000 f8f1 	bl	22f14 <z_add_timeout>
   22d32:	e7e9      	b.n	22d08 <z_impl_k_thread_create+0x30>
   22d34:	00025e9f 	.word	0x00025e9f

00022d38 <z_impl_k_thread_suspend>:

	z_mark_thread_as_suspended(thread);
}

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   22d38:	b538      	push	{r3, r4, r5, lr}
   22d3a:	4605      	mov	r5, r0
	__asm__ volatile(
   22d3c:	f04f 0320 	mov.w	r3, #32
   22d40:	f3ef 8411 	mrs	r4, BASEPRI
   22d44:	f383 8811 	msr	BASEPRI, r3
   22d48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   22d4c:	f003 f944 	bl	25fd8 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   22d50:	4b07      	ldr	r3, [pc, #28]	; (22d70 <z_impl_k_thread_suspend+0x38>)
   22d52:	689b      	ldr	r3, [r3, #8]
   22d54:	42ab      	cmp	r3, r5
   22d56:	d105      	bne.n	22d64 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   22d58:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   22d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   22d5e:	4805      	ldr	r0, [pc, #20]	; (22d74 <z_impl_k_thread_suspend+0x3c>)
   22d60:	f003 b858 	b.w	25e14 <z_reschedule>
	__asm__ volatile(
   22d64:	f384 8811 	msr	BASEPRI, r4
   22d68:	f3bf 8f6f 	isb	sy
}
   22d6c:	bd38      	pop	{r3, r4, r5, pc}
   22d6e:	bf00      	nop
   22d70:	20025cfc 	.word	0x20025cfc
   22d74:	2002740a 	.word	0x2002740a

00022d78 <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   22d78:	b510      	push	{r4, lr}
	__asm__ volatile(
   22d7a:	f04f 0320 	mov.w	r3, #32
   22d7e:	f3ef 8411 	mrs	r4, BASEPRI
   22d82:	f383 8811 	msr	BASEPRI, r3
   22d86:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   22d8a:	f003 f932 	bl	25ff2 <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   22d8e:	4621      	mov	r1, r4
}
   22d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   22d94:	4801      	ldr	r0, [pc, #4]	; (22d9c <z_impl_k_thread_resume+0x24>)
   22d96:	f003 b83d 	b.w	25e14 <z_reschedule>
   22d9a:	bf00      	nop
   22d9c:	2002740a 	.word	0x2002740a

00022da0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   22da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   22da4:	4e28      	ldr	r6, [pc, #160]	; (22e48 <z_init_static_threads+0xa8>)
   22da6:	4d29      	ldr	r5, [pc, #164]	; (22e4c <z_init_static_threads+0xac>)
   22da8:	46b0      	mov	r8, r6
{
   22daa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   22dac:	42b5      	cmp	r5, r6
   22dae:	f105 0430 	add.w	r4, r5, #48	; 0x30
   22db2:	d310      	bcc.n	22dd6 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   22db4:	f7ff fc22 	bl	225fc <k_sched_lock>
   22db8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   22dbc:	f240 36e7 	movw	r6, #999	; 0x3e7
   22dc0:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   22dc2:	4c22      	ldr	r4, [pc, #136]	; (22e4c <z_init_static_threads+0xac>)
   22dc4:	f8df a088 	ldr.w	sl, [pc, #136]	; 22e50 <z_init_static_threads+0xb0>
   22dc8:	4544      	cmp	r4, r8
   22dca:	d321      	bcc.n	22e10 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   22dcc:	b007      	add	sp, #28
   22dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   22dd2:	f7ff bc5b 	b.w	2268c <k_sched_unlock>
		z_setup_new_thread(
   22dd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22dda:	9305      	str	r3, [sp, #20]
   22ddc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   22de0:	9304      	str	r3, [sp, #16]
   22de2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   22de6:	9303      	str	r3, [sp, #12]
   22de8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   22dec:	9302      	str	r3, [sp, #8]
   22dee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   22df2:	9301      	str	r3, [sp, #4]
   22df4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   22df8:	9300      	str	r3, [sp, #0]
   22dfa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   22dfe:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   22e02:	f7ff ff4f 	bl	22ca4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22e06:	f854 3c30 	ldr.w	r3, [r4, #-48]
   22e0a:	64dd      	str	r5, [r3, #76]	; 0x4c
   22e0c:	4625      	mov	r5, r4
   22e0e:	e7cd      	b.n	22dac <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   22e10:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22e12:	1c4b      	adds	r3, r1, #1
   22e14:	d004      	beq.n	22e20 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   22e16:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   22e18:	b921      	cbnz	r1, 22e24 <z_init_static_threads+0x84>
   22e1a:	4628      	mov	r0, r5
   22e1c:	f7ff ff1e 	bl	22c5c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22e20:	3430      	adds	r4, #48	; 0x30
   22e22:	e7d1      	b.n	22dc8 <z_init_static_threads+0x28>
   22e24:	46b3      	mov	fp, r6
   22e26:	46bc      	mov	ip, r7
   22e28:	fbe9 bc01 	umlal	fp, ip, r9, r1
   22e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22e30:	2300      	movs	r3, #0
   22e32:	4658      	mov	r0, fp
   22e34:	4661      	mov	r1, ip
   22e36:	f7e9 fbaf 	bl	c598 <__aeabi_uldivmod>
   22e3a:	4651      	mov	r1, sl
   22e3c:	1c42      	adds	r2, r0, #1
   22e3e:	f105 0018 	add.w	r0, r5, #24
   22e42:	f000 f867 	bl	22f14 <z_add_timeout>
   22e46:	e7eb      	b.n	22e20 <z_init_static_threads+0x80>
   22e48:	2002d508 	.word	0x2002d508
   22e4c:	2002d508 	.word	0x2002d508
   22e50:	00025e9f 	.word	0x00025e9f

00022e54 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   22e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e58:	4605      	mov	r5, r0
   22e5a:	b086      	sub	sp, #24
   22e5c:	460e      	mov	r6, r1
   22e5e:	4617      	mov	r7, r2
   22e60:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   22e62:	f002 ff1e 	bl	25ca2 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   22e66:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22e6a:	2000      	movs	r0, #0
   22e6c:	4b09      	ldr	r3, [pc, #36]	; (22e94 <k_work_q_start+0x40>)
   22e6e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   22e72:	e9cd 0802 	strd	r0, r8, [sp, #8]
   22e76:	e9cd 5000 	strd	r5, r0, [sp]
   22e7a:	463a      	mov	r2, r7
   22e7c:	4631      	mov	r1, r6
   22e7e:	4620      	mov	r0, r4
   22e80:	f7ff ff2a 	bl	22cd8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   22e84:	4620      	mov	r0, r4
   22e86:	4904      	ldr	r1, [pc, #16]	; (22e98 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   22e88:	b006      	add	sp, #24
   22e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22e8e:	f003 b88c 	b.w	25faa <z_impl_k_thread_name_set>
   22e92:	bf00      	nop
   22e94:	00023bab 	.word	0x00023bab
   22e98:	00028e67 	.word	0x00028e67

00022e9c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   22e9c:	4b03      	ldr	r3, [pc, #12]	; (22eac <elapsed+0x10>)
   22e9e:	681b      	ldr	r3, [r3, #0]
   22ea0:	b90b      	cbnz	r3, 22ea6 <elapsed+0xa>
   22ea2:	f7ed b803 	b.w	feac <z_clock_elapsed>
}
   22ea6:	2000      	movs	r0, #0
   22ea8:	4770      	bx	lr
   22eaa:	bf00      	nop
   22eac:	20025dfc 	.word	0x20025dfc

00022eb0 <remove_timeout>:
{
   22eb0:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22eb2:	b140      	cbz	r0, 22ec6 <remove_timeout+0x16>
   22eb4:	4a08      	ldr	r2, [pc, #32]	; (22ed8 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   22eb6:	6852      	ldr	r2, [r2, #4]
   22eb8:	4290      	cmp	r0, r2
   22eba:	d004      	beq.n	22ec6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   22ebc:	b11b      	cbz	r3, 22ec6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   22ebe:	689a      	ldr	r2, [r3, #8]
   22ec0:	6881      	ldr	r1, [r0, #8]
   22ec2:	440a      	add	r2, r1
   22ec4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   22ec6:	6842      	ldr	r2, [r0, #4]
   22ec8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22eca:	6803      	ldr	r3, [r0, #0]
   22ecc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22ece:	2300      	movs	r3, #0
	node->prev = NULL;
   22ed0:	e9c0 3300 	strd	r3, r3, [r0]
}
   22ed4:	4770      	bx	lr
   22ed6:	bf00      	nop
   22ed8:	2002d41c 	.word	0x2002d41c

00022edc <next_timeout>:
	return list->head == list;
   22edc:	4b0b      	ldr	r3, [pc, #44]	; (22f0c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   22ede:	b510      	push	{r4, lr}
   22ee0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22ee2:	429c      	cmp	r4, r3
   22ee4:	bf08      	it	eq
   22ee6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   22ee8:	f7ff ffd8 	bl	22e9c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   22eec:	b154      	cbz	r4, 22f04 <next_timeout+0x28>
   22eee:	68a3      	ldr	r3, [r4, #8]
   22ef0:	1a18      	subs	r0, r3, r0
   22ef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22ef6:	4b06      	ldr	r3, [pc, #24]	; (22f10 <next_timeout+0x34>)
   22ef8:	691b      	ldr	r3, [r3, #16]
   22efa:	b113      	cbz	r3, 22f02 <next_timeout+0x26>
   22efc:	4298      	cmp	r0, r3
   22efe:	bfa8      	it	ge
   22f00:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22f02:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   22f04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22f08:	e7f5      	b.n	22ef6 <next_timeout+0x1a>
   22f0a:	bf00      	nop
   22f0c:	2002d41c 	.word	0x2002d41c
   22f10:	20025cfc 	.word	0x20025cfc

00022f14 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   22f14:	b570      	push	{r4, r5, r6, lr}
   22f16:	4604      	mov	r4, r0
   22f18:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   22f1a:	60c1      	str	r1, [r0, #12]
   22f1c:	f04f 0320 	mov.w	r3, #32
   22f20:	f3ef 8511 	mrs	r5, BASEPRI
   22f24:	f383 8811 	msr	BASEPRI, r3
   22f28:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   22f2c:	f7ff ffb6 	bl	22e9c <elapsed>
   22f30:	2e01      	cmp	r6, #1
   22f32:	bfac      	ite	ge
   22f34:	1980      	addge	r0, r0, r6
   22f36:	3001      	addlt	r0, #1
	return list->head == list;
   22f38:	4b17      	ldr	r3, [pc, #92]	; (22f98 <z_add_timeout+0x84>)
   22f3a:	60a0      	str	r0, [r4, #8]
   22f3c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f3e:	429a      	cmp	r2, r3
   22f40:	d001      	beq.n	22f46 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22f42:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   22f44:	b932      	cbnz	r2, 22f54 <z_add_timeout+0x40>
	node->prev = list->tail;
   22f46:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   22f48:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   22f4a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   22f4c:	685a      	ldr	r2, [r3, #4]
   22f4e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22f50:	605c      	str	r4, [r3, #4]
   22f52:	e00b      	b.n	22f6c <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   22f54:	6890      	ldr	r0, [r2, #8]
   22f56:	68a1      	ldr	r1, [r4, #8]
   22f58:	4288      	cmp	r0, r1
   22f5a:	dd16      	ble.n	22f8a <z_add_timeout+0x76>
				t->dticks -= to->dticks;
   22f5c:	1a41      	subs	r1, r0, r1
   22f5e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   22f60:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22f62:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   22f66:	6851      	ldr	r1, [r2, #4]
   22f68:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22f6a:	6054      	str	r4, [r2, #4]
	return list->head == list;
   22f6c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f6e:	429a      	cmp	r2, r3
   22f70:	d006      	beq.n	22f80 <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22f72:	4294      	cmp	r4, r2
   22f74:	d104      	bne.n	22f80 <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
   22f76:	f7ff ffb1 	bl	22edc <next_timeout>
   22f7a:	2100      	movs	r1, #0
   22f7c:	f7ec ff48 	bl	fe10 <z_clock_set_timeout>
	__asm__ volatile(
   22f80:	f385 8811 	msr	BASEPRI, r5
   22f84:	f3bf 8f6f 	isb	sy
		}
	}
}
   22f88:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   22f8a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   22f8c:	4296      	cmp	r6, r2
   22f8e:	60a1      	str	r1, [r4, #8]
   22f90:	d0d9      	beq.n	22f46 <z_add_timeout+0x32>
   22f92:	6812      	ldr	r2, [r2, #0]
   22f94:	e7d6      	b.n	22f44 <z_add_timeout+0x30>
   22f96:	bf00      	nop
   22f98:	2002d41c 	.word	0x2002d41c

00022f9c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   22f9c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   22fa0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22fa2:	f7ff fc0b 	bl	227bc <z_time_slice>
	__asm__ volatile(
   22fa6:	f04f 0320 	mov.w	r3, #32
   22faa:	f3ef 8511 	mrs	r5, BASEPRI
   22fae:	f383 8811 	msr	BASEPRI, r3
   22fb2:	f3bf 8f6f 	isb	sy
   22fb6:	4f21      	ldr	r7, [pc, #132]	; (2303c <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   22fb8:	4e21      	ldr	r6, [pc, #132]	; (23040 <z_clock_announce+0xa4>)
   22fba:	46b8      	mov	r8, r7
	return list->head == list;
   22fbc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 23044 <z_clock_announce+0xa8>
   22fc0:	6034      	str	r4, [r6, #0]
   22fc2:	f8d9 4000 	ldr.w	r4, [r9]
   22fc6:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22fc8:	454c      	cmp	r4, r9
   22fca:	e9d7 bc00 	ldrd	fp, ip, [r7]
   22fce:	d005      	beq.n	22fdc <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   22fd0:	b124      	cbz	r4, 22fdc <z_clock_announce+0x40>
   22fd2:	68a3      	ldr	r3, [r4, #8]
   22fd4:	4293      	cmp	r3, r2
   22fd6:	dd14      	ble.n	23002 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22fd8:	1a9b      	subs	r3, r3, r2
   22fda:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   22fdc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22fde:	eb1b 0002 	adds.w	r0, fp, r2
   22fe2:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   22fe6:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   22fea:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   22fec:	f7ff ff76 	bl	22edc <next_timeout>
   22ff0:	4621      	mov	r1, r4
   22ff2:	f7ec ff0d 	bl	fe10 <z_clock_set_timeout>
	__asm__ volatile(
   22ff6:	f385 8811 	msr	BASEPRI, r5
   22ffa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22ffe:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   23002:	eb1b 0003 	adds.w	r0, fp, r3
   23006:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   2300a:	1ad3      	subs	r3, r2, r3
   2300c:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   2300e:	2300      	movs	r3, #0
		curr_tick += dt;
   23010:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   23014:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   23016:	4620      	mov	r0, r4
   23018:	f7ff ff4a 	bl	22eb0 <remove_timeout>
   2301c:	f385 8811 	msr	BASEPRI, r5
   23020:	f3bf 8f6f 	isb	sy
		t->fn(t);
   23024:	68e3      	ldr	r3, [r4, #12]
   23026:	4798      	blx	r3
	__asm__ volatile(
   23028:	f04f 0320 	mov.w	r3, #32
   2302c:	f3ef 8511 	mrs	r5, BASEPRI
   23030:	f383 8811 	msr	BASEPRI, r3
   23034:	f3bf 8f6f 	isb	sy
   23038:	e7c3      	b.n	22fc2 <z_clock_announce+0x26>
   2303a:	bf00      	nop
   2303c:	200200d8 	.word	0x200200d8
   23040:	20025dfc 	.word	0x20025dfc
   23044:	2002d41c 	.word	0x2002d41c

00023048 <z_tick_get>:

s64_t z_tick_get(void)
{
   23048:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   2304c:	f04f 0320 	mov.w	r3, #32
   23050:	f3ef 8411 	mrs	r4, BASEPRI
   23054:	f383 8811 	msr	BASEPRI, r3
   23058:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2305c:	f7ec ff26 	bl	feac <z_clock_elapsed>
   23060:	4b07      	ldr	r3, [pc, #28]	; (23080 <z_tick_get+0x38>)
   23062:	e9d3 2300 	ldrd	r2, r3, [r3]
   23066:	eb12 0b00 	adds.w	fp, r2, r0
   2306a:	f143 0c00 	adc.w	ip, r3, #0
   2306e:	4658      	mov	r0, fp
   23070:	4661      	mov	r1, ip
	__asm__ volatile(
   23072:	f384 8811 	msr	BASEPRI, r4
   23076:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2307a:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   2307e:	bf00      	nop
   23080:	200200d8 	.word	0x200200d8

00023084 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   23084:	6a02      	ldr	r2, [r0, #32]
{
   23086:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   23088:	2a00      	cmp	r2, #0
{
   2308a:	4604      	mov	r4, r0
	if (timer->period > 0) {
   2308c:	dd02      	ble.n	23094 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2308e:	490e      	ldr	r1, [pc, #56]	; (230c8 <z_timer_expiration_handler+0x44>)
   23090:	f7ff ff40 	bl	22f14 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   23094:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23096:	3301      	adds	r3, #1
   23098:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2309a:	69a3      	ldr	r3, [r4, #24]
   2309c:	b10b      	cbz	r3, 230a2 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   2309e:	4620      	mov	r0, r4
   230a0:	4798      	blx	r3
	return list->head == list;
   230a2:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   230a6:	42a5      	cmp	r5, r4
   230a8:	d00d      	beq.n	230c6 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   230aa:	b165      	cbz	r5, 230c6 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   230ac:	4628      	mov	r0, r5
   230ae:	f002 fe98 	bl	25de2 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   230b2:	7b6b      	ldrb	r3, [r5, #13]
   230b4:	06db      	lsls	r3, r3, #27
   230b6:	d104      	bne.n	230c2 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   230b8:	69ab      	ldr	r3, [r5, #24]
   230ba:	b913      	cbnz	r3, 230c2 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   230bc:	4628      	mov	r0, r5
   230be:	f7ff fb01 	bl	226c4 <z_add_thread_to_ready_q>
   230c2:	2300      	movs	r3, #0
   230c4:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   230c6:	bd38      	pop	{r3, r4, r5, pc}
   230c8:	00023085 	.word	0x00023085

000230cc <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   230cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   230d0:	f240 36e7 	movw	r6, #999	; 0x3e7
   230d4:	2700      	movs	r7, #0
   230d6:	4604      	mov	r4, r0
   230d8:	4688      	mov	r8, r1
   230da:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   230de:	4630      	mov	r0, r6
   230e0:	4639      	mov	r1, r7
   230e2:	2300      	movs	r3, #0
   230e4:	fbe5 0102 	umlal	r0, r1, r5, r2
   230e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   230ec:	f7e9 fa54 	bl	c598 <__aeabi_uldivmod>
   230f0:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   230f2:	9000      	str	r0, [sp, #0]
   230f4:	4630      	mov	r0, r6
   230f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   230fa:	2300      	movs	r3, #0
   230fc:	fbe5 0108 	umlal	r0, r1, r5, r8
   23100:	f7e9 fa4a 	bl	c598 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   23104:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   23106:	4620      	mov	r0, r4
   23108:	f002 ffa1 	bl	2604e <z_abort_timeout>
	timer->period = period_in_ticks;
   2310c:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2310e:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   23110:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   23112:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23114:	9a01      	ldr	r2, [sp, #4]
   23116:	4903      	ldr	r1, [pc, #12]	; (23124 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   23118:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   2311a:	b002      	add	sp, #8
   2311c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23120:	f7ff bef8 	b.w	22f14 <z_add_timeout>
   23124:	00023085 	.word	0x00023085

00023128 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   23128:	2301      	movs	r3, #1
{
   2312a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2312e:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   23130:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   23134:	4b23      	ldr	r3, [pc, #140]	; (231c4 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   23136:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   23138:	689b      	ldr	r3, [r3, #8]
{
   2313a:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   2313c:	9304      	str	r3, [sp, #16]
   2313e:	4b22      	ldr	r3, [pc, #136]	; (231c8 <z_impl_k_poll+0xa0>)
   23140:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   23142:	fab2 f382 	clz	r3, r2
   23146:	aa03      	add	r2, sp, #12
   23148:	095b      	lsrs	r3, r3, #5
   2314a:	f003 f8a0 	bl	2628e <register_events>
   2314e:	4607      	mov	r7, r0
	__asm__ volatile(
   23150:	f04f 0320 	mov.w	r3, #32
   23154:	f3ef 8511 	mrs	r5, BASEPRI
   23158:	f383 8811 	msr	BASEPRI, r3
   2315c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   23160:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23164:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   23168:	b94b      	cbnz	r3, 2317e <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   2316a:	462a      	mov	r2, r5
   2316c:	4639      	mov	r1, r7
   2316e:	4630      	mov	r0, r6
   23170:	f002 fff2 	bl	26158 <clear_event_registrations>
	__asm__ volatile(
   23174:	f385 8811 	msr	BASEPRI, r5
   23178:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   2317c:	e00b      	b.n	23196 <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   2317e:	2300      	movs	r3, #0
   23180:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   23184:	f1b8 0f00 	cmp.w	r8, #0
   23188:	d109      	bne.n	2319e <z_impl_k_poll+0x76>
   2318a:	f385 8811 	msr	BASEPRI, r5
   2318e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23192:	f06f 040a 	mvn.w	r4, #10
}
   23196:	4620      	mov	r0, r4
   23198:	b006      	add	sp, #24
   2319a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2319e:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   231a0:	4643      	mov	r3, r8
   231a2:	4629      	mov	r1, r5
   231a4:	4809      	ldr	r0, [pc, #36]	; (231cc <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   231a6:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   231aa:	f7ff fbcb 	bl	22944 <z_pend_curr>
   231ae:	4604      	mov	r4, r0
	__asm__ volatile(
   231b0:	f04f 0320 	mov.w	r3, #32
   231b4:	f3ef 8511 	mrs	r5, BASEPRI
   231b8:	f383 8811 	msr	BASEPRI, r3
   231bc:	f3bf 8f6f 	isb	sy
   231c0:	e7d3      	b.n	2316a <z_impl_k_poll+0x42>
   231c2:	bf00      	nop
   231c4:	20025cfc 	.word	0x20025cfc
   231c8:	000261ed 	.word	0x000261ed
   231cc:	2002740a 	.word	0x2002740a

000231d0 <ocrypto_ecdsa_p256_public_key>:
   231d0:	b530      	push	{r4, r5, lr}
   231d2:	b099      	sub	sp, #100	; 0x64
   231d4:	4605      	mov	r5, r0
   231d6:	4668      	mov	r0, sp
   231d8:	f000 f8f2 	bl	233c0 <ocrypto_sc_p256_from32bytes>
   231dc:	4669      	mov	r1, sp
   231de:	a808      	add	r0, sp, #32
   231e0:	f000 fae6 	bl	237b0 <ocrypto_curve_p256_scalarmult_base>
   231e4:	4604      	mov	r4, r0
   231e6:	a908      	add	r1, sp, #32
   231e8:	4628      	mov	r0, r5
   231ea:	f000 fa21 	bl	23630 <ocrypto_curve_p256_to64bytes>
   231ee:	4620      	mov	r0, r4
   231f0:	b019      	add	sp, #100	; 0x64
   231f2:	bd30      	pop	{r4, r5, pc}

000231f4 <ocrypto_mod_p256_cneg>:
   231f4:	b570      	push	{r4, r5, r6, lr}
   231f6:	b088      	sub	sp, #32
   231f8:	4604      	mov	r4, r0
   231fa:	460d      	mov	r5, r1
   231fc:	4668      	mov	r0, sp
   231fe:	2120      	movs	r1, #32
   23200:	4616      	mov	r6, r2
   23202:	f7e9 fece 	bl	cfa2 <ocrypto_constant_time_fill_zero>
   23206:	2300      	movs	r3, #0
   23208:	4629      	mov	r1, r5
   2320a:	4620      	mov	r0, r4
   2320c:	2220      	movs	r2, #32
   2320e:	9300      	str	r3, [sp, #0]
   23210:	f7e9 fec0 	bl	cf94 <ocrypto_constant_time_copy>
   23214:	462a      	mov	r2, r5
   23216:	4669      	mov	r1, sp
   23218:	4668      	mov	r0, sp
   2321a:	f7e9 ff08 	bl	d02e <ocrypto_mod_p256_sub>
   2321e:	4632      	mov	r2, r6
   23220:	4669      	mov	r1, sp
   23222:	4620      	mov	r0, r4
   23224:	f7e9 fc13 	bl	ca4e <ocrypto_bigint_cswap256>
   23228:	b008      	add	sp, #32
   2322a:	bd70      	pop	{r4, r5, r6, pc}

0002322c <ocrypto_mod_p256_toBytes>:
   2322c:	69cb      	ldr	r3, [r1, #28]
   2322e:	ba1b      	rev	r3, r3
   23230:	6003      	str	r3, [r0, #0]
   23232:	698b      	ldr	r3, [r1, #24]
   23234:	ba1b      	rev	r3, r3
   23236:	6043      	str	r3, [r0, #4]
   23238:	694b      	ldr	r3, [r1, #20]
   2323a:	ba1b      	rev	r3, r3
   2323c:	6083      	str	r3, [r0, #8]
   2323e:	690b      	ldr	r3, [r1, #16]
   23240:	ba1b      	rev	r3, r3
   23242:	60c3      	str	r3, [r0, #12]
   23244:	68cb      	ldr	r3, [r1, #12]
   23246:	ba1b      	rev	r3, r3
   23248:	6103      	str	r3, [r0, #16]
   2324a:	688b      	ldr	r3, [r1, #8]
   2324c:	ba1b      	rev	r3, r3
   2324e:	6143      	str	r3, [r0, #20]
   23250:	684b      	ldr	r3, [r1, #4]
   23252:	ba1b      	rev	r3, r3
   23254:	6183      	str	r3, [r0, #24]
   23256:	680b      	ldr	r3, [r1, #0]
   23258:	ba1b      	rev	r3, r3
   2325a:	61c3      	str	r3, [r0, #28]
   2325c:	4770      	bx	lr
   2325e:	bf00      	nop

00023260 <ocrypto_mod_p256_invert>:
   23260:	b570      	push	{r4, r5, r6, lr}
   23262:	460d      	mov	r5, r1
   23264:	2405      	movs	r4, #5
   23266:	b098      	sub	sp, #96	; 0x60
   23268:	4606      	mov	r6, r0
   2326a:	a810      	add	r0, sp, #64	; 0x40
   2326c:	f7e9 ff0c 	bl	d088 <ocrypto_mod_p256_square>
   23270:	462a      	mov	r2, r5
   23272:	a910      	add	r1, sp, #64	; 0x40
   23274:	4668      	mov	r0, sp
   23276:	f7e9 ff08 	bl	d08a <ocrypto_mod_p256_mul>
   2327a:	4669      	mov	r1, sp
   2327c:	a810      	add	r0, sp, #64	; 0x40
   2327e:	f7e9 ff03 	bl	d088 <ocrypto_mod_p256_square>
   23282:	a910      	add	r1, sp, #64	; 0x40
   23284:	4608      	mov	r0, r1
   23286:	f7e9 feff 	bl	d088 <ocrypto_mod_p256_square>
   2328a:	466a      	mov	r2, sp
   2328c:	a910      	add	r1, sp, #64	; 0x40
   2328e:	a808      	add	r0, sp, #32
   23290:	f7e9 fefb 	bl	d08a <ocrypto_mod_p256_mul>
   23294:	a908      	add	r1, sp, #32
   23296:	a810      	add	r0, sp, #64	; 0x40
   23298:	f7e9 fef6 	bl	d088 <ocrypto_mod_p256_square>
   2329c:	a910      	add	r1, sp, #64	; 0x40
   2329e:	4608      	mov	r0, r1
   232a0:	f7e9 fef2 	bl	d088 <ocrypto_mod_p256_square>
   232a4:	a910      	add	r1, sp, #64	; 0x40
   232a6:	4608      	mov	r0, r1
   232a8:	f7e9 feee 	bl	d088 <ocrypto_mod_p256_square>
   232ac:	a910      	add	r1, sp, #64	; 0x40
   232ae:	4608      	mov	r0, r1
   232b0:	f7e9 feea 	bl	d088 <ocrypto_mod_p256_square>
   232b4:	a910      	add	r1, sp, #64	; 0x40
   232b6:	aa08      	add	r2, sp, #32
   232b8:	4608      	mov	r0, r1
   232ba:	f7e9 fee6 	bl	d08a <ocrypto_mod_p256_mul>
   232be:	a910      	add	r1, sp, #64	; 0x40
   232c0:	4608      	mov	r0, r1
   232c2:	f7e9 fee1 	bl	d088 <ocrypto_mod_p256_square>
   232c6:	a910      	add	r1, sp, #64	; 0x40
   232c8:	4608      	mov	r0, r1
   232ca:	f7e9 fedd 	bl	d088 <ocrypto_mod_p256_square>
   232ce:	a910      	add	r1, sp, #64	; 0x40
   232d0:	466a      	mov	r2, sp
   232d2:	a808      	add	r0, sp, #32
   232d4:	f7e9 fed9 	bl	d08a <ocrypto_mod_p256_mul>
   232d8:	a908      	add	r1, sp, #32
   232da:	a810      	add	r0, sp, #64	; 0x40
   232dc:	f7e9 fed4 	bl	d088 <ocrypto_mod_p256_square>
   232e0:	a910      	add	r1, sp, #64	; 0x40
   232e2:	4608      	mov	r0, r1
   232e4:	f7e9 fed0 	bl	d088 <ocrypto_mod_p256_square>
   232e8:	3c01      	subs	r4, #1
   232ea:	a910      	add	r1, sp, #64	; 0x40
   232ec:	d1f5      	bne.n	232da <ocrypto_mod_p256_invert+0x7a>
   232ee:	aa08      	add	r2, sp, #32
   232f0:	4608      	mov	r0, r1
   232f2:	f7e9 feca 	bl	d08a <ocrypto_mod_p256_mul>
   232f6:	2405      	movs	r4, #5
   232f8:	a910      	add	r1, sp, #64	; 0x40
   232fa:	4608      	mov	r0, r1
   232fc:	f7e9 fec4 	bl	d088 <ocrypto_mod_p256_square>
   23300:	a910      	add	r1, sp, #64	; 0x40
   23302:	4608      	mov	r0, r1
   23304:	f7e9 fec0 	bl	d088 <ocrypto_mod_p256_square>
   23308:	3c01      	subs	r4, #1
   2330a:	d1f5      	bne.n	232f8 <ocrypto_mod_p256_invert+0x98>
   2330c:	a910      	add	r1, sp, #64	; 0x40
   2330e:	aa08      	add	r2, sp, #32
   23310:	4608      	mov	r0, r1
   23312:	f7e9 feba 	bl	d08a <ocrypto_mod_p256_mul>
   23316:	a910      	add	r1, sp, #64	; 0x40
   23318:	a808      	add	r0, sp, #32
   2331a:	f7e9 feb5 	bl	d088 <ocrypto_mod_p256_square>
   2331e:	a908      	add	r1, sp, #32
   23320:	4608      	mov	r0, r1
   23322:	f7e9 feb1 	bl	d088 <ocrypto_mod_p256_square>
   23326:	a908      	add	r1, sp, #32
   23328:	466a      	mov	r2, sp
   2332a:	4668      	mov	r0, sp
   2332c:	f7e9 fead 	bl	d08a <ocrypto_mod_p256_mul>
   23330:	2410      	movs	r4, #16
   23332:	4669      	mov	r1, sp
   23334:	a810      	add	r0, sp, #64	; 0x40
   23336:	f7e9 fea7 	bl	d088 <ocrypto_mod_p256_square>
   2333a:	a910      	add	r1, sp, #64	; 0x40
   2333c:	4608      	mov	r0, r1
   2333e:	f7e9 fea3 	bl	d088 <ocrypto_mod_p256_square>
   23342:	3c01      	subs	r4, #1
   23344:	a910      	add	r1, sp, #64	; 0x40
   23346:	d1f5      	bne.n	23334 <ocrypto_mod_p256_invert+0xd4>
   23348:	462a      	mov	r2, r5
   2334a:	4608      	mov	r0, r1
   2334c:	f7e9 fe9d 	bl	d08a <ocrypto_mod_p256_mul>
   23350:	2440      	movs	r4, #64	; 0x40
   23352:	a910      	add	r1, sp, #64	; 0x40
   23354:	4608      	mov	r0, r1
   23356:	f7e9 fe97 	bl	d088 <ocrypto_mod_p256_square>
   2335a:	a910      	add	r1, sp, #64	; 0x40
   2335c:	4608      	mov	r0, r1
   2335e:	f7e9 fe93 	bl	d088 <ocrypto_mod_p256_square>
   23362:	3c01      	subs	r4, #1
   23364:	d1f5      	bne.n	23352 <ocrypto_mod_p256_invert+0xf2>
   23366:	a910      	add	r1, sp, #64	; 0x40
   23368:	466a      	mov	r2, sp
   2336a:	4608      	mov	r0, r1
   2336c:	f7e9 fe8d 	bl	d08a <ocrypto_mod_p256_mul>
   23370:	2410      	movs	r4, #16
   23372:	a910      	add	r1, sp, #64	; 0x40
   23374:	4608      	mov	r0, r1
   23376:	f7e9 fe87 	bl	d088 <ocrypto_mod_p256_square>
   2337a:	a910      	add	r1, sp, #64	; 0x40
   2337c:	4608      	mov	r0, r1
   2337e:	f7e9 fe83 	bl	d088 <ocrypto_mod_p256_square>
   23382:	3c01      	subs	r4, #1
   23384:	d1f5      	bne.n	23372 <ocrypto_mod_p256_invert+0x112>
   23386:	a910      	add	r1, sp, #64	; 0x40
   23388:	466a      	mov	r2, sp
   2338a:	4608      	mov	r0, r1
   2338c:	f7e9 fe7d 	bl	d08a <ocrypto_mod_p256_mul>
   23390:	2410      	movs	r4, #16
   23392:	a910      	add	r1, sp, #64	; 0x40
   23394:	4608      	mov	r0, r1
   23396:	f7e9 fe77 	bl	d088 <ocrypto_mod_p256_square>
   2339a:	a910      	add	r1, sp, #64	; 0x40
   2339c:	4608      	mov	r0, r1
   2339e:	f7e9 fe73 	bl	d088 <ocrypto_mod_p256_square>
   233a2:	3c01      	subs	r4, #1
   233a4:	d1f5      	bne.n	23392 <ocrypto_mod_p256_invert+0x132>
   233a6:	a910      	add	r1, sp, #64	; 0x40
   233a8:	aa08      	add	r2, sp, #32
   233aa:	4608      	mov	r0, r1
   233ac:	f7e9 fe6d 	bl	d08a <ocrypto_mod_p256_mul>
   233b0:	462a      	mov	r2, r5
   233b2:	a910      	add	r1, sp, #64	; 0x40
   233b4:	4630      	mov	r0, r6
   233b6:	f7e9 fe68 	bl	d08a <ocrypto_mod_p256_mul>
   233ba:	b018      	add	sp, #96	; 0x60
   233bc:	bd70      	pop	{r4, r5, r6, pc}
   233be:	bf00      	nop

000233c0 <ocrypto_sc_p256_from32bytes>:
   233c0:	b538      	push	{r3, r4, r5, lr}
   233c2:	460b      	mov	r3, r1
   233c4:	680a      	ldr	r2, [r1, #0]
   233c6:	4d12      	ldr	r5, [pc, #72]	; (23410 <ocrypto_sc_p256_from32bytes+0x50>)
   233c8:	ba12      	rev	r2, r2
   233ca:	61c2      	str	r2, [r0, #28]
   233cc:	684a      	ldr	r2, [r1, #4]
   233ce:	4601      	mov	r1, r0
   233d0:	ba12      	rev	r2, r2
   233d2:	6182      	str	r2, [r0, #24]
   233d4:	689a      	ldr	r2, [r3, #8]
   233d6:	4604      	mov	r4, r0
   233d8:	ba12      	rev	r2, r2
   233da:	6142      	str	r2, [r0, #20]
   233dc:	68da      	ldr	r2, [r3, #12]
   233de:	ba12      	rev	r2, r2
   233e0:	6102      	str	r2, [r0, #16]
   233e2:	691a      	ldr	r2, [r3, #16]
   233e4:	ba12      	rev	r2, r2
   233e6:	60c2      	str	r2, [r0, #12]
   233e8:	695a      	ldr	r2, [r3, #20]
   233ea:	ba12      	rev	r2, r2
   233ec:	6082      	str	r2, [r0, #8]
   233ee:	699a      	ldr	r2, [r3, #24]
   233f0:	ba12      	rev	r2, r2
   233f2:	6042      	str	r2, [r0, #4]
   233f4:	69db      	ldr	r3, [r3, #28]
   233f6:	462a      	mov	r2, r5
   233f8:	ba1b      	rev	r3, r3
   233fa:	6003      	str	r3, [r0, #0]
   233fc:	f7e9 fa9c 	bl	c938 <ocrypto_bigint_sub256>
   23400:	4629      	mov	r1, r5
   23402:	4602      	mov	r2, r0
   23404:	4620      	mov	r0, r4
   23406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2340a:	f7e9 bab5 	b.w	c978 <ocrypto_bigint_cadd256>
   2340e:	bf00      	nop
   23410:	00027a30 	.word	0x00027a30

00023414 <p256_zdblu>:
   23414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23418:	4607      	mov	r7, r0
   2341a:	460d      	mov	r5, r1
   2341c:	4690      	mov	r8, r2
   2341e:	b088      	sub	sp, #32
   23420:	f102 0120 	add.w	r1, r2, #32
   23424:	4668      	mov	r0, sp
   23426:	f107 0620 	add.w	r6, r7, #32
   2342a:	f7e9 fe2d 	bl	d088 <ocrypto_mod_p256_square>
   2342e:	466a      	mov	r2, sp
   23430:	4669      	mov	r1, sp
   23432:	4668      	mov	r0, sp
   23434:	f7e9 fdbc 	bl	cfb0 <ocrypto_mod_p256_add>
   23438:	4630      	mov	r0, r6
   2343a:	4669      	mov	r1, sp
   2343c:	f7e9 fe24 	bl	d088 <ocrypto_mod_p256_square>
   23440:	4632      	mov	r2, r6
   23442:	4631      	mov	r1, r6
   23444:	4630      	mov	r0, r6
   23446:	f105 0420 	add.w	r4, r5, #32
   2344a:	f7e9 fdb1 	bl	cfb0 <ocrypto_mod_p256_add>
   2344e:	466a      	mov	r2, sp
   23450:	4669      	mov	r1, sp
   23452:	4668      	mov	r0, sp
   23454:	f7e9 fdac 	bl	cfb0 <ocrypto_mod_p256_add>
   23458:	4620      	mov	r0, r4
   2345a:	4641      	mov	r1, r8
   2345c:	f7e9 fe14 	bl	d088 <ocrypto_mod_p256_square>
   23460:	466a      	mov	r2, sp
   23462:	4641      	mov	r1, r8
   23464:	4638      	mov	r0, r7
   23466:	f7e9 fe10 	bl	d08a <ocrypto_mod_p256_mul>
   2346a:	4622      	mov	r2, r4
   2346c:	4621      	mov	r1, r4
   2346e:	4668      	mov	r0, sp
   23470:	f7e9 fd9e 	bl	cfb0 <ocrypto_mod_p256_add>
   23474:	4622      	mov	r2, r4
   23476:	4669      	mov	r1, sp
   23478:	4668      	mov	r0, sp
   2347a:	f7e9 fd99 	bl	cfb0 <ocrypto_mod_p256_add>
   2347e:	4669      	mov	r1, sp
   23480:	4668      	mov	r0, sp
   23482:	4a11      	ldr	r2, [pc, #68]	; (234c8 <p256_zdblu+0xb4>)
   23484:	f7e9 fd94 	bl	cfb0 <ocrypto_mod_p256_add>
   23488:	4669      	mov	r1, sp
   2348a:	4628      	mov	r0, r5
   2348c:	f7e9 fdfc 	bl	d088 <ocrypto_mod_p256_square>
   23490:	463a      	mov	r2, r7
   23492:	4629      	mov	r1, r5
   23494:	4628      	mov	r0, r5
   23496:	f7e9 fdca 	bl	d02e <ocrypto_mod_p256_sub>
   2349a:	463a      	mov	r2, r7
   2349c:	4629      	mov	r1, r5
   2349e:	4628      	mov	r0, r5
   234a0:	f7e9 fdc5 	bl	d02e <ocrypto_mod_p256_sub>
   234a4:	462a      	mov	r2, r5
   234a6:	4639      	mov	r1, r7
   234a8:	4620      	mov	r0, r4
   234aa:	f7e9 fdc0 	bl	d02e <ocrypto_mod_p256_sub>
   234ae:	466a      	mov	r2, sp
   234b0:	4621      	mov	r1, r4
   234b2:	4620      	mov	r0, r4
   234b4:	f7e9 fde9 	bl	d08a <ocrypto_mod_p256_mul>
   234b8:	4632      	mov	r2, r6
   234ba:	4621      	mov	r1, r4
   234bc:	4620      	mov	r0, r4
   234be:	f7e9 fdb6 	bl	d02e <ocrypto_mod_p256_sub>
   234c2:	b008      	add	sp, #32
   234c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   234c8:	00027ad0 	.word	0x00027ad0

000234cc <p256_zaddc>:
   234cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   234ce:	4604      	mov	r4, r0
   234d0:	460e      	mov	r6, r1
   234d2:	b099      	sub	sp, #100	; 0x64
   234d4:	460a      	mov	r2, r1
   234d6:	4601      	mov	r1, r0
   234d8:	4668      	mov	r0, sp
   234da:	f7e9 fda8 	bl	d02e <ocrypto_mod_p256_sub>
   234de:	4669      	mov	r1, sp
   234e0:	4668      	mov	r0, sp
   234e2:	f7e9 fdd1 	bl	d088 <ocrypto_mod_p256_square>
   234e6:	466a      	mov	r2, sp
   234e8:	4621      	mov	r1, r4
   234ea:	a808      	add	r0, sp, #32
   234ec:	f106 0520 	add.w	r5, r6, #32
   234f0:	f104 0720 	add.w	r7, r4, #32
   234f4:	f7e9 fdc9 	bl	d08a <ocrypto_mod_p256_mul>
   234f8:	466a      	mov	r2, sp
   234fa:	4631      	mov	r1, r6
   234fc:	4668      	mov	r0, sp
   234fe:	f7e9 fdc4 	bl	d08a <ocrypto_mod_p256_mul>
   23502:	4639      	mov	r1, r7
   23504:	462a      	mov	r2, r5
   23506:	a810      	add	r0, sp, #64	; 0x40
   23508:	f7e9 fd52 	bl	cfb0 <ocrypto_mod_p256_add>
   2350c:	462a      	mov	r2, r5
   2350e:	4639      	mov	r1, r7
   23510:	4628      	mov	r0, r5
   23512:	f7e9 fd8c 	bl	d02e <ocrypto_mod_p256_sub>
   23516:	4629      	mov	r1, r5
   23518:	4630      	mov	r0, r6
   2351a:	f7e9 fdb5 	bl	d088 <ocrypto_mod_p256_square>
   2351e:	466a      	mov	r2, sp
   23520:	a908      	add	r1, sp, #32
   23522:	4620      	mov	r0, r4
   23524:	f7e9 fd44 	bl	cfb0 <ocrypto_mod_p256_add>
   23528:	4622      	mov	r2, r4
   2352a:	4631      	mov	r1, r6
   2352c:	4630      	mov	r0, r6
   2352e:	f7e9 fd7e 	bl	d02e <ocrypto_mod_p256_sub>
   23532:	466a      	mov	r2, sp
   23534:	a908      	add	r1, sp, #32
   23536:	4668      	mov	r0, sp
   23538:	f7e9 fd79 	bl	d02e <ocrypto_mod_p256_sub>
   2353c:	466a      	mov	r2, sp
   2353e:	4639      	mov	r1, r7
   23540:	4638      	mov	r0, r7
   23542:	f7e9 fda2 	bl	d08a <ocrypto_mod_p256_mul>
   23546:	4632      	mov	r2, r6
   23548:	a908      	add	r1, sp, #32
   2354a:	4668      	mov	r0, sp
   2354c:	f7e9 fd6f 	bl	d02e <ocrypto_mod_p256_sub>
   23550:	466a      	mov	r2, sp
   23552:	4629      	mov	r1, r5
   23554:	4628      	mov	r0, r5
   23556:	f7e9 fd98 	bl	d08a <ocrypto_mod_p256_mul>
   2355a:	463a      	mov	r2, r7
   2355c:	4629      	mov	r1, r5
   2355e:	4628      	mov	r0, r5
   23560:	f7e9 fd65 	bl	d02e <ocrypto_mod_p256_sub>
   23564:	a910      	add	r1, sp, #64	; 0x40
   23566:	4668      	mov	r0, sp
   23568:	f7e9 fd8e 	bl	d088 <ocrypto_mod_p256_square>
   2356c:	4622      	mov	r2, r4
   2356e:	4669      	mov	r1, sp
   23570:	4620      	mov	r0, r4
   23572:	f7e9 fd5c 	bl	d02e <ocrypto_mod_p256_sub>
   23576:	a908      	add	r1, sp, #32
   23578:	4622      	mov	r2, r4
   2357a:	4608      	mov	r0, r1
   2357c:	f7e9 fd57 	bl	d02e <ocrypto_mod_p256_sub>
   23580:	a910      	add	r1, sp, #64	; 0x40
   23582:	aa08      	add	r2, sp, #32
   23584:	4608      	mov	r0, r1
   23586:	f7e9 fd80 	bl	d08a <ocrypto_mod_p256_mul>
   2358a:	463a      	mov	r2, r7
   2358c:	a910      	add	r1, sp, #64	; 0x40
   2358e:	4638      	mov	r0, r7
   23590:	f7e9 fd4d 	bl	d02e <ocrypto_mod_p256_sub>
   23594:	b019      	add	sp, #100	; 0x64
   23596:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023598 <p256_zaddu>:
   23598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2359c:	460c      	mov	r4, r1
   2359e:	4605      	mov	r5, r0
   235a0:	4690      	mov	r8, r2
   235a2:	b088      	sub	sp, #32
   235a4:	4622      	mov	r2, r4
   235a6:	4601      	mov	r1, r0
   235a8:	4668      	mov	r0, sp
   235aa:	f7e9 fd40 	bl	d02e <ocrypto_mod_p256_sub>
   235ae:	4669      	mov	r1, sp
   235b0:	4668      	mov	r0, sp
   235b2:	f7e9 fd69 	bl	d088 <ocrypto_mod_p256_square>
   235b6:	466a      	mov	r2, sp
   235b8:	4629      	mov	r1, r5
   235ba:	4628      	mov	r0, r5
   235bc:	f104 0620 	add.w	r6, r4, #32
   235c0:	f7e9 fd63 	bl	d08a <ocrypto_mod_p256_mul>
   235c4:	f105 0720 	add.w	r7, r5, #32
   235c8:	466a      	mov	r2, sp
   235ca:	4621      	mov	r1, r4
   235cc:	4668      	mov	r0, sp
   235ce:	f7e9 fd5c 	bl	d08a <ocrypto_mod_p256_mul>
   235d2:	4632      	mov	r2, r6
   235d4:	4630      	mov	r0, r6
   235d6:	4639      	mov	r1, r7
   235d8:	f7e9 fd29 	bl	d02e <ocrypto_mod_p256_sub>
   235dc:	4631      	mov	r1, r6
   235de:	4620      	mov	r0, r4
   235e0:	f7e9 fd52 	bl	d088 <ocrypto_mod_p256_square>
   235e4:	462a      	mov	r2, r5
   235e6:	4621      	mov	r1, r4
   235e8:	4620      	mov	r0, r4
   235ea:	f7e9 fd20 	bl	d02e <ocrypto_mod_p256_sub>
   235ee:	466a      	mov	r2, sp
   235f0:	4621      	mov	r1, r4
   235f2:	4620      	mov	r0, r4
   235f4:	f7e9 fd1b 	bl	d02e <ocrypto_mod_p256_sub>
   235f8:	466a      	mov	r2, sp
   235fa:	4629      	mov	r1, r5
   235fc:	4640      	mov	r0, r8
   235fe:	f7e9 fd16 	bl	d02e <ocrypto_mod_p256_sub>
   23602:	4642      	mov	r2, r8
   23604:	4639      	mov	r1, r7
   23606:	4638      	mov	r0, r7
   23608:	f7e9 fd3f 	bl	d08a <ocrypto_mod_p256_mul>
   2360c:	4622      	mov	r2, r4
   2360e:	4629      	mov	r1, r5
   23610:	4668      	mov	r0, sp
   23612:	f7e9 fd0c 	bl	d02e <ocrypto_mod_p256_sub>
   23616:	466a      	mov	r2, sp
   23618:	4631      	mov	r1, r6
   2361a:	4630      	mov	r0, r6
   2361c:	f7e9 fd35 	bl	d08a <ocrypto_mod_p256_mul>
   23620:	463a      	mov	r2, r7
   23622:	4631      	mov	r1, r6
   23624:	4630      	mov	r0, r6
   23626:	f7e9 fd02 	bl	d02e <ocrypto_mod_p256_sub>
   2362a:	b008      	add	sp, #32
   2362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023630 <ocrypto_curve_p256_to64bytes>:
   23630:	b538      	push	{r3, r4, r5, lr}
   23632:	4604      	mov	r4, r0
   23634:	460d      	mov	r5, r1
   23636:	f7ff fdf9 	bl	2322c <ocrypto_mod_p256_toBytes>
   2363a:	f105 0120 	add.w	r1, r5, #32
   2363e:	f104 0020 	add.w	r0, r4, #32
   23642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23646:	f7ff bdf1 	b.w	2322c <ocrypto_mod_p256_toBytes>
   2364a:	bf00      	nop

0002364c <ocrypto_curve_p256_scalarmult>:
   2364c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23650:	b0b8      	sub	sp, #224	; 0xe0
   23652:	468a      	mov	sl, r1
   23654:	4681      	mov	r9, r0
   23656:	4611      	mov	r1, r2
   23658:	a810      	add	r0, sp, #64	; 0x40
   2365a:	4a51      	ldr	r2, [pc, #324]	; (237a0 <ocrypto_curve_p256_scalarmult+0x154>)
   2365c:	f7e9 f96c 	bl	c938 <ocrypto_bigint_sub256>
   23660:	4950      	ldr	r1, [pc, #320]	; (237a4 <ocrypto_curve_p256_scalarmult+0x158>)
   23662:	4602      	mov	r2, r0
   23664:	a810      	add	r0, sp, #64	; 0x40
   23666:	f7e9 f987 	bl	c978 <ocrypto_bigint_cadd256>
   2366a:	4680      	mov	r8, r0
   2366c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   2366e:	494c      	ldr	r1, [pc, #304]	; (237a0 <ocrypto_curve_p256_scalarmult+0x154>)
   23670:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   23674:	f1c7 0201 	rsb	r2, r7, #1
   23678:	a810      	add	r0, sp, #64	; 0x40
   2367a:	f7e9 f97d 	bl	c978 <ocrypto_bigint_cadd256>
   2367e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   23680:	4652      	mov	r2, sl
   23682:	43ed      	mvns	r5, r5
   23684:	a928      	add	r1, sp, #160	; 0xa0
   23686:	a818      	add	r0, sp, #96	; 0x60
   23688:	f7ff fec4 	bl	23414 <p256_zdblu>
   2368c:	0fed      	lsrs	r5, r5, #31
   2368e:	a920      	add	r1, sp, #128	; 0x80
   23690:	f1c5 0201 	rsb	r2, r5, #1
   23694:	4608      	mov	r0, r1
   23696:	f7ff fdad 	bl	231f4 <ocrypto_mod_p256_cneg>
   2369a:	26fe      	movs	r6, #254	; 0xfe
   2369c:	f1c8 0801 	rsb	r8, r8, #1
   236a0:	466a      	mov	r2, sp
   236a2:	a918      	add	r1, sp, #96	; 0x60
   236a4:	a828      	add	r0, sp, #160	; 0xa0
   236a6:	f7ff ff77 	bl	23598 <p256_zaddu>
   236aa:	1173      	asrs	r3, r6, #5
   236ac:	aa38      	add	r2, sp, #224	; 0xe0
   236ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   236b2:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   236b6:	f006 031f 	and.w	r3, r6, #31
   236ba:	40dc      	lsrs	r4, r3
   236bc:	f004 0401 	and.w	r4, r4, #1
   236c0:	4065      	eors	r5, r4
   236c2:	462a      	mov	r2, r5
   236c4:	a928      	add	r1, sp, #160	; 0xa0
   236c6:	a818      	add	r0, sp, #96	; 0x60
   236c8:	f7e9 f9c1 	bl	ca4e <ocrypto_bigint_cswap256>
   236cc:	462a      	mov	r2, r5
   236ce:	a930      	add	r1, sp, #192	; 0xc0
   236d0:	a820      	add	r0, sp, #128	; 0x80
   236d2:	f7e9 f9bc 	bl	ca4e <ocrypto_bigint_cswap256>
   236d6:	3e01      	subs	r6, #1
   236d8:	a928      	add	r1, sp, #160	; 0xa0
   236da:	a818      	add	r0, sp, #96	; 0x60
   236dc:	f7ff fef6 	bl	234cc <p256_zaddc>
   236e0:	1c73      	adds	r3, r6, #1
   236e2:	4625      	mov	r5, r4
   236e4:	d1dc      	bne.n	236a0 <ocrypto_curve_p256_scalarmult+0x54>
   236e6:	f1c4 0201 	rsb	r2, r4, #1
   236ea:	a808      	add	r0, sp, #32
   236ec:	a920      	add	r1, sp, #128	; 0x80
   236ee:	f7ff fd81 	bl	231f4 <ocrypto_mod_p256_cneg>
   236f2:	407d      	eors	r5, r7
   236f4:	466a      	mov	r2, sp
   236f6:	a918      	add	r1, sp, #96	; 0x60
   236f8:	a828      	add	r0, sp, #160	; 0xa0
   236fa:	f7ff ff4d 	bl	23598 <p256_zaddu>
   236fe:	a928      	add	r1, sp, #160	; 0xa0
   23700:	462a      	mov	r2, r5
   23702:	a818      	add	r0, sp, #96	; 0x60
   23704:	f7e9 f9a3 	bl	ca4e <ocrypto_bigint_cswap256>
   23708:	462a      	mov	r2, r5
   2370a:	a930      	add	r1, sp, #192	; 0xc0
   2370c:	a820      	add	r0, sp, #128	; 0x80
   2370e:	f7e9 f99e 	bl	ca4e <ocrypto_bigint_cswap256>
   23712:	a908      	add	r1, sp, #32
   23714:	466a      	mov	r2, sp
   23716:	4608      	mov	r0, r1
   23718:	f7e9 fcb7 	bl	d08a <ocrypto_mod_p256_mul>
   2371c:	a908      	add	r1, sp, #32
   2371e:	4608      	mov	r0, r1
   23720:	f7ff fd9e 	bl	23260 <ocrypto_mod_p256_invert>
   23724:	a908      	add	r1, sp, #32
   23726:	f109 0420 	add.w	r4, r9, #32
   2372a:	f10a 0220 	add.w	r2, sl, #32
   2372e:	4608      	mov	r0, r1
   23730:	f7e9 fcab 	bl	d08a <ocrypto_mod_p256_mul>
   23734:	a920      	add	r1, sp, #128	; 0x80
   23736:	aa08      	add	r2, sp, #32
   23738:	4620      	mov	r0, r4
   2373a:	f7e9 fca6 	bl	d08a <ocrypto_mod_p256_mul>
   2373e:	aa08      	add	r2, sp, #32
   23740:	a918      	add	r1, sp, #96	; 0x60
   23742:	4668      	mov	r0, sp
   23744:	f7e9 fca1 	bl	d08a <ocrypto_mod_p256_mul>
   23748:	4669      	mov	r1, sp
   2374a:	4668      	mov	r0, sp
   2374c:	f7e9 fc9c 	bl	d088 <ocrypto_mod_p256_square>
   23750:	aa18      	add	r2, sp, #96	; 0x60
   23752:	4669      	mov	r1, sp
   23754:	a808      	add	r0, sp, #32
   23756:	f7e9 fc98 	bl	d08a <ocrypto_mod_p256_mul>
   2375a:	4621      	mov	r1, r4
   2375c:	4668      	mov	r0, sp
   2375e:	f7e9 fc93 	bl	d088 <ocrypto_mod_p256_square>
   23762:	aa08      	add	r2, sp, #32
   23764:	4669      	mov	r1, sp
   23766:	4610      	mov	r0, r2
   23768:	f7e9 fc61 	bl	d02e <ocrypto_mod_p256_sub>
   2376c:	a908      	add	r1, sp, #32
   2376e:	4a0e      	ldr	r2, [pc, #56]	; (237a8 <ocrypto_curve_p256_scalarmult+0x15c>)
   23770:	4668      	mov	r0, sp
   23772:	f7e9 fc5c 	bl	d02e <ocrypto_mod_p256_sub>
   23776:	4620      	mov	r0, r4
   23778:	2120      	movs	r1, #32
   2377a:	f7e9 fbfe 	bl	cf7a <ocrypto_constant_time_is_zero>
   2377e:	a908      	add	r1, sp, #32
   23780:	4243      	negs	r3, r0
   23782:	4602      	mov	r2, r0
   23784:	4668      	mov	r0, sp
   23786:	ea43 0808 	orr.w	r8, r3, r8
   2378a:	f7e9 f960 	bl	ca4e <ocrypto_bigint_cswap256>
   2378e:	4648      	mov	r0, r9
   23790:	4669      	mov	r1, sp
   23792:	4a06      	ldr	r2, [pc, #24]	; (237ac <ocrypto_curve_p256_scalarmult+0x160>)
   23794:	f7e9 fc79 	bl	d08a <ocrypto_mod_p256_mul>
   23798:	4640      	mov	r0, r8
   2379a:	b038      	add	sp, #224	; 0xe0
   2379c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   237a0:	00027b10 	.word	0x00027b10
   237a4:	00027a90 	.word	0x00027a90
   237a8:	00027af0 	.word	0x00027af0
   237ac:	00027ab0 	.word	0x00027ab0

000237b0 <ocrypto_curve_p256_scalarmult_base>:
   237b0:	460a      	mov	r2, r1
   237b2:	4901      	ldr	r1, [pc, #4]	; (237b8 <ocrypto_curve_p256_scalarmult_base+0x8>)
   237b4:	f7ff bf4a 	b.w	2364c <ocrypto_curve_p256_scalarmult>
   237b8:	00027a50 	.word	0x00027a50

000237bc <main>:
	}
}
#else
void main(void)
{
	start_execute();
   237bc:	f7e9 bf7e 	b.w	d6bc <start_execute>

000237c0 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   237c0:	6843      	ldr	r3, [r0, #4]
   237c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   237c4:	b103      	cbz	r3, 237c8 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   237c6:	4718      	bx	r3
}
   237c8:	4770      	bx	lr

000237ca <slm_at_callback>:
{
   237ca:	b510      	push	{r4, lr}
   237cc:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   237ce:	f001 f8d3 	bl	24978 <strlen>
   237d2:	4601      	mov	r1, r0
   237d4:	4620      	mov	r0, r4
}
   237d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   237da:	f7e9 bfb3 	b.w	d744 <write_uart_string>

000237de <response_handler>:
{
   237de:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   237e0:	4608      	mov	r0, r1
{
   237e2:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   237e4:	f001 f8c8 	bl	24978 <strlen>
   237e8:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   237ea:	2901      	cmp	r1, #1
   237ec:	dd04      	ble.n	237f8 <response_handler+0x1a>
		write_uart_string(response, len);
   237ee:	4620      	mov	r0, r4
}
   237f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   237f4:	f7e9 bfa6 	b.w	d744 <write_uart_string>
}
   237f8:	bd10      	pop	{r4, pc}

000237fa <check_for_ipv4>:
	for (index = 0; index < length; index++) {
   237fa:	4602      	mov	r2, r0
   237fc:	1a13      	subs	r3, r2, r0
   237fe:	4299      	cmp	r1, r3
   23800:	dc01      	bgt.n	23806 <check_for_ipv4+0xc>
	return true;
   23802:	2001      	movs	r0, #1
   23804:	4770      	bx	lr
		char ch = *(address + index);
   23806:	f812 3b01 	ldrb.w	r3, [r2], #1
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
   2380a:	2b2e      	cmp	r3, #46	; 0x2e
   2380c:	d0f6      	beq.n	237fc <check_for_ipv4+0x2>
   2380e:	3b30      	subs	r3, #48	; 0x30
   23810:	2b09      	cmp	r3, #9
   23812:	d9f3      	bls.n	237fc <check_for_ipv4+0x2>
			return false;
   23814:	2000      	movs	r0, #0
}
   23816:	4770      	bx	lr

00023818 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   23818:	b570      	push	{r4, r5, r6, lr}
   2381a:	250c      	movs	r5, #12
   2381c:	434d      	muls	r5, r1
   2381e:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   23820:	f990 000b 	ldrsb.w	r0, [r0, #11]
   23824:	1974      	adds	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   23826:	4288      	cmp	r0, r1
   23828:	bfa8      	it	ge
   2382a:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
   2382c:	f04f 0420 	mov.w	r4, #32
   23830:	fb92 f4f4 	sdiv	r4, r2, r4
		p->levels[level].bits : p->levels[level].bits_p;
   23834:	bfb8      	it	lt
   23836:	5971      	ldrlt	r1, [r6, r5]

	return bn & 0x1f;
}
   23838:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   2383c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   23840:	6019      	str	r1, [r3, #0]
}
   23842:	bd70      	pop	{r4, r5, r6, pc}

00023844 <pool_irq_lock.isra.2.part.3>:
   23844:	f04f 0320 	mov.w	r3, #32
   23848:	f3ef 8011 	mrs	r0, BASEPRI
   2384c:	f383 8811 	msr	BASEPRI, r3
   23850:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   23854:	4770      	bx	lr

00023856 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23856:	07c3      	lsls	r3, r0, #31
   23858:	d503      	bpl.n	23862 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   2385a:	f381 8811 	msr	BASEPRI, r1
   2385e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   23862:	4770      	bx	lr

00023864 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   23864:	23ff      	movs	r3, #255	; 0xff
{
   23866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2386a:	6845      	ldr	r5, [r0, #4]
	for (i = 0; i < p->n_levels; i++) {
   2386c:	2200      	movs	r2, #0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2386e:	4629      	mov	r1, r5
		sys_dlist_init(&p->levels[i].free_list);
   23870:	f04f 0a0c 	mov.w	sl, #12
			bits += (nblocks + 31)/32;
   23874:	f04f 0b20 	mov.w	fp, #32
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   23878:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2387a:	6804      	ldr	r4, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2387c:	fb05 fc07 	mul.w	ip, r5, r7
	p->max_inline_level = -1;
   23880:	72c3      	strb	r3, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
   23882:	7a83      	ldrb	r3, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   23884:	4464      	add	r4, ip
	for (i = 0; i < p->n_levels; i++) {
   23886:	9301      	str	r3, [sp, #4]
   23888:	9b01      	ldr	r3, [sp, #4]
   2388a:	4293      	cmp	r3, r2
   2388c:	dc08      	bgt.n	238a0 <z_sys_mem_pool_base_init+0x3c>
   2388e:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   23890:	4619      	mov	r1, r3
   23892:	428f      	cmp	r7, r1
   23894:	eb05 0c03 	add.w	ip, r5, r3
   23898:	dc21      	bgt.n	238de <z_sys_mem_pool_base_init+0x7a>
}
   2389a:	b003      	add	sp, #12
   2389c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   238a0:	fbbc f3f1 	udiv	r3, ip, r1
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   238a4:	2b20      	cmp	r3, #32
			bits += (nblocks + 31)/32;
   238a6:	bf84      	itt	hi
   238a8:	331f      	addhi	r3, #31
   238aa:	fb93 f3fb 	sdivhi	r3, r3, fp
		sys_dlist_init(&p->levels[i].free_list);
   238ae:	fb0a fe02 	mul.w	lr, sl, r2
   238b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
		sz = WB_DN(sz / 4);
   238b6:	ea4f 0191 	mov.w	r1, r1, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   238ba:	eb08 060e 	add.w	r6, r8, lr
   238be:	f106 0904 	add.w	r9, r6, #4
	list->tail = (sys_dnode_t *)list;
   238c2:	e9c6 9901 	strd	r9, r9, [r6, #4]
		sz = WB_DN(sz / 4);
   238c6:	f021 0103 	bic.w	r1, r1, #3
			p->max_inline_level = i;
   238ca:	bf94      	ite	ls
   238cc:	72c2      	strbls	r2, [r0, #11]
			p->levels[i].bits_p = bits;
   238ce:	f848 400e 	strhi.w	r4, [r8, lr]
	for (i = 0; i < p->n_levels; i++) {
   238d2:	f102 0201 	add.w	r2, r2, #1
			bits += (nblocks + 31)/32;
   238d6:	bf88      	it	hi
   238d8:	eb04 0483 	addhi.w	r4, r4, r3, lsl #2
   238dc:	e7d4      	b.n	23888 <z_sys_mem_pool_base_init+0x24>
		sys_dlist_append(&p->levels[0].free_list, block);
   238de:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   238e0:	6806      	ldr	r6, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   238e2:	f102 0e04 	add.w	lr, r2, #4
	return (u8_t *)p->buf + lsz * block;
   238e6:	18f4      	adds	r4, r6, r3
	node->next = list;
   238e8:	f846 e003 	str.w	lr, [r6, r3]
	node->prev = list->tail;
   238ec:	6893      	ldr	r3, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   238ee:	3101      	adds	r1, #1
   238f0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   238f2:	6893      	ldr	r3, [r2, #8]
   238f4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   238f6:	6094      	str	r4, [r2, #8]
   238f8:	4663      	mov	r3, ip
   238fa:	e7ca      	b.n	23892 <z_sys_mem_pool_base_init+0x2e>

000238fc <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   238fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23900:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23902:	7a84      	ldrb	r4, [r0, #10]
{
   23904:	af00      	add	r7, sp, #0
   23906:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   2390a:	00a3      	lsls	r3, r4, #2
   2390c:	330a      	adds	r3, #10
   2390e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   23912:	ebad 0d03 	sub.w	sp, sp, r3
   23916:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   23918:	4653      	mov	r3, sl
   2391a:	6842      	ldr	r2, [r0, #4]
{
   2391c:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   2391e:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   23922:	2200      	movs	r2, #0
   23924:	4294      	cmp	r4, r2
   23926:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   2392a:	dd09      	ble.n	23940 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   2392c:	b122      	cbz	r2, 23938 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   2392e:	6818      	ldr	r0, [r3, #0]
   23930:	0880      	lsrs	r0, r0, #2
   23932:	f020 0003 	bic.w	r0, r0, #3
   23936:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   23938:	f853 0f04 	ldr.w	r0, [r3, #4]!
   2393c:	4288      	cmp	r0, r1
   2393e:	d208      	bcs.n	23952 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   23940:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   23944:	d107      	bne.n	23956 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   23946:	2300      	movs	r3, #0
   23948:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2394a:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   2394c:	f06f 000b 	mvn.w	r0, #11
   23950:	e047      	b.n	239e2 <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   23952:	3201      	adds	r2, #1
   23954:	e7e6      	b.n	23924 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23956:	7c28      	ldrb	r0, [r5, #16]
   23958:	f010 0001 	ands.w	r0, r0, #1
   2395c:	d001      	beq.n	23962 <z_sys_mem_pool_block_alloc+0x66>
   2395e:	f7ff ff71 	bl	23844 <pool_irq_lock.isra.2.part.3>
   23962:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   23964:	46c8      	mov	r8, r9
   23966:	fb03 f309 	mul.w	r3, r3, r9
   2396a:	1d1a      	adds	r2, r3, #4
   2396c:	68eb      	ldr	r3, [r5, #12]
	key = pool_irq_lock(p);
   2396e:	6178      	str	r0, [r7, #20]
   23970:	4413      	add	r3, r2
	return list->head == list;
   23972:	681c      	ldr	r4, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23974:	42a3      	cmp	r3, r4
   23976:	d070      	beq.n	23a5a <z_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
   23978:	e9d4 2300 	ldrd	r2, r3, [r4]
   2397c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2397e:	6822      	ldr	r2, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   23980:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
   23984:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   23986:	2300      	movs	r3, #0
	node->prev = NULL;
   23988:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2398c:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   2398e:	f107 0b1c 	add.w	fp, r7, #28
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   23992:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   23994:	fb92 f2f1 	sdiv	r2, r2, r1
   23998:	465b      	mov	r3, fp
   2399a:	4641      	mov	r1, r8
   2399c:	4628      	mov	r0, r5
   2399e:	f7ff ff3b 	bl	23818 <get_bit_ptr>
	*word |= (1<<bit);
   239a2:	2201      	movs	r2, #1
   239a4:	69f9      	ldr	r1, [r7, #28]
   239a6:	fa02 f000 	lsl.w	r0, r2, r0
   239aa:	680b      	ldr	r3, [r1, #0]
   239ac:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
   239b0:	4303      	orrs	r3, r0
   239b2:	600b      	str	r3, [r1, #0]
   239b4:	607a      	str	r2, [r7, #4]
			for (from_l = i; from_l < alloc_l; from_l++) {
   239b6:	45c8      	cmp	r8, r9
   239b8:	db17      	blt.n	239ea <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   239ba:	6979      	ldr	r1, [r7, #20]
   239bc:	7c28      	ldrb	r0, [r5, #16]
   239be:	f7ff ff4a 	bl	23856 <pool_irq_unlock.isra.4>
	*data_p = data;
   239c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   239c4:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   239c6:	2c00      	cmp	r4, #0
   239c8:	d0c0      	beq.n	2394c <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   239ca:	68fb      	ldr	r3, [r7, #12]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   239cc:	2000      	movs	r0, #0
	*level_p = alloc_l;
   239ce:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   239d2:	682b      	ldr	r3, [r5, #0]
   239d4:	1ae4      	subs	r4, r4, r3
   239d6:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   239da:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   239de:	68bb      	ldr	r3, [r7, #8]
   239e0:	601c      	str	r4, [r3, #0]
}
   239e2:	3724      	adds	r7, #36	; 0x24
   239e4:	46bd      	mov	sp, r7
   239e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   239ea:	682b      	ldr	r3, [r5, #0]
	bn = block_num(p, block, lsizes[l]);
   239ec:	6832      	ldr	r2, [r6, #0]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   239ee:	1ae3      	subs	r3, r4, r3
   239f0:	fb93 f2f2 	sdiv	r2, r3, r2
	set_alloc_bit(p, l + 1, 4*bn);
   239f4:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   239f8:	465b      	mov	r3, fp
   239fa:	0092      	lsls	r2, r2, #2
   239fc:	4641      	mov	r1, r8
   239fe:	4628      	mov	r0, r5
   23a00:	f7ff ff0a 	bl	23818 <get_bit_ptr>
	*word |= (1<<bit);
   23a04:	69fa      	ldr	r2, [r7, #28]
   23a06:	687b      	ldr	r3, [r7, #4]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23a08:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   23a0a:	fa03 f000 	lsl.w	r0, r3, r0
   23a0e:	6813      	ldr	r3, [r2, #0]
   23a10:	4303      	orrs	r3, r0
   23a12:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23a14:	230c      	movs	r3, #12
   23a16:	2203      	movs	r2, #3
   23a18:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   23a1c:	f856 0f04 	ldr.w	r0, [r6, #4]!
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   23a20:	f101 0e04 	add.w	lr, r1, #4
   23a24:	1823      	adds	r3, r4, r0
   23a26:	613a      	str	r2, [r7, #16]
	node->prev = list->tail;
   23a28:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   23a2a:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   23a2e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   23a30:	688a      	ldr	r2, [r1, #8]
   23a32:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   23a34:	693a      	ldr	r2, [r7, #16]
	list->tail = node;
   23a36:	608b      	str	r3, [r1, #8]
   23a38:	3a01      	subs	r2, #1
   23a3a:	4403      	add	r3, r0
   23a3c:	613a      	str	r2, [r7, #16]
   23a3e:	d1f3      	bne.n	23a28 <z_sys_mem_pool_block_alloc+0x12c>
				pool_irq_unlock(p, key);
   23a40:	6979      	ldr	r1, [r7, #20]
   23a42:	7c28      	ldrb	r0, [r5, #16]
   23a44:	f7ff ff07 	bl	23856 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23a48:	7c2b      	ldrb	r3, [r5, #16]
   23a4a:	07db      	lsls	r3, r3, #31
   23a4c:	d503      	bpl.n	23a56 <z_sys_mem_pool_block_alloc+0x15a>
   23a4e:	f7ff fef9 	bl	23844 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   23a52:	6178      	str	r0, [r7, #20]
   23a54:	e7af      	b.n	239b6 <z_sys_mem_pool_block_alloc+0xba>
		return 0;
   23a56:	6938      	ldr	r0, [r7, #16]
   23a58:	e7fb      	b.n	23a52 <z_sys_mem_pool_block_alloc+0x156>
	for (i = alloc_l; i >= 0; i--) {
   23a5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   23a5e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   23a62:	f1a4 030c 	sub.w	r3, r4, #12
   23a66:	d184      	bne.n	23972 <z_sys_mem_pool_block_alloc+0x76>
   23a68:	2400      	movs	r4, #0
   23a6a:	e7a6      	b.n	239ba <z_sys_mem_pool_block_alloc+0xbe>

00023a6c <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   23a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a70:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23a72:	7a83      	ldrb	r3, [r0, #10]
{
   23a74:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   23a76:	009b      	lsls	r3, r3, #2
   23a78:	330a      	adds	r3, #10
   23a7a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   23a7e:	ebad 0d03 	sub.w	sp, sp, r3
   23a82:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   23a84:	6843      	ldr	r3, [r0, #4]
{
   23a86:	4605      	mov	r5, r0
   23a88:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   23a8a:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   23a8c:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   23a90:	4281      	cmp	r1, r0
   23a92:	d214      	bcs.n	23abe <z_sys_mem_pool_block_free+0x52>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23a94:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   23a96:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23a98:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   23a9c:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23a9e:	d001      	beq.n	23aa4 <z_sys_mem_pool_block_free+0x38>
   23aa0:	f7ff fed0 	bl	23844 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   23aa4:	4604      	mov	r4, r0
	while (level >= 0) {
   23aa6:	2e00      	cmp	r6, #0
   23aa8:	da11      	bge.n	23ace <z_sys_mem_pool_block_free+0x62>
	return -1;
   23aaa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   23aae:	4621      	mov	r1, r4
   23ab0:	7c28      	ldrb	r0, [r5, #16]
   23ab2:	f7ff fed0 	bl	23856 <pool_irq_unlock.isra.4>
}
   23ab6:	3714      	adds	r7, #20
   23ab8:	46bd      	mov	sp, r7
   23aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   23abe:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   23ac0:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   23ac2:	089b      	lsrs	r3, r3, #2
   23ac4:	f023 0303 	bic.w	r3, r3, #3
   23ac8:	f844 3f04 	str.w	r3, [r4, #4]!
   23acc:	e7e0      	b.n	23a90 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   23ace:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   23ad2:	4642      	mov	r2, r8
	return (u8_t *)p->buf + lsz * block;
   23ad4:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
   23ad8:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   23ada:	682b      	ldr	r3, [r5, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   23adc:	4631      	mov	r1, r6
	return (u8_t *)p->buf + lsz * block;
   23ade:	eb03 090a 	add.w	r9, r3, sl
   23ae2:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   23ae4:	4628      	mov	r0, r5
   23ae6:	f107 030c 	add.w	r3, r7, #12
   23aea:	f7ff fe95 	bl	23818 <get_bit_ptr>
	*word &= ~(1<<bit);
   23aee:	2301      	movs	r3, #1
   23af0:	68fa      	ldr	r2, [r7, #12]
   23af2:	fa03 f000 	lsl.w	r0, r3, r0
   23af6:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   23af8:	6839      	ldr	r1, [r7, #0]
   23afa:	ea23 0300 	bic.w	r3, r3, r0
   23afe:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   23b00:	220c      	movs	r2, #12
   23b02:	68eb      	ldr	r3, [r5, #12]
   23b04:	fb02 3306 	mla	r3, r2, r6, r3
   23b08:	1d1a      	adds	r2, r3, #4
   23b0a:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   23b0e:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   23b10:	4621      	mov	r1, r4
   23b12:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   23b16:	689a      	ldr	r2, [r3, #8]
   23b18:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   23b1c:	f8c3 9008 	str.w	r9, [r3, #8]
   23b20:	7c28      	ldrb	r0, [r5, #16]
   23b22:	f7ff fe98 	bl	23856 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   23b26:	7c28      	ldrb	r0, [r5, #16]
   23b28:	f010 0001 	ands.w	r0, r0, #1
   23b2c:	d001      	beq.n	23b32 <z_sys_mem_pool_block_free+0xc6>
   23b2e:	f7ff fe89 	bl	23844 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   23b32:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   23b34:	2e00      	cmp	r6, #0
   23b36:	d0ba      	beq.n	23aae <z_sys_mem_pool_block_free+0x42>
	int bit = get_bit_ptr(p, level, bn, &word);
   23b38:	f107 030c 	add.w	r3, r7, #12
   23b3c:	4642      	mov	r2, r8
   23b3e:	4631      	mov	r1, r6
   23b40:	4628      	mov	r0, r5
   23b42:	f7ff fe69 	bl	23818 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   23b46:	2304      	movs	r3, #4
   23b48:	fb90 f0f3 	sdiv	r0, r0, r3
   23b4c:	68fb      	ldr	r3, [r7, #12]
   23b4e:	0080      	lsls	r0, r0, #2
   23b50:	681b      	ldr	r3, [r3, #0]
   23b52:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   23b56:	f010 000f 	ands.w	r0, r0, #15
   23b5a:	d1a8      	bne.n	23aae <z_sys_mem_pool_block_free+0x42>
	node->next = NULL;
   23b5c:	4686      	mov	lr, r0
			int b = (bn & ~3) + i;
   23b5e:	f028 0a03 	bic.w	sl, r8, #3
	return (u8_t *)p->buf + lsz * block;
   23b62:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   23b64:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   23b68:	4353      	muls	r3, r2
   23b6a:	682a      	ldr	r2, [r5, #0]
		for (i = 0; i < 4; i++) {
   23b6c:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   23b6e:	eb02 0c03 	add.w	ip, r2, r3
	node->prev->next = node->next;
   23b72:	58d1      	ldr	r1, [r2, r3]
   23b74:	f8dc 9004 	ldr.w	r9, [ip, #4]
		for (i = 0; i < 4; i++) {
   23b78:	2804      	cmp	r0, #4
   23b7a:	f8c9 1000 	str.w	r1, [r9]
	node->next->prev = node->prev;
   23b7e:	58d1      	ldr	r1, [r2, r3]
   23b80:	f8c1 9004 	str.w	r9, [r1, #4]
	node->next = NULL;
   23b84:	f842 e003 	str.w	lr, [r2, r3]
	node->prev = NULL;
   23b88:	f8cc e004 	str.w	lr, [ip, #4]
   23b8c:	d1e9      	bne.n	23b62 <z_sys_mem_pool_block_free+0xf6>
		level = level - 1;
   23b8e:	3e01      	subs	r6, #1
		bn = bn / 4;
   23b90:	fb98 f8f0 	sdiv	r8, r8, r0
   23b94:	e787      	b.n	23aa6 <z_sys_mem_pool_block_free+0x3a>

00023b96 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23b96:	4604      	mov	r4, r0
   23b98:	b508      	push	{r3, lr}
   23b9a:	4608      	mov	r0, r1
   23b9c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   23b9e:	461a      	mov	r2, r3
   23ba0:	47a0      	blx	r4
	return z_impl_k_current_get();
   23ba2:	f7fe ffd5 	bl	22b50 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   23ba6:	f7ec fed3 	bl	10950 <z_impl_k_thread_abort>

00023baa <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   23baa:	b510      	push	{r4, lr}
   23bac:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   23bae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23bb2:	4620      	mov	r0, r4
   23bb4:	f002 f882 	bl	25cbc <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   23bb8:	4603      	mov	r3, r0
   23bba:	2800      	cmp	r0, #0
   23bbc:	d0f7      	beq.n	23bae <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   23bbe:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23bc0:	3308      	adds	r3, #8
   23bc2:	e8d3 1fef 	ldaex	r1, [r3]
   23bc6:	f021 0c01 	bic.w	ip, r1, #1
   23bca:	e8c3 cfee 	stlex	lr, ip, [r3]
   23bce:	f1be 0f00 	cmp.w	lr, #0
   23bd2:	d1f6      	bne.n	23bc2 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   23bd4:	07cb      	lsls	r3, r1, #31
   23bd6:	d500      	bpl.n	23bda <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   23bd8:	4790      	blx	r2
	z_impl_k_yield();
   23bda:	f7fe ff43 	bl	22a64 <z_impl_k_yield>
   23bde:	e7e6      	b.n	23bae <z_work_q_main+0x4>

00023be0 <arch_printk_char_out>:
}
   23be0:	2000      	movs	r0, #0
   23be2:	4770      	bx	lr

00023be4 <print_err>:
{
   23be4:	b570      	push	{r4, r5, r6, lr}
   23be6:	460d      	mov	r5, r1
   23be8:	4604      	mov	r4, r0
	out('E', ctx);
   23bea:	2045      	movs	r0, #69	; 0x45
   23bec:	47a0      	blx	r4
	out('R', ctx);
   23bee:	4629      	mov	r1, r5
   23bf0:	2052      	movs	r0, #82	; 0x52
   23bf2:	47a0      	blx	r4
	out('R', ctx);
   23bf4:	4629      	mov	r1, r5
   23bf6:	4623      	mov	r3, r4
}
   23bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   23bfc:	2052      	movs	r0, #82	; 0x52
   23bfe:	4718      	bx	r3

00023c00 <z_vprintk>:
{
   23c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   23c04:	f04f 0800 	mov.w	r8, #0
{
   23c08:	4606      	mov	r6, r0
   23c0a:	460f      	mov	r7, r1
   23c0c:	461c      	mov	r4, r3
	int min_width = -1;
   23c0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   23c12:	46c1      	mov	r9, r8
{
   23c14:	b08b      	sub	sp, #44	; 0x2c
   23c16:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
   23c1a:	2500      	movs	r5, #0
					break;
   23c1c:	e005      	b.n	23c2a <z_vprintk+0x2a>
		if (!might_format) {
   23c1e:	b95d      	cbnz	r5, 23c38 <z_vprintk+0x38>
			if (*fmt != '%') {
   23c20:	2825      	cmp	r0, #37	; 0x25
   23c22:	f000 8156 	beq.w	23ed2 <z_vprintk+0x2d2>
				out((int)*fmt, ctx);
   23c26:	4639      	mov	r1, r7
   23c28:	47b0      	blx	r6
	while (*fmt) {
   23c2a:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
   23c2e:	2800      	cmp	r0, #0
   23c30:	d1f5      	bne.n	23c1e <z_vprintk+0x1e>
}
   23c32:	b00b      	add	sp, #44	; 0x2c
   23c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   23c38:	2864      	cmp	r0, #100	; 0x64
   23c3a:	d06d      	beq.n	23d18 <z_vprintk+0x118>
   23c3c:	d81a      	bhi.n	23c74 <z_vprintk+0x74>
   23c3e:	2839      	cmp	r0, #57	; 0x39
   23c40:	d80a      	bhi.n	23c58 <z_vprintk+0x58>
   23c42:	2831      	cmp	r0, #49	; 0x31
   23c44:	d25f      	bcs.n	23d06 <z_vprintk+0x106>
   23c46:	282d      	cmp	r0, #45	; 0x2d
   23c48:	f000 8149 	beq.w	23ede <z_vprintk+0x2de>
   23c4c:	2830      	cmp	r0, #48	; 0x30
   23c4e:	d04b      	beq.n	23ce8 <z_vprintk+0xe8>
   23c50:	2825      	cmp	r0, #37	; 0x25
   23c52:	d107      	bne.n	23c64 <z_vprintk+0x64>
				out((int)'%', ctx);
   23c54:	4639      	mov	r1, r7
   23c56:	e00b      	b.n	23c70 <z_vprintk+0x70>
			switch (*fmt) {
   23c58:	2858      	cmp	r0, #88	; 0x58
   23c5a:	f000 80bc 	beq.w	23dd6 <z_vprintk+0x1d6>
   23c5e:	2863      	cmp	r0, #99	; 0x63
   23c60:	f000 8131 	beq.w	23ec6 <z_vprintk+0x2c6>
					out((int)'%', ctx);
   23c64:	4639      	mov	r1, r7
   23c66:	2025      	movs	r0, #37	; 0x25
   23c68:	47b0      	blx	r6
					out((int)*fmt, ctx);
   23c6a:	4639      	mov	r1, r7
   23c6c:	f89b 0000 	ldrb.w	r0, [fp]
   23c70:	47b0      	blx	r6
   23c72:	e7d2      	b.n	23c1a <z_vprintk+0x1a>
			switch (*fmt) {
   23c74:	2870      	cmp	r0, #112	; 0x70
   23c76:	f000 80a4 	beq.w	23dc2 <z_vprintk+0x1c2>
   23c7a:	d811      	bhi.n	23ca0 <z_vprintk+0xa0>
   23c7c:	2869      	cmp	r0, #105	; 0x69
   23c7e:	d04b      	beq.n	23d18 <z_vprintk+0x118>
   23c80:	286c      	cmp	r0, #108	; 0x6c
   23c82:	d105      	bne.n	23c90 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   23c84:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23c88:	d129      	bne.n	23cde <z_vprintk+0xde>
					length_mod = 'L';
   23c8a:	f04f 084c 	mov.w	r8, #76	; 0x4c
   23c8e:	e7cc      	b.n	23c2a <z_vprintk+0x2a>
			switch (*fmt) {
   23c90:	2868      	cmp	r0, #104	; 0x68
   23c92:	d1e7      	bne.n	23c64 <z_vprintk+0x64>
				if (*fmt == 'h' && length_mod == 'h') {
   23c94:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   23c98:	d121      	bne.n	23cde <z_vprintk+0xde>
					length_mod = 'H';
   23c9a:	f04f 0848 	mov.w	r8, #72	; 0x48
   23c9e:	e7c4      	b.n	23c2a <z_vprintk+0x2a>
			switch (*fmt) {
   23ca0:	2875      	cmp	r0, #117	; 0x75
   23ca2:	d070      	beq.n	23d86 <z_vprintk+0x186>
   23ca4:	d817      	bhi.n	23cd6 <z_vprintk+0xd6>
   23ca6:	2873      	cmp	r0, #115	; 0x73
   23ca8:	d1dc      	bne.n	23c64 <z_vprintk+0x64>
				char *s = va_arg(ap, char *);
   23caa:	6825      	ldr	r5, [r4, #0]
   23cac:	1d23      	adds	r3, r4, #4
   23cae:	9302      	str	r3, [sp, #8]
   23cb0:	462b      	mov	r3, r5
				while (*s) {
   23cb2:	461c      	mov	r4, r3
   23cb4:	f814 0b01 	ldrb.w	r0, [r4], #1
   23cb8:	2800      	cmp	r0, #0
   23cba:	f040 80fb 	bne.w	23eb4 <z_vprintk+0x2b4>
				if (padding == PAD_SPACE_AFTER) {
   23cbe:	f1b9 0f03 	cmp.w	r9, #3
   23cc2:	f040 8112 	bne.w	23eea <z_vprintk+0x2ea>
					int remaining = min_width - (s - start);
   23cc6:	1b5c      	subs	r4, r3, r5
   23cc8:	ebaa 0404 	sub.w	r4, sl, r4
					while (remaining-- > 0) {
   23ccc:	2c00      	cmp	r4, #0
   23cce:	f300 80f5 	bgt.w	23ebc <z_vprintk+0x2bc>
				char *s = va_arg(ap, char *);
   23cd2:	9c02      	ldr	r4, [sp, #8]
   23cd4:	e7a1      	b.n	23c1a <z_vprintk+0x1a>
			switch (*fmt) {
   23cd6:	2878      	cmp	r0, #120	; 0x78
   23cd8:	d07d      	beq.n	23dd6 <z_vprintk+0x1d6>
   23cda:	287a      	cmp	r0, #122	; 0x7a
   23cdc:	d1c2      	bne.n	23c64 <z_vprintk+0x64>
				} else if (length_mod == 0) {
   23cde:	f1b8 0f00 	cmp.w	r8, #0
   23ce2:	d1bf      	bne.n	23c64 <z_vprintk+0x64>
   23ce4:	4680      	mov	r8, r0
   23ce6:	e7a0      	b.n	23c2a <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   23ce8:	f1ba 0f00 	cmp.w	sl, #0
   23cec:	da0e      	bge.n	23d0c <z_vprintk+0x10c>
   23cee:	f1b9 0f00 	cmp.w	r9, #0
   23cf2:	f000 80f7 	beq.w	23ee4 <z_vprintk+0x2e4>
					min_width = *fmt - '0';
   23cf6:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   23cfa:	f1b9 0f00 	cmp.w	r9, #0
   23cfe:	bf08      	it	eq
   23d00:	f04f 0902 	moveq.w	r9, #2
   23d04:	e791      	b.n	23c2a <z_vprintk+0x2a>
				if (min_width < 0) {
   23d06:	f1ba 0f00 	cmp.w	sl, #0
   23d0a:	dbf4      	blt.n	23cf6 <z_vprintk+0xf6>
					min_width = 10 * min_width + *fmt - '0';
   23d0c:	230a      	movs	r3, #10
   23d0e:	fb03 0a0a 	mla	sl, r3, sl, r0
   23d12:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   23d16:	e7f0      	b.n	23cfa <z_vprintk+0xfa>
				if (length_mod == 'z') {
   23d18:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   23d1c:	d102      	bne.n	23d24 <z_vprintk+0x124>
					d = va_arg(ap, int);
   23d1e:	6825      	ldr	r5, [r4, #0]
   23d20:	3404      	adds	r4, #4
   23d22:	e01f      	b.n	23d64 <z_vprintk+0x164>
				} else if (length_mod == 'l') {
   23d24:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23d28:	d0f9      	beq.n	23d1e <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
   23d2a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23d2e:	d1f6      	bne.n	23d1e <z_vprintk+0x11e>
					long long lld = va_arg(ap, long long);
   23d30:	3407      	adds	r4, #7
   23d32:	f024 0307 	bic.w	r3, r4, #7
   23d36:	f103 0408 	add.w	r4, r3, #8
   23d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > __LONG_MAX__ ||
   23d3e:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
					long long lld = va_arg(ap, long long);
   23d42:	e9cd 2302 	strd	r2, r3, [sp, #8]
					if (lld > __LONG_MAX__ ||
   23d46:	f143 0100 	adc.w	r1, r3, #0
   23d4a:	2300      	movs	r3, #0
   23d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23d50:	428b      	cmp	r3, r1
   23d52:	bf08      	it	eq
   23d54:	4282      	cmpeq	r2, r0
   23d56:	d204      	bcs.n	23d62 <z_vprintk+0x162>
						print_err(out, ctx);
   23d58:	4639      	mov	r1, r7
   23d5a:	4630      	mov	r0, r6
   23d5c:	f7ff ff42 	bl	23be4 <print_err>
   23d60:	e75b      	b.n	23c1a <z_vprintk+0x1a>
					d = lld;
   23d62:	9d02      	ldr	r5, [sp, #8]
				if (d < 0) {
   23d64:	2d00      	cmp	r5, #0
   23d66:	da05      	bge.n	23d74 <z_vprintk+0x174>
					out((int)'-', ctx);
   23d68:	4639      	mov	r1, r7
   23d6a:	202d      	movs	r0, #45	; 0x2d
   23d6c:	47b0      	blx	r6
					d = -d;
   23d6e:	426d      	negs	r5, r5
					min_width--;
   23d70:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   23d74:	464b      	mov	r3, r9
   23d76:	462a      	mov	r2, r5
   23d78:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   23d7c:	4639      	mov	r1, r7
   23d7e:	4630      	mov	r0, r6
   23d80:	f7eb fa06 	bl	f190 <_printk_dec_ulong>
   23d84:	e749      	b.n	23c1a <z_vprintk+0x1a>
				if (length_mod == 'z') {
   23d86:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   23d8a:	d102      	bne.n	23d92 <z_vprintk+0x192>
					u = va_arg(ap, unsigned int);
   23d8c:	6822      	ldr	r2, [r4, #0]
   23d8e:	3404      	adds	r4, #4
   23d90:	e013      	b.n	23dba <z_vprintk+0x1ba>
				} else if (length_mod == 'l') {
   23d92:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23d96:	d0f9      	beq.n	23d8c <z_vprintk+0x18c>
				} else if (length_mod == 'L') {
   23d98:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23d9c:	d1f6      	bne.n	23d8c <z_vprintk+0x18c>
					if (llu > ~0UL) {
   23d9e:	2100      	movs	r1, #0
   23da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   23da4:	3407      	adds	r4, #7
   23da6:	f024 0307 	bic.w	r3, r4, #7
   23daa:	f103 0408 	add.w	r4, r3, #8
   23dae:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > ~0UL) {
   23db2:	4299      	cmp	r1, r3
   23db4:	bf08      	it	eq
   23db6:	4290      	cmpeq	r0, r2
   23db8:	d3ce      	bcc.n	23d58 <z_vprintk+0x158>
				_printk_dec_ulong(out, ctx, u, padding,
   23dba:	f8cd a000 	str.w	sl, [sp]
   23dbe:	464b      	mov	r3, r9
   23dc0:	e7dc      	b.n	23d7c <z_vprintk+0x17c>
				out('0', ctx);
   23dc2:	4639      	mov	r1, r7
   23dc4:	2030      	movs	r0, #48	; 0x30
   23dc6:	47b0      	blx	r6
				out('x', ctx);
   23dc8:	4639      	mov	r1, r7
   23dca:	2078      	movs	r0, #120	; 0x78
   23dcc:	47b0      	blx	r6
					min_width = 8;
   23dce:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   23dd2:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   23dd6:	f89b 3000 	ldrb.w	r3, [fp]
   23dda:	2b70      	cmp	r3, #112	; 0x70
   23ddc:	d105      	bne.n	23dea <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   23dde:	6823      	ldr	r3, [r4, #0]
   23de0:	3404      	adds	r4, #4
   23de2:	9306      	str	r3, [sp, #24]
   23de4:	2300      	movs	r3, #0
   23de6:	9302      	str	r3, [sp, #8]
   23de8:	e00e      	b.n	23e08 <z_vprintk+0x208>
				} else if (length_mod == 'l') {
   23dea:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   23dee:	d0f6      	beq.n	23dde <z_vprintk+0x1de>
				} else if (length_mod == 'L') {
   23df0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   23df4:	d1f3      	bne.n	23dde <z_vprintk+0x1de>
					x = va_arg(ap, unsigned long long);
   23df6:	3407      	adds	r4, #7
   23df8:	f024 0307 	bic.w	r3, r4, #7
   23dfc:	681a      	ldr	r2, [r3, #0]
   23dfe:	f103 0408 	add.w	r4, r3, #8
   23e02:	685b      	ldr	r3, [r3, #4]
   23e04:	9206      	str	r2, [sp, #24]
   23e06:	9302      	str	r3, [sp, #8]
	int digits = 0;
   23e08:	2300      	movs	r3, #0
	int remaining = 16; /* 16 digits max */
   23e0a:	2210      	movs	r2, #16
	int digits = 0;
   23e0c:	9305      	str	r3, [sp, #20]
	int found_largest_digit = 0;
   23e0e:	9307      	str	r3, [sp, #28]
	int shift = sizeof(num) * 8;
   23e10:	2340      	movs	r3, #64	; 0x40
		shift -= 4;
   23e12:	3b04      	subs	r3, #4
		nibble = (num >> shift) & 0xf;
   23e14:	9902      	ldr	r1, [sp, #8]
   23e16:	9806      	ldr	r0, [sp, #24]
   23e18:	f1c3 0c20 	rsb	ip, r3, #32
   23e1c:	f1a3 0e20 	sub.w	lr, r3, #32
   23e20:	40d8      	lsrs	r0, r3
   23e22:	fa01 fc0c 	lsl.w	ip, r1, ip
   23e26:	ea40 000c 	orr.w	r0, r0, ip
   23e2a:	fa21 fe0e 	lsr.w	lr, r1, lr
   23e2e:	ea40 000e 	orr.w	r0, r0, lr
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   23e32:	f010 000f 	ands.w	r0, r0, #15
   23e36:	d107      	bne.n	23e48 <z_vprintk+0x248>
   23e38:	9907      	ldr	r1, [sp, #28]
   23e3a:	b901      	cbnz	r1, 23e3e <z_vprintk+0x23e>
   23e3c:	bb2b      	cbnz	r3, 23e8a <z_vprintk+0x28a>
			nibble += nibble > 9 ? 87 : 48;
   23e3e:	f04f 0c30 	mov.w	ip, #48	; 0x30
   23e42:	e007      	b.n	23e54 <z_vprintk+0x254>
			found_largest_digit = 1;
   23e44:	9507      	str	r5, [sp, #28]
   23e46:	e7e4      	b.n	23e12 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
   23e48:	2809      	cmp	r0, #9
   23e4a:	bf8c      	ite	hi
   23e4c:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   23e50:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   23e54:	4639      	mov	r1, r7
   23e56:	4460      	add	r0, ip
   23e58:	e9cd 3207 	strd	r3, r2, [sp, #28]
   23e5c:	47b0      	blx	r6
			digits++;
   23e5e:	9b05      	ldr	r3, [sp, #20]
   23e60:	3301      	adds	r3, #1
   23e62:	9305      	str	r3, [sp, #20]
	while (shift >= 4) {
   23e64:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   23e68:	2b00      	cmp	r3, #0
   23e6a:	d1eb      	bne.n	23e44 <z_vprintk+0x244>
	if (padding == PAD_SPACE_AFTER) {
   23e6c:	f1b9 0f03 	cmp.w	r9, #3
   23e70:	f47f aed3 	bne.w	23c1a <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   23e74:	9b05      	ldr	r3, [sp, #20]
   23e76:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   23e7a:	2d00      	cmp	r5, #0
   23e7c:	f77f aecd 	ble.w	23c1a <z_vprintk+0x1a>
			out(' ', ctx);
   23e80:	4639      	mov	r1, r7
   23e82:	2020      	movs	r0, #32
   23e84:	47b0      	blx	r6
   23e86:	3d01      	subs	r5, #1
   23e88:	e7f7      	b.n	23e7a <z_vprintk+0x27a>
		if (remaining-- <= min_width) {
   23e8a:	1e51      	subs	r1, r2, #1
   23e8c:	4592      	cmp	sl, r2
   23e8e:	9108      	str	r1, [sp, #32]
   23e90:	db07      	blt.n	23ea2 <z_vprintk+0x2a2>
			if (padding == PAD_ZERO_BEFORE) {
   23e92:	f1b9 0f01 	cmp.w	r9, #1
   23e96:	d106      	bne.n	23ea6 <z_vprintk+0x2a6>
				out('0', ctx);
   23e98:	4639      	mov	r1, r7
   23e9a:	2030      	movs	r0, #48	; 0x30
   23e9c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   23e9e:	47b0      	blx	r6
   23ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
   23ea2:	9a08      	ldr	r2, [sp, #32]
   23ea4:	e7b5      	b.n	23e12 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   23ea6:	f1b9 0f02 	cmp.w	r9, #2
   23eaa:	d1fa      	bne.n	23ea2 <z_vprintk+0x2a2>
   23eac:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   23eae:	4639      	mov	r1, r7
   23eb0:	2020      	movs	r0, #32
   23eb2:	e7f4      	b.n	23e9e <z_vprintk+0x29e>
					out((int)(*s++), ctx);
   23eb4:	4639      	mov	r1, r7
   23eb6:	47b0      	blx	r6
   23eb8:	4623      	mov	r3, r4
   23eba:	e6fa      	b.n	23cb2 <z_vprintk+0xb2>
						out(' ', ctx);
   23ebc:	4639      	mov	r1, r7
   23ebe:	2020      	movs	r0, #32
   23ec0:	47b0      	blx	r6
   23ec2:	3c01      	subs	r4, #1
   23ec4:	e702      	b.n	23ccc <z_vprintk+0xcc>
				out(c, ctx);
   23ec6:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   23ec8:	1d25      	adds	r5, r4, #4
				out(c, ctx);
   23eca:	4639      	mov	r1, r7
   23ecc:	47b0      	blx	r6
				int c = va_arg(ap, int);
   23ece:	462c      	mov	r4, r5
   23ed0:	e6a3      	b.n	23c1a <z_vprintk+0x1a>
				length_mod = 0;
   23ed2:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   23ed4:	46a9      	mov	r9, r5
				min_width = -1;
   23ed6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   23eda:	2501      	movs	r5, #1
   23edc:	e6a5      	b.n	23c2a <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   23ede:	f04f 0903 	mov.w	r9, #3
   23ee2:	e6a2      	b.n	23c2a <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   23ee4:	f04f 0901 	mov.w	r9, #1
   23ee8:	e69f      	b.n	23c2a <z_vprintk+0x2a>
				char *s = va_arg(ap, char *);
   23eea:	9c02      	ldr	r4, [sp, #8]
			might_format = 0;
   23eec:	4605      	mov	r5, r0
   23eee:	e69c      	b.n	23c2a <z_vprintk+0x2a>

00023ef0 <printk>:
{
   23ef0:	b40f      	push	{r0, r1, r2, r3}
   23ef2:	b507      	push	{r0, r1, r2, lr}
   23ef4:	a904      	add	r1, sp, #16
   23ef6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23efa:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   23efc:	f7eb f99a 	bl	f234 <vprintk>
}
   23f00:	b003      	add	sp, #12
   23f02:	f85d eb04 	ldr.w	lr, [sp], #4
   23f06:	b004      	add	sp, #16
   23f08:	4770      	bx	lr

00023f0a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   23f0a:	4770      	bx	lr

00023f0c <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   23f0c:	f7fd be26 	b.w	21b5c <SystemInit>

00023f10 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   23f10:	2300      	movs	r3, #0
	list->head = NULL;
   23f12:	e9c0 3300 	strd	r3, r3, [r0]
}
   23f16:	4770      	bx	lr

00023f18 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   23f18:	6803      	ldr	r3, [r0, #0]
   23f1a:	b923      	cbnz	r3, 23f26 <log_list_add_tail+0xe>
		list->head = msg;
   23f1c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   23f1e:	2300      	movs	r3, #0
	list->tail = msg;
   23f20:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   23f22:	600b      	str	r3, [r1, #0]
}
   23f24:	4770      	bx	lr
		list->tail->next = msg;
   23f26:	6843      	ldr	r3, [r0, #4]
   23f28:	6019      	str	r1, [r3, #0]
   23f2a:	e7f8      	b.n	23f1e <log_list_add_tail+0x6>

00023f2c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   23f2c:	6800      	ldr	r0, [r0, #0]
   23f2e:	4770      	bx	lr

00023f30 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   23f30:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   23f32:	b10b      	cbz	r3, 23f38 <log_list_head_get+0x8>
		list->head = list->head->next;
   23f34:	681a      	ldr	r2, [r3, #0]
   23f36:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   23f38:	4618      	mov	r0, r3
   23f3a:	4770      	bx	lr

00023f3c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   23f3c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23f3e:	f7eb fc3f 	bl	f7c0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   23f42:	b118      	cbz	r0, 23f4c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   23f44:	2301      	movs	r3, #1
   23f46:	6043      	str	r3, [r0, #4]
   23f48:	2300      	movs	r3, #0
   23f4a:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.raw = 0U;
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   23f4c:	bd08      	pop	{r3, pc}

00023f4e <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   23f4e:	f7eb bfc7 	b.w	fee0 <z_timer_cycle_get_32>

00023f52 <dummy_timestamp>:
   23f52:	2000      	movs	r0, #0
   23f54:	4770      	bx	lr

00023f56 <log_0>:
{
   23f56:	b538      	push	{r3, r4, r5, lr}
   23f58:	4605      	mov	r5, r0
   23f5a:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   23f5c:	f7ff ffee 	bl	23f3c <z_log_msg_std_alloc>

	if (msg != NULL) {
   23f60:	b128      	cbz	r0, 23f6e <log_0+0x18>
		msg->str = str;
   23f62:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   23f64:	4621      	mov	r1, r4
}
   23f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   23f6a:	f7eb bb97 	b.w	f69c <msg_finalize>
}
   23f6e:	bd38      	pop	{r3, r4, r5, pc}

00023f70 <log_1>:
{
   23f70:	b570      	push	{r4, r5, r6, lr}
   23f72:	4604      	mov	r4, r0
   23f74:	460e      	mov	r6, r1
   23f76:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23f78:	f7ff ffe0 	bl	23f3c <z_log_msg_std_alloc>

	if (msg != NULL) {
   23f7c:	b158      	cbz	r0, 23f96 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   23f7e:	2201      	movs	r2, #1
		msg->str = str;
   23f80:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   23f82:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   23f84:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   23f86:	f362 1407 	bfi	r4, r2, #4, #4
   23f8a:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   23f8c:	4629      	mov	r1, r5
}
   23f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   23f92:	f7eb bb83 	b.w	f69c <msg_finalize>
}
   23f96:	bd70      	pop	{r4, r5, r6, pc}

00023f98 <log_2>:
{
   23f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f9c:	4605      	mov	r5, r0
   23f9e:	4688      	mov	r8, r1
   23fa0:	4617      	mov	r7, r2
   23fa2:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23fa4:	f7ff ffca 	bl	23f3c <z_log_msg_std_alloc>

	if (msg != NULL) {
   23fa8:	b160      	cbz	r0, 23fc4 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   23faa:	2302      	movs	r3, #2
		msg->str = str;
   23fac:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   23fae:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23fb0:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   23fb4:	f363 1507 	bfi	r5, r3, #4, #4
   23fb8:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   23fba:	4631      	mov	r1, r6
}
   23fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   23fc0:	f7eb bb6c 	b.w	f69c <msg_finalize>
}
   23fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023fc8 <log_3>:
{
   23fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23fcc:	4605      	mov	r5, r0
   23fce:	4689      	mov	r9, r1
   23fd0:	4690      	mov	r8, r2
   23fd2:	461f      	mov	r7, r3
   23fd4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23fd8:	f7ff ffb0 	bl	23f3c <z_log_msg_std_alloc>

	if (msg != NULL) {
   23fdc:	b168      	cbz	r0, 23ffa <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   23fde:	2303      	movs	r3, #3
		msg->str = str;
   23fe0:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   23fe2:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23fe4:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   23fe8:	f363 1507 	bfi	r5, r3, #4, #4
   23fec:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   23fee:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   23ff0:	4631      	mov	r1, r6
}
   23ff2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   23ff6:	f7eb bb51 	b.w	f69c <msg_finalize>
}
   23ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023ffe <log_n>:
{
   23ffe:	b510      	push	{r4, lr}
   24000:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   24002:	f000 f893 	bl	2412c <log_msg_create_n>
		if (msg == NULL) {
   24006:	b120      	cbz	r0, 24012 <log_n+0x14>
		msg_finalize(msg, src_level);
   24008:	4621      	mov	r1, r4
}
   2400a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2400e:	f7eb bb45 	b.w	f69c <msg_finalize>
}
   24012:	bd10      	pop	{r4, pc}

00024014 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   24014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24018:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   2401a:	8903      	ldrh	r3, [r0, #8]
{
   2401c:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   2401e:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   24020:	42a3      	cmp	r3, r4
{
   24022:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   24026:	d803      	bhi.n	24030 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   24028:	2300      	movs	r3, #0
   2402a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2402c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   24030:	6811      	ldr	r1, [r2, #0]
   24032:	4421      	add	r1, r4
   24034:	4299      	cmp	r1, r3
		*length = available_len - offset;
   24036:	bf84      	itt	hi
   24038:	1b19      	subhi	r1, r3, r4
   2403a:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2403c:	2b0c      	cmp	r3, #12
	req_len = *length;
   2403e:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   24042:	d928      	bls.n	24096 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   24044:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   24046:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2404a:	d82b      	bhi.n	240a4 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2404c:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   2404e:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   24050:	454b      	cmp	r3, r9
   24052:	bf28      	it	cs
   24054:	464b      	movcs	r3, r9
   24056:	4420      	add	r0, r4
   24058:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   2405a:	461a      	mov	r2, r3
		if (put_op) {
   2405c:	b1ff      	cbz	r7, 2409e <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   2405e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   24060:	f000 fcbe 	bl	249e0 <memcpy>
		req_len -= cpy_len;
   24064:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   24068:	442e      	add	r6, r5
	while (req_len > 0) {
   2406a:	f1b9 0f00 	cmp.w	r9, #0
   2406e:	d0dd      	beq.n	2402c <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   24070:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   24074:	454d      	cmp	r5, r9
   24076:	bf28      	it	cs
   24078:	464d      	movcs	r5, r9
   2407a:	1d20      	adds	r0, r4, #4
   2407c:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   2407e:	462a      	mov	r2, r5
		if (put_op) {
   24080:	b1bf      	cbz	r7, 240b2 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   24082:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   24084:	f000 fcac 	bl	249e0 <memcpy>
		req_len -= cpy_len;
   24088:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   2408c:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   24090:	442e      	add	r6, r5
		offset = 0;
   24092:	2400      	movs	r4, #0
   24094:	e7e9      	b.n	2406a <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   24096:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   24098:	f04f 0800 	mov.w	r8, #0
   2409c:	e7d8      	b.n	24050 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   2409e:	4601      	mov	r1, r0
   240a0:	4630      	mov	r0, r6
   240a2:	e7dd      	b.n	24060 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   240a4:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   240a6:	2c1b      	cmp	r4, #27
   240a8:	d9df      	bls.n	2406a <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   240aa:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   240ae:	3c1c      	subs	r4, #28
   240b0:	e7f9      	b.n	240a6 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   240b2:	4601      	mov	r1, r0
   240b4:	4630      	mov	r0, r6
   240b6:	e7e5      	b.n	24084 <log_msg_hexdump_data_op+0x70>

000240b8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   240b8:	3004      	adds	r0, #4
   240ba:	e8d0 3fef 	ldaex	r3, [r0]
   240be:	3301      	adds	r3, #1
   240c0:	e8c0 3fe2 	stlex	r2, r3, [r0]
   240c4:	2a00      	cmp	r2, #0
   240c6:	d1f8      	bne.n	240ba <log_msg_get+0x2>
}
   240c8:	4770      	bx	lr

000240ca <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   240ca:	7a40      	ldrb	r0, [r0, #9]
}
   240cc:	0900      	lsrs	r0, r0, #4
   240ce:	4770      	bx	lr

000240d0 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   240d0:	7a43      	ldrb	r3, [r0, #9]
   240d2:	091b      	lsrs	r3, r3, #4
   240d4:	428b      	cmp	r3, r1
   240d6:	d916      	bls.n	24106 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   240d8:	2b03      	cmp	r3, #3
   240da:	d803      	bhi.n	240e4 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   240dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   240e0:	6948      	ldr	r0, [r1, #20]
   240e2:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   240e4:	2901      	cmp	r1, #1
   240e6:	d803      	bhi.n	240f0 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   240e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   240ec:	6988      	ldr	r0, [r1, #24]
   240ee:	4770      	bx	lr
	cont = msg->payload.ext.next;
   240f0:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   240f2:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   240f4:	2906      	cmp	r1, #6
   240f6:	d803      	bhi.n	24100 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   240f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   240fc:	6848      	ldr	r0, [r1, #4]
   240fe:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   24100:	3907      	subs	r1, #7
		cont = cont->next;
   24102:	681b      	ldr	r3, [r3, #0]
   24104:	e7f6      	b.n	240f4 <log_msg_arg_get+0x24>
		return 0;
   24106:	2000      	movs	r0, #0
}
   24108:	4770      	bx	lr

0002410a <log_msg_put>:
{
   2410a:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2410c:	1d02      	adds	r2, r0, #4
   2410e:	e8d2 1fef 	ldaex	r1, [r2]
   24112:	3901      	subs	r1, #1
   24114:	e8c2 1fec 	stlex	ip, r1, [r2]
   24118:	f1bc 0f00 	cmp.w	ip, #0
   2411c:	d1f7      	bne.n	2410e <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   2411e:	685b      	ldr	r3, [r3, #4]
   24120:	b90b      	cbnz	r3, 24126 <log_msg_put+0x1c>
		msg_free(msg);
   24122:	f7eb bb5f 	b.w	f7e4 <msg_free>
}
   24126:	4770      	bx	lr

00024128 <log_msg_str_get>:
}
   24128:	6900      	ldr	r0, [r0, #16]
   2412a:	4770      	bx	lr

0002412c <log_msg_create_n>:
{
   2412c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24130:	4682      	mov	sl, r0
   24132:	4688      	mov	r8, r1
   24134:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   24136:	f7eb fb43 	bl	f7c0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   2413a:	4604      	mov	r4, r0
   2413c:	b360      	cbz	r0, 24198 <log_msg_create_n+0x6c>
		msg->hdr.ref_cnt = 1;
   2413e:	2301      	movs	r3, #1
   24140:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   24142:	2d03      	cmp	r5, #3
   24144:	6043      	str	r3, [r0, #4]
   24146:	8106      	strh	r6, [r0, #8]
   24148:	d90f      	bls.n	2416a <log_msg_create_n+0x3e>
	msg->hdr.params.std.nargs = 0U;
   2414a:	7a42      	ldrb	r2, [r0, #9]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2414c:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.std.nargs = 0U;
   24150:	f366 1207 	bfi	r2, r6, #4, #4
   24154:	7242      	strb	r2, [r0, #9]
	msg->hdr.params.generic.ext = 1;
   24156:	7a02      	ldrb	r2, [r0, #8]
	next = &msg->payload.ext.next;
   24158:	f100 0b14 	add.w	fp, r0, #20
	msg->hdr.params.generic.ext = 1;
   2415c:	f042 0202 	orr.w	r2, r2, #2
   24160:	7202      	strb	r2, [r0, #8]
	*next = NULL;
   24162:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   24164:	f1b9 0f00 	cmp.w	r9, #0
   24168:	dc0e      	bgt.n	24188 <log_msg_create_n+0x5c>
		msg->hdr.params.std.nargs = nargs;
   2416a:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2416c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   2416e:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   24172:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   24176:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   24178:	d818      	bhi.n	241ac <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   2417a:	00aa      	lsls	r2, r5, #2
   2417c:	4641      	mov	r1, r8
   2417e:	f104 0014 	add.w	r0, r4, #20
   24182:	f000 fc2d 	bl	249e0 <memcpy>
   24186:	e007      	b.n	24198 <log_msg_create_n+0x6c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   24188:	f7eb fb1a 	bl	f7c0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2418c:	4607      	mov	r7, r0
   2418e:	b930      	cbnz	r0, 2419e <log_msg_create_n+0x72>
			msg_free(msg);
   24190:	4620      	mov	r0, r4
   24192:	f7eb fb27 	bl	f7e4 <msg_free>
			return NULL;
   24196:	463c      	mov	r4, r7
}
   24198:	4620      	mov	r0, r4
   2419a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   2419e:	f8cb 0000 	str.w	r0, [fp]
   241a2:	f1a9 0907 	sub.w	r9, r9, #7
		cont->next = NULL;
   241a6:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   241a8:	4683      	mov	fp, r0
   241aa:	e7db      	b.n	24164 <log_msg_create_n+0x38>
		(void)memcpy(msg->payload.ext.data.args, args,
   241ac:	4641      	mov	r1, r8
   241ae:	2208      	movs	r2, #8
   241b0:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   241b4:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   241b6:	f000 fc13 	bl	249e0 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   241ba:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   241bc:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   241c0:	2d07      	cmp	r5, #7
   241c2:	462e      	mov	r6, r5
   241c4:	bf28      	it	cs
   241c6:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   241c8:	ea4f 0986 	mov.w	r9, r6, lsl #2
   241cc:	4641      	mov	r1, r8
   241ce:	1d38      	adds	r0, r7, #4
   241d0:	464a      	mov	r2, r9
   241d2:	f000 fc05 	bl	249e0 <memcpy>
	while (nargs != 0U) {
   241d6:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   241d8:	44c8      	add	r8, r9
		cont = cont->next;
   241da:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   241dc:	d1f0      	bne.n	241c0 <log_msg_create_n+0x94>
   241de:	e7db      	b.n	24198 <log_msg_create_n+0x6c>

000241e0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   241e0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   241e2:	2400      	movs	r4, #0
   241e4:	9400      	str	r4, [sp, #0]
   241e6:	f7ff ff15 	bl	24014 <log_msg_hexdump_data_op>
}
   241ea:	b002      	add	sp, #8
   241ec:	bd10      	pop	{r4, pc}

000241ee <buffer_write>:
{
   241ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   241f0:	4606      	mov	r6, r0
   241f2:	460d      	mov	r5, r1
   241f4:	4614      	mov	r4, r2
   241f6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   241f8:	4621      	mov	r1, r4
   241fa:	4628      	mov	r0, r5
   241fc:	463a      	mov	r2, r7
   241fe:	47b0      	blx	r6
	} while (len != 0);
   24200:	1a24      	subs	r4, r4, r0
		buf += processed;
   24202:	4405      	add	r5, r0
	} while (len != 0);
   24204:	d1f8      	bne.n	241f8 <buffer_write+0xa>
}
   24206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024208 <std_print>:
{
   24208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2420c:	b08e      	sub	sp, #56	; 0x38
   2420e:	af0e      	add	r7, sp, #56	; 0x38
   24210:	4681      	mov	r9, r0
   24212:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   24214:	f7ff ff88 	bl	24128 <log_msg_str_get>
   24218:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   2421a:	4648      	mov	r0, r9
   2421c:	f7ff ff55 	bl	240ca <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   24220:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   24224:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   24226:	0083      	lsls	r3, r0, #2
   24228:	330e      	adds	r3, #14
   2422a:	f023 0307 	bic.w	r3, r3, #7
   2422e:	ebad 0d03 	sub.w	sp, sp, r3
   24232:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   24234:	45d0      	cmp	r8, sl
   24236:	d116      	bne.n	24266 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   24238:	4648      	mov	r0, r9
   2423a:	f7ff ff46 	bl	240ca <log_msg_nargs_get>
   2423e:	280f      	cmp	r0, #15
   24240:	d81e      	bhi.n	24280 <std_print+0x78>
   24242:	e8df f010 	tbh	[pc, r0, lsl #1]
   24246:	0019      	.short	0x0019
   24248:	00260020 	.word	0x00260020
   2424c:	0036002d 	.word	0x0036002d
   24250:	004e0041 	.word	0x004e0041
   24254:	006e005d 	.word	0x006e005d
   24258:	00960081 	.word	0x00960081
   2425c:	00c600ad 	.word	0x00c600ad
   24260:	00fe00e1 	.word	0x00fe00e1
   24264:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   24266:	4641      	mov	r1, r8
   24268:	4648      	mov	r0, r9
   2426a:	f7ff ff31 	bl	240d0 <log_msg_arg_get>
   2426e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   24272:	f108 0801 	add.w	r8, r8, #1
   24276:	e7dd      	b.n	24234 <std_print+0x2c>
		print_formatted(log_output, str);
   24278:	4631      	mov	r1, r6
   2427a:	4628      	mov	r0, r5
   2427c:	f7eb fae6 	bl	f84c <print_formatted>
}
   24280:	46bd      	mov	sp, r7
   24282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   24286:	6822      	ldr	r2, [r4, #0]
   24288:	4631      	mov	r1, r6
   2428a:	4628      	mov	r0, r5
   2428c:	f7eb fade 	bl	f84c <print_formatted>
		break;
   24290:	e7f6      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   24292:	e9d4 2300 	ldrd	r2, r3, [r4]
   24296:	4631      	mov	r1, r6
   24298:	4628      	mov	r0, r5
   2429a:	f7eb fad7 	bl	f84c <print_formatted>
		break;
   2429e:	e7ef      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   242a0:	68a3      	ldr	r3, [r4, #8]
   242a2:	4631      	mov	r1, r6
   242a4:	9300      	str	r3, [sp, #0]
   242a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   242aa:	4628      	mov	r0, r5
   242ac:	f7eb face 	bl	f84c <print_formatted>
		break;
   242b0:	e7e6      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   242b2:	68e3      	ldr	r3, [r4, #12]
   242b4:	4631      	mov	r1, r6
   242b6:	9301      	str	r3, [sp, #4]
   242b8:	68a3      	ldr	r3, [r4, #8]
   242ba:	4628      	mov	r0, r5
   242bc:	9300      	str	r3, [sp, #0]
   242be:	e9d4 2300 	ldrd	r2, r3, [r4]
   242c2:	f7eb fac3 	bl	f84c <print_formatted>
		break;
   242c6:	e7db      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   242c8:	6923      	ldr	r3, [r4, #16]
   242ca:	4631      	mov	r1, r6
   242cc:	9302      	str	r3, [sp, #8]
   242ce:	68e3      	ldr	r3, [r4, #12]
   242d0:	4628      	mov	r0, r5
   242d2:	9301      	str	r3, [sp, #4]
   242d4:	68a3      	ldr	r3, [r4, #8]
   242d6:	9300      	str	r3, [sp, #0]
   242d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   242dc:	f7eb fab6 	bl	f84c <print_formatted>
		break;
   242e0:	e7ce      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   242e2:	6963      	ldr	r3, [r4, #20]
   242e4:	4631      	mov	r1, r6
   242e6:	9303      	str	r3, [sp, #12]
   242e8:	6923      	ldr	r3, [r4, #16]
   242ea:	4628      	mov	r0, r5
   242ec:	9302      	str	r3, [sp, #8]
   242ee:	68e3      	ldr	r3, [r4, #12]
   242f0:	9301      	str	r3, [sp, #4]
   242f2:	68a3      	ldr	r3, [r4, #8]
   242f4:	9300      	str	r3, [sp, #0]
   242f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   242fa:	f7eb faa7 	bl	f84c <print_formatted>
		break;
   242fe:	e7bf      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24300:	69a3      	ldr	r3, [r4, #24]
   24302:	4631      	mov	r1, r6
   24304:	9304      	str	r3, [sp, #16]
   24306:	6963      	ldr	r3, [r4, #20]
   24308:	4628      	mov	r0, r5
   2430a:	9303      	str	r3, [sp, #12]
   2430c:	6923      	ldr	r3, [r4, #16]
   2430e:	9302      	str	r3, [sp, #8]
   24310:	68e3      	ldr	r3, [r4, #12]
   24312:	9301      	str	r3, [sp, #4]
   24314:	68a3      	ldr	r3, [r4, #8]
   24316:	9300      	str	r3, [sp, #0]
   24318:	e9d4 2300 	ldrd	r2, r3, [r4]
   2431c:	f7eb fa96 	bl	f84c <print_formatted>
		break;
   24320:	e7ae      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24322:	69e3      	ldr	r3, [r4, #28]
   24324:	4631      	mov	r1, r6
   24326:	9305      	str	r3, [sp, #20]
   24328:	69a3      	ldr	r3, [r4, #24]
   2432a:	4628      	mov	r0, r5
   2432c:	9304      	str	r3, [sp, #16]
   2432e:	6963      	ldr	r3, [r4, #20]
   24330:	9303      	str	r3, [sp, #12]
   24332:	6923      	ldr	r3, [r4, #16]
   24334:	9302      	str	r3, [sp, #8]
   24336:	68e3      	ldr	r3, [r4, #12]
   24338:	9301      	str	r3, [sp, #4]
   2433a:	68a3      	ldr	r3, [r4, #8]
   2433c:	9300      	str	r3, [sp, #0]
   2433e:	e9d4 2300 	ldrd	r2, r3, [r4]
   24342:	f7eb fa83 	bl	f84c <print_formatted>
		break;
   24346:	e79b      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24348:	6a23      	ldr	r3, [r4, #32]
   2434a:	4631      	mov	r1, r6
   2434c:	9306      	str	r3, [sp, #24]
   2434e:	69e3      	ldr	r3, [r4, #28]
   24350:	4628      	mov	r0, r5
   24352:	9305      	str	r3, [sp, #20]
   24354:	69a3      	ldr	r3, [r4, #24]
   24356:	9304      	str	r3, [sp, #16]
   24358:	6963      	ldr	r3, [r4, #20]
   2435a:	9303      	str	r3, [sp, #12]
   2435c:	6923      	ldr	r3, [r4, #16]
   2435e:	9302      	str	r3, [sp, #8]
   24360:	68e3      	ldr	r3, [r4, #12]
   24362:	9301      	str	r3, [sp, #4]
   24364:	68a3      	ldr	r3, [r4, #8]
   24366:	9300      	str	r3, [sp, #0]
   24368:	e9d4 2300 	ldrd	r2, r3, [r4]
   2436c:	f7eb fa6e 	bl	f84c <print_formatted>
		break;
   24370:	e786      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24372:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24374:	4631      	mov	r1, r6
   24376:	9307      	str	r3, [sp, #28]
   24378:	6a23      	ldr	r3, [r4, #32]
   2437a:	4628      	mov	r0, r5
   2437c:	9306      	str	r3, [sp, #24]
   2437e:	69e3      	ldr	r3, [r4, #28]
   24380:	9305      	str	r3, [sp, #20]
   24382:	69a3      	ldr	r3, [r4, #24]
   24384:	9304      	str	r3, [sp, #16]
   24386:	6963      	ldr	r3, [r4, #20]
   24388:	9303      	str	r3, [sp, #12]
   2438a:	6923      	ldr	r3, [r4, #16]
   2438c:	9302      	str	r3, [sp, #8]
   2438e:	68e3      	ldr	r3, [r4, #12]
   24390:	9301      	str	r3, [sp, #4]
   24392:	68a3      	ldr	r3, [r4, #8]
   24394:	9300      	str	r3, [sp, #0]
   24396:	e9d4 2300 	ldrd	r2, r3, [r4]
   2439a:	f7eb fa57 	bl	f84c <print_formatted>
		break;
   2439e:	e76f      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   243a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   243a2:	4631      	mov	r1, r6
   243a4:	9308      	str	r3, [sp, #32]
   243a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   243a8:	4628      	mov	r0, r5
   243aa:	9307      	str	r3, [sp, #28]
   243ac:	6a23      	ldr	r3, [r4, #32]
   243ae:	9306      	str	r3, [sp, #24]
   243b0:	69e3      	ldr	r3, [r4, #28]
   243b2:	9305      	str	r3, [sp, #20]
   243b4:	69a3      	ldr	r3, [r4, #24]
   243b6:	9304      	str	r3, [sp, #16]
   243b8:	6963      	ldr	r3, [r4, #20]
   243ba:	9303      	str	r3, [sp, #12]
   243bc:	6923      	ldr	r3, [r4, #16]
   243be:	9302      	str	r3, [sp, #8]
   243c0:	68e3      	ldr	r3, [r4, #12]
   243c2:	9301      	str	r3, [sp, #4]
   243c4:	68a3      	ldr	r3, [r4, #8]
   243c6:	9300      	str	r3, [sp, #0]
   243c8:	e9d4 2300 	ldrd	r2, r3, [r4]
   243cc:	f7eb fa3e 	bl	f84c <print_formatted>
		break;
   243d0:	e756      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   243d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   243d4:	4631      	mov	r1, r6
   243d6:	9309      	str	r3, [sp, #36]	; 0x24
   243d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   243da:	4628      	mov	r0, r5
   243dc:	9308      	str	r3, [sp, #32]
   243de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   243e0:	9307      	str	r3, [sp, #28]
   243e2:	6a23      	ldr	r3, [r4, #32]
   243e4:	9306      	str	r3, [sp, #24]
   243e6:	69e3      	ldr	r3, [r4, #28]
   243e8:	9305      	str	r3, [sp, #20]
   243ea:	69a3      	ldr	r3, [r4, #24]
   243ec:	9304      	str	r3, [sp, #16]
   243ee:	6963      	ldr	r3, [r4, #20]
   243f0:	9303      	str	r3, [sp, #12]
   243f2:	6923      	ldr	r3, [r4, #16]
   243f4:	9302      	str	r3, [sp, #8]
   243f6:	68e3      	ldr	r3, [r4, #12]
   243f8:	9301      	str	r3, [sp, #4]
   243fa:	68a3      	ldr	r3, [r4, #8]
   243fc:	9300      	str	r3, [sp, #0]
   243fe:	e9d4 2300 	ldrd	r2, r3, [r4]
   24402:	f7eb fa23 	bl	f84c <print_formatted>
		break;
   24406:	e73b      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24408:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2440a:	4631      	mov	r1, r6
   2440c:	930a      	str	r3, [sp, #40]	; 0x28
   2440e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24410:	4628      	mov	r0, r5
   24412:	9309      	str	r3, [sp, #36]	; 0x24
   24414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24416:	9308      	str	r3, [sp, #32]
   24418:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2441a:	9307      	str	r3, [sp, #28]
   2441c:	6a23      	ldr	r3, [r4, #32]
   2441e:	9306      	str	r3, [sp, #24]
   24420:	69e3      	ldr	r3, [r4, #28]
   24422:	9305      	str	r3, [sp, #20]
   24424:	69a3      	ldr	r3, [r4, #24]
   24426:	9304      	str	r3, [sp, #16]
   24428:	6963      	ldr	r3, [r4, #20]
   2442a:	9303      	str	r3, [sp, #12]
   2442c:	6923      	ldr	r3, [r4, #16]
   2442e:	9302      	str	r3, [sp, #8]
   24430:	68e3      	ldr	r3, [r4, #12]
   24432:	9301      	str	r3, [sp, #4]
   24434:	68a3      	ldr	r3, [r4, #8]
   24436:	9300      	str	r3, [sp, #0]
   24438:	e9d4 2300 	ldrd	r2, r3, [r4]
   2443c:	f7eb fa06 	bl	f84c <print_formatted>
		break;
   24440:	e71e      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24442:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24444:	4631      	mov	r1, r6
   24446:	930b      	str	r3, [sp, #44]	; 0x2c
   24448:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2444a:	4628      	mov	r0, r5
   2444c:	930a      	str	r3, [sp, #40]	; 0x28
   2444e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24450:	9309      	str	r3, [sp, #36]	; 0x24
   24452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24454:	9308      	str	r3, [sp, #32]
   24456:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24458:	9307      	str	r3, [sp, #28]
   2445a:	6a23      	ldr	r3, [r4, #32]
   2445c:	9306      	str	r3, [sp, #24]
   2445e:	69e3      	ldr	r3, [r4, #28]
   24460:	9305      	str	r3, [sp, #20]
   24462:	69a3      	ldr	r3, [r4, #24]
   24464:	9304      	str	r3, [sp, #16]
   24466:	6963      	ldr	r3, [r4, #20]
   24468:	9303      	str	r3, [sp, #12]
   2446a:	6923      	ldr	r3, [r4, #16]
   2446c:	9302      	str	r3, [sp, #8]
   2446e:	68e3      	ldr	r3, [r4, #12]
   24470:	9301      	str	r3, [sp, #4]
   24472:	68a3      	ldr	r3, [r4, #8]
   24474:	9300      	str	r3, [sp, #0]
   24476:	e9d4 2300 	ldrd	r2, r3, [r4]
   2447a:	f7eb f9e7 	bl	f84c <print_formatted>
		break;
   2447e:	e6ff      	b.n	24280 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   24480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   24482:	4631      	mov	r1, r6
   24484:	930c      	str	r3, [sp, #48]	; 0x30
   24486:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24488:	4628      	mov	r0, r5
   2448a:	930b      	str	r3, [sp, #44]	; 0x2c
   2448c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2448e:	930a      	str	r3, [sp, #40]	; 0x28
   24490:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24492:	9309      	str	r3, [sp, #36]	; 0x24
   24494:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24496:	9308      	str	r3, [sp, #32]
   24498:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2449a:	9307      	str	r3, [sp, #28]
   2449c:	6a23      	ldr	r3, [r4, #32]
   2449e:	9306      	str	r3, [sp, #24]
   244a0:	69e3      	ldr	r3, [r4, #28]
   244a2:	9305      	str	r3, [sp, #20]
   244a4:	69a3      	ldr	r3, [r4, #24]
   244a6:	9304      	str	r3, [sp, #16]
   244a8:	6963      	ldr	r3, [r4, #20]
   244aa:	9303      	str	r3, [sp, #12]
   244ac:	6923      	ldr	r3, [r4, #16]
   244ae:	9302      	str	r3, [sp, #8]
   244b0:	68e3      	ldr	r3, [r4, #12]
   244b2:	9301      	str	r3, [sp, #4]
   244b4:	68a3      	ldr	r3, [r4, #8]
   244b6:	9300      	str	r3, [sp, #0]
   244b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   244bc:	f7eb f9c6 	bl	f84c <print_formatted>
}
   244c0:	e6de      	b.n	24280 <std_print+0x78>

000244c2 <log_output_flush>:
		     log_output->control_block->offset,
   244c2:	6842      	ldr	r2, [r0, #4]
{
   244c4:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   244c6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   244ca:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   244cc:	6881      	ldr	r1, [r0, #8]
   244ce:	6800      	ldr	r0, [r0, #0]
   244d0:	f7ff fe8d 	bl	241ee <buffer_write>
	log_output->control_block->offset = 0;
   244d4:	2200      	movs	r2, #0
   244d6:	6863      	ldr	r3, [r4, #4]
   244d8:	601a      	str	r2, [r3, #0]
}
   244da:	bd10      	pop	{r4, pc}

000244dc <out_func>:
{
   244dc:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   244de:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   244e2:	681b      	ldr	r3, [r3, #0]
   244e4:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   244e6:	684a      	ldr	r2, [r1, #4]
   244e8:	6813      	ldr	r3, [r2, #0]
   244ea:	3301      	adds	r3, #1
   244ec:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   244ee:	68ca      	ldr	r2, [r1, #12]
   244f0:	4293      	cmp	r3, r2
   244f2:	d102      	bne.n	244fa <out_func+0x1e>
		log_output_flush(out_ctx);
   244f4:	4608      	mov	r0, r1
   244f6:	f7ff ffe4 	bl	244c2 <log_output_flush>
}
   244fa:	2000      	movs	r0, #0
   244fc:	bd08      	pop	{r3, pc}

000244fe <char_out>:
{
   244fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24500:	460d      	mov	r5, r1
   24502:	4616      	mov	r6, r2
   24504:	4604      	mov	r4, r0
   24506:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < length; i++) {
   24508:	42bc      	cmp	r4, r7
   2450a:	d101      	bne.n	24510 <char_out+0x12>
}
   2450c:	4628      	mov	r0, r5
   2450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   24510:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   24514:	6873      	ldr	r3, [r6, #4]
   24516:	4630      	mov	r0, r6
   24518:	685b      	ldr	r3, [r3, #4]
   2451a:	4798      	blx	r3
   2451c:	e7f4      	b.n	24508 <char_out+0xa>

0002451e <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   2451e:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   24520:	7a5a      	ldrb	r2, [r3, #9]
   24522:	b932      	cbnz	r2, 24532 <get_status+0x14>
	if (data->ref > 0) {
   24524:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   24528:	2800      	cmp	r0, #0
   2452a:	bfcc      	ite	gt
   2452c:	2000      	movgt	r0, #0
   2452e:	2001      	movle	r0, #1
   24530:	4770      	bx	lr
   24532:	2002      	movs	r0, #2
}
   24534:	4770      	bx	lr

00024536 <clock_stop>:
	const struct nrf_clock_control_config *config =
   24536:	6802      	ldr	r2, [r0, #0]
{
   24538:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   2453a:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   2453c:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   2453e:	f04f 0320 	mov.w	r3, #32
   24542:	f3ef 8511 	mrs	r5, BASEPRI
   24546:	f383 8811 	msr	BASEPRI, r3
   2454a:	f3bf 8f6f 	isb	sy
	data->ref--;
   2454e:	7a23      	ldrb	r3, [r4, #8]
   24550:	3b01      	subs	r3, #1
   24552:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   24554:	2b00      	cmp	r3, #0
	data->ref--;
   24556:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   24558:	d11c      	bne.n	24594 <clock_stop+0x5e>
	list->tail = NULL;
   2455a:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   2455e:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   24560:	b9a3      	cbnz	r3, 2458c <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24562:	2201      	movs	r2, #1
   24564:	7af3      	ldrb	r3, [r6, #11]
   24566:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2456a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   2456e:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24570:	2200      	movs	r2, #0
   24572:	8933      	ldrh	r3, [r6, #8]
   24574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24578:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   2457c:	601a      	str	r2, [r3, #0]
		data->started = false;
   2457e:	2000      	movs	r0, #0
   24580:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   24582:	f385 8811 	msr	BASEPRI, r5
   24586:	f3bf 8f6f 	isb	sy
}
   2458a:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   2458c:	4798      	blx	r3
   2458e:	2800      	cmp	r0, #0
   24590:	d1e7      	bne.n	24562 <clock_stop+0x2c>
   24592:	e7f4      	b.n	2457e <clock_stop+0x48>
   24594:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   24598:	bfbc      	itt	lt
   2459a:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   2459c:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   245a0:	e7ef      	b.n	24582 <clock_stop+0x4c>

000245a2 <clock_async_start>:
{
   245a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   245a4:	6803      	ldr	r3, [r0, #0]
{
   245a6:	4606      	mov	r6, r0
   245a8:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   245aa:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   245ac:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   245ae:	f04f 0320 	mov.w	r3, #32
   245b2:	f3ef 8211 	mrs	r2, BASEPRI
   245b6:	f383 8811 	msr	BASEPRI, r3
   245ba:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   245be:	7a2b      	ldrb	r3, [r5, #8]
   245c0:	3301      	adds	r3, #1
   245c2:	b25b      	sxtb	r3, r3
   245c4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   245c6:	f382 8811 	msr	BASEPRI, r2
   245ca:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   245ce:	7a6a      	ldrb	r2, [r5, #9]
   245d0:	b132      	cbz	r2, 245e0 <clock_async_start+0x3e>
		if (data) {
   245d2:	b90c      	cbnz	r4, 245d8 <clock_async_start+0x36>
	return 0;
   245d4:	2000      	movs	r0, #0
}
   245d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   245d8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   245dc:	4798      	blx	r3
   245de:	e7f9      	b.n	245d4 <clock_async_start+0x32>
		if (ref == 1) {
   245e0:	2b01      	cmp	r3, #1
   245e2:	d108      	bne.n	245f6 <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   245e4:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   245e6:	b943      	cbnz	r3, 245fa <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245e8:	2201      	movs	r2, #1
   245ea:	7abb      	ldrb	r3, [r7, #10]
   245ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   245f0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   245f4:	601a      	str	r2, [r3, #0]
		if (data) {
   245f6:	b94c      	cbnz	r4, 2460c <clock_async_start+0x6a>
   245f8:	e7ec      	b.n	245d4 <clock_async_start+0x32>
					config->start_handler(dev) : true;
   245fa:	4798      	blx	r3
   245fc:	2800      	cmp	r0, #0
   245fe:	d1f3      	bne.n	245e8 <clock_async_start+0x46>
			} else if (data) {
   24600:	2c00      	cmp	r4, #0
   24602:	d0e7      	beq.n	245d4 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   24604:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   24608:	4630      	mov	r0, r6
   2460a:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   2460c:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   2460e:	429c      	cmp	r4, r3
   24610:	d00d      	beq.n	2462e <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24612:	b113      	cbz	r3, 2461a <clock_async_start+0x78>
	return node->next;
   24614:	681b      	ldr	r3, [r3, #0]
	} while (item);
   24616:	2b00      	cmp	r3, #0
   24618:	d1f9      	bne.n	2460e <clock_async_start+0x6c>
	parent->next = child;
   2461a:	2000      	movs	r0, #0
   2461c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2461e:	686b      	ldr	r3, [r5, #4]
   24620:	b913      	cbnz	r3, 24628 <clock_async_start+0x86>
	list->head = node;
   24622:	e9c5 4400 	strd	r4, r4, [r5]
   24626:	e7d5      	b.n	245d4 <clock_async_start+0x32>
	parent->next = child;
   24628:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2462a:	606c      	str	r4, [r5, #4]
   2462c:	e7d3      	b.n	245d6 <clock_async_start+0x34>
				return -EALREADY;
   2462e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   24632:	e7d0      	b.n	245d6 <clock_async_start+0x34>

00024634 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   24634:	2200      	movs	r2, #0
   24636:	f7ff bfb4 	b.w	245a2 <clock_async_start>

0002463a <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   2463a:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   2463c:	2000      	movs	r0, #0
	list->tail = NULL;
   2463e:	e9c3 0000 	strd	r0, r0, [r3]
}
   24642:	4770      	bx	lr

00024644 <clkstarted_handle>:
{
   24644:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   24646:	6884      	ldr	r4, [r0, #8]
{
   24648:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   2464a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2464c:	b12b      	cbz	r3, 2465a <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2464e:	6861      	ldr	r1, [r4, #4]
	return node->next;
   24650:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24652:	428b      	cmp	r3, r1
	list->head = node;
   24654:	6022      	str	r2, [r4, #0]
	list->tail = node;
   24656:	bf08      	it	eq
   24658:	6062      	streq	r2, [r4, #4]
	data->started = true;
   2465a:	2201      	movs	r2, #1
   2465c:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   2465e:	b903      	cbnz	r3, 24662 <clkstarted_handle+0x1e>
}
   24660:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   24662:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   24666:	4628      	mov	r0, r5
   24668:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   2466a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2466c:	2b00      	cmp	r3, #0
   2466e:	d0f7      	beq.n	24660 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24670:	6861      	ldr	r1, [r4, #4]
	return node->next;
   24672:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24674:	428b      	cmp	r3, r1
	list->head = node;
   24676:	6022      	str	r2, [r4, #0]
	list->tail = node;
   24678:	bf08      	it	eq
   2467a:	6062      	streq	r2, [r4, #4]
   2467c:	e7ef      	b.n	2465e <clkstarted_handle+0x1a>

0002467e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   2467e:	4770      	bx	lr

00024680 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   24680:	4770      	bx	lr

00024682 <z_irq_spurious>:
	z_arm_reserved();
   24682:	f7eb bd6d 	b.w	10160 <z_arm_bus_fault>

00024686 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24686:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   24688:	6800      	ldr	r0, [r0, #0]
   2468a:	f7eb bd73 	b.w	10174 <z_arm_fatal_error>

0002468e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2468e:	b508      	push	{r3, lr}
	handler();
   24690:	f7eb fe0e 	bl	102b0 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   24694:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   24698:	f7eb bc3c 	b.w	ff14 <z_arm_exc_exit>

0002469c <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   2469c:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   2469e:	2100      	movs	r1, #0
   246a0:	a801      	add	r0, sp, #4
   246a2:	f7ec fb51 	bl	10d48 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   246a6:	b003      	add	sp, #12
   246a8:	f85d fb04 	ldr.w	pc, [sp], #4

000246ac <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   246ac:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   246b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   246b4:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   246b6:	bf08      	it	eq
   246b8:	f06f 0015 	mvneq.w	r0, #21
   246bc:	4770      	bx	lr

000246be <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   246be:	b510      	push	{r4, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   246c0:	7802      	ldrb	r2, [r0, #0]
   246c2:	4603      	mov	r3, r0
   246c4:	2a20      	cmp	r2, #32
   246c6:	f100 0001 	add.w	r0, r0, #1
   246ca:	d0f9      	beq.n	246c0 <atoi+0x2>
   246cc:	f1a2 0109 	sub.w	r1, r2, #9
   246d0:	2904      	cmp	r1, #4
   246d2:	d9f5      	bls.n	246c0 <atoi+0x2>
		s++;
	}
	switch (*s) {
   246d4:	2a2b      	cmp	r2, #43	; 0x2b
   246d6:	d008      	beq.n	246ea <atoi+0x2c>
	int neg = 0;
   246d8:	2a2d      	cmp	r2, #45	; 0x2d
   246da:	bf0a      	itet	eq
   246dc:	2101      	moveq	r1, #1
   246de:	2100      	movne	r1, #0
   246e0:	4603      	moveq	r3, r0
   246e2:	3b01      	subs	r3, #1
   246e4:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   246e6:	240a      	movs	r4, #10
   246e8:	e004      	b.n	246f4 <atoi+0x36>
		s++;
   246ea:	4603      	mov	r3, r0
	int neg = 0;
   246ec:	2100      	movs	r1, #0
   246ee:	e7f8      	b.n	246e2 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   246f0:	4360      	muls	r0, r4
   246f2:	1a80      	subs	r0, r0, r2
	while (isdigit(*s)) {
   246f4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   246f8:	3a30      	subs	r2, #48	; 0x30
   246fa:	2a09      	cmp	r2, #9
   246fc:	d9f8      	bls.n	246f0 <atoi+0x32>
	}
	return neg ? n : -n;
   246fe:	b901      	cbnz	r1, 24702 <atoi+0x44>
   24700:	4240      	negs	r0, r0
}
   24702:	bd10      	pop	{r4, pc}

00024704 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   24704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24708:	4684      	mov	ip, r0
   2470a:	460f      	mov	r7, r1
	register const char *s = nptr;
   2470c:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2470e:	462c      	mov	r4, r5
   24710:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   24714:	2b20      	cmp	r3, #32
   24716:	d036      	beq.n	24786 <strtol+0x82>
   24718:	f1a3 0109 	sub.w	r1, r3, #9
   2471c:	2904      	cmp	r1, #4
   2471e:	d932      	bls.n	24786 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   24720:	2b2d      	cmp	r3, #45	; 0x2d
   24722:	d132      	bne.n	2478a <strtol+0x86>
		neg = 1;
   24724:	2101      	movs	r1, #1
		c = *s++;
   24726:	786b      	ldrb	r3, [r5, #1]
   24728:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2472a:	2a00      	cmp	r2, #0
   2472c:	d05c      	beq.n	247e8 <strtol+0xe4>
   2472e:	2a10      	cmp	r2, #16
   24730:	d109      	bne.n	24746 <strtol+0x42>
   24732:	2b30      	cmp	r3, #48	; 0x30
   24734:	d107      	bne.n	24746 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24736:	7823      	ldrb	r3, [r4, #0]
   24738:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2473c:	2b58      	cmp	r3, #88	; 0x58
   2473e:	d14e      	bne.n	247de <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   24740:	2210      	movs	r2, #16
		c = s[1];
   24742:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   24744:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   24746:	2900      	cmp	r1, #0
   24748:	bf0c      	ite	eq
   2474a:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
   2474e:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   24752:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   24754:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   24758:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   2475a:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2475e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24762:	2d09      	cmp	r5, #9
   24764:	d817      	bhi.n	24796 <strtol+0x92>
			c -= '0';
   24766:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24768:	429a      	cmp	r2, r3
   2476a:	dd24      	ble.n	247b6 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2476c:	1c75      	adds	r5, r6, #1
   2476e:	d007      	beq.n	24780 <strtol+0x7c>
   24770:	4570      	cmp	r0, lr
   24772:	d81d      	bhi.n	247b0 <strtol+0xac>
   24774:	d101      	bne.n	2477a <strtol+0x76>
   24776:	454b      	cmp	r3, r9
   24778:	dc1a      	bgt.n	247b0 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   2477a:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   2477c:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   24780:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   24784:	e7eb      	b.n	2475e <strtol+0x5a>
{
   24786:	4625      	mov	r5, r4
   24788:	e7c1      	b.n	2470e <strtol+0xa>
	} else if (c == '+') {
   2478a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2478c:	bf04      	itt	eq
   2478e:	1cac      	addeq	r4, r5, #2
   24790:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   24792:	2100      	movs	r1, #0
   24794:	e7c9      	b.n	2472a <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24796:	f043 0520 	orr.w	r5, r3, #32
   2479a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2479c:	2d19      	cmp	r5, #25
   2479e:	d80a      	bhi.n	247b6 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   247a0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   247a4:	2d19      	cmp	r5, #25
   247a6:	bf8c      	ite	hi
   247a8:	2557      	movhi	r5, #87	; 0x57
   247aa:	2537      	movls	r5, #55	; 0x37
   247ac:	1b5b      	subs	r3, r3, r5
   247ae:	e7db      	b.n	24768 <strtol+0x64>
			any = -1;
   247b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   247b4:	e7e4      	b.n	24780 <strtol+0x7c>
		}
	}

	if (any < 0) {
   247b6:	1c73      	adds	r3, r6, #1
   247b8:	d107      	bne.n	247ca <strtol+0xc6>
   247ba:	f7fd fafb 	bl	21db4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   247be:	2326      	movs	r3, #38	; 0x26
   247c0:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   247c2:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   247c4:	b937      	cbnz	r7, 247d4 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   247c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   247ca:	b101      	cbz	r1, 247ce <strtol+0xca>
		acc = -acc;
   247cc:	4240      	negs	r0, r0
	if (endptr != NULL) {
   247ce:	2f00      	cmp	r7, #0
   247d0:	d0f9      	beq.n	247c6 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   247d2:	b10e      	cbz	r6, 247d8 <strtol+0xd4>
   247d4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   247d8:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   247dc:	e7f3      	b.n	247c6 <strtol+0xc2>
	if (base == 0) {
   247de:	2330      	movs	r3, #48	; 0x30
   247e0:	2a00      	cmp	r2, #0
   247e2:	d1b0      	bne.n	24746 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   247e4:	2208      	movs	r2, #8
   247e6:	e7ae      	b.n	24746 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   247e8:	2b30      	cmp	r3, #48	; 0x30
   247ea:	d0a4      	beq.n	24736 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   247ec:	220a      	movs	r2, #10
   247ee:	e7aa      	b.n	24746 <strtol+0x42>

000247f0 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   247f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247f4:	4684      	mov	ip, r0
   247f6:	460f      	mov	r7, r1
	register const char *s = nptr;
   247f8:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   247fa:	462c      	mov	r4, r5
   247fc:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   24800:	2b20      	cmp	r3, #32
   24802:	d035      	beq.n	24870 <strtoul+0x80>
   24804:	f1a3 0109 	sub.w	r1, r3, #9
   24808:	2904      	cmp	r1, #4
   2480a:	d931      	bls.n	24870 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   2480c:	2b2d      	cmp	r3, #45	; 0x2d
   2480e:	d131      	bne.n	24874 <strtoul+0x84>
		neg = 1;
   24810:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   24814:	786b      	ldrb	r3, [r5, #1]
   24816:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   24818:	2a00      	cmp	r2, #0
   2481a:	d05e      	beq.n	248da <strtoul+0xea>
   2481c:	2a10      	cmp	r2, #16
   2481e:	d109      	bne.n	24834 <strtoul+0x44>
   24820:	2b30      	cmp	r3, #48	; 0x30
   24822:	d107      	bne.n	24834 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24824:	7823      	ldrb	r3, [r4, #0]
   24826:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2482a:	2b58      	cmp	r3, #88	; 0x58
   2482c:	d150      	bne.n	248d0 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   2482e:	2210      	movs	r2, #16
		c = s[1];
   24830:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   24832:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   24834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24838:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2483c:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2483e:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   24842:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   24844:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24848:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2484c:	2d09      	cmp	r5, #9
   2484e:	d818      	bhi.n	24882 <strtoul+0x92>
			c -= '0';
   24850:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   24852:	429a      	cmp	r2, r3
   24854:	dd25      	ble.n	248a2 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   24856:	2e00      	cmp	r6, #0
   24858:	db20      	blt.n	2489c <strtoul+0xac>
   2485a:	4288      	cmp	r0, r1
   2485c:	d81e      	bhi.n	2489c <strtoul+0xac>
   2485e:	d101      	bne.n	24864 <strtoul+0x74>
   24860:	4543      	cmp	r3, r8
   24862:	dc1b      	bgt.n	2489c <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   24864:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   24866:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   2486a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2486e:	e7eb      	b.n	24848 <strtoul+0x58>
{
   24870:	4625      	mov	r5, r4
   24872:	e7c2      	b.n	247fa <strtoul+0xa>
	} else if (c == '+') {
   24874:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   24876:	bf04      	itt	eq
   24878:	1cac      	addeq	r4, r5, #2
   2487a:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   2487c:	f04f 0e00 	mov.w	lr, #0
   24880:	e7ca      	b.n	24818 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24882:	f043 0520 	orr.w	r5, r3, #32
   24886:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   24888:	2d19      	cmp	r5, #25
   2488a:	d80a      	bhi.n	248a2 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2488c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24890:	2d19      	cmp	r5, #25
   24892:	bf8c      	ite	hi
   24894:	2557      	movhi	r5, #87	; 0x57
   24896:	2537      	movls	r5, #55	; 0x37
   24898:	1b5b      	subs	r3, r3, r5
   2489a:	e7da      	b.n	24852 <strtoul+0x62>
			any = -1;
   2489c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   248a0:	e7e3      	b.n	2486a <strtoul+0x7a>
		}
	}
	if (any < 0) {
   248a2:	2e00      	cmp	r6, #0
   248a4:	da08      	bge.n	248b8 <strtoul+0xc8>
   248a6:	f7fd fa85 	bl	21db4 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   248aa:	2326      	movs	r3, #38	; 0x26
   248ac:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   248ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   248b2:	b947      	cbnz	r7, 248c6 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   248b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   248b8:	f1be 0f00 	cmp.w	lr, #0
   248bc:	d000      	beq.n	248c0 <strtoul+0xd0>
		acc = -acc;
   248be:	4240      	negs	r0, r0
	if (endptr != NULL) {
   248c0:	2f00      	cmp	r7, #0
   248c2:	d0f7      	beq.n	248b4 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   248c4:	b10e      	cbz	r6, 248ca <strtoul+0xda>
   248c6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   248ca:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   248ce:	e7f1      	b.n	248b4 <strtoul+0xc4>
	if (base == 0) {
   248d0:	2330      	movs	r3, #48	; 0x30
   248d2:	2a00      	cmp	r2, #0
   248d4:	d1ae      	bne.n	24834 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   248d6:	2208      	movs	r2, #8
   248d8:	e7ac      	b.n	24834 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   248da:	2b30      	cmp	r3, #48	; 0x30
   248dc:	d0a2      	beq.n	24824 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   248de:	220a      	movs	r2, #10
   248e0:	e7a8      	b.n	24834 <strtoul+0x44>

000248e2 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   248e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   248e6:	780f      	ldrb	r7, [r1, #0]
{
   248e8:	4605      	mov	r5, r0
	if (c != 0) {
   248ea:	b187      	cbz	r7, 2490e <strstr+0x2c>
	c = *find++;
   248ec:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   248ee:	4620      	mov	r0, r4
   248f0:	f000 f842 	bl	24978 <strlen>
   248f4:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   248f6:	462e      	mov	r6, r5
   248f8:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   248fc:	b163      	cbz	r3, 24918 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   248fe:	429f      	cmp	r7, r3
   24900:	d108      	bne.n	24914 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   24902:	4642      	mov	r2, r8
   24904:	4621      	mov	r1, r4
   24906:	4630      	mov	r0, r6
   24908:	f000 f84b 	bl	249a2 <strncmp>
   2490c:	b910      	cbnz	r0, 24914 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   2490e:	4628      	mov	r0, r5
   24910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   24914:	4635      	mov	r5, r6
   24916:	e7ee      	b.n	248f6 <strstr+0x14>
					return NULL;
   24918:	461d      	mov	r5, r3
   2491a:	e7f8      	b.n	2490e <strstr+0x2c>

0002491c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   2491c:	b570      	push	{r4, r5, r6, lr}
   2491e:	4605      	mov	r5, r0
   24920:	3901      	subs	r1, #1
   24922:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   24924:	b142      	cbz	r2, 24938 <strncpy+0x1c>
   24926:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2492a:	1e56      	subs	r6, r2, #1
   2492c:	b92b      	cbnz	r3, 2493a <strncpy+0x1e>
   2492e:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   24930:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   24934:	42a2      	cmp	r2, r4
   24936:	d1fb      	bne.n	24930 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   24938:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   2493a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2493e:	4632      	mov	r2, r6
   24940:	e7ef      	b.n	24922 <strncpy+0x6>

00024942 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   24942:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   24944:	7802      	ldrb	r2, [r0, #0]
   24946:	4603      	mov	r3, r0
   24948:	428a      	cmp	r2, r1
   2494a:	f100 0001 	add.w	r0, r0, #1
   2494e:	d004      	beq.n	2495a <strchr+0x18>
   24950:	2a00      	cmp	r2, #0
   24952:	d1f7      	bne.n	24944 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   24954:	2900      	cmp	r1, #0
   24956:	bf18      	it	ne
   24958:	2300      	movne	r3, #0
}
   2495a:	4618      	mov	r0, r3
   2495c:	4770      	bx	lr

0002495e <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   2495e:	2300      	movs	r3, #0
{
   24960:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   24962:	b2c9      	uxtb	r1, r1
   24964:	4604      	mov	r4, r0
   24966:	f810 2b01 	ldrb.w	r2, [r0], #1
   2496a:	428a      	cmp	r2, r1
   2496c:	bf08      	it	eq
   2496e:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   24970:	2a00      	cmp	r2, #0
   24972:	d1f7      	bne.n	24964 <strrchr+0x6>

	return match;
}
   24974:	4618      	mov	r0, r3
   24976:	bd10      	pop	{r4, pc}

00024978 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24978:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
   2497a:	4603      	mov	r3, r0
   2497c:	1a98      	subs	r0, r3, r2
   2497e:	f813 1b01 	ldrb.w	r1, [r3], #1
   24982:	2900      	cmp	r1, #0
   24984:	d1fa      	bne.n	2497c <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
   24986:	4770      	bx	lr

00024988 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   24988:	3801      	subs	r0, #1
   2498a:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2498c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   24990:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24994:	4293      	cmp	r3, r2
   24996:	d102      	bne.n	2499e <strcmp+0x16>
   24998:	2b00      	cmp	r3, #0
   2499a:	d1f7      	bne.n	2498c <strcmp+0x4>
   2499c:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2499e:	1a98      	subs	r0, r3, r2
   249a0:	4770      	bx	lr

000249a2 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   249a2:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   249a4:	2400      	movs	r4, #0
   249a6:	42a2      	cmp	r2, r4
   249a8:	d008      	beq.n	249bc <strncmp+0x1a>
   249aa:	5d03      	ldrb	r3, [r0, r4]
   249ac:	5d0d      	ldrb	r5, [r1, r4]
   249ae:	42ab      	cmp	r3, r5
   249b0:	d102      	bne.n	249b8 <strncmp+0x16>
   249b2:	3401      	adds	r4, #1
   249b4:	2b00      	cmp	r3, #0
   249b6:	d1f6      	bne.n	249a6 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   249b8:	1b58      	subs	r0, r3, r5
   249ba:	e000      	b.n	249be <strncmp+0x1c>
   249bc:	2000      	movs	r0, #0
}
   249be:	bd30      	pop	{r4, r5, pc}

000249c0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   249c0:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   249c2:	b15a      	cbz	r2, 249dc <memcmp+0x1c>
   249c4:	3901      	subs	r1, #1
   249c6:	1884      	adds	r4, r0, r2
   249c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   249cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   249d0:	42a0      	cmp	r0, r4
   249d2:	d001      	beq.n	249d8 <memcmp+0x18>
   249d4:	429a      	cmp	r2, r3
   249d6:	d0f7      	beq.n	249c8 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   249d8:	1ad0      	subs	r0, r2, r3
}
   249da:	bd10      	pop	{r4, pc}
		return 0;
   249dc:	4610      	mov	r0, r2
   249de:	e7fc      	b.n	249da <memcmp+0x1a>

000249e0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   249e0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   249e2:	ea81 0400 	eor.w	r4, r1, r0
   249e6:	07a5      	lsls	r5, r4, #30
   249e8:	4603      	mov	r3, r0
   249ea:	d00b      	beq.n	24a04 <memcpy+0x24>
   249ec:	3b01      	subs	r3, #1
   249ee:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   249f0:	4291      	cmp	r1, r2
   249f2:	d11d      	bne.n	24a30 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   249f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   249f6:	2a00      	cmp	r2, #0
   249f8:	d0fc      	beq.n	249f4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   249fa:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   249fe:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   24a00:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   24a04:	079c      	lsls	r4, r3, #30
   24a06:	d1f6      	bne.n	249f6 <memcpy+0x16>
   24a08:	460c      	mov	r4, r1
   24a0a:	1f1d      	subs	r5, r3, #4
   24a0c:	188f      	adds	r7, r1, r2
		while (n >= sizeof(mem_word_t)) {
   24a0e:	1b3e      	subs	r6, r7, r4
   24a10:	2e03      	cmp	r6, #3
   24a12:	d808      	bhi.n	24a26 <memcpy+0x46>
   24a14:	f06f 0503 	mvn.w	r5, #3
   24a18:	0894      	lsrs	r4, r2, #2
   24a1a:	fb05 2204 	mla	r2, r5, r4, r2
   24a1e:	00a4      	lsls	r4, r4, #2
   24a20:	4423      	add	r3, r4
   24a22:	4421      	add	r1, r4
   24a24:	e7e2      	b.n	249ec <memcpy+0xc>
			*(d_word++) = *(s_word++);
   24a26:	f854 6b04 	ldr.w	r6, [r4], #4
   24a2a:	f845 6f04 	str.w	r6, [r5, #4]!
   24a2e:	e7ee      	b.n	24a0e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   24a30:	f811 4b01 	ldrb.w	r4, [r1], #1
   24a34:	f803 4f01 	strb.w	r4, [r3, #1]!
   24a38:	e7da      	b.n	249f0 <memcpy+0x10>

00024a3a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   24a3a:	4603      	mov	r3, r0
{
   24a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
   24a3e:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   24a40:	079c      	lsls	r4, r3, #30
   24a42:	d10f      	bne.n	24a64 <memset+0x2a>
	c_word |= c_word << 16;
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   24a44:	461d      	mov	r5, r3
	c_word |= c_word << 8;
   24a46:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   24a4a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   24a4e:	189f      	adds	r7, r3, r2
	while (n >= sizeof(mem_word_t)) {
   24a50:	1b7e      	subs	r6, r7, r5
   24a52:	2e03      	cmp	r6, #3
   24a54:	d80c      	bhi.n	24a70 <memset+0x36>
   24a56:	0894      	lsrs	r4, r2, #2
   24a58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   24a5c:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   24a5e:	429c      	cmp	r4, r3
   24a60:	d109      	bne.n	24a76 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
   24a64:	2a00      	cmp	r2, #0
   24a66:	d0fc      	beq.n	24a62 <memset+0x28>
		*(d_byte++) = c_byte;
   24a68:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24a6c:	3a01      	subs	r2, #1
   24a6e:	e7e7      	b.n	24a40 <memset+0x6>
		*(d_word++) = c_word;
   24a70:	f845 4b04 	str.w	r4, [r5], #4
   24a74:	e7ec      	b.n	24a50 <memset+0x16>
		*(d_byte++) = c_byte;
   24a76:	f804 1b01 	strb.w	r1, [r4], #1
   24a7a:	e7f0      	b.n	24a5e <memset+0x24>

00024a7c <_to_x>:
{
   24a7c:	4603      	mov	r3, r0
   24a7e:	b570      	push	{r4, r5, r6, lr}
		unsigned int d = n % base;
   24a80:	fbb1 f6f2 	udiv	r6, r1, r2
   24a84:	fb02 1116 	mls	r1, r2, r6, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   24a88:	2909      	cmp	r1, #9
   24a8a:	bf8c      	ite	hi
   24a8c:	2527      	movhi	r5, #39	; 0x27
   24a8e:	2500      	movls	r5, #0
   24a90:	461c      	mov	r4, r3
   24a92:	3130      	adds	r1, #48	; 0x30
   24a94:	4429      	add	r1, r5
   24a96:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
   24a9a:	4631      	mov	r1, r6
   24a9c:	b92e      	cbnz	r6, 24aaa <_to_x+0x2e>
	*buf = 0;
   24a9e:	705e      	strb	r6, [r3, #1]
	len = buf - start;
   24aa0:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   24aa2:	4283      	cmp	r3, r0
   24aa4:	d803      	bhi.n	24aae <_to_x+0x32>
}
   24aa6:	4620      	mov	r0, r4
   24aa8:	bd70      	pop	{r4, r5, r6, pc}
   24aaa:	4623      	mov	r3, r4
   24aac:	e7e8      	b.n	24a80 <_to_x+0x4>
		char tmp = *buf;
   24aae:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   24ab0:	7801      	ldrb	r1, [r0, #0]
   24ab2:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   24ab6:	f800 2b01 	strb.w	r2, [r0], #1
   24aba:	e7f2      	b.n	24aa2 <_to_x+0x26>

00024abc <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   24abc:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   24ac0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
   24ac4:	ea5f 0c53 	movs.w	ip, r3, lsr #1
   24ac8:	ea4f 0b32 	mov.w	fp, r2, rrx
   24acc:	2500      	movs	r5, #0
   24ace:	f002 0401 	and.w	r4, r2, #1
   24ad2:	eb1b 0204 	adds.w	r2, fp, r4
   24ad6:	eb4c 0305 	adc.w	r3, ip, r5
   24ada:	e9c0 2300 	strd	r2, r3, [r0]
}
   24ade:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00024ae2 <_ldiv5>:
		q = (uint64_t)(hi / 5U) << shifts[i];
   24ae2:	2105      	movs	r1, #5
	uint64_t rem = *v, quot = 0U, q;
   24ae4:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   24ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rem += 2U;
   24aec:	f112 0802 	adds.w	r8, r2, #2
   24af0:	f143 0900 	adc.w	r9, r3, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   24af4:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5U;
   24af8:	2600      	movs	r6, #0
   24afa:	fb01 f705 	mul.w	r7, r1, r5
   24afe:	ebb8 0806 	subs.w	r8, r8, r6
   24b02:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
   24b06:	ea4f 06d8 	mov.w	r6, r8, lsr #3
   24b0a:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   24b0e:	fbb6 fcf1 	udiv	ip, r6, r1
   24b12:	2400      	movs	r4, #0
		rem -= q * 5U;
   24b14:	46c2      	mov	sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   24b16:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		rem -= q * 5U;
   24b1a:	fba6 8901 	umull	r8, r9, r6, r1
		quot += q;
   24b1e:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5U) << shifts[i];
   24b20:	ea4f 775c 	mov.w	r7, ip, lsr #29
		quot += q;
   24b24:	eb45 0307 	adc.w	r3, r5, r7
   24b28:	4614      	mov	r4, r2
		rem -= q * 5U;
   24b2a:	ebba 0208 	subs.w	r2, sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   24b2e:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
   24b32:	461d      	mov	r5, r3
   24b34:	18a4      	adds	r4, r4, r2
   24b36:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   24b3a:	e9c0 4500 	strd	r4, r5, [r0]
}
   24b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024b42 <_get_digit>:
	if (*digit_count > 0) {
   24b42:	680b      	ldr	r3, [r1, #0]
{
   24b44:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
   24b48:	2b00      	cmp	r3, #0
   24b4a:	dd13      	ble.n	24b74 <_get_digit+0x32>
		*digit_count -= 1;
   24b4c:	3b01      	subs	r3, #1
   24b4e:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   24b50:	210a      	movs	r1, #10
   24b52:	6802      	ldr	r2, [r0, #0]
   24b54:	6844      	ldr	r4, [r0, #4]
   24b56:	fba2 bc01 	umull	fp, ip, r2, r1
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   24b5a:	465a      	mov	r2, fp
		*fr = *fr * 10U;
   24b5c:	fb01 cc04 	mla	ip, r1, r4, ip
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   24b60:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
   24b64:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   24b68:	ea4f 711c 	mov.w	r1, ip, lsr #28
   24b6c:	3130      	adds	r1, #48	; 0x30
}
   24b6e:	4608      	mov	r0, r1
   24b70:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
   24b74:	2130      	movs	r1, #48	; 0x30
   24b76:	e7fa      	b.n	24b6e <_get_digit+0x2c>

00024b78 <_stdout_hook_default>:
}
   24b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24b7c:	4770      	bx	lr

00024b7e <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   24b7e:	f7ec be0b 	b.w	11798 <z_impl_zephyr_fputc>

00024b82 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   24b82:	684b      	ldr	r3, [r1, #4]
   24b84:	2b01      	cmp	r3, #1
   24b86:	dd07      	ble.n	24b98 <sprintf_out+0x16>
		*(p->ptr) = c;
   24b88:	680b      	ldr	r3, [r1, #0]
   24b8a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   24b8c:	680b      	ldr	r3, [r1, #0]
   24b8e:	3301      	adds	r3, #1
   24b90:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   24b92:	684b      	ldr	r3, [r1, #4]
   24b94:	3b01      	subs	r3, #1
   24b96:	604b      	str	r3, [r1, #4]
}
   24b98:	2000      	movs	r0, #0
   24b9a:	4770      	bx	lr

00024b9c <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   24b9c:	b508      	push	{r3, lr}
	net_if_init();
   24b9e:	f7ec fe47 	bl	11830 <net_if_init>
	net_if_post_init();
   24ba2:	f7ec fe5d 	bl	11860 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   24ba6:	2000      	movs	r0, #0
   24ba8:	bd08      	pop	{r3, pc}

00024baa <l2_flags_get>:
	return iface->if_dev->l2;
   24baa:	6803      	ldr	r3, [r0, #0]
   24bac:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   24bae:	b113      	cbz	r3, 24bb6 <l2_flags_get+0xc>
   24bb0:	68db      	ldr	r3, [r3, #12]
   24bb2:	b103      	cbz	r3, 24bb6 <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   24bb4:	4718      	bx	r3
}
   24bb6:	2000      	movs	r0, #0
   24bb8:	4770      	bx	lr

00024bba <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24bba:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24bbe:	4108      	asrs	r0, r1
}
   24bc0:	f000 0001 	and.w	r0, r0, #1
   24bc4:	4770      	bx	lr

00024bc6 <net_if_up>:
{
   24bc6:	b510      	push	{r4, lr}
   24bc8:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   24bca:	6800      	ldr	r0, [r0, #0]
   24bcc:	2100      	movs	r1, #0
   24bce:	300c      	adds	r0, #12
   24bd0:	f7ff fff3 	bl	24bba <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   24bd4:	b9d8      	cbnz	r0, 24c0e <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   24bd6:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   24bd8:	7e9a      	ldrb	r2, [r3, #26]
   24bda:	b14a      	cbz	r2, 24bf0 <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24bdc:	330c      	adds	r3, #12
   24bde:	e8d3 2fef 	ldaex	r2, [r3]
   24be2:	f042 0201 	orr.w	r2, r2, #1
   24be6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24bea:	2900      	cmp	r1, #0
   24bec:	d1f7      	bne.n	24bde <net_if_up+0x18>
}
   24bee:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   24bf0:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   24bf2:	b973      	cbnz	r3, 24c12 <net_if_up+0x4c>
   24bf4:	6823      	ldr	r3, [r4, #0]
   24bf6:	330c      	adds	r3, #12
   24bf8:	e8d3 2fef 	ldaex	r2, [r3]
   24bfc:	f042 0201 	orr.w	r2, r2, #1
   24c00:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24c04:	2900      	cmp	r1, #0
   24c06:	d1f7      	bne.n	24bf8 <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   24c08:	4620      	mov	r0, r4
   24c0a:	f7ff ffce 	bl	24baa <l2_flags_get>
		return 0;
   24c0e:	2000      	movs	r0, #0
   24c10:	e7ed      	b.n	24bee <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   24c12:	689b      	ldr	r3, [r3, #8]
   24c14:	2b00      	cmp	r3, #0
   24c16:	d0ed      	beq.n	24bf4 <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   24c18:	2101      	movs	r1, #1
   24c1a:	4620      	mov	r0, r4
   24c1c:	4798      	blx	r3
	if (status < 0) {
   24c1e:	2800      	cmp	r0, #0
   24c20:	dae8      	bge.n	24bf4 <net_if_up+0x2e>
   24c22:	e7e4      	b.n	24bee <net_if_up+0x28>

00024c24 <net_byte_to_hex>:
{
   24c24:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   24c26:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   24c28:	b1ab      	cbz	r3, 24c56 <net_byte_to_hex+0x32>
		if (val < 10) {
   24c2a:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   24c2c:	bf86      	itte	hi
   24c2e:	f1a2 050a 	subhi.w	r5, r2, #10
   24c32:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   24c34:	3430      	addls	r4, #48	; 0x30
   24c36:	1c43      	adds	r3, r0, #1
   24c38:	7004      	strb	r4, [r0, #0]
   24c3a:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   24c3e:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   24c40:	bf84      	itt	hi
   24c42:	3a0a      	subhi	r2, #10
   24c44:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
   24c46:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val + '0');
   24c4a:	bf98      	it	ls
   24c4c:	3130      	addls	r1, #48	; 0x30
   24c4e:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   24c50:	705a      	strb	r2, [r3, #1]
   24c52:	1c58      	adds	r0, r3, #1
}
   24c54:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   24c56:	2c00      	cmp	r4, #0
   24c58:	d1e7      	bne.n	24c2a <net_byte_to_hex+0x6>
   24c5a:	4603      	mov	r3, r0
   24c5c:	e7ed      	b.n	24c3a <net_byte_to_hex+0x16>

00024c5e <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   24c5e:	2801      	cmp	r0, #1
{
   24c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24c64:	460c      	mov	r4, r1
   24c66:	4616      	mov	r6, r2
	if (family == AF_INET) {
   24c68:	d128      	bne.n	24cbc <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   24c6a:	4608      	mov	r0, r1
   24c6c:	f7ff fe84 	bl	24978 <strlen>
   24c70:	4623      	mov	r3, r4
   24c72:	4420      	add	r0, r4
		for (i = 0; i < len; i++) {
   24c74:	4283      	cmp	r3, r0
   24c76:	d116      	bne.n	24ca6 <z_impl_net_addr_pton+0x48>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   24c78:	4630      	mov	r0, r6
   24c7a:	2204      	movs	r2, #4
   24c7c:	2100      	movs	r1, #0
   24c7e:	f7ff fedc 	bl	24a3a <memset>
   24c82:	1e75      	subs	r5, r6, #1
   24c84:	3603      	adds	r6, #3

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   24c86:	4620      	mov	r0, r4
   24c88:	220a      	movs	r2, #10
   24c8a:	a901      	add	r1, sp, #4
   24c8c:	f7ff fd3a 	bl	24704 <strtol>

			src = ++endptr;
   24c90:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   24c92:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   24c96:	42ae      	cmp	r6, r5
			src = ++endptr;
   24c98:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   24c9c:	d1f3      	bne.n	24c86 <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   24c9e:	2000      	movs	r0, #0
}
   24ca0:	b003      	add	sp, #12
   24ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (!(src[i] >= '0' && src[i] <= '9') &&
   24ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
   24caa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   24cae:	2909      	cmp	r1, #9
   24cb0:	d9e0      	bls.n	24c74 <z_impl_net_addr_pton+0x16>
   24cb2:	2a2e      	cmp	r2, #46	; 0x2e
   24cb4:	d0de      	beq.n	24c74 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   24cb6:	f06f 0015 	mvn.w	r0, #21
   24cba:	e7f1      	b.n	24ca0 <z_impl_net_addr_pton+0x42>
	} else if (family == AF_INET6) {
   24cbc:	2802      	cmp	r0, #2
   24cbe:	d1fa      	bne.n	24cb6 <z_impl_net_addr_pton+0x58>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   24cc0:	212e      	movs	r1, #46	; 0x2e
   24cc2:	4620      	mov	r0, r4
   24cc4:	f7ff fe3d 	bl	24942 <strchr>
		if (*src == ':') {
   24cc8:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   24cca:	2800      	cmp	r0, #0
   24ccc:	bf14      	ite	ne
   24cce:	2706      	movne	r7, #6
   24cd0:	2708      	moveq	r7, #8
		if (*src == ':') {
   24cd2:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   24cd4:	bf08      	it	eq
   24cd6:	3401      	addeq	r4, #1
		len = strlen(src);
   24cd8:	4620      	mov	r0, r4
   24cda:	f7ff fe4d 	bl	24978 <strlen>
		for (i = 0; i < len; i++) {
   24cde:	4623      	mov	r3, r4
   24ce0:	1b1a      	subs	r2, r3, r4
   24ce2:	4290      	cmp	r0, r2
   24ce4:	dc32      	bgt.n	24d4c <z_impl_net_addr_pton+0xee>
		for (i = 0; i < expected_groups; i++) {
   24ce6:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   24ce8:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   24cea:	2c00      	cmp	r4, #0
   24cec:	d0e3      	beq.n	24cb6 <z_impl_net_addr_pton+0x58>
   24cee:	7823      	ldrb	r3, [r4, #0]
   24cf0:	2b00      	cmp	r3, #0
   24cf2:	d0e0      	beq.n	24cb6 <z_impl_net_addr_pton+0x58>
			if (*src != ':') {
   24cf4:	2b3a      	cmp	r3, #58	; 0x3a
   24cf6:	ea4f 0345 	mov.w	r3, r5, lsl #1
   24cfa:	d135      	bne.n	24d68 <z_impl_net_addr_pton+0x10a>
   24cfc:	4433      	add	r3, r6
			for (; i < expected_groups; i++) {
   24cfe:	42bd      	cmp	r5, r7
   24d00:	db52      	blt.n	24da8 <z_impl_net_addr_pton+0x14a>
			tmp = strrchr(src, ':');
   24d02:	213a      	movs	r1, #58	; 0x3a
   24d04:	4620      	mov	r0, r4
   24d06:	f7ff fe2a 	bl	2495e <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   24d0a:	42a0      	cmp	r0, r4
   24d0c:	d164      	bne.n	24dd8 <z_impl_net_addr_pton+0x17a>
   24d0e:	2f06      	cmp	r7, #6
   24d10:	d151      	bne.n	24db6 <z_impl_net_addr_pton+0x158>
				src++;
   24d12:	1c44      	adds	r4, r0, #1
		if (expected_groups == 6) {
   24d14:	2f06      	cmp	r7, #6
   24d16:	d1c2      	bne.n	24c9e <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   24d18:	2500      	movs	r5, #0
   24d1a:	360c      	adds	r6, #12
				if (!src || !*src) {
   24d1c:	2c00      	cmp	r4, #0
   24d1e:	d0ca      	beq.n	24cb6 <z_impl_net_addr_pton+0x58>
   24d20:	7823      	ldrb	r3, [r4, #0]
   24d22:	2b00      	cmp	r3, #0
   24d24:	d0c7      	beq.n	24cb6 <z_impl_net_addr_pton+0x58>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   24d26:	220a      	movs	r2, #10
   24d28:	2100      	movs	r1, #0
   24d2a:	4620      	mov	r0, r4
   24d2c:	f7ff fcea 	bl	24704 <strtol>
				src = strchr(src, '.');
   24d30:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   24d32:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   24d36:	4620      	mov	r0, r4
   24d38:	f7ff fe03 	bl	24942 <strchr>
				if (src) {
   24d3c:	4604      	mov	r4, r0
   24d3e:	2800      	cmp	r0, #0
   24d40:	d04f      	beq.n	24de2 <z_impl_net_addr_pton+0x184>
					src++;
   24d42:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   24d44:	3501      	adds	r5, #1
   24d46:	2d04      	cmp	r5, #4
   24d48:	d1e8      	bne.n	24d1c <z_impl_net_addr_pton+0xbe>
   24d4a:	e7a8      	b.n	24c9e <z_impl_net_addr_pton+0x40>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   24d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
   24d50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   24d54:	290a      	cmp	r1, #10
   24d56:	d9c3      	bls.n	24ce0 <z_impl_net_addr_pton+0x82>
   24d58:	f022 0120 	bic.w	r1, r2, #32
   24d5c:	3941      	subs	r1, #65	; 0x41
   24d5e:	2905      	cmp	r1, #5
   24d60:	d9be      	bls.n	24ce0 <z_impl_net_addr_pton+0x82>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   24d62:	2a2e      	cmp	r2, #46	; 0x2e
   24d64:	d1a7      	bne.n	24cb6 <z_impl_net_addr_pton+0x58>
   24d66:	e7bb      	b.n	24ce0 <z_impl_net_addr_pton+0x82>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   24d68:	2210      	movs	r2, #16
   24d6a:	2100      	movs	r1, #0
   24d6c:	4620      	mov	r0, r4
   24d6e:	f7ff fcc9 	bl	24704 <strtol>
   24d72:	2210      	movs	r2, #16
   24d74:	4681      	mov	r9, r0
   24d76:	2100      	movs	r1, #0
   24d78:	4620      	mov	r0, r4
   24d7a:	f7ff fcc3 	bl	24704 <strtol>
   24d7e:	f3c9 2907 	ubfx	r9, r9, #8, #8
   24d82:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   24d86:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   24d8a:	213a      	movs	r1, #58	; 0x3a
   24d8c:	4620      	mov	r0, r4
   24d8e:	f7ff fdd8 	bl	24942 <strchr>
				if (src) {
   24d92:	4604      	mov	r4, r0
   24d94:	b108      	cbz	r0, 24d9a <z_impl_net_addr_pton+0x13c>
			src++;
   24d96:	3401      	adds	r4, #1
   24d98:	e002      	b.n	24da0 <z_impl_net_addr_pton+0x142>
					if (i < expected_groups - 1) {
   24d9a:	1e7b      	subs	r3, r7, #1
   24d9c:	42ab      	cmp	r3, r5
   24d9e:	dc8a      	bgt.n	24cb6 <z_impl_net_addr_pton+0x58>
		for (i = 0; i < expected_groups; i++) {
   24da0:	3501      	adds	r5, #1
   24da2:	42af      	cmp	r7, r5
   24da4:	dca1      	bgt.n	24cea <z_impl_net_addr_pton+0x8c>
   24da6:	e7b5      	b.n	24d14 <z_impl_net_addr_pton+0xb6>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   24da8:	f883 8000 	strb.w	r8, [r3]
   24dac:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   24db0:	3501      	adds	r5, #1
   24db2:	3302      	adds	r3, #2
   24db4:	e7a3      	b.n	24cfe <z_impl_net_addr_pton+0xa0>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   24db6:	7863      	ldrb	r3, [r4, #1]
   24db8:	2b00      	cmp	r3, #0
   24dba:	d0aa      	beq.n	24d12 <z_impl_net_addr_pton+0xb4>
			i = expected_groups - 1;
   24dbc:	1e7d      	subs	r5, r7, #1
   24dbe:	3001      	adds	r0, #1
				if (*tmp == ':') {
   24dc0:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   24dc4:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   24dc6:	bf08      	it	eq
   24dc8:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   24dcc:	2d00      	cmp	r5, #0
   24dce:	f6ff af72 	blt.w	24cb6 <z_impl_net_addr_pton+0x58>
			} while (tmp-- != src);
   24dd2:	42a0      	cmp	r0, r4
   24dd4:	d1f4      	bne.n	24dc0 <z_impl_net_addr_pton+0x162>
   24dd6:	e7de      	b.n	24d96 <z_impl_net_addr_pton+0x138>
			if (expected_groups == 6) {
   24dd8:	2f06      	cmp	r7, #6
				tmp--;
   24dda:	bf08      	it	eq
   24ddc:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
   24de0:	e7ec      	b.n	24dbc <z_impl_net_addr_pton+0x15e>
					if (i < 3) {
   24de2:	2d03      	cmp	r5, #3
   24de4:	f47f af67 	bne.w	24cb6 <z_impl_net_addr_pton+0x58>
   24de8:	e7ac      	b.n	24d44 <z_impl_net_addr_pton+0xe6>

00024dea <gpio_nrfx_write>:
{
   24dea:	b510      	push	{r4, lr}
	return port->config->config_info;
   24dec:	6804      	ldr	r4, [r0, #0]
   24dee:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24df0:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24df2:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24df4:	6824      	ldr	r4, [r4, #0]
   24df6:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24df8:	d103      	bne.n	24e02 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   24dfa:	4058      	eors	r0, r3
    p_reg->OUT = value;
   24dfc:	6060      	str	r0, [r4, #4]
}
   24dfe:	2000      	movs	r0, #0
   24e00:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   24e02:	3300      	adds	r3, #0
   24e04:	f04f 0101 	mov.w	r1, #1
   24e08:	bf18      	it	ne
   24e0a:	2301      	movne	r3, #1
   24e0c:	40d0      	lsrs	r0, r2
   24e0e:	f000 0001 	and.w	r0, r0, #1
   24e12:	4091      	lsls	r1, r2
   24e14:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   24e16:	bf14      	ite	ne
   24e18:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   24e1a:	60e1      	streq	r1, [r4, #12]
   24e1c:	e7ef      	b.n	24dfe <gpio_nrfx_write+0x14>

00024e1e <gpio_nrfx_read>:
{
   24e1e:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   24e20:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24e22:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24e24:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24e26:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24e28:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24e2a:	2901      	cmp	r1, #1
    return p_reg->DIR;
   24e2c:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   24e2e:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   24e30:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   24e32:	ea80 0004 	eor.w	r0, r0, r4
   24e36:	ea84 0405 	eor.w	r4, r4, r5
   24e3a:	ea04 0406 	and.w	r4, r4, r6
   24e3e:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   24e42:	bf1c      	itt	ne
   24e44:	40d0      	lsrne	r0, r2
   24e46:	f000 0001 	andne.w	r0, r0, #1
   24e4a:	6018      	str	r0, [r3, #0]
}
   24e4c:	2000      	movs	r0, #0
   24e4e:	bd70      	pop	{r4, r5, r6, pc}

00024e50 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24e50:	6883      	ldr	r3, [r0, #8]
{
   24e52:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   24e54:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   24e56:	b158      	cbz	r0, 24e70 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24e58:	2400      	movs	r4, #0
   24e5a:	4281      	cmp	r1, r0
   24e5c:	d113      	bne.n	24e86 <gpio_nrfx_manage_callback+0x36>
   24e5e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   24e60:	b95c      	cbnz	r4, 24e7a <gpio_nrfx_manage_callback+0x2a>
   24e62:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   24e64:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   24e66:	42a1      	cmp	r1, r4
   24e68:	d100      	bne.n	24e6c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   24e6a:	6058      	str	r0, [r3, #4]
	parent->next = child;
   24e6c:	2000      	movs	r0, #0
   24e6e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   24e70:	b972      	cbnz	r2, 24e90 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   24e72:	2000      	movs	r0, #0
}
   24e74:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24e76:	4628      	mov	r0, r5
   24e78:	e7ef      	b.n	24e5a <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   24e7a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   24e7c:	6858      	ldr	r0, [r3, #4]
   24e7e:	4281      	cmp	r1, r0
	list->tail = node;
   24e80:	bf08      	it	eq
   24e82:	605c      	streq	r4, [r3, #4]
   24e84:	e7f2      	b.n	24e6c <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   24e86:	6805      	ldr	r5, [r0, #0]
   24e88:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24e8a:	2d00      	cmp	r5, #0
   24e8c:	d1f3      	bne.n	24e76 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   24e8e:	b13a      	cbz	r2, 24ea0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   24e90:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   24e92:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   24e94:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   24e96:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   24e98:	2800      	cmp	r0, #0
   24e9a:	d1ea      	bne.n	24e72 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   24e9c:	6059      	str	r1, [r3, #4]
   24e9e:	e7e9      	b.n	24e74 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   24ea0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24ea4:	e7e6      	b.n	24e74 <gpio_nrfx_manage_callback+0x24>

00024ea6 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24ea6:	2901      	cmp	r1, #1
{
   24ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   24eac:	bf18      	it	ne
   24eae:	b2d4      	uxtbne	r4, r2
{
   24eb0:	4606      	mov	r6, r0
		to_pin   = pin;
   24eb2:	bf12      	itee	ne
   24eb4:	4625      	movne	r5, r4
		to_pin   = 31U;
   24eb6:	251f      	moveq	r5, #31
		from_pin = 0U;
   24eb8:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   24eba:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   24ebe:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24ec0:	42ac      	cmp	r4, r5
   24ec2:	d902      	bls.n	24eca <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   24ec4:	2000      	movs	r0, #0
}
   24ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   24eca:	68fb      	ldr	r3, [r7, #12]
   24ecc:	fa08 f204 	lsl.w	r2, r8, r4
   24ed0:	ea23 0302 	bic.w	r3, r3, r2
   24ed4:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   24ed6:	4621      	mov	r1, r4
   24ed8:	4630      	mov	r0, r6
   24eda:	f7ec fdc5 	bl	11a68 <gpiote_pin_int_cfg>
		if (res != 0) {
   24ede:	2800      	cmp	r0, #0
   24ee0:	d1f1      	bne.n	24ec6 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24ee2:	3401      	adds	r4, #1
   24ee4:	b2e4      	uxtb	r4, r4
   24ee6:	e7eb      	b.n	24ec0 <gpio_nrfx_pin_disable_callback+0x1a>

00024ee8 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   24ee8:	2901      	cmp	r1, #1
{
   24eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   24eee:	bf18      	it	ne
   24ef0:	b2d4      	uxtbne	r4, r2
{
   24ef2:	4606      	mov	r6, r0
		to_pin   = pin;
   24ef4:	bf12      	itee	ne
   24ef6:	4625      	movne	r5, r4
		to_pin   = 31U;
   24ef8:	251f      	moveq	r5, #31
		from_pin = 0U;
   24efa:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   24efc:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   24f00:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24f02:	42ac      	cmp	r4, r5
   24f04:	d902      	bls.n	24f0c <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   24f06:	2000      	movs	r0, #0
}
   24f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   24f0c:	68fb      	ldr	r3, [r7, #12]
   24f0e:	fa08 f204 	lsl.w	r2, r8, r4
   24f12:	4313      	orrs	r3, r2
   24f14:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   24f16:	4621      	mov	r1, r4
   24f18:	4630      	mov	r0, r6
   24f1a:	f7ec fda5 	bl	11a68 <gpiote_pin_int_cfg>
		if (res != 0) {
   24f1e:	2800      	cmp	r0, #0
   24f20:	d1f2      	bne.n	24f08 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   24f22:	3401      	adds	r4, #1
   24f24:	b2e4      	uxtb	r4, r4
   24f26:	e7ec      	b.n	24f02 <gpio_nrfx_pin_enable_callback+0x1a>

00024f28 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   24f28:	6883      	ldr	r3, [r0, #8]
   24f2a:	689b      	ldr	r3, [r3, #8]
   24f2c:	7b9a      	ldrb	r2, [r3, #14]
   24f2e:	b172      	cbz	r2, 24f4e <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   24f30:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   24f32:	6892      	ldr	r2, [r2, #8]
   24f34:	6812      	ldr	r2, [r2, #0]
   24f36:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   24f3a:	b141      	cbz	r1, 24f4e <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   24f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
   24f40:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24f44:	2101      	movs	r1, #1
   24f46:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   24f48:	2200      	movs	r2, #0
   24f4a:	739a      	strb	r2, [r3, #14]
		return;
   24f4c:	4770      	bx	lr
	if (data->int_driven->cb) {
   24f4e:	681a      	ldr	r2, [r3, #0]
   24f50:	b10a      	cbz	r2, 24f56 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   24f52:	6858      	ldr	r0, [r3, #4]
   24f54:	4710      	bx	r2
}
   24f56:	4770      	bx	lr

00024f58 <uarte_nrfx_config_get>:
{
   24f58:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   24f5a:	6882      	ldr	r2, [r0, #8]
   24f5c:	e892 0003 	ldmia.w	r2, {r0, r1}
   24f60:	e883 0003 	stmia.w	r3, {r0, r1}
}
   24f64:	2000      	movs	r0, #0
   24f66:	4770      	bx	lr

00024f68 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   24f68:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24f6a:	689b      	ldr	r3, [r3, #8]
   24f6c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24f6e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   24f72:	b118      	cbz	r0, 24f7c <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   24f74:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   24f78:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   24f7c:	4770      	bx	lr

00024f7e <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   24f7e:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   24f80:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   24f82:	689b      	ldr	r3, [r3, #8]
   24f84:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24f86:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24f8a:	b138      	cbz	r0, 24f9c <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   24f8c:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24f8e:	2000      	movs	r0, #0
   24f90:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24f92:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24f94:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24f98:	601a      	str	r2, [r3, #0]
	return 0;
   24f9a:	4770      	bx	lr
		return -1;
   24f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   24fa0:	4770      	bx	lr

00024fa2 <uarte_nrfx_poll_out>:
{
   24fa2:	b082      	sub	sp, #8
   24fa4:	aa02      	add	r2, sp, #8
   24fa6:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24faa:	2100      	movs	r1, #0
	return dev->config->config_info;
   24fac:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   24fae:	689b      	ldr	r3, [r3, #8]
   24fb0:	681b      	ldr	r3, [r3, #0]
   24fb2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24fb6:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24fba:	2201      	movs	r2, #1
   24fbc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24fc0:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24fc2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   24fc6:	2900      	cmp	r1, #0
   24fc8:	d0fb      	beq.n	24fc2 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24fca:	60da      	str	r2, [r3, #12]
}
   24fcc:	b002      	add	sp, #8
   24fce:	4770      	bx	lr

00024fd0 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   24fd0:	6803      	ldr	r3, [r0, #0]
{
   24fd2:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   24fd4:	689b      	ldr	r3, [r3, #8]
   24fd6:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24fd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   24fdc:	b1bb      	cbz	r3, 2500e <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   24fde:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   24fe0:	68ab      	ldr	r3, [r5, #8]
   24fe2:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24fe4:	2300      	movs	r3, #0
   24fe6:	4290      	cmp	r0, r2
   24fe8:	bfa8      	it	ge
   24fea:	4610      	movge	r0, r2
   24fec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   24ff0:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   24ff2:	4283      	cmp	r3, r0
   24ff4:	6892      	ldr	r2, [r2, #8]
   24ff6:	db06      	blt.n	25006 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24ff8:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24ffa:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24ffe:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25002:	60a3      	str	r3, [r4, #8]
}
   25004:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   25006:	5cce      	ldrb	r6, [r1, r3]
   25008:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   2500a:	3301      	adds	r3, #1
   2500c:	e7f0      	b.n	24ff0 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   2500e:	4618      	mov	r0, r3
   25010:	e7f8      	b.n	25004 <uarte_nrfx_fifo_fill+0x34>

00025012 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   25012:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   25014:	689b      	ldr	r3, [r3, #8]
   25016:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25018:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2501c:	b143      	cbz	r3, 25030 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2501e:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25020:	2000      	movs	r0, #0
   25022:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25026:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   25028:	7b1b      	ldrb	r3, [r3, #12]
   2502a:	700b      	strb	r3, [r1, #0]
   2502c:	6010      	str	r0, [r2, #0]
   2502e:	4770      	bx	lr
	int num_rx = 0;
   25030:	4618      	mov	r0, r3
}
   25032:	4770      	bx	lr

00025034 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   25034:	2100      	movs	r1, #0
	return dev->config->config_info;
   25036:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   25038:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   2503a:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   2503c:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   2503e:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   25040:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   25042:	f44f 7280 	mov.w	r2, #256	; 0x100
   25046:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2504a:	4770      	bx	lr

0002504c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2504c:	2201      	movs	r2, #1
   2504e:	6883      	ldr	r3, [r0, #8]
   25050:	689b      	ldr	r3, [r3, #8]
   25052:	739a      	strb	r2, [r3, #14]
}
   25054:	4770      	bx	lr

00025056 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   25056:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   25058:	689b      	ldr	r3, [r3, #8]
   2505a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2505c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   25060:	b118      	cbz	r0, 2506a <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   25062:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   25066:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   2506a:	4770      	bx	lr

0002506c <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   2506c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   2506e:	689b      	ldr	r3, [r3, #8]
   25070:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25072:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   25076:	3000      	adds	r0, #0
   25078:	bf18      	it	ne
   2507a:	2001      	movne	r0, #1
   2507c:	4770      	bx	lr

0002507e <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2507e:	2210      	movs	r2, #16
	return dev->config->config_info;
   25080:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   25082:	689b      	ldr	r3, [r3, #8]
   25084:	681b      	ldr	r3, [r3, #0]
   25086:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2508a:	4770      	bx	lr

0002508c <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2508c:	2210      	movs	r2, #16
	return dev->config->config_info;
   2508e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   25090:	689b      	ldr	r3, [r3, #8]
   25092:	681b      	ldr	r3, [r3, #0]
   25094:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   25098:	4770      	bx	lr

0002509a <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2509a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   2509e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   250a0:	689b      	ldr	r3, [r3, #8]
   250a2:	681b      	ldr	r3, [r3, #0]
   250a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   250a8:	4770      	bx	lr

000250aa <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   250aa:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   250ae:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   250b0:	689b      	ldr	r3, [r3, #8]
   250b2:	681b      	ldr	r3, [r3, #0]
   250b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   250b8:	4770      	bx	lr

000250ba <uarte_nrfx_irq_update>:
}
   250ba:	2001      	movs	r0, #1
   250bc:	4770      	bx	lr

000250be <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   250be:	6883      	ldr	r3, [r0, #8]
   250c0:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   250c2:	e9c3 1200 	strd	r1, r2, [r3]
}
   250c6:	4770      	bx	lr

000250c8 <uarte_nrfx_irq_is_pending>:
{
   250c8:	b508      	push	{r3, lr}
	return dev->config->config_info;
   250ca:	6803      	ldr	r3, [r0, #0]
{
   250cc:	4602      	mov	r2, r0
	return config->uarte_regs;
   250ce:	689b      	ldr	r3, [r3, #8]
   250d0:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   250d2:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   250d6:	05db      	lsls	r3, r3, #23
   250d8:	d405      	bmi.n	250e6 <uarte_nrfx_irq_is_pending+0x1e>
   250da:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   250de:	f010 0010 	ands.w	r0, r0, #16
   250e2:	d106      	bne.n	250f2 <uarte_nrfx_irq_is_pending+0x2a>
}
   250e4:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   250e6:	f7ff ffb6 	bl	25056 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   250ea:	2800      	cmp	r0, #0
   250ec:	d0f5      	beq.n	250da <uarte_nrfx_irq_is_pending+0x12>
		||
   250ee:	2001      	movs	r0, #1
   250f0:	e7f8      	b.n	250e4 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   250f2:	4610      	mov	r0, r2
   250f4:	f7ff ffba 	bl	2506c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   250f8:	3000      	adds	r0, #0
   250fa:	bf18      	it	ne
   250fc:	2001      	movne	r0, #1
   250fe:	e7f1      	b.n	250e4 <uarte_nrfx_irq_is_pending+0x1c>

00025100 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   25100:	2000      	movs	r0, #0
   25102:	4770      	bx	lr

00025104 <entropy_cc310_rng_get_entropy>:
{
   25104:	b513      	push	{r0, r1, r4, lr}
   25106:	4614      	mov	r4, r2
   25108:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   2510a:	aa01      	add	r2, sp, #4
   2510c:	4621      	mov	r1, r4
   2510e:	f7e2 ff6f 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   25112:	9b01      	ldr	r3, [sp, #4]
   25114:	429c      	cmp	r4, r3
}
   25116:	bf18      	it	ne
   25118:	f06f 0015 	mvnne.w	r0, #21
   2511c:	b002      	add	sp, #8
   2511e:	bd10      	pop	{r4, pc}

00025120 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   25120:	4668      	mov	r0, sp
   25122:	f020 0107 	bic.w	r1, r0, #7
   25126:	468d      	mov	sp, r1
   25128:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   2512a:	f7f1 f885 	bl	16238 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2512e:	f7ea ffaf 	bl	10090 <_arch_isr_direct_pm>
   25132:	f7ea feef 	bl	ff14 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   25136:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2513a:	4685      	mov	sp, r0
   2513c:	4770      	bx	lr

0002513e <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2513e:	4668      	mov	r0, sp
   25140:	f020 0107 	bic.w	r1, r0, #7
   25144:	468d      	mov	sp, r1
   25146:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   25148:	f7ef fbfe 	bl	14948 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2514c:	f7ea ffa0 	bl	10090 <_arch_isr_direct_pm>
   25150:	f7ea fee0 	bl	ff14 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   25154:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   25158:	4685      	mov	sp, r0
   2515a:	4770      	bx	lr

0002515c <trace_task_create>:
{
   2515c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2515e:	201d      	movs	r0, #29
   25160:	2200      	movs	r2, #0
   25162:	2106      	movs	r1, #6
   25164:	f7ea ff7c 	bl	10060 <z_arm_irq_priority_set>
}
   25168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2516c:	201d      	movs	r0, #29
   2516e:	f7ea bf67 	b.w	10040 <arch_irq_enable>

00025172 <read_task_create>:
{
   25172:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   25174:	201c      	movs	r0, #28
   25176:	2200      	movs	r2, #0
   25178:	2106      	movs	r1, #6
   2517a:	f7ea ff71 	bl	10060 <z_arm_irq_priority_set>
}
   2517e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   25182:	201c      	movs	r0, #28
   25184:	f7ea bf5c 	b.w	10040 <arch_irq_enable>

00025188 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   25188:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   2518c:	bf18      	it	ne
   2518e:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   25190:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   25192:	bf48      	it	mi
   25194:	f043 0308 	orrmi.w	r3, r3, #8
}
   25198:	4618      	mov	r0, r3
   2519a:	4770      	bx	lr

0002519c <z_to_nrf_family>:
	switch (z_family) {
   2519c:	2803      	cmp	r0, #3
   2519e:	d00f      	beq.n	251c0 <z_to_nrf_family+0x24>
   251a0:	d806      	bhi.n	251b0 <z_to_nrf_family+0x14>
   251a2:	2801      	cmp	r0, #1
   251a4:	d00e      	beq.n	251c4 <z_to_nrf_family+0x28>
   251a6:	2802      	cmp	r0, #2
   251a8:	d008      	beq.n	251bc <z_to_nrf_family+0x20>
		return -EAFNOSUPPORT;
   251aa:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   251ae:	4770      	bx	lr
	switch (z_family) {
   251b0:	2866      	cmp	r0, #102	; 0x66
   251b2:	d008      	beq.n	251c6 <z_to_nrf_family+0x2a>
   251b4:	2867      	cmp	r0, #103	; 0x67
   251b6:	d1f8      	bne.n	251aa <z_to_nrf_family+0xe>
		return NRF_AF_LOCAL;
   251b8:	2001      	movs	r0, #1
   251ba:	4770      	bx	lr
		return NRF_AF_INET6;
   251bc:	200a      	movs	r0, #10
   251be:	4770      	bx	lr
		return NRF_AF_PACKET;
   251c0:	2005      	movs	r0, #5
   251c2:	4770      	bx	lr
		return NRF_AF_INET;
   251c4:	2002      	movs	r0, #2
}
   251c6:	4770      	bx	lr

000251c8 <z_to_nrf_protocol>:
	switch (proto) {
   251c8:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   251cc:	d01d      	beq.n	2520a <z_to_nrf_protocol+0x42>
   251ce:	dc05      	bgt.n	251dc <z_to_nrf_protocol+0x14>
   251d0:	2806      	cmp	r0, #6
   251d2:	d020      	beq.n	25216 <z_to_nrf_protocol+0x4e>
   251d4:	2811      	cmp	r0, #17
   251d6:	d016      	beq.n	25206 <z_to_nrf_protocol+0x3e>
   251d8:	b948      	cbnz	r0, 251ee <z_to_nrf_protocol+0x26>
   251da:	4770      	bx	lr
   251dc:	f240 2301 	movw	r3, #513	; 0x201
   251e0:	4298      	cmp	r0, r3
   251e2:	d00f      	beq.n	25204 <z_to_nrf_protocol+0x3c>
   251e4:	dc06      	bgt.n	251f4 <z_to_nrf_protocol+0x2c>
   251e6:	f240 1311 	movw	r3, #273	; 0x111
   251ea:	4298      	cmp	r0, r3
   251ec:	d010      	beq.n	25210 <z_to_nrf_protocol+0x48>
		return -EPROTONOSUPPORT;
   251ee:	f06f 002a 	mvn.w	r0, #42	; 0x2a
   251f2:	4770      	bx	lr
	switch (proto) {
   251f4:	f240 2302 	movw	r3, #514	; 0x202
   251f8:	4298      	cmp	r0, r3
   251fa:	d003      	beq.n	25204 <z_to_nrf_protocol+0x3c>
   251fc:	f240 2303 	movw	r3, #515	; 0x203
   25200:	4298      	cmp	r0, r3
   25202:	d1f4      	bne.n	251ee <z_to_nrf_protocol+0x26>
}
   25204:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   25206:	2002      	movs	r0, #2
   25208:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2520a:	f44f 7082 	mov.w	r0, #260	; 0x104
   2520e:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   25210:	f44f 7087 	mov.w	r0, #270	; 0x10e
   25214:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   25216:	2001      	movs	r0, #1
   25218:	e7f4      	b.n	25204 <z_to_nrf_protocol+0x3c>

0002521a <nrf91_bsdlib_socket_offload_init>:
}
   2521a:	2000      	movs	r0, #0
   2521c:	4770      	bx	lr

0002521e <nrf91_socket_offload_freeaddrinfo>:
{
   2521e:	b538      	push	{r3, r4, r5, lr}
   25220:	4604      	mov	r4, r0
	while (next != NULL) {
   25222:	b904      	cbnz	r4, 25226 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   25224:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   25226:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   25228:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   2522a:	f000 fcc6 	bl	25bba <k_free>
		k_free(this);
   2522e:	4620      	mov	r0, r4
   25230:	f000 fcc3 	bl	25bba <k_free>
		next = next->ai_next;
   25234:	462c      	mov	r4, r5
   25236:	e7f4      	b.n	25222 <nrf91_socket_offload_freeaddrinfo+0x4>

00025238 <z_to_nrf_addrinfo_hints>:
{
   25238:	b538      	push	{r3, r4, r5, lr}
   2523a:	460c      	mov	r4, r1
   2523c:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   2523e:	2220      	movs	r2, #32
   25240:	2100      	movs	r1, #0
   25242:	4620      	mov	r0, r4
   25244:	f7ff fbf9 	bl	24a3a <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   25248:	2300      	movs	r3, #0
   2524a:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2524c:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   2524e:	2b03      	cmp	r3, #3
   25250:	d003      	beq.n	2525a <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   25252:	2b04      	cmp	r3, #4
   25254:	bf08      	it	eq
   25256:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2525a:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   2525c:	88a8      	ldrh	r0, [r5, #4]
   2525e:	f7ff ff9d 	bl	2519c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   25262:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   25266:	d00b      	beq.n	25280 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   25268:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2526a:	68e8      	ldr	r0, [r5, #12]
   2526c:	f7ff ffac 	bl	251c8 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   25270:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25274:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   25276:	d003      	beq.n	25280 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   25278:	69a8      	ldr	r0, [r5, #24]
   2527a:	b108      	cbz	r0, 25280 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   2527c:	61a0      	str	r0, [r4, #24]
	return 0;
   2527e:	2000      	movs	r0, #0
}
   25280:	bd38      	pop	{r3, r4, r5, pc}

00025282 <nrf91_socket_offload_send>:
{
   25282:	b570      	push	{r4, r5, r6, lr}
   25284:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   25286:	4618      	mov	r0, r3
{
   25288:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   2528a:	f7ff ff7d 	bl	25188 <z_to_nrf_flags>
   2528e:	462a      	mov	r2, r5
   25290:	4603      	mov	r3, r0
   25292:	4620      	mov	r0, r4
}
   25294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   25298:	f7ef b916 	b.w	144c8 <nrf_send>

0002529c <nrf91_socket_offload_recv>:
{
   2529c:	b570      	push	{r4, r5, r6, lr}
   2529e:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   252a0:	4618      	mov	r0, r3
{
   252a2:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   252a4:	f7ff ff70 	bl	25188 <z_to_nrf_flags>
   252a8:	462a      	mov	r2, r5
   252aa:	4603      	mov	r3, r0
   252ac:	4620      	mov	r0, r4
}
   252ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   252b2:	f7ef b93f 	b.w	14534 <nrf_recv>

000252b6 <nrf91_socket_offload_getsockopt>:
{
   252b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252ba:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   252bc:	2300      	movs	r3, #0
{
   252be:	b086      	sub	sp, #24
   252c0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   252c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   252c8:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   252cc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   252d0:	4607      	mov	r7, r0
   252d2:	460d      	mov	r5, r1
   252d4:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   252d6:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   252d8:	d00d      	beq.n	252f6 <nrf91_socket_offload_getsockopt+0x40>
   252da:	dc08      	bgt.n	252ee <nrf91_socket_offload_getsockopt+0x38>
   252dc:	2901      	cmp	r1, #1
   252de:	d00a      	beq.n	252f6 <nrf91_socket_offload_getsockopt+0x40>
   252e0:	f7fc fd68 	bl	21db4 <z_impl_z_errno>
	errno = ENOPROTOOPT;
   252e4:	232a      	movs	r3, #42	; 0x2a
	return retval;
   252e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   252ea:	6003      	str	r3, [r0, #0]
	return retval;
   252ec:	e029      	b.n	25342 <nrf91_socket_offload_getsockopt+0x8c>
	switch (z_in_level) {
   252ee:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   252f2:	2b01      	cmp	r3, #1
   252f4:	d8f4      	bhi.n	252e0 <nrf91_socket_offload_getsockopt+0x2a>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   252f6:	aa02      	add	r2, sp, #8
   252f8:	4631      	mov	r1, r6
   252fa:	4628      	mov	r0, r5
   252fc:	f7ed f8ce 	bl	1249c <z_to_nrf_optname>
   25300:	2800      	cmp	r0, #0
   25302:	dbed      	blt.n	252e0 <nrf91_socket_offload_getsockopt+0x2a>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   25304:	2d01      	cmp	r5, #1
   25306:	d120      	bne.n	2534a <nrf91_socket_offload_getsockopt+0x94>
   25308:	2e14      	cmp	r6, #20
   2530a:	d11e      	bne.n	2534a <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   2530c:	2308      	movs	r3, #8
   2530e:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   25310:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   25312:	aa03      	add	r2, sp, #12
   25314:	9200      	str	r2, [sp, #0]
   25316:	4638      	mov	r0, r7
   25318:	9a02      	ldr	r2, [sp, #8]
   2531a:	4629      	mov	r1, r5
   2531c:	f7ef f98a 	bl	14634 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   25320:	4607      	mov	r7, r0
   25322:	b970      	cbnz	r0, 25342 <nrf91_socket_offload_getsockopt+0x8c>
   25324:	b16c      	cbz	r4, 25342 <nrf91_socket_offload_getsockopt+0x8c>
		*optlen = nrf_optlen;
   25326:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   25328:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   2532a:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2532e:	d108      	bne.n	25342 <nrf91_socket_offload_getsockopt+0x8c>
			if (optname == SO_ERROR) {
   25330:	2e04      	cmp	r6, #4
   25332:	d10c      	bne.n	2534e <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   25334:	6820      	ldr	r0, [r4, #0]
   25336:	f7ec ff93 	bl	12260 <bsd_os_errno_set>
   2533a:	f7fc fd3b 	bl	21db4 <z_impl_z_errno>
				*(int *)optval = errno;
   2533e:	6803      	ldr	r3, [r0, #0]
   25340:	6023      	str	r3, [r4, #0]
}
   25342:	4638      	mov	r0, r7
   25344:	b006      	add	sp, #24
   25346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2534a:	4623      	mov	r3, r4
   2534c:	e7e1      	b.n	25312 <nrf91_socket_offload_getsockopt+0x5c>
			} else if (optname == SO_RCVTIMEO) {
   2534e:	2e14      	cmp	r6, #20
   25350:	d1f7      	bne.n	25342 <nrf91_socket_offload_getsockopt+0x8c>
				((struct timeval *)optval)->tv_sec =
   25352:	9b04      	ldr	r3, [sp, #16]
   25354:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   25356:	9b05      	ldr	r3, [sp, #20]
   25358:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   2535a:	2308      	movs	r3, #8
   2535c:	f8c8 3000 	str.w	r3, [r8]
   25360:	e7ef      	b.n	25342 <nrf91_socket_offload_getsockopt+0x8c>

00025362 <nrf91_socket_offload_poll>:
{
   25362:	b5f0      	push	{r4, r5, r6, r7, lr}
   25364:	b091      	sub	sp, #68	; 0x44
   25366:	4605      	mov	r5, r0
   25368:	460c      	mov	r4, r1
   2536a:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   2536c:	2100      	movs	r1, #0
   2536e:	2240      	movs	r2, #64	; 0x40
   25370:	4668      	mov	r0, sp
   25372:	f7ff fb62 	bl	24a3a <memset>
	for (int i = 0; i < nfds; i++) {
   25376:	2204      	movs	r2, #4
   25378:	2100      	movs	r1, #0
   2537a:	42a1      	cmp	r1, r4
   2537c:	db0c      	blt.n	25398 <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2537e:	4632      	mov	r2, r6
   25380:	4621      	mov	r1, r4
   25382:	4668      	mov	r0, sp
   25384:	f7ef f976 	bl	14674 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   25388:	2200      	movs	r2, #0
   2538a:	462b      	mov	r3, r5
		fds[i].revents = 0;
   2538c:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   2538e:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   25390:	42a2      	cmp	r2, r4
   25392:	db1b      	blt.n	253cc <nrf91_socket_offload_poll+0x6a>
}
   25394:	b011      	add	sp, #68	; 0x44
   25396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   25398:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   2539c:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   2539e:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   253a2:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   253a4:	bf48      	it	mi
   253a6:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   253aa:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   253ae:	bf44      	itt	mi
   253b0:	f043 0301 	orrmi.w	r3, r3, #1
   253b4:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   253b8:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   253ba:	bf42      	ittt	mi
   253bc:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   253c0:	f043 0302 	orrmi.w	r3, r3, #2
   253c4:	f82d 3002 	strhmi.w	r3, [sp, r2]
   253c8:	3208      	adds	r2, #8
   253ca:	e7d6      	b.n	2537a <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   253cc:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   253d0:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   253d2:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   253d4:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   253d6:	bf48      	it	mi
   253d8:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   253da:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   253dc:	bf48      	it	mi
   253de:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   253e0:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   253e4:	bf44      	itt	mi
   253e6:	f045 0504 	orrmi.w	r5, r5, #4
   253ea:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   253ec:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   253ee:	bf48      	it	mi
   253f0:	88dd      	ldrhmi	r5, [r3, #6]
   253f2:	f103 0308 	add.w	r3, r3, #8
   253f6:	bf44      	itt	mi
   253f8:	f045 0508 	orrmi.w	r5, r5, #8
   253fc:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   25400:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   25402:	bf42      	ittt	mi
   25404:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   25408:	f045 0520 	orrmi.w	r5, r5, #32
   2540c:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   25410:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   25412:	bf42      	ittt	mi
   25414:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   25418:	f041 0110 	orrmi.w	r1, r1, #16
   2541c:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   25420:	e7b6      	b.n	25390 <nrf91_socket_offload_poll+0x2e>

00025422 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   25422:	f7ef b8b3 	b.w	1458c <nrf_listen>

00025426 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   25426:	f7ef b825 	b.w	14474 <nrf_close>

0002542a <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   2542a:	2903      	cmp	r1, #3
{
   2542c:	b508      	push	{r3, lr}
	switch (cmd) {
   2542e:	d00b      	beq.n	25448 <nrf91_socket_offload_fcntl+0x1e>
   25430:	2904      	cmp	r1, #4
   25432:	d111      	bne.n	25458 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   25434:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   25436:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   2543a:	d10d      	bne.n	25458 <nrf91_socket_offload_fcntl+0x2e>
}
   2543c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25440:	1392      	asrs	r2, r2, #14
   25442:	2101      	movs	r1, #1
   25444:	f7ef b918 	b.w	14678 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   25448:	2200      	movs	r2, #0
   2544a:	2102      	movs	r1, #2
   2544c:	f7ef f914 	bl	14678 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   25450:	0380      	lsls	r0, r0, #14
   25452:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   25456:	bd08      	pop	{r3, pc}
   25458:	f7fc fcac 	bl	21db4 <z_impl_z_errno>
	errno = EINVAL;
   2545c:	2316      	movs	r3, #22
   2545e:	6003      	str	r3, [r0, #0]
	return retval;
   25460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25464:	e7f7      	b.n	25456 <nrf91_socket_offload_fcntl+0x2c>

00025466 <nrf91_socket_offload_recvfrom>:
{
   25466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2546a:	4607      	mov	r7, r0
   2546c:	b08c      	sub	sp, #48	; 0x30
   2546e:	4618      	mov	r0, r3
   25470:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   25474:	4690      	mov	r8, r2
   25476:	f7ff fe87 	bl	25188 <z_to_nrf_flags>
   2547a:	4603      	mov	r3, r0
	if (from == NULL) {
   2547c:	b954      	cbnz	r4, 25494 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2547e:	e9cd 4400 	strd	r4, r4, [sp]
   25482:	4642      	mov	r2, r8
   25484:	4638      	mov	r0, r7
   25486:	f7ef f839 	bl	144fc <nrf_recvfrom>
   2548a:	4605      	mov	r5, r0
}
   2548c:	4628      	mov	r0, r5
   2548e:	b00c      	add	sp, #48	; 0x30
   25490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   25494:	2224      	movs	r2, #36	; 0x24
   25496:	ad0c      	add	r5, sp, #48	; 0x30
   25498:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2549c:	aa03      	add	r2, sp, #12
   2549e:	9501      	str	r5, [sp, #4]
   254a0:	9200      	str	r2, [sp, #0]
   254a2:	4638      	mov	r0, r7
   254a4:	4642      	mov	r2, r8
   254a6:	f7ef f829 	bl	144fc <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   254aa:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   254ac:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   254ae:	2b02      	cmp	r3, #2
   254b0:	d109      	bne.n	254c6 <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   254b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   254b6:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   254b8:	2301      	movs	r3, #1
   254ba:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   254bc:	9b06      	ldr	r3, [sp, #24]
   254be:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   254c0:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   254c2:	6033      	str	r3, [r6, #0]
	return retval;
   254c4:	e7e2      	b.n	2548c <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   254c6:	2b0a      	cmp	r3, #10
   254c8:	d1e0      	bne.n	2548c <nrf91_socket_offload_recvfrom+0x26>
	ptr->sin6_port = nrf_in->sin6_port;
   254ca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   254ce:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   254d0:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   254d2:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   254d4:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   254d6:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   254da:	a907      	add	r1, sp, #28
   254dc:	f7ff fa80 	bl	249e0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   254e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   254e2:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   254e4:	2318      	movs	r3, #24
   254e6:	e7ec      	b.n	254c2 <nrf91_socket_offload_recvfrom+0x5c>

000254e8 <nrf91_socket_offload_connect>:
{
   254e8:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   254ea:	880b      	ldrh	r3, [r1, #0]
{
   254ec:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   254ee:	2b01      	cmp	r3, #1
{
   254f0:	4606      	mov	r6, r0
   254f2:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   254f4:	d10e      	bne.n	25514 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   254f6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   254f8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   254fa:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   254fe:	2302      	movs	r3, #2
   25500:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25502:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25504:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25508:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   2550a:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2550c:	f7ef f82c 	bl	14568 <nrf_connect>
}
   25510:	b00a      	add	sp, #40	; 0x28
   25512:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   25514:	2b02      	cmp	r3, #2
   25516:	d112      	bne.n	2553e <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   25518:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2551a:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   2551c:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   25520:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   25522:	2210      	movs	r2, #16
   25524:	3104      	adds	r1, #4
   25526:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   25528:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2552a:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   2552e:	f7ff fa57 	bl	249e0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   25532:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   25534:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   25536:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   25538:	a901      	add	r1, sp, #4
   2553a:	4630      	mov	r0, r6
   2553c:	e7e6      	b.n	2550c <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2553e:	f7ef f813 	bl	14568 <nrf_connect>
		if (retval < 0) {
   25542:	2800      	cmp	r0, #0
   25544:	dae4      	bge.n	25510 <nrf91_socket_offload_connect+0x28>
   25546:	f7fc fc35 	bl	21db4 <z_impl_z_errno>
	errno = ENOTSUP;
   2554a:	2323      	movs	r3, #35	; 0x23
   2554c:	6003      	str	r3, [r0, #0]
   2554e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25552:	e7dd      	b.n	25510 <nrf91_socket_offload_connect+0x28>

00025554 <nrf91_socket_offload_socket>:
{
   25554:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   25556:	b280      	uxth	r0, r0
   25558:	f7ff fe20 	bl	2519c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2555c:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   25560:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   25562:	d106      	bne.n	25572 <nrf91_socket_offload_socket+0x1e>
   25564:	f7fc fc26 	bl	21db4 <z_impl_z_errno>
		errno = EAFNOSUPPORT;
   25568:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   2556a:	6003      	str	r3, [r0, #0]
}
   2556c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25570:	bd10      	pop	{r4, pc}
	switch (socktype) {
   25572:	2903      	cmp	r1, #3
   25574:	d003      	beq.n	2557e <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   25576:	2904      	cmp	r1, #4
   25578:	bf08      	it	eq
   2557a:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   2557e:	4610      	mov	r0, r2
   25580:	f7ff fe22 	bl	251c8 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   25584:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   25588:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2558a:	d103      	bne.n	25594 <nrf91_socket_offload_socket+0x40>
   2558c:	f7fc fc12 	bl	21db4 <z_impl_z_errno>
		errno = EPROTONOSUPPORT;
   25590:	232b      	movs	r3, #43	; 0x2b
   25592:	e7ea      	b.n	2556a <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   25594:	4620      	mov	r0, r4
}
   25596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   2559a:	f7ee bf59 	b.w	14450 <nrf_socket>

0002559e <nrf91_socket_offload_accept>:
{
   2559e:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   255a0:	2708      	movs	r7, #8
{
   255a2:	b085      	sub	sp, #20
   255a4:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   255a6:	aa04      	add	r2, sp, #16
{
   255a8:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   255aa:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   255ae:	eb0d 0107 	add.w	r1, sp, r7
   255b2:	f7ee fffb 	bl	145ac <nrf_accept>
	if (retval < 0) {
   255b6:	1e05      	subs	r5, r0, #0
   255b8:	db23      	blt.n	25602 <nrf91_socket_offload_accept+0x64>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   255ba:	9b03      	ldr	r3, [sp, #12]
   255bc:	2b02      	cmp	r3, #2
   255be:	d10a      	bne.n	255d6 <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   255c0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   255c4:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   255c6:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   255c8:	2301      	movs	r3, #1
   255ca:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   255cc:	9b05      	ldr	r3, [sp, #20]
   255ce:	6063      	str	r3, [r4, #4]
}
   255d0:	4628      	mov	r0, r5
   255d2:	b005      	add	sp, #20
   255d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   255d6:	2b0a      	cmp	r3, #10
   255d8:	d10f      	bne.n	255fa <nrf91_socket_offload_accept+0x5c>
		*addrlen = sizeof(struct sockaddr_in6);
   255da:	2318      	movs	r3, #24
	ptr->sin6_port = nrf_in->sin6_port;
   255dc:	a904      	add	r1, sp, #16
		*addrlen = sizeof(struct sockaddr_in6);
   255de:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   255e0:	f831 3b08 	ldrh.w	r3, [r1], #8
	ptr->sin6_family = AF_INET6;
   255e4:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   255e6:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   255e8:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   255ea:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   255ec:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   255f0:	f7ff f9f6 	bl	249e0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   255f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   255f6:	7523      	strb	r3, [r4, #20]
   255f8:	e7ea      	b.n	255d0 <nrf91_socket_offload_accept+0x32>
   255fa:	f7fc fbdb 	bl	21db4 <z_impl_z_errno>
	errno = ENOTSUP;
   255fe:	2323      	movs	r3, #35	; 0x23
   25600:	6003      	str	r3, [r0, #0]
		return -1;
   25602:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   25606:	e7e3      	b.n	255d0 <nrf91_socket_offload_accept+0x32>

00025608 <nrf91_socket_offload_getaddrinfo>:
{
   25608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2560c:	4614      	mov	r4, r2
   2560e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   25610:	2100      	movs	r1, #0
{
   25612:	b093      	sub	sp, #76	; 0x4c
   25614:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25616:	2220      	movs	r2, #32
   25618:	a802      	add	r0, sp, #8
{
   2561a:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2561c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2561e:	f7ff fa0c 	bl	24a3a <memset>
	if (hints != NULL) {
   25622:	b19c      	cbz	r4, 2564c <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   25624:	a902      	add	r1, sp, #8
   25626:	4620      	mov	r0, r4
   25628:	f7ff fe06 	bl	25238 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2562c:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   25630:	f000 80c0 	beq.w	257b4 <nrf91_socket_offload_getaddrinfo+0x1ac>
		} else if (error == -EAFNOSUPPORT) {
   25634:	302f      	adds	r0, #47	; 0x2f
   25636:	f000 80c0 	beq.w	257ba <nrf91_socket_offload_getaddrinfo+0x1b2>
		if (hints->ai_next != NULL) {
   2563a:	69e0      	ldr	r0, [r4, #28]
   2563c:	b120      	cbz	r0, 25648 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2563e:	ac0a      	add	r4, sp, #40	; 0x28
   25640:	4621      	mov	r1, r4
   25642:	f7ff fdf9 	bl	25238 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   25646:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   25648:	aa02      	add	r2, sp, #8
   2564a:	e000      	b.n	2564e <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   2564c:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2564e:	4631      	mov	r1, r6
   25650:	4628      	mov	r0, r5
   25652:	ab01      	add	r3, sp, #4
   25654:	f7ef f80a 	bl	1466c <nrf_getaddrinfo>
	*res = NULL;
   25658:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2565a:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2565c:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   25660:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25664:	4605      	mov	r5, r0
   25666:	2800      	cmp	r0, #0
   25668:	d04c      	beq.n	25704 <nrf91_socket_offload_getaddrinfo+0xfc>
		nrf91_socket_offload_freeaddrinfo(*res);
   2566a:	f8d8 0000 	ldr.w	r0, [r8]
   2566e:	f7ff fdd6 	bl	2521e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   25672:	2300      	movs	r3, #0
   25674:	f8c8 3000 	str.w	r3, [r8]
   25678:	e046      	b.n	25708 <nrf91_socket_offload_getaddrinfo+0x100>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   2567a:	2020      	movs	r0, #32
   2567c:	f7fc fe0a 	bl	22294 <k_malloc>
		if (next_z_res == NULL) {
   25680:	4604      	mov	r4, r0
   25682:	2800      	cmp	r0, #0
   25684:	f000 8091 	beq.w	257aa <nrf91_socket_offload_getaddrinfo+0x1a2>
	family = nrf_to_z_family(nrf_in->ai_family);
   25688:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2568a:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2568c:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2568e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   25692:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25694:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   25696:	d03e      	beq.n	25716 <nrf91_socket_offload_getaddrinfo+0x10e>
   25698:	dc09      	bgt.n	256ae <nrf91_socket_offload_getaddrinfo+0xa6>
   2569a:	2a01      	cmp	r2, #1
   2569c:	d00d      	beq.n	256ba <nrf91_socket_offload_getaddrinfo+0xb2>
   2569e:	2a02      	cmp	r2, #2
   256a0:	d03d      	beq.n	2571e <nrf91_socket_offload_getaddrinfo+0x116>
			k_free(next_z_res);
   256a2:	4620      	mov	r0, r4
   256a4:	f000 fa89 	bl	25bba <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   256a8:	f06f 0508 	mvn.w	r5, #8
   256ac:	e7dd      	b.n	2566a <nrf91_socket_offload_getaddrinfo+0x62>
	switch (nrf_family) {
   256ae:	2a0a      	cmp	r2, #10
   256b0:	d033      	beq.n	2571a <nrf91_socket_offload_getaddrinfo+0x112>
   256b2:	2a66      	cmp	r2, #102	; 0x66
   256b4:	d1f5      	bne.n	256a2 <nrf91_socket_offload_getaddrinfo+0x9a>
		return AF_LTE;
   256b6:	4613      	mov	r3, r2
   256b8:	e000      	b.n	256bc <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_LOCAL;
   256ba:	2367      	movs	r3, #103	; 0x67
	z_out->ai_family = family;
   256bc:	6063      	str	r3, [r4, #4]
	switch (proto) {
   256be:	68f3      	ldr	r3, [r6, #12]
   256c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   256c4:	d04c      	beq.n	25760 <nrf91_socket_offload_getaddrinfo+0x158>
   256c6:	dc2c      	bgt.n	25722 <nrf91_socket_offload_getaddrinfo+0x11a>
   256c8:	2b01      	cmp	r3, #1
   256ca:	d04e      	beq.n	2576a <nrf91_socket_offload_getaddrinfo+0x162>
   256cc:	2b02      	cmp	r3, #2
   256ce:	d04a      	beq.n	25766 <nrf91_socket_offload_getaddrinfo+0x15e>
   256d0:	2b00      	cmp	r3, #0
   256d2:	d12e      	bne.n	25732 <nrf91_socket_offload_getaddrinfo+0x12a>
	if (nrf_in->ai_family == NRF_AF_INET) {
   256d4:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   256d6:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   256d8:	d149      	bne.n	2576e <nrf91_socket_offload_getaddrinfo+0x166>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   256da:	2008      	movs	r0, #8
   256dc:	f7fc fdda 	bl	22294 <k_malloc>
   256e0:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   256e2:	2800      	cmp	r0, #0
   256e4:	d05e      	beq.n	257a4 <nrf91_socket_offload_getaddrinfo+0x19c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   256e6:	2308      	movs	r3, #8
   256e8:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   256ea:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   256ec:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   256ee:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   256f0:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   256f2:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   256f4:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   256f6:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   256f8:	2f00      	cmp	r7, #0
   256fa:	d159      	bne.n	257b0 <nrf91_socket_offload_getaddrinfo+0x1a8>
			*res = next_z_res;
   256fc:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   25700:	4627      	mov	r7, r4
   25702:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25704:	2e00      	cmp	r6, #0
   25706:	d1b8      	bne.n	2567a <nrf91_socket_offload_getaddrinfo+0x72>
	nrf_freeaddrinfo(nrf_res);
   25708:	9801      	ldr	r0, [sp, #4]
   2570a:	f7ee ffb1 	bl	14670 <nrf_freeaddrinfo>
}
   2570e:	4628      	mov	r0, r5
   25710:	b013      	add	sp, #76	; 0x4c
   25712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   25716:	2303      	movs	r3, #3
   25718:	e7d0      	b.n	256bc <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_INET6;
   2571a:	2302      	movs	r3, #2
   2571c:	e7ce      	b.n	256bc <nrf91_socket_offload_getaddrinfo+0xb4>
		return AF_INET;
   2571e:	2301      	movs	r3, #1
   25720:	e7cc      	b.n	256bc <nrf91_socket_offload_getaddrinfo+0xb4>
	switch (proto) {
   25722:	f240 2101 	movw	r1, #513	; 0x201
   25726:	428b      	cmp	r3, r1
   25728:	d0d4      	beq.n	256d4 <nrf91_socket_offload_getaddrinfo+0xcc>
   2572a:	dc0d      	bgt.n	25748 <nrf91_socket_offload_getaddrinfo+0x140>
   2572c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   25730:	d013      	beq.n	2575a <nrf91_socket_offload_getaddrinfo+0x152>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25732:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   25736:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   25738:	2300      	movs	r3, #0
   2573a:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   2573c:	4620      	mov	r0, r4
   2573e:	f000 fa3c 	bl	25bba <k_free>
			retval = DNS_EAI_SOCKTYPE;
   25742:	f06f 0506 	mvn.w	r5, #6
   25746:	e790      	b.n	2566a <nrf91_socket_offload_getaddrinfo+0x62>
	switch (proto) {
   25748:	f240 2102 	movw	r1, #514	; 0x202
   2574c:	428b      	cmp	r3, r1
   2574e:	d0c1      	beq.n	256d4 <nrf91_socket_offload_getaddrinfo+0xcc>
   25750:	f240 2103 	movw	r1, #515	; 0x203
   25754:	428b      	cmp	r3, r1
   25756:	d0bd      	beq.n	256d4 <nrf91_socket_offload_getaddrinfo+0xcc>
   25758:	e7eb      	b.n	25732 <nrf91_socket_offload_getaddrinfo+0x12a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2575a:	f240 1311 	movw	r3, #273	; 0x111
   2575e:	e7b9      	b.n	256d4 <nrf91_socket_offload_getaddrinfo+0xcc>
   25760:	f44f 7381 	mov.w	r3, #258	; 0x102
   25764:	e7b6      	b.n	256d4 <nrf91_socket_offload_getaddrinfo+0xcc>
   25766:	2311      	movs	r3, #17
   25768:	e7b4      	b.n	256d4 <nrf91_socket_offload_getaddrinfo+0xcc>
   2576a:	2306      	movs	r3, #6
   2576c:	e7b2      	b.n	256d4 <nrf91_socket_offload_getaddrinfo+0xcc>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2576e:	2a0a      	cmp	r2, #10
   25770:	d1e4      	bne.n	2573c <nrf91_socket_offload_getaddrinfo+0x134>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   25772:	2018      	movs	r0, #24
   25774:	f7fc fd8e 	bl	22294 <k_malloc>
   25778:	4682      	mov	sl, r0
   2577a:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   2577c:	b190      	cbz	r0, 257a4 <nrf91_socket_offload_getaddrinfo+0x19c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2577e:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   25780:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   25782:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25786:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   25788:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   2578c:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   25790:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   25792:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   25796:	f7ff f923 	bl	249e0 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   2579a:	f8db 3020 	ldr.w	r3, [fp, #32]
   2579e:	f88a 3014 	strb.w	r3, [sl, #20]
   257a2:	e7a9      	b.n	256f8 <nrf91_socket_offload_getaddrinfo+0xf0>
			k_free(next_z_res);
   257a4:	4620      	mov	r0, r4
   257a6:	f000 fa08 	bl	25bba <k_free>
			retval = DNS_EAI_MEMORY;
   257aa:	f06f 0509 	mvn.w	r5, #9
   257ae:	e75c      	b.n	2566a <nrf91_socket_offload_getaddrinfo+0x62>
			latest_z_res->ai_next = next_z_res;
   257b0:	61fc      	str	r4, [r7, #28]
   257b2:	e7a5      	b.n	25700 <nrf91_socket_offload_getaddrinfo+0xf8>
			return DNS_EAI_SOCKTYPE;
   257b4:	f06f 0506 	mvn.w	r5, #6
   257b8:	e7a9      	b.n	2570e <nrf91_socket_offload_getaddrinfo+0x106>
			return DNS_EAI_ADDRFAMILY;
   257ba:	f06f 0508 	mvn.w	r5, #8
   257be:	e7a6      	b.n	2570e <nrf91_socket_offload_getaddrinfo+0x106>

000257c0 <nrf91_socket_offload_sendto>:
{
   257c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   257c4:	b08d      	sub	sp, #52	; 0x34
   257c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   257c8:	4605      	mov	r5, r0
   257ca:	460e      	mov	r6, r1
   257cc:	4617      	mov	r7, r2
   257ce:	4698      	mov	r8, r3
	if (to == NULL) {
   257d0:	b96c      	cbnz	r4, 257ee <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   257d2:	4618      	mov	r0, r3
   257d4:	f7ff fcd8 	bl	25188 <z_to_nrf_flags>
   257d8:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   257dc:	4603      	mov	r3, r0
   257de:	463a      	mov	r2, r7
   257e0:	4631      	mov	r1, r6
   257e2:	4628      	mov	r0, r5
   257e4:	f7ee fe54 	bl	14490 <nrf_sendto>
}
   257e8:	b00d      	add	sp, #52	; 0x34
   257ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   257ee:	8823      	ldrh	r3, [r4, #0]
   257f0:	2b01      	cmp	r3, #1
   257f2:	d110      	bne.n	25816 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   257f4:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   257f6:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   257f8:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   257fc:	2302      	movs	r3, #2
   257fe:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25800:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   25802:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   25804:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   25808:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2580a:	f7ff fcbd 	bl	25188 <z_to_nrf_flags>
   2580e:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25810:	ab03      	add	r3, sp, #12
   25812:	9300      	str	r3, [sp, #0]
   25814:	e7e2      	b.n	257dc <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   25816:	2b02      	cmp	r3, #2
   25818:	d115      	bne.n	25846 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   2581a:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2581c:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   25820:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   25824:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   25826:	2210      	movs	r2, #16
   25828:	1d21      	adds	r1, r4, #4
   2582a:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   2582c:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2582e:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   25832:	f7ff f8d5 	bl	249e0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   25836:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   25838:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2583a:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2583c:	f7ff fca4 	bl	25188 <z_to_nrf_flags>
   25840:	f8cd 9004 	str.w	r9, [sp, #4]
   25844:	e7e4      	b.n	25810 <nrf91_socket_offload_sendto+0x50>
   25846:	f7fc fab5 	bl	21db4 <z_impl_z_errno>
	errno = ENOTSUP;
   2584a:	2323      	movs	r3, #35	; 0x23
   2584c:	6003      	str	r3, [r0, #0]
	return retval;
   2584e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25852:	e7c9      	b.n	257e8 <nrf91_socket_offload_sendto+0x28>

00025854 <nrf91_socket_offload_setsockopt>:
{
   25854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   25858:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   2585c:	b086      	sub	sp, #24
   2585e:	4680      	mov	r8, r0
   25860:	460c      	mov	r4, r1
   25862:	4617      	mov	r7, r2
   25864:	461d      	mov	r5, r3
   25866:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   25868:	d00d      	beq.n	25886 <nrf91_socket_offload_setsockopt+0x32>
   2586a:	dc08      	bgt.n	2587e <nrf91_socket_offload_setsockopt+0x2a>
   2586c:	2901      	cmp	r1, #1
   2586e:	d00a      	beq.n	25886 <nrf91_socket_offload_setsockopt+0x32>
   25870:	f7fc faa0 	bl	21db4 <z_impl_z_errno>
	errno = ENOPROTOOPT;
   25874:	232a      	movs	r3, #42	; 0x2a
   25876:	6003      	str	r3, [r0, #0]
   25878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2587c:	e01b      	b.n	258b6 <nrf91_socket_offload_setsockopt+0x62>
	switch (z_in_level) {
   2587e:	f2a1 2302 	subw	r3, r1, #514	; 0x202
   25882:	2b01      	cmp	r3, #1
   25884:	d8f4      	bhi.n	25870 <nrf91_socket_offload_setsockopt+0x1c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   25886:	aa03      	add	r2, sp, #12
   25888:	4639      	mov	r1, r7
   2588a:	4620      	mov	r0, r4
   2588c:	f7ec fe06 	bl	1249c <z_to_nrf_optname>
   25890:	2800      	cmp	r0, #0
   25892:	dbed      	blt.n	25870 <nrf91_socket_offload_setsockopt+0x1c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   25894:	2c01      	cmp	r4, #1
   25896:	d107      	bne.n	258a8 <nrf91_socket_offload_setsockopt+0x54>
   25898:	2f14      	cmp	r7, #20
   2589a:	d105      	bne.n	258a8 <nrf91_socket_offload_setsockopt+0x54>
		nrf_optlen = sizeof(struct nrf_timeval);
   2589c:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2589e:	682b      	ldr	r3, [r5, #0]
   258a0:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   258a2:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   258a4:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   258a6:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   258a8:	9600      	str	r6, [sp, #0]
   258aa:	462b      	mov	r3, r5
   258ac:	9a03      	ldr	r2, [sp, #12]
   258ae:	4621      	mov	r1, r4
   258b0:	4640      	mov	r0, r8
   258b2:	f7ee fea3 	bl	145fc <nrf_setsockopt>
}
   258b6:	b006      	add	sp, #24
   258b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000258bc <nrf91_socket_offload_bind>:
{
   258bc:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   258be:	880b      	ldrh	r3, [r1, #0]
{
   258c0:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   258c2:	2b01      	cmp	r3, #1
{
   258c4:	4606      	mov	r6, r0
   258c6:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   258c8:	d10e      	bne.n	258e8 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   258ca:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   258cc:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   258ce:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   258d2:	2302      	movs	r3, #2
   258d4:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   258d6:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   258d8:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   258dc:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   258de:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   258e0:	f7ee fe7a 	bl	145d8 <nrf_bind>
}
   258e4:	b00a      	add	sp, #40	; 0x28
   258e6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   258e8:	2b02      	cmp	r3, #2
   258ea:	d112      	bne.n	25912 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   258ec:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   258ee:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   258f0:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   258f4:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   258f6:	2210      	movs	r2, #16
   258f8:	3104      	adds	r1, #4
   258fa:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   258fc:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   258fe:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   25902:	f7ff f86d 	bl	249e0 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   25906:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   25908:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2590a:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2590c:	a901      	add	r1, sp, #4
   2590e:	4630      	mov	r0, r6
   25910:	e7e6      	b.n	258e0 <nrf91_socket_offload_bind+0x24>
   25912:	f7fc fa4f 	bl	21db4 <z_impl_z_errno>
	errno = ENOTSUP;
   25916:	2323      	movs	r3, #35	; 0x23
   25918:	6003      	str	r3, [r0, #0]
   2591a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2591e:	e7e1      	b.n	258e4 <nrf91_socket_offload_bind+0x28>

00025920 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str,
   25920:	6813      	ldr	r3, [r2, #0]
   25922:	f7ec bfeb 	b.w	128fc <at_parser_max_params_from_str>

00025926 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   25926:	6803      	ldr	r3, [r0, #0]
   25928:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2592a:	bf83      	ittte	hi
   2592c:	230c      	movhi	r3, #12
   2592e:	6840      	ldrhi	r0, [r0, #4]
   25930:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   25934:	2000      	movls	r0, #0
}
   25936:	4770      	bx	lr

00025938 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   25938:	7803      	ldrb	r3, [r0, #0]
   2593a:	2b01      	cmp	r3, #1
   2593c:	d006      	beq.n	2594c <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2593e:	2b02      	cmp	r3, #2
   25940:	d006      	beq.n	25950 <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   25942:	3b03      	subs	r3, #3
   25944:	2b01      	cmp	r3, #1
   25946:	d805      	bhi.n	25954 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   25948:	6840      	ldr	r0, [r0, #4]
   2594a:	4770      	bx	lr
		return sizeof(u16_t);
   2594c:	2002      	movs	r0, #2
   2594e:	4770      	bx	lr
		return sizeof(u32_t);
   25950:	2004      	movs	r0, #4
   25952:	4770      	bx	lr
	}

	return 0;
   25954:	2000      	movs	r0, #0
}
   25956:	4770      	bx	lr

00025958 <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   25958:	7803      	ldrb	r3, [r0, #0]
{
   2595a:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2595c:	3b03      	subs	r3, #3
   2595e:	2b01      	cmp	r3, #1
{
   25960:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   25962:	d802      	bhi.n	2596a <at_param_clear+0x12>
		k_free(param->value.str_val);
   25964:	6880      	ldr	r0, [r0, #8]
   25966:	f000 f928 	bl	25bba <k_free>
	param->value.int_val = 0;
   2596a:	2300      	movs	r3, #0
   2596c:	60a3      	str	r3, [r4, #8]
}
   2596e:	bd10      	pop	{r4, pc}

00025970 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   25970:	b538      	push	{r3, r4, r5, lr}
   25972:	460d      	mov	r5, r1
	if (list == NULL) {
   25974:	4604      	mov	r4, r0
   25976:	b140      	cbz	r0, 2598a <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   25978:	210c      	movs	r1, #12
   2597a:	4628      	mov	r0, r5
   2597c:	f000 f922 	bl	25bc4 <k_calloc>
   25980:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   25982:	b128      	cbz	r0, 25990 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   25984:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   25986:	6025      	str	r5, [r4, #0]
}
   25988:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2598a:	f06f 0015 	mvn.w	r0, #21
   2598e:	e7fb      	b.n	25988 <at_params_list_init+0x18>
		return -ENOMEM;
   25990:	f06f 000b 	mvn.w	r0, #11
   25994:	e7f8      	b.n	25988 <at_params_list_init+0x18>

00025996 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   25996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   25998:	4605      	mov	r5, r0
   2599a:	b130      	cbz	r0, 259aa <at_params_list_clear+0x14>
   2599c:	6843      	ldr	r3, [r0, #4]
   2599e:	b123      	cbz	r3, 259aa <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   259a0:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   259a2:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   259a4:	682b      	ldr	r3, [r5, #0]
   259a6:	429c      	cmp	r4, r3
   259a8:	d300      	bcc.n	259ac <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   259aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   259ac:	686e      	ldr	r6, [r5, #4]
   259ae:	fb07 6604 	mla	r6, r7, r4, r6
   259b2:	4630      	mov	r0, r6
   259b4:	f7ff ffd0 	bl	25958 <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   259b8:	220c      	movs	r2, #12
   259ba:	2100      	movs	r1, #0
   259bc:	4630      	mov	r0, r6
   259be:	f7ff f83c 	bl	24a3a <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   259c2:	3401      	adds	r4, #1
   259c4:	e7ee      	b.n	259a4 <at_params_list_clear+0xe>

000259c6 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   259c6:	b538      	push	{r3, r4, r5, lr}
   259c8:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   259ca:	b160      	cbz	r0, 259e6 <at_params_short_put+0x20>
   259cc:	6843      	ldr	r3, [r0, #4]
   259ce:	b153      	cbz	r3, 259e6 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   259d0:	f7ff ffa9 	bl	25926 <at_params_get>

	if (param == NULL) {
   259d4:	4604      	mov	r4, r0
   259d6:	b130      	cbz	r0, 259e6 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   259d8:	f7ff ffbe 	bl	25958 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   259dc:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   259de:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   259e0:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   259e2:	60a5      	str	r5, [r4, #8]
}
   259e4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   259e6:	f06f 0015 	mvn.w	r0, #21
   259ea:	e7fb      	b.n	259e4 <at_params_short_put+0x1e>

000259ec <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   259ec:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   259ee:	b160      	cbz	r0, 25a0a <at_params_empty_put+0x1e>
   259f0:	6843      	ldr	r3, [r0, #4]
   259f2:	b153      	cbz	r3, 25a0a <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   259f4:	f7ff ff97 	bl	25926 <at_params_get>

	if (param == NULL) {
   259f8:	4604      	mov	r4, r0
   259fa:	b130      	cbz	r0, 25a0a <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   259fc:	f7ff ffac 	bl	25958 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   25a00:	2305      	movs	r3, #5
	param->value.int_val = 0;
   25a02:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   25a04:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   25a06:	60a0      	str	r0, [r4, #8]

	return 0;
}
   25a08:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25a0a:	f06f 0015 	mvn.w	r0, #21
   25a0e:	e7fb      	b.n	25a08 <at_params_empty_put+0x1c>

00025a10 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   25a10:	b538      	push	{r3, r4, r5, lr}
   25a12:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   25a14:	b160      	cbz	r0, 25a30 <at_params_int_put+0x20>
   25a16:	6843      	ldr	r3, [r0, #4]
   25a18:	b153      	cbz	r3, 25a30 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25a1a:	f7ff ff84 	bl	25926 <at_params_get>

	if (param == NULL) {
   25a1e:	4604      	mov	r4, r0
   25a20:	b130      	cbz	r0, 25a30 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   25a22:	f7ff ff99 	bl	25958 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   25a26:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   25a28:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   25a2a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   25a2c:	60a5      	str	r5, [r4, #8]
}
   25a2e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25a30:	f06f 0015 	mvn.w	r0, #21
   25a34:	e7fb      	b.n	25a2e <at_params_int_put+0x1e>

00025a36 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   25a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a38:	4616      	mov	r6, r2
   25a3a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   25a3c:	b1c0      	cbz	r0, 25a70 <at_params_string_put+0x3a>
   25a3e:	6843      	ldr	r3, [r0, #4]
   25a40:	b1b3      	cbz	r3, 25a70 <at_params_string_put+0x3a>
   25a42:	b1aa      	cbz	r2, 25a70 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25a44:	f7ff ff6f 	bl	25926 <at_params_get>

	if (param == NULL) {
   25a48:	4604      	mov	r4, r0
   25a4a:	b188      	cbz	r0, 25a70 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   25a4c:	1c68      	adds	r0, r5, #1
   25a4e:	f7fc fc21 	bl	22294 <k_malloc>

	if (param_value == NULL) {
   25a52:	4607      	mov	r7, r0
   25a54:	b178      	cbz	r0, 25a76 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   25a56:	462a      	mov	r2, r5
   25a58:	4631      	mov	r1, r6
   25a5a:	f7fe ffc1 	bl	249e0 <memcpy>

	at_param_clear(param);
   25a5e:	4620      	mov	r0, r4
   25a60:	f7ff ff7a 	bl	25958 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   25a64:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   25a66:	2000      	movs	r0, #0
	param->size = str_len;
   25a68:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   25a6a:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   25a6c:	60a7      	str	r7, [r4, #8]
}
   25a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   25a70:	f06f 0015 	mvn.w	r0, #21
   25a74:	e7fb      	b.n	25a6e <at_params_string_put+0x38>
		return -ENOMEM;
   25a76:	f06f 000b 	mvn.w	r0, #11
   25a7a:	e7f8      	b.n	25a6e <at_params_string_put+0x38>

00025a7c <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			 const u32_t *array, size_t array_len)
{
   25a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a7e:	4616      	mov	r6, r2
   25a80:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   25a82:	b1c0      	cbz	r0, 25ab6 <at_params_array_put+0x3a>
   25a84:	6843      	ldr	r3, [r0, #4]
   25a86:	b1b3      	cbz	r3, 25ab6 <at_params_array_put+0x3a>
   25a88:	b1aa      	cbz	r2, 25ab6 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25a8a:	f7ff ff4c 	bl	25926 <at_params_get>

	if (param == NULL) {
   25a8e:	4604      	mov	r4, r0
   25a90:	b188      	cbz	r0, 25ab6 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   25a92:	4628      	mov	r0, r5
   25a94:	f7fc fbfe 	bl	22294 <k_malloc>

	if (param_value == NULL) {
   25a98:	4607      	mov	r7, r0
   25a9a:	b178      	cbz	r0, 25abc <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   25a9c:	462a      	mov	r2, r5
   25a9e:	4631      	mov	r1, r6
   25aa0:	f7fe ff9e 	bl	249e0 <memcpy>

	at_param_clear(param);
   25aa4:	4620      	mov	r0, r4
   25aa6:	f7ff ff57 	bl	25958 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   25aaa:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   25aac:	2000      	movs	r0, #0
	param->size = array_len;
   25aae:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   25ab0:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   25ab2:	60a7      	str	r7, [r4, #8]
}
   25ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   25ab6:	f06f 0015 	mvn.w	r0, #21
   25aba:	e7fb      	b.n	25ab4 <at_params_array_put+0x38>
		return -ENOMEM;
   25abc:	f06f 000b 	mvn.w	r0, #11
   25ac0:	e7f8      	b.n	25ab4 <at_params_array_put+0x38>

00025ac2 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   25ac2:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   25ac4:	b160      	cbz	r0, 25ae0 <at_params_short_get+0x1e>
   25ac6:	6843      	ldr	r3, [r0, #4]
   25ac8:	b153      	cbz	r3, 25ae0 <at_params_short_get+0x1e>
   25aca:	b14a      	cbz	r2, 25ae0 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25acc:	f7ff ff2b 	bl	25926 <at_params_get>

	if (param == NULL) {
   25ad0:	b130      	cbz	r0, 25ae0 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   25ad2:	7803      	ldrb	r3, [r0, #0]
   25ad4:	2b01      	cmp	r3, #1
   25ad6:	d103      	bne.n	25ae0 <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   25ad8:	6883      	ldr	r3, [r0, #8]
	return 0;
   25ada:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   25adc:	8013      	strh	r3, [r2, #0]
}
   25ade:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25ae0:	f06f 0015 	mvn.w	r0, #21
   25ae4:	e7fb      	b.n	25ade <at_params_short_get+0x1c>

00025ae6 <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   25ae6:	b570      	push	{r4, r5, r6, lr}
   25ae8:	4616      	mov	r6, r2
   25aea:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   25aec:	b1c0      	cbz	r0, 25b20 <at_params_string_get+0x3a>
   25aee:	6843      	ldr	r3, [r0, #4]
   25af0:	b1b3      	cbz	r3, 25b20 <at_params_string_get+0x3a>
   25af2:	b1aa      	cbz	r2, 25b20 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   25af4:	b1a4      	cbz	r4, 25b20 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   25af6:	f7ff ff16 	bl	25926 <at_params_get>

	if (param == NULL) {
   25afa:	4601      	mov	r1, r0
   25afc:	b180      	cbz	r0, 25b20 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   25afe:	7803      	ldrb	r3, [r0, #0]
   25b00:	2b03      	cmp	r3, #3
   25b02:	d10d      	bne.n	25b20 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   25b04:	f7ff ff18 	bl	25938 <at_param_size>

	if (*len < param_len) {
   25b08:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   25b0a:	4605      	mov	r5, r0
	if (*len < param_len) {
   25b0c:	4283      	cmp	r3, r0
   25b0e:	d30a      	bcc.n	25b26 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   25b10:	4602      	mov	r2, r0
   25b12:	6889      	ldr	r1, [r1, #8]
   25b14:	4630      	mov	r0, r6
   25b16:	f7fe ff63 	bl	249e0 <memcpy>
	*len = param_len;

	return 0;
   25b1a:	2000      	movs	r0, #0
	*len = param_len;
   25b1c:	6025      	str	r5, [r4, #0]
}
   25b1e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   25b20:	f06f 0015 	mvn.w	r0, #21
   25b24:	e7fb      	b.n	25b1e <at_params_string_get+0x38>
		return -ENOMEM;
   25b26:	f06f 000b 	mvn.w	r0, #11
   25b2a:	e7f8      	b.n	25b1e <at_params_string_get+0x38>

00025b2c <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   25b2c:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   25b2e:	4604      	mov	r4, r0
   25b30:	b178      	cbz	r0, 25b52 <at_params_valid_count_get+0x26>
   25b32:	6840      	ldr	r0, [r0, #4]
   25b34:	b168      	cbz	r0, 25b52 <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   25b36:	6822      	ldr	r2, [r4, #0]
   25b38:	b14a      	cbz	r2, 25b4e <at_params_valid_count_get+0x22>
   25b3a:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   25b3c:	7803      	ldrb	r3, [r0, #0]
   25b3e:	b133      	cbz	r3, 25b4e <at_params_valid_count_get+0x22>
		valid_i += 1;
   25b40:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   25b42:	4611      	mov	r1, r2
   25b44:	4620      	mov	r0, r4
   25b46:	f7ff feee 	bl	25926 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   25b4a:	2800      	cmp	r0, #0
   25b4c:	d1f6      	bne.n	25b3c <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   25b4e:	4610      	mov	r0, r2
   25b50:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25b52:	f06f 0215 	mvn.w	r2, #21
   25b56:	e7fa      	b.n	25b4e <at_params_valid_count_get+0x22>

00025b58 <arch_system_halt>:
	__asm__ volatile(
   25b58:	f04f 0220 	mov.w	r2, #32
   25b5c:	f3ef 8311 	mrs	r3, BASEPRI
   25b60:	f382 8811 	msr	BASEPRI, r2
   25b64:	f3bf 8f6f 	isb	sy
   25b68:	e7fe      	b.n	25b68 <arch_system_halt+0x10>

00025b6a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   25b6a:	f7fe bd89 	b.w	24680 <z_clock_idle_exit>

00025b6e <k_mem_slab_init>:
{
   25b6e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   25b70:	2400      	movs	r4, #0
	slab->block_size = block_size;
   25b72:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   25b76:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   25b7a:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   25b7c:	42a3      	cmp	r3, r4
   25b7e:	d102      	bne.n	25b86 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   25b80:	e9c0 0000 	strd	r0, r0, [r0]
}
   25b84:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   25b86:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   25b88:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   25b8a:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   25b8c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   25b8e:	4411      	add	r1, r2
   25b90:	e7f4      	b.n	25b7c <k_mem_slab_init+0xe>

00025b92 <k_mem_pool_malloc>:
{
   25b92:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25b94:	2404      	movs	r4, #4
   25b96:	190a      	adds	r2, r1, r4
   25b98:	d204      	bcs.n	25ba4 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   25b9a:	2300      	movs	r3, #0
   25b9c:	4669      	mov	r1, sp
   25b9e:	f7fc fb01 	bl	221a4 <k_mem_pool_alloc>
   25ba2:	b110      	cbz	r0, 25baa <k_mem_pool_malloc+0x18>
		return NULL;
   25ba4:	2000      	movs	r0, #0
}
   25ba6:	b002      	add	sp, #8
   25ba8:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   25baa:	4622      	mov	r2, r4
   25bac:	a901      	add	r1, sp, #4
   25bae:	9800      	ldr	r0, [sp, #0]
   25bb0:	f7fe ff16 	bl	249e0 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   25bb4:	9800      	ldr	r0, [sp, #0]
   25bb6:	3004      	adds	r0, #4
   25bb8:	e7f5      	b.n	25ba6 <k_mem_pool_malloc+0x14>

00025bba <k_free>:
	if (ptr != NULL) {
   25bba:	b110      	cbz	r0, 25bc2 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   25bbc:	3804      	subs	r0, #4
   25bbe:	f7fc bb3d 	b.w	2223c <k_mem_pool_free_id>
}
   25bc2:	4770      	bx	lr

00025bc4 <k_calloc>:
{
   25bc4:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   25bc6:	fba0 4501 	umull	r4, r5, r0, r1
   25bca:	b935      	cbnz	r5, 25bda <k_calloc+0x16>
	ret = k_malloc(bounds);
   25bcc:	4620      	mov	r0, r4
   25bce:	f7fc fb61 	bl	22294 <k_malloc>
	if (ret != NULL) {
   25bd2:	4606      	mov	r6, r0
   25bd4:	b918      	cbnz	r0, 25bde <k_calloc+0x1a>
}
   25bd6:	4630      	mov	r0, r6
   25bd8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   25bda:	2600      	movs	r6, #0
   25bdc:	e7fb      	b.n	25bd6 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   25bde:	4622      	mov	r2, r4
   25be0:	4629      	mov	r1, r5
   25be2:	f7fe ff2a 	bl	24a3a <memset>
   25be6:	e7f6      	b.n	25bd6 <k_calloc+0x12>

00025be8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   25be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25bec:	4604      	mov	r4, r0
   25bee:	460f      	mov	r7, r1
   25bf0:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25bf2:	f100 0508 	add.w	r5, r0, #8
   25bf6:	f04f 0220 	mov.w	r2, #32
   25bfa:	f3ef 8611 	mrs	r6, BASEPRI
   25bfe:	f382 8811 	msr	BASEPRI, r2
   25c02:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   25c06:	b1db      	cbz	r3, 25c40 <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   25c08:	2008      	movs	r0, #8
   25c0a:	f7fc fb49 	bl	222a0 <z_thread_malloc>
		if (anode == NULL) {
   25c0e:	b938      	cbnz	r0, 25c20 <queue_insert+0x38>
	__asm__ volatile(
   25c10:	f386 8811 	msr	BASEPRI, r6
   25c14:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   25c18:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   25c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   25c20:	2301      	movs	r3, #1
		anode->data = data;
   25c22:	f8c0 8004 	str.w	r8, [r0, #4]
   25c26:	6003      	str	r3, [r0, #0]
   25c28:	6803      	ldr	r3, [r0, #0]
   25c2a:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   25c2e:	b95f      	cbnz	r7, 25c48 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c30:	6823      	ldr	r3, [r4, #0]
   25c32:	4313      	orrs	r3, r2
   25c34:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25c36:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   25c38:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25c3a:	b973      	cbnz	r3, 25c5a <queue_insert+0x72>
	list->tail = node;
   25c3c:	6060      	str	r0, [r4, #4]
   25c3e:	e00c      	b.n	25c5a <queue_insert+0x72>
	node->next_and_flags = flags;
   25c40:	f8c8 3000 	str.w	r3, [r8]
   25c44:	4640      	mov	r0, r8
   25c46:	e7ef      	b.n	25c28 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c48:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25c4a:	f033 0303 	bics.w	r3, r3, #3
   25c4e:	d114      	bne.n	25c7a <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c50:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   25c52:	6862      	ldr	r2, [r4, #4]
   25c54:	b95a      	cbnz	r2, 25c6e <queue_insert+0x86>
	list->head = node;
   25c56:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25c5a:	2104      	movs	r1, #4
   25c5c:	4628      	mov	r0, r5
   25c5e:	f000 fb86 	bl	2636e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25c62:	4628      	mov	r0, r5
   25c64:	4631      	mov	r1, r6
   25c66:	f000 f8d5 	bl	25e14 <z_reschedule>
	return 0;
   25c6a:	2000      	movs	r0, #0
   25c6c:	e7d6      	b.n	25c1c <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25c6e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c70:	f003 0303 	and.w	r3, r3, #3
   25c74:	4303      	orrs	r3, r0
   25c76:	6013      	str	r3, [r2, #0]
   25c78:	e7e0      	b.n	25c3c <queue_insert+0x54>
   25c7a:	4313      	orrs	r3, r2
   25c7c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25c7e:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c80:	f003 0303 	and.w	r3, r3, #3
   25c84:	4318      	orrs	r0, r3
   25c86:	6038      	str	r0, [r7, #0]
   25c88:	e7e7      	b.n	25c5a <queue_insert+0x72>

00025c8a <z_queue_node_peek>:
{
   25c8a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   25c8c:	4604      	mov	r4, r0
   25c8e:	b130      	cbz	r0, 25c9e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25c90:	6802      	ldr	r2, [r0, #0]
   25c92:	0793      	lsls	r3, r2, #30
   25c94:	d003      	beq.n	25c9e <z_queue_node_peek+0x14>
		ret = anode->data;
   25c96:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25c98:	b109      	cbz	r1, 25c9e <z_queue_node_peek+0x14>
			k_free(anode);
   25c9a:	f7ff ff8e 	bl	25bba <k_free>
}
   25c9e:	4620      	mov	r0, r4
   25ca0:	bd10      	pop	{r4, pc}

00025ca2 <z_impl_k_queue_init>:
	list->head = NULL;
   25ca2:	2300      	movs	r3, #0
	list->tail = NULL;
   25ca4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   25ca8:	f100 0308 	add.w	r3, r0, #8
   25cac:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   25cb0:	4770      	bx	lr

00025cb2 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   25cb2:	460a      	mov	r2, r1
   25cb4:	2300      	movs	r3, #0
   25cb6:	6841      	ldr	r1, [r0, #4]
   25cb8:	f7ff bf96 	b.w	25be8 <queue_insert>

00025cbc <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   25cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25cc0:	4604      	mov	r4, r0
   25cc2:	b086      	sub	sp, #24
   25cc4:	460d      	mov	r5, r1
	__asm__ volatile(
   25cc6:	f04f 0320 	mov.w	r3, #32
   25cca:	f3ef 8711 	mrs	r7, BASEPRI
   25cce:	f383 8811 	msr	BASEPRI, r3
   25cd2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   25cd6:	6802      	ldr	r2, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25cd8:	b192      	cbz	r2, 25d00 <z_impl_k_queue_get+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25cda:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25cdc:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25cde:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25ce2:	428a      	cmp	r2, r1
	list->head = node;
   25ce4:	6003      	str	r3, [r0, #0]
	list->tail = node;
   25ce6:	bf08      	it	eq
   25ce8:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25cea:	2101      	movs	r1, #1
   25cec:	4610      	mov	r0, r2
   25cee:	f7ff ffcc 	bl	25c8a <z_queue_node_peek>
	__asm__ volatile(
   25cf2:	f387 8811 	msr	BASEPRI, r7
   25cf6:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   25cfa:	b006      	add	sp, #24
   25cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   25d00:	b929      	cbnz	r1, 25d0e <z_impl_k_queue_get+0x52>
   25d02:	f387 8811 	msr	BASEPRI, r7
   25d06:	f3bf 8f6f 	isb	sy
			return NULL;
   25d0a:	2000      	movs	r0, #0
   25d0c:	e7f5      	b.n	25cfa <z_impl_k_queue_get+0x3e>
   25d0e:	f387 8811 	msr	BASEPRI, r7
   25d12:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   25d16:	2104      	movs	r1, #4
   25d18:	4603      	mov	r3, r0
   25d1a:	eb0d 0001 	add.w	r0, sp, r1
   25d1e:	f000 fb10 	bl	26342 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   25d22:	1c6a      	adds	r2, r5, #1
   25d24:	d002      	beq.n	25d2c <z_impl_k_queue_get+0x70>
	return z_impl_k_uptime_get();
   25d26:	f000 f9d6 	bl	260d6 <z_impl_k_uptime_get>
   25d2a:	4606      	mov	r6, r0
{
   25d2c:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   25d2e:	9b04      	ldr	r3, [sp, #16]
   25d30:	f36f 3310 	bfc	r3, #12, #5
   25d34:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   25d36:	2101      	movs	r1, #1
   25d38:	1bea      	subs	r2, r5, r7
   25d3a:	a801      	add	r0, sp, #4
   25d3c:	f7fd f9f4 	bl	23128 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   25d40:	b108      	cbz	r0, 25d46 <z_impl_k_queue_get+0x8a>
   25d42:	300b      	adds	r0, #11
   25d44:	d1e1      	bne.n	25d0a <z_impl_k_queue_get+0x4e>
	__asm__ volatile(
   25d46:	f04f 0320 	mov.w	r3, #32
   25d4a:	f3ef 8811 	mrs	r8, BASEPRI
   25d4e:	f383 8811 	msr	BASEPRI, r3
   25d52:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   25d56:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   25d58:	b138      	cbz	r0, 25d6a <z_impl_k_queue_get+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25d5a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25d5c:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25d5e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25d62:	4290      	cmp	r0, r2
	list->head = node;
   25d64:	6023      	str	r3, [r4, #0]
	list->tail = node;
   25d66:	bf08      	it	eq
   25d68:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   25d6a:	2101      	movs	r1, #1
   25d6c:	f7ff ff8d 	bl	25c8a <z_queue_node_peek>
	__asm__ volatile(
   25d70:	f388 8811 	msr	BASEPRI, r8
   25d74:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   25d78:	2800      	cmp	r0, #0
   25d7a:	d1be      	bne.n	25cfa <z_impl_k_queue_get+0x3e>
   25d7c:	1c6b      	adds	r3, r5, #1
   25d7e:	d0d6      	beq.n	25d2e <z_impl_k_queue_get+0x72>
	return z_impl_k_uptime_get();
   25d80:	f000 f9a9 	bl	260d6 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   25d84:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   25d86:	42bd      	cmp	r5, r7
   25d88:	dad1      	bge.n	25d2e <z_impl_k_queue_get+0x72>
   25d8a:	e7be      	b.n	25d0a <z_impl_k_queue_get+0x4e>

00025d8c <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25d8c:	7b43      	ldrb	r3, [r0, #13]
   25d8e:	06db      	lsls	r3, r3, #27
   25d90:	bf03      	ittte	eq
   25d92:	6980      	ldreq	r0, [r0, #24]
   25d94:	fab0 f080 	clzeq	r0, r0
   25d98:	0940      	lsreq	r0, r0, #5
   25d9a:	2000      	movne	r0, #0
}
   25d9c:	4770      	bx	lr

00025d9e <z_swap_irqlock>:
{
   25d9e:	b510      	push	{r4, lr}
   25da0:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   25da2:	f7fc ff45 	bl	22c30 <z_check_stack_sentinel>
	ret = arch_swap(key);
   25da6:	4620      	mov	r0, r4
}
   25da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   25dac:	f7ea b8c6 	b.w	ff3c <arch_swap>

00025db0 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   25db0:	f990 000e 	ldrsb.w	r0, [r0, #14]
   25db4:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   25db8:	4298      	cmp	r0, r3
   25dba:	bfac      	ite	ge
   25dbc:	2000      	movge	r0, #0
   25dbe:	2001      	movlt	r0, #1
   25dc0:	4770      	bx	lr

00025dc2 <z_find_first_thread_to_unpend>:
{
   25dc2:	b510      	push	{r4, lr}
	__asm__ volatile(
   25dc4:	f04f 0320 	mov.w	r3, #32
   25dc8:	f3ef 8411 	mrs	r4, BASEPRI
   25dcc:	f383 8811 	msr	BASEPRI, r3
   25dd0:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25dd4:	f000 f85d 	bl	25e92 <z_priq_dumb_best>
	__asm__ volatile(
   25dd8:	f384 8811 	msr	BASEPRI, r4
   25ddc:	f3bf 8f6f 	isb	sy
}
   25de0:	bd10      	pop	{r4, pc}

00025de2 <z_unpend_thread_no_timeout>:
{
   25de2:	b538      	push	{r3, r4, r5, lr}
   25de4:	4604      	mov	r4, r0
	__asm__ volatile(
   25de6:	f04f 0320 	mov.w	r3, #32
   25dea:	f3ef 8511 	mrs	r5, BASEPRI
   25dee:	f383 8811 	msr	BASEPRI, r3
   25df2:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25df6:	4601      	mov	r1, r0
   25df8:	6880      	ldr	r0, [r0, #8]
   25dfa:	f7fc fc13 	bl	22624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25dfe:	7b63      	ldrb	r3, [r4, #13]
   25e00:	f023 0302 	bic.w	r3, r3, #2
   25e04:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25e06:	f385 8811 	msr	BASEPRI, r5
   25e0a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25e0e:	2300      	movs	r3, #0
   25e10:	60a3      	str	r3, [r4, #8]
}
   25e12:	bd38      	pop	{r3, r4, r5, pc}

00025e14 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25e14:	b921      	cbnz	r1, 25e20 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25e16:	f3ef 8005 	mrs	r0, IPSR
   25e1a:	b908      	cbnz	r0, 25e20 <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   25e1c:	f7ff bfbf 	b.w	25d9e <z_swap_irqlock>
   25e20:	f381 8811 	msr	BASEPRI, r1
   25e24:	f3bf 8f6f 	isb	sy
}
   25e28:	4770      	bx	lr

00025e2a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25e2a:	4603      	mov	r3, r0
   25e2c:	b920      	cbnz	r0, 25e38 <z_reschedule_irqlock+0xe>
   25e2e:	f3ef 8205 	mrs	r2, IPSR
   25e32:	b90a      	cbnz	r2, 25e38 <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   25e34:	f7ff bfb3 	b.w	25d9e <z_swap_irqlock>
   25e38:	f383 8811 	msr	BASEPRI, r3
   25e3c:	f3bf 8f6f 	isb	sy
}
   25e40:	4770      	bx	lr

00025e42 <z_reschedule_unlocked>:
	__asm__ volatile(
   25e42:	f04f 0320 	mov.w	r3, #32
   25e46:	f3ef 8011 	mrs	r0, BASEPRI
   25e4a:	f383 8811 	msr	BASEPRI, r3
   25e4e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25e52:	f7ff bfea 	b.w	25e2a <z_reschedule_irqlock>

00025e56 <z_unpend_thread>:
{
   25e56:	b538      	push	{r3, r4, r5, lr}
   25e58:	4604      	mov	r4, r0
   25e5a:	f04f 0320 	mov.w	r3, #32
   25e5e:	f3ef 8511 	mrs	r5, BASEPRI
   25e62:	f383 8811 	msr	BASEPRI, r3
   25e66:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25e6a:	4601      	mov	r1, r0
   25e6c:	6880      	ldr	r0, [r0, #8]
   25e6e:	f7fc fbd9 	bl	22624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25e72:	7b63      	ldrb	r3, [r4, #13]
   25e74:	f023 0302 	bic.w	r3, r3, #2
   25e78:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25e7a:	f385 8811 	msr	BASEPRI, r5
   25e7e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25e82:	2300      	movs	r3, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25e84:	f104 0018 	add.w	r0, r4, #24
   25e88:	60a3      	str	r3, [r4, #8]
}
   25e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25e8e:	f000 b8de 	b.w	2604e <z_abort_timeout>

00025e92 <z_priq_dumb_best>:
	return list->head == list;
   25e92:	6803      	ldr	r3, [r0, #0]
}
   25e94:	4298      	cmp	r0, r3
   25e96:	bf14      	ite	ne
   25e98:	4618      	movne	r0, r3
   25e9a:	2000      	moveq	r0, #0
   25e9c:	4770      	bx	lr

00025e9e <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   25e9e:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   25ea2:	b570      	push	{r4, r5, r6, lr}
   25ea4:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   25ea6:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   25eaa:	b1cb      	cbz	r3, 25ee0 <z_thread_timeout+0x42>
	__asm__ volatile(
   25eac:	f04f 0320 	mov.w	r3, #32
   25eb0:	f3ef 8611 	mrs	r6, BASEPRI
   25eb4:	f383 8811 	msr	BASEPRI, r3
   25eb8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25ebc:	4629      	mov	r1, r5
   25ebe:	f850 0c10 	ldr.w	r0, [r0, #-16]
   25ec2:	f7fc fbaf 	bl	22624 <z_priq_dumb_remove>
   25ec6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25eca:	f023 0302 	bic.w	r3, r3, #2
   25ece:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   25ed2:	f386 8811 	msr	BASEPRI, r6
   25ed6:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25eda:	2300      	movs	r3, #0
   25edc:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25ee0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   25ee4:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25ee6:	f023 0314 	bic.w	r3, r3, #20
   25eea:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   25eee:	f7ff ff4d 	bl	25d8c <z_is_thread_ready>
   25ef2:	b120      	cbz	r0, 25efe <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   25ef4:	4628      	mov	r0, r5
}
   25ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25efa:	f7fc bbe3 	b.w	226c4 <z_add_thread_to_ready_q>
   25efe:	bd70      	pop	{r4, r5, r6, pc}

00025f00 <z_unpend_first_thread>:
{
   25f00:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25f02:	f04f 0320 	mov.w	r3, #32
   25f06:	f3ef 8211 	mrs	r2, BASEPRI
   25f0a:	f383 8811 	msr	BASEPRI, r3
   25f0e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   25f12:	f7ff ffbe 	bl	25e92 <z_priq_dumb_best>
   25f16:	4604      	mov	r4, r0
	__asm__ volatile(
   25f18:	f382 8811 	msr	BASEPRI, r2
   25f1c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   25f20:	b1c8      	cbz	r0, 25f56 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   25f22:	f04f 0320 	mov.w	r3, #32
   25f26:	f3ef 8511 	mrs	r5, BASEPRI
   25f2a:	f383 8811 	msr	BASEPRI, r3
   25f2e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25f32:	4601      	mov	r1, r0
   25f34:	6880      	ldr	r0, [r0, #8]
   25f36:	f7fc fb75 	bl	22624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25f3a:	7b63      	ldrb	r3, [r4, #13]
   25f3c:	f023 0302 	bic.w	r3, r3, #2
   25f40:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25f42:	f385 8811 	msr	BASEPRI, r5
   25f46:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25f4a:	2300      	movs	r3, #0
   25f4c:	f104 0018 	add.w	r0, r4, #24
   25f50:	60a3      	str	r3, [r4, #8]
   25f52:	f000 f87c 	bl	2604e <z_abort_timeout>
}
   25f56:	4620      	mov	r0, r4
   25f58:	bd38      	pop	{r3, r4, r5, pc}

00025f5a <z_unpend_all>:
{
   25f5a:	b570      	push	{r4, r5, r6, lr}
   25f5c:	4606      	mov	r6, r0
	int need_sched = 0;
   25f5e:	2500      	movs	r5, #0
   25f60:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f62:	42a6      	cmp	r6, r4
   25f64:	d000      	beq.n	25f68 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   25f66:	b90c      	cbnz	r4, 25f6c <z_unpend_all+0x12>
}
   25f68:	4628      	mov	r0, r5
   25f6a:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   25f6c:	4620      	mov	r0, r4
   25f6e:	f7ff ff72 	bl	25e56 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   25f72:	4620      	mov	r0, r4
   25f74:	f7ff ff0a 	bl	25d8c <z_is_thread_ready>
		need_sched = 1;
   25f78:	2501      	movs	r5, #1
   25f7a:	2800      	cmp	r0, #0
   25f7c:	d0f0      	beq.n	25f60 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   25f7e:	4620      	mov	r0, r4
   25f80:	f7fc fba0 	bl	226c4 <z_add_thread_to_ready_q>
   25f84:	e7ec      	b.n	25f60 <z_unpend_all+0x6>

00025f86 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   25f86:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25f8a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   25f8e:	e9c0 0000 	strd	r0, r0, [r0]
   25f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   25f96:	4770      	bx	lr

00025f98 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25f98:	7b43      	ldrb	r3, [r0, #13]
   25f9a:	06db      	lsls	r3, r3, #27
   25f9c:	bf03      	ittte	eq
   25f9e:	6980      	ldreq	r0, [r0, #24]
   25fa0:	fab0 f080 	clzeq	r0, r0
   25fa4:	0940      	lsreq	r0, r0, #5
   25fa6:	2000      	movne	r0, #0
}
   25fa8:	4770      	bx	lr

00025faa <z_impl_k_thread_name_set>:
}
   25faa:	f06f 0046 	mvn.w	r0, #70	; 0x46
   25fae:	4770      	bx	lr

00025fb0 <k_thread_name_get>:
}
   25fb0:	2000      	movs	r0, #0
   25fb2:	4770      	bx	lr

00025fb4 <z_new_thread_init>:
{
   25fb4:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   25fb6:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   25fba:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   25fbc:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   25fbe:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   25fc0:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   25fc2:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   25fc4:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   25fc6:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   25fc8:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   25fca:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   25fce:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   25fd2:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   25fd6:	bd10      	pop	{r4, pc}

00025fd8 <z_thread_single_suspend>:
{
   25fd8:	b510      	push	{r4, lr}
   25fda:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   25fdc:	f7ff ffdc 	bl	25f98 <z_is_thread_ready>
   25fe0:	b110      	cbz	r0, 25fe8 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   25fe2:	4620      	mov	r0, r4
   25fe4:	f7fc fc20 	bl	22828 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25fe8:	7b63      	ldrb	r3, [r4, #13]
   25fea:	f043 0310 	orr.w	r3, r3, #16
   25fee:	7363      	strb	r3, [r4, #13]
}
   25ff0:	bd10      	pop	{r4, pc}

00025ff2 <z_thread_single_resume>:
{
   25ff2:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25ff4:	7b43      	ldrb	r3, [r0, #13]
   25ff6:	4602      	mov	r2, r0
   25ff8:	f023 0310 	bic.w	r3, r3, #16
   25ffc:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   25ffe:	f7ff ffcb 	bl	25f98 <z_is_thread_ready>
   26002:	b120      	cbz	r0, 2600e <z_thread_single_resume+0x1c>
}
   26004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   26008:	4610      	mov	r0, r2
   2600a:	f7fc bb5b 	b.w	226c4 <z_add_thread_to_ready_q>
   2600e:	bd08      	pop	{r3, pc}

00026010 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   26010:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   26012:	b510      	push	{r4, lr}
   26014:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   26016:	b103      	cbz	r3, 2601a <z_thread_single_abort+0xa>
		thread->fn_abort();
   26018:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   2601a:	4620      	mov	r0, r4
   2601c:	f7ff ffbc 	bl	25f98 <z_is_thread_ready>
   26020:	b138      	cbz	r0, 26032 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   26022:	4620      	mov	r0, r4
   26024:	f7fc fc00 	bl	22828 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   26028:	7b63      	ldrb	r3, [r4, #13]
   2602a:	f043 0308 	orr.w	r3, r3, #8
   2602e:	7363      	strb	r3, [r4, #13]
}
   26030:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   26032:	7b63      	ldrb	r3, [r4, #13]
   26034:	079b      	lsls	r3, r3, #30
   26036:	d502      	bpl.n	2603e <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   26038:	4620      	mov	r0, r4
   2603a:	f7ff fed2 	bl	25de2 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   2603e:	69a3      	ldr	r3, [r4, #24]
   26040:	2b00      	cmp	r3, #0
   26042:	d0f1      	beq.n	26028 <z_thread_single_abort+0x18>
   26044:	f104 0018 	add.w	r0, r4, #24
   26048:	f000 f801 	bl	2604e <z_abort_timeout>
   2604c:	e7ec      	b.n	26028 <z_thread_single_abort+0x18>

0002604e <z_abort_timeout>:
{
   2604e:	b510      	push	{r4, lr}
	__asm__ volatile(
   26050:	f04f 0220 	mov.w	r2, #32
   26054:	f3ef 8411 	mrs	r4, BASEPRI
   26058:	f382 8811 	msr	BASEPRI, r2
   2605c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   26060:	6803      	ldr	r3, [r0, #0]
   26062:	b13b      	cbz	r3, 26074 <z_abort_timeout+0x26>
			remove_timeout(to);
   26064:	f7fc ff24 	bl	22eb0 <remove_timeout>
			ret = 0;
   26068:	2000      	movs	r0, #0
	__asm__ volatile(
   2606a:	f384 8811 	msr	BASEPRI, r4
   2606e:	f3bf 8f6f 	isb	sy
}
   26072:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   26074:	f06f 0015 	mvn.w	r0, #21
   26078:	e7f7      	b.n	2606a <z_abort_timeout+0x1c>

0002607a <z_get_next_timeout_expiry>:
{
   2607a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2607c:	f04f 0320 	mov.w	r3, #32
   26080:	f3ef 8411 	mrs	r4, BASEPRI
   26084:	f383 8811 	msr	BASEPRI, r3
   26088:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2608c:	f7fc ff26 	bl	22edc <next_timeout>
	__asm__ volatile(
   26090:	f384 8811 	msr	BASEPRI, r4
   26094:	f3bf 8f6f 	isb	sy
}
   26098:	bd10      	pop	{r4, pc}

0002609a <z_set_timeout_expiry>:
{
   2609a:	b570      	push	{r4, r5, r6, lr}
   2609c:	4604      	mov	r4, r0
   2609e:	460e      	mov	r6, r1
	__asm__ volatile(
   260a0:	f04f 0320 	mov.w	r3, #32
   260a4:	f3ef 8511 	mrs	r5, BASEPRI
   260a8:	f383 8811 	msr	BASEPRI, r3
   260ac:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   260b0:	f7fc ff14 	bl	22edc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   260b4:	2801      	cmp	r0, #1
   260b6:	dd05      	ble.n	260c4 <z_set_timeout_expiry+0x2a>
   260b8:	42a0      	cmp	r0, r4
   260ba:	dd03      	ble.n	260c4 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   260bc:	4631      	mov	r1, r6
   260be:	4620      	mov	r0, r4
   260c0:	f7e9 fea6 	bl	fe10 <z_clock_set_timeout>
	__asm__ volatile(
   260c4:	f385 8811 	msr	BASEPRI, r5
   260c8:	f3bf 8f6f 	isb	sy
}
   260cc:	bd70      	pop	{r4, r5, r6, pc}

000260ce <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   260ce:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   260d0:	f7fc ffba 	bl	23048 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   260d4:	bd08      	pop	{r3, pc}

000260d6 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   260d6:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   260d8:	f7fc ffb6 	bl	23048 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   260dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   260e0:	fba0 2304 	umull	r2, r3, r0, r4
   260e4:	fb04 3301 	mla	r3, r4, r1, r3
   260e8:	0bd0      	lsrs	r0, r2, #15
}
   260ea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   260ee:	0bd9      	lsrs	r1, r3, #15
   260f0:	bd10      	pop	{r4, pc}

000260f2 <k_timer_init>:
	timer->status = 0U;
   260f2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   260f4:	e9c0 1206 	strd	r1, r2, [r0, #24]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   260f8:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   260fc:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   260fe:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   26102:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   26106:	6283      	str	r3, [r0, #40]	; 0x28
}
   26108:	4770      	bx	lr

0002610a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2610a:	b510      	push	{r4, lr}
   2610c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2610e:	f7ff ff9e 	bl	2604e <z_abort_timeout>

	if (inactive) {
   26112:	bb00      	cbnz	r0, 26156 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   26114:	69e3      	ldr	r3, [r4, #28]
   26116:	b10b      	cbz	r3, 2611c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   26118:	4620      	mov	r0, r4
   2611a:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2611c:	f104 0010 	add.w	r0, r4, #16
   26120:	2100      	movs	r1, #0
   26122:	f7ff fe4e 	bl	25dc2 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   26126:	4604      	mov	r4, r0
   26128:	b1a8      	cbz	r0, 26156 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   2612a:	f7ff fe5a 	bl	25de2 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2612e:	7b63      	ldrb	r3, [r4, #13]
   26130:	06db      	lsls	r3, r3, #27
   26132:	d104      	bne.n	2613e <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   26134:	69a3      	ldr	r3, [r4, #24]
   26136:	b913      	cbnz	r3, 2613e <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   26138:	4620      	mov	r0, r4
   2613a:	f7fc fac3 	bl	226c4 <z_add_thread_to_ready_q>
	__asm__ volatile(
   2613e:	f04f 0320 	mov.w	r3, #32
   26142:	f3ef 8011 	mrs	r0, BASEPRI
   26146:	f383 8811 	msr	BASEPRI, r3
   2614a:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   2614e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   26152:	f7ff be6a 	b.w	25e2a <z_reschedule_irqlock>
   26156:	bd10      	pop	{r4, pc}

00026158 <clear_event_registrations>:
{
   26158:	2314      	movs	r3, #20
   2615a:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   2615c:	2400      	movs	r4, #0
   2615e:	2601      	movs	r6, #1
   26160:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   26164:	4281      	cmp	r1, r0
   26166:	d100      	bne.n	2616a <clear_event_registrations+0x12>
}
   26168:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   2616a:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2616e:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   26172:	f003 030f 	and.w	r3, r3, #15
   26176:	2b04      	cmp	r3, #4
   26178:	d80f      	bhi.n	2619a <clear_event_registrations+0x42>
   2617a:	fa06 f303 	lsl.w	r3, r6, r3
   2617e:	f013 0f16 	tst.w	r3, #22
   26182:	d00a      	beq.n	2619a <clear_event_registrations+0x42>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   26184:	f851 5c14 	ldr.w	r5, [r1, #-20]
   26188:	b13d      	cbz	r5, 2619a <clear_event_registrations+0x42>
	node->prev->next = node->next;
   2618a:	f851 3c10 	ldr.w	r3, [r1, #-16]
   2618e:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   26190:	f851 5c14 	ldr.w	r5, [r1, #-20]
   26194:	606b      	str	r3, [r5, #4]
	node->prev = NULL;
   26196:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   2619a:	f382 8811 	msr	BASEPRI, r2
   2619e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   261a2:	f04f 0320 	mov.w	r3, #32
   261a6:	f3ef 8211 	mrs	r2, BASEPRI
   261aa:	f383 8811 	msr	BASEPRI, r3
   261ae:	f3bf 8f6f 	isb	sy
   261b2:	3914      	subs	r1, #20
   261b4:	e7d6      	b.n	26164 <clear_event_registrations+0xc>

000261b6 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   261b6:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   261b8:	6884      	ldr	r4, [r0, #8]
{
   261ba:	4605      	mov	r5, r0
   261bc:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   261be:	b19c      	cbz	r4, 261e8 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   261c0:	68a3      	ldr	r3, [r4, #8]
   261c2:	b95b      	cbnz	r3, 261dc <signal_poll_event+0x26>
	int retcode = 0;
   261c4:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   261c6:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   261c8:	2300      	movs	r3, #0
   261ca:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   261cc:	68eb      	ldr	r3, [r5, #12]
   261ce:	f3c3 3204 	ubfx	r2, r3, #12, #5
   261d2:	4316      	orrs	r6, r2
   261d4:	f366 3310 	bfi	r3, r6, #12, #5
   261d8:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   261da:	e004      	b.n	261e6 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   261dc:	4798      	blx	r3
		poller->is_polling = false;
   261de:	2300      	movs	r3, #0
		if (retcode < 0) {
   261e0:	2800      	cmp	r0, #0
		poller->is_polling = false;
   261e2:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   261e4:	daf0      	bge.n	261c8 <signal_poll_event+0x12>
}
   261e6:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   261e8:	4620      	mov	r0, r4
   261ea:	e7ed      	b.n	261c8 <signal_poll_event+0x12>

000261ec <k_poll_poller_cb>:
{
   261ec:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   261ee:	6883      	ldr	r3, [r0, #8]
{
   261f0:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   261f2:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   261f4:	7b63      	ldrb	r3, [r4, #13]
   261f6:	079a      	lsls	r2, r3, #30
   261f8:	d401      	bmi.n	261fe <k_poll_poller_cb+0x12>
		return 0;
   261fa:	2000      	movs	r0, #0
}
   261fc:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   261fe:	6a23      	ldr	r3, [r4, #32]
   26200:	3302      	adds	r3, #2
   26202:	d012      	beq.n	2622a <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   26204:	4620      	mov	r0, r4
   26206:	f7ff fe26 	bl	25e56 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2620a:	2d08      	cmp	r5, #8
   2620c:	bf0c      	ite	eq
   2620e:	f06f 0303 	mvneq.w	r3, #3
   26212:	2300      	movne	r3, #0
   26214:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   26216:	7b63      	ldrb	r3, [r4, #13]
   26218:	06db      	lsls	r3, r3, #27
   2621a:	d1ee      	bne.n	261fa <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   2621c:	69a5      	ldr	r5, [r4, #24]
   2621e:	2d00      	cmp	r5, #0
   26220:	d1eb      	bne.n	261fa <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   26222:	4620      	mov	r0, r4
   26224:	f7fc fa4e 	bl	226c4 <z_add_thread_to_ready_q>
   26228:	e7e7      	b.n	261fa <k_poll_poller_cb+0xe>
		return -EAGAIN;
   2622a:	f06f 000a 	mvn.w	r0, #10
   2622e:	e7e5      	b.n	261fc <k_poll_poller_cb+0x10>

00026230 <add_event>:
{
   26230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26232:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26234:	e9d0 2300 	ldrd	r2, r3, [r0]
   26238:	4290      	cmp	r0, r2
   2623a:	4604      	mov	r4, r0
   2623c:	460d      	mov	r5, r1
   2623e:	d106      	bne.n	2624e <add_event+0x1e>
	node->prev = list->tail;
   26240:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   26242:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   26244:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   26246:	6863      	ldr	r3, [r4, #4]
   26248:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2624a:	6065      	str	r5, [r4, #4]
   2624c:	e019      	b.n	26282 <add_event+0x52>
	if ((pending == NULL) ||
   2624e:	2b00      	cmp	r3, #0
   26250:	d0f6      	beq.n	26240 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   26252:	689b      	ldr	r3, [r3, #8]
   26254:	6879      	ldr	r1, [r7, #4]
   26256:	6858      	ldr	r0, [r3, #4]
   26258:	f7ff fdaa 	bl	25db0 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2625c:	2800      	cmp	r0, #0
   2625e:	d1ef      	bne.n	26240 <add_event+0x10>
	return list->head == list;
   26260:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26262:	42b4      	cmp	r4, r6
   26264:	d0ec      	beq.n	26240 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   26266:	2e00      	cmp	r6, #0
   26268:	d0ea      	beq.n	26240 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2626a:	68b3      	ldr	r3, [r6, #8]
   2626c:	6878      	ldr	r0, [r7, #4]
   2626e:	6859      	ldr	r1, [r3, #4]
   26270:	f7ff fd9e 	bl	25db0 <z_is_t1_higher_prio_than_t2>
   26274:	b130      	cbz	r0, 26284 <add_event+0x54>
	node->prev = successor->prev;
   26276:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   26278:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2627c:	6873      	ldr	r3, [r6, #4]
   2627e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26280:	6075      	str	r5, [r6, #4]
}
   26282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   26284:	6863      	ldr	r3, [r4, #4]
   26286:	429e      	cmp	r6, r3
   26288:	d0da      	beq.n	26240 <add_event+0x10>
   2628a:	6836      	ldr	r6, [r6, #0]
   2628c:	e7eb      	b.n	26266 <add_event+0x36>

0002628e <register_events>:
{
   2628e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   26292:	f04f 0b00 	mov.w	fp, #0
{
   26296:	4688      	mov	r8, r1
   26298:	4615      	mov	r5, r2
   2629a:	4699      	mov	r9, r3
   2629c:	4604      	mov	r4, r0
	int events_registered = 0;
   2629e:	465e      	mov	r6, fp
	event->poller = NULL;
   262a0:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   262a2:	45c3      	cmp	fp, r8
   262a4:	db02      	blt.n	262ac <register_events+0x1e>
}
   262a6:	4630      	mov	r0, r6
   262a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262ac:	f04f 0320 	mov.w	r3, #32
   262b0:	f3ef 8a11 	mrs	sl, BASEPRI
   262b4:	f383 8811 	msr	BASEPRI, r3
   262b8:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   262bc:	7b63      	ldrb	r3, [r4, #13]
   262be:	f003 030f 	and.w	r3, r3, #15
   262c2:	2b02      	cmp	r3, #2
   262c4:	d005      	beq.n	262d2 <register_events+0x44>
   262c6:	2b04      	cmp	r3, #4
   262c8:	d006      	beq.n	262d8 <register_events+0x4a>
   262ca:	2b01      	cmp	r3, #1
   262cc:	d118      	bne.n	26300 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   262ce:	6922      	ldr	r2, [r4, #16]
   262d0:	e000      	b.n	262d4 <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   262d2:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   262d4:	6892      	ldr	r2, [r2, #8]
   262d6:	e001      	b.n	262dc <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   262d8:	6922      	ldr	r2, [r4, #16]
   262da:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   262dc:	b182      	cbz	r2, 26300 <register_events+0x72>
	event->state |= state;
   262de:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   262e0:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   262e2:	f3c2 3104 	ubfx	r1, r2, #12, #5
   262e6:	430b      	orrs	r3, r1
   262e8:	f363 3210 	bfi	r2, r3, #12, #5
   262ec:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   262ee:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   262f0:	f38a 8811 	msr	BASEPRI, sl
   262f4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   262f8:	f10b 0b01 	add.w	fp, fp, #1
   262fc:	3414      	adds	r4, #20
   262fe:	e7d0      	b.n	262a2 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   26300:	f1b9 0f00 	cmp.w	r9, #0
   26304:	d1f4      	bne.n	262f0 <register_events+0x62>
   26306:	782b      	ldrb	r3, [r5, #0]
   26308:	2b00      	cmp	r3, #0
   2630a:	d0f1      	beq.n	262f0 <register_events+0x62>
	switch (event->type) {
   2630c:	7b63      	ldrb	r3, [r4, #13]
   2630e:	f003 030f 	and.w	r3, r3, #15
   26312:	2b02      	cmp	r3, #2
   26314:	d007      	beq.n	26326 <register_events+0x98>
   26316:	2b04      	cmp	r3, #4
   26318:	d00e      	beq.n	26338 <register_events+0xaa>
   2631a:	2b01      	cmp	r3, #1
   2631c:	d109      	bne.n	26332 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   2631e:	462a      	mov	r2, r5
   26320:	4621      	mov	r1, r4
   26322:	6920      	ldr	r0, [r4, #16]
   26324:	e003      	b.n	2632e <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   26326:	462a      	mov	r2, r5
   26328:	4621      	mov	r1, r4
   2632a:	6920      	ldr	r0, [r4, #16]
   2632c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2632e:	f7ff ff7f 	bl	26230 <add_event>
	event->poller = poller;
   26332:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   26334:	3601      	adds	r6, #1
   26336:	e7db      	b.n	262f0 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   26338:	6920      	ldr	r0, [r4, #16]
   2633a:	462a      	mov	r2, r5
   2633c:	4621      	mov	r1, r4
   2633e:	3008      	adds	r0, #8
   26340:	e7f5      	b.n	2632e <register_events+0xa0>

00026342 <k_poll_event_init>:
{
   26342:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   26344:	2400      	movs	r4, #0
	event->type = type;
   26346:	7b45      	ldrb	r5, [r0, #13]
	event->poller = NULL;
   26348:	6084      	str	r4, [r0, #8]
	event->type = type;
   2634a:	f361 0503 	bfi	r5, r1, #0, #4
   2634e:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   26350:	68c1      	ldr	r1, [r0, #12]
	event->obj = obj;
   26352:	6103      	str	r3, [r0, #16]
	event->state = K_POLL_STATE_NOT_READY;
   26354:	f364 3110 	bfi	r1, r4, #12, #5
   26358:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2635a:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2635e:	f362 0141 	bfi	r1, r2, #1, #1
   26362:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   26364:	89c2      	ldrh	r2, [r0, #14]
   26366:	f364 028f 	bfi	r2, r4, #2, #14
   2636a:	81c2      	strh	r2, [r0, #14]
}
   2636c:	bd30      	pop	{r4, r5, pc}

0002636e <z_handle_obj_poll_events>:
	return list->head == list;
   2636e:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   26370:	4298      	cmp	r0, r3
   26372:	d00a      	beq.n	2638a <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   26374:	e9d3 0200 	ldrd	r0, r2, [r3]
   26378:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   2637a:	6818      	ldr	r0, [r3, #0]
   2637c:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   2637e:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   26380:	4618      	mov	r0, r3
	node->prev = NULL;
   26382:	e9c3 2200 	strd	r2, r2, [r3]
   26386:	f7ff bf16 	b.w	261b6 <signal_poll_event>
	}
}
   2638a:	4770      	bx	lr

0002638c <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   2638c:	4770      	bx	lr
