
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20028188 	.word	0x20028188
    c004:	0000f955 	.word	0x0000f955
    c008:	0001d033 	.word	0x0001d033
    c00c:	0000f775 	.word	0x0000f775
    c010:	0000f775 	.word	0x0000f775
    c014:	0000f775 	.word	0x0000f775
    c018:	0000f775 	.word	0x0000f775
    c01c:	0000f775 	.word	0x0000f775
    c020:	0000f775 	.word	0x0000f775
    c024:	0000f775 	.word	0x0000f775
    c028:	0000f775 	.word	0x0000f775
    c02c:	0000f635 	.word	0x0000f635
    c030:	0000f775 	.word	0x0000f775
    c034:	0000f775 	.word	0x0000f775
    c038:	0000f585 	.word	0x0000f585
    c03c:	0001d023 	.word	0x0001d023

0000c040 <_irq_vector_table>:
    c040:	0000f915 0000f915 0000f915 0000f915     ................
    c050:	0000f915 0000f915 0000f915 0000f915     ................
    c060:	0000f915 0000f915 0000f915 0000f915     ................
    c070:	0000f915 0000f915 0000f915 0000f915     ................
    c080:	0000f915 0000f915 0000f915 0000f915     ................
    c090:	0000f915 0000f915 0000f915 0000f915     ................
    c0a0:	0000f915 0000f915 0000f915 0000f915     ................
    c0b0:	000115e5 0001db1d 0000f915 0000f915     ................
    c0c0:	0000f915 0000f915 0000f915 0000f915     ................
    c0d0:	0000f915 0000f915 0000f915 0000f915     ................
    c0e0:	0000f915 0000f915 0001db3b 0000f915     ........;.......
    c0f0:	0000f915 0000f915 0000f915 0000f915     ................
    c100:	0000f915 0000f915 0000f915 0000f915     ................
    c110:	0000f915 0000f915 0000f915 0000f915     ................
    c120:	0000f915 0000f915 0000f915 0000f915     ................
    c130:	0000f915 0000f915 0000f915 0000f915     ................
    c140:	0000f915                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b01 00014f88     ...(L....[...O..
    c210:	00000001 0000c000 2002c4d8 0001259d     ........... .%..

Disassembly of section _TEXT_SECTION_NAME_2:

0000c220 <__aeabi_d2iz>:
    c220:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c224:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c228:	d215      	bcs.n	c256 <__aeabi_d2iz+0x36>
    c22a:	d511      	bpl.n	c250 <__aeabi_d2iz+0x30>
    c22c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c230:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c234:	d912      	bls.n	c25c <__aeabi_d2iz+0x3c>
    c236:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c23a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c23e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c242:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c246:	fa23 f002 	lsr.w	r0, r3, r2
    c24a:	bf18      	it	ne
    c24c:	4240      	negne	r0, r0
    c24e:	4770      	bx	lr
    c250:	f04f 0000 	mov.w	r0, #0
    c254:	4770      	bx	lr
    c256:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c25a:	d105      	bne.n	c268 <__aeabi_d2iz+0x48>
    c25c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c260:	bf08      	it	eq
    c262:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c266:	4770      	bx	lr
    c268:	f04f 0000 	mov.w	r0, #0
    c26c:	4770      	bx	lr
    c26e:	bf00      	nop

0000c270 <__aeabi_uldivmod>:
    c270:	b953      	cbnz	r3, c288 <__aeabi_uldivmod+0x18>
    c272:	b94a      	cbnz	r2, c288 <__aeabi_uldivmod+0x18>
    c274:	2900      	cmp	r1, #0
    c276:	bf08      	it	eq
    c278:	2800      	cmpeq	r0, #0
    c27a:	bf1c      	itt	ne
    c27c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c284:	f000 b970 	b.w	c568 <__aeabi_idiv0>
    c288:	f1ad 0c08 	sub.w	ip, sp, #8
    c28c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c290:	f000 f806 	bl	c2a0 <__udivmoddi4>
    c294:	f8dd e004 	ldr.w	lr, [sp, #4]
    c298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c29c:	b004      	add	sp, #16
    c29e:	4770      	bx	lr

0000c2a0 <__udivmoddi4>:
    c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c2a6:	4604      	mov	r4, r0
    c2a8:	4689      	mov	r9, r1
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	f040 8083 	bne.w	c3b6 <__udivmoddi4+0x116>
    c2b0:	428a      	cmp	r2, r1
    c2b2:	4615      	mov	r5, r2
    c2b4:	d945      	bls.n	c342 <__udivmoddi4+0xa2>
    c2b6:	fab2 f282 	clz	r2, r2
    c2ba:	b14a      	cbz	r2, c2d0 <__udivmoddi4+0x30>
    c2bc:	f1c2 0720 	rsb	r7, r2, #32
    c2c0:	fa01 f302 	lsl.w	r3, r1, r2
    c2c4:	4095      	lsls	r5, r2
    c2c6:	4094      	lsls	r4, r2
    c2c8:	fa20 f707 	lsr.w	r7, r0, r7
    c2cc:	ea47 0903 	orr.w	r9, r7, r3
    c2d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2d4:	0c23      	lsrs	r3, r4, #16
    c2d6:	fa1f f885 	uxth.w	r8, r5
    c2da:	fbb9 fcfe 	udiv	ip, r9, lr
    c2de:	fb0e 991c 	mls	r9, lr, ip, r9
    c2e2:	fb0c f108 	mul.w	r1, ip, r8
    c2e6:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2ea:	4299      	cmp	r1, r3
    c2ec:	d90a      	bls.n	c304 <__udivmoddi4+0x64>
    c2ee:	18eb      	adds	r3, r5, r3
    c2f0:	bf2c      	ite	cs
    c2f2:	2001      	movcs	r0, #1
    c2f4:	2000      	movcc	r0, #0
    c2f6:	4299      	cmp	r1, r3
    c2f8:	d902      	bls.n	c300 <__udivmoddi4+0x60>
    c2fa:	2800      	cmp	r0, #0
    c2fc:	f000 811d 	beq.w	c53a <__udivmoddi4+0x29a>
    c300:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c304:	1a59      	subs	r1, r3, r1
    c306:	b2a3      	uxth	r3, r4
    c308:	fbb1 f0fe 	udiv	r0, r1, lr
    c30c:	fb0e 1110 	mls	r1, lr, r0, r1
    c310:	fb00 f808 	mul.w	r8, r0, r8
    c314:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c318:	45a0      	cmp	r8, r4
    c31a:	d905      	bls.n	c328 <__udivmoddi4+0x88>
    c31c:	192c      	adds	r4, r5, r4
    c31e:	d202      	bcs.n	c326 <__udivmoddi4+0x86>
    c320:	45a0      	cmp	r8, r4
    c322:	f200 810e 	bhi.w	c542 <__udivmoddi4+0x2a2>
    c326:	3801      	subs	r0, #1
    c328:	eba4 0408 	sub.w	r4, r4, r8
    c32c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c330:	2700      	movs	r7, #0
    c332:	b11e      	cbz	r6, c33c <__udivmoddi4+0x9c>
    c334:	40d4      	lsrs	r4, r2
    c336:	2300      	movs	r3, #0
    c338:	e9c6 4300 	strd	r4, r3, [r6]
    c33c:	4639      	mov	r1, r7
    c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c342:	2a00      	cmp	r2, #0
    c344:	d051      	beq.n	c3ea <__udivmoddi4+0x14a>
    c346:	fab2 f282 	clz	r2, r2
    c34a:	2a00      	cmp	r2, #0
    c34c:	f040 80af 	bne.w	c4ae <__udivmoddi4+0x20e>
    c350:	1b49      	subs	r1, r1, r5
    c352:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c356:	fa1f f885 	uxth.w	r8, r5
    c35a:	2701      	movs	r7, #1
    c35c:	0c23      	lsrs	r3, r4, #16
    c35e:	fbb1 fcfe 	udiv	ip, r1, lr
    c362:	fb0e 111c 	mls	r1, lr, ip, r1
    c366:	fb08 f00c 	mul.w	r0, r8, ip
    c36a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c36e:	4298      	cmp	r0, r3
    c370:	d90a      	bls.n	c388 <__udivmoddi4+0xe8>
    c372:	18eb      	adds	r3, r5, r3
    c374:	bf2c      	ite	cs
    c376:	2101      	movcs	r1, #1
    c378:	2100      	movcc	r1, #0
    c37a:	4298      	cmp	r0, r3
    c37c:	d902      	bls.n	c384 <__udivmoddi4+0xe4>
    c37e:	2900      	cmp	r1, #0
    c380:	f000 80d7 	beq.w	c532 <__udivmoddi4+0x292>
    c384:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c388:	1a19      	subs	r1, r3, r0
    c38a:	b2a3      	uxth	r3, r4
    c38c:	fbb1 f0fe 	udiv	r0, r1, lr
    c390:	fb0e 1110 	mls	r1, lr, r0, r1
    c394:	fb08 f800 	mul.w	r8, r8, r0
    c398:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c39c:	45a0      	cmp	r8, r4
    c39e:	d905      	bls.n	c3ac <__udivmoddi4+0x10c>
    c3a0:	192c      	adds	r4, r5, r4
    c3a2:	d202      	bcs.n	c3aa <__udivmoddi4+0x10a>
    c3a4:	45a0      	cmp	r8, r4
    c3a6:	f200 80c1 	bhi.w	c52c <__udivmoddi4+0x28c>
    c3aa:	3801      	subs	r0, #1
    c3ac:	eba4 0408 	sub.w	r4, r4, r8
    c3b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c3b4:	e7bd      	b.n	c332 <__udivmoddi4+0x92>
    c3b6:	428b      	cmp	r3, r1
    c3b8:	d908      	bls.n	c3cc <__udivmoddi4+0x12c>
    c3ba:	2e00      	cmp	r6, #0
    c3bc:	d074      	beq.n	c4a8 <__udivmoddi4+0x208>
    c3be:	2700      	movs	r7, #0
    c3c0:	e9c6 0100 	strd	r0, r1, [r6]
    c3c4:	4638      	mov	r0, r7
    c3c6:	4639      	mov	r1, r7
    c3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3cc:	fab3 f783 	clz	r7, r3
    c3d0:	b967      	cbnz	r7, c3ec <__udivmoddi4+0x14c>
    c3d2:	428b      	cmp	r3, r1
    c3d4:	f0c0 80a4 	bcc.w	c520 <__udivmoddi4+0x280>
    c3d8:	4282      	cmp	r2, r0
    c3da:	f240 80a1 	bls.w	c520 <__udivmoddi4+0x280>
    c3de:	4638      	mov	r0, r7
    c3e0:	2e00      	cmp	r6, #0
    c3e2:	d0ab      	beq.n	c33c <__udivmoddi4+0x9c>
    c3e4:	e9c6 4900 	strd	r4, r9, [r6]
    c3e8:	e7a8      	b.n	c33c <__udivmoddi4+0x9c>
    c3ea:	deff      	udf	#255	; 0xff
    c3ec:	f1c7 0520 	rsb	r5, r7, #32
    c3f0:	40bb      	lsls	r3, r7
    c3f2:	fa02 fc07 	lsl.w	ip, r2, r7
    c3f6:	fa01 f407 	lsl.w	r4, r1, r7
    c3fa:	40ea      	lsrs	r2, r5
    c3fc:	fa20 f805 	lsr.w	r8, r0, r5
    c400:	40e9      	lsrs	r1, r5
    c402:	fa00 fe07 	lsl.w	lr, r0, r7
    c406:	431a      	orrs	r2, r3
    c408:	ea48 0404 	orr.w	r4, r8, r4
    c40c:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c410:	0c20      	lsrs	r0, r4, #16
    c412:	fa1f f982 	uxth.w	r9, r2
    c416:	fbb1 faf8 	udiv	sl, r1, r8
    c41a:	fb08 111a 	mls	r1, r8, sl, r1
    c41e:	fb0a fb09 	mul.w	fp, sl, r9
    c422:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c426:	458b      	cmp	fp, r1
    c428:	d90a      	bls.n	c440 <__udivmoddi4+0x1a0>
    c42a:	1851      	adds	r1, r2, r1
    c42c:	bf2c      	ite	cs
    c42e:	2301      	movcs	r3, #1
    c430:	2300      	movcc	r3, #0
    c432:	458b      	cmp	fp, r1
    c434:	d902      	bls.n	c43c <__udivmoddi4+0x19c>
    c436:	2b00      	cmp	r3, #0
    c438:	f000 8088 	beq.w	c54c <__udivmoddi4+0x2ac>
    c43c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c440:	eba1 010b 	sub.w	r1, r1, fp
    c444:	b2a4      	uxth	r4, r4
    c446:	fbb1 f0f8 	udiv	r0, r1, r8
    c44a:	fb08 1110 	mls	r1, r8, r0, r1
    c44e:	fb00 f909 	mul.w	r9, r0, r9
    c452:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c456:	4589      	cmp	r9, r1
    c458:	d904      	bls.n	c464 <__udivmoddi4+0x1c4>
    c45a:	1851      	adds	r1, r2, r1
    c45c:	d201      	bcs.n	c462 <__udivmoddi4+0x1c2>
    c45e:	4589      	cmp	r9, r1
    c460:	d87b      	bhi.n	c55a <__udivmoddi4+0x2ba>
    c462:	3801      	subs	r0, #1
    c464:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c468:	eba1 0109 	sub.w	r1, r1, r9
    c46c:	fba0 890c 	umull	r8, r9, r0, ip
    c470:	4549      	cmp	r1, r9
    c472:	4644      	mov	r4, r8
    c474:	464b      	mov	r3, r9
    c476:	d302      	bcc.n	c47e <__udivmoddi4+0x1de>
    c478:	d106      	bne.n	c488 <__udivmoddi4+0x1e8>
    c47a:	45c6      	cmp	lr, r8
    c47c:	d204      	bcs.n	c488 <__udivmoddi4+0x1e8>
    c47e:	3801      	subs	r0, #1
    c480:	ebb8 040c 	subs.w	r4, r8, ip
    c484:	eb69 0302 	sbc.w	r3, r9, r2
    c488:	2e00      	cmp	r6, #0
    c48a:	d05d      	beq.n	c548 <__udivmoddi4+0x2a8>
    c48c:	ebbe 0204 	subs.w	r2, lr, r4
    c490:	eb61 0103 	sbc.w	r1, r1, r3
    c494:	fa01 f505 	lsl.w	r5, r1, r5
    c498:	fa22 f307 	lsr.w	r3, r2, r7
    c49c:	40f9      	lsrs	r1, r7
    c49e:	2700      	movs	r7, #0
    c4a0:	431d      	orrs	r5, r3
    c4a2:	e9c6 5100 	strd	r5, r1, [r6]
    c4a6:	e749      	b.n	c33c <__udivmoddi4+0x9c>
    c4a8:	4637      	mov	r7, r6
    c4aa:	4630      	mov	r0, r6
    c4ac:	e746      	b.n	c33c <__udivmoddi4+0x9c>
    c4ae:	f1c2 0020 	rsb	r0, r2, #32
    c4b2:	4095      	lsls	r5, r2
    c4b4:	fa01 f702 	lsl.w	r7, r1, r2
    c4b8:	fa21 f300 	lsr.w	r3, r1, r0
    c4bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c4c0:	fa24 f100 	lsr.w	r1, r4, r0
    c4c4:	fa1f f885 	uxth.w	r8, r5
    c4c8:	4094      	lsls	r4, r2
    c4ca:	4339      	orrs	r1, r7
    c4cc:	fbb3 f0fe 	udiv	r0, r3, lr
    c4d0:	0c0f      	lsrs	r7, r1, #16
    c4d2:	fb0e 3310 	mls	r3, lr, r0, r3
    c4d6:	fb00 fc08 	mul.w	ip, r0, r8
    c4da:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4de:	459c      	cmp	ip, r3
    c4e0:	d907      	bls.n	c4f2 <__udivmoddi4+0x252>
    c4e2:	18eb      	adds	r3, r5, r3
    c4e4:	bf2c      	ite	cs
    c4e6:	2701      	movcs	r7, #1
    c4e8:	2700      	movcc	r7, #0
    c4ea:	459c      	cmp	ip, r3
    c4ec:	d900      	bls.n	c4f0 <__udivmoddi4+0x250>
    c4ee:	b38f      	cbz	r7, c554 <__udivmoddi4+0x2b4>
    c4f0:	3801      	subs	r0, #1
    c4f2:	eba3 030c 	sub.w	r3, r3, ip
    c4f6:	b289      	uxth	r1, r1
    c4f8:	fbb3 f7fe 	udiv	r7, r3, lr
    c4fc:	fb0e 3317 	mls	r3, lr, r7, r3
    c500:	fb07 fc08 	mul.w	ip, r7, r8
    c504:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c508:	458c      	cmp	ip, r1
    c50a:	d904      	bls.n	c516 <__udivmoddi4+0x276>
    c50c:	1869      	adds	r1, r5, r1
    c50e:	d201      	bcs.n	c514 <__udivmoddi4+0x274>
    c510:	458c      	cmp	ip, r1
    c512:	d825      	bhi.n	c560 <__udivmoddi4+0x2c0>
    c514:	3f01      	subs	r7, #1
    c516:	eba1 010c 	sub.w	r1, r1, ip
    c51a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c51e:	e71d      	b.n	c35c <__udivmoddi4+0xbc>
    c520:	1a84      	subs	r4, r0, r2
    c522:	eb61 0303 	sbc.w	r3, r1, r3
    c526:	2001      	movs	r0, #1
    c528:	4699      	mov	r9, r3
    c52a:	e759      	b.n	c3e0 <__udivmoddi4+0x140>
    c52c:	3802      	subs	r0, #2
    c52e:	442c      	add	r4, r5
    c530:	e73c      	b.n	c3ac <__udivmoddi4+0x10c>
    c532:	f1ac 0c02 	sub.w	ip, ip, #2
    c536:	442b      	add	r3, r5
    c538:	e726      	b.n	c388 <__udivmoddi4+0xe8>
    c53a:	f1ac 0c02 	sub.w	ip, ip, #2
    c53e:	442b      	add	r3, r5
    c540:	e6e0      	b.n	c304 <__udivmoddi4+0x64>
    c542:	3802      	subs	r0, #2
    c544:	442c      	add	r4, r5
    c546:	e6ef      	b.n	c328 <__udivmoddi4+0x88>
    c548:	4637      	mov	r7, r6
    c54a:	e6f7      	b.n	c33c <__udivmoddi4+0x9c>
    c54c:	f1aa 0a02 	sub.w	sl, sl, #2
    c550:	4411      	add	r1, r2
    c552:	e775      	b.n	c440 <__udivmoddi4+0x1a0>
    c554:	3802      	subs	r0, #2
    c556:	442b      	add	r3, r5
    c558:	e7cb      	b.n	c4f2 <__udivmoddi4+0x252>
    c55a:	3802      	subs	r0, #2
    c55c:	4411      	add	r1, r2
    c55e:	e781      	b.n	c464 <__udivmoddi4+0x1c4>
    c560:	3f02      	subs	r7, #2
    c562:	4429      	add	r1, r5
    c564:	e7d7      	b.n	c516 <__udivmoddi4+0x276>
    c566:	bf00      	nop

0000c568 <__aeabi_idiv0>:
    c568:	4770      	bx	lr
    c56a:	bf00      	nop

0000c56c <bsd_recoverable_error_handler>:
struct at_param_list m_param_list;

/**@brief Recoverable BSD library error. */
void bsd_recoverable_error_handler(uint32_t err)
{
	LOG_ERR("bsdlib recoverable error: %u", err);
    c56c:	2301      	movs	r3, #1
    c56e:	f04f 0200 	mov.w	r2, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    c572:	4906      	ldr	r1, [pc, #24]	; (c58c <bsd_recoverable_error_handler+0x20>)
    c574:	f363 0207 	bfi	r2, r3, #0, #8
    c578:	4b05      	ldr	r3, [pc, #20]	; (c590 <bsd_recoverable_error_handler+0x24>)
    c57a:	1a5b      	subs	r3, r3, r1
    c57c:	08db      	lsrs	r3, r3, #3
    c57e:	4601      	mov	r1, r0
    c580:	f363 128f 	bfi	r2, r3, #6, #10
    c584:	4803      	ldr	r0, [pc, #12]	; (c594 <bsd_recoverable_error_handler+0x28>)
    c586:	f010 b9cb 	b.w	1c920 <log_1>
    c58a:	bf00      	nop
    c58c:	0001f10c 	.word	0x0001f10c
    c590:	0001f10c 	.word	0x0001f10c
    c594:	0001f6d8 	.word	0x0001f6d8

0000c598 <start_execute>:

void start_execute(void)
{
	int err;

	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c598:	2303      	movs	r3, #3
    c59a:	f04f 0100 	mov.w	r1, #0
{
    c59e:	b510      	push	{r4, lr}
	LOG_INF("NB-IoT DATA COLLECTION PROGRAM");
    c5a0:	f363 0107 	bfi	r1, r3, #0, #8
    c5a4:	4c14      	ldr	r4, [pc, #80]	; (c5f8 <start_execute+0x60>)
    c5a6:	4b15      	ldr	r3, [pc, #84]	; (c5fc <start_execute+0x64>)
    c5a8:	4815      	ldr	r0, [pc, #84]	; (c600 <start_execute+0x68>)
    c5aa:	1ae4      	subs	r4, r4, r3
    c5ac:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c5b0:	f364 118f 	bfi	r1, r4, #6, #10
    c5b4:	f010 f9a7 	bl	1c906 <log_0>
	err = slm_at_host_init();
    c5b8:	f000 f902 	bl	c7c0 <slm_at_host_init>
	if (err != 0) {
    c5bc:	4601      	mov	r1, r0
    c5be:	b158      	cbz	r0, c5d8 <start_execute+0x40>
		LOG_ERR("Failed to init at_host: %d", err);
    c5c0:	f04f 0200 	mov.w	r2, #0
    c5c4:	2301      	movs	r3, #1
    c5c6:	480f      	ldr	r0, [pc, #60]	; (c604 <start_execute+0x6c>)
    c5c8:	f363 0207 	bfi	r2, r3, #0, #8
    c5cc:	f364 128f 	bfi	r2, r4, #6, #10
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
	if (err) {
		LOG_ERR("Failed to init AT Parser: %d", err);
		return;
	}
}
    c5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to init AT Parser: %d", err);
    c5d4:	f010 b9a4 	b.w	1c920 <log_1>
	err = at_params_list_init(&m_param_list, CONFIG_SLM_AT_MAX_PARAM);
    c5d8:	2108      	movs	r1, #8
    c5da:	480b      	ldr	r0, [pc, #44]	; (c608 <start_execute+0x70>)
    c5dc:	f011 ff3f 	bl	1e45e <at_params_list_init>
	if (err) {
    c5e0:	4601      	mov	r1, r0
    c5e2:	b140      	cbz	r0, c5f6 <start_execute+0x5e>
		LOG_ERR("Failed to init AT Parser: %d", err);
    c5e4:	f04f 0200 	mov.w	r2, #0
    c5e8:	2301      	movs	r3, #1
    c5ea:	f363 0207 	bfi	r2, r3, #0, #8
    c5ee:	f364 128f 	bfi	r2, r4, #6, #10
    c5f2:	4806      	ldr	r0, [pc, #24]	; (c60c <start_execute+0x74>)
    c5f4:	e7ec      	b.n	c5d0 <start_execute+0x38>
}
    c5f6:	bd10      	pop	{r4, pc}
    c5f8:	0001f10c 	.word	0x0001f10c
    c5fc:	0001f10c 	.word	0x0001f10c
    c600:	0001f6f5 	.word	0x0001f6f5
    c604:	0001f714 	.word	0x0001f714
    c608:	200200e8 	.word	0x200200e8
    c60c:	0001f72f 	.word	0x0001f72f

0000c610 <write_uart_string>:

/* forward declaration */
void slm_at_host_uninit(void);

static inline void write_uart_string(char *str, size_t len)
{
    c610:	b570      	push	{r4, r5, r6, lr}
    c612:	4604      	mov	r4, r0
	LOG_HEXDUMP_DBG(str, len, "TX");

	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
    c614:	4e05      	ldr	r6, [pc, #20]	; (c62c <write_uart_string+0x1c>)
    c616:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
    c618:	42ac      	cmp	r4, r5
    c61a:	d100      	bne.n	c61e <write_uart_string+0xe>
	}
}
    c61c:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
    c61e:	6830      	ldr	r0, [r6, #0]
    c620:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    c624:	6843      	ldr	r3, [r0, #4]
    c626:	685b      	ldr	r3, [r3, #4]
    c628:	4798      	blx	r3
    c62a:	e7f5      	b.n	c618 <write_uart_string+0x8>
    c62c:	20020104 	.word	0x20020104

0000c630 <isr>:
	at_buf_len = cmd_len;
	cmd_len = 0;
}

static void isr(struct device *dev)
{
    c630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c634:	4607      	mov	r7, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    c636:	6843      	ldr	r3, [r0, #4]
    c638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c63a:	b103      	cbz	r3, c63e <isr+0xe>
		return api->irq_update(dev);
    c63c:	4798      	blx	r3
	if (api->irq_rx_ready) {
    c63e:	687b      	ldr	r3, [r7, #4]
    c640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c642:	b19b      	cbz	r3, c66c <isr+0x3c>
		return api->irq_rx_ready(dev);
    c644:	4638      	mov	r0, r7
    c646:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
    c648:	b180      	cbz	r0, c66c <isr+0x3c>
    c64a:	4d4f      	ldr	r5, [pc, #316]	; (c788 <isr+0x158>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c64c:	4b4f      	ldr	r3, [pc, #316]	; (c78c <isr+0x15c>)
	cmd_len += 1;
    c64e:	4e50      	ldr	r6, [pc, #320]	; (c790 <isr+0x160>)
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c650:	1aed      	subs	r5, r5, r3
	if (inside_quotes) {
    c652:	f8df b168 	ldr.w	fp, [pc, #360]	; c7bc <isr+0x18c>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c656:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (api->fifo_read) {
    c65a:	687b      	ldr	r3, [r7, #4]
    c65c:	699b      	ldr	r3, [r3, #24]
    c65e:	b12b      	cbz	r3, c66c <isr+0x3c>
		return api->fifo_read(dev, rx_data, size);
    c660:	2201      	movs	r2, #1
    c662:	f10d 0107 	add.w	r1, sp, #7
    c666:	4638      	mov	r0, r7
    c668:	4798      	blx	r3
		return;
	}

	while (uart_fifo_read(dev, &character, 1)) {
    c66a:	b910      	cbnz	r0, c672 <isr+0x42>
		uart_rx_handler(character);
	}
}
    c66c:	b003      	add	sp, #12
    c66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd_len += 1;
    c672:	6832      	ldr	r2, [r6, #0]
		uart_rx_handler(character);
    c674:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
    c678:	1c54      	adds	r4, r2, #1
	switch (character) {
    c67a:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
    c67c:	6034      	str	r4, [r6, #0]
	switch (character) {
    c67e:	d019      	beq.n	c6b4 <isr+0x84>
    c680:	297f      	cmp	r1, #127	; 0x7f
    c682:	d001      	beq.n	c688 <isr+0x58>
    c684:	2908      	cmp	r1, #8
    c686:	d11b      	bne.n	c6c0 <isr+0x90>
		pos = pos ? pos - 1 : 0;
    c688:	b102      	cbz	r2, c68c <isr+0x5c>
    c68a:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c68c:	2c02      	cmp	r4, #2
    c68e:	bf38      	it	cc
    c690:	2402      	movcc	r4, #2
		at_buf[pos] = 0;
    c692:	2000      	movs	r0, #0
    c694:	4b3f      	ldr	r3, [pc, #252]	; (c794 <isr+0x164>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c696:	3c02      	subs	r4, #2
		at_buf[pos] = 0;
    c698:	5498      	strb	r0, [r3, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
    c69a:	6034      	str	r4, [r6, #0]
	if (inside_quotes) {
    c69c:	f89b 3000 	ldrb.w	r3, [fp]
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	d1da      	bne.n	c65a <isr+0x2a>
	switch (term_mode) {
    c6a4:	4b3c      	ldr	r3, [pc, #240]	; (c798 <isr+0x168>)
    c6a6:	781b      	ldrb	r3, [r3, #0]
    c6a8:	2b03      	cmp	r3, #3
    c6aa:	d85e      	bhi.n	c76a <isr+0x13a>
    c6ac:	e8df f003 	tbb	[pc, r3]
    c6b0:	554d2f2f 	.word	0x554d2f2f
		inside_quotes = !inside_quotes;
    c6b4:	f89b 3000 	ldrb.w	r3, [fp]
    c6b8:	f083 0301 	eor.w	r3, r3, #1
    c6bc:	f88b 3000 	strb.w	r3, [fp]
		if (cmd_len > AT_MAX_CMD_LEN) {
    c6c0:	f640 238c 	movw	r3, #2700	; 0xa8c
    c6c4:	429c      	cmp	r4, r3
    c6c6:	d90f      	bls.n	c6e8 <isr+0xb8>
			LOG_ERR("Buffer overflow, dropping '%c'\n", character);
    c6c8:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    c6cc:	f042 0201 	orr.w	r2, r2, #1
    c6d0:	f362 0807 	bfi	r8, r2, #0, #8
    c6d4:	f365 188f 	bfi	r8, r5, #6, #10
    c6d8:	4642      	mov	r2, r8
    c6da:	4830      	ldr	r0, [pc, #192]	; (c79c <isr+0x16c>)
    c6dc:	f010 f920 	bl	1c920 <log_1>
			cmd_len = AT_MAX_CMD_LEN;
    c6e0:	f640 238c 	movw	r3, #2700	; 0xa8c
	cmd_len = 0;
    c6e4:	6033      	str	r3, [r6, #0]
    c6e6:	e7b8      	b.n	c65a <isr+0x2a>
		} else if (cmd_len < 1) {
    c6e8:	b974      	cbnz	r4, c708 <isr+0xd8>
			LOG_ERR("Invalid AT command length: %d", cmd_len);
    c6ea:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    c6ee:	f043 0301 	orr.w	r3, r3, #1
    c6f2:	f363 0907 	bfi	r9, r3, #0, #8
    c6f6:	f365 198f 	bfi	r9, r5, #6, #10
    c6fa:	464a      	mov	r2, r9
    c6fc:	4621      	mov	r1, r4
    c6fe:	4828      	ldr	r0, [pc, #160]	; (c7a0 <isr+0x170>)
    c700:	f010 f90e 	bl	1c920 <log_1>
			cmd_len = 0;
    c704:	6034      	str	r4, [r6, #0]
			return;
    c706:	e7a8      	b.n	c65a <isr+0x2a>
		at_buf[pos] = character;
    c708:	4b22      	ldr	r3, [pc, #136]	; (c794 <isr+0x164>)
    c70a:	5499      	strb	r1, [r3, r2]
		break;
    c70c:	e7c6      	b.n	c69c <isr+0x6c>
		if (character == termination[term_mode]) {
    c70e:	4a25      	ldr	r2, [pc, #148]	; (c7a4 <isr+0x174>)
    c710:	5cd3      	ldrb	r3, [r2, r3]
    c712:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1]) &&
    c714:	d1a1      	bne.n	c65a <isr+0x2a>
	uart_irq_rx_disable(uart_dev);
    c716:	4b24      	ldr	r3, [pc, #144]	; (c7a8 <isr+0x178>)
    c718:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
    c71a:	6843      	ldr	r3, [r0, #4]
    c71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c71e:	b103      	cbz	r3, c722 <isr+0xf2>
		api->irq_rx_disable(dev);
    c720:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c722:	4922      	ldr	r1, [pc, #136]	; (c7ac <isr+0x17c>)
    c724:	e8d1 3fef 	ldaex	r3, [r1]
    c728:	f043 0201 	orr.w	r2, r3, #1
    c72c:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c730:	2800      	cmp	r0, #0
    c732:	d1f7      	bne.n	c724 <isr+0xf4>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    c734:	07db      	lsls	r3, r3, #31
    c736:	d403      	bmi.n	c740 <isr+0x110>
		k_queue_append(&work_q->queue, work);
    c738:	3908      	subs	r1, #8
    c73a:	481d      	ldr	r0, [pc, #116]	; (c7b0 <isr+0x180>)
    c73c:	f012 f827 	bl	1e78e <k_queue_append>
	at_buf_len = cmd_len;
    c740:	4b1c      	ldr	r3, [pc, #112]	; (c7b4 <isr+0x184>)
    c742:	6832      	ldr	r2, [r6, #0]
    c744:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
    c746:	2300      	movs	r3, #0
    c748:	e7cc      	b.n	c6e4 <isr+0xb4>
		if ((at_buf[pos - 1]) &&
    c74a:	4b12      	ldr	r3, [pc, #72]	; (c794 <isr+0x164>)
    c74c:	441a      	add	r2, r3
    c74e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c752:	2b00      	cmp	r3, #0
    c754:	d081      	beq.n	c65a <isr+0x2a>
    c756:	290a      	cmp	r1, #10
    c758:	e7dc      	b.n	c714 <isr+0xe4>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
    c75a:	4b0e      	ldr	r3, [pc, #56]	; (c794 <isr+0x164>)
    c75c:	441a      	add	r2, r3
    c75e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c762:	2b0d      	cmp	r3, #13
    c764:	f47f af79 	bne.w	c65a <isr+0x2a>
    c768:	e7f5      	b.n	c756 <isr+0x126>
		LOG_ERR("Invalid termination mode: %d", term_mode);
    c76a:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    c76e:	f042 0201 	orr.w	r2, r2, #1
    c772:	f362 0a07 	bfi	sl, r2, #0, #8
    c776:	f365 1a8f 	bfi	sl, r5, #6, #10
    c77a:	4652      	mov	r2, sl
    c77c:	4619      	mov	r1, r3
    c77e:	480e      	ldr	r0, [pc, #56]	; (c7b8 <isr+0x188>)
    c780:	f010 f8ce 	bl	1c920 <log_1>
    c784:	e769      	b.n	c65a <isr+0x2a>
    c786:	bf00      	nop
    c788:	0001f11c 	.word	0x0001f11c
    c78c:	0001f10c 	.word	0x0001f10c
    c790:	200200f4 	.word	0x200200f4
    c794:	20024e26 	.word	0x20024e26
    c798:	2002633f 	.word	0x2002633f
    c79c:	0001f7f0 	.word	0x0001f7f0
    c7a0:	0001f810 	.word	0x0001f810
    c7a4:	0001f991 	.word	0x0001f991
    c7a8:	20020104 	.word	0x20020104
    c7ac:	20020100 	.word	0x20020100
    c7b0:	20024d40 	.word	0x20024d40
    c7b4:	200200f0 	.word	0x200200f0
    c7b8:	0001f82e 	.word	0x0001f82e
    c7bc:	2002633e 	.word	0x2002633e

0000c7c0 <slm_at_host_init>:
{
	write_uart_string(str, strlen(str));
}

int slm_at_host_init(void)
{
    c7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum select_uart uart_id = CONFIG_SLM_CONNECT_UART;
	enum term_modes mode = CONFIG_SLM_AT_HOST_TERMINATION;

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
    c7c2:	2203      	movs	r2, #3
    c7c4:	4b49      	ldr	r3, [pc, #292]	; (c8ec <slm_at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
    c7c6:	494a      	ldr	r1, [pc, #296]	; (c8f0 <slm_at_host_init+0x130>)
    c7c8:	2000      	movs	r0, #0
		term_mode = mode;
    c7ca:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
    c7cc:	f005 fc56 	bl	1207c <at_notif_register_handler>
	if (err != 0) {
    c7d0:	4c48      	ldr	r4, [pc, #288]	; (c8f4 <slm_at_host_init+0x134>)
    c7d2:	4b49      	ldr	r3, [pc, #292]	; (c8f8 <slm_at_host_init+0x138>)
    c7d4:	4605      	mov	r5, r0
    c7d6:	1ae4      	subs	r4, r4, r3
    c7d8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c7dc:	b168      	cbz	r0, c7fa <slm_at_host_init+0x3a>
		LOG_ERR("Can't register handler err=%d", err);
    c7de:	f04f 0200 	mov.w	r2, #0
    c7e2:	2301      	movs	r3, #1
    c7e4:	f363 0207 	bfi	r2, r3, #0, #8
    c7e8:	4601      	mov	r1, r0
    c7ea:	f364 128f 	bfi	r2, r4, #6, #10
    c7ee:	4843      	ldr	r0, [pc, #268]	; (c8fc <slm_at_host_init+0x13c>)
    c7f0:	f010 f896 	bl	1c920 <log_1>
		return -EFAULT;
	}
#endif
	LOG_DBG("at_host init done");
	return err;
}
    c7f4:	4628      	mov	r0, r5
    c7f6:	b003      	add	sp, #12
    c7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c7fa:	4841      	ldr	r0, [pc, #260]	; (c900 <slm_at_host_init+0x140>)
    c7fc:	f00e fa6c 	bl	1acd8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
    c800:	4d40      	ldr	r5, [pc, #256]	; (c904 <slm_at_host_init+0x144>)
    c802:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
    c804:	b1e8      	cbz	r0, c842 <slm_at_host_init+0x82>
			LOG_ERR("UART check failed: %d. "
    c806:	4f40      	ldr	r7, [pc, #256]	; (c908 <slm_at_host_init+0x148>)
		err = uart_err_check(uart_dev);
    c808:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
    c80a:	6843      	ldr	r3, [r0, #4]
    c80c:	689b      	ldr	r3, [r3, #8]
    c80e:	2b00      	cmp	r3, #0
    c810:	d048      	beq.n	c8a4 <slm_at_host_init+0xe4>
		return api->err_check(dev);
    c812:	4798      	blx	r3
		if (err) {
    c814:	4601      	mov	r1, r0
    c816:	2800      	cmp	r0, #0
    c818:	d044      	beq.n	c8a4 <slm_at_host_init+0xe4>
			LOG_ERR("UART check failed: %d. "
    c81a:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    c81e:	f043 0301 	orr.w	r3, r3, #1
    c822:	f363 0607 	bfi	r6, r3, #0, #8
    c826:	f364 168f 	bfi	r6, r4, #6, #10
    c82a:	4632      	mov	r2, r6
    c82c:	4638      	mov	r0, r7
    c82e:	f010 f877 	bl	1c920 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    c832:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
    c834:	6843      	ldr	r3, [r0, #4]
    c836:	699b      	ldr	r3, [r3, #24]
    c838:	b9eb      	cbnz	r3, c876 <slm_at_host_init+0xb6>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
    c83a:	200a      	movs	r0, #10
    c83c:	f00f f8f0 	bl	1ba20 <z_impl_k_sleep>
    c840:	e7e2      	b.n	c808 <slm_at_host_init+0x48>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
    c842:	2301      	movs	r3, #1
    c844:	f04f 0200 	mov.w	r2, #0
    c848:	f363 0207 	bfi	r2, r3, #0, #8
    c84c:	f364 128f 	bfi	r2, r4, #6, #10
    c850:	492b      	ldr	r1, [pc, #172]	; (c900 <slm_at_host_init+0x140>)
    c852:	482e      	ldr	r0, [pc, #184]	; (c90c <slm_at_host_init+0x14c>)
    c854:	f010 f864 	bl	1c920 <log_1>
		LOG_ERR("UART can not be initialized: %d", err);
    c858:	f04f 0200 	mov.w	r2, #0
    c85c:	2301      	movs	r3, #1
    c85e:	f06f 0115 	mvn.w	r1, #21
    c862:	f363 0207 	bfi	r2, r3, #0, #8
    c866:	482a      	ldr	r0, [pc, #168]	; (c910 <slm_at_host_init+0x150>)
    c868:	f364 128f 	bfi	r2, r4, #6, #10
		LOG_ERR("GPS could not be initialized: %d", err);
    c86c:	f010 f858 	bl	1c920 <log_1>
		return -EFAULT;
    c870:	f06f 050d 	mvn.w	r5, #13
    c874:	e7be      	b.n	c7f4 <slm_at_host_init+0x34>
		return api->fifo_read(dev, rx_data, size);
    c876:	2201      	movs	r2, #1
    c878:	f10d 0107 	add.w	r1, sp, #7
    c87c:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
    c87e:	2800      	cmp	r0, #0
    c880:	d1d7      	bne.n	c832 <slm_at_host_init+0x72>
    c882:	e7da      	b.n	c83a <slm_at_host_init+0x7a>
	err = slm_at_gps_init(slm_at_callback);
    c884:	4823      	ldr	r0, [pc, #140]	; (c914 <slm_at_host_init+0x154>)
    c886:	f001 ff47 	bl	e718 <slm_at_gps_init>
	if (err) {
    c88a:	4605      	mov	r5, r0
    c88c:	2800      	cmp	r0, #0
    c88e:	d0b1      	beq.n	c7f4 <slm_at_host_init+0x34>
		LOG_ERR("GPS could not be initialized: %d", err);
    c890:	f04f 0200 	mov.w	r2, #0
    c894:	2301      	movs	r3, #1
    c896:	f363 0207 	bfi	r2, r3, #0, #8
    c89a:	4601      	mov	r1, r0
    c89c:	f364 128f 	bfi	r2, r4, #6, #10
    c8a0:	481d      	ldr	r0, [pc, #116]	; (c918 <slm_at_host_init+0x158>)
    c8a2:	e7e3      	b.n	c86c <slm_at_host_init+0xac>
	uart_irq_callback_set(uart_dev, isr);
    c8a4:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    c8a6:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    c8a8:	b123      	cbz	r3, c8b4 <slm_at_host_init+0xf4>
    c8aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c8ac:	b113      	cbz	r3, c8b4 <slm_at_host_init+0xf4>
		api->irq_callback_set(dev, cb, user_data);
    c8ae:	491b      	ldr	r1, [pc, #108]	; (c91c <slm_at_host_init+0x15c>)
    c8b0:	4610      	mov	r0, r2
    c8b2:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    c8b4:	2200      	movs	r2, #0
    c8b6:	4b1a      	ldr	r3, [pc, #104]	; (c920 <slm_at_host_init+0x160>)
    c8b8:	491a      	ldr	r1, [pc, #104]	; (c924 <slm_at_host_init+0x164>)
	uart_irq_rx_enable(uart_dev);
    c8ba:	6828      	ldr	r0, [r5, #0]
    c8bc:	e9c3 1201 	strd	r1, r2, [r3, #4]
    c8c0:	601a      	str	r2, [r3, #0]
    c8c2:	f00f fc69 	bl	1c198 <uart_irq_rx_enable>
	write_uart_string(SLM_SYNC_STR, sizeof(SLM_SYNC_STR)-1);
    c8c6:	2107      	movs	r1, #7
    c8c8:	4817      	ldr	r0, [pc, #92]	; (c928 <slm_at_host_init+0x168>)
    c8ca:	f7ff fea1 	bl	c610 <write_uart_string>
	err = slm_at_tcpip_init(slm_at_callback);
    c8ce:	4811      	ldr	r0, [pc, #68]	; (c914 <slm_at_host_init+0x154>)
    c8d0:	f001 fa0a 	bl	dce8 <slm_at_tcpip_init>
	if (err) {
    c8d4:	4601      	mov	r1, r0
    c8d6:	2800      	cmp	r0, #0
    c8d8:	d0d4      	beq.n	c884 <slm_at_host_init+0xc4>
		LOG_ERR("TCPIP could not be initialized: %d", err);
    c8da:	f04f 0200 	mov.w	r2, #0
    c8de:	2301      	movs	r3, #1
    c8e0:	f363 0207 	bfi	r2, r3, #0, #8
    c8e4:	f364 128f 	bfi	r2, r4, #6, #10
    c8e8:	4810      	ldr	r0, [pc, #64]	; (c92c <slm_at_host_init+0x16c>)
    c8ea:	e7bf      	b.n	c86c <slm_at_host_init+0xac>
    c8ec:	2002633f 	.word	0x2002633f
    c8f0:	0001c1b7 	.word	0x0001c1b7
    c8f4:	0001f11c 	.word	0x0001f11c
    c8f8:	0001f10c 	.word	0x0001f10c
    c8fc:	0001f84b 	.word	0x0001f84b
    c900:	0001f869 	.word	0x0001f869
    c904:	20020104 	.word	0x20020104
    c908:	0001f8a0 	.word	0x0001f8a0
    c90c:	0001f870 	.word	0x0001f870
    c910:	0001f880 	.word	0x0001f880
    c914:	0001c1a3 	.word	0x0001c1a3
    c918:	0001f900 	.word	0x0001f900
    c91c:	0000c631 	.word	0x0000c631
    c920:	200200f8 	.word	0x200200f8
    c924:	0000c9c1 	.word	0x0000c9c1
    c928:	0001f8d5 	.word	0x0001f8d5
    c92c:	0001f8dd 	.word	0x0001f8dd

0000c930 <slm_at_host_uninit>:

void slm_at_host_uninit(void)
{
    c930:	b508      	push	{r3, lr}
	int err;

#if defined(CONFIG_SLM_TCPIP_AT_MODE)
	/* Uninitialize the TCPIP module */
	err = slm_at_tcpip_uninit();
    c932:	f00f fc52 	bl	1c1da <slm_at_tcpip_uninit>
	if (err) {
    c936:	4601      	mov	r1, r0
    c938:	b168      	cbz	r0, c956 <slm_at_host_uninit+0x26>
		LOG_WRN("TCPIP could not be uninitialized: %d", err);
    c93a:	2302      	movs	r3, #2
    c93c:	f04f 0200 	mov.w	r2, #0
    c940:	4819      	ldr	r0, [pc, #100]	; (c9a8 <slm_at_host_uninit+0x78>)
    c942:	f363 0207 	bfi	r2, r3, #0, #8
    c946:	4b19      	ldr	r3, [pc, #100]	; (c9ac <slm_at_host_uninit+0x7c>)
    c948:	1a1b      	subs	r3, r3, r0
    c94a:	08db      	lsrs	r3, r3, #3
    c94c:	f363 128f 	bfi	r2, r3, #6, #10
    c950:	4817      	ldr	r0, [pc, #92]	; (c9b0 <slm_at_host_uninit+0x80>)
    c952:	f00f ffe5 	bl	1c920 <log_1>
	}
#endif
#if defined(CONFIG_SLM_GPS_AT_MODE)
	/* Uninitialize the GPS module */
	err = slm_at_gps_uninit();
    c956:	f001 ff79 	bl	e84c <slm_at_gps_uninit>
	if (err) {
    c95a:	4601      	mov	r1, r0
    c95c:	b168      	cbz	r0, c97a <slm_at_host_uninit+0x4a>
		LOG_WRN("GPS could not be uninitialized: %d", err);
    c95e:	2302      	movs	r3, #2
    c960:	f04f 0200 	mov.w	r2, #0
    c964:	4810      	ldr	r0, [pc, #64]	; (c9a8 <slm_at_host_uninit+0x78>)
    c966:	f363 0207 	bfi	r2, r3, #0, #8
    c96a:	4b10      	ldr	r3, [pc, #64]	; (c9ac <slm_at_host_uninit+0x7c>)
    c96c:	1a1b      	subs	r3, r3, r0
    c96e:	08db      	lsrs	r3, r3, #3
    c970:	f363 128f 	bfi	r2, r3, #6, #10
    c974:	480f      	ldr	r0, [pc, #60]	; (c9b4 <slm_at_host_uninit+0x84>)
    c976:	f00f ffd3 	bl	1c920 <log_1>
	}
#endif
	err = at_notif_deregister_handler(NULL, response_handler);
    c97a:	490f      	ldr	r1, [pc, #60]	; (c9b8 <slm_at_host_uninit+0x88>)
    c97c:	2000      	movs	r0, #0
    c97e:	f005 fbcd 	bl	1211c <at_notif_deregister_handler>
	if (err != 0) {
    c982:	4601      	mov	r1, r0
    c984:	b178      	cbz	r0, c9a6 <slm_at_host_uninit+0x76>
		LOG_WRN("Can't deregister handler err=%d", err);
    c986:	2302      	movs	r3, #2
    c988:	f04f 0200 	mov.w	r2, #0
    c98c:	4806      	ldr	r0, [pc, #24]	; (c9a8 <slm_at_host_uninit+0x78>)
    c98e:	f363 0207 	bfi	r2, r3, #0, #8
    c992:	4b06      	ldr	r3, [pc, #24]	; (c9ac <slm_at_host_uninit+0x7c>)
    c994:	1a1b      	subs	r3, r3, r0
    c996:	08db      	lsrs	r3, r3, #3
    c998:	f363 128f 	bfi	r2, r3, #6, #10
    c99c:	4807      	ldr	r0, [pc, #28]	; (c9bc <slm_at_host_uninit+0x8c>)
	if (err != 0) {
		LOG_WRN("Can't power off uart err=%d", err);
	}
#endif
	LOG_DBG("at_host uninit done");
}
    c99e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_WRN("Can't deregister handler err=%d", err);
    c9a2:	f00f bfbd 	b.w	1c920 <log_1>
}
    c9a6:	bd08      	pop	{r3, pc}
    c9a8:	0001f10c 	.word	0x0001f10c
    c9ac:	0001f11c 	.word	0x0001f11c
    c9b0:	0001f921 	.word	0x0001f921
    c9b4:	0001f946 	.word	0x0001f946
    c9b8:	0001c1b7 	.word	0x0001c1b7
    c9bc:	0001f969 	.word	0x0001f969

0000c9c0 <cmd_send>:
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c9c0:	4a68      	ldr	r2, [pc, #416]	; (cb64 <cmd_send+0x1a4>)
    c9c2:	4b69      	ldr	r3, [pc, #420]	; (cb68 <cmd_send+0x1a8>)
    c9c4:	6811      	ldr	r1, [r2, #0]
    c9c6:	f640 228b 	movw	r2, #2699	; 0xa8b
    c9ca:	4291      	cmp	r1, r2
    c9cc:	bf28      	it	cs
    c9ce:	4611      	movcs	r1, r2
    c9d0:	2200      	movs	r2, #0
{
    c9d2:	b530      	push	{r4, r5, lr}
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c9d4:	461c      	mov	r4, r3
    c9d6:	4865      	ldr	r0, [pc, #404]	; (cb6c <cmd_send+0x1ac>)
{
    c9d8:	b087      	sub	sp, #28
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
    c9da:	545a      	strb	r2, [r3, r1]
static inline bool slm_at_cmd_cmp(const char *cmd,
				const char *slm_cmd,
				u8_t length)
{
	for (int i = 0; i < length; i++) {
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    c9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
    c9e0:	f1a1 0561 	sub.w	r5, r1, #97	; 0x61
    c9e4:	2d19      	cmp	r5, #25
    c9e6:	f810 5b01 	ldrb.w	r5, [r0], #1
    c9ea:	bf98      	it	ls
    c9ec:	3920      	subls	r1, #32
    c9ee:	428d      	cmp	r5, r1
    c9f0:	d105      	bne.n	c9fe <cmd_send+0x3e>
	for (int i = 0; i < length; i++) {
    c9f2:	3201      	adds	r2, #1
    c9f4:	2a0a      	cmp	r2, #10
    c9f6:	d1f1      	bne.n	c9dc <cmd_send+0x1c>
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    c9f8:	2110      	movs	r1, #16
    c9fa:	485d      	ldr	r0, [pc, #372]	; (cb70 <cmd_send+0x1b0>)
    c9fc:	e079      	b.n	caf2 <cmd_send+0x132>
    c9fe:	2100      	movs	r1, #0
    ca00:	485c      	ldr	r0, [pc, #368]	; (cb74 <cmd_send+0x1b4>)
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    ca02:	f813 2b01 	ldrb.w	r2, [r3], #1
    ca06:	f1a2 0461 	sub.w	r4, r2, #97	; 0x61
    ca0a:	2c19      	cmp	r4, #25
    ca0c:	f810 4b01 	ldrb.w	r4, [r0], #1
    ca10:	bf98      	it	ls
    ca12:	3a20      	subls	r2, #32
    ca14:	4294      	cmp	r4, r2
    ca16:	d17a      	bne.n	cb0e <cmd_send+0x14e>
	for (int i = 0; i < length; i++) {
    ca18:	3101      	adds	r1, #1
    ca1a:	2909      	cmp	r1, #9
    ca1c:	d1f1      	bne.n	ca02 <cmd_send+0x42>
	ret = at_parser_params_from_str(at_cmd, NULL, &m_param_list);
    ca1e:	4a56      	ldr	r2, [pc, #344]	; (cb78 <cmd_send+0x1b8>)
    ca20:	2100      	movs	r1, #0
    ca22:	4851      	ldr	r0, [pc, #324]	; (cb68 <cmd_send+0x1a8>)
    ca24:	f011 fcca 	bl	1e3bc <at_parser_params_from_str>
	if (ret < 0) {
    ca28:	1e04      	subs	r4, r0, #0
    ca2a:	da18      	bge.n	ca5e <cmd_send+0x9e>
		LOG_ERR("Failed to parse AT command %d", ret);
    ca2c:	2301      	movs	r3, #1
    ca2e:	f04f 0200 	mov.w	r2, #0
    ca32:	4952      	ldr	r1, [pc, #328]	; (cb7c <cmd_send+0x1bc>)
    ca34:	f363 0207 	bfi	r2, r3, #0, #8
    ca38:	4b51      	ldr	r3, [pc, #324]	; (cb80 <cmd_send+0x1c0>)
    ca3a:	4852      	ldr	r0, [pc, #328]	; (cb84 <cmd_send+0x1c4>)
    ca3c:	1a5b      	subs	r3, r3, r1
    ca3e:	08db      	lsrs	r3, r3, #3
    ca40:	f363 128f 	bfi	r2, r3, #6, #10
    ca44:	4621      	mov	r1, r4
    ca46:	f00f ff6b 	bl	1c920 <log_1>
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
    ca4a:	2108      	movs	r1, #8
    ca4c:	484e      	ldr	r0, [pc, #312]	; (cb88 <cmd_send+0x1c8>)
		write_uart_string(str, ++chars);
    ca4e:	f7ff fddf 	bl	c610 <write_uart_string>
	uart_irq_rx_enable(uart_dev);
    ca52:	4b4e      	ldr	r3, [pc, #312]	; (cb8c <cmd_send+0x1cc>)
    ca54:	6818      	ldr	r0, [r3, #0]
    ca56:	f00f fb9f 	bl	1c198 <uart_irq_rx_enable>
}
    ca5a:	b007      	add	sp, #28
    ca5c:	bd30      	pop	{r4, r5, pc}
	type = at_parser_cmd_type_get(at_cmd);
    ca5e:	4842      	ldr	r0, [pc, #264]	; (cb68 <cmd_send+0x1a8>)
    ca60:	f011 fcaf 	bl	1e3c2 <at_parser_cmd_type_get>
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    ca64:	2801      	cmp	r0, #1
	type = at_parser_cmd_type_get(at_cmd);
    ca66:	4605      	mov	r5, r0
	if (type == AT_CMD_TYPE_SET_COMMAND) {
    ca68:	d12c      	bne.n	cac4 <cmd_send+0x104>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    ca6a:	4843      	ldr	r0, [pc, #268]	; (cb78 <cmd_send+0x1b8>)
    ca6c:	f011 fdd5 	bl	1e61a <at_params_valid_count_get>
    ca70:	2801      	cmp	r0, #1
    ca72:	d80e      	bhi.n	ca92 <cmd_send+0xd2>
			LOG_ERR("AT parameter error");
    ca74:	2301      	movs	r3, #1
    ca76:	f04f 0100 	mov.w	r1, #0
    ca7a:	4a40      	ldr	r2, [pc, #256]	; (cb7c <cmd_send+0x1bc>)
    ca7c:	f363 0107 	bfi	r1, r3, #0, #8
    ca80:	4b3f      	ldr	r3, [pc, #252]	; (cb80 <cmd_send+0x1c0>)
    ca82:	4843      	ldr	r0, [pc, #268]	; (cb90 <cmd_send+0x1d0>)
    ca84:	1a9b      	subs	r3, r3, r2
    ca86:	08db      	lsrs	r3, r3, #3
    ca88:	f363 118f 	bfi	r1, r3, #6, #10
    ca8c:	f00f ff3b 	bl	1c906 <log_0>
		if (err == 0) {
    ca90:	e7db      	b.n	ca4a <cmd_send+0x8a>
		ret = at_params_short_get(&m_param_list, 1, &shutdown_mode);
    ca92:	aa02      	add	r2, sp, #8
    ca94:	4629      	mov	r1, r5
    ca96:	4838      	ldr	r0, [pc, #224]	; (cb78 <cmd_send+0x1b8>)
    ca98:	f011 fd8a 	bl	1e5b0 <at_params_short_get>
		if (ret < 0) {
    ca9c:	2800      	cmp	r0, #0
    ca9e:	dbe9      	blt.n	ca74 <cmd_send+0xb4>
		switch (shutdown_mode) {
    caa0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    caa4:	2b00      	cmp	r3, #0
    caa6:	d0e5      	beq.n	ca74 <cmd_send+0xb4>
    caa8:	2b02      	cmp	r3, #2
    caaa:	d908      	bls.n	cabe <cmd_send+0xfe>
    caac:	2b03      	cmp	r3, #3
    caae:	d1e1      	bne.n	ca74 <cmd_send+0xb4>
			enter_sleep(shutdown_mode);
    cab0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    cab4:	f00f fb4e 	bl	1c154 <enter_sleep>
		write_uart_string(OK_STR, sizeof(OK_STR));
    cab8:	2105      	movs	r1, #5
    caba:	4836      	ldr	r0, [pc, #216]	; (cb94 <cmd_send+0x1d4>)
    cabc:	e7c7      	b.n	ca4e <cmd_send+0x8e>
			slm_at_host_uninit();
    cabe:	f7ff ff37 	bl	c930 <slm_at_host_uninit>
    cac2:	e7f5      	b.n	cab0 <cmd_send+0xf0>
		if (err == 0) {
    cac4:	2c00      	cmp	r4, #0
    cac6:	d1c0      	bne.n	ca4a <cmd_send+0x8a>
    cac8:	e7f6      	b.n	cab8 <cmd_send+0xf8>
	switch (state) {
    caca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cace:	2b03      	cmp	r3, #3
    cad0:	d8bf      	bhi.n	ca52 <cmd_send+0x92>
    cad2:	a201      	add	r2, pc, #4	; (adr r2, cad8 <cmd_send+0x118>)
    cad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cad8:	0000cae9 	.word	0x0000cae9
    cadc:	0000ca4b 	.word	0x0000ca4b
    cae0:	0000caf9 	.word	0x0000caf9
    cae4:	0000cb09 	.word	0x0000cb09
		write_uart_string(buf, strlen(buf));
    cae8:	482b      	ldr	r0, [pc, #172]	; (cb98 <cmd_send+0x1d8>)
    caea:	f010 fc47 	bl	1d37c <strlen>
    caee:	4601      	mov	r1, r0
    caf0:	4829      	ldr	r0, [pc, #164]	; (cb98 <cmd_send+0x1d8>)
		write_uart_string(SLM_VERSION, sizeof(SLM_VERSION));
    caf2:	f7ff fd8d 	bl	c610 <write_uart_string>
    caf6:	e7df      	b.n	cab8 <cmd_send+0xf8>
		chars = sprintf(str, "+CMS: %d\r\n", err);
    caf8:	460a      	mov	r2, r1
    cafa:	4928      	ldr	r1, [pc, #160]	; (cb9c <cmd_send+0x1dc>)
		chars = sprintf(str, "+CME: %d\r\n", err);
    cafc:	a802      	add	r0, sp, #8
    cafe:	f004 f8f3 	bl	10ce8 <sprintf>
		write_uart_string(str, ++chars);
    cb02:	1c41      	adds	r1, r0, #1
    cb04:	a802      	add	r0, sp, #8
    cb06:	e7a2      	b.n	ca4e <cmd_send+0x8e>
		chars = sprintf(str, "+CME: %d\r\n", err);
    cb08:	460a      	mov	r2, r1
    cb0a:	4925      	ldr	r1, [pc, #148]	; (cba0 <cmd_send+0x1e0>)
    cb0c:	e7f6      	b.n	cafc <cmd_send+0x13c>
	err = slm_at_tcpip_parse(at_buf);
    cb0e:	4816      	ldr	r0, [pc, #88]	; (cb68 <cmd_send+0x1a8>)
    cb10:	f000 fe40 	bl	d794 <slm_at_tcpip_parse>
	if (err == 0) {
    cb14:	2800      	cmp	r0, #0
    cb16:	d0cf      	beq.n	cab8 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    cb18:	3023      	adds	r0, #35	; 0x23
    cb1a:	d196      	bne.n	ca4a <cmd_send+0x8a>
	err = slm_at_gps_parse(at_buf);
    cb1c:	4812      	ldr	r0, [pc, #72]	; (cb68 <cmd_send+0x1a8>)
    cb1e:	f001 fdb9 	bl	e694 <slm_at_gps_parse>
	if (err == 0) {
    cb22:	2800      	cmp	r0, #0
    cb24:	d0c8      	beq.n	cab8 <cmd_send+0xf8>
	} else if (err != -ENOTSUP) {
    cb26:	3023      	adds	r0, #35	; 0x23
    cb28:	d18f      	bne.n	ca4a <cmd_send+0x8a>
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
    cb2a:	491b      	ldr	r1, [pc, #108]	; (cb98 <cmd_send+0x1d8>)
    cb2c:	f10d 0307 	add.w	r3, sp, #7
    cb30:	f640 228c 	movw	r2, #2700	; 0xa8c
    cb34:	480c      	ldr	r0, [pc, #48]	; (cb68 <cmd_send+0x1a8>)
    cb36:	f005 f9fd 	bl	11f34 <at_cmd_write>
	if (err < 0) {
    cb3a:	1e01      	subs	r1, r0, #0
    cb3c:	dac5      	bge.n	caca <cmd_send+0x10a>
		LOG_ERR("Could not send AT command to modem: %d", err);
    cb3e:	2301      	movs	r3, #1
    cb40:	f04f 0200 	mov.w	r2, #0
    cb44:	480d      	ldr	r0, [pc, #52]	; (cb7c <cmd_send+0x1bc>)
    cb46:	f363 0207 	bfi	r2, r3, #0, #8
    cb4a:	4b0d      	ldr	r3, [pc, #52]	; (cb80 <cmd_send+0x1c0>)
    cb4c:	1a1b      	subs	r3, r3, r0
    cb4e:	08db      	lsrs	r3, r3, #3
    cb50:	f363 128f 	bfi	r2, r3, #6, #10
    cb54:	4813      	ldr	r0, [pc, #76]	; (cba4 <cmd_send+0x1e4>)
    cb56:	f00f fee3 	bl	1c920 <log_1>
		state = AT_CMD_ERROR;
    cb5a:	2301      	movs	r3, #1
    cb5c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (state) {
    cb60:	e773      	b.n	ca4a <cmd_send+0x8a>
    cb62:	bf00      	nop
    cb64:	200200f0 	.word	0x200200f0
    cb68:	20024e26 	.word	0x20024e26
    cb6c:	0001f750 	.word	0x0001f750
    cb70:	0001f7e0 	.word	0x0001f7e0
    cb74:	0001f75b 	.word	0x0001f75b
    cb78:	200200e8 	.word	0x200200e8
    cb7c:	0001f10c 	.word	0x0001f10c
    cb80:	0001f11c 	.word	0x0001f11c
    cb84:	0001f765 	.word	0x0001f765
    cb88:	0001f79b 	.word	0x0001f79b
    cb8c:	20020104 	.word	0x20020104
    cb90:	0001f783 	.word	0x0001f783
    cb94:	0001f796 	.word	0x0001f796
    cb98:	200258b2 	.word	0x200258b2
    cb9c:	0001f7ca 	.word	0x0001f7ca
    cba0:	0001f7d5 	.word	0x0001f7d5
    cba4:	0001f7a3 	.word	0x0001f7a3

0000cba8 <socket>:
static inline int socket(int family, int type, int proto)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->socket);

	return socket_ops->socket(family, type, proto);
    cba8:	4b01      	ldr	r3, [pc, #4]	; (cbb0 <socket+0x8>)
    cbaa:	681b      	ldr	r3, [r3, #0]
    cbac:	681b      	ldr	r3, [r3, #0]
    cbae:	4718      	bx	r3
    cbb0:	2002031c 	.word	0x2002031c

0000cbb4 <close>:
static inline int close(int sock)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->close);

	return socket_ops->close(sock);
    cbb4:	4b01      	ldr	r3, [pc, #4]	; (cbbc <close+0x8>)
    cbb6:	681b      	ldr	r3, [r3, #0]
    cbb8:	685b      	ldr	r3, [r3, #4]
    cbba:	4718      	bx	r3
    cbbc:	2002031c 	.word	0x2002031c

0000cbc0 <do_socket_close>:
	LOG_DBG("Socket opened");
	return ret;
}

static int do_socket_close(int error)
{
    cbc0:	b570      	push	{r4, r5, r6, lr}
	int ret = 0;

	if (client.sock > 0) {
    cbc2:	4c18      	ldr	r4, [pc, #96]	; (cc24 <do_socket_close+0x64>)
{
    cbc4:	4606      	mov	r6, r0
	if (client.sock > 0) {
    cbc6:	6820      	ldr	r0, [r4, #0]
    cbc8:	2800      	cmp	r0, #0
    cbca:	dd29      	ble.n	cc20 <do_socket_close+0x60>
		ret = close(client.sock);
    cbcc:	f7ff fff2 	bl	cbb4 <close>
		if (ret < 0) {
    cbd0:	1e05      	subs	r5, r0, #0
    cbd2:	da16      	bge.n	cc02 <do_socket_close+0x42>
			LOG_WRN("close() failed: %d", -errno);
    cbd4:	2302      	movs	r3, #2
    cbd6:	f04f 0500 	mov.w	r5, #0
    cbda:	4a13      	ldr	r2, [pc, #76]	; (cc28 <do_socket_close+0x68>)
    cbdc:	f363 0507 	bfi	r5, r3, #0, #8
    cbe0:	4b12      	ldr	r3, [pc, #72]	; (cc2c <do_socket_close+0x6c>)
    cbe2:	1a9b      	subs	r3, r3, r2
    cbe4:	08db      	lsrs	r3, r3, #3
    cbe6:	f363 158f 	bfi	r5, r3, #6, #10
    cbea:	f00f faf2 	bl	1c1d2 <z_errno>
    cbee:	6801      	ldr	r1, [r0, #0]
    cbf0:	462a      	mov	r2, r5
    cbf2:	4249      	negs	r1, r1
    cbf4:	480e      	ldr	r0, [pc, #56]	; (cc30 <do_socket_close+0x70>)
    cbf6:	f00f fe93 	bl	1c920 <log_1>
			ret = -errno;
    cbfa:	f00f faea 	bl	1c1d2 <z_errno>
    cbfe:	6805      	ldr	r5, [r0, #0]
    cc00:	426d      	negs	r5, r5
		}
		client.sock = INVALID_SOCKET;
    cc02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cc06:	6023      	str	r3, [r4, #0]
		client.ip_proto = IPPROTO_IP;
    cc08:	2300      	movs	r3, #0
		client.connected = false;

		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cc0a:	4632      	mov	r2, r6
    cc0c:	4909      	ldr	r1, [pc, #36]	; (cc34 <do_socket_close+0x74>)
    cc0e:	480a      	ldr	r0, [pc, #40]	; (cc38 <do_socket_close+0x78>)
		client.ip_proto = IPPROTO_IP;
    cc10:	80a3      	strh	r3, [r4, #4]
		sprintf(buf, "#XSOCKET: %d\r\n", error);
    cc12:	f004 f869 	bl	10ce8 <sprintf>
		client.callback(buf);
    cc16:	68a3      	ldr	r3, [r4, #8]
    cc18:	4807      	ldr	r0, [pc, #28]	; (cc38 <do_socket_close+0x78>)
    cc1a:	4798      	blx	r3
		LOG_DBG("Socket closed");
	}

	return ret;
}
    cc1c:	4628      	mov	r0, r5
    cc1e:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    cc20:	2500      	movs	r5, #0
	return ret;
    cc22:	e7fb      	b.n	cc1c <do_socket_close+0x5c>
    cc24:	20020108 	.word	0x20020108
    cc28:	0001f10c 	.word	0x0001f10c
    cc2c:	0001f184 	.word	0x0001f184
    cc30:	0001f9ad 	.word	0x0001f9ad
    cc34:	0001f9c0 	.word	0x0001f9c0
    cc38:	20026340 	.word	0x20026340

0000cc3c <do_socket_open>:
	if (type == SOCK_STREAM) {
    cc3c:	2801      	cmp	r0, #1
{
    cc3e:	b538      	push	{r3, r4, r5, lr}
    cc40:	4601      	mov	r1, r0
    cc42:	4c21      	ldr	r4, [pc, #132]	; (ccc8 <do_socket_open+0x8c>)
	if (type == SOCK_STREAM) {
    cc44:	d12d      	bne.n	cca2 <do_socket_open+0x66>
		client.sock = socket(AF_INET, SOCK_STREAM,
    cc46:	2206      	movs	r2, #6
    cc48:	f7ff ffae 	bl	cba8 <socket>
		client.ip_proto = IPPROTO_TCP;
    cc4c:	2306      	movs	r3, #6
		client.sock = socket(AF_INET, SOCK_STREAM,
    cc4e:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    cc50:	7123      	strb	r3, [r4, #4]
	if (client.sock < 0) {
    cc52:	6822      	ldr	r2, [r4, #0]
    cc54:	2a00      	cmp	r2, #0
    cc56:	da2d      	bge.n	ccb4 <do_socket_open+0x78>
		LOG_ERR("socket() failed: %d", -errno);
    cc58:	2301      	movs	r3, #1
    cc5a:	f04f 0500 	mov.w	r5, #0
    cc5e:	4a1b      	ldr	r2, [pc, #108]	; (cccc <do_socket_open+0x90>)
    cc60:	f363 0507 	bfi	r5, r3, #0, #8
    cc64:	4b1a      	ldr	r3, [pc, #104]	; (ccd0 <do_socket_open+0x94>)
    cc66:	1a9b      	subs	r3, r3, r2
    cc68:	08db      	lsrs	r3, r3, #3
    cc6a:	f363 158f 	bfi	r5, r3, #6, #10
    cc6e:	f00f fab0 	bl	1c1d2 <z_errno>
    cc72:	6801      	ldr	r1, [r0, #0]
    cc74:	462a      	mov	r2, r5
    cc76:	4249      	negs	r1, r1
    cc78:	4816      	ldr	r0, [pc, #88]	; (ccd4 <do_socket_open+0x98>)
    cc7a:	f00f fe51 	bl	1c920 <log_1>
		sprintf(buf, "#XSOCKET: %d\r\n", -errno);
    cc7e:	f00f faa8 	bl	1c1d2 <z_errno>
    cc82:	6802      	ldr	r2, [r0, #0]
    cc84:	4914      	ldr	r1, [pc, #80]	; (ccd8 <do_socket_open+0x9c>)
    cc86:	4252      	negs	r2, r2
    cc88:	4814      	ldr	r0, [pc, #80]	; (ccdc <do_socket_open+0xa0>)
    cc8a:	f004 f82d 	bl	10ce8 <sprintf>
		client.callback(buf);
    cc8e:	68a3      	ldr	r3, [r4, #8]
    cc90:	4812      	ldr	r0, [pc, #72]	; (ccdc <do_socket_open+0xa0>)
    cc92:	4798      	blx	r3
		client.ip_proto = IPPROTO_IP;
    cc94:	2300      	movs	r3, #0
    cc96:	7123      	strb	r3, [r4, #4]
		ret = -errno;
    cc98:	f00f fa9b 	bl	1c1d2 <z_errno>
    cc9c:	6800      	ldr	r0, [r0, #0]
    cc9e:	4240      	negs	r0, r0
}
    cca0:	bd38      	pop	{r3, r4, r5, pc}
	} else if (type == SOCK_DGRAM) {
    cca2:	2802      	cmp	r0, #2
    cca4:	d1d5      	bne.n	cc52 <do_socket_open+0x16>
		client.sock = socket(AF_INET, SOCK_DGRAM,
    cca6:	2211      	movs	r2, #17
    cca8:	2001      	movs	r0, #1
    ccaa:	f7ff ff7d 	bl	cba8 <socket>
		client.ip_proto = IPPROTO_UDP;
    ccae:	2311      	movs	r3, #17
		client.sock = socket(AF_INET, SOCK_DGRAM,
    ccb0:	6020      	str	r0, [r4, #0]
		client.ip_proto = IPPROTO_UDP;
    ccb2:	e7cd      	b.n	cc50 <do_socket_open+0x14>
		sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    ccb4:	7923      	ldrb	r3, [r4, #4]
    ccb6:	490a      	ldr	r1, [pc, #40]	; (cce0 <do_socket_open+0xa4>)
    ccb8:	4808      	ldr	r0, [pc, #32]	; (ccdc <do_socket_open+0xa0>)
    ccba:	f004 f815 	bl	10ce8 <sprintf>
		client.callback(buf);
    ccbe:	4807      	ldr	r0, [pc, #28]	; (ccdc <do_socket_open+0xa0>)
    ccc0:	68a3      	ldr	r3, [r4, #8]
    ccc2:	4798      	blx	r3
	int ret = 0;
    ccc4:	2000      	movs	r0, #0
	return ret;
    ccc6:	e7eb      	b.n	cca0 <do_socket_open+0x64>
    ccc8:	20020108 	.word	0x20020108
    cccc:	0001f10c 	.word	0x0001f10c
    ccd0:	0001f184 	.word	0x0001f184
    ccd4:	0001f9cf 	.word	0x0001f9cf
    ccd8:	0001f9c0 	.word	0x0001f9c0
    ccdc:	20026340 	.word	0x20026340
    cce0:	0001f9e3 	.word	0x0001f9e3

0000cce4 <handle_at_socket>:
static int handle_at_socket(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    cce4:	2801      	cmp	r0, #1
{
    cce6:	b513      	push	{r0, r1, r4, lr}
    cce8:	4604      	mov	r4, r0
	switch (cmd_type) {
    ccea:	d004      	beq.n	ccf6 <handle_at_socket+0x12>
    ccec:	2802      	cmp	r0, #2
    ccee:	d050      	beq.n	cd92 <handle_at_socket+0xae>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    ccf0:	f06f 0415 	mvn.w	r4, #21
    ccf4:	e02e      	b.n	cd54 <handle_at_socket+0x70>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    ccf6:	4830      	ldr	r0, [pc, #192]	; (cdb8 <handle_at_socket+0xd4>)
    ccf8:	f011 fc8f 	bl	1e61a <at_params_valid_count_get>
    ccfc:	2801      	cmp	r0, #1
    ccfe:	d9f7      	bls.n	ccf0 <handle_at_socket+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    cd00:	4621      	mov	r1, r4
    cd02:	aa01      	add	r2, sp, #4
    cd04:	482c      	ldr	r0, [pc, #176]	; (cdb8 <handle_at_socket+0xd4>)
    cd06:	f011 fc53 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    cd0a:	1e04      	subs	r4, r0, #0
    cd0c:	db22      	blt.n	cd54 <handle_at_socket+0x70>
			return err;
		}
		if (op == 1) {
    cd0e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    cd12:	2801      	cmp	r0, #1
    cd14:	d127      	bne.n	cd66 <handle_at_socket+0x82>
			u16_t type;

			if (at_params_valid_count_get(&m_param_list) < 3) {
    cd16:	4828      	ldr	r0, [pc, #160]	; (cdb8 <handle_at_socket+0xd4>)
    cd18:	f011 fc7f 	bl	1e61a <at_params_valid_count_get>
    cd1c:	2802      	cmp	r0, #2
    cd1e:	d9e7      	bls.n	ccf0 <handle_at_socket+0xc>
				return -EINVAL;
			}
			err = at_params_short_get(&m_param_list, 2, &type);
    cd20:	f10d 0206 	add.w	r2, sp, #6
    cd24:	2102      	movs	r1, #2
    cd26:	4824      	ldr	r0, [pc, #144]	; (cdb8 <handle_at_socket+0xd4>)
    cd28:	f011 fc42 	bl	1e5b0 <at_params_short_get>
			if (err < 0) {
    cd2c:	1e04      	subs	r4, r0, #0
    cd2e:	db11      	blt.n	cd54 <handle_at_socket+0x70>
				return err;
			}
			if (client.sock > 0) {
    cd30:	4b22      	ldr	r3, [pc, #136]	; (cdbc <handle_at_socket+0xd8>)
    cd32:	681b      	ldr	r3, [r3, #0]
    cd34:	2b00      	cmp	r3, #0
    cd36:	dd10      	ble.n	cd5a <handle_at_socket+0x76>
				LOG_WRN("Socket is already opened");
    cd38:	2302      	movs	r3, #2
    cd3a:	f04f 0100 	mov.w	r1, #0
    cd3e:	4a20      	ldr	r2, [pc, #128]	; (cdc0 <handle_at_socket+0xdc>)
    cd40:	f363 0107 	bfi	r1, r3, #0, #8
    cd44:	4b1f      	ldr	r3, [pc, #124]	; (cdc4 <handle_at_socket+0xe0>)
    cd46:	4820      	ldr	r0, [pc, #128]	; (cdc8 <handle_at_socket+0xe4>)
    cd48:	1a9b      	subs	r3, r3, r2
    cd4a:	08db      	lsrs	r3, r3, #3
    cd4c:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_socket_open(type);
			}
		} else if (op == 0) {
			if (client.sock < 0) {
				LOG_WRN("Socket is not opened yet");
    cd50:	f00f fdd9 	bl	1c906 <log_0>
	default:
		break;
	}

	return err;
}
    cd54:	4620      	mov	r0, r4
    cd56:	b002      	add	sp, #8
    cd58:	bd10      	pop	{r4, pc}
				err = do_socket_open(type);
    cd5a:	f89d 0006 	ldrb.w	r0, [sp, #6]
    cd5e:	f7ff ff6d 	bl	cc3c <do_socket_open>
				err = do_socket_close(0);
    cd62:	4604      	mov	r4, r0
    cd64:	e7f6      	b.n	cd54 <handle_at_socket+0x70>
		} else if (op == 0) {
    cd66:	2800      	cmp	r0, #0
    cd68:	d1f4      	bne.n	cd54 <handle_at_socket+0x70>
			if (client.sock < 0) {
    cd6a:	4b14      	ldr	r3, [pc, #80]	; (cdbc <handle_at_socket+0xd8>)
    cd6c:	681b      	ldr	r3, [r3, #0]
    cd6e:	2b00      	cmp	r3, #0
    cd70:	da0c      	bge.n	cd8c <handle_at_socket+0xa8>
				LOG_WRN("Socket is not opened yet");
    cd72:	2302      	movs	r3, #2
    cd74:	f04f 0100 	mov.w	r1, #0
    cd78:	4a11      	ldr	r2, [pc, #68]	; (cdc0 <handle_at_socket+0xdc>)
    cd7a:	f363 0107 	bfi	r1, r3, #0, #8
    cd7e:	4b11      	ldr	r3, [pc, #68]	; (cdc4 <handle_at_socket+0xe0>)
    cd80:	4812      	ldr	r0, [pc, #72]	; (cdcc <handle_at_socket+0xe8>)
    cd82:	1a9b      	subs	r3, r3, r2
    cd84:	08db      	lsrs	r3, r3, #3
    cd86:	f363 118f 	bfi	r1, r3, #6, #10
    cd8a:	e7e1      	b.n	cd50 <handle_at_socket+0x6c>
				err = do_socket_close(0);
    cd8c:	f7ff ff18 	bl	cbc0 <do_socket_close>
    cd90:	e7e7      	b.n	cd62 <handle_at_socket+0x7e>
		if (client.sock != INVALID_SOCKET) {
    cd92:	4c0a      	ldr	r4, [pc, #40]	; (cdbc <handle_at_socket+0xd8>)
    cd94:	6822      	ldr	r2, [r4, #0]
    cd96:	1c53      	adds	r3, r2, #1
    cd98:	d009      	beq.n	cdae <handle_at_socket+0xca>
			sprintf(buf, "#XSOCKET: %d, %d\r\n", client.sock,
    cd9a:	7923      	ldrb	r3, [r4, #4]
    cd9c:	490c      	ldr	r1, [pc, #48]	; (cdd0 <handle_at_socket+0xec>)
    cd9e:	480d      	ldr	r0, [pc, #52]	; (cdd4 <handle_at_socket+0xf0>)
    cda0:	f003 ffa2 	bl	10ce8 <sprintf>
		client.callback(buf);
    cda4:	68a3      	ldr	r3, [r4, #8]
    cda6:	480b      	ldr	r0, [pc, #44]	; (cdd4 <handle_at_socket+0xf0>)
    cda8:	4798      	blx	r3
		err = 0;
    cdaa:	2400      	movs	r4, #0
		break;
    cdac:	e7d2      	b.n	cd54 <handle_at_socket+0x70>
			sprintf(buf, "#XSOCKET: 0\r\n");
    cdae:	490a      	ldr	r1, [pc, #40]	; (cdd8 <handle_at_socket+0xf4>)
    cdb0:	4808      	ldr	r0, [pc, #32]	; (cdd4 <handle_at_socket+0xf0>)
    cdb2:	f003 ff99 	bl	10ce8 <sprintf>
    cdb6:	e7f5      	b.n	cda4 <handle_at_socket+0xc0>
    cdb8:	200200e8 	.word	0x200200e8
    cdbc:	20020108 	.word	0x20020108
    cdc0:	0001f10c 	.word	0x0001f10c
    cdc4:	0001f184 	.word	0x0001f184
    cdc8:	0001fad3 	.word	0x0001fad3
    cdcc:	0001faec 	.word	0x0001faec
    cdd0:	0001f9e3 	.word	0x0001f9e3
    cdd4:	20026340 	.word	0x20026340
    cdd8:	0001fb05 	.word	0x0001fb05

0000cddc <send.constprop.10>:
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->send);

	return socket_ops->send(sock, buf, len, flags);
    cddc:	4b04      	ldr	r3, [pc, #16]	; (cdf0 <send.constprop.10+0x14>)
static inline ssize_t send(int sock, const void *buf, size_t len,
    cdde:	b410      	push	{r4}
	return socket_ops->send(sock, buf, len, flags);
    cde0:	681b      	ldr	r3, [r3, #0]
    cde2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    cde4:	2300      	movs	r3, #0
    cde6:	46a4      	mov	ip, r4
}
    cde8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->send(sock, buf, len, flags);
    cdec:	4760      	bx	ip
    cdee:	bf00      	nop
    cdf0:	2002031c 	.word	0x2002031c

0000cdf4 <handle_at_tcp_send>:
 */
static int handle_at_tcp_send(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char data[NET_IPV4_MTU];
	int size = NET_IPV4_MTU;
    cdf4:	f44f 7310 	mov.w	r3, #576	; 0x240
{
    cdf8:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (!client.connected) {
    cdfa:	4d2f      	ldr	r5, [pc, #188]	; (ceb8 <handle_at_tcp_send+0xc4>)
{
    cdfc:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
	int size = NET_IPV4_MTU;
    ce00:	9301      	str	r3, [sp, #4]
	if (!client.connected) {
    ce02:	796b      	ldrb	r3, [r5, #5]
{
    ce04:	4604      	mov	r4, r0
	if (!client.connected) {
    ce06:	b993      	cbnz	r3, ce2e <handle_at_tcp_send+0x3a>
		LOG_ERR("TCP not connected yet");
    ce08:	2301      	movs	r3, #1
    ce0a:	f04f 0100 	mov.w	r1, #0
    ce0e:	4a2b      	ldr	r2, [pc, #172]	; (cebc <handle_at_tcp_send+0xc8>)
    ce10:	f363 0107 	bfi	r1, r3, #0, #8
    ce14:	4b2a      	ldr	r3, [pc, #168]	; (cec0 <handle_at_tcp_send+0xcc>)
    ce16:	482b      	ldr	r0, [pc, #172]	; (cec4 <handle_at_tcp_send+0xd0>)
    ce18:	1a9b      	subs	r3, r3, r2
    ce1a:	08db      	lsrs	r3, r3, #3
    ce1c:	f363 118f 	bfi	r1, r3, #6, #10
    ce20:	f00f fd71 	bl	1c906 <log_0>
	int err = -EINVAL;
    ce24:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    ce28:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    ce2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (cmd_type) {
    ce2e:	2801      	cmp	r0, #1
    ce30:	d1f8      	bne.n	ce24 <handle_at_tcp_send+0x30>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    ce32:	4825      	ldr	r0, [pc, #148]	; (cec8 <handle_at_tcp_send+0xd4>)
    ce34:	f011 fbf1 	bl	1e61a <at_params_valid_count_get>
    ce38:	2801      	cmp	r0, #1
    ce3a:	d9f3      	bls.n	ce24 <handle_at_tcp_send+0x30>
		err = at_params_string_get(&m_param_list, 1, data, &size);
    ce3c:	ae02      	add	r6, sp, #8
    ce3e:	ab01      	add	r3, sp, #4
    ce40:	4632      	mov	r2, r6
    ce42:	4621      	mov	r1, r4
    ce44:	4820      	ldr	r0, [pc, #128]	; (cec8 <handle_at_tcp_send+0xd4>)
    ce46:	f011 fbc5 	bl	1e5d4 <at_params_string_get>
		if (err < 0) {
    ce4a:	2800      	cmp	r0, #0
    ce4c:	dbec      	blt.n	ce28 <handle_at_tcp_send+0x34>
		data[size] = '\0';
    ce4e:	2400      	movs	r4, #0
    ce50:	9b01      	ldr	r3, [sp, #4]
	u32_t datalen = strlen(data);
    ce52:	4630      	mov	r0, r6
		data[size] = '\0';
    ce54:	54f4      	strb	r4, [r6, r3]
	u32_t datalen = strlen(data);
    ce56:	f010 fa91 	bl	1d37c <strlen>
    ce5a:	4607      	mov	r7, r0
	while (offset < datalen) {
    ce5c:	42a7      	cmp	r7, r4
    ce5e:	d91f      	bls.n	cea0 <handle_at_tcp_send+0xac>
		ret = send(client.sock, data + offset,
    ce60:	1b3a      	subs	r2, r7, r4
    ce62:	1931      	adds	r1, r6, r4
    ce64:	6828      	ldr	r0, [r5, #0]
    ce66:	f7ff ffb9 	bl	cddc <send.constprop.10>
		if (ret < 0) {
    ce6a:	2800      	cmp	r0, #0
    ce6c:	da22      	bge.n	ceb4 <handle_at_tcp_send+0xc0>
			do_socket_close(-errno);
    ce6e:	f00f f9b0 	bl	1c1d2 <z_errno>
    ce72:	6800      	ldr	r0, [r0, #0]
			LOG_WRN("send() failed: %d", -errno);
    ce74:	f04f 0600 	mov.w	r6, #0
			do_socket_close(-errno);
    ce78:	4240      	negs	r0, r0
    ce7a:	f7ff fea1 	bl	cbc0 <do_socket_close>
			LOG_WRN("send() failed: %d", -errno);
    ce7e:	2302      	movs	r3, #2
    ce80:	4a0e      	ldr	r2, [pc, #56]	; (cebc <handle_at_tcp_send+0xc8>)
    ce82:	f363 0607 	bfi	r6, r3, #0, #8
    ce86:	4b0e      	ldr	r3, [pc, #56]	; (cec0 <handle_at_tcp_send+0xcc>)
    ce88:	1a9b      	subs	r3, r3, r2
    ce8a:	08db      	lsrs	r3, r3, #3
    ce8c:	f363 168f 	bfi	r6, r3, #6, #10
    ce90:	f00f f99f 	bl	1c1d2 <z_errno>
    ce94:	6801      	ldr	r1, [r0, #0]
    ce96:	4632      	mov	r2, r6
    ce98:	4249      	negs	r1, r1
    ce9a:	480c      	ldr	r0, [pc, #48]	; (cecc <handle_at_tcp_send+0xd8>)
    ce9c:	f00f fd40 	bl	1c920 <log_1>
	sprintf(buf, "#XTCPSEND: %d\r\n", offset);
    cea0:	4622      	mov	r2, r4
    cea2:	490b      	ldr	r1, [pc, #44]	; (ced0 <handle_at_tcp_send+0xdc>)
    cea4:	480b      	ldr	r0, [pc, #44]	; (ced4 <handle_at_tcp_send+0xe0>)
    cea6:	f003 ff1f 	bl	10ce8 <sprintf>
	client.callback(buf);
    ceaa:	480a      	ldr	r0, [pc, #40]	; (ced4 <handle_at_tcp_send+0xe0>)
    ceac:	68ab      	ldr	r3, [r5, #8]
    ceae:	4798      	blx	r3
		err = do_tcp_send(data);
    ceb0:	2000      	movs	r0, #0
		break;
    ceb2:	e7b9      	b.n	ce28 <handle_at_tcp_send+0x34>
		offset += ret;
    ceb4:	4404      	add	r4, r0
    ceb6:	e7d1      	b.n	ce5c <handle_at_tcp_send+0x68>
    ceb8:	20020108 	.word	0x20020108
    cebc:	0001f10c 	.word	0x0001f10c
    cec0:	0001f184 	.word	0x0001f184
    cec4:	0001fb66 	.word	0x0001fb66
    cec8:	200200e8 	.word	0x200200e8
    cecc:	0001fb7c 	.word	0x0001fb7c
    ced0:	0001fb8e 	.word	0x0001fb8e
    ced4:	20026340 	.word	0x20026340

0000ced8 <recv.constprop.12>:
	return socket_ops->recv(sock, buf, max_len, flags);
    ced8:	4b04      	ldr	r3, [pc, #16]	; (ceec <recv.constprop.12+0x14>)
static inline ssize_t recv(int sock, void *buf, size_t max_len,
    ceda:	b410      	push	{r4}
	return socket_ops->recv(sock, buf, max_len, flags);
    cedc:	681b      	ldr	r3, [r3, #0]
    cede:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    cee0:	2300      	movs	r3, #0
    cee2:	46a4      	mov	ip, r4
}
    cee4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return socket_ops->recv(sock, buf, max_len, flags);
    cee8:	4760      	bx	ip
    ceea:	bf00      	nop
    ceec:	2002031c 	.word	0x2002031c

0000cef0 <handle_at_bind>:
{
    cef0:	b530      	push	{r4, r5, lr}
	if (client.sock < 0) {
    cef2:	4d2d      	ldr	r5, [pc, #180]	; (cfa8 <handle_at_bind+0xb8>)
{
    cef4:	b085      	sub	sp, #20
	if (client.sock < 0) {
    cef6:	682b      	ldr	r3, [r5, #0]
{
    cef8:	4604      	mov	r4, r0
	if (client.sock < 0) {
    cefa:	2b00      	cmp	r3, #0
    cefc:	da11      	bge.n	cf22 <handle_at_bind+0x32>
		LOG_ERR("Socket not opened yet");
    cefe:	2301      	movs	r3, #1
    cf00:	f04f 0100 	mov.w	r1, #0
    cf04:	4a29      	ldr	r2, [pc, #164]	; (cfac <handle_at_bind+0xbc>)
    cf06:	f363 0107 	bfi	r1, r3, #0, #8
    cf0a:	4b29      	ldr	r3, [pc, #164]	; (cfb0 <handle_at_bind+0xc0>)
    cf0c:	4829      	ldr	r0, [pc, #164]	; (cfb4 <handle_at_bind+0xc4>)
    cf0e:	1a9b      	subs	r3, r3, r2
    cf10:	08db      	lsrs	r3, r3, #3
    cf12:	f363 118f 	bfi	r1, r3, #6, #10
    cf16:	f00f fcf6 	bl	1c906 <log_0>
	int err = -EINVAL;
    cf1a:	f06f 0015 	mvn.w	r0, #21
}
    cf1e:	b005      	add	sp, #20
    cf20:	bd30      	pop	{r4, r5, pc}
	switch (cmd_type) {
    cf22:	2801      	cmp	r0, #1
    cf24:	d1f9      	bne.n	cf1a <handle_at_bind+0x2a>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    cf26:	4824      	ldr	r0, [pc, #144]	; (cfb8 <handle_at_bind+0xc8>)
    cf28:	f011 fb77 	bl	1e61a <at_params_valid_count_get>
    cf2c:	2801      	cmp	r0, #1
    cf2e:	d9f4      	bls.n	cf1a <handle_at_bind+0x2a>
		err = at_params_short_get(&m_param_list, 1, &port);
    cf30:	f10d 0206 	add.w	r2, sp, #6
    cf34:	4621      	mov	r1, r4
    cf36:	4820      	ldr	r0, [pc, #128]	; (cfb8 <handle_at_bind+0xc8>)
    cf38:	f011 fb3a 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    cf3c:	2800      	cmp	r0, #0
    cf3e:	dbee      	blt.n	cf1e <handle_at_bind+0x2e>
		err = do_bind(port);
    cf40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	local.sin_family = AF_INET;
    cf44:	f8ad 4008 	strh.w	r4, [sp, #8]
	local.sin_port = htons(port);
    cf48:	0213      	lsls	r3, r2, #8
    cf4a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    cf4e:	2400      	movs	r4, #0
	return socket_ops->bind(sock, addr, addrlen);
    cf50:	2208      	movs	r2, #8
	local.sin_port = htons(port);
    cf52:	f8ad 300a 	strh.w	r3, [sp, #10]
    cf56:	4b19      	ldr	r3, [pc, #100]	; (cfbc <handle_at_bind+0xcc>)
	local.sin_addr.s_addr = htonl(INADDR_ANY);
    cf58:	9403      	str	r4, [sp, #12]
    cf5a:	681b      	ldr	r3, [r3, #0]
    cf5c:	eb0d 0102 	add.w	r1, sp, r2
    cf60:	68db      	ldr	r3, [r3, #12]
    cf62:	6828      	ldr	r0, [r5, #0]
    cf64:	4798      	blx	r3
	if (ret < 0) {
    cf66:	42a0      	cmp	r0, r4
    cf68:	da1b      	bge.n	cfa2 <handle_at_bind+0xb2>
		LOG_ERR("bind() failed: %d", -errno);
    cf6a:	2301      	movs	r3, #1
    cf6c:	4a0f      	ldr	r2, [pc, #60]	; (cfac <handle_at_bind+0xbc>)
    cf6e:	f363 0407 	bfi	r4, r3, #0, #8
    cf72:	4b0f      	ldr	r3, [pc, #60]	; (cfb0 <handle_at_bind+0xc0>)
    cf74:	1a9b      	subs	r3, r3, r2
    cf76:	08db      	lsrs	r3, r3, #3
    cf78:	f363 148f 	bfi	r4, r3, #6, #10
    cf7c:	f00f f929 	bl	1c1d2 <z_errno>
    cf80:	6801      	ldr	r1, [r0, #0]
    cf82:	4622      	mov	r2, r4
    cf84:	4249      	negs	r1, r1
    cf86:	480e      	ldr	r0, [pc, #56]	; (cfc0 <handle_at_bind+0xd0>)
    cf88:	f00f fcca 	bl	1c920 <log_1>
		do_socket_close(-errno);
    cf8c:	f00f f921 	bl	1c1d2 <z_errno>
    cf90:	6800      	ldr	r0, [r0, #0]
    cf92:	4240      	negs	r0, r0
    cf94:	f7ff fe14 	bl	cbc0 <do_socket_close>
		return -errno;
    cf98:	f00f f91b 	bl	1c1d2 <z_errno>
    cf9c:	6800      	ldr	r0, [r0, #0]
    cf9e:	4240      	negs	r0, r0
    cfa0:	e7bd      	b.n	cf1e <handle_at_bind+0x2e>
	return 0;
    cfa2:	4620      	mov	r0, r4
		break;
    cfa4:	e7bb      	b.n	cf1e <handle_at_bind+0x2e>
    cfa6:	bf00      	nop
    cfa8:	20020108 	.word	0x20020108
    cfac:	0001f10c 	.word	0x0001f10c
    cfb0:	0001f184 	.word	0x0001f184
    cfb4:	0001faab 	.word	0x0001faab
    cfb8:	200200e8 	.word	0x200200e8
    cfbc:	2002031c 	.word	0x2002031c
    cfc0:	0001fac1 	.word	0x0001fac1

0000cfc4 <parse_host_by_name>:
{
    cfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfc8:	4614      	mov	r4, r2
    cfca:	4680      	mov	r8, r0
	struct addrinfo hints = {
    cfcc:	2501      	movs	r5, #1
{
    cfce:	b08e      	sub	sp, #56	; 0x38
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);

	return socket_ops->getaddrinfo(node, service, hints, res);
    cfd0:	4f24      	ldr	r7, [pc, #144]	; (d064 <parse_host_by_name+0xa0>)
	struct addrinfo hints = {
    cfd2:	2220      	movs	r2, #32
{
    cfd4:	460e      	mov	r6, r1
	struct addrinfo hints = {
    cfd6:	a806      	add	r0, sp, #24
    cfd8:	2100      	movs	r1, #0
    cfda:	f010 fa34 	bl	1d446 <memset>
    cfde:	683b      	ldr	r3, [r7, #0]
    cfe0:	e9cd 5407 	strd	r5, r4, [sp, #28]
    cfe4:	aa06      	add	r2, sp, #24
    cfe6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    cfe8:	2100      	movs	r1, #0
    cfea:	ab01      	add	r3, sp, #4
    cfec:	4640      	mov	r0, r8
    cfee:	47a0      	blx	r4
	if (err) {
    cff0:	4604      	mov	r4, r0
    cff2:	b188      	cbz	r0, d018 <parse_host_by_name+0x54>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
    cff4:	f04f 0200 	mov.w	r2, #0
    cff8:	491b      	ldr	r1, [pc, #108]	; (d068 <parse_host_by_name+0xa4>)
    cffa:	4b1c      	ldr	r3, [pc, #112]	; (d06c <parse_host_by_name+0xa8>)
    cffc:	f365 0207 	bfi	r2, r5, #0, #8
    d000:	1a5b      	subs	r3, r3, r1
    d002:	08db      	lsrs	r3, r3, #3
    d004:	4601      	mov	r1, r0
    d006:	f363 128f 	bfi	r2, r3, #6, #10
    d00a:	4819      	ldr	r0, [pc, #100]	; (d070 <parse_host_by_name+0xac>)
    d00c:	f00f fc88 	bl	1c920 <log_1>
}
    d010:	4620      	mov	r0, r4
    d012:	b00e      	add	sp, #56	; 0x38
    d014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (result == NULL) {
    d018:	9b01      	ldr	r3, [sp, #4]
    d01a:	b983      	cbnz	r3, d03e <parse_host_by_name+0x7a>
		LOG_ERR("ERROR: Address not found\n");
    d01c:	2301      	movs	r3, #1
    d01e:	f04f 0100 	mov.w	r1, #0
    d022:	4a11      	ldr	r2, [pc, #68]	; (d068 <parse_host_by_name+0xa4>)
    d024:	f363 0107 	bfi	r1, r3, #0, #8
    d028:	4b10      	ldr	r3, [pc, #64]	; (d06c <parse_host_by_name+0xa8>)
    d02a:	4812      	ldr	r0, [pc, #72]	; (d074 <parse_host_by_name+0xb0>)
    d02c:	1a9b      	subs	r3, r3, r2
    d02e:	08db      	lsrs	r3, r3, #3
    d030:	f363 118f 	bfi	r1, r3, #6, #10
    d034:	f00f fc67 	bl	1c906 <log_0>
		return -ENOENT;
    d038:	f06f 0401 	mvn.w	r4, #1
    d03c:	e7e8      	b.n	d010 <parse_host_by_name+0x4c>
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    d03e:	695b      	ldr	r3, [r3, #20]
	server4->sin_addr.s_addr =
    d040:	490d      	ldr	r1, [pc, #52]	; (d078 <parse_host_by_name+0xb4>)
		((struct sockaddr_in *)result->ai_addr)->sin_addr.s_addr;
    d042:	685b      	ldr	r3, [r3, #4]
	server4->sin_port = htons(port);
    d044:	ba76      	rev16	r6, r6
	server4->sin_addr.s_addr =
    d046:	604b      	str	r3, [r1, #4]
	server4->sin_family = AF_INET;
    d048:	800d      	strh	r5, [r1, #0]
	server4->sin_port = htons(port);
    d04a:	804e      	strh	r6, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    d04c:	2310      	movs	r3, #16
    d04e:	aa02      	add	r2, sp, #8
    d050:	3104      	adds	r1, #4
    d052:	4628      	mov	r0, r5
    d054:	f003 fe8a 	bl	10d6c <z_impl_net_addr_ntop>
static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);

	return socket_ops->freeaddrinfo(res);
    d058:	683b      	ldr	r3, [r7, #0]
    d05a:	9801      	ldr	r0, [sp, #4]
    d05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d05e:	4798      	blx	r3
    d060:	e7d6      	b.n	d010 <parse_host_by_name+0x4c>
    d062:	bf00      	nop
    d064:	2002031c 	.word	0x2002031c
    d068:	0001f10c 	.word	0x0001f10c
    d06c:	0001f184 	.word	0x0001f184
    d070:	0001fca4 	.word	0x0001fca4
    d074:	0001fcc1 	.word	0x0001fcc1
    d078:	20024e04 	.word	0x20024e04

0000d07c <parse_host_by_ipv4>:
{
    d07c:	b508      	push	{r3, lr}
	address4->sin_family = AF_INET;
    d07e:	2301      	movs	r3, #1
    d080:	4a06      	ldr	r2, [pc, #24]	; (d09c <parse_host_by_ipv4+0x20>)
	address4->sin_port = htons(port);
    d082:	ba49      	rev16	r1, r1
	address4->sin_family = AF_INET;
    d084:	8013      	strh	r3, [r2, #0]
	address4->sin_port = htons(port);
    d086:	8051      	strh	r1, [r2, #2]
	return z_impl_net_addr_pton(family, src, dst);
    d088:	4601      	mov	r1, r0
    d08a:	3204      	adds	r2, #4
    d08c:	4618      	mov	r0, r3
    d08e:	f010 fae4 	bl	1d65a <z_impl_net_addr_pton>
	if ((family != AF_INET) && (family != AF_INET6)) {
		errno = EAFNOSUPPORT;
		return -1;
	}

	if (net_addr_pton(family, src, dst) == 0) {
    d092:	2800      	cmp	r0, #0
}
    d094:	bf18      	it	ne
    d096:	f06f 0015 	mvnne.w	r0, #21
    d09a:	bd08      	pop	{r3, pc}
    d09c:	20024e04 	.word	0x20024e04

0000d0a0 <handle_at_tcp_conn>:
	int size = TCPIP_MAX_URL;
    d0a0:	2380      	movs	r3, #128	; 0x80
{
    d0a2:	b570      	push	{r4, r5, r6, lr}
    d0a4:	b0a2      	sub	sp, #136	; 0x88
	int size = TCPIP_MAX_URL;
    d0a6:	9301      	str	r3, [sp, #4]
	if (client.sock < 0) {
    d0a8:	4b4f      	ldr	r3, [pc, #316]	; (d1e8 <handle_at_tcp_conn+0x148>)
{
    d0aa:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d0ac:	681a      	ldr	r2, [r3, #0]
    d0ae:	461e      	mov	r6, r3
    d0b0:	2a00      	cmp	r2, #0
    d0b2:	da10      	bge.n	d0d6 <handle_at_tcp_conn+0x36>
		LOG_ERR("Socket not opened yet");
    d0b4:	2301      	movs	r3, #1
    d0b6:	f04f 0100 	mov.w	r1, #0
    d0ba:	4a4c      	ldr	r2, [pc, #304]	; (d1ec <handle_at_tcp_conn+0x14c>)
    d0bc:	f363 0107 	bfi	r1, r3, #0, #8
    d0c0:	4b4b      	ldr	r3, [pc, #300]	; (d1f0 <handle_at_tcp_conn+0x150>)
    d0c2:	484c      	ldr	r0, [pc, #304]	; (d1f4 <handle_at_tcp_conn+0x154>)
    d0c4:	1a9b      	subs	r3, r3, r2
    d0c6:	08db      	lsrs	r3, r3, #3
    d0c8:	f363 118f 	bfi	r1, r3, #6, #10
    d0cc:	f00f fc1b 	bl	1c906 <log_0>
			return -EINVAL;
    d0d0:	f06f 0415 	mvn.w	r4, #21
    d0d4:	e045      	b.n	d162 <handle_at_tcp_conn+0xc2>
	switch (cmd_type) {
    d0d6:	2801      	cmp	r0, #1
    d0d8:	d009      	beq.n	d0ee <handle_at_tcp_conn+0x4e>
    d0da:	2802      	cmp	r0, #2
    d0dc:	d1f8      	bne.n	d0d0 <handle_at_tcp_conn+0x30>
		if (client.connected) {
    d0de:	795c      	ldrb	r4, [r3, #5]
    d0e0:	689a      	ldr	r2, [r3, #8]
    d0e2:	2c00      	cmp	r4, #0
    d0e4:	d076      	beq.n	d1d4 <handle_at_tcp_conn+0x134>
			client.callback("+XTCPCONN: 1\r\n");
    d0e6:	4844      	ldr	r0, [pc, #272]	; (d1f8 <handle_at_tcp_conn+0x158>)
    d0e8:	4790      	blx	r2
		err = 0;
    d0ea:	2400      	movs	r4, #0
    d0ec:	e039      	b.n	d162 <handle_at_tcp_conn+0xc2>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d0ee:	4843      	ldr	r0, [pc, #268]	; (d1fc <handle_at_tcp_conn+0x15c>)
    d0f0:	f011 fa93 	bl	1e61a <at_params_valid_count_get>
    d0f4:	2802      	cmp	r0, #2
    d0f6:	d9eb      	bls.n	d0d0 <handle_at_tcp_conn+0x30>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d0f8:	4621      	mov	r1, r4
    d0fa:	ab01      	add	r3, sp, #4
    d0fc:	aa02      	add	r2, sp, #8
    d0fe:	483f      	ldr	r0, [pc, #252]	; (d1fc <handle_at_tcp_conn+0x15c>)
    d100:	f011 fa68 	bl	1e5d4 <at_params_string_get>
		if (err < 0) {
    d104:	1e04      	subs	r4, r0, #0
    d106:	db2c      	blt.n	d162 <handle_at_tcp_conn+0xc2>
		url[size] = '\0';
    d108:	2500      	movs	r5, #0
    d10a:	9b01      	ldr	r3, [sp, #4]
    d10c:	aa22      	add	r2, sp, #136	; 0x88
    d10e:	4413      	add	r3, r2
		err = at_params_short_get(&m_param_list, 2, &port);
    d110:	2102      	movs	r1, #2
    d112:	f10d 0202 	add.w	r2, sp, #2
    d116:	4839      	ldr	r0, [pc, #228]	; (d1fc <handle_at_tcp_conn+0x15c>)
		url[size] = '\0';
    d118:	f803 5c80 	strb.w	r5, [r3, #-128]
		err = at_params_short_get(&m_param_list, 2, &port);
    d11c:	f011 fa48 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    d120:	1e04      	subs	r4, r0, #0
    d122:	db1e      	blt.n	d162 <handle_at_tcp_conn+0xc2>
	if (check_for_ipv4(url, strlen(url))) {
    d124:	a802      	add	r0, sp, #8
		err = do_tcp_connect(url, port);
    d126:	f8bd 4002 	ldrh.w	r4, [sp, #2]
	if (check_for_ipv4(url, strlen(url))) {
    d12a:	f010 f927 	bl	1d37c <strlen>
	for (index = 0; index < length; index++) {
    d12e:	462b      	mov	r3, r5
    d130:	a902      	add	r1, sp, #8
    d132:	b2c0      	uxtb	r0, r0
    d134:	4283      	cmp	r3, r0
    d136:	db17      	blt.n	d168 <handle_at_tcp_conn+0xc8>
		ret = parse_host_by_ipv4(url, port);
    d138:	4621      	mov	r1, r4
    d13a:	a802      	add	r0, sp, #8
    d13c:	f7ff ff9e 	bl	d07c <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d140:	4604      	mov	r4, r0
	if (ret) {
    d142:	b1d4      	cbz	r4, d17a <handle_at_tcp_conn+0xda>
		LOG_ERR("Parse failed: %d", ret);
    d144:	2301      	movs	r3, #1
    d146:	f04f 0200 	mov.w	r2, #0
    d14a:	4928      	ldr	r1, [pc, #160]	; (d1ec <handle_at_tcp_conn+0x14c>)
    d14c:	f363 0207 	bfi	r2, r3, #0, #8
    d150:	4b27      	ldr	r3, [pc, #156]	; (d1f0 <handle_at_tcp_conn+0x150>)
    d152:	482b      	ldr	r0, [pc, #172]	; (d200 <handle_at_tcp_conn+0x160>)
    d154:	1a5b      	subs	r3, r3, r1
    d156:	08db      	lsrs	r3, r3, #3
    d158:	f363 128f 	bfi	r2, r3, #6, #10
    d15c:	4621      	mov	r1, r4
    d15e:	f00f fbdf 	bl	1c920 <log_1>
}
    d162:	4620      	mov	r0, r4
    d164:	b022      	add	sp, #136	; 0x88
    d166:	bd70      	pop	{r4, r5, r6, pc}
		char ch = *(address + index);
    d168:	f811 2b01 	ldrb.w	r2, [r1], #1
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d16c:	2a2e      	cmp	r2, #46	; 0x2e
    d16e:	d002      	beq.n	d176 <handle_at_tcp_conn+0xd6>
    d170:	3a30      	subs	r2, #48	; 0x30
    d172:	2a09      	cmp	r2, #9
    d174:	d831      	bhi.n	d1da <handle_at_tcp_conn+0x13a>
	for (index = 0; index < length; index++) {
    d176:	3301      	adds	r3, #1
    d178:	e7dc      	b.n	d134 <handle_at_tcp_conn+0x94>
	return socket_ops->connect(sock, addr, addrlen);
    d17a:	4b22      	ldr	r3, [pc, #136]	; (d204 <handle_at_tcp_conn+0x164>)
    d17c:	2208      	movs	r2, #8
    d17e:	681b      	ldr	r3, [r3, #0]
    d180:	4921      	ldr	r1, [pc, #132]	; (d208 <handle_at_tcp_conn+0x168>)
    d182:	695b      	ldr	r3, [r3, #20]
    d184:	6830      	ldr	r0, [r6, #0]
    d186:	4798      	blx	r3
	if (ret < 0) {
    d188:	2800      	cmp	r0, #0
    d18a:	da1d      	bge.n	d1c8 <handle_at_tcp_conn+0x128>
		LOG_ERR("connect() failed: %d", -errno);
    d18c:	2301      	movs	r3, #1
    d18e:	f04f 0400 	mov.w	r4, #0
    d192:	4a16      	ldr	r2, [pc, #88]	; (d1ec <handle_at_tcp_conn+0x14c>)
    d194:	f363 0407 	bfi	r4, r3, #0, #8
    d198:	4b15      	ldr	r3, [pc, #84]	; (d1f0 <handle_at_tcp_conn+0x150>)
    d19a:	1a9b      	subs	r3, r3, r2
    d19c:	08db      	lsrs	r3, r3, #3
    d19e:	f363 148f 	bfi	r4, r3, #6, #10
    d1a2:	f00f f816 	bl	1c1d2 <z_errno>
    d1a6:	6801      	ldr	r1, [r0, #0]
    d1a8:	4622      	mov	r2, r4
    d1aa:	4249      	negs	r1, r1
    d1ac:	4817      	ldr	r0, [pc, #92]	; (d20c <handle_at_tcp_conn+0x16c>)
    d1ae:	f00f fbb7 	bl	1c920 <log_1>
		do_socket_close(-errno);
    d1b2:	f00f f80e 	bl	1c1d2 <z_errno>
    d1b6:	6800      	ldr	r0, [r0, #0]
    d1b8:	4240      	negs	r0, r0
    d1ba:	f7ff fd01 	bl	cbc0 <do_socket_close>
		return -errno;
    d1be:	f00f f808 	bl	1c1d2 <z_errno>
    d1c2:	6804      	ldr	r4, [r0, #0]
    d1c4:	4264      	negs	r4, r4
    d1c6:	e7cc      	b.n	d162 <handle_at_tcp_conn+0xc2>
	client.connected = true;
    d1c8:	2301      	movs	r3, #1
	client.callback("#XTCPCONN: 1\r\n");
    d1ca:	4811      	ldr	r0, [pc, #68]	; (d210 <handle_at_tcp_conn+0x170>)
	client.connected = true;
    d1cc:	7173      	strb	r3, [r6, #5]
	client.callback("#XTCPCONN: 1\r\n");
    d1ce:	68b3      	ldr	r3, [r6, #8]
    d1d0:	4798      	blx	r3
	return 0;
    d1d2:	e7c6      	b.n	d162 <handle_at_tcp_conn+0xc2>
			client.callback("+XTCPCONN: 0\r\n");
    d1d4:	480f      	ldr	r0, [pc, #60]	; (d214 <handle_at_tcp_conn+0x174>)
    d1d6:	4790      	blx	r2
    d1d8:	e7c3      	b.n	d162 <handle_at_tcp_conn+0xc2>
		ret = parse_host_by_name(url, port, SOCK_STREAM);
    d1da:	2201      	movs	r2, #1
    d1dc:	4621      	mov	r1, r4
    d1de:	a802      	add	r0, sp, #8
    d1e0:	f7ff fef0 	bl	cfc4 <parse_host_by_name>
    d1e4:	e7ac      	b.n	d140 <handle_at_tcp_conn+0xa0>
    d1e6:	bf00      	nop
    d1e8:	20020108 	.word	0x20020108
    d1ec:	0001f10c 	.word	0x0001f10c
    d1f0:	0001f184 	.word	0x0001f184
    d1f4:	0001faab 	.word	0x0001faab
    d1f8:	0001fb48 	.word	0x0001fb48
    d1fc:	200200e8 	.word	0x200200e8
    d200:	0001fb13 	.word	0x0001fb13
    d204:	2002031c 	.word	0x2002031c
    d208:	20024e04 	.word	0x20024e04
    d20c:	0001fb24 	.word	0x0001fb24
    d210:	0001fb39 	.word	0x0001fb39
    d214:	0001fb57 	.word	0x0001fb57

0000d218 <do_tcp_receive>:
	struct timeval tmo = {
    d218:	2300      	movs	r3, #0
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
    d21a:	2208      	movs	r2, #8
{
    d21c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d21e:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
	struct timeval tmo = {
    d222:	e9cd 1302 	strd	r1, r3, [sp, #8]
    d226:	4b3f      	ldr	r3, [pc, #252]	; (d324 <do_tcp_receive+0x10c>)
	ret = setsockopt(client.sock, SOL_SOCKET, SO_RCVTIMEO,
    d228:	4d3f      	ldr	r5, [pc, #252]	; (d328 <do_tcp_receive+0x110>)
    d22a:	681b      	ldr	r3, [r3, #0]
    d22c:	9200      	str	r2, [sp, #0]
    d22e:	69dc      	ldr	r4, [r3, #28]
{
    d230:	4607      	mov	r7, r0
    d232:	eb0d 0302 	add.w	r3, sp, r2
    d236:	2101      	movs	r1, #1
    d238:	2214      	movs	r2, #20
    d23a:	6828      	ldr	r0, [r5, #0]
    d23c:	47a0      	blx	r4
	if (ret < 0) {
    d23e:	1e04      	subs	r4, r0, #0
    d240:	da1c      	bge.n	d27c <do_tcp_receive+0x64>
		do_socket_close(-errno);
    d242:	f00e ffc6 	bl	1c1d2 <z_errno>
    d246:	6800      	ldr	r0, [r0, #0]
		LOG_ERR("setsockopt() error: %d", -errno);
    d248:	f04f 0500 	mov.w	r5, #0
		do_socket_close(-errno);
    d24c:	4240      	negs	r0, r0
    d24e:	f7ff fcb7 	bl	cbc0 <do_socket_close>
		LOG_ERR("setsockopt() error: %d", -errno);
    d252:	2301      	movs	r3, #1
    d254:	4a35      	ldr	r2, [pc, #212]	; (d32c <do_tcp_receive+0x114>)
    d256:	f363 0507 	bfi	r5, r3, #0, #8
    d25a:	4b35      	ldr	r3, [pc, #212]	; (d330 <do_tcp_receive+0x118>)
    d25c:	1a9b      	subs	r3, r3, r2
    d25e:	08db      	lsrs	r3, r3, #3
    d260:	f363 158f 	bfi	r5, r3, #6, #10
    d264:	f00e ffb5 	bl	1c1d2 <z_errno>
    d268:	6801      	ldr	r1, [r0, #0]
    d26a:	462a      	mov	r2, r5
    d26c:	4249      	negs	r1, r1
    d26e:	4831      	ldr	r0, [pc, #196]	; (d334 <do_tcp_receive+0x11c>)
    d270:	f00f fb56 	bl	1c920 <log_1>
}
    d274:	4620      	mov	r0, r4
    d276:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    d27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length > NET_IPV4_MTU) {
    d27c:	f5b7 7f10 	cmp.w	r7, #576	; 0x240
    d280:	ae04      	add	r6, sp, #16
		ret = recv(client.sock, data, NET_IPV4_MTU, 0);
    d282:	bf8c      	ite	hi
    d284:	f44f 7210 	movhi.w	r2, #576	; 0x240
		ret = recv(client.sock, data, length, 0);
    d288:	463a      	movls	r2, r7
    d28a:	6828      	ldr	r0, [r5, #0]
    d28c:	4631      	mov	r1, r6
    d28e:	f7ff fe23 	bl	ced8 <recv.constprop.12>
	if (ret < 0) {
    d292:	2800      	cmp	r0, #0
		ret = recv(client.sock, data, length, 0);
    d294:	4604      	mov	r4, r0
	if (ret < 0) {
    d296:	da1d      	bge.n	d2d4 <do_tcp_receive+0xbc>
		LOG_WRN("recv() error: %d", -errno);
    d298:	2302      	movs	r3, #2
    d29a:	f04f 0400 	mov.w	r4, #0
    d29e:	4a23      	ldr	r2, [pc, #140]	; (d32c <do_tcp_receive+0x114>)
    d2a0:	f363 0407 	bfi	r4, r3, #0, #8
    d2a4:	4b22      	ldr	r3, [pc, #136]	; (d330 <do_tcp_receive+0x118>)
    d2a6:	1a9b      	subs	r3, r3, r2
    d2a8:	08db      	lsrs	r3, r3, #3
    d2aa:	f363 148f 	bfi	r4, r3, #6, #10
    d2ae:	f00e ff90 	bl	1c1d2 <z_errno>
    d2b2:	6801      	ldr	r1, [r0, #0]
    d2b4:	4622      	mov	r2, r4
    d2b6:	4249      	negs	r1, r1
    d2b8:	481f      	ldr	r0, [pc, #124]	; (d338 <do_tcp_receive+0x120>)
    d2ba:	f00f fb31 	bl	1c920 <log_1>
		do_socket_close(-errno);
    d2be:	f00e ff88 	bl	1c1d2 <z_errno>
    d2c2:	6800      	ldr	r0, [r0, #0]
    d2c4:	4240      	negs	r0, r0
    d2c6:	f7ff fc7b 	bl	cbc0 <do_socket_close>
		ret = -errno;
    d2ca:	f00e ff82 	bl	1c1d2 <z_errno>
    d2ce:	6804      	ldr	r4, [r0, #0]
    d2d0:	4264      	negs	r4, r4
    d2d2:	e7cf      	b.n	d274 <do_tcp_receive+0x5c>
	} else if (ret == 0) {
    d2d4:	d111      	bne.n	d2fa <do_tcp_receive+0xe2>
		LOG_WRN("recv() return 0");
    d2d6:	2302      	movs	r3, #2
    d2d8:	f04f 0100 	mov.w	r1, #0
    d2dc:	4a13      	ldr	r2, [pc, #76]	; (d32c <do_tcp_receive+0x114>)
    d2de:	f363 0107 	bfi	r1, r3, #0, #8
    d2e2:	4b13      	ldr	r3, [pc, #76]	; (d330 <do_tcp_receive+0x118>)
    d2e4:	4815      	ldr	r0, [pc, #84]	; (d33c <do_tcp_receive+0x124>)
    d2e6:	1a9b      	subs	r3, r3, r2
    d2e8:	08db      	lsrs	r3, r3, #3
    d2ea:	f363 118f 	bfi	r1, r3, #6, #10
    d2ee:	f00f fb0a 	bl	1c906 <log_0>
		do_socket_close(0);
    d2f2:	4620      	mov	r0, r4
    d2f4:	f7ff fc64 	bl	cbc0 <do_socket_close>
    d2f8:	e7bc      	b.n	d274 <do_tcp_receive+0x5c>
		data[ret] = '\0';
    d2fa:	2700      	movs	r7, #0
		client.callback("#XTCPRECV: ");
    d2fc:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d2fe:	5437      	strb	r7, [r6, r0]
		client.callback("#XTCPRECV: ");
    d300:	480f      	ldr	r0, [pc, #60]	; (d340 <do_tcp_receive+0x128>)
    d302:	4798      	blx	r3
		client.callback(data);
    d304:	68ab      	ldr	r3, [r5, #8]
    d306:	4630      	mov	r0, r6
    d308:	4798      	blx	r3
		client.callback("\r\n");
    d30a:	68ab      	ldr	r3, [r5, #8]
    d30c:	480d      	ldr	r0, [pc, #52]	; (d344 <do_tcp_receive+0x12c>)
    d30e:	4798      	blx	r3
		sprintf(buf, "#XTCPRECV: %d\r\n", ret);
    d310:	4622      	mov	r2, r4
    d312:	490d      	ldr	r1, [pc, #52]	; (d348 <do_tcp_receive+0x130>)
    d314:	480d      	ldr	r0, [pc, #52]	; (d34c <do_tcp_receive+0x134>)
    d316:	f003 fce7 	bl	10ce8 <sprintf>
		client.callback(buf);
    d31a:	68ab      	ldr	r3, [r5, #8]
    d31c:	480b      	ldr	r0, [pc, #44]	; (d34c <do_tcp_receive+0x134>)
    d31e:	4798      	blx	r3
		ret = 0;
    d320:	463c      	mov	r4, r7
    d322:	e7a7      	b.n	d274 <do_tcp_receive+0x5c>
    d324:	2002031c 	.word	0x2002031c
    d328:	20020108 	.word	0x20020108
    d32c:	0001f10c 	.word	0x0001f10c
    d330:	0001f184 	.word	0x0001f184
    d334:	0001f9f6 	.word	0x0001f9f6
    d338:	0001fa0d 	.word	0x0001fa0d
    d33c:	0001fa1e 	.word	0x0001fa1e
    d340:	0001fa2e 	.word	0x0001fa2e
    d344:	0001fb63 	.word	0x0001fb63
    d348:	0001fa3a 	.word	0x0001fa3a
    d34c:	20026340 	.word	0x20026340

0000d350 <handle_at_tcp_recv>:
static int handle_at_tcp_recv(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t length, time;

	if (!client.connected) {
    d350:	4b19      	ldr	r3, [pc, #100]	; (d3b8 <handle_at_tcp_recv+0x68>)
{
    d352:	b513      	push	{r0, r1, r4, lr}
	if (!client.connected) {
    d354:	795b      	ldrb	r3, [r3, #5]
{
    d356:	4604      	mov	r4, r0
	if (!client.connected) {
    d358:	b98b      	cbnz	r3, d37e <handle_at_tcp_recv+0x2e>
		LOG_ERR("TCP not connected yet");
    d35a:	2301      	movs	r3, #1
    d35c:	f04f 0100 	mov.w	r1, #0
    d360:	4a16      	ldr	r2, [pc, #88]	; (d3bc <handle_at_tcp_recv+0x6c>)
    d362:	f363 0107 	bfi	r1, r3, #0, #8
    d366:	4b16      	ldr	r3, [pc, #88]	; (d3c0 <handle_at_tcp_recv+0x70>)
    d368:	4816      	ldr	r0, [pc, #88]	; (d3c4 <handle_at_tcp_recv+0x74>)
    d36a:	1a9b      	subs	r3, r3, r2
    d36c:	08db      	lsrs	r3, r3, #3
    d36e:	f363 118f 	bfi	r1, r3, #6, #10
    d372:	f00f fac8 	bl	1c906 <log_0>
	int err = -EINVAL;
    d376:	f06f 0015 	mvn.w	r0, #21
	default:
		break;
	}

	return err;
}
    d37a:	b002      	add	sp, #8
    d37c:	bd10      	pop	{r4, pc}
	switch (cmd_type) {
    d37e:	2801      	cmp	r0, #1
    d380:	d1f9      	bne.n	d376 <handle_at_tcp_recv+0x26>
		if (at_params_valid_count_get(&m_param_list) < 3) {
    d382:	4811      	ldr	r0, [pc, #68]	; (d3c8 <handle_at_tcp_recv+0x78>)
    d384:	f011 f949 	bl	1e61a <at_params_valid_count_get>
    d388:	2802      	cmp	r0, #2
    d38a:	d9f4      	bls.n	d376 <handle_at_tcp_recv+0x26>
		err = at_params_short_get(&m_param_list, 1, &length);
    d38c:	aa01      	add	r2, sp, #4
    d38e:	4621      	mov	r1, r4
    d390:	480d      	ldr	r0, [pc, #52]	; (d3c8 <handle_at_tcp_recv+0x78>)
    d392:	f011 f90d 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    d396:	2800      	cmp	r0, #0
    d398:	dbef      	blt.n	d37a <handle_at_tcp_recv+0x2a>
		err = at_params_short_get(&m_param_list, 2, &time);
    d39a:	f10d 0206 	add.w	r2, sp, #6
    d39e:	2102      	movs	r1, #2
    d3a0:	4809      	ldr	r0, [pc, #36]	; (d3c8 <handle_at_tcp_recv+0x78>)
    d3a2:	f011 f905 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    d3a6:	2800      	cmp	r0, #0
    d3a8:	dbe7      	blt.n	d37a <handle_at_tcp_recv+0x2a>
		err = do_tcp_receive(length, time);
    d3aa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    d3ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d3b2:	f7ff ff31 	bl	d218 <do_tcp_receive>
		break;
    d3b6:	e7e0      	b.n	d37a <handle_at_tcp_recv+0x2a>
    d3b8:	20020108 	.word	0x20020108
    d3bc:	0001f10c 	.word	0x0001f10c
    d3c0:	0001f184 	.word	0x0001f184
    d3c4:	0001fb66 	.word	0x0001fb66
    d3c8:	200200e8 	.word	0x200200e8

0000d3cc <do_udp_init>:
{
    d3cc:	b538      	push	{r3, r4, r5, lr}
    d3ce:	4604      	mov	r4, r0
    d3d0:	460d      	mov	r5, r1
	if (check_for_ipv4(url, strlen(url))) {
    d3d2:	f00f ffd3 	bl	1d37c <strlen>
	for (index = 0; index < length; index++) {
    d3d6:	2300      	movs	r3, #0
    d3d8:	b2c0      	uxtb	r0, r0
    d3da:	4283      	cmp	r3, r0
    d3dc:	db16      	blt.n	d40c <do_udp_init+0x40>
		ret = parse_host_by_ipv4(url, port);
    d3de:	4629      	mov	r1, r5
    d3e0:	4620      	mov	r0, r4
    d3e2:	f7ff fe4b 	bl	d07c <parse_host_by_ipv4>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d3e6:	4604      	mov	r4, r0
	if (ret) {
    d3e8:	b174      	cbz	r4, d408 <do_udp_init+0x3c>
		LOG_ERR("Parse failed: %d", ret);
    d3ea:	2301      	movs	r3, #1
    d3ec:	f04f 0200 	mov.w	r2, #0
    d3f0:	490d      	ldr	r1, [pc, #52]	; (d428 <do_udp_init+0x5c>)
    d3f2:	f363 0207 	bfi	r2, r3, #0, #8
    d3f6:	4b0d      	ldr	r3, [pc, #52]	; (d42c <do_udp_init+0x60>)
    d3f8:	480d      	ldr	r0, [pc, #52]	; (d430 <do_udp_init+0x64>)
    d3fa:	1a5b      	subs	r3, r3, r1
    d3fc:	08db      	lsrs	r3, r3, #3
    d3fe:	f363 128f 	bfi	r2, r3, #6, #10
    d402:	4621      	mov	r1, r4
    d404:	f00f fa8c 	bl	1c920 <log_1>
}
    d408:	4620      	mov	r0, r4
    d40a:	bd38      	pop	{r3, r4, r5, pc}
		char ch = *(address + index);
    d40c:	5ce2      	ldrb	r2, [r4, r3]
		if ((ch == '.') || (ch >= '0' && ch <= '9')) {
    d40e:	2a2e      	cmp	r2, #46	; 0x2e
    d410:	d002      	beq.n	d418 <do_udp_init+0x4c>
    d412:	3a30      	subs	r2, #48	; 0x30
    d414:	2a09      	cmp	r2, #9
    d416:	d801      	bhi.n	d41c <do_udp_init+0x50>
	for (index = 0; index < length; index++) {
    d418:	3301      	adds	r3, #1
    d41a:	e7de      	b.n	d3da <do_udp_init+0xe>
		ret = parse_host_by_name(url, port, SOCK_DGRAM);
    d41c:	2202      	movs	r2, #2
    d41e:	4629      	mov	r1, r5
    d420:	4620      	mov	r0, r4
    d422:	f7ff fdcf 	bl	cfc4 <parse_host_by_name>
    d426:	e7de      	b.n	d3e6 <do_udp_init+0x1a>
    d428:	0001f10c 	.word	0x0001f10c
    d42c:	0001f184 	.word	0x0001f184
    d430:	0001fb13 	.word	0x0001fb13

0000d434 <handle_at_udp_recvfrom>:
 */
static int handle_at_udp_recvfrom(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	char url[TCPIP_MAX_URL];
	int size = TCPIP_MAX_URL;
    d434:	2380      	movs	r3, #128	; 0x80
{
    d436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d43a:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	int size = TCPIP_MAX_URL;
    d43e:	9304      	str	r3, [sp, #16]
	u16_t port, length, time;

	if (client.sock < 0) {
    d440:	4b69      	ldr	r3, [pc, #420]	; (d5e8 <handle_at_udp_recvfrom+0x1b4>)
{
    d442:	4680      	mov	r8, r0
	if (client.sock < 0) {
    d444:	681a      	ldr	r2, [r3, #0]
    d446:	461d      	mov	r5, r3
    d448:	2a00      	cmp	r2, #0
    d44a:	da14      	bge.n	d476 <handle_at_udp_recvfrom+0x42>
		LOG_ERR("Socket not opened yet");
    d44c:	2301      	movs	r3, #1
    d44e:	f04f 0100 	mov.w	r1, #0
    d452:	4a66      	ldr	r2, [pc, #408]	; (d5ec <handle_at_udp_recvfrom+0x1b8>)
    d454:	f363 0107 	bfi	r1, r3, #0, #8
    d458:	4b65      	ldr	r3, [pc, #404]	; (d5f0 <handle_at_udp_recvfrom+0x1bc>)
    d45a:	4866      	ldr	r0, [pc, #408]	; (d5f4 <handle_at_udp_recvfrom+0x1c0>)
    d45c:	1a9b      	subs	r3, r3, r2
    d45e:	08db      	lsrs	r3, r3, #3
    d460:	f363 118f 	bfi	r1, r3, #6, #10
		return err;
	} else if (client.ip_proto != IPPROTO_UDP) {
		LOG_ERR("Invalid socket");
    d464:	f00f fa4f 	bl	1c906 <log_0>
		return err;
    d468:	f06f 0415 	mvn.w	r4, #21
	default:
		break;
	}

	return err;
}
    d46c:	4620      	mov	r0, r4
    d46e:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    d472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d476:	791b      	ldrb	r3, [r3, #4]
    d478:	2b11      	cmp	r3, #17
    d47a:	d00c      	beq.n	d496 <handle_at_udp_recvfrom+0x62>
		LOG_ERR("Invalid socket");
    d47c:	2301      	movs	r3, #1
    d47e:	f04f 0100 	mov.w	r1, #0
    d482:	4a5a      	ldr	r2, [pc, #360]	; (d5ec <handle_at_udp_recvfrom+0x1b8>)
    d484:	f363 0107 	bfi	r1, r3, #0, #8
    d488:	4b59      	ldr	r3, [pc, #356]	; (d5f0 <handle_at_udp_recvfrom+0x1bc>)
    d48a:	485b      	ldr	r0, [pc, #364]	; (d5f8 <handle_at_udp_recvfrom+0x1c4>)
    d48c:	1a9b      	subs	r3, r3, r2
    d48e:	08db      	lsrs	r3, r3, #3
    d490:	f363 118f 	bfi	r1, r3, #6, #10
    d494:	e7e6      	b.n	d464 <handle_at_udp_recvfrom+0x30>
	switch (cmd_type) {
    d496:	2801      	cmp	r0, #1
    d498:	d1e6      	bne.n	d468 <handle_at_udp_recvfrom+0x34>
		if (at_params_valid_count_get(&m_param_list) < 5) {
    d49a:	4858      	ldr	r0, [pc, #352]	; (d5fc <handle_at_udp_recvfrom+0x1c8>)
    d49c:	f011 f8bd 	bl	1e61a <at_params_valid_count_get>
    d4a0:	2804      	cmp	r0, #4
    d4a2:	d9e1      	bls.n	d468 <handle_at_udp_recvfrom+0x34>
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d4a4:	af08      	add	r7, sp, #32
    d4a6:	ab04      	add	r3, sp, #16
    d4a8:	463a      	mov	r2, r7
    d4aa:	4641      	mov	r1, r8
    d4ac:	4853      	ldr	r0, [pc, #332]	; (d5fc <handle_at_udp_recvfrom+0x1c8>)
    d4ae:	f011 f891 	bl	1e5d4 <at_params_string_get>
		if (err < 0) {
    d4b2:	1e04      	subs	r4, r0, #0
    d4b4:	dbda      	blt.n	d46c <handle_at_udp_recvfrom+0x38>
		url[size] = '\0';
    d4b6:	f04f 0a00 	mov.w	sl, #0
    d4ba:	9b04      	ldr	r3, [sp, #16]
		err = at_params_short_get(&m_param_list, 2, &port);
    d4bc:	f10d 020a 	add.w	r2, sp, #10
    d4c0:	2102      	movs	r1, #2
    d4c2:	484e      	ldr	r0, [pc, #312]	; (d5fc <handle_at_udp_recvfrom+0x1c8>)
		url[size] = '\0';
    d4c4:	f807 a003 	strb.w	sl, [r7, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d4c8:	f011 f872 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    d4cc:	1e04      	subs	r4, r0, #0
    d4ce:	dbcd      	blt.n	d46c <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 3, &length);
    d4d0:	aa03      	add	r2, sp, #12
    d4d2:	2103      	movs	r1, #3
    d4d4:	4849      	ldr	r0, [pc, #292]	; (d5fc <handle_at_udp_recvfrom+0x1c8>)
    d4d6:	f011 f86b 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    d4da:	1e04      	subs	r4, r0, #0
    d4dc:	dbc6      	blt.n	d46c <handle_at_udp_recvfrom+0x38>
		err = at_params_short_get(&m_param_list, 4, &time);
    d4de:	f10d 020e 	add.w	r2, sp, #14
    d4e2:	2104      	movs	r1, #4
    d4e4:	4845      	ldr	r0, [pc, #276]	; (d5fc <handle_at_udp_recvfrom+0x1c8>)
    d4e6:	f011 f863 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    d4ea:	1e04      	subs	r4, r0, #0
    d4ec:	dbbe      	blt.n	d46c <handle_at_udp_recvfrom+0x38>
	int sockaddr_len = sizeof(struct sockaddr);
    d4ee:	2218      	movs	r2, #24
		err = do_udp_recvfrom(url, port, length, time);
    d4f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	int sockaddr_len = sizeof(struct sockaddr);
    d4f4:	ae05      	add	r6, sp, #20
	ret = do_udp_init(url, port);
    d4f6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    d4fa:	4638      	mov	r0, r7
		err = do_udp_recvfrom(url, port, length, time);
    d4fc:	f8bd 900c 	ldrh.w	r9, [sp, #12]
	int sockaddr_len = sizeof(struct sockaddr);
    d500:	6032      	str	r2, [r6, #0]
	struct timeval tmo = {
    d502:	e9cd 3a06 	strd	r3, sl, [sp, #24]
	ret = do_udp_init(url, port);
    d506:	f7ff ff61 	bl	d3cc <do_udp_init>
	if (ret < 0) {
    d50a:	1e04      	subs	r4, r0, #0
    d50c:	dbae      	blt.n	d46c <handle_at_udp_recvfrom+0x38>
    d50e:	2208      	movs	r2, #8
    d510:	4f3b      	ldr	r7, [pc, #236]	; (d600 <handle_at_udp_recvfrom+0x1cc>)
    d512:	4641      	mov	r1, r8
    d514:	683b      	ldr	r3, [r7, #0]
    d516:	9200      	str	r2, [sp, #0]
    d518:	69dc      	ldr	r4, [r3, #28]
    d51a:	2214      	movs	r2, #20
    d51c:	ab06      	add	r3, sp, #24
    d51e:	6828      	ldr	r0, [r5, #0]
    d520:	47a0      	blx	r4
	if (ret < 0) {
    d522:	1e04      	subs	r4, r0, #0
    d524:	da19      	bge.n	d55a <handle_at_udp_recvfrom+0x126>
		LOG_ERR("setsockopt() error: %d", -errno);
    d526:	2301      	movs	r3, #1
    d528:	f04f 0500 	mov.w	r5, #0
    d52c:	4a2f      	ldr	r2, [pc, #188]	; (d5ec <handle_at_udp_recvfrom+0x1b8>)
    d52e:	f363 0507 	bfi	r5, r3, #0, #8
    d532:	4b2f      	ldr	r3, [pc, #188]	; (d5f0 <handle_at_udp_recvfrom+0x1bc>)
    d534:	1a9b      	subs	r3, r3, r2
    d536:	08db      	lsrs	r3, r3, #3
    d538:	f363 158f 	bfi	r5, r3, #6, #10
    d53c:	f00e fe49 	bl	1c1d2 <z_errno>
    d540:	6801      	ldr	r1, [r0, #0]
    d542:	462a      	mov	r2, r5
    d544:	4249      	negs	r1, r1
    d546:	482f      	ldr	r0, [pc, #188]	; (d604 <handle_at_udp_recvfrom+0x1d0>)
    d548:	f00f f9ea 	bl	1c920 <log_1>
		do_socket_close(-errno);
    d54c:	f00e fe41 	bl	1c1d2 <z_errno>
    d550:	6800      	ldr	r0, [r0, #0]
    d552:	4240      	negs	r0, r0
    d554:	f7ff fb34 	bl	cbc0 <do_socket_close>
		return ret;
    d558:	e788      	b.n	d46c <handle_at_udp_recvfrom+0x38>
	if (length > NET_IPV4_MTU) {
    d55a:	683b      	ldr	r3, [r7, #0]
    d55c:	f5b9 7f10 	cmp.w	r9, #576	; 0x240
    d560:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    d562:	4b29      	ldr	r3, [pc, #164]	; (d608 <handle_at_udp_recvfrom+0x1d4>)
    d564:	af28      	add	r7, sp, #160	; 0xa0
    d566:	6828      	ldr	r0, [r5, #0]
	return socket_ops->recvfrom(sock, buf, len, flags, from, fromlen);
    d568:	bf88      	it	hi
    d56a:	f44f 7210 	movhi.w	r2, #576	; 0x240
    d56e:	9601      	str	r6, [sp, #4]
    d570:	9300      	str	r3, [sp, #0]
    d572:	bf98      	it	ls
    d574:	fa0f f289 	sxthls.w	r2, r9
    d578:	2300      	movs	r3, #0
    d57a:	4639      	mov	r1, r7
    d57c:	47a0      	blx	r4
	if (ret < 0) {
    d57e:	2800      	cmp	r0, #0
    d580:	4606      	mov	r6, r0
    d582:	da1d      	bge.n	d5c0 <handle_at_udp_recvfrom+0x18c>
		LOG_WRN("recvfrom() error: %d", -errno);
    d584:	2302      	movs	r3, #2
    d586:	f04f 0400 	mov.w	r4, #0
    d58a:	4a18      	ldr	r2, [pc, #96]	; (d5ec <handle_at_udp_recvfrom+0x1b8>)
    d58c:	f363 0407 	bfi	r4, r3, #0, #8
    d590:	4b17      	ldr	r3, [pc, #92]	; (d5f0 <handle_at_udp_recvfrom+0x1bc>)
    d592:	1a9b      	subs	r3, r3, r2
    d594:	08db      	lsrs	r3, r3, #3
    d596:	f363 148f 	bfi	r4, r3, #6, #10
    d59a:	f00e fe1a 	bl	1c1d2 <z_errno>
    d59e:	6801      	ldr	r1, [r0, #0]
    d5a0:	4622      	mov	r2, r4
    d5a2:	4249      	negs	r1, r1
    d5a4:	4819      	ldr	r0, [pc, #100]	; (d60c <handle_at_udp_recvfrom+0x1d8>)
    d5a6:	f00f f9bb 	bl	1c920 <log_1>
		do_socket_close(-errno);
    d5aa:	f00e fe12 	bl	1c1d2 <z_errno>
    d5ae:	6800      	ldr	r0, [r0, #0]
    d5b0:	4240      	negs	r0, r0
    d5b2:	f7ff fb05 	bl	cbc0 <do_socket_close>
		ret = -errno;
    d5b6:	f00e fe0c 	bl	1c1d2 <z_errno>
    d5ba:	6804      	ldr	r4, [r0, #0]
    d5bc:	4264      	negs	r4, r4
    d5be:	e755      	b.n	d46c <handle_at_udp_recvfrom+0x38>
		data[ret] = '\0';
    d5c0:	2400      	movs	r4, #0
		client.callback("#XUDPRECV: ");
    d5c2:	68ab      	ldr	r3, [r5, #8]
		data[ret] = '\0';
    d5c4:	543c      	strb	r4, [r7, r0]
		client.callback("#XUDPRECV: ");
    d5c6:	4812      	ldr	r0, [pc, #72]	; (d610 <handle_at_udp_recvfrom+0x1dc>)
    d5c8:	4798      	blx	r3
		client.callback(data);
    d5ca:	68ab      	ldr	r3, [r5, #8]
    d5cc:	4638      	mov	r0, r7
    d5ce:	4798      	blx	r3
		client.callback("\r\n");
    d5d0:	68ab      	ldr	r3, [r5, #8]
    d5d2:	4810      	ldr	r0, [pc, #64]	; (d614 <handle_at_udp_recvfrom+0x1e0>)
    d5d4:	4798      	blx	r3
		sprintf(buf, "#XUDPRECV: %d\r\n", ret);
    d5d6:	4632      	mov	r2, r6
    d5d8:	490f      	ldr	r1, [pc, #60]	; (d618 <handle_at_udp_recvfrom+0x1e4>)
    d5da:	4810      	ldr	r0, [pc, #64]	; (d61c <handle_at_udp_recvfrom+0x1e8>)
    d5dc:	f003 fb84 	bl	10ce8 <sprintf>
		client.callback(buf);
    d5e0:	68ab      	ldr	r3, [r5, #8]
    d5e2:	480e      	ldr	r0, [pc, #56]	; (d61c <handle_at_udp_recvfrom+0x1e8>)
    d5e4:	4798      	blx	r3
		break;
    d5e6:	e741      	b.n	d46c <handle_at_udp_recvfrom+0x38>
    d5e8:	20020108 	.word	0x20020108
    d5ec:	0001f10c 	.word	0x0001f10c
    d5f0:	0001f184 	.word	0x0001f184
    d5f4:	0001faab 	.word	0x0001faab
    d5f8:	0001fb9e 	.word	0x0001fb9e
    d5fc:	200200e8 	.word	0x200200e8
    d600:	2002031c 	.word	0x2002031c
    d604:	0001f9f6 	.word	0x0001f9f6
    d608:	20024e04 	.word	0x20024e04
    d60c:	0001fbad 	.word	0x0001fbad
    d610:	0001fbc2 	.word	0x0001fbc2
    d614:	0001fb63 	.word	0x0001fb63
    d618:	0001fbce 	.word	0x0001fbce
    d61c:	20026340 	.word	0x20026340

0000d620 <handle_at_udp_sendto>:
{
    d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (client.sock < 0) {
    d624:	4b50      	ldr	r3, [pc, #320]	; (d768 <handle_at_udp_sendto+0x148>)
{
    d626:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
	if (client.sock < 0) {
    d62a:	681a      	ldr	r2, [r3, #0]
{
    d62c:	4604      	mov	r4, r0
	if (client.sock < 0) {
    d62e:	2a00      	cmp	r2, #0
    d630:	461f      	mov	r7, r3
    d632:	da13      	bge.n	d65c <handle_at_udp_sendto+0x3c>
		LOG_ERR("Socket not opened yet");
    d634:	2301      	movs	r3, #1
    d636:	f04f 0100 	mov.w	r1, #0
    d63a:	4a4c      	ldr	r2, [pc, #304]	; (d76c <handle_at_udp_sendto+0x14c>)
    d63c:	f363 0107 	bfi	r1, r3, #0, #8
    d640:	4b4b      	ldr	r3, [pc, #300]	; (d770 <handle_at_udp_sendto+0x150>)
    d642:	484c      	ldr	r0, [pc, #304]	; (d774 <handle_at_udp_sendto+0x154>)
    d644:	1a9b      	subs	r3, r3, r2
    d646:	08db      	lsrs	r3, r3, #3
    d648:	f363 118f 	bfi	r1, r3, #6, #10
		LOG_ERR("Invalid socket");
    d64c:	f00f f95b 	bl	1c906 <log_0>
	int err = -EINVAL;
    d650:	f06f 0015 	mvn.w	r0, #21
}
    d654:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
    d658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (client.ip_proto != IPPROTO_UDP) {
    d65c:	791b      	ldrb	r3, [r3, #4]
    d65e:	2b11      	cmp	r3, #17
    d660:	d00c      	beq.n	d67c <handle_at_udp_sendto+0x5c>
		LOG_ERR("Invalid socket");
    d662:	2301      	movs	r3, #1
    d664:	f04f 0100 	mov.w	r1, #0
    d668:	4a40      	ldr	r2, [pc, #256]	; (d76c <handle_at_udp_sendto+0x14c>)
    d66a:	f363 0107 	bfi	r1, r3, #0, #8
    d66e:	4b40      	ldr	r3, [pc, #256]	; (d770 <handle_at_udp_sendto+0x150>)
    d670:	4841      	ldr	r0, [pc, #260]	; (d778 <handle_at_udp_sendto+0x158>)
    d672:	1a9b      	subs	r3, r3, r2
    d674:	08db      	lsrs	r3, r3, #3
    d676:	f363 118f 	bfi	r1, r3, #6, #10
    d67a:	e7e7      	b.n	d64c <handle_at_udp_sendto+0x2c>
	switch (cmd_type) {
    d67c:	2801      	cmp	r0, #1
    d67e:	d1e7      	bne.n	d650 <handle_at_udp_sendto+0x30>
		if (at_params_valid_count_get(&m_param_list) < 4) {
    d680:	483e      	ldr	r0, [pc, #248]	; (d77c <handle_at_udp_sendto+0x15c>)
    d682:	f010 ffca 	bl	1e61a <at_params_valid_count_get>
    d686:	2803      	cmp	r0, #3
    d688:	d9e2      	bls.n	d650 <handle_at_udp_sendto+0x30>
		size = TCPIP_MAX_URL;
    d68a:	2380      	movs	r3, #128	; 0x80
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d68c:	ae04      	add	r6, sp, #16
		size = TCPIP_MAX_URL;
    d68e:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 1, url, &size);
    d690:	4632      	mov	r2, r6
    d692:	ab03      	add	r3, sp, #12
    d694:	4621      	mov	r1, r4
    d696:	4839      	ldr	r0, [pc, #228]	; (d77c <handle_at_udp_sendto+0x15c>)
    d698:	f010 ff9c 	bl	1e5d4 <at_params_string_get>
		if (err < 0) {
    d69c:	2800      	cmp	r0, #0
    d69e:	dbd9      	blt.n	d654 <handle_at_udp_sendto+0x34>
		url[size] = '\0';
    d6a0:	2400      	movs	r4, #0
    d6a2:	9b03      	ldr	r3, [sp, #12]
		err = at_params_short_get(&m_param_list, 2, &port);
    d6a4:	f10d 020a 	add.w	r2, sp, #10
    d6a8:	2102      	movs	r1, #2
    d6aa:	4834      	ldr	r0, [pc, #208]	; (d77c <handle_at_udp_sendto+0x15c>)
		url[size] = '\0';
    d6ac:	54f4      	strb	r4, [r6, r3]
		err = at_params_short_get(&m_param_list, 2, &port);
    d6ae:	f010 ff7f 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    d6b2:	2800      	cmp	r0, #0
    d6b4:	dbce      	blt.n	d654 <handle_at_udp_sendto+0x34>
		size = NET_IPV4_MTU;
    d6b6:	f44f 7310 	mov.w	r3, #576	; 0x240
		err = at_params_string_get(&m_param_list, 3, data, &size);
    d6ba:	ad24      	add	r5, sp, #144	; 0x90
		size = NET_IPV4_MTU;
    d6bc:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list, 3, data, &size);
    d6be:	462a      	mov	r2, r5
    d6c0:	ab03      	add	r3, sp, #12
    d6c2:	2103      	movs	r1, #3
    d6c4:	482d      	ldr	r0, [pc, #180]	; (d77c <handle_at_udp_sendto+0x15c>)
    d6c6:	f010 ff85 	bl	1e5d4 <at_params_string_get>
		if (err < 0) {
    d6ca:	2800      	cmp	r0, #0
    d6cc:	dbc2      	blt.n	d654 <handle_at_udp_sendto+0x34>
		data[size] = '\0';
    d6ce:	9b03      	ldr	r3, [sp, #12]
	u32_t datalen = strlen(data);
    d6d0:	4628      	mov	r0, r5
		data[size] = '\0';
    d6d2:	54ec      	strb	r4, [r5, r3]
		err = do_udp_sendto(url, port, data);
    d6d4:	f8bd 900a 	ldrh.w	r9, [sp, #10]
	u32_t datalen = strlen(data);
    d6d8:	f00f fe50 	bl	1d37c <strlen>
	ret = do_udp_init(url, port);
    d6dc:	4649      	mov	r1, r9
	u32_t datalen = strlen(data);
    d6de:	4680      	mov	r8, r0
	ret = do_udp_init(url, port);
    d6e0:	4630      	mov	r0, r6
    d6e2:	f7ff fe73 	bl	d3cc <do_udp_init>
	if (ret < 0) {
    d6e6:	2800      	cmp	r0, #0
    d6e8:	dbb4      	blt.n	d654 <handle_at_udp_sendto+0x34>
	return socket_ops->sendto(sock, buf, len, flags, to, tolen);
    d6ea:	f04f 0908 	mov.w	r9, #8
    d6ee:	4e24      	ldr	r6, [pc, #144]	; (d780 <handle_at_udp_sendto+0x160>)
    d6f0:	f8df a09c 	ldr.w	sl, [pc, #156]	; d790 <handle_at_udp_sendto+0x170>
	while (offset < datalen) {
    d6f4:	45a0      	cmp	r8, r4
    d6f6:	d809      	bhi.n	d70c <handle_at_udp_sendto+0xec>
	sprintf(buf, "#XUDPSENDTO: %d\r\n", offset);
    d6f8:	4622      	mov	r2, r4
    d6fa:	4922      	ldr	r1, [pc, #136]	; (d784 <handle_at_udp_sendto+0x164>)
    d6fc:	4822      	ldr	r0, [pc, #136]	; (d788 <handle_at_udp_sendto+0x168>)
    d6fe:	f003 faf3 	bl	10ce8 <sprintf>
	client.callback(buf);
    d702:	4821      	ldr	r0, [pc, #132]	; (d788 <handle_at_udp_sendto+0x168>)
    d704:	68bb      	ldr	r3, [r7, #8]
    d706:	4798      	blx	r3
	return 0;
    d708:	2000      	movs	r0, #0
    d70a:	e7a3      	b.n	d654 <handle_at_udp_sendto+0x34>
    d70c:	6833      	ldr	r3, [r6, #0]
    d70e:	e9cd a900 	strd	sl, r9, [sp]
    d712:	eba8 0204 	sub.w	r2, r8, r4
    d716:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
    d71a:	1929      	adds	r1, r5, r4
    d71c:	2300      	movs	r3, #0
    d71e:	6838      	ldr	r0, [r7, #0]
    d720:	47d8      	blx	fp
		if (ret <= 0) {
    d722:	2800      	cmp	r0, #0
    d724:	dc1d      	bgt.n	d762 <handle_at_udp_sendto+0x142>
			LOG_ERR("sendto() failed: %d", -errno);
    d726:	2301      	movs	r3, #1
    d728:	f04f 0400 	mov.w	r4, #0
    d72c:	4a0f      	ldr	r2, [pc, #60]	; (d76c <handle_at_udp_sendto+0x14c>)
    d72e:	f363 0407 	bfi	r4, r3, #0, #8
    d732:	4b0f      	ldr	r3, [pc, #60]	; (d770 <handle_at_udp_sendto+0x150>)
    d734:	1a9b      	subs	r3, r3, r2
    d736:	08db      	lsrs	r3, r3, #3
    d738:	f363 148f 	bfi	r4, r3, #6, #10
    d73c:	f00e fd49 	bl	1c1d2 <z_errno>
    d740:	6801      	ldr	r1, [r0, #0]
    d742:	4622      	mov	r2, r4
    d744:	4249      	negs	r1, r1
    d746:	4811      	ldr	r0, [pc, #68]	; (d78c <handle_at_udp_sendto+0x16c>)
    d748:	f00f f8ea 	bl	1c920 <log_1>
			do_socket_close(-errno);
    d74c:	f00e fd41 	bl	1c1d2 <z_errno>
    d750:	6800      	ldr	r0, [r0, #0]
    d752:	4240      	negs	r0, r0
    d754:	f7ff fa34 	bl	cbc0 <do_socket_close>
			return -errno;
    d758:	f00e fd3b 	bl	1c1d2 <z_errno>
    d75c:	6800      	ldr	r0, [r0, #0]
    d75e:	4240      	negs	r0, r0
    d760:	e778      	b.n	d654 <handle_at_udp_sendto+0x34>
		offset += ret;
    d762:	4404      	add	r4, r0
    d764:	e7c6      	b.n	d6f4 <handle_at_udp_sendto+0xd4>
    d766:	bf00      	nop
    d768:	20020108 	.word	0x20020108
    d76c:	0001f10c 	.word	0x0001f10c
    d770:	0001f184 	.word	0x0001f184
    d774:	0001faab 	.word	0x0001faab
    d778:	0001fb9e 	.word	0x0001fb9e
    d77c:	200200e8 	.word	0x200200e8
    d780:	2002031c 	.word	0x2002031c
    d784:	0001fbf2 	.word	0x0001fbf2
    d788:	20026340 	.word	0x20026340
    d78c:	0001fbde 	.word	0x0001fbde
    d790:	20024e04 	.word	0x20024e04

0000d794 <slm_at_tcpip_parse>:

/**@brief API to handle TCP/IP AT commands
 */
int slm_at_tcpip_parse(const char *at_cmd)
{
    d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d798:	4d20      	ldr	r5, [pc, #128]	; (d81c <slm_at_tcpip_parse+0x88>)
    d79a:	4606      	mov	r6, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    d79c:	2400      	movs	r4, #0
    d79e:	46a8      	mov	r8, r5
		u8_t cmd_len = strlen(m_tcpip_at_list[i].string);
    d7a0:	686f      	ldr	r7, [r5, #4]
    d7a2:	4638      	mov	r0, r7
    d7a4:	f00f fdea 	bl	1d37c <strlen>
    d7a8:	2300      	movs	r3, #0
    d7aa:	b2c0      	uxtb	r0, r0
    d7ac:	4283      	cmp	r3, r0
    d7ae:	db18      	blt.n	d7e2 <slm_at_tcpip_parse+0x4e>

		if (slm_at_cmd_cmp(at_cmd, m_tcpip_at_list[i].string,
			cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    d7b0:	2100      	movs	r1, #0
    d7b2:	4a1b      	ldr	r2, [pc, #108]	; (d820 <slm_at_tcpip_parse+0x8c>)
    d7b4:	4630      	mov	r0, r6
    d7b6:	f010 fe01 	bl	1e3bc <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    d7ba:	1e01      	subs	r1, r0, #0
    d7bc:	da1c      	bge.n	d7f8 <slm_at_tcpip_parse+0x64>
				LOG_ERR("Failed to parse AT command %d", ret);
    d7be:	2301      	movs	r3, #1
    d7c0:	f04f 0200 	mov.w	r2, #0
    d7c4:	4817      	ldr	r0, [pc, #92]	; (d824 <slm_at_tcpip_parse+0x90>)
    d7c6:	f363 0207 	bfi	r2, r3, #0, #8
    d7ca:	4b17      	ldr	r3, [pc, #92]	; (d828 <slm_at_tcpip_parse+0x94>)
    d7cc:	1a1b      	subs	r3, r3, r0
    d7ce:	08db      	lsrs	r3, r3, #3
    d7d0:	4816      	ldr	r0, [pc, #88]	; (d82c <slm_at_tcpip_parse+0x98>)
    d7d2:	f363 128f 	bfi	r2, r3, #6, #10
    d7d6:	f00f f8a3 	bl	1c920 <log_1>
				return -EINVAL;
    d7da:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    d7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    d7e2:	5cf2      	ldrb	r2, [r6, r3]
    d7e4:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    d7e8:	2919      	cmp	r1, #25
    d7ea:	5cf9      	ldrb	r1, [r7, r3]
    d7ec:	bf98      	it	ls
    d7ee:	3a20      	subls	r2, #32
    d7f0:	4291      	cmp	r1, r2
    d7f2:	d10b      	bne.n	d80c <slm_at_tcpip_parse+0x78>
	for (int i = 0; i < length; i++) {
    d7f4:	3301      	adds	r3, #1
    d7f6:	e7d9      	b.n	d7ac <slm_at_tcpip_parse+0x18>
			type = at_parser_cmd_type_get(at_cmd);
    d7f8:	4630      	mov	r0, r6
    d7fa:	f010 fde2 	bl	1e3c2 <at_parser_cmd_type_get>
			ret = m_tcpip_at_list[i].handler(type);
    d7fe:	230c      	movs	r3, #12
    d800:	fb03 8404 	mla	r4, r3, r4, r8
    d804:	68a3      	ldr	r3, [r4, #8]
}
    d806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			ret = m_tcpip_at_list[i].handler(type);
    d80a:	4718      	bx	r3
	for (int i = 0; i < AT_TCPIP_MAX; i++) {
    d80c:	3401      	adds	r4, #1
    d80e:	2c07      	cmp	r4, #7
    d810:	f105 050c 	add.w	r5, r5, #12
    d814:	d1c4      	bne.n	d7a0 <slm_at_tcpip_parse+0xc>
	int ret = -ENOTSUP;
    d816:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d81a:	e7e0      	b.n	d7de <slm_at_tcpip_parse+0x4a>
    d81c:	0001f1c4 	.word	0x0001f1c4
    d820:	200200e8 	.word	0x200200e8
    d824:	0001f10c 	.word	0x0001f10c
    d828:	0001f184 	.word	0x0001f184
    d82c:	0001f765 	.word	0x0001f765

0000d830 <enable_PSM>:

	return 0;
}

void enable_PSM(void)
{
    d830:	b510      	push	{r4, lr}
    d832:	b0a6      	sub	sp, #152	; 0x98
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    d834:	2296      	movs	r2, #150	; 0x96
    d836:	2100      	movs	r1, #0
    d838:	4668      	mov	r0, sp
    d83a:	f00f fe04 	bl	1d446 <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    d83e:	f240 2201 	movw	r2, #513	; 0x201
    d842:	2100      	movs	r1, #0
    d844:	2066      	movs	r0, #102	; 0x66
    d846:	f7ff f9af 	bl	cba8 <socket>
	if (at_sock < 0) {
    d84a:	1e04      	subs	r4, r0, #0
    d84c:	da0d      	bge.n	d86a <enable_PSM+0x3a>
		LOG_ERR("Socket could not be opended.");
    d84e:	2301      	movs	r3, #1
    d850:	f04f 0100 	mov.w	r1, #0
    d854:	4a24      	ldr	r2, [pc, #144]	; (d8e8 <enable_PSM+0xb8>)
    d856:	f363 0107 	bfi	r1, r3, #0, #8
    d85a:	4b24      	ldr	r3, [pc, #144]	; (d8ec <enable_PSM+0xbc>)
    d85c:	4824      	ldr	r0, [pc, #144]	; (d8f0 <enable_PSM+0xc0>)
    d85e:	1a9b      	subs	r3, r3, r2
    d860:	08db      	lsrs	r3, r3, #3
    d862:	f363 118f 	bfi	r1, r3, #6, #10
    d866:	f00f f84e 	bl	1c906 <log_0>
	}
	bytes_sent = send(at_sock, AT_CPSMS1, strlen(AT_CPSMS1), 0);
    d86a:	4822      	ldr	r0, [pc, #136]	; (d8f4 <enable_PSM+0xc4>)
    d86c:	f00f fd86 	bl	1d37c <strlen>
    d870:	4920      	ldr	r1, [pc, #128]	; (d8f4 <enable_PSM+0xc4>)
    d872:	4602      	mov	r2, r0
    d874:	4620      	mov	r0, r4
    d876:	f7ff fab1 	bl	cddc <send.constprop.10>
	if (bytes_sent < 0) {
    d87a:	2800      	cmp	r0, #0
    d87c:	da10      	bge.n	d8a0 <enable_PSM+0x70>
		LOG_INF("CPSM send error");
    d87e:	2303      	movs	r3, #3
    d880:	f04f 0100 	mov.w	r1, #0
    d884:	4a18      	ldr	r2, [pc, #96]	; (d8e8 <enable_PSM+0xb8>)
    d886:	f363 0107 	bfi	r1, r3, #0, #8
    d88a:	4b18      	ldr	r3, [pc, #96]	; (d8ec <enable_PSM+0xbc>)
    d88c:	481a      	ldr	r0, [pc, #104]	; (d8f8 <enable_PSM+0xc8>)
    d88e:	1a9b      	subs	r3, r3, r2
    d890:	08db      	lsrs	r3, r3, #3
    d892:	f363 118f 	bfi	r1, r3, #6, #10
    d896:	f00f f836 	bl	1c906 <log_0>
		close(at_sock);
    d89a:	4620      	mov	r0, r4
    d89c:	f7ff f98a 	bl	cbb4 <close>
	}
	do {
		bytes_received = recv(at_sock, buffer, 100, 0);
    d8a0:	2264      	movs	r2, #100	; 0x64
    d8a2:	4669      	mov	r1, sp
    d8a4:	4620      	mov	r0, r4
    d8a6:	f7ff fb17 	bl	ced8 <recv.constprop.12>
	} while (bytes_received == 0);
    d8aa:	2800      	cmp	r0, #0
    d8ac:	d0f8      	beq.n	d8a0 <enable_PSM+0x70>
	if(strstr(buffer, "OK") != NULL)
    d8ae:	4913      	ldr	r1, [pc, #76]	; (d8fc <enable_PSM+0xcc>)
    d8b0:	4668      	mov	r0, sp
    d8b2:	f00f fd0e 	bl	1d2d2 <strstr>
    d8b6:	b168      	cbz	r0, d8d4 <enable_PSM+0xa4>
	{
		LOG_INF("PSM enabled!");
    d8b8:	2303      	movs	r3, #3
    d8ba:	f04f 0100 	mov.w	r1, #0
    d8be:	4a0a      	ldr	r2, [pc, #40]	; (d8e8 <enable_PSM+0xb8>)
    d8c0:	f363 0107 	bfi	r1, r3, #0, #8
    d8c4:	4b09      	ldr	r3, [pc, #36]	; (d8ec <enable_PSM+0xbc>)
    d8c6:	480e      	ldr	r0, [pc, #56]	; (d900 <enable_PSM+0xd0>)
    d8c8:	1a9b      	subs	r3, r3, r2
    d8ca:	08db      	lsrs	r3, r3, #3
    d8cc:	f363 118f 	bfi	r1, r3, #6, #10
    d8d0:	f00f f819 	bl	1c906 <log_0>
	}
	k_sleep(K_SECONDS(3));
    d8d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    d8d8:	f00e fc7d 	bl	1c1d6 <k_sleep>
	close(at_sock);
    d8dc:	4620      	mov	r0, r4
    d8de:	f7ff f969 	bl	cbb4 <close>
}
    d8e2:	b026      	add	sp, #152	; 0x98
    d8e4:	bd10      	pop	{r4, pc}
    d8e6:	bf00      	nop
    d8e8:	0001f10c 	.word	0x0001f10c
    d8ec:	0001f184 	.word	0x0001f184
    d8f0:	0001fa4a 	.word	0x0001fa4a
    d8f4:	0001fa67 	.word	0x0001fa67
    d8f8:	0001fa8e 	.word	0x0001fa8e
    d8fc:	0001ff8a 	.word	0x0001ff8a
    d900:	0001fa9e 	.word	0x0001fa9e

0000d904 <disable_PSM>:

void disable_PSM(void)
{
    d904:	b510      	push	{r4, lr}
    d906:	b0a6      	sub	sp, #152	; 0x98
	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    d908:	2296      	movs	r2, #150	; 0x96
    d90a:	2100      	movs	r1, #0
    d90c:	4668      	mov	r0, sp
    d90e:	f00f fd9a 	bl	1d446 <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    d912:	f240 2201 	movw	r2, #513	; 0x201
    d916:	2100      	movs	r1, #0
    d918:	2066      	movs	r0, #102	; 0x66
    d91a:	f7ff f945 	bl	cba8 <socket>
	if (at_sock < 0) {
    d91e:	1e04      	subs	r4, r0, #0
    d920:	da0d      	bge.n	d93e <disable_PSM+0x3a>
		LOG_ERR("Socket could not be opended.");
    d922:	2301      	movs	r3, #1
    d924:	f04f 0100 	mov.w	r1, #0
    d928:	4a24      	ldr	r2, [pc, #144]	; (d9bc <disable_PSM+0xb8>)
    d92a:	f363 0107 	bfi	r1, r3, #0, #8
    d92e:	4b24      	ldr	r3, [pc, #144]	; (d9c0 <disable_PSM+0xbc>)
    d930:	4824      	ldr	r0, [pc, #144]	; (d9c4 <disable_PSM+0xc0>)
    d932:	1a9b      	subs	r3, r3, r2
    d934:	08db      	lsrs	r3, r3, #3
    d936:	f363 118f 	bfi	r1, r3, #6, #10
    d93a:	f00e ffe4 	bl	1c906 <log_0>
	}
	bytes_sent = send(at_sock, AT_CPSMS0, strlen(AT_CPSMS0), 0);
    d93e:	4822      	ldr	r0, [pc, #136]	; (d9c8 <disable_PSM+0xc4>)
    d940:	f00f fd1c 	bl	1d37c <strlen>
    d944:	4920      	ldr	r1, [pc, #128]	; (d9c8 <disable_PSM+0xc4>)
    d946:	4602      	mov	r2, r0
    d948:	4620      	mov	r0, r4
    d94a:	f7ff fa47 	bl	cddc <send.constprop.10>
	if (bytes_sent < 0) {
    d94e:	2800      	cmp	r0, #0
    d950:	da10      	bge.n	d974 <disable_PSM+0x70>
		LOG_INF("CPSM send error");
    d952:	2303      	movs	r3, #3
    d954:	f04f 0100 	mov.w	r1, #0
    d958:	4a18      	ldr	r2, [pc, #96]	; (d9bc <disable_PSM+0xb8>)
    d95a:	f363 0107 	bfi	r1, r3, #0, #8
    d95e:	4b18      	ldr	r3, [pc, #96]	; (d9c0 <disable_PSM+0xbc>)
    d960:	481a      	ldr	r0, [pc, #104]	; (d9cc <disable_PSM+0xc8>)
    d962:	1a9b      	subs	r3, r3, r2
    d964:	08db      	lsrs	r3, r3, #3
    d966:	f363 118f 	bfi	r1, r3, #6, #10
    d96a:	f00e ffcc 	bl	1c906 <log_0>
		close(at_sock);
    d96e:	4620      	mov	r0, r4
    d970:	f7ff f920 	bl	cbb4 <close>
	}
	do {
		bytes_received = recv(at_sock, buffer, 100, 0);
    d974:	2264      	movs	r2, #100	; 0x64
    d976:	4669      	mov	r1, sp
    d978:	4620      	mov	r0, r4
    d97a:	f7ff faad 	bl	ced8 <recv.constprop.12>
	} while (bytes_received == 0);
    d97e:	2800      	cmp	r0, #0
    d980:	d0f8      	beq.n	d974 <disable_PSM+0x70>
	if(strstr(buffer, "OK") != NULL)
    d982:	4913      	ldr	r1, [pc, #76]	; (d9d0 <disable_PSM+0xcc>)
    d984:	4668      	mov	r0, sp
    d986:	f00f fca4 	bl	1d2d2 <strstr>
    d98a:	b168      	cbz	r0, d9a8 <disable_PSM+0xa4>
	{
		LOG_INF("PSM disabled!");
    d98c:	2303      	movs	r3, #3
    d98e:	f04f 0100 	mov.w	r1, #0
    d992:	4a0a      	ldr	r2, [pc, #40]	; (d9bc <disable_PSM+0xb8>)
    d994:	f363 0107 	bfi	r1, r3, #0, #8
    d998:	4b09      	ldr	r3, [pc, #36]	; (d9c0 <disable_PSM+0xbc>)
    d99a:	480e      	ldr	r0, [pc, #56]	; (d9d4 <disable_PSM+0xd0>)
    d99c:	1a9b      	subs	r3, r3, r2
    d99e:	08db      	lsrs	r3, r3, #3
    d9a0:	f363 118f 	bfi	r1, r3, #6, #10
    d9a4:	f00e ffaf 	bl	1c906 <log_0>
	}
	k_sleep(K_SECONDS(3));
    d9a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    d9ac:	f00e fc13 	bl	1c1d6 <k_sleep>
	close(at_sock);
    d9b0:	4620      	mov	r0, r4
    d9b2:	f7ff f8ff 	bl	cbb4 <close>
}
    d9b6:	b026      	add	sp, #152	; 0x98
    d9b8:	bd10      	pop	{r4, pc}
    d9ba:	bf00      	nop
    d9bc:	0001f10c 	.word	0x0001f10c
    d9c0:	0001f184 	.word	0x0001f184
    d9c4:	0001fa4a 	.word	0x0001fa4a
    d9c8:	0001f994 	.word	0x0001f994
    d9cc:	0001fa8e 	.word	0x0001fa8e
    d9d0:	0001ff8a 	.word	0x0001ff8a
    d9d4:	0001f99f 	.word	0x0001f99f

0000d9d8 <request_nb_iot_network_stats>:


int request_nb_iot_network_stats()
{
	LOG_INF("Requesting NB-IoT network stats...");
    d9d8:	2303      	movs	r3, #3
    d9da:	f04f 0100 	mov.w	r1, #0
{
    d9de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Requesting NB-IoT network stats...");
    d9e2:	f363 0107 	bfi	r1, r3, #0, #8
    d9e6:	4ca6      	ldr	r4, [pc, #664]	; (dc80 <request_nb_iot_network_stats+0x2a8>)
    d9e8:	4ba6      	ldr	r3, [pc, #664]	; (dc84 <request_nb_iot_network_stats+0x2ac>)
{
    d9ea:	b0a9      	sub	sp, #164	; 0xa4
	LOG_INF("Requesting NB-IoT network stats...");
    d9ec:	1ae4      	subs	r4, r4, r3
    d9ee:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    d9f2:	f364 118f 	bfi	r1, r4, #6, #10
    d9f6:	48a4      	ldr	r0, [pc, #656]	; (dc88 <request_nb_iot_network_stats+0x2b0>)
    d9f8:	f00e ff85 	bl	1c906 <log_0>

	int  at_sock;
	int  bytes_sent;
	int  bytes_received;
	char buffer[150] = {0};
    d9fc:	2296      	movs	r2, #150	; 0x96
    d9fe:	2100      	movs	r1, #0
    da00:	a802      	add	r0, sp, #8
    da02:	f00f fd20 	bl	1d446 <memset>

	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    da06:	f240 2201 	movw	r2, #513	; 0x201
    da0a:	2100      	movs	r1, #0
    da0c:	2066      	movs	r0, #102	; 0x66
    da0e:	f7ff f8cb 	bl	cba8 <socket>
	if (at_sock < 0) {
    da12:	1e05      	subs	r5, r0, #0
    da14:	db16      	blt.n	da44 <request_nb_iot_network_stats+0x6c>
		return -1;
	}

	// Get and parse current cell ID: AT+CEREG?
	bytes_sent = send(at_sock, AT_CEREG, strlen(AT_CEREG), 0);
    da16:	489d      	ldr	r0, [pc, #628]	; (dc8c <request_nb_iot_network_stats+0x2b4>)
    da18:	f00f fcb0 	bl	1d37c <strlen>
    da1c:	499b      	ldr	r1, [pc, #620]	; (dc8c <request_nb_iot_network_stats+0x2b4>)
    da1e:	4602      	mov	r2, r0
    da20:	4628      	mov	r0, r5
    da22:	f7ff f9db 	bl	cddc <send.constprop.10>
	if (bytes_sent < 0) {
    da26:	2800      	cmp	r0, #0
    da28:	da0f      	bge.n	da4a <request_nb_iot_network_stats+0x72>
		LOG_INF("CEREG send error");
    da2a:	f04f 0100 	mov.w	r1, #0
    da2e:	2303      	movs	r3, #3
    da30:	4897      	ldr	r0, [pc, #604]	; (dc90 <request_nb_iot_network_stats+0x2b8>)
    da32:	f363 0107 	bfi	r1, r3, #0, #8
    da36:	f364 118f 	bfi	r1, r4, #6, #10
			neighbors[0] = '\0';
		}	
	}
	else if (strstr(buffer, "ERROR") != NULL) 
	{
		LOG_ERR("Error while getting neighbor data!");
    da3a:	f00e ff64 	bl	1c906 <log_0>
		close(at_sock);
    da3e:	4628      	mov	r0, r5
    da40:	f7ff f8b8 	bl	cbb4 <close>
		return -1;
    da44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da48:	e0f5      	b.n	dc36 <request_nb_iot_network_stats+0x25e>
		bytes_received = recv(at_sock, buffer, 100, 0);
    da4a:	2264      	movs	r2, #100	; 0x64
    da4c:	a902      	add	r1, sp, #8
    da4e:	4628      	mov	r0, r5
    da50:	f7ff fa42 	bl	ced8 <recv.constprop.12>
	} while (bytes_received == 0);
    da54:	2800      	cmp	r0, #0
    da56:	d0f8      	beq.n	da4a <request_nb_iot_network_stats+0x72>
	if(strstr(buffer, "OK") != NULL)
    da58:	498e      	ldr	r1, [pc, #568]	; (dc94 <request_nb_iot_network_stats+0x2bc>)
    da5a:	a802      	add	r0, sp, #8
    da5c:	f00f fc39 	bl	1d2d2 <strstr>
    da60:	b370      	cbz	r0, dac0 <request_nb_iot_network_stats+0xe8>
		char* pos = strstr(buffer, "\",\"")+3;		
    da62:	498d      	ldr	r1, [pc, #564]	; (dc98 <request_nb_iot_network_stats+0x2c0>)
    da64:	a802      	add	r0, sp, #8
    da66:	f00f fc34 	bl	1d2d2 <strstr>
    da6a:	4a8c      	ldr	r2, [pc, #560]	; (dc9c <request_nb_iot_network_stats+0x2c4>)
    da6c:	1c83      	adds	r3, r0, #2
    da6e:	300a      	adds	r0, #10
			current_cell_id[i] = pos[i];
    da70:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		for(uint8_t i=0; i<8; i++)
    da74:	4298      	cmp	r0, r3
			current_cell_id[i] = pos[i];
    da76:	f802 1b01 	strb.w	r1, [r2], #1
		for(uint8_t i=0; i<8; i++)
    da7a:	d1f9      	bne.n	da70 <request_nb_iot_network_stats+0x98>
		LOG_INF("Current cell ID = %s", current_cell_id);
    da7c:	f04f 0200 	mov.w	r2, #0
    da80:	2303      	movs	r3, #3
    da82:	f363 0207 	bfi	r2, r3, #0, #8
    da86:	f364 128f 	bfi	r2, r4, #6, #10
    da8a:	4984      	ldr	r1, [pc, #528]	; (dc9c <request_nb_iot_network_stats+0x2c4>)
    da8c:	4884      	ldr	r0, [pc, #528]	; (dca0 <request_nb_iot_network_stats+0x2c8>)
    da8e:	f00e ff47 	bl	1c920 <log_1>
	k_sleep(K_SECONDS(3));
    da92:	f640 30b8 	movw	r0, #3000	; 0xbb8
    da96:	f00e fb9e 	bl	1c1d6 <k_sleep>
	bytes_sent = send(at_sock, AT_CESQ, strlen(AT_CESQ), 0);
    da9a:	4882      	ldr	r0, [pc, #520]	; (dca4 <request_nb_iot_network_stats+0x2cc>)
    da9c:	f00f fc6e 	bl	1d37c <strlen>
    daa0:	4980      	ldr	r1, [pc, #512]	; (dca4 <request_nb_iot_network_stats+0x2cc>)
    daa2:	4602      	mov	r2, r0
    daa4:	4628      	mov	r0, r5
    daa6:	f7ff f999 	bl	cddc <send.constprop.10>
	if (bytes_sent < 0) {
    daaa:	2800      	cmp	r0, #0
    daac:	da17      	bge.n	dade <request_nb_iot_network_stats+0x106>
		LOG_INF("CESQ send error");
    daae:	f04f 0100 	mov.w	r1, #0
    dab2:	2303      	movs	r3, #3
    dab4:	f363 0107 	bfi	r1, r3, #0, #8
    dab8:	f364 118f 	bfi	r1, r4, #6, #10
    dabc:	487a      	ldr	r0, [pc, #488]	; (dca8 <request_nb_iot_network_stats+0x2d0>)
    dabe:	e7bc      	b.n	da3a <request_nb_iot_network_stats+0x62>
	else if (strstr(buffer, "ERROR") != NULL) 
    dac0:	497a      	ldr	r1, [pc, #488]	; (dcac <request_nb_iot_network_stats+0x2d4>)
    dac2:	a802      	add	r0, sp, #8
    dac4:	f00f fc05 	bl	1d2d2 <strstr>
    dac8:	2800      	cmp	r0, #0
    daca:	d0e2      	beq.n	da92 <request_nb_iot_network_stats+0xba>
		LOG_ERR("Error while getting current cell ID!");
    dacc:	f04f 0100 	mov.w	r1, #0
    dad0:	2301      	movs	r3, #1
    dad2:	f363 0107 	bfi	r1, r3, #0, #8
    dad6:	f364 118f 	bfi	r1, r4, #6, #10
    dada:	4875      	ldr	r0, [pc, #468]	; (dcb0 <request_nb_iot_network_stats+0x2d8>)
    dadc:	e7ad      	b.n	da3a <request_nb_iot_network_stats+0x62>
		bytes_received = recv(at_sock, buffer, 100, 0);
    dade:	2264      	movs	r2, #100	; 0x64
    dae0:	a902      	add	r1, sp, #8
    dae2:	4628      	mov	r0, r5
    dae4:	f7ff f9f8 	bl	ced8 <recv.constprop.12>
	} while (bytes_received == 0);
    dae8:	2800      	cmp	r0, #0
    daea:	d0f8      	beq.n	dade <request_nb_iot_network_stats+0x106>
	if(strstr(buffer, "OK") != NULL)
    daec:	4969      	ldr	r1, [pc, #420]	; (dc94 <request_nb_iot_network_stats+0x2bc>)
    daee:	a802      	add	r0, sp, #8
    daf0:	f00f fbef 	bl	1d2d2 <strstr>
    daf4:	2800      	cmp	r0, #0
    daf6:	d03e      	beq.n	db76 <request_nb_iot_network_stats+0x19e>
		char *pos1 = strrchr(buffer, ',') + 1;
    daf8:	212c      	movs	r1, #44	; 0x2c
    dafa:	a802      	add	r0, sp, #8
    dafc:	f00f fc31 	bl	1d362 <strrchr>
    db00:	1c46      	adds	r6, r0, #1
		char *pos2 = strstr(pos1, "\n");
    db02:	496c      	ldr	r1, [pc, #432]	; (dcb4 <request_nb_iot_network_stats+0x2dc>)
    db04:	4630      	mov	r0, r6
    db06:	f00f fbe4 	bl	1d2d2 <strstr>
    db0a:	4680      	mov	r8, r0
		memcpy(rsrp, pos1, strlen(pos1)-strlen(pos2));
    db0c:	4630      	mov	r0, r6
    db0e:	f00f fc35 	bl	1d37c <strlen>
    db12:	4607      	mov	r7, r0
    db14:	4640      	mov	r0, r8
    db16:	f00f fc31 	bl	1d37c <strlen>
    db1a:	4631      	mov	r1, r6
    db1c:	1a3a      	subs	r2, r7, r0
    db1e:	4668      	mov	r0, sp
    db20:	f00f fc67 	bl	1d3f2 <memcpy>
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    db24:	220a      	movs	r2, #10
    db26:	a901      	add	r1, sp, #4
    db28:	4668      	mov	r0, sp
    db2a:	f00f fae3 	bl	1d0f4 <strtol>
    db2e:	4b62      	ldr	r3, [pc, #392]	; (dcb8 <request_nb_iot_network_stats+0x2e0>)
		LOG_INF("Current RSRP = %d", current_rsrp);
    db30:	f04f 0200 	mov.w	r2, #0
		current_rsrp = (uint8_t) strtol(rsrp, &ptr, 10);
    db34:	7018      	strb	r0, [r3, #0]
		LOG_INF("Current RSRP = %d", current_rsrp);
    db36:	2303      	movs	r3, #3
    db38:	f363 0207 	bfi	r2, r3, #0, #8
    db3c:	b2c1      	uxtb	r1, r0
    db3e:	f364 128f 	bfi	r2, r4, #6, #10
    db42:	485e      	ldr	r0, [pc, #376]	; (dcbc <request_nb_iot_network_stats+0x2e4>)
    db44:	f00e feec 	bl	1c920 <log_1>
	k_sleep(K_SECONDS(2));
    db48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    db4c:	f00e fb43 	bl	1c1d6 <k_sleep>
	bytes_sent = send(at_sock, AT_NBRGRSRP, strlen(AT_NBRGRSRP), 0);
    db50:	485b      	ldr	r0, [pc, #364]	; (dcc0 <request_nb_iot_network_stats+0x2e8>)
    db52:	f00f fc13 	bl	1d37c <strlen>
    db56:	495a      	ldr	r1, [pc, #360]	; (dcc0 <request_nb_iot_network_stats+0x2e8>)
    db58:	4602      	mov	r2, r0
    db5a:	4628      	mov	r0, r5
    db5c:	f7ff f93e 	bl	cddc <send.constprop.10>
	if (bytes_sent < 0) {
    db60:	2800      	cmp	r0, #0
    db62:	da17      	bge.n	db94 <request_nb_iot_network_stats+0x1bc>
		LOG_INF("NBRGRSRP send error");
    db64:	f04f 0100 	mov.w	r1, #0
    db68:	2303      	movs	r3, #3
    db6a:	f363 0107 	bfi	r1, r3, #0, #8
    db6e:	f364 118f 	bfi	r1, r4, #6, #10
    db72:	4854      	ldr	r0, [pc, #336]	; (dcc4 <request_nb_iot_network_stats+0x2ec>)
    db74:	e761      	b.n	da3a <request_nb_iot_network_stats+0x62>
	else if (strstr(buffer, "ERROR") != NULL) 
    db76:	494d      	ldr	r1, [pc, #308]	; (dcac <request_nb_iot_network_stats+0x2d4>)
    db78:	a802      	add	r0, sp, #8
    db7a:	f00f fbaa 	bl	1d2d2 <strstr>
    db7e:	2800      	cmp	r0, #0
    db80:	d0e2      	beq.n	db48 <request_nb_iot_network_stats+0x170>
		LOG_ERR("Error while getting current RSRP!");
    db82:	f04f 0100 	mov.w	r1, #0
    db86:	2301      	movs	r3, #1
    db88:	f363 0107 	bfi	r1, r3, #0, #8
    db8c:	f364 118f 	bfi	r1, r4, #6, #10
    db90:	484d      	ldr	r0, [pc, #308]	; (dcc8 <request_nb_iot_network_stats+0x2f0>)
    db92:	e752      	b.n	da3a <request_nb_iot_network_stats+0x62>
		bytes_received = recv(at_sock, buffer, 150, 0);
    db94:	2296      	movs	r2, #150	; 0x96
    db96:	a902      	add	r1, sp, #8
    db98:	4628      	mov	r0, r5
    db9a:	f7ff f99d 	bl	ced8 <recv.constprop.12>
	} while (bytes_received == 0);
    db9e:	2800      	cmp	r0, #0
    dba0:	d0f8      	beq.n	db94 <request_nb_iot_network_stats+0x1bc>
	if(strstr(buffer, "OK") != NULL)
    dba2:	493c      	ldr	r1, [pc, #240]	; (dc94 <request_nb_iot_network_stats+0x2bc>)
    dba4:	a802      	add	r0, sp, #8
    dba6:	f00f fb94 	bl	1d2d2 <strstr>
    dbaa:	2800      	cmp	r0, #0
    dbac:	d058      	beq.n	dc60 <request_nb_iot_network_stats+0x288>
		if(strstr(buffer, "NBRGRSRP") != NULL)
    dbae:	4947      	ldr	r1, [pc, #284]	; (dccc <request_nb_iot_network_stats+0x2f4>)
    dbb0:	a802      	add	r0, sp, #8
    dbb2:	f00f fb8e 	bl	1d2d2 <strstr>
    dbb6:	4606      	mov	r6, r0
    dbb8:	2800      	cmp	r0, #0
    dbba:	d044      	beq.n	dc46 <request_nb_iot_network_stats+0x26e>
			char* pos1 = strstr(buffer, "\%NBRGRSRP: ") + strlen("\%NBRGRSRP: ");
    dbbc:	4944      	ldr	r1, [pc, #272]	; (dcd0 <request_nb_iot_network_stats+0x2f8>)
    dbbe:	a802      	add	r0, sp, #8
    dbc0:	f00f fb87 	bl	1d2d2 <strstr>
    dbc4:	4607      	mov	r7, r0
    dbc6:	4842      	ldr	r0, [pc, #264]	; (dcd0 <request_nb_iot_network_stats+0x2f8>)
    dbc8:	f00f fbd8 	bl	1d37c <strlen>
    dbcc:	4407      	add	r7, r0
			char* pos2 = strstr(pos1, "\n");
    dbce:	4939      	ldr	r1, [pc, #228]	; (dcb4 <request_nb_iot_network_stats+0x2dc>)
    dbd0:	4638      	mov	r0, r7
    dbd2:	f00f fb7e 	bl	1d2d2 <strstr>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    dbd6:	2600      	movs	r6, #0
			char* pos2 = strstr(pos1, "\n");
    dbd8:	4681      	mov	r9, r0
				neighbors[i] = pos1[i];
    dbda:	f8df b0f8 	ldr.w	fp, [pc, #248]	; dcd4 <request_nb_iot_network_stats+0x2fc>
			for(uint8_t i=0; i<strlen(pos1)-strlen(pos2); i++)
    dbde:	4638      	mov	r0, r7
    dbe0:	f00f fbcc 	bl	1d37c <strlen>
    dbe4:	4680      	mov	r8, r0
    dbe6:	4648      	mov	r0, r9
    dbe8:	f00f fbc8 	bl	1d37c <strlen>
    dbec:	fa5f fa86 	uxtb.w	sl, r6
    dbf0:	eba8 0000 	sub.w	r0, r8, r0
    dbf4:	4582      	cmp	sl, r0
    dbf6:	f106 0601 	add.w	r6, r6, #1
    dbfa:	d31f      	bcc.n	dc3c <request_nb_iot_network_stats+0x264>
			LOG_INF("Neighbors = %s", neighbors);
    dbfc:	f04f 0200 	mov.w	r2, #0
    dc00:	2303      	movs	r3, #3
    dc02:	f363 0207 	bfi	r2, r3, #0, #8
    dc06:	f364 128f 	bfi	r2, r4, #6, #10
    dc0a:	4932      	ldr	r1, [pc, #200]	; (dcd4 <request_nb_iot_network_stats+0x2fc>)
    dc0c:	4832      	ldr	r0, [pc, #200]	; (dcd8 <request_nb_iot_network_stats+0x300>)
    dc0e:	f00e fe87 	bl	1c920 <log_1>
		return -1;
	}
	k_sleep(K_SECONDS(2));
    dc12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    dc16:	f00e fade 	bl	1c1d6 <k_sleep>
	close(at_sock);
    dc1a:	4628      	mov	r0, r5
    dc1c:	f7fe ffca 	bl	cbb4 <close>
	LOG_INF("NB-IoT network stats requested.");
    dc20:	2303      	movs	r3, #3
    dc22:	f04f 0100 	mov.w	r1, #0
    dc26:	f363 0107 	bfi	r1, r3, #0, #8
    dc2a:	482c      	ldr	r0, [pc, #176]	; (dcdc <request_nb_iot_network_stats+0x304>)
    dc2c:	f364 118f 	bfi	r1, r4, #6, #10
    dc30:	f00e fe69 	bl	1c906 <log_0>
	
	return 0;
    dc34:	2000      	movs	r0, #0
}
    dc36:	b029      	add	sp, #164	; 0xa4
    dc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				neighbors[i] = pos1[i];
    dc3c:	f817 300a 	ldrb.w	r3, [r7, sl]
    dc40:	f80b 300a 	strb.w	r3, [fp, sl]
    dc44:	e7cb      	b.n	dbde <request_nb_iot_network_stats+0x206>
			LOG_INF("No neighbors found.");
    dc46:	2303      	movs	r3, #3
    dc48:	f04f 0100 	mov.w	r1, #0
    dc4c:	f363 0107 	bfi	r1, r3, #0, #8
    dc50:	f364 118f 	bfi	r1, r4, #6, #10
    dc54:	4822      	ldr	r0, [pc, #136]	; (dce0 <request_nb_iot_network_stats+0x308>)
    dc56:	f00e fe56 	bl	1c906 <log_0>
			neighbors[0] = '\0';
    dc5a:	4b1e      	ldr	r3, [pc, #120]	; (dcd4 <request_nb_iot_network_stats+0x2fc>)
    dc5c:	701e      	strb	r6, [r3, #0]
    dc5e:	e7d8      	b.n	dc12 <request_nb_iot_network_stats+0x23a>
	else if (strstr(buffer, "ERROR") != NULL) 
    dc60:	4912      	ldr	r1, [pc, #72]	; (dcac <request_nb_iot_network_stats+0x2d4>)
    dc62:	a802      	add	r0, sp, #8
    dc64:	f00f fb35 	bl	1d2d2 <strstr>
    dc68:	2800      	cmp	r0, #0
    dc6a:	d0d2      	beq.n	dc12 <request_nb_iot_network_stats+0x23a>
		LOG_ERR("Error while getting neighbor data!");
    dc6c:	f04f 0100 	mov.w	r1, #0
    dc70:	2301      	movs	r3, #1
    dc72:	f363 0107 	bfi	r1, r3, #0, #8
    dc76:	f364 118f 	bfi	r1, r4, #6, #10
    dc7a:	481a      	ldr	r0, [pc, #104]	; (dce4 <request_nb_iot_network_stats+0x30c>)
    dc7c:	e6dd      	b.n	da3a <request_nb_iot_network_stats+0x62>
    dc7e:	bf00      	nop
    dc80:	0001f184 	.word	0x0001f184
    dc84:	0001f10c 	.word	0x0001f10c
    dc88:	0001fcdb 	.word	0x0001fcdb
    dc8c:	0001fcfe 	.word	0x0001fcfe
    dc90:	0001fd08 	.word	0x0001fd08
    dc94:	0001ff8a 	.word	0x0001ff8a
    dc98:	0001fd19 	.word	0x0001fd19
    dc9c:	2002646c 	.word	0x2002646c
    dca0:	0001fd1d 	.word	0x0001fd1d
    dca4:	0001fd5d 	.word	0x0001fd5d
    dca8:	0001fd65 	.word	0x0001fd65
    dcac:	0001fd32 	.word	0x0001fd32
    dcb0:	0001fd38 	.word	0x0001fd38
    dcb4:	0001fb64 	.word	0x0001fb64
    dcb8:	20026476 	.word	0x20026476
    dcbc:	0001fd75 	.word	0x0001fd75
    dcc0:	0001fda9 	.word	0x0001fda9
    dcc4:	0001fdb5 	.word	0x0001fdb5
    dcc8:	0001fd87 	.word	0x0001fd87
    dccc:	0001fdac 	.word	0x0001fdac
    dcd0:	0001fdc9 	.word	0x0001fdc9
    dcd4:	20026477 	.word	0x20026477
    dcd8:	0001fdd5 	.word	0x0001fdd5
    dcdc:	0001fe1b 	.word	0x0001fe1b
    dce0:	0001fde4 	.word	0x0001fde4
    dce4:	0001fdf8 	.word	0x0001fdf8

0000dce8 <slm_at_tcpip_init>:


/**@brief API to initialize TCP/IP AT commands handler
 */
int slm_at_tcpip_init(at_cmd_handler_t callback)
{
    dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcec:	4b4d      	ldr	r3, [pc, #308]	; (de24 <slm_at_tcpip_init+0x13c>)
    dcee:	4c4e      	ldr	r4, [pc, #312]	; (de28 <slm_at_tcpip_init+0x140>)
    dcf0:	b0a7      	sub	sp, #156	; 0x9c
    dcf2:	1ae4      	subs	r4, r4, r3
    dcf4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    dcf8:	b970      	cbnz	r0, dd18 <slm_at_tcpip_init+0x30>
		LOG_ERR("No callback");
    dcfa:	2301      	movs	r3, #1
    dcfc:	f04f 0100 	mov.w	r1, #0
    dd00:	f363 0107 	bfi	r1, r3, #0, #8
    dd04:	4849      	ldr	r0, [pc, #292]	; (de2c <slm_at_tcpip_init+0x144>)
    dd06:	f364 118f 	bfi	r1, r4, #6, #10
    dd0a:	f00e fdfc 	bl	1c906 <log_0>
		return -EINVAL;
    dd0e:	f06f 0015 	mvn.w	r0, #21
	init_nb_iot_parameters();
	do_socket_open(2);
	////////////////////////////////////////////////////////////////////

	return 0;
}
    dd12:	b027      	add	sp, #156	; 0x9c
    dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	client.sock = INVALID_SOCKET;
    dd18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	client.ip_proto = IPPROTO_IP;
    dd1c:	2500      	movs	r5, #0
	client.sock = INVALID_SOCKET;
    dd1e:	4b44      	ldr	r3, [pc, #272]	; (de30 <slm_at_tcpip_init+0x148>)
	LOG_INF("Initializing NB-IoT Parameters");
    dd20:	f04f 0100 	mov.w	r1, #0
	client.sock = INVALID_SOCKET;
    dd24:	601a      	str	r2, [r3, #0]
	client.callback = callback;
    dd26:	6098      	str	r0, [r3, #8]
	client.ip_proto = IPPROTO_IP;
    dd28:	809d      	strh	r5, [r3, #4]
	LOG_INF("Initializing NB-IoT Parameters");
    dd2a:	2303      	movs	r3, #3
    dd2c:	f363 0107 	bfi	r1, r3, #0, #8
    dd30:	f364 118f 	bfi	r1, r4, #6, #10
    dd34:	483f      	ldr	r0, [pc, #252]	; (de34 <slm_at_tcpip_init+0x14c>)
    dd36:	f00e fde6 	bl	1c906 <log_0>
	char buffer[150] = {0};
    dd3a:	2296      	movs	r2, #150	; 0x96
    dd3c:	4629      	mov	r1, r5
    dd3e:	4668      	mov	r0, sp
    dd40:	f00f fb81 	bl	1d446 <memset>
	at_sock = socket(AF_LTE, 0, NPROTO_AT);
    dd44:	f240 2201 	movw	r2, #513	; 0x201
    dd48:	4629      	mov	r1, r5
    dd4a:	2066      	movs	r0, #102	; 0x66
    dd4c:	f7fe ff2c 	bl	cba8 <socket>
	if (at_sock < 0) {
    dd50:	1e06      	subs	r6, r0, #0
    dd52:	db28      	blt.n	dda6 <slm_at_tcpip_init+0xbe>
    dd54:	4f38      	ldr	r7, [pc, #224]	; (de38 <slm_at_tcpip_init+0x150>)
		LOG_INF("%s",nb_init_at_commands[i]);
    dd56:	f8df b0f0 	ldr.w	fp, [pc, #240]	; de48 <slm_at_tcpip_init+0x160>
		if (memcmp(buffer, "OK", 2) != 0) {
    dd5a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; de4c <slm_at_tcpip_init+0x164>
		LOG_INF("%s",nb_init_at_commands[i]);
    dd5e:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    dd62:	f043 0303 	orr.w	r3, r3, #3
    dd66:	f363 0907 	bfi	r9, r3, #0, #8
    dd6a:	f364 198f 	bfi	r9, r4, #6, #10
    dd6e:	464a      	mov	r2, r9
    dd70:	4639      	mov	r1, r7
    dd72:	4658      	mov	r0, fp
    dd74:	f00e fdd4 	bl	1c920 <log_1>
		bytes_sent = send(at_sock, nb_init_at_commands[i],
    dd78:	4638      	mov	r0, r7
    dd7a:	f00f faff 	bl	1d37c <strlen>
    dd7e:	4639      	mov	r1, r7
    dd80:	4602      	mov	r2, r0
    dd82:	4630      	mov	r0, r6
    dd84:	f7ff f82a 	bl	cddc <send.constprop.10>
		if (bytes_sent < 0) {
    dd88:	2800      	cmp	r0, #0
    dd8a:	da11      	bge.n	ddb0 <slm_at_tcpip_init+0xc8>
			LOG_INF("NO BYTES SENT");
    dd8c:	f04f 0100 	mov.w	r1, #0
    dd90:	2303      	movs	r3, #3
    dd92:	482a      	ldr	r0, [pc, #168]	; (de3c <slm_at_tcpip_init+0x154>)
    dd94:	f363 0107 	bfi	r1, r3, #0, #8
    dd98:	f364 118f 	bfi	r1, r4, #6, #10
			LOG_INF("NOK");
    dd9c:	f00e fdb3 	bl	1c906 <log_0>
			close(at_sock);
    dda0:	4630      	mov	r0, r6
    dda2:	f7fe ff07 	bl	cbb4 <close>
	do_socket_open(2);
    dda6:	2002      	movs	r0, #2
    dda8:	f7fe ff48 	bl	cc3c <do_socket_open>
	return 0;
    ddac:	2000      	movs	r0, #0
    ddae:	e7b0      	b.n	dd12 <slm_at_tcpip_init+0x2a>
			bytes_received = recv(at_sock, buffer, 2, 0);
    ddb0:	2202      	movs	r2, #2
    ddb2:	4669      	mov	r1, sp
    ddb4:	4630      	mov	r0, r6
    ddb6:	f7ff f88f 	bl	ced8 <recv.constprop.12>
		} while (bytes_received == 0);
    ddba:	2800      	cmp	r0, #0
    ddbc:	d0f8      	beq.n	ddb0 <slm_at_tcpip_init+0xc8>
		if (memcmp(buffer, "OK", 2) != 0) {
    ddbe:	2202      	movs	r2, #2
    ddc0:	4651      	mov	r1, sl
    ddc2:	4668      	mov	r0, sp
    ddc4:	f00f fb05 	bl	1d3d2 <memcmp>
    ddc8:	b140      	cbz	r0, dddc <slm_at_tcpip_init+0xf4>
			LOG_INF("NOK");
    ddca:	f04f 0100 	mov.w	r1, #0
    ddce:	2303      	movs	r3, #3
    ddd0:	f363 0107 	bfi	r1, r3, #0, #8
    ddd4:	f364 118f 	bfi	r1, r4, #6, #10
    ddd8:	4819      	ldr	r0, [pc, #100]	; (de40 <slm_at_tcpip_init+0x158>)
    ddda:	e7df      	b.n	dd9c <slm_at_tcpip_init+0xb4>
			LOG_INF("OK");
    dddc:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    dde0:	f043 0303 	orr.w	r3, r3, #3
    dde4:	f363 0807 	bfi	r8, r3, #0, #8
    dde8:	f364 188f 	bfi	r8, r4, #6, #10
    ddec:	4641      	mov	r1, r8
    ddee:	4650      	mov	r0, sl
    ddf0:	f00e fd89 	bl	1c906 <log_0>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    ddf4:	3501      	adds	r5, #1
		k_sleep(K_SECONDS(3));
    ddf6:	f640 30b8 	movw	r0, #3000	; 0xbb8
    ddfa:	f00e f9ec 	bl	1c1d6 <k_sleep>
	for (int i = 0; i < ARRAY_SIZE(nb_init_at_commands); i++) {
    ddfe:	2d04      	cmp	r5, #4
    de00:	f107 0728 	add.w	r7, r7, #40	; 0x28
    de04:	d1ab      	bne.n	dd5e <slm_at_tcpip_init+0x76>
	close(at_sock);
    de06:	4630      	mov	r0, r6
    de08:	f7fe fed4 	bl	cbb4 <close>
	LOG_INF("NB-IoT Parameters Initialized");
    de0c:	2303      	movs	r3, #3
    de0e:	f04f 0100 	mov.w	r1, #0
    de12:	f363 0107 	bfi	r1, r3, #0, #8
    de16:	f364 118f 	bfi	r1, r4, #6, #10
    de1a:	480a      	ldr	r0, [pc, #40]	; (de44 <slm_at_tcpip_init+0x15c>)
    de1c:	f00e fd73 	bl	1c906 <log_0>
	return 0;
    de20:	e7c1      	b.n	dda6 <slm_at_tcpip_init+0xbe>
    de22:	bf00      	nop
    de24:	0001f10c 	.word	0x0001f10c
    de28:	0001f184 	.word	0x0001f184
    de2c:	0001ff50 	.word	0x0001ff50
    de30:	20020108 	.word	0x20020108
    de34:	0001ff5c 	.word	0x0001ff5c
    de38:	0001fc04 	.word	0x0001fc04
    de3c:	0001ff7b 	.word	0x0001ff7b
    de40:	0001ff89 	.word	0x0001ff89
    de44:	0001ff8d 	.word	0x0001ff8d
    de48:	00020b67 	.word	0x00020b67
    de4c:	0001ff8a 	.word	0x0001ff8a

0000de50 <send_message>:
/** If GPS has fix, save NMEA data and toggle PSM to request network stats:
 *  Current and neighbor's Cell ID + RSRP.
 */
void send_message(void)
{
	LOG_INF("--------BEGIN-----------");
    de50:	2303      	movs	r3, #3
    de52:	f04f 0100 	mov.w	r1, #0
{
    de56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("--------BEGIN-----------");
    de5a:	f363 0107 	bfi	r1, r3, #0, #8
    de5e:	4c79      	ldr	r4, [pc, #484]	; (e044 <send_message+0x1f4>)
    de60:	4b79      	ldr	r3, [pc, #484]	; (e048 <send_message+0x1f8>)
{
    de62:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
	LOG_INF("--------BEGIN-----------");
    de66:	1ae4      	subs	r4, r4, r3
    de68:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    de6c:	f364 118f 	bfi	r1, r4, #6, #10
    de70:	4876      	ldr	r0, [pc, #472]	; (e04c <send_message+0x1fc>)
    de72:	f00e fd48 	bl	1c906 <log_0>

	while (strstr(gps_data.nmea, "GPGGA") == NULL)
    de76:	4f76      	ldr	r7, [pc, #472]	; (e050 <send_message+0x200>)
    de78:	4e76      	ldr	r6, [pc, #472]	; (e054 <send_message+0x204>)
	{
		k_sleep(K_SECONDS(2));
		LOG_INF("NO FIX YET, NMEA = ", gps_data.nmea);
    de7a:	f8df 8218 	ldr.w	r8, [pc, #536]	; e094 <send_message+0x244>
	while (strstr(gps_data.nmea, "GPGGA") == NULL)
    de7e:	4639      	mov	r1, r7
    de80:	4630      	mov	r0, r6
    de82:	f00f fa26 	bl	1d2d2 <strstr>
    de86:	2800      	cmp	r0, #0
    de88:	f000 80bf 	beq.w	e00a <send_message+0x1ba>
	}
	LOG_INF("NMEA = ", gps_data.nmea);
    de8c:	2303      	movs	r3, #3
    de8e:	f04f 0200 	mov.w	r2, #0
    de92:	f363 0207 	bfi	r2, r3, #0, #8
    de96:	f364 128f 	bfi	r2, r4, #6, #10
    de9a:	496e      	ldr	r1, [pc, #440]	; (e054 <send_message+0x204>)
    de9c:	486e      	ldr	r0, [pc, #440]	; (e058 <send_message+0x208>)
    de9e:	f00e fd3f 	bl	1c920 <log_1>

	// if(gps_client_inst.has_fix == 1)
	// {
		LOG_INF("GPS client running = %d", gps_client_inst.running);
    dea2:	2303      	movs	r3, #3
    dea4:	f04f 0200 	mov.w	r2, #0
    dea8:	4d6c      	ldr	r5, [pc, #432]	; (e05c <send_message+0x20c>)
    deaa:	f363 0207 	bfi	r2, r3, #0, #8
    deae:	79a9      	ldrb	r1, [r5, #6]
    deb0:	f364 128f 	bfi	r2, r4, #6, #10
    deb4:	486a      	ldr	r0, [pc, #424]	; (e060 <send_message+0x210>)
    deb6:	f00e fd33 	bl	1c920 <log_1>
		LOG_INF("GPS client has fix = %d", gps_client_inst.has_fix);
    deba:	2303      	movs	r3, #3
    debc:	f04f 0200 	mov.w	r2, #0
    dec0:	f363 0207 	bfi	r2, r3, #0, #8
    dec4:	79e9      	ldrb	r1, [r5, #7]
    dec6:	f364 128f 	bfi	r2, r4, #6, #10
    deca:	4866      	ldr	r0, [pc, #408]	; (e064 <send_message+0x214>)
    decc:	f00e fd28 	bl	1c920 <log_1>
		LOG_INF("GPS data PVT flags = %d", gps_data.pvt.flags);
    ded0:	2303      	movs	r3, #3
    ded2:	f04f 0200 	mov.w	r2, #0
    ded6:	4d64      	ldr	r5, [pc, #400]	; (e068 <send_message+0x218>)
    ded8:	f363 0207 	bfi	r2, r3, #0, #8
    dedc:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
    dee0:	f364 128f 	bfi	r2, r4, #6, #10
    dee4:	4861      	ldr	r0, [pc, #388]	; (e06c <send_message+0x21c>)
    dee6:	f00e fd1b 	bl	1c920 <log_1>
		LOG_INF("NMEA = ", gps_data.nmea);
    deea:	2303      	movs	r3, #3
    deec:	f04f 0200 	mov.w	r2, #0
    def0:	f363 0207 	bfi	r2, r3, #0, #8
    def4:	f364 128f 	bfi	r2, r4, #6, #10
    def8:	f105 0108 	add.w	r1, r5, #8
    defc:	4856      	ldr	r0, [pc, #344]	; (e058 <send_message+0x208>)
    defe:	f00e fd0f 	bl	1c920 <log_1>

		int temp = (int) gps_data.pvt.latitude;
    df02:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    df06:	f7fe f98b 	bl	c220 <__aeabi_d2iz>
		LOG_INF("latitude = %d !!!", temp);
    df0a:	2303      	movs	r3, #3
    df0c:	f04f 0200 	mov.w	r2, #0
    df10:	f363 0207 	bfi	r2, r3, #0, #8
    df14:	4601      	mov	r1, r0
    df16:	f364 128f 	bfi	r2, r4, #6, #10
    df1a:	4855      	ldr	r0, [pc, #340]	; (e070 <send_message+0x220>)
    df1c:	f00e fd00 	bl	1c920 <log_1>

		char nmea_sentence[200]={0}; // "$GPGGA,092204.999,4250.5589,S,14718.5084,E,1,04,24.4,19.7,M,,,,0000*1F";
    df20:	22c8      	movs	r2, #200	; 0xc8
    df22:	2100      	movs	r1, #0
    df24:	a801      	add	r0, sp, #4
    df26:	f00f fa8e 	bl	1d446 <memset>
		strncpy(nmea_sentence, gps_data.nmea, strlen(gps_data.nmea));
    df2a:	f105 0008 	add.w	r0, r5, #8
    df2e:	f00f fa25 	bl	1d37c <strlen>
    df32:	f105 0108 	add.w	r1, r5, #8
    df36:	4602      	mov	r2, r0
    df38:	a801      	add	r0, sp, #4
    df3a:	f00f f9f1 	bl	1d320 <strncpy>
		LOG_INF("NMEA SENTENCE = %s (LENGTH = %d)", nmea_sentence, strlen(nmea_sentence));
    df3e:	f04f 0500 	mov.w	r5, #0
    df42:	2303      	movs	r3, #3
    df44:	a801      	add	r0, sp, #4
    df46:	f363 0507 	bfi	r5, r3, #0, #8
    df4a:	f00f fa17 	bl	1d37c <strlen>
    df4e:	f364 158f 	bfi	r5, r4, #6, #10
    df52:	4602      	mov	r2, r0
    df54:	a901      	add	r1, sp, #4
    df56:	462b      	mov	r3, r5
    df58:	4846      	ldr	r0, [pc, #280]	; (e074 <send_message+0x224>)
    df5a:	f00e fcf5 	bl	1c948 <log_2>

		disable_PSM();
    df5e:	f7ff fcd1 	bl	d904 <disable_PSM>
		k_sleep(K_SECONDS(2));
    df62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    df66:	f00e f936 	bl	1c1d6 <k_sleep>

		int error = request_nb_iot_network_stats();
    df6a:	f7ff fd35 	bl	d9d8 <request_nb_iot_network_stats>
		if(error == 0)
    df6e:	4601      	mov	r1, r0
    df70:	2800      	cmp	r0, #0
    df72:	d15c      	bne.n	e02e <send_message+0x1de>
		{
			// Put all data in a buffer
			char payloadstring[500] = {0};
    df74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    df78:	a833      	add	r0, sp, #204	; 0xcc
    df7a:	f00f fa64 	bl	1d446 <memset>

			strcat(payloadstring, current_cell_id);
    df7e:	493e      	ldr	r1, [pc, #248]	; (e078 <send_message+0x228>)
    df80:	a833      	add	r0, sp, #204	; 0xcc
    df82:	f00f fa1d 	bl	1d3c0 <strcat>
			strcat(payloadstring, ";");
    df86:	493d      	ldr	r1, [pc, #244]	; (e07c <send_message+0x22c>)
    df88:	a833      	add	r0, sp, #204	; 0xcc
    df8a:	f00f fa19 	bl	1d3c0 <strcat>

			char* rsrp = (char*) &current_rsrp;
			strcat(payloadstring, rsrp);
    df8e:	493c      	ldr	r1, [pc, #240]	; (e080 <send_message+0x230>)
    df90:	a833      	add	r0, sp, #204	; 0xcc
    df92:	f00f fa15 	bl	1d3c0 <strcat>
			strcat(payloadstring, ";");
    df96:	4939      	ldr	r1, [pc, #228]	; (e07c <send_message+0x22c>)
    df98:	a833      	add	r0, sp, #204	; 0xcc
    df9a:	f00f fa11 	bl	1d3c0 <strcat>

			if(neighbors[0] != '\0')
    df9e:	4939      	ldr	r1, [pc, #228]	; (e084 <send_message+0x234>)
    dfa0:	780b      	ldrb	r3, [r1, #0]
    dfa2:	b113      	cbz	r3, dfaa <send_message+0x15a>
				strcat(payloadstring, neighbors);
    dfa4:	a833      	add	r0, sp, #204	; 0xcc
    dfa6:	f00f fa0b 	bl	1d3c0 <strcat>
			strcat(payloadstring, ";");
    dfaa:	4934      	ldr	r1, [pc, #208]	; (e07c <send_message+0x22c>)
    dfac:	a833      	add	r0, sp, #204	; 0xcc
    dfae:	f00f fa07 	bl	1d3c0 <strcat>
			
			strcat(payloadstring, nmea_sentence);
    dfb2:	a901      	add	r1, sp, #4
    dfb4:	a833      	add	r0, sp, #204	; 0xcc
    dfb6:	f00f fa03 	bl	1d3c0 <strcat>
			strcat(payloadstring, ";");
    dfba:	4930      	ldr	r1, [pc, #192]	; (e07c <send_message+0x22c>)
    dfbc:	a833      	add	r0, sp, #204	; 0xcc
    dfbe:	f00f f9ff 	bl	1d3c0 <strcat>

			// Send message to UDP server
			//do_udp_sendto("nbiot.idlab.uantwerpen.be", 1270, payloadstring);
			LOG_INF("MESSAGE SENT: \"%s\" (LENGTH = %d)", payloadstring, strlen(payloadstring));
    dfc2:	f04f 0500 	mov.w	r5, #0
    dfc6:	2303      	movs	r3, #3
    dfc8:	a833      	add	r0, sp, #204	; 0xcc
    dfca:	f363 0507 	bfi	r5, r3, #0, #8
    dfce:	f00f f9d5 	bl	1d37c <strlen>
    dfd2:	f364 158f 	bfi	r5, r4, #6, #10
    dfd6:	4602      	mov	r2, r0
    dfd8:	462b      	mov	r3, r5
    dfda:	482b      	ldr	r0, [pc, #172]	; (e088 <send_message+0x238>)
    dfdc:	a933      	add	r1, sp, #204	; 0xcc
    dfde:	f00e fcb3 	bl	1c948 <log_2>

			enable_PSM();
    dfe2:	f7ff fc25 	bl	d830 <enable_PSM>
			k_sleep(K_SECONDS(5));
    dfe6:	f241 3088 	movw	r0, #5000	; 0x1388
    dfea:	f00e f8f4 	bl	1c1d6 <k_sleep>
			
	// } else 
	// {
	// 	LOG_INF("Waiting for GPS fix ...");
	// }
	LOG_INF("---------END-----------");
    dfee:	2303      	movs	r3, #3
    dff0:	f04f 0100 	mov.w	r1, #0
    dff4:	f363 0107 	bfi	r1, r3, #0, #8
    dff8:	f364 118f 	bfi	r1, r4, #6, #10
    dffc:	4823      	ldr	r0, [pc, #140]	; (e08c <send_message+0x23c>)
    dffe:	f00e fc82 	bl	1c906 <log_0>
}
    e002:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
    e006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_sleep(K_SECONDS(2));
    e00a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    e00e:	f00e f8e2 	bl	1c1d6 <k_sleep>
		LOG_INF("NO FIX YET, NMEA = ", gps_data.nmea);
    e012:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
    e016:	f043 0303 	orr.w	r3, r3, #3
    e01a:	f363 0507 	bfi	r5, r3, #0, #8
    e01e:	f364 158f 	bfi	r5, r4, #6, #10
    e022:	462a      	mov	r2, r5
    e024:	4631      	mov	r1, r6
    e026:	4640      	mov	r0, r8
    e028:	f00e fc7a 	bl	1c920 <log_1>
    e02c:	e727      	b.n	de7e <send_message+0x2e>
			LOG_ERR("Unexpected ERROR, try rebooting the device.");
    e02e:	2301      	movs	r3, #1
    e030:	f04f 0100 	mov.w	r1, #0
    e034:	f363 0107 	bfi	r1, r3, #0, #8
    e038:	f364 118f 	bfi	r1, r4, #6, #10
    e03c:	4814      	ldr	r0, [pc, #80]	; (e090 <send_message+0x240>)
    e03e:	f00e fc62 	bl	1c906 <log_0>
    e042:	e7d4      	b.n	dfee <send_message+0x19e>
    e044:	0001f184 	.word	0x0001f184
    e048:	0001f10c 	.word	0x0001f10c
    e04c:	0001fe3b 	.word	0x0001fe3b
    e050:	0001fe68 	.word	0x0001fe68
    e054:	20020008 	.word	0x20020008
    e058:	0001fe60 	.word	0x0001fe60
    e05c:	20020114 	.word	0x20020114
    e060:	0001fe6e 	.word	0x0001fe6e
    e064:	0001fe86 	.word	0x0001fe86
    e068:	20020000 	.word	0x20020000
    e06c:	0001fe9e 	.word	0x0001fe9e
    e070:	0001feb6 	.word	0x0001feb6
    e074:	0001fec8 	.word	0x0001fec8
    e078:	2002646c 	.word	0x2002646c
    e07c:	0001fee9 	.word	0x0001fee9
    e080:	20026476 	.word	0x20026476
    e084:	20026477 	.word	0x20026477
    e088:	0001feeb 	.word	0x0001feeb
    e08c:	0001ff38 	.word	0x0001ff38
    e090:	0001ff0c 	.word	0x0001ff0c
    e094:	0001fe54 	.word	0x0001fe54

0000e098 <close>:
	return socket_ops->close(sock);
    e098:	4b01      	ldr	r3, [pc, #4]	; (e0a0 <close+0x8>)
    e09a:	681b      	ldr	r3, [r3, #0]
    e09c:	685b      	ldr	r3, [r3, #4]
    e09e:	4718      	bx	r3
    e0a0:	2002031c 	.word	0x2002031c

0000e0a4 <do_gps_stop>:

	return -errno;
}

static int do_gps_stop(void)
{
    e0a4:	b530      	push	{r4, r5, lr}
	int ret = 0;
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e0a6:	2400      	movs	r4, #0

	if (gps_client_inst.sock != INVALID_SOCKET) {
    e0a8:	4d1a      	ldr	r5, [pc, #104]	; (e114 <do_gps_stop+0x70>)
{
    e0aa:	b085      	sub	sp, #20
	if (gps_client_inst.sock != INVALID_SOCKET) {
    e0ac:	6828      	ldr	r0, [r5, #0]
	nrf_gnss_delete_mask_t	delete_mask  = 0;
    e0ae:	9403      	str	r4, [sp, #12]
	if (gps_client_inst.sock != INVALID_SOCKET) {
    e0b0:	1c43      	adds	r3, r0, #1
    e0b2:	d020      	beq.n	e0f6 <do_gps_stop+0x52>
		ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e0b4:	2304      	movs	r3, #4
    e0b6:	2208      	movs	r2, #8
    e0b8:	9300      	str	r3, [sp, #0]
    e0ba:	f44f 7101 	mov.w	r1, #516	; 0x204
    e0be:	ab03      	add	r3, sp, #12
    e0c0:	f009 f80a 	bl	170d8 <nrf_setsockopt>
			NRF_SO_GNSS_STOP, &delete_mask, sizeof(delete_mask));
		if (ret != 0) {
    e0c4:	4604      	mov	r4, r0
    e0c6:	b1c8      	cbz	r0, e0fc <do_gps_stop+0x58>
			LOG_ERR("Failed to stop GPS (err: %d)", -errno);
    e0c8:	2301      	movs	r3, #1
    e0ca:	f04f 0400 	mov.w	r4, #0
    e0ce:	4a12      	ldr	r2, [pc, #72]	; (e118 <do_gps_stop+0x74>)
    e0d0:	f363 0407 	bfi	r4, r3, #0, #8
    e0d4:	4b11      	ldr	r3, [pc, #68]	; (e11c <do_gps_stop+0x78>)
    e0d6:	1a9b      	subs	r3, r3, r2
    e0d8:	08db      	lsrs	r3, r3, #3
    e0da:	f363 148f 	bfi	r4, r3, #6, #10
    e0de:	f00e f87f 	bl	1c1e0 <z_errno>
    e0e2:	6801      	ldr	r1, [r0, #0]
    e0e4:	4622      	mov	r2, r4
    e0e6:	4249      	negs	r1, r1
    e0e8:	480d      	ldr	r0, [pc, #52]	; (e120 <do_gps_stop+0x7c>)
    e0ea:	f00e fc19 	bl	1c920 <log_1>
			ret = -errno;
    e0ee:	f00e f877 	bl	1c1e0 <z_errno>
    e0f2:	6804      	ldr	r4, [r0, #0]
    e0f4:	4264      	negs	r4, r4
		}

	}

	return ret;
}
    e0f6:	4620      	mov	r0, r4
    e0f8:	b005      	add	sp, #20
    e0fa:	bd30      	pop	{r4, r5, pc}
			k_thread_suspend(gps_thread_id);
    e0fc:	4b09      	ldr	r3, [pc, #36]	; (e124 <do_gps_stop+0x80>)
    e0fe:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
    e100:	f00d fdcc 	bl	1bc9c <z_impl_k_thread_suspend>
			nrf_close(gps_client_inst.sock);
    e104:	6828      	ldr	r0, [r5, #0]
    e106:	f008 ff23 	bl	16f50 <nrf_close>
			gps_client_inst.running = false;
    e10a:	71ac      	strb	r4, [r5, #6]
			gps_client_inst.callback("#XGPSRUN: 0\r\n");
    e10c:	68ab      	ldr	r3, [r5, #8]
    e10e:	4806      	ldr	r0, [pc, #24]	; (e128 <do_gps_stop+0x84>)
    e110:	4798      	blx	r3
			LOG_DBG("GPS stopped");
    e112:	e7f0      	b.n	e0f6 <do_gps_stop+0x52>
    e114:	20020114 	.word	0x20020114
    e118:	0001f10c 	.word	0x0001f10c
    e11c:	0001f144 	.word	0x0001f144
    e120:	000200ef 	.word	0x000200ef
    e124:	200201d0 	.word	0x200201d0
    e128:	0002010c 	.word	0x0002010c

0000e12c <do_gps_start>:
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e12c:	2300      	movs	r3, #0
{
    e12e:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e130:	2701      	movs	r7, #1
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e132:	4d70      	ldr	r5, [pc, #448]	; (e2f4 <do_gps_start+0x1c8>)
{
    e134:	b08b      	sub	sp, #44	; 0x2c
	nrf_gnss_fix_retry_t    fix_retry    = 0; /* unlimited retry period */
    e136:	f8ad 301e 	strh.w	r3, [sp, #30]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
    e13a:	9309      	str	r3, [sp, #36]	; 0x24
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e13c:	88ab      	ldrh	r3, [r5, #4]
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e13e:	f44f 7201 	mov.w	r2, #516	; 0x204
    e142:	2102      	movs	r1, #2
    e144:	4638      	mov	r0, r7
	nrf_gnss_fix_interval_t fix_interval = 1; /* 1s delay between fixes */
    e146:	f8ad 7020 	strh.w	r7, [sp, #32]
	nrf_gnss_nmea_mask_t    nmea_mask = (nrf_gnss_nmea_mask_t)gps_client_inst.mask;
    e14a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e14e:	f008 feed 	bl	16f2c <nrf_socket>
	if (gps_client_inst.sock < 0) {
    e152:	2800      	cmp	r0, #0
	gps_client_inst.sock = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM, NRF_PROTO_GNSS);
    e154:	6028      	str	r0, [r5, #0]
	if (gps_client_inst.sock < 0) {
    e156:	da31      	bge.n	e1bc <do_gps_start+0x90>
		LOG_ERR("Could not init socket (err: %d)", -errno);
    e158:	f04f 0400 	mov.w	r4, #0
    e15c:	4a66      	ldr	r2, [pc, #408]	; (e2f8 <do_gps_start+0x1cc>)
    e15e:	4b67      	ldr	r3, [pc, #412]	; (e2fc <do_gps_start+0x1d0>)
    e160:	f367 0407 	bfi	r4, r7, #0, #8
    e164:	1a9b      	subs	r3, r3, r2
    e166:	08db      	lsrs	r3, r3, #3
    e168:	f363 148f 	bfi	r4, r3, #6, #10
    e16c:	f00e f838 	bl	1c1e0 <z_errno>
    e170:	6801      	ldr	r1, [r0, #0]
    e172:	4622      	mov	r2, r4
    e174:	4249      	negs	r1, r1
    e176:	4862      	ldr	r0, [pc, #392]	; (e300 <do_gps_start+0x1d4>)
    e178:	f00e fbd2 	bl	1c920 <log_1>
	int ret = -EINVAL;
    e17c:	f06f 0415 	mvn.w	r4, #21
	LOG_ERR("GPS start failed: %d", ret);
    e180:	2301      	movs	r3, #1
    e182:	f04f 0200 	mov.w	r2, #0
    e186:	495c      	ldr	r1, [pc, #368]	; (e2f8 <do_gps_start+0x1cc>)
    e188:	f363 0207 	bfi	r2, r3, #0, #8
    e18c:	4b5b      	ldr	r3, [pc, #364]	; (e2fc <do_gps_start+0x1d0>)
    e18e:	485d      	ldr	r0, [pc, #372]	; (e304 <do_gps_start+0x1d8>)
    e190:	1a5b      	subs	r3, r3, r1
    e192:	08db      	lsrs	r3, r3, #3
    e194:	f363 128f 	bfi	r2, r3, #6, #10
    e198:	4621      	mov	r1, r4
    e19a:	f00e fbc1 	bl	1c920 <log_1>
	sprintf(buf, "#XGPSRUN: %d\r\n", ret);
    e19e:	4622      	mov	r2, r4
    e1a0:	4959      	ldr	r1, [pc, #356]	; (e308 <do_gps_start+0x1dc>)
    e1a2:	485a      	ldr	r0, [pc, #360]	; (e30c <do_gps_start+0x1e0>)
    e1a4:	f002 fda0 	bl	10ce8 <sprintf>
	gps_client_inst.callback(buf);
    e1a8:	68ab      	ldr	r3, [r5, #8]
    e1aa:	4858      	ldr	r0, [pc, #352]	; (e30c <do_gps_start+0x1e0>)
    e1ac:	4798      	blx	r3
	gps_client_inst.running = false;
    e1ae:	2300      	movs	r3, #0
    e1b0:	71ab      	strb	r3, [r5, #6]
	return -errno;
    e1b2:	f00e f815 	bl	1c1e0 <z_errno>
    e1b6:	6804      	ldr	r4, [r0, #0]
    e1b8:	4264      	negs	r4, r4
    e1ba:	e088      	b.n	e2ce <do_gps_start+0x1a2>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_FIX_RETRY,
    e1bc:	2602      	movs	r6, #2
    e1be:	f10d 031e 	add.w	r3, sp, #30
    e1c2:	9600      	str	r6, [sp, #0]
    e1c4:	4632      	mov	r2, r6
    e1c6:	f44f 7101 	mov.w	r1, #516	; 0x204
    e1ca:	f008 ff85 	bl	170d8 <nrf_setsockopt>
	if (ret != 0) {
    e1ce:	4604      	mov	r4, r0
    e1d0:	b198      	cbz	r0, e1fa <do_gps_start+0xce>
		LOG_ERR("Failed to set fix retry value (err: %d)", -errno);
    e1d2:	2301      	movs	r3, #1
    e1d4:	f04f 0600 	mov.w	r6, #0
    e1d8:	4a47      	ldr	r2, [pc, #284]	; (e2f8 <do_gps_start+0x1cc>)
    e1da:	f363 0607 	bfi	r6, r3, #0, #8
    e1de:	4b47      	ldr	r3, [pc, #284]	; (e2fc <do_gps_start+0x1d0>)
    e1e0:	1a9b      	subs	r3, r3, r2
    e1e2:	08db      	lsrs	r3, r3, #3
    e1e4:	f363 168f 	bfi	r6, r3, #6, #10
    e1e8:	f00d fffa 	bl	1c1e0 <z_errno>
    e1ec:	4632      	mov	r2, r6
    e1ee:	6801      	ldr	r1, [r0, #0]
    e1f0:	4847      	ldr	r0, [pc, #284]	; (e310 <do_gps_start+0x1e4>)
    e1f2:	4249      	negs	r1, r1
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e1f4:	f00e fb94 	bl	1c920 <log_1>
		goto error;
    e1f8:	e7c2      	b.n	e180 <do_gps_start+0x54>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS,
    e1fa:	9600      	str	r6, [sp, #0]
    e1fc:	ab08      	add	r3, sp, #32
    e1fe:	463a      	mov	r2, r7
    e200:	f44f 7101 	mov.w	r1, #516	; 0x204
    e204:	6828      	ldr	r0, [r5, #0]
    e206:	f008 ff67 	bl	170d8 <nrf_setsockopt>
	if (ret != 0) {
    e20a:	4604      	mov	r4, r0
    e20c:	b188      	cbz	r0, e232 <do_gps_start+0x106>
		LOG_ERR("Failed to set fix interval value (err: %d)", -errno);
    e20e:	2301      	movs	r3, #1
    e210:	f04f 0600 	mov.w	r6, #0
    e214:	4a38      	ldr	r2, [pc, #224]	; (e2f8 <do_gps_start+0x1cc>)
    e216:	f363 0607 	bfi	r6, r3, #0, #8
    e21a:	4b38      	ldr	r3, [pc, #224]	; (e2fc <do_gps_start+0x1d0>)
    e21c:	1a9b      	subs	r3, r3, r2
    e21e:	08db      	lsrs	r3, r3, #3
    e220:	f363 168f 	bfi	r6, r3, #6, #10
    e224:	f00d ffdc 	bl	1c1e0 <z_errno>
    e228:	6801      	ldr	r1, [r0, #0]
    e22a:	4632      	mov	r2, r6
    e22c:	4249      	negs	r1, r1
    e22e:	4839      	ldr	r0, [pc, #228]	; (e314 <do_gps_start+0x1e8>)
    e230:	e7e0      	b.n	e1f4 <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_NMEA_MASK,
    e232:	9600      	str	r6, [sp, #0]
    e234:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    e238:	2204      	movs	r2, #4
    e23a:	f44f 7101 	mov.w	r1, #516	; 0x204
    e23e:	6828      	ldr	r0, [r5, #0]
    e240:	f008 ff4a 	bl	170d8 <nrf_setsockopt>
	if (ret != 0) {
    e244:	4604      	mov	r4, r0
    e246:	b188      	cbz	r0, e26c <do_gps_start+0x140>
		LOG_ERR("Failed to set nmea mask (err: %d)", -errno);
    e248:	2301      	movs	r3, #1
    e24a:	f04f 0600 	mov.w	r6, #0
    e24e:	4a2a      	ldr	r2, [pc, #168]	; (e2f8 <do_gps_start+0x1cc>)
    e250:	f363 0607 	bfi	r6, r3, #0, #8
    e254:	4b29      	ldr	r3, [pc, #164]	; (e2fc <do_gps_start+0x1d0>)
    e256:	1a9b      	subs	r3, r3, r2
    e258:	08db      	lsrs	r3, r3, #3
    e25a:	f363 168f 	bfi	r6, r3, #6, #10
    e25e:	f00d ffbf 	bl	1c1e0 <z_errno>
    e262:	6801      	ldr	r1, [r0, #0]
    e264:	4632      	mov	r2, r6
    e266:	4249      	negs	r1, r1
    e268:	482b      	ldr	r0, [pc, #172]	; (e318 <do_gps_start+0x1ec>)
    e26a:	e7c3      	b.n	e1f4 <do_gps_start+0xc8>
	ret = nrf_setsockopt(gps_client_inst.sock, NRF_SOL_GNSS, NRF_SO_GNSS_START,
    e26c:	2304      	movs	r3, #4
    e26e:	2207      	movs	r2, #7
    e270:	9300      	str	r3, [sp, #0]
    e272:	f44f 7101 	mov.w	r1, #516	; 0x204
    e276:	ab09      	add	r3, sp, #36	; 0x24
    e278:	6828      	ldr	r0, [r5, #0]
    e27a:	f008 ff2d 	bl	170d8 <nrf_setsockopt>
	if (ret != 0) {
    e27e:	4604      	mov	r4, r0
    e280:	b188      	cbz	r0, e2a6 <do_gps_start+0x17a>
		LOG_ERR("Failed to start GPS (err: %d)", -errno);
    e282:	2301      	movs	r3, #1
    e284:	f04f 0600 	mov.w	r6, #0
    e288:	4a1b      	ldr	r2, [pc, #108]	; (e2f8 <do_gps_start+0x1cc>)
    e28a:	f363 0607 	bfi	r6, r3, #0, #8
    e28e:	4b1b      	ldr	r3, [pc, #108]	; (e2fc <do_gps_start+0x1d0>)
    e290:	1a9b      	subs	r3, r3, r2
    e292:	08db      	lsrs	r3, r3, #3
    e294:	f363 168f 	bfi	r6, r3, #6, #10
    e298:	f00d ffa2 	bl	1c1e0 <z_errno>
    e29c:	6801      	ldr	r1, [r0, #0]
    e29e:	4632      	mov	r2, r6
    e2a0:	4249      	negs	r1, r1
    e2a2:	481e      	ldr	r0, [pc, #120]	; (e31c <do_gps_start+0x1f0>)
    e2a4:	e7a6      	b.n	e1f4 <do_gps_start+0xc8>
	if (gps_thread_id != NULL) {
    e2a6:	4e1e      	ldr	r6, [pc, #120]	; (e320 <do_gps_start+0x1f4>)
    e2a8:	6830      	ldr	r0, [r6, #0]
    e2aa:	b198      	cbz	r0, e2d4 <do_gps_start+0x1a8>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
    e2ac:	f00d fd16 	bl	1bcdc <z_impl_k_thread_resume>
	gps_client_inst.running = true;
    e2b0:	2301      	movs	r3, #1
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e2b2:	88aa      	ldrh	r2, [r5, #4]
    e2b4:	491b      	ldr	r1, [pc, #108]	; (e324 <do_gps_start+0x1f8>)
    e2b6:	4815      	ldr	r0, [pc, #84]	; (e30c <do_gps_start+0x1e0>)
	gps_client_inst.running = true;
    e2b8:	71ab      	strb	r3, [r5, #6]
	sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e2ba:	f002 fd15 	bl	10ce8 <sprintf>
	gps_client_inst.callback(buf);
    e2be:	68ab      	ldr	r3, [r5, #8]
    e2c0:	4812      	ldr	r0, [pc, #72]	; (e30c <do_gps_start+0x1e0>)
    e2c2:	4798      	blx	r3
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
    e2c4:	f010 fc65 	bl	1eb92 <z_impl_k_uptime_get>
	ttft_start = k_uptime_get();
    e2c8:	4b17      	ldr	r3, [pc, #92]	; (e328 <do_gps_start+0x1fc>)
    e2ca:	e9c3 0100 	strd	r0, r1, [r3]
}
    e2ce:	4620      	mov	r0, r4
    e2d0:	b00b      	add	sp, #44	; 0x2c
    e2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e2d4:	230e      	movs	r3, #14
    e2d6:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e2da:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e2de:	e9cd 4400 	strd	r4, r4, [sp]
    e2e2:	4b12      	ldr	r3, [pc, #72]	; (e32c <do_gps_start+0x200>)
    e2e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e2e8:	4911      	ldr	r1, [pc, #68]	; (e330 <do_gps_start+0x204>)
    e2ea:	4812      	ldr	r0, [pc, #72]	; (e334 <do_gps_start+0x208>)
    e2ec:	f00d fc82 	bl	1bbf4 <z_impl_k_thread_create>
		gps_thread_id = k_thread_create(&gps_thread, gps_thread_stack,
    e2f0:	6030      	str	r0, [r6, #0]
    e2f2:	e7dd      	b.n	e2b0 <do_gps_start+0x184>
    e2f4:	20020114 	.word	0x20020114
    e2f8:	0001f10c 	.word	0x0001f10c
    e2fc:	0001f144 	.word	0x0001f144
    e300:	00020007 	.word	0x00020007
    e304:	000200cb 	.word	0x000200cb
    e308:	000200e0 	.word	0x000200e0
    e30c:	200264db 	.word	0x200264db
    e310:	00020027 	.word	0x00020027
    e314:	0002004f 	.word	0x0002004f
    e318:	0002007a 	.word	0x0002007a
    e31c:	0002009c 	.word	0x0002009c
    e320:	200201d0 	.word	0x200201d0
    e324:	000200ba 	.word	0x000200ba
    e328:	200200d8 	.word	0x200200d8
    e32c:	0000e42d 	.word	0x0000e42d
    e330:	20026688 	.word	0x20026688
    e334:	20020120 	.word	0x20020120

0000e338 <handle_at_gpsrun>:
static int handle_at_gpsrun(enum at_cmd_type cmd_type)
{
	int err = -EINVAL;
	u16_t op;

	switch (cmd_type) {
    e338:	2801      	cmp	r0, #1
{
    e33a:	b513      	push	{r0, r1, r4, lr}
    e33c:	4604      	mov	r4, r0
	switch (cmd_type) {
    e33e:	d004      	beq.n	e34a <handle_at_gpsrun+0x12>
    e340:	2802      	cmp	r0, #2
    e342:	d04c      	beq.n	e3de <handle_at_gpsrun+0xa6>
	case AT_CMD_TYPE_SET_COMMAND:
		if (at_params_valid_count_get(&m_param_list) < 2) {
			return -EINVAL;
    e344:	f06f 0415 	mvn.w	r4, #21
    e348:	e02d      	b.n	e3a6 <handle_at_gpsrun+0x6e>
		if (at_params_valid_count_get(&m_param_list) < 2) {
    e34a:	482e      	ldr	r0, [pc, #184]	; (e404 <handle_at_gpsrun+0xcc>)
    e34c:	f010 f965 	bl	1e61a <at_params_valid_count_get>
    e350:	2801      	cmp	r0, #1
    e352:	d9f7      	bls.n	e344 <handle_at_gpsrun+0xc>
		}
		err = at_params_short_get(&m_param_list, 1, &op);
    e354:	4621      	mov	r1, r4
    e356:	f10d 0206 	add.w	r2, sp, #6
    e35a:	482a      	ldr	r0, [pc, #168]	; (e404 <handle_at_gpsrun+0xcc>)
    e35c:	f010 f928 	bl	1e5b0 <at_params_short_get>
		if (err < 0) {
    e360:	1e04      	subs	r4, r0, #0
    e362:	db20      	blt.n	e3a6 <handle_at_gpsrun+0x6e>
			return err;
		}
		if (op == 1) {
    e364:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e368:	2b01      	cmp	r3, #1
    e36a:	d123      	bne.n	e3b4 <handle_at_gpsrun+0x7c>
			if (at_params_valid_count_get(&m_param_list) > 2) {
    e36c:	4825      	ldr	r0, [pc, #148]	; (e404 <handle_at_gpsrun+0xcc>)
    e36e:	f010 f954 	bl	1e61a <at_params_valid_count_get>
    e372:	2802      	cmp	r0, #2
    e374:	d906      	bls.n	e384 <handle_at_gpsrun+0x4c>
				err = at_params_short_get(&m_param_list, 2,
    e376:	4a24      	ldr	r2, [pc, #144]	; (e408 <handle_at_gpsrun+0xd0>)
    e378:	2102      	movs	r1, #2
    e37a:	4822      	ldr	r0, [pc, #136]	; (e404 <handle_at_gpsrun+0xcc>)
    e37c:	f010 f918 	bl	1e5b0 <at_params_short_get>
							&gps_client_inst.mask);
				if (err < 0) {
    e380:	1e04      	subs	r4, r0, #0
    e382:	db10      	blt.n	e3a6 <handle_at_gpsrun+0x6e>
					return err;
				}
			}
			if (gps_client_inst.running) {
    e384:	4b21      	ldr	r3, [pc, #132]	; (e40c <handle_at_gpsrun+0xd4>)
    e386:	799b      	ldrb	r3, [r3, #6]
    e388:	b183      	cbz	r3, e3ac <handle_at_gpsrun+0x74>
				LOG_WRN("GPS is running");
    e38a:	2302      	movs	r3, #2
    e38c:	f04f 0100 	mov.w	r1, #0
    e390:	4a1f      	ldr	r2, [pc, #124]	; (e410 <handle_at_gpsrun+0xd8>)
    e392:	f363 0107 	bfi	r1, r3, #0, #8
    e396:	4b1f      	ldr	r3, [pc, #124]	; (e414 <handle_at_gpsrun+0xdc>)
    e398:	481f      	ldr	r0, [pc, #124]	; (e418 <handle_at_gpsrun+0xe0>)
    e39a:	1a9b      	subs	r3, r3, r2
    e39c:	08db      	lsrs	r3, r3, #3
    e39e:	f363 118f 	bfi	r1, r3, #6, #10
			} else {
				err = do_gps_start();
			}
		} else if (op == 0) {
			if (!gps_client_inst.running) {
				LOG_WRN("GPS is not running");
    e3a2:	f00e fab0 	bl	1c906 <log_0>
	default:
		break;
	}

	return err;
}
    e3a6:	4620      	mov	r0, r4
    e3a8:	b002      	add	sp, #8
    e3aa:	bd10      	pop	{r4, pc}
				err = do_gps_start();
    e3ac:	f7ff febe 	bl	e12c <do_gps_start>
				err = do_gps_stop();
    e3b0:	4604      	mov	r4, r0
    e3b2:	e7f8      	b.n	e3a6 <handle_at_gpsrun+0x6e>
		} else if (op == 0) {
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	d1f6      	bne.n	e3a6 <handle_at_gpsrun+0x6e>
			if (!gps_client_inst.running) {
    e3b8:	4b14      	ldr	r3, [pc, #80]	; (e40c <handle_at_gpsrun+0xd4>)
    e3ba:	799b      	ldrb	r3, [r3, #6]
    e3bc:	b963      	cbnz	r3, e3d8 <handle_at_gpsrun+0xa0>
				LOG_WRN("GPS is not running");
    e3be:	2302      	movs	r3, #2
    e3c0:	f04f 0100 	mov.w	r1, #0
    e3c4:	4a12      	ldr	r2, [pc, #72]	; (e410 <handle_at_gpsrun+0xd8>)
    e3c6:	f363 0107 	bfi	r1, r3, #0, #8
    e3ca:	4b12      	ldr	r3, [pc, #72]	; (e414 <handle_at_gpsrun+0xdc>)
    e3cc:	4813      	ldr	r0, [pc, #76]	; (e41c <handle_at_gpsrun+0xe4>)
    e3ce:	1a9b      	subs	r3, r3, r2
    e3d0:	08db      	lsrs	r3, r3, #3
    e3d2:	f363 118f 	bfi	r1, r3, #6, #10
    e3d6:	e7e4      	b.n	e3a2 <handle_at_gpsrun+0x6a>
				err = do_gps_stop();
    e3d8:	f7ff fe64 	bl	e0a4 <do_gps_stop>
    e3dc:	e7e8      	b.n	e3b0 <handle_at_gpsrun+0x78>
		if (gps_client_inst.running) {
    e3de:	4c0b      	ldr	r4, [pc, #44]	; (e40c <handle_at_gpsrun+0xd4>)
    e3e0:	79a3      	ldrb	r3, [r4, #6]
    e3e2:	b14b      	cbz	r3, e3f8 <handle_at_gpsrun+0xc0>
			sprintf(buf, "#XGPSRUN: 1,%d\r\n", gps_client_inst.mask);
    e3e4:	88a2      	ldrh	r2, [r4, #4]
    e3e6:	490e      	ldr	r1, [pc, #56]	; (e420 <handle_at_gpsrun+0xe8>)
    e3e8:	480e      	ldr	r0, [pc, #56]	; (e424 <handle_at_gpsrun+0xec>)
    e3ea:	f002 fc7d 	bl	10ce8 <sprintf>
		gps_client_inst.callback(buf);
    e3ee:	68a3      	ldr	r3, [r4, #8]
    e3f0:	480c      	ldr	r0, [pc, #48]	; (e424 <handle_at_gpsrun+0xec>)
    e3f2:	4798      	blx	r3
		err = 0;
    e3f4:	2400      	movs	r4, #0
		break;
    e3f6:	e7d6      	b.n	e3a6 <handle_at_gpsrun+0x6e>
			sprintf(buf, "#XGPSRUN: 0\r\n");
    e3f8:	490b      	ldr	r1, [pc, #44]	; (e428 <handle_at_gpsrun+0xf0>)
    e3fa:	480a      	ldr	r0, [pc, #40]	; (e424 <handle_at_gpsrun+0xec>)
    e3fc:	f002 fc74 	bl	10ce8 <sprintf>
    e400:	e7f5      	b.n	e3ee <handle_at_gpsrun+0xb6>
    e402:	bf00      	nop
    e404:	200200e8 	.word	0x200200e8
    e408:	20020118 	.word	0x20020118
    e40c:	20020114 	.word	0x20020114
    e410:	0001f10c 	.word	0x0001f10c
    e414:	0001f144 	.word	0x0001f144
    e418:	0002027f 	.word	0x0002027f
    e41c:	0002028e 	.word	0x0002028e
    e420:	000200ba 	.word	0x000200ba
    e424:	200264db 	.word	0x200264db
    e428:	0002010c 	.word	0x0002010c

0000e42c <gps_thread_fn>:
{
    e42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e430:	f8df b25c 	ldr.w	fp, [pc, #604]	; e690 <gps_thread_fn+0x264>
    e434:	4b83      	ldr	r3, [pc, #524]	; (e644 <gps_thread_fn+0x218>)
    e436:	465d      	mov	r5, fp
			LOG_INF("NMEA");
    e438:	4a83      	ldr	r2, [pc, #524]	; (e648 <gps_thread_fn+0x21c>)
{
    e43a:	b087      	sub	sp, #28
			LOG_INF("NMEA");
    e43c:	1a9b      	subs	r3, r3, r2
    e43e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e442:	4c82      	ldr	r4, [pc, #520]	; (e64c <gps_thread_fn+0x220>)
			LOG_INF("NMEA");
    e444:	9304      	str	r3, [sp, #16]
		if (nrf_recv(gps_client_inst.sock, &gps_data, sizeof(gps_data), 0)
    e446:	2300      	movs	r3, #0
    e448:	22d8      	movs	r2, #216	; 0xd8
    e44a:	4980      	ldr	r1, [pc, #512]	; (e64c <gps_thread_fn+0x220>)
    e44c:	f8db 0000 	ldr.w	r0, [fp]
    e450:	f008 fdde 	bl	17010 <nrf_recv>
    e454:	2800      	cmp	r0, #0
    e456:	dc25      	bgt.n	e4a4 <gps_thread_fn+0x78>
			LOG_ERR("GPS nrf_recv(): %d", -errno);
    e458:	2301      	movs	r3, #1
    e45a:	f04f 0400 	mov.w	r4, #0
    e45e:	f363 0407 	bfi	r4, r3, #0, #8
    e462:	9b04      	ldr	r3, [sp, #16]
    e464:	f363 148f 	bfi	r4, r3, #6, #10
    e468:	f00d feba 	bl	1c1e0 <z_errno>
    e46c:	6801      	ldr	r1, [r0, #0]
    e46e:	4622      	mov	r2, r4
    e470:	4249      	negs	r1, r1
    e472:	4877      	ldr	r0, [pc, #476]	; (e650 <gps_thread_fn+0x224>)
    e474:	f00e fa54 	bl	1c920 <log_1>
			sprintf(buf, "#XGPSRUN: %d\r\n", -errno);
    e478:	f00d feb2 	bl	1c1e0 <z_errno>
    e47c:	6802      	ldr	r2, [r0, #0]
    e47e:	4975      	ldr	r1, [pc, #468]	; (e654 <gps_thread_fn+0x228>)
    e480:	4252      	negs	r2, r2
    e482:	4875      	ldr	r0, [pc, #468]	; (e658 <gps_thread_fn+0x22c>)
    e484:	f002 fc30 	bl	10ce8 <sprintf>
			gps_client_inst.callback(buf);
    e488:	f8db 3008 	ldr.w	r3, [fp, #8]
    e48c:	4872      	ldr	r0, [pc, #456]	; (e658 <gps_thread_fn+0x22c>)
    e48e:	4798      	blx	r3
			nrf_close(gps_client_inst.sock);
    e490:	f8db 0000 	ldr.w	r0, [fp]
    e494:	f008 fd5c 	bl	16f50 <nrf_close>
			gps_client_inst.running = false;
    e498:	2300      	movs	r3, #0
    e49a:	f88b 3006 	strb.w	r3, [fp, #6]
}
    e49e:	b007      	add	sp, #28
    e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (gps_data.data_id != NRF_GNSS_PVT_DATA_ID || gps_client_inst.has_fix) {
    e4a4:	7823      	ldrb	r3, [r4, #0]
    e4a6:	2b01      	cmp	r3, #1
    e4a8:	d132      	bne.n	e510 <gps_thread_fn+0xe4>
    e4aa:	f89b 2007 	ldrb.w	r2, [fp, #7]
    e4ae:	2a00      	cmp	r2, #0
    e4b0:	d161      	bne.n	e576 <gps_thread_fn+0x14a>
	u8_t in_fix = 0;
    e4b2:	4613      	mov	r3, r2
	u8_t tracked = 0;
    e4b4:	4616      	mov	r6, r2
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e4b6:	4610      	mov	r0, r2
    e4b8:	4964      	ldr	r1, [pc, #400]	; (e64c <gps_thread_fn+0x220>)
		if ((gps_data.pvt.sv[i].sv > 0) &&
    e4ba:	f8b1 c046 	ldrh.w	ip, [r1, #70]	; 0x46
    e4be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    e4c2:	f1bc 0f1f 	cmp.w	ip, #31
    e4c6:	d80f      	bhi.n	e4e8 <gps_thread_fn+0xbc>
			tracked++;
    e4c8:	f106 0c01 	add.w	ip, r6, #1
    e4cc:	fa5f f68c 	uxtb.w	r6, ip
			if (IS_FIX(gps_data.pvt.sv[i].flags)) {
    e4d0:	f891 c050 	ldrb.w	ip, [r1, #80]	; 0x50
    e4d4:	f01c 0f01 	tst.w	ip, #1
				in_fix++;
    e4d8:	bf1c      	itt	ne
    e4da:	3301      	addne	r3, #1
    e4dc:	b2db      	uxtbne	r3, r3
			if (IS_UNHEALTHY(gps_data.pvt.sv[i].flags)) {
    e4de:	f01c 0f08 	tst.w	ip, #8
				unhealthy++;
    e4e2:	bf1c      	itt	ne
    e4e4:	3201      	addne	r2, #1
    e4e6:	b2d2      	uxtbne	r2, r2
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
    e4e8:	3001      	adds	r0, #1
    e4ea:	280c      	cmp	r0, #12
    e4ec:	f101 010c 	add.w	r1, r1, #12
    e4f0:	d1e3      	bne.n	e4ba <gps_thread_fn+0x8e>
	if (last_tracked != tracked) {
    e4f2:	495a      	ldr	r1, [pc, #360]	; (e65c <gps_thread_fn+0x230>)
    e4f4:	7809      	ldrb	r1, [r1, #0]
    e4f6:	42b1      	cmp	r1, r6
    e4f8:	d03d      	beq.n	e576 <gps_thread_fn+0x14a>
		sprintf(buf, "#XGPSS: tracking %d using %d unhealthy %d\r\n",
    e4fa:	9200      	str	r2, [sp, #0]
    e4fc:	4958      	ldr	r1, [pc, #352]	; (e660 <gps_thread_fn+0x234>)
    e4fe:	4632      	mov	r2, r6
    e500:	4855      	ldr	r0, [pc, #340]	; (e658 <gps_thread_fn+0x22c>)
    e502:	f002 fbf1 	bl	10ce8 <sprintf>
		gps_client_inst.callback(buf);
    e506:	68ab      	ldr	r3, [r5, #8]
    e508:	4853      	ldr	r0, [pc, #332]	; (e658 <gps_thread_fn+0x22c>)
    e50a:	4798      	blx	r3
		last_tracked = tracked;
    e50c:	4b53      	ldr	r3, [pc, #332]	; (e65c <gps_thread_fn+0x230>)
    e50e:	701e      	strb	r6, [r3, #0]
		switch (gps_data.data_id) {
    e510:	7823      	ldrb	r3, [r4, #0]
    e512:	2b01      	cmp	r3, #1
    e514:	d02f      	beq.n	e576 <gps_thread_fn+0x14a>
    e516:	2b02      	cmp	r3, #2
    e518:	d195      	bne.n	e446 <gps_thread_fn+0x1a>
			LOG_INF("NMEA");
    e51a:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    e51e:	f043 0303 	orr.w	r3, r3, #3
    e522:	f363 0a07 	bfi	sl, r3, #0, #8
    e526:	9b04      	ldr	r3, [sp, #16]
    e528:	484e      	ldr	r0, [pc, #312]	; (e664 <gps_thread_fn+0x238>)
    e52a:	f363 1a8f 	bfi	sl, r3, #6, #10
    e52e:	4651      	mov	r1, sl
    e530:	f00e f9e9 	bl	1c906 <log_0>
			if (gps_client_inst.has_fix) {
    e534:	79eb      	ldrb	r3, [r5, #7]
    e536:	2b00      	cmp	r3, #0
    e538:	d085      	beq.n	e446 <gps_thread_fn+0x1a>
				LOG_INF("NMEA HAS FIX");
    e53a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e53e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e542:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    e546:	f043 0303 	orr.w	r3, r3, #3
    e54a:	f363 0207 	bfi	r2, r3, #0, #8
    e54e:	f8ad 2014 	strh.w	r2, [sp, #20]
    e552:	9b04      	ldr	r3, [sp, #16]
    e554:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e558:	4843      	ldr	r0, [pc, #268]	; (e668 <gps_thread_fn+0x23c>)
    e55a:	f363 128f 	bfi	r2, r3, #6, #10
    e55e:	b291      	uxth	r1, r2
    e560:	f8ad 2014 	strh.w	r2, [sp, #20]
    e564:	f00e f9cf 	bl	1c906 <log_0>
				gps_client_inst.callback("#XGPSN: ");
    e568:	68ab      	ldr	r3, [r5, #8]
    e56a:	4840      	ldr	r0, [pc, #256]	; (e66c <gps_thread_fn+0x240>)
    e56c:	4798      	blx	r3
				gps_client_inst.callback(gps_data.nmea);
    e56e:	68ab      	ldr	r3, [r5, #8]
    e570:	483f      	ldr	r0, [pc, #252]	; (e670 <gps_thread_fn+0x244>)
    e572:	4798      	blx	r3
    e574:	e767      	b.n	e446 <gps_thread_fn+0x1a>
			LOG_INF("PVT");
    e576:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    e57a:	f043 0303 	orr.w	r3, r3, #3
    e57e:	f363 0807 	bfi	r8, r3, #0, #8
    e582:	9b04      	ldr	r3, [sp, #16]
    e584:	483b      	ldr	r0, [pc, #236]	; (e674 <gps_thread_fn+0x248>)
    e586:	f363 188f 	bfi	r8, r3, #6, #10
    e58a:	4641      	mov	r1, r8
    e58c:	f00e f9bb 	bl	1c906 <log_0>
			if (IS_FIX(gps_data.pvt.flags)) {
    e590:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    e594:	07db      	lsls	r3, r3, #31
    e596:	f57f af56 	bpl.w	e446 <gps_thread_fn+0x1a>
				LOG_INF("PVT HAS FIX");
    e59a:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    e59e:	f043 0303 	orr.w	r3, r3, #3
    e5a2:	f363 0907 	bfi	r9, r3, #0, #8
    e5a6:	9b04      	ldr	r3, [sp, #16]
    e5a8:	4833      	ldr	r0, [pc, #204]	; (e678 <gps_thread_fn+0x24c>)
    e5aa:	f363 198f 	bfi	r9, r3, #6, #10
    e5ae:	4649      	mov	r1, r9
    e5b0:	f00e f9a9 	bl	1c906 <log_0>
	LOG_INF("NOTIFY!");
    e5b4:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    e5b8:	f043 0303 	orr.w	r3, r3, #3
    e5bc:	f363 0707 	bfi	r7, r3, #0, #8
    e5c0:	9b04      	ldr	r3, [sp, #16]
    e5c2:	482e      	ldr	r0, [pc, #184]	; (e67c <gps_thread_fn+0x250>)
    e5c4:	f363 178f 	bfi	r7, r3, #6, #10
    e5c8:	4639      	mov	r1, r7
    e5ca:	f00e f99c 	bl	1c906 <log_0>
	sprintf(buf, "#XGPSP: long %f lat %f\r\n",
    e5ce:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e5d2:	e9cd 2300 	strd	r2, r3, [sp]
    e5d6:	492a      	ldr	r1, [pc, #168]	; (e680 <gps_thread_fn+0x254>)
    e5d8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    e5dc:	481e      	ldr	r0, [pc, #120]	; (e658 <gps_thread_fn+0x22c>)
    e5de:	f002 fb83 	bl	10ce8 <sprintf>
	gps_client_inst.callback(buf);
    e5e2:	68ab      	ldr	r3, [r5, #8]
    e5e4:	481c      	ldr	r0, [pc, #112]	; (e658 <gps_thread_fn+0x22c>)
    e5e6:	4798      	blx	r3
	sprintf(buf, "#XGPSP: %04u-%02u-%02u %02u:%02u:%02u\r\n",
    e5e8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e5ec:	4925      	ldr	r1, [pc, #148]	; (e684 <gps_thread_fn+0x258>)
    e5ee:	9303      	str	r3, [sp, #12]
    e5f0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    e5f4:	4818      	ldr	r0, [pc, #96]	; (e658 <gps_thread_fn+0x22c>)
    e5f6:	9302      	str	r3, [sp, #8]
    e5f8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e5fc:	9301      	str	r3, [sp, #4]
    e5fe:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    e602:	9300      	str	r3, [sp, #0]
    e604:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e608:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e60a:	f002 fb6d 	bl	10ce8 <sprintf>
	gps_client_inst.callback(buf);
    e60e:	68ab      	ldr	r3, [r5, #8]
    e610:	4811      	ldr	r0, [pc, #68]	; (e658 <gps_thread_fn+0x22c>)
    e612:	4798      	blx	r3
				if (!gps_client_inst.has_fix) {
    e614:	79eb      	ldrb	r3, [r5, #7]
    e616:	2b00      	cmp	r3, #0
    e618:	f47f af15 	bne.w	e446 <gps_thread_fn+0x1a>
	return z_impl_k_uptime_get();
    e61c:	f010 fab9 	bl	1eb92 <z_impl_k_uptime_get>
						(int)(now - ttft_start)/1000);
    e620:	4b19      	ldr	r3, [pc, #100]	; (e688 <gps_thread_fn+0x25c>)
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e622:	491a      	ldr	r1, [pc, #104]	; (e68c <gps_thread_fn+0x260>)
						(int)(now - ttft_start)/1000);
    e624:	681a      	ldr	r2, [r3, #0]
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
						(int)(now - ttft_start)/1000);
    e62a:	1a82      	subs	r2, r0, r2
					sprintf(buf, "#	: TTFF %d sec\r\n",
    e62c:	fb92 f2f3 	sdiv	r2, r2, r3
    e630:	4809      	ldr	r0, [pc, #36]	; (e658 <gps_thread_fn+0x22c>)
    e632:	f002 fb59 	bl	10ce8 <sprintf>
					gps_client_inst.callback(buf);
    e636:	68ab      	ldr	r3, [r5, #8]
    e638:	4807      	ldr	r0, [pc, #28]	; (e658 <gps_thread_fn+0x22c>)
    e63a:	4798      	blx	r3
					gps_client_inst.has_fix = true;
    e63c:	2301      	movs	r3, #1
    e63e:	71eb      	strb	r3, [r5, #7]
    e640:	e701      	b.n	e446 <gps_thread_fn+0x1a>
    e642:	bf00      	nop
    e644:	0001f144 	.word	0x0001f144
    e648:	0001f10c 	.word	0x0001f10c
    e64c:	20020000 	.word	0x20020000
    e650:	000201ba 	.word	0x000201ba
    e654:	000200e0 	.word	0x000200e0
    e658:	200264db 	.word	0x200264db
    e65c:	2002651b 	.word	0x2002651b
    e660:	000201cd 	.word	0x000201cd
    e664:	00020264 	.word	0x00020264
    e668:	00020269 	.word	0x00020269
    e66c:	00020276 	.word	0x00020276
    e670:	20020008 	.word	0x20020008
    e674:	000201f9 	.word	0x000201f9
    e678:	000201fd 	.word	0x000201fd
    e67c:	00020209 	.word	0x00020209
    e680:	00020211 	.word	0x00020211
    e684:	0002022a 	.word	0x0002022a
    e688:	200200d8 	.word	0x200200d8
    e68c:	00020252 	.word	0x00020252
    e690:	20020114 	.word	0x20020114

0000e694 <slm_at_gps_parse>:

/**@brief API to handle GPS AT commands
 */
int slm_at_gps_parse(const char *at_cmd)
{
    e694:	b538      	push	{r3, r4, r5, lr}
    e696:	4604      	mov	r4, r0
	int ret = -ENOTSUP;
	enum at_cmd_type type;

	for (int i = 0; i < AT_GPS_MAX; i++) {
		u8_t cmd_len = strlen(m_gps_at_list[i].string);
    e698:	481a      	ldr	r0, [pc, #104]	; (e704 <slm_at_gps_parse+0x70>)
    e69a:	f00e fe6f 	bl	1d37c <strlen>
    e69e:	2300      	movs	r3, #0
    e6a0:	4918      	ldr	r1, [pc, #96]	; (e704 <slm_at_gps_parse+0x70>)
    e6a2:	b2c0      	uxtb	r0, r0
    e6a4:	4283      	cmp	r3, r0
    e6a6:	db17      	blt.n	e6d8 <slm_at_gps_parse+0x44>

		if (slm_at_cmd_cmp(at_cmd, m_gps_at_list[i].string, cmd_len)) {
			ret = at_parser_params_from_str(at_cmd, NULL,
    e6a8:	2100      	movs	r1, #0
    e6aa:	4a17      	ldr	r2, [pc, #92]	; (e708 <slm_at_gps_parse+0x74>)
    e6ac:	4620      	mov	r0, r4
    e6ae:	f00f fe85 	bl	1e3bc <at_parser_params_from_str>
						&m_param_list);
			if (ret < 0) {
    e6b2:	1e01      	subs	r1, r0, #0
    e6b4:	da1c      	bge.n	e6f0 <slm_at_gps_parse+0x5c>
				LOG_ERR("Failed to parse AT command %d", ret);
    e6b6:	2301      	movs	r3, #1
    e6b8:	f04f 0200 	mov.w	r2, #0
    e6bc:	4813      	ldr	r0, [pc, #76]	; (e70c <slm_at_gps_parse+0x78>)
    e6be:	f363 0207 	bfi	r2, r3, #0, #8
    e6c2:	4b13      	ldr	r3, [pc, #76]	; (e710 <slm_at_gps_parse+0x7c>)
    e6c4:	1a1b      	subs	r3, r3, r0
    e6c6:	08db      	lsrs	r3, r3, #3
    e6c8:	4812      	ldr	r0, [pc, #72]	; (e714 <slm_at_gps_parse+0x80>)
    e6ca:	f363 128f 	bfi	r2, r3, #6, #10
    e6ce:	f00e f927 	bl	1c920 <log_1>
				return -EINVAL;
    e6d2:	f06f 0015 	mvn.w	r0, #21
			break;
		}
	}

	return ret;
}
    e6d6:	bd38      	pop	{r3, r4, r5, pc}
		if (toupper(*(cmd + i)) != *(slm_cmd + i)) {
    e6d8:	5ce2      	ldrb	r2, [r4, r3]
    e6da:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
    e6de:	2d19      	cmp	r5, #25
    e6e0:	f811 5b01 	ldrb.w	r5, [r1], #1
    e6e4:	bf98      	it	ls
    e6e6:	3a20      	subls	r2, #32
    e6e8:	4295      	cmp	r5, r2
    e6ea:	d108      	bne.n	e6fe <slm_at_gps_parse+0x6a>
	for (int i = 0; i < length; i++) {
    e6ec:	3301      	adds	r3, #1
    e6ee:	e7d9      	b.n	e6a4 <slm_at_gps_parse+0x10>
			type = at_parser_cmd_type_get(at_cmd);
    e6f0:	4620      	mov	r0, r4
    e6f2:	f00f fe66 	bl	1e3c2 <at_parser_cmd_type_get>
}
    e6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ret = m_gps_at_list[i].handler(type);
    e6fa:	f7ff be1d 	b.w	e338 <handle_at_gpsrun>
	int ret = -ENOTSUP;
    e6fe:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e702:	e7e8      	b.n	e6d6 <slm_at_gps_parse+0x42>
    e704:	000202c5 	.word	0x000202c5
    e708:	200200e8 	.word	0x200200e8
    e70c:	0001f10c 	.word	0x0001f10c
    e710:	0001f144 	.word	0x0001f144
    e714:	0001f765 	.word	0x0001f765

0000e718 <slm_at_gps_init>:
///////////////////////////////////////////////////////////////////////////

/**@brief API to initialize GPS AT commands handler
 */
int slm_at_gps_init(at_cmd_handler_t callback)
{
    e718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e71c:	4b40      	ldr	r3, [pc, #256]	; (e820 <slm_at_gps_init+0x108>)
    e71e:	4c41      	ldr	r4, [pc, #260]	; (e824 <slm_at_gps_init+0x10c>)
    e720:	1ae4      	subs	r4, r4, r3
    e722:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (callback == NULL) {
    e726:	b970      	cbnz	r0, e746 <slm_at_gps_init+0x2e>
		LOG_ERR("No callback");
    e728:	2301      	movs	r3, #1
    e72a:	f04f 0100 	mov.w	r1, #0
    e72e:	f363 0107 	bfi	r1, r3, #0, #8
    e732:	483d      	ldr	r0, [pc, #244]	; (e828 <slm_at_gps_init+0x110>)
    e734:	f364 118f 	bfi	r1, r4, #6, #10
    e738:	f00e f8e5 	bl	1c906 <log_0>
		return -EINVAL;
    e73c:	f06f 0015 	mvn.w	r0, #21
	enable_gps();
	do_gps_start();
	//////////////////////////////////////////////////////////////////////

	return 0;
}
    e740:	b003      	add	sp, #12
    e742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e746:	2201      	movs	r2, #1
    e748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	gps_thread_id = NULL;
    e74c:	2500      	movs	r5, #0
	gps_client_inst.sock = INVALID_SOCKET;
    e74e:	4b37      	ldr	r3, [pc, #220]	; (e82c <slm_at_gps_init+0x114>)
	return socket_ops->socket(family, type, proto);
    e750:	4f37      	ldr	r7, [pc, #220]	; (e830 <slm_at_gps_init+0x118>)
	gps_client_inst.mask = NRF_GNSS_NMEA_GGA_MASK; ///////////////////////
    e752:	e9c3 1200 	strd	r1, r2, [r3]
	gps_client_inst.callback = callback;
    e756:	6098      	str	r0, [r3, #8]
	gps_thread_id = NULL;
    e758:	4b36      	ldr	r3, [pc, #216]	; (e834 <slm_at_gps_init+0x11c>)
	LOG_INF("Initializing GPS Module");
    e75a:	f04f 0100 	mov.w	r1, #0
	gps_thread_id = NULL;
    e75e:	601d      	str	r5, [r3, #0]
	LOG_INF("Initializing GPS Module");
    e760:	2303      	movs	r3, #3
    e762:	f363 0107 	bfi	r1, r3, #0, #8
    e766:	f364 118f 	bfi	r1, r4, #6, #10
    e76a:	4833      	ldr	r0, [pc, #204]	; (e838 <slm_at_gps_init+0x120>)
    e76c:	f00e f8cb 	bl	1c906 <log_0>
    e770:	683b      	ldr	r3, [r7, #0]
    e772:	f240 2201 	movw	r2, #513	; 0x201
    e776:	681b      	ldr	r3, [r3, #0]
    e778:	4629      	mov	r1, r5
    e77a:	2066      	movs	r0, #102	; 0x66
    e77c:	4798      	blx	r3
	if (at_sock < 0) {
    e77e:	1e06      	subs	r6, r0, #0
    e780:	46b8      	mov	r8, r7
    e782:	db20      	blt.n	e7c6 <slm_at_gps_init+0xae>
    e784:	4f2d      	ldr	r7, [pc, #180]	; (e83c <slm_at_gps_init+0x124>)
		if (memcmp(buf, "OK", 2) != 0) {
    e786:	f8df a0c0 	ldr.w	sl, [pc, #192]	; e848 <slm_at_gps_init+0x130>
		LOG_INF("%s",gps_at_commands[i]);
    e78a:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    e78e:	f043 0303 	orr.w	r3, r3, #3
    e792:	f363 0907 	bfi	r9, r3, #0, #8
    e796:	f364 198f 	bfi	r9, r4, #6, #10
    e79a:	464a      	mov	r2, r9
    e79c:	4639      	mov	r1, r7
    e79e:	4828      	ldr	r0, [pc, #160]	; (e840 <slm_at_gps_init+0x128>)
    e7a0:	f00e f8be 	bl	1c920 <log_1>
		bytes_sent = send(at_sock, gps_at_commands[i],
    e7a4:	4638      	mov	r0, r7
    e7a6:	f00e fde9 	bl	1d37c <strlen>
	return socket_ops->send(sock, buf, len, flags);
    e7aa:	f8d8 3000 	ldr.w	r3, [r8]
    e7ae:	4602      	mov	r2, r0
    e7b0:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    e7b4:	4639      	mov	r1, r7
    e7b6:	2300      	movs	r3, #0
    e7b8:	4630      	mov	r0, r6
    e7ba:	47d8      	blx	fp
		if (bytes_sent < 0) {
    e7bc:	2800      	cmp	r0, #0
    e7be:	da06      	bge.n	e7ce <slm_at_gps_init+0xb6>
			close(at_sock);
    e7c0:	4630      	mov	r0, r6
    e7c2:	f7ff fc69 	bl	e098 <close>
	do_gps_start();
    e7c6:	f7ff fcb1 	bl	e12c <do_gps_start>
	return 0;
    e7ca:	2000      	movs	r0, #0
    e7cc:	e7b8      	b.n	e740 <slm_at_gps_init+0x28>
	return socket_ops->recv(sock, buf, max_len, flags);
    e7ce:	f8d8 3000 	ldr.w	r3, [r8]
    e7d2:	2202      	movs	r2, #2
    e7d4:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    e7d8:	a901      	add	r1, sp, #4
    e7da:	2300      	movs	r3, #0
    e7dc:	4630      	mov	r0, r6
    e7de:	47d8      	blx	fp
		} while (bytes_received == 0);
    e7e0:	2800      	cmp	r0, #0
    e7e2:	d0f4      	beq.n	e7ce <slm_at_gps_init+0xb6>
		if (memcmp(buf, "OK", 2) != 0) {
    e7e4:	2202      	movs	r2, #2
    e7e6:	4651      	mov	r1, sl
    e7e8:	a801      	add	r0, sp, #4
    e7ea:	f00e fdf2 	bl	1d3d2 <memcmp>
    e7ee:	2800      	cmp	r0, #0
    e7f0:	d1e6      	bne.n	e7c0 <slm_at_gps_init+0xa8>
	return z_impl_k_sleep(ms);
    e7f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	for (int i = 0; i < ARRAY_SIZE(gps_at_commands); i++) {
    e7f6:	3501      	adds	r5, #1
    e7f8:	f00d f912 	bl	1ba20 <z_impl_k_sleep>
    e7fc:	2d04      	cmp	r5, #4
    e7fe:	f107 0728 	add.w	r7, r7, #40	; 0x28
    e802:	d1c2      	bne.n	e78a <slm_at_gps_init+0x72>
	close(at_sock);
    e804:	4630      	mov	r0, r6
    e806:	f7ff fc47 	bl	e098 <close>
	LOG_INF("GPS Enabled");
    e80a:	2303      	movs	r3, #3
    e80c:	f04f 0100 	mov.w	r1, #0
    e810:	f363 0107 	bfi	r1, r3, #0, #8
    e814:	f364 118f 	bfi	r1, r4, #6, #10
    e818:	480a      	ldr	r0, [pc, #40]	; (e844 <slm_at_gps_init+0x12c>)
    e81a:	f00e f874 	bl	1c906 <log_0>
	return 0;
    e81e:	e7d2      	b.n	e7c6 <slm_at_gps_init+0xae>
    e820:	0001f10c 	.word	0x0001f10c
    e824:	0001f144 	.word	0x0001f144
    e828:	0001ff50 	.word	0x0001ff50
    e82c:	20020114 	.word	0x20020114
    e830:	2002031c 	.word	0x2002031c
    e834:	200201d0 	.word	0x200201d0
    e838:	000202a1 	.word	0x000202a1
    e83c:	0002011a 	.word	0x0002011a
    e840:	00020b67 	.word	0x00020b67
    e844:	000202b9 	.word	0x000202b9
    e848:	0001ff8a 	.word	0x0001ff8a

0000e84c <slm_at_gps_uninit>:

/**@brief API to uninitialize GPS AT commands handler
 */
int slm_at_gps_uninit(void)
{
    e84c:	b510      	push	{r4, lr}
	if (gps_thread_id != NULL) {
    e84e:	4c06      	ldr	r4, [pc, #24]	; (e868 <slm_at_gps_uninit+0x1c>)
    e850:	6823      	ldr	r3, [r4, #0]
    e852:	b133      	cbz	r3, e862 <slm_at_gps_uninit+0x16>
		do_gps_stop();
    e854:	f7ff fc26 	bl	e0a4 <do_gps_stop>
		k_thread_abort(gps_thread_id);
    e858:	6820      	ldr	r0, [r4, #0]
	z_impl_k_thread_abort(thread);
    e85a:	f001 fb5b 	bl	ff14 <z_impl_k_thread_abort>
		gps_thread_id = NULL;
    e85e:	2300      	movs	r3, #0
    e860:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    e862:	2000      	movs	r0, #0
    e864:	bd10      	pop	{r4, pc}
    e866:	bf00      	nop
    e868:	200201d0 	.word	0x200201d0

0000e86c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    e86c:	680b      	ldr	r3, [r1, #0]
    e86e:	3301      	adds	r3, #1
    e870:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    e872:	4b01      	ldr	r3, [pc, #4]	; (e878 <char_out+0xc>)
    e874:	681b      	ldr	r3, [r3, #0]
    e876:	4718      	bx	r3
    e878:	2002c4dc 	.word	0x2002c4dc

0000e87c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e880:	b085      	sub	sp, #20
    e882:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e884:	469b      	mov	fp, r3
    e886:	2c01      	cmp	r4, #1
    e888:	bfb8      	it	lt
    e88a:	2401      	movlt	r4, #1
    e88c:	2b01      	cmp	r3, #1
    e88e:	bf0c      	ite	eq
    e890:	2330      	moveq	r3, #48	; 0x30
    e892:	2320      	movne	r3, #32
    e894:	4616      	mov	r6, r2
    e896:	4682      	mov	sl, r0
    e898:	4688      	mov	r8, r1
    e89a:	2501      	movs	r5, #1
    e89c:	270a      	movs	r7, #10
    e89e:	2200      	movs	r2, #0
    e8a0:	f8df 906c 	ldr.w	r9, [pc, #108]	; e910 <_printk_dec_ulong+0x94>
    e8a4:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    e8a6:	fbb6 f3f9 	udiv	r3, r6, r9
    e8aa:	9301      	str	r3, [sp, #4]
    e8ac:	b90a      	cbnz	r2, e8b2 <_printk_dec_ulong+0x36>
    e8ae:	45b1      	cmp	r9, r6
    e8b0:	d81c      	bhi.n	e8ec <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    e8b2:	9b01      	ldr	r3, [sp, #4]
    e8b4:	4641      	mov	r1, r8
    e8b6:	f103 0030 	add.w	r0, r3, #48	; 0x30
    e8ba:	47d0      	blx	sl
			found_largest_digit = 1;
    e8bc:	2201      	movs	r2, #1
			digits++;
    e8be:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    e8c0:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    e8c2:	3f01      	subs	r7, #1
		remainder %= pos;
    e8c4:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
    e8c8:	230a      	movs	r3, #10
	while (pos >= 10) {
    e8ca:	2f01      	cmp	r7, #1
		pos /= 10;
    e8cc:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    e8d0:	d1e9      	bne.n	e8a6 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
    e8d2:	4641      	mov	r1, r8
    e8d4:	f106 0030 	add.w	r0, r6, #48	; 0x30
    e8d8:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    e8da:	f1bb 0f03 	cmp.w	fp, #3
    e8de:	d102      	bne.n	e8e6 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
    e8e0:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
    e8e2:	2c00      	cmp	r4, #0
    e8e4:	dc0e      	bgt.n	e904 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
    e8e6:	b005      	add	sp, #20
    e8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    e8ec:	42bc      	cmp	r4, r7
    e8ee:	dbe7      	blt.n	e8c0 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    e8f0:	f1bb 0f02 	cmp.w	fp, #2
    e8f4:	d8e4      	bhi.n	e8c0 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    e8f6:	4641      	mov	r1, r8
    e8f8:	9802      	ldr	r0, [sp, #8]
    e8fa:	9203      	str	r2, [sp, #12]
			digits++;
    e8fc:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    e8fe:	47d0      	blx	sl
			digits++;
    e900:	9a03      	ldr	r2, [sp, #12]
    e902:	e7dd      	b.n	e8c0 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    e904:	4641      	mov	r1, r8
    e906:	2020      	movs	r0, #32
    e908:	47d0      	blx	sl
    e90a:	3c01      	subs	r4, #1
    e90c:	e7e9      	b.n	e8e2 <_printk_dec_ulong+0x66>
    e90e:	bf00      	nop
    e910:	3b9aca00 	.word	0x3b9aca00

0000e914 <__printk_hook_install>:
	_char_out = fn;
    e914:	4b01      	ldr	r3, [pc, #4]	; (e91c <__printk_hook_install+0x8>)
    e916:	6018      	str	r0, [r3, #0]
}
    e918:	4770      	bx	lr
    e91a:	bf00      	nop
    e91c:	2002c4dc 	.word	0x2002c4dc

0000e920 <vprintk>:
	struct out_context ctx = { 0 };
    e920:	2300      	movs	r3, #0
{
    e922:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
    e924:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    e926:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    e928:	4803      	ldr	r0, [pc, #12]	; (e938 <vprintk+0x18>)
    e92a:	460b      	mov	r3, r1
    e92c:	a901      	add	r1, sp, #4
    e92e:	f00d fe47 	bl	1c5c0 <z_vprintk>
}
    e932:	b003      	add	sp, #12
    e934:	f85d fb04 	ldr.w	pc, [sp], #4
    e938:	0000e86d 	.word	0x0000e86d

0000e93c <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    e93c:	f04f 0220 	mov.w	r2, #32
    e940:	f3ef 8311 	mrs	r3, BASEPRI
    e944:	f382 8811 	msr	BASEPRI, r2
    e948:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e94c:	2101      	movs	r1, #1
    e94e:	4a04      	ldr	r2, [pc, #16]	; (e960 <nordicsemi_nrf91_init+0x24>)
    e950:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e954:	f383 8811 	msr	BASEPRI, r3
    e958:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e95c:	2000      	movs	r0, #0
    e95e:	4770      	bx	lr
    e960:	40039000 	.word	0x40039000

0000e964 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    e964:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e966:	2200      	movs	r2, #0
{
    e968:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
    e96a:	490d      	ldr	r1, [pc, #52]	; (e9a0 <enable_logger+0x3c>)
    e96c:	480d      	ldr	r0, [pc, #52]	; (e9a4 <enable_logger+0x40>)
    e96e:	f010 f91e 	bl	1ebae <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e972:	2400      	movs	r4, #0
    e974:	230e      	movs	r3, #14
    e976:	4d0c      	ldr	r5, [pc, #48]	; (e9a8 <enable_logger+0x44>)
    e978:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e97c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    e980:	e9cd 4400 	strd	r4, r4, [sp]
    e984:	4b09      	ldr	r3, [pc, #36]	; (e9ac <enable_logger+0x48>)
    e986:	f44f 7240 	mov.w	r2, #768	; 0x300
    e98a:	4909      	ldr	r1, [pc, #36]	; (e9b0 <enable_logger+0x4c>)
    e98c:	4628      	mov	r0, r5
    e98e:	f00d f931 	bl	1bbf4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    e992:	4908      	ldr	r1, [pc, #32]	; (e9b4 <enable_logger+0x50>)
    e994:	4628      	mov	r0, r5
    e996:	f010 f873 	bl	1ea80 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    e99a:	4620      	mov	r0, r4
    e99c:	b007      	add	sp, #28
    e99e:	bd30      	pop	{r4, r5, pc}
    e9a0:	0000e9b9 	.word	0x0000e9b9
    e9a4:	200201e8 	.word	0x200201e8
    e9a8:	20020230 	.word	0x20020230
    e9ac:	0000ec99 	.word	0x0000ec99
    e9b0:	20026a88 	.word	0x20026a88
    e9b4:	000202e7 	.word	0x000202e7

0000e9b8 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    e9b8:	4801      	ldr	r0, [pc, #4]	; (e9c0 <log_process_thread_timer_expiry_fn+0x8>)
    e9ba:	f00d b85f 	b.w	1ba7c <z_impl_k_sem_give>
    e9be:	bf00      	nop
    e9c0:	2002c658 	.word	0x2002c658

0000e9c4 <log_core_init>:
{
    e9c4:	b508      	push	{r3, lr}
		log_msg_pool_init();
    e9c6:	f000 f9df 	bl	ed88 <log_msg_pool_init>
		log_list_init(&list);
    e9ca:	4809      	ldr	r0, [pc, #36]	; (e9f0 <log_core_init+0x2c>)
    e9cc:	f00d ff78 	bl	1c8c0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    e9d0:	2304      	movs	r3, #4
    e9d2:	2234      	movs	r2, #52	; 0x34
    e9d4:	4807      	ldr	r0, [pc, #28]	; (e9f4 <log_core_init+0x30>)
    e9d6:	4908      	ldr	r1, [pc, #32]	; (e9f8 <log_core_init+0x34>)
    e9d8:	f00f fe37 	bl	1e64a <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    e9dc:	4b07      	ldr	r3, [pc, #28]	; (e9fc <log_core_init+0x38>)
    e9de:	4a08      	ldr	r2, [pc, #32]	; (ea00 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    e9e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    e9e4:	601a      	str	r2, [r3, #0]
}
    e9e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    e9ea:	f000 bbfd 	b.w	f1e8 <log_output_timestamp_freq_set>
    e9ee:	bf00      	nop
    e9f0:	200201e0 	.word	0x200201e0
    e9f4:	20020214 	.word	0x20020214
    e9f8:	2002aac8 	.word	0x2002aac8
    e9fc:	2002c4e0 	.word	0x2002c4e0
    ea00:	0001c8ff 	.word	0x0001c8ff

0000ea04 <dropped_notify>:
{
    ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ea06:	2500      	movs	r5, #0
    ea08:	4b0c      	ldr	r3, [pc, #48]	; (ea3c <dropped_notify+0x38>)
    ea0a:	e8d3 7fef 	ldaex	r7, [r3]
    ea0e:	e8c3 5fe2 	stlex	r2, r5, [r3]
    ea12:	2a00      	cmp	r2, #0
    ea14:	d1f9      	bne.n	ea0a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    ea16:	4c0a      	ldr	r4, [pc, #40]	; (ea40 <dropped_notify+0x3c>)
    ea18:	4e0a      	ldr	r6, [pc, #40]	; (ea44 <dropped_notify+0x40>)
    ea1a:	1b36      	subs	r6, r6, r4
    ea1c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ea1e:	42b5      	cmp	r5, r6
    ea20:	db00      	blt.n	ea24 <dropped_notify+0x20>
}
    ea22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ea24:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ea26:	795b      	ldrb	r3, [r3, #5]
    ea28:	b12b      	cbz	r3, ea36 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    ea2a:	6823      	ldr	r3, [r4, #0]
    ea2c:	68db      	ldr	r3, [r3, #12]
    ea2e:	b113      	cbz	r3, ea36 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    ea30:	4639      	mov	r1, r7
    ea32:	4620      	mov	r0, r4
    ea34:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ea36:	3501      	adds	r5, #1
    ea38:	3410      	adds	r4, #16
    ea3a:	e7f0      	b.n	ea1e <dropped_notify+0x1a>
    ea3c:	200201d8 	.word	0x200201d8
    ea40:	0001f194 	.word	0x0001f194
    ea44:	0001f1a4 	.word	0x0001f1a4

0000ea48 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    ea48:	4b22      	ldr	r3, [pc, #136]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
{
    ea4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!backend_attached && !bypass) {
    ea4e:	781b      	ldrb	r3, [r3, #0]
{
    ea50:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    ea52:	b903      	cbnz	r3, ea56 <z_impl_log_process+0xe>
    ea54:	b340      	cbz	r0, eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>
	__asm__ volatile(
    ea56:	f04f 0320 	mov.w	r3, #32
    ea5a:	f3ef 8411 	mrs	r4, BASEPRI
    ea5e:	f383 8811 	msr	BASEPRI, r3
    ea62:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ea66:	481c      	ldr	r0, [pc, #112]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    ea68:	f00d ff3a 	bl	1c8e0 <log_list_head_get>
    ea6c:	4607      	mov	r7, r0
	__asm__ volatile(
    ea6e:	f384 8811 	msr	BASEPRI, r4
    ea72:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ea76:	b158      	cbz	r0, ea90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ea78:	4b18      	ldr	r3, [pc, #96]	; (eadc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>)
    ea7a:	e8d3 2fef 	ldaex	r2, [r3]
    ea7e:	3a01      	subs	r2, #1
    ea80:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ea84:	2900      	cmp	r1, #0
    ea86:	d1f8      	bne.n	ea7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
	if (!bypass) {
    ea88:	b18d      	cbz	r5, eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
	log_msg_put(msg);
    ea8a:	4638      	mov	r0, r7
    ea8c:	f00e f815 	bl	1caba <log_msg_put>
	if (!bypass && dropped_cnt) {
    ea90:	b925      	cbnz	r5, ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>
    ea92:	4b13      	ldr	r3, [pc, #76]	; (eae0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>)
    ea94:	681b      	ldr	r3, [r3, #0]
    ea96:	b10b      	cbz	r3, ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>
		dropped_notify();
    ea98:	f7ff ffb4 	bl	ea04 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ea9c:	480e      	ldr	r0, [pc, #56]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    ea9e:	f00d ff1d 	bl	1c8dc <log_list_head_peek>
    eaa2:	1c05      	adds	r5, r0, #0
    eaa4:	bf18      	it	ne
    eaa6:	2501      	movne	r5, #1
}
    eaa8:	4628      	mov	r0, r5
    eaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (int i = 0; i < log_backend_count_get(); i++) {
    eaae:	46a8      	mov	r8, r5
	return __log_backends_end - __log_backends_start;
    eab0:	4c0c      	ldr	r4, [pc, #48]	; (eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>)
    eab2:	4e0d      	ldr	r6, [pc, #52]	; (eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>)
    eab4:	1b36      	subs	r6, r6, r4
    eab6:	1136      	asrs	r6, r6, #4
    eab8:	45b0      	cmp	r8, r6
    eaba:	dae6      	bge.n	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
	return backend->cb->active;
    eabc:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    eabe:	795b      	ldrb	r3, [r3, #5]
    eac0:	b123      	cbz	r3, eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
	backend->api->put(backend, msg);
    eac2:	6823      	ldr	r3, [r4, #0]
    eac4:	4639      	mov	r1, r7
    eac6:	681b      	ldr	r3, [r3, #0]
    eac8:	4620      	mov	r0, r4
    eaca:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    eacc:	f108 0801 	add.w	r8, r8, #1
    ead0:	3410      	adds	r4, #16
    ead2:	e7f1      	b.n	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
    ead4:	2002651c 	.word	0x2002651c
    ead8:	200201e0 	.word	0x200201e0
    eadc:	200201d4 	.word	0x200201d4
    eae0:	200201d8 	.word	0x200201d8
    eae4:	0001f194 	.word	0x0001f194
    eae8:	0001f1a4 	.word	0x0001f1a4

0000eaec <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    eaec:	4b24      	ldr	r3, [pc, #144]	; (eb80 <msg_finalize+0x94>)
{
    eaee:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    eaf0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    eaf2:	8141      	strh	r1, [r0, #10]
{
    eaf4:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    eaf6:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    eaf8:	4c22      	ldr	r4, [pc, #136]	; (eb84 <msg_finalize+0x98>)
    eafa:	60e8      	str	r0, [r5, #12]
    eafc:	e8d4 3fef 	ldaex	r3, [r4]
    eb00:	3301      	adds	r3, #1
    eb02:	e8c4 3fe2 	stlex	r2, r3, [r4]
    eb06:	2a00      	cmp	r2, #0
    eb08:	d1f8      	bne.n	eafc <msg_finalize+0x10>
	__asm__ volatile(
    eb0a:	f04f 0320 	mov.w	r3, #32
    eb0e:	f3ef 8611 	mrs	r6, BASEPRI
    eb12:	f383 8811 	msr	BASEPRI, r3
    eb16:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    eb1a:	481b      	ldr	r0, [pc, #108]	; (eb88 <msg_finalize+0x9c>)
    eb1c:	4629      	mov	r1, r5
    eb1e:	f00d fed3 	bl	1c8c8 <log_list_add_tail>
	__asm__ volatile(
    eb22:	f386 8811 	msr	BASEPRI, r6
    eb26:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    eb2a:	4b18      	ldr	r3, [pc, #96]	; (eb8c <msg_finalize+0xa0>)
    eb2c:	781a      	ldrb	r2, [r3, #0]
    eb2e:	b17a      	cbz	r2, eb50 <msg_finalize+0x64>
	__asm__ volatile(
    eb30:	f04f 0320 	mov.w	r3, #32
    eb34:	f3ef 8411 	mrs	r4, BASEPRI
    eb38:	f383 8811 	msr	BASEPRI, r3
    eb3c:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    eb40:	2000      	movs	r0, #0
    eb42:	f7ff ff81 	bl	ea48 <z_impl_log_process>
	__asm__ volatile(
    eb46:	f384 8811 	msr	BASEPRI, r4
    eb4a:	f3bf 8f6f 	isb	sy
}
    eb4e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    eb50:	490f      	ldr	r1, [pc, #60]	; (eb90 <msg_finalize+0xa4>)
    eb52:	6823      	ldr	r3, [r4, #0]
    eb54:	6809      	ldr	r1, [r1, #0]
    eb56:	2900      	cmp	r1, #0
    eb58:	d0f9      	beq.n	eb4e <msg_finalize+0x62>
    eb5a:	2b01      	cmp	r3, #1
    eb5c:	d106      	bne.n	eb6c <msg_finalize+0x80>
}
    eb5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_timer_start(timer, duration, period);
    eb62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eb66:	480b      	ldr	r0, [pc, #44]	; (eb94 <msg_finalize+0xa8>)
    eb68:	f00d ba5e 	b.w	1c028 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    eb6c:	2b0a      	cmp	r3, #10
    eb6e:	d1ee      	bne.n	eb4e <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    eb70:	4808      	ldr	r0, [pc, #32]	; (eb94 <msg_finalize+0xa8>)
    eb72:	f010 f828 	bl	1ebc6 <z_impl_k_timer_stop>
}
    eb76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_impl_k_sem_give(sem);
    eb7a:	4807      	ldr	r0, [pc, #28]	; (eb98 <msg_finalize+0xac>)
    eb7c:	f00c bf7e 	b.w	1ba7c <z_impl_k_sem_give>
    eb80:	2002c4e0 	.word	0x2002c4e0
    eb84:	200201d4 	.word	0x200201d4
    eb88:	200201e0 	.word	0x200201e0
    eb8c:	2002651d 	.word	0x2002651d
    eb90:	200202e0 	.word	0x200202e0
    eb94:	200201e8 	.word	0x200201e8
    eb98:	2002c658 	.word	0x2002c658

0000eb9c <log_dropped>:
    eb9c:	4b04      	ldr	r3, [pc, #16]	; (ebb0 <log_dropped+0x14>)
    eb9e:	e8d3 2fef 	ldaex	r2, [r3]
    eba2:	3201      	adds	r2, #1
    eba4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    eba8:	2900      	cmp	r1, #0
    ebaa:	d1f8      	bne.n	eb9e <log_dropped+0x2>
}
    ebac:	4770      	bx	lr
    ebae:	bf00      	nop
    ebb0:	200201d8 	.word	0x200201d8

0000ebb4 <log_source_name_get>:
    ebb4:	4a04      	ldr	r2, [pc, #16]	; (ebc8 <log_source_name_get+0x14>)
    ebb6:	4b05      	ldr	r3, [pc, #20]	; (ebcc <log_source_name_get+0x18>)
    ebb8:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    ebba:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    ebbe:	bf34      	ite	cc
    ebc0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    ebc4:	2000      	movcs	r0, #0
}
    ebc6:	4770      	bx	lr
    ebc8:	0001f10c 	.word	0x0001f10c
    ebcc:	0001f194 	.word	0x0001f194

0000ebd0 <log_backend_enable>:
	id += backend - log_backend_get(0);
    ebd0:	4b09      	ldr	r3, [pc, #36]	; (ebf8 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    ebd2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    ebd4:	1ac3      	subs	r3, r0, r3
    ebd6:	111b      	asrs	r3, r3, #4
    ebd8:	3301      	adds	r3, #1
{
    ebda:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    ebdc:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    ebde:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    ebe0:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    ebe2:	4c06      	ldr	r4, [pc, #24]	; (ebfc <log_backend_enable+0x2c>)
    ebe4:	715a      	strb	r2, [r3, #5]
    ebe6:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    ebe8:	6019      	str	r1, [r3, #0]
    ebea:	b912      	cbnz	r2, ebf2 <log_backend_enable+0x22>
    ebec:	4804      	ldr	r0, [pc, #16]	; (ec00 <log_backend_enable+0x30>)
    ebee:	f00c ff45 	bl	1ba7c <z_impl_k_sem_give>
	backend_attached = true;
    ebf2:	2301      	movs	r3, #1
    ebf4:	7023      	strb	r3, [r4, #0]
}
    ebf6:	bd10      	pop	{r4, pc}
    ebf8:	0001f194 	.word	0x0001f194
    ebfc:	2002651c 	.word	0x2002651c
    ec00:	2002c658 	.word	0x2002c658

0000ec04 <log_init>:
{
    ec04:	b570      	push	{r4, r5, r6, lr}
    ec06:	4b0f      	ldr	r3, [pc, #60]	; (ec44 <log_init+0x40>)
    ec08:	e8d3 5fef 	ldaex	r5, [r3]
    ec0c:	1c6a      	adds	r2, r5, #1
    ec0e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ec12:	2900      	cmp	r1, #0
    ec14:	d1f8      	bne.n	ec08 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    ec16:	b92d      	cbnz	r5, ec24 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    ec18:	4c0b      	ldr	r4, [pc, #44]	; (ec48 <log_init+0x44>)
    ec1a:	4e0c      	ldr	r6, [pc, #48]	; (ec4c <log_init+0x48>)
    ec1c:	1b36      	subs	r6, r6, r4
    ec1e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    ec20:	42b5      	cmp	r5, r6
    ec22:	db00      	blt.n	ec26 <log_init+0x22>
}
    ec24:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    ec26:	7b23      	ldrb	r3, [r4, #12]
    ec28:	b143      	cbz	r3, ec3c <log_init+0x38>
			if (backend->api->init != NULL) {
    ec2a:	6823      	ldr	r3, [r4, #0]
    ec2c:	695b      	ldr	r3, [r3, #20]
    ec2e:	b103      	cbz	r3, ec32 <log_init+0x2e>
				backend->api->init();
    ec30:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    ec32:	2204      	movs	r2, #4
    ec34:	2100      	movs	r1, #0
    ec36:	4620      	mov	r0, r4
    ec38:	f7ff ffca 	bl	ebd0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    ec3c:	3501      	adds	r5, #1
    ec3e:	3410      	adds	r4, #16
    ec40:	e7ee      	b.n	ec20 <log_init+0x1c>
    ec42:	bf00      	nop
    ec44:	200201dc 	.word	0x200201dc
    ec48:	0001f194 	.word	0x0001f194
    ec4c:	0001f1a4 	.word	0x0001f1a4

0000ec50 <z_impl_log_panic>:
{
    ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    ec52:	4f0e      	ldr	r7, [pc, #56]	; (ec8c <z_impl_log_panic+0x3c>)
    ec54:	783d      	ldrb	r5, [r7, #0]
    ec56:	b975      	cbnz	r5, ec76 <z_impl_log_panic+0x26>
	log_init();
    ec58:	f7ff ffd4 	bl	ec04 <log_init>
    ec5c:	4c0c      	ldr	r4, [pc, #48]	; (ec90 <z_impl_log_panic+0x40>)
    ec5e:	4e0d      	ldr	r6, [pc, #52]	; (ec94 <z_impl_log_panic+0x44>)
    ec60:	1b36      	subs	r6, r6, r4
    ec62:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ec64:	42b5      	cmp	r5, r6
    ec66:	db07      	blt.n	ec78 <z_impl_log_panic+0x28>
    ec68:	2000      	movs	r0, #0
    ec6a:	f7ff feed 	bl	ea48 <z_impl_log_process>
		while (log_process(false) == true) {
    ec6e:	2800      	cmp	r0, #0
    ec70:	d1fa      	bne.n	ec68 <z_impl_log_panic+0x18>
	panic_mode = true;
    ec72:	2301      	movs	r3, #1
    ec74:	703b      	strb	r3, [r7, #0]
}
    ec76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ec78:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ec7a:	795b      	ldrb	r3, [r3, #5]
    ec7c:	b11b      	cbz	r3, ec86 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    ec7e:	6823      	ldr	r3, [r4, #0]
    ec80:	4620      	mov	r0, r4
    ec82:	691b      	ldr	r3, [r3, #16]
    ec84:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ec86:	3501      	adds	r5, #1
    ec88:	3410      	adds	r4, #16
    ec8a:	e7eb      	b.n	ec64 <z_impl_log_panic+0x14>
    ec8c:	2002651d 	.word	0x2002651d
    ec90:	0001f194 	.word	0x0001f194
    ec94:	0001f1a4 	.word	0x0001f1a4

0000ec98 <log_process_thread_func>:
{
    ec98:	b508      	push	{r3, lr}
	log_init();
    ec9a:	f7ff ffb3 	bl	ec04 <log_init>
	return z_impl_k_current_get();
    ec9e:	f00c fee7 	bl	1ba70 <z_impl_k_current_get>
	proc_tid = process_tid;
    eca2:	4b0b      	ldr	r3, [pc, #44]	; (ecd0 <log_process_thread_func+0x38>)
    eca4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    eca6:	b130      	cbz	r0, ecb6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    eca8:	4b0a      	ldr	r3, [pc, #40]	; (ecd4 <log_process_thread_func+0x3c>)
	    process_tid &&
    ecaa:	681b      	ldr	r3, [r3, #0]
    ecac:	2b09      	cmp	r3, #9
    ecae:	dd02      	ble.n	ecb6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ecb0:	4809      	ldr	r0, [pc, #36]	; (ecd8 <log_process_thread_func+0x40>)
    ecb2:	f00c fee3 	bl	1ba7c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ecb6:	4c08      	ldr	r4, [pc, #32]	; (ecd8 <log_process_thread_func+0x40>)
    ecb8:	2000      	movs	r0, #0
    ecba:	f7ff fec5 	bl	ea48 <z_impl_log_process>
		if (log_process(false) == false) {
    ecbe:	2800      	cmp	r0, #0
    ecc0:	d1fa      	bne.n	ecb8 <log_process_thread_func+0x20>
    ecc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ecc6:	4620      	mov	r0, r4
    ecc8:	f00c ff04 	bl	1bad4 <z_impl_k_sem_take>
    eccc:	e7f4      	b.n	ecb8 <log_process_thread_func+0x20>
    ecce:	bf00      	nop
    ecd0:	200202e0 	.word	0x200202e0
    ecd4:	200201d4 	.word	0x200201d4
    ecd8:	2002c658 	.word	0x2002c658

0000ecdc <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    ecdc:	4b14      	ldr	r3, [pc, #80]	; (ed30 <log_strdup+0x54>)
{
    ecde:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    ece0:	4298      	cmp	r0, r3
{
    ece2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ece4:	d302      	bcc.n	ecec <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    ece6:	4b13      	ldr	r3, [pc, #76]	; (ed34 <log_strdup+0x58>)
    ece8:	4298      	cmp	r0, r3
    ecea:	d31b      	bcc.n	ed24 <log_strdup+0x48>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    ecec:	2200      	movs	r2, #0
    ecee:	a901      	add	r1, sp, #4
    ecf0:	4811      	ldr	r0, [pc, #68]	; (ed38 <log_strdup+0x5c>)
    ecf2:	f00c f97f 	bl	1aff4 <k_mem_slab_alloc>
	if (err != 0) {
    ecf6:	4605      	mov	r5, r0
    ecf8:	b9b8      	cbnz	r0, ed2a <log_strdup+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ecfa:	2201      	movs	r2, #1
    ecfc:	9b01      	ldr	r3, [sp, #4]
    ecfe:	e8d3 1fef 	ldaex	r1, [r3]
    ed02:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ed06:	2800      	cmp	r0, #0
    ed08:	d1f9      	bne.n	ecfe <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    ed0a:	9801      	ldr	r0, [sp, #4]
    ed0c:	4621      	mov	r1, r4
    ed0e:	222d      	movs	r2, #45	; 0x2d
    ed10:	3004      	adds	r0, #4
    ed12:	f00e fb05 	bl	1d320 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    ed16:	237e      	movs	r3, #126	; 0x7e
    ed18:	9c01      	ldr	r4, [sp, #4]
    ed1a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    ed1e:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    ed22:	3404      	adds	r4, #4
}
    ed24:	4620      	mov	r0, r4
    ed26:	b003      	add	sp, #12
    ed28:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    ed2a:	4c04      	ldr	r4, [pc, #16]	; (ed3c <log_strdup+0x60>)
    ed2c:	e7fa      	b.n	ed24 <log_strdup+0x48>
    ed2e:	bf00      	nop
    ed30:	0001ee20 	.word	0x0001ee20
    ed34:	00020d48 	.word	0x00020d48
    ed38:	20020214 	.word	0x20020214
    ed3c:	000202ef 	.word	0x000202ef

0000ed40 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
    ed40:	b148      	cbz	r0, ed56 <log_is_strdup+0x16>
    ed42:	4b05      	ldr	r3, [pc, #20]	; (ed58 <log_is_strdup+0x18>)
    ed44:	4298      	cmp	r0, r3
    ed46:	d305      	bcc.n	ed54 <log_is_strdup+0x14>
    ed48:	33d0      	adds	r3, #208	; 0xd0
    ed4a:	4298      	cmp	r0, r3
    ed4c:	bf2c      	ite	cs
    ed4e:	2000      	movcs	r0, #0
    ed50:	2001      	movcc	r0, #1
    ed52:	4770      	bx	lr
    ed54:	2000      	movs	r0, #0
}
    ed56:	4770      	bx	lr
    ed58:	2002aac8 	.word	0x2002aac8

0000ed5c <log_free>:
{
    ed5c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    ed5e:	3804      	subs	r0, #4
    ed60:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ed62:	e8d0 3fef 	ldaex	r3, [r0]
    ed66:	1e5a      	subs	r2, r3, #1
    ed68:	e8c0 2fe1 	stlex	r1, r2, [r0]
    ed6c:	2900      	cmp	r1, #0
    ed6e:	d1f8      	bne.n	ed62 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    ed70:	2b01      	cmp	r3, #1
    ed72:	d103      	bne.n	ed7c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    ed74:	a901      	add	r1, sp, #4
    ed76:	4803      	ldr	r0, [pc, #12]	; (ed84 <log_free+0x28>)
    ed78:	f00c f968 	bl	1b04c <k_mem_slab_free>
}
    ed7c:	b003      	add	sp, #12
    ed7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed82:	bf00      	nop
    ed84:	20020214 	.word	0x20020214

0000ed88 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    ed88:	2320      	movs	r3, #32
    ed8a:	4902      	ldr	r1, [pc, #8]	; (ed94 <log_msg_pool_init+0xc>)
    ed8c:	461a      	mov	r2, r3
    ed8e:	4802      	ldr	r0, [pc, #8]	; (ed98 <log_msg_pool_init+0x10>)
    ed90:	f00f bc5b 	b.w	1e64a <k_mem_slab_init>
    ed94:	2002ab98 	.word	0x2002ab98
    ed98:	200202e4 	.word	0x200202e4

0000ed9c <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    ed9c:	2300      	movs	r3, #0
{
    ed9e:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    eda0:	4d09      	ldr	r5, [pc, #36]	; (edc8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    eda2:	9301      	str	r3, [sp, #4]
    eda4:	2001      	movs	r0, #1
    eda6:	f7ff fe4f 	bl	ea48 <z_impl_log_process>
    edaa:	4604      	mov	r4, r0
			log_dropped();
    edac:	f7ff fef6 	bl	eb9c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    edb0:	2200      	movs	r2, #0
    edb2:	a901      	add	r1, sp, #4
    edb4:	4628      	mov	r0, r5
    edb6:	f00c f91d 	bl	1aff4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    edba:	b108      	cbz	r0, edc0 <log_msg_no_space_handle+0x24>
    edbc:	2c00      	cmp	r4, #0
    edbe:	d1f1      	bne.n	eda4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    edc0:	9801      	ldr	r0, [sp, #4]
    edc2:	b003      	add	sp, #12
    edc4:	bd30      	pop	{r4, r5, pc}
    edc6:	bf00      	nop
    edc8:	200202e4 	.word	0x200202e4

0000edcc <log_msg_chunk_alloc>:
{
    edcc:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    edce:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    edd0:	a901      	add	r1, sp, #4
    edd2:	4806      	ldr	r0, [pc, #24]	; (edec <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    edd4:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    edd6:	f00c f90d 	bl	1aff4 <k_mem_slab_alloc>
	if (err != 0) {
    edda:	b110      	cbz	r0, ede2 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    eddc:	f7ff ffde 	bl	ed9c <log_msg_no_space_handle>
    ede0:	9001      	str	r0, [sp, #4]
}
    ede2:	9801      	ldr	r0, [sp, #4]
    ede4:	b003      	add	sp, #12
    ede6:	f85d fb04 	ldr.w	pc, [sp], #4
    edea:	bf00      	nop
    edec:	200202e4 	.word	0x200202e4

0000edf0 <msg_free>:
{
    edf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    edf2:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    edf4:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    edf6:	f014 0401 	ands.w	r4, r4, #1
{
    edfa:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    edfc:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    ee00:	d00e      	beq.n	ee20 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    ee02:	9b01      	ldr	r3, [sp, #4]
    ee04:	7a1a      	ldrb	r2, [r3, #8]
    ee06:	0792      	lsls	r2, r2, #30
    ee08:	d504      	bpl.n	ee14 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    ee0a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    ee0c:	4c10      	ldr	r4, [pc, #64]	; (ee50 <msg_free+0x60>)
    ee0e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    ee10:	9b03      	ldr	r3, [sp, #12]
    ee12:	b9b3      	cbnz	r3, ee42 <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    ee14:	a901      	add	r1, sp, #4
    ee16:	480e      	ldr	r0, [pc, #56]	; (ee50 <msg_free+0x60>)
    ee18:	f00c f918 	bl	1b04c <k_mem_slab_free>
}
    ee1c:	b004      	add	sp, #16
    ee1e:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    ee20:	2d00      	cmp	r5, #0
    ee22:	d0ee      	beq.n	ee02 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    ee24:	42a5      	cmp	r5, r4
    ee26:	9801      	ldr	r0, [sp, #4]
    ee28:	d9eb      	bls.n	ee02 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    ee2a:	4621      	mov	r1, r4
    ee2c:	f00d fe28 	bl	1ca80 <log_msg_arg_get>
    ee30:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    ee32:	f7ff ff85 	bl	ed40 <log_is_strdup>
    ee36:	b110      	cbz	r0, ee3e <msg_free+0x4e>
				log_free(buf);
    ee38:	4630      	mov	r0, r6
    ee3a:	f7ff ff8f 	bl	ed5c <log_free>
		for (i = 0; i < nargs; i++) {
    ee3e:	3401      	adds	r4, #1
    ee40:	e7f0      	b.n	ee24 <msg_free+0x34>
		next = cont->next;
    ee42:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    ee44:	a903      	add	r1, sp, #12
    ee46:	4620      	mov	r0, r4
    ee48:	f00c f900 	bl	1b04c <k_mem_slab_free>
		cont = next;
    ee4c:	9503      	str	r5, [sp, #12]
    ee4e:	e7df      	b.n	ee10 <msg_free+0x20>
    ee50:	200202e4 	.word	0x200202e4

0000ee54 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    ee54:	b40e      	push	{r1, r2, r3}
    ee56:	b503      	push	{r0, r1, lr}
    ee58:	ab03      	add	r3, sp, #12
    ee5a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ee5e:	4601      	mov	r1, r0
    ee60:	4804      	ldr	r0, [pc, #16]	; (ee74 <print_formatted+0x20>)
	va_start(args, fmt);
    ee62:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    ee64:	f00d fbac 	bl	1c5c0 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    ee68:	2000      	movs	r0, #0
    ee6a:	b002      	add	sp, #8
    ee6c:	f85d eb04 	ldr.w	lr, [sp], #4
    ee70:	b003      	add	sp, #12
    ee72:	4770      	bx	lr
    ee74:	0001ce81 	.word	0x0001ce81

0000ee78 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    ee7c:	f011 0402 	ands.w	r4, r1, #2
{
    ee80:	b085      	sub	sp, #20
    ee82:	4606      	mov	r6, r0
    ee84:	4690      	mov	r8, r2
    ee86:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    ee8a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ee8e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    ee92:	d007      	beq.n	eea4 <prefix_print+0x2c>
	if (!format) {
    ee94:	f011 0f44 	tst.w	r1, #68	; 0x44
    ee98:	d137      	bne.n	ef0a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    ee9a:	461a      	mov	r2, r3
    ee9c:	4932      	ldr	r1, [pc, #200]	; (ef68 <prefix_print+0xf0>)
    ee9e:	f7ff ffd9 	bl	ee54 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    eea2:	4604      	mov	r4, r0
	if (color) {
    eea4:	f1b9 0f00 	cmp.w	r9, #0
    eea8:	d00a      	beq.n	eec0 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    eeaa:	4b30      	ldr	r3, [pc, #192]	; (ef6c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
    eeac:	4930      	ldr	r1, [pc, #192]	; (ef70 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
    eeae:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    eeb2:	4b30      	ldr	r3, [pc, #192]	; (ef74 <prefix_print+0xfc>)
    eeb4:	4630      	mov	r0, r6
    eeb6:	2a00      	cmp	r2, #0
    eeb8:	bf08      	it	eq
    eeba:	461a      	moveq	r2, r3
    eebc:	f7ff ffca 	bl	ee54 <print_formatted>
	if (level_on) {
    eec0:	b13d      	cbz	r5, eed2 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    eec2:	4b2d      	ldr	r3, [pc, #180]	; (ef78 <prefix_print+0x100>)
    eec4:	492d      	ldr	r1, [pc, #180]	; (ef7c <prefix_print+0x104>)
    eec6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    eeca:	4630      	mov	r0, r6
    eecc:	f7ff ffc2 	bl	ee54 <print_formatted>
    eed0:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    eed2:	f1b8 0f00 	cmp.w	r8, #0
    eed6:	d044      	beq.n	ef62 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    eed8:	2301      	movs	r3, #1
    eeda:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    eede:	4b28      	ldr	r3, [pc, #160]	; (ef80 <prefix_print+0x108>)
    eee0:	f017 0f10 	tst.w	r7, #16
    eee4:	4f27      	ldr	r7, [pc, #156]	; (ef84 <prefix_print+0x10c>)
    eee6:	bf18      	it	ne
    eee8:	461f      	movne	r7, r3
    eeea:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    eeee:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    eef2:	f7ff fe5f 	bl	ebb4 <log_source_name_get>
    eef6:	4639      	mov	r1, r7
    eef8:	4602      	mov	r2, r0
    eefa:	4630      	mov	r0, r6
    eefc:	f7ff ffaa 	bl	ee54 <print_formatted>
    ef00:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    ef02:	4420      	add	r0, r4
    ef04:	b005      	add	sp, #20
    ef06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    ef0a:	4a1f      	ldr	r2, [pc, #124]	; (ef88 <prefix_print+0x110>)
    ef0c:	6811      	ldr	r1, [r2, #0]
    ef0e:	b331      	cbz	r1, ef5e <prefix_print+0xe6>
		timestamp /= timestamp_div;
    ef10:	4a1e      	ldr	r2, [pc, #120]	; (ef8c <prefix_print+0x114>)
    ef12:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    ef16:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    ef18:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    ef1c:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
    ef20:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    ef24:	fbb4 f2fe 	udiv	r2, r4, lr
    ef28:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    ef2c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    ef30:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ef34:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    ef38:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ef3c:	fb01 441b 	mls	r4, r1, fp, r4
    ef40:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    ef44:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ef48:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    ef4c:	e9cd b101 	strd	fp, r1, [sp, #4]
    ef50:	fb0a e113 	mls	r1, sl, r3, lr
    ef54:	9100      	str	r1, [sp, #0]
    ef56:	490e      	ldr	r1, [pc, #56]	; (ef90 <prefix_print+0x118>)
    ef58:	f7ff ff7c 	bl	ee54 <print_formatted>
    ef5c:	e7a1      	b.n	eea2 <prefix_print+0x2a>
		length = 0;
    ef5e:	4608      	mov	r0, r1
    ef60:	e79f      	b.n	eea2 <prefix_print+0x2a>
	total += print_formatted(log_output,
    ef62:	4f08      	ldr	r7, [pc, #32]	; (ef84 <prefix_print+0x10c>)
    ef64:	e7c1      	b.n	eeea <prefix_print+0x72>
    ef66:	bf00      	nop
    ef68:	00020354 	.word	0x00020354
    ef6c:	0001f240 	.word	0x0001f240
    ef70:	00020b67 	.word	0x00020b67
    ef74:	00020346 	.word	0x00020346
    ef78:	0001f254 	.word	0x0001f254
    ef7c:	00020379 	.word	0x00020379
    ef80:	00020350 	.word	0x00020350
    ef84:	0002034b 	.word	0x0002034b
    ef88:	20020300 	.word	0x20020300
    ef8c:	20020304 	.word	0x20020304
    ef90:	0002035d 	.word	0x0002035d

0000ef94 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    ef94:	b538      	push	{r3, r4, r5, lr}
    ef96:	460c      	mov	r4, r1
	if (color) {
    ef98:	07e1      	lsls	r1, r4, #31
{
    ef9a:	4605      	mov	r5, r0
	if (color) {
    ef9c:	d503      	bpl.n	efa6 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    ef9e:	4a08      	ldr	r2, [pc, #32]	; (efc0 <postfix_print+0x2c>)
    efa0:	4908      	ldr	r1, [pc, #32]	; (efc4 <postfix_print+0x30>)
    efa2:	f7ff ff57 	bl	ee54 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    efa6:	06e2      	lsls	r2, r4, #27
    efa8:	d408      	bmi.n	efbc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    efaa:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    efac:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    efae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    efb2:	bf4c      	ite	mi
    efb4:	4904      	ldrmi	r1, [pc, #16]	; (efc8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    efb6:	4905      	ldrpl	r1, [pc, #20]	; (efcc <postfix_print+0x38>)
    efb8:	f7ff bf4c 	b.w	ee54 <print_formatted>
}
    efbc:	bd38      	pop	{r3, r4, r5, pc}
    efbe:	bf00      	nop
    efc0:	00020346 	.word	0x00020346
    efc4:	00020b67 	.word	0x00020b67
    efc8:	0001fb64 	.word	0x0001fb64
    efcc:	0001fb63 	.word	0x0001fb63

0000efd0 <hexdump_line_print>:
{
    efd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efd4:	4698      	mov	r8, r3
    efd6:	9b08      	ldr	r3, [sp, #32]
    efd8:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    efda:	06dd      	lsls	r5, r3, #27
{
    efdc:	460e      	mov	r6, r1
    efde:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    efe0:	d405      	bmi.n	efee <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    efe2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    efe4:	bf4c      	ite	mi
    efe6:	4929      	ldrmi	r1, [pc, #164]	; (f08c <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
    efe8:	4929      	ldrpl	r1, [pc, #164]	; (f090 <hexdump_line_print+0xc0>)
    efea:	f7ff ff33 	bl	ee54 <print_formatted>
{
    efee:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
    eff0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; f098 <hexdump_line_print+0xc8>
	for (int i = 0; i < prefix_offset; i++) {
    eff4:	4545      	cmp	r5, r8
    eff6:	db2a      	blt.n	f04e <hexdump_line_print+0x7e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    eff8:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    effa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f09c <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    effe:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f0a0 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    f002:	f8df a094 	ldr.w	sl, [pc, #148]	; f098 <hexdump_line_print+0xc8>
		if (i < length) {
    f006:	42bd      	cmp	r5, r7
    f008:	d22e      	bcs.n	f068 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
    f00a:	5d72      	ldrb	r2, [r6, r5]
    f00c:	4649      	mov	r1, r9
    f00e:	4620      	mov	r0, r4
    f010:	f7ff ff20 	bl	ee54 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f014:	3501      	adds	r5, #1
    f016:	2d10      	cmp	r5, #16
    f018:	d11f      	bne.n	f05a <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
    f01a:	491e      	ldr	r1, [pc, #120]	; (f094 <hexdump_line_print+0xc4>)
    f01c:	4620      	mov	r0, r4
    f01e:	f7ff ff19 	bl	ee54 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f022:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    f024:	f8df 8070 	ldr.w	r8, [pc, #112]	; f098 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    f028:	f8df 9078 	ldr.w	r9, [pc, #120]	; f0a4 <hexdump_line_print+0xd4>
		if (i < length) {
    f02c:	42af      	cmp	r7, r5
    f02e:	d927      	bls.n	f080 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
    f030:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    f032:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    f034:	f1a2 0320 	sub.w	r3, r2, #32
    f038:	2b5f      	cmp	r3, #95	; 0x5f
    f03a:	bf28      	it	cs
    f03c:	222e      	movcs	r2, #46	; 0x2e
    f03e:	4620      	mov	r0, r4
    f040:	f7ff ff08 	bl	ee54 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f044:	3501      	adds	r5, #1
    f046:	2d10      	cmp	r5, #16
    f048:	d113      	bne.n	f072 <hexdump_line_print+0xa2>
}
    f04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    f04e:	4649      	mov	r1, r9
    f050:	4620      	mov	r0, r4
    f052:	f7ff feff 	bl	ee54 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f056:	3501      	adds	r5, #1
    f058:	e7cc      	b.n	eff4 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
    f05a:	076a      	lsls	r2, r5, #29
    f05c:	d1d3      	bne.n	f006 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
    f05e:	4651      	mov	r1, sl
    f060:	4620      	mov	r0, r4
    f062:	f7ff fef7 	bl	ee54 <print_formatted>
    f066:	e7ce      	b.n	f006 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
    f068:	4641      	mov	r1, r8
    f06a:	4620      	mov	r0, r4
    f06c:	f7ff fef2 	bl	ee54 <print_formatted>
    f070:	e7d0      	b.n	f014 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
    f072:	076b      	lsls	r3, r5, #29
    f074:	d1da      	bne.n	f02c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f076:	4641      	mov	r1, r8
    f078:	4620      	mov	r0, r4
    f07a:	f7ff feeb 	bl	ee54 <print_formatted>
    f07e:	e7d5      	b.n	f02c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
    f080:	4641      	mov	r1, r8
    f082:	4620      	mov	r0, r4
    f084:	f7ff fee6 	bl	ee54 <print_formatted>
    f088:	e7dc      	b.n	f044 <hexdump_line_print+0x74>
    f08a:	bf00      	nop
    f08c:	0001fb64 	.word	0x0001fb64
    f090:	0001fb63 	.word	0x0001fb63
    f094:	00020317 	.word	0x00020317
    f098:	00020315 	.word	0x00020315
    f09c:	00020313 	.word	0x00020313
    f0a0:	0002030d 	.word	0x0002030d
    f0a4:	00020319 	.word	0x00020319

0000f0a8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    f0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    f0ac:	7a8b      	ldrb	r3, [r1, #10]
    f0ae:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f0b0:	f013 0407 	ands.w	r4, r3, #7
{
    f0b4:	b08a      	sub	sp, #40	; 0x28
    f0b6:	4605      	mov	r5, r0
    f0b8:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f0ba:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f0bc:	d01c      	beq.n	f0f8 <log_output_msg_process+0x50>
    f0be:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    f0c0:	8949      	ldrh	r1, [r1, #10]
    f0c2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f0c6:	0989      	lsrs	r1, r1, #6
    f0c8:	9102      	str	r1, [sp, #8]
    f0ca:	e9cd 4300 	strd	r4, r3, [sp]
    f0ce:	f002 0201 	and.w	r2, r2, #1
    f0d2:	68f3      	ldr	r3, [r6, #12]
    f0d4:	4639      	mov	r1, r7
    f0d6:	f7ff fecf 	bl	ee78 <prefix_print>
    f0da:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f0dc:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f0de:	07da      	lsls	r2, r3, #31
    f0e0:	d40c      	bmi.n	f0fc <log_output_msg_process+0x54>
		std_print(msg, log_output);
    f0e2:	4629      	mov	r1, r5
    f0e4:	4630      	mov	r0, r6
    f0e6:	f00d fd61 	bl	1cbac <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f0ea:	b34c      	cbz	r4, f140 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    f0ec:	4622      	mov	r2, r4
    f0ee:	4639      	mov	r1, r7
    f0f0:	4628      	mov	r0, r5
    f0f2:	f7ff ff4f 	bl	ef94 <postfix_print>
    f0f6:	e023      	b.n	f140 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f0f8:	46a1      	mov	r9, r4
    f0fa:	e7ef      	b.n	f0dc <log_output_msg_process+0x34>
	} else if (raw_string) {
    f0fc:	bb34      	cbnz	r4, f14c <log_output_msg_process+0xa4>
	size_t offset = 0;
    f0fe:	4627      	mov	r7, r4
		length = log_output->size;
    f100:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f102:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f104:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f106:	68a9      	ldr	r1, [r5, #8]
    f108:	463b      	mov	r3, r7
    f10a:	4630      	mov	r0, r6
    f10c:	f00d fd3a 	bl	1cb84 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f110:	9a06      	ldr	r2, [sp, #24]
    f112:	686b      	ldr	r3, [r5, #4]
    f114:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f116:	b13a      	cbz	r2, f128 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    f118:	68ab      	ldr	r3, [r5, #8]
    f11a:	4413      	add	r3, r2
    f11c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    f120:	f1a4 030a 	sub.w	r3, r4, #10
    f124:	425c      	negs	r4, r3
    f126:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    f128:	4628      	mov	r0, r5
    f12a:	f00d fe9c 	bl	1ce66 <log_output_flush>
		offset += length;
    f12e:	9b06      	ldr	r3, [sp, #24]
    f130:	441f      	add	r7, r3
	} while (length > 0);
    f132:	2b00      	cmp	r3, #0
    f134:	d1e4      	bne.n	f100 <log_output_msg_process+0x58>
	if (eol) {
    f136:	b11c      	cbz	r4, f140 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    f138:	4914      	ldr	r1, [pc, #80]	; (f18c <log_output_msg_process+0xe4>)
    f13a:	4628      	mov	r0, r5
    f13c:	f7ff fe8a 	bl	ee54 <print_formatted>
	}

	log_output_flush(log_output);
    f140:	4628      	mov	r0, r5
    f142:	f00d fe90 	bl	1ce66 <log_output_flush>
}
    f146:	b00a      	add	sp, #40	; 0x28
    f148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    f14c:	4630      	mov	r0, r6
    f14e:	f00d fcc3 	bl	1cad8 <log_msg_str_get>
    f152:	490f      	ldr	r1, [pc, #60]	; (f190 <log_output_msg_process+0xe8>)
    f154:	4602      	mov	r2, r0
    f156:	4628      	mov	r0, r5
    f158:	f7ff fe7c 	bl	ee54 <print_formatted>
	u32_t offset = 0U;
    f15c:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    f160:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f164:	aa05      	add	r2, sp, #20
    f166:	4643      	mov	r3, r8
    f168:	a906      	add	r1, sp, #24
    f16a:	4630      	mov	r0, r6
		length = sizeof(buf);
    f16c:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f170:	f00d fd08 	bl	1cb84 <log_msg_hexdump_data_get>
		if (length) {
    f174:	9a05      	ldr	r2, [sp, #20]
    f176:	2a00      	cmp	r2, #0
    f178:	d0b8      	beq.n	f0ec <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    f17a:	464b      	mov	r3, r9
    f17c:	9700      	str	r7, [sp, #0]
    f17e:	a906      	add	r1, sp, #24
    f180:	4628      	mov	r0, r5
    f182:	f7ff ff25 	bl	efd0 <hexdump_line_print>
			offset += length;
    f186:	9b05      	ldr	r3, [sp, #20]
    f188:	4498      	add	r8, r3
    f18a:	e7eb      	b.n	f164 <log_output_msg_process+0xbc>
    f18c:	0002031c 	.word	0x0002031c
    f190:	00020b67 	.word	0x00020b67

0000f194 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    f194:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    f196:	e9d0 4300 	ldrd	r4, r3, [r0]
    f19a:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    f19c:	f242 730f 	movw	r3, #9999	; 0x270f
    f1a0:	428b      	cmp	r3, r1
    f1a2:	bf28      	it	cs
    f1a4:	460b      	movcs	r3, r1
    f1a6:	4a0d      	ldr	r2, [pc, #52]	; (f1dc <log_output_dropped_process+0x48>)
    f1a8:	2105      	movs	r1, #5
    f1aa:	4668      	mov	r0, sp
    f1ac:	f001 fd84 	bl	10cb8 <snprintf>
    f1b0:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    f1b2:	462b      	mov	r3, r5
    f1b4:	4620      	mov	r0, r4
    f1b6:	220b      	movs	r2, #11
    f1b8:	4909      	ldr	r1, [pc, #36]	; (f1e0 <log_output_dropped_process+0x4c>)
    f1ba:	f00d fcea 	bl	1cb92 <buffer_write>
	buffer_write(outf, buf, len, dev);
    f1be:	462b      	mov	r3, r5
    f1c0:	4632      	mov	r2, r6
    f1c2:	4669      	mov	r1, sp
    f1c4:	4620      	mov	r0, r4
    f1c6:	f00d fce4 	bl	1cb92 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    f1ca:	462b      	mov	r3, r5
    f1cc:	221b      	movs	r2, #27
    f1ce:	4905      	ldr	r1, [pc, #20]	; (f1e4 <log_output_dropped_process+0x50>)
    f1d0:	4620      	mov	r0, r4
    f1d2:	f00d fcde 	bl	1cb92 <buffer_write>
}
    f1d6:	b002      	add	sp, #8
    f1d8:	bd70      	pop	{r4, r5, r6, pc}
    f1da:	bf00      	nop
    f1dc:	000201ca 	.word	0x000201ca
    f1e0:	0002033a 	.word	0x0002033a
    f1e4:	0002031e 	.word	0x0002031e

0000f1e8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    f1e8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f1ea:	2100      	movs	r1, #0
	timestamp_div = 1U;
    f1ec:	4a07      	ldr	r2, [pc, #28]	; (f20c <log_output_timestamp_freq_set+0x24>)
{
    f1ee:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    f1f0:	4c07      	ldr	r4, [pc, #28]	; (f210 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f1f2:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f1f4:	42a0      	cmp	r0, r4
    f1f6:	d804      	bhi.n	f202 <log_output_timestamp_freq_set+0x1a>
    f1f8:	b101      	cbz	r1, f1fc <log_output_timestamp_freq_set+0x14>
    f1fa:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f1fc:	4b05      	ldr	r3, [pc, #20]	; (f214 <log_output_timestamp_freq_set+0x2c>)
    f1fe:	6018      	str	r0, [r3, #0]
}
    f200:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    f202:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f204:	005b      	lsls	r3, r3, #1
    f206:	2101      	movs	r1, #1
    f208:	e7f4      	b.n	f1f4 <log_output_timestamp_freq_set+0xc>
    f20a:	bf00      	nop
    f20c:	20020304 	.word	0x20020304
    f210:	000f4240 	.word	0x000f4240
    f214:	20020300 	.word	0x20020300

0000f218 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    f218:	4801      	ldr	r0, [pc, #4]	; (f220 <panic+0x8>)
    f21a:	f00d be24 	b.w	1ce66 <log_output_flush>
    f21e:	bf00      	nop
    f220:	0001f280 	.word	0x0001f280

0000f224 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    f224:	4801      	ldr	r0, [pc, #4]	; (f22c <dropped+0x8>)
    f226:	f7ff bfb5 	b.w	f194 <log_output_dropped_process>
    f22a:	bf00      	nop
    f22c:	0001f280 	.word	0x0001f280

0000f230 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    f230:	b508      	push	{r3, lr}
    f232:	4803      	ldr	r0, [pc, #12]	; (f240 <log_backend_uart_init+0x10>)
    f234:	f00b fd50 	bl	1acd8 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    f238:	4b02      	ldr	r3, [pc, #8]	; (f244 <log_backend_uart_init+0x14>)
    f23a:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    f23c:	bd08      	pop	{r3, pc}
    f23e:	bf00      	nop
    f240:	0001f869 	.word	0x0001f869
    f244:	20020310 	.word	0x20020310

0000f248 <put>:
{
    f248:	b510      	push	{r4, lr}
    f24a:	460c      	mov	r4, r1
	log_msg_get(msg);
    f24c:	4608      	mov	r0, r1
    f24e:	f00d fc0b 	bl	1ca68 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    f252:	4621      	mov	r1, r4
    f254:	4804      	ldr	r0, [pc, #16]	; (f268 <put+0x20>)
    f256:	220f      	movs	r2, #15
    f258:	f7ff ff26 	bl	f0a8 <log_output_msg_process>
	log_msg_put(msg);
    f25c:	4620      	mov	r0, r4
}
    f25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f262:	f00d bc2a 	b.w	1caba <log_msg_put>
    f266:	bf00      	nop
    f268:	0001f280 	.word	0x0001f280

0000f26c <socket_offload_register>:
void socket_offload_register(const struct socket_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(socket_ops == NULL);

	socket_ops = ops;
    f26c:	4b01      	ldr	r3, [pc, #4]	; (f274 <socket_offload_register+0x8>)
    f26e:	6018      	str	r0, [r3, #0]
}
    f270:	4770      	bx	lr
    f272:	bf00      	nop
    f274:	2002031c 	.word	0x2002031c

0000f278 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    f278:	280a      	cmp	r0, #10
{
    f27a:	b538      	push	{r3, r4, r5, lr}
    f27c:	4604      	mov	r4, r0
    f27e:	4d07      	ldr	r5, [pc, #28]	; (f29c <console_out+0x24>)
	if ('\n' == c) {
    f280:	d104      	bne.n	f28c <console_out+0x14>
    f282:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    f284:	6843      	ldr	r3, [r0, #4]
    f286:	210d      	movs	r1, #13
    f288:	685b      	ldr	r3, [r3, #4]
    f28a:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    f28c:	6828      	ldr	r0, [r5, #0]
    f28e:	6843      	ldr	r3, [r0, #4]
    f290:	b2e1      	uxtb	r1, r4
    f292:	685b      	ldr	r3, [r3, #4]
    f294:	4798      	blx	r3

	return c;
}
    f296:	4620      	mov	r0, r4
    f298:	bd38      	pop	{r3, r4, r5, pc}
    f29a:	bf00      	nop
    f29c:	20020320 	.word	0x20020320

0000f2a0 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    f2a0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    f2a2:	4c04      	ldr	r4, [pc, #16]	; (f2b4 <uart_console_hook_install+0x14>)
    f2a4:	4620      	mov	r0, r4
    f2a6:	f001 fd01 	bl	10cac <__stdout_hook_install>
	__printk_hook_install(console_out);
    f2aa:	4620      	mov	r0, r4
}
    f2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    f2b0:	f7ff bb30 	b.w	e914 <__printk_hook_install>
    f2b4:	0000f279 	.word	0x0000f279

0000f2b8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    f2b8:	b508      	push	{r3, lr}
    f2ba:	4804      	ldr	r0, [pc, #16]	; (f2cc <uart_console_init+0x14>)
    f2bc:	f00b fd0c 	bl	1acd8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f2c0:	4b03      	ldr	r3, [pc, #12]	; (f2d0 <uart_console_init+0x18>)
    f2c2:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    f2c4:	f7ff ffec 	bl	f2a0 <uart_console_hook_install>

	return 0;
}
    f2c8:	2000      	movs	r0, #0
    f2ca:	bd08      	pop	{r3, pc}
    f2cc:	0001f869 	.word	0x0001f869
    f2d0:	20020320 	.word	0x20020320

0000f2d4 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
    f2d4:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f2d6:	2200      	movs	r2, #0
{
    f2d8:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    f2da:	2101      	movs	r1, #1
    f2dc:	2005      	movs	r0, #5
    f2de:	f000 f9c9 	bl	f674 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    f2e2:	2005      	movs	r0, #5
    f2e4:	f000 f9b6 	bl	f654 <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    f2e8:	2202      	movs	r2, #2
    f2ea:	4b05      	ldr	r3, [pc, #20]	; (f300 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f2ec:	2000      	movs	r0, #0
    f2ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    f2f2:	2203      	movs	r2, #3
    f2f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    f2f8:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
    f2fa:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
    f2fe:	bd10      	pop	{r4, pc}
    f300:	40005000 	.word	0x40005000

0000f304 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    f304:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f306:	4b10      	ldr	r3, [pc, #64]	; (f348 <nrf_power_clock_isr+0x44>)
    f308:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f30a:	b162      	cbz	r2, f326 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
    f30c:	4a0f      	ldr	r2, [pc, #60]	; (f34c <nrf_power_clock_isr+0x48>)
    f30e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f312:	07d1      	lsls	r1, r2, #31
    f314:	d507      	bpl.n	f326 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f316:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    f318:	480d      	ldr	r0, [pc, #52]	; (f350 <nrf_power_clock_isr+0x4c>)
    f31a:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    f31c:	6883      	ldr	r3, [r0, #8]
    f31e:	7a5b      	ldrb	r3, [r3, #9]
    f320:	b90b      	cbnz	r3, f326 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
    f322:	f00d fe61 	bl	1cfe8 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f326:	4b0b      	ldr	r3, [pc, #44]	; (f354 <nrf_power_clock_isr+0x50>)
    f328:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    f32a:	b15a      	cbz	r2, f344 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
    f32c:	4a07      	ldr	r2, [pc, #28]	; (f34c <nrf_power_clock_isr+0x48>)
    f32e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    f332:	0792      	lsls	r2, r2, #30
    f334:	d506      	bpl.n	f344 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f336:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    f338:	4807      	ldr	r0, [pc, #28]	; (f358 <nrf_power_clock_isr+0x54>)
    f33a:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    f33c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
    f340:	f00d be52 	b.w	1cfe8 <clkstarted_handle>
}
    f344:	bd08      	pop	{r3, pc}
    f346:	bf00      	nop
    f348:	40005100 	.word	0x40005100
    f34c:	40005000 	.word	0x40005000
    f350:	2002c56c 	.word	0x2002c56c
    f354:	40005104 	.word	0x40005104
    f358:	2002c578 	.word	0x2002c578

0000f35c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    f35c:	2200      	movs	r2, #0
    f35e:	4b0d      	ldr	r3, [pc, #52]	; (f394 <rtc1_nrf_isr+0x38>)
    f360:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    f364:	f04f 0220 	mov.w	r2, #32
    f368:	f3ef 8111 	mrs	r1, BASEPRI
    f36c:	f382 8811 	msr	BASEPRI, r2
    f370:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f374:	4a08      	ldr	r2, [pc, #32]	; (f398 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f376:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    f37a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f37c:	1ac0      	subs	r0, r0, r3
    f37e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f382:	4403      	add	r3, r0
    f384:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    f386:	f381 8811 	msr	BASEPRI, r1
    f38a:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    f38e:	f00c bdb3 	b.w	1bef8 <z_clock_announce>
    f392:	bf00      	nop
    f394:	40015000 	.word	0x40015000
    f398:	2002033c 	.word	0x2002033c

0000f39c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    f39c:	b570      	push	{r4, r5, r6, lr}
    f39e:	4818      	ldr	r0, [pc, #96]	; (f400 <z_clock_driver_init+0x64>)
    f3a0:	f00b fc9a 	bl	1acd8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    f3a4:	b348      	cbz	r0, f3fa <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    f3a6:	6843      	ldr	r3, [r0, #4]
    f3a8:	2100      	movs	r1, #0
    f3aa:	681b      	ldr	r3, [r3, #0]
    f3ac:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    f3ae:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f3b0:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    f3b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f3b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    f3ba:	4d12      	ldr	r5, [pc, #72]	; (f404 <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    f3bc:	4631      	mov	r1, r6
    f3be:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    f3c2:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    f3c6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f3ca:	4b0f      	ldr	r3, [pc, #60]	; (f408 <z_clock_driver_init+0x6c>)
    f3cc:	2015      	movs	r0, #21
    f3ce:	601c      	str	r4, [r3, #0]
    f3d0:	4b0e      	ldr	r3, [pc, #56]	; (f40c <z_clock_driver_init+0x70>)
    f3d2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f3d6:	4622      	mov	r2, r4
    f3d8:	f000 f94c 	bl	f674 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    f3dc:	2015      	movs	r0, #21
    f3de:	f000 f939 	bl	f654 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    f3e2:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f3e4:	4b0a      	ldr	r3, [pc, #40]	; (f410 <z_clock_driver_init+0x74>)
    f3e6:	601e      	str	r6, [r3, #0]
    f3e8:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    f3ea:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
    f3ee:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f3f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f3f4:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
    f3f8:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    f3fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f3fe:	e7fb      	b.n	f3f8 <z_clock_driver_init+0x5c>
    f400:	000203b6 	.word	0x000203b6
    f404:	40015000 	.word	0x40015000
    f408:	40015140 	.word	0x40015140
    f40c:	e000e100 	.word	0xe000e100
    f410:	40015008 	.word	0x40015008

0000f414 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    f414:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    f416:	4c25      	ldr	r4, [pc, #148]	; (f4ac <z_clock_set_timeout+0x98>)
    f418:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f41c:	bf08      	it	eq
    f41e:	4620      	moveq	r0, r4
	__asm__ volatile(
    f420:	f04f 0320 	mov.w	r3, #32
    f424:	f3ef 8511 	mrs	r5, BASEPRI
    f428:	f383 8811 	msr	BASEPRI, r3
    f42c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f430:	4b1f      	ldr	r3, [pc, #124]	; (f4b0 <z_clock_set_timeout+0x9c>)
    f432:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    f436:	4b1f      	ldr	r3, [pc, #124]	; (f4b4 <z_clock_set_timeout+0xa0>)
    f438:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    f43a:	1aca      	subs	r2, r1, r3
    f43c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    f440:	0212      	lsls	r2, r2, #8
    f442:	d41a      	bmi.n	f47a <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    f444:	1e42      	subs	r2, r0, #1
    f446:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f44a:	42a2      	cmp	r2, r4
    f44c:	bfa8      	it	ge
    f44e:	4622      	movge	r2, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    f450:	1c70      	adds	r0, r6, #1
    f452:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    f454:	42a0      	cmp	r0, r4
    f456:	bf94      	ite	ls
    f458:	1818      	addls	r0, r3, r0
    f45a:	1918      	addhi	r0, r3, r4
	return (a - b) & COUNTER_MAX;
    f45c:	1a41      	subs	r1, r0, r1
    f45e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f462:	4a13      	ldr	r2, [pc, #76]	; (f4b0 <z_clock_set_timeout+0x9c>)
    f464:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    f468:	2902      	cmp	r1, #2
    p_reg->CC[ch] = cc_val;
    f46a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    f46e:	d906      	bls.n	f47e <z_clock_set_timeout+0x6a>
	__asm__ volatile(
    f470:	f385 8811 	msr	BASEPRI, r5
    f474:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    f478:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
    f47a:	2200      	movs	r2, #0
    f47c:	e7e8      	b.n	f450 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    f47e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    f482:	490d      	ldr	r1, [pc, #52]	; (f4b8 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    f484:	1ac3      	subs	r3, r0, r3
    f486:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    f48a:	1e5c      	subs	r4, r3, #1
    f48c:	428c      	cmp	r4, r1
    f48e:	d905      	bls.n	f49c <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f490:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f494:	4b09      	ldr	r3, [pc, #36]	; (f4bc <z_clock_set_timeout+0xa8>)
    f496:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f49a:	e7e9      	b.n	f470 <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
    f49c:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    f49e:	bf02      	ittt	eq
    f4a0:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f4a2:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f4a6:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
    f4aa:	e7e1      	b.n	f470 <z_clock_set_timeout+0x5c>
    f4ac:	00fffffe 	.word	0x00fffffe
    f4b0:	40015000 	.word	0x40015000
    f4b4:	2002033c 	.word	0x2002033c
    f4b8:	007ffffe 	.word	0x007ffffe
    f4bc:	e000e100 	.word	0xe000e100

0000f4c0 <z_clock_elapsed>:
	__asm__ volatile(
    f4c0:	f04f 0220 	mov.w	r2, #32
    f4c4:	f3ef 8311 	mrs	r3, BASEPRI
    f4c8:	f382 8811 	msr	BASEPRI, r2
    f4cc:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f4d0:	4a06      	ldr	r2, [pc, #24]	; (f4ec <z_clock_elapsed+0x2c>)
    f4d2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f4d6:	4a06      	ldr	r2, [pc, #24]	; (f4f0 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f4d8:	6812      	ldr	r2, [r2, #0]
    f4da:	1a80      	subs	r0, r0, r2
    f4dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f4e0:	f383 8811 	msr	BASEPRI, r3
    f4e4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f4e8:	4770      	bx	lr
    f4ea:	bf00      	nop
    f4ec:	40015000 	.word	0x40015000
    f4f0:	2002033c 	.word	0x2002033c

0000f4f4 <z_timer_cycle_get_32>:
	__asm__ volatile(
    f4f4:	f04f 0320 	mov.w	r3, #32
    f4f8:	f3ef 8211 	mrs	r2, BASEPRI
    f4fc:	f383 8811 	msr	BASEPRI, r3
    f500:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    f504:	4906      	ldr	r1, [pc, #24]	; (f520 <z_timer_cycle_get_32+0x2c>)
    f506:	4b07      	ldr	r3, [pc, #28]	; (f524 <z_timer_cycle_get_32+0x30>)
    f508:	6808      	ldr	r0, [r1, #0]
    f50a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    f50e:	f382 8811 	msr	BASEPRI, r2
    f512:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    f516:	1a1b      	subs	r3, r3, r0
    f518:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    f51c:	4418      	add	r0, r3
    f51e:	4770      	bx	lr
    f520:	2002033c 	.word	0x2002033c
    f524:	40015000 	.word	0x40015000

0000f528 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    f528:	4807      	ldr	r0, [pc, #28]	; (f548 <_EXIT_EXC+0xe>)

    ldr r1, [r0, #_kernel_offset_to_current]
    f52a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    f52c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    f52e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    f530:	d003      	beq.n	f53a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    f532:	4906      	ldr	r1, [pc, #24]	; (f54c <_EXIT_EXC+0x12>)
    ldr r2, =_SCS_ICSR_PENDSV
    f534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    f538:	600a      	str	r2, [r1, #0]

0000f53a <_EXIT_EXC>:
_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
#if defined(CONFIG_CPU_CORTEX_M)
    push {r0, lr}
    f53a:	b501      	push	{r0, lr}
    bl z_check_stack_sentinel
    f53c:	f00c fb08 	bl	1bb50 <z_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    f540:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    f544:	4770      	bx	lr
    f546:	0000      	.short	0x0000
    ldr r0, =_kernel
    f548:	20024d00 	.word	0x20024d00
    ldr r1, =_SCS_ICSR
    f54c:	e000ed04 	.word	0xe000ed04

0000f550 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    f550:	4a09      	ldr	r2, [pc, #36]	; (f578 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f552:	490a      	ldr	r1, [pc, #40]	; (f57c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f554:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f556:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    f558:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    f55a:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f55c:	4908      	ldr	r1, [pc, #32]	; (f580 <arch_swap+0x30>)
    f55e:	684b      	ldr	r3, [r1, #4]
    f560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f564:	604b      	str	r3, [r1, #4]
    f566:	2300      	movs	r3, #0
    f568:	f383 8811 	msr	BASEPRI, r3
    f56c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f570:	6893      	ldr	r3, [r2, #8]
}
    f572:	6e98      	ldr	r0, [r3, #104]	; 0x68
    f574:	4770      	bx	lr
    f576:	bf00      	nop
    f578:	20024d00 	.word	0x20024d00
    f57c:	0001f6c0 	.word	0x0001f6c0
    f580:	e000ed00 	.word	0xe000ed00

0000f584 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f584:	4929      	ldr	r1, [pc, #164]	; (f62c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f586:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f588:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    f58c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f58e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f592:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    f596:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f59a:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    f59e:	d004      	beq.n	f5aa <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    f5a0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    f5a4:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    f5a8:	e007      	b.n	f5ba <out_fp_endif>

0000f5aa <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    f5aa:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
    f5ae:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    f5b2:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    f5b6:	f050 0004 	orrs.w	r0, r0, #4

0000f5ba <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    f5ba:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f5be:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f5c0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    f5c4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    f5c8:	4f19      	ldr	r7, [pc, #100]	; (f630 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    f5ca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    f5ce:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    f5d0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    f5d2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    f5d4:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    f5d6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    f5d8:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    f5da:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    f5de:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    f5e2:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    f5e6:	d105      	bne.n	f5f4 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    f5e8:	2300      	movs	r3, #0
    vmsr fpscr, r3
    f5ea:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f5ee:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    f5f2:	e005      	b.n	f600 <in_fp_endif>

0000f5f4 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    f5f4:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    f5f8:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
    f5fc:	ec90 8a10 	vldmia	r0, {s16-s31}

0000f600 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    f600:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    f604:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    f608:	f383 8814 	msr	CONTROL, r3
    isb
    f60c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    f610:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    f612:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    f614:	f00d fd14 	bl	1d040 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    f618:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    f61c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    f620:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    f624:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    f628:	4770      	bx	lr
    f62a:	0000      	.short	0x0000
    ldr r1, =_kernel
    f62c:	20024d00 	.word	0x20024d00
    ldr v4, =_SCS_ICSR
    f630:	e000ed04 	.word	0xe000ed04

0000f634 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    f634:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    f638:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    f63a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f63e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f642:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f644:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f648:	2902      	cmp	r1, #2
    beq _oops
    f64a:	d0ff      	beq.n	f64c <_oops>

0000f64c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f64c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    f64e:	f00d fcec 	bl	1d02a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    f652:	bd01      	pop	{r0, pc}

0000f654 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    f654:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    f656:	2b00      	cmp	r3, #0
    f658:	db08      	blt.n	f66c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f65a:	2201      	movs	r2, #1
    f65c:	f000 001f 	and.w	r0, r0, #31
    f660:	fa02 f000 	lsl.w	r0, r2, r0
    f664:	4a02      	ldr	r2, [pc, #8]	; (f670 <arch_irq_enable+0x1c>)
    f666:	095b      	lsrs	r3, r3, #5
    f668:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    f66c:	4770      	bx	lr
    f66e:	bf00      	nop
    f670:	e000e100 	.word	0xe000e100

0000f674 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f674:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f676:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    f678:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f67c:	bfa8      	it	ge
    f67e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    f682:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f686:	bfb8      	it	lt
    f688:	4b05      	ldrlt	r3, [pc, #20]	; (f6a0 <z_arm_irq_priority_set+0x2c>)
    f68a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f68c:	bfab      	itete	ge
    f68e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f692:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f696:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f69a:	5419      	strblt	r1, [r3, r0]
}
    f69c:	4770      	bx	lr
    f69e:	bf00      	nop
    f6a0:	e000ed14 	.word	0xe000ed14

0000f6a4 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    f6a4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    f6a6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    f6a8:	4b04      	ldr	r3, [pc, #16]	; (f6bc <_arch_isr_direct_pm+0x18>)
    f6aa:	6a18      	ldr	r0, [r3, #32]
    f6ac:	b118      	cbz	r0, f6b6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    f6ae:	2200      	movs	r2, #0
    f6b0:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    f6b2:	f00e ffc8 	bl	1e646 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    f6b6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    f6b8:	bd08      	pop	{r3, pc}
    f6ba:	bf00      	nop
    f6bc:	20024d00 	.word	0x20024d00

0000f6c0 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    f6c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f6c2:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    f6c6:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f6c8:	9300      	str	r3, [sp, #0]
    f6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
    f6cc:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    f6ce:	f00f f9dc 	bl	1ea8a <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    f6d2:	4a0c      	ldr	r2, [pc, #48]	; (f704 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    f6d4:	f1a4 0320 	sub.w	r3, r4, #32
    f6d8:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    f6dc:	f022 0201 	bic.w	r2, r2, #1
    f6e0:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f6e2:	9a06      	ldr	r2, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
    f6e4:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    f6e6:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    f6e8:	9a07      	ldr	r2, [sp, #28]
    f6ea:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    f6ec:	9a08      	ldr	r2, [sp, #32]
    f6ee:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    f6f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    f6f4:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    f6f6:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    f6f8:	2300      	movs	r3, #0
    f6fa:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
    f6fc:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f700:	b002      	add	sp, #8
    f702:	bd70      	pop	{r4, r5, r6, pc}
    f704:	0001c557 	.word	0x0001c557

0000f708 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    f708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f70c:	461f      	mov	r7, r3
    f70e:	4606      	mov	r6, r0
    f710:	460c      	mov	r4, r1
    f712:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f714:	2300      	movs	r3, #0
    f716:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    f71a:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    f71e:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    f722:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    f726:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f72a:	f000 fc1b 	bl	ff64 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    f72e:	4b0a      	ldr	r3, [pc, #40]	; (f758 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
    f730:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f732:	4630      	mov	r0, r6
	_current = main_thread;
    f734:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    f736:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f73a:	f00d fc81 	bl	1d040 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f73e:	4638      	mov	r0, r7
    f740:	f384 8809 	msr	PSP, r4
    f744:	2100      	movs	r1, #0
    f746:	b663      	cpsie	if
    f748:	f381 8811 	msr	BASEPRI, r1
    f74c:	f3bf 8f6f 	isb	sy
    f750:	2200      	movs	r2, #0
    f752:	2300      	movs	r3, #0
    f754:	f00c feff 	bl	1c556 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f758:	20024d00 	.word	0x20024d00

0000f75c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    f75c:	4901      	ldr	r1, [pc, #4]	; (f764 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    f75e:	2210      	movs	r2, #16
	str r2, [r1]
    f760:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    f762:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    f764:	e000ed10 	.word	0xe000ed10

0000f768 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    f768:	4040      	eors	r0, r0
	msr BASEPRI, r0
    f76a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    f76e:	bf30      	wfi

	bx lr
    f770:	4770      	bx	lr
    f772:	bf00      	nop

0000f774 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    f774:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f778:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    f77c:	4672      	mov	r2, lr

	push {r0, lr}
    f77e:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    f780:	f000 fab0 	bl	fce4 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    f784:	bd01      	pop	{r0, pc}
    f786:	bf00      	nop

0000f788 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f78c:	4681      	mov	r9, r0
    f78e:	b08a      	sub	sp, #40	; 0x28

	if (esf != NULL) {
    f790:	460c      	mov	r4, r1
    f792:	2900      	cmp	r1, #0
    f794:	d07a      	beq.n	f88c <z_arm_fatal_error+0x104>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    f796:	2201      	movs	r2, #1
    f798:	f04f 0300 	mov.w	r3, #0
    f79c:	4d3f      	ldr	r5, [pc, #252]	; (f89c <z_arm_fatal_error+0x114>)
    f79e:	f362 0307 	bfi	r3, r2, #0, #8
    f7a2:	4a3f      	ldr	r2, [pc, #252]	; (f8a0 <z_arm_fatal_error+0x118>)
    f7a4:	483f      	ldr	r0, [pc, #252]	; (f8a4 <z_arm_fatal_error+0x11c>)
    f7a6:	1aad      	subs	r5, r5, r2
    f7a8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    f7ac:	f365 138f 	bfi	r3, r5, #6, #10
    f7b0:	f8ad 3000 	strh.w	r3, [sp]
    f7b4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    f7b8:	6809      	ldr	r1, [r1, #0]
    f7ba:	f00d f8dd 	bl	1c978 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    f7be:	2201      	movs	r2, #1
    f7c0:	f04f 0300 	mov.w	r3, #0
    f7c4:	f362 0307 	bfi	r3, r2, #0, #8
    f7c8:	f365 138f 	bfi	r3, r5, #6, #10
    f7cc:	f8ad 3000 	strh.w	r3, [sp]
    f7d0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f7d4:	68e1      	ldr	r1, [r4, #12]
    f7d6:	4834      	ldr	r0, [pc, #208]	; (f8a8 <z_arm_fatal_error+0x120>)
    f7d8:	f00d f8ce 	bl	1c978 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    f7dc:	2301      	movs	r3, #1
    f7de:	f04f 0200 	mov.w	r2, #0
    f7e2:	f363 0207 	bfi	r2, r3, #0, #8
    f7e6:	f365 128f 	bfi	r2, r5, #6, #10
    f7ea:	69e1      	ldr	r1, [r4, #28]
    f7ec:	482f      	ldr	r0, [pc, #188]	; (f8ac <z_arm_fatal_error+0x124>)
    f7ee:	f00d f897 	bl	1c920 <log_1>
	for (int i = 0; i < 16; i += 4) {
    f7f2:	4627      	mov	r7, r4
    f7f4:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    f7f6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; f8b8 <z_arm_fatal_error+0x130>
    f7fa:	edd7 7a08 	vldr	s15, [r7, #32]
    f7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f802:	edcd 7a03 	vstr	s15, [sp, #12]
    f806:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    f80a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f80e:	edcd 7a05 	vstr	s15, [sp, #20]
    f812:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    f816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f81a:	edcd 7a07 	vstr	s15, [sp, #28]
    f81e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    f822:	2208      	movs	r2, #8
    f824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    f828:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    f82c:	f043 0301 	orr.w	r3, r3, #1
    f830:	f363 0807 	bfi	r8, r3, #0, #8
    f834:	1c73      	adds	r3, r6, #1
    f836:	9304      	str	r3, [sp, #16]
    f838:	1cb3      	adds	r3, r6, #2
    f83a:	9306      	str	r3, [sp, #24]
    f83c:	f365 188f 	bfi	r8, r5, #6, #10
    f840:	1cf3      	adds	r3, r6, #3
    f842:	9602      	str	r6, [sp, #8]
    f844:	9308      	str	r3, [sp, #32]
    f846:	eb0d 0102 	add.w	r1, sp, r2
    f84a:	4643      	mov	r3, r8
    f84c:	4650      	mov	r0, sl
	for (int i = 0; i < 16; i += 4) {
    f84e:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    f850:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    f854:	f00d f8ab 	bl	1c9ae <log_n>
	for (int i = 0; i < 16; i += 4) {
    f858:	2e10      	cmp	r6, #16
    f85a:	f107 0710 	add.w	r7, r7, #16
    f85e:	d1cc      	bne.n	f7fa <z_arm_fatal_error+0x72>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    f860:	2301      	movs	r3, #1
    f862:	f04f 0200 	mov.w	r2, #0
    f866:	f363 0207 	bfi	r2, r3, #0, #8
    f86a:	f365 128f 	bfi	r2, r5, #6, #10
    f86e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    f870:	480f      	ldr	r0, [pc, #60]	; (f8b0 <z_arm_fatal_error+0x128>)
    f872:	f00d f855 	bl	1c920 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    f876:	f04f 0200 	mov.w	r2, #0
    f87a:	2301      	movs	r3, #1
    f87c:	f363 0207 	bfi	r2, r3, #0, #8
    f880:	f365 128f 	bfi	r2, r5, #6, #10
    f884:	69a1      	ldr	r1, [r4, #24]
    f886:	480b      	ldr	r0, [pc, #44]	; (f8b4 <z_arm_fatal_error+0x12c>)
    f888:	f00d f84a 	bl	1c920 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    f88c:	4621      	mov	r1, r4
    f88e:	4648      	mov	r0, r9
    f890:	f00b fa4e 	bl	1ad30 <z_fatal_error>
}
    f894:	b00a      	add	sp, #40	; 0x28
    f896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f89a:	bf00      	nop
    f89c:	0001f16c 	.word	0x0001f16c
    f8a0:	0001f10c 	.word	0x0001f10c
    f8a4:	000203e2 	.word	0x000203e2
    f8a8:	00020411 	.word	0x00020411
    f8ac:	00020440 	.word	0x00020440
    f8b0:	00020492 	.word	0x00020492
    f8b4:	000204a1 	.word	0x000204a1
    f8b8:	0002044f 	.word	0x0002044f

0000f8bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    f8bc:	bf30      	wfi
    b z_SysNmiOnReset
    f8be:	f7ff bffd 	b.w	f8bc <z_SysNmiOnReset>
    f8c2:	bf00      	nop

0000f8c4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f8c4:	4a11      	ldr	r2, [pc, #68]	; (f90c <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    f8c6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f8c8:	4b11      	ldr	r3, [pc, #68]	; (f910 <z_arm_prep_c+0x4c>)
    f8ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    f8ce:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    f8d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f8d4:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    f8d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    f8dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    f8e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    f8e4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    f8e8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    f8ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f8f0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    f8f4:	2300      	movs	r3, #0
    f8f6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    f8fa:	f00b fa99 	bl	1ae30 <z_bss_zero>
	z_data_copy();
    f8fe:	f00b faa1 	bl	1ae44 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    f902:	f000 fafb 	bl	fefc <z_arm_int_lib_init>
	z_cstart();
    f906:	f00b fad5 	bl	1aeb4 <z_cstart>
    f90a:	bf00      	nop
    f90c:	0000c000 	.word	0x0000c000
    f910:	e000ed00 	.word	0xe000ed00

0000f914 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    f914:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    f916:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    f918:	4a0b      	ldr	r2, [pc, #44]	; (f948 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    f91a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    f91c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    f91e:	bf1e      	ittt	ne
	movne	r1, #0
    f920:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    f922:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    f924:	f00e fe8f 	blne	1e646 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    f928:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    f92a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    f92e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    f932:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    f936:	4905      	ldr	r1, [pc, #20]	; (f94c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    f938:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    f93a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    f93c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    f93e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    f942:	4903      	ldr	r1, [pc, #12]	; (f950 <_isr_wrapper+0x3c>)
	bx r1
    f944:	4708      	bx	r1
    f946:	0000      	.short	0x0000
	ldr r2, =_kernel
    f948:	20024d00 	.word	0x20024d00
	ldr r1, =_sw_isr_table
    f94c:	0001ee20 	.word	0x0001ee20
	ldr r1, =z_arm_int_exit
    f950:	0000f529 	.word	0x0000f529

0000f954 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    f954:	f00c ffb2 	bl	1c8bc <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f958:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f95a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    f95e:	4808      	ldr	r0, [pc, #32]	; (f980 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    f960:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    f964:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f966:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f96a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f96e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f970:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f972:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f976:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f97a:	f7ff ffa3 	bl	f8c4 <z_arm_prep_c>
    f97e:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    f980:	200282c8 	.word	0x200282c8

0000f984 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    f984:	2301      	movs	r3, #1
    f986:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    f98a:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    f98c:	f363 0107 	bfi	r1, r3, #0, #8
    f990:	4c3a      	ldr	r4, [pc, #232]	; (fa7c <usage_fault.isra.2+0xf8>)
    f992:	4b3b      	ldr	r3, [pc, #236]	; (fa80 <usage_fault.isra.2+0xfc>)
    f994:	483b      	ldr	r0, [pc, #236]	; (fa84 <usage_fault.isra.2+0x100>)
    f996:	1ae4      	subs	r4, r4, r3
    f998:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    f99c:	f364 118f 	bfi	r1, r4, #6, #10
    f9a0:	f00c ffb1 	bl	1c906 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f9a4:	4b38      	ldr	r3, [pc, #224]	; (fa88 <usage_fault.isra.2+0x104>)
    f9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f9a8:	0199      	lsls	r1, r3, #6
    f9aa:	d509      	bpl.n	f9c0 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    f9ac:	f04f 0100 	mov.w	r1, #0
    f9b0:	2301      	movs	r3, #1
    f9b2:	f363 0107 	bfi	r1, r3, #0, #8
    f9b6:	f364 118f 	bfi	r1, r4, #6, #10
    f9ba:	4834      	ldr	r0, [pc, #208]	; (fa8c <usage_fault.isra.2+0x108>)
    f9bc:	f00c ffa3 	bl	1c906 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f9c0:	4b31      	ldr	r3, [pc, #196]	; (fa88 <usage_fault.isra.2+0x104>)
    f9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f9c4:	01da      	lsls	r2, r3, #7
    f9c6:	d509      	bpl.n	f9dc <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    f9c8:	f04f 0100 	mov.w	r1, #0
    f9cc:	2301      	movs	r3, #1
    f9ce:	f363 0107 	bfi	r1, r3, #0, #8
    f9d2:	f364 118f 	bfi	r1, r4, #6, #10
    f9d6:	482e      	ldr	r0, [pc, #184]	; (fa90 <usage_fault.isra.2+0x10c>)
    f9d8:	f00c ff95 	bl	1c906 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    f9dc:	4b2a      	ldr	r3, [pc, #168]	; (fa88 <usage_fault.isra.2+0x104>)
    f9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f9e0:	02db      	lsls	r3, r3, #11
    f9e2:	d509      	bpl.n	f9f8 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    f9e4:	f04f 0100 	mov.w	r1, #0
    f9e8:	2301      	movs	r3, #1
    f9ea:	f363 0107 	bfi	r1, r3, #0, #8
    f9ee:	f364 118f 	bfi	r1, r4, #6, #10
    f9f2:	4828      	ldr	r0, [pc, #160]	; (fa94 <usage_fault.isra.2+0x110>)
    f9f4:	f00c ff87 	bl	1c906 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f9f8:	4b23      	ldr	r3, [pc, #140]	; (fa88 <usage_fault.isra.2+0x104>)
    f9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f9fc:	0318      	lsls	r0, r3, #12
    f9fe:	d509      	bpl.n	fa14 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  No coprocessor instructions");
    fa00:	f04f 0100 	mov.w	r1, #0
    fa04:	2301      	movs	r3, #1
    fa06:	f363 0107 	bfi	r1, r3, #0, #8
    fa0a:	f364 118f 	bfi	r1, r4, #6, #10
    fa0e:	4822      	ldr	r0, [pc, #136]	; (fa98 <usage_fault.isra.2+0x114>)
    fa10:	f00c ff79 	bl	1c906 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    fa14:	4b1c      	ldr	r3, [pc, #112]	; (fa88 <usage_fault.isra.2+0x104>)
    fa16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fa18:	0359      	lsls	r1, r3, #13
    fa1a:	d509      	bpl.n	fa30 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    fa1c:	f04f 0100 	mov.w	r1, #0
    fa20:	2301      	movs	r3, #1
    fa22:	f363 0107 	bfi	r1, r3, #0, #8
    fa26:	f364 118f 	bfi	r1, r4, #6, #10
    fa2a:	481c      	ldr	r0, [pc, #112]	; (fa9c <usage_fault.isra.2+0x118>)
    fa2c:	f00c ff6b 	bl	1c906 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    fa30:	4b15      	ldr	r3, [pc, #84]	; (fa88 <usage_fault.isra.2+0x104>)
    fa32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fa34:	039a      	lsls	r2, r3, #14
    fa36:	d509      	bpl.n	fa4c <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    fa38:	f04f 0100 	mov.w	r1, #0
    fa3c:	2301      	movs	r3, #1
    fa3e:	f363 0107 	bfi	r1, r3, #0, #8
    fa42:	f364 118f 	bfi	r1, r4, #6, #10
    fa46:	4816      	ldr	r0, [pc, #88]	; (faa0 <usage_fault.isra.2+0x11c>)
    fa48:	f00c ff5d 	bl	1c906 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    fa4c:	4b0e      	ldr	r3, [pc, #56]	; (fa88 <usage_fault.isra.2+0x104>)
    fa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fa50:	03db      	lsls	r3, r3, #15
    fa52:	d509      	bpl.n	fa68 <usage_fault.isra.2+0xe4>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    fa54:	f04f 0100 	mov.w	r1, #0
    fa58:	2301      	movs	r3, #1
    fa5a:	f363 0107 	bfi	r1, r3, #0, #8
    fa5e:	f364 118f 	bfi	r1, r4, #6, #10
    fa62:	4810      	ldr	r0, [pc, #64]	; (faa4 <usage_fault.isra.2+0x120>)
    fa64:	f00c ff4f 	bl	1c906 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fa68:	4a07      	ldr	r2, [pc, #28]	; (fa88 <usage_fault.isra.2+0x104>)

	return reason;
}
    fa6a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fa6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fa6e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    fa72:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    fa76:	6293      	str	r3, [r2, #40]	; 0x28
}
    fa78:	bd10      	pop	{r4, pc}
    fa7a:	bf00      	nop
    fa7c:	0001f16c 	.word	0x0001f16c
    fa80:	0001f10c 	.word	0x0001f10c
    fa84:	0002062f 	.word	0x0002062f
    fa88:	e000ed00 	.word	0xe000ed00
    fa8c:	00020647 	.word	0x00020647
    fa90:	0002065a 	.word	0x0002065a
    fa94:	00020674 	.word	0x00020674
    fa98:	0002069e 	.word	0x0002069e
    fa9c:	000206bc 	.word	0x000206bc
    faa0:	000206e1 	.word	0x000206e1
    faa4:	000206fb 	.word	0x000206fb

0000faa8 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    faa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    faaa:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    faac:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    faae:	f04f 0100 	mov.w	r1, #0
    fab2:	4c37      	ldr	r4, [pc, #220]	; (fb90 <mem_manage_fault.isra.4+0xe8>)
    fab4:	f363 0107 	bfi	r1, r3, #0, #8
    fab8:	4b36      	ldr	r3, [pc, #216]	; (fb94 <mem_manage_fault.isra.4+0xec>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    faba:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    fabc:	1ae4      	subs	r4, r4, r3
    fabe:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fac2:	f364 118f 	bfi	r1, r4, #6, #10
    fac6:	4834      	ldr	r0, [pc, #208]	; (fb98 <mem_manage_fault.isra.4+0xf0>)
    fac8:	f00c ff1d 	bl	1c906 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    facc:	4b33      	ldr	r3, [pc, #204]	; (fb9c <mem_manage_fault.isra.4+0xf4>)
    face:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fad0:	06d9      	lsls	r1, r3, #27
    fad2:	d509      	bpl.n	fae8 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    fad4:	f04f 0100 	mov.w	r1, #0
    fad8:	2301      	movs	r3, #1
    fada:	f363 0107 	bfi	r1, r3, #0, #8
    fade:	f364 118f 	bfi	r1, r4, #6, #10
    fae2:	482f      	ldr	r0, [pc, #188]	; (fba0 <mem_manage_fault.isra.4+0xf8>)
    fae4:	f00c ff0f 	bl	1c906 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    fae8:	4b2c      	ldr	r3, [pc, #176]	; (fb9c <mem_manage_fault.isra.4+0xf4>)
    faea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    faec:	071a      	lsls	r2, r3, #28
    faee:	d509      	bpl.n	fb04 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    faf0:	f04f 0100 	mov.w	r1, #0
    faf4:	2301      	movs	r3, #1
    faf6:	f363 0107 	bfi	r1, r3, #0, #8
    fafa:	f364 118f 	bfi	r1, r4, #6, #10
    fafe:	4829      	ldr	r0, [pc, #164]	; (fba4 <mem_manage_fault.isra.4+0xfc>)
    fb00:	f00c ff01 	bl	1c906 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    fb04:	4d25      	ldr	r5, [pc, #148]	; (fb9c <mem_manage_fault.isra.4+0xf4>)
    fb06:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fb08:	079b      	lsls	r3, r3, #30
    fb0a:	d51c      	bpl.n	fb46 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    fb0c:	2301      	movs	r3, #1
    fb0e:	f04f 0100 	mov.w	r1, #0
    fb12:	f363 0107 	bfi	r1, r3, #0, #8
    fb16:	f364 118f 	bfi	r1, r4, #6, #10
    fb1a:	4823      	ldr	r0, [pc, #140]	; (fba8 <mem_manage_fault.isra.4+0x100>)
    fb1c:	f00c fef3 	bl	1c906 <log_0>
		mmfar = SCB->MMFAR;
    fb20:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    fb22:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fb24:	0618      	lsls	r0, r3, #24
    fb26:	d50e      	bpl.n	fb46 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    fb28:	f04f 0200 	mov.w	r2, #0
    fb2c:	2301      	movs	r3, #1
    fb2e:	f363 0207 	bfi	r2, r3, #0, #8
    fb32:	f364 128f 	bfi	r2, r4, #6, #10
    fb36:	481d      	ldr	r0, [pc, #116]	; (fbac <mem_manage_fault.isra.4+0x104>)
    fb38:	f00c fef2 	bl	1c920 <log_1>
			if (from_hard_fault) {
    fb3c:	b11f      	cbz	r7, fb46 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    fb3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fb40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    fb44:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    fb46:	4b15      	ldr	r3, [pc, #84]	; (fb9c <mem_manage_fault.isra.4+0xf4>)
    fb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fb4a:	07da      	lsls	r2, r3, #31
    fb4c:	d509      	bpl.n	fb62 <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    fb4e:	f04f 0100 	mov.w	r1, #0
    fb52:	2301      	movs	r3, #1
    fb54:	f363 0107 	bfi	r1, r3, #0, #8
    fb58:	f364 118f 	bfi	r1, r4, #6, #10
    fb5c:	4814      	ldr	r0, [pc, #80]	; (fbb0 <mem_manage_fault.isra.4+0x108>)
    fb5e:	f00c fed2 	bl	1c906 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    fb62:	4b0e      	ldr	r3, [pc, #56]	; (fb9c <mem_manage_fault.isra.4+0xf4>)
    fb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fb66:	069b      	lsls	r3, r3, #26
    fb68:	d509      	bpl.n	fb7e <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    fb6a:	f04f 0100 	mov.w	r1, #0
    fb6e:	2301      	movs	r3, #1
    fb70:	f363 0107 	bfi	r1, r3, #0, #8
    fb74:	f364 118f 	bfi	r1, r4, #6, #10
    fb78:	480e      	ldr	r0, [pc, #56]	; (fbb4 <mem_manage_fault.isra.4+0x10c>)
    fb7a:	f00c fec4 	bl	1c906 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    fb7e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    fb80:	4b06      	ldr	r3, [pc, #24]	; (fb9c <mem_manage_fault.isra.4+0xf4>)
    fb82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    fb84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fb86:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    fb8a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    fb8c:	7030      	strb	r0, [r6, #0]
}
    fb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb90:	0001f16c 	.word	0x0001f16c
    fb94:	0001f10c 	.word	0x0001f10c
    fb98:	00020557 	.word	0x00020557
    fb9c:	e000ed00 	.word	0xe000ed00
    fba0:	0002056d 	.word	0x0002056d
    fba4:	000205a0 	.word	0x000205a0
    fba8:	000205b3 	.word	0x000205b3
    fbac:	000205cb 	.word	0x000205cb
    fbb0:	000205e1 	.word	0x000205e1
    fbb4:	00020600 	.word	0x00020600

0000fbb8 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    fbba:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fbbc:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    fbbe:	f04f 0100 	mov.w	r1, #0
    fbc2:	4c3d      	ldr	r4, [pc, #244]	; (fcb8 <bus_fault.isra.5+0x100>)
    fbc4:	f363 0107 	bfi	r1, r3, #0, #8
    fbc8:	4b3c      	ldr	r3, [pc, #240]	; (fcbc <bus_fault.isra.5+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    fbca:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    fbcc:	1ae4      	subs	r4, r4, r3
    fbce:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    fbd2:	f364 118f 	bfi	r1, r4, #6, #10
    fbd6:	483a      	ldr	r0, [pc, #232]	; (fcc0 <bus_fault.isra.5+0x108>)
    fbd8:	f00c fe95 	bl	1c906 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    fbdc:	4b39      	ldr	r3, [pc, #228]	; (fcc4 <bus_fault.isra.5+0x10c>)
    fbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fbe0:	04d9      	lsls	r1, r3, #19
    fbe2:	d509      	bpl.n	fbf8 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    fbe4:	f04f 0100 	mov.w	r1, #0
    fbe8:	2301      	movs	r3, #1
    fbea:	f363 0107 	bfi	r1, r3, #0, #8
    fbee:	f364 118f 	bfi	r1, r4, #6, #10
    fbf2:	4835      	ldr	r0, [pc, #212]	; (fcc8 <bus_fault.isra.5+0x110>)
    fbf4:	f00c fe87 	bl	1c906 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    fbf8:	4b32      	ldr	r3, [pc, #200]	; (fcc4 <bus_fault.isra.5+0x10c>)
    fbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fbfc:	051a      	lsls	r2, r3, #20
    fbfe:	d509      	bpl.n	fc14 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    fc00:	f04f 0100 	mov.w	r1, #0
    fc04:	2301      	movs	r3, #1
    fc06:	f363 0107 	bfi	r1, r3, #0, #8
    fc0a:	f364 118f 	bfi	r1, r4, #6, #10
    fc0e:	482f      	ldr	r0, [pc, #188]	; (fccc <bus_fault.isra.5+0x114>)
    fc10:	f00c fe79 	bl	1c906 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    fc14:	4d2b      	ldr	r5, [pc, #172]	; (fcc4 <bus_fault.isra.5+0x10c>)
    fc16:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fc18:	059b      	lsls	r3, r3, #22
    fc1a:	d51c      	bpl.n	fc56 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    fc1c:	2301      	movs	r3, #1
    fc1e:	f04f 0100 	mov.w	r1, #0
    fc22:	f363 0107 	bfi	r1, r3, #0, #8
    fc26:	f364 118f 	bfi	r1, r4, #6, #10
    fc2a:	4829      	ldr	r0, [pc, #164]	; (fcd0 <bus_fault.isra.5+0x118>)
    fc2c:	f00c fe6b 	bl	1c906 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    fc30:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    fc32:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fc34:	0418      	lsls	r0, r3, #16
    fc36:	d50e      	bpl.n	fc56 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    fc38:	f04f 0200 	mov.w	r2, #0
    fc3c:	2301      	movs	r3, #1
    fc3e:	f363 0207 	bfi	r2, r3, #0, #8
    fc42:	f364 128f 	bfi	r2, r4, #6, #10
    fc46:	4823      	ldr	r0, [pc, #140]	; (fcd4 <bus_fault.isra.5+0x11c>)
    fc48:	f00c fe6a 	bl	1c920 <log_1>
			if (from_hard_fault) {
    fc4c:	b11f      	cbz	r7, fc56 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    fc4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fc50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    fc54:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    fc56:	4b1b      	ldr	r3, [pc, #108]	; (fcc4 <bus_fault.isra.5+0x10c>)
    fc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc5a:	0559      	lsls	r1, r3, #21
    fc5c:	d509      	bpl.n	fc72 <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    fc5e:	f04f 0100 	mov.w	r1, #0
    fc62:	2301      	movs	r3, #1
    fc64:	f363 0107 	bfi	r1, r3, #0, #8
    fc68:	f364 118f 	bfi	r1, r4, #6, #10
    fc6c:	481a      	ldr	r0, [pc, #104]	; (fcd8 <bus_fault.isra.5+0x120>)
    fc6e:	f00c fe4a 	bl	1c906 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    fc72:	4b14      	ldr	r3, [pc, #80]	; (fcc4 <bus_fault.isra.5+0x10c>)
    fc74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fc76:	05d2      	lsls	r2, r2, #23
    fc78:	d511      	bpl.n	fc9e <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    fc7a:	f04f 0100 	mov.w	r1, #0
    fc7e:	2301      	movs	r3, #1
    fc80:	4816      	ldr	r0, [pc, #88]	; (fcdc <bus_fault.isra.5+0x124>)
    fc82:	f363 0107 	bfi	r1, r3, #0, #8
    fc86:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    fc8a:	f00c fe3c 	bl	1c906 <log_0>
	*recoverable = memory_fault_recoverable(esf);
    fc8e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    fc90:	4a0c      	ldr	r2, [pc, #48]	; (fcc4 <bus_fault.isra.5+0x10c>)
    fc92:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fc94:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    fc98:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    fc9a:	7030      	strb	r0, [r6, #0]
}
    fc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    fc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fca0:	049b      	lsls	r3, r3, #18
    fca2:	d5f4      	bpl.n	fc8e <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    fca4:	f04f 0100 	mov.w	r1, #0
    fca8:	2301      	movs	r3, #1
    fcaa:	f363 0107 	bfi	r1, r3, #0, #8
    fcae:	f364 118f 	bfi	r1, r4, #6, #10
    fcb2:	480b      	ldr	r0, [pc, #44]	; (fce0 <bus_fault.isra.5+0x128>)
    fcb4:	e7e9      	b.n	fc8a <bus_fault.isra.5+0xd2>
    fcb6:	bf00      	nop
    fcb8:	0001f16c 	.word	0x0001f16c
    fcbc:	0001f10c 	.word	0x0001f10c
    fcc0:	000204cf 	.word	0x000204cf
    fcc4:	e000ed00 	.word	0xe000ed00
    fcc8:	000204e5 	.word	0x000204e5
    fccc:	000205a0 	.word	0x000205a0
    fcd0:	000204f6 	.word	0x000204f6
    fcd4:	0002050f 	.word	0x0002050f
    fcd8:	00020524 	.word	0x00020524
    fcdc:	0002053f 	.word	0x0002053f
    fce0:	00020600 	.word	0x00020600

0000fce4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    fce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    fce8:	4b69      	ldr	r3, [pc, #420]	; (fe90 <z_arm_fault+0x1ac>)
{
    fcea:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    fcec:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    fcf0:	4606      	mov	r6, r0
    fcf2:	4689      	mov	r9, r1
    fcf4:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    fcf6:	f3c8 0708 	ubfx	r7, r8, #0, #9
    fcfa:	2500      	movs	r5, #0
    fcfc:	f385 8811 	msr	BASEPRI, r5
    fd00:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    fd04:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    fd08:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    fd0c:	d128      	bne.n	fd60 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    fd0e:	07d0      	lsls	r0, r2, #31
    fd10:	d426      	bmi.n	fd60 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    fd12:	0651      	lsls	r1, r2, #25
    fd14:	d403      	bmi.n	fd1e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    fd16:	0722      	lsls	r2, r4, #28
    fd18:	d412      	bmi.n	fd40 <z_arm_fault+0x5c>
			*nested_exc = true;
    fd1a:	2501      	movs	r5, #1
    fd1c:	e012      	b.n	fd44 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
    fd1e:	2301      	movs	r3, #1
    fd20:	f04f 0100 	mov.w	r1, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    fd24:	4a5b      	ldr	r2, [pc, #364]	; (fe94 <z_arm_fault+0x1b0>)
    fd26:	f363 0107 	bfi	r1, r3, #0, #8
    fd2a:	4b5b      	ldr	r3, [pc, #364]	; (fe98 <z_arm_fault+0x1b4>)
    fd2c:	485b      	ldr	r0, [pc, #364]	; (fe9c <z_arm_fault+0x1b8>)
    fd2e:	1a9b      	subs	r3, r3, r2
    fd30:	08db      	lsrs	r3, r3, #3
    fd32:	f363 118f 	bfi	r1, r3, #6, #10
    fd36:	f00c fde6 	bl	1c906 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    fd3a:	f014 0504 	ands.w	r5, r4, #4
    fd3e:	d001      	beq.n	fd44 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
    fd40:	464e      	mov	r6, r9
	*nested_exc = false;
    fd42:	2500      	movs	r5, #0
	*recoverable = false;
    fd44:	2300      	movs	r3, #0
    fd46:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    fd4a:	1efb      	subs	r3, r7, #3
    fd4c:	2b09      	cmp	r3, #9
    fd4e:	f200 8082 	bhi.w	fe56 <z_arm_fault+0x172>
    fd52:	e8df f003 	tbb	[pc, r3]
    fd56:	6b07      	.short	0x6b07
    fd58:	80804e6f 	.word	0x80804e6f
    fd5c:	73808080 	.word	0x73808080
		return NULL;
    fd60:	462e      	mov	r6, r5
    fd62:	e7ef      	b.n	fd44 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    fd64:	2301      	movs	r3, #1
    fd66:	f04f 0100 	mov.w	r1, #0
	*recoverable = false;
    fd6a:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
    fd6e:	f363 0107 	bfi	r1, r3, #0, #8
    fd72:	4f49      	ldr	r7, [pc, #292]	; (fe98 <z_arm_fault+0x1b4>)
    fd74:	4b47      	ldr	r3, [pc, #284]	; (fe94 <z_arm_fault+0x1b0>)
    fd76:	484a      	ldr	r0, [pc, #296]	; (fea0 <z_arm_fault+0x1bc>)
    fd78:	1aff      	subs	r7, r7, r3
    fd7a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    fd7e:	f367 118f 	bfi	r1, r7, #6, #10
    fd82:	f00c fdc0 	bl	1c906 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fd86:	4b42      	ldr	r3, [pc, #264]	; (fe90 <z_arm_fault+0x1ac>)
	*recoverable = false;
    fd88:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fd8c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    fd8e:	f014 0402 	ands.w	r4, r4, #2
    fd92:	d00b      	beq.n	fdac <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
    fd94:	f04f 0100 	mov.w	r1, #0
    fd98:	2301      	movs	r3, #1
    fd9a:	4842      	ldr	r0, [pc, #264]	; (fea4 <z_arm_fault+0x1c0>)
    fd9c:	f363 0107 	bfi	r1, r3, #0, #8
    fda0:	f367 118f 	bfi	r1, r7, #6, #10
	PR_FAULT_INFO(
    fda4:	f00c fdaf 	bl	1c906 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    fda8:	2400      	movs	r4, #0
    fdaa:	e025      	b.n	fdf8 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    fdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fdae:	005b      	lsls	r3, r3, #1
    fdb0:	d522      	bpl.n	fdf8 <z_arm_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    fdb2:	2301      	movs	r3, #1
    fdb4:	f04f 0100 	mov.w	r1, #0
    fdb8:	f363 0107 	bfi	r1, r3, #0, #8
    fdbc:	f367 118f 	bfi	r1, r7, #6, #10
    fdc0:	4839      	ldr	r0, [pc, #228]	; (fea8 <z_arm_fault+0x1c4>)
    fdc2:	f00c fda0 	bl	1c906 <log_0>
		if (SCB_MMFSR != 0) {
    fdc6:	4b39      	ldr	r3, [pc, #228]	; (feac <z_arm_fault+0x1c8>)
    fdc8:	781b      	ldrb	r3, [r3, #0]
    fdca:	b12b      	cbz	r3, fdd8 <z_arm_fault+0xf4>
			reason = mem_manage_fault(esf, 1, recoverable);
    fdcc:	2001      	movs	r0, #1
    fdce:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    fdd2:	f7ff fe69 	bl	faa8 <mem_manage_fault.isra.4>
    fdd6:	e00e      	b.n	fdf6 <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
    fdd8:	4b35      	ldr	r3, [pc, #212]	; (feb0 <z_arm_fault+0x1cc>)
    fdda:	781b      	ldrb	r3, [r3, #0]
    fddc:	b12b      	cbz	r3, fdea <z_arm_fault+0x106>
			reason = bus_fault(esf, 1, recoverable);
    fdde:	2001      	movs	r0, #1
    fde0:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    fde4:	f7ff fee8 	bl	fbb8 <bus_fault.isra.5>
    fde8:	e005      	b.n	fdf6 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
    fdea:	4b32      	ldr	r3, [pc, #200]	; (feb4 <z_arm_fault+0x1d0>)
    fdec:	881b      	ldrh	r3, [r3, #0]
    fdee:	b29b      	uxth	r3, r3
    fdf0:	b113      	cbz	r3, fdf8 <z_arm_fault+0x114>
			reason = usage_fault(esf);
    fdf2:	f7ff fdc7 	bl	f984 <usage_fault.isra.2>
    fdf6:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    fdf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fdfc:	b99b      	cbnz	r3, fe26 <z_arm_fault+0x142>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    fdfe:	2268      	movs	r2, #104	; 0x68
    fe00:	4631      	mov	r1, r6
    fe02:	a802      	add	r0, sp, #8
    fe04:	f00d faf5 	bl	1d3f2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    fe08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fe0a:	2d00      	cmp	r5, #0
    fe0c:	d03a      	beq.n	fe84 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    fe0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    fe12:	b922      	cbnz	r2, fe1e <z_arm_fault+0x13a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    fe14:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    fe18:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    fe1c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    fe1e:	a902      	add	r1, sp, #8
    fe20:	4620      	mov	r0, r4
    fe22:	f7ff fcb1 	bl	f788 <z_arm_fatal_error>
}
    fe26:	b01d      	add	sp, #116	; 0x74
    fe28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    fe2c:	f10d 0107 	add.w	r1, sp, #7
    fe30:	2000      	movs	r0, #0
    fe32:	e7ce      	b.n	fdd2 <z_arm_fault+0xee>
		reason = bus_fault(esf, 0, recoverable);
    fe34:	f10d 0107 	add.w	r1, sp, #7
    fe38:	2000      	movs	r0, #0
    fe3a:	e7d3      	b.n	fde4 <z_arm_fault+0x100>
	PR_FAULT_INFO(
    fe3c:	2301      	movs	r3, #1
    fe3e:	f04f 0100 	mov.w	r1, #0
    fe42:	4a14      	ldr	r2, [pc, #80]	; (fe94 <z_arm_fault+0x1b0>)
    fe44:	f363 0107 	bfi	r1, r3, #0, #8
    fe48:	4b13      	ldr	r3, [pc, #76]	; (fe98 <z_arm_fault+0x1b4>)
    fe4a:	481b      	ldr	r0, [pc, #108]	; (feb8 <z_arm_fault+0x1d4>)
    fe4c:	1a9b      	subs	r3, r3, r2
    fe4e:	08db      	lsrs	r3, r3, #3
    fe50:	f363 118f 	bfi	r1, r3, #6, #10
    fe54:	e7a6      	b.n	fda4 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
    fe56:	2201      	movs	r2, #1
    fe58:	f04f 0300 	mov.w	r3, #0
    fe5c:	490e      	ldr	r1, [pc, #56]	; (fe98 <z_arm_fault+0x1b4>)
    fe5e:	f362 0307 	bfi	r3, r2, #0, #8
    fe62:	4a0c      	ldr	r2, [pc, #48]	; (fe94 <z_arm_fault+0x1b0>)
    fe64:	4815      	ldr	r0, [pc, #84]	; (febc <z_arm_fault+0x1d8>)
    fe66:	1a89      	subs	r1, r1, r2
    fe68:	08c9      	lsrs	r1, r1, #3
    fe6a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    fe6e:	f361 138f 	bfi	r3, r1, #6, #10
    fe72:	f1a7 0210 	sub.w	r2, r7, #16
    fe76:	4912      	ldr	r1, [pc, #72]	; (fec0 <z_arm_fault+0x1dc>)
    fe78:	bf18      	it	ne
    fe7a:	4601      	movne	r1, r0
    fe7c:	4811      	ldr	r0, [pc, #68]	; (fec4 <z_arm_fault+0x1e0>)
    fe7e:	f00c fd63 	bl	1c948 <log_2>
    fe82:	e791      	b.n	fda8 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    fe84:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    fe88:	f023 0301 	bic.w	r3, r3, #1
    fe8c:	e7c6      	b.n	fe1c <z_arm_fault+0x138>
    fe8e:	bf00      	nop
    fe90:	e000ed00 	.word	0xe000ed00
    fe94:	0001f10c 	.word	0x0001f10c
    fe98:	0001f16c 	.word	0x0001f16c
    fe9c:	00020726 	.word	0x00020726
    fea0:	00020749 	.word	0x00020749
    fea4:	00020760 	.word	0x00020760
    fea8:	00020781 	.word	0x00020781
    feac:	e000ed28 	.word	0xe000ed28
    feb0:	e000ed29 	.word	0xe000ed29
    feb4:	e000ed2a 	.word	0xe000ed2a
    feb8:	000207a0 	.word	0x000207a0
    febc:	000207eb 	.word	0x000207eb
    fec0:	000207d6 	.word	0x000207d6
    fec4:	00020804 	.word	0x00020804

0000fec8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    fec8:	4a02      	ldr	r2, [pc, #8]	; (fed4 <z_arm_fault_init+0xc>)
    feca:	6953      	ldr	r3, [r2, #20]
    fecc:	f043 0310 	orr.w	r3, r3, #16
    fed0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    fed2:	4770      	bx	lr
    fed4:	e000ed00 	.word	0xe000ed00

0000fed8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    fed8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    fedc:	4905      	ldr	r1, [pc, #20]	; (fef4 <sys_arch_reboot+0x1c>)
    fede:	4b06      	ldr	r3, [pc, #24]	; (fef8 <sys_arch_reboot+0x20>)
    fee0:	68ca      	ldr	r2, [r1, #12]
    fee2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fee6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    fee8:	60cb      	str	r3, [r1, #12]
    feea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    feee:	bf00      	nop
    fef0:	e7fd      	b.n	feee <sys_arch_reboot+0x16>
    fef2:	bf00      	nop
    fef4:	e000ed00 	.word	0xe000ed00
    fef8:	05fa0004 	.word	0x05fa0004

0000fefc <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    fefc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fefe:	2120      	movs	r1, #32
    ff00:	4803      	ldr	r0, [pc, #12]	; (ff10 <z_arm_int_lib_init+0x14>)
    ff02:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    ff04:	3301      	adds	r3, #1
    ff06:	2b41      	cmp	r3, #65	; 0x41
    ff08:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    ff0c:	d1f9      	bne.n	ff02 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    ff0e:	4770      	bx	lr
    ff10:	e000e100 	.word	0xe000e100

0000ff14 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    ff14:	b538      	push	{r3, r4, r5, lr}
    ff16:	4605      	mov	r5, r0
	__asm__ volatile(
    ff18:	f04f 0320 	mov.w	r3, #32
    ff1c:	f3ef 8411 	mrs	r4, BASEPRI
    ff20:	f383 8811 	msr	BASEPRI, r3
    ff24:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    ff28:	f00e fdd0 	bl	1eacc <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    ff2c:	4b0b      	ldr	r3, [pc, #44]	; (ff5c <z_impl_k_thread_abort+0x48>)
    ff2e:	689b      	ldr	r3, [r3, #8]
    ff30:	42ab      	cmp	r3, r5
    ff32:	d10d      	bne.n	ff50 <z_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    ff34:	4b0a      	ldr	r3, [pc, #40]	; (ff60 <z_impl_k_thread_abort+0x4c>)
    ff36:	685a      	ldr	r2, [r3, #4]
    ff38:	f3c2 0208 	ubfx	r2, r2, #0, #9
    ff3c:	b922      	cbnz	r2, ff48 <z_impl_k_thread_abort+0x34>
extern int arch_swap(unsigned int key);

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
    ff3e:	f00b fe07 	bl	1bb50 <z_check_stack_sentinel>

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    ff42:	4620      	mov	r0, r4
    ff44:	f7ff fb04 	bl	f550 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ff48:	685a      	ldr	r2, [r3, #4]
    ff4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    ff4e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    ff50:	4620      	mov	r0, r4
}
    ff52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    ff56:	f00e bcd3 	b.w	1e900 <z_reschedule_irqlock>
    ff5a:	bf00      	nop
    ff5c:	20024d00 	.word	0x20024d00
    ff60:	e000ed00 	.word	0xe000ed00

0000ff64 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    ff64:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    ff66:	4b0e      	ldr	r3, [pc, #56]	; (ffa0 <z_arm_configure_static_mpu_regions+0x3c>)
{
    ff68:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    ff6a:	9302      	str	r3, [sp, #8]
    ff6c:	4b0d      	ldr	r3, [pc, #52]	; (ffa4 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    ff6e:	4c0e      	ldr	r4, [pc, #56]	; (ffa8 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    ff70:	9303      	str	r3, [sp, #12]
    ff72:	4b0e      	ldr	r3, [pc, #56]	; (ffac <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    ff74:	4a0e      	ldr	r2, [pc, #56]	; (ffb0 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    ff76:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    ff78:	ab02      	add	r3, sp, #8
    ff7a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    ff7c:	a801      	add	r0, sp, #4
    ff7e:	4623      	mov	r3, r4
    ff80:	2101      	movs	r1, #1
    ff82:	f000 f951 	bl	10228 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    ff86:	2300      	movs	r3, #0
    ff88:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    ff8a:	4b0a      	ldr	r3, [pc, #40]	; (ffb4 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ff8c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    ff8e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ff90:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    ff92:	9305      	str	r3, [sp, #20]
    ff94:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    ff96:	f000 f951 	bl	1023c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    ff9a:	b008      	add	sp, #32
    ff9c:	bd10      	pop	{r4, pc}
    ff9e:	bf00      	nop
    ffa0:	20020000 	.word	0x20020000
    ffa4:	00000000 	.word	0x00000000
    ffa8:	20040000 	.word	0x20040000
    ffac:	00010006 	.word	0x00010006
    ffb0:	20020000 	.word	0x20020000
    ffb4:	20020000 	.word	0x20020000

0000ffb8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    ffb8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    ffba:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    ffbc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    ffbe:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    ffc2:	f004 031f 	and.w	r3, r4, #31
    ffc6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    ffc8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    ffca:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    ffcc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    ffd0:	4904      	ldr	r1, [pc, #16]	; (ffe4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    ffd2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    ffd6:	f043 0301 	orr.w	r3, r3, #1
    ffda:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    ffdc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    ffde:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    ffe0:	bd10      	pop	{r4, pc}
    ffe2:	bf00      	nop
    ffe4:	e000ed90 	.word	0xe000ed90

0000ffe8 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
    ffe8:	b508      	push	{r3, lr}
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    ffea:	f04f 0200 	mov.w	r2, #0
    ffee:	2301      	movs	r3, #1
    fff0:	4907      	ldr	r1, [pc, #28]	; (10010 <region_allocate_and_init.part.0+0x28>)
    fff2:	f363 0207 	bfi	r2, r3, #0, #8
    fff6:	4b07      	ldr	r3, [pc, #28]	; (10014 <region_allocate_and_init.part.0+0x2c>)
    fff8:	1a5b      	subs	r3, r3, r1
    fffa:	08db      	lsrs	r3, r3, #3
    fffc:	4601      	mov	r1, r0
    fffe:	f363 128f 	bfi	r2, r3, #6, #10
   10002:	4805      	ldr	r0, [pc, #20]	; (10018 <region_allocate_and_init.part.0+0x30>)
   10004:	f00c fc8c 	bl	1c920 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   10008:	f06f 0015 	mvn.w	r0, #21
   1000c:	bd08      	pop	{r3, pc}
   1000e:	bf00      	nop
   10010:	0001f10c 	.word	0x0001f10c
   10014:	0001f15c 	.word	0x0001f15c
   10018:	00020861 	.word	0x00020861

0001001c <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1001c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10020:	4607      	mov	r7, r0
   10022:	4688      	mov	r8, r1
   10024:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   10026:	2600      	movs	r6, #0
	MPU->RNR = index;
   10028:	4d5e      	ldr	r5, [pc, #376]	; (101a4 <mpu_configure_regions_and_partition.constprop.2+0x188>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1002a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1002c:	4546      	cmp	r6, r8
   1002e:	da3d      	bge.n	100ac <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   10030:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   10034:	f8d3 9004 	ldr.w	r9, [r3, #4]
   10038:	f1b9 0f00 	cmp.w	r9, #0
   1003c:	d059      	beq.n	100f2 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   1003e:	f1b9 0f1f 	cmp.w	r9, #31
   10042:	d922      	bls.n	1008a <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   10044:	f019 0f1f 	tst.w	r9, #31
   10048:	d11f      	bne.n	1008a <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   1004a:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1004e:	f01a 0f1f 	tst.w	sl, #31
   10052:	d11a      	bne.n	1008a <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10054:	4650      	mov	r0, sl
   10056:	f00d f81e 	bl	1d096 <arm_cmse_mpu_region_get>
   1005a:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1005c:	eb09 000a 	add.w	r0, r9, sl
   10060:	3801      	subs	r0, #1
   10062:	f00d f818 	bl	1d096 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10066:	4583      	cmp	fp, r0
   10068:	d024      	beq.n	100b4 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   1006a:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1006e:	2301      	movs	r3, #1
   10070:	f04f 0200 	mov.w	r2, #0
   10074:	494c      	ldr	r1, [pc, #304]	; (101a8 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
   10076:	f363 0207 	bfi	r2, r3, #0, #8
   1007a:	4b4c      	ldr	r3, [pc, #304]	; (101ac <mpu_configure_regions_and_partition.constprop.2+0x190>)
   1007c:	484c      	ldr	r0, [pc, #304]	; (101b0 <mpu_configure_regions_and_partition.constprop.2+0x194>)
   1007e:	1a5b      	subs	r3, r3, r1
   10080:	08db      	lsrs	r3, r3, #3
   10082:	f363 128f 	bfi	r2, r3, #6, #10
   10086:	4659      	mov	r1, fp
   10088:	e00c      	b.n	100a4 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1008a:	2301      	movs	r3, #1
   1008c:	f04f 0200 	mov.w	r2, #0
   10090:	4945      	ldr	r1, [pc, #276]	; (101a8 <mpu_configure_regions_and_partition.constprop.2+0x18c>)
   10092:	f363 0207 	bfi	r2, r3, #0, #8
   10096:	4b45      	ldr	r3, [pc, #276]	; (101ac <mpu_configure_regions_and_partition.constprop.2+0x190>)
   10098:	4846      	ldr	r0, [pc, #280]	; (101b4 <mpu_configure_regions_and_partition.constprop.2+0x198>)
   1009a:	1a5b      	subs	r3, r3, r1
   1009c:	4631      	mov	r1, r6
   1009e:	08db      	lsrs	r3, r3, #3
   100a0:	f363 128f 	bfi	r2, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   100a4:	f00c fc3c 	bl	1c920 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   100a8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   100ac:	4620      	mov	r0, r4
   100ae:	b005      	add	sp, #20
   100b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   100b4:	f11b 0f16 	cmn.w	fp, #22
   100b8:	d0d9      	beq.n	1006e <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   100ba:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   100bc:	455b      	cmp	r3, fp
   100be:	dbd6      	blt.n	1006e <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   100c0:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   100c4:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   100c6:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   100ca:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   100cc:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   100d0:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   100d4:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   100d8:	e9d1 3200 	ldrd	r3, r2, [r1]
   100dc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   100de:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   100e0:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   100e4:	d118      	bne.n	10118 <mpu_configure_regions_and_partition.constprop.2+0xfc>
   100e6:	45ca      	cmp	sl, r9
   100e8:	d105      	bne.n	100f6 <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   100ea:	fa5f f08b 	uxtb.w	r0, fp
   100ee:	f00c ffaf 	bl	1d050 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   100f2:	3601      	adds	r6, #1
   100f4:	e79a      	b.n	1002c <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   100f6:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   100fa:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   100fc:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10100:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10104:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10106:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   10108:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1010a:	f00c ffa1 	bl	1d050 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1010e:	f110 0f16 	cmn.w	r0, #22
   10112:	d0c9      	beq.n	100a8 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   10114:	1c44      	adds	r4, r0, #1
   10116:	e7ec      	b.n	100f2 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   10118:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1011c:	692a      	ldr	r2, [r5, #16]
   1011e:	3b01      	subs	r3, #1
   10120:	f023 031f 	bic.w	r3, r3, #31
   10124:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   10128:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1012a:	45ca      	cmp	sl, r9
   1012c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1012e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   10130:	d0eb      	beq.n	1010a <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   10132:	f00c ff8d 	bl	1d050 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10136:	f110 0f16 	cmn.w	r0, #22
   1013a:	d0b5      	beq.n	100a8 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   1013c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   10140:	68ea      	ldr	r2, [r5, #12]
   10142:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   10146:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   1014a:	f362 0304 	bfi	r3, r2, #0, #5
   1014e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10152:	692b      	ldr	r3, [r5, #16]
   10154:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10158:	085b      	lsrs	r3, r3, #1
   1015a:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   1015e:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10162:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   10166:	e9d3 1300 	ldrd	r1, r3, [r3]
   1016a:	440b      	add	r3, r1
   1016c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1016e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   10172:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   10174:	4453      	add	r3, sl
   10176:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   1017a:	b2e4      	uxtb	r4, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   1017c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   10180:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   10182:	9303      	str	r3, [sp, #12]
   10184:	d908      	bls.n	10198 <mpu_configure_regions_and_partition.constprop.2+0x17c>
   10186:	4620      	mov	r0, r4
   10188:	f7ff ff2e 	bl	ffe8 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   1018c:	f110 0f16 	cmn.w	r0, #22
   10190:	4604      	mov	r4, r0
   10192:	d089      	beq.n	100a8 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   10194:	3401      	adds	r4, #1
   10196:	e7ac      	b.n	100f2 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	region_init(index, region_conf);
   10198:	4669      	mov	r1, sp
   1019a:	4620      	mov	r0, r4
   1019c:	f7ff ff0c 	bl	ffb8 <region_init>
			if (reg_index == -EINVAL) {
   101a0:	e7f8      	b.n	10194 <mpu_configure_regions_and_partition.constprop.2+0x178>
   101a2:	bf00      	nop
   101a4:	e000ed90 	.word	0xe000ed90
   101a8:	0001f10c 	.word	0x0001f10c
   101ac:	0001f15c 	.word	0x0001f15c
   101b0:	0002083e 	.word	0x0002083e
   101b4:	0002081b 	.word	0x0002081b

000101b8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   101b8:	2205      	movs	r2, #5
   101ba:	4b03      	ldr	r3, [pc, #12]	; (101c8 <arm_core_mpu_enable+0x10>)
   101bc:	605a      	str	r2, [r3, #4]
   101be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   101c2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   101c6:	4770      	bx	lr
   101c8:	e000ed90 	.word	0xe000ed90

000101cc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   101cc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   101d0:	2200      	movs	r2, #0
   101d2:	4b01      	ldr	r3, [pc, #4]	; (101d8 <arm_core_mpu_disable+0xc>)
   101d4:	605a      	str	r2, [r3, #4]
}
   101d6:	4770      	bx	lr
   101d8:	e000ed90 	.word	0xe000ed90

000101dc <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   101dc:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   101de:	4d0e      	ldr	r5, [pc, #56]	; (10218 <arm_mpu_init+0x3c>)
   101e0:	682e      	ldr	r6, [r5, #0]
   101e2:	2e10      	cmp	r6, #16
   101e4:	d815      	bhi.n	10212 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   101e6:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   101e8:	f7ff fff0 	bl	101cc <arm_core_mpu_disable>
	MPU->MAIR0 =
   101ec:	4b0b      	ldr	r3, [pc, #44]	; (1021c <arm_mpu_init+0x40>)
   101ee:	4a0c      	ldr	r2, [pc, #48]	; (10220 <arm_mpu_init+0x44>)
   101f0:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   101f2:	42a6      	cmp	r6, r4
   101f4:	d105      	bne.n	10202 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   101f6:	4b0b      	ldr	r3, [pc, #44]	; (10224 <arm_mpu_init+0x48>)
   101f8:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
   101fa:	f7ff ffdd 	bl	101b8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   101fe:	2000      	movs	r0, #0
}
   10200:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10202:	6869      	ldr	r1, [r5, #4]
   10204:	4620      	mov	r0, r4
   10206:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1020a:	f7ff fed5 	bl	ffb8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1020e:	3401      	adds	r4, #1
   10210:	e7ef      	b.n	101f2 <arm_mpu_init+0x16>
		return -1;
   10212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10216:	e7f3      	b.n	10200 <arm_mpu_init+0x24>
   10218:	0001f218 	.word	0x0001f218
   1021c:	e000ed90 	.word	0xe000ed90
   10220:	0044ffaa 	.word	0x0044ffaa
   10224:	2002651f 	.word	0x2002651f

00010228 <arm_core_mpu_configure_static_mpu_regions>:
{
   10228:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1022a:	4c03      	ldr	r4, [pc, #12]	; (10238 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1022c:	7822      	ldrb	r2, [r4, #0]
   1022e:	f7ff fef5 	bl	1001c <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10232:	7020      	strb	r0, [r4, #0]
}
   10234:	bd10      	pop	{r4, pc}
   10236:	bf00      	nop
   10238:	2002651f 	.word	0x2002651f

0001023c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1023c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10240:	4c25      	ldr	r4, [pc, #148]	; (102d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
   10242:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10244:	4680      	mov	r8, r0
   10246:	2700      	movs	r7, #0
   10248:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
   1024a:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   1024e:	4d23      	ldr	r5, [pc, #140]	; (102dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10250:	4557      	cmp	r7, sl
   10252:	da1a      	bge.n	1028a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   10254:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10258:	9301      	str	r3, [sp, #4]
   1025a:	2b00      	cmp	r3, #0
   1025c:	d036      	beq.n	102cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1025e:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10262:	4608      	mov	r0, r1
   10264:	9100      	str	r1, [sp, #0]
   10266:	f00c ff16 	bl	1d096 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1026a:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1026e:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10270:	1858      	adds	r0, r3, r1
   10272:	3801      	subs	r0, #1
   10274:	f00c ff0f 	bl	1d096 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10278:	4286      	cmp	r6, r0
   1027a:	4a19      	ldr	r2, [pc, #100]	; (102e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
   1027c:	d008      	beq.n	10290 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1027e:	2314      	movs	r3, #20
   10280:	435f      	muls	r7, r3
   10282:	f06f 0315 	mvn.w	r3, #21
   10286:	f849 3007 	str.w	r3, [r9, r7]
}
   1028a:	b003      	add	sp, #12
   1028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10290:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   10294:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10296:	d0f8      	beq.n	1028a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10298:	7813      	ldrb	r3, [r2, #0]
   1029a:	42b3      	cmp	r3, r6
   1029c:	ddf5      	ble.n	1028a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   1029e:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
   102a2:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   102a4:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   102a6:	68e8      	ldr	r0, [r5, #12]
   102a8:	7b19      	ldrb	r1, [r3, #12]
   102aa:	f360 0104 	bfi	r1, r0, #0, #5
   102ae:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   102b0:	6929      	ldr	r1, [r5, #16]
   102b2:	7b18      	ldrb	r0, [r3, #12]
   102b4:	0849      	lsrs	r1, r1, #1
   102b6:	f361 1047 	bfi	r0, r1, #5, #3
   102ba:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   102bc:	68eb      	ldr	r3, [r5, #12]
   102be:	f023 031f 	bic.w	r3, r3, #31
   102c2:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   102c4:	692b      	ldr	r3, [r5, #16]
   102c6:	f023 031f 	bic.w	r3, r3, #31
   102ca:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   102cc:	3701      	adds	r7, #1
   102ce:	3414      	adds	r4, #20
   102d0:	f108 080c 	add.w	r8, r8, #12
   102d4:	e7bc      	b.n	10250 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   102d6:	bf00      	nop
   102d8:	20020340 	.word	0x20020340
   102dc:	e000ed90 	.word	0xe000ed90
   102e0:	2002651f 	.word	0x2002651f

000102e4 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   102e4:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   102e6:	4b0c      	ldr	r3, [pc, #48]	; (10318 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   102e8:	460e      	mov	r6, r1
   102ea:	781c      	ldrb	r4, [r3, #0]
   102ec:	4605      	mov	r5, r0
   102ee:	4623      	mov	r3, r4
  mpu->RLAR = 0U;
   102f0:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   102f2:	4a0a      	ldr	r2, [pc, #40]	; (1031c <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   102f4:	2b0f      	cmp	r3, #15
   102f6:	dd0b      	ble.n	10310 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   102f8:	4909      	ldr	r1, [pc, #36]	; (10320 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   102fa:	f851 0b04 	ldr.w	r0, [r1], #4
   102fe:	f7ff fe5b 	bl	ffb8 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   10302:	4622      	mov	r2, r4
   10304:	4631      	mov	r1, r6
   10306:	4628      	mov	r0, r5
}
   10308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1030c:	f7ff be86 	b.w	1001c <mpu_configure_regions_and_partition.constprop.2>
   10310:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   10312:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10314:	3301      	adds	r3, #1
   10316:	e7ed      	b.n	102f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
   10318:	2002651f 	.word	0x2002651f
   1031c:	e000ed90 	.word	0xe000ed90
   10320:	20020340 	.word	0x20020340

00010324 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
   10324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10328:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
   1032a:	2300      	movs	r3, #0
{
   1032c:	b0a3      	sub	sp, #140	; 0x8c
   1032e:	e9cd 0102 	strd	r0, r1, [sp, #8]
	count = 0;
   10332:	9301      	str	r3, [sp, #4]

	while ((c = *format++)) {
   10334:	4613      	mov	r3, r2
   10336:	f813 0b01 	ldrb.w	r0, [r3], #1
   1033a:	9308      	str	r3, [sp, #32]
   1033c:	b158      	cbz	r0, 10356 <z_prf+0x32>
		if (c != '%') {
   1033e:	2825      	cmp	r0, #37	; 0x25
   10340:	f000 8085 	beq.w	1044e <z_prf+0x12a>
			PUTC(c);
   10344:	9903      	ldr	r1, [sp, #12]
   10346:	9b02      	ldr	r3, [sp, #8]
   10348:	4798      	blx	r3
   1034a:	3001      	adds	r0, #1
   1034c:	f040 841a 	bne.w	10b84 <z_prf+0x860>
   10350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10354:	9301      	str	r3, [sp, #4]
		}
	}
	return count;

#undef PUTC
}
   10356:	9801      	ldr	r0, [sp, #4]
   10358:	b023      	add	sp, #140	; 0x8c
   1035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
   1035e:	2c23      	cmp	r4, #35	; 0x23
   10360:	d06c      	beq.n	1043c <z_prf+0x118>
   10362:	d861      	bhi.n	10428 <z_prf+0x104>
   10364:	2c00      	cmp	r4, #0
   10366:	d0f6      	beq.n	10356 <z_prf+0x32>
					fspace = true;
   10368:	2c20      	cmp	r4, #32
   1036a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1036c:	bf08      	it	eq
   1036e:	2301      	moveq	r3, #1
   10370:	930e      	str	r3, [sp, #56]	; 0x38
					fminus = true;
   10372:	f8cd 8020 	str.w	r8, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   10376:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1037a:	48b7      	ldr	r0, [pc, #732]	; (10658 <z_prf+0x334>)
   1037c:	f818 4b01 	ldrb.w	r4, [r8], #1
   10380:	4621      	mov	r1, r4
   10382:	f00c ffe0 	bl	1d346 <strchr>
   10386:	2800      	cmp	r0, #0
   10388:	d1e9      	bne.n	1035e <z_prf+0x3a>
			if (c == '*') {
   1038a:	2c2a      	cmp	r4, #42	; 0x2a
   1038c:	d166      	bne.n	1045c <z_prf+0x138>
				width = va_arg(vargs, int);
   1038e:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
   10392:	f898 4000 	ldrb.w	r4, [r8]
				if (width < 0) {
   10396:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
   10398:	9309      	str	r3, [sp, #36]	; 0x24
					width = -width;
   1039a:	bfbf      	itttt	lt
   1039c:	425b      	neglt	r3, r3
   1039e:	9309      	strlt	r3, [sp, #36]	; 0x24
					fminus = true;
   103a0:	2301      	movlt	r3, #1
   103a2:	930f      	strlt	r3, [sp, #60]	; 0x3c
				c = *format++;
   103a4:	9b08      	ldr	r3, [sp, #32]
   103a6:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
   103aa:	2c2e      	cmp	r4, #46	; 0x2e
   103ac:	d17b      	bne.n	104a6 <z_prf+0x182>
				if (c == '*') {
   103ae:	f898 3000 	ldrb.w	r3, [r8]
   103b2:	2b2a      	cmp	r3, #42	; 0x2a
   103b4:	d174      	bne.n	104a0 <z_prf+0x17c>
					precision = va_arg(vargs, int);
   103b6:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
   103ba:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
   103be:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
   103c2:	4621      	mov	r1, r4
   103c4:	48a5      	ldr	r0, [pc, #660]	; (1065c <z_prf+0x338>)
   103c6:	4627      	mov	r7, r4
   103c8:	f00c ffbd 	bl	1d346 <strchr>
   103cc:	2800      	cmp	r0, #0
   103ce:	d06d      	beq.n	104ac <z_prf+0x188>
				c = *format++;
   103d0:	4643      	mov	r3, r8
   103d2:	f813 4b01 	ldrb.w	r4, [r3], #1
				} else if (i == 'h' && c == 'h') {
   103d6:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
   103d8:	9308      	str	r3, [sp, #32]
				} else if (i == 'h' && c == 'h') {
   103da:	d107      	bne.n	103ec <z_prf+0xc8>
   103dc:	2c68      	cmp	r4, #104	; 0x68
   103de:	d105      	bne.n	103ec <z_prf+0xc8>
					i = 'H';
   103e0:	2748      	movs	r7, #72	; 0x48
					c = *format++;
   103e2:	f108 0302 	add.w	r3, r8, #2
   103e6:	f898 4001 	ldrb.w	r4, [r8, #1]
   103ea:	9308      	str	r3, [sp, #32]
			switch (c) {
   103ec:	2c67      	cmp	r4, #103	; 0x67
   103ee:	d87b      	bhi.n	104e8 <z_prf+0x1c4>
   103f0:	2c65      	cmp	r4, #101	; 0x65
   103f2:	f080 8135 	bcs.w	10660 <z_prf+0x33c>
   103f6:	2c47      	cmp	r4, #71	; 0x47
   103f8:	d85c      	bhi.n	104b4 <z_prf+0x190>
   103fa:	2c45      	cmp	r4, #69	; 0x45
   103fc:	f080 8130 	bcs.w	10660 <z_prf+0x33c>
   10400:	2c00      	cmp	r4, #0
   10402:	d0a8      	beq.n	10356 <z_prf+0x32>
   10404:	2c25      	cmp	r4, #37	; 0x25
   10406:	f000 83b9 	beq.w	10b7c <z_prf+0x858>
				PUTC('%');
   1040a:	9903      	ldr	r1, [sp, #12]
   1040c:	2025      	movs	r0, #37	; 0x25
   1040e:	9b02      	ldr	r3, [sp, #8]
   10410:	4798      	blx	r3
   10412:	3001      	adds	r0, #1
   10414:	d09c      	beq.n	10350 <z_prf+0x2c>
				PUTC(c);
   10416:	9903      	ldr	r1, [sp, #12]
   10418:	4620      	mov	r0, r4
   1041a:	9b02      	ldr	r3, [sp, #8]
   1041c:	4798      	blx	r3
   1041e:	3001      	adds	r0, #1
   10420:	d096      	beq.n	10350 <z_prf+0x2c>
				count += 2;
   10422:	9b01      	ldr	r3, [sp, #4]
   10424:	3302      	adds	r3, #2
   10426:	e3af      	b.n	10b88 <z_prf+0x864>
				switch (c) {
   10428:	2c2d      	cmp	r4, #45	; 0x2d
   1042a:	d00a      	beq.n	10442 <z_prf+0x11e>
   1042c:	2c30      	cmp	r4, #48	; 0x30
   1042e:	d00b      	beq.n	10448 <z_prf+0x124>
					fplus = true;
   10430:	2c2b      	cmp	r4, #43	; 0x2b
   10432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10434:	bf08      	it	eq
   10436:	2301      	moveq	r3, #1
   10438:	930b      	str	r3, [sp, #44]	; 0x2c
   1043a:	e79a      	b.n	10372 <z_prf+0x4e>
					falt = true;
   1043c:	f04f 0b01 	mov.w	fp, #1
   10440:	e797      	b.n	10372 <z_prf+0x4e>
					fminus = true;
   10442:	2301      	movs	r3, #1
   10444:	930f      	str	r3, [sp, #60]	; 0x3c
   10446:	e794      	b.n	10372 <z_prf+0x4e>
					fzero = true;
   10448:	2301      	movs	r3, #1
   1044a:	930a      	str	r3, [sp, #40]	; 0x28
   1044c:	e791      	b.n	10372 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
   1044e:	2300      	movs	r3, #0
   10450:	930a      	str	r3, [sp, #40]	; 0x28
   10452:	930e      	str	r3, [sp, #56]	; 0x38
   10454:	930b      	str	r3, [sp, #44]	; 0x2c
   10456:	930f      	str	r3, [sp, #60]	; 0x3c
   10458:	469b      	mov	fp, r3
   1045a:	e78c      	b.n	10376 <z_prf+0x52>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1045c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   10460:	2b09      	cmp	r3, #9
				width = 0;
   10462:	9009      	str	r0, [sp, #36]	; 0x24
			} else if (!isdigit(c)) {
   10464:	d8a1      	bhi.n	103aa <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10466:	220a      	movs	r2, #10
	while (isdigit(*p)) {
   10468:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1046c:	f818 4b01 	ldrb.w	r4, [r8], #1
   10470:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10474:	2b09      	cmp	r3, #9
   10476:	d898      	bhi.n	103aa <z_prf+0x86>
		i = 10 * i + *p++ - '0';
   10478:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1047a:	fb02 4403 	mla	r4, r2, r3, r4
   1047e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10482:	e9cd 8308 	strd	r8, r3, [sp, #32]
   10486:	e7ef      	b.n	10468 <z_prf+0x144>
   10488:	4690      	mov	r8, r2
   1048a:	fb01 3505 	mla	r5, r1, r5, r3
   1048e:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(*p)) {
   10490:	4642      	mov	r2, r8
   10492:	f812 3b01 	ldrb.w	r3, [r2], #1
   10496:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1049a:	2809      	cmp	r0, #9
   1049c:	d9f4      	bls.n	10488 <z_prf+0x164>
   1049e:	e78e      	b.n	103be <z_prf+0x9a>
	int i = 0;
   104a0:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   104a2:	210a      	movs	r1, #10
   104a4:	e7f4      	b.n	10490 <z_prf+0x16c>
			precision = -1;
   104a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   104aa:	e78a      	b.n	103c2 <z_prf+0x9e>
   104ac:	f8cd 8020 	str.w	r8, [sp, #32]
			i = 0;
   104b0:	4607      	mov	r7, r0
   104b2:	e79b      	b.n	103ec <z_prf+0xc8>
			switch (c) {
   104b4:	2c63      	cmp	r4, #99	; 0x63
   104b6:	d059      	beq.n	1056c <z_prf+0x248>
   104b8:	d820      	bhi.n	104fc <z_prf+0x1d8>
   104ba:	2c58      	cmp	r4, #88	; 0x58
   104bc:	d1a5      	bne.n	1040a <z_prf+0xe6>
				if (c == 'o') {
   104be:	2c6f      	cmp	r4, #111	; 0x6f
   104c0:	f106 0904 	add.w	r9, r6, #4
   104c4:	6831      	ldr	r1, [r6, #0]
   104c6:	f040 8328 	bne.w	10b1a <z_prf+0x7f6>
	if (alt_form) {
   104ca:	f1bb 0f00 	cmp.w	fp, #0
   104ce:	f000 8317 	beq.w	10b00 <z_prf+0x7dc>
		*buf++ = '0';
   104d2:	2330      	movs	r3, #48	; 0x30
   104d4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
   104d8:	2900      	cmp	r1, #0
   104da:	f040 831b 	bne.w	10b14 <z_prf+0x7f0>
			*buf++ = 0;
   104de:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
   104e2:	460f      	mov	r7, r1
			return 1;
   104e4:	2601      	movs	r6, #1
   104e6:	e025      	b.n	10534 <z_prf+0x210>
			switch (c) {
   104e8:	2c70      	cmp	r4, #112	; 0x70
   104ea:	f000 82f5 	beq.w	10ad8 <z_prf+0x7b4>
   104ee:	d827      	bhi.n	10540 <z_prf+0x21c>
   104f0:	2c6e      	cmp	r4, #110	; 0x6e
   104f2:	f000 82de 	beq.w	10ab2 <z_prf+0x78e>
   104f6:	d8e2      	bhi.n	104be <z_prf+0x19a>
   104f8:	2c69      	cmp	r4, #105	; 0x69
   104fa:	d186      	bne.n	1040a <z_prf+0xe6>
				switch (i) {
   104fc:	6837      	ldr	r7, [r6, #0]
   104fe:	f106 0904 	add.w	r9, r6, #4
	if (value < 0) {
   10502:	2f00      	cmp	r7, #0
   10504:	f280 809a 	bge.w	1063c <z_prf+0x318>
		*buf++ = '-';
   10508:	232d      	movs	r3, #45	; 0x2d
		value = -value;
   1050a:	4279      	negs	r1, r7
		*buf++ = '-';
   1050c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = ' ';
   10510:	f10d 066d 	add.w	r6, sp, #109	; 0x6d
	return _to_x(buf, value, 10);
   10514:	4630      	mov	r0, r6
   10516:	220a      	movs	r2, #10
   10518:	f00c ffb7 	bl	1d48a <_to_x>
				if (fplus || fspace || val < 0) {
   1051c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	return (buf + _to_udec(buf, value)) - start;
   1051e:	4406      	add	r6, r0
   10520:	a81b      	add	r0, sp, #108	; 0x6c
   10522:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
   10524:	2b00      	cmp	r3, #0
   10526:	f040 8332 	bne.w	10b8e <z_prf+0x86a>
   1052a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1052c:	2b00      	cmp	r3, #0
   1052e:	f040 832e 	bne.w	10b8e <z_prf+0x86a>
   10532:	0fff      	lsrs	r7, r7, #31
			if (precision >= 0) {
   10534:	2d00      	cmp	r5, #0
   10536:	da21      	bge.n	1057c <z_prf+0x258>
			zero.predot = zero.postdot = zero.trail = 0;
   10538:	2500      	movs	r5, #0
   1053a:	46ab      	mov	fp, r5
   1053c:	46a8      	mov	r8, r5
   1053e:	e0e1      	b.n	10704 <z_prf+0x3e0>
			switch (c) {
   10540:	2c75      	cmp	r4, #117	; 0x75
   10542:	d0bc      	beq.n	104be <z_prf+0x19a>
   10544:	2c78      	cmp	r4, #120	; 0x78
   10546:	d0ba      	beq.n	104be <z_prf+0x19a>
   10548:	2c73      	cmp	r4, #115	; 0x73
   1054a:	f47f af5e 	bne.w	1040a <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
   1054e:	46b1      	mov	r9, r6
					precision = INT_MAX;
   10550:	2d00      	cmp	r5, #0
   10552:	bfb8      	it	lt
   10554:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
   10558:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
   1055a:	f859 3b04 	ldr.w	r3, [r9], #4
				for (clen = 0; clen < precision; clen++) {
   1055e:	42b5      	cmp	r5, r6
   10560:	f040 82c9 	bne.w	10af6 <z_prf+0x7d2>
   10564:	462e      	mov	r6, r5
   10566:	2500      	movs	r5, #0
   10568:	462f      	mov	r7, r5
   1056a:	e008      	b.n	1057e <z_prf+0x25a>
				break;
   1056c:	2700      	movs	r7, #0
				buf[0] = va_arg(vargs, int);
   1056e:	46b1      	mov	r9, r6
				break;
   10570:	463d      	mov	r5, r7
				clen = 1;
   10572:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
   10574:	f859 3b04 	ldr.w	r3, [r9], #4
   10578:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				break;
   1057c:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = precision - clen + prefix;
   1057e:	19ea      	adds	r2, r5, r7
			zero.predot = zero.postdot = zero.trail = 0;
   10580:	2500      	movs	r5, #0
   10582:	46ab      	mov	fp, r5
   10584:	46a8      	mov	r8, r5
				zero_head = precision - clen + prefix;
   10586:	1b92      	subs	r2, r2, r6
			if (zero_head < 0) {
   10588:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
   1058c:	1991      	adds	r1, r2, r6
   1058e:	9106      	str	r1, [sp, #24]
   10590:	9909      	ldr	r1, [sp, #36]	; 0x24
   10592:	1990      	adds	r0, r2, r6
   10594:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
   10596:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10598:	b911      	cbnz	r1, 105a0 <z_prf+0x27c>
   1059a:	2c00      	cmp	r4, #0
   1059c:	f300 8314 	bgt.w	10bc8 <z_prf+0x8a4>
			while (prefix-- > 0) {
   105a0:	eb03 0a07 	add.w	sl, r3, r7
   105a4:	4553      	cmp	r3, sl
   105a6:	f040 8313 	bne.w	10bd0 <z_prf+0x8ac>
			while (zero_head-- > 0) {
   105aa:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   105ae:	f080 831d 	bcs.w	10bec <z_prf+0x8c8>
			clen -= prefix;
   105b2:	1bf6      	subs	r6, r6, r7
			if (zero.predot) {
   105b4:	f1b8 0f00 	cmp.w	r8, #0
   105b8:	d011      	beq.n	105de <z_prf+0x2ba>
				c = *cptr;
   105ba:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c)) {
   105be:	eb0a 0706 	add.w	r7, sl, r6
   105c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   105c6:	2b09      	cmp	r3, #9
   105c8:	eba7 060a 	sub.w	r6, r7, sl
   105cc:	f240 8319 	bls.w	10c02 <z_prf+0x8de>
   105d0:	4647      	mov	r7, r8
				while (zero.predot-- > 0) {
   105d2:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
   105d6:	f080 831d 	bcs.w	10c14 <z_prf+0x8f0>
				clen -= zero.predot;
   105da:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.postdot) {
   105de:	f1bb 0f00 	cmp.w	fp, #0
   105e2:	d015      	beq.n	10610 <z_prf+0x2ec>
   105e4:	eb0a 0706 	add.w	r7, sl, r6
					c = *cptr++;
   105e8:	f81a 8b01 	ldrb.w	r8, [sl], #1
					PUTC(c);
   105ec:	9903      	ldr	r1, [sp, #12]
   105ee:	4640      	mov	r0, r8
   105f0:	9b02      	ldr	r3, [sp, #8]
   105f2:	4798      	blx	r3
   105f4:	3001      	adds	r0, #1
   105f6:	f43f aeab 	beq.w	10350 <z_prf+0x2c>
				} while (c != '.');
   105fa:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
   105fe:	eba7 060a 	sub.w	r6, r7, sl
   10602:	d1f1      	bne.n	105e8 <z_prf+0x2c4>
				while (zero.postdot-- > 0) {
   10604:	465f      	mov	r7, fp
   10606:	2f00      	cmp	r7, #0
   10608:	f300 830d 	bgt.w	10c26 <z_prf+0x902>
				clen -= zero.postdot;
   1060c:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.trail) {
   10610:	b195      	cbz	r5, 10638 <z_prf+0x314>
				c = *cptr;
   10612:	f89a 0000 	ldrb.w	r0, [sl]
				while (isdigit(c) || c == '.') {
   10616:	eb0a 0706 	add.w	r7, sl, r6
   1061a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1061e:	2b09      	cmp	r3, #9
   10620:	eba7 060a 	sub.w	r6, r7, sl
   10624:	f240 830a 	bls.w	10c3c <z_prf+0x918>
   10628:	282e      	cmp	r0, #46	; 0x2e
   1062a:	f000 8307 	beq.w	10c3c <z_prf+0x918>
				while (zero.trail-- > 0) {
   1062e:	462f      	mov	r7, r5
   10630:	2f00      	cmp	r7, #0
   10632:	f300 830c 	bgt.w	10c4e <z_prf+0x92a>
				clen -= zero.trail;
   10636:	1b76      	subs	r6, r6, r5
   10638:	4456      	add	r6, sl
   1063a:	e31b      	b.n	10c74 <z_prf+0x950>
	} else if (fplus) {
   1063c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1063e:	b123      	cbz	r3, 1064a <z_prf+0x326>
		*buf++ = '+';
   10640:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   10642:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10646:	4639      	mov	r1, r7
   10648:	e762      	b.n	10510 <z_prf+0x1ec>
	} else if (fspace) {
   1064a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1064c:	b10b      	cbz	r3, 10652 <z_prf+0x32e>
		*buf++ = ' ';
   1064e:	2320      	movs	r3, #32
   10650:	e7f7      	b.n	10642 <z_prf+0x31e>
	} else if (fspace) {
   10652:	4639      	mov	r1, r7
   10654:	ae1b      	add	r6, sp, #108	; 0x6c
   10656:	e75d      	b.n	10514 <z_prf+0x1f0>
   10658:	00020887 	.word	0x00020887
   1065c:	0002088d 	.word	0x0002088d
				u.d = va_arg(vargs, double);
   10660:	f106 0907 	add.w	r9, r6, #7
   10664:	f029 0907 	bic.w	r9, r9, #7
   10668:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
   1066c:	02d8      	lsls	r0, r3, #11
   1066e:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
   10672:	02d6      	lsls	r6, r2, #11
   10674:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
   10678:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
   1067a:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
   1067e:	9604      	str	r6, [sp, #16]
   10680:	9005      	str	r0, [sp, #20]
	if (sign) {
   10682:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
   10686:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1068a:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
	if (sign) {
   1068e:	da41      	bge.n	10714 <z_prf+0x3f0>
		*buf++ = '-';
   10690:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
   10692:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   10696:	f10d 076d 	add.w	r7, sp, #109	; 0x6d
	if (exp == 0x7ff) {
   1069a:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1069e:	4299      	cmp	r1, r3
   106a0:	d153      	bne.n	1074a <z_prf+0x426>
		if (!fract) {
   106a2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   106a6:	430a      	orrs	r2, r1
   106a8:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   106ac:	f107 0303 	add.w	r3, r7, #3
   106b0:	d140      	bne.n	10734 <z_prf+0x410>
			if (isupper(c)) {
   106b2:	2c19      	cmp	r4, #25
   106b4:	d838      	bhi.n	10728 <z_prf+0x404>
				*buf++ = 'I';
   106b6:	2249      	movs	r2, #73	; 0x49
   106b8:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
   106ba:	224e      	movs	r2, #78	; 0x4e
   106bc:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
   106be:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
   106c0:	2500      	movs	r5, #0
			zero.predot = zero.postdot = zero.trail = 0;
   106c2:	46ab      	mov	fp, r5
   106c4:	46a8      	mov	r8, r5
		return buf - start;
   106c6:	ae1b      	add	r6, sp, #108	; 0x6c
				*buf++ = 'n';
   106c8:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
   106ca:	70fd      	strb	r5, [r7, #3]
		return buf - start;
   106cc:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
   106ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   106d0:	2a00      	cmp	r2, #0
   106d2:	f040 81ec 	bne.w	10aae <z_prf+0x78a>
   106d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   106d8:	2a00      	cmp	r2, #0
   106da:	f040 81e8 	bne.w	10aae <z_prf+0x78a>
   106de:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   106e2:	f1a7 022d 	sub.w	r2, r7, #45	; 0x2d
   106e6:	4257      	negs	r7, r2
   106e8:	4157      	adcs	r7, r2
				clen += zero.predot + zero.postdot + zero.trail;
   106ea:	eb05 0608 	add.w	r6, r5, r8
   106ee:	4433      	add	r3, r6
   106f0:	eb03 060b 	add.w	r6, r3, fp
				if (!isdigit(buf[prefix])) {
   106f4:	ab22      	add	r3, sp, #136	; 0x88
   106f6:	443b      	add	r3, r7
   106f8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
   106fc:	3b30      	subs	r3, #48	; 0x30
   106fe:	2b09      	cmp	r3, #9
   10700:	f200 8249 	bhi.w	10b96 <z_prf+0x872>
			} else if (fzero) {
   10704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10706:	2b00      	cmp	r3, #0
   10708:	f000 8248 	beq.w	10b9c <z_prf+0x878>
   1070c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1070e:	1b9a      	subs	r2, r3, r6
   10710:	ab1b      	add	r3, sp, #108	; 0x6c
   10712:	e739      	b.n	10588 <z_prf+0x264>
	} else if (fplus) {
   10714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10716:	b10b      	cbz	r3, 1071c <z_prf+0x3f8>
		*buf++ = '+';
   10718:	232b      	movs	r3, #43	; 0x2b
   1071a:	e7ba      	b.n	10692 <z_prf+0x36e>
	} else if (fspace) {
   1071c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1071e:	b10b      	cbz	r3, 10724 <z_prf+0x400>
		*buf++ = ' ';
   10720:	2320      	movs	r3, #32
   10722:	e7b6      	b.n	10692 <z_prf+0x36e>
	} else if (fspace) {
   10724:	af1b      	add	r7, sp, #108	; 0x6c
   10726:	e7b8      	b.n	1069a <z_prf+0x376>
				*buf++ = 'i';
   10728:	2269      	movs	r2, #105	; 0x69
   1072a:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
   1072c:	226e      	movs	r2, #110	; 0x6e
   1072e:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
   10730:	2266      	movs	r2, #102	; 0x66
   10732:	e7c5      	b.n	106c0 <z_prf+0x39c>
			if (isupper(c)) {
   10734:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   10736:	bf99      	ittee	ls
   10738:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
   1073a:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
   1073c:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
   1073e:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
   10740:	bf94      	ite	ls
   10742:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
   10744:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
   10746:	7079      	strb	r1, [r7, #1]
   10748:	e7ba      	b.n	106c0 <z_prf+0x39c>
	if ((exp | fract) != 0) {
   1074a:	9b04      	ldr	r3, [sp, #16]
   1074c:	9805      	ldr	r0, [sp, #20]
   1074e:	430b      	orrs	r3, r1
   10750:	9310      	str	r3, [sp, #64]	; 0x40
   10752:	17cb      	asrs	r3, r1, #31
   10754:	4303      	orrs	r3, r0
		c = 'f';
   10756:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   10758:	9311      	str	r3, [sp, #68]	; 0x44
		c = 'f';
   1075a:	bf08      	it	eq
   1075c:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   1075e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10762:	4313      	orrs	r3, r2
   10764:	f000 8111 	beq.w	1098a <z_prf+0x666>
		if (exp == 0) {
   10768:	2900      	cmp	r1, #0
   1076a:	f000 809b 	beq.w	108a4 <z_prf+0x580>
		fract |= HIGHBIT64;
   1076e:	2600      	movs	r6, #0
   10770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   10772:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
   10776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1077a:	9317      	str	r3, [sp, #92]	; 0x5c
	while (exp <= -3) {
   1077c:	f118 0f02 	cmn.w	r8, #2
   10780:	f2c0 80a4 	blt.w	108cc <z_prf+0x5a8>
	while (exp > 0) {
   10784:	f1b8 0f00 	cmp.w	r8, #0
   10788:	f300 80dd 	bgt.w	10946 <z_prf+0x622>
		_rlrshift(&fract);
   1078c:	a816      	add	r0, sp, #88	; 0x58
		exp++;
   1078e:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   10792:	f00c fe9c 	bl	1d4ce <_rlrshift>
	while (exp < (0 + 4)) {
   10796:	f1b8 0f04 	cmp.w	r8, #4
   1079a:	d1f7      	bne.n	1078c <z_prf+0x468>
		precision = 6;		/* Default precision if none given */
   1079c:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   1079e:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
   107a2:	bfb8      	it	lt
   107a4:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   107a6:	2b47      	cmp	r3, #71	; 0x47
   107a8:	f040 80f8 	bne.w	1099c <z_prf+0x678>
		if (decexp < (-4 + 1) || decexp > precision) {
   107ac:	1cf1      	adds	r1, r6, #3
   107ae:	db02      	blt.n	107b6 <z_prf+0x492>
   107b0:	42ae      	cmp	r6, r5
   107b2:	f340 80ed 	ble.w	10990 <z_prf+0x66c>
			c += 'e' - 'g';
   107b6:	3c02      	subs	r4, #2
   107b8:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
   107ba:	2d00      	cmp	r5, #0
   107bc:	f000 80f4 	beq.w	109a8 <z_prf+0x684>
				precision--;
   107c0:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
   107c2:	f1bb 0f00 	cmp.w	fp, #0
   107c6:	f040 80ef 	bne.w	109a8 <z_prf+0x684>
   107ca:	2d00      	cmp	r5, #0
   107cc:	bfd4      	ite	le
   107ce:	f04f 0a00 	movle.w	sl, #0
   107d2:	f04f 0a01 	movgt.w	sl, #1
	if (c == 'f') {
   107d6:	2c66      	cmp	r4, #102	; 0x66
   107d8:	f040 80e8 	bne.w	109ac <z_prf+0x688>
		if (exp < 0) {
   107dc:	eb16 0805 	adds.w	r8, r6, r5
   107e0:	f140 80ec 	bpl.w	109bc <z_prf+0x698>
	digit_count = 16;
   107e4:	2310      	movs	r3, #16
   107e6:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   107e8:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   107ec:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
   107ee:	2200      	movs	r2, #0
   107f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   107f4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	while (exp--) {
   107f8:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
   107fc:	f080 80e0 	bcs.w	109c0 <z_prf+0x69c>
	fract += ltemp;
   10800:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10802:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10804:	9919      	ldr	r1, [sp, #100]	; 0x64
   10806:	189b      	adds	r3, r3, r2
   10808:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1080a:	eb41 0202 	adc.w	r2, r1, r2
   1080e:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
   10812:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
   10816:	9312      	str	r3, [sp, #72]	; 0x48
   10818:	2300      	movs	r3, #0
   1081a:	9313      	str	r3, [sp, #76]	; 0x4c
   1081c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   10820:	4313      	orrs	r3, r2
   10822:	d006      	beq.n	10832 <z_prf+0x50e>
		_ldiv5(&fract);
   10824:	a816      	add	r0, sp, #88	; 0x58
   10826:	f00c fe63 	bl	1d4f0 <_ldiv5>
		_rlrshift(&fract);
   1082a:	a816      	add	r0, sp, #88	; 0x58
   1082c:	f00c fe4f 	bl	1d4ce <_rlrshift>
		decexp++;
   10830:	3601      	adds	r6, #1
	if (c == 'f') {
   10832:	2c66      	cmp	r4, #102	; 0x66
   10834:	f040 80e1 	bne.w	109fa <z_prf+0x6d6>
		if (decexp > 0) {
   10838:	2e00      	cmp	r6, #0
   1083a:	f340 80c8 	ble.w	109ce <z_prf+0x6aa>
			while (decexp > 0 && digit_count > 0) {
   1083e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10840:	2b00      	cmp	r3, #0
   10842:	dd07      	ble.n	10854 <z_prf+0x530>
				*buf++ = _get_digit(&fract, &digit_count);
   10844:	a915      	add	r1, sp, #84	; 0x54
   10846:	a816      	add	r0, sp, #88	; 0x58
   10848:	f00c fe7d 	bl	1d546 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1084c:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   1084e:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
   10852:	d1f4      	bne.n	1083e <z_prf+0x51a>
			zp->predot = decexp;
   10854:	46b0      	mov	r8, r6
   10856:	463b      	mov	r3, r7
			decexp = 0;
   10858:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
   1085a:	f1bb 0f00 	cmp.w	fp, #0
   1085e:	d101      	bne.n	10864 <z_prf+0x540>
   10860:	2d00      	cmp	r5, #0
   10862:	dd15      	ble.n	10890 <z_prf+0x56c>
			*buf++ = '.';
   10864:	222e      	movs	r2, #46	; 0x2e
   10866:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
   1086a:	2e00      	cmp	r6, #0
   1086c:	f000 80c0 	beq.w	109f0 <z_prf+0x6cc>
   10870:	2d00      	cmp	r5, #0
   10872:	f340 80bf 	ble.w	109f4 <z_prf+0x6d0>
			zp->postdot = -decexp;
   10876:	f1c6 0b00 	rsb	fp, r6, #0
   1087a:	45ab      	cmp	fp, r5
   1087c:	bfa8      	it	ge
   1087e:	46ab      	movge	fp, r5
			precision -= zp->postdot;
   10880:	eba5 050b 	sub.w	r5, r5, fp
		while (precision > 0 && digit_count > 0) {
   10884:	2d00      	cmp	r5, #0
   10886:	dd03      	ble.n	10890 <z_prf+0x56c>
   10888:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1088a:	2a00      	cmp	r2, #0
   1088c:	f300 80a6 	bgt.w	109dc <z_prf+0x6b8>
	if (prune_zero) {
   10890:	f1ba 0f00 	cmp.w	sl, #0
   10894:	f040 80c6 	bne.w	10a24 <z_prf+0x700>
	*buf = 0;
   10898:	2200      	movs	r2, #0
	return buf - start;
   1089a:	ae1b      	add	r6, sp, #108	; 0x6c
	*buf = 0;
   1089c:	701a      	strb	r2, [r3, #0]
	return buf - start;
   1089e:	1b9b      	subs	r3, r3, r6
   108a0:	e715      	b.n	106ce <z_prf+0x3aa>
				exp--;
   108a2:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
   108a4:	9b04      	ldr	r3, [sp, #16]
   108a6:	18db      	adds	r3, r3, r3
   108a8:	9304      	str	r3, [sp, #16]
   108aa:	9b05      	ldr	r3, [sp, #20]
   108ac:	415b      	adcs	r3, r3
   108ae:	9305      	str	r3, [sp, #20]
   108b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   108b4:	2a00      	cmp	r2, #0
   108b6:	f173 0300 	sbcs.w	r3, r3, #0
   108ba:	daf2      	bge.n	108a2 <z_prf+0x57e>
   108bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   108c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   108c4:	e753      	b.n	1076e <z_prf+0x44a>
			_rlrshift(&fract);
   108c6:	a816      	add	r0, sp, #88	; 0x58
   108c8:	f00c fe01 	bl	1d4ce <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   108cc:	e9dd ec16 	ldrd	lr, ip, [sp, #88]	; 0x58
   108d0:	2300      	movs	r3, #0
   108d2:	2100      	movs	r1, #0
   108d4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   108d8:	930d      	str	r3, [sp, #52]	; 0x34
   108da:	48bc      	ldr	r0, [pc, #752]	; (10bcc <z_prf+0x8a8>)
   108dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   108e0:	4299      	cmp	r1, r3
   108e2:	bf08      	it	eq
   108e4:	4290      	cmpeq	r0, r2
   108e6:	f108 0801 	add.w	r8, r8, #1
   108ea:	d3ec      	bcc.n	108c6 <z_prf+0x5a2>
		fract *= 5U;
   108ec:	2005      	movs	r0, #5
   108ee:	fbae 2300 	umull	r2, r3, lr, r0
   108f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   108f6:	9b07      	ldr	r3, [sp, #28]
		decexp--;
   108f8:	3e01      	subs	r6, #1
		fract *= 5U;
   108fa:	fb00 330c 	mla	r3, r0, ip, r3
		decexp--;
   108fe:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   10902:	9307      	str	r3, [sp, #28]
   10904:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10908:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   1090c:	2100      	movs	r1, #0
   1090e:	2300      	movs	r3, #0
   10910:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   10914:	9807      	ldr	r0, [sp, #28]
   10916:	428b      	cmp	r3, r1
   10918:	bf08      	it	eq
   1091a:	4282      	cmpeq	r2, r0
   1091c:	d208      	bcs.n	10930 <z_prf+0x60c>
   1091e:	f1bc 0f00 	cmp.w	ip, #0
   10922:	f43f af2b 	beq.w	1077c <z_prf+0x458>
   10926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1092a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   1092e:	e725      	b.n	1077c <z_prf+0x458>
			fract <<= 1;
   10930:	9b06      	ldr	r3, [sp, #24]
			exp--;
   10932:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			fract <<= 1;
   10936:	18db      	adds	r3, r3, r3
   10938:	9306      	str	r3, [sp, #24]
   1093a:	9b07      	ldr	r3, [sp, #28]
   1093c:	f04f 0c01 	mov.w	ip, #1
   10940:	415b      	adcs	r3, r3
   10942:	9307      	str	r3, [sp, #28]
			exp--;
   10944:	e7e2      	b.n	1090c <z_prf+0x5e8>
		_ldiv5(&fract);
   10946:	a816      	add	r0, sp, #88	; 0x58
   10948:	f00c fdd2 	bl	1d4f0 <_ldiv5>
		exp--;
   1094c:	e9dd ae16 	ldrd	sl, lr, [sp, #88]	; 0x58
		decexp++;
   10950:	f04f 0c00 	mov.w	ip, #0
		exp--;
   10954:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   10958:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   1095a:	2300      	movs	r3, #0
   1095c:	2100      	movs	r1, #0
   1095e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10962:	4299      	cmp	r1, r3
   10964:	bf08      	it	eq
   10966:	4570      	cmpeq	r0, lr
   10968:	d206      	bcs.n	10978 <z_prf+0x654>
   1096a:	f1bc 0f00 	cmp.w	ip, #0
   1096e:	f43f af09 	beq.w	10784 <z_prf+0x460>
   10972:	e9cd ae16 	strd	sl, lr, [sp, #88]	; 0x58
   10976:	e705      	b.n	10784 <z_prf+0x460>
			fract <<= 1;
   10978:	eb1a 0a0a 	adds.w	sl, sl, sl
   1097c:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
   10980:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10984:	f04f 0c01 	mov.w	ip, #1
   10988:	e7e7      	b.n	1095a <z_prf+0x636>
	if ((exp | fract) != 0) {
   1098a:	2600      	movs	r6, #0
   1098c:	46b0      	mov	r8, r6
   1098e:	e6fd      	b.n	1078c <z_prf+0x468>
			precision -= decexp;
   10990:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
   10992:	f1bb 0f00 	cmp.w	fp, #0
   10996:	d104      	bne.n	109a2 <z_prf+0x67e>
			c = 'f';
   10998:	2466      	movs	r4, #102	; 0x66
   1099a:	e716      	b.n	107ca <z_prf+0x4a6>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   1099c:	f04f 0a00 	mov.w	sl, #0
   109a0:	e719      	b.n	107d6 <z_prf+0x4b2>
   109a2:	f04f 0a00 	mov.w	sl, #0
   109a6:	e719      	b.n	107dc <z_prf+0x4b8>
   109a8:	f04f 0a00 	mov.w	sl, #0
		exp = precision + 1;
   109ac:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   109b0:	2310      	movs	r3, #16
   109b2:	4598      	cmp	r8, r3
   109b4:	9315      	str	r3, [sp, #84]	; 0x54
	if (exp > 16) {
   109b6:	bfa8      	it	ge
   109b8:	4698      	movge	r8, r3
   109ba:	e718      	b.n	107ee <z_prf+0x4ca>
		if (exp < 0) {
   109bc:	2466      	movs	r4, #102	; 0x66
   109be:	e7f7      	b.n	109b0 <z_prf+0x68c>
		_ldiv5(&ltemp);
   109c0:	a818      	add	r0, sp, #96	; 0x60
   109c2:	f00c fd95 	bl	1d4f0 <_ldiv5>
		_rlrshift(&ltemp);
   109c6:	a818      	add	r0, sp, #96	; 0x60
   109c8:	f00c fd81 	bl	1d4ce <_rlrshift>
   109cc:	e714      	b.n	107f8 <z_prf+0x4d4>
			*buf++ = '0';
   109ce:	463b      	mov	r3, r7
   109d0:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
   109d2:	f04f 0800 	mov.w	r8, #0
			*buf++ = '0';
   109d6:	f803 2b01 	strb.w	r2, [r3], #1
   109da:	e73e      	b.n	1085a <z_prf+0x536>
			*buf++ = _get_digit(&fract, &digit_count);
   109dc:	a915      	add	r1, sp, #84	; 0x54
   109de:	a816      	add	r0, sp, #88	; 0x58
   109e0:	9306      	str	r3, [sp, #24]
   109e2:	f00c fdb0 	bl	1d546 <_get_digit>
   109e6:	9b06      	ldr	r3, [sp, #24]
			precision--;
   109e8:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   109ea:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   109ee:	e749      	b.n	10884 <z_prf+0x560>
			zero.predot = zero.postdot = zero.trail = 0;
   109f0:	46b3      	mov	fp, r6
   109f2:	e747      	b.n	10884 <z_prf+0x560>
   109f4:	f04f 0b00 	mov.w	fp, #0
   109f8:	e74a      	b.n	10890 <z_prf+0x56c>
		*buf = _get_digit(&fract, &digit_count);
   109fa:	a915      	add	r1, sp, #84	; 0x54
   109fc:	a816      	add	r0, sp, #88	; 0x58
   109fe:	f00c fda2 	bl	1d546 <_get_digit>
		if (*buf++ != '0') {
   10a02:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   10a04:	7038      	strb	r0, [r7, #0]
			decexp--;
   10a06:	bf18      	it	ne
   10a08:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
   10a0c:	f1bb 0f00 	cmp.w	fp, #0
   10a10:	d138      	bne.n	10a84 <z_prf+0x760>
   10a12:	2d00      	cmp	r5, #0
   10a14:	dc36      	bgt.n	10a84 <z_prf+0x760>
		if (*buf++ != '0') {
   10a16:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
   10a18:	f1ba 0f00 	cmp.w	sl, #0
   10a1c:	d044      	beq.n	10aa8 <z_prf+0x784>
			zero.predot = zero.postdot = zero.trail = 0;
   10a1e:	f04f 0b00 	mov.w	fp, #0
   10a22:	46d8      	mov	r8, fp
		while (*--buf == '0')
   10a24:	461a      	mov	r2, r3
   10a26:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   10a2a:	2930      	cmp	r1, #48	; 0x30
   10a2c:	d0fa      	beq.n	10a24 <z_prf+0x700>
		if (*buf != '.') {
   10a2e:	292e      	cmp	r1, #46	; 0x2e
   10a30:	bf18      	it	ne
   10a32:	4613      	movne	r3, r2
   10a34:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
   10a36:	f004 02df 	and.w	r2, r4, #223	; 0xdf
   10a3a:	2a45      	cmp	r2, #69	; 0x45
   10a3c:	f47f af2c 	bne.w	10898 <z_prf+0x574>
		if (decexp < 0) {
   10a40:	2e00      	cmp	r6, #0
			*buf++ = '-';
   10a42:	bfb4      	ite	lt
   10a44:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   10a46:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
   10a48:	4619      	mov	r1, r3
			decexp = -decexp;
   10a4a:	bfb8      	it	lt
   10a4c:	4276      	neglt	r6, r6
		if (decexp >= 100) {
   10a4e:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
   10a50:	f801 4b02 	strb.w	r4, [r1], #2
			*buf++ = '-';
   10a54:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
   10a56:	dd08      	ble.n	10a6a <z_prf+0x746>
			*buf++ = (decexp / 100) + '0';
   10a58:	2064      	movs	r0, #100	; 0x64
   10a5a:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
   10a5e:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
   10a62:	f102 0430 	add.w	r4, r2, #48	; 0x30
   10a66:	1cd9      	adds	r1, r3, #3
   10a68:	709c      	strb	r4, [r3, #2]
		*buf++ = (decexp / 10) + '0';
   10a6a:	200a      	movs	r0, #10
   10a6c:	fb96 f2f0 	sdiv	r2, r6, r0
   10a70:	460b      	mov	r3, r1
		decexp %= 10;
   10a72:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
   10a76:	f102 0430 	add.w	r4, r2, #48	; 0x30
		*buf++ = decexp + '0';
   10a7a:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   10a7c:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = decexp + '0';
   10a80:	704e      	strb	r6, [r1, #1]
   10a82:	e709      	b.n	10898 <z_prf+0x574>
			*buf++ = '.';
   10a84:	222e      	movs	r2, #46	; 0x2e
   10a86:	1cbb      	adds	r3, r7, #2
   10a88:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
   10a8a:	2d00      	cmp	r5, #0
   10a8c:	ddc4      	ble.n	10a18 <z_prf+0x6f4>
   10a8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10a90:	2a00      	cmp	r2, #0
   10a92:	ddc1      	ble.n	10a18 <z_prf+0x6f4>
			*buf++ = _get_digit(&fract, &digit_count);
   10a94:	a915      	add	r1, sp, #84	; 0x54
   10a96:	a816      	add	r0, sp, #88	; 0x58
   10a98:	9306      	str	r3, [sp, #24]
   10a9a:	f00c fd54 	bl	1d546 <_get_digit>
   10a9e:	9b06      	ldr	r3, [sp, #24]
			precision--;
   10aa0:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
   10aa2:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
   10aa6:	e7f0      	b.n	10a8a <z_prf+0x766>
			zero.predot = zero.postdot = zero.trail = 0;
   10aa8:	46d3      	mov	fp, sl
   10aaa:	46d0      	mov	r8, sl
   10aac:	e7c3      	b.n	10a36 <z_prf+0x712>
					prefix = 1;
   10aae:	2701      	movs	r7, #1
   10ab0:	e61b      	b.n	106ea <z_prf+0x3c6>
				switch (i) {
   10ab2:	46b1      	mov	r9, r6
   10ab4:	2f68      	cmp	r7, #104	; 0x68
   10ab6:	f859 3b04 	ldr.w	r3, [r9], #4
   10aba:	d005      	beq.n	10ac8 <z_prf+0x7a4>
   10abc:	dc01      	bgt.n	10ac2 <z_prf+0x79e>
   10abe:	2f48      	cmp	r7, #72	; 0x48
   10ac0:	d007      	beq.n	10ad2 <z_prf+0x7ae>
					*va_arg(vargs, int *) = count;
   10ac2:	9a01      	ldr	r2, [sp, #4]
   10ac4:	601a      	str	r2, [r3, #0]
					break;
   10ac6:	e001      	b.n	10acc <z_prf+0x7a8>
					*va_arg(vargs, short *) = count;
   10ac8:	9a01      	ldr	r2, [sp, #4]
   10aca:	801a      	strh	r2, [r3, #0]
				continue;
   10acc:	464e      	mov	r6, r9
   10ace:	9a08      	ldr	r2, [sp, #32]
   10ad0:	e430      	b.n	10334 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
   10ad2:	9a01      	ldr	r2, [sp, #4]
   10ad4:	701a      	strb	r2, [r3, #0]
					break;
   10ad6:	e7f9      	b.n	10acc <z_prf+0x7a8>
				val = (uintptr_t) va_arg(vargs, void *);
   10ad8:	46b1      	mov	r9, r6
		*buf++ = '0';
   10ada:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
   10ade:	2210      	movs	r2, #16
   10ae0:	f859 1b04 	ldr.w	r1, [r9], #4
   10ae4:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		*buf++ = '0';
   10ae8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   10aec:	f00c fccd 	bl	1d48a <_to_x>
				prefix = 2;
   10af0:	2702      	movs	r7, #2
	return len + (buf - buf0);
   10af2:	1c86      	adds	r6, r0, #2
				break;
   10af4:	e51e      	b.n	10534 <z_prf+0x210>
					if (cptr[clen] == '\0') {
   10af6:	5d9a      	ldrb	r2, [r3, r6]
   10af8:	2a00      	cmp	r2, #0
   10afa:	d04a      	beq.n	10b92 <z_prf+0x86e>
				for (clen = 0; clen < precision; clen++) {
   10afc:	3601      	adds	r6, #1
   10afe:	e52e      	b.n	1055e <z_prf+0x23a>
	if (alt_form) {
   10b00:	ac1b      	add	r4, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8);
   10b02:	2208      	movs	r2, #8
   10b04:	4620      	mov	r0, r4
   10b06:	f00c fcc0 	bl	1d48a <_to_x>
   10b0a:	ae1b      	add	r6, sp, #108	; 0x6c
   10b0c:	1ba6      	subs	r6, r4, r6
   10b0e:	4406      	add	r6, r0
			prefix = 0;
   10b10:	2700      	movs	r7, #0
   10b12:	e50f      	b.n	10534 <z_prf+0x210>
		*buf++ = '0';
   10b14:	f10d 046d 	add.w	r4, sp, #109	; 0x6d
   10b18:	e7f3      	b.n	10b02 <z_prf+0x7de>
				} else if (c == 'u') {
   10b1a:	2c75      	cmp	r4, #117	; 0x75
   10b1c:	d105      	bne.n	10b2a <z_prf+0x806>
	return _to_x(buf, value, 10);
   10b1e:	220a      	movs	r2, #10
   10b20:	a81b      	add	r0, sp, #108	; 0x6c
   10b22:	f00c fcb2 	bl	1d48a <_to_x>
   10b26:	4606      	mov	r6, r0
   10b28:	e7f2      	b.n	10b10 <z_prf+0x7ec>
	if (alt_form) {
   10b2a:	f1bb 0f00 	cmp.w	fp, #0
   10b2e:	d012      	beq.n	10b56 <z_prf+0x832>
		*buf++ = '0';
   10b30:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   10b34:	f10d 086e 	add.w	r8, sp, #110	; 0x6e
		*buf++ = '0';
   10b38:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
	len = _to_x(buf, value, 16);
   10b3c:	2210      	movs	r2, #16
   10b3e:	4640      	mov	r0, r8
   10b40:	f00c fca3 	bl	1d48a <_to_x>
	if (prefix == 'X') {
   10b44:	2c58      	cmp	r4, #88	; 0x58
   10b46:	d009      	beq.n	10b5c <z_prf+0x838>
	return len + (buf - buf0);
   10b48:	ae1b      	add	r6, sp, #108	; 0x6c
   10b4a:	eba8 0606 	sub.w	r6, r8, r6
   10b4e:	4406      	add	r6, r0
						prefix = 2;
   10b50:	ea4f 074b 	mov.w	r7, fp, lsl #1
   10b54:	e4ee      	b.n	10534 <z_prf+0x210>
	if (alt_form) {
   10b56:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
   10b5a:	e7ef      	b.n	10b3c <z_prf+0x818>
   10b5c:	aa1b      	add	r2, sp, #108	; 0x6c
		if (*buf >= 'a' && *buf <= 'z') {
   10b5e:	f812 3b01 	ldrb.w	r3, [r2], #1
   10b62:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   10b66:	2919      	cmp	r1, #25
   10b68:	d803      	bhi.n	10b72 <z_prf+0x84e>
			*buf += 'A' - 'a';
   10b6a:	3b20      	subs	r3, #32
   10b6c:	f802 3c01 	strb.w	r3, [r2, #-1]
   10b70:	e7f5      	b.n	10b5e <z_prf+0x83a>
	} while (*buf++);
   10b72:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   10b76:	2b00      	cmp	r3, #0
   10b78:	d1f1      	bne.n	10b5e <z_prf+0x83a>
   10b7a:	e7e5      	b.n	10b48 <z_prf+0x824>
				PUTC('%');
   10b7c:	9903      	ldr	r1, [sp, #12]
   10b7e:	4620      	mov	r0, r4
   10b80:	f7ff bbe1 	b.w	10346 <z_prf+0x22>
				count++;
   10b84:	9b01      	ldr	r3, [sp, #4]
   10b86:	3301      	adds	r3, #1
				count += 2;
   10b88:	9301      	str	r3, [sp, #4]
				continue;
   10b8a:	46b1      	mov	r9, r6
   10b8c:	e79e      	b.n	10acc <z_prf+0x7a8>
					prefix = 1;
   10b8e:	2701      	movs	r7, #1
   10b90:	e4d0      	b.n	10534 <z_prf+0x210>
   10b92:	4615      	mov	r5, r2
   10b94:	e4e8      	b.n	10568 <z_prf+0x244>
			cptr = buf;
   10b96:	ab1b      	add	r3, sp, #108	; 0x6c
				zero_head = 0;
   10b98:	2200      	movs	r2, #0
   10b9a:	e4f7      	b.n	1058c <z_prf+0x268>
   10b9c:	ab1b      	add	r3, sp, #108	; 0x6c
   10b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10ba0:	e4f4      	b.n	1058c <z_prf+0x268>
   10ba2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
					PUTC(' ');
   10ba6:	9903      	ldr	r1, [sp, #12]
   10ba8:	9b02      	ldr	r3, [sp, #8]
   10baa:	2020      	movs	r0, #32
   10bac:	4798      	blx	r3
   10bae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10bb2:	3001      	adds	r0, #1
   10bb4:	f43f abcc 	beq.w	10350 <z_prf+0x2c>
				while (width-- > 0) {
   10bb8:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
   10bbc:	d2f1      	bcs.n	10ba2 <z_prf+0x87e>
				count += width;
   10bbe:	9901      	ldr	r1, [sp, #4]
   10bc0:	4421      	add	r1, r4
   10bc2:	9101      	str	r1, [sp, #4]
				while (width-- > 0) {
   10bc4:	4654      	mov	r4, sl
   10bc6:	e4eb      	b.n	105a0 <z_prf+0x27c>
   10bc8:	46a2      	mov	sl, r4
   10bca:	e7f5      	b.n	10bb8 <z_prf+0x894>
   10bcc:	33333332 	.word	0x33333332
				PUTC(*cptr++);
   10bd0:	f813 0b01 	ldrb.w	r0, [r3], #1
   10bd4:	9903      	ldr	r1, [sp, #12]
   10bd6:	9309      	str	r3, [sp, #36]	; 0x24
   10bd8:	9b02      	ldr	r3, [sp, #8]
   10bda:	920a      	str	r2, [sp, #40]	; 0x28
   10bdc:	4798      	blx	r3
   10bde:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   10be2:	3001      	adds	r0, #1
   10be4:	f47f acde 	bne.w	105a4 <z_prf+0x280>
   10be8:	f7ff bbb2 	b.w	10350 <z_prf+0x2c>
				PUTC('0');
   10bec:	9903      	ldr	r1, [sp, #12]
   10bee:	2030      	movs	r0, #48	; 0x30
   10bf0:	9b02      	ldr	r3, [sp, #8]
   10bf2:	9209      	str	r2, [sp, #36]	; 0x24
   10bf4:	4798      	blx	r3
   10bf6:	3001      	adds	r0, #1
   10bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10bfa:	f47f acd6 	bne.w	105aa <z_prf+0x286>
   10bfe:	f7ff bba7 	b.w	10350 <z_prf+0x2c>
					PUTC(c);
   10c02:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10c06:	4798      	blx	r3
   10c08:	3001      	adds	r0, #1
   10c0a:	f43f aba1 	beq.w	10350 <z_prf+0x2c>
					c = *++cptr;
   10c0e:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10c12:	e4d6      	b.n	105c2 <z_prf+0x29e>
					PUTC('0');
   10c14:	9903      	ldr	r1, [sp, #12]
   10c16:	2030      	movs	r0, #48	; 0x30
   10c18:	9b02      	ldr	r3, [sp, #8]
   10c1a:	4798      	blx	r3
   10c1c:	3001      	adds	r0, #1
   10c1e:	f47f acd8 	bne.w	105d2 <z_prf+0x2ae>
   10c22:	f7ff bb95 	b.w	10350 <z_prf+0x2c>
					PUTC('0');
   10c26:	9903      	ldr	r1, [sp, #12]
   10c28:	2030      	movs	r0, #48	; 0x30
   10c2a:	9b02      	ldr	r3, [sp, #8]
   10c2c:	4798      	blx	r3
   10c2e:	3001      	adds	r0, #1
   10c30:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10c34:	f47f ace7 	bne.w	10606 <z_prf+0x2e2>
   10c38:	f7ff bb8a 	b.w	10350 <z_prf+0x2c>
					PUTC(c);
   10c3c:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   10c40:	4798      	blx	r3
   10c42:	3001      	adds	r0, #1
   10c44:	f43f ab84 	beq.w	10350 <z_prf+0x2c>
					c = *++cptr;
   10c48:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10c4c:	e4e5      	b.n	1061a <z_prf+0x2f6>
					PUTC('0');
   10c4e:	9903      	ldr	r1, [sp, #12]
   10c50:	2030      	movs	r0, #48	; 0x30
   10c52:	9b02      	ldr	r3, [sp, #8]
   10c54:	4798      	blx	r3
   10c56:	3001      	adds	r0, #1
   10c58:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   10c5c:	f47f ace8 	bne.w	10630 <z_prf+0x30c>
   10c60:	f7ff bb76 	b.w	10350 <z_prf+0x2c>
				PUTC(*cptr++);
   10c64:	9903      	ldr	r1, [sp, #12]
   10c66:	f81a 0b01 	ldrb.w	r0, [sl], #1
   10c6a:	9b02      	ldr	r3, [sp, #8]
   10c6c:	4798      	blx	r3
   10c6e:	3001      	adds	r0, #1
   10c70:	f43f ab6e 	beq.w	10350 <z_prf+0x2c>
   10c74:	eba6 030a 	sub.w	r3, r6, sl
			while (clen-- > 0) {
   10c78:	2b00      	cmp	r3, #0
   10c7a:	dcf3      	bgt.n	10c64 <z_prf+0x940>
			count += clen;
   10c7c:	9b01      	ldr	r3, [sp, #4]
   10c7e:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
   10c80:	2c00      	cmp	r4, #0
			count += clen;
   10c82:	4413      	add	r3, r2
   10c84:	9301      	str	r3, [sp, #4]
			if (width > 0) {
   10c86:	f77f af21 	ble.w	10acc <z_prf+0x7a8>
   10c8a:	4625      	mov	r5, r4
   10c8c:	e006      	b.n	10c9c <z_prf+0x978>
					PUTC(' ');
   10c8e:	9903      	ldr	r1, [sp, #12]
   10c90:	2020      	movs	r0, #32
   10c92:	9b02      	ldr	r3, [sp, #8]
   10c94:	4798      	blx	r3
   10c96:	3001      	adds	r0, #1
   10c98:	f43f ab5a 	beq.w	10350 <z_prf+0x2c>
				while (width-- > 0) {
   10c9c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   10ca0:	d2f5      	bcs.n	10c8e <z_prf+0x96a>
				count += width;
   10ca2:	9b01      	ldr	r3, [sp, #4]
   10ca4:	4423      	add	r3, r4
   10ca6:	9301      	str	r3, [sp, #4]
   10ca8:	e710      	b.n	10acc <z_prf+0x7a8>
   10caa:	bf00      	nop

00010cac <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10cac:	4b01      	ldr	r3, [pc, #4]	; (10cb4 <__stdout_hook_install+0x8>)
   10cae:	6018      	str	r0, [r3, #0]
}
   10cb0:	4770      	bx	lr
   10cb2:	bf00      	nop
   10cb4:	2002c4e4 	.word	0x2002c4e4

00010cb8 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   10cb8:	b40c      	push	{r2, r3}
   10cba:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   10cbc:	b909      	cbnz	r1, 10cc2 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   10cbe:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   10cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   10cc6:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10cc8:	9a06      	ldr	r2, [sp, #24]
   10cca:	a902      	add	r1, sp, #8
   10ccc:	4805      	ldr	r0, [pc, #20]	; (10ce4 <snprintf+0x2c>)
	va_start(vargs, format);
   10cce:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10cd0:	f7ff fb28 	bl	10324 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10cd4:	2200      	movs	r2, #0
   10cd6:	9b02      	ldr	r3, [sp, #8]
   10cd8:	701a      	strb	r2, [r3, #0]
	return r;
}
   10cda:	b005      	add	sp, #20
   10cdc:	f85d eb04 	ldr.w	lr, [sp], #4
   10ce0:	b002      	add	sp, #8
   10ce2:	4770      	bx	lr
   10ce4:	0001d57b 	.word	0x0001d57b

00010ce8 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   10ce8:	b40e      	push	{r1, r2, r3}
   10cea:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10cec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   10cf0:	ab05      	add	r3, sp, #20
   10cf2:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   10cf6:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10cf8:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10cfa:	4806      	ldr	r0, [pc, #24]	; (10d14 <sprintf+0x2c>)
   10cfc:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   10cfe:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10d00:	f7ff fb10 	bl	10324 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10d04:	2200      	movs	r2, #0
   10d06:	9b02      	ldr	r3, [sp, #8]
   10d08:	701a      	strb	r2, [r3, #0]
	return r;
}
   10d0a:	b004      	add	sp, #16
   10d0c:	f85d eb04 	ldr.w	lr, [sp], #4
   10d10:	b003      	add	sp, #12
   10d12:	4770      	bx	lr
   10d14:	0001d57b 	.word	0x0001d57b

00010d18 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   10d18:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   10d1a:	4c07      	ldr	r4, [pc, #28]	; (10d38 <net_if_init+0x20>)
   10d1c:	4d07      	ldr	r5, [pc, #28]	; (10d3c <net_if_init+0x24>)
   10d1e:	42ac      	cmp	r4, r5
   10d20:	d100      	bne.n	10d24 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10d22:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   10d24:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   10d26:	681b      	ldr	r3, [r3, #0]
   10d28:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   10d2a:	b11b      	cbz	r3, 10d34 <net_if_init+0x1c>
   10d2c:	681b      	ldr	r3, [r3, #0]
   10d2e:	b10b      	cbz	r3, 10d34 <net_if_init+0x1c>
	api->init(iface);
   10d30:	4620      	mov	r0, r4
   10d32:	4798      	blx	r3
	     iface++, if_count++) {
   10d34:	3420      	adds	r4, #32
   10d36:	e7f2      	b.n	10d1e <net_if_init+0x6>
   10d38:	2002c6e0 	.word	0x2002c6e0
   10d3c:	2002c700 	.word	0x2002c700

00010d40 <net_if_post_init>:

void net_if_post_init(void)
{
   10d40:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10d42:	4c08      	ldr	r4, [pc, #32]	; (10d64 <net_if_post_init+0x24>)
   10d44:	4d08      	ldr	r5, [pc, #32]	; (10d68 <net_if_post_init+0x28>)
   10d46:	42ac      	cmp	r4, r5
   10d48:	d100      	bne.n	10d4c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   10d4a:	bd38      	pop	{r3, r4, r5, pc}
	return atomic_test_bit(iface->if_dev->flags, value);
   10d4c:	6820      	ldr	r0, [r4, #0]
   10d4e:	2103      	movs	r1, #3
   10d50:	300c      	adds	r0, #12
   10d52:	f00c fc26 	bl	1d5a2 <atomic_test_bit>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   10d56:	b910      	cbnz	r0, 10d5e <net_if_post_init+0x1e>
			net_if_up(iface);
   10d58:	4620      	mov	r0, r4
   10d5a:	f00c fc31 	bl	1d5c0 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   10d5e:	3420      	adds	r4, #32
   10d60:	e7f1      	b.n	10d46 <net_if_post_init+0x6>
   10d62:	bf00      	nop
   10d64:	2002c6e0 	.word	0x2002c6e0
   10d68:	2002c700 	.word	0x2002c700

00010d6c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   10d6c:	2300      	movs	r3, #0
{
   10d6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   10d72:	2802      	cmp	r0, #2
{
   10d74:	b089      	sub	sp, #36	; 0x24
   10d76:	4681      	mov	r9, r0
   10d78:	468a      	mov	sl, r1
   10d7a:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   10d7c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   10d80:	d13c      	bne.n	10dfc <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   10d82:	aa06      	add	r2, sp, #24
   10d84:	4610      	mov	r0, r2
   10d86:	9104      	str	r1, [sp, #16]
{
   10d88:	4619      	mov	r1, r3
   10d8a:	e006      	b.n	10d9a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   10d8c:	7804      	ldrb	r4, [r0, #0]
   10d8e:	3101      	adds	r1, #1
   10d90:	3401      	adds	r4, #1
   10d92:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   10d94:	b2cc      	uxtb	r4, r1
   10d96:	2c07      	cmp	r4, #7
   10d98:	d803      	bhi.n	10da2 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   10d9a:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   10d9e:	2c00      	cmp	r4, #0
   10da0:	d0f4      	beq.n	10d8c <z_impl_net_addr_ntop+0x20>
   10da2:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   10da4:	2b08      	cmp	r3, #8
   10da6:	f100 0001 	add.w	r0, r0, #1
   10daa:	d1ed      	bne.n	10d88 <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   10dac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   10db0:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   10db2:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   10db4:	f812 1b01 	ldrb.w	r1, [r2], #1
   10db8:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   10dba:	bf88      	it	hi
   10dbc:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   10dbe:	f103 0301 	add.w	r3, r3, #1
   10dc2:	b2db      	uxtb	r3, r3
				pos = i;
   10dc4:	bf88      	it	hi
   10dc6:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   10dc8:	2b08      	cmp	r3, #8
   10dca:	d1f3      	bne.n	10db4 <z_impl_net_addr_ntop+0x48>
		len = 8;
   10dcc:	9303      	str	r3, [sp, #12]
   10dce:	2f01      	cmp	r7, #1
   10dd0:	f04f 033a 	mov.w	r3, #58	; 0x3a
   10dd4:	bf08      	it	eq
   10dd6:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   10dda:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   10ddc:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   10dde:	4644      	mov	r4, r8
   10de0:	4615      	mov	r5, r2
   10de2:	9b03      	ldr	r3, [sp, #12]
   10de4:	429d      	cmp	r5, r3
   10de6:	db19      	blt.n	10e1c <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   10de8:	4544      	cmp	r4, r8
   10dea:	d009      	beq.n	10e00 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   10dec:	2300      	movs	r3, #0
   10dee:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   10df2:	bf0c      	ite	eq
   10df4:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   10df8:	7023      	strbne	r3, [r4, #0]
   10dfa:	e003      	b.n	10e04 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   10dfc:	2801      	cmp	r0, #1
   10dfe:	d005      	beq.n	10e0c <z_impl_net_addr_ntop+0xa0>
		return NULL;
   10e00:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   10e04:	4640      	mov	r0, r8
   10e06:	b009      	add	sp, #36	; 0x24
   10e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   10e0c:	232e      	movs	r3, #46	; 0x2e
   10e0e:	2204      	movs	r2, #4
	s8_t pos = -1;
   10e10:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   10e14:	e9cd 3202 	strd	r3, r2, [sp, #8]
	u8_t i, bl, bh, longest = 1U;
   10e18:	4607      	mov	r7, r0
   10e1a:	e7df      	b.n	10ddc <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   10e1c:	9b03      	ldr	r3, [sp, #12]
   10e1e:	2b04      	cmp	r3, #4
   10e20:	d134      	bne.n	10e8c <z_impl_net_addr_ntop+0x120>
			value = (u32_t)addr->s4_addr[i];
   10e22:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   10e26:	b949      	cbnz	r1, 10e3c <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   10e28:	2330      	movs	r3, #48	; 0x30
   10e2a:	4620      	mov	r0, r4
   10e2c:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   10e30:	9b02      	ldr	r3, [sp, #8]
   10e32:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   10e34:	3501      	adds	r5, #1
   10e36:	b2ed      	uxtb	r5, r5
   10e38:	4604      	mov	r4, r0
   10e3a:	e7d2      	b.n	10de2 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   10e3c:	2009      	movs	r0, #9
   10e3e:	f04f 0b00 	mov.w	fp, #0
   10e42:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 10f1c <z_impl_net_addr_ntop+0x1b0>
   10e46:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   10e48:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   10e4c:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   10e50:	4583      	cmp	fp, r0
		value = value % divisor;
   10e52:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   10e54:	dc01      	bgt.n	10e5a <z_impl_net_addr_ntop+0xee>
   10e56:	4561      	cmp	r1, ip
   10e58:	d306      	bcc.n	10e68 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   10e5a:	4683      	mov	fp, r0
   10e5c:	9b01      	ldr	r3, [sp, #4]
   10e5e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   10e62:	f803 eb01 	strb.w	lr, [r3], #1
   10e66:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10e68:	230a      	movs	r3, #10
   10e6a:	3801      	subs	r0, #1
   10e6c:	fbbc fcf3 	udiv	ip, ip, r3
   10e70:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   10e72:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   10e74:	d1e8      	bne.n	10e48 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   10e76:	f04f 0300 	mov.w	r3, #0
   10e7a:	9901      	ldr	r1, [sp, #4]
   10e7c:	700b      	strb	r3, [r1, #0]
	return buf - start;
   10e7e:	1b0b      	subs	r3, r1, r4
			ptr += l;
   10e80:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   10e82:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   10e84:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   10e86:	3001      	adds	r0, #1
   10e88:	54e1      	strb	r1, [r4, r3]
			continue;
   10e8a:	e7d3      	b.n	10e34 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   10e8c:	42ae      	cmp	r6, r5
   10e8e:	d10d      	bne.n	10eac <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   10e90:	b902      	cbnz	r2, 10e94 <z_impl_net_addr_ntop+0x128>
   10e92:	b916      	cbnz	r6, 10e9a <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   10e94:	233a      	movs	r3, #58	; 0x3a
   10e96:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   10e9a:	233a      	movs	r3, #58	; 0x3a
   10e9c:	4620      	mov	r0, r4
   10e9e:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   10ea2:	1e7b      	subs	r3, r7, #1
   10ea4:	441d      	add	r5, r3
   10ea6:	b2ed      	uxtb	r5, r5
			needcolon = false;
   10ea8:	2200      	movs	r2, #0
			continue;
   10eaa:	e7c3      	b.n	10e34 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   10eac:	b112      	cbz	r2, 10eb4 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   10eae:	233a      	movs	r3, #58	; 0x3a
   10eb0:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   10eb4:	9b04      	ldr	r3, [sp, #16]
   10eb6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   10eba:	021a      	lsls	r2, r3, #8
   10ebc:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   10ec0:	b212      	sxth	r2, r2
		bh = value >> 8;
   10ec2:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   10ec6:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   10eca:	b1b3      	cbz	r3, 10efa <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   10ecc:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   10ece:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   10ed0:	d90b      	bls.n	10eea <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   10ed2:	2300      	movs	r3, #0
   10ed4:	2261      	movs	r2, #97	; 0x61
   10ed6:	4620      	mov	r0, r4
   10ed8:	f00c fba1 	bl	1d61e <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   10edc:	2301      	movs	r3, #1
   10ede:	2261      	movs	r2, #97	; 0x61
   10ee0:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   10ee2:	f00c fb9c 	bl	1d61e <net_byte_to_hex>
		needcolon = true;
   10ee6:	2201      	movs	r2, #1
   10ee8:	e7a4      	b.n	10e34 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   10eea:	b25b      	sxtb	r3, r3
   10eec:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   10eee:	bf94      	ite	ls
   10ef0:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   10ef2:	3357      	addhi	r3, #87	; 0x57
   10ef4:	1c60      	adds	r0, r4, #1
   10ef6:	7023      	strb	r3, [r4, #0]
   10ef8:	e7f0      	b.n	10edc <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   10efa:	f1bb 0f0f 	cmp.w	fp, #15
   10efe:	d903      	bls.n	10f08 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   10f00:	2261      	movs	r2, #97	; 0x61
   10f02:	4659      	mov	r1, fp
   10f04:	4620      	mov	r0, r4
   10f06:	e7ec      	b.n	10ee2 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   10f08:	b252      	sxtb	r2, r2
   10f0a:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   10f0e:	bf94      	ite	ls
   10f10:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   10f12:	3257      	addhi	r2, #87	; 0x57
   10f14:	1c60      	adds	r0, r4, #1
   10f16:	7022      	strb	r2, [r4, #0]
   10f18:	e7e5      	b.n	10ee6 <z_impl_net_addr_ntop+0x17a>
   10f1a:	bf00      	nop
   10f1c:	3b9aca00 	.word	0x3b9aca00

00010f20 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   10f20:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   10f22:	4b09      	ldr	r3, [pc, #36]	; (10f48 <gpio_nrfx_init+0x28>)
   10f24:	781a      	ldrb	r2, [r3, #0]
   10f26:	b96a      	cbnz	r2, 10f44 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   10f28:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10f2a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   10f2c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   10f2e:	2105      	movs	r1, #5
   10f30:	f7fe fba0 	bl	f674 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   10f34:	2031      	movs	r0, #49	; 0x31
   10f36:	f7fe fb8d 	bl	f654 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   10f3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10f3e:	4b03      	ldr	r3, [pc, #12]	; (10f4c <gpio_nrfx_init+0x2c>)
   10f40:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   10f44:	2000      	movs	r0, #0
   10f46:	bd08      	pop	{r3, pc}
   10f48:	20026520 	.word	0x20026520
   10f4c:	40031000 	.word	0x40031000

00010f50 <gpiote_pin_int_cfg>:
{
   10f50:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   10f52:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   10f54:	6882      	ldr	r2, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10f56:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   10f58:	4c51      	ldr	r4, [pc, #324]	; (110a0 <gpiote_pin_int_cfg+0x150>)
   10f5a:	7918      	ldrb	r0, [r3, #4]
   10f5c:	f001 031f 	and.w	r3, r1, #31
   10f60:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10f64:	2000      	movs	r0, #0
   10f66:	f8d4 5304 	ldr.w	r5, [r4, #772]	; 0x304
   10f6a:	b2ed      	uxtb	r5, r5
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10f6c:	f500 76a2 	add.w	r6, r0, #324	; 0x144
   10f70:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   10f74:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   10f78:	42b3      	cmp	r3, r6
   10f7a:	d170      	bne.n	1105e <gpiote_pin_int_cfg+0x10e>
		    && (intenset & BIT(i))) {
   10f7c:	fa25 f600 	lsr.w	r6, r5, r0
   10f80:	07f6      	lsls	r6, r6, #31
   10f82:	d56c      	bpl.n	1105e <gpiote_pin_int_cfg+0x10e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10f84:	0085      	lsls	r5, r0, #2
   10f86:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   10f8a:	f505 3544 	add.w	r5, r5, #200704	; 0x31000
   10f8e:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
   10f92:	f026 0601 	bic.w	r6, r6, #1
   10f96:	f8c5 6510 	str.w	r6, [r5, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   10f9a:	2501      	movs	r5, #1
   10f9c:	fa05 f000 	lsl.w	r0, r5, r0
    p_reg->INTENCLR = mask;
   10fa0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10fa4:	4d3f      	ldr	r5, [pc, #252]	; (110a4 <gpiote_pin_int_cfg+0x154>)
   10fa6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10faa:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   10fae:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10fb2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   10fb6:	6890      	ldr	r0, [r2, #8]
   10fb8:	40c8      	lsrs	r0, r1
   10fba:	f010 0001 	ands.w	r0, r0, #1
   10fbe:	d04d      	beq.n	1105c <gpiote_pin_int_cfg+0x10c>
   10fc0:	68d0      	ldr	r0, [r2, #12]
   10fc2:	40c8      	lsrs	r0, r1
   10fc4:	f010 0001 	ands.w	r0, r0, #1
   10fc8:	d048      	beq.n	1105c <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   10fca:	6950      	ldr	r0, [r2, #20]
   10fcc:	40c8      	lsrs	r0, r1
   10fce:	f010 0001 	ands.w	r0, r0, #1
   10fd2:	d050      	beq.n	11076 <gpiote_pin_int_cfg+0x126>
			if (data->double_edge & BIT(pin)) {
   10fd4:	6990      	ldr	r0, [r2, #24]
   10fd6:	40c8      	lsrs	r0, r1
   10fd8:	07c0      	lsls	r0, r0, #31
   10fda:	d444      	bmi.n	11066 <gpiote_pin_int_cfg+0x116>
			} else if (((data->active_level & BIT(pin)) != 0U)
   10fdc:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   10fde:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   10fe0:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   10fe2:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
   10fe6:	f000 0001 	and.w	r0, r0, #1
   10fea:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   10fee:	4288      	cmp	r0, r1
   10ff0:	bf14      	ite	ne
   10ff2:	2101      	movne	r1, #1
   10ff4:	2102      	moveq	r1, #2
   10ff6:	2500      	movs	r5, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   10ff8:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   10ffc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   11000:	f010 0003 	ands.w	r0, r0, #3
   11004:	d131      	bne.n	1106a <gpiote_pin_int_cfg+0x11a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11006:	00aa      	lsls	r2, r5, #2
   11008:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1100c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   11010:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11014:	021b      	lsls	r3, r3, #8
   11016:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1101a:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   1101e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11022:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
			nrf_gpiote_event_t evt =
   11026:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1102a:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
   1102e:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11030:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   11034:	b29b      	uxth	r3, r3
   11036:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1103a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1103e:	4331      	orrs	r1, r6
   11040:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11044:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   11046:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1104a:	f043 0301 	orr.w	r3, r3, #1
   1104e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   11052:	2301      	movs	r3, #1
   11054:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   11058:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   1105c:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1105e:	3001      	adds	r0, #1
   11060:	2808      	cmp	r0, #8
   11062:	d183      	bne.n	10f6c <gpiote_pin_int_cfg+0x1c>
   11064:	e79e      	b.n	10fa4 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   11066:	2103      	movs	r1, #3
   11068:	e7c5      	b.n	10ff6 <gpiote_pin_int_cfg+0xa6>
   1106a:	3501      	adds	r5, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1106c:	2d08      	cmp	r5, #8
   1106e:	d1c3      	bne.n	10ff8 <gpiote_pin_int_cfg+0xa8>
	return -ENODEV;
   11070:	f06f 0012 	mvn.w	r0, #18
   11074:	e7f2      	b.n	1105c <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   11076:	6913      	ldr	r3, [r2, #16]
   11078:	69d2      	ldr	r2, [r2, #28]
   1107a:	4053      	eors	r3, r2
   1107c:	fa23 f101 	lsr.w	r1, r3, r1
		return NRF_GPIO_PIN_SENSE_HIGH;
   11080:	f011 0f01 	tst.w	r1, #1
   11084:	bf14      	ite	ne
   11086:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   1108a:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1108e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   11092:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11096:	4313      	orrs	r3, r2
   11098:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   1109c:	e7de      	b.n	1105c <gpiote_pin_int_cfg+0x10c>
   1109e:	bf00      	nop
   110a0:	40031000 	.word	0x40031000
   110a4:	40842500 	.word	0x40842500

000110a8 <gpio_nrfx_config>:
{
   110a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110ac:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   110ae:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   110b0:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   110b4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   110b8:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   110ba:	d040      	beq.n	1113e <gpio_nrfx_config+0x96>
   110bc:	dc09      	bgt.n	110d2 <gpio_nrfx_config+0x2a>
   110be:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   110c2:	d03e      	beq.n	11142 <gpio_nrfx_config+0x9a>
   110c4:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   110c8:	d03d      	beq.n	11146 <gpio_nrfx_config+0x9e>
   110ca:	b190      	cbz	r0, 110f2 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   110cc:	f06f 0015 	mvn.w	r0, #21
   110d0:	e032      	b.n	11138 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   110d2:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   110d6:	d038      	beq.n	1114a <gpio_nrfx_config+0xa2>
   110d8:	dc04      	bgt.n	110e4 <gpio_nrfx_config+0x3c>
   110da:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   110de:	d1f5      	bne.n	110cc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   110e0:	2003      	movs	r0, #3
   110e2:	e006      	b.n	110f2 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   110e4:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   110e8:	d031      	beq.n	1114e <gpio_nrfx_config+0xa6>
   110ea:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   110ee:	d1ed      	bne.n	110cc <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   110f0:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   110f2:	f406 7740 	and.w	r7, r6, #768	; 0x300
   110f6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   110fa:	d02a      	beq.n	11152 <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   110fc:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   11100:	4263      	negs	r3, r4
   11102:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   11104:	2901      	cmp	r1, #1
		from_pin = pin;
   11106:	bf19      	ittee	ne
   11108:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   1110a:	46a1      	movne	r9, r4
		to_pin   = 31U;
   1110c:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   11110:	2400      	moveq	r4, #0
   11112:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   11116:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   1111a:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1111e:	ea47 070c 	orr.w	r7, r7, ip
   11122:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11126:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 111c8 <gpio_nrfx_config+0x120>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1112a:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1112e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   11132:	45a1      	cmp	r9, r4
   11134:	d20f      	bcs.n	11156 <gpio_nrfx_config+0xae>
	return 0;
   11136:	2000      	movs	r0, #0
}
   11138:	b003      	add	sp, #12
   1113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   1113e:	2002      	movs	r0, #2
   11140:	e7d7      	b.n	110f2 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   11142:	2001      	movs	r0, #1
   11144:	e7d5      	b.n	110f2 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   11146:	2004      	movs	r0, #4
   11148:	e7d3      	b.n	110f2 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   1114a:	2005      	movs	r0, #5
   1114c:	e7d1      	b.n	110f2 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   1114e:	2006      	movs	r0, #6
   11150:	e7cf      	b.n	110f2 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   11152:	2303      	movs	r3, #3
   11154:	e7d6      	b.n	11104 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   11156:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   1115a:	6892      	ldr	r2, [r2, #8]
   1115c:	7911      	ldrb	r1, [r2, #4]
   1115e:	f004 021f 	and.w	r2, r4, #31
   11162:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11166:	3280      	adds	r2, #128	; 0x80
   11168:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1116c:	68a9      	ldr	r1, [r5, #8]
   1116e:	fa0b f204 	lsl.w	r2, fp, r4
   11172:	2b00      	cmp	r3, #0
   11174:	d025      	beq.n	111c2 <gpio_nrfx_config+0x11a>
   11176:	4311      	orrs	r1, r2
   11178:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   1117a:	6969      	ldr	r1, [r5, #20]
   1117c:	06b0      	lsls	r0, r6, #26
   1117e:	bf4c      	ite	mi
   11180:	4311      	orrmi	r1, r2
   11182:	4391      	bicpl	r1, r2
   11184:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   11186:	69a9      	ldr	r1, [r5, #24]
   11188:	0670      	lsls	r0, r6, #25
   1118a:	bf4c      	ite	mi
   1118c:	4311      	orrmi	r1, r2
   1118e:	4391      	bicpl	r1, r2
   11190:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   11192:	6929      	ldr	r1, [r5, #16]
   11194:	0770      	lsls	r0, r6, #29
   11196:	bf4c      	ite	mi
   11198:	4311      	orrmi	r1, r2
   1119a:	4391      	bicpl	r1, r2
   1119c:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   1119e:	69e9      	ldr	r1, [r5, #28]
   111a0:	0630      	lsls	r0, r6, #24
   111a2:	bf4c      	ite	mi
   111a4:	430a      	orrmi	r2, r1
   111a6:	ea21 0202 	bicpl.w	r2, r1, r2
   111aa:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   111ac:	4621      	mov	r1, r4
   111ae:	4640      	mov	r0, r8
   111b0:	9301      	str	r3, [sp, #4]
   111b2:	f7ff fecd 	bl	10f50 <gpiote_pin_int_cfg>
		if (res != 0) {
   111b6:	2800      	cmp	r0, #0
   111b8:	d1be      	bne.n	11138 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   111ba:	3401      	adds	r4, #1
   111bc:	b2e4      	uxtb	r4, r4
   111be:	9b01      	ldr	r3, [sp, #4]
   111c0:	e7b7      	b.n	11132 <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   111c2:	ea21 0102 	bic.w	r1, r1, r2
   111c6:	e7d7      	b.n	11178 <gpio_nrfx_config+0xd0>
   111c8:	40842500 	.word	0x40842500

000111cc <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   111cc:	494f      	ldr	r1, [pc, #316]	; (1130c <gpiote_event_handler+0x140>)
{
   111ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111d2:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   111d4:	2d00      	cmp	r5, #0
   111d6:	d060      	beq.n	1129a <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
   111d8:	4b4d      	ldr	r3, [pc, #308]	; (11310 <gpiote_event_handler+0x144>)
	u32_t pin = 0U;
   111da:	2600      	movs	r6, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   111dc:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   111de:	681b      	ldr	r3, [r3, #0]
   111e0:	f8df e138 	ldr.w	lr, [pc, #312]	; 1131c <gpiote_event_handler+0x150>
   111e4:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   111e6:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
   111ea:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   111ec:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   111f0:	4320      	orrs	r0, r4
   111f2:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   111f6:	6838      	ldr	r0, [r7, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   111f8:	69d4      	ldr	r4, [r2, #28]
   111fa:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   111fc:	6900      	ldr	r0, [r0, #16]
   111fe:	4054      	eors	r4, r2
   11200:	4044      	eors	r4, r0
	u32_t bit = 1U << pin;
   11202:	2001      	movs	r0, #1
	u32_t out = pin_states & level_pins;
   11204:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   11208:	bb93      	cbnz	r3, 11270 <gpiote_event_handler+0xa4>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1120a:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1120c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1120e:	2001      	movs	r0, #1
   11210:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   11212:	4940      	ldr	r1, [pc, #256]	; (11314 <gpiote_event_handler+0x148>)
   11214:	4e40      	ldr	r6, [pc, #256]	; (11318 <gpiote_event_handler+0x14c>)
   11216:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   1121a:	fa00 fc03 	lsl.w	ip, r0, r3
   1121e:	ea1c 0f02 	tst.w	ip, r2
   11222:	d00d      	beq.n	11240 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11224:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   11228:	b152      	cbz	r2, 11240 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1122a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1122e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11232:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11236:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1123a:	fa00 f202 	lsl.w	r2, r0, r2
   1123e:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   11240:	3301      	adds	r3, #1
   11242:	2b08      	cmp	r3, #8
   11244:	d1e7      	bne.n	11216 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   11246:	bb54      	cbnz	r4, 1129e <gpiote_event_handler+0xd2>
	if (port_event) {
   11248:	b185      	cbz	r5, 1126c <gpiote_event_handler+0xa0>
	u32_t bit = 1U << pin;
   1124a:	2401      	movs	r4, #1
	u32_t pin = 0U;
   1124c:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   1124e:	4b30      	ldr	r3, [pc, #192]	; (11310 <gpiote_event_handler+0x144>)
   11250:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1131c <gpiote_event_handler+0x150>
   11254:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
   11256:	681b      	ldr	r3, [r3, #0]
   11258:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1125a:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
   1125e:	400b      	ands	r3, r1
	out &= ~data->trig_edge & ~data->double_edge;
   11260:	e9d2 1005 	ldrd	r1, r0, [r2, #20]
   11264:	4301      	orrs	r1, r0
   11266:	ea23 0301 	bic.w	r3, r3, r1
	while (level_pins) {
   1126a:	bb7b      	cbnz	r3, 112cc <gpiote_event_handler+0x100>
}
   1126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   11270:	4203      	tst	r3, r0
   11272:	d00f      	beq.n	11294 <gpiote_event_handler+0xc8>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11274:	f897 c004 	ldrb.w	ip, [r7, #4]
   11278:	f006 021f 	and.w	r2, r6, #31
   1127c:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
   11280:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   11284:	f8d2 c200 	ldr.w	ip, [r2, #512]	; 0x200
			level_pins &= ~bit;
   11288:	ea23 0300 	bic.w	r3, r3, r0
   1128c:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11290:	f8c2 c200 	str.w	ip, [r2, #512]	; 0x200
		++pin;
   11294:	3601      	adds	r6, #1
		bit <<= 1;
   11296:	0040      	lsls	r0, r0, #1
   11298:	e7b6      	b.n	11208 <gpiote_event_handler+0x3c>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1129a:	462c      	mov	r4, r5
   1129c:	e7b6      	b.n	1120c <gpiote_event_handler+0x40>
	struct gpio_nrfx_data *data = get_port_data(port);
   1129e:	4f1c      	ldr	r7, [pc, #112]	; (11310 <gpiote_event_handler+0x144>)
   112a0:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   112a4:	f8d8 1000 	ldr.w	r1, [r8]
   112a8:	2900      	cmp	r1, #0
   112aa:	d0cd      	beq.n	11248 <gpiote_event_handler+0x7c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   112ac:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
   112ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
   112b2:	688a      	ldr	r2, [r1, #8]
   112b4:	4023      	ands	r3, r4
   112b6:	4213      	tst	r3, r2
   112b8:	d003      	beq.n	112c2 <gpiote_event_handler+0xf6>
			cb->handler(port, cb, pins);
   112ba:	684b      	ldr	r3, [r1, #4]
   112bc:	4622      	mov	r2, r4
   112be:	4638      	mov	r0, r7
   112c0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   112c2:	2e00      	cmp	r6, #0
   112c4:	d0c0      	beq.n	11248 <gpiote_event_handler+0x7c>
   112c6:	4631      	mov	r1, r6
   112c8:	6836      	ldr	r6, [r6, #0]
   112ca:	e7f0      	b.n	112ae <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   112cc:	421c      	tst	r4, r3
   112ce:	d01a      	beq.n	11306 <gpiote_event_handler+0x13a>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   112d0:	7930      	ldrb	r0, [r6, #4]
   112d2:	f005 011f 	and.w	r1, r5, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   112d6:	69d7      	ldr	r7, [r2, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   112d8:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   112dc:	6910      	ldr	r0, [r2, #16]
   112de:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   112e2:	4078      	eors	r0, r7
   112e4:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   112e6:	f010 0f01 	tst.w	r0, #1
   112ea:	bf14      	ite	ne
   112ec:	f44f 3700 	movne.w	r7, #131072	; 0x20000
   112f0:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   112f4:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
			level_pins &= ~bit;
   112f8:	ea23 0304 	bic.w	r3, r3, r4
   112fc:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   11300:	4338      	orrs	r0, r7
   11302:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
		++pin;
   11306:	3501      	adds	r5, #1
		bit <<= 1;
   11308:	0064      	lsls	r4, r4, #1
   1130a:	e7ae      	b.n	1126a <gpiote_event_handler+0x9e>
   1130c:	4003117c 	.word	0x4003117c
   11310:	2002c5d8 	.word	0x2002c5d8
   11314:	40031000 	.word	0x40031000
   11318:	40031100 	.word	0x40031100
   1131c:	40842500 	.word	0x40842500

00011320 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11320:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11322:	794b      	ldrb	r3, [r1, #5]
   11324:	2b01      	cmp	r3, #1
   11326:	d029      	beq.n	1137c <uarte_nrfx_configure+0x5c>
   11328:	2b03      	cmp	r3, #3
   1132a:	d124      	bne.n	11376 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1132c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1132e:	798b      	ldrb	r3, [r1, #6]
   11330:	2b03      	cmp	r3, #3
   11332:	d120      	bne.n	11376 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11334:	79cc      	ldrb	r4, [r1, #7]
   11336:	b12c      	cbz	r4, 11344 <uarte_nrfx_configure+0x24>
   11338:	2c01      	cmp	r4, #1
   1133a:	d11c      	bne.n	11376 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   1133c:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1133e:	689b      	ldr	r3, [r3, #8]
   11340:	791b      	ldrb	r3, [r3, #4]
   11342:	b1c3      	cbz	r3, 11376 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11344:	790a      	ldrb	r2, [r1, #4]
   11346:	b112      	cbz	r2, 1134e <uarte_nrfx_configure+0x2e>
   11348:	2a02      	cmp	r2, #2
   1134a:	d114      	bne.n	11376 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1134c:	220e      	movs	r2, #14
	switch (baudrate) {
   1134e:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   11352:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11354:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   11356:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   11358:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   1135a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1135c:	d062      	beq.n	11424 <uarte_nrfx_configure+0x104>
   1135e:	d829      	bhi.n	113b4 <uarte_nrfx_configure+0x94>
   11360:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11364:	d061      	beq.n	1142a <uarte_nrfx_configure+0x10a>
   11366:	d814      	bhi.n	11392 <uarte_nrfx_configure+0x72>
   11368:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1136c:	d05f      	beq.n	1142e <uarte_nrfx_configure+0x10e>
   1136e:	d807      	bhi.n	11380 <uarte_nrfx_configure+0x60>
   11370:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11374:	d05e      	beq.n	11434 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   11376:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1137a:	e052      	b.n	11422 <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1137c:	2600      	movs	r6, #0
   1137e:	e7d6      	b.n	1132e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   11380:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11384:	d059      	beq.n	1143a <uarte_nrfx_configure+0x11a>
   11386:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1138a:	d1f4      	bne.n	11376 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1138c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11390:	e03c      	b.n	1140c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   11392:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11396:	d053      	beq.n	11440 <uarte_nrfx_configure+0x120>
   11398:	d804      	bhi.n	113a4 <uarte_nrfx_configure+0x84>
   1139a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1139e:	d1ea      	bne.n	11376 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   113a0:	4b32      	ldr	r3, [pc, #200]	; (1146c <uarte_nrfx_configure+0x14c>)
   113a2:	e033      	b.n	1140c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   113a4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   113a8:	d04c      	beq.n	11444 <uarte_nrfx_configure+0x124>
   113aa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   113ae:	d1e2      	bne.n	11376 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   113b0:	4b2f      	ldr	r3, [pc, #188]	; (11470 <uarte_nrfx_configure+0x150>)
   113b2:	e02b      	b.n	1140c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   113b4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   113b8:	d046      	beq.n	11448 <uarte_nrfx_configure+0x128>
   113ba:	d812      	bhi.n	113e2 <uarte_nrfx_configure+0xc2>
   113bc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   113c0:	42bb      	cmp	r3, r7
   113c2:	d044      	beq.n	1144e <uarte_nrfx_configure+0x12e>
   113c4:	d805      	bhi.n	113d2 <uarte_nrfx_configure+0xb2>
   113c6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   113ca:	d1d4      	bne.n	11376 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   113cc:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   113d0:	e01c      	b.n	1140c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   113d2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   113d6:	d03d      	beq.n	11454 <uarte_nrfx_configure+0x134>
   113d8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   113dc:	d1cb      	bne.n	11376 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   113de:	4b25      	ldr	r3, [pc, #148]	; (11474 <uarte_nrfx_configure+0x154>)
   113e0:	e014      	b.n	1140c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   113e2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   113e6:	d038      	beq.n	1145a <uarte_nrfx_configure+0x13a>
   113e8:	d808      	bhi.n	113fc <uarte_nrfx_configure+0xdc>
   113ea:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   113ee:	d037      	beq.n	11460 <uarte_nrfx_configure+0x140>
   113f0:	4f21      	ldr	r7, [pc, #132]	; (11478 <uarte_nrfx_configure+0x158>)
   113f2:	42bb      	cmp	r3, r7
   113f4:	d1bf      	bne.n	11376 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   113f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   113fa:	e007      	b.n	1140c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   113fc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11400:	d031      	beq.n	11466 <uarte_nrfx_configure+0x146>
   11402:	4f1e      	ldr	r7, [pc, #120]	; (1147c <uarte_nrfx_configure+0x15c>)
   11404:	42bb      	cmp	r3, r7
   11406:	d1b6      	bne.n	11376 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11408:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1140c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11410:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11412:	6883      	ldr	r3, [r0, #8]
   11414:	4322      	orrs	r2, r4
   11416:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11418:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1141c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11420:	2000      	movs	r0, #0
}
   11422:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11424:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11428:	e7f0      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1142a:	4b15      	ldr	r3, [pc, #84]	; (11480 <uarte_nrfx_configure+0x160>)
   1142c:	e7ee      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   1142e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   11432:	e7eb      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   11434:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11438:	e7e8      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1143a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1143e:	e7e5      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11440:	4b10      	ldr	r3, [pc, #64]	; (11484 <uarte_nrfx_configure+0x164>)
   11442:	e7e3      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11444:	4b10      	ldr	r3, [pc, #64]	; (11488 <uarte_nrfx_configure+0x168>)
   11446:	e7e1      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11448:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1144c:	e7de      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1144e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11452:	e7db      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11454:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11458:	e7d8      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1145a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1145e:	e7d5      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11460:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11464:	e7d2      	b.n	1140c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11466:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1146a:	e7cf      	b.n	1140c <uarte_nrfx_configure+0xec>
   1146c:	00275000 	.word	0x00275000
   11470:	0075c000 	.word	0x0075c000
   11474:	013a9000 	.word	0x013a9000
   11478:	0003d090 	.word	0x0003d090
   1147c:	000f4240 	.word	0x000f4240
   11480:	0013b000 	.word	0x0013b000
   11484:	003af000 	.word	0x003af000
   11488:	004ea000 	.word	0x004ea000

0001148c <uarte_instance_init.constprop.4>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   1148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11490:	2501      	movs	r5, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11492:	f04f 0e03 	mov.w	lr, #3
   11496:	f04f 0c00 	mov.w	ip, #0
	return dev->config->config_info;
   1149a:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   1149c:	680a      	ldr	r2, [r1, #0]
	return config->uarte_regs;
   1149e:	689b      	ldr	r3, [r3, #8]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   114a0:	fa05 f702 	lsl.w	r7, r5, r2
   114a4:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   114a6:	4b1f      	ldr	r3, [pc, #124]	; (11524 <uarte_instance_init.constprop.4+0x98>)
	struct uarte_nrfx_data *data = get_dev_data(dev);
   114a8:	6886      	ldr	r6, [r0, #8]
   114aa:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   114ac:	f102 0780 	add.w	r7, r2, #128	; 0x80
   114b0:	f843 e027 	str.w	lr, [r3, r7, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   114b4:	684f      	ldr	r7, [r1, #4]
   114b6:	f107 0880 	add.w	r8, r7, #128	; 0x80
   114ba:	f843 c028 	str.w	ip, [r3, r8, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   114be:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   114c2:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514

	nrf_uarte_txrx_pins_set(uarte,
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   114c6:	688f      	ldr	r7, [r1, #8]
   114c8:	1c7a      	adds	r2, r7, #1
   114ca:	d010      	beq.n	114ee <uarte_instance_init.constprop.4+0x62>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   114cc:	68ca      	ldr	r2, [r1, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   114ce:	1c51      	adds	r1, r2, #1
   114d0:	d00d      	beq.n	114ee <uarte_instance_init.constprop.4+0x62>
   114d2:	f102 0180 	add.w	r1, r2, #128	; 0x80
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   114d6:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   114d8:	609d      	str	r5, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   114da:	f843 e021 	str.w	lr, [r3, r1, lsl #2]
   114de:	f107 0180 	add.w	r1, r7, #128	; 0x80
   114e2:	f843 c021 	str.w	ip, [r3, r1, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   114e6:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   114ea:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   114ee:	4631      	mov	r1, r6
   114f0:	f7ff ff16 	bl	11320 <uarte_nrfx_configure>
	if (err) {
   114f4:	b9a0      	cbnz	r0, 11520 <uarte_instance_init.constprop.4+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   114f6:	2308      	movs	r3, #8
   114f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   114fc:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11500:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11504:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11508:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1150a:	68b2      	ldr	r2, [r6, #8]
   1150c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11510:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11512:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11514:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11518:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1151c:	60a3      	str	r3, [r4, #8]
   1151e:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11524:	40842500 	.word	0x40842500

00011528 <uarte_2_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_2_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_2_CTS_PIN)
		#define UARTE_2_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(2);
   11528:	b530      	push	{r4, r5, lr}
   1152a:	b085      	sub	sp, #20
   1152c:	466c      	mov	r4, sp
   1152e:	4605      	mov	r5, r0
   11530:	4b08      	ldr	r3, [pc, #32]	; (11554 <uarte_2_init+0x2c>)
   11532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11538:	2200      	movs	r2, #0
   1153a:	2101      	movs	r1, #1
   1153c:	200a      	movs	r0, #10
   1153e:	f7fe f899 	bl	f674 <z_arm_irq_priority_set>
   11542:	200a      	movs	r0, #10
   11544:	f7fe f886 	bl	f654 <arch_irq_enable>
   11548:	4621      	mov	r1, r4
   1154a:	4628      	mov	r0, r5
   1154c:	f7ff ff9e 	bl	1148c <uarte_instance_init.constprop.4>
   11550:	b005      	add	sp, #20
   11552:	bd30      	pop	{r4, r5, pc}
   11554:	0001f1a4 	.word	0x0001f1a4

00011558 <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   11558:	b530      	push	{r4, r5, lr}
   1155a:	b085      	sub	sp, #20
   1155c:	466c      	mov	r4, sp
   1155e:	4605      	mov	r5, r0
   11560:	4b08      	ldr	r3, [pc, #32]	; (11584 <uarte_0_init+0x2c>)
   11562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11568:	2200      	movs	r2, #0
   1156a:	2101      	movs	r1, #1
   1156c:	2008      	movs	r0, #8
   1156e:	f7fe f881 	bl	f674 <z_arm_irq_priority_set>
   11572:	2008      	movs	r0, #8
   11574:	f7fe f86e 	bl	f654 <arch_irq_enable>
   11578:	4621      	mov	r1, r4
   1157a:	4628      	mov	r0, r5
   1157c:	f7ff ff86 	bl	1148c <uarte_instance_init.constprop.4>
   11580:	b005      	add	sp, #20
   11582:	bd30      	pop	{r4, r5, pc}
   11584:	0001f1b4 	.word	0x0001f1b4

00011588 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11588:	2200      	movs	r2, #0
{
   1158a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1158c:	4611      	mov	r1, r2
   1158e:	202a      	movs	r0, #42	; 0x2a
   11590:	f7fe f870 	bl	f674 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   11594:	f003 f90c 	bl	147b0 <bsd_init>
   11598:	4b01      	ldr	r3, [pc, #4]	; (115a0 <_bsdlib_init+0x18>)
   1159a:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   1159c:	2000      	movs	r0, #0
   1159e:	bd08      	pop	{r3, pc}
   115a0:	20020374 	.word	0x20020374

000115a4 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   115a4:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   115a6:	4b0d      	ldr	r3, [pc, #52]	; (115dc <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   115a8:	4c0d      	ldr	r4, [pc, #52]	; (115e0 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   115aa:	681a      	ldr	r2, [r3, #0]
   115ac:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   115ae:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   115b0:	4623      	mov	r3, r4
		if (entry->id == id) {
   115b2:	6819      	ldr	r1, [r3, #0]
   115b4:	4281      	cmp	r1, r0
   115b6:	d00e      	beq.n	115d6 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   115b8:	b151      	cbz	r1, 115d0 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   115ba:	6859      	ldr	r1, [r3, #4]
   115bc:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   115be:	42b1      	cmp	r1, r6
   115c0:	bfc4      	itt	gt
   115c2:	461c      	movgt	r4, r3
   115c4:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   115c6:	3d01      	subs	r5, #1
   115c8:	f103 0308 	add.w	r3, r3, #8
   115cc:	d1f1      	bne.n	115b2 <thread_monitor_entry_get+0xe>
   115ce:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   115d0:	3a01      	subs	r2, #1
	new_entry->id = id;
   115d2:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   115d4:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   115d6:	4618      	mov	r0, r3
   115d8:	bd70      	pop	{r4, r5, r6, pc}
   115da:	bf00      	nop
   115dc:	20020378 	.word	0x20020378
   115e0:	20020384 	.word	0x20020384

000115e4 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   115e4:	4668      	mov	r0, sp
   115e6:	f020 0107 	bic.w	r1, r0, #7
   115ea:	468d      	mov	sp, r1
   115ec:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   115ee:	4b0d      	ldr	r3, [pc, #52]	; (11624 <rpc_proxy_irq_handler+0x40>)
   115f0:	e8d3 2fef 	ldaex	r2, [r3]
   115f4:	3201      	adds	r2, #1
   115f6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   115fa:	2900      	cmp	r1, #0
   115fc:	d1f8      	bne.n	115f0 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   115fe:	f007 fb0b 	bl	18c18 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   11602:	4b09      	ldr	r3, [pc, #36]	; (11628 <rpc_proxy_irq_handler+0x44>)
   11604:	681c      	ldr	r4, [r3, #0]
   11606:	b93c      	cbnz	r4, 11618 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   11608:	f7fe f84c 	bl	f6a4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1160c:	f7fd ff8c 	bl	f528 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   11610:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   11614:	4685      	mov	sp, r0
   11616:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   11618:	1d20      	adds	r0, r4, #4
   1161a:	f00a fa2f 	bl	1ba7c <z_impl_k_sem_give>
   1161e:	6824      	ldr	r4, [r4, #0]
	return node->next;
   11620:	e7f1      	b.n	11606 <rpc_proxy_irq_handler+0x22>
   11622:	bf00      	nop
   11624:	20020378 	.word	0x20020378
   11628:	2002037c 	.word	0x2002037c

0001162c <bsd_os_timedwait>:
{
   1162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11630:	4688      	mov	r8, r1
   11632:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   11634:	f00d faad 	bl	1eb92 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   11638:	f8d8 3000 	ldr.w	r3, [r8]
   1163c:	4606      	mov	r6, r0
   1163e:	2b00      	cmp	r3, #0
   11640:	460f      	mov	r7, r1
   11642:	d103      	bne.n	1164c <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   11644:	f00a f9a0 	bl	1b988 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   11648:	203c      	movs	r0, #60	; 0x3c
   1164a:	e06e      	b.n	1172a <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   1164c:	bfbc      	itt	lt
   1164e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   11652:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   11656:	2201      	movs	r2, #1
   11658:	2100      	movs	r1, #0
   1165a:	a802      	add	r0, sp, #8
   1165c:	f00d f9fe 	bl	1ea5c <z_impl_k_sem_init>
   11660:	f10d 0a04 	add.w	sl, sp, #4
   11664:	f04f 0320 	mov.w	r3, #32
   11668:	f3ef 8b11 	mrs	fp, BASEPRI
   1166c:	f383 8811 	msr	BASEPRI, r3
   11670:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   11674:	f00a f9fc 	bl	1ba70 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   11678:	f7ff ff94 	bl	115a4 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1167c:	4933      	ldr	r1, [pc, #204]	; (1174c <bsd_os_timedwait+0x120>)
   1167e:	6843      	ldr	r3, [r0, #4]
   11680:	680a      	ldr	r2, [r1, #0]
   11682:	4689      	mov	r9, r1
   11684:	4293      	cmp	r3, r2
   11686:	f04f 0300 	mov.w	r3, #0
   1168a:	d108      	bne.n	1169e <bsd_os_timedwait+0x72>
	parent->next = child;
   1168c:	9301      	str	r3, [sp, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1168e:	4b30      	ldr	r3, [pc, #192]	; (11750 <bsd_os_timedwait+0x124>)
   11690:	685a      	ldr	r2, [r3, #4]
   11692:	2a00      	cmp	r2, #0
   11694:	d14c      	bne.n	11730 <bsd_os_timedwait+0x104>
	list->head = node;
   11696:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   1169a:	2301      	movs	r3, #1
   1169c:	e000      	b.n	116a0 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   1169e:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   116a0:	f38b 8811 	msr	BASEPRI, fp
   116a4:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   116a8:	2b00      	cmp	r3, #0
   116aa:	d03d      	beq.n	11728 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   116ac:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   116b0:	a802      	add	r0, sp, #8
   116b2:	f00a fa0f 	bl	1bad4 <z_impl_k_sem_take>
	__asm__ volatile(
   116b6:	f04f 0320 	mov.w	r3, #32
   116ba:	f3ef 8b11 	mrs	fp, BASEPRI
   116be:	f383 8811 	msr	BASEPRI, r3
   116c2:	f3bf 8f6f 	isb	sy
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   116c6:	2000      	movs	r0, #0
   116c8:	4b21      	ldr	r3, [pc, #132]	; (11750 <bsd_os_timedwait+0x124>)
   116ca:	681a      	ldr	r2, [r3, #0]
   116cc:	b152      	cbz	r2, 116e4 <bsd_os_timedwait+0xb8>
   116ce:	4552      	cmp	r2, sl
   116d0:	d139      	bne.n	11746 <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   116d2:	9901      	ldr	r1, [sp, #4]
   116d4:	bb88      	cbnz	r0, 1173a <bsd_os_timedwait+0x10e>
   116d6:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   116d8:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   116da:	4290      	cmp	r0, r2
   116dc:	d100      	bne.n	116e0 <bsd_os_timedwait+0xb4>
	list->tail = node;
   116de:	6059      	str	r1, [r3, #4]
	parent->next = child;
   116e0:	2300      	movs	r3, #0
   116e2:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   116e4:	f00a f9c4 	bl	1ba70 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   116e8:	f7ff ff5c 	bl	115a4 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   116ec:	f8d9 3000 	ldr.w	r3, [r9]
   116f0:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   116f2:	f38b 8811 	msr	BASEPRI, fp
   116f6:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   116fa:	f8d8 9000 	ldr.w	r9, [r8]
   116fe:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   11702:	d011      	beq.n	11728 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   11704:	f00d fa45 	bl	1eb92 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   11708:	eb16 0209 	adds.w	r2, r6, r9
   1170c:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   11710:	1a14      	subs	r4, r2, r0
   11712:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   11716:	2c00      	cmp	r4, #0
   11718:	f175 0300 	sbcs.w	r3, r5, #0
   1171c:	bfb8      	it	lt
   1171e:	2400      	movlt	r4, #0
   11720:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   11724:	2c00      	cmp	r4, #0
   11726:	d08f      	beq.n	11648 <bsd_os_timedwait+0x1c>
	return 0;
   11728:	2000      	movs	r0, #0
}
   1172a:	b009      	add	sp, #36	; 0x24
   1172c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11730:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   11734:	f8c3 a004 	str.w	sl, [r3, #4]
   11738:	e7af      	b.n	1169a <bsd_os_timedwait+0x6e>
	parent->next = child;
   1173a:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1173c:	6859      	ldr	r1, [r3, #4]
   1173e:	4291      	cmp	r1, r2
	list->tail = node;
   11740:	bf08      	it	eq
   11742:	6058      	streq	r0, [r3, #4]
   11744:	e7cc      	b.n	116e0 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11746:	4610      	mov	r0, r2
   11748:	6812      	ldr	r2, [r2, #0]
   1174a:	e7bf      	b.n	116cc <bsd_os_timedwait+0xa0>
   1174c:	20020378 	.word	0x20020378
   11750:	2002037c 	.word	0x2002037c

00011754 <bsd_os_errno_set>:
	switch (err_code) {
   11754:	282d      	cmp	r0, #45	; 0x2d
{
   11756:	b510      	push	{r4, lr}
   11758:	4604      	mov	r4, r0
	switch (err_code) {
   1175a:	d00c      	beq.n	11776 <bsd_os_errno_set+0x22>
   1175c:	dc38      	bgt.n	117d0 <bsd_os_errno_set+0x7c>
   1175e:	280e      	cmp	r0, #14
   11760:	d009      	beq.n	11776 <bsd_os_errno_set+0x22>
   11762:	dc11      	bgt.n	11788 <bsd_os_errno_set+0x34>
   11764:	2808      	cmp	r0, #8
   11766:	d006      	beq.n	11776 <bsd_os_errno_set+0x22>
   11768:	dc09      	bgt.n	1177e <bsd_os_errno_set+0x2a>
   1176a:	2802      	cmp	r0, #2
   1176c:	d003      	beq.n	11776 <bsd_os_errno_set+0x22>
   1176e:	2805      	cmp	r0, #5
   11770:	d001      	beq.n	11776 <bsd_os_errno_set+0x22>
   11772:	2801      	cmp	r0, #1
   11774:	d119      	bne.n	117aa <bsd_os_errno_set+0x56>
		errno = ETIMEDOUT;
   11776:	f00c f9cf 	bl	1db18 <z_errno>
   1177a:	6004      	str	r4, [r0, #0]
}
   1177c:	bd10      	pop	{r4, pc}
	switch (err_code) {
   1177e:	280c      	cmp	r0, #12
   11780:	d0f9      	beq.n	11776 <bsd_os_errno_set+0x22>
   11782:	dc57      	bgt.n	11834 <bsd_os_errno_set+0xe0>
   11784:	2809      	cmp	r0, #9
   11786:	e7f5      	b.n	11774 <bsd_os_errno_set+0x20>
   11788:	2828      	cmp	r0, #40	; 0x28
   1178a:	f000 8083 	beq.w	11894 <bsd_os_errno_set+0x140>
   1178e:	dc05      	bgt.n	1179c <bsd_os_errno_set+0x48>
   11790:	2818      	cmp	r0, #24
   11792:	d0f0      	beq.n	11776 <bsd_os_errno_set+0x22>
   11794:	2823      	cmp	r0, #35	; 0x23
   11796:	d052      	beq.n	1183e <bsd_os_errno_set+0xea>
   11798:	2816      	cmp	r0, #22
   1179a:	e7eb      	b.n	11774 <bsd_os_errno_set+0x20>
   1179c:	282a      	cmp	r0, #42	; 0x2a
   1179e:	d0ea      	beq.n	11776 <bsd_os_errno_set+0x22>
   117a0:	db51      	blt.n	11846 <bsd_os_errno_set+0xf2>
   117a2:	282b      	cmp	r0, #43	; 0x2b
   117a4:	d0e7      	beq.n	11776 <bsd_os_errno_set+0x22>
   117a6:	282c      	cmp	r0, #44	; 0x2c
   117a8:	d051      	beq.n	1184e <bsd_os_errno_set+0xfa>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   117aa:	2301      	movs	r3, #1
   117ac:	f04f 0200 	mov.w	r2, #0
   117b0:	493a      	ldr	r1, [pc, #232]	; (1189c <bsd_os_errno_set+0x148>)
   117b2:	f363 0207 	bfi	r2, r3, #0, #8
   117b6:	4b3a      	ldr	r3, [pc, #232]	; (118a0 <bsd_os_errno_set+0x14c>)
   117b8:	483a      	ldr	r0, [pc, #232]	; (118a4 <bsd_os_errno_set+0x150>)
   117ba:	1a5b      	subs	r3, r3, r1
   117bc:	08db      	lsrs	r3, r3, #3
   117be:	f363 128f 	bfi	r2, r3, #6, #10
   117c2:	4621      	mov	r1, r4
   117c4:	f00b f8ac 	bl	1c920 <log_1>
		errno = 0xBAADBAAD;
   117c8:	f00c f9a6 	bl	1db18 <z_errno>
   117cc:	4b36      	ldr	r3, [pc, #216]	; (118a8 <bsd_os_errno_set+0x154>)
   117ce:	e034      	b.n	1183a <bsd_os_errno_set+0xe6>
	switch (err_code) {
   117d0:	283c      	cmp	r0, #60	; 0x3c
   117d2:	d0d0      	beq.n	11776 <bsd_os_errno_set+0x22>
   117d4:	dc15      	bgt.n	11802 <bsd_os_errno_set+0xae>
   117d6:	2833      	cmp	r0, #51	; 0x33
   117d8:	d0cd      	beq.n	11776 <bsd_os_errno_set+0x22>
   117da:	dc05      	bgt.n	117e8 <bsd_os_errno_set+0x94>
   117dc:	2830      	cmp	r0, #48	; 0x30
   117de:	d0ca      	beq.n	11776 <bsd_os_errno_set+0x22>
   117e0:	2832      	cmp	r0, #50	; 0x32
   117e2:	d038      	beq.n	11856 <bsd_os_errno_set+0x102>
   117e4:	282f      	cmp	r0, #47	; 0x2f
   117e6:	e7c5      	b.n	11774 <bsd_os_errno_set+0x20>
   117e8:	2836      	cmp	r0, #54	; 0x36
   117ea:	d0c4      	beq.n	11776 <bsd_os_errno_set+0x22>
   117ec:	dc01      	bgt.n	117f2 <bsd_os_errno_set+0x9e>
   117ee:	2834      	cmp	r0, #52	; 0x34
   117f0:	e7c0      	b.n	11774 <bsd_os_errno_set+0x20>
   117f2:	2838      	cmp	r0, #56	; 0x38
   117f4:	d0bf      	beq.n	11776 <bsd_os_errno_set+0x22>
   117f6:	2839      	cmp	r0, #57	; 0x39
   117f8:	d1d7      	bne.n	117aa <bsd_os_errno_set+0x56>
		errno = ENOTCONN;
   117fa:	f00c f98d 	bl	1db18 <z_errno>
   117fe:	2339      	movs	r3, #57	; 0x39
   11800:	e01b      	b.n	1183a <bsd_os_errno_set+0xe6>
	switch (err_code) {
   11802:	287d      	cmp	r0, #125	; 0x7d
   11804:	d033      	beq.n	1186e <bsd_os_errno_set+0x11a>
   11806:	dc09      	bgt.n	1181c <bsd_os_errno_set+0xc8>
   11808:	2870      	cmp	r0, #112	; 0x70
   1180a:	d028      	beq.n	1185e <bsd_os_errno_set+0x10a>
   1180c:	2873      	cmp	r0, #115	; 0x73
   1180e:	d02a      	beq.n	11866 <bsd_os_errno_set+0x112>
   11810:	2869      	cmp	r0, #105	; 0x69
   11812:	d1ca      	bne.n	117aa <bsd_os_errno_set+0x56>
		errno = ENOBUFS;
   11814:	f00c f980 	bl	1db18 <z_errno>
   11818:	2337      	movs	r3, #55	; 0x37
   1181a:	e00e      	b.n	1183a <bsd_os_errno_set+0xe6>
	switch (err_code) {
   1181c:	287f      	cmp	r0, #127	; 0x7f
   1181e:	d02f      	beq.n	11880 <bsd_os_errno_set+0x12c>
   11820:	db29      	blt.n	11876 <bsd_os_errno_set+0x122>
   11822:	2880      	cmp	r0, #128	; 0x80
   11824:	d031      	beq.n	1188a <bsd_os_errno_set+0x136>
   11826:	2881      	cmp	r0, #129	; 0x81
   11828:	d1bf      	bne.n	117aa <bsd_os_errno_set+0x56>
		errno = EKEYREJECTED;
   1182a:	f00c f975 	bl	1db18 <z_errno>
   1182e:	f240 73d4 	movw	r3, #2004	; 0x7d4
   11832:	e002      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = EACCES;
   11834:	f00c f970 	bl	1db18 <z_errno>
   11838:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   1183a:	6003      	str	r3, [r0, #0]
}
   1183c:	e79e      	b.n	1177c <bsd_os_errno_set+0x28>
		errno = EAGAIN;
   1183e:	f00c f96b 	bl	1db18 <z_errno>
   11842:	230b      	movs	r3, #11
   11844:	e7f9      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = EPROTOTYPE;
   11846:	f00c f967 	bl	1db18 <z_errno>
   1184a:	2329      	movs	r3, #41	; 0x29
   1184c:	e7f5      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = ESOCKTNOSUPPORT;
   1184e:	f00c f963 	bl	1db18 <z_errno>
   11852:	232c      	movs	r3, #44	; 0x2c
   11854:	e7f1      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = ENETDOWN;
   11856:	f00c f95f 	bl	1db18 <z_errno>
   1185a:	233e      	movs	r3, #62	; 0x3e
   1185c:	e7ed      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = EHOSTDOWN;
   1185e:	f00c f95b 	bl	1db18 <z_errno>
   11862:	2343      	movs	r3, #67	; 0x43
   11864:	e7e9      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = EINPROGRESS;
   11866:	f00c f957 	bl	1db18 <z_errno>
   1186a:	2344      	movs	r3, #68	; 0x44
   1186c:	e7e5      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = ECANCELED;
   1186e:	f00c f953 	bl	1db18 <z_errno>
   11872:	2348      	movs	r3, #72	; 0x48
   11874:	e7e1      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = ENOKEY;
   11876:	f00c f94f 	bl	1db18 <z_errno>
   1187a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1187e:	e7dc      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = EKEYEXPIRED;
   11880:	f00c f94a 	bl	1db18 <z_errno>
   11884:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11888:	e7d7      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = EKEYREVOKED;
   1188a:	f00c f945 	bl	1db18 <z_errno>
   1188e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   11892:	e7d2      	b.n	1183a <bsd_os_errno_set+0xe6>
		errno = EMSGSIZE;
   11894:	f00c f940 	bl	1db18 <z_errno>
   11898:	2324      	movs	r3, #36	; 0x24
   1189a:	e7ce      	b.n	1183a <bsd_os_errno_set+0xe6>
   1189c:	0001f10c 	.word	0x0001f10c
   118a0:	0001f12c 	.word	0x0001f12c
   118a4:	000208c1 	.word	0x000208c1
   118a8:	baadbaad 	.word	0xbaadbaad

000118ac <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   118ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   118b0:	4b01      	ldr	r3, [pc, #4]	; (118b8 <bsd_os_application_irq_set+0xc>)
   118b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   118b6:	4770      	bx	lr
   118b8:	e000e100 	.word	0xe000e100

000118bc <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   118bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   118c0:	4b01      	ldr	r3, [pc, #4]	; (118c8 <bsd_os_application_irq_clear+0xc>)
   118c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   118c6:	4770      	bx	lr
   118c8:	e000e100 	.word	0xe000e100

000118cc <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   118cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   118d0:	4b01      	ldr	r3, [pc, #4]	; (118d8 <bsd_os_trace_irq_set+0xc>)
   118d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   118d6:	4770      	bx	lr
   118d8:	e000e100 	.word	0xe000e100

000118dc <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   118dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   118e0:	4b01      	ldr	r3, [pc, #4]	; (118e8 <bsd_os_trace_irq_clear+0xc>)
   118e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   118e6:	4770      	bx	lr
   118e8:	e000e100 	.word	0xe000e100

000118ec <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   118ec:	b500      	push	{lr}
   118ee:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160_pca10090.dts". */
	const nrfx_uarte_config_t config = {
   118f0:	2218      	movs	r2, #24
   118f2:	2100      	movs	r1, #0
   118f4:	a802      	add	r0, sp, #8
   118f6:	f00b fda6 	bl	1d446 <memset>
   118fa:	2301      	movs	r3, #1
   118fc:	9301      	str	r3, [sp, #4]
   118fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11902:	e9cd 3303 	strd	r3, r3, [sp, #12]
   11906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1190a:	9306      	str	r3, [sp, #24]
   1190c:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   1190e:	2200      	movs	r2, #0
   11910:	a901      	add	r1, sp, #4
   11912:	4804      	ldr	r0, [pc, #16]	; (11924 <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   11914:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   11918:	f009 f8ee 	bl	1aaf8 <nrfx_uarte_init>
#endif
}
   1191c:	b009      	add	sp, #36	; 0x24
   1191e:	f85d fb04 	ldr.w	pc, [sp], #4
   11922:	bf00      	nop
   11924:	0001f344 	.word	0x0001f344

00011928 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   11928:	b508      	push	{r3, lr}
	list->head = NULL;
   1192a:	2300      	movs	r3, #0
   1192c:	4a08      	ldr	r2, [pc, #32]	; (11950 <bsd_os_init+0x28>)
	list->tail = NULL;
   1192e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11932:	4a08      	ldr	r2, [pc, #32]	; (11954 <bsd_os_init+0x2c>)
   11934:	e8d2 1fef 	ldaex	r1, [r2]
   11938:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1193c:	2800      	cmp	r0, #0
   1193e:	d1f9      	bne.n	11934 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   11940:	f00c f915 	bl	1db6e <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   11944:	f7ff ffd2 	bl	118ec <trace_uart_init>
	trace_task_create();
}
   11948:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   1194c:	f00c b904 	b.w	1db58 <trace_task_create>
   11950:	2002037c 	.word	0x2002037c
   11954:	20020378 	.word	0x20020378

00011958 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   11958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1195c:	4607      	mov	r7, r0
   1195e:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	u32_t remaining_bytes = len;
   11960:	460c      	mov	r4, r1

	while (remaining_bytes) {
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		u32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11962:	f8df 8024 	ldr.w	r8, [pc, #36]	; 11988 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   11966:	b914      	cbnz	r4, 1196e <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   11968:	4620      	mov	r0, r4
   1196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		u8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   1196e:	2cff      	cmp	r4, #255	; 0xff
   11970:	4626      	mov	r6, r4
   11972:	bf28      	it	cs
   11974:	26ff      	movcs	r6, #255	; 0xff
		u32_t idx = len - remaining_bytes;
   11976:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   11978:	4632      	mov	r2, r6
   1197a:	4439      	add	r1, r7
   1197c:	4640      	mov	r0, r8
   1197e:	f009 f94f 	bl	1ac20 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   11982:	1ba4      	subs	r4, r4, r6
   11984:	e7ef      	b.n	11966 <bsd_os_trace_put+0xe>
   11986:	bf00      	nop
   11988:	0001f344 	.word	0x0001f344

0001198c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1198c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   11990:	d03c      	beq.n	11a0c <z_to_nrf_optname+0x80>
   11992:	dc04      	bgt.n	1199e <z_to_nrf_optname+0x12>
   11994:	2801      	cmp	r0, #1
   11996:	d044      	beq.n	11a22 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   11998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   1199c:	4770      	bx	lr
	switch (z_in_level) {
   1199e:	f240 2302 	movw	r3, #514	; 0x202
   119a2:	4298      	cmp	r0, r3
   119a4:	d052      	beq.n	11a4c <z_to_nrf_optname+0xc0>
   119a6:	f240 2303 	movw	r3, #515	; 0x203
   119aa:	4298      	cmp	r0, r3
   119ac:	d1f4      	bne.n	11998 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   119ae:	3901      	subs	r1, #1
   119b0:	2913      	cmp	r1, #19
   119b2:	d8f1      	bhi.n	11998 <z_to_nrf_optname+0xc>
   119b4:	a301      	add	r3, pc, #4	; (adr r3, 119bc <z_to_nrf_optname+0x30>)
   119b6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   119ba:	bf00      	nop
   119bc:	00011a59 	.word	0x00011a59
   119c0:	00011a1d 	.word	0x00011a1d
   119c4:	00011a3d 	.word	0x00011a3d
   119c8:	00011a2f 	.word	0x00011a2f
   119cc:	00011a41 	.word	0x00011a41
   119d0:	00011a45 	.word	0x00011a45
   119d4:	00011a49 	.word	0x00011a49
   119d8:	00011999 	.word	0x00011999
   119dc:	00011999 	.word	0x00011999
   119e0:	00011999 	.word	0x00011999
   119e4:	00011999 	.word	0x00011999
   119e8:	00011999 	.word	0x00011999
   119ec:	00011999 	.word	0x00011999
   119f0:	00011999 	.word	0x00011999
   119f4:	00011999 	.word	0x00011999
   119f8:	00011999 	.word	0x00011999
   119fc:	00011999 	.word	0x00011999
   11a00:	00011999 	.word	0x00011999
   11a04:	00011999 	.word	0x00011999
   11a08:	00011a33 	.word	0x00011a33
		switch (z_in_optname) {
   11a0c:	3901      	subs	r1, #1
   11a0e:	2905      	cmp	r1, #5
   11a10:	d8c2      	bhi.n	11998 <z_to_nrf_optname+0xc>
   11a12:	e8df f001 	tbb	[pc, r1]
   11a16:	1503      	.short	0x1503
   11a18:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   11a1c:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11a1e:	6013      	str	r3, [r2, #0]
   11a20:	e00a      	b.n	11a38 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   11a22:	2914      	cmp	r1, #20
   11a24:	d005      	beq.n	11a32 <z_to_nrf_optname+0xa6>
   11a26:	2919      	cmp	r1, #25
   11a28:	d005      	beq.n	11a36 <z_to_nrf_optname+0xaa>
   11a2a:	2904      	cmp	r1, #4
   11a2c:	d1b4      	bne.n	11998 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   11a2e:	2304      	movs	r3, #4
   11a30:	e7f5      	b.n	11a1e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   11a32:	2314      	movs	r3, #20
   11a34:	e7f3      	b.n	11a1e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   11a36:	6011      	str	r1, [r2, #0]
	int retval = 0;
   11a38:	2000      	movs	r0, #0
			break;
   11a3a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   11a3c:	2303      	movs	r3, #3
   11a3e:	e7ee      	b.n	11a1e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   11a40:	2305      	movs	r3, #5
   11a42:	e7ec      	b.n	11a1e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   11a44:	2306      	movs	r3, #6
   11a46:	e7ea      	b.n	11a1e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   11a48:	2307      	movs	r3, #7
   11a4a:	e7e8      	b.n	11a1e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   11a4c:	2902      	cmp	r1, #2
   11a4e:	d0e5      	beq.n	11a1c <z_to_nrf_optname+0x90>
   11a50:	2903      	cmp	r1, #3
   11a52:	d0f3      	beq.n	11a3c <z_to_nrf_optname+0xb0>
   11a54:	2901      	cmp	r1, #1
   11a56:	d19f      	bne.n	11998 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   11a58:	2301      	movs	r3, #1
   11a5a:	e7e0      	b.n	11a1e <z_to_nrf_optname+0x92>

00011a5c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11a5c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   11a5e:	4b03      	ldr	r3, [pc, #12]	; (11a6c <nrf91_socket_iface_init+0x10>)
   11a60:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   11a62:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   11a64:	4802      	ldr	r0, [pc, #8]	; (11a70 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   11a66:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   11a68:	f7fd bc00 	b.w	f26c <socket_offload_register>
   11a6c:	200203d4 	.word	0x200203d4
   11a70:	0001f34c 	.word	0x0001f34c

00011a74 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   11a74:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   11a76:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   11a78:	b118      	cbz	r0, 11a82 <callback_worker+0xe>
		data->callback(data->data);
   11a7a:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   11a7e:	300c      	adds	r0, #12
   11a80:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   11a82:	a901      	add	r1, sp, #4
   11a84:	4802      	ldr	r0, [pc, #8]	; (11a90 <callback_worker+0x1c>)
   11a86:	f009 fae1 	bl	1b04c <k_mem_slab_free>
}
   11a8a:	b003      	add	sp, #12
   11a8c:	f85d fb04 	ldr.w	pc, [sp], #4
   11a90:	2002c620 	.word	0x2002c620

00011a94 <open_socket>:
{
   11a94:	b508      	push	{r3, lr}
	return socket_ops->socket(family, type, proto);
   11a96:	4b09      	ldr	r3, [pc, #36]	; (11abc <open_socket+0x28>)
   11a98:	f240 2201 	movw	r2, #513	; 0x201
   11a9c:	681b      	ldr	r3, [r3, #0]
   11a9e:	2100      	movs	r1, #0
   11aa0:	681b      	ldr	r3, [r3, #0]
   11aa2:	2066      	movs	r0, #102	; 0x66
   11aa4:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   11aa6:	4b06      	ldr	r3, [pc, #24]	; (11ac0 <open_socket+0x2c>)
   11aa8:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   11aaa:	3001      	adds	r0, #1
   11aac:	d104      	bne.n	11ab8 <open_socket+0x24>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   11aae:	f009 f939 	bl	1ad24 <z_impl_z_errno>
		return -errno;
   11ab2:	6800      	ldr	r0, [r0, #0]
   11ab4:	4240      	negs	r0, r0
}
   11ab6:	bd08      	pop	{r3, pc}
	return 0;
   11ab8:	2000      	movs	r0, #0
   11aba:	e7fc      	b.n	11ab6 <open_socket+0x22>
   11abc:	2002031c 	.word	0x2002031c
   11ac0:	200203d8 	.word	0x200203d8

00011ac4 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   11ac4:	b530      	push	{r4, r5, lr}
   11ac6:	b087      	sub	sp, #28
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   11ac8:	f7ff ffe4 	bl	11a94 <open_socket>
	if (err) {
   11acc:	4d1a      	ldr	r5, [pc, #104]	; (11b38 <at_cmd_driver_init+0x74>)
   11ace:	4b1b      	ldr	r3, [pc, #108]	; (11b3c <at_cmd_driver_init+0x78>)
   11ad0:	4604      	mov	r4, r0
   11ad2:	1aed      	subs	r5, r5, r3
   11ad4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11ad8:	f04f 0200 	mov.w	r2, #0
	if (err) {
   11adc:	b158      	cbz	r0, 11af6 <at_cmd_driver_init+0x32>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   11ade:	2301      	movs	r3, #1
   11ae0:	4601      	mov	r1, r0
   11ae2:	f363 0207 	bfi	r2, r3, #0, #8
   11ae6:	4816      	ldr	r0, [pc, #88]	; (11b40 <at_cmd_driver_init+0x7c>)
   11ae8:	f365 128f 	bfi	r2, r5, #6, #10
			K_THREAD_STACK_SIZEOF(socket_thread_stack),
			socket_thread_fn,
			NULL, NULL, NULL,
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");
   11aec:	f00a ff18 	bl	1c920 <log_1>

	return 0;
}
   11af0:	4620      	mov	r0, r4
   11af2:	b007      	add	sp, #28
   11af4:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("Common AT socket created");
   11af6:	2304      	movs	r3, #4
   11af8:	f363 0207 	bfi	r2, r3, #0, #8
   11afc:	f365 128f 	bfi	r2, r5, #6, #10
   11b00:	4910      	ldr	r1, [pc, #64]	; (11b44 <at_cmd_driver_init+0x80>)
   11b02:	4811      	ldr	r0, [pc, #68]	; (11b48 <at_cmd_driver_init+0x84>)
   11b04:	f00a ff0c 	bl	1c920 <log_1>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11b08:	230a      	movs	r3, #10
   11b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11b0e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   11b12:	490e      	ldr	r1, [pc, #56]	; (11b4c <at_cmd_driver_init+0x88>)
   11b14:	4b0e      	ldr	r3, [pc, #56]	; (11b50 <at_cmd_driver_init+0x8c>)
   11b16:	e9cd 4404 	strd	r4, r4, [sp, #16]
   11b1a:	e9cd 4400 	strd	r4, r4, [sp]
   11b1e:	480d      	ldr	r0, [pc, #52]	; (11b54 <at_cmd_driver_init+0x90>)
   11b20:	f00a f868 	bl	1bbf4 <z_impl_k_thread_create>
	LOG_DBG("Common AT socket processing thread created");
   11b24:	f04f 0200 	mov.w	r2, #0
   11b28:	2304      	movs	r3, #4
   11b2a:	f363 0207 	bfi	r2, r3, #0, #8
   11b2e:	f365 128f 	bfi	r2, r5, #6, #10
   11b32:	4904      	ldr	r1, [pc, #16]	; (11b44 <at_cmd_driver_init+0x80>)
   11b34:	4808      	ldr	r0, [pc, #32]	; (11b58 <at_cmd_driver_init+0x94>)
   11b36:	e7d9      	b.n	11aec <at_cmd_driver_init+0x28>
   11b38:	0001f114 	.word	0x0001f114
   11b3c:	0001f10c 	.word	0x0001f10c
   11b40:	00020947 	.word	0x00020947
   11b44:	00020934 	.word	0x00020934
   11b48:	00020969 	.word	0x00020969
   11b4c:	20026d88 	.word	0x20026d88
   11b50:	00011b5d 	.word	0x00011b5d
   11b54:	200203ec 	.word	0x200203ec
   11b58:	00020986 	.word	0x00020986

00011b5c <socket_thread_fn>:
	LOG_DBG("AT socket thread started");
   11b5c:	2304      	movs	r3, #4
   11b5e:	f04f 0200 	mov.w	r2, #0
{
   11b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_DBG("AT socket thread started");
   11b66:	f363 0207 	bfi	r2, r3, #0, #8
   11b6a:	499b      	ldr	r1, [pc, #620]	; (11dd8 <socket_thread_fn+0x27c>)
   11b6c:	4b9b      	ldr	r3, [pc, #620]	; (11ddc <socket_thread_fn+0x280>)
{
   11b6e:	b087      	sub	sp, #28
	LOG_DBG("AT socket thread started");
   11b70:	1a5b      	subs	r3, r3, r1
   11b72:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
   11b76:	f36b 128f 	bfi	r2, fp, #6, #10
   11b7a:	4999      	ldr	r1, [pc, #612]	; (11de0 <socket_thread_fn+0x284>)
   11b7c:	4899      	ldr	r0, [pc, #612]	; (11de4 <socket_thread_fn+0x288>)
   11b7e:	f00a fecf 	bl	1c920 <log_1>
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   11b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11b86:	a903      	add	r1, sp, #12
   11b88:	4897      	ldr	r0, [pc, #604]	; (11de8 <socket_thread_fn+0x28c>)
   11b8a:	f009 fa33 	bl	1aff4 <k_mem_slab_alloc>
		ret.code  = 0;
   11b8e:	2300      	movs	r3, #0
	return socket_ops->recv(sock, buf, max_len, flags);
   11b90:	4c96      	ldr	r4, [pc, #600]	; (11dec <socket_thread_fn+0x290>)
		item->callback = NULL;
   11b92:	9903      	ldr	r1, [sp, #12]
   11b94:	6822      	ldr	r2, [r4, #0]
   11b96:	4896      	ldr	r0, [pc, #600]	; (11df0 <socket_thread_fn+0x294>)
   11b98:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
   11b9c:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
   11ba0:	310c      	adds	r1, #12
		ret.code  = 0;
   11ba2:	9304      	str	r3, [sp, #16]
		ret.state = AT_CMD_OK;
   11ba4:	f88d 3014 	strb.w	r3, [sp, #20]
   11ba8:	f640 228c 	movw	r2, #2700	; 0xa8c
   11bac:	6800      	ldr	r0, [r0, #0]
   11bae:	47d0      	blx	sl
		if (bytes_read < 0) {
   11bb0:	1e01      	subs	r1, r0, #0
   11bb2:	da5b      	bge.n	11c6c <socket_thread_fn+0x110>
			LOG_ERR("AT socket recv failed with err %d",
   11bb4:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   11bb8:	f043 0301 	orr.w	r3, r3, #1
   11bbc:	f363 0507 	bfi	r5, r3, #0, #8
   11bc0:	f36b 158f 	bfi	r5, fp, #6, #10
   11bc4:	488b      	ldr	r0, [pc, #556]	; (11df4 <socket_thread_fn+0x298>)
   11bc6:	462a      	mov	r2, r5
   11bc8:	f00a feaa 	bl	1c920 <log_1>
	return socket_ops->close(sock);
   11bcc:	6823      	ldr	r3, [r4, #0]
   11bce:	4888      	ldr	r0, [pc, #544]	; (11df0 <socket_thread_fn+0x294>)
   11bd0:	685b      	ldr	r3, [r3, #4]
   11bd2:	6800      	ldr	r0, [r0, #0]
   11bd4:	4798      	blx	r3
			if ((close(common_socket_fd) == 0) &&
   11bd6:	2800      	cmp	r0, #0
   11bd8:	d131      	bne.n	11c3e <socket_thread_fn+0xe2>
			    (open_socket() == 0)) {
   11bda:	f7ff ff5b 	bl	11a94 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   11bde:	bb70      	cbnz	r0, 11c3e <socket_thread_fn+0xe2>
				LOG_INF("AT socket recovered");
   11be0:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   11be4:	f043 0303 	orr.w	r3, r3, #3
   11be8:	f363 0607 	bfi	r6, r3, #0, #8
   11bec:	f36b 168f 	bfi	r6, fp, #6, #10
   11bf0:	4631      	mov	r1, r6
   11bf2:	4881      	ldr	r0, [pc, #516]	; (11df8 <socket_thread_fn+0x29c>)
   11bf4:	f00a fe87 	bl	1c906 <log_0>
				ret.state = AT_CMD_ERROR;
   11bf8:	2301      	movs	r3, #1
   11bfa:	f88d 3014 	strb.w	r3, [sp, #20]
   11bfe:	f009 f891 	bl	1ad24 <z_impl_z_errno>
				ret.code  = -errno;
   11c02:	6803      	ldr	r3, [r0, #0]
   11c04:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   11c06:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   11c08:	9903      	ldr	r1, [sp, #12]
   11c0a:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   11c0e:	2b00      	cmp	r3, #0
   11c10:	f040 80b8 	bne.w	11d84 <socket_thread_fn+0x228>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   11c14:	a903      	add	r1, sp, #12
   11c16:	4874      	ldr	r0, [pc, #464]	; (11de8 <socket_thread_fn+0x28c>)
   11c18:	f009 fa18 	bl	1b04c <k_mem_slab_free>
	if (z_syscall_trap()) {
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
   11c1c:	4b77      	ldr	r3, [pc, #476]	; (11dfc <socket_thread_fn+0x2a0>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   11c1e:	689b      	ldr	r3, [r3, #8]
   11c20:	2b00      	cmp	r3, #0
   11c22:	d1ae      	bne.n	11b82 <socket_thread_fn+0x26>
   11c24:	f89d 2014 	ldrb.w	r2, [sp, #20]
   11c28:	2a04      	cmp	r2, #4
   11c2a:	d0aa      	beq.n	11b82 <socket_thread_fn+0x26>
			current_cmd_handler = NULL;
   11c2c:	4a74      	ldr	r2, [pc, #464]	; (11e00 <socket_thread_fn+0x2a4>)
   11c2e:	6013      	str	r3, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(q, data, timeout);
   11c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11c34:	a904      	add	r1, sp, #16
   11c36:	4873      	ldr	r0, [pc, #460]	; (11e04 <socket_thread_fn+0x2a8>)
   11c38:	f009 fad2 	bl	1b1e0 <z_impl_k_msgq_put>
   11c3c:	e7a1      	b.n	11b82 <socket_thread_fn+0x26>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   11c3e:	2301      	movs	r3, #1
   11c40:	f04f 0400 	mov.w	r4, #0
   11c44:	f363 0407 	bfi	r4, r3, #0, #8
   11c48:	f36b 148f 	bfi	r4, fp, #6, #10
   11c4c:	f009 f86a 	bl	1ad24 <z_impl_z_errno>
   11c50:	4622      	mov	r2, r4
   11c52:	6801      	ldr	r1, [r0, #0]
   11c54:	486c      	ldr	r0, [pc, #432]	; (11e08 <socket_thread_fn+0x2ac>)
   11c56:	f00a fe63 	bl	1c920 <log_1>
   11c5a:	4b64      	ldr	r3, [pc, #400]	; (11dec <socket_thread_fn+0x290>)
   11c5c:	4a64      	ldr	r2, [pc, #400]	; (11df0 <socket_thread_fn+0x294>)
   11c5e:	681b      	ldr	r3, [r3, #0]
   11c60:	6810      	ldr	r0, [r2, #0]
   11c62:	685b      	ldr	r3, [r3, #4]
   11c64:	4798      	blx	r3
}
   11c66:	b007      	add	sp, #28
   11c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   11c6c:	f640 238c 	movw	r3, #2700	; 0xa8c
   11c70:	4299      	cmp	r1, r3
   11c72:	d004      	beq.n	11c7e <socket_thread_fn+0x122>
			   item->data[bytes_read - 1] != '\0') {
   11c74:	9803      	ldr	r0, [sp, #12]
   11c76:	4401      	add	r1, r0
		} else if (bytes_read == sizeof(item->data) ||
   11c78:	7acb      	ldrb	r3, [r1, #11]
   11c7a:	9301      	str	r3, [sp, #4]
   11c7c:	b173      	cbz	r3, 11c9c <socket_thread_fn+0x140>
			LOG_ERR("AT message to large for reception buffer or "
   11c7e:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   11c82:	f043 0301 	orr.w	r3, r3, #1
   11c86:	f363 0707 	bfi	r7, r3, #0, #8
   11c8a:	f36b 178f 	bfi	r7, fp, #6, #10
   11c8e:	4639      	mov	r1, r7
   11c90:	485e      	ldr	r0, [pc, #376]	; (11e0c <socket_thread_fn+0x2b0>)
   11c92:	f00a fe38 	bl	1c906 <log_0>
			ret.code  = -ENOBUFS;
   11c96:	f06f 0336 	mvn.w	r3, #54	; 0x36
   11c9a:	e7b4      	b.n	11c06 <socket_thread_fn+0xaa>
		LOG_DBG("at_cmd_rx: %s", log_strdup(item->data));
   11c9c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   11ca0:	f043 0304 	orr.w	r3, r3, #4
   11ca4:	300c      	adds	r0, #12
   11ca6:	f363 0807 	bfi	r8, r3, #0, #8
   11caa:	f7fd f817 	bl	ecdc <log_strdup>
   11cae:	f36b 188f 	bfi	r8, fp, #6, #10
   11cb2:	4602      	mov	r2, r0
   11cb4:	4643      	mov	r3, r8
   11cb6:	494a      	ldr	r1, [pc, #296]	; (11de0 <socket_thread_fn+0x284>)
   11cb8:	4855      	ldr	r0, [pc, #340]	; (11e10 <socket_thread_fn+0x2b4>)
   11cba:	f00a fe45 	bl	1c948 <log_2>
	ret->state = AT_CMD_NOTIFICATION;
   11cbe:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   11cc0:	f8dd a00c 	ldr.w	sl, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11cc4:	4953      	ldr	r1, [pc, #332]	; (11e14 <socket_thread_fn+0x2b8>)
		payload_len = get_return_code(item->data, &ret);
   11cc6:	f10a 040c 	add.w	r4, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11cca:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   11ccc:	f88d 3014 	strb.w	r3, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   11cd0:	f00b faff 	bl	1d2d2 <strstr>
		if (tmpstr) {
   11cd4:	4603      	mov	r3, r0
   11cd6:	b120      	cbz	r0, 11ce2 <socket_thread_fn+0x186>
			ret->state = AT_CMD_OK;
   11cd8:	9a01      	ldr	r2, [sp, #4]
   11cda:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11cde:	9204      	str	r2, [sp, #16]
			break;
   11ce0:	e00e      	b.n	11d00 <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   11ce2:	494d      	ldr	r1, [pc, #308]	; (11e18 <socket_thread_fn+0x2bc>)
   11ce4:	4620      	mov	r0, r4
   11ce6:	f00b faf4 	bl	1d2d2 <strstr>
		if (tmpstr) {
   11cea:	9001      	str	r0, [sp, #4]
   11cec:	b328      	cbz	r0, 11d3a <socket_thread_fn+0x1de>
			ret->state = AT_CMD_ERROR_CMS;
   11cee:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11cf0:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   11cf4:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   11cf8:	f00b f9d6 	bl	1d0a8 <atoi>
   11cfc:	9b01      	ldr	r3, [sp, #4]
   11cfe:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   11d00:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   11d02:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   11d04:	3201      	adds	r2, #1
   11d06:	7019      	strb	r1, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   11d08:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11d0c:	2b04      	cmp	r3, #4
   11d0e:	d04f      	beq.n	11db0 <socket_thread_fn+0x254>
			if ((response_buf_len > 0) &&
   11d10:	f8df a124 	ldr.w	sl, [pc, #292]	; 11e38 <socket_thread_fn+0x2dc>
   11d14:	f8da 3000 	ldr.w	r3, [sl]
   11d18:	2b00      	cmp	r3, #0
   11d1a:	d052      	beq.n	11dc2 <socket_thread_fn+0x266>
			    (response_buf != NULL)) {
   11d1c:	4c3f      	ldr	r4, [pc, #252]	; (11e1c <socket_thread_fn+0x2c0>)
   11d1e:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   11d20:	2800      	cmp	r0, #0
   11d22:	d04e      	beq.n	11dc2 <socket_thread_fn+0x266>
				if (response_buf_len > payload_len) {
   11d24:	4293      	cmp	r3, r2
   11d26:	d91d      	bls.n	11d64 <socket_thread_fn+0x208>
					memcpy(response_buf, item->data,
   11d28:	9903      	ldr	r1, [sp, #12]
   11d2a:	310c      	adds	r1, #12
   11d2c:	f00b fb61 	bl	1d3f2 <memcpy>
				response_buf_len = 0;
   11d30:	2300      	movs	r3, #0
   11d32:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   11d36:	6023      	str	r3, [r4, #0]
				goto next;
   11d38:	e766      	b.n	11c08 <socket_thread_fn+0xac>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   11d3a:	4939      	ldr	r1, [pc, #228]	; (11e20 <socket_thread_fn+0x2c4>)
   11d3c:	4620      	mov	r0, r4
   11d3e:	f00b fac8 	bl	1d2d2 <strstr>
		if (tmpstr) {
   11d42:	9001      	str	r0, [sp, #4]
   11d44:	b108      	cbz	r0, 11d4a <socket_thread_fn+0x1ee>
			ret->state = AT_CMD_ERROR_CME;
   11d46:	2203      	movs	r2, #3
   11d48:	e7d2      	b.n	11cf0 <socket_thread_fn+0x194>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   11d4a:	4936      	ldr	r1, [pc, #216]	; (11e24 <socket_thread_fn+0x2c8>)
   11d4c:	4620      	mov	r0, r4
   11d4e:	f00b fac0 	bl	1d2d2 <strstr>
		if (tmpstr) {
   11d52:	4603      	mov	r3, r0
   11d54:	2800      	cmp	r0, #0
   11d56:	d039      	beq.n	11dcc <socket_thread_fn+0x270>
			ret->state = AT_CMD_ERROR;
   11d58:	2201      	movs	r2, #1
   11d5a:	f88d 2014 	strb.w	r2, [sp, #20]
			ret->code  = -ENOEXEC;
   11d5e:	f06f 0207 	mvn.w	r2, #7
   11d62:	e7bc      	b.n	11cde <socket_thread_fn+0x182>
					LOG_ERR("Response buffer not large "
   11d64:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   11d68:	f043 0301 	orr.w	r3, r3, #1
   11d6c:	f363 0907 	bfi	r9, r3, #0, #8
   11d70:	f36b 198f 	bfi	r9, fp, #6, #10
   11d74:	4649      	mov	r1, r9
   11d76:	482c      	ldr	r0, [pc, #176]	; (11e28 <socket_thread_fn+0x2cc>)
   11d78:	f00a fdc5 	bl	1c906 <log_0>
					ret.code  = -EMSGSIZE;
   11d7c:	f06f 0323 	mvn.w	r3, #35	; 0x23
   11d80:	9304      	str	r3, [sp, #16]
   11d82:	e7d5      	b.n	11d30 <socket_thread_fn+0x1d4>
   11d84:	4b29      	ldr	r3, [pc, #164]	; (11e2c <socket_thread_fn+0x2d0>)
   11d86:	2200      	movs	r2, #0
   11d88:	604b      	str	r3, [r1, #4]
   11d8a:	460b      	mov	r3, r1
   11d8c:	600a      	str	r2, [r1, #0]
   11d8e:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11d92:	e8d3 2fef 	ldaex	r2, [r3]
   11d96:	f042 0001 	orr.w	r0, r2, #1
   11d9a:	e8c3 0fe4 	stlex	r4, r0, [r3]
   11d9e:	2c00      	cmp	r4, #0
   11da0:	d1f7      	bne.n	11d92 <socket_thread_fn+0x236>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11da2:	07d3      	lsls	r3, r2, #31
   11da4:	f53f af3a 	bmi.w	11c1c <socket_thread_fn+0xc0>
		k_queue_append(&work_q->queue, work);
   11da8:	4821      	ldr	r0, [pc, #132]	; (11e30 <socket_thread_fn+0x2d4>)
   11daa:	f00c fcf0 	bl	1e78e <k_queue_append>
   11dae:	e735      	b.n	11c1c <socket_thread_fn+0xc0>
		if (payload_len == 0) {
   11db0:	2a00      	cmp	r2, #0
   11db2:	f43f af29 	beq.w	11c08 <socket_thread_fn+0xac>
			item->callback = notification_handler;
   11db6:	4b1f      	ldr	r3, [pc, #124]	; (11e34 <socket_thread_fn+0x2d8>)
			item->callback = current_cmd_handler;
   11db8:	681a      	ldr	r2, [r3, #0]
   11dba:	9b03      	ldr	r3, [sp, #12]
   11dbc:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   11dc0:	e722      	b.n	11c08 <socket_thread_fn+0xac>
		if (payload_len == 0) {
   11dc2:	2a00      	cmp	r2, #0
   11dc4:	f43f af20 	beq.w	11c08 <socket_thread_fn+0xac>
			item->callback = current_cmd_handler;
   11dc8:	4b0d      	ldr	r3, [pc, #52]	; (11e00 <socket_thread_fn+0x2a4>)
   11dca:	e7f5      	b.n	11db8 <socket_thread_fn+0x25c>
		new_len = strlen(buf) + 1;
   11dcc:	4620      	mov	r0, r4
   11dce:	f00b fad5 	bl	1d37c <strlen>
   11dd2:	1c42      	adds	r2, r0, #1
   11dd4:	e798      	b.n	11d08 <socket_thread_fn+0x1ac>
   11dd6:	bf00      	nop
   11dd8:	0001f10c 	.word	0x0001f10c
   11ddc:	0001f114 	.word	0x0001f114
   11de0:	000208fa 	.word	0x000208fa
   11de4:	00020a84 	.word	0x00020a84
   11de8:	2002c620 	.word	0x2002c620
   11dec:	2002031c 	.word	0x2002031c
   11df0:	200203d8 	.word	0x200203d8
   11df4:	00020aa1 	.word	0x00020aa1
   11df8:	00020ac3 	.word	0x00020ac3
   11dfc:	2002c670 	.word	0x2002c670
   11e00:	200203dc 	.word	0x200203dc
   11e04:	2002c6b0 	.word	0x2002c6b0
   11e08:	00020ad7 	.word	0x00020ad7
   11e0c:	00020b0e 	.word	0x00020b0e
   11e10:	00020b58 	.word	0x00020b58
   11e14:	0001ff8a 	.word	0x0001ff8a
   11e18:	00020b6a 	.word	0x00020b6a
   11e1c:	200203e4 	.word	0x200203e4
   11e20:	00020b76 	.word	0x00020b76
   11e24:	0001fd32 	.word	0x0001fd32
   11e28:	00020b82 	.word	0x00020b82
   11e2c:	00011a75 	.word	0x00011a75
   11e30:	20024d40 	.word	0x20024d40
   11e34:	200203e0 	.word	0x200203e0
   11e38:	200203e8 	.word	0x200203e8

00011e3c <at_write>:
{
   11e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11e40:	4680      	mov	r8, r0
   11e42:	460e      	mov	r6, r1
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11e44:	f04f 0500 	mov.w	r5, #0
	int bytes_to_send = strlen(cmd);
   11e48:	f00b fa98 	bl	1d37c <strlen>
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11e4c:	2304      	movs	r3, #4
   11e4e:	4c2f      	ldr	r4, [pc, #188]	; (11f0c <at_write+0xd0>)
   11e50:	f363 0507 	bfi	r5, r3, #0, #8
   11e54:	4b2e      	ldr	r3, [pc, #184]	; (11f10 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   11e56:	4607      	mov	r7, r0
	LOG_DBG("Sending command %s", log_strdup(cmd));
   11e58:	4640      	mov	r0, r8
   11e5a:	1ae4      	subs	r4, r4, r3
   11e5c:	f7fc ff3e 	bl	ecdc <log_strdup>
   11e60:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   11e64:	f364 158f 	bfi	r5, r4, #6, #10
   11e68:	462b      	mov	r3, r5
   11e6a:	4602      	mov	r2, r0
   11e6c:	4929      	ldr	r1, [pc, #164]	; (11f14 <at_write+0xd8>)
   11e6e:	482a      	ldr	r0, [pc, #168]	; (11f18 <at_write+0xdc>)
   11e70:	f00a fd6a 	bl	1c948 <log_2>
	return socket_ops->send(sock, buf, len, flags);
   11e74:	4b29      	ldr	r3, [pc, #164]	; (11f1c <at_write+0xe0>)
   11e76:	482a      	ldr	r0, [pc, #168]	; (11f20 <at_write+0xe4>)
   11e78:	681b      	ldr	r3, [r3, #0]
   11e7a:	463a      	mov	r2, r7
   11e7c:	6add      	ldr	r5, [r3, #44]	; 0x2c
   11e7e:	4641      	mov	r1, r8
   11e80:	2300      	movs	r3, #0
   11e82:	6800      	ldr	r0, [r0, #0]
   11e84:	47a8      	blx	r5
	if (bytes_sent == -1) {
   11e86:	1c43      	adds	r3, r0, #1
   11e88:	4605      	mov	r5, r0
   11e8a:	d11d      	bne.n	11ec8 <at_write+0x8c>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   11e8c:	2301      	movs	r3, #1
   11e8e:	f04f 0500 	mov.w	r5, #0
   11e92:	f363 0507 	bfi	r5, r3, #0, #8
   11e96:	f364 158f 	bfi	r5, r4, #6, #10
   11e9a:	f008 ff43 	bl	1ad24 <z_impl_z_errno>
   11e9e:	462a      	mov	r2, r5
   11ea0:	6801      	ldr	r1, [r0, #0]
   11ea2:	4820      	ldr	r0, [pc, #128]	; (11f24 <at_write+0xe8>)
   11ea4:	f00a fd3c 	bl	1c920 <log_1>
   11ea8:	f008 ff3c 	bl	1ad24 <z_impl_z_errno>
		ret.code  = -errno;
   11eac:	6803      	ldr	r3, [r0, #0]
   11eae:	425b      	negs	r3, r3
   11eb0:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   11eb2:	2301      	movs	r3, #1
   11eb4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (state) {
   11eb8:	b116      	cbz	r6, 11ec0 <at_write+0x84>
		*state = ret.state;
   11eba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11ebe:	7033      	strb	r3, [r6, #0]
}
   11ec0:	9800      	ldr	r0, [sp, #0]
   11ec2:	b002      	add	sp, #8
   11ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   11ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ecc:	4669      	mov	r1, sp
   11ece:	4816      	ldr	r0, [pc, #88]	; (11f28 <at_write+0xec>)
   11ed0:	f009 f9d8 	bl	1b284 <z_impl_k_msgq_get>
		LOG_DBG("Bytes sent: %d", bytes_sent);
   11ed4:	2204      	movs	r2, #4
   11ed6:	f04f 0300 	mov.w	r3, #0
   11eda:	f362 0307 	bfi	r3, r2, #0, #8
   11ede:	f364 138f 	bfi	r3, r4, #6, #10
   11ee2:	462a      	mov	r2, r5
   11ee4:	490b      	ldr	r1, [pc, #44]	; (11f14 <at_write+0xd8>)
   11ee6:	4811      	ldr	r0, [pc, #68]	; (11f2c <at_write+0xf0>)
   11ee8:	f00a fd2e 	bl	1c948 <log_2>
		if (bytes_sent != bytes_to_send) {
   11eec:	42af      	cmp	r7, r5
   11eee:	d0e3      	beq.n	11eb8 <at_write+0x7c>
			LOG_ERR("Bytes sent (%d) was not the "
   11ef0:	2201      	movs	r2, #1
   11ef2:	f04f 0300 	mov.w	r3, #0
   11ef6:	f362 0307 	bfi	r3, r2, #0, #8
   11efa:	f364 138f 	bfi	r3, r4, #6, #10
   11efe:	463a      	mov	r2, r7
   11f00:	4629      	mov	r1, r5
   11f02:	480b      	ldr	r0, [pc, #44]	; (11f30 <at_write+0xf4>)
   11f04:	f00a fd20 	bl	1c948 <log_2>
   11f08:	e7d6      	b.n	11eb8 <at_write+0x7c>
   11f0a:	bf00      	nop
   11f0c:	0001f114 	.word	0x0001f114
   11f10:	0001f10c 	.word	0x0001f10c
   11f14:	0002090b 	.word	0x0002090b
   11f18:	00020a05 	.word	0x00020a05
   11f1c:	2002031c 	.word	0x2002031c
   11f20:	200203d8 	.word	0x200203d8
   11f24:	00020a1c 	.word	0x00020a1c
   11f28:	2002c6b0 	.word	0x2002c6b0
   11f2c:	00020a3f 	.word	0x00020a3f
   11f30:	00020a52 	.word	0x00020a52

00011f34 <at_cmd_write>:
{
   11f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f38:	4605      	mov	r5, r0
   11f3a:	4688      	mov	r8, r1
   11f3c:	4617      	mov	r7, r2
   11f3e:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   11f40:	4c0a      	ldr	r4, [pc, #40]	; (11f6c <at_cmd_write+0x38>)
   11f42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11f46:	4620      	mov	r0, r4
   11f48:	f009 fdc4 	bl	1bad4 <z_impl_k_sem_take>
	response_buf     = buf;
   11f4c:	4b08      	ldr	r3, [pc, #32]	; (11f70 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   11f4e:	4631      	mov	r1, r6
	response_buf     = buf;
   11f50:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   11f54:	4b07      	ldr	r3, [pc, #28]	; (11f74 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   11f56:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   11f58:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   11f5a:	f7ff ff6f 	bl	11e3c <at_write>
   11f5e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   11f60:	4620      	mov	r0, r4
   11f62:	f009 fd8b 	bl	1ba7c <z_impl_k_sem_give>
}
   11f66:	4628      	mov	r0, r5
   11f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f6c:	2002c670 	.word	0x2002c670
   11f70:	200203e4 	.word	0x200203e4
   11f74:	200203e8 	.word	0x200203e8

00011f78 <at_cmd_set_notification_handler>:
	LOG_DBG("Setting notification handler to %p", handler);
   11f78:	2204      	movs	r2, #4
   11f7a:	f04f 0300 	mov.w	r3, #0
{
   11f7e:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Setting notification handler to %p", handler);
   11f80:	f362 0307 	bfi	r3, r2, #0, #8
   11f84:	4c13      	ldr	r4, [pc, #76]	; (11fd4 <at_cmd_set_notification_handler+0x5c>)
   11f86:	4a14      	ldr	r2, [pc, #80]	; (11fd8 <at_cmd_set_notification_handler+0x60>)
	if (notification_handler != NULL && handler != notification_handler) {
   11f88:	4d14      	ldr	r5, [pc, #80]	; (11fdc <at_cmd_set_notification_handler+0x64>)
	LOG_DBG("Setting notification handler to %p", handler);
   11f8a:	1aa4      	subs	r4, r4, r2
   11f8c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   11f90:	4602      	mov	r2, r0
   11f92:	4913      	ldr	r1, [pc, #76]	; (11fe0 <at_cmd_set_notification_handler+0x68>)
{
   11f94:	4606      	mov	r6, r0
	LOG_DBG("Setting notification handler to %p", handler);
   11f96:	f364 138f 	bfi	r3, r4, #6, #10
   11f9a:	4812      	ldr	r0, [pc, #72]	; (11fe4 <at_cmd_set_notification_handler+0x6c>)
   11f9c:	f00a fcd4 	bl	1c948 <log_2>
	if (notification_handler != NULL && handler != notification_handler) {
   11fa0:	6829      	ldr	r1, [r5, #0]
   11fa2:	b159      	cbz	r1, 11fbc <at_cmd_set_notification_handler+0x44>
   11fa4:	428e      	cmp	r6, r1
   11fa6:	d009      	beq.n	11fbc <at_cmd_set_notification_handler+0x44>
		LOG_WRN("Forgetting prior notification handler %p",
   11fa8:	f04f 0200 	mov.w	r2, #0
   11fac:	2302      	movs	r3, #2
   11fae:	f363 0207 	bfi	r2, r3, #0, #8
   11fb2:	f364 128f 	bfi	r2, r4, #6, #10
   11fb6:	480c      	ldr	r0, [pc, #48]	; (11fe8 <at_cmd_set_notification_handler+0x70>)
   11fb8:	f00a fcb2 	bl	1c920 <log_1>
	return z_impl_k_sem_take(sem, timeout);
   11fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11fc0:	480a      	ldr	r0, [pc, #40]	; (11fec <at_cmd_set_notification_handler+0x74>)
   11fc2:	f009 fd87 	bl	1bad4 <z_impl_k_sem_take>
	notification_handler = handler;
   11fc6:	602e      	str	r6, [r5, #0]
	z_impl_k_sem_give(sem);
   11fc8:	4808      	ldr	r0, [pc, #32]	; (11fec <at_cmd_set_notification_handler+0x74>)
}
   11fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11fce:	f009 bd55 	b.w	1ba7c <z_impl_k_sem_give>
   11fd2:	bf00      	nop
   11fd4:	0001f114 	.word	0x0001f114
   11fd8:	0001f10c 	.word	0x0001f10c
   11fdc:	200203e0 	.word	0x200203e0
   11fe0:	00020914 	.word	0x00020914
   11fe4:	000209b5 	.word	0x000209b5
   11fe8:	000209dc 	.word	0x000209dc
   11fec:	2002c670 	.word	0x2002c670

00011ff0 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11ff0:	4b0b      	ldr	r3, [pc, #44]	; (12020 <find_node+0x30>)
{
   11ff2:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   11ff4:	681b      	ldr	r3, [r3, #0]
   11ff6:	b153      	cbz	r3, 1200e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11ff8:	2500      	movs	r5, #0
   11ffa:	461c      	mov	r4, r3
   11ffc:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   11ffe:	6866      	ldr	r6, [r4, #4]
   12000:	428e      	cmp	r6, r1
   12002:	d106      	bne.n	12012 <find_node+0x22>
   12004:	68a6      	ldr	r6, [r4, #8]
   12006:	4296      	cmp	r6, r2
   12008:	d103      	bne.n	12012 <find_node+0x22>
			*prev_out = prev;
			return curr;
   1200a:	4623      	mov	r3, r4
			*prev_out = prev;
   1200c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1200e:	4618      	mov	r0, r3
   12010:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12012:	2b00      	cmp	r3, #0
   12014:	d0fb      	beq.n	1200e <find_node+0x1e>
   12016:	4625      	mov	r5, r4
   12018:	461c      	mov	r4, r3
   1201a:	681b      	ldr	r3, [r3, #0]
   1201c:	e7ef      	b.n	11ffe <find_node+0xe>
   1201e:	bf00      	nop
   12020:	2002049c 	.word	0x2002049c

00012024 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   12024:	b510      	push	{r4, lr}
	list->head = NULL;
   12026:	2400      	movs	r4, #0
   12028:	4b03      	ldr	r3, [pc, #12]	; (12038 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   1202a:	4804      	ldr	r0, [pc, #16]	; (1203c <module_init+0x18>)
	list->tail = NULL;
   1202c:	e9c3 4400 	strd	r4, r4, [r3]
   12030:	f7ff ffa2 	bl	11f78 <at_cmd_set_notification_handler>
	return 0;
}
   12034:	4620      	mov	r0, r4
   12036:	bd10      	pop	{r4, pc}
   12038:	2002049c 	.word	0x2002049c
   1203c:	00012041 	.word	0x00012041

00012040 <notif_dispatch>:
{
   12040:	b538      	push	{r3, r4, r5, lr}
   12042:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   12044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12048:	480a      	ldr	r0, [pc, #40]	; (12074 <notif_dispatch+0x34>)
   1204a:	f009 f979 	bl	1b340 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1204e:	4b0a      	ldr	r3, [pc, #40]	; (12078 <notif_dispatch+0x38>)
   12050:	681b      	ldr	r3, [r3, #0]
   12052:	b923      	cbnz	r3, 1205e <notif_dispatch+0x1e>
}
   12054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   12058:	4806      	ldr	r0, [pc, #24]	; (12074 <notif_dispatch+0x34>)
   1205a:	f009 b9e3 	b.w	1b424 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1205e:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   12060:	689a      	ldr	r2, [r3, #8]
   12062:	4629      	mov	r1, r5
   12064:	6858      	ldr	r0, [r3, #4]
   12066:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12068:	2c00      	cmp	r4, #0
   1206a:	d0f3      	beq.n	12054 <notif_dispatch+0x14>
   1206c:	4623      	mov	r3, r4
   1206e:	6824      	ldr	r4, [r4, #0]
   12070:	e7f6      	b.n	12060 <notif_dispatch+0x20>
   12072:	bf00      	nop
   12074:	2002c69c 	.word	0x2002c69c
   12078:	2002049c 	.word	0x2002049c

0001207c <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   1207c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1207e:	4606      	mov	r6, r0
	if (handler == NULL) {
   12080:	460c      	mov	r4, r1
   12082:	b999      	cbnz	r1, 120ac <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   12084:	2201      	movs	r2, #1
   12086:	f04f 0300 	mov.w	r3, #0
   1208a:	491f      	ldr	r1, [pc, #124]	; (12108 <at_notif_register_handler+0x8c>)
   1208c:	f362 0307 	bfi	r3, r2, #0, #8
   12090:	4a1e      	ldr	r2, [pc, #120]	; (1210c <at_notif_register_handler+0x90>)
   12092:	1a52      	subs	r2, r2, r1
   12094:	08d2      	lsrs	r2, r2, #3
   12096:	f362 138f 	bfi	r3, r2, #6, #10
   1209a:	4601      	mov	r1, r0
   1209c:	4622      	mov	r2, r4
   1209e:	481c      	ldr	r0, [pc, #112]	; (12110 <at_notif_register_handler+0x94>)
   120a0:	f00a fc52 	bl	1c948 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   120a4:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   120a8:	b002      	add	sp, #8
   120aa:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   120ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   120b0:	4818      	ldr	r0, [pc, #96]	; (12114 <at_notif_register_handler+0x98>)
   120b2:	f009 f945 	bl	1b340 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   120b6:	4622      	mov	r2, r4
   120b8:	4631      	mov	r1, r6
   120ba:	a801      	add	r0, sp, #4
   120bc:	f7ff ff98 	bl	11ff0 <find_node>
   120c0:	4605      	mov	r5, r0
   120c2:	b120      	cbz	r0, 120ce <at_notif_register_handler+0x52>
	z_impl_k_mutex_unlock(mutex);
   120c4:	4813      	ldr	r0, [pc, #76]	; (12114 <at_notif_register_handler+0x98>)
   120c6:	f009 f9ad 	bl	1b424 <z_impl_k_mutex_unlock>
	return 0;
   120ca:	2000      	movs	r0, #0
	return append_notif_handler(context, handler);
   120cc:	e7ec      	b.n	120a8 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   120ce:	200c      	movs	r0, #12
   120d0:	f009 f876 	bl	1b1c0 <k_malloc>
   120d4:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   120d6:	b928      	cbnz	r0, 120e4 <at_notif_register_handler+0x68>
   120d8:	480e      	ldr	r0, [pc, #56]	; (12114 <at_notif_register_handler+0x98>)
   120da:	f009 f9a3 	bl	1b424 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   120de:	f06f 0036 	mvn.w	r0, #54	; 0x36
   120e2:	e7e1      	b.n	120a8 <at_notif_register_handler+0x2c>
	memset(to_ins, 0, sizeof(struct notif_handler));
   120e4:	220c      	movs	r2, #12
   120e6:	4629      	mov	r1, r5
   120e8:	f00b f9ad 	bl	1d446 <memset>
	to_ins->ctx     = ctx;
   120ec:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   120ee:	4a0a      	ldr	r2, [pc, #40]	; (12118 <at_notif_register_handler+0x9c>)
	parent->next = child;
   120f0:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   120f2:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   120f4:	e9c3 6401 	strd	r6, r4, [r3, #4]
   120f8:	b911      	cbnz	r1, 12100 <at_notif_register_handler+0x84>
	list->head = node;
   120fa:	e9c2 3300 	strd	r3, r3, [r2]
   120fe:	e7e1      	b.n	120c4 <at_notif_register_handler+0x48>
	parent->next = child;
   12100:	600b      	str	r3, [r1, #0]
	list->tail = node;
   12102:	6053      	str	r3, [r2, #4]
   12104:	e7de      	b.n	120c4 <at_notif_register_handler+0x48>
   12106:	bf00      	nop
   12108:	0001f10c 	.word	0x0001f10c
   1210c:	0001f124 	.word	0x0001f124
   12110:	00020bd0 	.word	0x00020bd0
   12114:	2002c69c 	.word	0x2002c69c
   12118:	2002049c 	.word	0x2002049c

0001211c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   1211c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1211e:	4605      	mov	r5, r0
	if (handler == NULL) {
   12120:	460c      	mov	r4, r1
   12122:	b999      	cbnz	r1, 1214c <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   12124:	2201      	movs	r2, #1
   12126:	f04f 0300 	mov.w	r3, #0
   1212a:	4922      	ldr	r1, [pc, #136]	; (121b4 <at_notif_deregister_handler+0x98>)
   1212c:	f362 0307 	bfi	r3, r2, #0, #8
   12130:	4a21      	ldr	r2, [pc, #132]	; (121b8 <at_notif_deregister_handler+0x9c>)
   12132:	1a89      	subs	r1, r1, r2
   12134:	08c9      	lsrs	r1, r1, #3
   12136:	f361 138f 	bfi	r3, r1, #6, #10
   1213a:	4622      	mov	r2, r4
   1213c:	4601      	mov	r1, r0
   1213e:	481f      	ldr	r0, [pc, #124]	; (121bc <at_notif_deregister_handler+0xa0>)
   12140:	f00a fc02 	bl	1c948 <log_2>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   12144:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   12148:	b003      	add	sp, #12
   1214a:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   1214c:	2300      	movs	r3, #0
   1214e:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   12150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12154:	481a      	ldr	r0, [pc, #104]	; (121c0 <at_notif_deregister_handler+0xa4>)
   12156:	f009 f8f3 	bl	1b340 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   1215a:	4622      	mov	r2, r4
   1215c:	4629      	mov	r1, r5
   1215e:	a801      	add	r0, sp, #4
   12160:	f7ff ff46 	bl	11ff0 <find_node>
	if (curr == NULL) {
   12164:	b990      	cbnz	r0, 1218c <at_notif_deregister_handler+0x70>
		LOG_WRN("Handler not registered. Nothing to do");
   12166:	2302      	movs	r3, #2
   12168:	f04f 0100 	mov.w	r1, #0
   1216c:	4a12      	ldr	r2, [pc, #72]	; (121b8 <at_notif_deregister_handler+0x9c>)
   1216e:	f363 0107 	bfi	r1, r3, #0, #8
   12172:	4b10      	ldr	r3, [pc, #64]	; (121b4 <at_notif_deregister_handler+0x98>)
   12174:	4813      	ldr	r0, [pc, #76]	; (121c4 <at_notif_deregister_handler+0xa8>)
   12176:	1a9b      	subs	r3, r3, r2
   12178:	08db      	lsrs	r3, r3, #3
   1217a:	f363 118f 	bfi	r1, r3, #6, #10
   1217e:	f00a fbc2 	bl	1c906 <log_0>
	z_impl_k_mutex_unlock(mutex);
   12182:	480f      	ldr	r0, [pc, #60]	; (121c0 <at_notif_deregister_handler+0xa4>)
   12184:	f009 f94e 	bl	1b424 <z_impl_k_mutex_unlock>
	return remove_notif_handler(context, handler);
   12188:	2000      	movs	r0, #0
   1218a:	e7dd      	b.n	12148 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   1218c:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   1218e:	6801      	ldr	r1, [r0, #0]
   12190:	4b0d      	ldr	r3, [pc, #52]	; (121c8 <at_notif_deregister_handler+0xac>)
   12192:	b94a      	cbnz	r2, 121a8 <at_notif_deregister_handler+0x8c>
   12194:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12196:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   12198:	4290      	cmp	r0, r2
   1219a:	d100      	bne.n	1219e <at_notif_deregister_handler+0x82>
	list->tail = node;
   1219c:	6059      	str	r1, [r3, #4]
	parent->next = child;
   1219e:	2300      	movs	r3, #0
   121a0:	6003      	str	r3, [r0, #0]
	k_free(curr);
   121a2:	f00c fa78 	bl	1e696 <k_free>
   121a6:	e7ec      	b.n	12182 <at_notif_deregister_handler+0x66>
   121a8:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   121aa:	6859      	ldr	r1, [r3, #4]
   121ac:	4288      	cmp	r0, r1
	list->tail = node;
   121ae:	bf08      	it	eq
   121b0:	605a      	streq	r2, [r3, #4]
   121b2:	e7f4      	b.n	1219e <at_notif_deregister_handler+0x82>
   121b4:	0001f124 	.word	0x0001f124
   121b8:	0001f10c 	.word	0x0001f10c
   121bc:	00020bd0 	.word	0x00020bd0
   121c0:	2002c69c 	.word	0x2002c69c
   121c4:	00020baa 	.word	0x00020baa
   121c8:	2002049c 	.word	0x2002049c

000121cc <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   121cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   121d0:	6805      	ldr	r5, [r0, #0]
{
   121d2:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   121d4:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   121d6:	782b      	ldrb	r3, [r5, #0]
{
   121d8:	4680      	mov	r8, r0
   121da:	460f      	mov	r7, r1
   121dc:	4616      	mov	r6, r2
   121de:	2b00      	cmp	r3, #0
   121e0:	f000 80c1 	beq.w	12366 <at_parse_process_element+0x19a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   121e4:	4b61      	ldr	r3, [pc, #388]	; (1236c <at_parse_process_element+0x1a0>)
   121e6:	781c      	ldrb	r4, [r3, #0]
   121e8:	2c05      	cmp	r4, #5
   121ea:	d110      	bne.n	1220e <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   121ec:	1c6b      	adds	r3, r5, #1
   121ee:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   121f0:	9a00      	ldr	r2, [sp, #0]
   121f2:	7810      	ldrb	r0, [r2, #0]
   121f4:	f00c f8ad 	bl	1e352 <is_valid_notification_char>
   121f8:	b930      	cbnz	r0, 12208 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   121fa:	1b53      	subs	r3, r2, r5

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   121fc:	462a      	mov	r2, r5
   121fe:	4639      	mov	r1, r7
   12200:	4630      	mov	r0, r6
   12202:	f00c f98f 	bl	1e524 <at_params_string_put>
   12206:	e01b      	b.n	12240 <at_parse_process_element+0x74>
			tmpstr++;
   12208:	3201      	adds	r2, #1
   1220a:	9200      	str	r2, [sp, #0]
   1220c:	e7f0      	b.n	121f0 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1220e:	2c06      	cmp	r4, #6
   12210:	d124      	bne.n	1225c <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   12212:	4668      	mov	r0, sp
   12214:	f00c f88f 	bl	1e336 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   12218:	9a00      	ldr	r2, [sp, #0]
   1221a:	7810      	ldrb	r0, [r2, #0]
   1221c:	f00c f899 	bl	1e352 <is_valid_notification_char>
   12220:	b9a8      	cbnz	r0, 1224e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   12222:	1b53      	subs	r3, r2, r5
   12224:	4639      	mov	r1, r7
   12226:	462a      	mov	r2, r5
   12228:	4630      	mov	r0, r6
   1222a:	f00c f97b 	bl	1e524 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1222e:	9b00      	ldr	r3, [sp, #0]
   12230:	781a      	ldrb	r2, [r3, #0]
   12232:	2a3d      	cmp	r2, #61	; 0x3d
   12234:	d10e      	bne.n	12254 <at_parse_process_element+0x88>
   12236:	785a      	ldrb	r2, [r3, #1]
   12238:	2a3f      	cmp	r2, #63	; 0x3f
   1223a:	d101      	bne.n	12240 <at_parse_process_element+0x74>
			tmpstr += 2;
   1223c:	3302      	adds	r3, #2
			tmpstr++;
   1223e:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   12240:	2000      	movs	r0, #0
	*str = tmpstr;
   12242:	9b00      	ldr	r3, [sp, #0]
   12244:	f8c8 3000 	str.w	r3, [r8]
}
   12248:	b023      	add	sp, #140	; 0x8c
   1224a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1224e:	3201      	adds	r2, #1
   12250:	9200      	str	r2, [sp, #0]
   12252:	e7e1      	b.n	12218 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   12254:	2a3f      	cmp	r2, #63	; 0x3f
   12256:	d1f3      	bne.n	12240 <at_parse_process_element+0x74>
			tmpstr++;
   12258:	3301      	adds	r3, #1
   1225a:	e7f0      	b.n	1223e <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   1225c:	2c07      	cmp	r4, #7
   1225e:	d103      	bne.n	12268 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   12260:	4610      	mov	r0, r2
   12262:	f00c f93a 	bl	1e4da <at_params_empty_put>
   12266:	e7eb      	b.n	12240 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   12268:	2c02      	cmp	r4, #2
   1226a:	d112      	bne.n	12292 <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   1226c:	9a00      	ldr	r2, [sp, #0]
   1226e:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   12270:	2822      	cmp	r0, #34	; 0x22
   12272:	d003      	beq.n	1227c <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12274:	b110      	cbz	r0, 1227c <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   12276:	f00c f855 	bl	1e324 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   1227a:	b138      	cbz	r0, 1228c <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   1227c:	1b53      	subs	r3, r2, r5
   1227e:	4639      	mov	r1, r7
   12280:	462a      	mov	r2, r5
   12282:	4630      	mov	r0, r6
   12284:	f00c f94e 	bl	1e524 <at_params_string_put>
		tmpstr++;
   12288:	9b00      	ldr	r3, [sp, #0]
   1228a:	e7e5      	b.n	12258 <at_parse_process_element+0x8c>
			tmpstr++;
   1228c:	3201      	adds	r2, #1
   1228e:	9200      	str	r2, [sp, #0]
   12290:	e7ec      	b.n	1226c <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   12292:	2c01      	cmp	r4, #1
   12294:	d13c      	bne.n	12310 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   12296:	4628      	mov	r0, r5
   12298:	220a      	movs	r2, #10
   1229a:	a901      	add	r1, sp, #4
   1229c:	f00a ffa0 	bl	1d1e0 <strtoul>
		tmpstr = next;
   122a0:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   122a2:	4d33      	ldr	r5, [pc, #204]	; (12370 <at_parse_process_element+0x1a4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   122a4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   122a6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   122a8:	9800      	ldr	r0, [sp, #0]
   122aa:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   122ac:	2b29      	cmp	r3, #41	; 0x29
   122ae:	d028      	beq.n	12302 <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   122b0:	b33b      	cbz	r3, 12302 <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   122b2:	3b2c      	subs	r3, #44	; 0x2c
   122b4:	b2db      	uxtb	r3, r3
   122b6:	3001      	adds	r0, #1
   122b8:	2b11      	cmp	r3, #17
				tmparray[i++] =
   122ba:	9000      	str	r0, [sp, #0]
   122bc:	d803      	bhi.n	122c6 <at_parse_process_element+0xfa>
   122be:	fa25 f303 	lsr.w	r3, r5, r3
   122c2:	07db      	lsls	r3, r3, #31
   122c4:	d408      	bmi.n	122d8 <at_parse_process_element+0x10c>
				tmpstr++;
   122c6:	46a1      	mov	r9, r4
   122c8:	e004      	b.n	122d4 <at_parse_process_element+0x108>
					tmpstr = next;
   122ca:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   122cc:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   122d0:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   122d2:	d015      	beq.n	12300 <at_parse_process_element+0x134>
				tmpstr++;
   122d4:	464c      	mov	r4, r9
   122d6:	e7e7      	b.n	122a8 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   122d8:	220a      	movs	r2, #10
   122da:	a901      	add	r1, sp, #4
   122dc:	f00a ff80 	bl	1d1e0 <strtoul>
				tmparray[i++] =
   122e0:	ab22      	add	r3, sp, #136	; 0x88
   122e2:	f104 0901 	add.w	r9, r4, #1
   122e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   122ea:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   122ee:	9800      	ldr	r0, [sp, #0]
   122f0:	f00b f844 	bl	1d37c <strlen>
   122f4:	4604      	mov	r4, r0
   122f6:	9801      	ldr	r0, [sp, #4]
   122f8:	f00b f840 	bl	1d37c <strlen>
   122fc:	4284      	cmp	r4, r0
   122fe:	d1e4      	bne.n	122ca <at_parse_process_element+0xfe>
   12300:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   12302:	00a3      	lsls	r3, r4, #2
   12304:	aa02      	add	r2, sp, #8
   12306:	4639      	mov	r1, r7
   12308:	4630      	mov	r0, r6
   1230a:	f00c f92e 	bl	1e56a <at_params_array_put>
   1230e:	e7bb      	b.n	12288 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   12310:	2c03      	cmp	r4, #3
   12312:	d115      	bne.n	12340 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   12314:	220a      	movs	r2, #10
   12316:	a902      	add	r1, sp, #8
   12318:	4628      	mov	r0, r5
   1231a:	f00a ff61 	bl	1d1e0 <strtoul>
		tmpstr = next;
   1231e:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   12320:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   12324:	4602      	mov	r2, r0
		tmpstr = next;
   12326:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   12328:	d205      	bcs.n	12336 <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   1232a:	b282      	uxth	r2, r0
   1232c:	4639      	mov	r1, r7
   1232e:	4630      	mov	r0, r6
   12330:	f00c f8c0 	bl	1e4b4 <at_params_short_put>
   12334:	e784      	b.n	12240 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   12336:	4639      	mov	r1, r7
   12338:	4630      	mov	r0, r6
   1233a:	f00c f8e0 	bl	1e4fe <at_params_int_put>
   1233e:	e77f      	b.n	12240 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   12340:	2c04      	cmp	r4, #4
   12342:	f47f af7d 	bne.w	12240 <at_parse_process_element+0x74>
		while (isxdigit(*tmpstr)) {
   12346:	9b00      	ldr	r3, [sp, #0]
   12348:	781a      	ldrb	r2, [r3, #0]
	return (int)(((ua - (unsigned)'0') < 10U) ||
   1234a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1234e:	2909      	cmp	r1, #9
   12350:	d906      	bls.n	12360 <at_parse_process_element+0x194>
			((ua | 32U) - (unsigned)'a' < 6U));
   12352:	f042 0220 	orr.w	r2, r2, #32
   12356:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   12358:	2a05      	cmp	r2, #5
   1235a:	d901      	bls.n	12360 <at_parse_process_element+0x194>
		at_params_string_put(list, index, start_ptr,
   1235c:	1b5b      	subs	r3, r3, r5
   1235e:	e74d      	b.n	121fc <at_parse_process_element+0x30>
			tmpstr++;
   12360:	3301      	adds	r3, #1
   12362:	9300      	str	r3, [sp, #0]
   12364:	e7ef      	b.n	12346 <at_parse_process_element+0x17a>
		return -1;
   12366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1236a:	e76d      	b.n	12248 <at_parse_process_element+0x7c>
   1236c:	20026561 	.word	0x20026561
   12370:	00024001 	.word	0x00024001

00012374 <at_parse_detect_type>:
{
   12374:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   12376:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12378:	2900      	cmp	r1, #0
{
   1237a:	4605      	mov	r5, r0
   1237c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1237e:	d144      	bne.n	1240a <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12380:	2a2b      	cmp	r2, #43	; 0x2b
   12382:	4e2a      	ldr	r6, [pc, #168]	; (1242c <at_parse_detect_type+0xb8>)
   12384:	d001      	beq.n	1238a <at_parse_detect_type+0x16>
   12386:	2a25      	cmp	r2, #37	; 0x25
   12388:	d104      	bne.n	12394 <at_parse_detect_type+0x20>
	state = new_state;
   1238a:	2305      	movs	r3, #5
   1238c:	7033      	strb	r3, [r6, #0]
	return 0;
   1238e:	2000      	movs	r0, #0
	*str = tmpstr;
   12390:	602c      	str	r4, [r5, #0]
}
   12392:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   12394:	4620      	mov	r0, r4
   12396:	f00b ffe8 	bl	1e36a <is_command>
   1239a:	b3a0      	cbz	r0, 12406 <at_parse_detect_type+0x92>
	state = new_state;
   1239c:	2306      	movs	r3, #6
   1239e:	e7f5      	b.n	1238c <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   123a0:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   123a4:	fa21 f303 	lsr.w	r3, r1, r3
   123a8:	07d9      	lsls	r1, r3, #31
   123aa:	d50a      	bpl.n	123c2 <at_parse_detect_type+0x4e>
   123ac:	2203      	movs	r2, #3
   123ae:	4b1f      	ldr	r3, [pc, #124]	; (1242c <at_parse_detect_type+0xb8>)
   123b0:	701a      	strb	r2, [r3, #0]
   123b2:	e7ec      	b.n	1238e <at_parse_detect_type+0x1a>
	if (chr == '(') {
   123b4:	2a28      	cmp	r2, #40	; 0x28
   123b6:	d104      	bne.n	123c2 <at_parse_detect_type+0x4e>
   123b8:	2201      	movs	r2, #1
   123ba:	4b1c      	ldr	r3, [pc, #112]	; (1242c <at_parse_detect_type+0xb8>)
		tmpstr++;
   123bc:	4414      	add	r4, r2
	state = new_state;
   123be:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   123c0:	e7e5      	b.n	1238e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   123c2:	4610      	mov	r0, r2
   123c4:	f00b ffae 	bl	1e324 <is_lfcr>
   123c8:	b170      	cbz	r0, 123e8 <at_parse_detect_type+0x74>
   123ca:	4918      	ldr	r1, [pc, #96]	; (1242c <at_parse_detect_type+0xb8>)
   123cc:	7808      	ldrb	r0, [r1, #0]
   123ce:	2803      	cmp	r0, #3
   123d0:	d108      	bne.n	123e4 <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   123d2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   123d6:	f00b ffa5 	bl	1e324 <is_lfcr>
   123da:	2800      	cmp	r0, #0
   123dc:	d1f9      	bne.n	123d2 <at_parse_detect_type+0x5e>
	state = new_state;
   123de:	2304      	movs	r3, #4
   123e0:	700b      	strb	r3, [r1, #0]
   123e2:	e7d4      	b.n	1238e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   123e4:	2807      	cmp	r0, #7
   123e6:	d0d2      	beq.n	1238e <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   123e8:	3a2c      	subs	r2, #44	; 0x2c
   123ea:	b2d2      	uxtb	r2, r2
   123ec:	2a11      	cmp	r2, #17
   123ee:	d807      	bhi.n	12400 <at_parse_detect_type+0x8c>
   123f0:	4b0f      	ldr	r3, [pc, #60]	; (12430 <at_parse_detect_type+0xbc>)
   123f2:	fa23 f202 	lsr.w	r2, r3, r2
   123f6:	07d3      	lsls	r3, r2, #31
   123f8:	d502      	bpl.n	12400 <at_parse_detect_type+0x8c>
	state = new_state;
   123fa:	4b0c      	ldr	r3, [pc, #48]	; (1242c <at_parse_detect_type+0xb8>)
   123fc:	2207      	movs	r2, #7
   123fe:	e7d7      	b.n	123b0 <at_parse_detect_type+0x3c>
		return -1;
   12400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12404:	e7c5      	b.n	12392 <at_parse_detect_type+0x1e>
	state = new_state;
   12406:	2302      	movs	r3, #2
   12408:	e7c0      	b.n	1238c <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1240a:	dd03      	ble.n	12414 <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1240c:	2a2b      	cmp	r2, #43	; 0x2b
   1240e:	d0f7      	beq.n	12400 <at_parse_detect_type+0x8c>
   12410:	2a25      	cmp	r2, #37	; 0x25
   12412:	d0f5      	beq.n	12400 <at_parse_detect_type+0x8c>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   12414:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   12418:	b2db      	uxtb	r3, r3
   1241a:	2b0e      	cmp	r3, #14
   1241c:	d9c0      	bls.n	123a0 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   1241e:	2a22      	cmp	r2, #34	; 0x22
   12420:	d1c8      	bne.n	123b4 <at_parse_detect_type+0x40>
	state = new_state;
   12422:	2202      	movs	r2, #2
   12424:	4b01      	ldr	r3, [pc, #4]	; (1242c <at_parse_detect_type+0xb8>)
		tmpstr++;
   12426:	3401      	adds	r4, #1
	state = new_state;
   12428:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1242a:	e7b0      	b.n	1238e <at_parse_detect_type+0x1a>
   1242c:	20026561 	.word	0x20026561
   12430:	00024001 	.word	0x00024001

00012434 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   12434:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12438:	4688      	mov	r8, r1
   1243a:	4616      	mov	r6, r2
   1243c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1243e:	4604      	mov	r4, r0
   12440:	2800      	cmp	r0, #0
   12442:	d07c      	beq.n	1253e <at_parser_max_params_from_str+0x10a>
   12444:	2a00      	cmp	r2, #0
   12446:	d07a      	beq.n	1253e <at_parser_max_params_from_str+0x10a>
   12448:	6853      	ldr	r3, [r2, #4]
   1244a:	2b00      	cmp	r3, #0
   1244c:	d077      	beq.n	1253e <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   1244e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   12450:	4610      	mov	r0, r2
   12452:	f00c f817 	bl	1e484 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   12456:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   12458:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   1245a:	4297      	cmp	r7, r2
   1245c:	bf28      	it	cs
   1245e:	4617      	movcs	r7, r2
	int index = 0;
   12460:	462c      	mov	r4, r5
	state = IDLE;
   12462:	4b38      	ldr	r3, [pc, #224]	; (12544 <at_parser_max_params_from_str+0x110>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12464:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12548 <at_parser_max_params_from_str+0x114>
   12468:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   1246a:	9a01      	ldr	r2, [sp, #4]
   1246c:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1246e:	2b00      	cmp	r3, #0
   12470:	d04b      	beq.n	1250a <at_parser_max_params_from_str+0xd6>
   12472:	42a7      	cmp	r7, r4
   12474:	d949      	bls.n	1250a <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12476:	2b20      	cmp	r3, #32
   12478:	d002      	beq.n	12480 <at_parser_max_params_from_str+0x4c>
   1247a:	3b09      	subs	r3, #9
   1247c:	2b04      	cmp	r3, #4
   1247e:	d801      	bhi.n	12484 <at_parser_max_params_from_str+0x50>
			str++;
   12480:	3201      	adds	r2, #1
   12482:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   12484:	4621      	mov	r1, r4
   12486:	a801      	add	r0, sp, #4
   12488:	f7ff ff74 	bl	12374 <at_parse_detect_type>
   1248c:	1c42      	adds	r2, r0, #1
   1248e:	d03c      	beq.n	1250a <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   12490:	4632      	mov	r2, r6
   12492:	4621      	mov	r1, r4
   12494:	a801      	add	r0, sp, #4
   12496:	f7ff fe99 	bl	121cc <at_parse_process_element>
   1249a:	1c43      	adds	r3, r0, #1
   1249c:	d035      	beq.n	1250a <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   1249e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   124a0:	781a      	ldrb	r2, [r3, #0]
   124a2:	3a2c      	subs	r2, #44	; 0x2c
   124a4:	b2d2      	uxtb	r2, r2
   124a6:	2a11      	cmp	r2, #17
   124a8:	d81a      	bhi.n	124e0 <at_parser_max_params_from_str+0xac>
   124aa:	fa29 f202 	lsr.w	r2, r9, r2
   124ae:	07d1      	lsls	r1, r2, #31
   124b0:	d516      	bpl.n	124e0 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   124b2:	7858      	ldrb	r0, [r3, #1]
   124b4:	f00b ff36 	bl	1e324 <is_lfcr>
   124b8:	b178      	cbz	r0, 124da <at_parser_max_params_from_str+0xa6>
				index++;
   124ba:	3401      	adds	r4, #1
				if (index == max_params) {
   124bc:	42bc      	cmp	r4, r7
   124be:	d039      	beq.n	12534 <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   124c0:	4621      	mov	r1, r4
   124c2:	a801      	add	r0, sp, #4
   124c4:	f7ff ff56 	bl	12374 <at_parse_detect_type>
   124c8:	1c42      	adds	r2, r0, #1
   124ca:	d01e      	beq.n	1250a <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   124cc:	4632      	mov	r2, r6
   124ce:	4621      	mov	r1, r4
   124d0:	a801      	add	r0, sp, #4
   124d2:	f7ff fe7b 	bl	121cc <at_parse_process_element>
   124d6:	1c43      	adds	r3, r0, #1
   124d8:	d017      	beq.n	1250a <at_parser_max_params_from_str+0xd6>
			str++;
   124da:	9b01      	ldr	r3, [sp, #4]
   124dc:	3301      	adds	r3, #1
   124de:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   124e0:	9a01      	ldr	r2, [sp, #4]
   124e2:	7810      	ldrb	r0, [r2, #0]
   124e4:	f00b ff1e 	bl	1e324 <is_lfcr>
   124e8:	b1f8      	cbz	r0, 1252a <at_parser_max_params_from_str+0xf6>
   124ea:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   124ec:	7811      	ldrb	r1, [r2, #0]
   124ee:	4692      	mov	sl, r2
   124f0:	4608      	mov	r0, r1
   124f2:	3201      	adds	r2, #1
   124f4:	f00b ff16 	bl	1e324 <is_lfcr>
   124f8:	2800      	cmp	r0, #0
   124fa:	d1f7      	bne.n	124ec <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   124fc:	b119      	cbz	r1, 12506 <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   124fe:	292b      	cmp	r1, #43	; 0x2b
   12500:	d001      	beq.n	12506 <at_parser_max_params_from_str+0xd2>
   12502:	2925      	cmp	r1, #37	; 0x25
   12504:	d111      	bne.n	1252a <at_parser_max_params_from_str+0xf6>
				str += i;
   12506:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   1250a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   1250c:	b9a5      	cbnz	r5, 12538 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1250e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   12510:	2a00      	cmp	r2, #0
   12512:	bf0c      	ite	eq
   12514:	2000      	moveq	r0, #0
   12516:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1251a:	f1b8 0f00 	cmp.w	r8, #0
   1251e:	d001      	beq.n	12524 <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   12520:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   12524:	b002      	add	sp, #8
   12526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   1252a:	3401      	adds	r4, #1
			oversized = true;
   1252c:	42bc      	cmp	r4, r7
   1252e:	bf08      	it	eq
   12530:	2501      	moveq	r5, #1
   12532:	e79a      	b.n	1246a <at_parser_max_params_from_str+0x36>
					oversized = true;
   12534:	4605      	mov	r5, r0
   12536:	e7e8      	b.n	1250a <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   12538:	f06f 0006 	mvn.w	r0, #6
   1253c:	e7ed      	b.n	1251a <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   1253e:	f06f 0015 	mvn.w	r0, #21
   12542:	e7ef      	b.n	12524 <at_parser_max_params_from_str+0xf0>
   12544:	20026561 	.word	0x20026561
   12548:	00024001 	.word	0x00024001

0001254c <lte_lc_power_off>:

	return 0;
}

int lte_lc_power_off(void)
{
   1254c:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   1254e:	2300      	movs	r3, #0
   12550:	4804      	ldr	r0, [pc, #16]	; (12564 <lte_lc_power_off+0x18>)
   12552:	461a      	mov	r2, r3
   12554:	4619      	mov	r1, r3
   12556:	f7ff fced 	bl	11f34 <at_cmd_write>
   1255a:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   1255c:	bf18      	it	ne
   1255e:	f06f 0004 	mvnne.w	r0, #4
   12562:	bd08      	pop	{r3, pc}
   12564:	00020c0a 	.word	0x00020c0a

00012568 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   12568:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1256a:	f7fc fb71 	bl	ec50 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1256e:	2301      	movs	r3, #1
   12570:	f04f 0100 	mov.w	r1, #0
   12574:	4a06      	ldr	r2, [pc, #24]	; (12590 <k_sys_fatal_error_handler+0x28>)
   12576:	f363 0107 	bfi	r1, r3, #0, #8
   1257a:	4b06      	ldr	r3, [pc, #24]	; (12594 <k_sys_fatal_error_handler+0x2c>)
   1257c:	4806      	ldr	r0, [pc, #24]	; (12598 <k_sys_fatal_error_handler+0x30>)
   1257e:	1a9b      	subs	r3, r3, r2
   12580:	08db      	lsrs	r3, r3, #3
   12582:	f363 118f 	bfi	r1, r3, #6, #10
   12586:	f00a f9be 	bl	1c906 <log_0>
	sys_arch_reboot(0);
   1258a:	2000      	movs	r0, #0
   1258c:	f7fd fca4 	bl	fed8 <sys_arch_reboot>

	CODE_UNREACHABLE;
   12590:	0001f10c 	.word	0x0001f10c
   12594:	0001f13c 	.word	0x0001f13c
   12598:	00020c1b 	.word	0x00020c1b

0001259c <ext_api_getter>:
extern const struct fw_info_ext_api * const _ext_apis_start[];
extern const u32_t _ext_apis_size;
__noinit fw_info_ext_api_getter ext_api_getter_in;

int ext_api_getter(u32_t id, u32_t index, const struct fw_info_ext_api **out)
{
   1259c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!out) {
   1259e:	b1da      	cbz	r2, 125d8 <ext_api_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   125a0:	2300      	movs	r3, #0
	bool id_found = false;
   125a2:	461c      	mov	r4, r3
   125a4:	4d0e      	ldr	r5, [pc, #56]	; (125e0 <ext_api_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   125a6:	4f0f      	ldr	r7, [pc, #60]	; (125e4 <ext_api_getter+0x48>)
   125a8:	42bb      	cmp	r3, r7
   125aa:	d306      	bcc.n	125ba <ext_api_getter+0x1e>
				*out = ext_api;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   125ac:	2c00      	cmp	r4, #0
   125ae:	bf14      	ite	ne
   125b0:	f06f 0008 	mvnne.w	r0, #8
   125b4:	f06f 0001 	mvneq.w	r0, #1
   125b8:	e009      	b.n	125ce <ext_api_getter+0x32>
		const struct fw_info_ext_api *ext_api = _ext_apis_start[i];
   125ba:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_api->ext_api_id == id) {
   125be:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   125c2:	4560      	cmp	r0, ip
   125c4:	d106      	bne.n	125d4 <ext_api_getter+0x38>
			if (index-- == 0) {
   125c6:	1e4c      	subs	r4, r1, #1
   125c8:	b911      	cbnz	r1, 125d0 <ext_api_getter+0x34>
				return 0;
   125ca:	4608      	mov	r0, r1
				*out = ext_api;
   125cc:	6016      	str	r6, [r2, #0]
}
   125ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   125d0:	4621      	mov	r1, r4
			id_found = true;
   125d2:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_apis_size; i++) {
   125d4:	3301      	adds	r3, #1
   125d6:	e7e7      	b.n	125a8 <ext_api_getter+0xc>
		return -EFAULT;
   125d8:	f06f 000d 	mvn.w	r0, #13
   125dc:	e7f7      	b.n	125ce <ext_api_getter+0x32>
   125de:	bf00      	nop
   125e0:	00020d48 	.word	0x00020d48
   125e4:	00000000 	.word	0x00000000

000125e8 <rpc_logobj_client_evt_handler>:
   125e8:	b120      	cbz	r0, 125f4 <rpc_logobj_client_evt_handler+0xc>
   125ea:	f850 1b08 	ldr.w	r1, [r0], #8
   125ee:	0c09      	lsrs	r1, r1, #16
   125f0:	f000 b852 	b.w	12698 <logobj_event_handler>
   125f4:	4770      	bx	lr
   125f6:	bf00      	nop

000125f8 <rpc_logobj_client_init>:
   125f8:	4801      	ldr	r0, [pc, #4]	; (12600 <rpc_logobj_client_init+0x8>)
   125fa:	f006 bb87 	b.w	18d0c <rpc_client_register>
   125fe:	bf00      	nop
   12600:	0001f38c 	.word	0x0001f38c

00012604 <rpc_logobj_client_request_alloc>:
   12604:	2300      	movs	r3, #0
   12606:	b510      	push	{r4, lr}
   12608:	b082      	sub	sp, #8
   1260a:	9301      	str	r3, [sp, #4]
   1260c:	b961      	cbnz	r1, 12628 <rpc_logobj_client_request_alloc+0x24>
   1260e:	b170      	cbz	r0, 1262e <rpc_logobj_client_request_alloc+0x2a>
   12610:	4604      	mov	r4, r0
   12612:	aa01      	add	r2, sp, #4
   12614:	2009      	movs	r0, #9
   12616:	f006 fdb1 	bl	1917c <rpc_message_alloc>
   1261a:	b918      	cbnz	r0, 12624 <rpc_logobj_client_request_alloc+0x20>
   1261c:	9b01      	ldr	r3, [sp, #4]
   1261e:	b10b      	cbz	r3, 12624 <rpc_logobj_client_request_alloc+0x20>
   12620:	3308      	adds	r3, #8
   12622:	6023      	str	r3, [r4, #0]
   12624:	b002      	add	sp, #8
   12626:	bd10      	pop	{r4, pc}
   12628:	200f      	movs	r0, #15
   1262a:	b002      	add	sp, #8
   1262c:	bd10      	pop	{r4, pc}
   1262e:	200e      	movs	r0, #14
   12630:	b002      	add	sp, #8
   12632:	bd10      	pop	{r4, pc}

00012634 <rpc_logobj_client_request_send>:
   12634:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   12638:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1263c:	d10b      	bne.n	12656 <rpc_logobj_client_request_send+0x22>
   1263e:	b160      	cbz	r0, 1265a <rpc_logobj_client_request_send+0x26>
   12640:	4603      	mov	r3, r0
   12642:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   12646:	2009      	movs	r0, #9
   12648:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1264c:	f843 1d08 	str.w	r1, [r3, #-8]!
   12650:	4619      	mov	r1, r3
   12652:	f006 bd7b 	b.w	1914c <rpc_message_send>
   12656:	200f      	movs	r0, #15
   12658:	4770      	bx	lr
   1265a:	200e      	movs	r0, #14
   1265c:	4770      	bx	lr
   1265e:	bf00      	nop

00012660 <rpc_logobj_client_message_free>:
   12660:	b120      	cbz	r0, 1266c <rpc_logobj_client_message_free+0xc>
   12662:	f1a0 0108 	sub.w	r1, r0, #8
   12666:	2009      	movs	r0, #9
   12668:	f006 bdba 	b.w	191e0 <rpc_message_free>
   1266c:	200e      	movs	r0, #14
   1266e:	4770      	bx	lr

00012670 <rpc_logobj_client_data_free>:
   12670:	b118      	cbz	r0, 1267a <rpc_logobj_client_data_free+0xa>
   12672:	4601      	mov	r1, r0
   12674:	2009      	movs	r0, #9
   12676:	f006 bec5 	b.w	19404 <rpc_message_data_free>
   1267a:	200e      	movs	r0, #14
   1267c:	4770      	bx	lr
   1267e:	bf00      	nop

00012680 <packet_free_cb>:
   12680:	b510      	push	{r4, lr}
   12682:	4604      	mov	r4, r0
   12684:	6800      	ldr	r0, [r0, #0]
   12686:	f7ff fff3 	bl	12670 <rpc_logobj_client_data_free>
   1268a:	68a0      	ldr	r0, [r4, #8]
   1268c:	b118      	cbz	r0, 12696 <packet_free_cb+0x16>
   1268e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12692:	f001 b90f 	b.w	138b4 <nrf_free>
   12696:	bd10      	pop	{r4, pc}

00012698 <logobj_event_handler>:
   12698:	b530      	push	{r4, r5, lr}
   1269a:	4b3b      	ldr	r3, [pc, #236]	; (12788 <logobj_event_handler+0xf0>)
   1269c:	b085      	sub	sp, #20
   1269e:	681d      	ldr	r5, [r3, #0]
   126a0:	2d00      	cmp	r5, #0
   126a2:	d04c      	beq.n	1273e <logobj_event_handler+0xa6>
   126a4:	f248 0302 	movw	r3, #32770	; 0x8002
   126a8:	4299      	cmp	r1, r3
   126aa:	d053      	beq.n	12754 <logobj_event_handler+0xbc>
   126ac:	d91c      	bls.n	126e8 <logobj_event_handler+0x50>
   126ae:	f248 0303 	movw	r3, #32771	; 0x8003
   126b2:	4299      	cmp	r1, r3
   126b4:	d05a      	beq.n	1276c <logobj_event_handler+0xd4>
   126b6:	f249 0301 	movw	r3, #36865	; 0x9001
   126ba:	4299      	cmp	r1, r3
   126bc:	d147      	bne.n	1274e <logobj_event_handler+0xb6>
   126be:	2400      	movs	r4, #0
   126c0:	6843      	ldr	r3, [r0, #4]
   126c2:	6802      	ldr	r2, [r0, #0]
   126c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
   126c8:	e9cd 2300 	strd	r2, r3, [sp]
   126cc:	69e8      	ldr	r0, [r5, #28]
   126ce:	4669      	mov	r1, sp
   126d0:	6803      	ldr	r3, [r0, #0]
   126d2:	685b      	ldr	r3, [r3, #4]
   126d4:	4798      	blx	r3
   126d6:	3001      	adds	r0, #1
   126d8:	d04e      	beq.n	12778 <logobj_event_handler+0xe0>
   126da:	4620      	mov	r0, r4
   126dc:	682b      	ldr	r3, [r5, #0]
   126de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   126e2:	602b      	str	r3, [r5, #0]
   126e4:	b005      	add	sp, #20
   126e6:	bd30      	pop	{r4, r5, pc}
   126e8:	f248 0301 	movw	r3, #32769	; 0x8001
   126ec:	4299      	cmp	r1, r3
   126ee:	d12e      	bne.n	1274e <logobj_event_handler+0xb6>
   126f0:	68c3      	ldr	r3, [r0, #12]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d135      	bne.n	12762 <logobj_event_handler+0xca>
   126f6:	6828      	ldr	r0, [r5, #0]
   126f8:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   126fc:	d03e      	beq.n	1277c <logobj_event_handler+0xe4>
   126fe:	682b      	ldr	r3, [r5, #0]
   12700:	b29b      	uxth	r3, r3
   12702:	2b01      	cmp	r3, #1
   12704:	d105      	bne.n	12712 <logobj_event_handler+0x7a>
   12706:	682b      	ldr	r3, [r5, #0]
   12708:	0c1b      	lsrs	r3, r3, #16
   1270a:	041b      	lsls	r3, r3, #16
   1270c:	f043 0302 	orr.w	r3, r3, #2
   12710:	602b      	str	r3, [r5, #0]
   12712:	4b1e      	ldr	r3, [pc, #120]	; (1278c <logobj_event_handler+0xf4>)
   12714:	781a      	ldrb	r2, [r3, #0]
   12716:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1271a:	2a00      	cmp	r2, #0
   1271c:	d031      	beq.n	12782 <logobj_event_handler+0xea>
   1271e:	4a1c      	ldr	r2, [pc, #112]	; (12790 <logobj_event_handler+0xf8>)
   12720:	7811      	ldrb	r1, [r2, #0]
   12722:	b909      	cbnz	r1, 12728 <logobj_event_handler+0x90>
   12724:	2101      	movs	r1, #1
   12726:	7011      	strb	r1, [r2, #0]
   12728:	2000      	movs	r0, #0
   1272a:	7018      	strb	r0, [r3, #0]
   1272c:	682b      	ldr	r3, [r5, #0]
   1272e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12732:	602b      	str	r3, [r5, #0]
   12734:	682b      	ldr	r3, [r5, #0]
   12736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1273a:	602b      	str	r3, [r5, #0]
   1273c:	e7d2      	b.n	126e4 <logobj_event_handler+0x4c>
   1273e:	6800      	ldr	r0, [r0, #0]
   12740:	2800      	cmp	r0, #0
   12742:	d0cf      	beq.n	126e4 <logobj_event_handler+0x4c>
   12744:	f7ff ff94 	bl	12670 <rpc_logobj_client_data_free>
   12748:	4628      	mov	r0, r5
   1274a:	b005      	add	sp, #20
   1274c:	bd30      	pop	{r4, r5, pc}
   1274e:	2000      	movs	r0, #0
   12750:	b005      	add	sp, #20
   12752:	bd30      	pop	{r4, r5, pc}
   12754:	682b      	ldr	r3, [r5, #0]
   12756:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   1275a:	d00b      	beq.n	12774 <logobj_event_handler+0xdc>
   1275c:	68c0      	ldr	r0, [r0, #12]
   1275e:	2800      	cmp	r0, #0
   12760:	d0e4      	beq.n	1272c <logobj_event_handler+0x94>
   12762:	230e      	movs	r3, #14
   12764:	2000      	movs	r0, #0
   12766:	606b      	str	r3, [r5, #4]
   12768:	b005      	add	sp, #20
   1276a:	bd30      	pop	{r4, r5, pc}
   1276c:	68c3      	ldr	r3, [r0, #12]
   1276e:	2b01      	cmp	r3, #1
   12770:	d1a5      	bne.n	126be <logobj_event_handler+0x26>
   12772:	e7f6      	b.n	12762 <logobj_event_handler+0xca>
   12774:	4618      	mov	r0, r3
   12776:	e7b5      	b.n	126e4 <logobj_event_handler+0x4c>
   12778:	2002      	movs	r0, #2
   1277a:	e7b3      	b.n	126e4 <logobj_event_handler+0x4c>
   1277c:	230e      	movs	r3, #14
   1277e:	606b      	str	r3, [r5, #4]
   12780:	e7b0      	b.n	126e4 <logobj_event_handler+0x4c>
   12782:	4a03      	ldr	r2, [pc, #12]	; (12790 <logobj_event_handler+0xf8>)
   12784:	7011      	strb	r1, [r2, #0]
   12786:	e7cf      	b.n	12728 <logobj_event_handler+0x90>
   12788:	200204a8 	.word	0x200204a8
   1278c:	20026562 	.word	0x20026562
   12790:	20026563 	.word	0x20026563

00012794 <logobj_interface_init>:
   12794:	2300      	movs	r3, #0
   12796:	b510      	push	{r4, lr}
   12798:	4907      	ldr	r1, [pc, #28]	; (127b8 <logobj_interface_init+0x24>)
   1279a:	4a08      	ldr	r2, [pc, #32]	; (127bc <logobj_interface_init+0x28>)
   1279c:	4c08      	ldr	r4, [pc, #32]	; (127c0 <logobj_interface_init+0x2c>)
   1279e:	4809      	ldr	r0, [pc, #36]	; (127c4 <logobj_interface_init+0x30>)
   127a0:	7023      	strb	r3, [r4, #0]
   127a2:	6003      	str	r3, [r0, #0]
   127a4:	700b      	strb	r3, [r1, #0]
   127a6:	6013      	str	r3, [r2, #0]
   127a8:	f7ff ff26 	bl	125f8 <rpc_logobj_client_init>
   127ac:	3000      	adds	r0, #0
   127ae:	bf18      	it	ne
   127b0:	2001      	movne	r0, #1
   127b2:	4240      	negs	r0, r0
   127b4:	bd10      	pop	{r4, pc}
   127b6:	bf00      	nop
   127b8:	20026562 	.word	0x20026562
   127bc:	200204a4 	.word	0x200204a4
   127c0:	20026563 	.word	0x20026563
   127c4:	200204a8 	.word	0x200204a8

000127c8 <logobj_interface_open>:
   127c8:	2300      	movs	r3, #0
   127ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127ce:	2866      	cmp	r0, #102	; 0x66
   127d0:	b082      	sub	sp, #8
   127d2:	9300      	str	r3, [sp, #0]
   127d4:	d172      	bne.n	128bc <logobj_interface_open+0xf4>
   127d6:	2902      	cmp	r1, #2
   127d8:	4689      	mov	r9, r1
   127da:	d16f      	bne.n	128bc <logobj_interface_open+0xf4>
   127dc:	f240 2305 	movw	r3, #517	; 0x205
   127e0:	429a      	cmp	r2, r3
   127e2:	4692      	mov	sl, r2
   127e4:	d16a      	bne.n	128bc <logobj_interface_open+0xf4>
   127e6:	4f48      	ldr	r7, [pc, #288]	; (12908 <logobj_interface_open+0x140>)
   127e8:	683d      	ldr	r5, [r7, #0]
   127ea:	2d00      	cmp	r5, #0
   127ec:	d17c      	bne.n	128e8 <logobj_interface_open+0x120>
   127ee:	4680      	mov	r8, r0
   127f0:	4a46      	ldr	r2, [pc, #280]	; (1290c <logobj_interface_open+0x144>)
   127f2:	4668      	mov	r0, sp
   127f4:	f006 f81c 	bl	18830 <interface_socket_allocate>
   127f8:	9b00      	ldr	r3, [sp, #0]
   127fa:	4606      	mov	r6, r0
   127fc:	2b00      	cmp	r3, #0
   127fe:	d07d      	beq.n	128fc <logobj_interface_open+0x134>
   12800:	4629      	mov	r1, r5
   12802:	2204      	movs	r2, #4
   12804:	4842      	ldr	r0, [pc, #264]	; (12910 <logobj_interface_open+0x148>)
   12806:	603b      	str	r3, [r7, #0]
   12808:	f00a fe1d 	bl	1d446 <memset>
   1280c:	9c00      	ldr	r4, [sp, #0]
   1280e:	4629      	mov	r1, r5
   12810:	e9c4 8903 	strd	r8, r9, [r4, #12]
   12814:	f8c4 a014 	str.w	sl, [r4, #20]
   12818:	a801      	add	r0, sp, #4
   1281a:	f7ff fef3 	bl	12604 <rpc_logobj_client_request_alloc>
   1281e:	2800      	cmp	r0, #0
   12820:	d13c      	bne.n	1289c <logobj_interface_open+0xd4>
   12822:	2201      	movs	r2, #1
   12824:	2104      	movs	r1, #4
   12826:	9b01      	ldr	r3, [sp, #4]
   12828:	4d3a      	ldr	r5, [pc, #232]	; (12914 <logobj_interface_open+0x14c>)
   1282a:	7358      	strb	r0, [r3, #13]
   1282c:	7398      	strb	r0, [r3, #14]
   1282e:	73d8      	strb	r0, [r3, #15]
   12830:	7258      	strb	r0, [r3, #9]
   12832:	7298      	strb	r0, [r3, #10]
   12834:	72d8      	strb	r0, [r3, #11]
   12836:	7219      	strb	r1, [r3, #8]
   12838:	702a      	strb	r2, [r5, #0]
   1283a:	731a      	strb	r2, [r3, #12]
   1283c:	6822      	ldr	r2, [r4, #0]
   1283e:	4618      	mov	r0, r3
   12840:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   12844:	6022      	str	r2, [r4, #0]
   12846:	f247 0101 	movw	r1, #28673	; 0x7001
   1284a:	f7ff fef3 	bl	12634 <rpc_logobj_client_request_send>
   1284e:	bb38      	cbnz	r0, 128a0 <logobj_interface_open+0xd8>
   12850:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12858:	4611      	mov	r1, r2
   1285a:	4630      	mov	r0, r6
   1285c:	f006 f88c 	bl	18978 <interface_socket_wait>
   12860:	4604      	mov	r4, r0
   12862:	b310      	cbz	r0, 128aa <logobj_interface_open+0xe2>
   12864:	9a00      	ldr	r2, [sp, #0]
   12866:	2e00      	cmp	r6, #0
   12868:	6813      	ldr	r3, [r2, #0]
   1286a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1286e:	6013      	str	r3, [r2, #0]
   12870:	9a00      	ldr	r2, [sp, #0]
   12872:	6813      	ldr	r3, [r2, #0]
   12874:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12878:	6013      	str	r3, [r2, #0]
   1287a:	9a00      	ldr	r2, [sp, #0]
   1287c:	6813      	ldr	r3, [r2, #0]
   1287e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12882:	6013      	str	r3, [r2, #0]
   12884:	da36      	bge.n	128f4 <logobj_interface_open+0x12c>
   12886:	2300      	movs	r3, #0
   12888:	4620      	mov	r0, r4
   1288a:	603b      	str	r3, [r7, #0]
   1288c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12890:	f7fe ff60 	bl	11754 <bsd_os_errno_set>
   12894:	4630      	mov	r0, r6
   12896:	b002      	add	sp, #8
   12898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1289c:	240c      	movs	r4, #12
   1289e:	e7e1      	b.n	12864 <logobj_interface_open+0x9c>
   128a0:	9801      	ldr	r0, [sp, #4]
   128a2:	f7ff fedd 	bl	12660 <rpc_logobj_client_message_free>
   128a6:	2405      	movs	r4, #5
   128a8:	e7dc      	b.n	12864 <logobj_interface_open+0x9c>
   128aa:	4630      	mov	r0, r6
   128ac:	f006 f8d0 	bl	18a50 <interface_socket_from_handle_get>
   128b0:	b150      	cbz	r0, 128c8 <logobj_interface_open+0x100>
   128b2:	6844      	ldr	r4, [r0, #4]
   128b4:	b144      	cbz	r4, 128c8 <logobj_interface_open+0x100>
   128b6:	2300      	movs	r3, #0
   128b8:	6043      	str	r3, [r0, #4]
   128ba:	e7d3      	b.n	12864 <logobj_interface_open+0x9c>
   128bc:	2016      	movs	r0, #22
   128be:	f7fe ff49 	bl	11754 <bsd_os_errno_set>
   128c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   128c6:	e7e5      	b.n	12894 <logobj_interface_open+0xcc>
   128c8:	9a00      	ldr	r2, [sp, #0]
   128ca:	6813      	ldr	r3, [r2, #0]
   128cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   128d0:	6013      	str	r3, [r2, #0]
   128d2:	9a00      	ldr	r2, [sp, #0]
   128d4:	6813      	ldr	r3, [r2, #0]
   128d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   128da:	6013      	str	r3, [r2, #0]
   128dc:	9a00      	ldr	r2, [sp, #0]
   128de:	6813      	ldr	r3, [r2, #0]
   128e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   128e4:	6013      	str	r3, [r2, #0]
   128e6:	e7d5      	b.n	12894 <logobj_interface_open+0xcc>
   128e8:	2001      	movs	r0, #1
   128ea:	f7fe ff33 	bl	11754 <bsd_os_errno_set>
   128ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   128f2:	e7cf      	b.n	12894 <logobj_interface_open+0xcc>
   128f4:	4630      	mov	r0, r6
   128f6:	f005 fff1 	bl	188dc <interface_socket_free>
   128fa:	e7c4      	b.n	12886 <logobj_interface_open+0xbe>
   128fc:	2018      	movs	r0, #24
   128fe:	f7fe ff29 	bl	11754 <bsd_os_errno_set>
   12902:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12906:	e7c5      	b.n	12894 <logobj_interface_open+0xcc>
   12908:	200204a8 	.word	0x200204a8
   1290c:	00012681 	.word	0x00012681
   12910:	200204a4 	.word	0x200204a4
   12914:	20026562 	.word	0x20026562

00012918 <logobj_interface_read>:
   12918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1291c:	b085      	sub	sp, #20
   1291e:	2900      	cmp	r1, #0
   12920:	d05e      	beq.n	129e0 <logobj_interface_read+0xc8>
   12922:	2a00      	cmp	r2, #0
   12924:	4616      	mov	r6, r2
   12926:	dd5b      	ble.n	129e0 <logobj_interface_read+0xc8>
   12928:	461f      	mov	r7, r3
   1292a:	4680      	mov	r8, r0
   1292c:	460d      	mov	r5, r1
   1292e:	f006 f88f 	bl	18a50 <interface_socket_from_handle_get>
   12932:	4604      	mov	r4, r0
   12934:	2800      	cmp	r0, #0
   12936:	d059      	beq.n	129ec <logobj_interface_read+0xd4>
   12938:	69c0      	ldr	r0, [r0, #28]
   1293a:	07ba      	lsls	r2, r7, #30
   1293c:	6803      	ldr	r3, [r0, #0]
   1293e:	68db      	ldr	r3, [r3, #12]
   12940:	d524      	bpl.n	1298c <logobj_interface_read+0x74>
   12942:	4798      	blx	r3
   12944:	3001      	adds	r0, #1
   12946:	d03b      	beq.n	129c0 <logobj_interface_read+0xa8>
   12948:	6823      	ldr	r3, [r4, #0]
   1294a:	69e0      	ldr	r0, [r4, #28]
   1294c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   12950:	d038      	beq.n	129c4 <logobj_interface_read+0xac>
   12952:	2100      	movs	r1, #0
   12954:	6823      	ldr	r3, [r4, #0]
   12956:	463a      	mov	r2, r7
   12958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1295c:	6023      	str	r3, [r4, #0]
   1295e:	e9cd 1102 	strd	r1, r1, [sp, #8]
   12962:	e9cd 5600 	strd	r5, r6, [sp]
   12966:	6803      	ldr	r3, [r0, #0]
   12968:	4669      	mov	r1, sp
   1296a:	689b      	ldr	r3, [r3, #8]
   1296c:	4798      	blx	r3
   1296e:	4605      	mov	r5, r0
   12970:	69e0      	ldr	r0, [r4, #28]
   12972:	6803      	ldr	r3, [r0, #0]
   12974:	68db      	ldr	r3, [r3, #12]
   12976:	4798      	blx	r3
   12978:	3001      	adds	r0, #1
   1297a:	d003      	beq.n	12984 <logobj_interface_read+0x6c>
   1297c:	6823      	ldr	r3, [r4, #0]
   1297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12982:	6023      	str	r3, [r4, #0]
   12984:	4628      	mov	r0, r5
   12986:	b005      	add	sp, #20
   12988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1298c:	6822      	ldr	r2, [r4, #0]
   1298e:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   12992:	d1d6      	bne.n	12942 <logobj_interface_read+0x2a>
   12994:	4798      	blx	r3
   12996:	1c43      	adds	r3, r0, #1
   12998:	d1d6      	bne.n	12948 <logobj_interface_read+0x30>
   1299a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1299e:	6a23      	ldr	r3, [r4, #32]
   129a0:	4611      	mov	r1, r2
   129a2:	2b00      	cmp	r3, #0
   129a4:	bf08      	it	eq
   129a6:	4603      	moveq	r3, r0
   129a8:	4640      	mov	r0, r8
   129aa:	f005 ffe5 	bl	18978 <interface_socket_wait>
   129ae:	b158      	cbz	r0, 129c8 <logobj_interface_read+0xb0>
   129b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   129b4:	f7fe fece 	bl	11754 <bsd_os_errno_set>
   129b8:	4628      	mov	r0, r5
   129ba:	b005      	add	sp, #20
   129bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   129c0:	2023      	movs	r0, #35	; 0x23
   129c2:	e7f5      	b.n	129b0 <logobj_interface_read+0x98>
   129c4:	461d      	mov	r5, r3
   129c6:	e7d4      	b.n	12972 <logobj_interface_read+0x5a>
   129c8:	4640      	mov	r0, r8
   129ca:	f006 f841 	bl	18a50 <interface_socket_from_handle_get>
   129ce:	4603      	mov	r3, r0
   129d0:	2800      	cmp	r0, #0
   129d2:	d0b9      	beq.n	12948 <logobj_interface_read+0x30>
   129d4:	6840      	ldr	r0, [r0, #4]
   129d6:	2800      	cmp	r0, #0
   129d8:	d0b6      	beq.n	12948 <logobj_interface_read+0x30>
   129da:	f8c3 9004 	str.w	r9, [r3, #4]
   129de:	e7e7      	b.n	129b0 <logobj_interface_read+0x98>
   129e0:	2016      	movs	r0, #22
   129e2:	f7fe feb7 	bl	11754 <bsd_os_errno_set>
   129e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   129ea:	e7cb      	b.n	12984 <logobj_interface_read+0x6c>
   129ec:	2009      	movs	r0, #9
   129ee:	f7fe feb1 	bl	11754 <bsd_os_errno_set>
   129f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   129f6:	e7c5      	b.n	12984 <logobj_interface_read+0x6c>

000129f8 <logobj_interface_write>:
   129f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129fc:	b082      	sub	sp, #8
   129fe:	2900      	cmp	r1, #0
   12a00:	d05b      	beq.n	12aba <logobj_interface_write+0xc2>
   12a02:	2a04      	cmp	r2, #4
   12a04:	d159      	bne.n	12aba <logobj_interface_write+0xc2>
   12a06:	461e      	mov	r6, r3
   12a08:	4607      	mov	r7, r0
   12a0a:	460d      	mov	r5, r1
   12a0c:	f006 f820 	bl	18a50 <interface_socket_from_handle_get>
   12a10:	4604      	mov	r4, r0
   12a12:	2800      	cmp	r0, #0
   12a14:	d067      	beq.n	12ae6 <logobj_interface_write+0xee>
   12a16:	07b0      	lsls	r0, r6, #30
   12a18:	d526      	bpl.n	12a68 <logobj_interface_write+0x70>
   12a1a:	6823      	ldr	r3, [r4, #0]
   12a1c:	039b      	lsls	r3, r3, #14
   12a1e:	d55e      	bpl.n	12ade <logobj_interface_write+0xe6>
   12a20:	2600      	movs	r6, #0
   12a22:	6823      	ldr	r3, [r4, #0]
   12a24:	2100      	movs	r1, #0
   12a26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12a2a:	6023      	str	r3, [r4, #0]
   12a2c:	a801      	add	r0, sp, #4
   12a2e:	f8d5 8000 	ldr.w	r8, [r5]
   12a32:	f7ff fde7 	bl	12604 <rpc_logobj_client_request_alloc>
   12a36:	b9f8      	cbnz	r0, 12a78 <logobj_interface_write+0x80>
   12a38:	2504      	movs	r5, #4
   12a3a:	9b01      	ldr	r3, [sp, #4]
   12a3c:	f247 0103 	movw	r1, #28675	; 0x7003
   12a40:	f8c3 800c 	str.w	r8, [r3, #12]
   12a44:	7258      	strb	r0, [r3, #9]
   12a46:	7298      	strb	r0, [r3, #10]
   12a48:	72d8      	strb	r0, [r3, #11]
   12a4a:	721d      	strb	r5, [r3, #8]
   12a4c:	4618      	mov	r0, r3
   12a4e:	f7ff fdf1 	bl	12634 <rpc_logobj_client_request_send>
   12a52:	4680      	mov	r8, r0
   12a54:	bb40      	cbnz	r0, 12aa8 <logobj_interface_write+0xb0>
   12a56:	b9ce      	cbnz	r6, 12a8c <logobj_interface_write+0x94>
   12a58:	4628      	mov	r0, r5
   12a5a:	6823      	ldr	r3, [r4, #0]
   12a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12a60:	6023      	str	r3, [r4, #0]
   12a62:	b002      	add	sp, #8
   12a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a68:	6823      	ldr	r3, [r4, #0]
   12a6a:	00d9      	lsls	r1, r3, #3
   12a6c:	d4d5      	bmi.n	12a1a <logobj_interface_write+0x22>
   12a6e:	6823      	ldr	r3, [r4, #0]
   12a70:	039a      	lsls	r2, r3, #14
   12a72:	d536      	bpl.n	12ae2 <logobj_interface_write+0xea>
   12a74:	2601      	movs	r6, #1
   12a76:	e7d4      	b.n	12a22 <logobj_interface_write+0x2a>
   12a78:	200c      	movs	r0, #12
   12a7a:	6823      	ldr	r3, [r4, #0]
   12a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12a80:	6023      	str	r3, [r4, #0]
   12a82:	f7fe fe67 	bl	11754 <bsd_os_errno_set>
   12a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a8a:	e7ea      	b.n	12a62 <logobj_interface_write+0x6a>
   12a8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a94:	4611      	mov	r1, r2
   12a96:	4638      	mov	r0, r7
   12a98:	f005 ff6e 	bl	18978 <interface_socket_wait>
   12a9c:	b198      	cbz	r0, 12ac6 <logobj_interface_write+0xce>
   12a9e:	6823      	ldr	r3, [r4, #0]
   12aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12aa4:	6023      	str	r3, [r4, #0]
   12aa6:	e7ec      	b.n	12a82 <logobj_interface_write+0x8a>
   12aa8:	9801      	ldr	r0, [sp, #4]
   12aaa:	f7ff fdd9 	bl	12660 <rpc_logobj_client_message_free>
   12aae:	6823      	ldr	r3, [r4, #0]
   12ab0:	2005      	movs	r0, #5
   12ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12ab6:	6023      	str	r3, [r4, #0]
   12ab8:	e7e3      	b.n	12a82 <logobj_interface_write+0x8a>
   12aba:	2016      	movs	r0, #22
   12abc:	f7fe fe4a 	bl	11754 <bsd_os_errno_set>
   12ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ac4:	e7cd      	b.n	12a62 <logobj_interface_write+0x6a>
   12ac6:	4638      	mov	r0, r7
   12ac8:	f005 ffc2 	bl	18a50 <interface_socket_from_handle_get>
   12acc:	4603      	mov	r3, r0
   12ace:	2800      	cmp	r0, #0
   12ad0:	d0c2      	beq.n	12a58 <logobj_interface_write+0x60>
   12ad2:	6840      	ldr	r0, [r0, #4]
   12ad4:	2800      	cmp	r0, #0
   12ad6:	d0bf      	beq.n	12a58 <logobj_interface_write+0x60>
   12ad8:	f8c3 8004 	str.w	r8, [r3, #4]
   12adc:	e7df      	b.n	12a9e <logobj_interface_write+0xa6>
   12ade:	2073      	movs	r0, #115	; 0x73
   12ae0:	e7cf      	b.n	12a82 <logobj_interface_write+0x8a>
   12ae2:	2009      	movs	r0, #9
   12ae4:	e7cd      	b.n	12a82 <logobj_interface_write+0x8a>
   12ae6:	2009      	movs	r0, #9
   12ae8:	f7fe fe34 	bl	11754 <bsd_os_errno_set>
   12aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12af0:	e7b7      	b.n	12a62 <logobj_interface_write+0x6a>
   12af2:	bf00      	nop

00012af4 <logobj_interface_setopt>:
   12af4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12af6:	2901      	cmp	r1, #1
   12af8:	b085      	sub	sp, #20
   12afa:	d068      	beq.n	12bce <logobj_interface_setopt+0xda>
   12afc:	461e      	mov	r6, r3
   12afe:	f240 2305 	movw	r3, #517	; 0x205
   12b02:	4299      	cmp	r1, r3
   12b04:	f040 8095 	bne.w	12c32 <logobj_interface_setopt+0x13e>
   12b08:	4607      	mov	r7, r0
   12b0a:	4615      	mov	r5, r2
   12b0c:	f005 ffa0 	bl	18a50 <interface_socket_from_handle_get>
   12b10:	4604      	mov	r4, r0
   12b12:	2800      	cmp	r0, #0
   12b14:	f000 80b2 	beq.w	12c7c <logobj_interface_setopt+0x188>
   12b18:	2d01      	cmp	r5, #1
   12b1a:	d019      	beq.n	12b50 <logobj_interface_setopt+0x5c>
   12b1c:	2d02      	cmp	r5, #2
   12b1e:	d010      	beq.n	12b42 <logobj_interface_setopt+0x4e>
   12b20:	252a      	movs	r5, #42	; 0x2a
   12b22:	6803      	ldr	r3, [r0, #0]
   12b24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12b28:	6023      	str	r3, [r4, #0]
   12b2a:	6823      	ldr	r3, [r4, #0]
   12b2c:	4628      	mov	r0, r5
   12b2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12b32:	6023      	str	r3, [r4, #0]
   12b34:	f7fe fe0e 	bl	11754 <bsd_os_errno_set>
   12b38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12b3c:	4628      	mov	r0, r5
   12b3e:	b005      	add	sp, #20
   12b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b42:	b116      	cbz	r6, 12b4a <logobj_interface_setopt+0x56>
   12b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12b46:	2b01      	cmp	r3, #1
   12b48:	d049      	beq.n	12bde <logobj_interface_setopt+0xea>
   12b4a:	6823      	ldr	r3, [r4, #0]
   12b4c:	2516      	movs	r5, #22
   12b4e:	e7e9      	b.n	12b24 <logobj_interface_setopt+0x30>
   12b50:	2e00      	cmp	r6, #0
   12b52:	d0fa      	beq.n	12b4a <logobj_interface_setopt+0x56>
   12b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12b56:	2b04      	cmp	r3, #4
   12b58:	d1f7      	bne.n	12b4a <logobj_interface_setopt+0x56>
   12b5a:	2100      	movs	r1, #0
   12b5c:	a803      	add	r0, sp, #12
   12b5e:	f7ff fd51 	bl	12604 <rpc_logobj_client_request_alloc>
   12b62:	4605      	mov	r5, r0
   12b64:	2800      	cmp	r0, #0
   12b66:	d16a      	bne.n	12c3e <logobj_interface_setopt+0x14a>
   12b68:	9803      	ldr	r0, [sp, #12]
   12b6a:	2208      	movs	r2, #8
   12b6c:	4629      	mov	r1, r5
   12b6e:	300c      	adds	r0, #12
   12b70:	f00a fc69 	bl	1d446 <memset>
   12b74:	9803      	ldr	r0, [sp, #12]
   12b76:	4631      	mov	r1, r6
   12b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12b7a:	300c      	adds	r0, #12
   12b7c:	f00a fc39 	bl	1d3f2 <memcpy>
   12b80:	2308      	movs	r3, #8
   12b82:	9803      	ldr	r0, [sp, #12]
   12b84:	f247 0102 	movw	r1, #28674	; 0x7002
   12b88:	7203      	strb	r3, [r0, #8]
   12b8a:	7245      	strb	r5, [r0, #9]
   12b8c:	7285      	strb	r5, [r0, #10]
   12b8e:	72c5      	strb	r5, [r0, #11]
   12b90:	6823      	ldr	r3, [r4, #0]
   12b92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12b96:	6023      	str	r3, [r4, #0]
   12b98:	f7ff fd4c 	bl	12634 <rpc_logobj_client_request_send>
   12b9c:	2800      	cmp	r0, #0
   12b9e:	d151      	bne.n	12c44 <logobj_interface_setopt+0x150>
   12ba0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ba8:	4611      	mov	r1, r2
   12baa:	4638      	mov	r0, r7
   12bac:	f005 fee4 	bl	18978 <interface_socket_wait>
   12bb0:	4605      	mov	r5, r0
   12bb2:	2800      	cmp	r0, #0
   12bb4:	d13b      	bne.n	12c2e <logobj_interface_setopt+0x13a>
   12bb6:	4638      	mov	r0, r7
   12bb8:	f005 ff4a 	bl	18a50 <interface_socket_from_handle_get>
   12bbc:	2800      	cmp	r0, #0
   12bbe:	d04f      	beq.n	12c60 <logobj_interface_setopt+0x16c>
   12bc0:	6843      	ldr	r3, [r0, #4]
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	d04c      	beq.n	12c60 <logobj_interface_setopt+0x16c>
   12bc6:	2200      	movs	r2, #0
   12bc8:	461d      	mov	r5, r3
   12bca:	6042      	str	r2, [r0, #4]
   12bcc:	e02f      	b.n	12c2e <logobj_interface_setopt+0x13a>
   12bce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12bd0:	9400      	str	r4, [sp, #0]
   12bd2:	f005 ff65 	bl	18aa0 <interface_socket_setopt>
   12bd6:	4605      	mov	r5, r0
   12bd8:	4628      	mov	r0, r5
   12bda:	b005      	add	sp, #20
   12bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bde:	2100      	movs	r1, #0
   12be0:	a803      	add	r0, sp, #12
   12be2:	7835      	ldrb	r5, [r6, #0]
   12be4:	f7ff fd0e 	bl	12604 <rpc_logobj_client_request_alloc>
   12be8:	bb48      	cbnz	r0, 12c3e <logobj_interface_setopt+0x14a>
   12bea:	2d01      	cmp	r5, #1
   12bec:	bf08      	it	eq
   12bee:	4b26      	ldreq	r3, [pc, #152]	; (12c88 <logobj_interface_setopt+0x194>)
   12bf0:	f04f 0204 	mov.w	r2, #4
   12bf4:	bf08      	it	eq
   12bf6:	701d      	strbeq	r5, [r3, #0]
   12bf8:	2300      	movs	r3, #0
   12bfa:	9803      	ldr	r0, [sp, #12]
   12bfc:	f247 0101 	movw	r1, #28673	; 0x7001
   12c00:	7243      	strb	r3, [r0, #9]
   12c02:	60c5      	str	r5, [r0, #12]
   12c04:	7283      	strb	r3, [r0, #10]
   12c06:	72c3      	strb	r3, [r0, #11]
   12c08:	7202      	strb	r2, [r0, #8]
   12c0a:	6823      	ldr	r3, [r4, #0]
   12c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   12c10:	6023      	str	r3, [r4, #0]
   12c12:	f7ff fd0f 	bl	12634 <rpc_logobj_client_request_send>
   12c16:	4606      	mov	r6, r0
   12c18:	b9a0      	cbnz	r0, 12c44 <logobj_interface_setopt+0x150>
   12c1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   12c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c22:	4611      	mov	r1, r2
   12c24:	4638      	mov	r0, r7
   12c26:	f005 fea7 	bl	18978 <interface_socket_wait>
   12c2a:	4605      	mov	r5, r0
   12c2c:	b180      	cbz	r0, 12c50 <logobj_interface_setopt+0x15c>
   12c2e:	6823      	ldr	r3, [r4, #0]
   12c30:	e778      	b.n	12b24 <logobj_interface_setopt+0x30>
   12c32:	202a      	movs	r0, #42	; 0x2a
   12c34:	f7fe fd8e 	bl	11754 <bsd_os_errno_set>
   12c38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c3c:	e77e      	b.n	12b3c <logobj_interface_setopt+0x48>
   12c3e:	6823      	ldr	r3, [r4, #0]
   12c40:	250c      	movs	r5, #12
   12c42:	e76f      	b.n	12b24 <logobj_interface_setopt+0x30>
   12c44:	9803      	ldr	r0, [sp, #12]
   12c46:	f7ff fd0b 	bl	12660 <rpc_logobj_client_message_free>
   12c4a:	2505      	movs	r5, #5
   12c4c:	6823      	ldr	r3, [r4, #0]
   12c4e:	e769      	b.n	12b24 <logobj_interface_setopt+0x30>
   12c50:	4638      	mov	r0, r7
   12c52:	f005 fefd 	bl	18a50 <interface_socket_from_handle_get>
   12c56:	b140      	cbz	r0, 12c6a <logobj_interface_setopt+0x176>
   12c58:	6845      	ldr	r5, [r0, #4]
   12c5a:	b135      	cbz	r5, 12c6a <logobj_interface_setopt+0x176>
   12c5c:	6046      	str	r6, [r0, #4]
   12c5e:	e7e6      	b.n	12c2e <logobj_interface_setopt+0x13a>
   12c60:	4631      	mov	r1, r6
   12c62:	2204      	movs	r2, #4
   12c64:	4809      	ldr	r0, [pc, #36]	; (12c8c <logobj_interface_setopt+0x198>)
   12c66:	f00a fbc4 	bl	1d3f2 <memcpy>
   12c6a:	6823      	ldr	r3, [r4, #0]
   12c6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   12c70:	6023      	str	r3, [r4, #0]
   12c72:	6823      	ldr	r3, [r4, #0]
   12c74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   12c78:	6023      	str	r3, [r4, #0]
   12c7a:	e75f      	b.n	12b3c <logobj_interface_setopt+0x48>
   12c7c:	2009      	movs	r0, #9
   12c7e:	f7fe fd69 	bl	11754 <bsd_os_errno_set>
   12c82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12c86:	e759      	b.n	12b3c <logobj_interface_setopt+0x48>
   12c88:	20026562 	.word	0x20026562
   12c8c:	200204a4 	.word	0x200204a4

00012c90 <logobj_interface_getopt>:
   12c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c92:	2901      	cmp	r1, #1
   12c94:	b083      	sub	sp, #12
   12c96:	9e08      	ldr	r6, [sp, #32]
   12c98:	d030      	beq.n	12cfc <logobj_interface_getopt+0x6c>
   12c9a:	461f      	mov	r7, r3
   12c9c:	f240 2305 	movw	r3, #517	; 0x205
   12ca0:	4299      	cmp	r1, r3
   12ca2:	d134      	bne.n	12d0e <logobj_interface_getopt+0x7e>
   12ca4:	4615      	mov	r5, r2
   12ca6:	f005 fed3 	bl	18a50 <interface_socket_from_handle_get>
   12caa:	2800      	cmp	r0, #0
   12cac:	d037      	beq.n	12d1e <logobj_interface_getopt+0x8e>
   12cae:	2d01      	cmp	r5, #1
   12cb0:	d015      	beq.n	12cde <logobj_interface_getopt+0x4e>
   12cb2:	2d02      	cmp	r5, #2
   12cb4:	d10b      	bne.n	12cce <logobj_interface_getopt+0x3e>
   12cb6:	b387      	cbz	r7, 12d1a <logobj_interface_getopt+0x8a>
   12cb8:	6833      	ldr	r3, [r6, #0]
   12cba:	b373      	cbz	r3, 12d1a <logobj_interface_getopt+0x8a>
   12cbc:	2300      	movs	r3, #0
   12cbe:	2201      	movs	r2, #1
   12cc0:	4618      	mov	r0, r3
   12cc2:	491a      	ldr	r1, [pc, #104]	; (12d2c <logobj_interface_getopt+0x9c>)
   12cc4:	7809      	ldrb	r1, [r1, #0]
   12cc6:	7039      	strb	r1, [r7, #0]
   12cc8:	6032      	str	r2, [r6, #0]
   12cca:	b003      	add	sp, #12
   12ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cce:	2009      	movs	r0, #9
   12cd0:	f7fe fd40 	bl	11754 <bsd_os_errno_set>
   12cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12cd8:	4618      	mov	r0, r3
   12cda:	b003      	add	sp, #12
   12cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cde:	b1e7      	cbz	r7, 12d1a <logobj_interface_getopt+0x8a>
   12ce0:	6833      	ldr	r3, [r6, #0]
   12ce2:	2b03      	cmp	r3, #3
   12ce4:	d919      	bls.n	12d1a <logobj_interface_getopt+0x8a>
   12ce6:	4638      	mov	r0, r7
   12ce8:	2204      	movs	r2, #4
   12cea:	4911      	ldr	r1, [pc, #68]	; (12d30 <logobj_interface_getopt+0xa0>)
   12cec:	f00a fb81 	bl	1d3f2 <memcpy>
   12cf0:	2300      	movs	r3, #0
   12cf2:	2204      	movs	r2, #4
   12cf4:	4618      	mov	r0, r3
   12cf6:	6032      	str	r2, [r6, #0]
   12cf8:	b003      	add	sp, #12
   12cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cfc:	9600      	str	r6, [sp, #0]
   12cfe:	f005 ff05 	bl	18b0c <interface_socket_getopt>
   12d02:	4603      	mov	r3, r0
   12d04:	2800      	cmp	r0, #0
   12d06:	d1e3      	bne.n	12cd0 <logobj_interface_getopt+0x40>
   12d08:	4618      	mov	r0, r3
   12d0a:	b003      	add	sp, #12
   12d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d0e:	202a      	movs	r0, #42	; 0x2a
   12d10:	f7fe fd20 	bl	11754 <bsd_os_errno_set>
   12d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d18:	e7de      	b.n	12cd8 <logobj_interface_getopt+0x48>
   12d1a:	2016      	movs	r0, #22
   12d1c:	e7d8      	b.n	12cd0 <logobj_interface_getopt+0x40>
   12d1e:	2009      	movs	r0, #9
   12d20:	f7fe fd18 	bl	11754 <bsd_os_errno_set>
   12d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d28:	e7d6      	b.n	12cd8 <logobj_interface_getopt+0x48>
   12d2a:	bf00      	nop
   12d2c:	20026563 	.word	0x20026563
   12d30:	200204a4 	.word	0x200204a4

00012d34 <logobj_interface_close>:
   12d34:	b510      	push	{r4, lr}
   12d36:	4604      	mov	r4, r0
   12d38:	f005 fe8a 	bl	18a50 <interface_socket_from_handle_get>
   12d3c:	b138      	cbz	r0, 12d4e <logobj_interface_close+0x1a>
   12d3e:	4620      	mov	r0, r4
   12d40:	f005 fdcc 	bl	188dc <interface_socket_free>
   12d44:	2300      	movs	r3, #0
   12d46:	4a05      	ldr	r2, [pc, #20]	; (12d5c <logobj_interface_close+0x28>)
   12d48:	4618      	mov	r0, r3
   12d4a:	6013      	str	r3, [r2, #0]
   12d4c:	bd10      	pop	{r4, pc}
   12d4e:	2009      	movs	r0, #9
   12d50:	f7fe fd00 	bl	11754 <bsd_os_errno_set>
   12d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d58:	bd10      	pop	{r4, pc}
   12d5a:	bf00      	nop
   12d5c:	200204a8 	.word	0x200204a8

00012d60 <packet_free_cb>:
   12d60:	6800      	ldr	r0, [r0, #0]
   12d62:	f004 ba31 	b.w	171c8 <rpc_at_client_data_free>
   12d66:	bf00      	nop

00012d68 <at_interface_write>:
   12d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d6a:	b083      	sub	sp, #12
   12d6c:	460f      	mov	r7, r1
   12d6e:	4615      	mov	r5, r2
   12d70:	4606      	mov	r6, r0
   12d72:	f005 fe6d 	bl	18a50 <interface_socket_from_handle_get>
   12d76:	2800      	cmp	r0, #0
   12d78:	d047      	beq.n	12e0a <at_interface_write+0xa2>
   12d7a:	6803      	ldr	r3, [r0, #0]
   12d7c:	4604      	mov	r4, r0
   12d7e:	039b      	lsls	r3, r3, #14
   12d80:	d543      	bpl.n	12e0a <at_interface_write+0xa2>
   12d82:	6803      	ldr	r3, [r0, #0]
   12d84:	4629      	mov	r1, r5
   12d86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12d8a:	6003      	str	r3, [r0, #0]
   12d8c:	6803      	ldr	r3, [r0, #0]
   12d8e:	a801      	add	r0, sp, #4
   12d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   12d94:	6023      	str	r3, [r4, #0]
   12d96:	f004 f9ed 	bl	17174 <rpc_at_client_request_alloc>
   12d9a:	bba0      	cbnz	r0, 12e06 <at_interface_write+0x9e>
   12d9c:	2204      	movs	r2, #4
   12d9e:	9b01      	ldr	r3, [sp, #4]
   12da0:	721a      	strb	r2, [r3, #8]
   12da2:	7258      	strb	r0, [r3, #9]
   12da4:	7298      	strb	r0, [r3, #10]
   12da6:	72d8      	strb	r0, [r3, #11]
   12da8:	60de      	str	r6, [r3, #12]
   12daa:	b985      	cbnz	r5, 12dce <at_interface_write+0x66>
   12dac:	4618      	mov	r0, r3
   12dae:	2101      	movs	r1, #1
   12db0:	f004 f9f4 	bl	1719c <rpc_at_client_request_send>
   12db4:	b9d0      	cbnz	r0, 12dec <at_interface_write+0x84>
   12db6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12dba:	4630      	mov	r0, r6
   12dbc:	4611      	mov	r1, r2
   12dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12dc2:	f005 fdd9 	bl	18978 <interface_socket_wait>
   12dc6:	b9a8      	cbnz	r0, 12df4 <at_interface_write+0x8c>
   12dc8:	4628      	mov	r0, r5
   12dca:	b003      	add	sp, #12
   12dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12dce:	4639      	mov	r1, r7
   12dd0:	6818      	ldr	r0, [r3, #0]
   12dd2:	462a      	mov	r2, r5
   12dd4:	f00a fb0d 	bl	1d3f2 <memcpy>
   12dd8:	2101      	movs	r1, #1
   12dda:	9801      	ldr	r0, [sp, #4]
   12ddc:	f004 f9de 	bl	1719c <rpc_at_client_request_send>
   12de0:	2800      	cmp	r0, #0
   12de2:	d0e8      	beq.n	12db6 <at_interface_write+0x4e>
   12de4:	9b01      	ldr	r3, [sp, #4]
   12de6:	6818      	ldr	r0, [r3, #0]
   12de8:	f004 f9ee 	bl	171c8 <rpc_at_client_data_free>
   12dec:	9801      	ldr	r0, [sp, #4]
   12dee:	f004 f9e3 	bl	171b8 <rpc_at_client_message_free>
   12df2:	2023      	movs	r0, #35	; 0x23
   12df4:	6823      	ldr	r3, [r4, #0]
   12df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12dfa:	6023      	str	r3, [r4, #0]
   12dfc:	f7fe fcaa 	bl	11754 <bsd_os_errno_set>
   12e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12e04:	e7e1      	b.n	12dca <at_interface_write+0x62>
   12e06:	200c      	movs	r0, #12
   12e08:	e7f4      	b.n	12df4 <at_interface_write+0x8c>
   12e0a:	2016      	movs	r0, #22
   12e0c:	e7f6      	b.n	12dfc <at_interface_write+0x94>
   12e0e:	bf00      	nop

00012e10 <at_interface_init>:
   12e10:	f004 b9aa 	b.w	17168 <rpc_at_client_init>

00012e14 <at_interface_open>:
   12e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e18:	2500      	movs	r5, #0
   12e1a:	b082      	sub	sp, #8
   12e1c:	ab02      	add	r3, sp, #8
   12e1e:	f843 5d08 	str.w	r5, [r3, #-8]!
   12e22:	4680      	mov	r8, r0
   12e24:	460f      	mov	r7, r1
   12e26:	4618      	mov	r0, r3
   12e28:	4616      	mov	r6, r2
   12e2a:	2102      	movs	r1, #2
   12e2c:	4a1d      	ldr	r2, [pc, #116]	; (12ea4 <at_interface_open+0x90>)
   12e2e:	f005 fcff 	bl	18830 <interface_socket_allocate>
   12e32:	9b00      	ldr	r3, [sp, #0]
   12e34:	4604      	mov	r4, r0
   12e36:	b30b      	cbz	r3, 12e7c <at_interface_open+0x68>
   12e38:	e9c3 8703 	strd	r8, r7, [r3, #12]
   12e3c:	615e      	str	r6, [r3, #20]
   12e3e:	4629      	mov	r1, r5
   12e40:	a801      	add	r0, sp, #4
   12e42:	f004 f997 	bl	17174 <rpc_at_client_request_alloc>
   12e46:	b9e8      	cbnz	r0, 12e84 <at_interface_open+0x70>
   12e48:	2204      	movs	r2, #4
   12e4a:	9b01      	ldr	r3, [sp, #4]
   12e4c:	2105      	movs	r1, #5
   12e4e:	7258      	strb	r0, [r3, #9]
   12e50:	7298      	strb	r0, [r3, #10]
   12e52:	72d8      	strb	r0, [r3, #11]
   12e54:	721a      	strb	r2, [r3, #8]
   12e56:	60dc      	str	r4, [r3, #12]
   12e58:	4618      	mov	r0, r3
   12e5a:	f004 f99f 	bl	1719c <rpc_at_client_request_send>
   12e5e:	b9d8      	cbnz	r0, 12e98 <at_interface_open+0x84>
   12e60:	2202      	movs	r2, #2
   12e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e66:	4611      	mov	r1, r2
   12e68:	4620      	mov	r0, r4
   12e6a:	f005 fd85 	bl	18978 <interface_socket_wait>
   12e6e:	4605      	mov	r5, r0
   12e70:	b948      	cbnz	r0, 12e86 <at_interface_open+0x72>
   12e72:	9a00      	ldr	r2, [sp, #0]
   12e74:	6813      	ldr	r3, [r2, #0]
   12e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12e7a:	6013      	str	r3, [r2, #0]
   12e7c:	4620      	mov	r0, r4
   12e7e:	b002      	add	sp, #8
   12e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e84:	250c      	movs	r5, #12
   12e86:	4620      	mov	r0, r4
   12e88:	f005 fd28 	bl	188dc <interface_socket_free>
   12e8c:	4628      	mov	r0, r5
   12e8e:	f7fe fc61 	bl	11754 <bsd_os_errno_set>
   12e92:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12e96:	e7f1      	b.n	12e7c <at_interface_open+0x68>
   12e98:	9801      	ldr	r0, [sp, #4]
   12e9a:	f004 f98d 	bl	171b8 <rpc_at_client_message_free>
   12e9e:	2523      	movs	r5, #35	; 0x23
   12ea0:	e7f1      	b.n	12e86 <at_interface_open+0x72>
   12ea2:	bf00      	nop
   12ea4:	00012d61 	.word	0x00012d61

00012ea8 <at_interface_close>:
   12ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12eaa:	b083      	sub	sp, #12
   12eac:	4606      	mov	r6, r0
   12eae:	f005 fdcf 	bl	18a50 <interface_socket_from_handle_get>
   12eb2:	2800      	cmp	r0, #0
   12eb4:	d03d      	beq.n	12f32 <at_interface_close+0x8a>
   12eb6:	230d      	movs	r3, #13
   12eb8:	6807      	ldr	r7, [r0, #0]
   12eba:	6003      	str	r3, [r0, #0]
   12ebc:	6803      	ldr	r3, [r0, #0]
   12ebe:	4604      	mov	r4, r0
   12ec0:	039b      	lsls	r3, r3, #14
   12ec2:	d41f      	bmi.n	12f04 <at_interface_close+0x5c>
   12ec4:	2100      	movs	r1, #0
   12ec6:	a801      	add	r0, sp, #4
   12ec8:	f004 f954 	bl	17174 <rpc_at_client_request_alloc>
   12ecc:	bb20      	cbnz	r0, 12f18 <at_interface_close+0x70>
   12ece:	2204      	movs	r2, #4
   12ed0:	9b01      	ldr	r3, [sp, #4]
   12ed2:	2106      	movs	r1, #6
   12ed4:	7258      	strb	r0, [r3, #9]
   12ed6:	7298      	strb	r0, [r3, #10]
   12ed8:	72d8      	strb	r0, [r3, #11]
   12eda:	721a      	strb	r2, [r3, #8]
   12edc:	60de      	str	r6, [r3, #12]
   12ede:	4618      	mov	r0, r3
   12ee0:	f004 f95c 	bl	1719c <rpc_at_client_request_send>
   12ee4:	b9d0      	cbnz	r0, 12f1c <at_interface_close+0x74>
   12ee6:	220e      	movs	r2, #14
   12ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12eec:	4611      	mov	r1, r2
   12eee:	4630      	mov	r0, r6
   12ef0:	f005 fd42 	bl	18978 <interface_socket_wait>
   12ef4:	4605      	mov	r5, r0
   12ef6:	b9a8      	cbnz	r0, 12f24 <at_interface_close+0x7c>
   12ef8:	4630      	mov	r0, r6
   12efa:	f005 fcef 	bl	188dc <interface_socket_free>
   12efe:	4628      	mov	r0, r5
   12f00:	b003      	add	sp, #12
   12f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f04:	6803      	ldr	r3, [r0, #0]
   12f06:	2100      	movs	r1, #0
   12f08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   12f0c:	6003      	str	r3, [r0, #0]
   12f0e:	a801      	add	r0, sp, #4
   12f10:	f004 f930 	bl	17174 <rpc_at_client_request_alloc>
   12f14:	2800      	cmp	r0, #0
   12f16:	d0da      	beq.n	12ece <at_interface_close+0x26>
   12f18:	250c      	movs	r5, #12
   12f1a:	e003      	b.n	12f24 <at_interface_close+0x7c>
   12f1c:	9801      	ldr	r0, [sp, #4]
   12f1e:	f004 f94b 	bl	171b8 <rpc_at_client_message_free>
   12f22:	2523      	movs	r5, #35	; 0x23
   12f24:	6027      	str	r7, [r4, #0]
   12f26:	4628      	mov	r0, r5
   12f28:	f7fe fc14 	bl	11754 <bsd_os_errno_set>
   12f2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12f30:	e7e5      	b.n	12efe <at_interface_close+0x56>
   12f32:	2516      	movs	r5, #22
   12f34:	e7f7      	b.n	12f26 <at_interface_close+0x7e>
   12f36:	bf00      	nop

00012f38 <at_interface_read>:
   12f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f3c:	b084      	sub	sp, #16
   12f3e:	4688      	mov	r8, r1
   12f40:	4615      	mov	r5, r2
   12f42:	461e      	mov	r6, r3
   12f44:	4607      	mov	r7, r0
   12f46:	f005 fd83 	bl	18a50 <interface_socket_from_handle_get>
   12f4a:	2800      	cmp	r0, #0
   12f4c:	d049      	beq.n	12fe2 <at_interface_read+0xaa>
   12f4e:	2300      	movs	r3, #0
   12f50:	e9cd 8500 	strd	r8, r5, [sp]
   12f54:	f016 0502 	ands.w	r5, r6, #2
   12f58:	4604      	mov	r4, r0
   12f5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   12f5e:	d00e      	beq.n	12f7e <at_interface_read+0x46>
   12f60:	e01e      	b.n	12fa0 <at_interface_read+0x68>
   12f62:	2d00      	cmp	r5, #0
   12f64:	d133      	bne.n	12fce <at_interface_read+0x96>
   12f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12f6a:	6a23      	ldr	r3, [r4, #32]
   12f6c:	4611      	mov	r1, r2
   12f6e:	2b00      	cmp	r3, #0
   12f70:	bf08      	it	eq
   12f72:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12f76:	4638      	mov	r0, r7
   12f78:	f005 fcfe 	bl	18978 <interface_socket_wait>
   12f7c:	4605      	mov	r5, r0
   12f7e:	6823      	ldr	r3, [r4, #0]
   12f80:	69e0      	ldr	r0, [r4, #28]
   12f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12f86:	6023      	str	r3, [r4, #0]
   12f88:	6803      	ldr	r3, [r0, #0]
   12f8a:	4632      	mov	r2, r6
   12f8c:	689b      	ldr	r3, [r3, #8]
   12f8e:	4669      	mov	r1, sp
   12f90:	4798      	blx	r3
   12f92:	f1b0 0800 	subs.w	r8, r0, #0
   12f96:	dbe4      	blt.n	12f62 <at_interface_read+0x2a>
   12f98:	4640      	mov	r0, r8
   12f9a:	b004      	add	sp, #16
   12f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fa0:	6803      	ldr	r3, [r0, #0]
   12fa2:	69c0      	ldr	r0, [r0, #28]
   12fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   12fa8:	6023      	str	r3, [r4, #0]
   12faa:	6803      	ldr	r3, [r0, #0]
   12fac:	4632      	mov	r2, r6
   12fae:	689b      	ldr	r3, [r3, #8]
   12fb0:	4669      	mov	r1, sp
   12fb2:	4798      	blx	r3
   12fb4:	f1b0 0800 	subs.w	r8, r0, #0
   12fb8:	daee      	bge.n	12f98 <at_interface_read+0x60>
   12fba:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   12fbe:	d1eb      	bne.n	12f98 <at_interface_read+0x60>
   12fc0:	2023      	movs	r0, #35	; 0x23
   12fc2:	f7fe fbc7 	bl	11754 <bsd_os_errno_set>
   12fc6:	4640      	mov	r0, r8
   12fc8:	b004      	add	sp, #16
   12fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fce:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   12fd2:	d1e1      	bne.n	12f98 <at_interface_read+0x60>
   12fd4:	4628      	mov	r0, r5
   12fd6:	f7fe fbbd 	bl	11754 <bsd_os_errno_set>
   12fda:	4640      	mov	r0, r8
   12fdc:	b004      	add	sp, #16
   12fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fe2:	2016      	movs	r0, #22
   12fe4:	f7fe fbb6 	bl	11754 <bsd_os_errno_set>
   12fe8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   12fec:	e7d4      	b.n	12f98 <at_interface_read+0x60>
   12fee:	bf00      	nop

00012ff0 <at_interface_getopt>:
   12ff0:	f005 bd8c 	b.w	18b0c <interface_socket_getopt>

00012ff4 <at_interface_setopt>:
   12ff4:	f005 bd54 	b.w	18aa0 <interface_socket_setopt>

00012ff8 <rpc_at_event_handler>:
   12ff8:	b570      	push	{r4, r5, r6, lr}
   12ffa:	4606      	mov	r6, r0
   12ffc:	b084      	sub	sp, #16
   12ffe:	68c0      	ldr	r0, [r0, #12]
   13000:	460d      	mov	r5, r1
   13002:	f005 fd25 	bl	18a50 <interface_socket_from_handle_get>
   13006:	4604      	mov	r4, r0
   13008:	b348      	cbz	r0, 1305e <rpc_at_event_handler+0x66>
   1300a:	6803      	ldr	r3, [r0, #0]
   1300c:	b29b      	uxth	r3, r3
   1300e:	2b01      	cmp	r3, #1
   13010:	d01f      	beq.n	13052 <rpc_at_event_handler+0x5a>
   13012:	6803      	ldr	r3, [r0, #0]
   13014:	b29b      	uxth	r3, r3
   13016:	2b0d      	cmp	r3, #13
   13018:	d029      	beq.n	1306e <rpc_at_event_handler+0x76>
   1301a:	6803      	ldr	r3, [r0, #0]
   1301c:	b29b      	uxth	r3, r3
   1301e:	2b02      	cmp	r3, #2
   13020:	d02d      	beq.n	1307e <rpc_at_event_handler+0x86>
   13022:	3d03      	subs	r5, #3
   13024:	2d01      	cmp	r5, #1
   13026:	d817      	bhi.n	13058 <rpc_at_event_handler+0x60>
   13028:	2500      	movs	r5, #0
   1302a:	6873      	ldr	r3, [r6, #4]
   1302c:	6832      	ldr	r2, [r6, #0]
   1302e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   13032:	e9cd 2300 	strd	r2, r3, [sp]
   13036:	69e0      	ldr	r0, [r4, #28]
   13038:	4669      	mov	r1, sp
   1303a:	6803      	ldr	r3, [r0, #0]
   1303c:	685b      	ldr	r3, [r3, #4]
   1303e:	4798      	blx	r3
   13040:	3001      	adds	r0, #1
   13042:	d019      	beq.n	13078 <rpc_at_event_handler+0x80>
   13044:	4628      	mov	r0, r5
   13046:	6823      	ldr	r3, [r4, #0]
   13048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1304c:	6023      	str	r3, [r4, #0]
   1304e:	b004      	add	sp, #16
   13050:	bd70      	pop	{r4, r5, r6, pc}
   13052:	2d02      	cmp	r5, #2
   13054:	d1e5      	bne.n	13022 <rpc_at_event_handler+0x2a>
   13056:	6005      	str	r5, [r0, #0]
   13058:	2000      	movs	r0, #0
   1305a:	b004      	add	sp, #16
   1305c:	bd70      	pop	{r4, r5, r6, pc}
   1305e:	6830      	ldr	r0, [r6, #0]
   13060:	2800      	cmp	r0, #0
   13062:	d0f9      	beq.n	13058 <rpc_at_event_handler+0x60>
   13064:	f004 f8b0 	bl	171c8 <rpc_at_client_data_free>
   13068:	4620      	mov	r0, r4
   1306a:	b004      	add	sp, #16
   1306c:	bd70      	pop	{r4, r5, r6, pc}
   1306e:	2d02      	cmp	r5, #2
   13070:	d1d7      	bne.n	13022 <rpc_at_event_handler+0x2a>
   13072:	230e      	movs	r3, #14
   13074:	6003      	str	r3, [r0, #0]
   13076:	e7ef      	b.n	13058 <rpc_at_event_handler+0x60>
   13078:	2002      	movs	r0, #2
   1307a:	b004      	add	sp, #16
   1307c:	bd70      	pop	{r4, r5, r6, pc}
   1307e:	6803      	ldr	r3, [r0, #0]
   13080:	029b      	lsls	r3, r3, #10
   13082:	d5ce      	bpl.n	13022 <rpc_at_event_handler+0x2a>
   13084:	2d02      	cmp	r5, #2
   13086:	d1cc      	bne.n	13022 <rpc_at_event_handler+0x2a>
   13088:	6803      	ldr	r3, [r0, #0]
   1308a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1308e:	6003      	str	r3, [r0, #0]
   13090:	6803      	ldr	r3, [r0, #0]
   13092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13096:	6003      	str	r3, [r0, #0]
   13098:	e7de      	b.n	13058 <rpc_at_event_handler+0x60>
   1309a:	bf00      	nop

0001309c <dfu_client_event_handler>:
   1309c:	f850 1b08 	ldr.w	r1, [r0], #8
   130a0:	0c09      	lsrs	r1, r1, #16
   130a2:	f001 b891 	b.w	141c8 <rpc_dfu_event_handler>
   130a6:	bf00      	nop

000130a8 <rpc_dfu_client_init>:
   130a8:	4801      	ldr	r0, [pc, #4]	; (130b0 <rpc_dfu_client_init+0x8>)
   130aa:	f005 be2f 	b.w	18d0c <rpc_client_register>
   130ae:	bf00      	nop
   130b0:	0001f39c 	.word	0x0001f39c

000130b4 <rpc_dfu_client_request_alloc>:
   130b4:	2300      	movs	r3, #0
   130b6:	b510      	push	{r4, lr}
   130b8:	b082      	sub	sp, #8
   130ba:	9301      	str	r3, [sp, #4]
   130bc:	b158      	cbz	r0, 130d6 <rpc_dfu_client_request_alloc+0x22>
   130be:	4604      	mov	r4, r0
   130c0:	aa01      	add	r2, sp, #4
   130c2:	2006      	movs	r0, #6
   130c4:	f006 f85a 	bl	1917c <rpc_message_alloc>
   130c8:	b918      	cbnz	r0, 130d2 <rpc_dfu_client_request_alloc+0x1e>
   130ca:	9b01      	ldr	r3, [sp, #4]
   130cc:	b10b      	cbz	r3, 130d2 <rpc_dfu_client_request_alloc+0x1e>
   130ce:	3308      	adds	r3, #8
   130d0:	6023      	str	r3, [r4, #0]
   130d2:	b002      	add	sp, #8
   130d4:	bd10      	pop	{r4, pc}
   130d6:	2007      	movs	r0, #7
   130d8:	b002      	add	sp, #8
   130da:	bd10      	pop	{r4, pc}

000130dc <rpc_dfu_client_request_send>:
   130dc:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   130e0:	d10b      	bne.n	130fa <rpc_dfu_client_request_send+0x1e>
   130e2:	b160      	cbz	r0, 130fe <rpc_dfu_client_request_send+0x22>
   130e4:	4603      	mov	r3, r0
   130e6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   130ea:	2006      	movs	r0, #6
   130ec:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   130f0:	f843 1d08 	str.w	r1, [r3, #-8]!
   130f4:	4619      	mov	r1, r3
   130f6:	f006 b829 	b.w	1914c <rpc_message_send>
   130fa:	200f      	movs	r0, #15
   130fc:	4770      	bx	lr
   130fe:	2007      	movs	r0, #7
   13100:	4770      	bx	lr
   13102:	bf00      	nop

00013104 <rpc_dfu_client_message_free>:
   13104:	b120      	cbz	r0, 13110 <rpc_dfu_client_message_free+0xc>
   13106:	f1a0 0108 	sub.w	r1, r0, #8
   1310a:	2006      	movs	r0, #6
   1310c:	f006 b868 	b.w	191e0 <rpc_message_free>
   13110:	2007      	movs	r0, #7
   13112:	4770      	bx	lr

00013114 <rpc_dfu_client_data_free>:
   13114:	b118      	cbz	r0, 1311e <rpc_dfu_client_data_free+0xa>
   13116:	4601      	mov	r1, r0
   13118:	2006      	movs	r0, #6
   1311a:	f006 b973 	b.w	19404 <rpc_message_data_free>
   1311e:	2007      	movs	r0, #7
   13120:	4770      	bx	lr
   13122:	bf00      	nop

00013124 <mem_free>:
   13124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13128:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 131f8 <mem_free+0xd4>
   1312c:	b083      	sub	sp, #12
   1312e:	9000      	str	r0, [sp, #0]
   13130:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   13134:	f8dc 3008 	ldr.w	r3, [ip, #8]
   13138:	b12b      	cbz	r3, 13146 <mem_free+0x22>
   1313a:	f8dc 2000 	ldr.w	r2, [ip]
   1313e:	9c00      	ldr	r4, [sp, #0]
   13140:	7810      	ldrb	r0, [r2, #0]
   13142:	42a0      	cmp	r0, r4
   13144:	d006      	beq.n	13154 <mem_free+0x30>
   13146:	f10c 0c0c 	add.w	ip, ip, #12
   1314a:	45e3      	cmp	fp, ip
   1314c:	d1f2      	bne.n	13134 <mem_free+0x10>
   1314e:	b003      	add	sp, #12
   13150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13154:	f8dc a004 	ldr.w	sl, [ip, #4]
   13158:	eb03 080a 	add.w	r8, r3, sl
   1315c:	45c2      	cmp	sl, r8
   1315e:	d2f2      	bcs.n	13146 <mem_free+0x22>
   13160:	6853      	ldr	r3, [r2, #4]
   13162:	f8cd c004 	str.w	ip, [sp, #4]
   13166:	46d6      	mov	lr, sl
   13168:	469c      	mov	ip, r3
   1316a:	f8d2 9010 	ldr.w	r9, [r2, #16]
   1316e:	8997      	ldrh	r7, [r2, #12]
   13170:	ebae 000a 	sub.w	r0, lr, sl
   13174:	b3df      	cbz	r7, 131ee <mem_free+0xca>
   13176:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1317a:	4290      	cmp	r0, r2
   1317c:	d31c      	bcc.n	131b8 <mem_free+0x94>
   1317e:	4665      	mov	r5, ip
   13180:	2400      	movs	r4, #0
   13182:	f109 0304 	add.w	r3, r9, #4
   13186:	e003      	b.n	13190 <mem_free+0x6c>
   13188:	885a      	ldrh	r2, [r3, #2]
   1318a:	3304      	adds	r3, #4
   1318c:	4282      	cmp	r2, r0
   1318e:	d815      	bhi.n	131bc <mem_free+0x98>
   13190:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   13194:	3401      	adds	r4, #1
   13196:	42a7      	cmp	r7, r4
   13198:	fb02 5506 	mla	r5, r2, r6, r5
   1319c:	eba0 0002 	sub.w	r0, r0, r2
   131a0:	461e      	mov	r6, r3
   131a2:	d1f1      	bne.n	13188 <mem_free+0x64>
   131a4:	2000      	movs	r0, #0
   131a6:	4281      	cmp	r1, r0
   131a8:	d00d      	beq.n	131c6 <mem_free+0xa2>
   131aa:	f10e 0e01 	add.w	lr, lr, #1
   131ae:	45f0      	cmp	r8, lr
   131b0:	d1de      	bne.n	13170 <mem_free+0x4c>
   131b2:	f8dd c004 	ldr.w	ip, [sp, #4]
   131b6:	e7c6      	b.n	13146 <mem_free+0x22>
   131b8:	4665      	mov	r5, ip
   131ba:	464e      	mov	r6, r9
   131bc:	8833      	ldrh	r3, [r6, #0]
   131be:	fb00 5003 	mla	r0, r0, r3, r5
   131c2:	4281      	cmp	r1, r0
   131c4:	d1f1      	bne.n	131aa <mem_free+0x86>
   131c6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   131ca:	f8dd c004 	ldr.w	ip, [sp, #4]
   131ce:	d0ba      	beq.n	13146 <mem_free+0x22>
   131d0:	2301      	movs	r3, #1
   131d2:	4a08      	ldr	r2, [pc, #32]	; (131f4 <mem_free+0xd0>)
   131d4:	ea4f 115e 	mov.w	r1, lr, lsr #5
   131d8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   131dc:	f00e 0e1f 	and.w	lr, lr, #31
   131e0:	fa03 fe0e 	lsl.w	lr, r3, lr
   131e4:	ea4e 0000 	orr.w	r0, lr, r0
   131e8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   131ec:	e7af      	b.n	1314e <mem_free+0x2a>
   131ee:	4638      	mov	r0, r7
   131f0:	e7d9      	b.n	131a6 <mem_free+0x82>
   131f2:	bf00      	nop
   131f4:	200204ac 	.word	0x200204ac
   131f8:	200204f0 	.word	0x200204f0

000131fc <mem_alloc.constprop.5>:
   131fc:	2800      	cmp	r0, #0
   131fe:	d050      	beq.n	132a2 <mem_alloc.constprop.5+0xa6>
   13200:	4b6d      	ldr	r3, [pc, #436]	; (133b8 <mem_alloc.constprop.5+0x1bc>)
   13202:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13206:	4290      	cmp	r0, r2
   13208:	d84b      	bhi.n	132a2 <mem_alloc.constprop.5+0xa6>
   1320a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1320e:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   13212:	b083      	sub	sp, #12
   13214:	f1bb 0f00 	cmp.w	fp, #0
   13218:	d054      	beq.n	132c4 <mem_alloc.constprop.5+0xc8>
   1321a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   1321e:	4691      	mov	r9, r2
   13220:	2600      	movs	r6, #0
   13222:	f04f 0812 	mov.w	r8, #18
   13226:	4f65      	ldr	r7, [pc, #404]	; (133bc <mem_alloc.constprop.5+0x1c0>)
   13228:	9201      	str	r2, [sp, #4]
   1322a:	f10b 0e11 	add.w	lr, fp, #17
   1322e:	eb06 0209 	add.w	r2, r6, r9
   13232:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   13236:	3201      	adds	r2, #1
   13238:	0852      	lsrs	r2, r2, #1
   1323a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1323e:	f102 0112 	add.w	r1, r2, #18
   13242:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   13246:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1324a:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1324e:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   13252:	f8dc c004 	ldr.w	ip, [ip, #4]
   13256:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1325a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1325e:	f8da a010 	ldr.w	sl, [sl, #16]
   13262:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   13266:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1326a:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   1326e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   13272:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   13276:	6849      	ldr	r1, [r1, #4]
   13278:	692d      	ldr	r5, [r5, #16]
   1327a:	6924      	ldr	r4, [r4, #16]
   1327c:	f8dc c004 	ldr.w	ip, [ip, #4]
   13280:	4550      	cmp	r0, sl
   13282:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   13286:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1328a:	d915      	bls.n	132b8 <mem_alloc.constprop.5+0xbc>
   1328c:	4288      	cmp	r0, r1
   1328e:	d211      	bcs.n	132b4 <mem_alloc.constprop.5+0xb8>
   13290:	42a8      	cmp	r0, r5
   13292:	d908      	bls.n	132a6 <mem_alloc.constprop.5+0xaa>
   13294:	1c56      	adds	r6, r2, #1
   13296:	45b1      	cmp	r9, r6
   13298:	f0c0 8087 	bcc.w	133aa <mem_alloc.constprop.5+0x1ae>
   1329c:	f102 0813 	add.w	r8, r2, #19
   132a0:	e7c5      	b.n	1322e <mem_alloc.constprop.5+0x32>
   132a2:	2000      	movs	r0, #0
   132a4:	4770      	bx	lr
   132a6:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   132aa:	454e      	cmp	r6, r9
   132ac:	d87d      	bhi.n	133aa <mem_alloc.constprop.5+0x1ae>
   132ae:	f102 0e11 	add.w	lr, r2, #17
   132b2:	e7bc      	b.n	1322e <mem_alloc.constprop.5+0x32>
   132b4:	f109 0601 	add.w	r6, r9, #1
   132b8:	45b3      	cmp	fp, r6
   132ba:	d007      	beq.n	132cc <mem_alloc.constprop.5+0xd0>
   132bc:	2e10      	cmp	r6, #16
   132be:	d001      	beq.n	132c4 <mem_alloc.constprop.5+0xc8>
   132c0:	45b3      	cmp	fp, r6
   132c2:	d808      	bhi.n	132d6 <mem_alloc.constprop.5+0xda>
   132c4:	2000      	movs	r0, #0
   132c6:	b003      	add	sp, #12
   132c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132cc:	9a01      	ldr	r2, [sp, #4]
   132ce:	2a10      	cmp	r2, #16
   132d0:	bf18      	it	ne
   132d2:	4616      	movne	r6, r2
   132d4:	d0f6      	beq.n	132c4 <mem_alloc.constprop.5+0xc8>
   132d6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 133c0 <mem_alloc.constprop.5+0x1c4>
   132da:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   132de:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   132e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   132e6:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   132ea:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   132ee:	f8d2 e004 	ldr.w	lr, [r2, #4]
   132f2:	691d      	ldr	r5, [r3, #16]
   132f4:	2c00      	cmp	r4, #0
   132f6:	d056      	beq.n	133a6 <mem_alloc.constprop.5+0x1aa>
   132f8:	462a      	mov	r2, r5
   132fa:	4670      	mov	r0, lr
   132fc:	00a4      	lsls	r4, r4, #2
   132fe:	eb05 0904 	add.w	r9, r5, r4
   13302:	8851      	ldrh	r1, [r2, #2]
   13304:	3204      	adds	r2, #4
   13306:	4591      	cmp	r9, r2
   13308:	4408      	add	r0, r1
   1330a:	d1fa      	bne.n	13302 <mem_alloc.constprop.5+0x106>
   1330c:	1929      	adds	r1, r5, r4
   1330e:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   13312:	4482      	add	sl, r0
   13314:	4582      	cmp	sl, r0
   13316:	d918      	bls.n	1334a <mem_alloc.constprop.5+0x14e>
   13318:	0941      	lsrs	r1, r0, #5
   1331a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1331e:	f000 041f 	and.w	r4, r0, #31
   13322:	fa22 f904 	lsr.w	r9, r2, r4
   13326:	f019 0f01 	tst.w	r9, #1
   1332a:	d007      	beq.n	1333c <mem_alloc.constprop.5+0x140>
   1332c:	e013      	b.n	13356 <mem_alloc.constprop.5+0x15a>
   1332e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   13332:	fa22 f904 	lsr.w	r9, r2, r4
   13336:	f019 0f01 	tst.w	r9, #1
   1333a:	d10c      	bne.n	13356 <mem_alloc.constprop.5+0x15a>
   1333c:	3001      	adds	r0, #1
   1333e:	4582      	cmp	sl, r0
   13340:	ea4f 1150 	mov.w	r1, r0, lsr #5
   13344:	f000 041f 	and.w	r4, r0, #31
   13348:	d1f1      	bne.n	1332e <mem_alloc.constprop.5+0x132>
   1334a:	3601      	adds	r6, #1
   1334c:	455e      	cmp	r6, fp
   1334e:	f108 0808 	add.w	r8, r8, #8
   13352:	d3c4      	bcc.n	132de <mem_alloc.constprop.5+0xe2>
   13354:	e7b6      	b.n	132c4 <mem_alloc.constprop.5+0xc8>
   13356:	2601      	movs	r6, #1
   13358:	fa06 f404 	lsl.w	r4, r6, r4
   1335c:	899e      	ldrh	r6, [r3, #12]
   1335e:	ea22 0204 	bic.w	r2, r2, r4
   13362:	eba0 000e 	sub.w	r0, r0, lr
   13366:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1336a:	685c      	ldr	r4, [r3, #4]
   1336c:	2e00      	cmp	r6, #0
   1336e:	d0a9      	beq.n	132c4 <mem_alloc.constprop.5+0xc8>
   13370:	886a      	ldrh	r2, [r5, #2]
   13372:	4282      	cmp	r2, r0
   13374:	d811      	bhi.n	1339a <mem_alloc.constprop.5+0x19e>
   13376:	2100      	movs	r1, #0
   13378:	1d2b      	adds	r3, r5, #4
   1337a:	e003      	b.n	13384 <mem_alloc.constprop.5+0x188>
   1337c:	885a      	ldrh	r2, [r3, #2]
   1337e:	3304      	adds	r3, #4
   13380:	4282      	cmp	r2, r0
   13382:	d80a      	bhi.n	1339a <mem_alloc.constprop.5+0x19e>
   13384:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   13388:	3101      	adds	r1, #1
   1338a:	428e      	cmp	r6, r1
   1338c:	fb02 4405 	mla	r4, r2, r5, r4
   13390:	eba0 0002 	sub.w	r0, r0, r2
   13394:	461d      	mov	r5, r3
   13396:	d1f1      	bne.n	1337c <mem_alloc.constprop.5+0x180>
   13398:	e794      	b.n	132c4 <mem_alloc.constprop.5+0xc8>
   1339a:	882b      	ldrh	r3, [r5, #0]
   1339c:	fb00 4003 	mla	r0, r0, r3, r4
   133a0:	b003      	add	sp, #12
   133a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133a6:	4670      	mov	r0, lr
   133a8:	e7b0      	b.n	1330c <mem_alloc.constprop.5+0x110>
   133aa:	f1bb 0f10 	cmp.w	fp, #16
   133ae:	bf08      	it	eq
   133b0:	260f      	moveq	r6, #15
   133b2:	d090      	beq.n	132d6 <mem_alloc.constprop.5+0xda>
   133b4:	e786      	b.n	132c4 <mem_alloc.constprop.5+0xc8>
   133b6:	bf00      	nop
   133b8:	2002052c 	.word	0x2002052c
   133bc:	200204f0 	.word	0x200204f0
   133c0:	200204ac 	.word	0x200204ac

000133c4 <mem_alloc.constprop.4>:
   133c4:	2800      	cmp	r0, #0
   133c6:	d04c      	beq.n	13462 <mem_alloc.constprop.4+0x9e>
   133c8:	4b6b      	ldr	r3, [pc, #428]	; (13578 <mem_alloc.constprop.4+0x1b4>)
   133ca:	681a      	ldr	r2, [r3, #0]
   133cc:	4290      	cmp	r0, r2
   133ce:	d848      	bhi.n	13462 <mem_alloc.constprop.4+0x9e>
   133d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133d4:	685f      	ldr	r7, [r3, #4]
   133d6:	b083      	sub	sp, #12
   133d8:	9700      	str	r7, [sp, #0]
   133da:	2f00      	cmp	r7, #0
   133dc:	d051      	beq.n	13482 <mem_alloc.constprop.4+0xbe>
   133de:	1e7a      	subs	r2, r7, #1
   133e0:	4696      	mov	lr, r2
   133e2:	2100      	movs	r1, #0
   133e4:	f04f 0c01 	mov.w	ip, #1
   133e8:	4c64      	ldr	r4, [pc, #400]	; (1357c <mem_alloc.constprop.4+0x1b8>)
   133ea:	9201      	str	r2, [sp, #4]
   133ec:	eb01 020e 	add.w	r2, r1, lr
   133f0:	3201      	adds	r2, #1
   133f2:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   133f6:	0852      	lsrs	r2, r2, #1
   133f8:	f102 0801 	add.w	r8, r2, #1
   133fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13400:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   13404:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   13408:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1340c:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   13410:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   13414:	f8d9 9004 	ldr.w	r9, [r9, #4]
   13418:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1341c:	f8da a010 	ldr.w	sl, [sl, #16]
   13420:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   13424:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   13428:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1342c:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   13430:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   13434:	6936      	ldr	r6, [r6, #16]
   13436:	f8db b004 	ldr.w	fp, [fp, #4]
   1343a:	692d      	ldr	r5, [r5, #16]
   1343c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   13440:	4550      	cmp	r0, sl
   13442:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   13446:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1344a:	d913      	bls.n	13474 <mem_alloc.constprop.4+0xb0>
   1344c:	42a8      	cmp	r0, r5
   1344e:	d210      	bcs.n	13472 <mem_alloc.constprop.4+0xae>
   13450:	42b0      	cmp	r0, r6
   13452:	d908      	bls.n	13466 <mem_alloc.constprop.4+0xa2>
   13454:	45c6      	cmp	lr, r8
   13456:	4641      	mov	r1, r8
   13458:	f0c0 8087 	bcc.w	1356a <mem_alloc.constprop.4+0x1a6>
   1345c:	f108 0c01 	add.w	ip, r8, #1
   13460:	e7c4      	b.n	133ec <mem_alloc.constprop.4+0x28>
   13462:	2000      	movs	r0, #0
   13464:	4770      	bx	lr
   13466:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   1346a:	4571      	cmp	r1, lr
   1346c:	d87d      	bhi.n	1356a <mem_alloc.constprop.4+0x1a6>
   1346e:	4617      	mov	r7, r2
   13470:	e7bc      	b.n	133ec <mem_alloc.constprop.4+0x28>
   13472:	4639      	mov	r1, r7
   13474:	9a00      	ldr	r2, [sp, #0]
   13476:	428a      	cmp	r2, r1
   13478:	d007      	beq.n	1348a <mem_alloc.constprop.4+0xc6>
   1347a:	2910      	cmp	r1, #16
   1347c:	d001      	beq.n	13482 <mem_alloc.constprop.4+0xbe>
   1347e:	428a      	cmp	r2, r1
   13480:	d808      	bhi.n	13494 <mem_alloc.constprop.4+0xd0>
   13482:	2000      	movs	r0, #0
   13484:	b003      	add	sp, #12
   13486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1348a:	9a01      	ldr	r2, [sp, #4]
   1348c:	2a10      	cmp	r2, #16
   1348e:	bf18      	it	ne
   13490:	4611      	movne	r1, r2
   13492:	d0f6      	beq.n	13482 <mem_alloc.constprop.4+0xbe>
   13494:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 13580 <mem_alloc.constprop.4+0x1bc>
   13498:	f8dd 9000 	ldr.w	r9, [sp]
   1349c:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   134a0:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   134a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   134a8:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   134ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   134b0:	f8d2 e004 	ldr.w	lr, [r2, #4]
   134b4:	691f      	ldr	r7, [r3, #16]
   134b6:	2e00      	cmp	r6, #0
   134b8:	d055      	beq.n	13566 <mem_alloc.constprop.4+0x1a2>
   134ba:	463a      	mov	r2, r7
   134bc:	4670      	mov	r0, lr
   134be:	00b6      	lsls	r6, r6, #2
   134c0:	eb07 0a06 	add.w	sl, r7, r6
   134c4:	8855      	ldrh	r5, [r2, #2]
   134c6:	3204      	adds	r2, #4
   134c8:	4592      	cmp	sl, r2
   134ca:	4428      	add	r0, r5
   134cc:	d1fa      	bne.n	134c4 <mem_alloc.constprop.4+0x100>
   134ce:	19bd      	adds	r5, r7, r6
   134d0:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   134d4:	4483      	add	fp, r0
   134d6:	4583      	cmp	fp, r0
   134d8:	d918      	bls.n	1350c <mem_alloc.constprop.4+0x148>
   134da:	0945      	lsrs	r5, r0, #5
   134dc:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   134e0:	f000 061f 	and.w	r6, r0, #31
   134e4:	fa22 fa06 	lsr.w	sl, r2, r6
   134e8:	f01a 0f01 	tst.w	sl, #1
   134ec:	d007      	beq.n	134fe <mem_alloc.constprop.4+0x13a>
   134ee:	e013      	b.n	13518 <mem_alloc.constprop.4+0x154>
   134f0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   134f4:	fa22 fa06 	lsr.w	sl, r2, r6
   134f8:	f01a 0f01 	tst.w	sl, #1
   134fc:	d10c      	bne.n	13518 <mem_alloc.constprop.4+0x154>
   134fe:	3001      	adds	r0, #1
   13500:	4583      	cmp	fp, r0
   13502:	ea4f 1550 	mov.w	r5, r0, lsr #5
   13506:	f000 061f 	and.w	r6, r0, #31
   1350a:	d1f1      	bne.n	134f0 <mem_alloc.constprop.4+0x12c>
   1350c:	3101      	adds	r1, #1
   1350e:	4549      	cmp	r1, r9
   13510:	f108 0808 	add.w	r8, r8, #8
   13514:	d3c4      	bcc.n	134a0 <mem_alloc.constprop.4+0xdc>
   13516:	e7b4      	b.n	13482 <mem_alloc.constprop.4+0xbe>
   13518:	2101      	movs	r1, #1
   1351a:	40b1      	lsls	r1, r6
   1351c:	899e      	ldrh	r6, [r3, #12]
   1351e:	ea22 0201 	bic.w	r2, r2, r1
   13522:	eba0 000e 	sub.w	r0, r0, lr
   13526:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1352a:	685c      	ldr	r4, [r3, #4]
   1352c:	2e00      	cmp	r6, #0
   1352e:	d0a8      	beq.n	13482 <mem_alloc.constprop.4+0xbe>
   13530:	887a      	ldrh	r2, [r7, #2]
   13532:	4282      	cmp	r2, r0
   13534:	d811      	bhi.n	1355a <mem_alloc.constprop.4+0x196>
   13536:	2100      	movs	r1, #0
   13538:	1d3b      	adds	r3, r7, #4
   1353a:	e003      	b.n	13544 <mem_alloc.constprop.4+0x180>
   1353c:	885a      	ldrh	r2, [r3, #2]
   1353e:	3304      	adds	r3, #4
   13540:	4282      	cmp	r2, r0
   13542:	d80a      	bhi.n	1355a <mem_alloc.constprop.4+0x196>
   13544:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   13548:	3101      	adds	r1, #1
   1354a:	428e      	cmp	r6, r1
   1354c:	eba0 0002 	sub.w	r0, r0, r2
   13550:	fb02 4405 	mla	r4, r2, r5, r4
   13554:	461f      	mov	r7, r3
   13556:	d1f1      	bne.n	1353c <mem_alloc.constprop.4+0x178>
   13558:	e793      	b.n	13482 <mem_alloc.constprop.4+0xbe>
   1355a:	883b      	ldrh	r3, [r7, #0]
   1355c:	fb00 4003 	mla	r0, r0, r3, r4
   13560:	b003      	add	sp, #12
   13562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13566:	4670      	mov	r0, lr
   13568:	e7b1      	b.n	134ce <mem_alloc.constprop.4+0x10a>
   1356a:	9a00      	ldr	r2, [sp, #0]
   1356c:	2a10      	cmp	r2, #16
   1356e:	bf08      	it	eq
   13570:	210f      	moveq	r1, #15
   13572:	d08f      	beq.n	13494 <mem_alloc.constprop.4+0xd0>
   13574:	e785      	b.n	13482 <mem_alloc.constprop.4+0xbe>
   13576:	bf00      	nop
   13578:	2002052c 	.word	0x2002052c
   1357c:	200204f0 	.word	0x200204f0
   13580:	200204ac 	.word	0x200204ac

00013584 <nrf_mem_init>:
   13584:	b570      	push	{r4, r5, r6, lr}
   13586:	2200      	movs	r2, #0
   13588:	2501      	movs	r5, #1
   1358a:	4833      	ldr	r0, [pc, #204]	; (13658 <nrf_mem_init+0xd4>)
   1358c:	0951      	lsrs	r1, r2, #5
   1358e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   13592:	f002 031f 	and.w	r3, r2, #31
   13596:	fa05 f303 	lsl.w	r3, r5, r3
   1359a:	3201      	adds	r2, #1
   1359c:	4323      	orrs	r3, r4
   1359e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   135a2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   135a6:	d1f1      	bne.n	1358c <nrf_mem_init+0x8>
   135a8:	2400      	movs	r4, #0
   135aa:	4b2c      	ldr	r3, [pc, #176]	; (1365c <nrf_mem_init+0xd8>)
   135ac:	4621      	mov	r1, r4
   135ae:	223c      	movs	r2, #60	; 0x3c
   135b0:	482b      	ldr	r0, [pc, #172]	; (13660 <nrf_mem_init+0xdc>)
   135b2:	601c      	str	r4, [r3, #0]
   135b4:	f009 ff47 	bl	1d446 <memset>
   135b8:	2110      	movs	r1, #16
   135ba:	2205      	movs	r2, #5
   135bc:	4b29      	ldr	r3, [pc, #164]	; (13664 <nrf_mem_init+0xe0>)
   135be:	4e2a      	ldr	r6, [pc, #168]	; (13668 <nrf_mem_init+0xe4>)
   135c0:	e9c3 4400 	strd	r4, r4, [r3]
   135c4:	60d9      	str	r1, [r3, #12]
   135c6:	6159      	str	r1, [r3, #20]
   135c8:	61d9      	str	r1, [r3, #28]
   135ca:	6259      	str	r1, [r3, #36]	; 0x24
   135cc:	62d9      	str	r1, [r3, #44]	; 0x2c
   135ce:	6359      	str	r1, [r3, #52]	; 0x34
   135d0:	63d9      	str	r1, [r3, #60]	; 0x3c
   135d2:	6459      	str	r1, [r3, #68]	; 0x44
   135d4:	64d9      	str	r1, [r3, #76]	; 0x4c
   135d6:	6559      	str	r1, [r3, #84]	; 0x54
   135d8:	65d9      	str	r1, [r3, #92]	; 0x5c
   135da:	6659      	str	r1, [r3, #100]	; 0x64
   135dc:	66d9      	str	r1, [r3, #108]	; 0x6c
   135de:	6759      	str	r1, [r3, #116]	; 0x74
   135e0:	67d9      	str	r1, [r3, #124]	; 0x7c
   135e2:	609a      	str	r2, [r3, #8]
   135e4:	611a      	str	r2, [r3, #16]
   135e6:	619a      	str	r2, [r3, #24]
   135e8:	621a      	str	r2, [r3, #32]
   135ea:	629a      	str	r2, [r3, #40]	; 0x28
   135ec:	631a      	str	r2, [r3, #48]	; 0x30
   135ee:	639a      	str	r2, [r3, #56]	; 0x38
   135f0:	641a      	str	r2, [r3, #64]	; 0x40
   135f2:	649a      	str	r2, [r3, #72]	; 0x48
   135f4:	651a      	str	r2, [r3, #80]	; 0x50
   135f6:	659a      	str	r2, [r3, #88]	; 0x58
   135f8:	661a      	str	r2, [r3, #96]	; 0x60
   135fa:	669a      	str	r2, [r3, #104]	; 0x68
   135fc:	671a      	str	r2, [r3, #112]	; 0x70
   135fe:	679a      	str	r2, [r3, #120]	; 0x78
   13600:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   13604:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   13608:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1360c:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   13610:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   13614:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   13618:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1361c:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   13620:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   13624:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   13628:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1362c:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   13630:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   13634:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   13638:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1363c:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   13640:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   13644:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13648:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1364c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   13650:	4620      	mov	r0, r4
   13652:	7035      	strb	r5, [r6, #0]
   13654:	bd70      	pop	{r4, r5, r6, pc}
   13656:	bf00      	nop
   13658:	200204ac 	.word	0x200204ac
   1365c:	200204ec 	.word	0x200204ec
   13660:	200204f0 	.word	0x200204f0
   13664:	2002052c 	.word	0x2002052c
   13668:	20026564 	.word	0x20026564

0001366c <nrf_mem_register>:
   1366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13670:	4b87      	ldr	r3, [pc, #540]	; (13890 <nrf_mem_register+0x224>)
   13672:	b087      	sub	sp, #28
   13674:	781b      	ldrb	r3, [r3, #0]
   13676:	2b00      	cmp	r3, #0
   13678:	f000 808c 	beq.w	13794 <nrf_mem_register+0x128>
   1367c:	b328      	cbz	r0, 136ca <nrf_mem_register+0x5e>
   1367e:	b321      	cbz	r1, 136ca <nrf_mem_register+0x5e>
   13680:	780b      	ldrb	r3, [r1, #0]
   13682:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1389c <nrf_mem_register+0x230>
   13686:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1368a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1368e:	685b      	ldr	r3, [r3, #4]
   13690:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   13694:	4463      	add	r3, ip
   13696:	2b10      	cmp	r3, #16
   13698:	d811      	bhi.n	136be <nrf_mem_register+0x52>
   1369a:	f04f 0a00 	mov.w	sl, #0
   1369e:	4689      	mov	r9, r1
   136a0:	4b7c      	ldr	r3, [pc, #496]	; (13894 <nrf_mem_register+0x228>)
   136a2:	4f7d      	ldr	r7, [pc, #500]	; (13898 <nrf_mem_register+0x22c>)
   136a4:	681b      	ldr	r3, [r3, #0]
   136a6:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   136aa:	9300      	str	r3, [sp, #0]
   136ac:	68b9      	ldr	r1, [r7, #8]
   136ae:	b191      	cbz	r1, 136d6 <nrf_mem_register+0x6a>
   136b0:	f10a 0a01 	add.w	sl, sl, #1
   136b4:	f1ba 0f05 	cmp.w	sl, #5
   136b8:	f107 070c 	add.w	r7, r7, #12
   136bc:	d1f6      	bne.n	136ac <nrf_mem_register+0x40>
   136be:	f248 1b07 	movw	fp, #33031	; 0x8107
   136c2:	4658      	mov	r0, fp
   136c4:	b007      	add	sp, #28
   136c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136ca:	f248 1b0e 	movw	fp, #33038	; 0x810e
   136ce:	4658      	mov	r0, fp
   136d0:	b007      	add	sp, #28
   136d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d6:	f1bc 0f00 	cmp.w	ip, #0
   136da:	d061      	beq.n	137a0 <nrf_mem_register+0x134>
   136dc:	460d      	mov	r5, r1
   136de:	460c      	mov	r4, r1
   136e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   136e4:	eb0e 0b03 	add.w	fp, lr, r3
   136e8:	885a      	ldrh	r2, [r3, #2]
   136ea:	f833 6b04 	ldrh.w	r6, [r3], #4
   136ee:	4415      	add	r5, r2
   136f0:	459b      	cmp	fp, r3
   136f2:	fb02 4406 	mla	r4, r2, r6, r4
   136f6:	d1f7      	bne.n	136e8 <nrf_mem_register+0x7c>
   136f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   136fc:	42a3      	cmp	r3, r4
   136fe:	d3d7      	bcc.n	136b0 <nrf_mem_register+0x44>
   13700:	9b00      	ldr	r3, [sp, #0]
   13702:	442b      	add	r3, r5
   13704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13708:	d2d2      	bcs.n	136b0 <nrf_mem_register+0x44>
   1370a:	4c63      	ldr	r4, [pc, #396]	; (13898 <nrf_mem_register+0x22c>)
   1370c:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   13710:	0092      	lsls	r2, r2, #2
   13712:	f8c0 a000 	str.w	sl, [r0]
   13716:	18a0      	adds	r0, r4, r2
   13718:	f844 9002 	str.w	r9, [r4, r2]
   1371c:	9a00      	ldr	r2, [sp, #0]
   1371e:	468b      	mov	fp, r1
   13720:	e9c0 2501 	strd	r2, r5, [r0, #4]
   13724:	f899 2001 	ldrb.w	r2, [r9, #1]
   13728:	485a      	ldr	r0, [pc, #360]	; (13894 <nrf_mem_register+0x228>)
   1372a:	2a01      	cmp	r2, #1
   1372c:	6003      	str	r3, [r0, #0]
   1372e:	d0c8      	beq.n	136c2 <nrf_mem_register+0x56>
   13730:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   13734:	2b00      	cmp	r3, #0
   13736:	d0c4      	beq.n	136c2 <nrf_mem_register+0x56>
   13738:	2500      	movs	r5, #0
   1373a:	f8cd 9004 	str.w	r9, [sp, #4]
   1373e:	f8cd a00c 	str.w	sl, [sp, #12]
   13742:	f8cd b014 	str.w	fp, [sp, #20]
   13746:	9b01      	ldr	r3, [sp, #4]
   13748:	781f      	ldrb	r7, [r3, #0]
   1374a:	691a      	ldr	r2, [r3, #16]
   1374c:	013b      	lsls	r3, r7, #4
   1374e:	eb03 0907 	add.w	r9, r3, r7
   13752:	9300      	str	r3, [sp, #0]
   13754:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   13758:	6859      	ldr	r1, [r3, #4]
   1375a:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1375e:	9102      	str	r1, [sp, #8]
   13760:	bb39      	cbnz	r1, 137b2 <nrf_mem_register+0x146>
   13762:	9a03      	ldr	r2, [sp, #12]
   13764:	60dd      	str	r5, [r3, #12]
   13766:	609a      	str	r2, [r3, #8]
   13768:	9b00      	ldr	r3, [sp, #0]
   1376a:	443b      	add	r3, r7
   1376c:	461f      	mov	r7, r3
   1376e:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   13772:	684b      	ldr	r3, [r1, #4]
   13774:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   13778:	3301      	adds	r3, #1
   1377a:	4294      	cmp	r4, r2
   1377c:	604b      	str	r3, [r1, #4]
   1377e:	d912      	bls.n	137a6 <nrf_mem_register+0x13a>
   13780:	9b01      	ldr	r3, [sp, #4]
   13782:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   13786:	899b      	ldrh	r3, [r3, #12]
   13788:	3501      	adds	r5, #1
   1378a:	429d      	cmp	r5, r3
   1378c:	d3db      	bcc.n	13746 <nrf_mem_register+0xda>
   1378e:	f8dd b014 	ldr.w	fp, [sp, #20]
   13792:	e796      	b.n	136c2 <nrf_mem_register+0x56>
   13794:	f248 1b08 	movw	fp, #33032	; 0x8108
   13798:	4658      	mov	r0, fp
   1379a:	b007      	add	sp, #28
   1379c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137a0:	9b00      	ldr	r3, [sp, #0]
   137a2:	4665      	mov	r5, ip
   137a4:	e7ae      	b.n	13704 <nrf_mem_register+0x98>
   137a6:	9b01      	ldr	r3, [sp, #4]
   137a8:	3501      	adds	r5, #1
   137aa:	899b      	ldrh	r3, [r3, #12]
   137ac:	42ab      	cmp	r3, r5
   137ae:	d8ca      	bhi.n	13746 <nrf_mem_register+0xda>
   137b0:	e7ed      	b.n	1378e <nrf_mem_register+0x122>
   137b2:	2600      	movs	r6, #0
   137b4:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   137b8:	9504      	str	r5, [sp, #16]
   137ba:	eb06 000a 	add.w	r0, r6, sl
   137be:	eb09 0206 	add.w	r2, r9, r6
   137c2:	3201      	adds	r2, #1
   137c4:	3001      	adds	r0, #1
   137c6:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   137ca:	0840      	lsrs	r0, r0, #1
   137cc:	4d32      	ldr	r5, [pc, #200]	; (13898 <nrf_mem_register+0x22c>)
   137ce:	eb09 0100 	add.w	r1, r9, r0
   137d2:	eb09 030a 	add.w	r3, r9, sl
   137d6:	3101      	adds	r1, #1
   137d8:	3301      	adds	r3, #1
   137da:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   137de:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   137e2:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   137e6:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   137ea:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   137ee:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   137f2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   137f6:	f8db b010 	ldr.w	fp, [fp, #16]
   137fa:	6852      	ldr	r2, [r2, #4]
   137fc:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   13800:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   13804:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   13808:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1380c:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   13810:	f8de e010 	ldr.w	lr, [lr, #16]
   13814:	6849      	ldr	r1, [r1, #4]
   13816:	f8dc c010 	ldr.w	ip, [ip, #16]
   1381a:	685b      	ldr	r3, [r3, #4]
   1381c:	4294      	cmp	r4, r2
   1381e:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   13822:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   13826:	d92d      	bls.n	13884 <nrf_mem_register+0x218>
   13828:	429c      	cmp	r4, r3
   1382a:	d22d      	bcs.n	13888 <nrf_mem_register+0x21c>
   1382c:	428c      	cmp	r4, r1
   1382e:	d924      	bls.n	1387a <nrf_mem_register+0x20e>
   13830:	1c46      	adds	r6, r0, #1
   13832:	45b2      	cmp	sl, r6
   13834:	d2c1      	bcs.n	137ba <nrf_mem_register+0x14e>
   13836:	2610      	movs	r6, #16
   13838:	9d04      	ldr	r5, [sp, #16]
   1383a:	9a02      	ldr	r2, [sp, #8]
   1383c:	42b2      	cmp	r2, r6
   1383e:	d911      	bls.n	13864 <nrf_mem_register+0x1f8>
   13840:	9b00      	ldr	r3, [sp, #0]
   13842:	443b      	add	r3, r7
   13844:	441a      	add	r2, r3
   13846:	4433      	add	r3, r6
   13848:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1384c:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   13850:	2208      	movs	r2, #8
   13852:	4651      	mov	r1, sl
   13854:	eb0a 0002 	add.w	r0, sl, r2
   13858:	f1aa 0a08 	sub.w	sl, sl, #8
   1385c:	f009 fdc9 	bl	1d3f2 <memcpy>
   13860:	45d1      	cmp	r9, sl
   13862:	d1f5      	bne.n	13850 <nrf_mem_register+0x1e4>
   13864:	9b00      	ldr	r3, [sp, #0]
   13866:	9903      	ldr	r1, [sp, #12]
   13868:	443b      	add	r3, r7
   1386a:	4433      	add	r3, r6
   1386c:	3301      	adds	r3, #1
   1386e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   13872:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   13876:	6055      	str	r5, [r2, #4]
   13878:	e776      	b.n	13768 <nrf_mem_register+0xfc>
   1387a:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   1387e:	4556      	cmp	r6, sl
   13880:	d99b      	bls.n	137ba <nrf_mem_register+0x14e>
   13882:	e7d8      	b.n	13836 <nrf_mem_register+0x1ca>
   13884:	9d04      	ldr	r5, [sp, #16]
   13886:	e7d8      	b.n	1383a <nrf_mem_register+0x1ce>
   13888:	9d04      	ldr	r5, [sp, #16]
   1388a:	f10a 0601 	add.w	r6, sl, #1
   1388e:	e7d4      	b.n	1383a <nrf_mem_register+0x1ce>
   13890:	20026564 	.word	0x20026564
   13894:	200204ec 	.word	0x200204ec
   13898:	200204f0 	.word	0x200204f0
   1389c:	2002052c 	.word	0x2002052c

000138a0 <nrf_malloc>:
   138a0:	4b03      	ldr	r3, [pc, #12]	; (138b0 <nrf_malloc+0x10>)
   138a2:	781b      	ldrb	r3, [r3, #0]
   138a4:	b10b      	cbz	r3, 138aa <nrf_malloc+0xa>
   138a6:	f7ff bd8d 	b.w	133c4 <mem_alloc.constprop.4>
   138aa:	4618      	mov	r0, r3
   138ac:	4770      	bx	lr
   138ae:	bf00      	nop
   138b0:	20026564 	.word	0x20026564

000138b4 <nrf_free>:
   138b4:	4b04      	ldr	r3, [pc, #16]	; (138c8 <nrf_free+0x14>)
   138b6:	781b      	ldrb	r3, [r3, #0]
   138b8:	b123      	cbz	r3, 138c4 <nrf_free+0x10>
   138ba:	b118      	cbz	r0, 138c4 <nrf_free+0x10>
   138bc:	4601      	mov	r1, r0
   138be:	2000      	movs	r0, #0
   138c0:	f7ff bc30 	b.w	13124 <mem_free>
   138c4:	4770      	bx	lr
   138c6:	bf00      	nop
   138c8:	20026564 	.word	0x20026564

000138cc <nrf_shared_malloc>:
   138cc:	4b03      	ldr	r3, [pc, #12]	; (138dc <nrf_shared_malloc+0x10>)
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	b10b      	cbz	r3, 138d6 <nrf_shared_malloc+0xa>
   138d2:	f7ff bc93 	b.w	131fc <mem_alloc.constprop.5>
   138d6:	4618      	mov	r0, r3
   138d8:	4770      	bx	lr
   138da:	bf00      	nop
   138dc:	20026564 	.word	0x20026564

000138e0 <nrf_shared_free>:
   138e0:	4b04      	ldr	r3, [pc, #16]	; (138f4 <nrf_shared_free+0x14>)
   138e2:	781b      	ldrb	r3, [r3, #0]
   138e4:	b123      	cbz	r3, 138f0 <nrf_shared_free+0x10>
   138e6:	b118      	cbz	r0, 138f0 <nrf_shared_free+0x10>
   138e8:	4601      	mov	r1, r0
   138ea:	2001      	movs	r0, #1
   138ec:	f7ff bc1a 	b.w	13124 <mem_free>
   138f0:	4770      	bx	lr
   138f2:	bf00      	nop
   138f4:	20026564 	.word	0x20026564

000138f8 <ip_client_event_handler>:
   138f8:	f850 1b08 	ldr.w	r1, [r0], #8
   138fc:	0c09      	lsrs	r1, r1, #16
   138fe:	f004 bd23 	b.w	18348 <rpc_ip_event_handler>
   13902:	bf00      	nop

00013904 <rpc_ip_client_init>:
   13904:	4801      	ldr	r0, [pc, #4]	; (1390c <rpc_ip_client_init+0x8>)
   13906:	f005 ba01 	b.w	18d0c <rpc_client_register>
   1390a:	bf00      	nop
   1390c:	0001f3ac 	.word	0x0001f3ac

00013910 <rpc_ip_client_request_alloc>:
   13910:	2300      	movs	r3, #0
   13912:	b510      	push	{r4, lr}
   13914:	b082      	sub	sp, #8
   13916:	9301      	str	r3, [sp, #4]
   13918:	b158      	cbz	r0, 13932 <rpc_ip_client_request_alloc+0x22>
   1391a:	4604      	mov	r4, r0
   1391c:	aa01      	add	r2, sp, #4
   1391e:	2004      	movs	r0, #4
   13920:	f005 fc2c 	bl	1917c <rpc_message_alloc>
   13924:	b918      	cbnz	r0, 1392e <rpc_ip_client_request_alloc+0x1e>
   13926:	9b01      	ldr	r3, [sp, #4]
   13928:	b10b      	cbz	r3, 1392e <rpc_ip_client_request_alloc+0x1e>
   1392a:	3308      	adds	r3, #8
   1392c:	6023      	str	r3, [r4, #0]
   1392e:	b002      	add	sp, #8
   13930:	bd10      	pop	{r4, pc}
   13932:	2007      	movs	r0, #7
   13934:	b002      	add	sp, #8
   13936:	bd10      	pop	{r4, pc}

00013938 <rpc_ip_client_request_send>:
   13938:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1393c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   13940:	d10b      	bne.n	1395a <rpc_ip_client_request_send+0x22>
   13942:	b160      	cbz	r0, 1395e <rpc_ip_client_request_send+0x26>
   13944:	4603      	mov	r3, r0
   13946:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1394a:	2004      	movs	r0, #4
   1394c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   13950:	f843 1d08 	str.w	r1, [r3, #-8]!
   13954:	4619      	mov	r1, r3
   13956:	f005 bbf9 	b.w	1914c <rpc_message_send>
   1395a:	200f      	movs	r0, #15
   1395c:	4770      	bx	lr
   1395e:	2007      	movs	r0, #7
   13960:	4770      	bx	lr
   13962:	bf00      	nop

00013964 <rpc_ip_client_message_free>:
   13964:	b120      	cbz	r0, 13970 <rpc_ip_client_message_free+0xc>
   13966:	f1a0 0108 	sub.w	r1, r0, #8
   1396a:	2004      	movs	r0, #4
   1396c:	f005 bc38 	b.w	191e0 <rpc_message_free>
   13970:	2007      	movs	r0, #7
   13972:	4770      	bx	lr

00013974 <rpc_ip_client_data_free>:
   13974:	b118      	cbz	r0, 1397e <rpc_ip_client_data_free+0xa>
   13976:	4601      	mov	r1, r0
   13978:	2004      	movs	r0, #4
   1397a:	f005 bd43 	b.w	19404 <rpc_message_data_free>
   1397e:	2007      	movs	r0, #7
   13980:	4770      	bx	lr
   13982:	bf00      	nop

00013984 <secure_client_socket>:
   13984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13988:	460c      	mov	r4, r1
   1398a:	680b      	ldr	r3, [r1, #0]
   1398c:	6989      	ldr	r1, [r1, #24]
   1398e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13992:	6023      	str	r3, [r4, #0]
   13994:	6822      	ldr	r2, [r4, #0]
   13996:	2300      	movs	r3, #0
   13998:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   1399c:	6022      	str	r2, [r4, #0]
   1399e:	f247 0281 	movw	r2, #28801	; 0x7081
   139a2:	6827      	ldr	r7, [r4, #0]
   139a4:	4606      	mov	r6, r0
   139a6:	f003 fc2d 	bl	17204 <ip_interface_request_create>
   139aa:	2800      	cmp	r0, #0
   139ac:	d03b      	beq.n	13a26 <secure_client_socket+0xa2>
   139ae:	4605      	mov	r5, r0
   139b0:	4b28      	ldr	r3, [pc, #160]	; (13a54 <secure_client_socket+0xd0>)
   139b2:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
   139b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   139ba:	2224      	movs	r2, #36	; 0x24
   139bc:	3014      	adds	r0, #20
   139be:	f009 fd18 	bl	1d3f2 <memcpy>
   139c2:	68ab      	ldr	r3, [r5, #8]
   139c4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13a58 <secure_client_socket+0xd4>
   139c8:	3324      	adds	r3, #36	; 0x24
   139ca:	60ab      	str	r3, [r5, #8]
   139cc:	6823      	ldr	r3, [r4, #0]
   139ce:	4629      	mov	r1, r5
   139d0:	ea03 0308 	and.w	r3, r3, r8
   139d4:	f043 030a 	orr.w	r3, r3, #10
   139d8:	6023      	str	r3, [r4, #0]
   139da:	f247 0281 	movw	r2, #28801	; 0x7081
   139de:	463b      	mov	r3, r7
   139e0:	4620      	mov	r0, r4
   139e2:	f003 fc2f 	bl	17244 <ip_interface_request_send>
   139e6:	b960      	cbnz	r0, 13a02 <secure_client_socket+0x7e>
   139e8:	6823      	ldr	r3, [r4, #0]
   139ea:	00db      	lsls	r3, r3, #3
   139ec:	d40b      	bmi.n	13a06 <secure_client_socket+0x82>
   139ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   139f6:	210b      	movs	r1, #11
   139f8:	4630      	mov	r0, r6
   139fa:	f003 fc37 	bl	1726c <ip_interface_wait>
   139fe:	b128      	cbz	r0, 13a0c <secure_client_socket+0x88>
   13a00:	6027      	str	r7, [r4, #0]
   13a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a06:	2073      	movs	r0, #115	; 0x73
   13a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   13a10:	4630      	mov	r0, r6
   13a12:	4611      	mov	r1, r2
   13a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a18:	f003 fc28 	bl	1726c <ip_interface_wait>
   13a1c:	b130      	cbz	r0, 13a2c <secure_client_socket+0xa8>
   13a1e:	2873      	cmp	r0, #115	; 0x73
   13a20:	d0ef      	beq.n	13a02 <secure_client_socket+0x7e>
   13a22:	6027      	str	r7, [r4, #0]
   13a24:	e7ed      	b.n	13a02 <secure_client_socket+0x7e>
   13a26:	200c      	movs	r0, #12
   13a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a2c:	6823      	ldr	r3, [r4, #0]
   13a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   13a32:	6023      	str	r3, [r4, #0]
   13a34:	6823      	ldr	r3, [r4, #0]
   13a36:	ea03 0808 	and.w	r8, r3, r8
   13a3a:	f048 030c 	orr.w	r3, r8, #12
   13a3e:	6023      	str	r3, [r4, #0]
   13a40:	6823      	ldr	r3, [r4, #0]
   13a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13a46:	6023      	str	r3, [r4, #0]
   13a48:	6823      	ldr	r3, [r4, #0]
   13a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13a4e:	6023      	str	r3, [r4, #0]
   13a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a54:	2002063c 	.word	0x2002063c
   13a58:	ffff0000 	.word	0xffff0000

00013a5c <tls_interface_init>:
   13a5c:	2000      	movs	r0, #0
   13a5e:	4770      	bx	lr

00013a60 <tls_interface_open>:
   13a60:	b538      	push	{r3, r4, r5, lr}
   13a62:	f020 0308 	bic.w	r3, r0, #8
   13a66:	2b02      	cmp	r3, #2
   13a68:	d006      	beq.n	13a78 <tls_interface_open+0x18>
   13a6a:	202f      	movs	r0, #47	; 0x2f
   13a6c:	f7fd fe72 	bl	11754 <bsd_os_errno_set>
   13a70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13a74:	4628      	mov	r0, r5
   13a76:	bd38      	pop	{r3, r4, r5, pc}
   13a78:	4614      	mov	r4, r2
   13a7a:	1e4a      	subs	r2, r1, #1
   13a7c:	2a01      	cmp	r2, #1
   13a7e:	d828      	bhi.n	13ad2 <tls_interface_open+0x72>
   13a80:	bb14      	cbnz	r4, 13ac8 <tls_interface_open+0x68>
   13a82:	2901      	cmp	r1, #1
   13a84:	bf06      	itte	eq
   13a86:	2301      	moveq	r3, #1
   13a88:	f44f 7482 	moveq.w	r4, #260	; 0x104
   13a8c:	f44f 7487 	movne.w	r4, #270	; 0x10e
   13a90:	461a      	mov	r2, r3
   13a92:	f003 fc17 	bl	172c4 <ip_interface_open>
   13a96:	1e05      	subs	r5, r0, #0
   13a98:	db26      	blt.n	13ae8 <tls_interface_open+0x88>
   13a9a:	4b15      	ldr	r3, [pc, #84]	; (13af0 <tls_interface_open+0x90>)
   13a9c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   13aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13aa4:	2224      	movs	r2, #36	; 0x24
   13aa6:	4913      	ldr	r1, [pc, #76]	; (13af4 <tls_interface_open+0x94>)
   13aa8:	f009 fca3 	bl	1d3f2 <memcpy>
   13aac:	4628      	mov	r0, r5
   13aae:	f004 ffcf 	bl	18a50 <interface_socket_from_handle_get>
   13ab2:	6803      	ldr	r3, [r0, #0]
   13ab4:	6144      	str	r4, [r0, #20]
   13ab6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13aba:	6003      	str	r3, [r0, #0]
   13abc:	6803      	ldr	r3, [r0, #0]
   13abe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13ac2:	6003      	str	r3, [r0, #0]
   13ac4:	4628      	mov	r0, r5
   13ac6:	bd38      	pop	{r3, r4, r5, pc}
   13ac8:	2901      	cmp	r1, #1
   13aca:	d008      	beq.n	13ade <tls_interface_open+0x7e>
   13acc:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   13ad0:	d0de      	beq.n	13a90 <tls_interface_open+0x30>
   13ad2:	2016      	movs	r0, #22
   13ad4:	f7fd fe3e 	bl	11754 <bsd_os_errno_set>
   13ad8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13adc:	e7ca      	b.n	13a74 <tls_interface_open+0x14>
   13ade:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   13ae2:	d1f6      	bne.n	13ad2 <tls_interface_open+0x72>
   13ae4:	460b      	mov	r3, r1
   13ae6:	e7d3      	b.n	13a90 <tls_interface_open+0x30>
   13ae8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13aec:	e7c2      	b.n	13a74 <tls_interface_open+0x14>
   13aee:	bf00      	nop
   13af0:	2002063c 	.word	0x2002063c
   13af4:	0001f3bc 	.word	0x0001f3bc

00013af8 <tls_interface_close>:
   13af8:	b510      	push	{r4, lr}
   13afa:	4604      	mov	r4, r0
   13afc:	f004 ffa8 	bl	18a50 <interface_socket_from_handle_get>
   13b00:	b120      	cbz	r0, 13b0c <tls_interface_close+0x14>
   13b02:	4620      	mov	r0, r4
   13b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13b08:	f003 bc88 	b.w	1741c <ip_interface_close>
   13b0c:	2009      	movs	r0, #9
   13b0e:	f7fd fe21 	bl	11754 <bsd_os_errno_set>
   13b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b16:	bd10      	pop	{r4, pc}

00013b18 <tls_interface_sendto>:
   13b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b1c:	460d      	mov	r5, r1
   13b1e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13b22:	4616      	mov	r6, r2
   13b24:	461f      	mov	r7, r3
   13b26:	4604      	mov	r4, r0
   13b28:	f004 ff92 	bl	18a50 <interface_socket_from_handle_get>
   13b2c:	2800      	cmp	r0, #0
   13b2e:	d03b      	beq.n	13ba8 <tls_interface_sendto+0x90>
   13b30:	6803      	ldr	r3, [r0, #0]
   13b32:	b29b      	uxth	r3, r3
   13b34:	2b0c      	cmp	r3, #12
   13b36:	d039      	beq.n	13bac <tls_interface_sendto+0x94>
   13b38:	6803      	ldr	r3, [r0, #0]
   13b3a:	b29b      	uxth	r3, r3
   13b3c:	2b0b      	cmp	r3, #11
   13b3e:	d111      	bne.n	13b64 <tls_interface_sendto+0x4c>
   13b40:	4b20      	ldr	r3, [pc, #128]	; (13bc4 <tls_interface_sendto+0xac>)
   13b42:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   13b46:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   13b4a:	2b02      	cmp	r3, #2
   13b4c:	d038      	beq.n	13bc0 <tls_interface_sendto+0xa8>
   13b4e:	6903      	ldr	r3, [r0, #16]
   13b50:	2b01      	cmp	r3, #1
   13b52:	bf14      	ite	ne
   13b54:	2039      	movne	r0, #57	; 0x39
   13b56:	202a      	moveq	r0, #42	; 0x2a
   13b58:	f7fd fdfc 	bl	11754 <bsd_os_errno_set>
   13b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b64:	6903      	ldr	r3, [r0, #16]
   13b66:	2b01      	cmp	r3, #1
   13b68:	d00b      	beq.n	13b82 <tls_interface_sendto+0x6a>
   13b6a:	2b02      	cmp	r3, #2
   13b6c:	d001      	beq.n	13b72 <tls_interface_sendto+0x5a>
   13b6e:	2039      	movs	r0, #57	; 0x39
   13b70:	e7f2      	b.n	13b58 <tls_interface_sendto+0x40>
   13b72:	6803      	ldr	r3, [r0, #0]
   13b74:	b29b      	uxth	r3, r3
   13b76:	2b02      	cmp	r3, #2
   13b78:	d007      	beq.n	13b8a <tls_interface_sendto+0x72>
   13b7a:	6803      	ldr	r3, [r0, #0]
   13b7c:	b29b      	uxth	r3, r3
   13b7e:	2b04      	cmp	r3, #4
   13b80:	d003      	beq.n	13b8a <tls_interface_sendto+0x72>
   13b82:	6803      	ldr	r3, [r0, #0]
   13b84:	b29b      	uxth	r3, r3
   13b86:	2b05      	cmp	r3, #5
   13b88:	d1f1      	bne.n	13b6e <tls_interface_sendto+0x56>
   13b8a:	4b0e      	ldr	r3, [pc, #56]	; (13bc4 <tls_interface_sendto+0xac>)
   13b8c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13b90:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13b94:	2b02      	cmp	r3, #2
   13b96:	d1ea      	bne.n	13b6e <tls_interface_sendto+0x56>
   13b98:	4601      	mov	r1, r0
   13b9a:	4620      	mov	r0, r4
   13b9c:	f7ff fef2 	bl	13984 <secure_client_socket>
   13ba0:	2800      	cmp	r0, #0
   13ba2:	d003      	beq.n	13bac <tls_interface_sendto+0x94>
   13ba4:	dcd8      	bgt.n	13b58 <tls_interface_sendto+0x40>
   13ba6:	e7d9      	b.n	13b5c <tls_interface_sendto+0x44>
   13ba8:	2009      	movs	r0, #9
   13baa:	e7d5      	b.n	13b58 <tls_interface_sendto+0x40>
   13bac:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13bb0:	463b      	mov	r3, r7
   13bb2:	4632      	mov	r2, r6
   13bb4:	4629      	mov	r1, r5
   13bb6:	4620      	mov	r0, r4
   13bb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13bbc:	f003 bc9e 	b.w	174fc <ip_interface_sendto>
   13bc0:	2023      	movs	r0, #35	; 0x23
   13bc2:	e7c9      	b.n	13b58 <tls_interface_sendto+0x40>
   13bc4:	2002063c 	.word	0x2002063c

00013bc8 <tls_interface_recvfrom>:
   13bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13bcc:	460d      	mov	r5, r1
   13bce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   13bd2:	4616      	mov	r6, r2
   13bd4:	461f      	mov	r7, r3
   13bd6:	4604      	mov	r4, r0
   13bd8:	f004 ff3a 	bl	18a50 <interface_socket_from_handle_get>
   13bdc:	2800      	cmp	r0, #0
   13bde:	d038      	beq.n	13c52 <tls_interface_recvfrom+0x8a>
   13be0:	6803      	ldr	r3, [r0, #0]
   13be2:	b29b      	uxth	r3, r3
   13be4:	2b0c      	cmp	r3, #12
   13be6:	d00f      	beq.n	13c08 <tls_interface_recvfrom+0x40>
   13be8:	6803      	ldr	r3, [r0, #0]
   13bea:	b29b      	uxth	r3, r3
   13bec:	2b0d      	cmp	r3, #13
   13bee:	d00b      	beq.n	13c08 <tls_interface_recvfrom+0x40>
   13bf0:	6903      	ldr	r3, [r0, #16]
   13bf2:	2b01      	cmp	r3, #1
   13bf4:	d01a      	beq.n	13c2c <tls_interface_recvfrom+0x64>
   13bf6:	2b02      	cmp	r3, #2
   13bf8:	d010      	beq.n	13c1c <tls_interface_recvfrom+0x54>
   13bfa:	2023      	movs	r0, #35	; 0x23
   13bfc:	f7fd fdaa 	bl	11754 <bsd_os_errno_set>
   13c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c08:	e9cd 8908 	strd	r8, r9, [sp, #32]
   13c0c:	463b      	mov	r3, r7
   13c0e:	4632      	mov	r2, r6
   13c10:	4629      	mov	r1, r5
   13c12:	4620      	mov	r0, r4
   13c14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13c18:	f003 bdaa 	b.w	17770 <ip_interface_recvfrom>
   13c1c:	6803      	ldr	r3, [r0, #0]
   13c1e:	b29b      	uxth	r3, r3
   13c20:	2b02      	cmp	r3, #2
   13c22:	d007      	beq.n	13c34 <tls_interface_recvfrom+0x6c>
   13c24:	6803      	ldr	r3, [r0, #0]
   13c26:	b29b      	uxth	r3, r3
   13c28:	2b04      	cmp	r3, #4
   13c2a:	d003      	beq.n	13c34 <tls_interface_recvfrom+0x6c>
   13c2c:	6803      	ldr	r3, [r0, #0]
   13c2e:	b29b      	uxth	r3, r3
   13c30:	2b05      	cmp	r3, #5
   13c32:	d1e2      	bne.n	13bfa <tls_interface_recvfrom+0x32>
   13c34:	4b08      	ldr	r3, [pc, #32]	; (13c58 <tls_interface_recvfrom+0x90>)
   13c36:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13c3a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13c3e:	2b02      	cmp	r3, #2
   13c40:	d1db      	bne.n	13bfa <tls_interface_recvfrom+0x32>
   13c42:	4601      	mov	r1, r0
   13c44:	4620      	mov	r0, r4
   13c46:	f7ff fe9d 	bl	13984 <secure_client_socket>
   13c4a:	2800      	cmp	r0, #0
   13c4c:	d0dc      	beq.n	13c08 <tls_interface_recvfrom+0x40>
   13c4e:	dcd5      	bgt.n	13bfc <tls_interface_recvfrom+0x34>
   13c50:	e7d6      	b.n	13c00 <tls_interface_recvfrom+0x38>
   13c52:	2009      	movs	r0, #9
   13c54:	e7d2      	b.n	13bfc <tls_interface_recvfrom+0x34>
   13c56:	bf00      	nop
   13c58:	2002063c 	.word	0x2002063c

00013c5c <tls_interface_bind>:
   13c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c60:	460c      	mov	r4, r1
   13c62:	4617      	mov	r7, r2
   13c64:	4606      	mov	r6, r0
   13c66:	f004 fef3 	bl	18a50 <interface_socket_from_handle_get>
   13c6a:	2800      	cmp	r0, #0
   13c6c:	d04c      	beq.n	13d08 <tls_interface_bind+0xac>
   13c6e:	6803      	ldr	r3, [r0, #0]
   13c70:	4605      	mov	r5, r0
   13c72:	b29b      	uxth	r3, r3
   13c74:	2b02      	cmp	r3, #2
   13c76:	d150      	bne.n	13d1a <tls_interface_bind+0xbe>
   13c78:	4621      	mov	r1, r4
   13c7a:	463a      	mov	r2, r7
   13c7c:	4630      	mov	r0, r6
   13c7e:	f003 ff4d 	bl	17b1c <ip_interface_bind>
   13c82:	4604      	mov	r4, r0
   13c84:	b120      	cbz	r0, 13c90 <tls_interface_bind+0x34>
   13c86:	2c00      	cmp	r4, #0
   13c88:	dc3f      	bgt.n	13d0a <tls_interface_bind+0xae>
   13c8a:	4620      	mov	r0, r4
   13c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13c90:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
   13c94:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13d2c <tls_interface_bind+0xd0>
   13c98:	00bf      	lsls	r7, r7, #2
   13c9a:	f818 3007 	ldrb.w	r3, [r8, r7]
   13c9e:	2b01      	cmp	r3, #1
   13ca0:	d1f3      	bne.n	13c8a <tls_interface_bind+0x2e>
   13ca2:	4603      	mov	r3, r0
   13ca4:	f247 0281 	movw	r2, #28801	; 0x7081
   13ca8:	69a9      	ldr	r1, [r5, #24]
   13caa:	4630      	mov	r0, r6
   13cac:	f003 faaa 	bl	17204 <ip_interface_request_create>
   13cb0:	4681      	mov	r9, r0
   13cb2:	b3b0      	cbz	r0, 13d22 <tls_interface_bind+0xc6>
   13cb4:	eb08 0107 	add.w	r1, r8, r7
   13cb8:	2224      	movs	r2, #36	; 0x24
   13cba:	3014      	adds	r0, #20
   13cbc:	f009 fb99 	bl	1d3f2 <memcpy>
   13cc0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   13cc4:	4649      	mov	r1, r9
   13cc6:	3324      	adds	r3, #36	; 0x24
   13cc8:	f8c9 3008 	str.w	r3, [r9, #8]
   13ccc:	682a      	ldr	r2, [r5, #0]
   13cce:	2304      	movs	r3, #4
   13cd0:	0c12      	lsrs	r2, r2, #16
   13cd2:	0412      	lsls	r2, r2, #16
   13cd4:	f042 020a 	orr.w	r2, r2, #10
   13cd8:	602a      	str	r2, [r5, #0]
   13cda:	4628      	mov	r0, r5
   13cdc:	f247 0281 	movw	r2, #28801	; 0x7081
   13ce0:	f003 fab0 	bl	17244 <ip_interface_request_send>
   13ce4:	b9f8      	cbnz	r0, 13d26 <tls_interface_bind+0xca>
   13ce6:	682b      	ldr	r3, [r5, #0]
   13ce8:	00db      	lsls	r3, r3, #3
   13cea:	d418      	bmi.n	13d1e <tls_interface_bind+0xc2>
   13cec:	4630      	mov	r0, r6
   13cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13cf6:	210b      	movs	r1, #11
   13cf8:	f003 fab8 	bl	1726c <ip_interface_wait>
   13cfc:	2800      	cmp	r0, #0
   13cfe:	d0c4      	beq.n	13c8a <tls_interface_bind+0x2e>
   13d00:	2304      	movs	r3, #4
   13d02:	4604      	mov	r4, r0
   13d04:	602b      	str	r3, [r5, #0]
   13d06:	e7be      	b.n	13c86 <tls_interface_bind+0x2a>
   13d08:	2409      	movs	r4, #9
   13d0a:	4620      	mov	r0, r4
   13d0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13d10:	f7fd fd20 	bl	11754 <bsd_os_errno_set>
   13d14:	4620      	mov	r0, r4
   13d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13d1a:	242d      	movs	r4, #45	; 0x2d
   13d1c:	e7f5      	b.n	13d0a <tls_interface_bind+0xae>
   13d1e:	2473      	movs	r4, #115	; 0x73
   13d20:	e7f3      	b.n	13d0a <tls_interface_bind+0xae>
   13d22:	240c      	movs	r4, #12
   13d24:	e7f1      	b.n	13d0a <tls_interface_bind+0xae>
   13d26:	4604      	mov	r4, r0
   13d28:	e7ad      	b.n	13c86 <tls_interface_bind+0x2a>
   13d2a:	bf00      	nop
   13d2c:	2002063c 	.word	0x2002063c

00013d30 <tls_interface_connect>:
   13d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d32:	460e      	mov	r6, r1
   13d34:	4617      	mov	r7, r2
   13d36:	4604      	mov	r4, r0
   13d38:	f004 fe8a 	bl	18a50 <interface_socket_from_handle_get>
   13d3c:	b1e8      	cbz	r0, 13d7a <tls_interface_connect+0x4a>
   13d3e:	4b13      	ldr	r3, [pc, #76]	; (13d8c <tls_interface_connect+0x5c>)
   13d40:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13d44:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   13d48:	2b02      	cmp	r3, #2
   13d4a:	d11c      	bne.n	13d86 <tls_interface_connect+0x56>
   13d4c:	6803      	ldr	r3, [r0, #0]
   13d4e:	4605      	mov	r5, r0
   13d50:	b29b      	uxth	r3, r3
   13d52:	2b02      	cmp	r3, #2
   13d54:	d003      	beq.n	13d5e <tls_interface_connect+0x2e>
   13d56:	6803      	ldr	r3, [r0, #0]
   13d58:	b29b      	uxth	r3, r3
   13d5a:	2b04      	cmp	r3, #4
   13d5c:	d113      	bne.n	13d86 <tls_interface_connect+0x56>
   13d5e:	463a      	mov	r2, r7
   13d60:	4631      	mov	r1, r6
   13d62:	4620      	mov	r0, r4
   13d64:	f003 fe30 	bl	179c8 <ip_interface_connect>
   13d68:	b110      	cbz	r0, 13d70 <tls_interface_connect+0x40>
   13d6a:	2800      	cmp	r0, #0
   13d6c:	dc06      	bgt.n	13d7c <tls_interface_connect+0x4c>
   13d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d70:	4629      	mov	r1, r5
   13d72:	4620      	mov	r0, r4
   13d74:	f7ff fe06 	bl	13984 <secure_client_socket>
   13d78:	e7f7      	b.n	13d6a <tls_interface_connect+0x3a>
   13d7a:	2009      	movs	r0, #9
   13d7c:	f7fd fcea 	bl	11754 <bsd_os_errno_set>
   13d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d86:	202d      	movs	r0, #45	; 0x2d
   13d88:	e7f8      	b.n	13d7c <tls_interface_connect+0x4c>
   13d8a:	bf00      	nop
   13d8c:	2002063c 	.word	0x2002063c

00013d90 <tls_interface_listen>:
   13d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d94:	460f      	mov	r7, r1
   13d96:	4606      	mov	r6, r0
   13d98:	f004 fe5a 	bl	18a50 <interface_socket_from_handle_get>
   13d9c:	2800      	cmp	r0, #0
   13d9e:	d06b      	beq.n	13e78 <tls_interface_listen+0xe8>
   13da0:	6903      	ldr	r3, [r0, #16]
   13da2:	4604      	mov	r4, r0
   13da4:	2b01      	cmp	r3, #1
   13da6:	d165      	bne.n	13e74 <tls_interface_listen+0xe4>
   13da8:	6803      	ldr	r3, [r0, #0]
   13daa:	b29b      	uxth	r3, r3
   13dac:	2b04      	cmp	r3, #4
   13dae:	d056      	beq.n	13e5e <tls_interface_listen+0xce>
   13db0:	6823      	ldr	r3, [r4, #0]
   13db2:	b29b      	uxth	r3, r3
   13db4:	2b0b      	cmp	r3, #11
   13db6:	d15d      	bne.n	13e74 <tls_interface_listen+0xe4>
   13db8:	00f3      	lsls	r3, r6, #3
   13dba:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 13e7c <tls_interface_listen+0xec>
   13dbe:	199a      	adds	r2, r3, r6
   13dc0:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   13dc4:	2a01      	cmp	r2, #1
   13dc6:	d155      	bne.n	13e74 <tls_interface_listen+0xe4>
   13dc8:	2201      	movs	r2, #1
   13dca:	4433      	add	r3, r6
   13dcc:	009d      	lsls	r5, r3, #2
   13dce:	f809 2005 	strb.w	r2, [r9, r5]
   13dd2:	69a1      	ldr	r1, [r4, #24]
   13dd4:	2300      	movs	r3, #0
   13dd6:	f247 0281 	movw	r2, #28801	; 0x7081
   13dda:	4630      	mov	r0, r6
   13ddc:	f8d4 8000 	ldr.w	r8, [r4]
   13de0:	f003 fa10 	bl	17204 <ip_interface_request_create>
   13de4:	4682      	mov	sl, r0
   13de6:	2800      	cmp	r0, #0
   13de8:	d042      	beq.n	13e70 <tls_interface_listen+0xe0>
   13dea:	eb09 0105 	add.w	r1, r9, r5
   13dee:	2224      	movs	r2, #36	; 0x24
   13df0:	3014      	adds	r0, #20
   13df2:	f009 fafe 	bl	1d3f2 <memcpy>
   13df6:	f8da 3008 	ldr.w	r3, [sl, #8]
   13dfa:	4651      	mov	r1, sl
   13dfc:	3324      	adds	r3, #36	; 0x24
   13dfe:	f8ca 3008 	str.w	r3, [sl, #8]
   13e02:	6822      	ldr	r2, [r4, #0]
   13e04:	4643      	mov	r3, r8
   13e06:	0c12      	lsrs	r2, r2, #16
   13e08:	0412      	lsls	r2, r2, #16
   13e0a:	f042 020a 	orr.w	r2, r2, #10
   13e0e:	6022      	str	r2, [r4, #0]
   13e10:	4620      	mov	r0, r4
   13e12:	f247 0281 	movw	r2, #28801	; 0x7081
   13e16:	f003 fa15 	bl	17244 <ip_interface_request_send>
   13e1a:	b9e0      	cbnz	r0, 13e56 <tls_interface_listen+0xc6>
   13e1c:	6823      	ldr	r3, [r4, #0]
   13e1e:	00db      	lsls	r3, r3, #3
   13e20:	d40e      	bmi.n	13e40 <tls_interface_listen+0xb0>
   13e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13e2a:	210b      	movs	r1, #11
   13e2c:	4630      	mov	r0, r6
   13e2e:	f003 fa1d 	bl	1726c <ip_interface_wait>
   13e32:	b160      	cbz	r0, 13e4e <tls_interface_listen+0xbe>
   13e34:	2800      	cmp	r0, #0
   13e36:	f8c4 8000 	str.w	r8, [r4]
   13e3a:	dc02      	bgt.n	13e42 <tls_interface_listen+0xb2>
   13e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e40:	2073      	movs	r0, #115	; 0x73
   13e42:	f7fd fc87 	bl	11754 <bsd_os_errno_set>
   13e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e4e:	4639      	mov	r1, r7
   13e50:	4630      	mov	r0, r6
   13e52:	f003 fef9 	bl	17c48 <ip_interface_listen>
   13e56:	2800      	cmp	r0, #0
   13e58:	dcf3      	bgt.n	13e42 <tls_interface_listen+0xb2>
   13e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e5e:	00f3      	lsls	r3, r6, #3
   13e60:	f8df 9018 	ldr.w	r9, [pc, #24]	; 13e7c <tls_interface_listen+0xec>
   13e64:	199a      	adds	r2, r3, r6
   13e66:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   13e6a:	2a02      	cmp	r2, #2
   13e6c:	d1a0      	bne.n	13db0 <tls_interface_listen+0x20>
   13e6e:	e7ab      	b.n	13dc8 <tls_interface_listen+0x38>
   13e70:	200c      	movs	r0, #12
   13e72:	e7e6      	b.n	13e42 <tls_interface_listen+0xb2>
   13e74:	202d      	movs	r0, #45	; 0x2d
   13e76:	e7e4      	b.n	13e42 <tls_interface_listen+0xb2>
   13e78:	2009      	movs	r0, #9
   13e7a:	e7e2      	b.n	13e42 <tls_interface_listen+0xb2>
   13e7c:	2002063c 	.word	0x2002063c

00013e80 <tls_interface_accept>:
   13e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e82:	460c      	mov	r4, r1
   13e84:	4616      	mov	r6, r2
   13e86:	461f      	mov	r7, r3
   13e88:	4605      	mov	r5, r0
   13e8a:	f004 fde1 	bl	18a50 <interface_socket_from_handle_get>
   13e8e:	2800      	cmp	r0, #0
   13e90:	d03b      	beq.n	13f0a <tls_interface_accept+0x8a>
   13e92:	6800      	ldr	r0, [r0, #0]
   13e94:	b280      	uxth	r0, r0
   13e96:	2806      	cmp	r0, #6
   13e98:	d137      	bne.n	13f0a <tls_interface_accept+0x8a>
   13e9a:	4621      	mov	r1, r4
   13e9c:	463b      	mov	r3, r7
   13e9e:	4632      	mov	r2, r6
   13ea0:	4628      	mov	r0, r5
   13ea2:	f003 ff47 	bl	17d34 <ip_interface_accept>
   13ea6:	4604      	mov	r4, r0
   13ea8:	b118      	cbz	r0, 13eb2 <tls_interface_accept+0x32>
   13eaa:	2c00      	cmp	r4, #0
   13eac:	dc2e      	bgt.n	13f0c <tls_interface_accept+0x8c>
   13eae:	4620      	mov	r0, r4
   13eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13eb2:	4628      	mov	r0, r5
   13eb4:	f004 fdcc 	bl	18a50 <interface_socket_from_handle_get>
   13eb8:	6803      	ldr	r3, [r0, #0]
   13eba:	4f18      	ldr	r7, [pc, #96]	; (13f1c <tls_interface_accept+0x9c>)
   13ebc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13ec0:	6003      	str	r3, [r0, #0]
   13ec2:	6803      	ldr	r3, [r0, #0]
   13ec4:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13ec8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13ecc:	4606      	mov	r6, r0
   13ece:	6003      	str	r3, [r0, #0]
   13ed0:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   13ed4:	2224      	movs	r2, #36	; 0x24
   13ed6:	4638      	mov	r0, r7
   13ed8:	f009 fa8b 	bl	1d3f2 <memcpy>
   13edc:	2302      	movs	r3, #2
   13ede:	703b      	strb	r3, [r7, #0]
   13ee0:	6833      	ldr	r3, [r6, #0]
   13ee2:	4620      	mov	r0, r4
   13ee4:	0c1b      	lsrs	r3, r3, #16
   13ee6:	041b      	lsls	r3, r3, #16
   13ee8:	f043 030b 	orr.w	r3, r3, #11
   13eec:	6033      	str	r3, [r6, #0]
   13eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ef6:	210c      	movs	r1, #12
   13ef8:	f003 f9b8 	bl	1726c <ip_interface_wait>
   13efc:	4604      	mov	r4, r0
   13efe:	2800      	cmp	r0, #0
   13f00:	d0d5      	beq.n	13eae <tls_interface_accept+0x2e>
   13f02:	2000      	movs	r0, #0
   13f04:	f003 fa8a 	bl	1741c <ip_interface_close>
   13f08:	e7cf      	b.n	13eaa <tls_interface_accept+0x2a>
   13f0a:	2409      	movs	r4, #9
   13f0c:	4620      	mov	r0, r4
   13f0e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13f12:	f7fd fc1f 	bl	11754 <bsd_os_errno_set>
   13f16:	4620      	mov	r0, r4
   13f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f1a:	bf00      	nop
   13f1c:	2002063c 	.word	0x2002063c

00013f20 <tls_interface_setopt>:
   13f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f24:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   13f28:	9f06      	ldr	r7, [sp, #24]
   13f2a:	d11d      	bne.n	13f68 <tls_interface_setopt+0x48>
   13f2c:	461c      	mov	r4, r3
   13f2e:	b1c3      	cbz	r3, 13f62 <tls_interface_setopt+0x42>
   13f30:	b1bf      	cbz	r7, 13f62 <tls_interface_setopt+0x42>
   13f32:	4605      	mov	r5, r0
   13f34:	4616      	mov	r6, r2
   13f36:	f004 fd8b 	bl	18a50 <interface_socket_from_handle_get>
   13f3a:	b1c8      	cbz	r0, 13f70 <tls_interface_setopt+0x50>
   13f3c:	6803      	ldr	r3, [r0, #0]
   13f3e:	b29b      	uxth	r3, r3
   13f40:	2b02      	cmp	r3, #2
   13f42:	d007      	beq.n	13f54 <tls_interface_setopt+0x34>
   13f44:	6803      	ldr	r3, [r0, #0]
   13f46:	b29b      	uxth	r3, r3
   13f48:	2b04      	cmp	r3, #4
   13f4a:	d003      	beq.n	13f54 <tls_interface_setopt+0x34>
   13f4c:	6803      	ldr	r3, [r0, #0]
   13f4e:	b29b      	uxth	r3, r3
   13f50:	2b05      	cmp	r3, #5
   13f52:	d10d      	bne.n	13f70 <tls_interface_setopt+0x50>
   13f54:	3e01      	subs	r6, #1
   13f56:	2e03      	cmp	r6, #3
   13f58:	d851      	bhi.n	13ffe <tls_interface_setopt+0xde>
   13f5a:	e8df f006 	tbb	[pc, r6]
   13f5e:	3225      	.short	0x3225
   13f60:	0b18      	.short	0x0b18
   13f62:	200e      	movs	r0, #14
   13f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13f6c:	f004 b81a 	b.w	17fa4 <ip_interface_setopt>
   13f70:	2009      	movs	r0, #9
   13f72:	e7f7      	b.n	13f64 <tls_interface_setopt+0x44>
   13f74:	2f04      	cmp	r7, #4
   13f76:	d139      	bne.n	13fec <tls_interface_setopt+0xcc>
   13f78:	6823      	ldr	r3, [r4, #0]
   13f7a:	2b02      	cmp	r3, #2
   13f7c:	d836      	bhi.n	13fec <tls_interface_setopt+0xcc>
   13f7e:	4a21      	ldr	r2, [pc, #132]	; (14004 <tls_interface_setopt+0xe4>)
   13f80:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13f84:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   13f88:	70ab      	strb	r3, [r5, #2]
   13f8a:	2000      	movs	r0, #0
   13f8c:	e7ea      	b.n	13f64 <tls_interface_setopt+0x44>
   13f8e:	2f01      	cmp	r7, #1
   13f90:	d12c      	bne.n	13fec <tls_interface_setopt+0xcc>
   13f92:	7823      	ldrb	r3, [r4, #0]
   13f94:	2b01      	cmp	r3, #1
   13f96:	d829      	bhi.n	13fec <tls_interface_setopt+0xcc>
   13f98:	4a1a      	ldr	r2, [pc, #104]	; (14004 <tls_interface_setopt+0xe4>)
   13f9a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13f9e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   13fa2:	7053      	strb	r3, [r2, #1]
   13fa4:	2000      	movs	r0, #0
   13fa6:	e7dd      	b.n	13f64 <tls_interface_setopt+0x44>
   13fa8:	2f04      	cmp	r7, #4
   13faa:	d11f      	bne.n	13fec <tls_interface_setopt+0xcc>
   13fac:	6820      	ldr	r0, [r4, #0]
   13fae:	b1f8      	cbz	r0, 13ff0 <tls_interface_setopt+0xd0>
   13fb0:	2801      	cmp	r0, #1
   13fb2:	d11b      	bne.n	13fec <tls_interface_setopt+0xcc>
   13fb4:	4b13      	ldr	r3, [pc, #76]	; (14004 <tls_interface_setopt+0xe4>)
   13fb6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13fba:	f803 0025 	strb.w	r0, [r3, r5, lsl #2]
   13fbe:	2000      	movs	r0, #0
   13fc0:	e7d0      	b.n	13f64 <tls_interface_setopt+0x44>
   13fc2:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   13fc6:	d011      	beq.n	13fec <tls_interface_setopt+0xcc>
   13fc8:	f017 0603 	ands.w	r6, r7, #3
   13fcc:	d10e      	bne.n	13fec <tls_interface_setopt+0xcc>
   13fce:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13fd2:	00ad      	lsls	r5, r5, #2
   13fd4:	4b0b      	ldr	r3, [pc, #44]	; (14004 <tls_interface_setopt+0xe4>)
   13fd6:	1d28      	adds	r0, r5, #4
   13fd8:	4418      	add	r0, r3
   13fda:	442b      	add	r3, r5
   13fdc:	463a      	mov	r2, r7
   13fde:	4621      	mov	r1, r4
   13fe0:	f883 c003 	strb.w	ip, [r3, #3]
   13fe4:	f009 fa05 	bl	1d3f2 <memcpy>
   13fe8:	4630      	mov	r0, r6
   13fea:	e7bb      	b.n	13f64 <tls_interface_setopt+0x44>
   13fec:	2016      	movs	r0, #22
   13fee:	e7b9      	b.n	13f64 <tls_interface_setopt+0x44>
   13ff0:	2202      	movs	r2, #2
   13ff2:	4b04      	ldr	r3, [pc, #16]	; (14004 <tls_interface_setopt+0xe4>)
   13ff4:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   13ff8:	f803 2025 	strb.w	r2, [r3, r5, lsl #2]
   13ffc:	e7b2      	b.n	13f64 <tls_interface_setopt+0x44>
   13ffe:	202a      	movs	r0, #42	; 0x2a
   14000:	e7b0      	b.n	13f64 <tls_interface_setopt+0x44>
   14002:	bf00      	nop
   14004:	2002063c 	.word	0x2002063c

00014008 <tls_interface_getopt>:
   14008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1400c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   14010:	9f06      	ldr	r7, [sp, #24]
   14012:	d112      	bne.n	1403a <tls_interface_getopt+0x32>
   14014:	461d      	mov	r5, r3
   14016:	b16b      	cbz	r3, 14034 <tls_interface_getopt+0x2c>
   14018:	b167      	cbz	r7, 14034 <tls_interface_getopt+0x2c>
   1401a:	4606      	mov	r6, r0
   1401c:	4614      	mov	r4, r2
   1401e:	f004 fd17 	bl	18a50 <interface_socket_from_handle_get>
   14022:	2800      	cmp	r0, #0
   14024:	d04f      	beq.n	140c6 <tls_interface_getopt+0xbe>
   14026:	3c01      	subs	r4, #1
   14028:	2c03      	cmp	r4, #3
   1402a:	d852      	bhi.n	140d2 <tls_interface_getopt+0xca>
   1402c:	e8df f004 	tbb	[pc, r4]
   14030:	09152139 	.word	0x09152139
   14034:	200e      	movs	r0, #14
   14036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1403a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1403e:	f004 b86d 	b.w	1811c <ip_interface_getopt>
   14042:	683b      	ldr	r3, [r7, #0]
   14044:	2b04      	cmp	r3, #4
   14046:	d13c      	bne.n	140c2 <tls_interface_getopt+0xba>
   14048:	4b23      	ldr	r3, [pc, #140]	; (140d8 <tls_interface_getopt+0xd0>)
   1404a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1404e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   14052:	78b3      	ldrb	r3, [r6, #2]
   14054:	2000      	movs	r0, #0
   14056:	602b      	str	r3, [r5, #0]
   14058:	e7ed      	b.n	14036 <tls_interface_getopt+0x2e>
   1405a:	683b      	ldr	r3, [r7, #0]
   1405c:	2b04      	cmp	r3, #4
   1405e:	d130      	bne.n	140c2 <tls_interface_getopt+0xba>
   14060:	4b1d      	ldr	r3, [pc, #116]	; (140d8 <tls_interface_getopt+0xd0>)
   14062:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   14066:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1406a:	7873      	ldrb	r3, [r6, #1]
   1406c:	2000      	movs	r0, #0
   1406e:	602b      	str	r3, [r5, #0]
   14070:	e7e1      	b.n	14036 <tls_interface_getopt+0x2e>
   14072:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   14076:	4918      	ldr	r1, [pc, #96]	; (140d8 <tls_interface_getopt+0xd0>)
   14078:	683b      	ldr	r3, [r7, #0]
   1407a:	00b6      	lsls	r6, r6, #2
   1407c:	198a      	adds	r2, r1, r6
   1407e:	f013 0403 	ands.w	r4, r3, #3
   14082:	78d0      	ldrb	r0, [r2, #3]
   14084:	d121      	bne.n	140ca <tls_interface_getopt+0xc2>
   14086:	089b      	lsrs	r3, r3, #2
   14088:	4283      	cmp	r3, r0
   1408a:	bf28      	it	cs
   1408c:	4603      	movcs	r3, r0
   1408e:	009a      	lsls	r2, r3, #2
   14090:	b1db      	cbz	r3, 140ca <tls_interface_getopt+0xc2>
   14092:	3604      	adds	r6, #4
   14094:	4431      	add	r1, r6
   14096:	603a      	str	r2, [r7, #0]
   14098:	4628      	mov	r0, r5
   1409a:	f009 f9aa 	bl	1d3f2 <memcpy>
   1409e:	4620      	mov	r0, r4
   140a0:	e7c9      	b.n	14036 <tls_interface_getopt+0x2e>
   140a2:	683b      	ldr	r3, [r7, #0]
   140a4:	2b04      	cmp	r3, #4
   140a6:	d10c      	bne.n	140c2 <tls_interface_getopt+0xba>
   140a8:	4b0b      	ldr	r3, [pc, #44]	; (140d8 <tls_interface_getopt+0xd0>)
   140aa:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   140ae:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   140b2:	2000      	movs	r0, #0
   140b4:	f1a3 0301 	sub.w	r3, r3, #1
   140b8:	fab3 f383 	clz	r3, r3
   140bc:	095b      	lsrs	r3, r3, #5
   140be:	602b      	str	r3, [r5, #0]
   140c0:	e7b9      	b.n	14036 <tls_interface_getopt+0x2e>
   140c2:	2016      	movs	r0, #22
   140c4:	e7b7      	b.n	14036 <tls_interface_getopt+0x2e>
   140c6:	2009      	movs	r0, #9
   140c8:	e7b5      	b.n	14036 <tls_interface_getopt+0x2e>
   140ca:	2800      	cmp	r0, #0
   140cc:	d1f9      	bne.n	140c2 <tls_interface_getopt+0xba>
   140ce:	6038      	str	r0, [r7, #0]
   140d0:	e7b1      	b.n	14036 <tls_interface_getopt+0x2e>
   140d2:	202a      	movs	r0, #42	; 0x2a
   140d4:	e7af      	b.n	14036 <tls_interface_getopt+0x2e>
   140d6:	bf00      	nop
   140d8:	2002063c 	.word	0x2002063c

000140dc <tls_rpc_ip_event_handler>:
   140dc:	b538      	push	{r3, r4, r5, lr}
   140de:	f248 0581 	movw	r5, #32897	; 0x8081
   140e2:	42ab      	cmp	r3, r5
   140e4:	460c      	mov	r4, r1
   140e6:	d053      	beq.n	14190 <tls_rpc_ip_event_handler+0xb4>
   140e8:	f249 0182 	movw	r1, #36994	; 0x9082
   140ec:	428b      	cmp	r3, r1
   140ee:	d02d      	beq.n	1414c <tls_rpc_ip_event_handler+0x70>
   140f0:	f248 0102 	movw	r1, #32770	; 0x8002
   140f4:	428b      	cmp	r3, r1
   140f6:	d001      	beq.n	140fc <tls_rpc_ip_event_handler+0x20>
   140f8:	2001      	movs	r0, #1
   140fa:	bd38      	pop	{r3, r4, r5, pc}
   140fc:	2c00      	cmp	r4, #0
   140fe:	d0fb      	beq.n	140f8 <tls_rpc_ip_event_handler+0x1c>
   14100:	6963      	ldr	r3, [r4, #20]
   14102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   14106:	d002      	beq.n	1410e <tls_rpc_ip_event_handler+0x32>
   14108:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1410c:	d1f4      	bne.n	140f8 <tls_rpc_ip_event_handler+0x1c>
   1410e:	6823      	ldr	r3, [r4, #0]
   14110:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   14114:	6023      	str	r3, [r4, #0]
   14116:	6955      	ldr	r5, [r2, #20]
   14118:	2d00      	cmp	r5, #0
   1411a:	d148      	bne.n	141ae <tls_rpc_ip_event_handler+0xd2>
   1411c:	6823      	ldr	r3, [r4, #0]
   1411e:	0c1b      	lsrs	r3, r3, #16
   14120:	041b      	lsls	r3, r3, #16
   14122:	f043 0305 	orr.w	r3, r3, #5
   14126:	6023      	str	r3, [r4, #0]
   14128:	6823      	ldr	r3, [r4, #0]
   1412a:	00da      	lsls	r2, r3, #3
   1412c:	d50c      	bpl.n	14148 <tls_rpc_ip_event_handler+0x6c>
   1412e:	4b25      	ldr	r3, [pc, #148]	; (141c4 <tls_rpc_ip_event_handler+0xe8>)
   14130:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
   14134:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   14138:	2b02      	cmp	r3, #2
   1413a:	d105      	bne.n	14148 <tls_rpc_ip_event_handler+0x6c>
   1413c:	4621      	mov	r1, r4
   1413e:	f7ff fc21 	bl	13984 <secure_client_socket>
   14142:	b108      	cbz	r0, 14148 <tls_rpc_ip_event_handler+0x6c>
   14144:	2873      	cmp	r0, #115	; 0x73
   14146:	d135      	bne.n	141b4 <tls_rpc_ip_event_handler+0xd8>
   14148:	2000      	movs	r0, #0
   1414a:	bd38      	pop	{r3, r4, r5, pc}
   1414c:	2c00      	cmp	r4, #0
   1414e:	d0fb      	beq.n	14148 <tls_rpc_ip_event_handler+0x6c>
   14150:	6823      	ldr	r3, [r4, #0]
   14152:	b29b      	uxth	r3, r3
   14154:	2b0b      	cmp	r3, #11
   14156:	d1f7      	bne.n	14148 <tls_rpc_ip_event_handler+0x6c>
   14158:	6910      	ldr	r0, [r2, #16]
   1415a:	bb48      	cbnz	r0, 141b0 <tls_rpc_ip_event_handler+0xd4>
   1415c:	6823      	ldr	r3, [r4, #0]
   1415e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   14162:	6023      	str	r3, [r4, #0]
   14164:	6823      	ldr	r3, [r4, #0]
   14166:	00db      	lsls	r3, r3, #3
   14168:	d5ee      	bpl.n	14148 <tls_rpc_ip_event_handler+0x6c>
   1416a:	6823      	ldr	r3, [r4, #0]
   1416c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   14170:	6023      	str	r3, [r4, #0]
   14172:	6823      	ldr	r3, [r4, #0]
   14174:	0c1b      	lsrs	r3, r3, #16
   14176:	041b      	lsls	r3, r3, #16
   14178:	f043 030c 	orr.w	r3, r3, #12
   1417c:	6023      	str	r3, [r4, #0]
   1417e:	6823      	ldr	r3, [r4, #0]
   14180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14184:	6023      	str	r3, [r4, #0]
   14186:	6823      	ldr	r3, [r4, #0]
   14188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1418c:	6023      	str	r3, [r4, #0]
   1418e:	bd38      	pop	{r3, r4, r5, pc}
   14190:	2900      	cmp	r1, #0
   14192:	d0d9      	beq.n	14148 <tls_rpc_ip_event_handler+0x6c>
   14194:	680b      	ldr	r3, [r1, #0]
   14196:	b29b      	uxth	r3, r3
   14198:	2b0a      	cmp	r3, #10
   1419a:	d1d5      	bne.n	14148 <tls_rpc_ip_event_handler+0x6c>
   1419c:	6950      	ldr	r0, [r2, #20]
   1419e:	b938      	cbnz	r0, 141b0 <tls_rpc_ip_event_handler+0xd4>
   141a0:	680b      	ldr	r3, [r1, #0]
   141a2:	0c1b      	lsrs	r3, r3, #16
   141a4:	041b      	lsls	r3, r3, #16
   141a6:	f043 030b 	orr.w	r3, r3, #11
   141aa:	600b      	str	r3, [r1, #0]
   141ac:	bd38      	pop	{r3, r4, r5, pc}
   141ae:	4628      	mov	r0, r5
   141b0:	f003 f81e 	bl	171f0 <rpc_error_to_nrf_bsd_error>
   141b4:	6060      	str	r0, [r4, #4]
   141b6:	6823      	ldr	r3, [r4, #0]
   141b8:	2000      	movs	r0, #0
   141ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   141be:	6023      	str	r3, [r4, #0]
   141c0:	bd38      	pop	{r3, r4, r5, pc}
   141c2:	bf00      	nop
   141c4:	2002063c 	.word	0x2002063c

000141c8 <rpc_dfu_event_handler>:
   141c8:	b508      	push	{r3, lr}
   141ca:	4a08      	ldr	r2, [pc, #32]	; (141ec <rpc_dfu_event_handler+0x24>)
   141cc:	68c1      	ldr	r1, [r0, #12]
   141ce:	8812      	ldrh	r2, [r2, #0]
   141d0:	4603      	mov	r3, r0
   141d2:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   141d6:	d005      	beq.n	141e4 <rpc_dfu_event_handler+0x1c>
   141d8:	6800      	ldr	r0, [r0, #0]
   141da:	b110      	cbz	r0, 141e2 <rpc_dfu_event_handler+0x1a>
   141dc:	f7fe ff9a 	bl	13114 <rpc_dfu_client_data_free>
   141e0:	2000      	movs	r0, #0
   141e2:	bd08      	pop	{r3, pc}
   141e4:	4a02      	ldr	r2, [pc, #8]	; (141f0 <rpc_dfu_event_handler+0x28>)
   141e6:	2001      	movs	r0, #1
   141e8:	6013      	str	r3, [r2, #0]
   141ea:	bd08      	pop	{r3, pc}
   141ec:	20024e1c 	.word	0x20024e1c
   141f0:	20020768 	.word	0x20020768

000141f4 <mfu_interface_init>:
   141f4:	2300      	movs	r3, #0
   141f6:	b510      	push	{r4, lr}
   141f8:	4808      	ldr	r0, [pc, #32]	; (1421c <mfu_interface_init+0x28>)
   141fa:	4909      	ldr	r1, [pc, #36]	; (14220 <mfu_interface_init+0x2c>)
   141fc:	4a09      	ldr	r2, [pc, #36]	; (14224 <mfu_interface_init+0x30>)
   141fe:	4c0a      	ldr	r4, [pc, #40]	; (14228 <mfu_interface_init+0x34>)
   14200:	8003      	strh	r3, [r0, #0]
   14202:	600b      	str	r3, [r1, #0]
   14204:	6013      	str	r3, [r2, #0]
   14206:	6023      	str	r3, [r4, #0]
   14208:	f7fe ff4e 	bl	130a8 <rpc_dfu_client_init>
   1420c:	b910      	cbnz	r0, 14214 <mfu_interface_init+0x20>
   1420e:	2301      	movs	r3, #1
   14210:	6023      	str	r3, [r4, #0]
   14212:	bd10      	pop	{r4, pc}
   14214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14218:	bd10      	pop	{r4, pc}
   1421a:	bf00      	nop
   1421c:	20024e1c 	.word	0x20024e1c
   14220:	20020768 	.word	0x20020768
   14224:	20020764 	.word	0x20020764
   14228:	2002075c 	.word	0x2002075c

0001422c <mfu_interface_open>:
   1422c:	2801      	cmp	r0, #1
   1422e:	b508      	push	{r3, lr}
   14230:	d10b      	bne.n	1424a <mfu_interface_open+0x1e>
   14232:	f240 2303 	movw	r3, #515	; 0x203
   14236:	429a      	cmp	r2, r3
   14238:	d107      	bne.n	1424a <mfu_interface_open+0x1e>
   1423a:	4b09      	ldr	r3, [pc, #36]	; (14260 <mfu_interface_open+0x34>)
   1423c:	681a      	ldr	r2, [r3, #0]
   1423e:	2a01      	cmp	r2, #1
   14240:	d109      	bne.n	14256 <mfu_interface_open+0x2a>
   14242:	2202      	movs	r2, #2
   14244:	601a      	str	r2, [r3, #0]
   14246:	4807      	ldr	r0, [pc, #28]	; (14264 <mfu_interface_open+0x38>)
   14248:	bd08      	pop	{r3, pc}
   1424a:	2016      	movs	r0, #22
   1424c:	f7fd fa82 	bl	11754 <bsd_os_errno_set>
   14250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14254:	bd08      	pop	{r3, pc}
   14256:	f7fd fa7d 	bl	11754 <bsd_os_errno_set>
   1425a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1425e:	bd08      	pop	{r3, pc}
   14260:	2002075c 	.word	0x2002075c
   14264:	49765432 	.word	0x49765432

00014268 <mfu_interface_close>:
   14268:	b5f0      	push	{r4, r5, r6, r7, lr}
   1426a:	4c32      	ldr	r4, [pc, #200]	; (14334 <mfu_interface_close+0xcc>)
   1426c:	b083      	sub	sp, #12
   1426e:	6823      	ldr	r3, [r4, #0]
   14270:	1e9a      	subs	r2, r3, #2
   14272:	2a01      	cmp	r2, #1
   14274:	d857      	bhi.n	14326 <mfu_interface_close+0xbe>
   14276:	2b03      	cmp	r3, #3
   14278:	d004      	beq.n	14284 <mfu_interface_close+0x1c>
   1427a:	2301      	movs	r3, #1
   1427c:	2000      	movs	r0, #0
   1427e:	6023      	str	r3, [r4, #0]
   14280:	b003      	add	sp, #12
   14282:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14284:	2100      	movs	r1, #0
   14286:	4668      	mov	r0, sp
   14288:	f7fe ff14 	bl	130b4 <rpc_dfu_client_request_alloc>
   1428c:	4603      	mov	r3, r0
   1428e:	2800      	cmp	r0, #0
   14290:	d13d      	bne.n	1430e <mfu_interface_close+0xa6>
   14292:	2104      	movs	r1, #4
   14294:	4e28      	ldr	r6, [pc, #160]	; (14338 <mfu_interface_close+0xd0>)
   14296:	9800      	ldr	r0, [sp, #0]
   14298:	8832      	ldrh	r2, [r6, #0]
   1429a:	7201      	strb	r1, [r0, #8]
   1429c:	3201      	adds	r2, #1
   1429e:	b292      	uxth	r2, r2
   142a0:	0411      	lsls	r1, r2, #16
   142a2:	f041 0106 	orr.w	r1, r1, #6
   142a6:	4d25      	ldr	r5, [pc, #148]	; (1433c <mfu_interface_close+0xd4>)
   142a8:	60c1      	str	r1, [r0, #12]
   142aa:	7103      	strb	r3, [r0, #4]
   142ac:	7143      	strb	r3, [r0, #5]
   142ae:	7183      	strb	r3, [r0, #6]
   142b0:	71c3      	strb	r3, [r0, #7]
   142b2:	7243      	strb	r3, [r0, #9]
   142b4:	7283      	strb	r3, [r0, #10]
   142b6:	72c3      	strb	r3, [r0, #11]
   142b8:	2106      	movs	r1, #6
   142ba:	8032      	strh	r2, [r6, #0]
   142bc:	602b      	str	r3, [r5, #0]
   142be:	f7fe ff0d 	bl	130dc <rpc_dfu_client_request_send>
   142c2:	b9d8      	cbnz	r0, 142fc <mfu_interface_close+0x94>
   142c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142c8:	ae02      	add	r6, sp, #8
   142ca:	4627      	mov	r7, r4
   142cc:	f846 3d04 	str.w	r3, [r6, #-4]!
   142d0:	e004      	b.n	142dc <mfu_interface_close+0x74>
   142d2:	4631      	mov	r1, r6
   142d4:	4638      	mov	r0, r7
   142d6:	f7fd f9a9 	bl	1162c <bsd_os_timedwait>
   142da:	b9f0      	cbnz	r0, 1431a <mfu_interface_close+0xb2>
   142dc:	6828      	ldr	r0, [r5, #0]
   142de:	2800      	cmp	r0, #0
   142e0:	d0f7      	beq.n	142d2 <mfu_interface_close+0x6a>
   142e2:	6905      	ldr	r5, [r0, #16]
   142e4:	f7fe ff0e 	bl	13104 <rpc_dfu_client_message_free>
   142e8:	2d00      	cmp	r5, #0
   142ea:	d0c6      	beq.n	1427a <mfu_interface_close+0x12>
   142ec:	4b14      	ldr	r3, [pc, #80]	; (14340 <mfu_interface_close+0xd8>)
   142ee:	2008      	movs	r0, #8
   142f0:	601d      	str	r5, [r3, #0]
   142f2:	f7fd fa2f 	bl	11754 <bsd_os_errno_set>
   142f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142fa:	e7c1      	b.n	14280 <mfu_interface_close+0x18>
   142fc:	9800      	ldr	r0, [sp, #0]
   142fe:	6803      	ldr	r3, [r0, #0]
   14300:	b11b      	cbz	r3, 1430a <mfu_interface_close+0xa2>
   14302:	4618      	mov	r0, r3
   14304:	f7fe ff06 	bl	13114 <rpc_dfu_client_data_free>
   14308:	9800      	ldr	r0, [sp, #0]
   1430a:	f7fe fefb 	bl	13104 <rpc_dfu_client_message_free>
   1430e:	200c      	movs	r0, #12
   14310:	f7fd fa20 	bl	11754 <bsd_os_errno_set>
   14314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14318:	e7b2      	b.n	14280 <mfu_interface_close+0x18>
   1431a:	203c      	movs	r0, #60	; 0x3c
   1431c:	f7fd fa1a 	bl	11754 <bsd_os_errno_set>
   14320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14324:	e7ac      	b.n	14280 <mfu_interface_close+0x18>
   14326:	2001      	movs	r0, #1
   14328:	f7fd fa14 	bl	11754 <bsd_os_errno_set>
   1432c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14330:	e7a6      	b.n	14280 <mfu_interface_close+0x18>
   14332:	bf00      	nop
   14334:	2002075c 	.word	0x2002075c
   14338:	20024e1c 	.word	0x20024e1c
   1433c:	20020768 	.word	0x20020768
   14340:	20020760 	.word	0x20020760

00014344 <mfu_interface_sendto>:
   14344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14348:	4e5a      	ldr	r6, [pc, #360]	; (144b4 <mfu_interface_sendto+0x170>)
   1434a:	4615      	mov	r5, r2
   1434c:	6833      	ldr	r3, [r6, #0]
   1434e:	b082      	sub	sp, #8
   14350:	1e9a      	subs	r2, r3, #2
   14352:	2a01      	cmp	r2, #1
   14354:	f200 80a7 	bhi.w	144a6 <mfu_interface_sendto+0x162>
   14358:	460f      	mov	r7, r1
   1435a:	2900      	cmp	r1, #0
   1435c:	f000 809d 	beq.w	1449a <mfu_interface_sendto+0x156>
   14360:	2d00      	cmp	r5, #0
   14362:	f000 809a 	beq.w	1449a <mfu_interface_sendto+0x156>
   14366:	2b02      	cmp	r3, #2
   14368:	46e8      	mov	r8, sp
   1436a:	d04e      	beq.n	1440a <mfu_interface_sendto+0xc6>
   1436c:	4640      	mov	r0, r8
   1436e:	4629      	mov	r1, r5
   14370:	f7fe fea0 	bl	130b4 <rpc_dfu_client_request_alloc>
   14374:	4606      	mov	r6, r0
   14376:	b140      	cbz	r0, 1438a <mfu_interface_sendto+0x46>
   14378:	200c      	movs	r0, #12
   1437a:	f7fd f9eb 	bl	11754 <bsd_os_errno_set>
   1437e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14382:	4628      	mov	r0, r5
   14384:	b002      	add	sp, #8
   14386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1438a:	9b00      	ldr	r3, [sp, #0]
   1438c:	4639      	mov	r1, r7
   1438e:	6818      	ldr	r0, [r3, #0]
   14390:	462a      	mov	r2, r5
   14392:	f009 f82e 	bl	1d3f2 <memcpy>
   14396:	2104      	movs	r1, #4
   14398:	4c47      	ldr	r4, [pc, #284]	; (144b8 <mfu_interface_sendto+0x174>)
   1439a:	9800      	ldr	r0, [sp, #0]
   1439c:	8823      	ldrh	r3, [r4, #0]
   1439e:	6045      	str	r5, [r0, #4]
   143a0:	3301      	adds	r3, #1
   143a2:	b29b      	uxth	r3, r3
   143a4:	041a      	lsls	r2, r3, #16
   143a6:	8023      	strh	r3, [r4, #0]
   143a8:	430a      	orrs	r2, r1
   143aa:	4c44      	ldr	r4, [pc, #272]	; (144bc <mfu_interface_sendto+0x178>)
   143ac:	60c2      	str	r2, [r0, #12]
   143ae:	7246      	strb	r6, [r0, #9]
   143b0:	7286      	strb	r6, [r0, #10]
   143b2:	72c6      	strb	r6, [r0, #11]
   143b4:	7201      	strb	r1, [r0, #8]
   143b6:	6026      	str	r6, [r4, #0]
   143b8:	f7fe fe90 	bl	130dc <rpc_dfu_client_request_send>
   143bc:	2800      	cmp	r0, #0
   143be:	d162      	bne.n	14486 <mfu_interface_sendto+0x142>
   143c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143c4:	ae02      	add	r6, sp, #8
   143c6:	4f3b      	ldr	r7, [pc, #236]	; (144b4 <mfu_interface_sendto+0x170>)
   143c8:	f846 3d04 	str.w	r3, [r6, #-4]!
   143cc:	e004      	b.n	143d8 <mfu_interface_sendto+0x94>
   143ce:	4631      	mov	r1, r6
   143d0:	4638      	mov	r0, r7
   143d2:	f7fd f92b 	bl	1162c <bsd_os_timedwait>
   143d6:	b978      	cbnz	r0, 143f8 <mfu_interface_sendto+0xb4>
   143d8:	6820      	ldr	r0, [r4, #0]
   143da:	2800      	cmp	r0, #0
   143dc:	d0f7      	beq.n	143ce <mfu_interface_sendto+0x8a>
   143de:	6904      	ldr	r4, [r0, #16]
   143e0:	f7fe fe90 	bl	13104 <rpc_dfu_client_message_free>
   143e4:	2c00      	cmp	r4, #0
   143e6:	d0cc      	beq.n	14382 <mfu_interface_sendto+0x3e>
   143e8:	4b35      	ldr	r3, [pc, #212]	; (144c0 <mfu_interface_sendto+0x17c>)
   143ea:	2008      	movs	r0, #8
   143ec:	601c      	str	r4, [r3, #0]
   143ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   143f2:	f7fd f9af 	bl	11754 <bsd_os_errno_set>
   143f6:	e7c4      	b.n	14382 <mfu_interface_sendto+0x3e>
   143f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   143fc:	203c      	movs	r0, #60	; 0x3c
   143fe:	f7fd f9a9 	bl	11754 <bsd_os_errno_set>
   14402:	4628      	mov	r0, r5
   14404:	b002      	add	sp, #8
   14406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1440a:	4640      	mov	r0, r8
   1440c:	2100      	movs	r1, #0
   1440e:	f7fe fe51 	bl	130b4 <rpc_dfu_client_request_alloc>
   14412:	4602      	mov	r2, r0
   14414:	2800      	cmp	r0, #0
   14416:	d1af      	bne.n	14378 <mfu_interface_sendto+0x34>
   14418:	f04f 0c08 	mov.w	ip, #8
   1441c:	4926      	ldr	r1, [pc, #152]	; (144b8 <mfu_interface_sendto+0x174>)
   1441e:	4829      	ldr	r0, [pc, #164]	; (144c4 <mfu_interface_sendto+0x180>)
   14420:	880b      	ldrh	r3, [r1, #0]
   14422:	6804      	ldr	r4, [r0, #0]
   14424:	3301      	adds	r3, #1
   14426:	9800      	ldr	r0, [sp, #0]
   14428:	b29b      	uxth	r3, r3
   1442a:	800b      	strh	r3, [r1, #0]
   1442c:	041b      	lsls	r3, r3, #16
   1442e:	f043 0303 	orr.w	r3, r3, #3
   14432:	6104      	str	r4, [r0, #16]
   14434:	4c21      	ldr	r4, [pc, #132]	; (144bc <mfu_interface_sendto+0x178>)
   14436:	60c3      	str	r3, [r0, #12]
   14438:	7102      	strb	r2, [r0, #4]
   1443a:	7142      	strb	r2, [r0, #5]
   1443c:	7182      	strb	r2, [r0, #6]
   1443e:	71c2      	strb	r2, [r0, #7]
   14440:	7242      	strb	r2, [r0, #9]
   14442:	7282      	strb	r2, [r0, #10]
   14444:	72c2      	strb	r2, [r0, #11]
   14446:	f880 c008 	strb.w	ip, [r0, #8]
   1444a:	2103      	movs	r1, #3
   1444c:	6022      	str	r2, [r4, #0]
   1444e:	f7fe fe45 	bl	130dc <rpc_dfu_client_request_send>
   14452:	b9c0      	cbnz	r0, 14486 <mfu_interface_sendto+0x142>
   14454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14458:	f10d 0908 	add.w	r9, sp, #8
   1445c:	f849 3d04 	str.w	r3, [r9, #-4]!
   14460:	46b2      	mov	sl, r6
   14462:	e005      	b.n	14470 <mfu_interface_sendto+0x12c>
   14464:	4649      	mov	r1, r9
   14466:	4650      	mov	r0, sl
   14468:	f7fd f8e0 	bl	1162c <bsd_os_timedwait>
   1446c:	2800      	cmp	r0, #0
   1446e:	d1c3      	bne.n	143f8 <mfu_interface_sendto+0xb4>
   14470:	6820      	ldr	r0, [r4, #0]
   14472:	2800      	cmp	r0, #0
   14474:	d0f6      	beq.n	14464 <mfu_interface_sendto+0x120>
   14476:	6904      	ldr	r4, [r0, #16]
   14478:	f7fe fe44 	bl	13104 <rpc_dfu_client_message_free>
   1447c:	2c00      	cmp	r4, #0
   1447e:	d1b3      	bne.n	143e8 <mfu_interface_sendto+0xa4>
   14480:	2303      	movs	r3, #3
   14482:	6033      	str	r3, [r6, #0]
   14484:	e772      	b.n	1436c <mfu_interface_sendto+0x28>
   14486:	9800      	ldr	r0, [sp, #0]
   14488:	6803      	ldr	r3, [r0, #0]
   1448a:	b11b      	cbz	r3, 14494 <mfu_interface_sendto+0x150>
   1448c:	4618      	mov	r0, r3
   1448e:	f7fe fe41 	bl	13114 <rpc_dfu_client_data_free>
   14492:	9800      	ldr	r0, [sp, #0]
   14494:	f7fe fe36 	bl	13104 <rpc_dfu_client_message_free>
   14498:	e76e      	b.n	14378 <mfu_interface_sendto+0x34>
   1449a:	2016      	movs	r0, #22
   1449c:	f7fd f95a 	bl	11754 <bsd_os_errno_set>
   144a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   144a4:	e76d      	b.n	14382 <mfu_interface_sendto+0x3e>
   144a6:	2001      	movs	r0, #1
   144a8:	f7fd f954 	bl	11754 <bsd_os_errno_set>
   144ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   144b0:	e767      	b.n	14382 <mfu_interface_sendto+0x3e>
   144b2:	bf00      	nop
   144b4:	2002075c 	.word	0x2002075c
   144b8:	20024e1c 	.word	0x20024e1c
   144bc:	20020768 	.word	0x20020768
   144c0:	20020760 	.word	0x20020760
   144c4:	20020764 	.word	0x20020764

000144c8 <mfu_interface_setopt>:
   144c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ca:	4846      	ldr	r0, [pc, #280]	; (145e4 <mfu_interface_setopt+0x11c>)
   144cc:	b083      	sub	sp, #12
   144ce:	6800      	ldr	r0, [r0, #0]
   144d0:	3802      	subs	r0, #2
   144d2:	2801      	cmp	r0, #1
   144d4:	d877      	bhi.n	145c6 <mfu_interface_setopt+0xfe>
   144d6:	f240 2003 	movw	r0, #515	; 0x203
   144da:	4281      	cmp	r1, r0
   144dc:	d16d      	bne.n	145ba <mfu_interface_setopt+0xf2>
   144de:	3a04      	subs	r2, #4
   144e0:	2a03      	cmp	r2, #3
   144e2:	d85c      	bhi.n	1459e <mfu_interface_setopt+0xd6>
   144e4:	e8df f002 	tbb	[pc, r2]
   144e8:	514e024b 	.word	0x514e024b
   144ec:	2407      	movs	r4, #7
   144ee:	4625      	mov	r5, r4
   144f0:	2100      	movs	r1, #0
   144f2:	4668      	mov	r0, sp
   144f4:	f7fe fdde 	bl	130b4 <rpc_dfu_client_request_alloc>
   144f8:	4603      	mov	r3, r0
   144fa:	2800      	cmp	r0, #0
   144fc:	d138      	bne.n	14570 <mfu_interface_setopt+0xa8>
   144fe:	2704      	movs	r7, #4
   14500:	4e39      	ldr	r6, [pc, #228]	; (145e8 <mfu_interface_setopt+0x120>)
   14502:	9800      	ldr	r0, [sp, #0]
   14504:	8832      	ldrh	r2, [r6, #0]
   14506:	4629      	mov	r1, r5
   14508:	3201      	adds	r2, #1
   1450a:	b292      	uxth	r2, r2
   1450c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   14510:	4c36      	ldr	r4, [pc, #216]	; (145ec <mfu_interface_setopt+0x124>)
   14512:	60c5      	str	r5, [r0, #12]
   14514:	7103      	strb	r3, [r0, #4]
   14516:	7143      	strb	r3, [r0, #5]
   14518:	7183      	strb	r3, [r0, #6]
   1451a:	71c3      	strb	r3, [r0, #7]
   1451c:	7243      	strb	r3, [r0, #9]
   1451e:	7283      	strb	r3, [r0, #10]
   14520:	72c3      	strb	r3, [r0, #11]
   14522:	7207      	strb	r7, [r0, #8]
   14524:	8032      	strh	r2, [r6, #0]
   14526:	6023      	str	r3, [r4, #0]
   14528:	f7fe fdd8 	bl	130dc <rpc_dfu_client_request_send>
   1452c:	b9b8      	cbnz	r0, 1455e <mfu_interface_setopt+0x96>
   1452e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14532:	ad02      	add	r5, sp, #8
   14534:	4e2b      	ldr	r6, [pc, #172]	; (145e4 <mfu_interface_setopt+0x11c>)
   14536:	f845 3d04 	str.w	r3, [r5, #-4]!
   1453a:	e005      	b.n	14548 <mfu_interface_setopt+0x80>
   1453c:	4629      	mov	r1, r5
   1453e:	4630      	mov	r0, r6
   14540:	f7fd f874 	bl	1162c <bsd_os_timedwait>
   14544:	2800      	cmp	r0, #0
   14546:	d131      	bne.n	145ac <mfu_interface_setopt+0xe4>
   14548:	6820      	ldr	r0, [r4, #0]
   1454a:	2800      	cmp	r0, #0
   1454c:	d0f6      	beq.n	1453c <mfu_interface_setopt+0x74>
   1454e:	6904      	ldr	r4, [r0, #16]
   14550:	f7fe fdd8 	bl	13104 <rpc_dfu_client_message_free>
   14554:	2c00      	cmp	r4, #0
   14556:	d13c      	bne.n	145d2 <mfu_interface_setopt+0x10a>
   14558:	4620      	mov	r0, r4
   1455a:	b003      	add	sp, #12
   1455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1455e:	9800      	ldr	r0, [sp, #0]
   14560:	6803      	ldr	r3, [r0, #0]
   14562:	b11b      	cbz	r3, 1456c <mfu_interface_setopt+0xa4>
   14564:	4618      	mov	r0, r3
   14566:	f7fe fdd5 	bl	13114 <rpc_dfu_client_data_free>
   1456a:	9800      	ldr	r0, [sp, #0]
   1456c:	f7fe fdca 	bl	13104 <rpc_dfu_client_message_free>
   14570:	200c      	movs	r0, #12
   14572:	f7fd f8ef 	bl	11754 <bsd_os_errno_set>
   14576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1457a:	b003      	add	sp, #12
   1457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1457e:	2405      	movs	r4, #5
   14580:	4625      	mov	r5, r4
   14582:	e7b5      	b.n	144f0 <mfu_interface_setopt+0x28>
   14584:	2408      	movs	r4, #8
   14586:	4625      	mov	r5, r4
   14588:	e7b2      	b.n	144f0 <mfu_interface_setopt+0x28>
   1458a:	b1b3      	cbz	r3, 145ba <mfu_interface_setopt+0xf2>
   1458c:	9a08      	ldr	r2, [sp, #32]
   1458e:	2a04      	cmp	r2, #4
   14590:	d113      	bne.n	145ba <mfu_interface_setopt+0xf2>
   14592:	2000      	movs	r0, #0
   14594:	681a      	ldr	r2, [r3, #0]
   14596:	4b16      	ldr	r3, [pc, #88]	; (145f0 <mfu_interface_setopt+0x128>)
   14598:	601a      	str	r2, [r3, #0]
   1459a:	b003      	add	sp, #12
   1459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1459e:	202a      	movs	r0, #42	; 0x2a
   145a0:	f7fd f8d8 	bl	11754 <bsd_os_errno_set>
   145a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145a8:	b003      	add	sp, #12
   145aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145ac:	203c      	movs	r0, #60	; 0x3c
   145ae:	f7fd f8d1 	bl	11754 <bsd_os_errno_set>
   145b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145b6:	b003      	add	sp, #12
   145b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145ba:	2016      	movs	r0, #22
   145bc:	f7fd f8ca 	bl	11754 <bsd_os_errno_set>
   145c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145c4:	e7c9      	b.n	1455a <mfu_interface_setopt+0x92>
   145c6:	2001      	movs	r0, #1
   145c8:	f7fd f8c4 	bl	11754 <bsd_os_errno_set>
   145cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145d0:	e7c3      	b.n	1455a <mfu_interface_setopt+0x92>
   145d2:	4b08      	ldr	r3, [pc, #32]	; (145f4 <mfu_interface_setopt+0x12c>)
   145d4:	2008      	movs	r0, #8
   145d6:	601c      	str	r4, [r3, #0]
   145d8:	f7fd f8bc 	bl	11754 <bsd_os_errno_set>
   145dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145e0:	e7bb      	b.n	1455a <mfu_interface_setopt+0x92>
   145e2:	bf00      	nop
   145e4:	2002075c 	.word	0x2002075c
   145e8:	20024e1c 	.word	0x20024e1c
   145ec:	20020768 	.word	0x20020768
   145f0:	20020764 	.word	0x20020764
   145f4:	20020760 	.word	0x20020760

000145f8 <mfu_interface_getopt>:
   145f8:	f240 2003 	movw	r0, #515	; 0x203
   145fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14600:	4281      	cmp	r1, r0
   14602:	b082      	sub	sp, #8
   14604:	9e08      	ldr	r6, [sp, #32]
   14606:	f040 80ae 	bne.w	14766 <mfu_interface_getopt+0x16e>
   1460a:	461d      	mov	r5, r3
   1460c:	2b00      	cmp	r3, #0
   1460e:	f000 80aa 	beq.w	14766 <mfu_interface_getopt+0x16e>
   14612:	2e00      	cmp	r6, #0
   14614:	f000 80a7 	beq.w	14766 <mfu_interface_getopt+0x16e>
   14618:	4b5e      	ldr	r3, [pc, #376]	; (14794 <mfu_interface_getopt+0x19c>)
   1461a:	681b      	ldr	r3, [r3, #0]
   1461c:	3b02      	subs	r3, #2
   1461e:	2b01      	cmp	r3, #1
   14620:	f200 80a7 	bhi.w	14772 <mfu_interface_getopt+0x17a>
   14624:	3a01      	subs	r2, #1
   14626:	2a13      	cmp	r2, #19
   14628:	d879      	bhi.n	1471e <mfu_interface_getopt+0x126>
   1462a:	e8df f002 	tbb	[pc, r2]
   1462e:	5f17      	.short	0x5f17
   14630:	78787878 	.word	0x78787878
   14634:	78787872 	.word	0x78787872
   14638:	78787878 	.word	0x78787878
   1463c:	78787878 	.word	0x78787878
   14640:	0a78      	.short	0x0a78
   14642:	6833      	ldr	r3, [r6, #0]
   14644:	2b04      	cmp	r3, #4
   14646:	f040 808e 	bne.w	14766 <mfu_interface_getopt+0x16e>
   1464a:	2200      	movs	r2, #0
   1464c:	4610      	mov	r0, r2
   1464e:	4b52      	ldr	r3, [pc, #328]	; (14798 <mfu_interface_getopt+0x1a0>)
   14650:	6819      	ldr	r1, [r3, #0]
   14652:	601a      	str	r2, [r3, #0]
   14654:	6029      	str	r1, [r5, #0]
   14656:	b002      	add	sp, #8
   14658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1465c:	6833      	ldr	r3, [r6, #0]
   1465e:	2b24      	cmp	r3, #36	; 0x24
   14660:	f040 8081 	bne.w	14766 <mfu_interface_getopt+0x16e>
   14664:	2401      	movs	r4, #1
   14666:	46a0      	mov	r8, r4
   14668:	2100      	movs	r1, #0
   1466a:	4668      	mov	r0, sp
   1466c:	f7fe fd22 	bl	130b4 <rpc_dfu_client_request_alloc>
   14670:	2800      	cmp	r0, #0
   14672:	d146      	bne.n	14702 <mfu_interface_getopt+0x10a>
   14674:	4949      	ldr	r1, [pc, #292]	; (1479c <mfu_interface_getopt+0x1a4>)
   14676:	9b00      	ldr	r3, [sp, #0]
   14678:	880a      	ldrh	r2, [r1, #0]
   1467a:	f1b8 0f03 	cmp.w	r8, #3
   1467e:	f102 0201 	add.w	r2, r2, #1
   14682:	b292      	uxth	r2, r2
   14684:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   14688:	7118      	strb	r0, [r3, #4]
   1468a:	800a      	strh	r2, [r1, #0]
   1468c:	60dc      	str	r4, [r3, #12]
   1468e:	7158      	strb	r0, [r3, #5]
   14690:	7198      	strb	r0, [r3, #6]
   14692:	71d8      	strb	r0, [r3, #7]
   14694:	d04b      	beq.n	1472e <mfu_interface_getopt+0x136>
   14696:	2104      	movs	r1, #4
   14698:	2200      	movs	r2, #0
   1469a:	4f41      	ldr	r7, [pc, #260]	; (147a0 <mfu_interface_getopt+0x1a8>)
   1469c:	6099      	str	r1, [r3, #8]
   1469e:	4618      	mov	r0, r3
   146a0:	4641      	mov	r1, r8
   146a2:	603a      	str	r2, [r7, #0]
   146a4:	f7fe fd1a 	bl	130dc <rpc_dfu_client_request_send>
   146a8:	2800      	cmp	r0, #0
   146aa:	d14d      	bne.n	14748 <mfu_interface_getopt+0x150>
   146ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146b0:	ac02      	add	r4, sp, #8
   146b2:	f844 3d04 	str.w	r3, [r4, #-4]!
   146b6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 14794 <mfu_interface_getopt+0x19c>
   146ba:	e005      	b.n	146c8 <mfu_interface_getopt+0xd0>
   146bc:	4621      	mov	r1, r4
   146be:	4640      	mov	r0, r8
   146c0:	f7fc ffb4 	bl	1162c <bsd_os_timedwait>
   146c4:	2800      	cmp	r0, #0
   146c6:	d137      	bne.n	14738 <mfu_interface_getopt+0x140>
   146c8:	6839      	ldr	r1, [r7, #0]
   146ca:	2900      	cmp	r1, #0
   146cc:	d0f6      	beq.n	146bc <mfu_interface_getopt+0xc4>
   146ce:	690c      	ldr	r4, [r1, #16]
   146d0:	2c00      	cmp	r4, #0
   146d2:	d154      	bne.n	1477e <mfu_interface_getopt+0x186>
   146d4:	6832      	ldr	r2, [r6, #0]
   146d6:	3114      	adds	r1, #20
   146d8:	4628      	mov	r0, r5
   146da:	f008 fe8a 	bl	1d3f2 <memcpy>
   146de:	6838      	ldr	r0, [r7, #0]
   146e0:	f7fe fd10 	bl	13104 <rpc_dfu_client_message_free>
   146e4:	4620      	mov	r0, r4
   146e6:	b002      	add	sp, #8
   146e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146ec:	6833      	ldr	r3, [r6, #0]
   146ee:	2b04      	cmp	r3, #4
   146f0:	d139      	bne.n	14766 <mfu_interface_getopt+0x16e>
   146f2:	2402      	movs	r4, #2
   146f4:	2100      	movs	r1, #0
   146f6:	4668      	mov	r0, sp
   146f8:	46a0      	mov	r8, r4
   146fa:	f7fe fcdb 	bl	130b4 <rpc_dfu_client_request_alloc>
   146fe:	2800      	cmp	r0, #0
   14700:	d0b8      	beq.n	14674 <mfu_interface_getopt+0x7c>
   14702:	200c      	movs	r0, #12
   14704:	f7fd f826 	bl	11754 <bsd_os_errno_set>
   14708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1470c:	b002      	add	sp, #8
   1470e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14712:	6833      	ldr	r3, [r6, #0]
   14714:	2b04      	cmp	r3, #4
   14716:	d126      	bne.n	14766 <mfu_interface_getopt+0x16e>
   14718:	2409      	movs	r4, #9
   1471a:	46a0      	mov	r8, r4
   1471c:	e7a4      	b.n	14668 <mfu_interface_getopt+0x70>
   1471e:	202a      	movs	r0, #42	; 0x2a
   14720:	f7fd f818 	bl	11754 <bsd_os_errno_set>
   14724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14728:	b002      	add	sp, #8
   1472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1472e:	4a1d      	ldr	r2, [pc, #116]	; (147a4 <mfu_interface_getopt+0x1ac>)
   14730:	2108      	movs	r1, #8
   14732:	6812      	ldr	r2, [r2, #0]
   14734:	611a      	str	r2, [r3, #16]
   14736:	e7af      	b.n	14698 <mfu_interface_getopt+0xa0>
   14738:	203c      	movs	r0, #60	; 0x3c
   1473a:	f7fd f80b 	bl	11754 <bsd_os_errno_set>
   1473e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14742:	b002      	add	sp, #8
   14744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14748:	9800      	ldr	r0, [sp, #0]
   1474a:	6803      	ldr	r3, [r0, #0]
   1474c:	b11b      	cbz	r3, 14756 <mfu_interface_getopt+0x15e>
   1474e:	4618      	mov	r0, r3
   14750:	f7fe fce0 	bl	13114 <rpc_dfu_client_data_free>
   14754:	9800      	ldr	r0, [sp, #0]
   14756:	f7fe fcd5 	bl	13104 <rpc_dfu_client_message_free>
   1475a:	200c      	movs	r0, #12
   1475c:	f7fc fffa 	bl	11754 <bsd_os_errno_set>
   14760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14764:	e7d2      	b.n	1470c <mfu_interface_getopt+0x114>
   14766:	2016      	movs	r0, #22
   14768:	f7fc fff4 	bl	11754 <bsd_os_errno_set>
   1476c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14770:	e771      	b.n	14656 <mfu_interface_getopt+0x5e>
   14772:	2001      	movs	r0, #1
   14774:	f7fc ffee 	bl	11754 <bsd_os_errno_set>
   14778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1477c:	e76b      	b.n	14656 <mfu_interface_getopt+0x5e>
   1477e:	4b06      	ldr	r3, [pc, #24]	; (14798 <mfu_interface_getopt+0x1a0>)
   14780:	2008      	movs	r0, #8
   14782:	601c      	str	r4, [r3, #0]
   14784:	f7fc ffe6 	bl	11754 <bsd_os_errno_set>
   14788:	6838      	ldr	r0, [r7, #0]
   1478a:	f7fe fcbb 	bl	13104 <rpc_dfu_client_message_free>
   1478e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14792:	e760      	b.n	14656 <mfu_interface_getopt+0x5e>
   14794:	2002075c 	.word	0x2002075c
   14798:	20020760 	.word	0x20020760
   1479c:	20024e1c 	.word	0x20024e1c
   147a0:	20020768 	.word	0x20020768
   147a4:	20020764 	.word	0x20020764

000147a8 <bsd_platform_error_handler>:
   147a8:	b508      	push	{r3, lr}
   147aa:	f7f7 fedf 	bl	c56c <bsd_recoverable_error_handler>
   147ae:	bd08      	pop	{r3, pc}

000147b0 <bsd_init>:
   147b0:	b510      	push	{r4, lr}
   147b2:	4c06      	ldr	r4, [pc, #24]	; (147cc <bsd_init+0x1c>)
   147b4:	7823      	ldrb	r3, [r4, #0]
   147b6:	b92b      	cbnz	r3, 147c4 <bsd_init+0x14>
   147b8:	f000 f826 	bl	14808 <bsd_platform_init>
   147bc:	b908      	cbnz	r0, 147c2 <bsd_init+0x12>
   147be:	2301      	movs	r3, #1
   147c0:	7023      	strb	r3, [r4, #0]
   147c2:	bd10      	pop	{r4, pc}
   147c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147c8:	bd10      	pop	{r4, pc}
   147ca:	bf00      	nop
   147cc:	20026565 	.word	0x20026565

000147d0 <bsd_shutdown>:
   147d0:	b510      	push	{r4, lr}
   147d2:	4c05      	ldr	r4, [pc, #20]	; (147e8 <bsd_shutdown+0x18>)
   147d4:	7823      	ldrb	r3, [r4, #0]
   147d6:	b123      	cbz	r3, 147e2 <bsd_shutdown+0x12>
   147d8:	f000 f87c 	bl	148d4 <bsd_platform_shutdown>
   147dc:	b900      	cbnz	r0, 147e0 <bsd_shutdown+0x10>
   147de:	7020      	strb	r0, [r4, #0]
   147e0:	bd10      	pop	{r4, pc}
   147e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147e6:	bd10      	pop	{r4, pc}
   147e8:	20026565 	.word	0x20026565

000147ec <unimplemented_method>:
   147ec:	b40f      	push	{r0, r1, r2, r3}
   147ee:	b508      	push	{r3, lr}
   147f0:	202d      	movs	r0, #45	; 0x2d
   147f2:	f7fc ffaf 	bl	11754 <bsd_os_errno_set>
   147f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   147fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147fe:	b004      	add	sp, #16
   14800:	4770      	bx	lr
   14802:	bf00      	nop

00014804 <rpc_transport_ipc_fault_handler>:
   14804:	f7ff bfd0 	b.w	147a8 <bsd_platform_error_handler>

00014808 <bsd_platform_init>:
   14808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1480a:	b093      	sub	sp, #76	; 0x4c
   1480c:	f7fe feba 	bl	13584 <nrf_mem_init>
   14810:	2800      	cmp	r0, #0
   14812:	d14c      	bne.n	148ae <bsd_platform_init+0xa6>
   14814:	4928      	ldr	r1, [pc, #160]	; (148b8 <bsd_platform_init+0xb0>)
   14816:	a801      	add	r0, sp, #4
   14818:	f7fe ff28 	bl	1366c <nrf_mem_register>
   1481c:	2800      	cmp	r0, #0
   1481e:	d146      	bne.n	148ae <bsd_platform_init+0xa6>
   14820:	f7fd f882 	bl	11928 <bsd_os_init>
   14824:	f004 fa68 	bl	18cf8 <rpc_framework_init>
   14828:	2800      	cmp	r0, #0
   1482a:	d140      	bne.n	148ae <bsd_platform_init+0xa6>
   1482c:	2320      	movs	r3, #32
   1482e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14832:	2208      	movs	r2, #8
   14834:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   14838:	4f20      	ldr	r7, [pc, #128]	; (148bc <bsd_platform_init+0xb4>)
   1483a:	4e21      	ldr	r6, [pc, #132]	; (148c0 <bsd_platform_init+0xb8>)
   1483c:	9303      	str	r3, [sp, #12]
   1483e:	9305      	str	r3, [sp, #20]
   14840:	9307      	str	r3, [sp, #28]
   14842:	4d20      	ldr	r5, [pc, #128]	; (148c4 <bsd_platform_init+0xbc>)
   14844:	9109      	str	r1, [sp, #36]	; 0x24
   14846:	910d      	str	r1, [sp, #52]	; 0x34
   14848:	4c1f      	ldr	r4, [pc, #124]	; (148c8 <bsd_platform_init+0xc0>)
   1484a:	4920      	ldr	r1, [pc, #128]	; (148cc <bsd_platform_init+0xc4>)
   1484c:	4b20      	ldr	r3, [pc, #128]	; (148d0 <bsd_platform_init+0xc8>)
   1484e:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   14852:	eb0d 0002 	add.w	r0, sp, r2
   14856:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1485a:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   1485e:	9702      	str	r7, [sp, #8]
   14860:	9604      	str	r6, [sp, #16]
   14862:	9506      	str	r5, [sp, #24]
   14864:	9408      	str	r4, [sp, #32]
   14866:	910a      	str	r1, [sp, #40]	; 0x28
   14868:	930c      	str	r3, [sp, #48]	; 0x30
   1486a:	f000 fbe7 	bl	1503c <rpc_transport_ipc_init>
   1486e:	b108      	cbz	r0, 14874 <bsd_platform_init+0x6c>
   14870:	b013      	add	sp, #76	; 0x4c
   14872:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14874:	f003 ffd0 	bl	18818 <interface_init>
   14878:	b9c8      	cbnz	r0, 148ae <bsd_platform_init+0xa6>
   1487a:	f7fe fac9 	bl	12e10 <at_interface_init>
   1487e:	b9b0      	cbnz	r0, 148ae <bsd_platform_init+0xa6>
   14880:	f002 fd08 	bl	17294 <ip_interface_init>
   14884:	b998      	cbnz	r0, 148ae <bsd_platform_init+0xa6>
   14886:	f7ff f8e9 	bl	13a5c <tls_interface_init>
   1488a:	b980      	cbnz	r0, 148ae <bsd_platform_init+0xa6>
   1488c:	f7ff fcb2 	bl	141f4 <mfu_interface_init>
   14890:	b968      	cbnz	r0, 148ae <bsd_platform_init+0xa6>
   14892:	f001 fac3 	bl	15e1c <pdn_interface_init>
   14896:	b950      	cbnz	r0, 148ae <bsd_platform_init+0xa6>
   14898:	f005 fcf8 	bl	1a28c <gnss_interface_init>
   1489c:	b938      	cbnz	r0, 148ae <bsd_platform_init+0xa6>
   1489e:	f7fd ff79 	bl	12794 <logobj_interface_init>
   148a2:	3000      	adds	r0, #0
   148a4:	bf18      	it	ne
   148a6:	2001      	movne	r0, #1
   148a8:	4240      	negs	r0, r0
   148aa:	b013      	add	sp, #76	; 0x4c
   148ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   148b2:	b013      	add	sp, #76	; 0x4c
   148b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148b6:	bf00      	nop
   148b8:	0001f538 	.word	0x0001f538
   148bc:	20010000 	.word	0x20010000
   148c0:	20010040 	.word	0x20010040
   148c4:	20010020 	.word	0x20010020
   148c8:	20017060 	.word	0x20017060
   148cc:	20010060 	.word	0x20010060
   148d0:	20013060 	.word	0x20013060

000148d4 <bsd_platform_shutdown>:
   148d4:	b508      	push	{r3, lr}
   148d6:	f004 f947 	bl	18b68 <interface_shutdown>
   148da:	f000 fc13 	bl	15104 <rpc_transport_ipc_shutdown>
   148de:	2000      	movs	r0, #0
   148e0:	bd08      	pop	{r3, pc}
   148e2:	bf00      	nop

000148e4 <bsd_platform_af_method_table_get>:
   148e4:	2805      	cmp	r0, #5
   148e6:	d02a      	beq.n	1493e <bsd_platform_af_method_table_get+0x5a>
   148e8:	b508      	push	{r3, lr}
   148ea:	d914      	bls.n	14916 <bsd_platform_af_method_table_get+0x32>
   148ec:	280a      	cmp	r0, #10
   148ee:	d016      	beq.n	1491e <bsd_platform_af_method_table_get+0x3a>
   148f0:	2866      	cmp	r0, #102	; 0x66
   148f2:	d10b      	bne.n	1490c <bsd_platform_af_method_table_get+0x28>
   148f4:	f240 2302 	movw	r3, #514	; 0x202
   148f8:	429a      	cmp	r2, r3
   148fa:	d032      	beq.n	14962 <bsd_platform_af_method_table_get+0x7e>
   148fc:	f240 2305 	movw	r3, #517	; 0x205
   14900:	429a      	cmp	r2, r3
   14902:	d032      	beq.n	1496a <bsd_platform_af_method_table_get+0x86>
   14904:	f240 2301 	movw	r3, #513	; 0x201
   14908:	429a      	cmp	r2, r3
   1490a:	d02c      	beq.n	14966 <bsd_platform_af_method_table_get+0x82>
   1490c:	2016      	movs	r0, #22
   1490e:	f7fc ff21 	bl	11754 <bsd_os_errno_set>
   14912:	2000      	movs	r0, #0
   14914:	bd08      	pop	{r3, pc}
   14916:	2801      	cmp	r0, #1
   14918:	d016      	beq.n	14948 <bsd_platform_af_method_table_get+0x64>
   1491a:	2802      	cmp	r0, #2
   1491c:	d1f6      	bne.n	1490c <bsd_platform_af_method_table_get+0x28>
   1491e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   14922:	2a0a      	cmp	r2, #10
   14924:	d819      	bhi.n	1495a <bsd_platform_af_method_table_get+0x76>
   14926:	2301      	movs	r3, #1
   14928:	f240 4103 	movw	r1, #1027	; 0x403
   1492c:	4810      	ldr	r0, [pc, #64]	; (14970 <bsd_platform_af_method_table_get+0x8c>)
   1492e:	fa03 f202 	lsl.w	r2, r3, r2
   14932:	420a      	tst	r2, r1
   14934:	f100 0328 	add.w	r3, r0, #40	; 0x28
   14938:	bf18      	it	ne
   1493a:	4618      	movne	r0, r3
   1493c:	bd08      	pop	{r3, pc}
   1493e:	2903      	cmp	r1, #3
   14940:	480c      	ldr	r0, [pc, #48]	; (14974 <bsd_platform_af_method_table_get+0x90>)
   14942:	bf18      	it	ne
   14944:	2000      	movne	r0, #0
   14946:	4770      	bx	lr
   14948:	f240 2303 	movw	r3, #515	; 0x203
   1494c:	429a      	cmp	r2, r3
   1494e:	d006      	beq.n	1495e <bsd_platform_af_method_table_get+0x7a>
   14950:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14954:	d1da      	bne.n	1490c <bsd_platform_af_method_table_get+0x28>
   14956:	4808      	ldr	r0, [pc, #32]	; (14978 <bsd_platform_af_method_table_get+0x94>)
   14958:	bd08      	pop	{r3, pc}
   1495a:	4805      	ldr	r0, [pc, #20]	; (14970 <bsd_platform_af_method_table_get+0x8c>)
   1495c:	bd08      	pop	{r3, pc}
   1495e:	4807      	ldr	r0, [pc, #28]	; (1497c <bsd_platform_af_method_table_get+0x98>)
   14960:	bd08      	pop	{r3, pc}
   14962:	4807      	ldr	r0, [pc, #28]	; (14980 <bsd_platform_af_method_table_get+0x9c>)
   14964:	bd08      	pop	{r3, pc}
   14966:	4807      	ldr	r0, [pc, #28]	; (14984 <bsd_platform_af_method_table_get+0xa0>)
   14968:	bd08      	pop	{r3, pc}
   1496a:	4807      	ldr	r0, [pc, #28]	; (14988 <bsd_platform_af_method_table_get+0xa4>)
   1496c:	bd08      	pop	{r3, pc}
   1496e:	bf00      	nop
   14970:	0001f408 	.word	0x0001f408
   14974:	0001f4f8 	.word	0x0001f4f8
   14978:	0001f4a8 	.word	0x0001f4a8
   1497c:	0001f458 	.word	0x0001f458
   14980:	0001f480 	.word	0x0001f480
   14984:	0001f3e0 	.word	0x0001f3e0
   14988:	0001f4d0 	.word	0x0001f4d0

0001498c <bsd_platform_fd_method_table_get>:
   1498c:	b538      	push	{r3, r4, r5, lr}
   1498e:	4605      	mov	r5, r0
   14990:	f004 f85e 	bl	18a50 <interface_socket_from_handle_get>
   14994:	4604      	mov	r4, r0
   14996:	b950      	cbnz	r0, 149ae <bsd_platform_fd_method_table_get+0x22>
   14998:	4b2a      	ldr	r3, [pc, #168]	; (14a44 <bsd_platform_fd_method_table_get+0xb8>)
   1499a:	43ab      	bics	r3, r5
   1499c:	d032      	beq.n	14a04 <bsd_platform_fd_method_table_get+0x78>
   1499e:	4b2a      	ldr	r3, [pc, #168]	; (14a48 <bsd_platform_fd_method_table_get+0xbc>)
   149a0:	43ab      	bics	r3, r5
   149a2:	d043      	beq.n	14a2c <bsd_platform_fd_method_table_get+0xa0>
   149a4:	4b29      	ldr	r3, [pc, #164]	; (14a4c <bsd_platform_fd_method_table_get+0xc0>)
   149a6:	43ab      	bics	r3, r5
   149a8:	d146      	bne.n	14a38 <bsd_platform_fd_method_table_get+0xac>
   149aa:	4829      	ldr	r0, [pc, #164]	; (14a50 <bsd_platform_fd_method_table_get+0xc4>)
   149ac:	bd38      	pop	{r3, r4, r5, pc}
   149ae:	68c3      	ldr	r3, [r0, #12]
   149b0:	6942      	ldr	r2, [r0, #20]
   149b2:	2b05      	cmp	r3, #5
   149b4:	d034      	beq.n	14a20 <bsd_platform_fd_method_table_get+0x94>
   149b6:	d911      	bls.n	149dc <bsd_platform_fd_method_table_get+0x50>
   149b8:	2b0a      	cmp	r3, #10
   149ba:	d013      	beq.n	149e4 <bsd_platform_fd_method_table_get+0x58>
   149bc:	2b66      	cmp	r3, #102	; 0x66
   149be:	d12a      	bne.n	14a16 <bsd_platform_fd_method_table_get+0x8a>
   149c0:	f240 2302 	movw	r3, #514	; 0x202
   149c4:	429a      	cmp	r2, r3
   149c6:	d031      	beq.n	14a2c <bsd_platform_fd_method_table_get+0xa0>
   149c8:	f240 2305 	movw	r3, #517	; 0x205
   149cc:	429a      	cmp	r2, r3
   149ce:	d031      	beq.n	14a34 <bsd_platform_fd_method_table_get+0xa8>
   149d0:	f240 2301 	movw	r3, #513	; 0x201
   149d4:	429a      	cmp	r2, r3
   149d6:	d11e      	bne.n	14a16 <bsd_platform_fd_method_table_get+0x8a>
   149d8:	481e      	ldr	r0, [pc, #120]	; (14a54 <bsd_platform_fd_method_table_get+0xc8>)
   149da:	bd38      	pop	{r3, r4, r5, pc}
   149dc:	2b01      	cmp	r3, #1
   149de:	d013      	beq.n	14a08 <bsd_platform_fd_method_table_get+0x7c>
   149e0:	2b02      	cmp	r3, #2
   149e2:	d118      	bne.n	14a16 <bsd_platform_fd_method_table_get+0x8a>
   149e4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   149e8:	2a0a      	cmp	r2, #10
   149ea:	d821      	bhi.n	14a30 <bsd_platform_fd_method_table_get+0xa4>
   149ec:	2301      	movs	r3, #1
   149ee:	f240 4103 	movw	r1, #1027	; 0x403
   149f2:	4819      	ldr	r0, [pc, #100]	; (14a58 <bsd_platform_fd_method_table_get+0xcc>)
   149f4:	fa03 f202 	lsl.w	r2, r3, r2
   149f8:	420a      	tst	r2, r1
   149fa:	f100 0428 	add.w	r4, r0, #40	; 0x28
   149fe:	bf18      	it	ne
   14a00:	4620      	movne	r0, r4
   14a02:	bd38      	pop	{r3, r4, r5, pc}
   14a04:	4815      	ldr	r0, [pc, #84]	; (14a5c <bsd_platform_fd_method_table_get+0xd0>)
   14a06:	bd38      	pop	{r3, r4, r5, pc}
   14a08:	f240 2303 	movw	r3, #515	; 0x203
   14a0c:	429a      	cmp	r2, r3
   14a0e:	d0f9      	beq.n	14a04 <bsd_platform_fd_method_table_get+0x78>
   14a10:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   14a14:	d0c9      	beq.n	149aa <bsd_platform_fd_method_table_get+0x1e>
   14a16:	2016      	movs	r0, #22
   14a18:	f7fc fe9c 	bl	11754 <bsd_os_errno_set>
   14a1c:	2000      	movs	r0, #0
   14a1e:	bd38      	pop	{r3, r4, r5, pc}
   14a20:	6903      	ldr	r3, [r0, #16]
   14a22:	480f      	ldr	r0, [pc, #60]	; (14a60 <bsd_platform_fd_method_table_get+0xd4>)
   14a24:	2b03      	cmp	r3, #3
   14a26:	bf18      	it	ne
   14a28:	2000      	movne	r0, #0
   14a2a:	bd38      	pop	{r3, r4, r5, pc}
   14a2c:	480d      	ldr	r0, [pc, #52]	; (14a64 <bsd_platform_fd_method_table_get+0xd8>)
   14a2e:	bd38      	pop	{r3, r4, r5, pc}
   14a30:	4809      	ldr	r0, [pc, #36]	; (14a58 <bsd_platform_fd_method_table_get+0xcc>)
   14a32:	bd38      	pop	{r3, r4, r5, pc}
   14a34:	480c      	ldr	r0, [pc, #48]	; (14a68 <bsd_platform_fd_method_table_get+0xdc>)
   14a36:	bd38      	pop	{r3, r4, r5, pc}
   14a38:	2009      	movs	r0, #9
   14a3a:	f7fc fe8b 	bl	11754 <bsd_os_errno_set>
   14a3e:	4620      	mov	r0, r4
   14a40:	bd38      	pop	{r3, r4, r5, pc}
   14a42:	bf00      	nop
   14a44:	49765432 	.word	0x49765432
   14a48:	789a0000 	.word	0x789a0000
   14a4c:	49765443 	.word	0x49765443
   14a50:	0001f4a8 	.word	0x0001f4a8
   14a54:	0001f3e0 	.word	0x0001f3e0
   14a58:	0001f408 	.word	0x0001f408
   14a5c:	0001f458 	.word	0x0001f458
   14a60:	0001f4f8 	.word	0x0001f4f8
   14a64:	0001f480 	.word	0x0001f480
   14a68:	0001f4d0 	.word	0x0001f4d0

00014a6c <bsd_platform_getaddrinfo>:
   14a6c:	f003 bb58 	b.w	18120 <ip_interface_getaddrinfo>

00014a70 <bsd_platform_freeaddrinfo>:
   14a70:	f003 bc4c 	b.w	1830c <ip_interface_freeaddrinfo>

00014a74 <bsd_platform_poll>:
   14a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14a78:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   14a7c:	b083      	sub	sp, #12
   14a7e:	9200      	str	r2, [sp, #0]
   14a80:	2800      	cmp	r0, #0
   14a82:	d048      	beq.n	14b16 <bsd_platform_poll+0xa2>
   14a84:	1e4b      	subs	r3, r1, #1
   14a86:	2b07      	cmp	r3, #7
   14a88:	d845      	bhi.n	14b16 <bsd_platform_poll+0xa2>
   14a8a:	4680      	mov	r8, r0
   14a8c:	4605      	mov	r5, r0
   14a8e:	2400      	movs	r4, #0
   14a90:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   14a94:	88ab      	ldrh	r3, [r5, #4]
   14a96:	6828      	ldr	r0, [r5, #0]
   14a98:	f003 0303 	and.w	r3, r3, #3
   14a9c:	a901      	add	r1, sp, #4
   14a9e:	f043 061c 	orr.w	r6, r3, #28
   14aa2:	f003 ffe3 	bl	18a6c <interface_socket_event_get>
   14aa6:	9b01      	ldr	r3, [sp, #4]
   14aa8:	3508      	adds	r5, #8
   14aaa:	4033      	ands	r3, r6
   14aac:	f825 3c02 	strh.w	r3, [r5, #-2]
   14ab0:	b103      	cbz	r3, 14ab4 <bsd_platform_poll+0x40>
   14ab2:	3401      	adds	r4, #1
   14ab4:	42af      	cmp	r7, r5
   14ab6:	d1ed      	bne.n	14a94 <bsd_platform_poll+0x20>
   14ab8:	bb9c      	cbnz	r4, 14b22 <bsd_platform_poll+0xae>
   14aba:	4669      	mov	r1, sp
   14abc:	4640      	mov	r0, r8
   14abe:	f7fc fdb5 	bl	1162c <bsd_os_timedwait>
   14ac2:	4607      	mov	r7, r0
   14ac4:	b108      	cbz	r0, 14aca <bsd_platform_poll+0x56>
   14ac6:	283c      	cmp	r0, #60	; 0x3c
   14ac8:	d11d      	bne.n	14b06 <bsd_platform_poll+0x92>
   14aca:	46c1      	mov	r9, r8
   14acc:	2600      	movs	r6, #0
   14ace:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   14ad2:	f8d9 0000 	ldr.w	r0, [r9]
   14ad6:	f003 0303 	and.w	r3, r3, #3
   14ada:	a901      	add	r1, sp, #4
   14adc:	f043 041c 	orr.w	r4, r3, #28
   14ae0:	f003 ffc4 	bl	18a6c <interface_socket_event_get>
   14ae4:	9b01      	ldr	r3, [sp, #4]
   14ae6:	f109 0908 	add.w	r9, r9, #8
   14aea:	4023      	ands	r3, r4
   14aec:	f829 3c02 	strh.w	r3, [r9, #-2]
   14af0:	b103      	cbz	r3, 14af4 <bsd_platform_poll+0x80>
   14af2:	3601      	adds	r6, #1
   14af4:	454d      	cmp	r5, r9
   14af6:	d1ea      	bne.n	14ace <bsd_platform_poll+0x5a>
   14af8:	b90e      	cbnz	r6, 14afe <bsd_platform_poll+0x8a>
   14afa:	2f00      	cmp	r7, #0
   14afc:	d0dd      	beq.n	14aba <bsd_platform_poll+0x46>
   14afe:	4630      	mov	r0, r6
   14b00:	b003      	add	sp, #12
   14b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14b06:	2023      	movs	r0, #35	; 0x23
   14b08:	f7fc fe24 	bl	11754 <bsd_os_errno_set>
   14b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b10:	b003      	add	sp, #12
   14b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14b16:	2016      	movs	r0, #22
   14b18:	f7fc fe1c 	bl	11754 <bsd_os_errno_set>
   14b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b20:	e7ee      	b.n	14b00 <bsd_platform_poll+0x8c>
   14b22:	4620      	mov	r0, r4
   14b24:	e7ec      	b.n	14b00 <bsd_platform_poll+0x8c>
   14b26:	bf00      	nop

00014b28 <bsd_platform_fcntl>:
   14b28:	b508      	push	{r3, lr}
   14b2a:	4b06      	ldr	r3, [pc, #24]	; (14b44 <bsd_platform_fcntl+0x1c>)
   14b2c:	4383      	bics	r3, r0
   14b2e:	d003      	beq.n	14b38 <bsd_platform_fcntl+0x10>
   14b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14b34:	f004 b846 	b.w	18bc4 <interface_socket_fcntl>
   14b38:	202d      	movs	r0, #45	; 0x2d
   14b3a:	f7fc fe0b 	bl	11754 <bsd_os_errno_set>
   14b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b42:	bd08      	pop	{r3, pc}
   14b44:	49765432 	.word	0x49765432

00014b48 <ipc_trace_init>:
   14b48:	4b01      	ldr	r3, [pc, #4]	; (14b50 <ipc_trace_init+0x8>)
   14b4a:	6018      	str	r0, [r3, #0]
   14b4c:	4770      	bx	lr
   14b4e:	bf00      	nop
   14b50:	20020778 	.word	0x20020778

00014b54 <bsd_os_trace_irq_handler>:
   14b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b56:	4b6c      	ldr	r3, [pc, #432]	; (14d08 <bsd_os_trace_irq_handler+0x1b4>)
   14b58:	b083      	sub	sp, #12
   14b5a:	781b      	ldrb	r3, [r3, #0]
   14b5c:	2b00      	cmp	r3, #0
   14b5e:	f000 80ad 	beq.w	14cbc <bsd_os_trace_irq_handler+0x168>
   14b62:	4b6a      	ldr	r3, [pc, #424]	; (14d0c <bsd_os_trace_irq_handler+0x1b8>)
   14b64:	681c      	ldr	r4, [r3, #0]
   14b66:	68a2      	ldr	r2, [r4, #8]
   14b68:	6863      	ldr	r3, [r4, #4]
   14b6a:	429a      	cmp	r2, r3
   14b6c:	d02d      	beq.n	14bca <bsd_os_trace_irq_handler+0x76>
   14b6e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14b72:	f8ad 3000 	strh.w	r3, [sp]
   14b76:	7823      	ldrb	r3, [r4, #0]
   14b78:	466e      	mov	r6, sp
   14b7a:	f88d 3004 	strb.w	r3, [sp, #4]
   14b7e:	6863      	ldr	r3, [r4, #4]
   14b80:	2105      	movs	r1, #5
   14b82:	429a      	cmp	r2, r3
   14b84:	bf2a      	itet	cs
   14b86:	6927      	ldrcs	r7, [r4, #16]
   14b88:	1a9f      	subcc	r7, r3, r2
   14b8a:	1abf      	subcs	r7, r7, r2
   14b8c:	429a      	cmp	r2, r3
   14b8e:	bf94      	ite	ls
   14b90:	2500      	movls	r5, #0
   14b92:	68e5      	ldrhi	r5, [r4, #12]
   14b94:	b2bf      	uxth	r7, r7
   14b96:	bf88      	it	hi
   14b98:	1b5b      	subhi	r3, r3, r5
   14b9a:	4630      	mov	r0, r6
   14b9c:	bf88      	it	hi
   14b9e:	b29d      	uxthhi	r5, r3
   14ba0:	f8ad 7002 	strh.w	r7, [sp, #2]
   14ba4:	f7fc fed8 	bl	11958 <bsd_os_trace_put>
   14ba8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14bac:	68a0      	ldr	r0, [r4, #8]
   14bae:	f7fc fed3 	bl	11958 <bsd_os_trace_put>
   14bb2:	68a3      	ldr	r3, [r4, #8]
   14bb4:	6922      	ldr	r2, [r4, #16]
   14bb6:	441f      	add	r7, r3
   14bb8:	4297      	cmp	r7, r2
   14bba:	bf08      	it	eq
   14bbc:	68e3      	ldreq	r3, [r4, #12]
   14bbe:	60a7      	str	r7, [r4, #8]
   14bc0:	bf08      	it	eq
   14bc2:	60a3      	streq	r3, [r4, #8]
   14bc4:	2d00      	cmp	r5, #0
   14bc6:	f040 808d 	bne.w	14ce4 <bsd_os_trace_irq_handler+0x190>
   14bca:	4b51      	ldr	r3, [pc, #324]	; (14d10 <bsd_os_trace_irq_handler+0x1bc>)
   14bcc:	681c      	ldr	r4, [r3, #0]
   14bce:	68a2      	ldr	r2, [r4, #8]
   14bd0:	6863      	ldr	r3, [r4, #4]
   14bd2:	429a      	cmp	r2, r3
   14bd4:	d02c      	beq.n	14c30 <bsd_os_trace_irq_handler+0xdc>
   14bd6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14bda:	f8ad 3000 	strh.w	r3, [sp]
   14bde:	7823      	ldrb	r3, [r4, #0]
   14be0:	466e      	mov	r6, sp
   14be2:	f88d 3004 	strb.w	r3, [sp, #4]
   14be6:	6863      	ldr	r3, [r4, #4]
   14be8:	2105      	movs	r1, #5
   14bea:	429a      	cmp	r2, r3
   14bec:	bf2a      	itet	cs
   14bee:	6927      	ldrcs	r7, [r4, #16]
   14bf0:	1a9f      	subcc	r7, r3, r2
   14bf2:	1abf      	subcs	r7, r7, r2
   14bf4:	429a      	cmp	r2, r3
   14bf6:	bf94      	ite	ls
   14bf8:	2500      	movls	r5, #0
   14bfa:	68e5      	ldrhi	r5, [r4, #12]
   14bfc:	b2bf      	uxth	r7, r7
   14bfe:	bf88      	it	hi
   14c00:	1b5b      	subhi	r3, r3, r5
   14c02:	4630      	mov	r0, r6
   14c04:	bf88      	it	hi
   14c06:	b29d      	uxthhi	r5, r3
   14c08:	f8ad 7002 	strh.w	r7, [sp, #2]
   14c0c:	f7fc fea4 	bl	11958 <bsd_os_trace_put>
   14c10:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14c14:	68a0      	ldr	r0, [r4, #8]
   14c16:	f7fc fe9f 	bl	11958 <bsd_os_trace_put>
   14c1a:	68a3      	ldr	r3, [r4, #8]
   14c1c:	6922      	ldr	r2, [r4, #16]
   14c1e:	441f      	add	r7, r3
   14c20:	4297      	cmp	r7, r2
   14c22:	bf08      	it	eq
   14c24:	68e3      	ldreq	r3, [r4, #12]
   14c26:	60a7      	str	r7, [r4, #8]
   14c28:	bf08      	it	eq
   14c2a:	60a3      	streq	r3, [r4, #8]
   14c2c:	2d00      	cmp	r5, #0
   14c2e:	d148      	bne.n	14cc2 <bsd_os_trace_irq_handler+0x16e>
   14c30:	4b38      	ldr	r3, [pc, #224]	; (14d14 <bsd_os_trace_irq_handler+0x1c0>)
   14c32:	681c      	ldr	r4, [r3, #0]
   14c34:	68a2      	ldr	r2, [r4, #8]
   14c36:	6863      	ldr	r3, [r4, #4]
   14c38:	429a      	cmp	r2, r3
   14c3a:	d02b      	beq.n	14c94 <bsd_os_trace_irq_handler+0x140>
   14c3c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14c40:	f8ad 3000 	strh.w	r3, [sp]
   14c44:	7823      	ldrb	r3, [r4, #0]
   14c46:	466e      	mov	r6, sp
   14c48:	f88d 3004 	strb.w	r3, [sp, #4]
   14c4c:	6863      	ldr	r3, [r4, #4]
   14c4e:	2105      	movs	r1, #5
   14c50:	429a      	cmp	r2, r3
   14c52:	bf2a      	itet	cs
   14c54:	6927      	ldrcs	r7, [r4, #16]
   14c56:	1a9f      	subcc	r7, r3, r2
   14c58:	1abf      	subcs	r7, r7, r2
   14c5a:	429a      	cmp	r2, r3
   14c5c:	bf94      	ite	ls
   14c5e:	2500      	movls	r5, #0
   14c60:	68e5      	ldrhi	r5, [r4, #12]
   14c62:	b2bf      	uxth	r7, r7
   14c64:	bf88      	it	hi
   14c66:	1b5b      	subhi	r3, r3, r5
   14c68:	4630      	mov	r0, r6
   14c6a:	bf88      	it	hi
   14c6c:	b29d      	uxthhi	r5, r3
   14c6e:	f8ad 7002 	strh.w	r7, [sp, #2]
   14c72:	f7fc fe71 	bl	11958 <bsd_os_trace_put>
   14c76:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14c7a:	68a0      	ldr	r0, [r4, #8]
   14c7c:	f7fc fe6c 	bl	11958 <bsd_os_trace_put>
   14c80:	68a3      	ldr	r3, [r4, #8]
   14c82:	6922      	ldr	r2, [r4, #16]
   14c84:	441f      	add	r7, r3
   14c86:	4297      	cmp	r7, r2
   14c88:	bf08      	it	eq
   14c8a:	68e3      	ldreq	r3, [r4, #12]
   14c8c:	60a7      	str	r7, [r4, #8]
   14c8e:	bf08      	it	eq
   14c90:	60a3      	streq	r3, [r4, #8]
   14c92:	b90d      	cbnz	r5, 14c98 <bsd_os_trace_irq_handler+0x144>
   14c94:	b003      	add	sp, #12
   14c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c98:	4630      	mov	r0, r6
   14c9a:	2105      	movs	r1, #5
   14c9c:	f8ad 5002 	strh.w	r5, [sp, #2]
   14ca0:	f7fc fe5a 	bl	11958 <bsd_os_trace_put>
   14ca4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14ca8:	68e0      	ldr	r0, [r4, #12]
   14caa:	f7fc fe55 	bl	11958 <bsd_os_trace_put>
   14cae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14cb2:	68e3      	ldr	r3, [r4, #12]
   14cb4:	4413      	add	r3, r2
   14cb6:	60a3      	str	r3, [r4, #8]
   14cb8:	b003      	add	sp, #12
   14cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cbc:	f7fc fe0e 	bl	118dc <bsd_os_trace_irq_clear>
   14cc0:	e74f      	b.n	14b62 <bsd_os_trace_irq_handler+0xe>
   14cc2:	2105      	movs	r1, #5
   14cc4:	4630      	mov	r0, r6
   14cc6:	f8ad 5002 	strh.w	r5, [sp, #2]
   14cca:	f7fc fe45 	bl	11958 <bsd_os_trace_put>
   14cce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14cd2:	68e0      	ldr	r0, [r4, #12]
   14cd4:	f7fc fe40 	bl	11958 <bsd_os_trace_put>
   14cd8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14cdc:	68e3      	ldr	r3, [r4, #12]
   14cde:	4413      	add	r3, r2
   14ce0:	60a3      	str	r3, [r4, #8]
   14ce2:	e7a5      	b.n	14c30 <bsd_os_trace_irq_handler+0xdc>
   14ce4:	2105      	movs	r1, #5
   14ce6:	4630      	mov	r0, r6
   14ce8:	f8ad 5002 	strh.w	r5, [sp, #2]
   14cec:	f7fc fe34 	bl	11958 <bsd_os_trace_put>
   14cf0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14cf4:	68e0      	ldr	r0, [r4, #12]
   14cf6:	f7fc fe2f 	bl	11958 <bsd_os_trace_put>
   14cfa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14cfe:	68e3      	ldr	r3, [r4, #12]
   14d00:	4413      	add	r3, r2
   14d02:	60a3      	str	r3, [r4, #8]
   14d04:	e761      	b.n	14bca <bsd_os_trace_irq_handler+0x76>
   14d06:	bf00      	nop
   14d08:	20026566 	.word	0x20026566
   14d0c:	20020774 	.word	0x20020774
   14d10:	2002076c 	.word	0x2002076c
   14d14:	20020770 	.word	0x20020770

00014d18 <ipc_trace_handle>:
   14d18:	2200      	movs	r2, #0
   14d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d1e:	4bb0      	ldr	r3, [pc, #704]	; (14fe0 <_flash_used+0x58>)
   14d20:	b083      	sub	sp, #12
   14d22:	681b      	ldr	r3, [r3, #0]
   14d24:	6919      	ldr	r1, [r3, #16]
   14d26:	695c      	ldr	r4, [r3, #20]
   14d28:	7c18      	ldrb	r0, [r3, #16]
   14d2a:	741a      	strb	r2, [r3, #16]
   14d2c:	7c58      	ldrb	r0, [r3, #17]
   14d2e:	745a      	strb	r2, [r3, #17]
   14d30:	7c98      	ldrb	r0, [r3, #18]
   14d32:	749a      	strb	r2, [r3, #18]
   14d34:	7cd8      	ldrb	r0, [r3, #19]
   14d36:	74da      	strb	r2, [r3, #19]
   14d38:	7d18      	ldrb	r0, [r3, #20]
   14d3a:	751a      	strb	r2, [r3, #20]
   14d3c:	7d58      	ldrb	r0, [r3, #21]
   14d3e:	755a      	strb	r2, [r3, #21]
   14d40:	7d98      	ldrb	r0, [r3, #22]
   14d42:	759a      	strb	r2, [r3, #22]
   14d44:	7dd8      	ldrb	r0, [r3, #23]
   14d46:	75da      	strb	r2, [r3, #23]
   14d48:	b1b9      	cbz	r1, 14d7a <ipc_trace_handle+0x62>
   14d4a:	3901      	subs	r1, #1
   14d4c:	2903      	cmp	r1, #3
   14d4e:	d814      	bhi.n	14d7a <ipc_trace_handle+0x62>
   14d50:	e8df f011 	tbh	[pc, r1, lsl #1]
   14d54:	010300d6 	.word	0x010300d6
   14d58:	00160004 	.word	0x00160004
   14d5c:	2501      	movs	r5, #1
   14d5e:	2003      	movs	r0, #3
   14d60:	2200      	movs	r2, #0
   14d62:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14d66:	4c9f      	ldr	r4, [pc, #636]	; (14fe4 <_flash_used+0x5c>)
   14d68:	7025      	strb	r5, [r4, #0]
   14d6a:	7a1c      	ldrb	r4, [r3, #8]
   14d6c:	7218      	strb	r0, [r3, #8]
   14d6e:	7a58      	ldrb	r0, [r3, #9]
   14d70:	725a      	strb	r2, [r3, #9]
   14d72:	7a98      	ldrb	r0, [r3, #10]
   14d74:	729a      	strb	r2, [r3, #10]
   14d76:	7ada      	ldrb	r2, [r3, #11]
   14d78:	72d9      	strb	r1, [r3, #11]
   14d7a:	b003      	add	sp, #12
   14d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d80:	2104      	movs	r1, #4
   14d82:	2200      	movs	r2, #0
   14d84:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   14d88:	7a1c      	ldrb	r4, [r3, #8]
   14d8a:	7219      	strb	r1, [r3, #8]
   14d8c:	7a59      	ldrb	r1, [r3, #9]
   14d8e:	725a      	strb	r2, [r3, #9]
   14d90:	4994      	ldr	r1, [pc, #592]	; (14fe4 <_flash_used+0x5c>)
   14d92:	7a9c      	ldrb	r4, [r3, #10]
   14d94:	729a      	strb	r2, [r3, #10]
   14d96:	7adc      	ldrb	r4, [r3, #11]
   14d98:	72d8      	strb	r0, [r3, #11]
   14d9a:	700a      	strb	r2, [r1, #0]
   14d9c:	780b      	ldrb	r3, [r1, #0]
   14d9e:	2b00      	cmp	r3, #0
   14da0:	f000 8117 	beq.w	14fd2 <_flash_used+0x4a>
   14da4:	4b90      	ldr	r3, [pc, #576]	; (14fe8 <_flash_used+0x60>)
   14da6:	681c      	ldr	r4, [r3, #0]
   14da8:	68a2      	ldr	r2, [r4, #8]
   14daa:	6863      	ldr	r3, [r4, #4]
   14dac:	429a      	cmp	r2, r3
   14dae:	d02d      	beq.n	14e0c <ipc_trace_handle+0xf4>
   14db0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14db4:	f8ad 3000 	strh.w	r3, [sp]
   14db8:	7823      	ldrb	r3, [r4, #0]
   14dba:	466e      	mov	r6, sp
   14dbc:	f88d 3004 	strb.w	r3, [sp, #4]
   14dc0:	6863      	ldr	r3, [r4, #4]
   14dc2:	2105      	movs	r1, #5
   14dc4:	429a      	cmp	r2, r3
   14dc6:	bf2a      	itet	cs
   14dc8:	6927      	ldrcs	r7, [r4, #16]
   14dca:	1a9f      	subcc	r7, r3, r2
   14dcc:	1abf      	subcs	r7, r7, r2
   14dce:	429a      	cmp	r2, r3
   14dd0:	bf94      	ite	ls
   14dd2:	2500      	movls	r5, #0
   14dd4:	68e5      	ldrhi	r5, [r4, #12]
   14dd6:	b2bf      	uxth	r7, r7
   14dd8:	bf88      	it	hi
   14dda:	1b5b      	subhi	r3, r3, r5
   14ddc:	4630      	mov	r0, r6
   14dde:	bf88      	it	hi
   14de0:	b29d      	uxthhi	r5, r3
   14de2:	f8ad 7002 	strh.w	r7, [sp, #2]
   14de6:	f7fc fdb7 	bl	11958 <bsd_os_trace_put>
   14dea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14dee:	68a0      	ldr	r0, [r4, #8]
   14df0:	f7fc fdb2 	bl	11958 <bsd_os_trace_put>
   14df4:	68a3      	ldr	r3, [r4, #8]
   14df6:	6922      	ldr	r2, [r4, #16]
   14df8:	441f      	add	r7, r3
   14dfa:	4297      	cmp	r7, r2
   14dfc:	bf08      	it	eq
   14dfe:	68e3      	ldreq	r3, [r4, #12]
   14e00:	60a7      	str	r7, [r4, #8]
   14e02:	bf08      	it	eq
   14e04:	60a3      	streq	r3, [r4, #8]
   14e06:	2d00      	cmp	r5, #0
   14e08:	f040 80d2 	bne.w	14fb0 <_flash_used+0x28>
   14e0c:	4b77      	ldr	r3, [pc, #476]	; (14fec <_flash_used+0x64>)
   14e0e:	681c      	ldr	r4, [r3, #0]
   14e10:	68a2      	ldr	r2, [r4, #8]
   14e12:	6863      	ldr	r3, [r4, #4]
   14e14:	429a      	cmp	r2, r3
   14e16:	d02d      	beq.n	14e74 <ipc_trace_handle+0x15c>
   14e18:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14e1c:	f8ad 3000 	strh.w	r3, [sp]
   14e20:	7823      	ldrb	r3, [r4, #0]
   14e22:	466e      	mov	r6, sp
   14e24:	f88d 3004 	strb.w	r3, [sp, #4]
   14e28:	6863      	ldr	r3, [r4, #4]
   14e2a:	2105      	movs	r1, #5
   14e2c:	429a      	cmp	r2, r3
   14e2e:	bf2a      	itet	cs
   14e30:	6927      	ldrcs	r7, [r4, #16]
   14e32:	1a9f      	subcc	r7, r3, r2
   14e34:	1abf      	subcs	r7, r7, r2
   14e36:	429a      	cmp	r2, r3
   14e38:	bf94      	ite	ls
   14e3a:	2500      	movls	r5, #0
   14e3c:	68e5      	ldrhi	r5, [r4, #12]
   14e3e:	b2bf      	uxth	r7, r7
   14e40:	bf88      	it	hi
   14e42:	1b5b      	subhi	r3, r3, r5
   14e44:	4630      	mov	r0, r6
   14e46:	bf88      	it	hi
   14e48:	b29d      	uxthhi	r5, r3
   14e4a:	f8ad 7002 	strh.w	r7, [sp, #2]
   14e4e:	f7fc fd83 	bl	11958 <bsd_os_trace_put>
   14e52:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14e56:	68a0      	ldr	r0, [r4, #8]
   14e58:	f7fc fd7e 	bl	11958 <bsd_os_trace_put>
   14e5c:	68a3      	ldr	r3, [r4, #8]
   14e5e:	6922      	ldr	r2, [r4, #16]
   14e60:	441f      	add	r7, r3
   14e62:	4297      	cmp	r7, r2
   14e64:	bf08      	it	eq
   14e66:	68e3      	ldreq	r3, [r4, #12]
   14e68:	60a7      	str	r7, [r4, #8]
   14e6a:	bf08      	it	eq
   14e6c:	60a3      	streq	r3, [r4, #8]
   14e6e:	2d00      	cmp	r5, #0
   14e70:	f040 808d 	bne.w	14f8e <_flash_used+0x6>
   14e74:	4b5e      	ldr	r3, [pc, #376]	; (14ff0 <_flash_used+0x68>)
   14e76:	681c      	ldr	r4, [r3, #0]
   14e78:	68a2      	ldr	r2, [r4, #8]
   14e7a:	6863      	ldr	r3, [r4, #4]
   14e7c:	429a      	cmp	r2, r3
   14e7e:	f43f af7c 	beq.w	14d7a <ipc_trace_handle+0x62>
   14e82:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   14e86:	f8ad 3000 	strh.w	r3, [sp]
   14e8a:	7823      	ldrb	r3, [r4, #0]
   14e8c:	466e      	mov	r6, sp
   14e8e:	f88d 3004 	strb.w	r3, [sp, #4]
   14e92:	6863      	ldr	r3, [r4, #4]
   14e94:	2105      	movs	r1, #5
   14e96:	429a      	cmp	r2, r3
   14e98:	bf2a      	itet	cs
   14e9a:	6927      	ldrcs	r7, [r4, #16]
   14e9c:	1a9f      	subcc	r7, r3, r2
   14e9e:	1abf      	subcs	r7, r7, r2
   14ea0:	429a      	cmp	r2, r3
   14ea2:	bf94      	ite	ls
   14ea4:	2500      	movls	r5, #0
   14ea6:	68e5      	ldrhi	r5, [r4, #12]
   14ea8:	b2bf      	uxth	r7, r7
   14eaa:	bf88      	it	hi
   14eac:	1b5b      	subhi	r3, r3, r5
   14eae:	4630      	mov	r0, r6
   14eb0:	bf88      	it	hi
   14eb2:	b29d      	uxthhi	r5, r3
   14eb4:	f8ad 7002 	strh.w	r7, [sp, #2]
   14eb8:	f7fc fd4e 	bl	11958 <bsd_os_trace_put>
   14ebc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14ec0:	68a0      	ldr	r0, [r4, #8]
   14ec2:	f7fc fd49 	bl	11958 <bsd_os_trace_put>
   14ec6:	68a3      	ldr	r3, [r4, #8]
   14ec8:	6922      	ldr	r2, [r4, #16]
   14eca:	441f      	add	r7, r3
   14ecc:	4297      	cmp	r7, r2
   14ece:	bf08      	it	eq
   14ed0:	68e3      	ldreq	r3, [r4, #12]
   14ed2:	60a7      	str	r7, [r4, #8]
   14ed4:	bf08      	it	eq
   14ed6:	60a3      	streq	r3, [r4, #8]
   14ed8:	2d00      	cmp	r5, #0
   14eda:	f43f af4e 	beq.w	14d7a <ipc_trace_handle+0x62>
   14ede:	2105      	movs	r1, #5
   14ee0:	4630      	mov	r0, r6
   14ee2:	f8ad 5002 	strh.w	r5, [sp, #2]
   14ee6:	f7fc fd37 	bl	11958 <bsd_os_trace_put>
   14eea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14eee:	68e0      	ldr	r0, [r4, #12]
   14ef0:	f7fc fd32 	bl	11958 <bsd_os_trace_put>
   14ef4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14ef8:	68e3      	ldr	r3, [r4, #12]
   14efa:	4413      	add	r3, r2
   14efc:	60a3      	str	r3, [r4, #8]
   14efe:	e73c      	b.n	14d7a <ipc_trace_handle+0x62>
   14f00:	4a38      	ldr	r2, [pc, #224]	; (14fe4 <_flash_used+0x5c>)
   14f02:	7811      	ldrb	r1, [r2, #0]
   14f04:	b109      	cbz	r1, 14f0a <ipc_trace_handle+0x1f2>
   14f06:	2100      	movs	r1, #0
   14f08:	7011      	strb	r1, [r2, #0]
   14f0a:	68a5      	ldr	r5, [r4, #8]
   14f0c:	2d00      	cmp	r5, #0
   14f0e:	d039      	beq.n	14f84 <ipc_trace_handle+0x26c>
   14f10:	f04f 0c00 	mov.w	ip, #0
   14f14:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 14fec <_flash_used+0x64>
   14f18:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 14fe8 <_flash_used+0x60>
   14f1c:	4934      	ldr	r1, [pc, #208]	; (14ff0 <_flash_used+0x68>)
   14f1e:	46e1      	mov	r9, ip
   14f20:	4666      	mov	r6, ip
   14f22:	4662      	mov	r2, ip
   14f24:	f8d1 e000 	ldr.w	lr, [r1]
   14f28:	f8da 8000 	ldr.w	r8, [sl]
   14f2c:	f8db 7000 	ldr.w	r7, [fp]
   14f30:	e008      	b.n	14f44 <ipc_trace_handle+0x22c>
   14f32:	2963      	cmp	r1, #99	; 0x63
   14f34:	d016      	beq.n	14f64 <ipc_trace_handle+0x24c>
   14f36:	2961      	cmp	r1, #97	; 0x61
   14f38:	bf04      	itt	eq
   14f3a:	4607      	moveq	r7, r0
   14f3c:	2601      	moveq	r6, #1
   14f3e:	3201      	adds	r2, #1
   14f40:	42aa      	cmp	r2, r5
   14f42:	d013      	beq.n	14f6c <ipc_trace_handle+0x254>
   14f44:	1c91      	adds	r1, r2, #2
   14f46:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   14f4a:	6848      	ldr	r0, [r1, #4]
   14f4c:	7801      	ldrb	r1, [r0, #0]
   14f4e:	2962      	cmp	r1, #98	; 0x62
   14f50:	d1ef      	bne.n	14f32 <ipc_trace_handle+0x21a>
   14f52:	4680      	mov	r8, r0
   14f54:	f04f 0901 	mov.w	r9, #1
   14f58:	e7f1      	b.n	14f3e <ipc_trace_handle+0x226>
   14f5a:	f7fc fcb7 	bl	118cc <bsd_os_trace_irq_set>
   14f5e:	b003      	add	sp, #12
   14f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f64:	4686      	mov	lr, r0
   14f66:	f04f 0c01 	mov.w	ip, #1
   14f6a:	e7e8      	b.n	14f3e <ipc_trace_handle+0x226>
   14f6c:	bba6      	cbnz	r6, 14fd8 <_flash_used+0x50>
   14f6e:	f1b9 0f00 	cmp.w	r9, #0
   14f72:	d001      	beq.n	14f78 <ipc_trace_handle+0x260>
   14f74:	f8ca 8000 	str.w	r8, [sl]
   14f78:	f1bc 0f00 	cmp.w	ip, #0
   14f7c:	d002      	beq.n	14f84 <ipc_trace_handle+0x26c>
   14f7e:	4a1c      	ldr	r2, [pc, #112]	; (14ff0 <_flash_used+0x68>)
   14f80:	f8c2 e000 	str.w	lr, [r2]
   14f84:	2001      	movs	r0, #1
   14f86:	2200      	movs	r2, #0
   14f88:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14f8c:	e6ed      	b.n	14d6a <ipc_trace_handle+0x52>
   14f8e:	2105      	movs	r1, #5
   14f90:	4630      	mov	r0, r6
   14f92:	f8ad 5002 	strh.w	r5, [sp, #2]
   14f96:	f7fc fcdf 	bl	11958 <bsd_os_trace_put>
   14f9a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14f9e:	68e0      	ldr	r0, [r4, #12]
   14fa0:	f7fc fcda 	bl	11958 <bsd_os_trace_put>
   14fa4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14fa8:	68e3      	ldr	r3, [r4, #12]
   14faa:	4413      	add	r3, r2
   14fac:	60a3      	str	r3, [r4, #8]
   14fae:	e761      	b.n	14e74 <ipc_trace_handle+0x15c>
   14fb0:	2105      	movs	r1, #5
   14fb2:	4630      	mov	r0, r6
   14fb4:	f8ad 5002 	strh.w	r5, [sp, #2]
   14fb8:	f7fc fcce 	bl	11958 <bsd_os_trace_put>
   14fbc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14fc0:	68e0      	ldr	r0, [r4, #12]
   14fc2:	f7fc fcc9 	bl	11958 <bsd_os_trace_put>
   14fc6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14fca:	68e3      	ldr	r3, [r4, #12]
   14fcc:	4413      	add	r3, r2
   14fce:	60a3      	str	r3, [r4, #8]
   14fd0:	e71c      	b.n	14e0c <ipc_trace_handle+0xf4>
   14fd2:	f7fc fc83 	bl	118dc <bsd_os_trace_irq_clear>
   14fd6:	e6e5      	b.n	14da4 <ipc_trace_handle+0x8c>
   14fd8:	f8cb 7000 	str.w	r7, [fp]
   14fdc:	e7c7      	b.n	14f6e <ipc_trace_handle+0x256>
   14fde:	bf00      	nop
   14fe0:	20020778 	.word	0x20020778
   14fe4:	20026566 	.word	0x20026566
   14fe8:	20020774 	.word	0x20020774
   14fec:	2002076c 	.word	0x2002076c
   14ff0:	20020770 	.word	0x20020770

00014ff4 <rpc_trace_coredump_in_progress>:
   14ff4:	4b01      	ldr	r3, [pc, #4]	; (14ffc <rpc_trace_coredump_in_progress+0x8>)
   14ff6:	7818      	ldrb	r0, [r3, #0]
   14ff8:	4770      	bx	lr
   14ffa:	bf00      	nop
   14ffc:	20026566 	.word	0x20026566

00015000 <transport_reset>:
   15000:	2000      	movs	r0, #0
   15002:	4770      	bx	lr

00015004 <transport_data_free>:
   15004:	4b0b      	ldr	r3, [pc, #44]	; (15034 <transport_data_free+0x30>)
   15006:	e9d3 2300 	ldrd	r2, r3, [r3]
   1500a:	4413      	add	r3, r2
   1500c:	4298      	cmp	r0, r3
   1500e:	d20d      	bcs.n	1502c <transport_data_free+0x28>
   15010:	4282      	cmp	r2, r0
   15012:	d80b      	bhi.n	1502c <transport_data_free+0x28>
   15014:	b510      	push	{r4, lr}
   15016:	4604      	mov	r4, r0
   15018:	f000 fdfc 	bl	15c14 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1501c:	b140      	cbz	r0, 15030 <transport_data_free+0x2c>
   1501e:	4a06      	ldr	r2, [pc, #24]	; (15038 <transport_data_free+0x34>)
   15020:	6084      	str	r4, [r0, #8]
   15022:	6002      	str	r2, [r0, #0]
   15024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15028:	f000 bd3c 	b.w	15aa4 <rpc_transport_ipc_tx_send>
   1502c:	f7fe bc58 	b.w	138e0 <nrf_shared_free>
   15030:	bd10      	pop	{r4, pc}
   15032:	bf00      	nop
   15034:	2002077c 	.word	0x2002077c
   15038:	00020001 	.word	0x00020001

0001503c <rpc_transport_ipc_init>:
   1503c:	2800      	cmp	r0, #0
   1503e:	d02b      	beq.n	15098 <rpc_transport_ipc_init+0x5c>
   15040:	b530      	push	{r4, r5, lr}
   15042:	b089      	sub	sp, #36	; 0x24
   15044:	aa01      	add	r2, sp, #4
   15046:	4669      	mov	r1, sp
   15048:	4604      	mov	r4, r0
   1504a:	f000 fc41 	bl	158d0 <rpc_transport_ipc_tx_init>
   1504e:	4603      	mov	r3, r0
   15050:	b140      	cbz	r0, 15064 <rpc_transport_ipc_init+0x28>
   15052:	4a13      	ldr	r2, [pc, #76]	; (150a0 <rpc_transport_ipc_init+0x64>)
   15054:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15058:	c803      	ldmia	r0, {r0, r1}
   1505a:	e882 0003 	stmia.w	r2, {r0, r1}
   1505e:	4618      	mov	r0, r3
   15060:	b009      	add	sp, #36	; 0x24
   15062:	bd30      	pop	{r4, r5, pc}
   15064:	e9dd 1200 	ldrd	r1, r2, [sp]
   15068:	4620      	mov	r0, r4
   1506a:	f000 f857 	bl	1511c <rpc_transport_ipc_rx_init>
   1506e:	4603      	mov	r3, r0
   15070:	2800      	cmp	r0, #0
   15072:	d1ee      	bne.n	15052 <rpc_transport_ipc_init+0x16>
   15074:	4b0b      	ldr	r3, [pc, #44]	; (150a4 <rpc_transport_ipc_init+0x68>)
   15076:	490c      	ldr	r1, [pc, #48]	; (150a8 <rpc_transport_ipc_init+0x6c>)
   15078:	480c      	ldr	r0, [pc, #48]	; (150ac <rpc_transport_ipc_init+0x70>)
   1507a:	4a0d      	ldr	r2, [pc, #52]	; (150b0 <rpc_transport_ipc_init+0x74>)
   1507c:	9303      	str	r3, [sp, #12]
   1507e:	4d0d      	ldr	r5, [pc, #52]	; (150b4 <rpc_transport_ipc_init+0x78>)
   15080:	4b0d      	ldr	r3, [pc, #52]	; (150b8 <rpc_transport_ipc_init+0x7c>)
   15082:	9104      	str	r1, [sp, #16]
   15084:	9005      	str	r0, [sp, #20]
   15086:	490d      	ldr	r1, [pc, #52]	; (150bc <rpc_transport_ipc_init+0x80>)
   15088:	a802      	add	r0, sp, #8
   1508a:	9307      	str	r3, [sp, #28]
   1508c:	9506      	str	r5, [sp, #24]
   1508e:	9202      	str	r2, [sp, #8]
   15090:	f003 ffb4 	bl	18ffc <rpc_transport_register>
   15094:	4603      	mov	r3, r0
   15096:	e7dc      	b.n	15052 <rpc_transport_ipc_init+0x16>
   15098:	230e      	movs	r3, #14
   1509a:	4618      	mov	r0, r3
   1509c:	4770      	bx	lr
   1509e:	bf00      	nop
   150a0:	2002077c 	.word	0x2002077c
   150a4:	00015ba5 	.word	0x00015ba5
   150a8:	00015c75 	.word	0x00015c75
   150ac:	00015739 	.word	0x00015739
   150b0:	00015aa5 	.word	0x00015aa5
   150b4:	00015005 	.word	0x00015005
   150b8:	00015001 	.word	0x00015001
   150bc:	20020784 	.word	0x20020784

000150c0 <rpc_transport_rx_handle>:
   150c0:	b160      	cbz	r0, 150dc <rpc_transport_rx_handle+0x1c>
   150c2:	b508      	push	{r3, lr}
   150c4:	6843      	ldr	r3, [r0, #4]
   150c6:	b2db      	uxtb	r3, r3
   150c8:	2b02      	cmp	r3, #2
   150ca:	d00e      	beq.n	150ea <rpc_transport_rx_handle+0x2a>
   150cc:	6803      	ldr	r3, [r0, #0]
   150ce:	0c1b      	lsrs	r3, r3, #16
   150d0:	2b02      	cmp	r3, #2
   150d2:	d005      	beq.n	150e0 <rpc_transport_rx_handle+0x20>
   150d4:	2b04      	cmp	r3, #4
   150d6:	d00e      	beq.n	150f6 <rpc_transport_rx_handle+0x36>
   150d8:	2000      	movs	r0, #0
   150da:	bd08      	pop	{r3, pc}
   150dc:	2000      	movs	r0, #0
   150de:	4770      	bx	lr
   150e0:	6880      	ldr	r0, [r0, #8]
   150e2:	f7fe fbfd 	bl	138e0 <nrf_shared_free>
   150e6:	2000      	movs	r0, #0
   150e8:	bd08      	pop	{r3, pc}
   150ea:	4601      	mov	r1, r0
   150ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   150f0:	4803      	ldr	r0, [pc, #12]	; (15100 <rpc_transport_rx_handle+0x40>)
   150f2:	f003 be75 	b.w	18de0 <rpc_transport_input>
   150f6:	4802      	ldr	r0, [pc, #8]	; (15100 <rpc_transport_rx_handle+0x40>)
   150f8:	f003 ffe0 	bl	190bc <rpc_transport_unregister>
   150fc:	2000      	movs	r0, #0
   150fe:	bd08      	pop	{r3, pc}
   15100:	20020784 	.word	0x20020784

00015104 <rpc_transport_ipc_shutdown>:
   15104:	b508      	push	{r3, lr}
   15106:	f000 fdbf 	bl	15c88 <rpc_transport_ipc_tx_suspend>
   1510a:	f000 fb4b 	bl	157a4 <rpc_transport_ipc_rx_suspend>
   1510e:	f000 fdc1 	bl	15c94 <rpc_transport_ipc_tx_shutdown>
   15112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   15116:	f000 bb65 	b.w	157e4 <rpc_transport_ipc_rx_shutdown>
   1511a:	bf00      	nop

0001511c <rpc_transport_ipc_rx_init>:
   1511c:	2800      	cmp	r0, #0
   1511e:	f000 80ff 	beq.w	15320 <rpc_transport_ipc_rx_init+0x204>
   15122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15126:	6805      	ldr	r5, [r0, #0]
   15128:	b095      	sub	sp, #84	; 0x54
   1512a:	2d00      	cmp	r5, #0
   1512c:	f000 80ee 	beq.w	1530c <rpc_transport_ipc_rx_init+0x1f0>
   15130:	6883      	ldr	r3, [r0, #8]
   15132:	2b00      	cmp	r3, #0
   15134:	f000 80ea 	beq.w	1530c <rpc_transport_ipc_rx_init+0x1f0>
   15138:	6907      	ldr	r7, [r0, #16]
   1513a:	2f00      	cmp	r7, #0
   1513c:	f000 80e6 	beq.w	1530c <rpc_transport_ipc_rx_init+0x1f0>
   15140:	6a84      	ldr	r4, [r0, #40]	; 0x28
   15142:	2c00      	cmp	r4, #0
   15144:	f000 80e2 	beq.w	1530c <rpc_transport_ipc_rx_init+0x1f0>
   15148:	6844      	ldr	r4, [r0, #4]
   1514a:	2c1b      	cmp	r4, #27
   1514c:	f240 80e3 	bls.w	15316 <rpc_transport_ipc_rx_init+0x1fa>
   15150:	68c4      	ldr	r4, [r0, #12]
   15152:	2c0b      	cmp	r4, #11
   15154:	f240 80df 	bls.w	15316 <rpc_transport_ipc_rx_init+0x1fa>
   15158:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1515c:	f1be 0f17 	cmp.w	lr, #23
   15160:	f240 80d9 	bls.w	15316 <rpc_transport_ipc_rx_init+0x1fa>
   15164:	2600      	movs	r6, #0
   15166:	4604      	mov	r4, r0
   15168:	486f      	ldr	r0, [pc, #444]	; (15328 <rpc_transport_ipc_rx_init+0x20c>)
   1516a:	e9cd 1200 	strd	r1, r2, [sp]
   1516e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 15348 <rpc_transport_ipc_rx_init+0x22c>
   15172:	496e      	ldr	r1, [pc, #440]	; (1532c <rpc_transport_ipc_rx_init+0x210>)
   15174:	8006      	strh	r6, [r0, #0]
   15176:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   15178:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 1534c <rpc_transport_ipc_rx_init+0x230>
   1517c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 15350 <rpc_transport_ipc_rx_init+0x234>
   15180:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 15354 <rpc_transport_ipc_rx_init+0x238>
   15184:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 15358 <rpc_transport_ipc_rx_init+0x23c>
   15188:	4672      	mov	r2, lr
   1518a:	600e      	str	r6, [r1, #0]
   1518c:	f8ca 0000 	str.w	r0, [sl]
   15190:	4631      	mov	r1, r6
   15192:	4638      	mov	r0, r7
   15194:	f8cc 6000 	str.w	r6, [ip]
   15198:	f8cb 3000 	str.w	r3, [fp]
   1519c:	f8c8 6000 	str.w	r6, [r8]
   151a0:	f8c9 6000 	str.w	r6, [r9]
   151a4:	f008 f94f 	bl	1d446 <memset>
   151a8:	69e3      	ldr	r3, [r4, #28]
   151aa:	4638      	mov	r0, r7
   151ac:	603b      	str	r3, [r7, #0]
   151ae:	69a3      	ldr	r3, [r4, #24]
   151b0:	607b      	str	r3, [r7, #4]
   151b2:	f7ff fcc9 	bl	14b48 <ipc_trace_init>
   151b6:	2201      	movs	r2, #1
   151b8:	f04f 0c04 	mov.w	ip, #4
   151bc:	4b5c      	ldr	r3, [pc, #368]	; (15330 <rpc_transport_ipc_rx_init+0x214>)
   151be:	495d      	ldr	r1, [pc, #372]	; (15334 <rpc_transport_ipc_rx_init+0x218>)
   151c0:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   151c4:	6809      	ldr	r1, [r1, #0]
   151c6:	2080      	movs	r0, #128	; 0x80
   151c8:	9104      	str	r1, [sp, #16]
   151ca:	495b      	ldr	r1, [pc, #364]	; (15338 <rpc_transport_ipc_rx_init+0x21c>)
   151cc:	f8dd e010 	ldr.w	lr, [sp, #16]
   151d0:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   151d4:	6809      	ldr	r1, [r1, #0]
   151d6:	702e      	strb	r6, [r5, #0]
   151d8:	9103      	str	r1, [sp, #12]
   151da:	706e      	strb	r6, [r5, #1]
   151dc:	70ee      	strb	r6, [r5, #3]
   151de:	70aa      	strb	r2, [r5, #2]
   151e0:	9903      	ldr	r1, [sp, #12]
   151e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   151e4:	f8db e000 	ldr.w	lr, [fp]
   151e8:	6069      	str	r1, [r5, #4]
   151ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   151ec:	9c01      	ldr	r4, [sp, #4]
   151ee:	60a9      	str	r1, [r5, #8]
   151f0:	60ec      	str	r4, [r5, #12]
   151f2:	9c00      	ldr	r4, [sp, #0]
   151f4:	4951      	ldr	r1, [pc, #324]	; (1533c <rpc_transport_ipc_rx_init+0x220>)
   151f6:	61af      	str	r7, [r5, #24]
   151f8:	f8c5 e014 	str.w	lr, [r5, #20]
   151fc:	612c      	str	r4, [r5, #16]
   151fe:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15202:	680c      	ldr	r4, [r1, #0]
   15204:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   15208:	9405      	str	r4, [sp, #20]
   1520a:	9c05      	ldr	r4, [sp, #20]
   1520c:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   15210:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   15214:	f44f 6780 	mov.w	r7, #1024	; 0x400
   15218:	9406      	str	r4, [sp, #24]
   1521a:	9c06      	ldr	r4, [sp, #24]
   1521c:	2410      	movs	r4, #16
   1521e:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   15222:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   15226:	4d46      	ldr	r5, [pc, #280]	; (15340 <rpc_transport_ipc_rx_init+0x224>)
   15228:	9407      	str	r4, [sp, #28]
   1522a:	9c07      	ldr	r4, [sp, #28]
   1522c:	2440      	movs	r4, #64	; 0x40
   1522e:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   15232:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   15236:	9408      	str	r4, [sp, #32]
   15238:	9c08      	ldr	r4, [sp, #32]
   1523a:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   1523e:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   15242:	9009      	str	r0, [sp, #36]	; 0x24
   15244:	9809      	ldr	r0, [sp, #36]	; 0x24
   15246:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   1524a:	6808      	ldr	r0, [r1, #0]
   1524c:	900a      	str	r0, [sp, #40]	; 0x28
   1524e:	980a      	ldr	r0, [sp, #40]	; 0x28
   15250:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   15254:	6888      	ldr	r0, [r1, #8]
   15256:	900b      	str	r0, [sp, #44]	; 0x2c
   15258:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1525a:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   1525e:	6908      	ldr	r0, [r1, #16]
   15260:	900c      	str	r0, [sp, #48]	; 0x30
   15262:	980c      	ldr	r0, [sp, #48]	; 0x30
   15264:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   15268:	6988      	ldr	r0, [r1, #24]
   1526a:	900d      	str	r0, [sp, #52]	; 0x34
   1526c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1526e:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   15272:	69c8      	ldr	r0, [r1, #28]
   15274:	f501 7101 	add.w	r1, r1, #516	; 0x204
   15278:	900e      	str	r0, [sp, #56]	; 0x38
   1527a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1527c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   15280:	4310      	orrs	r0, r2
   15282:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   15286:	680c      	ldr	r4, [r1, #0]
   15288:	482e      	ldr	r0, [pc, #184]	; (15344 <rpc_transport_ipc_rx_init+0x228>)
   1528a:	940f      	str	r4, [sp, #60]	; 0x3c
   1528c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1528e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   15292:	ea44 040c 	orr.w	r4, r4, ip
   15296:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1529a:	680c      	ldr	r4, [r1, #0]
   1529c:	9410      	str	r4, [sp, #64]	; 0x40
   1529e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   152a0:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   152a4:	f044 0410 	orr.w	r4, r4, #16
   152a8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   152ac:	680c      	ldr	r4, [r1, #0]
   152ae:	9411      	str	r4, [sp, #68]	; 0x44
   152b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
   152b2:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   152b6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   152ba:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   152be:	680c      	ldr	r4, [r1, #0]
   152c0:	9412      	str	r4, [sp, #72]	; 0x48
   152c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
   152c4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   152c8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   152cc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   152d0:	f8da 3000 	ldr.w	r3, [sl]
   152d4:	6809      	ldr	r1, [r1, #0]
   152d6:	015b      	lsls	r3, r3, #5
   152d8:	9113      	str	r1, [sp, #76]	; 0x4c
   152da:	b2db      	uxtb	r3, r3
   152dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
   152de:	f8c8 2000 	str.w	r2, [r8]
   152e2:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   152e6:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   152ea:	6047      	str	r7, [r0, #4]
   152ec:	9602      	str	r6, [sp, #8]
   152ee:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   152f2:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   152f6:	9302      	str	r3, [sp, #8]
   152f8:	9b02      	ldr	r3, [sp, #8]
   152fa:	f8d8 3000 	ldr.w	r3, [r8]
   152fe:	2b01      	cmp	r3, #1
   15300:	d0fb      	beq.n	152fa <rpc_transport_ipc_rx_init+0x1de>
   15302:	f8d9 0000 	ldr.w	r0, [r9]
   15306:	b015      	add	sp, #84	; 0x54
   15308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1530c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15310:	b015      	add	sp, #84	; 0x54
   15312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15316:	f24c 0009 	movw	r0, #49161	; 0xc009
   1531a:	b015      	add	sp, #84	; 0x54
   1531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15320:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15324:	4770      	bx	lr
   15326:	bf00      	nop
   15328:	20024e1e 	.word	0x20024e1e
   1532c:	20020794 	.word	0x20020794
   15330:	4002a000 	.word	0x4002a000
   15334:	4002a610 	.word	0x4002a610
   15338:	4002a614 	.word	0x4002a614
   1533c:	4002a590 	.word	0x4002a590
   15340:	40005000 	.word	0x40005000
   15344:	e000e100 	.word	0xe000e100
   15348:	2002078c 	.word	0x2002078c
   1534c:	20020798 	.word	0x20020798
   15350:	20020790 	.word	0x20020790
   15354:	2002079c 	.word	0x2002079c
   15358:	20020788 	.word	0x20020788

0001535c <IPC_IRQHandler>:
   1535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15360:	f44f 6580 	mov.w	r5, #1024	; 0x400
   15364:	4ca7      	ldr	r4, [pc, #668]	; (15604 <IPC_IRQHandler+0x2a8>)
   15366:	b087      	sub	sp, #28
   15368:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   1536c:	f3bf 8f4f 	dsb	sy
   15370:	f3bf 8f6f 	isb	sy
   15374:	4ea4      	ldr	r6, [pc, #656]	; (15608 <IPC_IRQHandler+0x2ac>)
   15376:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   1537a:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1537e:	061f      	lsls	r7, r3, #24
   15380:	f100 80c8 	bmi.w	15514 <IPC_IRQHandler+0x1b8>
   15384:	4ba0      	ldr	r3, [pc, #640]	; (15608 <IPC_IRQHandler+0x2ac>)
   15386:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1538a:	07d0      	lsls	r0, r2, #31
   1538c:	f100 80d4 	bmi.w	15538 <IPC_IRQHandler+0x1dc>
   15390:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   15394:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   15398:	f040 80b6 	bne.w	15508 <IPC_IRQHandler+0x1ac>
   1539c:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   153a0:	0749      	lsls	r1, r1, #29
   153a2:	f100 80e6 	bmi.w	15572 <IPC_IRQHandler+0x216>
   153a6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   153aa:	06da      	lsls	r2, r3, #27
   153ac:	f140 809d 	bpl.w	154ea <IPC_IRQHandler+0x18e>
   153b0:	2100      	movs	r1, #0
   153b2:	4a95      	ldr	r2, [pc, #596]	; (15608 <IPC_IRQHandler+0x2ac>)
   153b4:	4b95      	ldr	r3, [pc, #596]	; (1560c <IPC_IRQHandler+0x2b0>)
   153b6:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   153ba:	681b      	ldr	r3, [r3, #0]
   153bc:	9304      	str	r3, [sp, #16]
   153be:	9b04      	ldr	r3, [sp, #16]
   153c0:	f8df 8270 	ldr.w	r8, [pc, #624]	; 15634 <IPC_IRQHandler+0x2d8>
   153c4:	4f92      	ldr	r7, [pc, #584]	; (15610 <IPC_IRQHandler+0x2b4>)
   153c6:	f8df 9270 	ldr.w	r9, [pc, #624]	; 15638 <IPC_IRQHandler+0x2dc>
   153ca:	f8d8 a000 	ldr.w	sl, [r8]
   153ce:	f8da 1000 	ldr.w	r1, [sl]
   153d2:	2900      	cmp	r1, #0
   153d4:	d03f      	beq.n	15456 <IPC_IRQHandler+0xfa>
   153d6:	2200      	movs	r2, #0
   153d8:	4614      	mov	r4, r2
   153da:	e002      	b.n	153e2 <IPC_IRQHandler+0x86>
   153dc:	3401      	adds	r4, #1
   153de:	428c      	cmp	r4, r1
   153e0:	d227      	bcs.n	15432 <IPC_IRQHandler+0xd6>
   153e2:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   153e6:	68ab      	ldr	r3, [r5, #8]
   153e8:	2b00      	cmp	r3, #0
   153ea:	d0f7      	beq.n	153dc <IPC_IRQHandler+0x80>
   153ec:	686e      	ldr	r6, [r5, #4]
   153ee:	b2f6      	uxtb	r6, r6
   153f0:	2e01      	cmp	r6, #1
   153f2:	d1f3      	bne.n	153dc <IPC_IRQHandler+0x80>
   153f4:	6868      	ldr	r0, [r5, #4]
   153f6:	f8b9 3000 	ldrh.w	r3, [r9]
   153fa:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   153fe:	d1ed      	bne.n	153dc <IPC_IRQHandler+0x80>
   15400:	686a      	ldr	r2, [r5, #4]
   15402:	3301      	adds	r3, #1
   15404:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15408:	f042 0202 	orr.w	r2, r2, #2
   1540c:	606a      	str	r2, [r5, #4]
   1540e:	68a8      	ldr	r0, [r5, #8]
   15410:	f8a9 3000 	strh.w	r3, [r9]
   15414:	f7ff fe54 	bl	150c0 <rpc_transport_rx_handle>
   15418:	4632      	mov	r2, r6
   1541a:	b928      	cbnz	r0, 15428 <IPC_IRQHandler+0xcc>
   1541c:	686b      	ldr	r3, [r5, #4]
   1541e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15422:	f043 0303 	orr.w	r3, r3, #3
   15426:	606b      	str	r3, [r5, #4]
   15428:	f8da 1000 	ldr.w	r1, [sl]
   1542c:	3401      	adds	r4, #1
   1542e:	428c      	cmp	r4, r1
   15430:	d3d7      	bcc.n	153e2 <IPC_IRQHandler+0x86>
   15432:	2a00      	cmp	r2, #0
   15434:	d1cd      	bne.n	153d2 <IPC_IRQHandler+0x76>
   15436:	b171      	cbz	r1, 15456 <IPC_IRQHandler+0xfa>
   15438:	4613      	mov	r3, r2
   1543a:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   1543e:	6890      	ldr	r0, [r2, #8]
   15440:	3301      	adds	r3, #1
   15442:	b130      	cbz	r0, 15452 <IPC_IRQHandler+0xf6>
   15444:	f8d2 b004 	ldr.w	fp, [r2, #4]
   15448:	fa5f fb8b 	uxtb.w	fp, fp
   1544c:	f1bb 0f01 	cmp.w	fp, #1
   15450:	d003      	beq.n	1545a <IPC_IRQHandler+0xfe>
   15452:	428b      	cmp	r3, r1
   15454:	d1f1      	bne.n	1543a <IPC_IRQHandler+0xde>
   15456:	f04f 0b00 	mov.w	fp, #0
   1545a:	f8d7 a000 	ldr.w	sl, [r7]
   1545e:	f8da 2000 	ldr.w	r2, [sl]
   15462:	2a00      	cmp	r2, #0
   15464:	d03d      	beq.n	154e2 <IPC_IRQHandler+0x186>
   15466:	2100      	movs	r1, #0
   15468:	460c      	mov	r4, r1
   1546a:	e002      	b.n	15472 <IPC_IRQHandler+0x116>
   1546c:	3401      	adds	r4, #1
   1546e:	4294      	cmp	r4, r2
   15470:	d227      	bcs.n	154c2 <IPC_IRQHandler+0x166>
   15472:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   15476:	68ab      	ldr	r3, [r5, #8]
   15478:	2b00      	cmp	r3, #0
   1547a:	d0f7      	beq.n	1546c <IPC_IRQHandler+0x110>
   1547c:	686e      	ldr	r6, [r5, #4]
   1547e:	b2f6      	uxtb	r6, r6
   15480:	2e01      	cmp	r6, #1
   15482:	d1f3      	bne.n	1546c <IPC_IRQHandler+0x110>
   15484:	6868      	ldr	r0, [r5, #4]
   15486:	f8b9 3000 	ldrh.w	r3, [r9]
   1548a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1548e:	d1ed      	bne.n	1546c <IPC_IRQHandler+0x110>
   15490:	686a      	ldr	r2, [r5, #4]
   15492:	3301      	adds	r3, #1
   15494:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15498:	f042 0202 	orr.w	r2, r2, #2
   1549c:	606a      	str	r2, [r5, #4]
   1549e:	68a8      	ldr	r0, [r5, #8]
   154a0:	f8a9 3000 	strh.w	r3, [r9]
   154a4:	f7ff fe0c 	bl	150c0 <rpc_transport_rx_handle>
   154a8:	4631      	mov	r1, r6
   154aa:	b928      	cbnz	r0, 154b8 <IPC_IRQHandler+0x15c>
   154ac:	686a      	ldr	r2, [r5, #4]
   154ae:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   154b2:	f043 0303 	orr.w	r3, r3, #3
   154b6:	606b      	str	r3, [r5, #4]
   154b8:	f8da 2000 	ldr.w	r2, [sl]
   154bc:	3401      	adds	r4, #1
   154be:	4294      	cmp	r4, r2
   154c0:	d3d7      	bcc.n	15472 <IPC_IRQHandler+0x116>
   154c2:	2900      	cmp	r1, #0
   154c4:	d1cd      	bne.n	15462 <IPC_IRQHandler+0x106>
   154c6:	b162      	cbz	r2, 154e2 <IPC_IRQHandler+0x186>
   154c8:	460b      	mov	r3, r1
   154ca:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   154ce:	6888      	ldr	r0, [r1, #8]
   154d0:	3301      	adds	r3, #1
   154d2:	b120      	cbz	r0, 154de <IPC_IRQHandler+0x182>
   154d4:	6849      	ldr	r1, [r1, #4]
   154d6:	b2c9      	uxtb	r1, r1
   154d8:	2901      	cmp	r1, #1
   154da:	f43f af76 	beq.w	153ca <IPC_IRQHandler+0x6e>
   154de:	4293      	cmp	r3, r2
   154e0:	d1f3      	bne.n	154ca <IPC_IRQHandler+0x16e>
   154e2:	f1bb 0f00 	cmp.w	fp, #0
   154e6:	f47f af70 	bne.w	153ca <IPC_IRQHandler+0x6e>
   154ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
   154ee:	4b49      	ldr	r3, [pc, #292]	; (15614 <IPC_IRQHandler+0x2b8>)
   154f0:	4a44      	ldr	r2, [pc, #272]	; (15604 <IPC_IRQHandler+0x2a8>)
   154f2:	681b      	ldr	r3, [r3, #0]
   154f4:	015b      	lsls	r3, r3, #5
   154f6:	b2db      	uxtb	r3, r3
   154f8:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   154fc:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   15500:	6051      	str	r1, [r2, #4]
   15502:	b007      	add	sp, #28
   15504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15508:	2206      	movs	r2, #6
   1550a:	4b43      	ldr	r3, [pc, #268]	; (15618 <IPC_IRQHandler+0x2bc>)
   1550c:	601a      	str	r2, [r3, #0]
   1550e:	b007      	add	sp, #28
   15510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15514:	f7ff fc00 	bl	14d18 <ipc_trace_handle>
   15518:	f7ff fd6c 	bl	14ff4 <rpc_trace_coredump_in_progress>
   1551c:	2800      	cmp	r0, #0
   1551e:	d149      	bne.n	155b4 <IPC_IRQHandler+0x258>
   15520:	4b3e      	ldr	r3, [pc, #248]	; (1561c <IPC_IRQHandler+0x2c0>)
   15522:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   15526:	681b      	ldr	r3, [r3, #0]
   15528:	9301      	str	r3, [sp, #4]
   1552a:	9b01      	ldr	r3, [sp, #4]
   1552c:	4b36      	ldr	r3, [pc, #216]	; (15608 <IPC_IRQHandler+0x2ac>)
   1552e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   15532:	07d0      	lsls	r0, r2, #31
   15534:	f57f af2c 	bpl.w	15390 <IPC_IRQHandler+0x34>
   15538:	2000      	movs	r0, #0
   1553a:	f248 0202 	movw	r2, #32770	; 0x8002
   1553e:	4938      	ldr	r1, [pc, #224]	; (15620 <IPC_IRQHandler+0x2c4>)
   15540:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   15544:	6809      	ldr	r1, [r1, #0]
   15546:	9102      	str	r1, [sp, #8]
   15548:	9902      	ldr	r1, [sp, #8]
   1554a:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1554e:	4293      	cmp	r3, r2
   15550:	d040      	beq.n	155d4 <IPC_IRQHandler+0x278>
   15552:	d81e      	bhi.n	15592 <IPC_IRQHandler+0x236>
   15554:	2b00      	cmp	r3, #0
   15556:	d04f      	beq.n	155f8 <IPC_IRQHandler+0x29c>
   15558:	2b02      	cmp	r3, #2
   1555a:	d942      	bls.n	155e2 <IPC_IRQHandler+0x286>
   1555c:	f248 0201 	movw	r2, #32769	; 0x8001
   15560:	4293      	cmp	r3, r2
   15562:	d149      	bne.n	155f8 <IPC_IRQHandler+0x29c>
   15564:	2003      	movs	r0, #3
   15566:	2207      	movs	r2, #7
   15568:	492b      	ldr	r1, [pc, #172]	; (15618 <IPC_IRQHandler+0x2bc>)
   1556a:	4b2e      	ldr	r3, [pc, #184]	; (15624 <IPC_IRQHandler+0x2c8>)
   1556c:	6008      	str	r0, [r1, #0]
   1556e:	601a      	str	r2, [r3, #0]
   15570:	e7cd      	b.n	1550e <IPC_IRQHandler+0x1b2>
   15572:	4d29      	ldr	r5, [pc, #164]	; (15618 <IPC_IRQHandler+0x2bc>)
   15574:	6829      	ldr	r1, [r5, #0]
   15576:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1557a:	2901      	cmp	r1, #1
   1557c:	492a      	ldr	r1, [pc, #168]	; (15628 <IPC_IRQHandler+0x2cc>)
   1557e:	d05d      	beq.n	1563c <IPC_IRQHandler+0x2e0>
   15580:	680a      	ldr	r2, [r1, #0]
   15582:	9203      	str	r2, [sp, #12]
   15584:	9a03      	ldr	r2, [sp, #12]
   15586:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1558a:	06db      	lsls	r3, r3, #27
   1558c:	f53f af10 	bmi.w	153b0 <IPC_IRQHandler+0x54>
   15590:	e716      	b.n	153c0 <IPC_IRQHandler+0x64>
   15592:	4a26      	ldr	r2, [pc, #152]	; (1562c <IPC_IRQHandler+0x2d0>)
   15594:	4293      	cmp	r3, r2
   15596:	d814      	bhi.n	155c2 <IPC_IRQHandler+0x266>
   15598:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1559c:	d814      	bhi.n	155c8 <IPC_IRQHandler+0x26c>
   1559e:	f248 0203 	movw	r2, #32771	; 0x8003
   155a2:	4293      	cmp	r3, r2
   155a4:	d128      	bne.n	155f8 <IPC_IRQHandler+0x29c>
   155a6:	2003      	movs	r0, #3
   155a8:	2204      	movs	r2, #4
   155aa:	491b      	ldr	r1, [pc, #108]	; (15618 <IPC_IRQHandler+0x2bc>)
   155ac:	4b1d      	ldr	r3, [pc, #116]	; (15624 <IPC_IRQHandler+0x2c8>)
   155ae:	6008      	str	r0, [r1, #0]
   155b0:	601a      	str	r2, [r3, #0]
   155b2:	e7ac      	b.n	1550e <IPC_IRQHandler+0x1b2>
   155b4:	23e0      	movs	r3, #224	; 0xe0
   155b6:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   155ba:	6065      	str	r5, [r4, #4]
   155bc:	b007      	add	sp, #28
   155be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155c2:	4a1b      	ldr	r2, [pc, #108]	; (15630 <IPC_IRQHandler+0x2d4>)
   155c4:	4293      	cmp	r3, r2
   155c6:	d117      	bne.n	155f8 <IPC_IRQHandler+0x29c>
   155c8:	2003      	movs	r0, #3
   155ca:	4913      	ldr	r1, [pc, #76]	; (15618 <IPC_IRQHandler+0x2bc>)
   155cc:	4a15      	ldr	r2, [pc, #84]	; (15624 <IPC_IRQHandler+0x2c8>)
   155ce:	6008      	str	r0, [r1, #0]
   155d0:	6013      	str	r3, [r2, #0]
   155d2:	e79c      	b.n	1550e <IPC_IRQHandler+0x1b2>
   155d4:	2003      	movs	r0, #3
   155d6:	2206      	movs	r2, #6
   155d8:	490f      	ldr	r1, [pc, #60]	; (15618 <IPC_IRQHandler+0x2bc>)
   155da:	4b12      	ldr	r3, [pc, #72]	; (15624 <IPC_IRQHandler+0x2c8>)
   155dc:	6008      	str	r0, [r1, #0]
   155de:	601a      	str	r2, [r3, #0]
   155e0:	e795      	b.n	1550e <IPC_IRQHandler+0x1b2>
   155e2:	2303      	movs	r3, #3
   155e4:	4618      	mov	r0, r3
   155e6:	490c      	ldr	r1, [pc, #48]	; (15618 <IPC_IRQHandler+0x2bc>)
   155e8:	4a0e      	ldr	r2, [pc, #56]	; (15624 <IPC_IRQHandler+0x2c8>)
   155ea:	600b      	str	r3, [r1, #0]
   155ec:	6013      	str	r3, [r2, #0]
   155ee:	b007      	add	sp, #28
   155f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155f4:	f7ff b906 	b.w	14804 <rpc_transport_ipc_fault_handler>
   155f8:	2303      	movs	r3, #3
   155fa:	4907      	ldr	r1, [pc, #28]	; (15618 <IPC_IRQHandler+0x2bc>)
   155fc:	4a09      	ldr	r2, [pc, #36]	; (15624 <IPC_IRQHandler+0x2c8>)
   155fe:	600b      	str	r3, [r1, #0]
   15600:	6013      	str	r3, [r2, #0]
   15602:	e784      	b.n	1550e <IPC_IRQHandler+0x1b2>
   15604:	e000e100 	.word	0xe000e100
   15608:	4002a000 	.word	0x4002a000
   1560c:	4002a110 	.word	0x4002a110
   15610:	20020794 	.word	0x20020794
   15614:	2002078c 	.word	0x2002078c
   15618:	20020790 	.word	0x20020790
   1561c:	4002a11c 	.word	0x4002a11c
   15620:	4002a100 	.word	0x4002a100
   15624:	20020788 	.word	0x20020788
   15628:	4002a108 	.word	0x4002a108
   1562c:	04400004 	.word	0x04400004
   15630:	05500001 	.word	0x05500001
   15634:	20020798 	.word	0x20020798
   15638:	20024e1e 	.word	0x20024e1e
   1563c:	4a37      	ldr	r2, [pc, #220]	; (1571c <IPC_IRQHandler+0x3c0>)
   1563e:	680b      	ldr	r3, [r1, #0]
   15640:	6812      	ldr	r2, [r2, #0]
   15642:	9305      	str	r3, [sp, #20]
   15644:	6893      	ldr	r3, [r2, #8]
   15646:	4836      	ldr	r0, [pc, #216]	; (15720 <IPC_IRQHandler+0x3c4>)
   15648:	4936      	ldr	r1, [pc, #216]	; (15724 <IPC_IRQHandler+0x3c8>)
   1564a:	6003      	str	r3, [r0, #0]
   1564c:	6854      	ldr	r4, [r2, #4]
   1564e:	9a05      	ldr	r2, [sp, #20]
   15650:	600c      	str	r4, [r1, #0]
   15652:	b16b      	cbz	r3, 15670 <IPC_IRQHandler+0x314>
   15654:	b164      	cbz	r4, 15670 <IPC_IRQHandler+0x314>
   15656:	681b      	ldr	r3, [r3, #0]
   15658:	2b10      	cmp	r3, #16
   1565a:	d802      	bhi.n	15662 <IPC_IRQHandler+0x306>
   1565c:	6822      	ldr	r2, [r4, #0]
   1565e:	2a10      	cmp	r2, #16
   15660:	d90c      	bls.n	1567c <IPC_IRQHandler+0x320>
   15662:	2103      	movs	r1, #3
   15664:	f24c 0206 	movw	r2, #49158	; 0xc006
   15668:	4b2f      	ldr	r3, [pc, #188]	; (15728 <IPC_IRQHandler+0x3cc>)
   1566a:	6029      	str	r1, [r5, #0]
   1566c:	601a      	str	r2, [r3, #0]
   1566e:	e74e      	b.n	1550e <IPC_IRQHandler+0x1b2>
   15670:	2103      	movs	r1, #3
   15672:	2210      	movs	r2, #16
   15674:	4b2c      	ldr	r3, [pc, #176]	; (15728 <IPC_IRQHandler+0x3cc>)
   15676:	6029      	str	r1, [r5, #0]
   15678:	601a      	str	r2, [r3, #0]
   1567a:	e748      	b.n	1550e <IPC_IRQHandler+0x1b2>
   1567c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 15734 <IPC_IRQHandler+0x3d8>
   15680:	2a00      	cmp	r2, #0
   15682:	d042      	beq.n	1570a <IPC_IRQHandler+0x3ae>
   15684:	2300      	movs	r3, #0
   15686:	f104 0904 	add.w	r9, r4, #4
   1568a:	461e      	mov	r6, r3
   1568c:	e002      	b.n	15694 <IPC_IRQHandler+0x338>
   1568e:	3601      	adds	r6, #1
   15690:	4296      	cmp	r6, r2
   15692:	d22a      	bcs.n	156ea <IPC_IRQHandler+0x38e>
   15694:	00f7      	lsls	r7, r6, #3
   15696:	19e1      	adds	r1, r4, r7
   15698:	6888      	ldr	r0, [r1, #8]
   1569a:	2800      	cmp	r0, #0
   1569c:	d0f7      	beq.n	1568e <IPC_IRQHandler+0x332>
   1569e:	f8d1 a004 	ldr.w	sl, [r1, #4]
   156a2:	fa5f fa8a 	uxtb.w	sl, sl
   156a6:	f1ba 0f01 	cmp.w	sl, #1
   156aa:	d1f0      	bne.n	1568e <IPC_IRQHandler+0x332>
   156ac:	f8d1 c004 	ldr.w	ip, [r1, #4]
   156b0:	f8b8 0000 	ldrh.w	r0, [r8]
   156b4:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   156b8:	d1e9      	bne.n	1568e <IPC_IRQHandler+0x332>
   156ba:	684b      	ldr	r3, [r1, #4]
   156bc:	1c42      	adds	r2, r0, #1
   156be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   156c2:	f043 0302 	orr.w	r3, r3, #2
   156c6:	604b      	str	r3, [r1, #4]
   156c8:	6888      	ldr	r0, [r1, #8]
   156ca:	f8a8 2000 	strh.w	r2, [r8]
   156ce:	f7ff fcf7 	bl	150c0 <rpc_transport_rx_handle>
   156d2:	4653      	mov	r3, sl
   156d4:	b938      	cbnz	r0, 156e6 <IPC_IRQHandler+0x38a>
   156d6:	f859 2007 	ldr.w	r2, [r9, r7]
   156da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   156de:	f042 0203 	orr.w	r2, r2, #3
   156e2:	f849 2007 	str.w	r2, [r9, r7]
   156e6:	6822      	ldr	r2, [r4, #0]
   156e8:	e7d1      	b.n	1568e <IPC_IRQHandler+0x332>
   156ea:	2b00      	cmp	r3, #0
   156ec:	d1c8      	bne.n	15680 <IPC_IRQHandler+0x324>
   156ee:	b912      	cbnz	r2, 156f6 <IPC_IRQHandler+0x39a>
   156f0:	e00b      	b.n	1570a <IPC_IRQHandler+0x3ae>
   156f2:	4293      	cmp	r3, r2
   156f4:	d009      	beq.n	1570a <IPC_IRQHandler+0x3ae>
   156f6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   156fa:	6888      	ldr	r0, [r1, #8]
   156fc:	3301      	adds	r3, #1
   156fe:	2800      	cmp	r0, #0
   15700:	d0f7      	beq.n	156f2 <IPC_IRQHandler+0x396>
   15702:	6849      	ldr	r1, [r1, #4]
   15704:	b2c9      	uxtb	r1, r1
   15706:	2901      	cmp	r1, #1
   15708:	d1f3      	bne.n	156f2 <IPC_IRQHandler+0x396>
   1570a:	2002      	movs	r0, #2
   1570c:	4b07      	ldr	r3, [pc, #28]	; (1572c <IPC_IRQHandler+0x3d0>)
   1570e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15712:	4a07      	ldr	r2, [pc, #28]	; (15730 <IPC_IRQHandler+0x3d4>)
   15714:	681b      	ldr	r3, [r3, #0]
   15716:	6028      	str	r0, [r5, #0]
   15718:	e6ec      	b.n	154f4 <IPC_IRQHandler+0x198>
   1571a:	bf00      	nop
   1571c:	2002079c 	.word	0x2002079c
   15720:	20020798 	.word	0x20020798
   15724:	20020794 	.word	0x20020794
   15728:	20020788 	.word	0x20020788
   1572c:	2002078c 	.word	0x2002078c
   15730:	e000e100 	.word	0xe000e100
   15734:	20024e1e 	.word	0x20024e1e

00015738 <rpc_transport_msg_free>:
   15738:	b430      	push	{r4, r5}
   1573a:	4b18      	ldr	r3, [pc, #96]	; (1579c <rpc_transport_msg_free+0x64>)
   1573c:	681c      	ldr	r4, [r3, #0]
   1573e:	6825      	ldr	r5, [r4, #0]
   15740:	b16d      	cbz	r5, 1575e <rpc_transport_msg_free+0x26>
   15742:	68a3      	ldr	r3, [r4, #8]
   15744:	4283      	cmp	r3, r0
   15746:	d027      	beq.n	15798 <rpc_transport_msg_free+0x60>
   15748:	2300      	movs	r3, #0
   1574a:	e002      	b.n	15752 <rpc_transport_msg_free+0x1a>
   1574c:	6889      	ldr	r1, [r1, #8]
   1574e:	4281      	cmp	r1, r0
   15750:	d019      	beq.n	15786 <rpc_transport_msg_free+0x4e>
   15752:	3301      	adds	r3, #1
   15754:	00da      	lsls	r2, r3, #3
   15756:	42ab      	cmp	r3, r5
   15758:	eb04 0102 	add.w	r1, r4, r2
   1575c:	d1f6      	bne.n	1574c <rpc_transport_msg_free+0x14>
   1575e:	4b10      	ldr	r3, [pc, #64]	; (157a0 <rpc_transport_msg_free+0x68>)
   15760:	681c      	ldr	r4, [r3, #0]
   15762:	6825      	ldr	r5, [r4, #0]
   15764:	b16d      	cbz	r5, 15782 <rpc_transport_msg_free+0x4a>
   15766:	68a3      	ldr	r3, [r4, #8]
   15768:	4283      	cmp	r3, r0
   1576a:	d015      	beq.n	15798 <rpc_transport_msg_free+0x60>
   1576c:	2300      	movs	r3, #0
   1576e:	e002      	b.n	15776 <rpc_transport_msg_free+0x3e>
   15770:	6889      	ldr	r1, [r1, #8]
   15772:	4281      	cmp	r1, r0
   15774:	d007      	beq.n	15786 <rpc_transport_msg_free+0x4e>
   15776:	3301      	adds	r3, #1
   15778:	00da      	lsls	r2, r3, #3
   1577a:	429d      	cmp	r5, r3
   1577c:	eb04 0102 	add.w	r1, r4, r2
   15780:	d1f6      	bne.n	15770 <rpc_transport_msg_free+0x38>
   15782:	bc30      	pop	{r4, r5}
   15784:	4770      	bx	lr
   15786:	3204      	adds	r2, #4
   15788:	58a3      	ldr	r3, [r4, r2]
   1578a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1578e:	f043 0303 	orr.w	r3, r3, #3
   15792:	50a3      	str	r3, [r4, r2]
   15794:	bc30      	pop	{r4, r5}
   15796:	4770      	bx	lr
   15798:	2204      	movs	r2, #4
   1579a:	e7f5      	b.n	15788 <rpc_transport_msg_free+0x50>
   1579c:	20020798 	.word	0x20020798
   157a0:	20020794 	.word	0x20020794

000157a4 <rpc_transport_ipc_rx_suspend>:
   157a4:	b410      	push	{r4}
   157a6:	2400      	movs	r4, #0
   157a8:	2010      	movs	r0, #16
   157aa:	2204      	movs	r2, #4
   157ac:	4b0a      	ldr	r3, [pc, #40]	; (157d8 <rpc_transport_ipc_rx_suspend+0x34>)
   157ae:	490b      	ldr	r1, [pc, #44]	; (157dc <rpc_transport_ipc_rx_suspend+0x38>)
   157b0:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   157b4:	680c      	ldr	r4, [r1, #0]
   157b6:	b083      	sub	sp, #12
   157b8:	9401      	str	r4, [sp, #4]
   157ba:	9c01      	ldr	r4, [sp, #4]
   157bc:	f5a1 7126 	sub.w	r1, r1, #664	; 0x298
   157c0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   157c4:	6809      	ldr	r1, [r1, #0]
   157c6:	4b06      	ldr	r3, [pc, #24]	; (157e0 <rpc_transport_ipc_rx_suspend+0x3c>)
   157c8:	9100      	str	r1, [sp, #0]
   157ca:	9900      	ldr	r1, [sp, #0]
   157cc:	601a      	str	r2, [r3, #0]
   157ce:	b003      	add	sp, #12
   157d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   157d4:	4770      	bx	lr
   157d6:	bf00      	nop
   157d8:	4002a000 	.word	0x4002a000
   157dc:	4002a5a0 	.word	0x4002a5a0
   157e0:	20020790 	.word	0x20020790

000157e4 <rpc_transport_ipc_rx_shutdown>:
   157e4:	b4f0      	push	{r4, r5, r6, r7}
   157e6:	4a32      	ldr	r2, [pc, #200]	; (158b0 <rpc_transport_ipc_rx_shutdown+0xcc>)
   157e8:	b08c      	sub	sp, #48	; 0x30
   157ea:	6813      	ldr	r3, [r2, #0]
   157ec:	2b06      	cmp	r3, #6
   157ee:	d1fc      	bne.n	157ea <rpc_transport_ipc_rx_shutdown+0x6>
   157f0:	2000      	movs	r0, #0
   157f2:	2201      	movs	r2, #1
   157f4:	210a      	movs	r1, #10
   157f6:	4b2f      	ldr	r3, [pc, #188]	; (158b4 <rpc_transport_ipc_rx_shutdown+0xd0>)
   157f8:	9000      	str	r0, [sp, #0]
   157fa:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
   157fe:	f8d3 0610 	ldr.w	r0, [r3, #1552]	; 0x610
   15802:	9000      	str	r0, [sp, #0]
   15804:	9800      	ldr	r0, [sp, #0]
   15806:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   1580a:	9101      	str	r1, [sp, #4]
   1580c:	9b01      	ldr	r3, [sp, #4]
   1580e:	b12b      	cbz	r3, 1581c <rpc_transport_ipc_rx_shutdown+0x38>
   15810:	9b01      	ldr	r3, [sp, #4]
   15812:	3b01      	subs	r3, #1
   15814:	9301      	str	r3, [sp, #4]
   15816:	9b01      	ldr	r3, [sp, #4]
   15818:	2b00      	cmp	r3, #0
   1581a:	d1f9      	bne.n	15810 <rpc_transport_ipc_rx_shutdown+0x2c>
   1581c:	2200      	movs	r2, #0
   1581e:	2601      	movs	r6, #1
   15820:	2504      	movs	r5, #4
   15822:	2410      	movs	r4, #16
   15824:	4923      	ldr	r1, [pc, #140]	; (158b4 <rpc_transport_ipc_rx_shutdown+0xd0>)
   15826:	4b24      	ldr	r3, [pc, #144]	; (158b8 <rpc_transport_ipc_rx_shutdown+0xd4>)
   15828:	f8c1 2614 	str.w	r2, [r1, #1556]	; 0x614
   1582c:	f501 3115 	add.w	r1, r1, #152576	; 0x25400
   15830:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   15834:	f501 71c8 	add.w	r1, r1, #400	; 0x190
   15838:	6809      	ldr	r1, [r1, #0]
   1583a:	2040      	movs	r0, #64	; 0x40
   1583c:	9102      	str	r1, [sp, #8]
   1583e:	491f      	ldr	r1, [pc, #124]	; (158bc <rpc_transport_ipc_rx_shutdown+0xd8>)
   15840:	9f02      	ldr	r7, [sp, #8]
   15842:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   15846:	680f      	ldr	r7, [r1, #0]
   15848:	2180      	movs	r1, #128	; 0x80
   1584a:	9703      	str	r7, [sp, #12]
   1584c:	4f1c      	ldr	r7, [pc, #112]	; (158c0 <rpc_transport_ipc_rx_shutdown+0xdc>)
   1584e:	f8dd c00c 	ldr.w	ip, [sp, #12]
   15852:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   15856:	683f      	ldr	r7, [r7, #0]
   15858:	9704      	str	r7, [sp, #16]
   1585a:	4f1a      	ldr	r7, [pc, #104]	; (158c4 <rpc_transport_ipc_rx_shutdown+0xe0>)
   1585c:	f8dd c010 	ldr.w	ip, [sp, #16]
   15860:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   15864:	683f      	ldr	r7, [r7, #0]
   15866:	9705      	str	r7, [sp, #20]
   15868:	9f05      	ldr	r7, [sp, #20]
   1586a:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   1586e:	4a16      	ldr	r2, [pc, #88]	; (158c8 <rpc_transport_ipc_rx_shutdown+0xe4>)
   15870:	6812      	ldr	r2, [r2, #0]
   15872:	9206      	str	r2, [sp, #24]
   15874:	4a15      	ldr	r2, [pc, #84]	; (158cc <rpc_transport_ipc_rx_shutdown+0xe8>)
   15876:	9f06      	ldr	r7, [sp, #24]
   15878:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   1587c:	6816      	ldr	r6, [r2, #0]
   1587e:	9607      	str	r6, [sp, #28]
   15880:	9e07      	ldr	r6, [sp, #28]
   15882:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   15886:	6815      	ldr	r5, [r2, #0]
   15888:	9508      	str	r5, [sp, #32]
   1588a:	9d08      	ldr	r5, [sp, #32]
   1588c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
   15890:	6814      	ldr	r4, [r2, #0]
   15892:	9409      	str	r4, [sp, #36]	; 0x24
   15894:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15896:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1589a:	6810      	ldr	r0, [r2, #0]
   1589c:	900a      	str	r0, [sp, #40]	; 0x28
   1589e:	980a      	ldr	r0, [sp, #40]	; 0x28
   158a0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
   158a4:	6813      	ldr	r3, [r2, #0]
   158a6:	930b      	str	r3, [sp, #44]	; 0x2c
   158a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   158aa:	b00c      	add	sp, #48	; 0x30
   158ac:	bcf0      	pop	{r4, r5, r6, r7}
   158ae:	4770      	bx	lr
   158b0:	20020790 	.word	0x20020790
   158b4:	40005000 	.word	0x40005000
   158b8:	4002a000 	.word	0x4002a000
   158bc:	4002a598 	.word	0x4002a598
   158c0:	4002a5a0 	.word	0x4002a5a0
   158c4:	4002a5a8 	.word	0x4002a5a8
   158c8:	4002a5ac 	.word	0x4002a5ac
   158cc:	4002a308 	.word	0x4002a308

000158d0 <rpc_transport_ipc_tx_init>:
   158d0:	2800      	cmp	r0, #0
   158d2:	f000 80b8 	beq.w	15a46 <rpc_transport_ipc_tx_init+0x176>
   158d6:	2900      	cmp	r1, #0
   158d8:	f000 80b5 	beq.w	15a46 <rpc_transport_ipc_tx_init+0x176>
   158dc:	2a00      	cmp	r2, #0
   158de:	f000 80b2 	beq.w	15a46 <rpc_transport_ipc_tx_init+0x176>
   158e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158e6:	6a04      	ldr	r4, [r0, #32]
   158e8:	b085      	sub	sp, #20
   158ea:	2c00      	cmp	r4, #0
   158ec:	f000 80a6 	beq.w	15a3c <rpc_transport_ipc_tx_init+0x16c>
   158f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   158f2:	2800      	cmp	r0, #0
   158f4:	f000 80a2 	beq.w	15a3c <rpc_transport_ipc_tx_init+0x16c>
   158f8:	f642 4587 	movw	r5, #11399	; 0x2c87
   158fc:	f04f 0a00 	mov.w	sl, #0
   15900:	4e55      	ldr	r6, [pc, #340]	; (15a58 <rpc_transport_ipc_tx_init+0x188>)
   15902:	42a8      	cmp	r0, r5
   15904:	f886 a000 	strb.w	sl, [r6]
   15908:	f240 80a0 	bls.w	15a4c <rpc_transport_ipc_tx_init+0x17c>
   1590c:	2708      	movs	r7, #8
   1590e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 15a90 <rpc_transport_ipc_tx_init+0x1c0>
   15912:	4620      	mov	r0, r4
   15914:	4616      	mov	r6, r2
   15916:	460d      	mov	r5, r1
   15918:	2244      	movs	r2, #68	; 0x44
   1591a:	4651      	mov	r1, sl
   1591c:	f8c9 4000 	str.w	r4, [r9]
   15920:	f007 fd91 	bl	1d446 <memset>
   15924:	f8d9 2000 	ldr.w	r2, [r9]
   15928:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1592c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 15a94 <rpc_transport_ipc_tx_init+0x1c4>
   15930:	f882 a001 	strb.w	sl, [r2, #1]
   15934:	f882 a002 	strb.w	sl, [r2, #2]
   15938:	f882 a003 	strb.w	sl, [r2, #3]
   1593c:	7017      	strb	r7, [r2, #0]
   1593e:	4618      	mov	r0, r3
   15940:	2244      	movs	r2, #68	; 0x44
   15942:	4651      	mov	r1, sl
   15944:	f8c8 3000 	str.w	r3, [r8]
   15948:	f007 fd7d 	bl	1d446 <memset>
   1594c:	f8d8 2000 	ldr.w	r2, [r8]
   15950:	f104 0388 	add.w	r3, r4, #136	; 0x88
   15954:	f8df b140 	ldr.w	fp, [pc, #320]	; 15a98 <rpc_transport_ipc_tx_init+0x1c8>
   15958:	7017      	strb	r7, [r2, #0]
   1595a:	f882 a001 	strb.w	sl, [r2, #1]
   1595e:	f882 a002 	strb.w	sl, [r2, #2]
   15962:	f882 a003 	strb.w	sl, [r2, #3]
   15966:	4618      	mov	r0, r3
   15968:	f44f 7200 	mov.w	r2, #512	; 0x200
   1596c:	4651      	mov	r1, sl
   1596e:	f8cb 3000 	str.w	r3, [fp]
   15972:	f007 fd68 	bl	1d446 <memset>
   15976:	4b39      	ldr	r3, [pc, #228]	; (15a5c <rpc_transport_ipc_tx_init+0x18c>)
   15978:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   1597c:	f8c3 c000 	str.w	ip, [r3]
   15980:	4651      	mov	r1, sl
   15982:	4660      	mov	r0, ip
   15984:	f44f 7200 	mov.w	r2, #512	; 0x200
   15988:	f007 fd5d 	bl	1d446 <memset>
   1598c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   15990:	2106      	movs	r1, #6
   15992:	f04f 0e01 	mov.w	lr, #1
   15996:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1599a:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1599e:	4b30      	ldr	r3, [pc, #192]	; (15a60 <rpc_transport_ipc_tx_init+0x190>)
   159a0:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   159a4:	605c      	str	r4, [r3, #4]
   159a6:	4c2f      	ldr	r4, [pc, #188]	; (15a64 <rpc_transport_ipc_tx_init+0x194>)
   159a8:	f8c3 c008 	str.w	ip, [r3, #8]
   159ac:	8199      	strh	r1, [r3, #12]
   159ae:	f8a3 e000 	strh.w	lr, [r3]
   159b2:	4619      	mov	r1, r3
   159b4:	611c      	str	r4, [r3, #16]
   159b6:	4b2c      	ldr	r3, [pc, #176]	; (15a68 <rpc_transport_ipc_tx_init+0x198>)
   159b8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 15a9c <rpc_transport_ipc_tx_init+0x1cc>
   159bc:	6120      	str	r0, [r4, #16]
   159be:	482b      	ldr	r0, [pc, #172]	; (15a6c <rpc_transport_ipc_tx_init+0x19c>)
   159c0:	6063      	str	r3, [r4, #4]
   159c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   159c6:	60a0      	str	r0, [r4, #8]
   159c8:	f8c4 c000 	str.w	ip, [r4]
   159cc:	4828      	ldr	r0, [pc, #160]	; (15a70 <rpc_transport_ipc_tx_init+0x1a0>)
   159ce:	60e3      	str	r3, [r4, #12]
   159d0:	6162      	str	r2, [r4, #20]
   159d2:	f7fd fe4b 	bl	1366c <nrf_mem_register>
   159d6:	2800      	cmp	r0, #0
   159d8:	d132      	bne.n	15a40 <rpc_transport_ipc_tx_init+0x170>
   159da:	f04f 0c02 	mov.w	ip, #2
   159de:	2420      	movs	r4, #32
   159e0:	f8d9 1000 	ldr.w	r1, [r9]
   159e4:	f8db 2000 	ldr.w	r2, [fp]
   159e8:	6029      	str	r1, [r5, #0]
   159ea:	4b1c      	ldr	r3, [pc, #112]	; (15a5c <rpc_transport_ipc_tx_init+0x18c>)
   159ec:	f8d8 1000 	ldr.w	r1, [r8]
   159f0:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 15aa0 <rpc_transport_ipc_tx_init+0x1d0>
   159f4:	4d1f      	ldr	r5, [pc, #124]	; (15a74 <rpc_transport_ipc_tx_init+0x1a4>)
   159f6:	6031      	str	r1, [r6, #0]
   159f8:	f8ce 2000 	str.w	r2, [lr]
   159fc:	681b      	ldr	r3, [r3, #0]
   159fe:	491e      	ldr	r1, [pc, #120]	; (15a78 <rpc_transport_ipc_tx_init+0x1a8>)
   15a00:	f502 7200 	add.w	r2, r2, #512	; 0x200
   15a04:	602a      	str	r2, [r5, #0]
   15a06:	4e1d      	ldr	r6, [pc, #116]	; (15a7c <rpc_transport_ipc_tx_init+0x1ac>)
   15a08:	4a1d      	ldr	r2, [pc, #116]	; (15a80 <rpc_transport_ipc_tx_init+0x1b0>)
   15a0a:	4d1e      	ldr	r5, [pc, #120]	; (15a84 <rpc_transport_ipc_tx_init+0x1b4>)
   15a0c:	600b      	str	r3, [r1, #0]
   15a0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   15a12:	491d      	ldr	r1, [pc, #116]	; (15a88 <rpc_transport_ipc_tx_init+0x1b8>)
   15a14:	6033      	str	r3, [r6, #0]
   15a16:	8028      	strh	r0, [r5, #0]
   15a18:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   15a1c:	6809      	ldr	r1, [r1, #0]
   15a1e:	4b1b      	ldr	r3, [pc, #108]	; (15a8c <rpc_transport_ipc_tx_init+0x1bc>)
   15a20:	9103      	str	r1, [sp, #12]
   15a22:	9903      	ldr	r1, [sp, #12]
   15a24:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   15a28:	6819      	ldr	r1, [r3, #0]
   15a2a:	443b      	add	r3, r7
   15a2c:	9102      	str	r1, [sp, #8]
   15a2e:	9902      	ldr	r1, [sp, #8]
   15a30:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   15a34:	681b      	ldr	r3, [r3, #0]
   15a36:	9301      	str	r3, [sp, #4]
   15a38:	9b01      	ldr	r3, [sp, #4]
   15a3a:	e001      	b.n	15a40 <rpc_transport_ipc_tx_init+0x170>
   15a3c:	f24c 0007 	movw	r0, #49159	; 0xc007
   15a40:	b005      	add	sp, #20
   15a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a46:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15a4a:	4770      	bx	lr
   15a4c:	f24c 0004 	movw	r0, #49156	; 0xc004
   15a50:	b005      	add	sp, #20
   15a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a56:	bf00      	nop
   15a58:	20026567 	.word	0x20026567
   15a5c:	200207c8 	.word	0x200207c8
   15a60:	200207b4 	.word	0x200207b4
   15a64:	200207d8 	.word	0x200207d8
   15a68:	00040080 	.word	0x00040080
   15a6c:	00040100 	.word	0x00040100
   15a70:	200207a0 	.word	0x200207a0
   15a74:	200207ac 	.word	0x200207ac
   15a78:	200207a8 	.word	0x200207a8
   15a7c:	200207a4 	.word	0x200207a4
   15a80:	4002a000 	.word	0x4002a000
   15a84:	20024e20 	.word	0x20024e20
   15a88:	4002a514 	.word	0x4002a514
   15a8c:	4002a51c 	.word	0x4002a51c
   15a90:	200207d4 	.word	0x200207d4
   15a94:	200207cc 	.word	0x200207cc
   15a98:	200207d0 	.word	0x200207d0
   15a9c:	00080040 	.word	0x00080040
   15aa0:	200207b0 	.word	0x200207b0

00015aa4 <rpc_transport_ipc_tx_send>:
   15aa4:	2800      	cmp	r0, #0
   15aa6:	d05f      	beq.n	15b68 <rpc_transport_ipc_tx_send+0xc4>
   15aa8:	b470      	push	{r4, r5, r6}
   15aaa:	4b33      	ldr	r3, [pc, #204]	; (15b78 <rpc_transport_ipc_tx_send+0xd4>)
   15aac:	b083      	sub	sp, #12
   15aae:	681a      	ldr	r2, [r3, #0]
   15ab0:	4b32      	ldr	r3, [pc, #200]	; (15b7c <rpc_transport_ipc_tx_send+0xd8>)
   15ab2:	4282      	cmp	r2, r0
   15ab4:	d81e      	bhi.n	15af4 <rpc_transport_ipc_tx_send+0x50>
   15ab6:	681b      	ldr	r3, [r3, #0]
   15ab8:	4931      	ldr	r1, [pc, #196]	; (15b80 <rpc_transport_ipc_tx_send+0xdc>)
   15aba:	4283      	cmp	r3, r0
   15abc:	6809      	ldr	r1, [r1, #0]
   15abe:	d803      	bhi.n	15ac8 <rpc_transport_ipc_tx_send+0x24>
   15ac0:	4c30      	ldr	r4, [pc, #192]	; (15b84 <rpc_transport_ipc_tx_send+0xe0>)
   15ac2:	6824      	ldr	r4, [r4, #0]
   15ac4:	4284      	cmp	r4, r0
   15ac6:	d847      	bhi.n	15b58 <rpc_transport_ipc_tx_send+0xb4>
   15ac8:	4281      	cmp	r1, r0
   15aca:	d90e      	bls.n	15aea <rpc_transport_ipc_tx_send+0x46>
   15acc:	4b2e      	ldr	r3, [pc, #184]	; (15b88 <rpc_transport_ipc_tx_send+0xe4>)
   15ace:	781b      	ldrb	r3, [r3, #0]
   15ad0:	2b00      	cmp	r3, #0
   15ad2:	d14c      	bne.n	15b6e <rpc_transport_ipc_tx_send+0xca>
   15ad4:	1a83      	subs	r3, r0, r2
   15ad6:	492d      	ldr	r1, [pc, #180]	; (15b8c <rpc_transport_ipc_tx_send+0xe8>)
   15ad8:	099e      	lsrs	r6, r3, #6
   15ada:	069b      	lsls	r3, r3, #26
   15adc:	680a      	ldr	r2, [r1, #0]
   15ade:	4c2c      	ldr	r4, [pc, #176]	; (15b90 <rpc_transport_ipc_tx_send+0xec>)
   15ae0:	f04f 0103 	mov.w	r1, #3
   15ae4:	f04f 0502 	mov.w	r5, #2
   15ae8:	d014      	beq.n	15b14 <rpc_transport_ipc_tx_send+0x70>
   15aea:	f24c 0010 	movw	r0, #49168	; 0xc010
   15aee:	b003      	add	sp, #12
   15af0:	bc70      	pop	{r4, r5, r6}
   15af2:	4770      	bx	lr
   15af4:	681b      	ldr	r3, [r3, #0]
   15af6:	4298      	cmp	r0, r3
   15af8:	d3f7      	bcc.n	15aea <rpc_transport_ipc_tx_send+0x46>
   15afa:	4a22      	ldr	r2, [pc, #136]	; (15b84 <rpc_transport_ipc_tx_send+0xe0>)
   15afc:	6812      	ldr	r2, [r2, #0]
   15afe:	4290      	cmp	r0, r2
   15b00:	d2f3      	bcs.n	15aea <rpc_transport_ipc_tx_send+0x46>
   15b02:	2101      	movs	r1, #1
   15b04:	1ac3      	subs	r3, r0, r3
   15b06:	4a23      	ldr	r2, [pc, #140]	; (15b94 <rpc_transport_ipc_tx_send+0xf0>)
   15b08:	099e      	lsrs	r6, r3, #6
   15b0a:	069b      	lsls	r3, r3, #26
   15b0c:	460d      	mov	r5, r1
   15b0e:	6812      	ldr	r2, [r2, #0]
   15b10:	4c21      	ldr	r4, [pc, #132]	; (15b98 <rpc_transport_ipc_tx_send+0xf4>)
   15b12:	d1ea      	bne.n	15aea <rpc_transport_ipc_tx_send+0x46>
   15b14:	6843      	ldr	r3, [r0, #4]
   15b16:	b2db      	uxtb	r3, r3
   15b18:	429d      	cmp	r5, r3
   15b1a:	d120      	bne.n	15b5e <rpc_transport_ipc_tx_send+0xba>
   15b1c:	2020      	movs	r0, #32
   15b1e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   15b22:	4d1e      	ldr	r5, [pc, #120]	; (15b9c <rpc_transport_ipc_tx_send+0xf8>)
   15b24:	6853      	ldr	r3, [r2, #4]
   15b26:	882e      	ldrh	r6, [r5, #0]
   15b28:	b29b      	uxth	r3, r3
   15b2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15b32:	f043 0301 	orr.w	r3, r3, #1
   15b36:	6053      	str	r3, [r2, #4]
   15b38:	bf00      	nop
   15b3a:	3801      	subs	r0, #1
   15b3c:	d1fc      	bne.n	15b38 <rpc_transport_ipc_tx_send+0x94>
   15b3e:	2201      	movs	r2, #1
   15b40:	4b17      	ldr	r3, [pc, #92]	; (15ba0 <rpc_transport_ipc_tx_send+0xfc>)
   15b42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   15b46:	6822      	ldr	r2, [r4, #0]
   15b48:	882b      	ldrh	r3, [r5, #0]
   15b4a:	9201      	str	r2, [sp, #4]
   15b4c:	9a01      	ldr	r2, [sp, #4]
   15b4e:	3301      	adds	r3, #1
   15b50:	802b      	strh	r3, [r5, #0]
   15b52:	b003      	add	sp, #12
   15b54:	bc70      	pop	{r4, r5, r6}
   15b56:	4770      	bx	lr
   15b58:	4281      	cmp	r1, r0
   15b5a:	d9d2      	bls.n	15b02 <rpc_transport_ipc_tx_send+0x5e>
   15b5c:	e7b6      	b.n	15acc <rpc_transport_ipc_tx_send+0x28>
   15b5e:	f24c 0007 	movw	r0, #49159	; 0xc007
   15b62:	b003      	add	sp, #12
   15b64:	bc70      	pop	{r4, r5, r6}
   15b66:	4770      	bx	lr
   15b68:	f24c 000e 	movw	r0, #49166	; 0xc00e
   15b6c:	4770      	bx	lr
   15b6e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   15b72:	b003      	add	sp, #12
   15b74:	bc70      	pop	{r4, r5, r6}
   15b76:	4770      	bx	lr
   15b78:	200207b0 	.word	0x200207b0
   15b7c:	200207a8 	.word	0x200207a8
   15b80:	200207ac 	.word	0x200207ac
   15b84:	200207a4 	.word	0x200207a4
   15b88:	20026567 	.word	0x20026567
   15b8c:	200207d4 	.word	0x200207d4
   15b90:	4002a00c 	.word	0x4002a00c
   15b94:	200207cc 	.word	0x200207cc
   15b98:	4002a004 	.word	0x4002a004
   15b9c:	20024e20 	.word	0x20024e20
   15ba0:	4002a000 	.word	0x4002a000

00015ba4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   15ba4:	4b18      	ldr	r3, [pc, #96]	; (15c08 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   15ba6:	781b      	ldrb	r3, [r3, #0]
   15ba8:	bb63      	cbnz	r3, 15c04 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   15baa:	b4f0      	push	{r4, r5, r6, r7}
   15bac:	4a17      	ldr	r2, [pc, #92]	; (15c0c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   15bae:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   15bb2:	6814      	ldr	r4, [r2, #0]
   15bb4:	4b16      	ldr	r3, [pc, #88]	; (15c10 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   15bb6:	6825      	ldr	r5, [r4, #0]
   15bb8:	681e      	ldr	r6, [r3, #0]
   15bba:	b1a5      	cbz	r5, 15be6 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   15bbc:	4607      	mov	r7, r0
   15bbe:	00c1      	lsls	r1, r0, #3
   15bc0:	1863      	adds	r3, r4, r1
   15bc2:	685a      	ldr	r2, [r3, #4]
   15bc4:	b2d2      	uxtb	r2, r2
   15bc6:	2a03      	cmp	r2, #3
   15bc8:	d104      	bne.n	15bd4 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   15bca:	609f      	str	r7, [r3, #8]
   15bcc:	685a      	ldr	r2, [r3, #4]
   15bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15bd2:	605a      	str	r2, [r3, #4]
   15bd4:	685a      	ldr	r2, [r3, #4]
   15bd6:	f012 0fff 	tst.w	r2, #255	; 0xff
   15bda:	d101      	bne.n	15be0 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   15bdc:	689b      	ldr	r3, [r3, #8]
   15bde:	b12b      	cbz	r3, 15bec <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   15be0:	3001      	adds	r0, #1
   15be2:	42a8      	cmp	r0, r5
   15be4:	d1eb      	bne.n	15bbe <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   15be6:	2000      	movs	r0, #0
   15be8:	bcf0      	pop	{r4, r5, r6, r7}
   15bea:	4770      	bx	lr
   15bec:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15bf0:	4421      	add	r1, r4
   15bf2:	6088      	str	r0, [r1, #8]
   15bf4:	6843      	ldr	r3, [r0, #4]
   15bf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15bfa:	f043 0302 	orr.w	r3, r3, #2
   15bfe:	6043      	str	r3, [r0, #4]
   15c00:	bcf0      	pop	{r4, r5, r6, r7}
   15c02:	4770      	bx	lr
   15c04:	2000      	movs	r0, #0
   15c06:	4770      	bx	lr
   15c08:	20026567 	.word	0x20026567
   15c0c:	200207d4 	.word	0x200207d4
   15c10:	200207d0 	.word	0x200207d0

00015c14 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   15c14:	b4f0      	push	{r4, r5, r6, r7}
   15c16:	4a15      	ldr	r2, [pc, #84]	; (15c6c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   15c18:	4b15      	ldr	r3, [pc, #84]	; (15c70 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   15c1a:	6814      	ldr	r4, [r2, #0]
   15c1c:	681e      	ldr	r6, [r3, #0]
   15c1e:	6825      	ldr	r5, [r4, #0]
   15c20:	b1ad      	cbz	r5, 15c4e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   15c22:	2000      	movs	r0, #0
   15c24:	4607      	mov	r7, r0
   15c26:	00c1      	lsls	r1, r0, #3
   15c28:	1863      	adds	r3, r4, r1
   15c2a:	685a      	ldr	r2, [r3, #4]
   15c2c:	b2d2      	uxtb	r2, r2
   15c2e:	2a03      	cmp	r2, #3
   15c30:	d104      	bne.n	15c3c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   15c32:	609f      	str	r7, [r3, #8]
   15c34:	685a      	ldr	r2, [r3, #4]
   15c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   15c3a:	605a      	str	r2, [r3, #4]
   15c3c:	685a      	ldr	r2, [r3, #4]
   15c3e:	f012 0fff 	tst.w	r2, #255	; 0xff
   15c42:	d101      	bne.n	15c48 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   15c44:	689b      	ldr	r3, [r3, #8]
   15c46:	b12b      	cbz	r3, 15c54 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   15c48:	3001      	adds	r0, #1
   15c4a:	4285      	cmp	r5, r0
   15c4c:	d1eb      	bne.n	15c26 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   15c4e:	2000      	movs	r0, #0
   15c50:	bcf0      	pop	{r4, r5, r6, r7}
   15c52:	4770      	bx	lr
   15c54:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   15c58:	4421      	add	r1, r4
   15c5a:	6088      	str	r0, [r1, #8]
   15c5c:	6843      	ldr	r3, [r0, #4]
   15c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15c62:	f043 0301 	orr.w	r3, r3, #1
   15c66:	6043      	str	r3, [r0, #4]
   15c68:	bcf0      	pop	{r4, r5, r6, r7}
   15c6a:	4770      	bx	lr
   15c6c:	200207cc 	.word	0x200207cc
   15c70:	200207c8 	.word	0x200207c8

00015c74 <rpc_transport_ipc_tx_data_alloc>:
   15c74:	4b03      	ldr	r3, [pc, #12]	; (15c84 <rpc_transport_ipc_tx_data_alloc+0x10>)
   15c76:	781b      	ldrb	r3, [r3, #0]
   15c78:	b90b      	cbnz	r3, 15c7e <rpc_transport_ipc_tx_data_alloc+0xa>
   15c7a:	f7fd be27 	b.w	138cc <nrf_shared_malloc>
   15c7e:	2000      	movs	r0, #0
   15c80:	4770      	bx	lr
   15c82:	bf00      	nop
   15c84:	20026567 	.word	0x20026567

00015c88 <rpc_transport_ipc_tx_suspend>:
   15c88:	2201      	movs	r2, #1
   15c8a:	4b01      	ldr	r3, [pc, #4]	; (15c90 <rpc_transport_ipc_tx_suspend+0x8>)
   15c8c:	701a      	strb	r2, [r3, #0]
   15c8e:	4770      	bx	lr
   15c90:	20026567 	.word	0x20026567

00015c94 <rpc_transport_ipc_tx_shutdown>:
   15c94:	b4f0      	push	{r4, r5, r6, r7}
   15c96:	4a16      	ldr	r2, [pc, #88]	; (15cf0 <rpc_transport_ipc_tx_shutdown+0x5c>)
   15c98:	4b16      	ldr	r3, [pc, #88]	; (15cf4 <rpc_transport_ipc_tx_shutdown+0x60>)
   15c9a:	6814      	ldr	r4, [r2, #0]
   15c9c:	681e      	ldr	r6, [r3, #0]
   15c9e:	6825      	ldr	r5, [r4, #0]
   15ca0:	b1ad      	cbz	r5, 15cce <rpc_transport_ipc_tx_shutdown+0x3a>
   15ca2:	2200      	movs	r2, #0
   15ca4:	4617      	mov	r7, r2
   15ca6:	00d0      	lsls	r0, r2, #3
   15ca8:	1823      	adds	r3, r4, r0
   15caa:	6859      	ldr	r1, [r3, #4]
   15cac:	b2c9      	uxtb	r1, r1
   15cae:	2903      	cmp	r1, #3
   15cb0:	d104      	bne.n	15cbc <rpc_transport_ipc_tx_shutdown+0x28>
   15cb2:	609f      	str	r7, [r3, #8]
   15cb4:	6859      	ldr	r1, [r3, #4]
   15cb6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   15cba:	6059      	str	r1, [r3, #4]
   15cbc:	6859      	ldr	r1, [r3, #4]
   15cbe:	f011 0fff 	tst.w	r1, #255	; 0xff
   15cc2:	d101      	bne.n	15cc8 <rpc_transport_ipc_tx_shutdown+0x34>
   15cc4:	689b      	ldr	r3, [r3, #8]
   15cc6:	b123      	cbz	r3, 15cd2 <rpc_transport_ipc_tx_shutdown+0x3e>
   15cc8:	3201      	adds	r2, #1
   15cca:	42aa      	cmp	r2, r5
   15ccc:	d1eb      	bne.n	15ca6 <rpc_transport_ipc_tx_shutdown+0x12>
   15cce:	bcf0      	pop	{r4, r5, r6, r7}
   15cd0:	4770      	bx	lr
   15cd2:	0192      	lsls	r2, r2, #6
   15cd4:	4404      	add	r4, r0
   15cd6:	18b0      	adds	r0, r6, r2
   15cd8:	60a0      	str	r0, [r4, #8]
   15cda:	6843      	ldr	r3, [r0, #4]
   15cdc:	4906      	ldr	r1, [pc, #24]	; (15cf8 <rpc_transport_ipc_tx_shutdown+0x64>)
   15cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15ce2:	f043 0301 	orr.w	r3, r3, #1
   15ce6:	6043      	str	r3, [r0, #4]
   15ce8:	50b1      	str	r1, [r6, r2]
   15cea:	bcf0      	pop	{r4, r5, r6, r7}
   15cec:	f7ff beda 	b.w	15aa4 <rpc_transport_ipc_tx_send>
   15cf0:	200207cc 	.word	0x200207cc
   15cf4:	200207c8 	.word	0x200207c8
   15cf8:	00030001 	.word	0x00030001

00015cfc <ok_rsp_parser>:
   15cfc:	2000      	movs	r0, #0
   15cfe:	4770      	bx	lr

00015d00 <pdn_state_get_parser>:
   15d00:	2200      	movs	r2, #0
   15d02:	b570      	push	{r4, r5, r6, lr}
   15d04:	780b      	ldrb	r3, [r1, #0]
   15d06:	b084      	sub	sp, #16
   15d08:	460e      	mov	r6, r1
   15d0a:	e9cd 2200 	strd	r2, r2, [sp]
   15d0e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15d12:	b323      	cbz	r3, 15d5e <pdn_state_get_parser+0x5e>
   15d14:	460c      	mov	r4, r1
   15d16:	2b20      	cmp	r3, #32
   15d18:	460d      	mov	r5, r1
   15d1a:	d01b      	beq.n	15d54 <pdn_state_get_parser+0x54>
   15d1c:	700b      	strb	r3, [r1, #0]
   15d1e:	3201      	adds	r2, #1
   15d20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15d24:	18b1      	adds	r1, r6, r2
   15d26:	460d      	mov	r5, r1
   15d28:	2b00      	cmp	r3, #0
   15d2a:	d1f4      	bne.n	15d16 <pdn_state_get_parser+0x16>
   15d2c:	2200      	movs	r2, #0
   15d2e:	4b0d      	ldr	r3, [pc, #52]	; (15d64 <pdn_state_get_parser+0x64>)
   15d30:	702a      	strb	r2, [r5, #0]
   15d32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15d36:	4a0c      	ldr	r2, [pc, #48]	; (15d68 <pdn_state_get_parser+0x68>)
   15d38:	681b      	ldr	r3, [r3, #0]
   15d3a:	2110      	movs	r1, #16
   15d3c:	4668      	mov	r0, sp
   15d3e:	f7fa ffbb 	bl	10cb8 <snprintf>
   15d42:	4669      	mov	r1, sp
   15d44:	4630      	mov	r0, r6
   15d46:	f007 fac4 	bl	1d2d2 <strstr>
   15d4a:	3000      	adds	r0, #0
   15d4c:	bf18      	it	ne
   15d4e:	2001      	movne	r0, #1
   15d50:	b004      	add	sp, #16
   15d52:	bd70      	pop	{r4, r5, r6, pc}
   15d54:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   15d58:	2b00      	cmp	r3, #0
   15d5a:	d1dc      	bne.n	15d16 <pdn_state_get_parser+0x16>
   15d5c:	e7e6      	b.n	15d2c <pdn_state_get_parser+0x2c>
   15d5e:	460d      	mov	r5, r1
   15d60:	e7e4      	b.n	15d2c <pdn_state_get_parser+0x2c>
   15d62:	bf00      	nop
   15d64:	200208f4 	.word	0x200208f4
   15d68:	0001f5f4 	.word	0x0001f5f4

00015d6c <pdn_id_get_parser>:
   15d6c:	b570      	push	{r4, r5, r6, lr}
   15d6e:	780b      	ldrb	r3, [r1, #0]
   15d70:	4606      	mov	r6, r0
   15d72:	b313      	cbz	r3, 15dba <pdn_id_get_parser+0x4e>
   15d74:	4608      	mov	r0, r1
   15d76:	2400      	movs	r4, #0
   15d78:	460a      	mov	r2, r1
   15d7a:	2b20      	cmp	r3, #32
   15d7c:	4615      	mov	r5, r2
   15d7e:	d017      	beq.n	15db0 <pdn_id_get_parser+0x44>
   15d80:	7013      	strb	r3, [r2, #0]
   15d82:	3401      	adds	r4, #1
   15d84:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15d88:	190a      	adds	r2, r1, r4
   15d8a:	4615      	mov	r5, r2
   15d8c:	2b00      	cmp	r3, #0
   15d8e:	d1f4      	bne.n	15d7a <pdn_id_get_parser+0xe>
   15d90:	2300      	movs	r3, #0
   15d92:	4608      	mov	r0, r1
   15d94:	702b      	strb	r3, [r5, #0]
   15d96:	213a      	movs	r1, #58	; 0x3a
   15d98:	f007 fad5 	bl	1d346 <strchr>
   15d9c:	b130      	cbz	r0, 15dac <pdn_id_get_parser+0x40>
   15d9e:	3001      	adds	r0, #1
   15da0:	f007 f982 	bl	1d0a8 <atoi>
   15da4:	4b06      	ldr	r3, [pc, #24]	; (15dc0 <pdn_id_get_parser+0x54>)
   15da6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   15daa:	6058      	str	r0, [r3, #4]
   15dac:	2000      	movs	r0, #0
   15dae:	bd70      	pop	{r4, r5, r6, pc}
   15db0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15db4:	2b00      	cmp	r3, #0
   15db6:	d1e0      	bne.n	15d7a <pdn_id_get_parser+0xe>
   15db8:	e7ea      	b.n	15d90 <pdn_id_get_parser+0x24>
   15dba:	460d      	mov	r5, r1
   15dbc:	e7e8      	b.n	15d90 <pdn_id_get_parser+0x24>
   15dbe:	bf00      	nop
   15dc0:	200208f4 	.word	0x200208f4

00015dc4 <context_create_parser>:
   15dc4:	b570      	push	{r4, r5, r6, lr}
   15dc6:	780b      	ldrb	r3, [r1, #0]
   15dc8:	4606      	mov	r6, r0
   15dca:	b313      	cbz	r3, 15e12 <context_create_parser+0x4e>
   15dcc:	4608      	mov	r0, r1
   15dce:	2400      	movs	r4, #0
   15dd0:	460a      	mov	r2, r1
   15dd2:	2b20      	cmp	r3, #32
   15dd4:	4615      	mov	r5, r2
   15dd6:	d017      	beq.n	15e08 <context_create_parser+0x44>
   15dd8:	7013      	strb	r3, [r2, #0]
   15dda:	3401      	adds	r4, #1
   15ddc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15de0:	190a      	adds	r2, r1, r4
   15de2:	4615      	mov	r5, r2
   15de4:	2b00      	cmp	r3, #0
   15de6:	d1f4      	bne.n	15dd2 <context_create_parser+0xe>
   15de8:	2300      	movs	r3, #0
   15dea:	4608      	mov	r0, r1
   15dec:	702b      	strb	r3, [r5, #0]
   15dee:	213a      	movs	r1, #58	; 0x3a
   15df0:	f007 faa9 	bl	1d346 <strchr>
   15df4:	b130      	cbz	r0, 15e04 <context_create_parser+0x40>
   15df6:	4b08      	ldr	r3, [pc, #32]	; (15e18 <context_create_parser+0x54>)
   15df8:	3001      	adds	r0, #1
   15dfa:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   15dfe:	f007 f953 	bl	1d0a8 <atoi>
   15e02:	6020      	str	r0, [r4, #0]
   15e04:	2000      	movs	r0, #0
   15e06:	bd70      	pop	{r4, r5, r6, pc}
   15e08:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15e0c:	2b00      	cmp	r3, #0
   15e0e:	d1e0      	bne.n	15dd2 <context_create_parser+0xe>
   15e10:	e7ea      	b.n	15de8 <context_create_parser+0x24>
   15e12:	460d      	mov	r5, r1
   15e14:	e7e8      	b.n	15de8 <context_create_parser+0x24>
   15e16:	bf00      	nop
   15e18:	200208f4 	.word	0x200208f4

00015e1c <pdn_interface_init>:
   15e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15e20:	b510      	push	{r4, lr}
   15e22:	4c09      	ldr	r4, [pc, #36]	; (15e48 <pdn_interface_init+0x2c>)
   15e24:	2228      	movs	r2, #40	; 0x28
   15e26:	2100      	movs	r1, #0
   15e28:	4808      	ldr	r0, [pc, #32]	; (15e4c <pdn_interface_init+0x30>)
   15e2a:	6023      	str	r3, [r4, #0]
   15e2c:	f007 fb0b 	bl	1d446 <memset>
   15e30:	f240 2201 	movw	r2, #513	; 0x201
   15e34:	2100      	movs	r1, #0
   15e36:	2066      	movs	r0, #102	; 0x66
   15e38:	f7fc ffec 	bl	12e14 <at_interface_open>
   15e3c:	2800      	cmp	r0, #0
   15e3e:	6020      	str	r0, [r4, #0]
   15e40:	bfb4      	ite	lt
   15e42:	2003      	movlt	r0, #3
   15e44:	2000      	movge	r0, #0
   15e46:	bd10      	pop	{r4, pc}
   15e48:	200207f0 	.word	0x200207f0
   15e4c:	200208f4 	.word	0x200208f4

00015e50 <pdn_interface_open>:
   15e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15e54:	2866      	cmp	r0, #102	; 0x66
   15e56:	b083      	sub	sp, #12
   15e58:	f040 80bc 	bne.w	15fd4 <pdn_interface_open+0x184>
   15e5c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   15e60:	f040 80aa 	bne.w	15fb8 <pdn_interface_open+0x168>
   15e64:	f240 2302 	movw	r3, #514	; 0x202
   15e68:	429a      	cmp	r2, r3
   15e6a:	f040 80a5 	bne.w	15fb8 <pdn_interface_open+0x168>
   15e6e:	4c62      	ldr	r4, [pc, #392]	; (15ff8 <pdn_interface_open+0x1a8>)
   15e70:	6825      	ldr	r5, [r4, #0]
   15e72:	b34d      	cbz	r5, 15ec8 <pdn_interface_open+0x78>
   15e74:	6863      	ldr	r3, [r4, #4]
   15e76:	2b00      	cmp	r3, #0
   15e78:	f000 8098 	beq.w	15fac <pdn_interface_open+0x15c>
   15e7c:	68a3      	ldr	r3, [r4, #8]
   15e7e:	2b00      	cmp	r3, #0
   15e80:	f000 8096 	beq.w	15fb0 <pdn_interface_open+0x160>
   15e84:	68e3      	ldr	r3, [r4, #12]
   15e86:	2b00      	cmp	r3, #0
   15e88:	f000 8094 	beq.w	15fb4 <pdn_interface_open+0x164>
   15e8c:	6923      	ldr	r3, [r4, #16]
   15e8e:	2b00      	cmp	r3, #0
   15e90:	f000 8098 	beq.w	15fc4 <pdn_interface_open+0x174>
   15e94:	6963      	ldr	r3, [r4, #20]
   15e96:	2b00      	cmp	r3, #0
   15e98:	f000 8098 	beq.w	15fcc <pdn_interface_open+0x17c>
   15e9c:	69a3      	ldr	r3, [r4, #24]
   15e9e:	2b00      	cmp	r3, #0
   15ea0:	f000 8096 	beq.w	15fd0 <pdn_interface_open+0x180>
   15ea4:	69e3      	ldr	r3, [r4, #28]
   15ea6:	2b00      	cmp	r3, #0
   15ea8:	f000 808e 	beq.w	15fc8 <pdn_interface_open+0x178>
   15eac:	6a23      	ldr	r3, [r4, #32]
   15eae:	b153      	cbz	r3, 15ec6 <pdn_interface_open+0x76>
   15eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15eb2:	2509      	movs	r5, #9
   15eb4:	b143      	cbz	r3, 15ec8 <pdn_interface_open+0x78>
   15eb6:	200c      	movs	r0, #12
   15eb8:	f7fb fc4c 	bl	11754 <bsd_os_errno_set>
   15ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ec0:	b003      	add	sp, #12
   15ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15ec6:	2508      	movs	r5, #8
   15ec8:	2074      	movs	r0, #116	; 0x74
   15eca:	f7fd fce9 	bl	138a0 <nrf_malloc>
   15ece:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   15ed2:	2800      	cmp	r0, #0
   15ed4:	d0ef      	beq.n	15eb6 <pdn_interface_open+0x66>
   15ed6:	2274      	movs	r2, #116	; 0x74
   15ed8:	2100      	movs	r1, #0
   15eda:	f007 fab4 	bl	1d446 <memset>
   15ede:	2101      	movs	r1, #1
   15ee0:	2003      	movs	r0, #3
   15ee2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15ee6:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15eea:	4a44      	ldr	r2, [pc, #272]	; (15ffc <pdn_interface_open+0x1ac>)
   15eec:	6099      	str	r1, [r3, #8]
   15eee:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
   15ef6:	6718      	str	r0, [r3, #112]	; 0x70
   15ef8:	605f      	str	r7, [r3, #4]
   15efa:	4841      	ldr	r0, [pc, #260]	; (16000 <pdn_interface_open+0x1b0>)
   15efc:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1600c <pdn_interface_open+0x1bc>
   15f00:	f7fa feda 	bl	10cb8 <snprintf>
   15f04:	483e      	ldr	r0, [pc, #248]	; (16000 <pdn_interface_open+0x1b0>)
   15f06:	f8d8 9000 	ldr.w	r9, [r8]
   15f0a:	2600      	movs	r6, #0
   15f0c:	f007 fa36 	bl	1d37c <strlen>
   15f10:	4633      	mov	r3, r6
   15f12:	4602      	mov	r2, r0
   15f14:	493a      	ldr	r1, [pc, #232]	; (16000 <pdn_interface_open+0x1b0>)
   15f16:	4648      	mov	r0, r9
   15f18:	9601      	str	r6, [sp, #4]
   15f1a:	9600      	str	r6, [sp, #0]
   15f1c:	f7fc ff24 	bl	12d68 <at_interface_write>
   15f20:	4681      	mov	r9, r0
   15f22:	4837      	ldr	r0, [pc, #220]	; (16000 <pdn_interface_open+0x1b0>)
   15f24:	f007 fa2a 	bl	1d37c <strlen>
   15f28:	4548      	cmp	r0, r9
   15f2a:	d159      	bne.n	15fe0 <pdn_interface_open+0x190>
   15f2c:	4633      	mov	r3, r6
   15f2e:	e9cd 6600 	strd	r6, r6, [sp]
   15f32:	f44f 7280 	mov.w	r2, #256	; 0x100
   15f36:	4932      	ldr	r1, [pc, #200]	; (16000 <pdn_interface_open+0x1b0>)
   15f38:	f8d8 0000 	ldr.w	r0, [r8]
   15f3c:	f7fc fffc 	bl	12f38 <at_interface_read>
   15f40:	4606      	mov	r6, r0
   15f42:	4830      	ldr	r0, [pc, #192]	; (16004 <pdn_interface_open+0x1b4>)
   15f44:	f007 fa1a 	bl	1d37c <strlen>
   15f48:	4286      	cmp	r6, r0
   15f4a:	db15      	blt.n	15f78 <pdn_interface_open+0x128>
   15f4c:	4602      	mov	r2, r0
   15f4e:	492c      	ldr	r1, [pc, #176]	; (16000 <pdn_interface_open+0x1b0>)
   15f50:	482c      	ldr	r0, [pc, #176]	; (16004 <pdn_interface_open+0x1b4>)
   15f52:	f007 fa26 	bl	1d3a2 <strncmp>
   15f56:	b978      	cbnz	r0, 15f78 <pdn_interface_open+0x128>
   15f58:	4929      	ldr	r1, [pc, #164]	; (16000 <pdn_interface_open+0x1b0>)
   15f5a:	4628      	mov	r0, r5
   15f5c:	f7ff ff32 	bl	15dc4 <context_create_parser>
   15f60:	b9b0      	cbnz	r0, 15f90 <pdn_interface_open+0x140>
   15f62:	2202      	movs	r2, #2
   15f64:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   15f68:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   15f6c:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   15f70:	609a      	str	r2, [r3, #8]
   15f72:	b003      	add	sp, #12
   15f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15f78:	4823      	ldr	r0, [pc, #140]	; (16008 <pdn_interface_open+0x1b8>)
   15f7a:	f007 f9ff 	bl	1d37c <strlen>
   15f7e:	4920      	ldr	r1, [pc, #128]	; (16000 <pdn_interface_open+0x1b0>)
   15f80:	4602      	mov	r2, r0
   15f82:	4821      	ldr	r0, [pc, #132]	; (16008 <pdn_interface_open+0x1b8>)
   15f84:	f007 fa0d 	bl	1d3a2 <strncmp>
   15f88:	b960      	cbnz	r0, 15fa4 <pdn_interface_open+0x154>
   15f8a:	2008      	movs	r0, #8
   15f8c:	f7fb fbe2 	bl	11754 <bsd_os_errno_set>
   15f90:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   15f94:	f7fd fc8e 	bl	138b4 <nrf_free>
   15f98:	2300      	movs	r3, #0
   15f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15f9e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   15fa2:	e78d      	b.n	15ec0 <pdn_interface_open+0x70>
   15fa4:	2005      	movs	r0, #5
   15fa6:	f7fb fbd5 	bl	11754 <bsd_os_errno_set>
   15faa:	e7f1      	b.n	15f90 <pdn_interface_open+0x140>
   15fac:	2501      	movs	r5, #1
   15fae:	e78b      	b.n	15ec8 <pdn_interface_open+0x78>
   15fb0:	2502      	movs	r5, #2
   15fb2:	e789      	b.n	15ec8 <pdn_interface_open+0x78>
   15fb4:	2503      	movs	r5, #3
   15fb6:	e787      	b.n	15ec8 <pdn_interface_open+0x78>
   15fb8:	2016      	movs	r0, #22
   15fba:	f7fb fbcb 	bl	11754 <bsd_os_errno_set>
   15fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15fc2:	e77d      	b.n	15ec0 <pdn_interface_open+0x70>
   15fc4:	2504      	movs	r5, #4
   15fc6:	e77f      	b.n	15ec8 <pdn_interface_open+0x78>
   15fc8:	2507      	movs	r5, #7
   15fca:	e77d      	b.n	15ec8 <pdn_interface_open+0x78>
   15fcc:	2505      	movs	r5, #5
   15fce:	e77b      	b.n	15ec8 <pdn_interface_open+0x78>
   15fd0:	2506      	movs	r5, #6
   15fd2:	e779      	b.n	15ec8 <pdn_interface_open+0x78>
   15fd4:	202f      	movs	r0, #47	; 0x2f
   15fd6:	f7fb fbbd 	bl	11754 <bsd_os_errno_set>
   15fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15fde:	e76f      	b.n	15ec0 <pdn_interface_open+0x70>
   15fe0:	2005      	movs	r0, #5
   15fe2:	f7fb fbb7 	bl	11754 <bsd_os_errno_set>
   15fe6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   15fea:	f7fd fc63 	bl	138b4 <nrf_free>
   15fee:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   15ff2:	4638      	mov	r0, r7
   15ff4:	e764      	b.n	15ec0 <pdn_interface_open+0x70>
   15ff6:	bf00      	nop
   15ff8:	200208f4 	.word	0x200208f4
   15ffc:	0001f5d0 	.word	0x0001f5d0
   16000:	200207f4 	.word	0x200207f4
   16004:	0001f5e0 	.word	0x0001f5e0
   16008:	0001f5ec 	.word	0x0001f5ec
   1600c:	200207f0 	.word	0x200207f0

00016010 <pdn_interface_connect>:
   16010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16014:	b083      	sub	sp, #12
   16016:	2900      	cmp	r1, #0
   16018:	f000 813e 	beq.w	16298 <pdn_interface_connect+0x288>
   1601c:	2a64      	cmp	r2, #100	; 0x64
   1601e:	4691      	mov	r9, r2
   16020:	f200 813a 	bhi.w	16298 <pdn_interface_connect+0x288>
   16024:	4605      	mov	r5, r0
   16026:	4608      	mov	r0, r1
   16028:	4688      	mov	r8, r1
   1602a:	f007 f9a7 	bl	1d37c <strlen>
   1602e:	2864      	cmp	r0, #100	; 0x64
   16030:	f200 8132 	bhi.w	16298 <pdn_interface_connect+0x288>
   16034:	4ba5      	ldr	r3, [pc, #660]	; (162cc <pdn_interface_connect+0x2bc>)
   16036:	43ab      	bics	r3, r5
   16038:	f040 8125 	bne.w	16286 <pdn_interface_connect+0x276>
   1603c:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   16040:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   16044:	2d09      	cmp	r5, #9
   16046:	f300 811e 	bgt.w	16286 <pdn_interface_connect+0x276>
   1604a:	4fa1      	ldr	r7, [pc, #644]	; (162d0 <pdn_interface_connect+0x2c0>)
   1604c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16050:	2b00      	cmp	r3, #0
   16052:	f000 8118 	beq.w	16286 <pdn_interface_connect+0x276>
   16056:	689a      	ldr	r2, [r3, #8]
   16058:	2a00      	cmp	r2, #0
   1605a:	f000 8114 	beq.w	16286 <pdn_interface_connect+0x276>
   1605e:	2d00      	cmp	r5, #0
   16060:	f2c0 8111 	blt.w	16286 <pdn_interface_connect+0x276>
   16064:	689b      	ldr	r3, [r3, #8]
   16066:	2b02      	cmp	r3, #2
   16068:	f040 810d 	bne.w	16286 <pdn_interface_connect+0x276>
   1606c:	4e99      	ldr	r6, [pc, #612]	; (162d4 <pdn_interface_connect+0x2c4>)
   1606e:	4a9a      	ldr	r2, [pc, #616]	; (162d8 <pdn_interface_connect+0x2c8>)
   16070:	f44f 7180 	mov.w	r1, #256	; 0x100
   16074:	4630      	mov	r0, r6
   16076:	f7fa fe1f 	bl	10cb8 <snprintf>
   1607a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1607e:	4604      	mov	r4, r0
   16080:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16084:	681b      	ldr	r3, [r3, #0]
   16086:	4a95      	ldr	r2, [pc, #596]	; (162dc <pdn_interface_connect+0x2cc>)
   16088:	1830      	adds	r0, r6, r0
   1608a:	f7fa fe15 	bl	10cb8 <snprintf>
   1608e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   16092:	4404      	add	r4, r0
   16094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   16096:	f003 0203 	and.w	r2, r3, #3
   1609a:	2a03      	cmp	r2, #3
   1609c:	f000 80ea 	beq.w	16274 <pdn_interface_connect+0x264>
   160a0:	079b      	lsls	r3, r3, #30
   160a2:	eb06 0004 	add.w	r0, r6, r4
   160a6:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   160aa:	bf4c      	ite	mi
   160ac:	4b8c      	ldrmi	r3, [pc, #560]	; (162e0 <pdn_interface_connect+0x2d0>)
   160ae:	4b8d      	ldrpl	r3, [pc, #564]	; (162e4 <pdn_interface_connect+0x2d4>)
   160b0:	4a8d      	ldr	r2, [pc, #564]	; (162e8 <pdn_interface_connect+0x2d8>)
   160b2:	f7fa fe01 	bl	10cb8 <snprintf>
   160b6:	4404      	add	r4, r0
   160b8:	4643      	mov	r3, r8
   160ba:	4a8c      	ldr	r2, [pc, #560]	; (162ec <pdn_interface_connect+0x2dc>)
   160bc:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   160c0:	1930      	adds	r0, r6, r4
   160c2:	f7fa fdf9 	bl	10cb8 <snprintf>
   160c6:	4420      	add	r0, r4
   160c8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   160cc:	f300 80f7 	bgt.w	162be <pdn_interface_connect+0x2ae>
   160d0:	f8df a238 	ldr.w	sl, [pc, #568]	; 1630c <pdn_interface_connect+0x2fc>
   160d4:	487f      	ldr	r0, [pc, #508]	; (162d4 <pdn_interface_connect+0x2c4>)
   160d6:	f8da b000 	ldr.w	fp, [sl]
   160da:	2400      	movs	r4, #0
   160dc:	f007 f94e 	bl	1d37c <strlen>
   160e0:	4623      	mov	r3, r4
   160e2:	4602      	mov	r2, r0
   160e4:	497b      	ldr	r1, [pc, #492]	; (162d4 <pdn_interface_connect+0x2c4>)
   160e6:	4658      	mov	r0, fp
   160e8:	9401      	str	r4, [sp, #4]
   160ea:	9400      	str	r4, [sp, #0]
   160ec:	f7fc fe3c 	bl	12d68 <at_interface_write>
   160f0:	4683      	mov	fp, r0
   160f2:	4878      	ldr	r0, [pc, #480]	; (162d4 <pdn_interface_connect+0x2c4>)
   160f4:	f007 f942 	bl	1d37c <strlen>
   160f8:	4558      	cmp	r0, fp
   160fa:	d008      	beq.n	1610e <pdn_interface_connect+0xfe>
   160fc:	2005      	movs	r0, #5
   160fe:	f7fb fb29 	bl	11754 <bsd_os_errno_set>
   16102:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16106:	4620      	mov	r0, r4
   16108:	b003      	add	sp, #12
   1610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1610e:	4623      	mov	r3, r4
   16110:	e9cd 4400 	strd	r4, r4, [sp]
   16114:	f44f 7280 	mov.w	r2, #256	; 0x100
   16118:	496e      	ldr	r1, [pc, #440]	; (162d4 <pdn_interface_connect+0x2c4>)
   1611a:	f8da 0000 	ldr.w	r0, [sl]
   1611e:	f7fc ff0b 	bl	12f38 <at_interface_read>
   16122:	4604      	mov	r4, r0
   16124:	4872      	ldr	r0, [pc, #456]	; (162f0 <pdn_interface_connect+0x2e0>)
   16126:	f007 f929 	bl	1d37c <strlen>
   1612a:	4284      	cmp	r4, r0
   1612c:	f2c0 8091 	blt.w	16252 <pdn_interface_connect+0x242>
   16130:	4602      	mov	r2, r0
   16132:	4968      	ldr	r1, [pc, #416]	; (162d4 <pdn_interface_connect+0x2c4>)
   16134:	486e      	ldr	r0, [pc, #440]	; (162f0 <pdn_interface_connect+0x2e0>)
   16136:	f007 f934 	bl	1d3a2 <strncmp>
   1613a:	2800      	cmp	r0, #0
   1613c:	f040 8089 	bne.w	16252 <pdn_interface_connect+0x242>
   16140:	4964      	ldr	r1, [pc, #400]	; (162d4 <pdn_interface_connect+0x2c4>)
   16142:	4628      	mov	r0, r5
   16144:	f7ff fdda 	bl	15cfc <ok_rsp_parser>
   16148:	4604      	mov	r4, r0
   1614a:	2800      	cmp	r0, #0
   1614c:	d1db      	bne.n	16106 <pdn_interface_connect+0xf6>
   1614e:	4a69      	ldr	r2, [pc, #420]	; (162f4 <pdn_interface_connect+0x2e4>)
   16150:	f44f 7180 	mov.w	r1, #256	; 0x100
   16154:	485f      	ldr	r0, [pc, #380]	; (162d4 <pdn_interface_connect+0x2c4>)
   16156:	f7fa fdaf 	bl	10cb8 <snprintf>
   1615a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1615e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16162:	681b      	ldr	r3, [r3, #0]
   16164:	4a64      	ldr	r2, [pc, #400]	; (162f8 <pdn_interface_connect+0x2e8>)
   16166:	4430      	add	r0, r6
   16168:	f7fa fda6 	bl	10cb8 <snprintf>
   1616c:	4859      	ldr	r0, [pc, #356]	; (162d4 <pdn_interface_connect+0x2c4>)
   1616e:	f8da b000 	ldr.w	fp, [sl]
   16172:	f007 f903 	bl	1d37c <strlen>
   16176:	4623      	mov	r3, r4
   16178:	4602      	mov	r2, r0
   1617a:	4956      	ldr	r1, [pc, #344]	; (162d4 <pdn_interface_connect+0x2c4>)
   1617c:	4658      	mov	r0, fp
   1617e:	9401      	str	r4, [sp, #4]
   16180:	9400      	str	r4, [sp, #0]
   16182:	f7fc fdf1 	bl	12d68 <at_interface_write>
   16186:	4683      	mov	fp, r0
   16188:	4852      	ldr	r0, [pc, #328]	; (162d4 <pdn_interface_connect+0x2c4>)
   1618a:	f007 f8f7 	bl	1d37c <strlen>
   1618e:	4558      	cmp	r0, fp
   16190:	d1b4      	bne.n	160fc <pdn_interface_connect+0xec>
   16192:	4623      	mov	r3, r4
   16194:	f44f 7280 	mov.w	r2, #256	; 0x100
   16198:	494e      	ldr	r1, [pc, #312]	; (162d4 <pdn_interface_connect+0x2c4>)
   1619a:	f8da 0000 	ldr.w	r0, [sl]
   1619e:	e9cd 4400 	strd	r4, r4, [sp]
   161a2:	f7fc fec9 	bl	12f38 <at_interface_read>
   161a6:	4683      	mov	fp, r0
   161a8:	4851      	ldr	r0, [pc, #324]	; (162f0 <pdn_interface_connect+0x2e0>)
   161aa:	f007 f8e7 	bl	1d37c <strlen>
   161ae:	4583      	cmp	fp, r0
   161b0:	db4f      	blt.n	16252 <pdn_interface_connect+0x242>
   161b2:	4602      	mov	r2, r0
   161b4:	4947      	ldr	r1, [pc, #284]	; (162d4 <pdn_interface_connect+0x2c4>)
   161b6:	484e      	ldr	r0, [pc, #312]	; (162f0 <pdn_interface_connect+0x2e0>)
   161b8:	f007 f8f3 	bl	1d3a2 <strncmp>
   161bc:	2800      	cmp	r0, #0
   161be:	d148      	bne.n	16252 <pdn_interface_connect+0x242>
   161c0:	2103      	movs	r1, #3
   161c2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   161c6:	464a      	mov	r2, r9
   161c8:	6099      	str	r1, [r3, #8]
   161ca:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   161ce:	4641      	mov	r1, r8
   161d0:	300c      	adds	r0, #12
   161d2:	f007 f90e 	bl	1d3f2 <memcpy>
   161d6:	4a49      	ldr	r2, [pc, #292]	; (162fc <pdn_interface_connect+0x2ec>)
   161d8:	f44f 7180 	mov.w	r1, #256	; 0x100
   161dc:	483d      	ldr	r0, [pc, #244]	; (162d4 <pdn_interface_connect+0x2c4>)
   161de:	f7fa fd6b 	bl	10cb8 <snprintf>
   161e2:	4601      	mov	r1, r0
   161e4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   161e8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   161ec:	681b      	ldr	r3, [r3, #0]
   161ee:	4a42      	ldr	r2, [pc, #264]	; (162f8 <pdn_interface_connect+0x2e8>)
   161f0:	1830      	adds	r0, r6, r0
   161f2:	f7fa fd61 	bl	10cb8 <snprintf>
   161f6:	4837      	ldr	r0, [pc, #220]	; (162d4 <pdn_interface_connect+0x2c4>)
   161f8:	f8da 6000 	ldr.w	r6, [sl]
   161fc:	f007 f8be 	bl	1d37c <strlen>
   16200:	4623      	mov	r3, r4
   16202:	4602      	mov	r2, r0
   16204:	4933      	ldr	r1, [pc, #204]	; (162d4 <pdn_interface_connect+0x2c4>)
   16206:	4630      	mov	r0, r6
   16208:	9401      	str	r4, [sp, #4]
   1620a:	9400      	str	r4, [sp, #0]
   1620c:	f7fc fdac 	bl	12d68 <at_interface_write>
   16210:	4606      	mov	r6, r0
   16212:	4830      	ldr	r0, [pc, #192]	; (162d4 <pdn_interface_connect+0x2c4>)
   16214:	f007 f8b2 	bl	1d37c <strlen>
   16218:	42b0      	cmp	r0, r6
   1621a:	d153      	bne.n	162c4 <pdn_interface_connect+0x2b4>
   1621c:	4623      	mov	r3, r4
   1621e:	f44f 7280 	mov.w	r2, #256	; 0x100
   16222:	492c      	ldr	r1, [pc, #176]	; (162d4 <pdn_interface_connect+0x2c4>)
   16224:	f8da 0000 	ldr.w	r0, [sl]
   16228:	e9cd 4400 	strd	r4, r4, [sp]
   1622c:	f7fc fe84 	bl	12f38 <at_interface_read>
   16230:	4606      	mov	r6, r0
   16232:	4833      	ldr	r0, [pc, #204]	; (16300 <pdn_interface_connect+0x2f0>)
   16234:	f007 f8a2 	bl	1d37c <strlen>
   16238:	4286      	cmp	r6, r0
   1623a:	db33      	blt.n	162a4 <pdn_interface_connect+0x294>
   1623c:	4602      	mov	r2, r0
   1623e:	4925      	ldr	r1, [pc, #148]	; (162d4 <pdn_interface_connect+0x2c4>)
   16240:	482f      	ldr	r0, [pc, #188]	; (16300 <pdn_interface_connect+0x2f0>)
   16242:	f007 f8ae 	bl	1d3a2 <strncmp>
   16246:	bb68      	cbnz	r0, 162a4 <pdn_interface_connect+0x294>
   16248:	4628      	mov	r0, r5
   1624a:	4922      	ldr	r1, [pc, #136]	; (162d4 <pdn_interface_connect+0x2c4>)
   1624c:	f7ff fd8e 	bl	15d6c <pdn_id_get_parser>
   16250:	e759      	b.n	16106 <pdn_interface_connect+0xf6>
   16252:	482c      	ldr	r0, [pc, #176]	; (16304 <pdn_interface_connect+0x2f4>)
   16254:	f007 f892 	bl	1d37c <strlen>
   16258:	491e      	ldr	r1, [pc, #120]	; (162d4 <pdn_interface_connect+0x2c4>)
   1625a:	4602      	mov	r2, r0
   1625c:	4829      	ldr	r0, [pc, #164]	; (16304 <pdn_interface_connect+0x2f4>)
   1625e:	f007 f8a0 	bl	1d3a2 <strncmp>
   16262:	2800      	cmp	r0, #0
   16264:	f47f af4a 	bne.w	160fc <pdn_interface_connect+0xec>
   16268:	2008      	movs	r0, #8
   1626a:	f7fb fa73 	bl	11754 <bsd_os_errno_set>
   1626e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16272:	e748      	b.n	16106 <pdn_interface_connect+0xf6>
   16274:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   16278:	1930      	adds	r0, r6, r4
   1627a:	4b23      	ldr	r3, [pc, #140]	; (16308 <pdn_interface_connect+0x2f8>)
   1627c:	4a1a      	ldr	r2, [pc, #104]	; (162e8 <pdn_interface_connect+0x2d8>)
   1627e:	f7fa fd1b 	bl	10cb8 <snprintf>
   16282:	4404      	add	r4, r0
   16284:	e718      	b.n	160b8 <pdn_interface_connect+0xa8>
   16286:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1628a:	2009      	movs	r0, #9
   1628c:	f7fb fa62 	bl	11754 <bsd_os_errno_set>
   16290:	4620      	mov	r0, r4
   16292:	b003      	add	sp, #12
   16294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16298:	2016      	movs	r0, #22
   1629a:	f7fb fa5b 	bl	11754 <bsd_os_errno_set>
   1629e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   162a2:	e730      	b.n	16106 <pdn_interface_connect+0xf6>
   162a4:	4817      	ldr	r0, [pc, #92]	; (16304 <pdn_interface_connect+0x2f4>)
   162a6:	f007 f869 	bl	1d37c <strlen>
   162aa:	490a      	ldr	r1, [pc, #40]	; (162d4 <pdn_interface_connect+0x2c4>)
   162ac:	4602      	mov	r2, r0
   162ae:	4815      	ldr	r0, [pc, #84]	; (16304 <pdn_interface_connect+0x2f4>)
   162b0:	f007 f877 	bl	1d3a2 <strncmp>
   162b4:	b930      	cbnz	r0, 162c4 <pdn_interface_connect+0x2b4>
   162b6:	2008      	movs	r0, #8
   162b8:	f7fb fa4c 	bl	11754 <bsd_os_errno_set>
   162bc:	e723      	b.n	16106 <pdn_interface_connect+0xf6>
   162be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   162c2:	e720      	b.n	16106 <pdn_interface_connect+0xf6>
   162c4:	2005      	movs	r0, #5
   162c6:	f7fb fa45 	bl	11754 <bsd_os_errno_set>
   162ca:	e71c      	b.n	16106 <pdn_interface_connect+0xf6>
   162cc:	789a0000 	.word	0x789a0000
   162d0:	200208f4 	.word	0x200208f4
   162d4:	200207f4 	.word	0x200207f4
   162d8:	0001f558 	.word	0x0001f558
   162dc:	0001f564 	.word	0x0001f564
   162e0:	0001f578 	.word	0x0001f578
   162e4:	0001f580 	.word	0x0001f580
   162e8:	0001f570 	.word	0x0001f570
   162ec:	0001f5b4 	.word	0x0001f5b4
   162f0:	0001f584 	.word	0x0001f584
   162f4:	0001f588 	.word	0x0001f588
   162f8:	0001f594 	.word	0x0001f594
   162fc:	0001f598 	.word	0x0001f598
   16300:	0001f5a8 	.word	0x0001f5a8
   16304:	0001f5ec 	.word	0x0001f5ec
   16308:	0001f568 	.word	0x0001f568
   1630c:	200207f0 	.word	0x200207f0

00016310 <pdn_interface_close>:
   16310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16314:	4b63      	ldr	r3, [pc, #396]	; (164a4 <pdn_interface_close+0x194>)
   16316:	b083      	sub	sp, #12
   16318:	4383      	bics	r3, r0
   1631a:	f040 809d 	bne.w	16458 <pdn_interface_close+0x148>
   1631e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   16322:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   16326:	2c09      	cmp	r4, #9
   16328:	f300 8096 	bgt.w	16458 <pdn_interface_close+0x148>
   1632c:	4d5e      	ldr	r5, [pc, #376]	; (164a8 <pdn_interface_close+0x198>)
   1632e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16332:	2800      	cmp	r0, #0
   16334:	f000 8090 	beq.w	16458 <pdn_interface_close+0x148>
   16338:	6883      	ldr	r3, [r0, #8]
   1633a:	2b00      	cmp	r3, #0
   1633c:	f000 808c 	beq.w	16458 <pdn_interface_close+0x148>
   16340:	6883      	ldr	r3, [r0, #8]
   16342:	2b03      	cmp	r3, #3
   16344:	d008      	beq.n	16358 <pdn_interface_close+0x48>
   16346:	f7fd fab5 	bl	138b4 <nrf_free>
   1634a:	2300      	movs	r3, #0
   1634c:	4618      	mov	r0, r3
   1634e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   16352:	b003      	add	sp, #12
   16354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16358:	4e54      	ldr	r6, [pc, #336]	; (164ac <pdn_interface_close+0x19c>)
   1635a:	4a55      	ldr	r2, [pc, #340]	; (164b0 <pdn_interface_close+0x1a0>)
   1635c:	f44f 7180 	mov.w	r1, #256	; 0x100
   16360:	4630      	mov	r0, r6
   16362:	f7fa fca9 	bl	10cb8 <snprintf>
   16366:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1636a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1636e:	681b      	ldr	r3, [r3, #0]
   16370:	4a50      	ldr	r2, [pc, #320]	; (164b4 <pdn_interface_close+0x1a4>)
   16372:	4430      	add	r0, r6
   16374:	f8df 814c 	ldr.w	r8, [pc, #332]	; 164c4 <pdn_interface_close+0x1b4>
   16378:	f7fa fc9e 	bl	10cb8 <snprintf>
   1637c:	4630      	mov	r0, r6
   1637e:	f8d8 9000 	ldr.w	r9, [r8]
   16382:	2700      	movs	r7, #0
   16384:	f006 fffa 	bl	1d37c <strlen>
   16388:	4631      	mov	r1, r6
   1638a:	4602      	mov	r2, r0
   1638c:	463b      	mov	r3, r7
   1638e:	4648      	mov	r0, r9
   16390:	9701      	str	r7, [sp, #4]
   16392:	9700      	str	r7, [sp, #0]
   16394:	f7fc fce8 	bl	12d68 <at_interface_write>
   16398:	4681      	mov	r9, r0
   1639a:	4630      	mov	r0, r6
   1639c:	f006 ffee 	bl	1d37c <strlen>
   163a0:	4548      	cmp	r0, r9
   163a2:	d176      	bne.n	16492 <pdn_interface_close+0x182>
   163a4:	463b      	mov	r3, r7
   163a6:	e9cd 7700 	strd	r7, r7, [sp]
   163aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   163ae:	4631      	mov	r1, r6
   163b0:	f8d8 0000 	ldr.w	r0, [r8]
   163b4:	f7fc fdc0 	bl	12f38 <at_interface_read>
   163b8:	4607      	mov	r7, r0
   163ba:	483f      	ldr	r0, [pc, #252]	; (164b8 <pdn_interface_close+0x1a8>)
   163bc:	f006 ffde 	bl	1d37c <strlen>
   163c0:	4287      	cmp	r7, r0
   163c2:	da4f      	bge.n	16464 <pdn_interface_close+0x154>
   163c4:	483d      	ldr	r0, [pc, #244]	; (164bc <pdn_interface_close+0x1ac>)
   163c6:	f006 ffd9 	bl	1d37c <strlen>
   163ca:	4938      	ldr	r1, [pc, #224]	; (164ac <pdn_interface_close+0x19c>)
   163cc:	4602      	mov	r2, r0
   163ce:	483b      	ldr	r0, [pc, #236]	; (164bc <pdn_interface_close+0x1ac>)
   163d0:	f006 ffe7 	bl	1d3a2 <strncmp>
   163d4:	2800      	cmp	r0, #0
   163d6:	d15c      	bne.n	16492 <pdn_interface_close+0x182>
   163d8:	2008      	movs	r0, #8
   163da:	f7fb f9bb 	bl	11754 <bsd_os_errno_set>
   163de:	4a38      	ldr	r2, [pc, #224]	; (164c0 <pdn_interface_close+0x1b0>)
   163e0:	f44f 7180 	mov.w	r1, #256	; 0x100
   163e4:	4831      	ldr	r0, [pc, #196]	; (164ac <pdn_interface_close+0x19c>)
   163e6:	f7fa fc67 	bl	10cb8 <snprintf>
   163ea:	4601      	mov	r1, r0
   163ec:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   163f0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   163f4:	681b      	ldr	r3, [r3, #0]
   163f6:	4a2f      	ldr	r2, [pc, #188]	; (164b4 <pdn_interface_close+0x1a4>)
   163f8:	1830      	adds	r0, r6, r0
   163fa:	f7fa fc5d 	bl	10cb8 <snprintf>
   163fe:	482b      	ldr	r0, [pc, #172]	; (164ac <pdn_interface_close+0x19c>)
   16400:	f8d8 7000 	ldr.w	r7, [r8]
   16404:	2600      	movs	r6, #0
   16406:	f006 ffb9 	bl	1d37c <strlen>
   1640a:	4633      	mov	r3, r6
   1640c:	4602      	mov	r2, r0
   1640e:	4927      	ldr	r1, [pc, #156]	; (164ac <pdn_interface_close+0x19c>)
   16410:	4638      	mov	r0, r7
   16412:	9601      	str	r6, [sp, #4]
   16414:	9600      	str	r6, [sp, #0]
   16416:	f7fc fca7 	bl	12d68 <at_interface_write>
   1641a:	4607      	mov	r7, r0
   1641c:	4823      	ldr	r0, [pc, #140]	; (164ac <pdn_interface_close+0x19c>)
   1641e:	f006 ffad 	bl	1d37c <strlen>
   16422:	42b8      	cmp	r0, r7
   16424:	d139      	bne.n	1649a <pdn_interface_close+0x18a>
   16426:	4633      	mov	r3, r6
   16428:	e9cd 6600 	strd	r6, r6, [sp]
   1642c:	f44f 7280 	mov.w	r2, #256	; 0x100
   16430:	491e      	ldr	r1, [pc, #120]	; (164ac <pdn_interface_close+0x19c>)
   16432:	f8d8 0000 	ldr.w	r0, [r8]
   16436:	f7fc fd7f 	bl	12f38 <at_interface_read>
   1643a:	4606      	mov	r6, r0
   1643c:	481e      	ldr	r0, [pc, #120]	; (164b8 <pdn_interface_close+0x1a8>)
   1643e:	f006 ff9d 	bl	1d37c <strlen>
   16442:	4286      	cmp	r6, r0
   16444:	db16      	blt.n	16474 <pdn_interface_close+0x164>
   16446:	4602      	mov	r2, r0
   16448:	4918      	ldr	r1, [pc, #96]	; (164ac <pdn_interface_close+0x19c>)
   1644a:	481b      	ldr	r0, [pc, #108]	; (164b8 <pdn_interface_close+0x1a8>)
   1644c:	f006 ffa9 	bl	1d3a2 <strncmp>
   16450:	b980      	cbnz	r0, 16474 <pdn_interface_close+0x164>
   16452:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16456:	e776      	b.n	16346 <pdn_interface_close+0x36>
   16458:	2009      	movs	r0, #9
   1645a:	f7fb f97b 	bl	11754 <bsd_os_errno_set>
   1645e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16462:	e776      	b.n	16352 <pdn_interface_close+0x42>
   16464:	4602      	mov	r2, r0
   16466:	4631      	mov	r1, r6
   16468:	4813      	ldr	r0, [pc, #76]	; (164b8 <pdn_interface_close+0x1a8>)
   1646a:	f006 ff9a 	bl	1d3a2 <strncmp>
   1646e:	2800      	cmp	r0, #0
   16470:	d0b5      	beq.n	163de <pdn_interface_close+0xce>
   16472:	e7a7      	b.n	163c4 <pdn_interface_close+0xb4>
   16474:	4811      	ldr	r0, [pc, #68]	; (164bc <pdn_interface_close+0x1ac>)
   16476:	f006 ff81 	bl	1d37c <strlen>
   1647a:	490c      	ldr	r1, [pc, #48]	; (164ac <pdn_interface_close+0x19c>)
   1647c:	4602      	mov	r2, r0
   1647e:	480f      	ldr	r0, [pc, #60]	; (164bc <pdn_interface_close+0x1ac>)
   16480:	f006 ff8f 	bl	1d3a2 <strncmp>
   16484:	b948      	cbnz	r0, 1649a <pdn_interface_close+0x18a>
   16486:	2008      	movs	r0, #8
   16488:	f7fb f964 	bl	11754 <bsd_os_errno_set>
   1648c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16490:	e759      	b.n	16346 <pdn_interface_close+0x36>
   16492:	2005      	movs	r0, #5
   16494:	f7fb f95e 	bl	11754 <bsd_os_errno_set>
   16498:	e7a1      	b.n	163de <pdn_interface_close+0xce>
   1649a:	2005      	movs	r0, #5
   1649c:	f7fb f95a 	bl	11754 <bsd_os_errno_set>
   164a0:	e7d7      	b.n	16452 <pdn_interface_close+0x142>
   164a2:	bf00      	nop
   164a4:	789a0000 	.word	0x789a0000
   164a8:	200208f4 	.word	0x200208f4
   164ac:	200207f4 	.word	0x200207f4
   164b0:	0001f54c 	.word	0x0001f54c
   164b4:	0001f594 	.word	0x0001f594
   164b8:	0001f584 	.word	0x0001f584
   164bc:	0001f5ec 	.word	0x0001f5ec
   164c0:	0001f558 	.word	0x0001f558
   164c4:	200207f0 	.word	0x200207f0

000164c8 <pdn_interface_setopt>:
   164c8:	b510      	push	{r4, lr}
   164ca:	f240 2402 	movw	r4, #514	; 0x202
   164ce:	42a1      	cmp	r1, r4
   164d0:	d10b      	bne.n	164ea <pdn_interface_setopt+0x22>
   164d2:	b153      	cbz	r3, 164ea <pdn_interface_setopt+0x22>
   164d4:	9902      	ldr	r1, [sp, #8]
   164d6:	b141      	cbz	r1, 164ea <pdn_interface_setopt+0x22>
   164d8:	4925      	ldr	r1, [pc, #148]	; (16570 <pdn_interface_setopt+0xa8>)
   164da:	4381      	bics	r1, r0
   164dc:	d00b      	beq.n	164f6 <pdn_interface_setopt+0x2e>
   164de:	2009      	movs	r0, #9
   164e0:	f7fb f938 	bl	11754 <bsd_os_errno_set>
   164e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   164e8:	bd10      	pop	{r4, pc}
   164ea:	2016      	movs	r0, #22
   164ec:	f7fb f932 	bl	11754 <bsd_os_errno_set>
   164f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   164f4:	bd10      	pop	{r4, pc}
   164f6:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   164fa:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   164fe:	2809      	cmp	r0, #9
   16500:	dced      	bgt.n	164de <pdn_interface_setopt+0x16>
   16502:	491c      	ldr	r1, [pc, #112]	; (16574 <pdn_interface_setopt+0xac>)
   16504:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   16508:	2900      	cmp	r1, #0
   1650a:	d0e8      	beq.n	164de <pdn_interface_setopt+0x16>
   1650c:	688c      	ldr	r4, [r1, #8]
   1650e:	2c00      	cmp	r4, #0
   16510:	d0e5      	beq.n	164de <pdn_interface_setopt+0x16>
   16512:	2800      	cmp	r0, #0
   16514:	dbe3      	blt.n	164de <pdn_interface_setopt+0x16>
   16516:	2a01      	cmp	r2, #1
   16518:	d001      	beq.n	1651e <pdn_interface_setopt+0x56>
   1651a:	202d      	movs	r0, #45	; 0x2d
   1651c:	e7e6      	b.n	164ec <pdn_interface_setopt+0x24>
   1651e:	688a      	ldr	r2, [r1, #8]
   16520:	b1fa      	cbz	r2, 16562 <pdn_interface_setopt+0x9a>
   16522:	688a      	ldr	r2, [r1, #8]
   16524:	2a03      	cmp	r2, #3
   16526:	d01c      	beq.n	16562 <pdn_interface_setopt+0x9a>
   16528:	688a      	ldr	r2, [r1, #8]
   1652a:	2a04      	cmp	r2, #4
   1652c:	d019      	beq.n	16562 <pdn_interface_setopt+0x9a>
   1652e:	9a02      	ldr	r2, [sp, #8]
   16530:	0890      	lsrs	r0, r2, #2
   16532:	1e42      	subs	r2, r0, #1
   16534:	2a01      	cmp	r2, #1
   16536:	d8d8      	bhi.n	164ea <pdn_interface_setopt+0x22>
   16538:	9a02      	ldr	r2, [sp, #8]
   1653a:	0792      	lsls	r2, r2, #30
   1653c:	d1d5      	bne.n	164ea <pdn_interface_setopt+0x22>
   1653e:	681a      	ldr	r2, [r3, #0]
   16540:	2a02      	cmp	r2, #2
   16542:	d010      	beq.n	16566 <pdn_interface_setopt+0x9e>
   16544:	2a0a      	cmp	r2, #10
   16546:	d1d0      	bne.n	164ea <pdn_interface_setopt+0x22>
   16548:	2202      	movs	r2, #2
   1654a:	2802      	cmp	r0, #2
   1654c:	d106      	bne.n	1655c <pdn_interface_setopt+0x94>
   1654e:	685b      	ldr	r3, [r3, #4]
   16550:	2b02      	cmp	r3, #2
   16552:	d00a      	beq.n	1656a <pdn_interface_setopt+0xa2>
   16554:	2b0a      	cmp	r3, #10
   16556:	d1c8      	bne.n	164ea <pdn_interface_setopt+0x22>
   16558:	f042 0202 	orr.w	r2, r2, #2
   1655c:	670a      	str	r2, [r1, #112]	; 0x70
   1655e:	2000      	movs	r0, #0
   16560:	e7c4      	b.n	164ec <pdn_interface_setopt+0x24>
   16562:	200e      	movs	r0, #14
   16564:	e7c2      	b.n	164ec <pdn_interface_setopt+0x24>
   16566:	2201      	movs	r2, #1
   16568:	e7ef      	b.n	1654a <pdn_interface_setopt+0x82>
   1656a:	f042 0201 	orr.w	r2, r2, #1
   1656e:	e7f5      	b.n	1655c <pdn_interface_setopt+0x94>
   16570:	789a0000 	.word	0x789a0000
   16574:	200208f4 	.word	0x200208f4

00016578 <pdn_interface_getopt>:
   16578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1657c:	f240 2402 	movw	r4, #514	; 0x202
   16580:	b083      	sub	sp, #12
   16582:	42a1      	cmp	r1, r4
   16584:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16586:	f040 80a9 	bne.w	166dc <pdn_interface_getopt+0x164>
   1658a:	461e      	mov	r6, r3
   1658c:	2b00      	cmp	r3, #0
   1658e:	f000 80a5 	beq.w	166dc <pdn_interface_getopt+0x164>
   16592:	2d00      	cmp	r5, #0
   16594:	f000 80a2 	beq.w	166dc <pdn_interface_getopt+0x164>
   16598:	4b56      	ldr	r3, [pc, #344]	; (166f4 <pdn_interface_getopt+0x17c>)
   1659a:	4383      	bics	r3, r0
   1659c:	f040 8084 	bne.w	166a8 <pdn_interface_getopt+0x130>
   165a0:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   165a4:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   165a8:	2c09      	cmp	r4, #9
   165aa:	dc7d      	bgt.n	166a8 <pdn_interface_getopt+0x130>
   165ac:	4b52      	ldr	r3, [pc, #328]	; (166f8 <pdn_interface_getopt+0x180>)
   165ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   165b2:	2b00      	cmp	r3, #0
   165b4:	d078      	beq.n	166a8 <pdn_interface_getopt+0x130>
   165b6:	6899      	ldr	r1, [r3, #8]
   165b8:	2900      	cmp	r1, #0
   165ba:	d075      	beq.n	166a8 <pdn_interface_getopt+0x130>
   165bc:	2c00      	cmp	r4, #0
   165be:	db73      	blt.n	166a8 <pdn_interface_getopt+0x130>
   165c0:	2a02      	cmp	r2, #2
   165c2:	d00e      	beq.n	165e2 <pdn_interface_getopt+0x6a>
   165c4:	2a03      	cmp	r2, #3
   165c6:	d008      	beq.n	165da <pdn_interface_getopt+0x62>
   165c8:	2a01      	cmp	r2, #1
   165ca:	d015      	beq.n	165f8 <pdn_interface_getopt+0x80>
   165cc:	202d      	movs	r0, #45	; 0x2d
   165ce:	f7fb f8c1 	bl	11754 <bsd_os_errno_set>
   165d2:	2000      	movs	r0, #0
   165d4:	b003      	add	sp, #12
   165d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   165da:	682b      	ldr	r3, [r5, #0]
   165dc:	bb23      	cbnz	r3, 16628 <pdn_interface_getopt+0xb0>
   165de:	2016      	movs	r0, #22
   165e0:	e7f5      	b.n	165ce <pdn_interface_getopt+0x56>
   165e2:	682a      	ldr	r2, [r5, #0]
   165e4:	2a00      	cmp	r2, #0
   165e6:	d0fa      	beq.n	165de <pdn_interface_getopt+0x66>
   165e8:	2201      	movs	r2, #1
   165ea:	2000      	movs	r0, #0
   165ec:	681b      	ldr	r3, [r3, #0]
   165ee:	7033      	strb	r3, [r6, #0]
   165f0:	602a      	str	r2, [r5, #0]
   165f2:	b003      	add	sp, #12
   165f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   165f8:	689a      	ldr	r2, [r3, #8]
   165fa:	2a00      	cmp	r2, #0
   165fc:	d052      	beq.n	166a4 <pdn_interface_getopt+0x12c>
   165fe:	689a      	ldr	r2, [r3, #8]
   16600:	2a04      	cmp	r2, #4
   16602:	d04f      	beq.n	166a4 <pdn_interface_getopt+0x12c>
   16604:	682a      	ldr	r2, [r5, #0]
   16606:	2a07      	cmp	r2, #7
   16608:	d9e9      	bls.n	165de <pdn_interface_getopt+0x66>
   1660a:	f012 0203 	ands.w	r2, r2, #3
   1660e:	d1e6      	bne.n	165de <pdn_interface_getopt+0x66>
   16610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   16612:	0799      	lsls	r1, r3, #30
   16614:	d45d      	bmi.n	166d2 <pdn_interface_getopt+0x15a>
   16616:	2104      	movs	r1, #4
   16618:	07db      	lsls	r3, r3, #31
   1661a:	d502      	bpl.n	16622 <pdn_interface_getopt+0xaa>
   1661c:	2302      	movs	r3, #2
   1661e:	50b3      	str	r3, [r6, r2]
   16620:	460a      	mov	r2, r1
   16622:	602a      	str	r2, [r5, #0]
   16624:	2000      	movs	r0, #0
   16626:	e7d5      	b.n	165d4 <pdn_interface_getopt+0x5c>
   16628:	4a34      	ldr	r2, [pc, #208]	; (166fc <pdn_interface_getopt+0x184>)
   1662a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1662e:	4834      	ldr	r0, [pc, #208]	; (16700 <pdn_interface_getopt+0x188>)
   16630:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1670c <pdn_interface_getopt+0x194>
   16634:	f7fa fb40 	bl	10cb8 <snprintf>
   16638:	4831      	ldr	r0, [pc, #196]	; (16700 <pdn_interface_getopt+0x188>)
   1663a:	f8d8 9000 	ldr.w	r9, [r8]
   1663e:	2700      	movs	r7, #0
   16640:	f006 fe9c 	bl	1d37c <strlen>
   16644:	463b      	mov	r3, r7
   16646:	4602      	mov	r2, r0
   16648:	492d      	ldr	r1, [pc, #180]	; (16700 <pdn_interface_getopt+0x188>)
   1664a:	4648      	mov	r0, r9
   1664c:	9701      	str	r7, [sp, #4]
   1664e:	9700      	str	r7, [sp, #0]
   16650:	f7fc fb8a 	bl	12d68 <at_interface_write>
   16654:	4681      	mov	r9, r0
   16656:	482a      	ldr	r0, [pc, #168]	; (16700 <pdn_interface_getopt+0x188>)
   16658:	f006 fe90 	bl	1d37c <strlen>
   1665c:	4548      	cmp	r0, r9
   1665e:	d143      	bne.n	166e8 <pdn_interface_getopt+0x170>
   16660:	463b      	mov	r3, r7
   16662:	e9cd 7700 	strd	r7, r7, [sp]
   16666:	f44f 7280 	mov.w	r2, #256	; 0x100
   1666a:	4925      	ldr	r1, [pc, #148]	; (16700 <pdn_interface_getopt+0x188>)
   1666c:	f8d8 0000 	ldr.w	r0, [r8]
   16670:	f7fc fc62 	bl	12f38 <at_interface_read>
   16674:	4607      	mov	r7, r0
   16676:	4823      	ldr	r0, [pc, #140]	; (16704 <pdn_interface_getopt+0x18c>)
   16678:	f006 fe80 	bl	1d37c <strlen>
   1667c:	4287      	cmp	r7, r0
   1667e:	db19      	blt.n	166b4 <pdn_interface_getopt+0x13c>
   16680:	4602      	mov	r2, r0
   16682:	491f      	ldr	r1, [pc, #124]	; (16700 <pdn_interface_getopt+0x188>)
   16684:	481f      	ldr	r0, [pc, #124]	; (16704 <pdn_interface_getopt+0x18c>)
   16686:	f006 fe8c 	bl	1d3a2 <strncmp>
   1668a:	4607      	mov	r7, r0
   1668c:	b990      	cbnz	r0, 166b4 <pdn_interface_getopt+0x13c>
   1668e:	4620      	mov	r0, r4
   16690:	491b      	ldr	r1, [pc, #108]	; (16700 <pdn_interface_getopt+0x188>)
   16692:	f7ff fb35 	bl	15d00 <pdn_state_get_parser>
   16696:	2800      	cmp	r0, #0
   16698:	db99      	blt.n	165ce <pdn_interface_getopt+0x56>
   1669a:	2301      	movs	r3, #1
   1669c:	7030      	strb	r0, [r6, #0]
   1669e:	4638      	mov	r0, r7
   166a0:	602b      	str	r3, [r5, #0]
   166a2:	e797      	b.n	165d4 <pdn_interface_getopt+0x5c>
   166a4:	200e      	movs	r0, #14
   166a6:	e792      	b.n	165ce <pdn_interface_getopt+0x56>
   166a8:	2009      	movs	r0, #9
   166aa:	f7fb f853 	bl	11754 <bsd_os_errno_set>
   166ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   166b2:	e78f      	b.n	165d4 <pdn_interface_getopt+0x5c>
   166b4:	4814      	ldr	r0, [pc, #80]	; (16708 <pdn_interface_getopt+0x190>)
   166b6:	f006 fe61 	bl	1d37c <strlen>
   166ba:	4911      	ldr	r1, [pc, #68]	; (16700 <pdn_interface_getopt+0x188>)
   166bc:	4602      	mov	r2, r0
   166be:	4812      	ldr	r0, [pc, #72]	; (16708 <pdn_interface_getopt+0x190>)
   166c0:	f006 fe6f 	bl	1d3a2 <strncmp>
   166c4:	b980      	cbnz	r0, 166e8 <pdn_interface_getopt+0x170>
   166c6:	2008      	movs	r0, #8
   166c8:	f7fb f844 	bl	11754 <bsd_os_errno_set>
   166cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   166d0:	e77d      	b.n	165ce <pdn_interface_getopt+0x56>
   166d2:	220a      	movs	r2, #10
   166d4:	2108      	movs	r1, #8
   166d6:	6032      	str	r2, [r6, #0]
   166d8:	2204      	movs	r2, #4
   166da:	e79d      	b.n	16618 <pdn_interface_getopt+0xa0>
   166dc:	2016      	movs	r0, #22
   166de:	f7fb f839 	bl	11754 <bsd_os_errno_set>
   166e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   166e6:	e775      	b.n	165d4 <pdn_interface_getopt+0x5c>
   166e8:	2005      	movs	r0, #5
   166ea:	f7fb f833 	bl	11754 <bsd_os_errno_set>
   166ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   166f2:	e76c      	b.n	165ce <pdn_interface_getopt+0x56>
   166f4:	789a0000 	.word	0x789a0000
   166f8:	200208f4 	.word	0x200208f4
   166fc:	0001f5bc 	.word	0x0001f5bc
   16700:	200207f4 	.word	0x200207f4
   16704:	0001f5c8 	.word	0x0001f5c8
   16708:	0001f5ec 	.word	0x0001f5ec
   1670c:	200207f0 	.word	0x200207f0

00016710 <pdn_interface_pdn_id_get>:
   16710:	2900      	cmp	r1, #0
   16712:	f000 83b9 	beq.w	16e88 <pdn_interface_pdn_id_get+0x778>
   16716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1671a:	4ca3      	ldr	r4, [pc, #652]	; (169a8 <pdn_interface_pdn_id_get+0x298>)
   1671c:	2802      	cmp	r0, #2
   1671e:	b083      	sub	sp, #12
   16720:	460d      	mov	r5, r1
   16722:	6823      	ldr	r3, [r4, #0]
   16724:	f000 8094 	beq.w	16850 <pdn_interface_pdn_id_get+0x140>
   16728:	280a      	cmp	r0, #10
   1672a:	d03f      	beq.n	167ac <pdn_interface_pdn_id_get+0x9c>
   1672c:	b11b      	cbz	r3, 16736 <pdn_interface_pdn_id_get+0x26>
   1672e:	689b      	ldr	r3, [r3, #8]
   16730:	2b03      	cmp	r3, #3
   16732:	f000 8127 	beq.w	16984 <pdn_interface_pdn_id_get+0x274>
   16736:	6863      	ldr	r3, [r4, #4]
   16738:	b11b      	cbz	r3, 16742 <pdn_interface_pdn_id_get+0x32>
   1673a:	689b      	ldr	r3, [r3, #8]
   1673c:	2b03      	cmp	r3, #3
   1673e:	f000 8110 	beq.w	16962 <pdn_interface_pdn_id_get+0x252>
   16742:	68a3      	ldr	r3, [r4, #8]
   16744:	b11b      	cbz	r3, 1674e <pdn_interface_pdn_id_get+0x3e>
   16746:	689b      	ldr	r3, [r3, #8]
   16748:	2b03      	cmp	r3, #3
   1674a:	f000 80f9 	beq.w	16940 <pdn_interface_pdn_id_get+0x230>
   1674e:	68e3      	ldr	r3, [r4, #12]
   16750:	b11b      	cbz	r3, 1675a <pdn_interface_pdn_id_get+0x4a>
   16752:	689b      	ldr	r3, [r3, #8]
   16754:	2b03      	cmp	r3, #3
   16756:	f000 80e2 	beq.w	1691e <pdn_interface_pdn_id_get+0x20e>
   1675a:	6923      	ldr	r3, [r4, #16]
   1675c:	b11b      	cbz	r3, 16766 <pdn_interface_pdn_id_get+0x56>
   1675e:	689b      	ldr	r3, [r3, #8]
   16760:	2b03      	cmp	r3, #3
   16762:	f000 8123 	beq.w	169ac <pdn_interface_pdn_id_get+0x29c>
   16766:	6963      	ldr	r3, [r4, #20]
   16768:	b11b      	cbz	r3, 16772 <pdn_interface_pdn_id_get+0x62>
   1676a:	689b      	ldr	r3, [r3, #8]
   1676c:	2b03      	cmp	r3, #3
   1676e:	f000 8161 	beq.w	16a34 <pdn_interface_pdn_id_get+0x324>
   16772:	69a3      	ldr	r3, [r4, #24]
   16774:	b11b      	cbz	r3, 1677e <pdn_interface_pdn_id_get+0x6e>
   16776:	689b      	ldr	r3, [r3, #8]
   16778:	2b03      	cmp	r3, #3
   1677a:	f000 814a 	beq.w	16a12 <pdn_interface_pdn_id_get+0x302>
   1677e:	69e3      	ldr	r3, [r4, #28]
   16780:	b11b      	cbz	r3, 1678a <pdn_interface_pdn_id_get+0x7a>
   16782:	689b      	ldr	r3, [r3, #8]
   16784:	2b03      	cmp	r3, #3
   16786:	f000 8133 	beq.w	169f0 <pdn_interface_pdn_id_get+0x2e0>
   1678a:	6a23      	ldr	r3, [r4, #32]
   1678c:	b11b      	cbz	r3, 16796 <pdn_interface_pdn_id_get+0x86>
   1678e:	689b      	ldr	r3, [r3, #8]
   16790:	2b03      	cmp	r3, #3
   16792:	f000 811c 	beq.w	169ce <pdn_interface_pdn_id_get+0x2be>
   16796:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16798:	b11b      	cbz	r3, 167a2 <pdn_interface_pdn_id_get+0x92>
   1679a:	689b      	ldr	r3, [r3, #8]
   1679c:	2b03      	cmp	r3, #3
   1679e:	f000 80ad 	beq.w	168fc <pdn_interface_pdn_id_get+0x1ec>
   167a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   167a6:	b003      	add	sp, #12
   167a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   167ac:	b11b      	cbz	r3, 167b6 <pdn_interface_pdn_id_get+0xa6>
   167ae:	689b      	ldr	r3, [r3, #8]
   167b0:	2b03      	cmp	r3, #3
   167b2:	f000 8335 	beq.w	16e20 <pdn_interface_pdn_id_get+0x710>
   167b6:	6863      	ldr	r3, [r4, #4]
   167b8:	b11b      	cbz	r3, 167c2 <pdn_interface_pdn_id_get+0xb2>
   167ba:	689b      	ldr	r3, [r3, #8]
   167bc:	2b03      	cmp	r3, #3
   167be:	f000 82fd 	beq.w	16dbc <pdn_interface_pdn_id_get+0x6ac>
   167c2:	68a3      	ldr	r3, [r4, #8]
   167c4:	b11b      	cbz	r3, 167ce <pdn_interface_pdn_id_get+0xbe>
   167c6:	689b      	ldr	r3, [r3, #8]
   167c8:	2b03      	cmp	r3, #3
   167ca:	f000 82d5 	beq.w	16d78 <pdn_interface_pdn_id_get+0x668>
   167ce:	68e3      	ldr	r3, [r4, #12]
   167d0:	b11b      	cbz	r3, 167da <pdn_interface_pdn_id_get+0xca>
   167d2:	689e      	ldr	r6, [r3, #8]
   167d4:	2e03      	cmp	r6, #3
   167d6:	f000 81f0 	beq.w	16bba <pdn_interface_pdn_id_get+0x4aa>
   167da:	6923      	ldr	r3, [r4, #16]
   167dc:	b11b      	cbz	r3, 167e6 <pdn_interface_pdn_id_get+0xd6>
   167de:	689b      	ldr	r3, [r3, #8]
   167e0:	2b03      	cmp	r3, #3
   167e2:	f000 8203 	beq.w	16bec <pdn_interface_pdn_id_get+0x4dc>
   167e6:	6963      	ldr	r3, [r4, #20]
   167e8:	b11b      	cbz	r3, 167f2 <pdn_interface_pdn_id_get+0xe2>
   167ea:	689b      	ldr	r3, [r3, #8]
   167ec:	2b03      	cmp	r3, #3
   167ee:	f000 8215 	beq.w	16c1c <pdn_interface_pdn_id_get+0x50c>
   167f2:	69a3      	ldr	r3, [r4, #24]
   167f4:	b11b      	cbz	r3, 167fe <pdn_interface_pdn_id_get+0xee>
   167f6:	689b      	ldr	r3, [r3, #8]
   167f8:	2b03      	cmp	r3, #3
   167fa:	f000 8227 	beq.w	16c4c <pdn_interface_pdn_id_get+0x53c>
   167fe:	69e3      	ldr	r3, [r4, #28]
   16800:	b11b      	cbz	r3, 1680a <pdn_interface_pdn_id_get+0xfa>
   16802:	689b      	ldr	r3, [r3, #8]
   16804:	2b03      	cmp	r3, #3
   16806:	f000 8239 	beq.w	16c7c <pdn_interface_pdn_id_get+0x56c>
   1680a:	6a23      	ldr	r3, [r4, #32]
   1680c:	b11b      	cbz	r3, 16816 <pdn_interface_pdn_id_get+0x106>
   1680e:	689b      	ldr	r3, [r3, #8]
   16810:	2b03      	cmp	r3, #3
   16812:	f000 824d 	beq.w	16cb0 <pdn_interface_pdn_id_get+0x5a0>
   16816:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16818:	2b00      	cmp	r3, #0
   1681a:	d0c2      	beq.n	167a2 <pdn_interface_pdn_id_get+0x92>
   1681c:	689b      	ldr	r3, [r3, #8]
   1681e:	2b03      	cmp	r3, #3
   16820:	d1bf      	bne.n	167a2 <pdn_interface_pdn_id_get+0x92>
   16822:	4628      	mov	r0, r5
   16824:	f006 fdaa 	bl	1d37c <strlen>
   16828:	4606      	mov	r6, r0
   1682a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1682c:	300c      	adds	r0, #12
   1682e:	f006 fda5 	bl	1d37c <strlen>
   16832:	42b0      	cmp	r0, r6
   16834:	d1b5      	bne.n	167a2 <pdn_interface_pdn_id_get+0x92>
   16836:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16838:	4628      	mov	r0, r5
   1683a:	310c      	adds	r1, #12
   1683c:	f006 fda5 	bl	1d38a <strcmp>
   16840:	2800      	cmp	r0, #0
   16842:	d1ae      	bne.n	167a2 <pdn_interface_pdn_id_get+0x92>
   16844:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16848:	0792      	lsls	r2, r2, #30
   1684a:	d5aa      	bpl.n	167a2 <pdn_interface_pdn_id_get+0x92>
   1684c:	2609      	movs	r6, #9
   1684e:	e11a      	b.n	16a86 <pdn_interface_pdn_id_get+0x376>
   16850:	b11b      	cbz	r3, 1685a <pdn_interface_pdn_id_get+0x14a>
   16852:	689b      	ldr	r3, [r3, #8]
   16854:	2b03      	cmp	r3, #3
   16856:	f000 82fd 	beq.w	16e54 <pdn_interface_pdn_id_get+0x744>
   1685a:	6863      	ldr	r3, [r4, #4]
   1685c:	b11b      	cbz	r3, 16866 <pdn_interface_pdn_id_get+0x156>
   1685e:	689b      	ldr	r3, [r3, #8]
   16860:	2b03      	cmp	r3, #3
   16862:	f000 82c5 	beq.w	16df0 <pdn_interface_pdn_id_get+0x6e0>
   16866:	68a3      	ldr	r3, [r4, #8]
   16868:	b11b      	cbz	r3, 16872 <pdn_interface_pdn_id_get+0x162>
   1686a:	689b      	ldr	r3, [r3, #8]
   1686c:	2b03      	cmp	r3, #3
   1686e:	f000 8269 	beq.w	16d44 <pdn_interface_pdn_id_get+0x634>
   16872:	68e3      	ldr	r3, [r4, #12]
   16874:	b11b      	cbz	r3, 1687e <pdn_interface_pdn_id_get+0x16e>
   16876:	689e      	ldr	r6, [r3, #8]
   16878:	2e03      	cmp	r6, #3
   1687a:	f000 80ec 	beq.w	16a56 <pdn_interface_pdn_id_get+0x346>
   1687e:	6923      	ldr	r3, [r4, #16]
   16880:	b11b      	cbz	r3, 1688a <pdn_interface_pdn_id_get+0x17a>
   16882:	689b      	ldr	r3, [r3, #8]
   16884:	2b03      	cmp	r3, #3
   16886:	f000 814a 	beq.w	16b1e <pdn_interface_pdn_id_get+0x40e>
   1688a:	6963      	ldr	r3, [r4, #20]
   1688c:	b11b      	cbz	r3, 16896 <pdn_interface_pdn_id_get+0x186>
   1688e:	689b      	ldr	r3, [r3, #8]
   16890:	2b03      	cmp	r3, #3
   16892:	f000 815e 	beq.w	16b52 <pdn_interface_pdn_id_get+0x442>
   16896:	69a3      	ldr	r3, [r4, #24]
   16898:	b11b      	cbz	r3, 168a2 <pdn_interface_pdn_id_get+0x192>
   1689a:	689b      	ldr	r3, [r3, #8]
   1689c:	2b03      	cmp	r3, #3
   1689e:	f000 8172 	beq.w	16b86 <pdn_interface_pdn_id_get+0x476>
   168a2:	69e3      	ldr	r3, [r4, #28]
   168a4:	b11b      	cbz	r3, 168ae <pdn_interface_pdn_id_get+0x19e>
   168a6:	689b      	ldr	r3, [r3, #8]
   168a8:	2b03      	cmp	r3, #3
   168aa:	f000 821b 	beq.w	16ce4 <pdn_interface_pdn_id_get+0x5d4>
   168ae:	6a23      	ldr	r3, [r4, #32]
   168b0:	b11b      	cbz	r3, 168ba <pdn_interface_pdn_id_get+0x1aa>
   168b2:	689b      	ldr	r3, [r3, #8]
   168b4:	2b03      	cmp	r3, #3
   168b6:	f000 822d 	beq.w	16d14 <pdn_interface_pdn_id_get+0x604>
   168ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   168bc:	2b00      	cmp	r3, #0
   168be:	f43f af70 	beq.w	167a2 <pdn_interface_pdn_id_get+0x92>
   168c2:	689b      	ldr	r3, [r3, #8]
   168c4:	2b03      	cmp	r3, #3
   168c6:	f47f af6c 	bne.w	167a2 <pdn_interface_pdn_id_get+0x92>
   168ca:	4628      	mov	r0, r5
   168cc:	f006 fd56 	bl	1d37c <strlen>
   168d0:	4606      	mov	r6, r0
   168d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   168d4:	300c      	adds	r0, #12
   168d6:	f006 fd51 	bl	1d37c <strlen>
   168da:	4286      	cmp	r6, r0
   168dc:	f47f af61 	bne.w	167a2 <pdn_interface_pdn_id_get+0x92>
   168e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   168e2:	4628      	mov	r0, r5
   168e4:	310c      	adds	r1, #12
   168e6:	f006 fd50 	bl	1d38a <strcmp>
   168ea:	2800      	cmp	r0, #0
   168ec:	f47f af59 	bne.w	167a2 <pdn_interface_pdn_id_get+0x92>
   168f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   168f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   168f4:	07d2      	lsls	r2, r2, #31
   168f6:	f57f af54 	bpl.w	167a2 <pdn_interface_pdn_id_get+0x92>
   168fa:	e7a7      	b.n	1684c <pdn_interface_pdn_id_get+0x13c>
   168fc:	4628      	mov	r0, r5
   168fe:	f006 fd3d 	bl	1d37c <strlen>
   16902:	4606      	mov	r6, r0
   16904:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16906:	300c      	adds	r0, #12
   16908:	f006 fd38 	bl	1d37c <strlen>
   1690c:	42b0      	cmp	r0, r6
   1690e:	f47f af48 	bne.w	167a2 <pdn_interface_pdn_id_get+0x92>
   16912:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16914:	4628      	mov	r0, r5
   16916:	310c      	adds	r1, #12
   16918:	f006 fd37 	bl	1d38a <strcmp>
   1691c:	e741      	b.n	167a2 <pdn_interface_pdn_id_get+0x92>
   1691e:	4628      	mov	r0, r5
   16920:	f006 fd2c 	bl	1d37c <strlen>
   16924:	4606      	mov	r6, r0
   16926:	68e0      	ldr	r0, [r4, #12]
   16928:	300c      	adds	r0, #12
   1692a:	f006 fd27 	bl	1d37c <strlen>
   1692e:	4286      	cmp	r6, r0
   16930:	f47f af13 	bne.w	1675a <pdn_interface_pdn_id_get+0x4a>
   16934:	68e1      	ldr	r1, [r4, #12]
   16936:	4628      	mov	r0, r5
   16938:	310c      	adds	r1, #12
   1693a:	f006 fd26 	bl	1d38a <strcmp>
   1693e:	e70c      	b.n	1675a <pdn_interface_pdn_id_get+0x4a>
   16940:	4628      	mov	r0, r5
   16942:	f006 fd1b 	bl	1d37c <strlen>
   16946:	4606      	mov	r6, r0
   16948:	68a0      	ldr	r0, [r4, #8]
   1694a:	300c      	adds	r0, #12
   1694c:	f006 fd16 	bl	1d37c <strlen>
   16950:	4286      	cmp	r6, r0
   16952:	f47f aefc 	bne.w	1674e <pdn_interface_pdn_id_get+0x3e>
   16956:	68a1      	ldr	r1, [r4, #8]
   16958:	4628      	mov	r0, r5
   1695a:	310c      	adds	r1, #12
   1695c:	f006 fd15 	bl	1d38a <strcmp>
   16960:	e6f5      	b.n	1674e <pdn_interface_pdn_id_get+0x3e>
   16962:	4628      	mov	r0, r5
   16964:	f006 fd0a 	bl	1d37c <strlen>
   16968:	4606      	mov	r6, r0
   1696a:	6860      	ldr	r0, [r4, #4]
   1696c:	300c      	adds	r0, #12
   1696e:	f006 fd05 	bl	1d37c <strlen>
   16972:	4286      	cmp	r6, r0
   16974:	f47f aee5 	bne.w	16742 <pdn_interface_pdn_id_get+0x32>
   16978:	6861      	ldr	r1, [r4, #4]
   1697a:	4628      	mov	r0, r5
   1697c:	310c      	adds	r1, #12
   1697e:	f006 fd04 	bl	1d38a <strcmp>
   16982:	e6de      	b.n	16742 <pdn_interface_pdn_id_get+0x32>
   16984:	4608      	mov	r0, r1
   16986:	f006 fcf9 	bl	1d37c <strlen>
   1698a:	4606      	mov	r6, r0
   1698c:	6820      	ldr	r0, [r4, #0]
   1698e:	300c      	adds	r0, #12
   16990:	f006 fcf4 	bl	1d37c <strlen>
   16994:	4286      	cmp	r6, r0
   16996:	f47f aece 	bne.w	16736 <pdn_interface_pdn_id_get+0x26>
   1699a:	6821      	ldr	r1, [r4, #0]
   1699c:	4628      	mov	r0, r5
   1699e:	310c      	adds	r1, #12
   169a0:	f006 fcf3 	bl	1d38a <strcmp>
   169a4:	e6c7      	b.n	16736 <pdn_interface_pdn_id_get+0x26>
   169a6:	bf00      	nop
   169a8:	200208f4 	.word	0x200208f4
   169ac:	4628      	mov	r0, r5
   169ae:	f006 fce5 	bl	1d37c <strlen>
   169b2:	4606      	mov	r6, r0
   169b4:	6920      	ldr	r0, [r4, #16]
   169b6:	300c      	adds	r0, #12
   169b8:	f006 fce0 	bl	1d37c <strlen>
   169bc:	4286      	cmp	r6, r0
   169be:	f47f aed2 	bne.w	16766 <pdn_interface_pdn_id_get+0x56>
   169c2:	6921      	ldr	r1, [r4, #16]
   169c4:	4628      	mov	r0, r5
   169c6:	310c      	adds	r1, #12
   169c8:	f006 fcdf 	bl	1d38a <strcmp>
   169cc:	e6cb      	b.n	16766 <pdn_interface_pdn_id_get+0x56>
   169ce:	4628      	mov	r0, r5
   169d0:	f006 fcd4 	bl	1d37c <strlen>
   169d4:	4606      	mov	r6, r0
   169d6:	6a20      	ldr	r0, [r4, #32]
   169d8:	300c      	adds	r0, #12
   169da:	f006 fccf 	bl	1d37c <strlen>
   169de:	4286      	cmp	r6, r0
   169e0:	f47f aed9 	bne.w	16796 <pdn_interface_pdn_id_get+0x86>
   169e4:	6a21      	ldr	r1, [r4, #32]
   169e6:	4628      	mov	r0, r5
   169e8:	310c      	adds	r1, #12
   169ea:	f006 fcce 	bl	1d38a <strcmp>
   169ee:	e6d2      	b.n	16796 <pdn_interface_pdn_id_get+0x86>
   169f0:	4628      	mov	r0, r5
   169f2:	f006 fcc3 	bl	1d37c <strlen>
   169f6:	4606      	mov	r6, r0
   169f8:	69e0      	ldr	r0, [r4, #28]
   169fa:	300c      	adds	r0, #12
   169fc:	f006 fcbe 	bl	1d37c <strlen>
   16a00:	4286      	cmp	r6, r0
   16a02:	f47f aec2 	bne.w	1678a <pdn_interface_pdn_id_get+0x7a>
   16a06:	69e1      	ldr	r1, [r4, #28]
   16a08:	4628      	mov	r0, r5
   16a0a:	310c      	adds	r1, #12
   16a0c:	f006 fcbd 	bl	1d38a <strcmp>
   16a10:	e6bb      	b.n	1678a <pdn_interface_pdn_id_get+0x7a>
   16a12:	4628      	mov	r0, r5
   16a14:	f006 fcb2 	bl	1d37c <strlen>
   16a18:	4606      	mov	r6, r0
   16a1a:	69a0      	ldr	r0, [r4, #24]
   16a1c:	300c      	adds	r0, #12
   16a1e:	f006 fcad 	bl	1d37c <strlen>
   16a22:	4286      	cmp	r6, r0
   16a24:	f47f aeab 	bne.w	1677e <pdn_interface_pdn_id_get+0x6e>
   16a28:	69a1      	ldr	r1, [r4, #24]
   16a2a:	4628      	mov	r0, r5
   16a2c:	310c      	adds	r1, #12
   16a2e:	f006 fcac 	bl	1d38a <strcmp>
   16a32:	e6a4      	b.n	1677e <pdn_interface_pdn_id_get+0x6e>
   16a34:	4628      	mov	r0, r5
   16a36:	f006 fca1 	bl	1d37c <strlen>
   16a3a:	4606      	mov	r6, r0
   16a3c:	6960      	ldr	r0, [r4, #20]
   16a3e:	300c      	adds	r0, #12
   16a40:	f006 fc9c 	bl	1d37c <strlen>
   16a44:	4286      	cmp	r6, r0
   16a46:	f47f ae94 	bne.w	16772 <pdn_interface_pdn_id_get+0x62>
   16a4a:	6961      	ldr	r1, [r4, #20]
   16a4c:	4628      	mov	r0, r5
   16a4e:	310c      	adds	r1, #12
   16a50:	f006 fc9b 	bl	1d38a <strcmp>
   16a54:	e68d      	b.n	16772 <pdn_interface_pdn_id_get+0x62>
   16a56:	4628      	mov	r0, r5
   16a58:	f006 fc90 	bl	1d37c <strlen>
   16a5c:	4607      	mov	r7, r0
   16a5e:	68e0      	ldr	r0, [r4, #12]
   16a60:	300c      	adds	r0, #12
   16a62:	f006 fc8b 	bl	1d37c <strlen>
   16a66:	4287      	cmp	r7, r0
   16a68:	f47f af09 	bne.w	1687e <pdn_interface_pdn_id_get+0x16e>
   16a6c:	68e1      	ldr	r1, [r4, #12]
   16a6e:	4628      	mov	r0, r5
   16a70:	310c      	adds	r1, #12
   16a72:	f006 fc8a 	bl	1d38a <strcmp>
   16a76:	2800      	cmp	r0, #0
   16a78:	f47f af01 	bne.w	1687e <pdn_interface_pdn_id_get+0x16e>
   16a7c:	68e3      	ldr	r3, [r4, #12]
   16a7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16a80:	07d1      	lsls	r1, r2, #31
   16a82:	f57f aefc 	bpl.w	1687e <pdn_interface_pdn_id_get+0x16e>
   16a86:	6858      	ldr	r0, [r3, #4]
   16a88:	1c43      	adds	r3, r0, #1
   16a8a:	f47f ae8c 	bne.w	167a6 <pdn_interface_pdn_id_get+0x96>
   16a8e:	4dc6      	ldr	r5, [pc, #792]	; (16da8 <pdn_interface_pdn_id_get+0x698>)
   16a90:	4ac6      	ldr	r2, [pc, #792]	; (16dac <pdn_interface_pdn_id_get+0x69c>)
   16a92:	f44f 7180 	mov.w	r1, #256	; 0x100
   16a96:	4628      	mov	r0, r5
   16a98:	f7fa f90e 	bl	10cb8 <snprintf>
   16a9c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16aa0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   16aa4:	681b      	ldr	r3, [r3, #0]
   16aa6:	4ac2      	ldr	r2, [pc, #776]	; (16db0 <pdn_interface_pdn_id_get+0x6a0>)
   16aa8:	4428      	add	r0, r5
   16aaa:	f8df 830c 	ldr.w	r8, [pc, #780]	; 16db8 <pdn_interface_pdn_id_get+0x6a8>
   16aae:	f7fa f903 	bl	10cb8 <snprintf>
   16ab2:	4628      	mov	r0, r5
   16ab4:	f8d8 9000 	ldr.w	r9, [r8]
   16ab8:	2700      	movs	r7, #0
   16aba:	f006 fc5f 	bl	1d37c <strlen>
   16abe:	4629      	mov	r1, r5
   16ac0:	4602      	mov	r2, r0
   16ac2:	463b      	mov	r3, r7
   16ac4:	4648      	mov	r0, r9
   16ac6:	9701      	str	r7, [sp, #4]
   16ac8:	9700      	str	r7, [sp, #0]
   16aca:	f7fc f94d 	bl	12d68 <at_interface_write>
   16ace:	4681      	mov	r9, r0
   16ad0:	4628      	mov	r0, r5
   16ad2:	f006 fc53 	bl	1d37c <strlen>
   16ad6:	4548      	cmp	r0, r9
   16ad8:	f040 81e9 	bne.w	16eae <pdn_interface_pdn_id_get+0x79e>
   16adc:	463b      	mov	r3, r7
   16ade:	f44f 7280 	mov.w	r2, #256	; 0x100
   16ae2:	e9cd 7700 	strd	r7, r7, [sp]
   16ae6:	4629      	mov	r1, r5
   16ae8:	f8d8 0000 	ldr.w	r0, [r8]
   16aec:	f7fc fa24 	bl	12f38 <at_interface_read>
   16af0:	4607      	mov	r7, r0
   16af2:	48b0      	ldr	r0, [pc, #704]	; (16db4 <pdn_interface_pdn_id_get+0x6a4>)
   16af4:	f006 fc42 	bl	1d37c <strlen>
   16af8:	4287      	cmp	r7, r0
   16afa:	4602      	mov	r2, r0
   16afc:	f2c0 81c7 	blt.w	16e8e <pdn_interface_pdn_id_get+0x77e>
   16b00:	4629      	mov	r1, r5
   16b02:	48ac      	ldr	r0, [pc, #688]	; (16db4 <pdn_interface_pdn_id_get+0x6a4>)
   16b04:	f006 fc4d 	bl	1d3a2 <strncmp>
   16b08:	2800      	cmp	r0, #0
   16b0a:	f040 81c0 	bne.w	16e8e <pdn_interface_pdn_id_get+0x77e>
   16b0e:	4629      	mov	r1, r5
   16b10:	4630      	mov	r0, r6
   16b12:	f7ff f92b 	bl	15d6c <pdn_id_get_parser>
   16b16:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16b1a:	6858      	ldr	r0, [r3, #4]
   16b1c:	e643      	b.n	167a6 <pdn_interface_pdn_id_get+0x96>
   16b1e:	4628      	mov	r0, r5
   16b20:	f006 fc2c 	bl	1d37c <strlen>
   16b24:	4606      	mov	r6, r0
   16b26:	6920      	ldr	r0, [r4, #16]
   16b28:	300c      	adds	r0, #12
   16b2a:	f006 fc27 	bl	1d37c <strlen>
   16b2e:	4286      	cmp	r6, r0
   16b30:	f47f aeab 	bne.w	1688a <pdn_interface_pdn_id_get+0x17a>
   16b34:	6921      	ldr	r1, [r4, #16]
   16b36:	4628      	mov	r0, r5
   16b38:	310c      	adds	r1, #12
   16b3a:	f006 fc26 	bl	1d38a <strcmp>
   16b3e:	2800      	cmp	r0, #0
   16b40:	f47f aea3 	bne.w	1688a <pdn_interface_pdn_id_get+0x17a>
   16b44:	6923      	ldr	r3, [r4, #16]
   16b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b48:	07d2      	lsls	r2, r2, #31
   16b4a:	f57f ae9e 	bpl.w	1688a <pdn_interface_pdn_id_get+0x17a>
   16b4e:	2604      	movs	r6, #4
   16b50:	e799      	b.n	16a86 <pdn_interface_pdn_id_get+0x376>
   16b52:	4628      	mov	r0, r5
   16b54:	f006 fc12 	bl	1d37c <strlen>
   16b58:	4606      	mov	r6, r0
   16b5a:	6960      	ldr	r0, [r4, #20]
   16b5c:	300c      	adds	r0, #12
   16b5e:	f006 fc0d 	bl	1d37c <strlen>
   16b62:	4286      	cmp	r6, r0
   16b64:	f47f ae97 	bne.w	16896 <pdn_interface_pdn_id_get+0x186>
   16b68:	6961      	ldr	r1, [r4, #20]
   16b6a:	4628      	mov	r0, r5
   16b6c:	310c      	adds	r1, #12
   16b6e:	f006 fc0c 	bl	1d38a <strcmp>
   16b72:	2800      	cmp	r0, #0
   16b74:	f47f ae8f 	bne.w	16896 <pdn_interface_pdn_id_get+0x186>
   16b78:	6963      	ldr	r3, [r4, #20]
   16b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16b7c:	07d7      	lsls	r7, r2, #31
   16b7e:	f57f ae8a 	bpl.w	16896 <pdn_interface_pdn_id_get+0x186>
   16b82:	2605      	movs	r6, #5
   16b84:	e77f      	b.n	16a86 <pdn_interface_pdn_id_get+0x376>
   16b86:	4628      	mov	r0, r5
   16b88:	f006 fbf8 	bl	1d37c <strlen>
   16b8c:	4606      	mov	r6, r0
   16b8e:	69a0      	ldr	r0, [r4, #24]
   16b90:	300c      	adds	r0, #12
   16b92:	f006 fbf3 	bl	1d37c <strlen>
   16b96:	4286      	cmp	r6, r0
   16b98:	f47f ae83 	bne.w	168a2 <pdn_interface_pdn_id_get+0x192>
   16b9c:	69a1      	ldr	r1, [r4, #24]
   16b9e:	4628      	mov	r0, r5
   16ba0:	310c      	adds	r1, #12
   16ba2:	f006 fbf2 	bl	1d38a <strcmp>
   16ba6:	2800      	cmp	r0, #0
   16ba8:	f47f ae7b 	bne.w	168a2 <pdn_interface_pdn_id_get+0x192>
   16bac:	69a3      	ldr	r3, [r4, #24]
   16bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16bb0:	07d6      	lsls	r6, r2, #31
   16bb2:	f57f ae76 	bpl.w	168a2 <pdn_interface_pdn_id_get+0x192>
   16bb6:	2606      	movs	r6, #6
   16bb8:	e765      	b.n	16a86 <pdn_interface_pdn_id_get+0x376>
   16bba:	4628      	mov	r0, r5
   16bbc:	f006 fbde 	bl	1d37c <strlen>
   16bc0:	4607      	mov	r7, r0
   16bc2:	68e0      	ldr	r0, [r4, #12]
   16bc4:	300c      	adds	r0, #12
   16bc6:	f006 fbd9 	bl	1d37c <strlen>
   16bca:	4287      	cmp	r7, r0
   16bcc:	f47f ae05 	bne.w	167da <pdn_interface_pdn_id_get+0xca>
   16bd0:	68e1      	ldr	r1, [r4, #12]
   16bd2:	4628      	mov	r0, r5
   16bd4:	310c      	adds	r1, #12
   16bd6:	f006 fbd8 	bl	1d38a <strcmp>
   16bda:	2800      	cmp	r0, #0
   16bdc:	f47f adfd 	bne.w	167da <pdn_interface_pdn_id_get+0xca>
   16be0:	68e3      	ldr	r3, [r4, #12]
   16be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16be4:	0791      	lsls	r1, r2, #30
   16be6:	f53f af4e 	bmi.w	16a86 <pdn_interface_pdn_id_get+0x376>
   16bea:	e5f6      	b.n	167da <pdn_interface_pdn_id_get+0xca>
   16bec:	4628      	mov	r0, r5
   16bee:	f006 fbc5 	bl	1d37c <strlen>
   16bf2:	4606      	mov	r6, r0
   16bf4:	6920      	ldr	r0, [r4, #16]
   16bf6:	300c      	adds	r0, #12
   16bf8:	f006 fbc0 	bl	1d37c <strlen>
   16bfc:	4286      	cmp	r6, r0
   16bfe:	f47f adf2 	bne.w	167e6 <pdn_interface_pdn_id_get+0xd6>
   16c02:	6921      	ldr	r1, [r4, #16]
   16c04:	4628      	mov	r0, r5
   16c06:	310c      	adds	r1, #12
   16c08:	f006 fbbf 	bl	1d38a <strcmp>
   16c0c:	2800      	cmp	r0, #0
   16c0e:	f47f adea 	bne.w	167e6 <pdn_interface_pdn_id_get+0xd6>
   16c12:	6923      	ldr	r3, [r4, #16]
   16c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16c16:	0792      	lsls	r2, r2, #30
   16c18:	d499      	bmi.n	16b4e <pdn_interface_pdn_id_get+0x43e>
   16c1a:	e5e4      	b.n	167e6 <pdn_interface_pdn_id_get+0xd6>
   16c1c:	4628      	mov	r0, r5
   16c1e:	f006 fbad 	bl	1d37c <strlen>
   16c22:	4606      	mov	r6, r0
   16c24:	6960      	ldr	r0, [r4, #20]
   16c26:	300c      	adds	r0, #12
   16c28:	f006 fba8 	bl	1d37c <strlen>
   16c2c:	4286      	cmp	r6, r0
   16c2e:	f47f ade0 	bne.w	167f2 <pdn_interface_pdn_id_get+0xe2>
   16c32:	6961      	ldr	r1, [r4, #20]
   16c34:	4628      	mov	r0, r5
   16c36:	310c      	adds	r1, #12
   16c38:	f006 fba7 	bl	1d38a <strcmp>
   16c3c:	2800      	cmp	r0, #0
   16c3e:	f47f add8 	bne.w	167f2 <pdn_interface_pdn_id_get+0xe2>
   16c42:	6963      	ldr	r3, [r4, #20]
   16c44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16c46:	0797      	lsls	r7, r2, #30
   16c48:	d49b      	bmi.n	16b82 <pdn_interface_pdn_id_get+0x472>
   16c4a:	e5d2      	b.n	167f2 <pdn_interface_pdn_id_get+0xe2>
   16c4c:	4628      	mov	r0, r5
   16c4e:	f006 fb95 	bl	1d37c <strlen>
   16c52:	4606      	mov	r6, r0
   16c54:	69a0      	ldr	r0, [r4, #24]
   16c56:	300c      	adds	r0, #12
   16c58:	f006 fb90 	bl	1d37c <strlen>
   16c5c:	4286      	cmp	r6, r0
   16c5e:	f47f adce 	bne.w	167fe <pdn_interface_pdn_id_get+0xee>
   16c62:	69a1      	ldr	r1, [r4, #24]
   16c64:	4628      	mov	r0, r5
   16c66:	310c      	adds	r1, #12
   16c68:	f006 fb8f 	bl	1d38a <strcmp>
   16c6c:	2800      	cmp	r0, #0
   16c6e:	f47f adc6 	bne.w	167fe <pdn_interface_pdn_id_get+0xee>
   16c72:	69a3      	ldr	r3, [r4, #24]
   16c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16c76:	0796      	lsls	r6, r2, #30
   16c78:	d49d      	bmi.n	16bb6 <pdn_interface_pdn_id_get+0x4a6>
   16c7a:	e5c0      	b.n	167fe <pdn_interface_pdn_id_get+0xee>
   16c7c:	4628      	mov	r0, r5
   16c7e:	f006 fb7d 	bl	1d37c <strlen>
   16c82:	4606      	mov	r6, r0
   16c84:	69e0      	ldr	r0, [r4, #28]
   16c86:	300c      	adds	r0, #12
   16c88:	f006 fb78 	bl	1d37c <strlen>
   16c8c:	4286      	cmp	r6, r0
   16c8e:	f47f adbc 	bne.w	1680a <pdn_interface_pdn_id_get+0xfa>
   16c92:	69e1      	ldr	r1, [r4, #28]
   16c94:	4628      	mov	r0, r5
   16c96:	310c      	adds	r1, #12
   16c98:	f006 fb77 	bl	1d38a <strcmp>
   16c9c:	2800      	cmp	r0, #0
   16c9e:	f47f adb4 	bne.w	1680a <pdn_interface_pdn_id_get+0xfa>
   16ca2:	69e3      	ldr	r3, [r4, #28]
   16ca4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16ca6:	0790      	lsls	r0, r2, #30
   16ca8:	f57f adaf 	bpl.w	1680a <pdn_interface_pdn_id_get+0xfa>
   16cac:	2607      	movs	r6, #7
   16cae:	e6ea      	b.n	16a86 <pdn_interface_pdn_id_get+0x376>
   16cb0:	4628      	mov	r0, r5
   16cb2:	f006 fb63 	bl	1d37c <strlen>
   16cb6:	4606      	mov	r6, r0
   16cb8:	6a20      	ldr	r0, [r4, #32]
   16cba:	300c      	adds	r0, #12
   16cbc:	f006 fb5e 	bl	1d37c <strlen>
   16cc0:	4286      	cmp	r6, r0
   16cc2:	f47f ada8 	bne.w	16816 <pdn_interface_pdn_id_get+0x106>
   16cc6:	6a21      	ldr	r1, [r4, #32]
   16cc8:	4628      	mov	r0, r5
   16cca:	310c      	adds	r1, #12
   16ccc:	f006 fb5d 	bl	1d38a <strcmp>
   16cd0:	2800      	cmp	r0, #0
   16cd2:	f47f ada0 	bne.w	16816 <pdn_interface_pdn_id_get+0x106>
   16cd6:	6a23      	ldr	r3, [r4, #32]
   16cd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16cda:	0791      	lsls	r1, r2, #30
   16cdc:	f57f ad9b 	bpl.w	16816 <pdn_interface_pdn_id_get+0x106>
   16ce0:	2608      	movs	r6, #8
   16ce2:	e6d0      	b.n	16a86 <pdn_interface_pdn_id_get+0x376>
   16ce4:	4628      	mov	r0, r5
   16ce6:	f006 fb49 	bl	1d37c <strlen>
   16cea:	4606      	mov	r6, r0
   16cec:	69e0      	ldr	r0, [r4, #28]
   16cee:	300c      	adds	r0, #12
   16cf0:	f006 fb44 	bl	1d37c <strlen>
   16cf4:	4286      	cmp	r6, r0
   16cf6:	f47f adda 	bne.w	168ae <pdn_interface_pdn_id_get+0x19e>
   16cfa:	69e1      	ldr	r1, [r4, #28]
   16cfc:	4628      	mov	r0, r5
   16cfe:	310c      	adds	r1, #12
   16d00:	f006 fb43 	bl	1d38a <strcmp>
   16d04:	2800      	cmp	r0, #0
   16d06:	f47f add2 	bne.w	168ae <pdn_interface_pdn_id_get+0x19e>
   16d0a:	69e3      	ldr	r3, [r4, #28]
   16d0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16d0e:	07d0      	lsls	r0, r2, #31
   16d10:	d4cc      	bmi.n	16cac <pdn_interface_pdn_id_get+0x59c>
   16d12:	e5cc      	b.n	168ae <pdn_interface_pdn_id_get+0x19e>
   16d14:	4628      	mov	r0, r5
   16d16:	f006 fb31 	bl	1d37c <strlen>
   16d1a:	4606      	mov	r6, r0
   16d1c:	6a20      	ldr	r0, [r4, #32]
   16d1e:	300c      	adds	r0, #12
   16d20:	f006 fb2c 	bl	1d37c <strlen>
   16d24:	4286      	cmp	r6, r0
   16d26:	f47f adc8 	bne.w	168ba <pdn_interface_pdn_id_get+0x1aa>
   16d2a:	6a21      	ldr	r1, [r4, #32]
   16d2c:	4628      	mov	r0, r5
   16d2e:	310c      	adds	r1, #12
   16d30:	f006 fb2b 	bl	1d38a <strcmp>
   16d34:	2800      	cmp	r0, #0
   16d36:	f47f adc0 	bne.w	168ba <pdn_interface_pdn_id_get+0x1aa>
   16d3a:	6a23      	ldr	r3, [r4, #32]
   16d3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16d3e:	07d1      	lsls	r1, r2, #31
   16d40:	d4ce      	bmi.n	16ce0 <pdn_interface_pdn_id_get+0x5d0>
   16d42:	e5ba      	b.n	168ba <pdn_interface_pdn_id_get+0x1aa>
   16d44:	4628      	mov	r0, r5
   16d46:	f006 fb19 	bl	1d37c <strlen>
   16d4a:	4606      	mov	r6, r0
   16d4c:	68a0      	ldr	r0, [r4, #8]
   16d4e:	300c      	adds	r0, #12
   16d50:	f006 fb14 	bl	1d37c <strlen>
   16d54:	4286      	cmp	r6, r0
   16d56:	f47f ad8c 	bne.w	16872 <pdn_interface_pdn_id_get+0x162>
   16d5a:	68a1      	ldr	r1, [r4, #8]
   16d5c:	4628      	mov	r0, r5
   16d5e:	310c      	adds	r1, #12
   16d60:	f006 fb13 	bl	1d38a <strcmp>
   16d64:	2800      	cmp	r0, #0
   16d66:	f47f ad84 	bne.w	16872 <pdn_interface_pdn_id_get+0x162>
   16d6a:	68a3      	ldr	r3, [r4, #8]
   16d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16d6e:	07d0      	lsls	r0, r2, #31
   16d70:	f57f ad7f 	bpl.w	16872 <pdn_interface_pdn_id_get+0x162>
   16d74:	2602      	movs	r6, #2
   16d76:	e686      	b.n	16a86 <pdn_interface_pdn_id_get+0x376>
   16d78:	4628      	mov	r0, r5
   16d7a:	f006 faff 	bl	1d37c <strlen>
   16d7e:	4606      	mov	r6, r0
   16d80:	68a0      	ldr	r0, [r4, #8]
   16d82:	300c      	adds	r0, #12
   16d84:	f006 fafa 	bl	1d37c <strlen>
   16d88:	4286      	cmp	r6, r0
   16d8a:	f47f ad20 	bne.w	167ce <pdn_interface_pdn_id_get+0xbe>
   16d8e:	68a1      	ldr	r1, [r4, #8]
   16d90:	4628      	mov	r0, r5
   16d92:	310c      	adds	r1, #12
   16d94:	f006 faf9 	bl	1d38a <strcmp>
   16d98:	2800      	cmp	r0, #0
   16d9a:	f47f ad18 	bne.w	167ce <pdn_interface_pdn_id_get+0xbe>
   16d9e:	68a3      	ldr	r3, [r4, #8]
   16da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16da2:	0790      	lsls	r0, r2, #30
   16da4:	d4e6      	bmi.n	16d74 <pdn_interface_pdn_id_get+0x664>
   16da6:	e512      	b.n	167ce <pdn_interface_pdn_id_get+0xbe>
   16da8:	200207f4 	.word	0x200207f4
   16dac:	0001f598 	.word	0x0001f598
   16db0:	0001f594 	.word	0x0001f594
   16db4:	0001f5a8 	.word	0x0001f5a8
   16db8:	200207f0 	.word	0x200207f0
   16dbc:	4628      	mov	r0, r5
   16dbe:	f006 fadd 	bl	1d37c <strlen>
   16dc2:	4606      	mov	r6, r0
   16dc4:	6860      	ldr	r0, [r4, #4]
   16dc6:	300c      	adds	r0, #12
   16dc8:	f006 fad8 	bl	1d37c <strlen>
   16dcc:	4286      	cmp	r6, r0
   16dce:	f47f acf8 	bne.w	167c2 <pdn_interface_pdn_id_get+0xb2>
   16dd2:	6861      	ldr	r1, [r4, #4]
   16dd4:	4628      	mov	r0, r5
   16dd6:	310c      	adds	r1, #12
   16dd8:	f006 fad7 	bl	1d38a <strcmp>
   16ddc:	2800      	cmp	r0, #0
   16dde:	f47f acf0 	bne.w	167c2 <pdn_interface_pdn_id_get+0xb2>
   16de2:	6863      	ldr	r3, [r4, #4]
   16de4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16de6:	0796      	lsls	r6, r2, #30
   16de8:	f57f aceb 	bpl.w	167c2 <pdn_interface_pdn_id_get+0xb2>
   16dec:	2601      	movs	r6, #1
   16dee:	e64a      	b.n	16a86 <pdn_interface_pdn_id_get+0x376>
   16df0:	4628      	mov	r0, r5
   16df2:	f006 fac3 	bl	1d37c <strlen>
   16df6:	4606      	mov	r6, r0
   16df8:	6860      	ldr	r0, [r4, #4]
   16dfa:	300c      	adds	r0, #12
   16dfc:	f006 fabe 	bl	1d37c <strlen>
   16e00:	4286      	cmp	r6, r0
   16e02:	f47f ad30 	bne.w	16866 <pdn_interface_pdn_id_get+0x156>
   16e06:	6861      	ldr	r1, [r4, #4]
   16e08:	4628      	mov	r0, r5
   16e0a:	310c      	adds	r1, #12
   16e0c:	f006 fabd 	bl	1d38a <strcmp>
   16e10:	2800      	cmp	r0, #0
   16e12:	f47f ad28 	bne.w	16866 <pdn_interface_pdn_id_get+0x156>
   16e16:	6863      	ldr	r3, [r4, #4]
   16e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e1a:	07d6      	lsls	r6, r2, #31
   16e1c:	d4e6      	bmi.n	16dec <pdn_interface_pdn_id_get+0x6dc>
   16e1e:	e522      	b.n	16866 <pdn_interface_pdn_id_get+0x156>
   16e20:	4608      	mov	r0, r1
   16e22:	f006 faab 	bl	1d37c <strlen>
   16e26:	4606      	mov	r6, r0
   16e28:	6820      	ldr	r0, [r4, #0]
   16e2a:	300c      	adds	r0, #12
   16e2c:	f006 faa6 	bl	1d37c <strlen>
   16e30:	4286      	cmp	r6, r0
   16e32:	f47f acc0 	bne.w	167b6 <pdn_interface_pdn_id_get+0xa6>
   16e36:	6821      	ldr	r1, [r4, #0]
   16e38:	4628      	mov	r0, r5
   16e3a:	310c      	adds	r1, #12
   16e3c:	f006 faa5 	bl	1d38a <strcmp>
   16e40:	4606      	mov	r6, r0
   16e42:	2800      	cmp	r0, #0
   16e44:	f47f acb7 	bne.w	167b6 <pdn_interface_pdn_id_get+0xa6>
   16e48:	6823      	ldr	r3, [r4, #0]
   16e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e4c:	0797      	lsls	r7, r2, #30
   16e4e:	f53f ae1a 	bmi.w	16a86 <pdn_interface_pdn_id_get+0x376>
   16e52:	e4b0      	b.n	167b6 <pdn_interface_pdn_id_get+0xa6>
   16e54:	4608      	mov	r0, r1
   16e56:	f006 fa91 	bl	1d37c <strlen>
   16e5a:	4606      	mov	r6, r0
   16e5c:	6820      	ldr	r0, [r4, #0]
   16e5e:	300c      	adds	r0, #12
   16e60:	f006 fa8c 	bl	1d37c <strlen>
   16e64:	4286      	cmp	r6, r0
   16e66:	f47f acf8 	bne.w	1685a <pdn_interface_pdn_id_get+0x14a>
   16e6a:	6821      	ldr	r1, [r4, #0]
   16e6c:	4628      	mov	r0, r5
   16e6e:	310c      	adds	r1, #12
   16e70:	f006 fa8b 	bl	1d38a <strcmp>
   16e74:	4606      	mov	r6, r0
   16e76:	2800      	cmp	r0, #0
   16e78:	f47f acef 	bne.w	1685a <pdn_interface_pdn_id_get+0x14a>
   16e7c:	6823      	ldr	r3, [r4, #0]
   16e7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   16e80:	07d7      	lsls	r7, r2, #31
   16e82:	f53f ae00 	bmi.w	16a86 <pdn_interface_pdn_id_get+0x376>
   16e86:	e4e8      	b.n	1685a <pdn_interface_pdn_id_get+0x14a>
   16e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16e8c:	4770      	bx	lr
   16e8e:	480b      	ldr	r0, [pc, #44]	; (16ebc <pdn_interface_pdn_id_get+0x7ac>)
   16e90:	f006 fa74 	bl	1d37c <strlen>
   16e94:	490a      	ldr	r1, [pc, #40]	; (16ec0 <pdn_interface_pdn_id_get+0x7b0>)
   16e96:	4602      	mov	r2, r0
   16e98:	4808      	ldr	r0, [pc, #32]	; (16ebc <pdn_interface_pdn_id_get+0x7ac>)
   16e9a:	f006 fa82 	bl	1d3a2 <strncmp>
   16e9e:	b930      	cbnz	r0, 16eae <pdn_interface_pdn_id_get+0x79e>
   16ea0:	2008      	movs	r0, #8
   16ea2:	f7fa fc57 	bl	11754 <bsd_os_errno_set>
   16ea6:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16eaa:	6858      	ldr	r0, [r3, #4]
   16eac:	e47b      	b.n	167a6 <pdn_interface_pdn_id_get+0x96>
   16eae:	2005      	movs	r0, #5
   16eb0:	f7fa fc50 	bl	11754 <bsd_os_errno_set>
   16eb4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   16eb8:	6858      	ldr	r0, [r3, #4]
   16eba:	e474      	b.n	167a6 <pdn_interface_pdn_id_get+0x96>
   16ebc:	0001f5ec 	.word	0x0001f5ec
   16ec0:	200207f4 	.word	0x200207f4

00016ec4 <linked_list_init>:
   16ec4:	b128      	cbz	r0, 16ed2 <linked_list_init+0xe>
   16ec6:	2300      	movs	r3, #0
   16ec8:	6003      	str	r3, [r0, #0]
   16eca:	e9c0 3301 	strd	r3, r3, [r0, #4]
   16ece:	4618      	mov	r0, r3
   16ed0:	4770      	bx	lr
   16ed2:	2007      	movs	r0, #7
   16ed4:	4770      	bx	lr
   16ed6:	bf00      	nop

00016ed8 <linked_list_push>:
   16ed8:	6802      	ldr	r2, [r0, #0]
   16eda:	4603      	mov	r3, r0
   16edc:	3201      	adds	r2, #1
   16ede:	d00e      	beq.n	16efe <linked_list_push+0x26>
   16ee0:	2200      	movs	r2, #0
   16ee2:	600a      	str	r2, [r1, #0]
   16ee4:	6802      	ldr	r2, [r0, #0]
   16ee6:	b13a      	cbz	r2, 16ef8 <linked_list_push+0x20>
   16ee8:	6882      	ldr	r2, [r0, #8]
   16eea:	6011      	str	r1, [r2, #0]
   16eec:	6081      	str	r1, [r0, #8]
   16eee:	681a      	ldr	r2, [r3, #0]
   16ef0:	2000      	movs	r0, #0
   16ef2:	3201      	adds	r2, #1
   16ef4:	601a      	str	r2, [r3, #0]
   16ef6:	4770      	bx	lr
   16ef8:	e9c0 1101 	strd	r1, r1, [r0, #4]
   16efc:	e7f7      	b.n	16eee <linked_list_push+0x16>
   16efe:	2004      	movs	r0, #4
   16f00:	4770      	bx	lr
   16f02:	bf00      	nop

00016f04 <linked_list_pop>:
   16f04:	4603      	mov	r3, r0
   16f06:	6800      	ldr	r0, [r0, #0]
   16f08:	b128      	cbz	r0, 16f16 <linked_list_pop+0x12>
   16f0a:	6858      	ldr	r0, [r3, #4]
   16f0c:	681a      	ldr	r2, [r3, #0]
   16f0e:	6801      	ldr	r1, [r0, #0]
   16f10:	3a01      	subs	r2, #1
   16f12:	6059      	str	r1, [r3, #4]
   16f14:	601a      	str	r2, [r3, #0]
   16f16:	4770      	bx	lr

00016f18 <linked_list_peek>:
   16f18:	6803      	ldr	r3, [r0, #0]
   16f1a:	b10b      	cbz	r3, 16f20 <linked_list_peek+0x8>
   16f1c:	6840      	ldr	r0, [r0, #4]
   16f1e:	4770      	bx	lr
   16f20:	4618      	mov	r0, r3
   16f22:	4770      	bx	lr

00016f24 <linked_list_size_get>:
   16f24:	6800      	ldr	r0, [r0, #0]
   16f26:	4770      	bx	lr

00016f28 <linked_list_get_next>:
   16f28:	6800      	ldr	r0, [r0, #0]
   16f2a:	4770      	bx	lr

00016f2c <nrf_socket>:
   16f2c:	b570      	push	{r4, r5, r6, lr}
   16f2e:	4604      	mov	r4, r0
   16f30:	460d      	mov	r5, r1
   16f32:	4616      	mov	r6, r2
   16f34:	f7fd fcd6 	bl	148e4 <bsd_platform_af_method_table_get>
   16f38:	b130      	cbz	r0, 16f48 <nrf_socket+0x1c>
   16f3a:	6803      	ldr	r3, [r0, #0]
   16f3c:	4632      	mov	r2, r6
   16f3e:	4629      	mov	r1, r5
   16f40:	4620      	mov	r0, r4
   16f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16f46:	4718      	bx	r3
   16f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16f4c:	bd70      	pop	{r4, r5, r6, pc}
   16f4e:	bf00      	nop

00016f50 <nrf_close>:
   16f50:	b510      	push	{r4, lr}
   16f52:	4604      	mov	r4, r0
   16f54:	f7fd fd1a 	bl	1498c <bsd_platform_fd_method_table_get>
   16f58:	b120      	cbz	r0, 16f64 <nrf_close+0x14>
   16f5a:	6843      	ldr	r3, [r0, #4]
   16f5c:	4620      	mov	r0, r4
   16f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16f62:	4718      	bx	r3
   16f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16f68:	bd10      	pop	{r4, pc}
   16f6a:	bf00      	nop

00016f6c <nrf_sendto>:
   16f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f70:	460d      	mov	r5, r1
   16f72:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   16f76:	4616      	mov	r6, r2
   16f78:	461f      	mov	r7, r3
   16f7a:	4604      	mov	r4, r0
   16f7c:	f7fd fd06 	bl	1498c <bsd_platform_fd_method_table_get>
   16f80:	b158      	cbz	r0, 16f9a <nrf_sendto+0x2e>
   16f82:	e9cd 8908 	strd	r8, r9, [sp, #32]
   16f86:	f8d0 e008 	ldr.w	lr, [r0, #8]
   16f8a:	463b      	mov	r3, r7
   16f8c:	4632      	mov	r2, r6
   16f8e:	4629      	mov	r1, r5
   16f90:	4620      	mov	r0, r4
   16f92:	46f4      	mov	ip, lr
   16f94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f98:	4760      	bx	ip
   16f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16fa2:	bf00      	nop

00016fa4 <nrf_send>:
   16fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fa8:	b082      	sub	sp, #8
   16faa:	460e      	mov	r6, r1
   16fac:	4617      	mov	r7, r2
   16fae:	4698      	mov	r8, r3
   16fb0:	4605      	mov	r5, r0
   16fb2:	f7fd fceb 	bl	1498c <bsd_platform_fd_method_table_get>
   16fb6:	b160      	cbz	r0, 16fd2 <nrf_send+0x2e>
   16fb8:	4604      	mov	r4, r0
   16fba:	2000      	movs	r0, #0
   16fbc:	e9cd 0000 	strd	r0, r0, [sp]
   16fc0:	4643      	mov	r3, r8
   16fc2:	463a      	mov	r2, r7
   16fc4:	4631      	mov	r1, r6
   16fc6:	4628      	mov	r0, r5
   16fc8:	68a4      	ldr	r4, [r4, #8]
   16fca:	47a0      	blx	r4
   16fcc:	b002      	add	sp, #8
   16fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16fd6:	e7f9      	b.n	16fcc <nrf_send+0x28>

00016fd8 <nrf_recvfrom>:
   16fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16fdc:	460d      	mov	r5, r1
   16fde:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   16fe2:	4616      	mov	r6, r2
   16fe4:	461f      	mov	r7, r3
   16fe6:	4604      	mov	r4, r0
   16fe8:	f7fd fcd0 	bl	1498c <bsd_platform_fd_method_table_get>
   16fec:	b158      	cbz	r0, 17006 <nrf_recvfrom+0x2e>
   16fee:	e9cd 8908 	strd	r8, r9, [sp, #32]
   16ff2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   16ff6:	463b      	mov	r3, r7
   16ff8:	4632      	mov	r2, r6
   16ffa:	4629      	mov	r1, r5
   16ffc:	4620      	mov	r0, r4
   16ffe:	46f4      	mov	ip, lr
   17000:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17004:	4760      	bx	ip
   17006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1700e:	bf00      	nop

00017010 <nrf_recv>:
   17010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17014:	b082      	sub	sp, #8
   17016:	460e      	mov	r6, r1
   17018:	4617      	mov	r7, r2
   1701a:	4698      	mov	r8, r3
   1701c:	4605      	mov	r5, r0
   1701e:	f7fd fcb5 	bl	1498c <bsd_platform_fd_method_table_get>
   17022:	b160      	cbz	r0, 1703e <nrf_recv+0x2e>
   17024:	4604      	mov	r4, r0
   17026:	2000      	movs	r0, #0
   17028:	e9cd 0000 	strd	r0, r0, [sp]
   1702c:	4643      	mov	r3, r8
   1702e:	463a      	mov	r2, r7
   17030:	4631      	mov	r1, r6
   17032:	4628      	mov	r0, r5
   17034:	68e4      	ldr	r4, [r4, #12]
   17036:	47a0      	blx	r4
   17038:	b002      	add	sp, #8
   1703a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1703e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17042:	e7f9      	b.n	17038 <nrf_recv+0x28>

00017044 <nrf_connect>:
   17044:	b570      	push	{r4, r5, r6, lr}
   17046:	460d      	mov	r5, r1
   17048:	4616      	mov	r6, r2
   1704a:	4604      	mov	r4, r0
   1704c:	f7fd fc9e 	bl	1498c <bsd_platform_fd_method_table_get>
   17050:	b130      	cbz	r0, 17060 <nrf_connect+0x1c>
   17052:	6943      	ldr	r3, [r0, #20]
   17054:	4632      	mov	r2, r6
   17056:	4629      	mov	r1, r5
   17058:	4620      	mov	r0, r4
   1705a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1705e:	4718      	bx	r3
   17060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17064:	bd70      	pop	{r4, r5, r6, pc}
   17066:	bf00      	nop

00017068 <nrf_listen>:
   17068:	b570      	push	{r4, r5, r6, lr}
   1706a:	460d      	mov	r5, r1
   1706c:	4604      	mov	r4, r0
   1706e:	f7fd fc8d 	bl	1498c <bsd_platform_fd_method_table_get>
   17072:	b128      	cbz	r0, 17080 <nrf_listen+0x18>
   17074:	6983      	ldr	r3, [r0, #24]
   17076:	4629      	mov	r1, r5
   17078:	4620      	mov	r0, r4
   1707a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1707e:	4718      	bx	r3
   17080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17084:	bd70      	pop	{r4, r5, r6, pc}
   17086:	bf00      	nop

00017088 <nrf_accept>:
   17088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1708c:	460d      	mov	r5, r1
   1708e:	4616      	mov	r6, r2
   17090:	4604      	mov	r4, r0
   17092:	f7fd fc7b 	bl	1498c <bsd_platform_fd_method_table_get>
   17096:	b140      	cbz	r0, 170aa <nrf_accept+0x22>
   17098:	69c7      	ldr	r7, [r0, #28]
   1709a:	4632      	mov	r2, r6
   1709c:	4629      	mov	r1, r5
   1709e:	4620      	mov	r0, r4
   170a0:	46bc      	mov	ip, r7
   170a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   170a6:	2300      	movs	r3, #0
   170a8:	4760      	bx	ip
   170aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   170ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170b2:	bf00      	nop

000170b4 <nrf_bind>:
   170b4:	b570      	push	{r4, r5, r6, lr}
   170b6:	460d      	mov	r5, r1
   170b8:	4616      	mov	r6, r2
   170ba:	4604      	mov	r4, r0
   170bc:	f7fd fc66 	bl	1498c <bsd_platform_fd_method_table_get>
   170c0:	b130      	cbz	r0, 170d0 <nrf_bind+0x1c>
   170c2:	6903      	ldr	r3, [r0, #16]
   170c4:	4632      	mov	r2, r6
   170c6:	4629      	mov	r1, r5
   170c8:	4620      	mov	r0, r4
   170ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   170ce:	4718      	bx	r3
   170d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   170d4:	bd70      	pop	{r4, r5, r6, pc}
   170d6:	bf00      	nop

000170d8 <nrf_setsockopt>:
   170d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170dc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   170e0:	460d      	mov	r5, r1
   170e2:	4616      	mov	r6, r2
   170e4:	461f      	mov	r7, r3
   170e6:	4604      	mov	r4, r0
   170e8:	f7fd fc50 	bl	1498c <bsd_platform_fd_method_table_get>
   170ec:	b158      	cbz	r0, 17106 <nrf_setsockopt+0x2e>
   170ee:	f8cd 8018 	str.w	r8, [sp, #24]
   170f2:	f8d0 e020 	ldr.w	lr, [r0, #32]
   170f6:	463b      	mov	r3, r7
   170f8:	4632      	mov	r2, r6
   170fa:	4629      	mov	r1, r5
   170fc:	4620      	mov	r0, r4
   170fe:	46f4      	mov	ip, lr
   17100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17104:	4760      	bx	ip
   17106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1710e:	bf00      	nop

00017110 <nrf_getsockopt>:
   17110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17114:	f8dd 8018 	ldr.w	r8, [sp, #24]
   17118:	460d      	mov	r5, r1
   1711a:	4616      	mov	r6, r2
   1711c:	461f      	mov	r7, r3
   1711e:	4604      	mov	r4, r0
   17120:	f7fd fc34 	bl	1498c <bsd_platform_fd_method_table_get>
   17124:	b158      	cbz	r0, 1713e <nrf_getsockopt+0x2e>
   17126:	f8cd 8018 	str.w	r8, [sp, #24]
   1712a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1712e:	463b      	mov	r3, r7
   17130:	4632      	mov	r2, r6
   17132:	4629      	mov	r1, r5
   17134:	4620      	mov	r0, r4
   17136:	46f4      	mov	ip, lr
   17138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1713c:	4760      	bx	ip
   1713e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17146:	bf00      	nop

00017148 <nrf_getaddrinfo>:
   17148:	f7fd bc90 	b.w	14a6c <bsd_platform_getaddrinfo>

0001714c <nrf_freeaddrinfo>:
   1714c:	f7fd bc90 	b.w	14a70 <bsd_platform_freeaddrinfo>

00017150 <nrf_poll>:
   17150:	f7fd bc90 	b.w	14a74 <bsd_platform_poll>

00017154 <nrf_fcntl>:
   17154:	f7fd bce8 	b.w	14b28 <bsd_platform_fcntl>

00017158 <at_client_evt_handler>:
   17158:	b120      	cbz	r0, 17164 <at_client_evt_handler+0xc>
   1715a:	f850 1b08 	ldr.w	r1, [r0], #8
   1715e:	0c09      	lsrs	r1, r1, #16
   17160:	f7fb bf4a 	b.w	12ff8 <rpc_at_event_handler>
   17164:	4770      	bx	lr
   17166:	bf00      	nop

00017168 <rpc_at_client_init>:
   17168:	4801      	ldr	r0, [pc, #4]	; (17170 <rpc_at_client_init+0x8>)
   1716a:	f001 bdcf 	b.w	18d0c <rpc_client_register>
   1716e:	bf00      	nop
   17170:	0001f600 	.word	0x0001f600

00017174 <rpc_at_client_request_alloc>:
   17174:	b180      	cbz	r0, 17198 <rpc_at_client_request_alloc+0x24>
   17176:	2300      	movs	r3, #0
   17178:	b510      	push	{r4, lr}
   1717a:	b082      	sub	sp, #8
   1717c:	aa02      	add	r2, sp, #8
   1717e:	4604      	mov	r4, r0
   17180:	f842 3d04 	str.w	r3, [r2, #-4]!
   17184:	2003      	movs	r0, #3
   17186:	f001 fff9 	bl	1917c <rpc_message_alloc>
   1718a:	b918      	cbnz	r0, 17194 <rpc_at_client_request_alloc+0x20>
   1718c:	9b01      	ldr	r3, [sp, #4]
   1718e:	b10b      	cbz	r3, 17194 <rpc_at_client_request_alloc+0x20>
   17190:	3308      	adds	r3, #8
   17192:	6023      	str	r3, [r4, #0]
   17194:	b002      	add	sp, #8
   17196:	bd10      	pop	{r4, pc}
   17198:	200e      	movs	r0, #14
   1719a:	4770      	bx	lr

0001719c <rpc_at_client_request_send>:
   1719c:	b150      	cbz	r0, 171b4 <rpc_at_client_request_send+0x18>
   1719e:	4603      	mov	r3, r0
   171a0:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   171a4:	2003      	movs	r0, #3
   171a6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   171aa:	f843 1d08 	str.w	r1, [r3, #-8]!
   171ae:	4619      	mov	r1, r3
   171b0:	f001 bfcc 	b.w	1914c <rpc_message_send>
   171b4:	200e      	movs	r0, #14
   171b6:	4770      	bx	lr

000171b8 <rpc_at_client_message_free>:
   171b8:	b120      	cbz	r0, 171c4 <rpc_at_client_message_free+0xc>
   171ba:	f1a0 0108 	sub.w	r1, r0, #8
   171be:	2003      	movs	r0, #3
   171c0:	f002 b80e 	b.w	191e0 <rpc_message_free>
   171c4:	200e      	movs	r0, #14
   171c6:	4770      	bx	lr

000171c8 <rpc_at_client_data_free>:
   171c8:	b118      	cbz	r0, 171d2 <rpc_at_client_data_free+0xa>
   171ca:	4601      	mov	r1, r0
   171cc:	2003      	movs	r0, #3
   171ce:	f002 b919 	b.w	19404 <rpc_message_data_free>
   171d2:	200e      	movs	r0, #14
   171d4:	4770      	bx	lr
   171d6:	bf00      	nop

000171d8 <ip_recvd_packet_free_cb>:
   171d8:	b510      	push	{r4, lr}
   171da:	4604      	mov	r4, r0
   171dc:	6800      	ldr	r0, [r0, #0]
   171de:	f7fc fbc9 	bl	13974 <rpc_ip_client_data_free>
   171e2:	68a0      	ldr	r0, [r4, #8]
   171e4:	b118      	cbz	r0, 171ee <ip_recvd_packet_free_cb+0x16>
   171e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171ea:	f7fc bb63 	b.w	138b4 <nrf_free>
   171ee:	bd10      	pop	{r4, pc}

000171f0 <rpc_error_to_nrf_bsd_error>:
   171f0:	2810      	cmp	r0, #16
   171f2:	bf9a      	itte	ls
   171f4:	4b02      	ldrls	r3, [pc, #8]	; (17200 <rpc_error_to_nrf_bsd_error+0x10>)
   171f6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   171fa:	202d      	movhi	r0, #45	; 0x2d
   171fc:	4770      	bx	lr
   171fe:	bf00      	nop
   17200:	0001f610 	.word	0x0001f610

00017204 <ip_interface_request_create>:
   17204:	b570      	push	{r4, r5, r6, lr}
   17206:	2500      	movs	r5, #0
   17208:	b082      	sub	sp, #8
   1720a:	ac02      	add	r4, sp, #8
   1720c:	f844 5d04 	str.w	r5, [r4, #-4]!
   17210:	4606      	mov	r6, r0
   17212:	460d      	mov	r5, r1
   17214:	4620      	mov	r0, r4
   17216:	4619      	mov	r1, r3
   17218:	4614      	mov	r4, r2
   1721a:	f7fc fb79 	bl	13910 <rpc_ip_client_request_alloc>
   1721e:	b960      	cbnz	r0, 1723a <ip_interface_request_create+0x36>
   17220:	9b01      	ldr	r3, [sp, #4]
   17222:	2208      	movs	r2, #8
   17224:	7258      	strb	r0, [r3, #9]
   17226:	7298      	strb	r0, [r3, #10]
   17228:	72d8      	strb	r0, [r3, #11]
   1722a:	4618      	mov	r0, r3
   1722c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   17230:	60dc      	str	r4, [r3, #12]
   17232:	611d      	str	r5, [r3, #16]
   17234:	721a      	strb	r2, [r3, #8]
   17236:	b002      	add	sp, #8
   17238:	bd70      	pop	{r4, r5, r6, pc}
   1723a:	9b01      	ldr	r3, [sp, #4]
   1723c:	4618      	mov	r0, r3
   1723e:	b002      	add	sp, #8
   17240:	bd70      	pop	{r4, r5, r6, pc}
   17242:	bf00      	nop

00017244 <ip_interface_request_send>:
   17244:	b570      	push	{r4, r5, r6, lr}
   17246:	460c      	mov	r4, r1
   17248:	4605      	mov	r5, r0
   1724a:	4611      	mov	r1, r2
   1724c:	4620      	mov	r0, r4
   1724e:	461e      	mov	r6, r3
   17250:	f7fc fb72 	bl	13938 <rpc_ip_client_request_send>
   17254:	b900      	cbnz	r0, 17258 <ip_interface_request_send+0x14>
   17256:	bd70      	pop	{r4, r5, r6, pc}
   17258:	6820      	ldr	r0, [r4, #0]
   1725a:	b108      	cbz	r0, 17260 <ip_interface_request_send+0x1c>
   1725c:	f7fc fb8a 	bl	13974 <rpc_ip_client_data_free>
   17260:	4620      	mov	r0, r4
   17262:	f7fc fb7f 	bl	13964 <rpc_ip_client_message_free>
   17266:	602e      	str	r6, [r5, #0]
   17268:	2023      	movs	r0, #35	; 0x23
   1726a:	bd70      	pop	{r4, r5, r6, pc}

0001726c <ip_interface_wait>:
   1726c:	b538      	push	{r3, r4, r5, lr}
   1726e:	4605      	mov	r5, r0
   17270:	f001 fb82 	bl	18978 <interface_socket_wait>
   17274:	4604      	mov	r4, r0
   17276:	b108      	cbz	r0, 1727c <ip_interface_wait+0x10>
   17278:	4620      	mov	r0, r4
   1727a:	bd38      	pop	{r3, r4, r5, pc}
   1727c:	4628      	mov	r0, r5
   1727e:	f001 fbe7 	bl	18a50 <interface_socket_from_handle_get>
   17282:	2800      	cmp	r0, #0
   17284:	d0f8      	beq.n	17278 <ip_interface_wait+0xc>
   17286:	6844      	ldr	r4, [r0, #4]
   17288:	2c00      	cmp	r4, #0
   1728a:	d0f5      	beq.n	17278 <ip_interface_wait+0xc>
   1728c:	2300      	movs	r3, #0
   1728e:	6043      	str	r3, [r0, #4]
   17290:	4620      	mov	r0, r4
   17292:	bd38      	pop	{r3, r4, r5, pc}

00017294 <ip_interface_init>:
   17294:	b538      	push	{r3, r4, r5, lr}
   17296:	2300      	movs	r3, #0
   17298:	4d07      	ldr	r5, [pc, #28]	; (172b8 <ip_interface_init+0x24>)
   1729a:	4c08      	ldr	r4, [pc, #32]	; (172bc <ip_interface_init+0x28>)
   1729c:	4619      	mov	r1, r3
   1729e:	2220      	movs	r2, #32
   172a0:	4807      	ldr	r0, [pc, #28]	; (172c0 <ip_interface_init+0x2c>)
   172a2:	602b      	str	r3, [r5, #0]
   172a4:	6023      	str	r3, [r4, #0]
   172a6:	f006 f8ce 	bl	1d446 <memset>
   172aa:	f7fc fb2b 	bl	13904 <rpc_ip_client_init>
   172ae:	3000      	adds	r0, #0
   172b0:	bf18      	it	ne
   172b2:	2001      	movne	r0, #1
   172b4:	4240      	negs	r0, r0
   172b6:	bd38      	pop	{r3, r4, r5, pc}
   172b8:	2002092c 	.word	0x2002092c
   172bc:	20020928 	.word	0x20020928
   172c0:	20020934 	.word	0x20020934

000172c4 <ip_interface_open>:
   172c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172c8:	4606      	mov	r6, r0
   172ca:	2000      	movs	r0, #0
   172cc:	f026 0308 	bic.w	r3, r6, #8
   172d0:	b082      	sub	sp, #8
   172d2:	2b02      	cmp	r3, #2
   172d4:	460c      	mov	r4, r1
   172d6:	4617      	mov	r7, r2
   172d8:	9000      	str	r0, [sp, #0]
   172da:	d002      	beq.n	172e2 <ip_interface_open+0x1e>
   172dc:	2e05      	cmp	r6, #5
   172de:	f040 8084 	bne.w	173ea <ip_interface_open+0x126>
   172e2:	1e63      	subs	r3, r4, #1
   172e4:	2b02      	cmp	r3, #2
   172e6:	d85c      	bhi.n	173a2 <ip_interface_open+0xde>
   172e8:	2f00      	cmp	r7, #0
   172ea:	d154      	bne.n	17396 <ip_interface_open+0xd2>
   172ec:	2c01      	cmp	r4, #1
   172ee:	d067      	beq.n	173c0 <ip_interface_open+0xfc>
   172f0:	2c03      	cmp	r4, #3
   172f2:	bf18      	it	ne
   172f4:	2702      	movne	r7, #2
   172f6:	4a48      	ldr	r2, [pc, #288]	; (17418 <ip_interface_open+0x154>)
   172f8:	4621      	mov	r1, r4
   172fa:	4668      	mov	r0, sp
   172fc:	f001 fa98 	bl	18830 <interface_socket_allocate>
   17300:	9b00      	ldr	r3, [sp, #0]
   17302:	4680      	mov	r8, r0
   17304:	2b00      	cmp	r3, #0
   17306:	d059      	beq.n	173bc <ip_interface_open+0xf8>
   17308:	2100      	movs	r1, #0
   1730a:	a802      	add	r0, sp, #8
   1730c:	f840 1d04 	str.w	r1, [r0, #-4]!
   17310:	e9c3 6403 	strd	r6, r4, [r3, #12]
   17314:	615f      	str	r7, [r3, #20]
   17316:	f7fc fafb 	bl	13910 <rpc_ip_client_request_alloc>
   1731a:	2800      	cmp	r0, #0
   1731c:	d14b      	bne.n	173b6 <ip_interface_open+0xf2>
   1731e:	f247 0201 	movw	r2, #28673	; 0x7001
   17322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17326:	2108      	movs	r1, #8
   17328:	9d01      	ldr	r5, [sp, #4]
   1732a:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   1732e:	60ea      	str	r2, [r5, #12]
   17330:	7268      	strb	r0, [r5, #9]
   17332:	72a8      	strb	r0, [r5, #10]
   17334:	72e8      	strb	r0, [r5, #11]
   17336:	7229      	strb	r1, [r5, #8]
   17338:	742b      	strb	r3, [r5, #16]
   1733a:	746b      	strb	r3, [r5, #17]
   1733c:	74ab      	strb	r3, [r5, #18]
   1733e:	74eb      	strb	r3, [r5, #19]
   17340:	68ab      	ldr	r3, [r5, #8]
   17342:	2e05      	cmp	r6, #5
   17344:	f103 030c 	add.w	r3, r3, #12
   17348:	60ab      	str	r3, [r5, #8]
   1734a:	d003      	beq.n	17354 <ip_interface_open+0x90>
   1734c:	2e0a      	cmp	r6, #10
   1734e:	bf14      	ite	ne
   17350:	2601      	movne	r6, #1
   17352:	2602      	moveq	r6, #2
   17354:	616e      	str	r6, [r5, #20]
   17356:	61ef      	str	r7, [r5, #28]
   17358:	61ac      	str	r4, [r5, #24]
   1735a:	f247 0101 	movw	r1, #28673	; 0x7001
   1735e:	4628      	mov	r0, r5
   17360:	9f00      	ldr	r7, [sp, #0]
   17362:	f7fc fae9 	bl	13938 <rpc_ip_client_request_send>
   17366:	4606      	mov	r6, r0
   17368:	b360      	cbz	r0, 173c4 <ip_interface_open+0x100>
   1736a:	6828      	ldr	r0, [r5, #0]
   1736c:	b108      	cbz	r0, 17372 <ip_interface_open+0xae>
   1736e:	f7fc fb01 	bl	13974 <rpc_ip_client_data_free>
   17372:	4628      	mov	r0, r5
   17374:	f7fc faf6 	bl	13964 <rpc_ip_client_message_free>
   17378:	2301      	movs	r3, #1
   1737a:	2523      	movs	r5, #35	; 0x23
   1737c:	603b      	str	r3, [r7, #0]
   1737e:	4640      	mov	r0, r8
   17380:	f001 faac 	bl	188dc <interface_socket_free>
   17384:	4628      	mov	r0, r5
   17386:	f7fa f9e5 	bl	11754 <bsd_os_errno_set>
   1738a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1738e:	4640      	mov	r0, r8
   17390:	b002      	add	sp, #8
   17392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17396:	2c01      	cmp	r4, #1
   17398:	d009      	beq.n	173ae <ip_interface_open+0xea>
   1739a:	2c02      	cmp	r4, #2
   1739c:	d109      	bne.n	173b2 <ip_interface_open+0xee>
   1739e:	2f02      	cmp	r7, #2
   173a0:	d0a9      	beq.n	172f6 <ip_interface_open+0x32>
   173a2:	2016      	movs	r0, #22
   173a4:	f7fa f9d6 	bl	11754 <bsd_os_errno_set>
   173a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   173ac:	e7ef      	b.n	1738e <ip_interface_open+0xca>
   173ae:	2f01      	cmp	r7, #1
   173b0:	d1f7      	bne.n	173a2 <ip_interface_open+0xde>
   173b2:	2702      	movs	r7, #2
   173b4:	e79f      	b.n	172f6 <ip_interface_open+0x32>
   173b6:	9d01      	ldr	r5, [sp, #4]
   173b8:	2d00      	cmp	r5, #0
   173ba:	d1c1      	bne.n	17340 <ip_interface_open+0x7c>
   173bc:	250c      	movs	r5, #12
   173be:	e7de      	b.n	1737e <ip_interface_open+0xba>
   173c0:	4627      	mov	r7, r4
   173c2:	e798      	b.n	172f6 <ip_interface_open+0x32>
   173c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   173c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   173cc:	2102      	movs	r1, #2
   173ce:	4640      	mov	r0, r8
   173d0:	f001 fad2 	bl	18978 <interface_socket_wait>
   173d4:	4605      	mov	r5, r0
   173d6:	2800      	cmp	r0, #0
   173d8:	d1d1      	bne.n	1737e <ip_interface_open+0xba>
   173da:	4640      	mov	r0, r8
   173dc:	f001 fb38 	bl	18a50 <interface_socket_from_handle_get>
   173e0:	b148      	cbz	r0, 173f6 <ip_interface_open+0x132>
   173e2:	6845      	ldr	r5, [r0, #4]
   173e4:	b13d      	cbz	r5, 173f6 <ip_interface_open+0x132>
   173e6:	6046      	str	r6, [r0, #4]
   173e8:	e7c9      	b.n	1737e <ip_interface_open+0xba>
   173ea:	202f      	movs	r0, #47	; 0x2f
   173ec:	f7fa f9b2 	bl	11754 <bsd_os_errno_set>
   173f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   173f4:	e7cb      	b.n	1738e <ip_interface_open+0xca>
   173f6:	3c02      	subs	r4, #2
   173f8:	2c01      	cmp	r4, #1
   173fa:	d8c8      	bhi.n	1738e <ip_interface_open+0xca>
   173fc:	4640      	mov	r0, r8
   173fe:	9b00      	ldr	r3, [sp, #0]
   17400:	681a      	ldr	r2, [r3, #0]
   17402:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   17406:	601a      	str	r2, [r3, #0]
   17408:	681a      	ldr	r2, [r3, #0]
   1740a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1740e:	601a      	str	r2, [r3, #0]
   17410:	b002      	add	sp, #8
   17412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17416:	bf00      	nop
   17418:	000171d9 	.word	0x000171d9

0001741c <ip_interface_close>:
   1741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17420:	b082      	sub	sp, #8
   17422:	4606      	mov	r6, r0
   17424:	f001 fb14 	bl	18a50 <interface_socket_from_handle_get>
   17428:	2800      	cmp	r0, #0
   1742a:	d063      	beq.n	174f4 <ip_interface_close+0xd8>
   1742c:	4604      	mov	r4, r0
   1742e:	2100      	movs	r1, #0
   17430:	a802      	add	r0, sp, #8
   17432:	6827      	ldr	r7, [r4, #0]
   17434:	f840 1d04 	str.w	r1, [r0, #-4]!
   17438:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1743c:	f7fc fa68 	bl	13910 <rpc_ip_client_request_alloc>
   17440:	2800      	cmp	r0, #0
   17442:	d13a      	bne.n	174ba <ip_interface_close+0x9e>
   17444:	f247 0309 	movw	r3, #28681	; 0x7009
   17448:	2208      	movs	r2, #8
   1744a:	9d01      	ldr	r5, [sp, #4]
   1744c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17450:	60eb      	str	r3, [r5, #12]
   17452:	f8c5 8010 	str.w	r8, [r5, #16]
   17456:	7268      	strb	r0, [r5, #9]
   17458:	72a8      	strb	r0, [r5, #10]
   1745a:	72e8      	strb	r0, [r5, #11]
   1745c:	722a      	strb	r2, [r5, #8]
   1745e:	6823      	ldr	r3, [r4, #0]
   17460:	f247 0109 	movw	r1, #28681	; 0x7009
   17464:	0c1b      	lsrs	r3, r3, #16
   17466:	041b      	lsls	r3, r3, #16
   17468:	f043 030d 	orr.w	r3, r3, #13
   1746c:	6023      	str	r3, [r4, #0]
   1746e:	6823      	ldr	r3, [r4, #0]
   17470:	4628      	mov	r0, r5
   17472:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17476:	6023      	str	r3, [r4, #0]
   17478:	6823      	ldr	r3, [r4, #0]
   1747a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1747e:	6023      	str	r3, [r4, #0]
   17480:	f7fc fa5a 	bl	13938 <rpc_ip_client_request_send>
   17484:	bb40      	cbnz	r0, 174d8 <ip_interface_close+0xbc>
   17486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1748a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1748e:	210e      	movs	r1, #14
   17490:	4630      	mov	r0, r6
   17492:	f001 fa71 	bl	18978 <interface_socket_wait>
   17496:	4604      	mov	r4, r0
   17498:	b1a0      	cbz	r0, 174c4 <ip_interface_close+0xa8>
   1749a:	4c17      	ldr	r4, [pc, #92]	; (174f8 <ip_interface_close+0xdc>)
   1749c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   174a0:	b120      	cbz	r0, 174ac <ip_interface_close+0x90>
   174a2:	f7fc fa5f 	bl	13964 <rpc_ip_client_message_free>
   174a6:	2300      	movs	r3, #0
   174a8:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   174ac:	4630      	mov	r0, r6
   174ae:	f001 fa15 	bl	188dc <interface_socket_free>
   174b2:	2000      	movs	r0, #0
   174b4:	b002      	add	sp, #8
   174b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   174ba:	9d01      	ldr	r5, [sp, #4]
   174bc:	200c      	movs	r0, #12
   174be:	2d00      	cmp	r5, #0
   174c0:	d1cd      	bne.n	1745e <ip_interface_close+0x42>
   174c2:	e012      	b.n	174ea <ip_interface_close+0xce>
   174c4:	4630      	mov	r0, r6
   174c6:	f001 fac3 	bl	18a50 <interface_socket_from_handle_get>
   174ca:	2800      	cmp	r0, #0
   174cc:	d0e5      	beq.n	1749a <ip_interface_close+0x7e>
   174ce:	6843      	ldr	r3, [r0, #4]
   174d0:	2b00      	cmp	r3, #0
   174d2:	d0e2      	beq.n	1749a <ip_interface_close+0x7e>
   174d4:	6044      	str	r4, [r0, #4]
   174d6:	e7e0      	b.n	1749a <ip_interface_close+0x7e>
   174d8:	6828      	ldr	r0, [r5, #0]
   174da:	b108      	cbz	r0, 174e0 <ip_interface_close+0xc4>
   174dc:	f7fc fa4a 	bl	13974 <rpc_ip_client_data_free>
   174e0:	4628      	mov	r0, r5
   174e2:	f7fc fa3f 	bl	13964 <rpc_ip_client_message_free>
   174e6:	2023      	movs	r0, #35	; 0x23
   174e8:	6027      	str	r7, [r4, #0]
   174ea:	f7fa f933 	bl	11754 <bsd_os_errno_set>
   174ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   174f2:	e7df      	b.n	174b4 <ip_interface_close+0x98>
   174f4:	2009      	movs	r0, #9
   174f6:	e7f8      	b.n	174ea <ip_interface_close+0xce>
   174f8:	20020934 	.word	0x20020934

000174fc <ip_interface_sendto>:
   174fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17500:	2500      	movs	r5, #0
   17502:	b089      	sub	sp, #36	; 0x24
   17504:	9103      	str	r1, [sp, #12]
   17506:	4614      	mov	r4, r2
   17508:	9301      	str	r3, [sp, #4]
   1750a:	9507      	str	r5, [sp, #28]
   1750c:	4607      	mov	r7, r0
   1750e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   17510:	f001 fa9e 	bl	18a50 <interface_socket_from_handle_get>
   17514:	2800      	cmp	r0, #0
   17516:	f000 8124 	beq.w	17762 <ip_interface_sendto+0x266>
   1751a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1751e:	f300 8118 	bgt.w	17752 <ip_interface_sendto+0x256>
   17522:	6903      	ldr	r3, [r0, #16]
   17524:	4605      	mov	r5, r0
   17526:	2b01      	cmp	r3, #1
   17528:	f000 80d1 	beq.w	176ce <ip_interface_sendto+0x1d2>
   1752c:	682a      	ldr	r2, [r5, #0]
   1752e:	0390      	lsls	r0, r2, #14
   17530:	d423      	bmi.n	1757a <ip_interface_sendto+0x7e>
   17532:	682a      	ldr	r2, [r5, #0]
   17534:	0091      	lsls	r1, r2, #2
   17536:	d406      	bmi.n	17546 <ip_interface_sendto+0x4a>
   17538:	2b01      	cmp	r3, #1
   1753a:	f000 80ed 	beq.w	17718 <ip_interface_sendto+0x21c>
   1753e:	682b      	ldr	r3, [r5, #0]
   17540:	031a      	lsls	r2, r3, #12
   17542:	f140 8102 	bpl.w	1774a <ip_interface_sendto+0x24e>
   17546:	682b      	ldr	r3, [r5, #0]
   17548:	031b      	lsls	r3, r3, #12
   1754a:	f140 8106 	bpl.w	1775a <ip_interface_sendto+0x25e>
   1754e:	68a8      	ldr	r0, [r5, #8]
   17550:	f8df 9218 	ldr.w	r9, [pc, #536]	; 1776c <ip_interface_sendto+0x270>
   17554:	2800      	cmp	r0, #0
   17556:	f040 8096 	bne.w	17686 <ip_interface_sendto+0x18a>
   1755a:	682b      	ldr	r3, [r5, #0]
   1755c:	0118      	lsls	r0, r3, #4
   1755e:	f140 8082 	bpl.w	17666 <ip_interface_sendto+0x16a>
   17562:	682b      	ldr	r3, [r5, #0]
   17564:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   17568:	602b      	str	r3, [r5, #0]
   1756a:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1756e:	2800      	cmp	r0, #0
   17570:	d17c      	bne.n	1766c <ip_interface_sendto+0x170>
   17572:	4620      	mov	r0, r4
   17574:	b009      	add	sp, #36	; 0x24
   17576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1757a:	f247 0806 	movw	r8, #28678	; 0x7006
   1757e:	f04f 0a0c 	mov.w	sl, #12
   17582:	043b      	lsls	r3, r7, #16
   17584:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 1776c <ip_interface_sendto+0x270>
   17588:	9304      	str	r3, [sp, #16]
   1758a:	4621      	mov	r1, r4
   1758c:	a807      	add	r0, sp, #28
   1758e:	f7fc f9bf 	bl	13910 <rpc_ip_client_request_alloc>
   17592:	2804      	cmp	r0, #4
   17594:	d0f9      	beq.n	1758a <ip_interface_sendto+0x8e>
   17596:	2800      	cmp	r0, #0
   17598:	d171      	bne.n	1767e <ip_interface_sendto+0x182>
   1759a:	9b07      	ldr	r3, [sp, #28]
   1759c:	f883 a008 	strb.w	sl, [r3, #8]
   175a0:	7258      	strb	r0, [r3, #9]
   175a2:	7298      	strb	r0, [r3, #10]
   175a4:	72d8      	strb	r0, [r3, #11]
   175a6:	b33e      	cbz	r6, 175f8 <ip_interface_sendto+0xfc>
   175a8:	68ea      	ldr	r2, [r5, #12]
   175aa:	6871      	ldr	r1, [r6, #4]
   175ac:	428a      	cmp	r2, r1
   175ae:	d10a      	bne.n	175c6 <ip_interface_sendto+0xca>
   175b0:	2a02      	cmp	r2, #2
   175b2:	f103 001c 	add.w	r0, r3, #28
   175b6:	7831      	ldrb	r1, [r6, #0]
   175b8:	f000 8090 	beq.w	176dc <ip_interface_sendto+0x1e0>
   175bc:	2a0a      	cmp	r2, #10
   175be:	d102      	bne.n	175c6 <ip_interface_sendto+0xca>
   175c0:	2924      	cmp	r1, #36	; 0x24
   175c2:	f000 80af 	beq.w	17724 <ip_interface_sendto+0x228>
   175c6:	6818      	ldr	r0, [r3, #0]
   175c8:	b110      	cbz	r0, 175d0 <ip_interface_sendto+0xd4>
   175ca:	f7fc f9d3 	bl	13974 <rpc_ip_client_data_free>
   175ce:	9b07      	ldr	r3, [sp, #28]
   175d0:	4618      	mov	r0, r3
   175d2:	f7fc f9c7 	bl	13964 <rpc_ip_client_message_free>
   175d6:	2016      	movs	r0, #22
   175d8:	682b      	ldr	r3, [r5, #0]
   175da:	031a      	lsls	r2, r3, #12
   175dc:	d453      	bmi.n	17686 <ip_interface_sendto+0x18a>
   175de:	682b      	ldr	r3, [r5, #0]
   175e0:	b29b      	uxth	r3, r3
   175e2:	2b0d      	cmp	r3, #13
   175e4:	d0b6      	beq.n	17554 <ip_interface_sendto+0x58>
   175e6:	682b      	ldr	r3, [r5, #0]
   175e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   175ec:	602b      	str	r3, [r5, #0]
   175ee:	682b      	ldr	r3, [r5, #0]
   175f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   175f4:	602b      	str	r3, [r5, #0]
   175f6:	e7ad      	b.n	17554 <ip_interface_sendto+0x58>
   175f8:	4642      	mov	r2, r8
   175fa:	9901      	ldr	r1, [sp, #4]
   175fc:	6159      	str	r1, [r3, #20]
   175fe:	69a9      	ldr	r1, [r5, #24]
   17600:	9804      	ldr	r0, [sp, #16]
   17602:	6119      	str	r1, [r3, #16]
   17604:	9903      	ldr	r1, [sp, #12]
   17606:	4302      	orrs	r2, r0
   17608:	60da      	str	r2, [r3, #12]
   1760a:	605c      	str	r4, [r3, #4]
   1760c:	b119      	cbz	r1, 17616 <ip_interface_sendto+0x11a>
   1760e:	6818      	ldr	r0, [r3, #0]
   17610:	4622      	mov	r2, r4
   17612:	f005 feee 	bl	1d3f2 <memcpy>
   17616:	682b      	ldr	r3, [r5, #0]
   17618:	4641      	mov	r1, r8
   1761a:	9305      	str	r3, [sp, #20]
   1761c:	682b      	ldr	r3, [r5, #0]
   1761e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17622:	602b      	str	r3, [r5, #0]
   17624:	682b      	ldr	r3, [r5, #0]
   17626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1762a:	602b      	str	r3, [r5, #0]
   1762c:	9b07      	ldr	r3, [sp, #28]
   1762e:	4618      	mov	r0, r3
   17630:	9302      	str	r3, [sp, #8]
   17632:	f7fc f981 	bl	13938 <rpc_ip_client_request_send>
   17636:	9b02      	ldr	r3, [sp, #8]
   17638:	4683      	mov	fp, r0
   1763a:	bb58      	cbnz	r0, 17694 <ip_interface_sendto+0x198>
   1763c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17644:	4611      	mov	r1, r2
   17646:	4638      	mov	r0, r7
   17648:	f001 f996 	bl	18978 <interface_socket_wait>
   1764c:	b370      	cbz	r0, 176ac <ip_interface_sendto+0x1b0>
   1764e:	682b      	ldr	r3, [r5, #0]
   17650:	0319      	lsls	r1, r3, #12
   17652:	d437      	bmi.n	176c4 <ip_interface_sendto+0x1c8>
   17654:	280c      	cmp	r0, #12
   17656:	d1bf      	bne.n	175d8 <ip_interface_sendto+0xdc>
   17658:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1765c:	2800      	cmp	r0, #0
   1765e:	d094      	beq.n	1758a <ip_interface_sendto+0x8e>
   17660:	f7fc f980 	bl	13964 <rpc_ip_client_message_free>
   17664:	e791      	b.n	1758a <ip_interface_sendto+0x8e>
   17666:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   1766a:	6984      	ldr	r4, [r0, #24]
   1766c:	f7fc f97a 	bl	13964 <rpc_ip_client_message_free>
   17670:	2300      	movs	r3, #0
   17672:	4620      	mov	r0, r4
   17674:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
   17678:	b009      	add	sp, #36	; 0x24
   1767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1767e:	682b      	ldr	r3, [r5, #0]
   17680:	200c      	movs	r0, #12
   17682:	031a      	lsls	r2, r3, #12
   17684:	d5ab      	bpl.n	175de <ip_interface_sendto+0xe2>
   17686:	f7fa f865 	bl	11754 <bsd_os_errno_set>
   1768a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1768e:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   17692:	e76c      	b.n	1756e <ip_interface_sendto+0x72>
   17694:	6818      	ldr	r0, [r3, #0]
   17696:	469b      	mov	fp, r3
   17698:	b108      	cbz	r0, 1769e <ip_interface_sendto+0x1a2>
   1769a:	f7fc f96b 	bl	13974 <rpc_ip_client_data_free>
   1769e:	4658      	mov	r0, fp
   176a0:	f7fc f960 	bl	13964 <rpc_ip_client_message_free>
   176a4:	9b05      	ldr	r3, [sp, #20]
   176a6:	2023      	movs	r0, #35	; 0x23
   176a8:	602b      	str	r3, [r5, #0]
   176aa:	e795      	b.n	175d8 <ip_interface_sendto+0xdc>
   176ac:	4638      	mov	r0, r7
   176ae:	f001 f9cf 	bl	18a50 <interface_socket_from_handle_get>
   176b2:	4603      	mov	r3, r0
   176b4:	b1f0      	cbz	r0, 176f4 <ip_interface_sendto+0x1f8>
   176b6:	6840      	ldr	r0, [r0, #4]
   176b8:	b1e0      	cbz	r0, 176f4 <ip_interface_sendto+0x1f8>
   176ba:	f8c3 b004 	str.w	fp, [r3, #4]
   176be:	682b      	ldr	r3, [r5, #0]
   176c0:	0319      	lsls	r1, r3, #12
   176c2:	d5c7      	bpl.n	17654 <ip_interface_sendto+0x158>
   176c4:	68a8      	ldr	r0, [r5, #8]
   176c6:	682b      	ldr	r3, [r5, #0]
   176c8:	031e      	lsls	r6, r3, #12
   176ca:	d588      	bpl.n	175de <ip_interface_sendto+0xe2>
   176cc:	e742      	b.n	17554 <ip_interface_sendto+0x58>
   176ce:	2e00      	cmp	r6, #0
   176d0:	f43f af2c 	beq.w	1752c <ip_interface_sendto+0x30>
   176d4:	2016      	movs	r0, #22
   176d6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1776c <ip_interface_sendto+0x270>
   176da:	e7d4      	b.n	17686 <ip_interface_sendto+0x18a>
   176dc:	2910      	cmp	r1, #16
   176de:	f47f af72 	bne.w	175c6 <ip_interface_sendto+0xca>
   176e2:	2204      	movs	r2, #4
   176e4:	8931      	ldrh	r1, [r6, #8]
   176e6:	835a      	strh	r2, [r3, #26]
   176e8:	8319      	strh	r1, [r3, #24]
   176ea:	f106 010c 	add.w	r1, r6, #12
   176ee:	f005 fe80 	bl	1d3f2 <memcpy>
   176f2:	e01e      	b.n	17732 <ip_interface_sendto+0x236>
   176f4:	682b      	ldr	r3, [r5, #0]
   176f6:	031b      	lsls	r3, r3, #12
   176f8:	f53f af2f 	bmi.w	1755a <ip_interface_sendto+0x5e>
   176fc:	682b      	ldr	r3, [r5, #0]
   176fe:	b29b      	uxth	r3, r3
   17700:	2b0d      	cmp	r3, #13
   17702:	f43f af2a 	beq.w	1755a <ip_interface_sendto+0x5e>
   17706:	682b      	ldr	r3, [r5, #0]
   17708:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1770c:	602b      	str	r3, [r5, #0]
   1770e:	682b      	ldr	r3, [r5, #0]
   17710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17714:	602b      	str	r3, [r5, #0]
   17716:	e720      	b.n	1755a <ip_interface_sendto+0x5e>
   17718:	682b      	ldr	r3, [r5, #0]
   1771a:	b29b      	uxth	r3, r3
   1771c:	2b05      	cmp	r3, #5
   1771e:	f47f af12 	bne.w	17546 <ip_interface_sendto+0x4a>
   17722:	e70c      	b.n	1753e <ip_interface_sendto+0x42>
   17724:	2210      	movs	r2, #16
   17726:	8931      	ldrh	r1, [r6, #8]
   17728:	835a      	strh	r2, [r3, #26]
   1772a:	8319      	strh	r1, [r3, #24]
   1772c:	18b1      	adds	r1, r6, r2
   1772e:	f005 fe60 	bl	1d3f2 <memcpy>
   17732:	f247 0207 	movw	r2, #28679	; 0x7007
   17736:	9b07      	ldr	r3, [sp, #28]
   17738:	4690      	mov	r8, r2
   1773a:	6899      	ldr	r1, [r3, #8]
   1773c:	8b58      	ldrh	r0, [r3, #26]
   1773e:	3104      	adds	r1, #4
   17740:	4401      	add	r1, r0
   17742:	9801      	ldr	r0, [sp, #4]
   17744:	6099      	str	r1, [r3, #8]
   17746:	6158      	str	r0, [r3, #20]
   17748:	e759      	b.n	175fe <ip_interface_sendto+0x102>
   1774a:	2023      	movs	r0, #35	; 0x23
   1774c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 1776c <ip_interface_sendto+0x270>
   17750:	e799      	b.n	17686 <ip_interface_sendto+0x18a>
   17752:	2028      	movs	r0, #40	; 0x28
   17754:	f8df 9014 	ldr.w	r9, [pc, #20]	; 1776c <ip_interface_sendto+0x270>
   17758:	e795      	b.n	17686 <ip_interface_sendto+0x18a>
   1775a:	2039      	movs	r0, #57	; 0x39
   1775c:	f8df 900c 	ldr.w	r9, [pc, #12]	; 1776c <ip_interface_sendto+0x270>
   17760:	e791      	b.n	17686 <ip_interface_sendto+0x18a>
   17762:	2009      	movs	r0, #9
   17764:	f8df 9004 	ldr.w	r9, [pc, #4]	; 1776c <ip_interface_sendto+0x270>
   17768:	e78d      	b.n	17686 <ip_interface_sendto+0x18a>
   1776a:	bf00      	nop
   1776c:	20020934 	.word	0x20020934

00017770 <ip_interface_recvfrom>:
   17770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17774:	b085      	sub	sp, #20
   17776:	2a00      	cmp	r2, #0
   17778:	f000 8110 	beq.w	1799c <ip_interface_recvfrom+0x22c>
   1777c:	468a      	mov	sl, r1
   1777e:	4699      	mov	r9, r3
   17780:	4607      	mov	r7, r0
   17782:	4616      	mov	r6, r2
   17784:	f001 f964 	bl	18a50 <interface_socket_from_handle_get>
   17788:	4604      	mov	r4, r0
   1778a:	2800      	cmp	r0, #0
   1778c:	f000 810d 	beq.w	179aa <ip_interface_recvfrom+0x23a>
   17790:	6803      	ldr	r3, [r0, #0]
   17792:	02d9      	lsls	r1, r3, #11
   17794:	d565      	bpl.n	17862 <ip_interface_recvfrom+0xf2>
   17796:	f019 0f02 	tst.w	r9, #2
   1779a:	bf18      	it	ne
   1779c:	f04f 0800 	movne.w	r8, #0
   177a0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   177a4:	bf08      	it	eq
   177a6:	6803      	ldreq	r3, [r0, #0]
   177a8:	f009 0510 	and.w	r5, r9, #16
   177ac:	bf04      	itt	eq
   177ae:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   177b2:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   177b6:	6823      	ldr	r3, [r4, #0]
   177b8:	03da      	lsls	r2, r3, #15
   177ba:	d56d      	bpl.n	17898 <ip_interface_recvfrom+0x128>
   177bc:	6823      	ldr	r3, [r4, #0]
   177be:	69e0      	ldr	r0, [r4, #28]
   177c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   177c4:	6023      	str	r3, [r4, #0]
   177c6:	6803      	ldr	r3, [r0, #0]
   177c8:	68db      	ldr	r3, [r3, #12]
   177ca:	4798      	blx	r3
   177cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   177d0:	4683      	mov	fp, r0
   177d2:	f000 8081 	beq.w	178d8 <ip_interface_recvfrom+0x168>
   177d6:	4286      	cmp	r6, r0
   177d8:	dd03      	ble.n	177e2 <ip_interface_recvfrom+0x72>
   177da:	6923      	ldr	r3, [r4, #16]
   177dc:	2b01      	cmp	r3, #1
   177de:	f000 80a7 	beq.w	17930 <ip_interface_recvfrom+0x1c0>
   177e2:	2500      	movs	r5, #0
   177e4:	69e0      	ldr	r0, [r4, #28]
   177e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   177e8:	b103      	cbz	r3, 177ec <ip_interface_recvfrom+0x7c>
   177ea:	681b      	ldr	r3, [r3, #0]
   177ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   177ee:	e9cd a600 	strd	sl, r6, [sp]
   177f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   177f6:	6803      	ldr	r3, [r0, #0]
   177f8:	464a      	mov	r2, r9
   177fa:	689b      	ldr	r3, [r3, #8]
   177fc:	4669      	mov	r1, sp
   177fe:	4798      	blx	r3
   17800:	4683      	mov	fp, r0
   17802:	69e0      	ldr	r0, [r4, #28]
   17804:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   17808:	6803      	ldr	r3, [r0, #0]
   1780a:	bf18      	it	ne
   1780c:	2601      	movne	r6, #1
   1780e:	68db      	ldr	r3, [r3, #12]
   17810:	bf0a      	itet	eq
   17812:	2600      	moveq	r6, #0
   17814:	f04f 0800 	movne.w	r8, #0
   17818:	f04f 0823 	moveq.w	r8, #35	; 0x23
   1781c:	4798      	blx	r3
   1781e:	3001      	adds	r0, #1
   17820:	d135      	bne.n	1788e <ip_interface_recvfrom+0x11e>
   17822:	2d00      	cmp	r5, #0
   17824:	f000 80b6 	beq.w	17994 <ip_interface_recvfrom+0x224>
   17828:	2e00      	cmp	r6, #0
   1782a:	f000 80a6 	beq.w	1797a <ip_interface_recvfrom+0x20a>
   1782e:	6823      	ldr	r3, [r4, #0]
   17830:	0319      	lsls	r1, r3, #12
   17832:	d506      	bpl.n	17842 <ip_interface_recvfrom+0xd2>
   17834:	6823      	ldr	r3, [r4, #0]
   17836:	b29b      	uxth	r3, r3
   17838:	2b0d      	cmp	r3, #13
   1783a:	d002      	beq.n	17842 <ip_interface_recvfrom+0xd2>
   1783c:	6923      	ldr	r3, [r4, #16]
   1783e:	2b01      	cmp	r3, #1
   17840:	d025      	beq.n	1788e <ip_interface_recvfrom+0x11e>
   17842:	6823      	ldr	r3, [r4, #0]
   17844:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   17848:	6823      	ldr	r3, [r4, #0]
   1784a:	f040 80b1 	bne.w	179b0 <ip_interface_recvfrom+0x240>
   1784e:	031a      	lsls	r2, r3, #12
   17850:	d475      	bmi.n	1793e <ip_interface_recvfrom+0x1ce>
   17852:	f1b8 0f00 	cmp.w	r8, #0
   17856:	f040 808a 	bne.w	1796e <ip_interface_recvfrom+0x1fe>
   1785a:	4658      	mov	r0, fp
   1785c:	b005      	add	sp, #20
   1785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17862:	6803      	ldr	r3, [r0, #0]
   17864:	b29b      	uxth	r3, r3
   17866:	2b06      	cmp	r3, #6
   17868:	d073      	beq.n	17952 <ip_interface_recvfrom+0x1e2>
   1786a:	6803      	ldr	r3, [r0, #0]
   1786c:	b29b      	uxth	r3, r3
   1786e:	2b07      	cmp	r3, #7
   17870:	bf0c      	ite	eq
   17872:	f04f 0809 	moveq.w	r8, #9
   17876:	f04f 0839 	movne.w	r8, #57	; 0x39
   1787a:	69e0      	ldr	r0, [r4, #28]
   1787c:	6803      	ldr	r3, [r0, #0]
   1787e:	68db      	ldr	r3, [r3, #12]
   17880:	4798      	blx	r3
   17882:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17886:	4683      	mov	fp, r0
   17888:	d0db      	beq.n	17842 <ip_interface_recvfrom+0xd2>
   1788a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1788e:	6823      	ldr	r3, [r4, #0]
   17890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17894:	6023      	str	r3, [r4, #0]
   17896:	e7dc      	b.n	17852 <ip_interface_recvfrom+0xe2>
   17898:	f1b8 0f00 	cmp.w	r8, #0
   1789c:	f000 8081 	beq.w	179a2 <ip_interface_recvfrom+0x232>
   178a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   178a4:	6a23      	ldr	r3, [r4, #32]
   178a6:	4611      	mov	r1, r2
   178a8:	2b00      	cmp	r3, #0
   178aa:	bf08      	it	eq
   178ac:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   178b0:	4638      	mov	r0, r7
   178b2:	f001 f861 	bl	18978 <interface_socket_wait>
   178b6:	4680      	mov	r8, r0
   178b8:	b358      	cbz	r0, 17912 <ip_interface_recvfrom+0x1a2>
   178ba:	6823      	ldr	r3, [r4, #0]
   178bc:	69e0      	ldr	r0, [r4, #28]
   178be:	031b      	lsls	r3, r3, #12
   178c0:	d521      	bpl.n	17906 <ip_interface_recvfrom+0x196>
   178c2:	6823      	ldr	r3, [r4, #0]
   178c4:	b29b      	uxth	r3, r3
   178c6:	2b0d      	cmp	r3, #13
   178c8:	d01d      	beq.n	17906 <ip_interface_recvfrom+0x196>
   178ca:	6925      	ldr	r5, [r4, #16]
   178cc:	f1a5 0501 	sub.w	r5, r5, #1
   178d0:	fab5 f585 	clz	r5, r5
   178d4:	096d      	lsrs	r5, r5, #5
   178d6:	e786      	b.n	177e6 <ip_interface_recvfrom+0x76>
   178d8:	6823      	ldr	r3, [r4, #0]
   178da:	0318      	lsls	r0, r3, #12
   178dc:	d5dc      	bpl.n	17898 <ip_interface_recvfrom+0x128>
   178de:	6823      	ldr	r3, [r4, #0]
   178e0:	b29b      	uxth	r3, r3
   178e2:	2b0d      	cmp	r3, #13
   178e4:	d0d8      	beq.n	17898 <ip_interface_recvfrom+0x128>
   178e6:	6923      	ldr	r3, [r4, #16]
   178e8:	69e0      	ldr	r0, [r4, #28]
   178ea:	2b01      	cmp	r3, #1
   178ec:	d034      	beq.n	17958 <ip_interface_recvfrom+0x1e8>
   178ee:	f04f 0839 	mov.w	r8, #57	; 0x39
   178f2:	6823      	ldr	r3, [r4, #0]
   178f4:	0c1b      	lsrs	r3, r3, #16
   178f6:	041b      	lsls	r3, r3, #16
   178f8:	f043 030d 	orr.w	r3, r3, #13
   178fc:	6023      	str	r3, [r4, #0]
   178fe:	6823      	ldr	r3, [r4, #0]
   17900:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17904:	6023      	str	r3, [r4, #0]
   17906:	6803      	ldr	r3, [r0, #0]
   17908:	68db      	ldr	r3, [r3, #12]
   1790a:	4798      	blx	r3
   1790c:	3001      	adds	r0, #1
   1790e:	d1be      	bne.n	1788e <ip_interface_recvfrom+0x11e>
   17910:	e797      	b.n	17842 <ip_interface_recvfrom+0xd2>
   17912:	4638      	mov	r0, r7
   17914:	f001 f89c 	bl	18a50 <interface_socket_from_handle_get>
   17918:	b138      	cbz	r0, 1792a <ip_interface_recvfrom+0x1ba>
   1791a:	f8d0 8004 	ldr.w	r8, [r0, #4]
   1791e:	f1b8 0f00 	cmp.w	r8, #0
   17922:	d002      	beq.n	1792a <ip_interface_recvfrom+0x1ba>
   17924:	2300      	movs	r3, #0
   17926:	6043      	str	r3, [r0, #4]
   17928:	e7c7      	b.n	178ba <ip_interface_recvfrom+0x14a>
   1792a:	f04f 0801 	mov.w	r8, #1
   1792e:	e742      	b.n	177b6 <ip_interface_recvfrom+0x46>
   17930:	b11d      	cbz	r5, 1793a <ip_interface_recvfrom+0x1ca>
   17932:	6823      	ldr	r3, [r4, #0]
   17934:	00db      	lsls	r3, r3, #3
   17936:	d5b3      	bpl.n	178a0 <ip_interface_recvfrom+0x130>
   17938:	e753      	b.n	177e2 <ip_interface_recvfrom+0x72>
   1793a:	69e0      	ldr	r0, [r4, #28]
   1793c:	e753      	b.n	177e6 <ip_interface_recvfrom+0x76>
   1793e:	6823      	ldr	r3, [r4, #0]
   17940:	b29b      	uxth	r3, r3
   17942:	2b0d      	cmp	r3, #13
   17944:	d185      	bne.n	17852 <ip_interface_recvfrom+0xe2>
   17946:	68a3      	ldr	r3, [r4, #8]
   17948:	2b00      	cmp	r3, #0
   1794a:	d082      	beq.n	17852 <ip_interface_recvfrom+0xe2>
   1794c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   17950:	e77f      	b.n	17852 <ip_interface_recvfrom+0xe2>
   17952:	f04f 0809 	mov.w	r8, #9
   17956:	e790      	b.n	1787a <ip_interface_recvfrom+0x10a>
   17958:	6803      	ldr	r3, [r0, #0]
   1795a:	68db      	ldr	r3, [r3, #12]
   1795c:	4798      	blx	r3
   1795e:	3001      	adds	r0, #1
   17960:	d00b      	beq.n	1797a <ip_interface_recvfrom+0x20a>
   17962:	f04f 0823 	mov.w	r8, #35	; 0x23
   17966:	6823      	ldr	r3, [r4, #0]
   17968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1796c:	6023      	str	r3, [r4, #0]
   1796e:	4640      	mov	r0, r8
   17970:	f7f9 fef0 	bl	11754 <bsd_os_errno_set>
   17974:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   17978:	e76f      	b.n	1785a <ip_interface_recvfrom+0xea>
   1797a:	6823      	ldr	r3, [r4, #0]
   1797c:	f04f 0b00 	mov.w	fp, #0
   17980:	0c1b      	lsrs	r3, r3, #16
   17982:	041b      	lsls	r3, r3, #16
   17984:	f043 030d 	orr.w	r3, r3, #13
   17988:	6023      	str	r3, [r4, #0]
   1798a:	6823      	ldr	r3, [r4, #0]
   1798c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17990:	6023      	str	r3, [r4, #0]
   17992:	e762      	b.n	1785a <ip_interface_recvfrom+0xea>
   17994:	2e00      	cmp	r6, #0
   17996:	f47f af4a 	bne.w	1782e <ip_interface_recvfrom+0xbe>
   1799a:	e752      	b.n	17842 <ip_interface_recvfrom+0xd2>
   1799c:	f04f 0816 	mov.w	r8, #22
   179a0:	e7e5      	b.n	1796e <ip_interface_recvfrom+0x1fe>
   179a2:	f04f 0823 	mov.w	r8, #35	; 0x23
   179a6:	69e0      	ldr	r0, [r4, #28]
   179a8:	e7ad      	b.n	17906 <ip_interface_recvfrom+0x196>
   179aa:	f04f 0809 	mov.w	r8, #9
   179ae:	e7de      	b.n	1796e <ip_interface_recvfrom+0x1fe>
   179b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   179b4:	6023      	str	r3, [r4, #0]
   179b6:	6823      	ldr	r3, [r4, #0]
   179b8:	f04f 0869 	mov.w	r8, #105	; 0x69
   179bc:	0c1b      	lsrs	r3, r3, #16
   179be:	041b      	lsls	r3, r3, #16
   179c0:	f043 030d 	orr.w	r3, r3, #13
   179c4:	6023      	str	r3, [r4, #0]
   179c6:	e7d2      	b.n	1796e <ip_interface_recvfrom+0x1fe>

000179c8 <ip_interface_connect>:
   179c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179cc:	b082      	sub	sp, #8
   179ce:	2900      	cmp	r1, #0
   179d0:	d044      	beq.n	17a5c <ip_interface_connect+0x94>
   179d2:	2a00      	cmp	r2, #0
   179d4:	d042      	beq.n	17a5c <ip_interface_connect+0x94>
   179d6:	4606      	mov	r6, r0
   179d8:	460f      	mov	r7, r1
   179da:	f001 f839 	bl	18a50 <interface_socket_from_handle_get>
   179de:	4605      	mov	r5, r0
   179e0:	2800      	cmp	r0, #0
   179e2:	f000 8096 	beq.w	17b12 <ip_interface_connect+0x14a>
   179e6:	6803      	ldr	r3, [r0, #0]
   179e8:	b29b      	uxth	r3, r3
   179ea:	2b02      	cmp	r3, #2
   179ec:	d004      	beq.n	179f8 <ip_interface_connect+0x30>
   179ee:	6803      	ldr	r3, [r0, #0]
   179f0:	b29b      	uxth	r3, r3
   179f2:	2b04      	cmp	r3, #4
   179f4:	f040 808d 	bne.w	17b12 <ip_interface_connect+0x14a>
   179f8:	6829      	ldr	r1, [r5, #0]
   179fa:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   179fe:	f040 8084 	bne.w	17b0a <ip_interface_connect+0x142>
   17a02:	a802      	add	r0, sp, #8
   17a04:	f840 1d04 	str.w	r1, [r0, #-4]!
   17a08:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17a0c:	f7fb ff80 	bl	13910 <rpc_ip_client_request_alloc>
   17a10:	bb70      	cbnz	r0, 17a70 <ip_interface_connect+0xa8>
   17a12:	2108      	movs	r1, #8
   17a14:	0433      	lsls	r3, r6, #16
   17a16:	9c01      	ldr	r4, [sp, #4]
   17a18:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   17a1c:	f042 0202 	orr.w	r2, r2, #2
   17a20:	60e2      	str	r2, [r4, #12]
   17a22:	f8c4 8010 	str.w	r8, [r4, #16]
   17a26:	7260      	strb	r0, [r4, #9]
   17a28:	72a0      	strb	r0, [r4, #10]
   17a2a:	72e0      	strb	r0, [r4, #11]
   17a2c:	7221      	strb	r1, [r4, #8]
   17a2e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   17a32:	f043 0302 	orr.w	r3, r3, #2
   17a36:	60e3      	str	r3, [r4, #12]
   17a38:	68a3      	ldr	r3, [r4, #8]
   17a3a:	69aa      	ldr	r2, [r5, #24]
   17a3c:	3304      	adds	r3, #4
   17a3e:	6122      	str	r2, [r4, #16]
   17a40:	60a3      	str	r3, [r4, #8]
   17a42:	68eb      	ldr	r3, [r5, #12]
   17a44:	687a      	ldr	r2, [r7, #4]
   17a46:	4293      	cmp	r3, r2
   17a48:	d108      	bne.n	17a5c <ip_interface_connect+0x94>
   17a4a:	2b02      	cmp	r3, #2
   17a4c:	f104 0018 	add.w	r0, r4, #24
   17a50:	783a      	ldrb	r2, [r7, #0]
   17a52:	d03a      	beq.n	17aca <ip_interface_connect+0x102>
   17a54:	2b0a      	cmp	r3, #10
   17a56:	d101      	bne.n	17a5c <ip_interface_connect+0x94>
   17a58:	2a24      	cmp	r2, #36	; 0x24
   17a5a:	d00e      	beq.n	17a7a <ip_interface_connect+0xb2>
   17a5c:	2416      	movs	r4, #22
   17a5e:	4620      	mov	r0, r4
   17a60:	f7f9 fe78 	bl	11754 <bsd_os_errno_set>
   17a64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17a68:	4620      	mov	r0, r4
   17a6a:	b002      	add	sp, #8
   17a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a70:	9c01      	ldr	r4, [sp, #4]
   17a72:	2c00      	cmp	r4, #0
   17a74:	d04f      	beq.n	17b16 <ip_interface_connect+0x14e>
   17a76:	0433      	lsls	r3, r6, #16
   17a78:	e7d9      	b.n	17a2e <ip_interface_connect+0x66>
   17a7a:	2210      	movs	r2, #16
   17a7c:	893b      	ldrh	r3, [r7, #8]
   17a7e:	18b9      	adds	r1, r7, r2
   17a80:	82e2      	strh	r2, [r4, #22]
   17a82:	82a3      	strh	r3, [r4, #20]
   17a84:	f005 fcb5 	bl	1d3f2 <memcpy>
   17a88:	68a3      	ldr	r3, [r4, #8]
   17a8a:	8ae2      	ldrh	r2, [r4, #22]
   17a8c:	f247 0102 	movw	r1, #28674	; 0x7002
   17a90:	4413      	add	r3, r2
   17a92:	60a3      	str	r3, [r4, #8]
   17a94:	682f      	ldr	r7, [r5, #0]
   17a96:	682b      	ldr	r3, [r5, #0]
   17a98:	4620      	mov	r0, r4
   17a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   17a9e:	602b      	str	r3, [r5, #0]
   17aa0:	f7fb ff4a 	bl	13938 <rpc_ip_client_request_send>
   17aa4:	b9e0      	cbnz	r0, 17ae0 <ip_interface_connect+0x118>
   17aa6:	682b      	ldr	r3, [r5, #0]
   17aa8:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   17aac:	d12f      	bne.n	17b0e <ip_interface_connect+0x146>
   17aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17ab6:	2105      	movs	r1, #5
   17ab8:	4630      	mov	r0, r6
   17aba:	f000 ff5d 	bl	18978 <interface_socket_wait>
   17abe:	4604      	mov	r4, r0
   17ac0:	b1c0      	cbz	r0, 17af4 <ip_interface_connect+0x12c>
   17ac2:	2c73      	cmp	r4, #115	; 0x73
   17ac4:	d0cb      	beq.n	17a5e <ip_interface_connect+0x96>
   17ac6:	602f      	str	r7, [r5, #0]
   17ac8:	e7c9      	b.n	17a5e <ip_interface_connect+0x96>
   17aca:	2a10      	cmp	r2, #16
   17acc:	d1c6      	bne.n	17a5c <ip_interface_connect+0x94>
   17ace:	2204      	movs	r2, #4
   17ad0:	893b      	ldrh	r3, [r7, #8]
   17ad2:	f107 010c 	add.w	r1, r7, #12
   17ad6:	82e2      	strh	r2, [r4, #22]
   17ad8:	82a3      	strh	r3, [r4, #20]
   17ada:	f005 fc8a 	bl	1d3f2 <memcpy>
   17ade:	e7d3      	b.n	17a88 <ip_interface_connect+0xc0>
   17ae0:	6820      	ldr	r0, [r4, #0]
   17ae2:	b108      	cbz	r0, 17ae8 <ip_interface_connect+0x120>
   17ae4:	f7fb ff46 	bl	13974 <rpc_ip_client_data_free>
   17ae8:	4620      	mov	r0, r4
   17aea:	f7fb ff3b 	bl	13964 <rpc_ip_client_message_free>
   17aee:	2423      	movs	r4, #35	; 0x23
   17af0:	602f      	str	r7, [r5, #0]
   17af2:	e7b4      	b.n	17a5e <ip_interface_connect+0x96>
   17af4:	4630      	mov	r0, r6
   17af6:	f000 ffab 	bl	18a50 <interface_socket_from_handle_get>
   17afa:	2800      	cmp	r0, #0
   17afc:	d0b4      	beq.n	17a68 <ip_interface_connect+0xa0>
   17afe:	6844      	ldr	r4, [r0, #4]
   17b00:	2c00      	cmp	r4, #0
   17b02:	d0b1      	beq.n	17a68 <ip_interface_connect+0xa0>
   17b04:	f8c0 8004 	str.w	r8, [r0, #4]
   17b08:	e7db      	b.n	17ac2 <ip_interface_connect+0xfa>
   17b0a:	2472      	movs	r4, #114	; 0x72
   17b0c:	e7a7      	b.n	17a5e <ip_interface_connect+0x96>
   17b0e:	2473      	movs	r4, #115	; 0x73
   17b10:	e7a5      	b.n	17a5e <ip_interface_connect+0x96>
   17b12:	2409      	movs	r4, #9
   17b14:	e7a3      	b.n	17a5e <ip_interface_connect+0x96>
   17b16:	240c      	movs	r4, #12
   17b18:	e7a1      	b.n	17a5e <ip_interface_connect+0x96>
   17b1a:	bf00      	nop

00017b1c <ip_interface_bind>:
   17b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b20:	b082      	sub	sp, #8
   17b22:	b389      	cbz	r1, 17b88 <ip_interface_bind+0x6c>
   17b24:	b382      	cbz	r2, 17b88 <ip_interface_bind+0x6c>
   17b26:	4607      	mov	r7, r0
   17b28:	460e      	mov	r6, r1
   17b2a:	f000 ff91 	bl	18a50 <interface_socket_from_handle_get>
   17b2e:	4605      	mov	r5, r0
   17b30:	2800      	cmp	r0, #0
   17b32:	d07b      	beq.n	17c2c <ip_interface_bind+0x110>
   17b34:	6803      	ldr	r3, [r0, #0]
   17b36:	b29b      	uxth	r3, r3
   17b38:	2b02      	cmp	r3, #2
   17b3a:	d177      	bne.n	17c2c <ip_interface_bind+0x110>
   17b3c:	2100      	movs	r1, #0
   17b3e:	a802      	add	r0, sp, #8
   17b40:	f840 1d04 	str.w	r1, [r0, #-4]!
   17b44:	f8d5 8018 	ldr.w	r8, [r5, #24]
   17b48:	f7fb fee2 	bl	13910 <rpc_ip_client_request_alloc>
   17b4c:	bb30      	cbnz	r0, 17b9c <ip_interface_bind+0x80>
   17b4e:	f247 0305 	movw	r3, #28677	; 0x7005
   17b52:	2208      	movs	r2, #8
   17b54:	9c01      	ldr	r4, [sp, #4]
   17b56:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   17b5a:	60e3      	str	r3, [r4, #12]
   17b5c:	f8c4 8010 	str.w	r8, [r4, #16]
   17b60:	7260      	strb	r0, [r4, #9]
   17b62:	72a0      	strb	r0, [r4, #10]
   17b64:	72e0      	strb	r0, [r4, #11]
   17b66:	7222      	strb	r2, [r4, #8]
   17b68:	68a3      	ldr	r3, [r4, #8]
   17b6a:	3304      	adds	r3, #4
   17b6c:	60a3      	str	r3, [r4, #8]
   17b6e:	68eb      	ldr	r3, [r5, #12]
   17b70:	6872      	ldr	r2, [r6, #4]
   17b72:	4293      	cmp	r3, r2
   17b74:	d108      	bne.n	17b88 <ip_interface_bind+0x6c>
   17b76:	2b02      	cmp	r3, #2
   17b78:	f104 0018 	add.w	r0, r4, #24
   17b7c:	7832      	ldrb	r2, [r6, #0]
   17b7e:	d03c      	beq.n	17bfa <ip_interface_bind+0xde>
   17b80:	2b0a      	cmp	r3, #10
   17b82:	d101      	bne.n	17b88 <ip_interface_bind+0x6c>
   17b84:	2a24      	cmp	r2, #36	; 0x24
   17b86:	d00e      	beq.n	17ba6 <ip_interface_bind+0x8a>
   17b88:	2416      	movs	r4, #22
   17b8a:	4620      	mov	r0, r4
   17b8c:	f7f9 fde2 	bl	11754 <bsd_os_errno_set>
   17b90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17b94:	4620      	mov	r0, r4
   17b96:	b002      	add	sp, #8
   17b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b9c:	9c01      	ldr	r4, [sp, #4]
   17b9e:	2c00      	cmp	r4, #0
   17ba0:	d1e2      	bne.n	17b68 <ip_interface_bind+0x4c>
   17ba2:	240c      	movs	r4, #12
   17ba4:	e7f1      	b.n	17b8a <ip_interface_bind+0x6e>
   17ba6:	2210      	movs	r2, #16
   17ba8:	8933      	ldrh	r3, [r6, #8]
   17baa:	18b1      	adds	r1, r6, r2
   17bac:	82e2      	strh	r2, [r4, #22]
   17bae:	82a3      	strh	r3, [r4, #20]
   17bb0:	f005 fc1f 	bl	1d3f2 <memcpy>
   17bb4:	68a3      	ldr	r3, [r4, #8]
   17bb6:	8ae2      	ldrh	r2, [r4, #22]
   17bb8:	f247 0105 	movw	r1, #28677	; 0x7005
   17bbc:	4413      	add	r3, r2
   17bbe:	60a3      	str	r3, [r4, #8]
   17bc0:	682b      	ldr	r3, [r5, #0]
   17bc2:	4620      	mov	r0, r4
   17bc4:	0c1b      	lsrs	r3, r3, #16
   17bc6:	041b      	lsls	r3, r3, #16
   17bc8:	f043 0303 	orr.w	r3, r3, #3
   17bcc:	602b      	str	r3, [r5, #0]
   17bce:	682e      	ldr	r6, [r5, #0]
   17bd0:	f7fb feb2 	bl	13938 <rpc_ip_client_request_send>
   17bd4:	4680      	mov	r8, r0
   17bd6:	b9d8      	cbnz	r0, 17c10 <ip_interface_bind+0xf4>
   17bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17be0:	2104      	movs	r1, #4
   17be2:	4638      	mov	r0, r7
   17be4:	f000 fec8 	bl	18978 <interface_socket_wait>
   17be8:	4604      	mov	r4, r0
   17bea:	b308      	cbz	r0, 17c30 <ip_interface_bind+0x114>
   17bec:	682b      	ldr	r3, [r5, #0]
   17bee:	0c1b      	lsrs	r3, r3, #16
   17bf0:	041b      	lsls	r3, r3, #16
   17bf2:	f043 0302 	orr.w	r3, r3, #2
   17bf6:	602b      	str	r3, [r5, #0]
   17bf8:	e7c7      	b.n	17b8a <ip_interface_bind+0x6e>
   17bfa:	2a10      	cmp	r2, #16
   17bfc:	d1c4      	bne.n	17b88 <ip_interface_bind+0x6c>
   17bfe:	2204      	movs	r2, #4
   17c00:	8933      	ldrh	r3, [r6, #8]
   17c02:	f106 010c 	add.w	r1, r6, #12
   17c06:	82e2      	strh	r2, [r4, #22]
   17c08:	82a3      	strh	r3, [r4, #20]
   17c0a:	f005 fbf2 	bl	1d3f2 <memcpy>
   17c0e:	e7d1      	b.n	17bb4 <ip_interface_bind+0x98>
   17c10:	6820      	ldr	r0, [r4, #0]
   17c12:	b108      	cbz	r0, 17c18 <ip_interface_bind+0xfc>
   17c14:	f7fb feae 	bl	13974 <rpc_ip_client_data_free>
   17c18:	0c36      	lsrs	r6, r6, #16
   17c1a:	0436      	lsls	r6, r6, #16
   17c1c:	4620      	mov	r0, r4
   17c1e:	f046 0602 	orr.w	r6, r6, #2
   17c22:	f7fb fe9f 	bl	13964 <rpc_ip_client_message_free>
   17c26:	2423      	movs	r4, #35	; 0x23
   17c28:	602e      	str	r6, [r5, #0]
   17c2a:	e7ae      	b.n	17b8a <ip_interface_bind+0x6e>
   17c2c:	2409      	movs	r4, #9
   17c2e:	e7ac      	b.n	17b8a <ip_interface_bind+0x6e>
   17c30:	4638      	mov	r0, r7
   17c32:	f000 ff0d 	bl	18a50 <interface_socket_from_handle_get>
   17c36:	2800      	cmp	r0, #0
   17c38:	d0ac      	beq.n	17b94 <ip_interface_bind+0x78>
   17c3a:	6844      	ldr	r4, [r0, #4]
   17c3c:	2c00      	cmp	r4, #0
   17c3e:	d0a9      	beq.n	17b94 <ip_interface_bind+0x78>
   17c40:	f8c0 8004 	str.w	r8, [r0, #4]
   17c44:	e7d2      	b.n	17bec <ip_interface_bind+0xd0>
   17c46:	bf00      	nop

00017c48 <ip_interface_listen>:
   17c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c4c:	b082      	sub	sp, #8
   17c4e:	4606      	mov	r6, r0
   17c50:	f000 fefe 	bl	18a50 <interface_socket_from_handle_get>
   17c54:	2800      	cmp	r0, #0
   17c56:	d067      	beq.n	17d28 <ip_interface_listen+0xe0>
   17c58:	6803      	ldr	r3, [r0, #0]
   17c5a:	4605      	mov	r5, r0
   17c5c:	b29b      	uxth	r3, r3
   17c5e:	2b04      	cmp	r3, #4
   17c60:	d162      	bne.n	17d28 <ip_interface_listen+0xe0>
   17c62:	2100      	movs	r1, #0
   17c64:	4a32      	ldr	r2, [pc, #200]	; (17d30 <ip_interface_listen+0xe8>)
   17c66:	4630      	mov	r0, r6
   17c68:	f000 fe4e 	bl	18908 <interface_socket_packet_handler_update>
   17c6c:	4601      	mov	r1, r0
   17c6e:	2800      	cmp	r0, #0
   17c70:	d15c      	bne.n	17d2c <ip_interface_listen+0xe4>
   17c72:	a802      	add	r0, sp, #8
   17c74:	f840 1d04 	str.w	r1, [r0, #-4]!
   17c78:	69af      	ldr	r7, [r5, #24]
   17c7a:	f7fb fe49 	bl	13910 <rpc_ip_client_request_alloc>
   17c7e:	bba8      	cbnz	r0, 17cec <ip_interface_listen+0xa4>
   17c80:	f247 0308 	movw	r3, #28680	; 0x7008
   17c84:	2208      	movs	r2, #8
   17c86:	9c01      	ldr	r4, [sp, #4]
   17c88:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17c8c:	60e3      	str	r3, [r4, #12]
   17c8e:	6127      	str	r7, [r4, #16]
   17c90:	7260      	strb	r0, [r4, #9]
   17c92:	72a0      	strb	r0, [r4, #10]
   17c94:	72e0      	strb	r0, [r4, #11]
   17c96:	7222      	strb	r2, [r4, #8]
   17c98:	68a3      	ldr	r3, [r4, #8]
   17c9a:	f247 0108 	movw	r1, #28680	; 0x7008
   17c9e:	3304      	adds	r3, #4
   17ca0:	60a3      	str	r3, [r4, #8]
   17ca2:	682b      	ldr	r3, [r5, #0]
   17ca4:	4620      	mov	r0, r4
   17ca6:	0c1b      	lsrs	r3, r3, #16
   17ca8:	041b      	lsls	r3, r3, #16
   17caa:	f043 0306 	orr.w	r3, r3, #6
   17cae:	602b      	str	r3, [r5, #0]
   17cb0:	682f      	ldr	r7, [r5, #0]
   17cb2:	f7fb fe41 	bl	13938 <rpc_ip_client_request_send>
   17cb6:	4680      	mov	r8, r0
   17cb8:	b9e8      	cbnz	r0, 17cf6 <ip_interface_listen+0xae>
   17cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17cc2:	2107      	movs	r1, #7
   17cc4:	4630      	mov	r0, r6
   17cc6:	f000 fe57 	bl	18978 <interface_socket_wait>
   17cca:	4604      	mov	r4, r0
   17ccc:	b308      	cbz	r0, 17d12 <ip_interface_listen+0xca>
   17cce:	682b      	ldr	r3, [r5, #0]
   17cd0:	0c1b      	lsrs	r3, r3, #16
   17cd2:	041b      	lsls	r3, r3, #16
   17cd4:	f043 0304 	orr.w	r3, r3, #4
   17cd8:	602b      	str	r3, [r5, #0]
   17cda:	4620      	mov	r0, r4
   17cdc:	f7f9 fd3a 	bl	11754 <bsd_os_errno_set>
   17ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17ce4:	4620      	mov	r0, r4
   17ce6:	b002      	add	sp, #8
   17ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17cec:	9c01      	ldr	r4, [sp, #4]
   17cee:	2c00      	cmp	r4, #0
   17cf0:	d1d2      	bne.n	17c98 <ip_interface_listen+0x50>
   17cf2:	240c      	movs	r4, #12
   17cf4:	e7f1      	b.n	17cda <ip_interface_listen+0x92>
   17cf6:	6820      	ldr	r0, [r4, #0]
   17cf8:	b108      	cbz	r0, 17cfe <ip_interface_listen+0xb6>
   17cfa:	f7fb fe3b 	bl	13974 <rpc_ip_client_data_free>
   17cfe:	0c3f      	lsrs	r7, r7, #16
   17d00:	043f      	lsls	r7, r7, #16
   17d02:	4620      	mov	r0, r4
   17d04:	f047 0704 	orr.w	r7, r7, #4
   17d08:	f7fb fe2c 	bl	13964 <rpc_ip_client_message_free>
   17d0c:	2423      	movs	r4, #35	; 0x23
   17d0e:	602f      	str	r7, [r5, #0]
   17d10:	e7e3      	b.n	17cda <ip_interface_listen+0x92>
   17d12:	4630      	mov	r0, r6
   17d14:	f000 fe9c 	bl	18a50 <interface_socket_from_handle_get>
   17d18:	2800      	cmp	r0, #0
   17d1a:	d0e3      	beq.n	17ce4 <ip_interface_listen+0x9c>
   17d1c:	6844      	ldr	r4, [r0, #4]
   17d1e:	2c00      	cmp	r4, #0
   17d20:	d0e0      	beq.n	17ce4 <ip_interface_listen+0x9c>
   17d22:	f8c0 8004 	str.w	r8, [r0, #4]
   17d26:	e7d2      	b.n	17cce <ip_interface_listen+0x86>
   17d28:	2409      	movs	r4, #9
   17d2a:	e7d6      	b.n	17cda <ip_interface_listen+0x92>
   17d2c:	2423      	movs	r4, #35	; 0x23
   17d2e:	e7d4      	b.n	17cda <ip_interface_listen+0x92>
   17d30:	000171d9 	.word	0x000171d9

00017d34 <ip_interface_accept>:
   17d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d38:	2500      	movs	r5, #0
   17d3a:	b085      	sub	sp, #20
   17d3c:	460f      	mov	r7, r1
   17d3e:	4690      	mov	r8, r2
   17d40:	9502      	str	r5, [sp, #8]
   17d42:	4606      	mov	r6, r0
   17d44:	f000 fe84 	bl	18a50 <interface_socket_from_handle_get>
   17d48:	4604      	mov	r4, r0
   17d4a:	2800      	cmp	r0, #0
   17d4c:	f000 811c 	beq.w	17f88 <ip_interface_accept+0x254>
   17d50:	6803      	ldr	r3, [r0, #0]
   17d52:	b29b      	uxth	r3, r3
   17d54:	2b07      	cmp	r3, #7
   17d56:	d10a      	bne.n	17d6e <ip_interface_accept+0x3a>
   17d58:	6803      	ldr	r3, [r0, #0]
   17d5a:	6805      	ldr	r5, [r0, #0]
   17d5c:	00db      	lsls	r3, r3, #3
   17d5e:	d416      	bmi.n	17d8e <ip_interface_accept+0x5a>
   17d60:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17d64:	d019      	beq.n	17d9a <ip_interface_accept+0x66>
   17d66:	6805      	ldr	r5, [r0, #0]
   17d68:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17d6c:	d124      	bne.n	17db8 <ip_interface_accept+0x84>
   17d6e:	f04f 0909 	mov.w	r9, #9
   17d72:	9b02      	ldr	r3, [sp, #8]
   17d74:	b113      	cbz	r3, 17d7c <ip_interface_accept+0x48>
   17d76:	4628      	mov	r0, r5
   17d78:	f000 fdb0 	bl	188dc <interface_socket_free>
   17d7c:	4648      	mov	r0, r9
   17d7e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   17d82:	f7f9 fce7 	bl	11754 <bsd_os_errno_set>
   17d86:	4648      	mov	r0, r9
   17d88:	b005      	add	sp, #20
   17d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d8e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17d92:	d16d      	bne.n	17e70 <ip_interface_accept+0x13c>
   17d94:	f04f 0923 	mov.w	r9, #35	; 0x23
   17d98:	e7eb      	b.n	17d72 <ip_interface_accept+0x3e>
   17d9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17da2:	4611      	mov	r1, r2
   17da4:	4630      	mov	r0, r6
   17da6:	f000 fde7 	bl	18978 <interface_socket_wait>
   17daa:	4681      	mov	r9, r0
   17dac:	2800      	cmp	r0, #0
   17dae:	d07e      	beq.n	17eae <ip_interface_accept+0x17a>
   17db0:	6825      	ldr	r5, [r4, #0]
   17db2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17db6:	d0dc      	beq.n	17d72 <ip_interface_accept+0x3e>
   17db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17dbc:	2300      	movs	r3, #0
   17dbe:	e9cd 0300 	strd	r0, r3, [sp]
   17dc2:	4a75      	ldr	r2, [pc, #468]	; (17f98 <ip_interface_accept+0x264>)
   17dc4:	6921      	ldr	r1, [r4, #16]
   17dc6:	a802      	add	r0, sp, #8
   17dc8:	f000 fd32 	bl	18830 <interface_socket_allocate>
   17dcc:	9b02      	ldr	r3, [sp, #8]
   17dce:	4605      	mov	r5, r0
   17dd0:	2b00      	cmp	r3, #0
   17dd2:	f000 80dd 	beq.w	17f90 <ip_interface_accept+0x25c>
   17dd6:	2100      	movs	r1, #0
   17dd8:	6962      	ldr	r2, [r4, #20]
   17dda:	a804      	add	r0, sp, #16
   17ddc:	615a      	str	r2, [r3, #20]
   17dde:	68e2      	ldr	r2, [r4, #12]
   17de0:	f840 1d04 	str.w	r1, [r0, #-4]!
   17de4:	60da      	str	r2, [r3, #12]
   17de6:	6922      	ldr	r2, [r4, #16]
   17de8:	611a      	str	r2, [r3, #16]
   17dea:	f8d4 9018 	ldr.w	r9, [r4, #24]
   17dee:	f7fb fd8f 	bl	13910 <rpc_ip_client_request_alloc>
   17df2:	2800      	cmp	r0, #0
   17df4:	d143      	bne.n	17e7e <ip_interface_accept+0x14a>
   17df6:	f247 030c 	movw	r3, #28684	; 0x700c
   17dfa:	2108      	movs	r1, #8
   17dfc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   17e00:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   17e04:	f8cb 300c 	str.w	r3, [fp, #12]
   17e08:	f8cb 9010 	str.w	r9, [fp, #16]
   17e0c:	f88b 0009 	strb.w	r0, [fp, #9]
   17e10:	f88b 000a 	strb.w	r0, [fp, #10]
   17e14:	f88b 000b 	strb.w	r0, [fp, #11]
   17e18:	f88b 1008 	strb.w	r1, [fp, #8]
   17e1c:	6823      	ldr	r3, [r4, #0]
   17e1e:	f247 010c 	movw	r1, #28684	; 0x700c
   17e22:	0c1b      	lsrs	r3, r3, #16
   17e24:	041b      	lsls	r3, r3, #16
   17e26:	f043 0308 	orr.w	r3, r3, #8
   17e2a:	6023      	str	r3, [r4, #0]
   17e2c:	4658      	mov	r0, fp
   17e2e:	f8d4 9000 	ldr.w	r9, [r4]
   17e32:	f7fb fd81 	bl	13938 <rpc_ip_client_request_send>
   17e36:	4682      	mov	sl, r0
   17e38:	bb48      	cbnz	r0, 17e8e <ip_interface_accept+0x15a>
   17e3a:	6822      	ldr	r2, [r4, #0]
   17e3c:	9900      	ldr	r1, [sp, #0]
   17e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e42:	400a      	ands	r2, r1
   17e44:	6022      	str	r2, [r4, #0]
   17e46:	2109      	movs	r1, #9
   17e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17e4c:	4630      	mov	r0, r6
   17e4e:	f000 fd93 	bl	18978 <interface_socket_wait>
   17e52:	4681      	mov	r9, r0
   17e54:	2800      	cmp	r0, #0
   17e56:	f000 8085 	beq.w	17f64 <ip_interface_accept+0x230>
   17e5a:	6823      	ldr	r3, [r4, #0]
   17e5c:	9a01      	ldr	r2, [sp, #4]
   17e5e:	431a      	orrs	r2, r3
   17e60:	6022      	str	r2, [r4, #0]
   17e62:	6823      	ldr	r3, [r4, #0]
   17e64:	0c1b      	lsrs	r3, r3, #16
   17e66:	041b      	lsls	r3, r3, #16
   17e68:	f043 0307 	orr.w	r3, r3, #7
   17e6c:	6023      	str	r3, [r4, #0]
   17e6e:	e780      	b.n	17d72 <ip_interface_accept+0x3e>
   17e70:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   17e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17e78:	e9cd 2300 	strd	r2, r3, [sp]
   17e7c:	e7a1      	b.n	17dc2 <ip_interface_accept+0x8e>
   17e7e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   17e82:	f04f 090c 	mov.w	r9, #12
   17e86:	f1bb 0f00 	cmp.w	fp, #0
   17e8a:	d1c7      	bne.n	17e1c <ip_interface_accept+0xe8>
   17e8c:	e771      	b.n	17d72 <ip_interface_accept+0x3e>
   17e8e:	f8db 0000 	ldr.w	r0, [fp]
   17e92:	b108      	cbz	r0, 17e98 <ip_interface_accept+0x164>
   17e94:	f7fb fd6e 	bl	13974 <rpc_ip_client_data_free>
   17e98:	ea4f 4919 	mov.w	r9, r9, lsr #16
   17e9c:	4658      	mov	r0, fp
   17e9e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   17ea2:	f7fb fd5f 	bl	13964 <rpc_ip_client_message_free>
   17ea6:	f049 0307 	orr.w	r3, r9, #7
   17eaa:	6023      	str	r3, [r4, #0]
   17eac:	e772      	b.n	17d94 <ip_interface_accept+0x60>
   17eae:	4630      	mov	r0, r6
   17eb0:	f000 fdce 	bl	18a50 <interface_socket_from_handle_get>
   17eb4:	b130      	cbz	r0, 17ec4 <ip_interface_accept+0x190>
   17eb6:	f8d0 9004 	ldr.w	r9, [r0, #4]
   17eba:	f1b9 0f00 	cmp.w	r9, #0
   17ebe:	d001      	beq.n	17ec4 <ip_interface_accept+0x190>
   17ec0:	6045      	str	r5, [r0, #4]
   17ec2:	e775      	b.n	17db0 <ip_interface_accept+0x7c>
   17ec4:	6823      	ldr	r3, [r4, #0]
   17ec6:	03d9      	lsls	r1, r3, #15
   17ec8:	f53f af76 	bmi.w	17db8 <ip_interface_accept+0x84>
   17ecc:	4d33      	ldr	r5, [pc, #204]	; (17f9c <ip_interface_accept+0x268>)
   17ece:	9902      	ldr	r1, [sp, #8]
   17ed0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17ed4:	699b      	ldr	r3, [r3, #24]
   17ed6:	618b      	str	r3, [r1, #24]
   17ed8:	b147      	cbz	r7, 17eec <ip_interface_accept+0x1b8>
   17eda:	68cb      	ldr	r3, [r1, #12]
   17edc:	2b0a      	cmp	r3, #10
   17ede:	d024      	beq.n	17f2a <ip_interface_accept+0x1f6>
   17ee0:	2b02      	cmp	r3, #2
   17ee2:	d103      	bne.n	17eec <ip_interface_accept+0x1b8>
   17ee4:	f8d8 2000 	ldr.w	r2, [r8]
   17ee8:	2a10      	cmp	r2, #16
   17eea:	d032      	beq.n	17f52 <ip_interface_accept+0x21e>
   17eec:	680a      	ldr	r2, [r1, #0]
   17eee:	482c      	ldr	r0, [pc, #176]	; (17fa0 <ip_interface_accept+0x26c>)
   17ef0:	4002      	ands	r2, r0
   17ef2:	f042 0205 	orr.w	r2, r2, #5
   17ef6:	600a      	str	r2, [r1, #0]
   17ef8:	9a02      	ldr	r2, [sp, #8]
   17efa:	6811      	ldr	r1, [r2, #0]
   17efc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   17f00:	6011      	str	r1, [r2, #0]
   17f02:	6811      	ldr	r1, [r2, #0]
   17f04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17f08:	6011      	str	r1, [r2, #0]
   17f0a:	6823      	ldr	r3, [r4, #0]
   17f0c:	4003      	ands	r3, r0
   17f0e:	f043 0307 	orr.w	r3, r3, #7
   17f12:	6023      	str	r3, [r4, #0]
   17f14:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   17f18:	f7fb fd24 	bl	13964 <rpc_ip_client_message_free>
   17f1c:	2300      	movs	r3, #0
   17f1e:	4648      	mov	r0, r9
   17f20:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   17f24:	b005      	add	sp, #20
   17f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f2a:	f8d8 2000 	ldr.w	r2, [r8]
   17f2e:	2a24      	cmp	r2, #36	; 0x24
   17f30:	d1dc      	bne.n	17eec <ip_interface_accept+0x1b8>
   17f32:	703a      	strb	r2, [r7, #0]
   17f34:	2210      	movs	r2, #16
   17f36:	607b      	str	r3, [r7, #4]
   17f38:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17f3c:	f107 0010 	add.w	r0, r7, #16
   17f40:	8b9b      	ldrh	r3, [r3, #28]
   17f42:	813b      	strh	r3, [r7, #8]
   17f44:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   17f48:	3120      	adds	r1, #32
   17f4a:	f005 fa52 	bl	1d3f2 <memcpy>
   17f4e:	9902      	ldr	r1, [sp, #8]
   17f50:	e7cc      	b.n	17eec <ip_interface_accept+0x1b8>
   17f52:	703a      	strb	r2, [r7, #0]
   17f54:	607b      	str	r3, [r7, #4]
   17f56:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   17f5a:	f107 000c 	add.w	r0, r7, #12
   17f5e:	8b9b      	ldrh	r3, [r3, #28]
   17f60:	2204      	movs	r2, #4
   17f62:	e7ee      	b.n	17f42 <ip_interface_accept+0x20e>
   17f64:	4630      	mov	r0, r6
   17f66:	f000 fd73 	bl	18a50 <interface_socket_from_handle_get>
   17f6a:	b138      	cbz	r0, 17f7c <ip_interface_accept+0x248>
   17f6c:	f8d0 9004 	ldr.w	r9, [r0, #4]
   17f70:	f1b9 0f00 	cmp.w	r9, #0
   17f74:	d002      	beq.n	17f7c <ip_interface_accept+0x248>
   17f76:	f8c0 a004 	str.w	sl, [r0, #4]
   17f7a:	e76e      	b.n	17e5a <ip_interface_accept+0x126>
   17f7c:	6823      	ldr	r3, [r4, #0]
   17f7e:	9a01      	ldr	r2, [sp, #4]
   17f80:	46a9      	mov	r9, r5
   17f82:	4313      	orrs	r3, r2
   17f84:	6023      	str	r3, [r4, #0]
   17f86:	e7a1      	b.n	17ecc <ip_interface_accept+0x198>
   17f88:	4605      	mov	r5, r0
   17f8a:	f04f 0909 	mov.w	r9, #9
   17f8e:	e6f0      	b.n	17d72 <ip_interface_accept+0x3e>
   17f90:	f04f 090c 	mov.w	r9, #12
   17f94:	e6f2      	b.n	17d7c <ip_interface_accept+0x48>
   17f96:	bf00      	nop
   17f98:	000171d9 	.word	0x000171d9
   17f9c:	20020934 	.word	0x20020934
   17fa0:	ffff0000 	.word	0xffff0000

00017fa4 <ip_interface_setopt>:
   17fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fa8:	2901      	cmp	r1, #1
   17faa:	b084      	sub	sp, #16
   17fac:	f040 809c 	bne.w	180e8 <ip_interface_setopt+0x144>
   17fb0:	460e      	mov	r6, r1
   17fb2:	4690      	mov	r8, r2
   17fb4:	461d      	mov	r5, r3
   17fb6:	4607      	mov	r7, r0
   17fb8:	f000 fd4a 	bl	18a50 <interface_socket_from_handle_get>
   17fbc:	4604      	mov	r4, r0
   17fbe:	2800      	cmp	r0, #0
   17fc0:	f000 80a5 	beq.w	1810e <ip_interface_setopt+0x16a>
   17fc4:	f1b8 0f19 	cmp.w	r8, #25
   17fc8:	d16e      	bne.n	180a8 <ip_interface_setopt+0x104>
   17fca:	2d00      	cmp	r5, #0
   17fcc:	f000 8092 	beq.w	180f4 <ip_interface_setopt+0x150>
   17fd0:	4628      	mov	r0, r5
   17fd2:	f005 f9d3 	bl	1d37c <strlen>
   17fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17fd8:	4298      	cmp	r0, r3
   17fda:	f040 808b 	bne.w	180f4 <ip_interface_setopt+0x150>
   17fde:	6823      	ldr	r3, [r4, #0]
   17fe0:	b29b      	uxth	r3, r3
   17fe2:	2b02      	cmp	r3, #2
   17fe4:	d173      	bne.n	180ce <ip_interface_setopt+0x12a>
   17fe6:	4629      	mov	r1, r5
   17fe8:	68e0      	ldr	r0, [r4, #12]
   17fea:	f7fe fb91 	bl	16710 <pdn_interface_pdn_id_get>
   17fee:	9002      	str	r0, [sp, #8]
   17ff0:	3001      	adds	r0, #1
   17ff2:	bf08      	it	eq
   17ff4:	2516      	moveq	r5, #22
   17ff6:	d04e      	beq.n	18096 <ip_interface_setopt+0xf2>
   17ff8:	6823      	ldr	r3, [r4, #0]
   17ffa:	025b      	lsls	r3, r3, #9
   17ffc:	d44a      	bmi.n	18094 <ip_interface_setopt+0xf0>
   17ffe:	6823      	ldr	r3, [r4, #0]
   18000:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   18004:	d146      	bne.n	18094 <ip_interface_setopt+0xf0>
   18006:	6826      	ldr	r6, [r4, #0]
   18008:	6822      	ldr	r2, [r4, #0]
   1800a:	a804      	add	r0, sp, #16
   1800c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   18010:	6022      	str	r2, [r4, #0]
   18012:	2104      	movs	r1, #4
   18014:	f840 3d04 	str.w	r3, [r0, #-4]!
   18018:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1801c:	f7fb fc78 	bl	13910 <rpc_ip_client_request_alloc>
   18020:	2800      	cmp	r0, #0
   18022:	d14e      	bne.n	180c2 <ip_interface_setopt+0x11e>
   18024:	f247 0203 	movw	r2, #28675	; 0x7003
   18028:	2300      	movs	r3, #0
   1802a:	2108      	movs	r1, #8
   1802c:	9d03      	ldr	r5, [sp, #12]
   1802e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   18032:	60ea      	str	r2, [r5, #12]
   18034:	f8c5 8010 	str.w	r8, [r5, #16]
   18038:	7229      	strb	r1, [r5, #8]
   1803a:	726b      	strb	r3, [r5, #9]
   1803c:	72ab      	strb	r3, [r5, #10]
   1803e:	72eb      	strb	r3, [r5, #11]
   18040:	f04f 0c08 	mov.w	ip, #8
   18044:	2300      	movs	r3, #0
   18046:	2010      	movs	r0, #16
   18048:	2130      	movs	r1, #48	; 0x30
   1804a:	68aa      	ldr	r2, [r5, #8]
   1804c:	756b      	strb	r3, [r5, #21]
   1804e:	4462      	add	r2, ip
   18050:	60aa      	str	r2, [r5, #8]
   18052:	75ab      	strb	r3, [r5, #22]
   18054:	75eb      	strb	r3, [r5, #23]
   18056:	76ab      	strb	r3, [r5, #26]
   18058:	76eb      	strb	r3, [r5, #27]
   1805a:	f885 c014 	strb.w	ip, [r5, #20]
   1805e:	7628      	strb	r0, [r5, #24]
   18060:	7669      	strb	r1, [r5, #25]
   18062:	2204      	movs	r2, #4
   18064:	eb0d 010c 	add.w	r1, sp, ip
   18068:	6828      	ldr	r0, [r5, #0]
   1806a:	f005 f9c2 	bl	1d3f2 <memcpy>
   1806e:	f247 0103 	movw	r1, #28675	; 0x7003
   18072:	4628      	mov	r0, r5
   18074:	f7fb fc60 	bl	13938 <rpc_ip_client_request_send>
   18078:	4680      	mov	r8, r0
   1807a:	bb50      	cbnz	r0, 180d2 <ip_interface_setopt+0x12e>
   1807c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18084:	4611      	mov	r1, r2
   18086:	4638      	mov	r0, r7
   18088:	f000 fc76 	bl	18978 <interface_socket_wait>
   1808c:	4605      	mov	r5, r0
   1808e:	b398      	cbz	r0, 180f8 <ip_interface_setopt+0x154>
   18090:	6026      	str	r6, [r4, #0]
   18092:	e000      	b.n	18096 <ip_interface_setopt+0xf2>
   18094:	2523      	movs	r5, #35	; 0x23
   18096:	4628      	mov	r0, r5
   18098:	f7f9 fb5c 	bl	11754 <bsd_os_errno_set>
   1809c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   180a0:	4628      	mov	r0, r5
   180a2:	b004      	add	sp, #16
   180a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   180aa:	4642      	mov	r2, r8
   180ac:	9300      	str	r3, [sp, #0]
   180ae:	4631      	mov	r1, r6
   180b0:	462b      	mov	r3, r5
   180b2:	4638      	mov	r0, r7
   180b4:	f000 fcf4 	bl	18aa0 <interface_socket_setopt>
   180b8:	4605      	mov	r5, r0
   180ba:	4628      	mov	r0, r5
   180bc:	b004      	add	sp, #16
   180be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180c2:	9d03      	ldr	r5, [sp, #12]
   180c4:	2d00      	cmp	r5, #0
   180c6:	d1bb      	bne.n	18040 <ip_interface_setopt+0x9c>
   180c8:	6026      	str	r6, [r4, #0]
   180ca:	250c      	movs	r5, #12
   180cc:	e7e3      	b.n	18096 <ip_interface_setopt+0xf2>
   180ce:	2509      	movs	r5, #9
   180d0:	e7e1      	b.n	18096 <ip_interface_setopt+0xf2>
   180d2:	6828      	ldr	r0, [r5, #0]
   180d4:	b108      	cbz	r0, 180da <ip_interface_setopt+0x136>
   180d6:	f7fb fc4d 	bl	13974 <rpc_ip_client_data_free>
   180da:	4628      	mov	r0, r5
   180dc:	f7fb fc42 	bl	13964 <rpc_ip_client_message_free>
   180e0:	2523      	movs	r5, #35	; 0x23
   180e2:	6026      	str	r6, [r4, #0]
   180e4:	6026      	str	r6, [r4, #0]
   180e6:	e7d6      	b.n	18096 <ip_interface_setopt+0xf2>
   180e8:	202a      	movs	r0, #42	; 0x2a
   180ea:	f7f9 fb33 	bl	11754 <bsd_os_errno_set>
   180ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   180f2:	e7d5      	b.n	180a0 <ip_interface_setopt+0xfc>
   180f4:	250e      	movs	r5, #14
   180f6:	e7ce      	b.n	18096 <ip_interface_setopt+0xf2>
   180f8:	4638      	mov	r0, r7
   180fa:	f000 fca9 	bl	18a50 <interface_socket_from_handle_get>
   180fe:	b120      	cbz	r0, 1810a <ip_interface_setopt+0x166>
   18100:	6845      	ldr	r5, [r0, #4]
   18102:	b115      	cbz	r5, 1810a <ip_interface_setopt+0x166>
   18104:	f8c0 8004 	str.w	r8, [r0, #4]
   18108:	e7c2      	b.n	18090 <ip_interface_setopt+0xec>
   1810a:	6026      	str	r6, [r4, #0]
   1810c:	e7c8      	b.n	180a0 <ip_interface_setopt+0xfc>
   1810e:	2009      	movs	r0, #9
   18110:	f7f9 fb20 	bl	11754 <bsd_os_errno_set>
   18114:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18118:	e7c2      	b.n	180a0 <ip_interface_setopt+0xfc>
   1811a:	bf00      	nop

0001811c <ip_interface_getopt>:
   1811c:	f000 bcf6 	b.w	18b0c <interface_socket_getopt>

00018120 <ip_interface_getaddrinfo>:
   18120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18124:	f04f 0c00 	mov.w	ip, #0
   18128:	2401      	movs	r4, #1
   1812a:	4e72      	ldr	r6, [pc, #456]	; (182f4 <ip_interface_getaddrinfo+0x1d4>)
   1812c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 18300 <ip_interface_getaddrinfo+0x1e0>
   18130:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 18304 <ip_interface_getaddrinfo+0x1e4>
   18134:	b085      	sub	sp, #20
   18136:	4607      	mov	r7, r0
   18138:	4615      	mov	r5, r2
   1813a:	9301      	str	r3, [sp, #4]
   1813c:	f8a6 c000 	strh.w	ip, [r6]
   18140:	f8ca 4000 	str.w	r4, [sl]
   18144:	f8c9 4000 	str.w	r4, [r9]
   18148:	b171      	cbz	r1, 18168 <ip_interface_getaddrinfo+0x48>
   1814a:	4608      	mov	r0, r1
   1814c:	220a      	movs	r2, #10
   1814e:	4661      	mov	r1, ip
   18150:	f004 ffd0 	bl	1d0f4 <strtol>
   18154:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   18158:	1e42      	subs	r2, r0, #1
   1815a:	429a      	cmp	r2, r3
   1815c:	f200 8083 	bhi.w	18266 <ip_interface_getaddrinfo+0x146>
   18160:	0203      	lsls	r3, r0, #8
   18162:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   18166:	8030      	strh	r0, [r6, #0]
   18168:	f8df 819c 	ldr.w	r8, [pc, #412]	; 18308 <ip_interface_getaddrinfo+0x1e8>
   1816c:	f8d8 3000 	ldr.w	r3, [r8]
   18170:	2b00      	cmp	r3, #0
   18172:	d174      	bne.n	1825e <ip_interface_getaddrinfo+0x13e>
   18174:	4a60      	ldr	r2, [pc, #384]	; (182f8 <ip_interface_getaddrinfo+0x1d8>)
   18176:	6013      	str	r3, [r2, #0]
   18178:	4a60      	ldr	r2, [pc, #384]	; (182fc <ip_interface_getaddrinfo+0x1dc>)
   1817a:	6013      	str	r3, [r2, #0]
   1817c:	2f00      	cmp	r7, #0
   1817e:	d062      	beq.n	18246 <ip_interface_getaddrinfo+0x126>
   18180:	4638      	mov	r0, r7
   18182:	f005 f8fb 	bl	1d37c <strlen>
   18186:	4683      	mov	fp, r0
   18188:	b125      	cbz	r5, 18194 <ip_interface_getaddrinfo+0x74>
   1818a:	69ea      	ldr	r2, [r5, #28]
   1818c:	b112      	cbz	r2, 18194 <ip_interface_getaddrinfo+0x74>
   1818e:	6851      	ldr	r1, [r2, #4]
   18190:	2966      	cmp	r1, #102	; 0x66
   18192:	d06c      	beq.n	1826e <ip_interface_getaddrinfo+0x14e>
   18194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18198:	2100      	movs	r1, #0
   1819a:	ae04      	add	r6, sp, #16
   1819c:	f846 1d04 	str.w	r1, [r6, #-4]!
   181a0:	4630      	mov	r0, r6
   181a2:	4659      	mov	r1, fp
   181a4:	9200      	str	r2, [sp, #0]
   181a6:	f7fb fbb3 	bl	13910 <rpc_ip_client_request_alloc>
   181aa:	9a00      	ldr	r2, [sp, #0]
   181ac:	2800      	cmp	r0, #0
   181ae:	d14c      	bne.n	1824a <ip_interface_getaddrinfo+0x12a>
   181b0:	f247 010d 	movw	r1, #28685	; 0x700d
   181b4:	f04f 0c08 	mov.w	ip, #8
   181b8:	9c03      	ldr	r4, [sp, #12]
   181ba:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   181be:	60e1      	str	r1, [r4, #12]
   181c0:	6122      	str	r2, [r4, #16]
   181c2:	7260      	strb	r0, [r4, #9]
   181c4:	72a0      	strb	r0, [r4, #10]
   181c6:	72e0      	strb	r0, [r4, #11]
   181c8:	f884 c008 	strb.w	ip, [r4, #8]
   181cc:	2d00      	cmp	r5, #0
   181ce:	d076      	beq.n	182be <ip_interface_getaddrinfo+0x19e>
   181d0:	686a      	ldr	r2, [r5, #4]
   181d2:	f022 0108 	bic.w	r1, r2, #8
   181d6:	2902      	cmp	r1, #2
   181d8:	d05c      	beq.n	18294 <ip_interface_getaddrinfo+0x174>
   181da:	2a05      	cmp	r2, #5
   181dc:	d178      	bne.n	182d0 <ip_interface_getaddrinfo+0x1b0>
   181de:	68a9      	ldr	r1, [r5, #8]
   181e0:	2902      	cmp	r1, #2
   181e2:	f8c9 1000 	str.w	r1, [r9]
   181e6:	d061      	beq.n	182ac <ip_interface_getaddrinfo+0x18c>
   181e8:	61a2      	str	r2, [r4, #24]
   181ea:	68ea      	ldr	r2, [r5, #12]
   181ec:	6222      	str	r2, [r4, #32]
   181ee:	68aa      	ldr	r2, [r5, #8]
   181f0:	61e2      	str	r2, [r4, #28]
   181f2:	682a      	ldr	r2, [r5, #0]
   181f4:	6162      	str	r2, [r4, #20]
   181f6:	68a2      	ldr	r2, [r4, #8]
   181f8:	3210      	adds	r2, #16
   181fa:	60a2      	str	r2, [r4, #8]
   181fc:	b12f      	cbz	r7, 1820a <ip_interface_getaddrinfo+0xea>
   181fe:	6820      	ldr	r0, [r4, #0]
   18200:	b118      	cbz	r0, 1820a <ip_interface_getaddrinfo+0xea>
   18202:	465a      	mov	r2, fp
   18204:	4639      	mov	r1, r7
   18206:	f005 f8f4 	bl	1d3f2 <memcpy>
   1820a:	2301      	movs	r3, #1
   1820c:	f247 010d 	movw	r1, #28685	; 0x700d
   18210:	4620      	mov	r0, r4
   18212:	f8c8 3000 	str.w	r3, [r8]
   18216:	f7fb fb8f 	bl	13938 <rpc_ip_client_request_send>
   1821a:	2800      	cmp	r0, #0
   1821c:	d156      	bne.n	182cc <ip_interface_getaddrinfo+0x1ac>
   1821e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18222:	9303      	str	r3, [sp, #12]
   18224:	4631      	mov	r1, r6
   18226:	4620      	mov	r0, r4
   18228:	f7f9 fa00 	bl	1162c <bsd_os_timedwait>
   1822c:	f8d8 3000 	ldr.w	r3, [r8]
   18230:	2b01      	cmp	r3, #1
   18232:	d0f7      	beq.n	18224 <ip_interface_getaddrinfo+0x104>
   18234:	4b31      	ldr	r3, [pc, #196]	; (182fc <ip_interface_getaddrinfo+0x1dc>)
   18236:	6818      	ldr	r0, [r3, #0]
   18238:	2800      	cmp	r0, #0
   1823a:	d13b      	bne.n	182b4 <ip_interface_getaddrinfo+0x194>
   1823c:	4b2e      	ldr	r3, [pc, #184]	; (182f8 <ip_interface_getaddrinfo+0x1d8>)
   1823e:	9a01      	ldr	r2, [sp, #4]
   18240:	681b      	ldr	r3, [r3, #0]
   18242:	6013      	str	r3, [r2, #0]
   18244:	e00c      	b.n	18260 <ip_interface_getaddrinfo+0x140>
   18246:	46bb      	mov	fp, r7
   18248:	e79e      	b.n	18188 <ip_interface_getaddrinfo+0x68>
   1824a:	9c03      	ldr	r4, [sp, #12]
   1824c:	2c00      	cmp	r4, #0
   1824e:	d1bd      	bne.n	181cc <ip_interface_getaddrinfo+0xac>
   18250:	200c      	movs	r0, #12
   18252:	2300      	movs	r3, #0
   18254:	f8c8 3000 	str.w	r3, [r8]
   18258:	b005      	add	sp, #20
   1825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1825e:	2073      	movs	r0, #115	; 0x73
   18260:	b005      	add	sp, #20
   18262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18266:	2016      	movs	r0, #22
   18268:	b005      	add	sp, #20
   1826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1826e:	6891      	ldr	r1, [r2, #8]
   18270:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   18274:	d18e      	bne.n	18194 <ip_interface_getaddrinfo+0x74>
   18276:	f240 2102 	movw	r1, #514	; 0x202
   1827a:	68d0      	ldr	r0, [r2, #12]
   1827c:	4288      	cmp	r0, r1
   1827e:	d189      	bne.n	18194 <ip_interface_getaddrinfo+0x74>
   18280:	6991      	ldr	r1, [r2, #24]
   18282:	2900      	cmp	r1, #0
   18284:	d086      	beq.n	18194 <ip_interface_getaddrinfo+0x74>
   18286:	6868      	ldr	r0, [r5, #4]
   18288:	f7fe fa42 	bl	16710 <pdn_interface_pdn_id_get>
   1828c:	1c43      	adds	r3, r0, #1
   1828e:	d081      	beq.n	18194 <ip_interface_getaddrinfo+0x74>
   18290:	4602      	mov	r2, r0
   18292:	e781      	b.n	18198 <ip_interface_getaddrinfo+0x78>
   18294:	68a9      	ldr	r1, [r5, #8]
   18296:	2902      	cmp	r1, #2
   18298:	f8c9 1000 	str.w	r1, [r9]
   1829c:	d006      	beq.n	182ac <ip_interface_getaddrinfo+0x18c>
   1829e:	2a05      	cmp	r2, #5
   182a0:	d0a2      	beq.n	181e8 <ip_interface_getaddrinfo+0xc8>
   182a2:	2a0a      	cmp	r2, #10
   182a4:	bf14      	ite	ne
   182a6:	2201      	movne	r2, #1
   182a8:	2202      	moveq	r2, #2
   182aa:	e79d      	b.n	181e8 <ip_interface_getaddrinfo+0xc8>
   182ac:	2102      	movs	r1, #2
   182ae:	f8ca 1000 	str.w	r1, [sl]
   182b2:	e7f4      	b.n	1829e <ip_interface_getaddrinfo+0x17e>
   182b4:	4b11      	ldr	r3, [pc, #68]	; (182fc <ip_interface_getaddrinfo+0x1dc>)
   182b6:	6818      	ldr	r0, [r3, #0]
   182b8:	2800      	cmp	r0, #0
   182ba:	d0d1      	beq.n	18260 <ip_interface_getaddrinfo+0x140>
   182bc:	e7c9      	b.n	18252 <ip_interface_getaddrinfo+0x132>
   182be:	4629      	mov	r1, r5
   182c0:	2210      	movs	r2, #16
   182c2:	f104 0014 	add.w	r0, r4, #20
   182c6:	f005 f8be 	bl	1d446 <memset>
   182ca:	e794      	b.n	181f6 <ip_interface_getaddrinfo+0xd6>
   182cc:	2023      	movs	r0, #35	; 0x23
   182ce:	e7c0      	b.n	18252 <ip_interface_getaddrinfo+0x132>
   182d0:	202f      	movs	r0, #47	; 0x2f
   182d2:	f7f9 fa3f 	bl	11754 <bsd_os_errno_set>
   182d6:	68a2      	ldr	r2, [r4, #8]
   182d8:	3210      	adds	r2, #16
   182da:	60a2      	str	r2, [r4, #8]
   182dc:	b917      	cbnz	r7, 182e4 <ip_interface_getaddrinfo+0x1c4>
   182de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   182e2:	e7b6      	b.n	18252 <ip_interface_getaddrinfo+0x132>
   182e4:	6820      	ldr	r0, [r4, #0]
   182e6:	2800      	cmp	r0, #0
   182e8:	d0f9      	beq.n	182de <ip_interface_getaddrinfo+0x1be>
   182ea:	465a      	mov	r2, fp
   182ec:	4639      	mov	r1, r7
   182ee:	f005 f880 	bl	1d3f2 <memcpy>
   182f2:	e7f4      	b.n	182de <ip_interface_getaddrinfo+0x1be>
   182f4:	20024e22 	.word	0x20024e22
   182f8:	2002092c 	.word	0x2002092c
   182fc:	20020924 	.word	0x20020924
   18300:	2002091c 	.word	0x2002091c
   18304:	20020920 	.word	0x20020920
   18308:	20020928 	.word	0x20020928

0001830c <ip_interface_freeaddrinfo>:
   1830c:	b538      	push	{r3, r4, r5, lr}
   1830e:	4c0b      	ldr	r4, [pc, #44]	; (1833c <ip_interface_freeaddrinfo+0x30>)
   18310:	6823      	ldr	r3, [r4, #0]
   18312:	2b02      	cmp	r3, #2
   18314:	d000      	beq.n	18318 <ip_interface_freeaddrinfo+0xc>
   18316:	bd38      	pop	{r3, r4, r5, pc}
   18318:	b130      	cbz	r0, 18328 <ip_interface_freeaddrinfo+0x1c>
   1831a:	4605      	mov	r5, r0
   1831c:	6940      	ldr	r0, [r0, #20]
   1831e:	f7fb fac9 	bl	138b4 <nrf_free>
   18322:	4628      	mov	r0, r5
   18324:	f7fb fac6 	bl	138b4 <nrf_free>
   18328:	2300      	movs	r3, #0
   1832a:	4a05      	ldr	r2, [pc, #20]	; (18340 <ip_interface_freeaddrinfo+0x34>)
   1832c:	4905      	ldr	r1, [pc, #20]	; (18344 <ip_interface_freeaddrinfo+0x38>)
   1832e:	6023      	str	r3, [r4, #0]
   18330:	6013      	str	r3, [r2, #0]
   18332:	6808      	ldr	r0, [r1, #0]
   18334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18338:	f7fb bb1c 	b.w	13974 <rpc_ip_client_data_free>
   1833c:	20020928 	.word	0x20020928
   18340:	20020924 	.word	0x20020924
   18344:	20020930 	.word	0x20020930

00018348 <rpc_ip_event_handler>:
   18348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1834c:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   18350:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   18354:	4605      	mov	r5, r0
   18356:	b089      	sub	sp, #36	; 0x24
   18358:	460e      	mov	r6, r1
   1835a:	68c0      	ldr	r0, [r0, #12]
   1835c:	d05e      	beq.n	1841c <rpc_ip_event_handler+0xd4>
   1835e:	0c04      	lsrs	r4, r0, #16
   18360:	4620      	mov	r0, r4
   18362:	f000 fb75 	bl	18a50 <interface_socket_from_handle_get>
   18366:	f248 030d 	movw	r3, #32781	; 0x800d
   1836a:	429e      	cmp	r6, r3
   1836c:	4607      	mov	r7, r0
   1836e:	46a0      	mov	r8, r4
   18370:	d041      	beq.n	183f6 <rpc_ip_event_handler+0xae>
   18372:	2f00      	cmp	r7, #0
   18374:	d04e      	beq.n	18414 <rpc_ip_event_handler+0xcc>
   18376:	4640      	mov	r0, r8
   18378:	4633      	mov	r3, r6
   1837a:	462a      	mov	r2, r5
   1837c:	4639      	mov	r1, r7
   1837e:	f7fb fead 	bl	140dc <tls_rpc_ip_event_handler>
   18382:	2800      	cmp	r0, #0
   18384:	d042      	beq.n	1840c <rpc_ip_event_handler+0xc4>
   18386:	f248 0307 	movw	r3, #32775	; 0x8007
   1838a:	429e      	cmp	r6, r3
   1838c:	d961      	bls.n	18452 <rpc_ip_event_handler+0x10a>
   1838e:	f248 030c 	movw	r3, #32780	; 0x800c
   18392:	429e      	cmp	r6, r3
   18394:	f000 816b 	beq.w	1866e <rpc_ip_event_handler+0x326>
   18398:	f240 8106 	bls.w	185a8 <rpc_ip_event_handler+0x260>
   1839c:	f249 0302 	movw	r3, #36866	; 0x9002
   183a0:	429e      	cmp	r6, r3
   183a2:	f000 808c 	beq.w	184be <rpc_ip_event_handler+0x176>
   183a6:	f249 0303 	movw	r3, #36867	; 0x9003
   183aa:	429e      	cmp	r6, r3
   183ac:	f000 8180 	beq.w	186b0 <rpc_ip_event_handler+0x368>
   183b0:	f249 0301 	movw	r3, #36865	; 0x9001
   183b4:	429e      	cmp	r6, r3
   183b6:	d12d      	bne.n	18414 <rpc_ip_event_handler+0xcc>
   183b8:	683c      	ldr	r4, [r7, #0]
   183ba:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   183be:	f000 81c3 	beq.w	18748 <rpc_ip_event_handler+0x400>
   183c2:	68ab      	ldr	r3, [r5, #8]
   183c4:	2b04      	cmp	r3, #4
   183c6:	f200 81eb 	bhi.w	187a0 <rpc_ip_event_handler+0x458>
   183ca:	2400      	movs	r4, #0
   183cc:	4626      	mov	r6, r4
   183ce:	6829      	ldr	r1, [r5, #0]
   183d0:	686a      	ldr	r2, [r5, #4]
   183d2:	e9cd 6406 	strd	r6, r4, [sp, #24]
   183d6:	e9cd 1204 	strd	r1, r2, [sp, #16]
   183da:	69f8      	ldr	r0, [r7, #28]
   183dc:	a904      	add	r1, sp, #16
   183de:	6803      	ldr	r3, [r0, #0]
   183e0:	685b      	ldr	r3, [r3, #4]
   183e2:	4798      	blx	r3
   183e4:	3001      	adds	r0, #1
   183e6:	f000 81cc 	beq.w	18782 <rpc_ip_event_handler+0x43a>
   183ea:	683b      	ldr	r3, [r7, #0]
   183ec:	2000      	movs	r0, #0
   183ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   183f2:	603b      	str	r3, [r7, #0]
   183f4:	e00b      	b.n	1840e <rpc_ip_event_handler+0xc6>
   183f6:	f8df 9344 	ldr.w	r9, [pc, #836]	; 1873c <rpc_ip_event_handler+0x3f4>
   183fa:	682f      	ldr	r7, [r5, #0]
   183fc:	f8d9 3000 	ldr.w	r3, [r9]
   18400:	2b01      	cmp	r3, #1
   18402:	d015      	beq.n	18430 <rpc_ip_event_handler+0xe8>
   18404:	b117      	cbz	r7, 1840c <rpc_ip_event_handler+0xc4>
   18406:	4638      	mov	r0, r7
   18408:	f7fb fab4 	bl	13974 <rpc_ip_client_data_free>
   1840c:	2000      	movs	r0, #0
   1840e:	b009      	add	sp, #36	; 0x24
   18410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18414:	6828      	ldr	r0, [r5, #0]
   18416:	2800      	cmp	r0, #0
   18418:	d1f6      	bne.n	18408 <rpc_ip_event_handler+0xc0>
   1841a:	e7f7      	b.n	1840c <rpc_ip_event_handler+0xc4>
   1841c:	f000 face 	bl	189bc <interface_from_internal_id_search>
   18420:	4680      	mov	r8, r0
   18422:	f000 fb15 	bl	18a50 <interface_socket_from_handle_get>
   18426:	4607      	mov	r7, r0
   18428:	4644      	mov	r4, r8
   1842a:	2f00      	cmp	r7, #0
   1842c:	d1a3      	bne.n	18376 <rpc_ip_event_handler+0x2e>
   1842e:	e7f1      	b.n	18414 <rpc_ip_event_handler+0xcc>
   18430:	696b      	ldr	r3, [r5, #20]
   18432:	2b00      	cmp	r3, #0
   18434:	d048      	beq.n	184c8 <rpc_ip_event_handler+0x180>
   18436:	2b10      	cmp	r3, #16
   18438:	bf96      	itet	ls
   1843a:	4aba      	ldrls	r2, [pc, #744]	; (18724 <rpc_ip_event_handler+0x3dc>)
   1843c:	212d      	movhi	r1, #45	; 0x2d
   1843e:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   18442:	2302      	movs	r3, #2
   18444:	4ab8      	ldr	r2, [pc, #736]	; (18728 <rpc_ip_event_handler+0x3e0>)
   18446:	6011      	str	r1, [r2, #0]
   18448:	f8c9 3000 	str.w	r3, [r9]
   1844c:	2f00      	cmp	r7, #0
   1844e:	d1da      	bne.n	18406 <rpc_ip_event_handler+0xbe>
   18450:	e7dc      	b.n	1840c <rpc_ip_event_handler+0xc4>
   18452:	f248 0306 	movw	r3, #32774	; 0x8006
   18456:	429e      	cmp	r6, r3
   18458:	f080 80e6 	bcs.w	18628 <rpc_ip_event_handler+0x2e0>
   1845c:	f248 0302 	movw	r3, #32770	; 0x8002
   18460:	429e      	cmp	r6, r3
   18462:	f000 80c8 	beq.w	185f6 <rpc_ip_event_handler+0x2ae>
   18466:	d918      	bls.n	1849a <rpc_ip_event_handler+0x152>
   18468:	f248 0303 	movw	r3, #32771	; 0x8003
   1846c:	429e      	cmp	r6, r3
   1846e:	f000 8112 	beq.w	18696 <rpc_ip_event_handler+0x34e>
   18472:	f248 0305 	movw	r3, #32773	; 0x8005
   18476:	429e      	cmp	r6, r3
   18478:	d1cc      	bne.n	18414 <rpc_ip_event_handler+0xcc>
   1847a:	683b      	ldr	r3, [r7, #0]
   1847c:	b29b      	uxth	r3, r3
   1847e:	2b03      	cmp	r3, #3
   18480:	d1c4      	bne.n	1840c <rpc_ip_event_handler+0xc4>
   18482:	696b      	ldr	r3, [r5, #20]
   18484:	2b00      	cmp	r3, #0
   18486:	f000 817e 	beq.w	18786 <rpc_ip_event_handler+0x43e>
   1848a:	2b10      	cmp	r3, #16
   1848c:	f200 813b 	bhi.w	18706 <rpc_ip_event_handler+0x3be>
   18490:	4aa4      	ldr	r2, [pc, #656]	; (18724 <rpc_ip_event_handler+0x3dc>)
   18492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18496:	607b      	str	r3, [r7, #4]
   18498:	e7b8      	b.n	1840c <rpc_ip_event_handler+0xc4>
   1849a:	f248 0301 	movw	r3, #32769	; 0x8001
   1849e:	429e      	cmp	r6, r3
   184a0:	d1b8      	bne.n	18414 <rpc_ip_event_handler+0xcc>
   184a2:	683b      	ldr	r3, [r7, #0]
   184a4:	2b01      	cmp	r3, #1
   184a6:	d1b1      	bne.n	1840c <rpc_ip_event_handler+0xc4>
   184a8:	6968      	ldr	r0, [r5, #20]
   184aa:	2800      	cmp	r0, #0
   184ac:	f000 8173 	beq.w	18796 <rpc_ip_event_handler+0x44e>
   184b0:	2810      	cmp	r0, #16
   184b2:	f200 8128 	bhi.w	18706 <rpc_ip_event_handler+0x3be>
   184b6:	4b9b      	ldr	r3, [pc, #620]	; (18724 <rpc_ip_event_handler+0x3dc>)
   184b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   184bc:	e7eb      	b.n	18496 <rpc_ip_event_handler+0x14e>
   184be:	683b      	ldr	r3, [r7, #0]
   184c0:	b29b      	uxth	r3, r3
   184c2:	2b07      	cmp	r3, #7
   184c4:	d1a2      	bne.n	1840c <rpc_ip_event_handler+0xc4>
   184c6:	e790      	b.n	183ea <rpc_ip_event_handler+0xa2>
   184c8:	4b98      	ldr	r3, [pc, #608]	; (1872c <rpc_ip_event_handler+0x3e4>)
   184ca:	601f      	str	r7, [r3, #0]
   184cc:	69ac      	ldr	r4, [r5, #24]
   184ce:	0163      	lsls	r3, r4, #5
   184d0:	4618      	mov	r0, r3
   184d2:	9303      	str	r3, [sp, #12]
   184d4:	f7fb f9e4 	bl	138a0 <nrf_malloc>
   184d8:	9002      	str	r0, [sp, #8]
   184da:	2800      	cmp	r0, #0
   184dc:	f000 8103 	beq.w	186e6 <rpc_ip_event_handler+0x39e>
   184e0:	00e5      	lsls	r5, r4, #3
   184e2:	1928      	adds	r0, r5, r4
   184e4:	0080      	lsls	r0, r0, #2
   184e6:	f7fb f9db 	bl	138a0 <nrf_malloc>
   184ea:	2800      	cmp	r0, #0
   184ec:	f000 810d 	beq.w	1870a <rpc_ip_event_handler+0x3c2>
   184f0:	2c00      	cmp	r4, #0
   184f2:	d078      	beq.n	185e6 <rpc_ip_event_handler+0x29e>
   184f4:	f105 0210 	add.w	r2, r5, #16
   184f8:	1883      	adds	r3, r0, r2
   184fa:	9301      	str	r3, [sp, #4]
   184fc:	9b02      	ldr	r3, [sp, #8]
   184fe:	2404      	movs	r4, #4
   18500:	f8df a23c 	ldr.w	sl, [pc, #572]	; 18740 <rpc_ip_event_handler+0x3f8>
   18504:	f8df b23c 	ldr.w	fp, [pc, #572]	; 18744 <rpc_ip_event_handler+0x3fc>
   18508:	f100 0810 	add.w	r8, r0, #16
   1850c:	f103 0620 	add.w	r6, r3, #32
   18510:	e01d      	b.n	1854e <rpc_ip_event_handler+0x206>
   18512:	220a      	movs	r2, #10
   18514:	f848 2c0c 	str.w	r2, [r8, #-12]
   18518:	f04f 0224 	mov.w	r2, #36	; 0x24
   1851c:	4640      	mov	r0, r8
   1851e:	f808 2c10 	strb.w	r2, [r8, #-16]
   18522:	f828 3c08 	strh.w	r3, [r8, #-8]
   18526:	f856 2c10 	ldr.w	r2, [r6, #-16]
   1852a:	f004 ff62 	bl	1d3f2 <memcpy>
   1852e:	f856 3c10 	ldr.w	r3, [r6, #-16]
   18532:	f108 0808 	add.w	r8, r8, #8
   18536:	441c      	add	r4, r3
   18538:	193b      	adds	r3, r7, r4
   1853a:	f846 3c08 	str.w	r3, [r6, #-8]
   1853e:	9b01      	ldr	r3, [sp, #4]
   18540:	f846 6c04 	str.w	r6, [r6, #-4]
   18544:	4598      	cmp	r8, r3
   18546:	442c      	add	r4, r5
   18548:	f106 0620 	add.w	r6, r6, #32
   1854c:	d045      	beq.n	185da <rpc_ip_event_handler+0x292>
   1854e:	593b      	ldr	r3, [r7, r4]
   18550:	193a      	adds	r2, r7, r4
   18552:	f846 3c20 	str.w	r3, [r6, #-32]
   18556:	6853      	ldr	r3, [r2, #4]
   18558:	f8da 1000 	ldr.w	r1, [sl]
   1855c:	2b02      	cmp	r3, #2
   1855e:	bf14      	ite	ne
   18560:	2002      	movne	r0, #2
   18562:	200a      	moveq	r0, #10
   18564:	f8db 3000 	ldr.w	r3, [fp]
   18568:	e946 0107 	strd	r0, r1, [r6, #-28]
   1856c:	f846 3c14 	str.w	r3, [r6, #-20]
   18570:	8a10      	ldrh	r0, [r2, #16]
   18572:	f1a8 0310 	sub.w	r3, r8, #16
   18576:	f846 0c10 	str.w	r0, [r6, #-16]
   1857a:	8a55      	ldrh	r5, [r2, #18]
   1857c:	f846 3c0c 	str.w	r3, [r6, #-12]
   18580:	4b6b      	ldr	r3, [pc, #428]	; (18730 <rpc_ip_event_handler+0x3e8>)
   18582:	3414      	adds	r4, #20
   18584:	2804      	cmp	r0, #4
   18586:	eb07 0104 	add.w	r1, r7, r4
   1858a:	881b      	ldrh	r3, [r3, #0]
   1858c:	d1c1      	bne.n	18512 <rpc_ip_event_handler+0x1ca>
   1858e:	2210      	movs	r2, #16
   18590:	2002      	movs	r0, #2
   18592:	f828 3c08 	strh.w	r3, [r8, #-8]
   18596:	f848 0c0c 	str.w	r0, [r8, #-12]
   1859a:	f808 2c10 	strb.w	r2, [r8, #-16]
   1859e:	f856 2c10 	ldr.w	r2, [r6, #-16]
   185a2:	f1a8 0004 	sub.w	r0, r8, #4
   185a6:	e7c0      	b.n	1852a <rpc_ip_event_handler+0x1e2>
   185a8:	f248 0308 	movw	r3, #32776	; 0x8008
   185ac:	429e      	cmp	r6, r3
   185ae:	d04e      	beq.n	1864e <rpc_ip_event_handler+0x306>
   185b0:	f248 0309 	movw	r3, #32777	; 0x8009
   185b4:	429e      	cmp	r6, r3
   185b6:	f47f af2d 	bne.w	18414 <rpc_ip_event_handler+0xcc>
   185ba:	683b      	ldr	r3, [r7, #0]
   185bc:	b29b      	uxth	r3, r3
   185be:	2b0d      	cmp	r3, #13
   185c0:	f47f af24 	bne.w	1840c <rpc_ip_event_handler+0xc4>
   185c4:	6968      	ldr	r0, [r5, #20]
   185c6:	2800      	cmp	r0, #0
   185c8:	f47f af72 	bne.w	184b0 <rpc_ip_event_handler+0x168>
   185cc:	683b      	ldr	r3, [r7, #0]
   185ce:	0c1b      	lsrs	r3, r3, #16
   185d0:	041b      	lsls	r3, r3, #16
   185d2:	f043 030e 	orr.w	r3, r3, #14
   185d6:	603b      	str	r3, [r7, #0]
   185d8:	e719      	b.n	1840e <rpc_ip_event_handler+0xc6>
   185da:	2200      	movs	r2, #0
   185dc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   185e0:	440b      	add	r3, r1
   185e2:	f843 2c04 	str.w	r2, [r3, #-4]
   185e6:	2202      	movs	r2, #2
   185e8:	4b52      	ldr	r3, [pc, #328]	; (18734 <rpc_ip_event_handler+0x3ec>)
   185ea:	f8c9 2000 	str.w	r2, [r9]
   185ee:	9a02      	ldr	r2, [sp, #8]
   185f0:	2000      	movs	r0, #0
   185f2:	601a      	str	r2, [r3, #0]
   185f4:	e70b      	b.n	1840e <rpc_ip_event_handler+0xc6>
   185f6:	683b      	ldr	r3, [r7, #0]
   185f8:	0099      	lsls	r1, r3, #2
   185fa:	f57f af07 	bpl.w	1840c <rpc_ip_event_handler+0xc4>
   185fe:	683b      	ldr	r3, [r7, #0]
   18600:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   18604:	603b      	str	r3, [r7, #0]
   18606:	6968      	ldr	r0, [r5, #20]
   18608:	2800      	cmp	r0, #0
   1860a:	f000 80a2 	beq.w	18752 <rpc_ip_event_handler+0x40a>
   1860e:	2810      	cmp	r0, #16
   18610:	bf8e      	itee	hi
   18612:	232d      	movhi	r3, #45	; 0x2d
   18614:	4b43      	ldrls	r3, [pc, #268]	; (18724 <rpc_ip_event_handler+0x3dc>)
   18616:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   1861a:	2000      	movs	r0, #0
   1861c:	607b      	str	r3, [r7, #4]
   1861e:	683b      	ldr	r3, [r7, #0]
   18620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   18624:	603b      	str	r3, [r7, #0]
   18626:	e6f2      	b.n	1840e <rpc_ip_event_handler+0xc6>
   18628:	683b      	ldr	r3, [r7, #0]
   1862a:	029a      	lsls	r2, r3, #10
   1862c:	f57f aeee 	bpl.w	1840c <rpc_ip_event_handler+0xc4>
   18630:	696b      	ldr	r3, [r5, #20]
   18632:	2b00      	cmp	r3, #0
   18634:	f000 809c 	beq.w	18770 <rpc_ip_event_handler+0x428>
   18638:	2b6b      	cmp	r3, #107	; 0x6b
   1863a:	f47f af26 	bne.w	1848a <rpc_ip_event_handler+0x142>
   1863e:	693b      	ldr	r3, [r7, #16]
   18640:	2b01      	cmp	r3, #1
   18642:	f000 80b1 	beq.w	187a8 <rpc_ip_event_handler+0x460>
   18646:	230c      	movs	r3, #12
   18648:	2000      	movs	r0, #0
   1864a:	607b      	str	r3, [r7, #4]
   1864c:	e6df      	b.n	1840e <rpc_ip_event_handler+0xc6>
   1864e:	683b      	ldr	r3, [r7, #0]
   18650:	b29b      	uxth	r3, r3
   18652:	2b06      	cmp	r3, #6
   18654:	f47f aeda 	bne.w	1840c <rpc_ip_event_handler+0xc4>
   18658:	6968      	ldr	r0, [r5, #20]
   1865a:	2800      	cmp	r0, #0
   1865c:	f47f af28 	bne.w	184b0 <rpc_ip_event_handler+0x168>
   18660:	683b      	ldr	r3, [r7, #0]
   18662:	0c1b      	lsrs	r3, r3, #16
   18664:	041b      	lsls	r3, r3, #16
   18666:	f043 0307 	orr.w	r3, r3, #7
   1866a:	603b      	str	r3, [r7, #0]
   1866c:	e6cf      	b.n	1840e <rpc_ip_event_handler+0xc6>
   1866e:	683b      	ldr	r3, [r7, #0]
   18670:	b29b      	uxth	r3, r3
   18672:	2b08      	cmp	r3, #8
   18674:	f47f aeca 	bne.w	1840c <rpc_ip_event_handler+0xc4>
   18678:	696b      	ldr	r3, [r5, #20]
   1867a:	2b00      	cmp	r3, #0
   1867c:	f47f af05 	bne.w	1848a <rpc_ip_event_handler+0x142>
   18680:	4b2d      	ldr	r3, [pc, #180]	; (18738 <rpc_ip_event_handler+0x3f0>)
   18682:	2001      	movs	r0, #1
   18684:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   18688:	683b      	ldr	r3, [r7, #0]
   1868a:	0c1b      	lsrs	r3, r3, #16
   1868c:	041b      	lsls	r3, r3, #16
   1868e:	f043 0309 	orr.w	r3, r3, #9
   18692:	603b      	str	r3, [r7, #0]
   18694:	e6bb      	b.n	1840e <rpc_ip_event_handler+0xc6>
   18696:	683b      	ldr	r3, [r7, #0]
   18698:	025b      	lsls	r3, r3, #9
   1869a:	f57f aeb7 	bpl.w	1840c <rpc_ip_event_handler+0xc4>
   1869e:	6968      	ldr	r0, [r5, #20]
   186a0:	2800      	cmp	r0, #0
   186a2:	f47f af05 	bne.w	184b0 <rpc_ip_event_handler+0x168>
   186a6:	683b      	ldr	r3, [r7, #0]
   186a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   186ac:	603b      	str	r3, [r7, #0]
   186ae:	e6ae      	b.n	1840e <rpc_ip_event_handler+0xc6>
   186b0:	683b      	ldr	r3, [r7, #0]
   186b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   186b6:	603b      	str	r3, [r7, #0]
   186b8:	683b      	ldr	r3, [r7, #0]
   186ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   186be:	603b      	str	r3, [r7, #0]
   186c0:	683b      	ldr	r3, [r7, #0]
   186c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   186c6:	603b      	str	r3, [r7, #0]
   186c8:	692b      	ldr	r3, [r5, #16]
   186ca:	2b6c      	cmp	r3, #108	; 0x6c
   186cc:	d021      	beq.n	18712 <rpc_ip_event_handler+0x3ca>
   186ce:	2b10      	cmp	r3, #16
   186d0:	bf8c      	ite	hi
   186d2:	232d      	movhi	r3, #45	; 0x2d
   186d4:	4a13      	ldrls	r2, [pc, #76]	; (18724 <rpc_ip_event_handler+0x3dc>)
   186d6:	f04f 0000 	mov.w	r0, #0
   186da:	bf98      	it	ls
   186dc:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   186e0:	607b      	str	r3, [r7, #4]
   186e2:	60bb      	str	r3, [r7, #8]
   186e4:	e693      	b.n	1840e <rpc_ip_event_handler+0xc6>
   186e6:	f7fb f8e5 	bl	138b4 <nrf_free>
   186ea:	200c      	movs	r0, #12
   186ec:	2302      	movs	r3, #2
   186ee:	490e      	ldr	r1, [pc, #56]	; (18728 <rpc_ip_event_handler+0x3e0>)
   186f0:	4a10      	ldr	r2, [pc, #64]	; (18734 <rpc_ip_event_handler+0x3ec>)
   186f2:	6008      	str	r0, [r1, #0]
   186f4:	682f      	ldr	r7, [r5, #0]
   186f6:	9902      	ldr	r1, [sp, #8]
   186f8:	6011      	str	r1, [r2, #0]
   186fa:	f8c9 3000 	str.w	r3, [r9]
   186fe:	2f00      	cmp	r7, #0
   18700:	f47f ae81 	bne.w	18406 <rpc_ip_event_handler+0xbe>
   18704:	e682      	b.n	1840c <rpc_ip_event_handler+0xc4>
   18706:	232d      	movs	r3, #45	; 0x2d
   18708:	e6c5      	b.n	18496 <rpc_ip_event_handler+0x14e>
   1870a:	220c      	movs	r2, #12
   1870c:	4b06      	ldr	r3, [pc, #24]	; (18728 <rpc_ip_event_handler+0x3e0>)
   1870e:	601a      	str	r2, [r3, #0]
   18710:	e769      	b.n	185e6 <rpc_ip_event_handler+0x29e>
   18712:	2239      	movs	r2, #57	; 0x39
   18714:	683b      	ldr	r3, [r7, #0]
   18716:	2000      	movs	r0, #0
   18718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1871c:	603b      	str	r3, [r7, #0]
   1871e:	607a      	str	r2, [r7, #4]
   18720:	60ba      	str	r2, [r7, #8]
   18722:	e674      	b.n	1840e <rpc_ip_event_handler+0xc6>
   18724:	0001f610 	.word	0x0001f610
   18728:	20020924 	.word	0x20020924
   1872c:	20020930 	.word	0x20020930
   18730:	20024e22 	.word	0x20024e22
   18734:	2002092c 	.word	0x2002092c
   18738:	20020934 	.word	0x20020934
   1873c:	20020928 	.word	0x20020928
   18740:	20020920 	.word	0x20020920
   18744:	2002091c 	.word	0x2002091c
   18748:	6828      	ldr	r0, [r5, #0]
   1874a:	f7fb f913 	bl	13974 <rpc_ip_client_data_free>
   1874e:	4620      	mov	r0, r4
   18750:	e65d      	b.n	1840e <rpc_ip_event_handler+0xc6>
   18752:	683b      	ldr	r3, [r7, #0]
   18754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18758:	603b      	str	r3, [r7, #0]
   1875a:	683b      	ldr	r3, [r7, #0]
   1875c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18760:	603b      	str	r3, [r7, #0]
   18762:	683b      	ldr	r3, [r7, #0]
   18764:	0c1b      	lsrs	r3, r3, #16
   18766:	041b      	lsls	r3, r3, #16
   18768:	f043 0305 	orr.w	r3, r3, #5
   1876c:	603b      	str	r3, [r7, #0]
   1876e:	e64e      	b.n	1840e <rpc_ip_event_handler+0xc6>
   18770:	683b      	ldr	r3, [r7, #0]
   18772:	4a28      	ldr	r2, [pc, #160]	; (18814 <rpc_ip_event_handler+0x4cc>)
   18774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18778:	603b      	str	r3, [r7, #0]
   1877a:	2001      	movs	r0, #1
   1877c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   18780:	e645      	b.n	1840e <rpc_ip_event_handler+0xc6>
   18782:	2002      	movs	r0, #2
   18784:	e643      	b.n	1840e <rpc_ip_event_handler+0xc6>
   18786:	683b      	ldr	r3, [r7, #0]
   18788:	2000      	movs	r0, #0
   1878a:	0c1b      	lsrs	r3, r3, #16
   1878c:	041b      	lsls	r3, r3, #16
   1878e:	f043 0304 	orr.w	r3, r3, #4
   18792:	603b      	str	r3, [r7, #0]
   18794:	e63b      	b.n	1840e <rpc_ip_event_handler+0xc6>
   18796:	2302      	movs	r3, #2
   18798:	603b      	str	r3, [r7, #0]
   1879a:	69ab      	ldr	r3, [r5, #24]
   1879c:	61bb      	str	r3, [r7, #24]
   1879e:	e636      	b.n	1840e <rpc_ip_event_handler+0xc6>
   187a0:	8a6c      	ldrh	r4, [r5, #18]
   187a2:	b94c      	cbnz	r4, 187b8 <rpc_ip_event_handler+0x470>
   187a4:	4626      	mov	r6, r4
   187a6:	e612      	b.n	183ce <rpc_ip_event_handler+0x86>
   187a8:	220c      	movs	r2, #12
   187aa:	683b      	ldr	r3, [r7, #0]
   187ac:	2000      	movs	r0, #0
   187ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   187b2:	603b      	str	r3, [r7, #0]
   187b4:	607a      	str	r2, [r7, #4]
   187b6:	e62a      	b.n	1840e <rpc_ip_event_handler+0xc6>
   187b8:	2024      	movs	r0, #36	; 0x24
   187ba:	f7fb f871 	bl	138a0 <nrf_malloc>
   187be:	4606      	mov	r6, r0
   187c0:	b158      	cbz	r0, 187da <rpc_ip_event_handler+0x492>
   187c2:	8a6a      	ldrh	r2, [r5, #18]
   187c4:	2a10      	cmp	r2, #16
   187c6:	d018      	beq.n	187fa <rpc_ip_event_handler+0x4b2>
   187c8:	2a04      	cmp	r2, #4
   187ca:	d00a      	beq.n	187e2 <rpc_ip_event_handler+0x49a>
   187cc:	6828      	ldr	r0, [r5, #0]
   187ce:	f7fb f8d1 	bl	13974 <rpc_ip_client_data_free>
   187d2:	4630      	mov	r0, r6
   187d4:	f7fb f86e 	bl	138b4 <nrf_free>
   187d8:	e618      	b.n	1840c <rpc_ip_event_handler+0xc4>
   187da:	6828      	ldr	r0, [r5, #0]
   187dc:	f7fb f8ca 	bl	13974 <rpc_ip_client_data_free>
   187e0:	e614      	b.n	1840c <rpc_ip_event_handler+0xc4>
   187e2:	2302      	movs	r3, #2
   187e4:	2410      	movs	r4, #16
   187e6:	6043      	str	r3, [r0, #4]
   187e8:	7004      	strb	r4, [r0, #0]
   187ea:	8a2b      	ldrh	r3, [r5, #16]
   187ec:	f105 0114 	add.w	r1, r5, #20
   187f0:	8103      	strh	r3, [r0, #8]
   187f2:	300c      	adds	r0, #12
   187f4:	f004 fdfd 	bl	1d3f2 <memcpy>
   187f8:	e5e9      	b.n	183ce <rpc_ip_event_handler+0x86>
   187fa:	230a      	movs	r3, #10
   187fc:	2424      	movs	r4, #36	; 0x24
   187fe:	6043      	str	r3, [r0, #4]
   18800:	7004      	strb	r4, [r0, #0]
   18802:	8a2b      	ldrh	r3, [r5, #16]
   18804:	f105 0114 	add.w	r1, r5, #20
   18808:	8103      	strh	r3, [r0, #8]
   1880a:	3010      	adds	r0, #16
   1880c:	f004 fdf1 	bl	1d3f2 <memcpy>
   18810:	e5dd      	b.n	183ce <rpc_ip_event_handler+0x86>
   18812:	bf00      	nop
   18814:	20020934 	.word	0x20020934

00018818 <interface_init>:
   18818:	b508      	push	{r3, lr}
   1881a:	f44f 7290 	mov.w	r2, #288	; 0x120
   1881e:	2100      	movs	r1, #0
   18820:	4802      	ldr	r0, [pc, #8]	; (1882c <interface_init+0x14>)
   18822:	f004 fe10 	bl	1d446 <memset>
   18826:	2000      	movs	r0, #0
   18828:	bd08      	pop	{r3, pc}
   1882a:	bf00      	nop
   1882c:	20026568 	.word	0x20026568

00018830 <interface_socket_allocate>:
   18830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18832:	4b29      	ldr	r3, [pc, #164]	; (188d8 <interface_socket_allocate+0xa8>)
   18834:	4606      	mov	r6, r0
   18836:	681d      	ldr	r5, [r3, #0]
   18838:	4608      	mov	r0, r1
   1883a:	b1e5      	cbz	r5, 18876 <interface_socket_allocate+0x46>
   1883c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1883e:	2c00      	cmp	r4, #0
   18840:	d03d      	beq.n	188be <interface_socket_allocate+0x8e>
   18842:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   18844:	2c00      	cmp	r4, #0
   18846:	d03c      	beq.n	188c2 <interface_socket_allocate+0x92>
   18848:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   1884a:	2c00      	cmp	r4, #0
   1884c:	d03b      	beq.n	188c6 <interface_socket_allocate+0x96>
   1884e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   18852:	b179      	cbz	r1, 18874 <interface_socket_allocate+0x44>
   18854:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   18858:	b3b9      	cbz	r1, 188ca <interface_socket_allocate+0x9a>
   1885a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   1885e:	b3b1      	cbz	r1, 188ce <interface_socket_allocate+0x9e>
   18860:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   18864:	b3a9      	cbz	r1, 188d2 <interface_socket_allocate+0xa2>
   18866:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1886a:	200c      	movs	r0, #12
   1886c:	f7f8 ff72 	bl	11754 <bsd_os_errno_set>
   18870:	4628      	mov	r0, r5
   18872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18874:	2504      	movs	r5, #4
   18876:	f04f 0c01 	mov.w	ip, #1
   1887a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1887e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   18882:	00a4      	lsls	r4, r4, #2
   18884:	f843 c004 	str.w	ip, [r3, r4]
   18888:	441c      	add	r4, r3
   1888a:	4611      	mov	r1, r2
   1888c:	61a7      	str	r7, [r4, #24]
   1888e:	4622      	mov	r2, r4
   18890:	f001 ffde 	bl	1a850 <packet_handler_create>
   18894:	4603      	mov	r3, r0
   18896:	61e0      	str	r0, [r4, #28]
   18898:	b158      	cbz	r0, 188b2 <interface_socket_allocate+0x82>
   1889a:	681b      	ldr	r3, [r3, #0]
   1889c:	681b      	ldr	r3, [r3, #0]
   1889e:	4798      	blx	r3
   188a0:	b910      	cbnz	r0, 188a8 <interface_socket_allocate+0x78>
   188a2:	6034      	str	r4, [r6, #0]
   188a4:	4628      	mov	r0, r5
   188a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   188a8:	69e0      	ldr	r0, [r4, #28]
   188aa:	f001 fff1 	bl	1a890 <packet_handler_delete>
   188ae:	2300      	movs	r3, #0
   188b0:	61e3      	str	r3, [r4, #28]
   188b2:	4620      	mov	r0, r4
   188b4:	2224      	movs	r2, #36	; 0x24
   188b6:	2100      	movs	r1, #0
   188b8:	f004 fdc5 	bl	1d446 <memset>
   188bc:	e7d3      	b.n	18866 <interface_socket_allocate+0x36>
   188be:	2501      	movs	r5, #1
   188c0:	e7d9      	b.n	18876 <interface_socket_allocate+0x46>
   188c2:	2502      	movs	r5, #2
   188c4:	e7d7      	b.n	18876 <interface_socket_allocate+0x46>
   188c6:	2503      	movs	r5, #3
   188c8:	e7d5      	b.n	18876 <interface_socket_allocate+0x46>
   188ca:	2505      	movs	r5, #5
   188cc:	e7d3      	b.n	18876 <interface_socket_allocate+0x46>
   188ce:	2506      	movs	r5, #6
   188d0:	e7d1      	b.n	18876 <interface_socket_allocate+0x46>
   188d2:	2507      	movs	r5, #7
   188d4:	e7cf      	b.n	18876 <interface_socket_allocate+0x46>
   188d6:	bf00      	nop
   188d8:	20026568 	.word	0x20026568

000188dc <interface_socket_free>:
   188dc:	2807      	cmp	r0, #7
   188de:	d900      	bls.n	188e2 <interface_socket_free+0x6>
   188e0:	4770      	bx	lr
   188e2:	b510      	push	{r4, lr}
   188e4:	4c07      	ldr	r4, [pc, #28]	; (18904 <interface_socket_free+0x28>)
   188e6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   188ea:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   188ee:	69e0      	ldr	r0, [r4, #28]
   188f0:	b108      	cbz	r0, 188f6 <interface_socket_free+0x1a>
   188f2:	f001 ffcd 	bl	1a890 <packet_handler_delete>
   188f6:	4620      	mov	r0, r4
   188f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   188fc:	2224      	movs	r2, #36	; 0x24
   188fe:	2100      	movs	r1, #0
   18900:	f004 bda1 	b.w	1d446 <memset>
   18904:	20026568 	.word	0x20026568

00018908 <interface_socket_packet_handler_update>:
   18908:	2807      	cmp	r0, #7
   1890a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1890e:	d81e      	bhi.n	1894e <interface_socket_packet_handler_update+0x46>
   18910:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   18914:	4e17      	ldr	r6, [pc, #92]	; (18974 <interface_socket_packet_handler_update+0x6c>)
   18916:	eb08 0300 	add.w	r3, r8, r0
   1891a:	009b      	lsls	r3, r3, #2
   1891c:	58f4      	ldr	r4, [r6, r3]
   1891e:	18f5      	adds	r5, r6, r3
   18920:	b1ac      	cbz	r4, 1894e <interface_socket_packet_handler_update+0x46>
   18922:	460b      	mov	r3, r1
   18924:	4604      	mov	r4, r0
   18926:	4611      	mov	r1, r2
   18928:	4618      	mov	r0, r3
   1892a:	462a      	mov	r2, r5
   1892c:	f8d5 901c 	ldr.w	r9, [r5, #28]
   18930:	f001 ff8e 	bl	1a850 <packet_handler_create>
   18934:	61e8      	str	r0, [r5, #28]
   18936:	b1d0      	cbz	r0, 1896e <interface_socket_packet_handler_update+0x66>
   18938:	6803      	ldr	r3, [r0, #0]
   1893a:	681b      	ldr	r3, [r3, #0]
   1893c:	4798      	blx	r3
   1893e:	4607      	mov	r7, r0
   18940:	b948      	cbnz	r0, 18956 <interface_socket_packet_handler_update+0x4e>
   18942:	4648      	mov	r0, r9
   18944:	f001 ffa4 	bl	1a890 <packet_handler_delete>
   18948:	4638      	mov	r0, r7
   1894a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1894e:	2705      	movs	r7, #5
   18950:	4638      	mov	r0, r7
   18952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18956:	69e8      	ldr	r0, [r5, #28]
   18958:	f001 ff9a 	bl	1a890 <packet_handler_delete>
   1895c:	eb08 0004 	add.w	r0, r8, r4
   18960:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   18964:	f8c6 901c 	str.w	r9, [r6, #28]
   18968:	4638      	mov	r0, r7
   1896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1896e:	2704      	movs	r7, #4
   18970:	e7f4      	b.n	1895c <interface_socket_packet_handler_update+0x54>
   18972:	bf00      	nop
   18974:	20026568 	.word	0x20026568

00018978 <interface_socket_wait>:
   18978:	b5f0      	push	{r4, r5, r6, r7, lr}
   1897a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1897e:	4c0e      	ldr	r4, [pc, #56]	; (189b8 <interface_socket_wait+0x40>)
   18980:	0080      	lsls	r0, r0, #2
   18982:	5825      	ldr	r5, [r4, r0]
   18984:	b083      	sub	sp, #12
   18986:	4015      	ands	r5, r2
   18988:	428d      	cmp	r5, r1
   1898a:	9301      	str	r3, [sp, #4]
   1898c:	4404      	add	r4, r0
   1898e:	d010      	beq.n	189b2 <interface_socket_wait+0x3a>
   18990:	6863      	ldr	r3, [r4, #4]
   18992:	b973      	cbnz	r3, 189b2 <interface_socket_wait+0x3a>
   18994:	460f      	mov	r7, r1
   18996:	4616      	mov	r6, r2
   18998:	4625      	mov	r5, r4
   1899a:	e006      	b.n	189aa <interface_socket_wait+0x32>
   1899c:	686b      	ldr	r3, [r5, #4]
   1899e:	b943      	cbnz	r3, 189b2 <interface_socket_wait+0x3a>
   189a0:	a901      	add	r1, sp, #4
   189a2:	4620      	mov	r0, r4
   189a4:	f7f8 fe42 	bl	1162c <bsd_os_timedwait>
   189a8:	b920      	cbnz	r0, 189b4 <interface_socket_wait+0x3c>
   189aa:	682b      	ldr	r3, [r5, #0]
   189ac:	4033      	ands	r3, r6
   189ae:	42bb      	cmp	r3, r7
   189b0:	d1f4      	bne.n	1899c <interface_socket_wait+0x24>
   189b2:	2000      	movs	r0, #0
   189b4:	b003      	add	sp, #12
   189b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   189b8:	20026568 	.word	0x20026568

000189bc <interface_from_internal_id_search>:
   189bc:	4b23      	ldr	r3, [pc, #140]	; (18a4c <interface_from_internal_id_search+0x90>)
   189be:	681a      	ldr	r2, [r3, #0]
   189c0:	b112      	cbz	r2, 189c8 <interface_from_internal_id_search+0xc>
   189c2:	699a      	ldr	r2, [r3, #24]
   189c4:	4282      	cmp	r2, r0
   189c6:	d032      	beq.n	18a2e <interface_from_internal_id_search+0x72>
   189c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   189ca:	b112      	cbz	r2, 189d2 <interface_from_internal_id_search+0x16>
   189cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   189ce:	4282      	cmp	r2, r0
   189d0:	d02f      	beq.n	18a32 <interface_from_internal_id_search+0x76>
   189d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   189d4:	b112      	cbz	r2, 189dc <interface_from_internal_id_search+0x20>
   189d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   189d8:	4282      	cmp	r2, r0
   189da:	d02c      	beq.n	18a36 <interface_from_internal_id_search+0x7a>
   189dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   189de:	b11a      	cbz	r2, 189e8 <interface_from_internal_id_search+0x2c>
   189e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   189e4:	4282      	cmp	r2, r0
   189e6:	d028      	beq.n	18a3a <interface_from_internal_id_search+0x7e>
   189e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   189ec:	b11a      	cbz	r2, 189f6 <interface_from_internal_id_search+0x3a>
   189ee:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   189f2:	4282      	cmp	r2, r0
   189f4:	d023      	beq.n	18a3e <interface_from_internal_id_search+0x82>
   189f6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   189fa:	b11a      	cbz	r2, 18a04 <interface_from_internal_id_search+0x48>
   189fc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   18a00:	4282      	cmp	r2, r0
   18a02:	d01e      	beq.n	18a42 <interface_from_internal_id_search+0x86>
   18a04:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18a08:	b11a      	cbz	r2, 18a12 <interface_from_internal_id_search+0x56>
   18a0a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   18a0e:	4282      	cmp	r2, r0
   18a10:	d019      	beq.n	18a46 <interface_from_internal_id_search+0x8a>
   18a12:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18a16:	b13a      	cbz	r2, 18a28 <interface_from_internal_id_search+0x6c>
   18a18:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   18a1c:	4283      	cmp	r3, r0
   18a1e:	bf14      	ite	ne
   18a20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18a24:	2007      	moveq	r0, #7
   18a26:	4770      	bx	lr
   18a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a2c:	4770      	bx	lr
   18a2e:	2000      	movs	r0, #0
   18a30:	4770      	bx	lr
   18a32:	2001      	movs	r0, #1
   18a34:	4770      	bx	lr
   18a36:	2002      	movs	r0, #2
   18a38:	4770      	bx	lr
   18a3a:	2003      	movs	r0, #3
   18a3c:	4770      	bx	lr
   18a3e:	2004      	movs	r0, #4
   18a40:	4770      	bx	lr
   18a42:	2005      	movs	r0, #5
   18a44:	4770      	bx	lr
   18a46:	2006      	movs	r0, #6
   18a48:	4770      	bx	lr
   18a4a:	bf00      	nop
   18a4c:	20026568 	.word	0x20026568

00018a50 <interface_socket_from_handle_get>:
   18a50:	2807      	cmp	r0, #7
   18a52:	d807      	bhi.n	18a64 <interface_socket_from_handle_get+0x14>
   18a54:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18a58:	4b03      	ldr	r3, [pc, #12]	; (18a68 <interface_socket_from_handle_get+0x18>)
   18a5a:	0080      	lsls	r0, r0, #2
   18a5c:	581a      	ldr	r2, [r3, r0]
   18a5e:	b10a      	cbz	r2, 18a64 <interface_socket_from_handle_get+0x14>
   18a60:	4418      	add	r0, r3
   18a62:	4770      	bx	lr
   18a64:	2000      	movs	r0, #0
   18a66:	4770      	bx	lr
   18a68:	20026568 	.word	0x20026568

00018a6c <interface_socket_event_get>:
   18a6c:	b119      	cbz	r1, 18a76 <interface_socket_event_get+0xa>
   18a6e:	2807      	cmp	r0, #7
   18a70:	d902      	bls.n	18a78 <interface_socket_event_get+0xc>
   18a72:	2310      	movs	r3, #16
   18a74:	600b      	str	r3, [r1, #0]
   18a76:	4770      	bx	lr
   18a78:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18a7c:	4b07      	ldr	r3, [pc, #28]	; (18a9c <interface_socket_event_get+0x30>)
   18a7e:	0080      	lsls	r0, r0, #2
   18a80:	581a      	ldr	r2, [r3, r0]
   18a82:	2a00      	cmp	r2, #0
   18a84:	d0f5      	beq.n	18a72 <interface_socket_event_get+0x6>
   18a86:	581b      	ldr	r3, [r3, r0]
   18a88:	0c1b      	lsrs	r3, r3, #16
   18a8a:	f003 020a 	and.w	r2, r3, #10
   18a8e:	2a0a      	cmp	r2, #10
   18a90:	bf14      	ite	ne
   18a92:	f003 030f 	andne.w	r3, r3, #15
   18a96:	f003 030d 	andeq.w	r3, r3, #13
   18a9a:	e7eb      	b.n	18a74 <interface_socket_event_get+0x8>
   18a9c:	20026568 	.word	0x20026568

00018aa0 <interface_socket_setopt>:
   18aa0:	2807      	cmp	r0, #7
   18aa2:	b570      	push	{r4, r5, r6, lr}
   18aa4:	d827      	bhi.n	18af6 <interface_socket_setopt+0x56>
   18aa6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18aaa:	4c16      	ldr	r4, [pc, #88]	; (18b04 <interface_socket_setopt+0x64>)
   18aac:	0080      	lsls	r0, r0, #2
   18aae:	5825      	ldr	r5, [r4, r0]
   18ab0:	b30d      	cbz	r5, 18af6 <interface_socket_setopt+0x56>
   18ab2:	2901      	cmp	r1, #1
   18ab4:	d119      	bne.n	18aea <interface_socket_setopt+0x4a>
   18ab6:	2a14      	cmp	r2, #20
   18ab8:	d117      	bne.n	18aea <interface_socket_setopt+0x4a>
   18aba:	b183      	cbz	r3, 18ade <interface_socket_setopt+0x3e>
   18abc:	9a04      	ldr	r2, [sp, #16]
   18abe:	2a08      	cmp	r2, #8
   18ac0:	d10d      	bne.n	18ade <interface_socket_setopt+0x3e>
   18ac2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   18ac6:	685a      	ldr	r2, [r3, #4]
   18ac8:	4e0f      	ldr	r6, [pc, #60]	; (18b08 <interface_socket_setopt+0x68>)
   18aca:	6819      	ldr	r1, [r3, #0]
   18acc:	fba6 2302 	umull	r2, r3, r6, r2
   18ad0:	099b      	lsrs	r3, r3, #6
   18ad2:	fb05 3301 	mla	r3, r5, r1, r3
   18ad6:	4420      	add	r0, r4
   18ad8:	6203      	str	r3, [r0, #32]
   18ada:	2000      	movs	r0, #0
   18adc:	bd70      	pop	{r4, r5, r6, pc}
   18ade:	2016      	movs	r0, #22
   18ae0:	f7f8 fe38 	bl	11754 <bsd_os_errno_set>
   18ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18ae8:	bd70      	pop	{r4, r5, r6, pc}
   18aea:	202a      	movs	r0, #42	; 0x2a
   18aec:	f7f8 fe32 	bl	11754 <bsd_os_errno_set>
   18af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18af4:	bd70      	pop	{r4, r5, r6, pc}
   18af6:	2009      	movs	r0, #9
   18af8:	f7f8 fe2c 	bl	11754 <bsd_os_errno_set>
   18afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b00:	bd70      	pop	{r4, r5, r6, pc}
   18b02:	bf00      	nop
   18b04:	20026568 	.word	0x20026568
   18b08:	10624dd3 	.word	0x10624dd3

00018b0c <interface_socket_getopt>:
   18b0c:	b570      	push	{r4, r5, r6, lr}
   18b0e:	2807      	cmp	r0, #7
   18b10:	9d04      	ldr	r5, [sp, #16]
   18b12:	d821      	bhi.n	18b58 <interface_socket_getopt+0x4c>
   18b14:	4c13      	ldr	r4, [pc, #76]	; (18b64 <interface_socket_getopt+0x58>)
   18b16:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18b1a:	0080      	lsls	r0, r0, #2
   18b1c:	5826      	ldr	r6, [r4, r0]
   18b1e:	4404      	add	r4, r0
   18b20:	b1d6      	cbz	r6, 18b58 <interface_socket_getopt+0x4c>
   18b22:	2901      	cmp	r1, #1
   18b24:	d112      	bne.n	18b4c <interface_socket_getopt+0x40>
   18b26:	2a04      	cmp	r2, #4
   18b28:	d110      	bne.n	18b4c <interface_socket_getopt+0x40>
   18b2a:	b14b      	cbz	r3, 18b40 <interface_socket_getopt+0x34>
   18b2c:	b145      	cbz	r5, 18b40 <interface_socket_getopt+0x34>
   18b2e:	682a      	ldr	r2, [r5, #0]
   18b30:	2a04      	cmp	r2, #4
   18b32:	d105      	bne.n	18b40 <interface_socket_getopt+0x34>
   18b34:	2200      	movs	r2, #0
   18b36:	6861      	ldr	r1, [r4, #4]
   18b38:	4610      	mov	r0, r2
   18b3a:	6019      	str	r1, [r3, #0]
   18b3c:	6062      	str	r2, [r4, #4]
   18b3e:	bd70      	pop	{r4, r5, r6, pc}
   18b40:	2016      	movs	r0, #22
   18b42:	f7f8 fe07 	bl	11754 <bsd_os_errno_set>
   18b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b4a:	bd70      	pop	{r4, r5, r6, pc}
   18b4c:	202a      	movs	r0, #42	; 0x2a
   18b4e:	f7f8 fe01 	bl	11754 <bsd_os_errno_set>
   18b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b56:	bd70      	pop	{r4, r5, r6, pc}
   18b58:	2009      	movs	r0, #9
   18b5a:	f7f8 fdfb 	bl	11754 <bsd_os_errno_set>
   18b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b62:	bd70      	pop	{r4, r5, r6, pc}
   18b64:	20026568 	.word	0x20026568

00018b68 <interface_shutdown>:
   18b68:	4b15      	ldr	r3, [pc, #84]	; (18bc0 <interface_shutdown+0x58>)
   18b6a:	681a      	ldr	r2, [r3, #0]
   18b6c:	b10a      	cbz	r2, 18b72 <interface_shutdown+0xa>
   18b6e:	2270      	movs	r2, #112	; 0x70
   18b70:	605a      	str	r2, [r3, #4]
   18b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18b74:	b10a      	cbz	r2, 18b7a <interface_shutdown+0x12>
   18b76:	2270      	movs	r2, #112	; 0x70
   18b78:	629a      	str	r2, [r3, #40]	; 0x28
   18b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18b7c:	b10a      	cbz	r2, 18b82 <interface_shutdown+0x1a>
   18b7e:	2270      	movs	r2, #112	; 0x70
   18b80:	64da      	str	r2, [r3, #76]	; 0x4c
   18b82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   18b84:	b10a      	cbz	r2, 18b8a <interface_shutdown+0x22>
   18b86:	2270      	movs	r2, #112	; 0x70
   18b88:	671a      	str	r2, [r3, #112]	; 0x70
   18b8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   18b8e:	b112      	cbz	r2, 18b96 <interface_shutdown+0x2e>
   18b90:	2270      	movs	r2, #112	; 0x70
   18b92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   18b96:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   18b9a:	b112      	cbz	r2, 18ba2 <interface_shutdown+0x3a>
   18b9c:	2270      	movs	r2, #112	; 0x70
   18b9e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   18ba2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   18ba6:	b112      	cbz	r2, 18bae <interface_shutdown+0x46>
   18ba8:	2270      	movs	r2, #112	; 0x70
   18baa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   18bae:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   18bb2:	b112      	cbz	r2, 18bba <interface_shutdown+0x52>
   18bb4:	2270      	movs	r2, #112	; 0x70
   18bb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18bba:	2000      	movs	r0, #0
   18bbc:	4770      	bx	lr
   18bbe:	bf00      	nop
   18bc0:	20026568 	.word	0x20026568

00018bc4 <interface_socket_fcntl>:
   18bc4:	2807      	cmp	r0, #7
   18bc6:	b510      	push	{r4, lr}
   18bc8:	d818      	bhi.n	18bfc <interface_socket_fcntl+0x38>
   18bca:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   18bce:	4c11      	ldr	r4, [pc, #68]	; (18c14 <interface_socket_fcntl+0x50>)
   18bd0:	0083      	lsls	r3, r0, #2
   18bd2:	58e0      	ldr	r0, [r4, r3]
   18bd4:	b190      	cbz	r0, 18bfc <interface_socket_fcntl+0x38>
   18bd6:	2901      	cmp	r1, #1
   18bd8:	d005      	beq.n	18be6 <interface_socket_fcntl+0x22>
   18bda:	2902      	cmp	r1, #2
   18bdc:	d114      	bne.n	18c08 <interface_socket_fcntl+0x44>
   18bde:	58e0      	ldr	r0, [r4, r3]
   18be0:	f3c0 7000 	ubfx	r0, r0, #28, #1
   18be4:	bd10      	pop	{r4, pc}
   18be6:	f012 0001 	ands.w	r0, r2, #1
   18bea:	58e2      	ldr	r2, [r4, r3]
   18bec:	bf1a      	itte	ne
   18bee:	2000      	movne	r0, #0
   18bf0:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   18bf4:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   18bf8:	50e2      	str	r2, [r4, r3]
   18bfa:	bd10      	pop	{r4, pc}
   18bfc:	2009      	movs	r0, #9
   18bfe:	f7f8 fda9 	bl	11754 <bsd_os_errno_set>
   18c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c06:	bd10      	pop	{r4, pc}
   18c08:	2016      	movs	r0, #22
   18c0a:	f7f8 fda3 	bl	11754 <bsd_os_errno_set>
   18c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c12:	bd10      	pop	{r4, pc}
   18c14:	20026568 	.word	0x20026568

00018c18 <bsd_os_application_irq_handler>:
   18c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c1c:	4c33      	ldr	r4, [pc, #204]	; (18cec <bsd_os_application_irq_handler+0xd4>)
   18c1e:	f7f8 fe4d 	bl	118bc <bsd_os_application_irq_clear>
   18c22:	f04f 0803 	mov.w	r8, #3
   18c26:	4d32      	ldr	r5, [pc, #200]	; (18cf0 <bsd_os_application_irq_handler+0xd8>)
   18c28:	4f32      	ldr	r7, [pc, #200]	; (18cf4 <bsd_os_application_irq_handler+0xdc>)
   18c2a:	f104 0680 	add.w	r6, r4, #128	; 0x80
   18c2e:	e004      	b.n	18c3a <bsd_os_application_irq_handler+0x22>
   18c30:	2b04      	cmp	r3, #4
   18c32:	d006      	beq.n	18c42 <bsd_os_application_irq_handler+0x2a>
   18c34:	3408      	adds	r4, #8
   18c36:	42b4      	cmp	r4, r6
   18c38:	d03b      	beq.n	18cb2 <bsd_os_application_irq_handler+0x9a>
   18c3a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   18c3e:	2b02      	cmp	r3, #2
   18c40:	d1f6      	bne.n	18c30 <bsd_os_application_irq_handler+0x18>
   18c42:	6820      	ldr	r0, [r4, #0]
   18c44:	882a      	ldrh	r2, [r5, #0]
   18c46:	6803      	ldr	r3, [r0, #0]
   18c48:	b29b      	uxth	r3, r3
   18c4a:	429a      	cmp	r2, r3
   18c4c:	d033      	beq.n	18cb6 <bsd_os_application_irq_handler+0x9e>
   18c4e:	8a2a      	ldrh	r2, [r5, #16]
   18c50:	429a      	cmp	r2, r3
   18c52:	d032      	beq.n	18cba <bsd_os_application_irq_handler+0xa2>
   18c54:	8c2a      	ldrh	r2, [r5, #32]
   18c56:	429a      	cmp	r2, r3
   18c58:	d031      	beq.n	18cbe <bsd_os_application_irq_handler+0xa6>
   18c5a:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   18c5c:	429a      	cmp	r2, r3
   18c5e:	d030      	beq.n	18cc2 <bsd_os_application_irq_handler+0xaa>
   18c60:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   18c64:	429a      	cmp	r2, r3
   18c66:	d036      	beq.n	18cd6 <bsd_os_application_irq_handler+0xbe>
   18c68:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   18c6c:	429a      	cmp	r2, r3
   18c6e:	d034      	beq.n	18cda <bsd_os_application_irq_handler+0xc2>
   18c70:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   18c74:	429a      	cmp	r2, r3
   18c76:	d032      	beq.n	18cde <bsd_os_application_irq_handler+0xc6>
   18c78:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   18c7c:	429a      	cmp	r2, r3
   18c7e:	d030      	beq.n	18ce2 <bsd_os_application_irq_handler+0xca>
   18c80:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   18c84:	429a      	cmp	r2, r3
   18c86:	d02e      	beq.n	18ce6 <bsd_os_application_irq_handler+0xce>
   18c88:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   18c8c:	429a      	cmp	r2, r3
   18c8e:	bf08      	it	eq
   18c90:	2309      	moveq	r3, #9
   18c92:	d1cf      	bne.n	18c34 <bsd_os_application_irq_handler+0x1c>
   18c94:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   18c98:	685a      	ldr	r2, [r3, #4]
   18c9a:	68d9      	ldr	r1, [r3, #12]
   18c9c:	4790      	blx	r2
   18c9e:	b990      	cbnz	r0, 18cc6 <bsd_os_application_irq_handler+0xae>
   18ca0:	2201      	movs	r2, #1
   18ca2:	6820      	ldr	r0, [r4, #0]
   18ca4:	f804 2c04 	strb.w	r2, [r4, #-4]
   18ca8:	68fb      	ldr	r3, [r7, #12]
   18caa:	3408      	adds	r4, #8
   18cac:	4798      	blx	r3
   18cae:	42b4      	cmp	r4, r6
   18cb0:	d1c3      	bne.n	18c3a <bsd_os_application_irq_handler+0x22>
   18cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18cb6:	2300      	movs	r3, #0
   18cb8:	e7ec      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18cba:	2301      	movs	r3, #1
   18cbc:	e7ea      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18cbe:	2302      	movs	r3, #2
   18cc0:	e7e8      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18cc2:	2303      	movs	r3, #3
   18cc4:	e7e6      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18cc6:	2802      	cmp	r0, #2
   18cc8:	bf0a      	itet	eq
   18cca:	2304      	moveq	r3, #4
   18ccc:	f804 8c04 	strbne.w	r8, [r4, #-4]
   18cd0:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   18cd4:	e7ae      	b.n	18c34 <bsd_os_application_irq_handler+0x1c>
   18cd6:	2304      	movs	r3, #4
   18cd8:	e7dc      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18cda:	2305      	movs	r3, #5
   18cdc:	e7da      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18cde:	2306      	movs	r3, #6
   18ce0:	e7d8      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18ce2:	2307      	movs	r3, #7
   18ce4:	e7d6      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18ce6:	2308      	movs	r3, #8
   18ce8:	e7d4      	b.n	18c94 <bsd_os_application_irq_handler+0x7c>
   18cea:	bf00      	nop
   18cec:	20020a90 	.word	0x20020a90
   18cf0:	20020954 	.word	0x20020954
   18cf4:	200209f4 	.word	0x200209f4

00018cf8 <rpc_framework_init>:
   18cf8:	b508      	push	{r3, lr}
   18cfa:	22a0      	movs	r2, #160	; 0xa0
   18cfc:	2100      	movs	r1, #0
   18cfe:	4802      	ldr	r0, [pc, #8]	; (18d08 <rpc_framework_init+0x10>)
   18d00:	f004 fba1 	bl	1d446 <memset>
   18d04:	2000      	movs	r0, #0
   18d06:	bd08      	pop	{r3, pc}
   18d08:	20020954 	.word	0x20020954

00018d0c <rpc_client_register>:
   18d0c:	8803      	ldrh	r3, [r0, #0]
   18d0e:	2b00      	cmp	r3, #0
   18d10:	d045      	beq.n	18d9e <rpc_client_register+0x92>
   18d12:	6842      	ldr	r2, [r0, #4]
   18d14:	4601      	mov	r1, r0
   18d16:	2a00      	cmp	r2, #0
   18d18:	d050      	beq.n	18dbc <rpc_client_register+0xb0>
   18d1a:	4a30      	ldr	r2, [pc, #192]	; (18ddc <rpc_client_register+0xd0>)
   18d1c:	8810      	ldrh	r0, [r2, #0]
   18d1e:	4283      	cmp	r3, r0
   18d20:	d03d      	beq.n	18d9e <rpc_client_register+0x92>
   18d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18d26:	8a14      	ldrh	r4, [r2, #16]
   18d28:	42a3      	cmp	r3, r4
   18d2a:	d035      	beq.n	18d98 <rpc_client_register+0x8c>
   18d2c:	8c15      	ldrh	r5, [r2, #32]
   18d2e:	42ab      	cmp	r3, r5
   18d30:	d032      	beq.n	18d98 <rpc_client_register+0x8c>
   18d32:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   18d34:	42b3      	cmp	r3, r6
   18d36:	d02f      	beq.n	18d98 <rpc_client_register+0x8c>
   18d38:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   18d3c:	42bb      	cmp	r3, r7
   18d3e:	d02b      	beq.n	18d98 <rpc_client_register+0x8c>
   18d40:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   18d44:	4563      	cmp	r3, ip
   18d46:	d027      	beq.n	18d98 <rpc_client_register+0x8c>
   18d48:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   18d4c:	4573      	cmp	r3, lr
   18d4e:	d023      	beq.n	18d98 <rpc_client_register+0x8c>
   18d50:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   18d54:	4543      	cmp	r3, r8
   18d56:	d01f      	beq.n	18d98 <rpc_client_register+0x8c>
   18d58:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   18d5c:	454b      	cmp	r3, r9
   18d5e:	d01b      	beq.n	18d98 <rpc_client_register+0x8c>
   18d60:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   18d64:	4553      	cmp	r3, sl
   18d66:	d017      	beq.n	18d98 <rpc_client_register+0x8c>
   18d68:	b1e0      	cbz	r0, 18da4 <rpc_client_register+0x98>
   18d6a:	b35c      	cbz	r4, 18dc4 <rpc_client_register+0xb8>
   18d6c:	b365      	cbz	r5, 18dc8 <rpc_client_register+0xbc>
   18d6e:	b36e      	cbz	r6, 18dcc <rpc_client_register+0xc0>
   18d70:	b377      	cbz	r7, 18dd0 <rpc_client_register+0xc4>
   18d72:	f1bc 0f00 	cmp.w	ip, #0
   18d76:	d02d      	beq.n	18dd4 <rpc_client_register+0xc8>
   18d78:	f1be 0f00 	cmp.w	lr, #0
   18d7c:	d020      	beq.n	18dc0 <rpc_client_register+0xb4>
   18d7e:	f1b8 0f00 	cmp.w	r8, #0
   18d82:	d029      	beq.n	18dd8 <rpc_client_register+0xcc>
   18d84:	f1b9 0f00 	cmp.w	r9, #0
   18d88:	d00b      	beq.n	18da2 <rpc_client_register+0x96>
   18d8a:	2009      	movs	r0, #9
   18d8c:	f1ba 0f00 	cmp.w	sl, #0
   18d90:	d008      	beq.n	18da4 <rpc_client_register+0x98>
   18d92:	2004      	movs	r0, #4
   18d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d98:	2007      	movs	r0, #7
   18d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d9e:	2007      	movs	r0, #7
   18da0:	4770      	bx	lr
   18da2:	2008      	movs	r0, #8
   18da4:	0100      	lsls	r0, r0, #4
   18da6:	5213      	strh	r3, [r2, r0]
   18da8:	684b      	ldr	r3, [r1, #4]
   18daa:	4402      	add	r2, r0
   18dac:	6053      	str	r3, [r2, #4]
   18dae:	688b      	ldr	r3, [r1, #8]
   18db0:	2000      	movs	r0, #0
   18db2:	6093      	str	r3, [r2, #8]
   18db4:	68cb      	ldr	r3, [r1, #12]
   18db6:	60d3      	str	r3, [r2, #12]
   18db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18dbc:	200e      	movs	r0, #14
   18dbe:	4770      	bx	lr
   18dc0:	2006      	movs	r0, #6
   18dc2:	e7ef      	b.n	18da4 <rpc_client_register+0x98>
   18dc4:	2001      	movs	r0, #1
   18dc6:	e7ed      	b.n	18da4 <rpc_client_register+0x98>
   18dc8:	2002      	movs	r0, #2
   18dca:	e7eb      	b.n	18da4 <rpc_client_register+0x98>
   18dcc:	2003      	movs	r0, #3
   18dce:	e7e9      	b.n	18da4 <rpc_client_register+0x98>
   18dd0:	2004      	movs	r0, #4
   18dd2:	e7e7      	b.n	18da4 <rpc_client_register+0x98>
   18dd4:	2005      	movs	r0, #5
   18dd6:	e7e5      	b.n	18da4 <rpc_client_register+0x98>
   18dd8:	2007      	movs	r0, #7
   18dda:	e7e3      	b.n	18da4 <rpc_client_register+0x98>
   18ddc:	20020954 	.word	0x20020954

00018de0 <rpc_transport_input>:
   18de0:	b538      	push	{r3, r4, r5, lr}
   18de2:	4a82      	ldr	r2, [pc, #520]	; (18fec <rpc_transport_input+0x20c>)
   18de4:	680b      	ldr	r3, [r1, #0]
   18de6:	8810      	ldrh	r0, [r2, #0]
   18de8:	b29b      	uxth	r3, r3
   18dea:	4298      	cmp	r0, r3
   18dec:	d027      	beq.n	18e3e <rpc_transport_input+0x5e>
   18dee:	8a10      	ldrh	r0, [r2, #16]
   18df0:	4298      	cmp	r0, r3
   18df2:	d024      	beq.n	18e3e <rpc_transport_input+0x5e>
   18df4:	8c10      	ldrh	r0, [r2, #32]
   18df6:	4298      	cmp	r0, r3
   18df8:	d021      	beq.n	18e3e <rpc_transport_input+0x5e>
   18dfa:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   18dfc:	4298      	cmp	r0, r3
   18dfe:	d01e      	beq.n	18e3e <rpc_transport_input+0x5e>
   18e00:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   18e04:	4298      	cmp	r0, r3
   18e06:	d01a      	beq.n	18e3e <rpc_transport_input+0x5e>
   18e08:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   18e0c:	4298      	cmp	r0, r3
   18e0e:	d016      	beq.n	18e3e <rpc_transport_input+0x5e>
   18e10:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   18e14:	4298      	cmp	r0, r3
   18e16:	d012      	beq.n	18e3e <rpc_transport_input+0x5e>
   18e18:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   18e1c:	4298      	cmp	r0, r3
   18e1e:	d00e      	beq.n	18e3e <rpc_transport_input+0x5e>
   18e20:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   18e24:	4298      	cmp	r0, r3
   18e26:	d00a      	beq.n	18e3e <rpc_transport_input+0x5e>
   18e28:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   18e2c:	429a      	cmp	r2, r3
   18e2e:	d006      	beq.n	18e3e <rpc_transport_input+0x5e>
   18e30:	6888      	ldr	r0, [r1, #8]
   18e32:	b118      	cbz	r0, 18e3c <rpc_transport_input+0x5c>
   18e34:	4b6e      	ldr	r3, [pc, #440]	; (18ff0 <rpc_transport_input+0x210>)
   18e36:	691b      	ldr	r3, [r3, #16]
   18e38:	4798      	blx	r3
   18e3a:	2000      	movs	r0, #0
   18e3c:	bd38      	pop	{r3, r4, r5, pc}
   18e3e:	6888      	ldr	r0, [r1, #8]
   18e40:	2800      	cmp	r0, #0
   18e42:	f000 8098 	beq.w	18f76 <rpc_transport_input+0x196>
   18e46:	4a6b      	ldr	r2, [pc, #428]	; (18ff4 <rpc_transport_input+0x214>)
   18e48:	6814      	ldr	r4, [r2, #0]
   18e4a:	2c00      	cmp	r4, #0
   18e4c:	d03c      	beq.n	18ec8 <rpc_transport_input+0xe8>
   18e4e:	6894      	ldr	r4, [r2, #8]
   18e50:	2c00      	cmp	r4, #0
   18e52:	f000 809a 	beq.w	18f8a <rpc_transport_input+0x1aa>
   18e56:	6914      	ldr	r4, [r2, #16]
   18e58:	2c00      	cmp	r4, #0
   18e5a:	f000 809a 	beq.w	18f92 <rpc_transport_input+0x1b2>
   18e5e:	6994      	ldr	r4, [r2, #24]
   18e60:	2c00      	cmp	r4, #0
   18e62:	f000 809a 	beq.w	18f9a <rpc_transport_input+0x1ba>
   18e66:	6a14      	ldr	r4, [r2, #32]
   18e68:	2c00      	cmp	r4, #0
   18e6a:	f000 809a 	beq.w	18fa2 <rpc_transport_input+0x1c2>
   18e6e:	6a94      	ldr	r4, [r2, #40]	; 0x28
   18e70:	2c00      	cmp	r4, #0
   18e72:	f000 8084 	beq.w	18f7e <rpc_transport_input+0x19e>
   18e76:	6b14      	ldr	r4, [r2, #48]	; 0x30
   18e78:	2c00      	cmp	r4, #0
   18e7a:	f000 8098 	beq.w	18fae <rpc_transport_input+0x1ce>
   18e7e:	6b94      	ldr	r4, [r2, #56]	; 0x38
   18e80:	2c00      	cmp	r4, #0
   18e82:	f000 8096 	beq.w	18fb2 <rpc_transport_input+0x1d2>
   18e86:	6c14      	ldr	r4, [r2, #64]	; 0x40
   18e88:	2c00      	cmp	r4, #0
   18e8a:	f000 8096 	beq.w	18fba <rpc_transport_input+0x1da>
   18e8e:	6c94      	ldr	r4, [r2, #72]	; 0x48
   18e90:	2c00      	cmp	r4, #0
   18e92:	f000 8096 	beq.w	18fc2 <rpc_transport_input+0x1e2>
   18e96:	6d14      	ldr	r4, [r2, #80]	; 0x50
   18e98:	2c00      	cmp	r4, #0
   18e9a:	f000 8096 	beq.w	18fca <rpc_transport_input+0x1ea>
   18e9e:	6d94      	ldr	r4, [r2, #88]	; 0x58
   18ea0:	2c00      	cmp	r4, #0
   18ea2:	f000 8098 	beq.w	18fd6 <rpc_transport_input+0x1f6>
   18ea6:	6e14      	ldr	r4, [r2, #96]	; 0x60
   18ea8:	2c00      	cmp	r4, #0
   18eaa:	f000 8098 	beq.w	18fde <rpc_transport_input+0x1fe>
   18eae:	6e94      	ldr	r4, [r2, #104]	; 0x68
   18eb0:	2c00      	cmp	r4, #0
   18eb2:	f000 8096 	beq.w	18fe2 <rpc_transport_input+0x202>
   18eb6:	6f14      	ldr	r4, [r2, #112]	; 0x70
   18eb8:	2c00      	cmp	r4, #0
   18eba:	f000 8094 	beq.w	18fe6 <rpc_transport_input+0x206>
   18ebe:	6f94      	ldr	r4, [r2, #120]	; 0x78
   18ec0:	b10c      	cbz	r4, 18ec6 <rpc_transport_input+0xe6>
   18ec2:	2001      	movs	r0, #1
   18ec4:	bd38      	pop	{r3, r4, r5, pc}
   18ec6:	240f      	movs	r4, #15
   18ec8:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   18ecc:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   18ed0:	80ab      	strh	r3, [r5, #4]
   18ed2:	4b49      	ldr	r3, [pc, #292]	; (18ff8 <rpc_transport_input+0x218>)
   18ed4:	781a      	ldrb	r2, [r3, #0]
   18ed6:	2a01      	cmp	r2, #1
   18ed8:	d053      	beq.n	18f82 <rpc_transport_input+0x1a2>
   18eda:	7a1a      	ldrb	r2, [r3, #8]
   18edc:	2a01      	cmp	r2, #1
   18ede:	d041      	beq.n	18f64 <rpc_transport_input+0x184>
   18ee0:	7c1a      	ldrb	r2, [r3, #16]
   18ee2:	2a01      	cmp	r2, #1
   18ee4:	d04f      	beq.n	18f86 <rpc_transport_input+0x1a6>
   18ee6:	7e1a      	ldrb	r2, [r3, #24]
   18ee8:	2a01      	cmp	r2, #1
   18eea:	d050      	beq.n	18f8e <rpc_transport_input+0x1ae>
   18eec:	f893 2020 	ldrb.w	r2, [r3, #32]
   18ef0:	2a01      	cmp	r2, #1
   18ef2:	d050      	beq.n	18f96 <rpc_transport_input+0x1b6>
   18ef4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   18ef8:	2a01      	cmp	r2, #1
   18efa:	d050      	beq.n	18f9e <rpc_transport_input+0x1be>
   18efc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   18f00:	2a01      	cmp	r2, #1
   18f02:	d03a      	beq.n	18f7a <rpc_transport_input+0x19a>
   18f04:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   18f08:	2a01      	cmp	r2, #1
   18f0a:	d04c      	beq.n	18fa6 <rpc_transport_input+0x1c6>
   18f0c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   18f10:	2a01      	cmp	r2, #1
   18f12:	d04a      	beq.n	18faa <rpc_transport_input+0x1ca>
   18f14:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   18f18:	2a01      	cmp	r2, #1
   18f1a:	d04c      	beq.n	18fb6 <rpc_transport_input+0x1d6>
   18f1c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   18f20:	2a01      	cmp	r2, #1
   18f22:	d04c      	beq.n	18fbe <rpc_transport_input+0x1de>
   18f24:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   18f28:	2a01      	cmp	r2, #1
   18f2a:	d04c      	beq.n	18fc6 <rpc_transport_input+0x1e6>
   18f2c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   18f30:	2a01      	cmp	r2, #1
   18f32:	d04c      	beq.n	18fce <rpc_transport_input+0x1ee>
   18f34:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   18f38:	2a01      	cmp	r2, #1
   18f3a:	d04a      	beq.n	18fd2 <rpc_transport_input+0x1f2>
   18f3c:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   18f40:	2a01      	cmp	r2, #1
   18f42:	d04a      	beq.n	18fda <rpc_transport_input+0x1fa>
   18f44:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   18f48:	2a01      	cmp	r2, #1
   18f4a:	d00a      	beq.n	18f62 <rpc_transport_input+0x182>
   18f4c:	2c10      	cmp	r4, #16
   18f4e:	d0b8      	beq.n	18ec2 <rpc_transport_input+0xe2>
   18f50:	2200      	movs	r2, #0
   18f52:	4b28      	ldr	r3, [pc, #160]	; (18ff4 <rpc_transport_input+0x214>)
   18f54:	2001      	movs	r0, #1
   18f56:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   18f5a:	808a      	strh	r2, [r1, #4]
   18f5c:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   18f60:	bd38      	pop	{r3, r4, r5, pc}
   18f62:	220f      	movs	r2, #15
   18f64:	2402      	movs	r4, #2
   18f66:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   18f6a:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   18f6e:	6041      	str	r1, [r0, #4]
   18f70:	f7f8 fc9c 	bl	118ac <bsd_os_application_irq_set>
   18f74:	e7a5      	b.n	18ec2 <rpc_transport_input+0xe2>
   18f76:	2410      	movs	r4, #16
   18f78:	e7ab      	b.n	18ed2 <rpc_transport_input+0xf2>
   18f7a:	2206      	movs	r2, #6
   18f7c:	e7f2      	b.n	18f64 <rpc_transport_input+0x184>
   18f7e:	2405      	movs	r4, #5
   18f80:	e7a2      	b.n	18ec8 <rpc_transport_input+0xe8>
   18f82:	2200      	movs	r2, #0
   18f84:	e7ee      	b.n	18f64 <rpc_transport_input+0x184>
   18f86:	2202      	movs	r2, #2
   18f88:	e7ec      	b.n	18f64 <rpc_transport_input+0x184>
   18f8a:	2401      	movs	r4, #1
   18f8c:	e79c      	b.n	18ec8 <rpc_transport_input+0xe8>
   18f8e:	2203      	movs	r2, #3
   18f90:	e7e8      	b.n	18f64 <rpc_transport_input+0x184>
   18f92:	2402      	movs	r4, #2
   18f94:	e798      	b.n	18ec8 <rpc_transport_input+0xe8>
   18f96:	2204      	movs	r2, #4
   18f98:	e7e4      	b.n	18f64 <rpc_transport_input+0x184>
   18f9a:	2403      	movs	r4, #3
   18f9c:	e794      	b.n	18ec8 <rpc_transport_input+0xe8>
   18f9e:	2205      	movs	r2, #5
   18fa0:	e7e0      	b.n	18f64 <rpc_transport_input+0x184>
   18fa2:	2404      	movs	r4, #4
   18fa4:	e790      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fa6:	2207      	movs	r2, #7
   18fa8:	e7dc      	b.n	18f64 <rpc_transport_input+0x184>
   18faa:	2208      	movs	r2, #8
   18fac:	e7da      	b.n	18f64 <rpc_transport_input+0x184>
   18fae:	2406      	movs	r4, #6
   18fb0:	e78a      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fb2:	2407      	movs	r4, #7
   18fb4:	e788      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fb6:	2209      	movs	r2, #9
   18fb8:	e7d4      	b.n	18f64 <rpc_transport_input+0x184>
   18fba:	2408      	movs	r4, #8
   18fbc:	e784      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fbe:	220a      	movs	r2, #10
   18fc0:	e7d0      	b.n	18f64 <rpc_transport_input+0x184>
   18fc2:	2409      	movs	r4, #9
   18fc4:	e780      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fc6:	220b      	movs	r2, #11
   18fc8:	e7cc      	b.n	18f64 <rpc_transport_input+0x184>
   18fca:	240a      	movs	r4, #10
   18fcc:	e77c      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fce:	220c      	movs	r2, #12
   18fd0:	e7c8      	b.n	18f64 <rpc_transport_input+0x184>
   18fd2:	220d      	movs	r2, #13
   18fd4:	e7c6      	b.n	18f64 <rpc_transport_input+0x184>
   18fd6:	240b      	movs	r4, #11
   18fd8:	e776      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fda:	220e      	movs	r2, #14
   18fdc:	e7c2      	b.n	18f64 <rpc_transport_input+0x184>
   18fde:	240c      	movs	r4, #12
   18fe0:	e772      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fe2:	240d      	movs	r4, #13
   18fe4:	e770      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fe6:	240e      	movs	r4, #14
   18fe8:	e76e      	b.n	18ec8 <rpc_transport_input+0xe8>
   18fea:	bf00      	nop
   18fec:	20020954 	.word	0x20020954
   18ff0:	200209f4 	.word	0x200209f4
   18ff4:	20020a0c 	.word	0x20020a0c
   18ff8:	20020a8c 	.word	0x20020a8c

00018ffc <rpc_transport_register>:
   18ffc:	b4f0      	push	{r4, r5, r6, r7}
   18ffe:	2900      	cmp	r1, #0
   19000:	d052      	beq.n	190a8 <rpc_transport_register+0xac>
   19002:	2800      	cmp	r0, #0
   19004:	d050      	beq.n	190a8 <rpc_transport_register+0xac>
   19006:	6883      	ldr	r3, [r0, #8]
   19008:	2b00      	cmp	r3, #0
   1900a:	d04d      	beq.n	190a8 <rpc_transport_register+0xac>
   1900c:	6903      	ldr	r3, [r0, #16]
   1900e:	2b00      	cmp	r3, #0
   19010:	d04a      	beq.n	190a8 <rpc_transport_register+0xac>
   19012:	6843      	ldr	r3, [r0, #4]
   19014:	2b00      	cmp	r3, #0
   19016:	d047      	beq.n	190a8 <rpc_transport_register+0xac>
   19018:	68c3      	ldr	r3, [r0, #12]
   1901a:	2b00      	cmp	r3, #0
   1901c:	d044      	beq.n	190a8 <rpc_transport_register+0xac>
   1901e:	6803      	ldr	r3, [r0, #0]
   19020:	2b00      	cmp	r3, #0
   19022:	d041      	beq.n	190a8 <rpc_transport_register+0xac>
   19024:	6943      	ldr	r3, [r0, #20]
   19026:	2b00      	cmp	r3, #0
   19028:	d03e      	beq.n	190a8 <rpc_transport_register+0xac>
   1902a:	2601      	movs	r6, #1
   1902c:	2500      	movs	r5, #0
   1902e:	4604      	mov	r4, r0
   19030:	460f      	mov	r7, r1
   19032:	4a1f      	ldr	r2, [pc, #124]	; (190b0 <rpc_transport_register+0xb4>)
   19034:	4b1f      	ldr	r3, [pc, #124]	; (190b4 <rpc_transport_register+0xb8>)
   19036:	f8df c080 	ldr.w	ip, [pc, #128]	; 190b8 <rpc_transport_register+0xbc>
   1903a:	7416      	strb	r6, [r2, #16]
   1903c:	7616      	strb	r6, [r2, #24]
   1903e:	f882 6020 	strb.w	r6, [r2, #32]
   19042:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   19046:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   1904a:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   1904e:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   19052:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   19056:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   1905a:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   1905e:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   19062:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   19066:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   1906a:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   1906e:	611d      	str	r5, [r3, #16]
   19070:	619d      	str	r5, [r3, #24]
   19072:	621d      	str	r5, [r3, #32]
   19074:	629d      	str	r5, [r3, #40]	; 0x28
   19076:	631d      	str	r5, [r3, #48]	; 0x30
   19078:	639d      	str	r5, [r3, #56]	; 0x38
   1907a:	641d      	str	r5, [r3, #64]	; 0x40
   1907c:	649d      	str	r5, [r3, #72]	; 0x48
   1907e:	651d      	str	r5, [r3, #80]	; 0x50
   19080:	659d      	str	r5, [r3, #88]	; 0x58
   19082:	661d      	str	r5, [r3, #96]	; 0x60
   19084:	669d      	str	r5, [r3, #104]	; 0x68
   19086:	671d      	str	r5, [r3, #112]	; 0x70
   19088:	679d      	str	r5, [r3, #120]	; 0x78
   1908a:	7016      	strb	r6, [r2, #0]
   1908c:	7216      	strb	r6, [r2, #8]
   1908e:	601d      	str	r5, [r3, #0]
   19090:	609d      	str	r5, [r3, #8]
   19092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   19094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   19098:	e894 0003 	ldmia.w	r4, {r0, r1}
   1909c:	e88c 0003 	stmia.w	ip, {r0, r1}
   190a0:	603e      	str	r6, [r7, #0]
   190a2:	4628      	mov	r0, r5
   190a4:	bcf0      	pop	{r4, r5, r6, r7}
   190a6:	4770      	bx	lr
   190a8:	250e      	movs	r5, #14
   190aa:	4628      	mov	r0, r5
   190ac:	bcf0      	pop	{r4, r5, r6, r7}
   190ae:	4770      	bx	lr
   190b0:	20020a8c 	.word	0x20020a8c
   190b4:	20020a0c 	.word	0x20020a0c
   190b8:	200209f4 	.word	0x200209f4

000190bc <rpc_transport_unregister>:
   190bc:	2800      	cmp	r0, #0
   190be:	d03a      	beq.n	19136 <rpc_transport_unregister+0x7a>
   190c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   190c4:	4680      	mov	r8, r0
   190c6:	4c1d      	ldr	r4, [pc, #116]	; (1913c <rpc_transport_unregister+0x80>)
   190c8:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   190cc:	68a3      	ldr	r3, [r4, #8]
   190ce:	3410      	adds	r4, #16
   190d0:	b103      	cbz	r3, 190d4 <rpc_transport_unregister+0x18>
   190d2:	4798      	blx	r3
   190d4:	42ac      	cmp	r4, r5
   190d6:	d1f9      	bne.n	190cc <rpc_transport_unregister+0x10>
   190d8:	f04f 0901 	mov.w	r9, #1
   190dc:	2600      	movs	r6, #0
   190de:	4c18      	ldr	r4, [pc, #96]	; (19140 <rpc_transport_unregister+0x84>)
   190e0:	4d18      	ldr	r5, [pc, #96]	; (19144 <rpc_transport_unregister+0x88>)
   190e2:	f8df a064 	ldr.w	sl, [pc, #100]	; 19148 <rpc_transport_unregister+0x8c>
   190e6:	f104 0780 	add.w	r7, r4, #128	; 0x80
   190ea:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   190ee:	2b01      	cmp	r3, #1
   190f0:	d005      	beq.n	190fe <rpc_transport_unregister+0x42>
   190f2:	f8da 300c 	ldr.w	r3, [sl, #12]
   190f6:	6820      	ldr	r0, [r4, #0]
   190f8:	4798      	blx	r3
   190fa:	f804 9c04 	strb.w	r9, [r4, #-4]
   190fe:	f855 0c04 	ldr.w	r0, [r5, #-4]
   19102:	3408      	adds	r4, #8
   19104:	b128      	cbz	r0, 19112 <rpc_transport_unregister+0x56>
   19106:	f8da 3010 	ldr.w	r3, [sl, #16]
   1910a:	4798      	blx	r3
   1910c:	802e      	strh	r6, [r5, #0]
   1910e:	f845 6c04 	str.w	r6, [r5, #-4]
   19112:	42bc      	cmp	r4, r7
   19114:	f105 0508 	add.w	r5, r5, #8
   19118:	d1e7      	bne.n	190ea <rpc_transport_unregister+0x2e>
   1911a:	f8d8 0000 	ldr.w	r0, [r8]
   1911e:	2218      	movs	r2, #24
   19120:	3801      	subs	r0, #1
   19122:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19126:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   1912a:	2100      	movs	r1, #0
   1912c:	f004 f98b 	bl	1d446 <memset>
   19130:	2000      	movs	r0, #0
   19132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19136:	200e      	movs	r0, #14
   19138:	4770      	bx	lr
   1913a:	bf00      	nop
   1913c:	20020954 	.word	0x20020954
   19140:	20020a90 	.word	0x20020a90
   19144:	20020a10 	.word	0x20020a10
   19148:	200209f4 	.word	0x200209f4

0001914c <rpc_message_send>:
   1914c:	b168      	cbz	r0, 1916a <rpc_message_send+0x1e>
   1914e:	b171      	cbz	r1, 1916e <rpc_message_send+0x22>
   19150:	4a09      	ldr	r2, [pc, #36]	; (19178 <rpc_message_send+0x2c>)
   19152:	6853      	ldr	r3, [r2, #4]
   19154:	b16b      	cbz	r3, 19172 <rpc_message_send+0x26>
   19156:	684b      	ldr	r3, [r1, #4]
   19158:	8008      	strh	r0, [r1, #0]
   1915a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1915e:	f043 0302 	orr.w	r3, r3, #2
   19162:	6812      	ldr	r2, [r2, #0]
   19164:	604b      	str	r3, [r1, #4]
   19166:	4608      	mov	r0, r1
   19168:	4710      	bx	r2
   1916a:	2007      	movs	r0, #7
   1916c:	4770      	bx	lr
   1916e:	200e      	movs	r0, #14
   19170:	4770      	bx	lr
   19172:	2008      	movs	r0, #8
   19174:	4770      	bx	lr
   19176:	bf00      	nop
   19178:	200209f4 	.word	0x200209f4

0001917c <rpc_message_alloc>:
   1917c:	b35a      	cbz	r2, 191d6 <rpc_message_alloc+0x5a>
   1917e:	b330      	cbz	r0, 191ce <rpc_message_alloc+0x52>
   19180:	2300      	movs	r3, #0
   19182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19186:	4f15      	ldr	r7, [pc, #84]	; (191dc <rpc_message_alloc+0x60>)
   19188:	6013      	str	r3, [r2, #0]
   1918a:	687b      	ldr	r3, [r7, #4]
   1918c:	b30b      	cbz	r3, 191d2 <rpc_message_alloc+0x56>
   1918e:	4615      	mov	r5, r2
   19190:	460c      	mov	r4, r1
   19192:	4606      	mov	r6, r0
   19194:	b959      	cbnz	r1, 191ae <rpc_message_alloc+0x32>
   19196:	4798      	blx	r3
   19198:	4603      	mov	r3, r0
   1919a:	b1a8      	cbz	r0, 191c8 <rpc_message_alloc+0x4c>
   1919c:	46a0      	mov	r8, r4
   1919e:	60dc      	str	r4, [r3, #12]
   191a0:	f8c3 8008 	str.w	r8, [r3, #8]
   191a4:	801e      	strh	r6, [r3, #0]
   191a6:	602b      	str	r3, [r5, #0]
   191a8:	2000      	movs	r0, #0
   191aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191ae:	68bb      	ldr	r3, [r7, #8]
   191b0:	4608      	mov	r0, r1
   191b2:	4798      	blx	r3
   191b4:	4680      	mov	r8, r0
   191b6:	b138      	cbz	r0, 191c8 <rpc_message_alloc+0x4c>
   191b8:	687b      	ldr	r3, [r7, #4]
   191ba:	4798      	blx	r3
   191bc:	4603      	mov	r3, r0
   191be:	2800      	cmp	r0, #0
   191c0:	d1ed      	bne.n	1919e <rpc_message_alloc+0x22>
   191c2:	693b      	ldr	r3, [r7, #16]
   191c4:	4640      	mov	r0, r8
   191c6:	4798      	blx	r3
   191c8:	2004      	movs	r0, #4
   191ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191ce:	2007      	movs	r0, #7
   191d0:	4770      	bx	lr
   191d2:	2008      	movs	r0, #8
   191d4:	e7f9      	b.n	191ca <rpc_message_alloc+0x4e>
   191d6:	200e      	movs	r0, #14
   191d8:	4770      	bx	lr
   191da:	bf00      	nop
   191dc:	200209f4 	.word	0x200209f4

000191e0 <rpc_message_free>:
   191e0:	2800      	cmp	r0, #0
   191e2:	f000 808c 	beq.w	192fe <rpc_message_free+0x11e>
   191e6:	2900      	cmp	r1, #0
   191e8:	f000 80e9 	beq.w	193be <rpc_message_free+0x1de>
   191ec:	b538      	push	{r3, r4, r5, lr}
   191ee:	4a83      	ldr	r2, [pc, #524]	; (193fc <rpc_message_free+0x21c>)
   191f0:	6853      	ldr	r3, [r2, #4]
   191f2:	2b00      	cmp	r3, #0
   191f4:	f000 8085 	beq.w	19302 <rpc_message_free+0x122>
   191f8:	4c81      	ldr	r4, [pc, #516]	; (19400 <rpc_message_free+0x220>)
   191fa:	4608      	mov	r0, r1
   191fc:	6863      	ldr	r3, [r4, #4]
   191fe:	4299      	cmp	r1, r3
   19200:	f000 8085 	beq.w	1930e <rpc_message_free+0x12e>
   19204:	68e3      	ldr	r3, [r4, #12]
   19206:	4298      	cmp	r0, r3
   19208:	f000 808e 	beq.w	19328 <rpc_message_free+0x148>
   1920c:	6963      	ldr	r3, [r4, #20]
   1920e:	4298      	cmp	r0, r3
   19210:	f000 8090 	beq.w	19334 <rpc_message_free+0x154>
   19214:	69e3      	ldr	r3, [r4, #28]
   19216:	4298      	cmp	r0, r3
   19218:	f000 8092 	beq.w	19340 <rpc_message_free+0x160>
   1921c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1921e:	4298      	cmp	r0, r3
   19220:	f000 8095 	beq.w	1934e <rpc_message_free+0x16e>
   19224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19226:	4298      	cmp	r0, r3
   19228:	f000 8098 	beq.w	1935c <rpc_message_free+0x17c>
   1922c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1922e:	4298      	cmp	r0, r3
   19230:	f000 809b 	beq.w	1936a <rpc_message_free+0x18a>
   19234:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   19236:	4298      	cmp	r0, r3
   19238:	f000 809e 	beq.w	19378 <rpc_message_free+0x198>
   1923c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1923e:	4298      	cmp	r0, r3
   19240:	f000 80a1 	beq.w	19386 <rpc_message_free+0x1a6>
   19244:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   19246:	4298      	cmp	r0, r3
   19248:	f000 80a4 	beq.w	19394 <rpc_message_free+0x1b4>
   1924c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1924e:	4298      	cmp	r0, r3
   19250:	f000 80a7 	beq.w	193a2 <rpc_message_free+0x1c2>
   19254:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19256:	4298      	cmp	r0, r3
   19258:	f000 80aa 	beq.w	193b0 <rpc_message_free+0x1d0>
   1925c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1925e:	4298      	cmp	r0, r3
   19260:	f000 80af 	beq.w	193c2 <rpc_message_free+0x1e2>
   19264:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   19266:	4298      	cmp	r0, r3
   19268:	f000 80b2 	beq.w	193d0 <rpc_message_free+0x1f0>
   1926c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1926e:	4298      	cmp	r0, r3
   19270:	f000 80b5 	beq.w	193de <rpc_message_free+0x1fe>
   19274:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   19276:	4283      	cmp	r3, r0
   19278:	f000 80b8 	beq.w	193ec <rpc_message_free+0x20c>
   1927c:	68d3      	ldr	r3, [r2, #12]
   1927e:	4798      	blx	r3
   19280:	7823      	ldrb	r3, [r4, #0]
   19282:	2b04      	cmp	r3, #4
   19284:	d03f      	beq.n	19306 <rpc_message_free+0x126>
   19286:	7a23      	ldrb	r3, [r4, #8]
   19288:	2b04      	cmp	r3, #4
   1928a:	d03c      	beq.n	19306 <rpc_message_free+0x126>
   1928c:	7c23      	ldrb	r3, [r4, #16]
   1928e:	2b04      	cmp	r3, #4
   19290:	d039      	beq.n	19306 <rpc_message_free+0x126>
   19292:	7e23      	ldrb	r3, [r4, #24]
   19294:	2b04      	cmp	r3, #4
   19296:	d036      	beq.n	19306 <rpc_message_free+0x126>
   19298:	f894 3020 	ldrb.w	r3, [r4, #32]
   1929c:	2b04      	cmp	r3, #4
   1929e:	d032      	beq.n	19306 <rpc_message_free+0x126>
   192a0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   192a4:	2b04      	cmp	r3, #4
   192a6:	d02e      	beq.n	19306 <rpc_message_free+0x126>
   192a8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   192ac:	2b04      	cmp	r3, #4
   192ae:	d02a      	beq.n	19306 <rpc_message_free+0x126>
   192b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   192b4:	2b04      	cmp	r3, #4
   192b6:	d026      	beq.n	19306 <rpc_message_free+0x126>
   192b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   192bc:	2b04      	cmp	r3, #4
   192be:	d022      	beq.n	19306 <rpc_message_free+0x126>
   192c0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   192c4:	2b04      	cmp	r3, #4
   192c6:	d01e      	beq.n	19306 <rpc_message_free+0x126>
   192c8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   192cc:	2b04      	cmp	r3, #4
   192ce:	d01a      	beq.n	19306 <rpc_message_free+0x126>
   192d0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   192d4:	2b04      	cmp	r3, #4
   192d6:	d016      	beq.n	19306 <rpc_message_free+0x126>
   192d8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   192dc:	2b04      	cmp	r3, #4
   192de:	d012      	beq.n	19306 <rpc_message_free+0x126>
   192e0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   192e4:	2b04      	cmp	r3, #4
   192e6:	d00e      	beq.n	19306 <rpc_message_free+0x126>
   192e8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   192ec:	2b04      	cmp	r3, #4
   192ee:	d00a      	beq.n	19306 <rpc_message_free+0x126>
   192f0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   192f4:	2b04      	cmp	r3, #4
   192f6:	bf18      	it	ne
   192f8:	2000      	movne	r0, #0
   192fa:	d004      	beq.n	19306 <rpc_message_free+0x126>
   192fc:	bd38      	pop	{r3, r4, r5, pc}
   192fe:	2007      	movs	r0, #7
   19300:	4770      	bx	lr
   19302:	2008      	movs	r0, #8
   19304:	bd38      	pop	{r3, r4, r5, pc}
   19306:	f7f8 fad1 	bl	118ac <bsd_os_application_irq_set>
   1930a:	2000      	movs	r0, #0
   1930c:	bd38      	pop	{r3, r4, r5, pc}
   1930e:	7821      	ldrb	r1, [r4, #0]
   19310:	2903      	cmp	r1, #3
   19312:	f47f af77 	bne.w	19204 <rpc_message_free+0x24>
   19316:	2100      	movs	r1, #0
   19318:	2501      	movs	r5, #1
   1931a:	4618      	mov	r0, r3
   1931c:	68d2      	ldr	r2, [r2, #12]
   1931e:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   19322:	4790      	blx	r2
   19324:	2000      	movs	r0, #0
   19326:	bd38      	pop	{r3, r4, r5, pc}
   19328:	7a21      	ldrb	r1, [r4, #8]
   1932a:	2903      	cmp	r1, #3
   1932c:	f47f af6e 	bne.w	1920c <rpc_message_free+0x2c>
   19330:	2101      	movs	r1, #1
   19332:	e7f1      	b.n	19318 <rpc_message_free+0x138>
   19334:	7c21      	ldrb	r1, [r4, #16]
   19336:	2903      	cmp	r1, #3
   19338:	f47f af6c 	bne.w	19214 <rpc_message_free+0x34>
   1933c:	2102      	movs	r1, #2
   1933e:	e7eb      	b.n	19318 <rpc_message_free+0x138>
   19340:	7e21      	ldrb	r1, [r4, #24]
   19342:	2903      	cmp	r1, #3
   19344:	d0e8      	beq.n	19318 <rpc_message_free+0x138>
   19346:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19348:	4298      	cmp	r0, r3
   1934a:	f47f af6b 	bne.w	19224 <rpc_message_free+0x44>
   1934e:	f894 1020 	ldrb.w	r1, [r4, #32]
   19352:	2903      	cmp	r1, #3
   19354:	f47f af66 	bne.w	19224 <rpc_message_free+0x44>
   19358:	2104      	movs	r1, #4
   1935a:	e7dd      	b.n	19318 <rpc_message_free+0x138>
   1935c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   19360:	2903      	cmp	r1, #3
   19362:	f47f af63 	bne.w	1922c <rpc_message_free+0x4c>
   19366:	2105      	movs	r1, #5
   19368:	e7d6      	b.n	19318 <rpc_message_free+0x138>
   1936a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   1936e:	2903      	cmp	r1, #3
   19370:	f47f af60 	bne.w	19234 <rpc_message_free+0x54>
   19374:	2106      	movs	r1, #6
   19376:	e7cf      	b.n	19318 <rpc_message_free+0x138>
   19378:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   1937c:	2903      	cmp	r1, #3
   1937e:	f47f af5d 	bne.w	1923c <rpc_message_free+0x5c>
   19382:	2107      	movs	r1, #7
   19384:	e7c8      	b.n	19318 <rpc_message_free+0x138>
   19386:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   1938a:	2903      	cmp	r1, #3
   1938c:	f47f af5a 	bne.w	19244 <rpc_message_free+0x64>
   19390:	2108      	movs	r1, #8
   19392:	e7c1      	b.n	19318 <rpc_message_free+0x138>
   19394:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   19398:	2903      	cmp	r1, #3
   1939a:	f47f af57 	bne.w	1924c <rpc_message_free+0x6c>
   1939e:	2109      	movs	r1, #9
   193a0:	e7ba      	b.n	19318 <rpc_message_free+0x138>
   193a2:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   193a6:	2903      	cmp	r1, #3
   193a8:	f47f af54 	bne.w	19254 <rpc_message_free+0x74>
   193ac:	210a      	movs	r1, #10
   193ae:	e7b3      	b.n	19318 <rpc_message_free+0x138>
   193b0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   193b4:	2903      	cmp	r1, #3
   193b6:	f47f af51 	bne.w	1925c <rpc_message_free+0x7c>
   193ba:	210b      	movs	r1, #11
   193bc:	e7ac      	b.n	19318 <rpc_message_free+0x138>
   193be:	200e      	movs	r0, #14
   193c0:	4770      	bx	lr
   193c2:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   193c6:	2903      	cmp	r1, #3
   193c8:	f47f af4c 	bne.w	19264 <rpc_message_free+0x84>
   193cc:	210c      	movs	r1, #12
   193ce:	e7a3      	b.n	19318 <rpc_message_free+0x138>
   193d0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   193d4:	2903      	cmp	r1, #3
   193d6:	f47f af49 	bne.w	1926c <rpc_message_free+0x8c>
   193da:	210d      	movs	r1, #13
   193dc:	e79c      	b.n	19318 <rpc_message_free+0x138>
   193de:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   193e2:	2903      	cmp	r1, #3
   193e4:	f47f af46 	bne.w	19274 <rpc_message_free+0x94>
   193e8:	210e      	movs	r1, #14
   193ea:	e795      	b.n	19318 <rpc_message_free+0x138>
   193ec:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   193f0:	2b03      	cmp	r3, #3
   193f2:	f47f af43 	bne.w	1927c <rpc_message_free+0x9c>
   193f6:	4603      	mov	r3, r0
   193f8:	210f      	movs	r1, #15
   193fa:	e78d      	b.n	19318 <rpc_message_free+0x138>
   193fc:	200209f4 	.word	0x200209f4
   19400:	20020a8c 	.word	0x20020a8c

00019404 <rpc_message_data_free>:
   19404:	2800      	cmp	r0, #0
   19406:	f000 8091 	beq.w	1952c <rpc_message_data_free+0x128>
   1940a:	2900      	cmp	r1, #0
   1940c:	f000 80e4 	beq.w	195d8 <rpc_message_data_free+0x1d4>
   19410:	b538      	push	{r3, r4, r5, lr}
   19412:	4a81      	ldr	r2, [pc, #516]	; (19618 <rpc_message_data_free+0x214>)
   19414:	6853      	ldr	r3, [r2, #4]
   19416:	2b00      	cmp	r3, #0
   19418:	f000 808a 	beq.w	19530 <rpc_message_data_free+0x12c>
   1941c:	4b7f      	ldr	r3, [pc, #508]	; (1961c <rpc_message_data_free+0x218>)
   1941e:	681c      	ldr	r4, [r3, #0]
   19420:	42a1      	cmp	r1, r4
   19422:	f000 8087 	beq.w	19534 <rpc_message_data_free+0x130>
   19426:	689c      	ldr	r4, [r3, #8]
   19428:	42a1      	cmp	r1, r4
   1942a:	f000 808f 	beq.w	1954c <rpc_message_data_free+0x148>
   1942e:	691c      	ldr	r4, [r3, #16]
   19430:	42a1      	cmp	r1, r4
   19432:	f000 8091 	beq.w	19558 <rpc_message_data_free+0x154>
   19436:	699c      	ldr	r4, [r3, #24]
   19438:	42a1      	cmp	r1, r4
   1943a:	f000 8093 	beq.w	19564 <rpc_message_data_free+0x160>
   1943e:	6a1c      	ldr	r4, [r3, #32]
   19440:	42a1      	cmp	r1, r4
   19442:	f000 8095 	beq.w	19570 <rpc_message_data_free+0x16c>
   19446:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   19448:	42a1      	cmp	r1, r4
   1944a:	f000 8097 	beq.w	1957c <rpc_message_data_free+0x178>
   1944e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   19450:	42a1      	cmp	r1, r4
   19452:	f000 8099 	beq.w	19588 <rpc_message_data_free+0x184>
   19456:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   19458:	42a1      	cmp	r1, r4
   1945a:	f000 809b 	beq.w	19594 <rpc_message_data_free+0x190>
   1945e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   19460:	42a1      	cmp	r1, r4
   19462:	f000 809d 	beq.w	195a0 <rpc_message_data_free+0x19c>
   19466:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   19468:	42a1      	cmp	r1, r4
   1946a:	f000 80a0 	beq.w	195ae <rpc_message_data_free+0x1aa>
   1946e:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   19470:	42a1      	cmp	r1, r4
   19472:	f000 80a3 	beq.w	195bc <rpc_message_data_free+0x1b8>
   19476:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   19478:	42a1      	cmp	r1, r4
   1947a:	f000 80a6 	beq.w	195ca <rpc_message_data_free+0x1c6>
   1947e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   19480:	42a1      	cmp	r1, r4
   19482:	f000 80ab 	beq.w	195dc <rpc_message_data_free+0x1d8>
   19486:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   19488:	42a1      	cmp	r1, r4
   1948a:	f000 80ae 	beq.w	195ea <rpc_message_data_free+0x1e6>
   1948e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   19490:	42a1      	cmp	r1, r4
   19492:	f000 80b1 	beq.w	195f8 <rpc_message_data_free+0x1f4>
   19496:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   19498:	428c      	cmp	r4, r1
   1949a:	f000 80b4 	beq.w	19606 <rpc_message_data_free+0x202>
   1949e:	6913      	ldr	r3, [r2, #16]
   194a0:	4608      	mov	r0, r1
   194a2:	4798      	blx	r3
   194a4:	4b5e      	ldr	r3, [pc, #376]	; (19620 <rpc_message_data_free+0x21c>)
   194a6:	781a      	ldrb	r2, [r3, #0]
   194a8:	2a04      	cmp	r2, #4
   194aa:	d03b      	beq.n	19524 <rpc_message_data_free+0x120>
   194ac:	7a1a      	ldrb	r2, [r3, #8]
   194ae:	2a04      	cmp	r2, #4
   194b0:	d038      	beq.n	19524 <rpc_message_data_free+0x120>
   194b2:	7c1a      	ldrb	r2, [r3, #16]
   194b4:	2a04      	cmp	r2, #4
   194b6:	d035      	beq.n	19524 <rpc_message_data_free+0x120>
   194b8:	7e1a      	ldrb	r2, [r3, #24]
   194ba:	2a04      	cmp	r2, #4
   194bc:	d032      	beq.n	19524 <rpc_message_data_free+0x120>
   194be:	f893 2020 	ldrb.w	r2, [r3, #32]
   194c2:	2a04      	cmp	r2, #4
   194c4:	d02e      	beq.n	19524 <rpc_message_data_free+0x120>
   194c6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   194ca:	2a04      	cmp	r2, #4
   194cc:	d02a      	beq.n	19524 <rpc_message_data_free+0x120>
   194ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   194d2:	2a04      	cmp	r2, #4
   194d4:	d026      	beq.n	19524 <rpc_message_data_free+0x120>
   194d6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   194da:	2a04      	cmp	r2, #4
   194dc:	d022      	beq.n	19524 <rpc_message_data_free+0x120>
   194de:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   194e2:	2a04      	cmp	r2, #4
   194e4:	d01e      	beq.n	19524 <rpc_message_data_free+0x120>
   194e6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   194ea:	2a04      	cmp	r2, #4
   194ec:	d01a      	beq.n	19524 <rpc_message_data_free+0x120>
   194ee:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   194f2:	2a04      	cmp	r2, #4
   194f4:	d016      	beq.n	19524 <rpc_message_data_free+0x120>
   194f6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   194fa:	2a04      	cmp	r2, #4
   194fc:	d012      	beq.n	19524 <rpc_message_data_free+0x120>
   194fe:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   19502:	2a04      	cmp	r2, #4
   19504:	d00e      	beq.n	19524 <rpc_message_data_free+0x120>
   19506:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   1950a:	2a04      	cmp	r2, #4
   1950c:	d00a      	beq.n	19524 <rpc_message_data_free+0x120>
   1950e:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   19512:	2a04      	cmp	r2, #4
   19514:	d006      	beq.n	19524 <rpc_message_data_free+0x120>
   19516:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1951a:	2b04      	cmp	r3, #4
   1951c:	bf18      	it	ne
   1951e:	2000      	movne	r0, #0
   19520:	d000      	beq.n	19524 <rpc_message_data_free+0x120>
   19522:	bd38      	pop	{r3, r4, r5, pc}
   19524:	f7f8 f9c2 	bl	118ac <bsd_os_application_irq_set>
   19528:	2000      	movs	r0, #0
   1952a:	bd38      	pop	{r3, r4, r5, pc}
   1952c:	2007      	movs	r0, #7
   1952e:	4770      	bx	lr
   19530:	2008      	movs	r0, #8
   19532:	bd38      	pop	{r3, r4, r5, pc}
   19534:	889c      	ldrh	r4, [r3, #4]
   19536:	4284      	cmp	r4, r0
   19538:	f47f af75 	bne.w	19426 <rpc_message_data_free+0x22>
   1953c:	2400      	movs	r4, #0
   1953e:	2000      	movs	r0, #0
   19540:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   19544:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   19548:	80a8      	strh	r0, [r5, #4]
   1954a:	e7a8      	b.n	1949e <rpc_message_data_free+0x9a>
   1954c:	899c      	ldrh	r4, [r3, #12]
   1954e:	4284      	cmp	r4, r0
   19550:	f47f af6d 	bne.w	1942e <rpc_message_data_free+0x2a>
   19554:	2401      	movs	r4, #1
   19556:	e7f2      	b.n	1953e <rpc_message_data_free+0x13a>
   19558:	8a9c      	ldrh	r4, [r3, #20]
   1955a:	4284      	cmp	r4, r0
   1955c:	f47f af6b 	bne.w	19436 <rpc_message_data_free+0x32>
   19560:	2402      	movs	r4, #2
   19562:	e7ec      	b.n	1953e <rpc_message_data_free+0x13a>
   19564:	8b9c      	ldrh	r4, [r3, #28]
   19566:	4284      	cmp	r4, r0
   19568:	f47f af69 	bne.w	1943e <rpc_message_data_free+0x3a>
   1956c:	2403      	movs	r4, #3
   1956e:	e7e6      	b.n	1953e <rpc_message_data_free+0x13a>
   19570:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   19572:	4284      	cmp	r4, r0
   19574:	f47f af67 	bne.w	19446 <rpc_message_data_free+0x42>
   19578:	2404      	movs	r4, #4
   1957a:	e7e0      	b.n	1953e <rpc_message_data_free+0x13a>
   1957c:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   1957e:	4284      	cmp	r4, r0
   19580:	f47f af65 	bne.w	1944e <rpc_message_data_free+0x4a>
   19584:	2405      	movs	r4, #5
   19586:	e7da      	b.n	1953e <rpc_message_data_free+0x13a>
   19588:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   1958a:	4284      	cmp	r4, r0
   1958c:	f47f af63 	bne.w	19456 <rpc_message_data_free+0x52>
   19590:	2406      	movs	r4, #6
   19592:	e7d4      	b.n	1953e <rpc_message_data_free+0x13a>
   19594:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   19596:	4284      	cmp	r4, r0
   19598:	f47f af61 	bne.w	1945e <rpc_message_data_free+0x5a>
   1959c:	2407      	movs	r4, #7
   1959e:	e7ce      	b.n	1953e <rpc_message_data_free+0x13a>
   195a0:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   195a4:	4284      	cmp	r4, r0
   195a6:	f47f af5e 	bne.w	19466 <rpc_message_data_free+0x62>
   195aa:	2408      	movs	r4, #8
   195ac:	e7c7      	b.n	1953e <rpc_message_data_free+0x13a>
   195ae:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   195b2:	4284      	cmp	r4, r0
   195b4:	f47f af5b 	bne.w	1946e <rpc_message_data_free+0x6a>
   195b8:	2409      	movs	r4, #9
   195ba:	e7c0      	b.n	1953e <rpc_message_data_free+0x13a>
   195bc:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   195c0:	4284      	cmp	r4, r0
   195c2:	f47f af58 	bne.w	19476 <rpc_message_data_free+0x72>
   195c6:	240a      	movs	r4, #10
   195c8:	e7b9      	b.n	1953e <rpc_message_data_free+0x13a>
   195ca:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   195ce:	4284      	cmp	r4, r0
   195d0:	f47f af55 	bne.w	1947e <rpc_message_data_free+0x7a>
   195d4:	240b      	movs	r4, #11
   195d6:	e7b2      	b.n	1953e <rpc_message_data_free+0x13a>
   195d8:	200e      	movs	r0, #14
   195da:	4770      	bx	lr
   195dc:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   195e0:	4284      	cmp	r4, r0
   195e2:	f47f af50 	bne.w	19486 <rpc_message_data_free+0x82>
   195e6:	240c      	movs	r4, #12
   195e8:	e7a9      	b.n	1953e <rpc_message_data_free+0x13a>
   195ea:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   195ee:	4284      	cmp	r4, r0
   195f0:	f47f af4d 	bne.w	1948e <rpc_message_data_free+0x8a>
   195f4:	240d      	movs	r4, #13
   195f6:	e7a2      	b.n	1953e <rpc_message_data_free+0x13a>
   195f8:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   195fc:	4284      	cmp	r4, r0
   195fe:	f47f af4a 	bne.w	19496 <rpc_message_data_free+0x92>
   19602:	240e      	movs	r4, #14
   19604:	e79b      	b.n	1953e <rpc_message_data_free+0x13a>
   19606:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   1960a:	4284      	cmp	r4, r0
   1960c:	bf08      	it	eq
   1960e:	240f      	moveq	r4, #15
   19610:	f47f af45 	bne.w	1949e <rpc_message_data_free+0x9a>
   19614:	e793      	b.n	1953e <rpc_message_data_free+0x13a>
   19616:	bf00      	nop
   19618:	200209f4 	.word	0x200209f4
   1961c:	20020a0c 	.word	0x20020a0c
   19620:	20020a8c 	.word	0x20020a8c

00019624 <packet_free_cb>:
   19624:	b510      	push	{r4, lr}
   19626:	4604      	mov	r4, r0
   19628:	b118      	cbz	r0, 19632 <packet_free_cb+0xe>
   1962a:	6800      	ldr	r0, [r0, #0]
   1962c:	b108      	cbz	r0, 19632 <packet_free_cb+0xe>
   1962e:	f001 f829 	bl	1a684 <rpc_gnss_client_data_free>
   19632:	68a0      	ldr	r0, [r4, #8]
   19634:	b118      	cbz	r0, 1963e <packet_free_cb+0x1a>
   19636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1963a:	f7fa b93b 	b.w	138b4 <nrf_free>
   1963e:	bd10      	pop	{r4, pc}

00019640 <rpc_gnss_event_handler>:
   19640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19644:	4b64      	ldr	r3, [pc, #400]	; (197d8 <rpc_gnss_event_handler+0x198>)
   19646:	4606      	mov	r6, r0
   19648:	6800      	ldr	r0, [r0, #0]
   1964a:	881b      	ldrh	r3, [r3, #0]
   1964c:	6802      	ldr	r2, [r0, #0]
   1964e:	4f63      	ldr	r7, [pc, #396]	; (197dc <rpc_gnss_event_handler+0x19c>)
   19650:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   19654:	b084      	sub	sp, #16
   19656:	460d      	mov	r5, r1
   19658:	6038      	str	r0, [r7, #0]
   1965a:	d038      	beq.n	196ce <rpc_gnss_event_handler+0x8e>
   1965c:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   19660:	33ff      	adds	r3, #255	; 0xff
   19662:	b29b      	uxth	r3, r3
   19664:	2b02      	cmp	r3, #2
   19666:	d810      	bhi.n	1968a <rpc_gnss_event_handler+0x4a>
   19668:	4c5d      	ldr	r4, [pc, #372]	; (197e0 <rpc_gnss_event_handler+0x1a0>)
   1966a:	6823      	ldr	r3, [r4, #0]
   1966c:	075a      	lsls	r2, r3, #29
   1966e:	d410      	bmi.n	19692 <rpc_gnss_event_handler+0x52>
   19670:	6823      	ldr	r3, [r4, #0]
   19672:	079b      	lsls	r3, r3, #30
   19674:	d503      	bpl.n	1967e <rpc_gnss_event_handler+0x3e>
   19676:	f244 0303 	movw	r3, #16387	; 0x4003
   1967a:	429d      	cmp	r5, r3
   1967c:	d009      	beq.n	19692 <rpc_gnss_event_handler+0x52>
   1967e:	6830      	ldr	r0, [r6, #0]
   19680:	b118      	cbz	r0, 1968a <rpc_gnss_event_handler+0x4a>
   19682:	f000 ffff 	bl	1a684 <rpc_gnss_client_data_free>
   19686:	2300      	movs	r3, #0
   19688:	603b      	str	r3, [r7, #0]
   1968a:	2000      	movs	r0, #0
   1968c:	b004      	add	sp, #16
   1968e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19692:	2002      	movs	r0, #2
   19694:	f7fa f904 	bl	138a0 <nrf_malloc>
   19698:	4680      	mov	r8, r0
   1969a:	2800      	cmp	r0, #0
   1969c:	f000 8093 	beq.w	197c6 <rpc_gnss_event_handler+0x186>
   196a0:	2302      	movs	r3, #2
   196a2:	8005      	strh	r5, [r0, #0]
   196a4:	6831      	ldr	r1, [r6, #0]
   196a6:	6872      	ldr	r2, [r6, #4]
   196a8:	484e      	ldr	r0, [pc, #312]	; (197e4 <rpc_gnss_event_handler+0x1a4>)
   196aa:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   196ae:	6800      	ldr	r0, [r0, #0]
   196b0:	9303      	str	r3, [sp, #12]
   196b2:	6803      	ldr	r3, [r0, #0]
   196b4:	4669      	mov	r1, sp
   196b6:	685b      	ldr	r3, [r3, #4]
   196b8:	4798      	blx	r3
   196ba:	3001      	adds	r0, #1
   196bc:	d070      	beq.n	197a0 <rpc_gnss_event_handler+0x160>
   196be:	2000      	movs	r0, #0
   196c0:	6823      	ldr	r3, [r4, #0]
   196c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   196c6:	6023      	str	r3, [r4, #0]
   196c8:	b004      	add	sp, #16
   196ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   196ce:	4c44      	ldr	r4, [pc, #272]	; (197e0 <rpc_gnss_event_handler+0x1a0>)
   196d0:	6823      	ldr	r3, [r4, #0]
   196d2:	01d9      	lsls	r1, r3, #7
   196d4:	d523      	bpl.n	1971e <rpc_gnss_event_handler+0xde>
   196d6:	f242 1302 	movw	r3, #8450	; 0x2102
   196da:	429d      	cmp	r5, r3
   196dc:	d11f      	bne.n	1971e <rpc_gnss_event_handler+0xde>
   196de:	6843      	ldr	r3, [r0, #4]
   196e0:	b91b      	cbnz	r3, 196ea <rpc_gnss_event_handler+0xaa>
   196e2:	6823      	ldr	r3, [r4, #0]
   196e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   196e8:	6023      	str	r3, [r4, #0]
   196ea:	6823      	ldr	r3, [r4, #0]
   196ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   196f0:	6023      	str	r3, [r4, #0]
   196f2:	6823      	ldr	r3, [r4, #0]
   196f4:	025a      	lsls	r2, r3, #9
   196f6:	d430      	bmi.n	1975a <rpc_gnss_event_handler+0x11a>
   196f8:	f242 0305 	movw	r3, #8197	; 0x2005
   196fc:	429d      	cmp	r5, r3
   196fe:	d12c      	bne.n	1975a <rpc_gnss_event_handler+0x11a>
   19700:	6823      	ldr	r3, [r4, #0]
   19702:	0299      	lsls	r1, r3, #10
   19704:	d529      	bpl.n	1975a <rpc_gnss_event_handler+0x11a>
   19706:	6843      	ldr	r3, [r0, #4]
   19708:	2b00      	cmp	r3, #0
   1970a:	d157      	bne.n	197bc <rpc_gnss_event_handler+0x17c>
   1970c:	6823      	ldr	r3, [r4, #0]
   1970e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19712:	6023      	str	r3, [r4, #0]
   19714:	6823      	ldr	r3, [r4, #0]
   19716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1971a:	6023      	str	r3, [r4, #0]
   1971c:	e01d      	b.n	1975a <rpc_gnss_event_handler+0x11a>
   1971e:	6823      	ldr	r3, [r4, #0]
   19720:	025b      	lsls	r3, r3, #9
   19722:	d50e      	bpl.n	19742 <rpc_gnss_event_handler+0x102>
   19724:	f242 1303 	movw	r3, #8451	; 0x2103
   19728:	429d      	cmp	r5, r3
   1972a:	d10a      	bne.n	19742 <rpc_gnss_event_handler+0x102>
   1972c:	6843      	ldr	r3, [r0, #4]
   1972e:	b91b      	cbnz	r3, 19738 <rpc_gnss_event_handler+0xf8>
   19730:	6823      	ldr	r3, [r4, #0]
   19732:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19736:	6023      	str	r3, [r4, #0]
   19738:	6823      	ldr	r3, [r4, #0]
   1973a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1973e:	6023      	str	r3, [r4, #0]
   19740:	e00b      	b.n	1975a <rpc_gnss_event_handler+0x11a>
   19742:	f242 0301 	movw	r3, #8193	; 0x2001
   19746:	429d      	cmp	r5, r3
   19748:	d10c      	bne.n	19764 <rpc_gnss_event_handler+0x124>
   1974a:	6843      	ldr	r3, [r0, #4]
   1974c:	b92b      	cbnz	r3, 1975a <rpc_gnss_event_handler+0x11a>
   1974e:	6823      	ldr	r3, [r4, #0]
   19750:	0c1b      	lsrs	r3, r3, #16
   19752:	041b      	lsls	r3, r3, #16
   19754:	f043 0302 	orr.w	r3, r3, #2
   19758:	6023      	str	r3, [r4, #0]
   1975a:	f000 ff93 	bl	1a684 <rpc_gnss_client_data_free>
   1975e:	2300      	movs	r3, #0
   19760:	603b      	str	r3, [r7, #0]
   19762:	e77b      	b.n	1965c <rpc_gnss_event_handler+0x1c>
   19764:	f242 0304 	movw	r3, #8196	; 0x2004
   19768:	429d      	cmp	r5, r3
   1976a:	d1c5      	bne.n	196f8 <rpc_gnss_event_handler+0xb8>
   1976c:	6843      	ldr	r3, [r0, #4]
   1976e:	b993      	cbnz	r3, 19796 <rpc_gnss_event_handler+0x156>
   19770:	6823      	ldr	r3, [r4, #0]
   19772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19776:	6023      	str	r3, [r4, #0]
   19778:	6823      	ldr	r3, [r4, #0]
   1977a:	b29b      	uxth	r3, r3
   1977c:	2b03      	cmp	r3, #3
   1977e:	6823      	ldr	r3, [r4, #0]
   19780:	d016      	beq.n	197b0 <rpc_gnss_event_handler+0x170>
   19782:	b29b      	uxth	r3, r3
   19784:	2b04      	cmp	r3, #4
   19786:	d1d7      	bne.n	19738 <rpc_gnss_event_handler+0xf8>
   19788:	6823      	ldr	r3, [r4, #0]
   1978a:	0c1b      	lsrs	r3, r3, #16
   1978c:	041b      	lsls	r3, r3, #16
   1978e:	f043 0302 	orr.w	r3, r3, #2
   19792:	6023      	str	r3, [r4, #0]
   19794:	e7d0      	b.n	19738 <rpc_gnss_event_handler+0xf8>
   19796:	6823      	ldr	r3, [r4, #0]
   19798:	b29b      	uxth	r3, r3
   1979a:	2b03      	cmp	r3, #3
   1979c:	d1cc      	bne.n	19738 <rpc_gnss_event_handler+0xf8>
   1979e:	e7f3      	b.n	19788 <rpc_gnss_event_handler+0x148>
   197a0:	4640      	mov	r0, r8
   197a2:	f7fa f887 	bl	138b4 <nrf_free>
   197a6:	6830      	ldr	r0, [r6, #0]
   197a8:	2800      	cmp	r0, #0
   197aa:	f47f af6a 	bne.w	19682 <rpc_gnss_event_handler+0x42>
   197ae:	e76c      	b.n	1968a <rpc_gnss_event_handler+0x4a>
   197b0:	0c1b      	lsrs	r3, r3, #16
   197b2:	041b      	lsls	r3, r3, #16
   197b4:	f043 0304 	orr.w	r3, r3, #4
   197b8:	6023      	str	r3, [r4, #0]
   197ba:	e7bd      	b.n	19738 <rpc_gnss_event_handler+0xf8>
   197bc:	6823      	ldr	r3, [r4, #0]
   197be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   197c2:	6023      	str	r3, [r4, #0]
   197c4:	e7c9      	b.n	1975a <rpc_gnss_event_handler+0x11a>
   197c6:	6830      	ldr	r0, [r6, #0]
   197c8:	2800      	cmp	r0, #0
   197ca:	f43f af5e 	beq.w	1968a <rpc_gnss_event_handler+0x4a>
   197ce:	f000 ff59 	bl	1a684 <rpc_gnss_client_data_free>
   197d2:	f8c7 8000 	str.w	r8, [r7]
   197d6:	e758      	b.n	1968a <rpc_gnss_event_handler+0x4a>
   197d8:	20024e24 	.word	0x20024e24
   197dc:	20020b10 	.word	0x20020b10
   197e0:	20020b0c 	.word	0x20020b0c
   197e4:	20020b14 	.word	0x20020b14

000197e8 <gnss_interface_write>:
   197e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   197ec:	4a75      	ldr	r2, [pc, #468]	; (199c4 <gnss_interface_write+0x1dc>)
   197ee:	b09f      	sub	sp, #124	; 0x7c
   197f0:	4290      	cmp	r0, r2
   197f2:	9d26      	ldr	r5, [sp, #152]	; 0x98
   197f4:	f040 80d4 	bne.w	199a0 <gnss_interface_write+0x1b8>
   197f8:	2900      	cmp	r1, #0
   197fa:	f000 80c9 	beq.w	19990 <gnss_interface_write+0x1a8>
   197fe:	2d00      	cmp	r5, #0
   19800:	f000 80c6 	beq.w	19990 <gnss_interface_write+0x1a8>
   19804:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   19806:	2a02      	cmp	r2, #2
   19808:	f040 80c2 	bne.w	19990 <gnss_interface_write+0x1a8>
   1980c:	4c6e      	ldr	r4, [pc, #440]	; (199c8 <gnss_interface_write+0x1e0>)
   1980e:	6822      	ldr	r2, [r4, #0]
   19810:	b292      	uxth	r2, r2
   19812:	2a02      	cmp	r2, #2
   19814:	d004      	beq.n	19820 <gnss_interface_write+0x38>
   19816:	6822      	ldr	r2, [r4, #0]
   19818:	b292      	uxth	r2, r2
   1981a:	2a04      	cmp	r2, #4
   1981c:	f040 80c6 	bne.w	199ac <gnss_interface_write+0x1c4>
   19820:	0798      	lsls	r0, r3, #30
   19822:	f100 80c9 	bmi.w	199b8 <gnss_interface_write+0x1d0>
   19826:	6820      	ldr	r0, [r4, #0]
   19828:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   1982c:	d065      	beq.n	198fa <gnss_interface_write+0x112>
   1982e:	6822      	ldr	r2, [r4, #0]
   19830:	882b      	ldrh	r3, [r5, #0]
   19832:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   19836:	6022      	str	r2, [r4, #0]
   19838:	6822      	ldr	r2, [r4, #0]
   1983a:	3b01      	subs	r3, #1
   1983c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   19840:	6022      	str	r2, [r4, #0]
   19842:	2b07      	cmp	r3, #7
   19844:	f200 80a4 	bhi.w	19990 <gnss_interface_write+0x1a8>
   19848:	e8df f003 	tbb	[pc, r3]
   1984c:	696e7378 	.word	0x696e7378
   19850:	045f5a64 	.word	0x045f5a64
   19854:	4608      	mov	r0, r1
   19856:	a902      	add	r1, sp, #8
   19858:	f000 fec8 	bl	1a5ec <rpc_gnss_serialize_integrity>
   1985c:	2172      	movs	r1, #114	; 0x72
   1985e:	4668      	mov	r0, sp
   19860:	f000 fede 	bl	1a620 <rpc_gnss_client_request_alloc>
   19864:	4605      	mov	r5, r0
   19866:	9800      	ldr	r0, [sp, #0]
   19868:	2d00      	cmp	r5, #0
   1986a:	d16c      	bne.n	19946 <gnss_interface_write+0x15e>
   1986c:	2800      	cmp	r0, #0
   1986e:	d071      	beq.n	19954 <gnss_interface_write+0x16c>
   19870:	f241 0605 	movw	r6, #4101	; 0x1005
   19874:	f04f 0c49 	mov.w	ip, #73	; 0x49
   19878:	2272      	movs	r2, #114	; 0x72
   1987a:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1987e:	f04f 0943 	mov.w	r9, #67	; 0x43
   19882:	f04f 0854 	mov.w	r8, #84	; 0x54
   19886:	4f51      	ldr	r7, [pc, #324]	; (199cc <gnss_interface_write+0x1e4>)
   19888:	a91e      	add	r1, sp, #120	; 0x78
   1988a:	883b      	ldrh	r3, [r7, #0]
   1988c:	f880 c00f 	strb.w	ip, [r0, #15]
   19890:	3301      	adds	r3, #1
   19892:	b29b      	uxth	r3, r3
   19894:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   19898:	f841 cd74 	str.w	ip, [r1, #-116]!
   1989c:	7145      	strb	r5, [r0, #5]
   1989e:	7185      	strb	r5, [r0, #6]
   198a0:	71c5      	strb	r5, [r0, #7]
   198a2:	7205      	strb	r5, [r0, #8]
   198a4:	7245      	strb	r5, [r0, #9]
   198a6:	7285      	strb	r5, [r0, #10]
   198a8:	72c5      	strb	r5, [r0, #11]
   198aa:	7102      	strb	r2, [r0, #4]
   198ac:	f880 900c 	strb.w	r9, [r0, #12]
   198b0:	f880 800d 	strb.w	r8, [r0, #13]
   198b4:	f880 e00e 	strb.w	lr, [r0, #14]
   198b8:	6800      	ldr	r0, [r0, #0]
   198ba:	803b      	strh	r3, [r7, #0]
   198bc:	f003 fd99 	bl	1d3f2 <memcpy>
   198c0:	4b43      	ldr	r3, [pc, #268]	; (199d0 <gnss_interface_write+0x1e8>)
   198c2:	4631      	mov	r1, r6
   198c4:	9800      	ldr	r0, [sp, #0]
   198c6:	601d      	str	r5, [r3, #0]
   198c8:	f000 febe 	bl	1a648 <rpc_gnss_client_request_send>
   198cc:	2800      	cmp	r0, #0
   198ce:	d148      	bne.n	19962 <gnss_interface_write+0x17a>
   198d0:	6823      	ldr	r3, [r4, #0]
   198d2:	0299      	lsls	r1, r3, #10
   198d4:	d50d      	bpl.n	198f2 <gnss_interface_write+0x10a>
   198d6:	4e3f      	ldr	r6, [pc, #252]	; (199d4 <gnss_interface_write+0x1ec>)
   198d8:	4d3a      	ldr	r5, [pc, #232]	; (199c4 <gnss_interface_write+0x1dc>)
   198da:	e001      	b.n	198e0 <gnss_interface_write+0xf8>
   198dc:	2800      	cmp	r0, #0
   198de:	d150      	bne.n	19982 <gnss_interface_write+0x19a>
   198e0:	4631      	mov	r1, r6
   198e2:	4628      	mov	r0, r5
   198e4:	f7f7 fea2 	bl	1162c <bsd_os_timedwait>
   198e8:	6823      	ldr	r3, [r4, #0]
   198ea:	029a      	lsls	r2, r3, #10
   198ec:	d4f6      	bmi.n	198dc <gnss_interface_write+0xf4>
   198ee:	2800      	cmp	r0, #0
   198f0:	d147      	bne.n	19982 <gnss_interface_write+0x19a>
   198f2:	6823      	ldr	r3, [r4, #0]
   198f4:	039b      	lsls	r3, r3, #14
   198f6:	d53f      	bpl.n	19978 <gnss_interface_write+0x190>
   198f8:	2000      	movs	r0, #0
   198fa:	b01f      	add	sp, #124	; 0x7c
   198fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19900:	4608      	mov	r0, r1
   19902:	a902      	add	r1, sp, #8
   19904:	f000 fe2a 	bl	1a55c <rpc_gnss_serialize_time_and_sv_tow>
   19908:	e7a8      	b.n	1985c <gnss_interface_write+0x74>
   1990a:	4608      	mov	r0, r1
   1990c:	a902      	add	r1, sp, #8
   1990e:	f000 fe4d 	bl	1a5ac <rpc_gnss_serialize_location>
   19912:	e7a3      	b.n	1985c <gnss_interface_write+0x74>
   19914:	4608      	mov	r0, r1
   19916:	a902      	add	r1, sp, #8
   19918:	f000 fe06 	bl	1a528 <rpc_gnss_serialize_nequick>
   1991c:	e79e      	b.n	1985c <gnss_interface_write+0x74>
   1991e:	4608      	mov	r0, r1
   19920:	a902      	add	r1, sp, #8
   19922:	f000 fddd 	bl	1a4e0 <rpc_gnss_serialize_klob>
   19926:	e799      	b.n	1985c <gnss_interface_write+0x74>
   19928:	4608      	mov	r0, r1
   1992a:	a902      	add	r1, sp, #8
   1992c:	f000 fda6 	bl	1a47c <rpc_gnss_serialize_alm>
   19930:	e794      	b.n	1985c <gnss_interface_write+0x74>
   19932:	4608      	mov	r0, r1
   19934:	a902      	add	r1, sp, #8
   19936:	f000 fd4f 	bl	1a3d8 <rpc_gnss_serialize_ephe>
   1993a:	e78f      	b.n	1985c <gnss_interface_write+0x74>
   1993c:	4608      	mov	r0, r1
   1993e:	a902      	add	r1, sp, #8
   19940:	f000 fd28 	bl	1a394 <rpc_gnss_serialize_utc>
   19944:	e78a      	b.n	1985c <gnss_interface_write+0x74>
   19946:	b128      	cbz	r0, 19954 <gnss_interface_write+0x16c>
   19948:	6803      	ldr	r3, [r0, #0]
   1994a:	b11b      	cbz	r3, 19954 <gnss_interface_write+0x16c>
   1994c:	4618      	mov	r0, r3
   1994e:	f000 fe99 	bl	1a684 <rpc_gnss_client_data_free>
   19952:	9800      	ldr	r0, [sp, #0]
   19954:	f000 fe8e 	bl	1a674 <rpc_gnss_client_message_free>
   19958:	2023      	movs	r0, #35	; 0x23
   1995a:	f7f7 fefb 	bl	11754 <bsd_os_errno_set>
   1995e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19962:	6823      	ldr	r3, [r4, #0]
   19964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   19968:	6023      	str	r3, [r4, #0]
   1996a:	6823      	ldr	r3, [r4, #0]
   1996c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19970:	6023      	str	r3, [r4, #0]
   19972:	b01f      	add	sp, #124	; 0x7c
   19974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19978:	2005      	movs	r0, #5
   1997a:	6823      	ldr	r3, [r4, #0]
   1997c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19980:	6023      	str	r3, [r4, #0]
   19982:	f7f7 fee7 	bl	11754 <bsd_os_errno_set>
   19986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1998a:	b01f      	add	sp, #124	; 0x7c
   1998c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19990:	2016      	movs	r0, #22
   19992:	f7f7 fedf 	bl	11754 <bsd_os_errno_set>
   19996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1999a:	b01f      	add	sp, #124	; 0x7c
   1999c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   199a0:	2009      	movs	r0, #9
   199a2:	f7f7 fed7 	bl	11754 <bsd_os_errno_set>
   199a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199aa:	e7a6      	b.n	198fa <gnss_interface_write+0x112>
   199ac:	2039      	movs	r0, #57	; 0x39
   199ae:	f7f7 fed1 	bl	11754 <bsd_os_errno_set>
   199b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199b6:	e7a0      	b.n	198fa <gnss_interface_write+0x112>
   199b8:	202d      	movs	r0, #45	; 0x2d
   199ba:	f7f7 fecb 	bl	11754 <bsd_os_errno_set>
   199be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199c2:	e79a      	b.n	198fa <gnss_interface_write+0x112>
   199c4:	49765443 	.word	0x49765443
   199c8:	20020b0c 	.word	0x20020b0c
   199cc:	20024e24 	.word	0x20024e24
   199d0:	20020b10 	.word	0x20020b10
   199d4:	2002c52c 	.word	0x2002c52c

000199d8 <gnss_interface_read>:
   199d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199dc:	4c4a      	ldr	r4, [pc, #296]	; (19b08 <gnss_interface_read+0x130>)
   199de:	b0b7      	sub	sp, #220	; 0xdc
   199e0:	42a0      	cmp	r0, r4
   199e2:	f040 81ec 	bne.w	19dbe <gnss_interface_read+0x3e6>
   199e6:	4688      	mov	r8, r1
   199e8:	2900      	cmp	r1, #0
   199ea:	f000 81e2 	beq.w	19db2 <gnss_interface_read+0x3da>
   199ee:	2ad7      	cmp	r2, #215	; 0xd7
   199f0:	f240 81df 	bls.w	19db2 <gnss_interface_read+0x3da>
   199f4:	4d45      	ldr	r5, [pc, #276]	; (19b0c <gnss_interface_read+0x134>)
   199f6:	4699      	mov	r9, r3
   199f8:	682b      	ldr	r3, [r5, #0]
   199fa:	b29b      	uxth	r3, r3
   199fc:	2b04      	cmp	r3, #4
   199fe:	d004      	beq.n	19a0a <gnss_interface_read+0x32>
   19a00:	682b      	ldr	r3, [r5, #0]
   19a02:	b29b      	uxth	r3, r3
   19a04:	2b02      	cmp	r3, #2
   19a06:	f040 81e0 	bne.w	19dca <gnss_interface_read+0x3f2>
   19a0a:	2102      	movs	r1, #2
   19a0c:	20b6      	movs	r0, #182	; 0xb6
   19a0e:	2400      	movs	r4, #0
   19a10:	682b      	ldr	r3, [r5, #0]
   19a12:	f10d 020e 	add.w	r2, sp, #14
   19a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19a1a:	602b      	str	r3, [r5, #0]
   19a1c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 19b14 <gnss_interface_read+0x13c>
   19a20:	ab08      	add	r3, sp, #32
   19a22:	4f3b      	ldr	r7, [pc, #236]	; (19b10 <gnss_interface_read+0x138>)
   19a24:	4e38      	ldr	r6, [pc, #224]	; (19b08 <gnss_interface_read+0x130>)
   19a26:	9005      	str	r0, [sp, #20]
   19a28:	9107      	str	r1, [sp, #28]
   19a2a:	9304      	str	r3, [sp, #16]
   19a2c:	9206      	str	r2, [sp, #24]
   19a2e:	ea09 0b01 	and.w	fp, r9, r1
   19a32:	f8da 0000 	ldr.w	r0, [sl]
   19a36:	464a      	mov	r2, r9
   19a38:	6803      	ldr	r3, [r0, #0]
   19a3a:	a904      	add	r1, sp, #16
   19a3c:	689b      	ldr	r3, [r3, #8]
   19a3e:	4798      	blx	r3
   19a40:	2800      	cmp	r0, #0
   19a42:	da11      	bge.n	19a68 <gnss_interface_read+0x90>
   19a44:	f1bb 0f00 	cmp.w	fp, #0
   19a48:	d138      	bne.n	19abc <gnss_interface_read+0xe4>
   19a4a:	682b      	ldr	r3, [r5, #0]
   19a4c:	03d8      	lsls	r0, r3, #15
   19a4e:	d4f0      	bmi.n	19a32 <gnss_interface_read+0x5a>
   19a50:	b10c      	cbz	r4, 19a56 <gnss_interface_read+0x7e>
   19a52:	e7ee      	b.n	19a32 <gnss_interface_read+0x5a>
   19a54:	b930      	cbnz	r0, 19a64 <gnss_interface_read+0x8c>
   19a56:	4639      	mov	r1, r7
   19a58:	4630      	mov	r0, r6
   19a5a:	f7f7 fde7 	bl	1162c <bsd_os_timedwait>
   19a5e:	682b      	ldr	r3, [r5, #0]
   19a60:	03d9      	lsls	r1, r3, #15
   19a62:	d5f7      	bpl.n	19a54 <gnss_interface_read+0x7c>
   19a64:	4604      	mov	r4, r0
   19a66:	e7e4      	b.n	19a32 <gnss_interface_read+0x5a>
   19a68:	f244 0202 	movw	r2, #16386	; 0x4002
   19a6c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19a70:	4293      	cmp	r3, r2
   19a72:	d039      	beq.n	19ae8 <gnss_interface_read+0x110>
   19a74:	f244 0201 	movw	r2, #16385	; 0x4001
   19a78:	4293      	cmp	r3, r2
   19a7a:	d04d      	beq.n	19b18 <gnss_interface_read+0x140>
   19a7c:	f244 0203 	movw	r2, #16387	; 0x4003
   19a80:	4293      	cmp	r3, r2
   19a82:	f040 8196 	bne.w	19db2 <gnss_interface_read+0x3da>
   19a86:	2201      	movs	r2, #1
   19a88:	2414      	movs	r4, #20
   19a8a:	9b08      	ldr	r3, [sp, #32]
   19a8c:	f888 2000 	strb.w	r2, [r8]
   19a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19a92:	f8c8 3008 	str.w	r3, [r8, #8]
   19a96:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19a9a:	e9c8 2303 	strd	r2, r3, [r8, #12]
   19a9e:	f8da 0000 	ldr.w	r0, [sl]
   19aa2:	6803      	ldr	r3, [r0, #0]
   19aa4:	68db      	ldr	r3, [r3, #12]
   19aa6:	4798      	blx	r3
   19aa8:	2800      	cmp	r0, #0
   19aaa:	dd03      	ble.n	19ab4 <gnss_interface_read+0xdc>
   19aac:	682b      	ldr	r3, [r5, #0]
   19aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19ab2:	602b      	str	r3, [r5, #0]
   19ab4:	4620      	mov	r0, r4
   19ab6:	b037      	add	sp, #220	; 0xdc
   19ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19abc:	1c42      	adds	r2, r0, #1
   19abe:	4603      	mov	r3, r0
   19ac0:	d1d2      	bne.n	19a68 <gnss_interface_read+0x90>
   19ac2:	b93c      	cbnz	r4, 19ad4 <gnss_interface_read+0xfc>
   19ac4:	461c      	mov	r4, r3
   19ac6:	2023      	movs	r0, #35	; 0x23
   19ac8:	f7f7 fe44 	bl	11754 <bsd_os_errno_set>
   19acc:	4620      	mov	r0, r4
   19ace:	b037      	add	sp, #220	; 0xdc
   19ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ad4:	9001      	str	r0, [sp, #4]
   19ad6:	4620      	mov	r0, r4
   19ad8:	f7f7 fe3c 	bl	11754 <bsd_os_errno_set>
   19adc:	9b01      	ldr	r3, [sp, #4]
   19ade:	461c      	mov	r4, r3
   19ae0:	4620      	mov	r0, r4
   19ae2:	b037      	add	sp, #220	; 0xdc
   19ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ae8:	a808      	add	r0, sp, #32
   19aea:	f003 fc47 	bl	1d37c <strlen>
   19aee:	2302      	movs	r3, #2
   19af0:	1c44      	adds	r4, r0, #1
   19af2:	b2a4      	uxth	r4, r4
   19af4:	f808 3b08 	strb.w	r3, [r8], #8
   19af8:	4622      	mov	r2, r4
   19afa:	a908      	add	r1, sp, #32
   19afc:	4640      	mov	r0, r8
   19afe:	f003 fc78 	bl	1d3f2 <memcpy>
   19b02:	3408      	adds	r4, #8
   19b04:	e7cb      	b.n	19a9e <gnss_interface_read+0xc6>
   19b06:	bf00      	nop
   19b08:	49765443 	.word	0x49765443
   19b0c:	20020b0c 	.word	0x20020b0c
   19b10:	2002c52c 	.word	0x2002c52c
   19b14:	20020b14 	.word	0x20020b14
   19b18:	2401      	movs	r4, #1
   19b1a:	a809      	add	r0, sp, #36	; 0x24
   19b1c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   19b1e:	e9c8 0102 	strd	r0, r1, [r8, #8]
   19b22:	e9c8 2304 	strd	r2, r3, [r8, #16]
   19b26:	990d      	ldr	r1, [sp, #52]	; 0x34
   19b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19b2a:	f888 4000 	strb.w	r4, [r8]
   19b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19b30:	f8c8 1018 	str.w	r1, [r8, #24]
   19b34:	9910      	ldr	r1, [sp, #64]	; 0x40
   19b36:	f8c8 201c 	str.w	r2, [r8, #28]
   19b3a:	f8c8 3020 	str.w	r3, [r8, #32]
   19b3e:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   19b42:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   19b46:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   19b4a:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   19b4e:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   19b52:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   19b56:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   19b5a:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   19b5e:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   19b62:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   19b66:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   19b6a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   19b6e:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   19b72:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19b76:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   19b7a:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   19b7e:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   19b82:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   19b86:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   19b8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19b8c:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   19b90:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   19b94:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   19b98:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19b9e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19ba2:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   19ba6:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   19baa:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   19bae:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19bb2:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   19bb6:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   19bba:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   19bbe:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   19bc2:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   19bc6:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   19bca:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   19bce:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   19bd2:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   19bd6:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   19bda:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   19bde:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   19be2:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   19be6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   19bea:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   19bee:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   19bf2:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   19bf6:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   19bfa:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   19bfe:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   19c02:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   19c06:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   19c0a:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   19c0e:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   19c12:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   19c16:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   19c1a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   19c1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19c20:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   19c24:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19c28:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   19c2c:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19c30:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   19c34:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   19c38:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19c3c:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   19c40:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   19c44:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   19c48:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   19c4c:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   19c50:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   19c54:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   19c58:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   19c5c:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   19c60:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   19c64:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   19c68:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   19c6c:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   19c70:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   19c74:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   19c78:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   19c7c:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   19c80:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   19c84:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   19c88:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   19c8c:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   19c90:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   19c94:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   19c98:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   19c9c:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   19ca0:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   19ca4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   19ca6:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   19caa:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   19cae:	f3c3 210f 	ubfx	r1, r3, #8, #16
   19cb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19cb4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   19cb8:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   19cbc:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   19cc0:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   19cc4:	f3c3 230f 	ubfx	r3, r3, #8, #16
   19cc8:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   19ccc:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   19cd0:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   19cd4:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   19cd8:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   19cdc:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   19ce0:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   19ce4:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   19ce8:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   19cec:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   19cf0:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   19cf4:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   19cf8:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   19cfc:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   19d00:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   19d04:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   19d08:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   19d0c:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   19d10:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   19d14:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   19d18:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   19d1c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   19d20:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   19d24:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   19d28:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   19d2c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   19d30:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   19d34:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   19d38:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   19d3a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   19d3e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   19d42:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   19d46:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19d4a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   19d4e:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   19d52:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   19d56:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   19d5a:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   19d5e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   19d62:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   19d66:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   19d6a:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   19d6e:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   19d72:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   19d76:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   19d7a:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   19d7e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   19d82:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   19d86:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   19d8a:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   19d8e:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   19d92:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   19d96:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   19d9a:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   19d9e:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   19da2:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   19da6:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   19daa:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   19dae:	24d8      	movs	r4, #216	; 0xd8
   19db0:	e675      	b.n	19a9e <gnss_interface_read+0xc6>
   19db2:	2016      	movs	r0, #22
   19db4:	f7f7 fcce 	bl	11754 <bsd_os_errno_set>
   19db8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19dbc:	e67a      	b.n	19ab4 <gnss_interface_read+0xdc>
   19dbe:	2009      	movs	r0, #9
   19dc0:	f7f7 fcc8 	bl	11754 <bsd_os_errno_set>
   19dc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19dc8:	e674      	b.n	19ab4 <gnss_interface_read+0xdc>
   19dca:	2039      	movs	r0, #57	; 0x39
   19dcc:	f7f7 fcc2 	bl	11754 <bsd_os_errno_set>
   19dd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19dd4:	e66e      	b.n	19ab4 <gnss_interface_read+0xdc>
   19dd6:	bf00      	nop

00019dd8 <gnss_interface_setopt>:
   19dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19ddc:	f241 1402 	movw	r4, #4354	; 0x1102
   19de0:	4222      	tst	r2, r4
   19de2:	b086      	sub	sp, #24
   19de4:	4d9c      	ldr	r5, [pc, #624]	; (1a058 <gnss_interface_setopt+0x280>)
   19de6:	d004      	beq.n	19df2 <gnss_interface_setopt+0x1a>
   19de8:	682c      	ldr	r4, [r5, #0]
   19dea:	b2a4      	uxth	r4, r4
   19dec:	2c02      	cmp	r4, #2
   19dee:	f040 8104 	bne.w	19ffa <gnss_interface_setopt+0x222>
   19df2:	682c      	ldr	r4, [r5, #0]
   19df4:	0264      	lsls	r4, r4, #9
   19df6:	f100 8128 	bmi.w	1a04a <gnss_interface_setopt+0x272>
   19dfa:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   19dfe:	f040 811e 	bne.w	1a03e <gnss_interface_setopt+0x266>
   19e02:	4996      	ldr	r1, [pc, #600]	; (1a05c <gnss_interface_setopt+0x284>)
   19e04:	4288      	cmp	r0, r1
   19e06:	f040 8114 	bne.w	1a032 <gnss_interface_setopt+0x25a>
   19e0a:	3a01      	subs	r2, #1
   19e0c:	2a08      	cmp	r2, #8
   19e0e:	f200 80ec 	bhi.w	19fea <gnss_interface_setopt+0x212>
   19e12:	e8df f012 	tbh	[pc, r2, lsl #1]
   19e16:	0075      	.short	0x0075
   19e18:	00c200d8 	.word	0x00c200d8
   19e1c:	008100cc 	.word	0x008100cc
   19e20:	0098008c 	.word	0x0098008c
   19e24:	000900af 	.word	0x000900af
   19e28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19e2a:	2a01      	cmp	r2, #1
   19e2c:	f040 80dd 	bne.w	19fea <gnss_interface_setopt+0x212>
   19e30:	f241 1603 	movw	r6, #4355	; 0x1103
   19e34:	2240      	movs	r2, #64	; 0x40
   19e36:	4637      	mov	r7, r6
   19e38:	781b      	ldrb	r3, [r3, #0]
   19e3a:	9202      	str	r2, [sp, #8]
   19e3c:	f88d 3015 	strb.w	r3, [sp, #21]
   19e40:	682b      	ldr	r3, [r5, #0]
   19e42:	2112      	movs	r1, #18
   19e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19e48:	4668      	mov	r0, sp
   19e4a:	602b      	str	r3, [r5, #0]
   19e4c:	f000 fbe8 	bl	1a620 <rpc_gnss_client_request_alloc>
   19e50:	4604      	mov	r4, r0
   19e52:	9800      	ldr	r0, [sp, #0]
   19e54:	2c00      	cmp	r4, #0
   19e56:	f040 80d6 	bne.w	1a006 <gnss_interface_setopt+0x22e>
   19e5a:	2800      	cmp	r0, #0
   19e5c:	f000 80da 	beq.w	1a014 <gnss_interface_setopt+0x23c>
   19e60:	2212      	movs	r2, #18
   19e62:	f04f 0876 	mov.w	r8, #118	; 0x76
   19e66:	f04f 0e49 	mov.w	lr, #73	; 0x49
   19e6a:	f04f 0a43 	mov.w	sl, #67	; 0x43
   19e6e:	f04f 0954 	mov.w	r9, #84	; 0x54
   19e72:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 1a064 <gnss_interface_setopt+0x28c>
   19e76:	a906      	add	r1, sp, #24
   19e78:	f8bc 3000 	ldrh.w	r3, [ip]
   19e7c:	f880 800e 	strb.w	r8, [r0, #14]
   19e80:	3301      	adds	r3, #1
   19e82:	b29b      	uxth	r3, r3
   19e84:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   19e88:	f841 6d14 	str.w	r6, [r1, #-20]!
   19e8c:	7144      	strb	r4, [r0, #5]
   19e8e:	7184      	strb	r4, [r0, #6]
   19e90:	71c4      	strb	r4, [r0, #7]
   19e92:	7204      	strb	r4, [r0, #8]
   19e94:	7244      	strb	r4, [r0, #9]
   19e96:	7284      	strb	r4, [r0, #10]
   19e98:	72c4      	strb	r4, [r0, #11]
   19e9a:	7102      	strb	r2, [r0, #4]
   19e9c:	f880 a00c 	strb.w	sl, [r0, #12]
   19ea0:	f880 900d 	strb.w	r9, [r0, #13]
   19ea4:	f880 e00f 	strb.w	lr, [r0, #15]
   19ea8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a068 <gnss_interface_setopt+0x290>
   19eac:	6800      	ldr	r0, [r0, #0]
   19eae:	f8ac 3000 	strh.w	r3, [ip]
   19eb2:	f003 fa9e 	bl	1d3f2 <memcpy>
   19eb6:	4639      	mov	r1, r7
   19eb8:	9800      	ldr	r0, [sp, #0]
   19eba:	f8c8 4000 	str.w	r4, [r8]
   19ebe:	f000 fbc3 	bl	1a648 <rpc_gnss_client_request_send>
   19ec2:	2800      	cmp	r0, #0
   19ec4:	f040 80ab 	bne.w	1a01e <gnss_interface_setopt+0x246>
   19ec8:	4f65      	ldr	r7, [pc, #404]	; (1a060 <gnss_interface_setopt+0x288>)
   19eca:	4e64      	ldr	r6, [pc, #400]	; (1a05c <gnss_interface_setopt+0x284>)
   19ecc:	4639      	mov	r1, r7
   19ece:	4630      	mov	r0, r6
   19ed0:	f7f7 fbac 	bl	1162c <bsd_os_timedwait>
   19ed4:	682c      	ldr	r4, [r5, #0]
   19ed6:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   19eda:	d1f7      	bne.n	19ecc <gnss_interface_setopt+0xf4>
   19edc:	f8d8 0000 	ldr.w	r0, [r8]
   19ee0:	b118      	cbz	r0, 19eea <gnss_interface_setopt+0x112>
   19ee2:	f000 fbcf 	bl	1a684 <rpc_gnss_client_data_free>
   19ee6:	f8c8 4000 	str.w	r4, [r8]
   19eea:	682b      	ldr	r3, [r5, #0]
   19eec:	021b      	lsls	r3, r3, #8
   19eee:	d576      	bpl.n	19fde <gnss_interface_setopt+0x206>
   19ef0:	2000      	movs	r0, #0
   19ef2:	682b      	ldr	r3, [r5, #0]
   19ef4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19ef8:	602b      	str	r3, [r5, #0]
   19efa:	b006      	add	sp, #24
   19efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f02:	2a02      	cmp	r2, #2
   19f04:	d171      	bne.n	19fea <gnss_interface_setopt+0x212>
   19f06:	2208      	movs	r2, #8
   19f08:	f241 1603 	movw	r6, #4355	; 0x1103
   19f0c:	881b      	ldrh	r3, [r3, #0]
   19f0e:	9202      	str	r2, [sp, #8]
   19f10:	f8ad 300f 	strh.w	r3, [sp, #15]
   19f14:	4637      	mov	r7, r6
   19f16:	e793      	b.n	19e40 <gnss_interface_setopt+0x68>
   19f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f1a:	2a01      	cmp	r2, #1
   19f1c:	d165      	bne.n	19fea <gnss_interface_setopt+0x212>
   19f1e:	f241 1603 	movw	r6, #4355	; 0x1103
   19f22:	781b      	ldrb	r3, [r3, #0]
   19f24:	9202      	str	r2, [sp, #8]
   19f26:	f88d 300c 	strb.w	r3, [sp, #12]
   19f2a:	4637      	mov	r7, r6
   19f2c:	e788      	b.n	19e40 <gnss_interface_setopt+0x68>
   19f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f30:	2a01      	cmp	r2, #1
   19f32:	d15a      	bne.n	19fea <gnss_interface_setopt+0x212>
   19f34:	2202      	movs	r2, #2
   19f36:	f241 1603 	movw	r6, #4355	; 0x1103
   19f3a:	781b      	ldrb	r3, [r3, #0]
   19f3c:	9202      	str	r2, [sp, #8]
   19f3e:	f88d 300d 	strb.w	r3, [sp, #13]
   19f42:	4637      	mov	r7, r6
   19f44:	e77c      	b.n	19e40 <gnss_interface_setopt+0x68>
   19f46:	682a      	ldr	r2, [r5, #0]
   19f48:	b292      	uxth	r2, r2
   19f4a:	2a02      	cmp	r2, #2
   19f4c:	d155      	bne.n	19ffa <gnss_interface_setopt+0x222>
   19f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f50:	2a04      	cmp	r2, #4
   19f52:	d14a      	bne.n	19fea <gnss_interface_setopt+0x212>
   19f54:	2101      	movs	r1, #1
   19f56:	f241 0604 	movw	r6, #4100	; 0x1004
   19f5a:	682a      	ldr	r2, [r5, #0]
   19f5c:	6818      	ldr	r0, [r3, #0]
   19f5e:	0c13      	lsrs	r3, r2, #16
   19f60:	041b      	lsls	r3, r3, #16
   19f62:	f043 0303 	orr.w	r3, r3, #3
   19f66:	f8cd 0009 	str.w	r0, [sp, #9]
   19f6a:	602b      	str	r3, [r5, #0]
   19f6c:	f88d 1008 	strb.w	r1, [sp, #8]
   19f70:	4637      	mov	r7, r6
   19f72:	e765      	b.n	19e40 <gnss_interface_setopt+0x68>
   19f74:	682b      	ldr	r3, [r5, #0]
   19f76:	b29b      	uxth	r3, r3
   19f78:	2b04      	cmp	r3, #4
   19f7a:	d13e      	bne.n	19ffa <gnss_interface_setopt+0x222>
   19f7c:	2300      	movs	r3, #0
   19f7e:	f241 0604 	movw	r6, #4100	; 0x1004
   19f82:	f88d 3008 	strb.w	r3, [sp, #8]
   19f86:	f88d 3009 	strb.w	r3, [sp, #9]
   19f8a:	f88d 300a 	strb.w	r3, [sp, #10]
   19f8e:	f88d 300b 	strb.w	r3, [sp, #11]
   19f92:	f88d 300c 	strb.w	r3, [sp, #12]
   19f96:	4637      	mov	r7, r6
   19f98:	e752      	b.n	19e40 <gnss_interface_setopt+0x68>
   19f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f9c:	2a01      	cmp	r2, #1
   19f9e:	d124      	bne.n	19fea <gnss_interface_setopt+0x212>
   19fa0:	781b      	ldrb	r3, [r3, #0]
   19fa2:	2b01      	cmp	r3, #1
   19fa4:	d121      	bne.n	19fea <gnss_interface_setopt+0x212>
   19fa6:	f241 1603 	movw	r6, #4355	; 0x1103
   19faa:	4637      	mov	r7, r6
   19fac:	e748      	b.n	19e40 <gnss_interface_setopt+0x68>
   19fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19fb0:	2a02      	cmp	r2, #2
   19fb2:	d11a      	bne.n	19fea <gnss_interface_setopt+0x212>
   19fb4:	2220      	movs	r2, #32
   19fb6:	f241 1603 	movw	r6, #4355	; 0x1103
   19fba:	881b      	ldrh	r3, [r3, #0]
   19fbc:	9202      	str	r2, [sp, #8]
   19fbe:	f8ad 3013 	strh.w	r3, [sp, #19]
   19fc2:	4637      	mov	r7, r6
   19fc4:	e73c      	b.n	19e40 <gnss_interface_setopt+0x68>
   19fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19fc8:	2a02      	cmp	r2, #2
   19fca:	d10e      	bne.n	19fea <gnss_interface_setopt+0x212>
   19fcc:	2210      	movs	r2, #16
   19fce:	f241 1603 	movw	r6, #4355	; 0x1103
   19fd2:	881b      	ldrh	r3, [r3, #0]
   19fd4:	9202      	str	r2, [sp, #8]
   19fd6:	f8ad 3011 	strh.w	r3, [sp, #17]
   19fda:	4637      	mov	r7, r6
   19fdc:	e730      	b.n	19e40 <gnss_interface_setopt+0x68>
   19fde:	200e      	movs	r0, #14
   19fe0:	f7f7 fbb8 	bl	11754 <bsd_os_errno_set>
   19fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19fe8:	e783      	b.n	19ef2 <gnss_interface_setopt+0x11a>
   19fea:	2016      	movs	r0, #22
   19fec:	f7f7 fbb2 	bl	11754 <bsd_os_errno_set>
   19ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19ff4:	b006      	add	sp, #24
   19ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ffa:	200e      	movs	r0, #14
   19ffc:	f7f7 fbaa 	bl	11754 <bsd_os_errno_set>
   1a000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a004:	e779      	b.n	19efa <gnss_interface_setopt+0x122>
   1a006:	b128      	cbz	r0, 1a014 <gnss_interface_setopt+0x23c>
   1a008:	6803      	ldr	r3, [r0, #0]
   1a00a:	b11b      	cbz	r3, 1a014 <gnss_interface_setopt+0x23c>
   1a00c:	4618      	mov	r0, r3
   1a00e:	f000 fb39 	bl	1a684 <rpc_gnss_client_data_free>
   1a012:	9800      	ldr	r0, [sp, #0]
   1a014:	f000 fb2e 	bl	1a674 <rpc_gnss_client_message_free>
   1a018:	2023      	movs	r0, #35	; 0x23
   1a01a:	f7f7 fb9b 	bl	11754 <bsd_os_errno_set>
   1a01e:	682b      	ldr	r3, [r5, #0]
   1a020:	200e      	movs	r0, #14
   1a022:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1a026:	602b      	str	r3, [r5, #0]
   1a028:	f7f7 fb94 	bl	11754 <bsd_os_errno_set>
   1a02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a030:	e763      	b.n	19efa <gnss_interface_setopt+0x122>
   1a032:	2009      	movs	r0, #9
   1a034:	f7f7 fb8e 	bl	11754 <bsd_os_errno_set>
   1a038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a03c:	e75d      	b.n	19efa <gnss_interface_setopt+0x122>
   1a03e:	202a      	movs	r0, #42	; 0x2a
   1a040:	f7f7 fb88 	bl	11754 <bsd_os_errno_set>
   1a044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a048:	e757      	b.n	19efa <gnss_interface_setopt+0x122>
   1a04a:	2073      	movs	r0, #115	; 0x73
   1a04c:	f7f7 fb82 	bl	11754 <bsd_os_errno_set>
   1a050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a054:	e751      	b.n	19efa <gnss_interface_setopt+0x122>
   1a056:	bf00      	nop
   1a058:	20020b0c 	.word	0x20020b0c
   1a05c:	49765443 	.word	0x49765443
   1a060:	2002c52c 	.word	0x2002c52c
   1a064:	20024e24 	.word	0x20024e24
   1a068:	20020b10 	.word	0x20020b10

0001a06c <gnss_interface_getopt>:
   1a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a070:	4c81      	ldr	r4, [pc, #516]	; (1a278 <gnss_interface_getopt+0x20c>)
   1a072:	b087      	sub	sp, #28
   1a074:	6825      	ldr	r5, [r4, #0]
   1a076:	4698      	mov	r8, r3
   1a078:	b2ad      	uxth	r5, r5
   1a07a:	2d02      	cmp	r5, #2
   1a07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a07e:	f040 80dd 	bne.w	1a23c <gnss_interface_getopt+0x1d0>
   1a082:	6825      	ldr	r5, [r4, #0]
   1a084:	03ee      	lsls	r6, r5, #15
   1a086:	f100 80eb 	bmi.w	1a260 <gnss_interface_getopt+0x1f4>
   1a08a:	6825      	ldr	r5, [r4, #0]
   1a08c:	01ed      	lsls	r5, r5, #7
   1a08e:	f100 80ed 	bmi.w	1a26c <gnss_interface_getopt+0x200>
   1a092:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1a096:	f040 80d7 	bne.w	1a248 <gnss_interface_getopt+0x1dc>
   1a09a:	4978      	ldr	r1, [pc, #480]	; (1a27c <gnss_interface_getopt+0x210>)
   1a09c:	4288      	cmp	r0, r1
   1a09e:	f040 80d9 	bne.w	1a254 <gnss_interface_getopt+0x1e8>
   1a0a2:	f1b8 0f00 	cmp.w	r8, #0
   1a0a6:	d00b      	beq.n	1a0c0 <gnss_interface_getopt+0x54>
   1a0a8:	b153      	cbz	r3, 1a0c0 <gnss_interface_getopt+0x54>
   1a0aa:	1e57      	subs	r7, r2, #1
   1a0ac:	2f05      	cmp	r7, #5
   1a0ae:	d807      	bhi.n	1a0c0 <gnss_interface_getopt+0x54>
   1a0b0:	e8df f007 	tbb	[pc, r7]
   1a0b4:	0f030f0f 	.word	0x0f030f0f
   1a0b8:	0303      	.short	0x0303
   1a0ba:	681b      	ldr	r3, [r3, #0]
   1a0bc:	2b01      	cmp	r3, #1
   1a0be:	d00b      	beq.n	1a0d8 <gnss_interface_getopt+0x6c>
   1a0c0:	2016      	movs	r0, #22
   1a0c2:	f7f7 fb47 	bl	11754 <bsd_os_errno_set>
   1a0c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a0ca:	4628      	mov	r0, r5
   1a0cc:	b007      	add	sp, #28
   1a0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0d2:	681b      	ldr	r3, [r3, #0]
   1a0d4:	2b02      	cmp	r3, #2
   1a0d6:	d1f3      	bne.n	1a0c0 <gnss_interface_getopt+0x54>
   1a0d8:	6823      	ldr	r3, [r4, #0]
   1a0da:	2212      	movs	r2, #18
   1a0dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1a0e0:	2100      	movs	r1, #0
   1a0e2:	a801      	add	r0, sp, #4
   1a0e4:	6023      	str	r3, [r4, #0]
   1a0e6:	f003 f9ae 	bl	1d446 <memset>
   1a0ea:	2112      	movs	r1, #18
   1a0ec:	4668      	mov	r0, sp
   1a0ee:	f000 fa97 	bl	1a620 <rpc_gnss_client_request_alloc>
   1a0f2:	4605      	mov	r5, r0
   1a0f4:	9800      	ldr	r0, [sp, #0]
   1a0f6:	2d00      	cmp	r5, #0
   1a0f8:	f040 808a 	bne.w	1a210 <gnss_interface_getopt+0x1a4>
   1a0fc:	2800      	cmp	r0, #0
   1a0fe:	f000 808e 	beq.w	1a21e <gnss_interface_getopt+0x1b2>
   1a102:	f241 1602 	movw	r6, #4354	; 0x1102
   1a106:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1a10a:	2212      	movs	r2, #18
   1a10c:	f04f 0976 	mov.w	r9, #118	; 0x76
   1a110:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1a114:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1a118:	f8df c168 	ldr.w	ip, [pc, #360]	; 1a284 <gnss_interface_getopt+0x218>
   1a11c:	f880 e00f 	strb.w	lr, [r0, #15]
   1a120:	f8bc 3000 	ldrh.w	r3, [ip]
   1a124:	f880 900e 	strb.w	r9, [r0, #14]
   1a128:	3301      	adds	r3, #1
   1a12a:	b29b      	uxth	r3, r3
   1a12c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1a130:	f8cd e004 	str.w	lr, [sp, #4]
   1a134:	7145      	strb	r5, [r0, #5]
   1a136:	7185      	strb	r5, [r0, #6]
   1a138:	71c5      	strb	r5, [r0, #7]
   1a13a:	7205      	strb	r5, [r0, #8]
   1a13c:	7245      	strb	r5, [r0, #9]
   1a13e:	7285      	strb	r5, [r0, #10]
   1a140:	72c5      	strb	r5, [r0, #11]
   1a142:	a901      	add	r1, sp, #4
   1a144:	7102      	strb	r2, [r0, #4]
   1a146:	f880 b00c 	strb.w	fp, [r0, #12]
   1a14a:	f880 a00d 	strb.w	sl, [r0, #13]
   1a14e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1a288 <gnss_interface_getopt+0x21c>
   1a152:	6800      	ldr	r0, [r0, #0]
   1a154:	f8ac 3000 	strh.w	r3, [ip]
   1a158:	f003 f94b 	bl	1d3f2 <memcpy>
   1a15c:	4631      	mov	r1, r6
   1a15e:	9800      	ldr	r0, [sp, #0]
   1a160:	f8c9 5000 	str.w	r5, [r9]
   1a164:	f000 fa70 	bl	1a648 <rpc_gnss_client_request_send>
   1a168:	2800      	cmp	r0, #0
   1a16a:	d15d      	bne.n	1a228 <gnss_interface_getopt+0x1bc>
   1a16c:	4e44      	ldr	r6, [pc, #272]	; (1a280 <gnss_interface_getopt+0x214>)
   1a16e:	4d43      	ldr	r5, [pc, #268]	; (1a27c <gnss_interface_getopt+0x210>)
   1a170:	4631      	mov	r1, r6
   1a172:	4628      	mov	r0, r5
   1a174:	f7f7 fa5a 	bl	1162c <bsd_os_timedwait>
   1a178:	6823      	ldr	r3, [r4, #0]
   1a17a:	01db      	lsls	r3, r3, #7
   1a17c:	d4f8      	bmi.n	1a170 <gnss_interface_getopt+0x104>
   1a17e:	f8d9 0000 	ldr.w	r0, [r9]
   1a182:	b1d8      	cbz	r0, 1a1bc <gnss_interface_getopt+0x150>
   1a184:	6825      	ldr	r5, [r4, #0]
   1a186:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1a18a:	d00f      	beq.n	1a1ac <gnss_interface_getopt+0x140>
   1a18c:	2f05      	cmp	r7, #5
   1a18e:	d837      	bhi.n	1a200 <gnss_interface_getopt+0x194>
   1a190:	e8df f007 	tbb	[pc, r7]
   1a194:	2b26201a 	.word	0x2b26201a
   1a198:	0331      	.short	0x0331
   1a19a:	2500      	movs	r5, #0
   1a19c:	7b43      	ldrb	r3, [r0, #13]
   1a19e:	f888 3000 	strb.w	r3, [r8]
   1a1a2:	f000 fa6f 	bl	1a684 <rpc_gnss_client_data_free>
   1a1a6:	2300      	movs	r3, #0
   1a1a8:	f8c9 3000 	str.w	r3, [r9]
   1a1ac:	6823      	ldr	r3, [r4, #0]
   1a1ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a1b2:	6023      	str	r3, [r4, #0]
   1a1b4:	4628      	mov	r0, r5
   1a1b6:	b007      	add	sp, #28
   1a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1bc:	6823      	ldr	r3, [r4, #0]
   1a1be:	4605      	mov	r5, r0
   1a1c0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1a1c4:	6023      	str	r3, [r4, #0]
   1a1c6:	e7f5      	b.n	1a1b4 <gnss_interface_getopt+0x148>
   1a1c8:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1a1cc:	2500      	movs	r5, #0
   1a1ce:	f8a8 3000 	strh.w	r3, [r8]
   1a1d2:	e7e6      	b.n	1a1a2 <gnss_interface_getopt+0x136>
   1a1d4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1a1d8:	2500      	movs	r5, #0
   1a1da:	f8a8 3000 	strh.w	r3, [r8]
   1a1de:	e7e0      	b.n	1a1a2 <gnss_interface_getopt+0x136>
   1a1e0:	7b83      	ldrb	r3, [r0, #14]
   1a1e2:	2500      	movs	r5, #0
   1a1e4:	f888 3000 	strb.w	r3, [r8]
   1a1e8:	e7db      	b.n	1a1a2 <gnss_interface_getopt+0x136>
   1a1ea:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1a1ee:	2500      	movs	r5, #0
   1a1f0:	f8a8 3000 	strh.w	r3, [r8]
   1a1f4:	e7d5      	b.n	1a1a2 <gnss_interface_getopt+0x136>
   1a1f6:	7b03      	ldrb	r3, [r0, #12]
   1a1f8:	2500      	movs	r5, #0
   1a1fa:	f888 3000 	strb.w	r3, [r8]
   1a1fe:	e7d0      	b.n	1a1a2 <gnss_interface_getopt+0x136>
   1a200:	2016      	movs	r0, #22
   1a202:	f7f7 faa7 	bl	11754 <bsd_os_errno_set>
   1a206:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a20a:	f8d9 0000 	ldr.w	r0, [r9]
   1a20e:	e7c8      	b.n	1a1a2 <gnss_interface_getopt+0x136>
   1a210:	b128      	cbz	r0, 1a21e <gnss_interface_getopt+0x1b2>
   1a212:	6803      	ldr	r3, [r0, #0]
   1a214:	b11b      	cbz	r3, 1a21e <gnss_interface_getopt+0x1b2>
   1a216:	4618      	mov	r0, r3
   1a218:	f000 fa34 	bl	1a684 <rpc_gnss_client_data_free>
   1a21c:	9800      	ldr	r0, [sp, #0]
   1a21e:	f000 fa29 	bl	1a674 <rpc_gnss_client_message_free>
   1a222:	2023      	movs	r0, #35	; 0x23
   1a224:	f7f7 fa96 	bl	11754 <bsd_os_errno_set>
   1a228:	6823      	ldr	r3, [r4, #0]
   1a22a:	200e      	movs	r0, #14
   1a22c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a230:	6023      	str	r3, [r4, #0]
   1a232:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a236:	f7f7 fa8d 	bl	11754 <bsd_os_errno_set>
   1a23a:	e746      	b.n	1a0ca <gnss_interface_getopt+0x5e>
   1a23c:	200e      	movs	r0, #14
   1a23e:	f7f7 fa89 	bl	11754 <bsd_os_errno_set>
   1a242:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a246:	e740      	b.n	1a0ca <gnss_interface_getopt+0x5e>
   1a248:	202a      	movs	r0, #42	; 0x2a
   1a24a:	f7f7 fa83 	bl	11754 <bsd_os_errno_set>
   1a24e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a252:	e73a      	b.n	1a0ca <gnss_interface_getopt+0x5e>
   1a254:	2009      	movs	r0, #9
   1a256:	f7f7 fa7d 	bl	11754 <bsd_os_errno_set>
   1a25a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a25e:	e734      	b.n	1a0ca <gnss_interface_getopt+0x5e>
   1a260:	2005      	movs	r0, #5
   1a262:	f7f7 fa77 	bl	11754 <bsd_os_errno_set>
   1a266:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a26a:	e72e      	b.n	1a0ca <gnss_interface_getopt+0x5e>
   1a26c:	2073      	movs	r0, #115	; 0x73
   1a26e:	f7f7 fa71 	bl	11754 <bsd_os_errno_set>
   1a272:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a276:	e728      	b.n	1a0ca <gnss_interface_getopt+0x5e>
   1a278:	20020b0c 	.word	0x20020b0c
   1a27c:	49765443 	.word	0x49765443
   1a280:	2002c52c 	.word	0x2002c52c
   1a284:	20024e24 	.word	0x20024e24
   1a288:	20020b10 	.word	0x20020b10

0001a28c <gnss_interface_init>:
   1a28c:	2100      	movs	r1, #0
   1a28e:	b538      	push	{r3, r4, r5, lr}
   1a290:	4c09      	ldr	r4, [pc, #36]	; (1a2b8 <gnss_interface_init+0x2c>)
   1a292:	4d0a      	ldr	r5, [pc, #40]	; (1a2bc <gnss_interface_init+0x30>)
   1a294:	6822      	ldr	r2, [r4, #0]
   1a296:	480a      	ldr	r0, [pc, #40]	; (1a2c0 <gnss_interface_init+0x34>)
   1a298:	4b0a      	ldr	r3, [pc, #40]	; (1a2c4 <gnss_interface_init+0x38>)
   1a29a:	402a      	ands	r2, r5
   1a29c:	6022      	str	r2, [r4, #0]
   1a29e:	8001      	strh	r1, [r0, #0]
   1a2a0:	6019      	str	r1, [r3, #0]
   1a2a2:	f000 f9b7 	bl	1a614 <rpc_gnss_client_init>
   1a2a6:	b928      	cbnz	r0, 1a2b4 <gnss_interface_init+0x28>
   1a2a8:	6823      	ldr	r3, [r4, #0]
   1a2aa:	402b      	ands	r3, r5
   1a2ac:	f043 0301 	orr.w	r3, r3, #1
   1a2b0:	6023      	str	r3, [r4, #0]
   1a2b2:	bd38      	pop	{r3, r4, r5, pc}
   1a2b4:	2003      	movs	r0, #3
   1a2b6:	bd38      	pop	{r3, r4, r5, pc}
   1a2b8:	20020b0c 	.word	0x20020b0c
   1a2bc:	ffff0000 	.word	0xffff0000
   1a2c0:	20024e24 	.word	0x20024e24
   1a2c4:	20020b10 	.word	0x20020b10

0001a2c8 <gnss_interface_open>:
   1a2c8:	2801      	cmp	r0, #1
   1a2ca:	b510      	push	{r4, lr}
   1a2cc:	d120      	bne.n	1a310 <gnss_interface_open+0x48>
   1a2ce:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1a2d2:	d11d      	bne.n	1a310 <gnss_interface_open+0x48>
   1a2d4:	2902      	cmp	r1, #2
   1a2d6:	d11b      	bne.n	1a310 <gnss_interface_open+0x48>
   1a2d8:	4c13      	ldr	r4, [pc, #76]	; (1a328 <gnss_interface_open+0x60>)
   1a2da:	6823      	ldr	r3, [r4, #0]
   1a2dc:	b29b      	uxth	r3, r3
   1a2de:	2b01      	cmp	r3, #1
   1a2e0:	d11c      	bne.n	1a31c <gnss_interface_open+0x54>
   1a2e2:	6823      	ldr	r3, [r4, #0]
   1a2e4:	4608      	mov	r0, r1
   1a2e6:	0c1b      	lsrs	r3, r3, #16
   1a2e8:	041b      	lsls	r3, r3, #16
   1a2ea:	f043 0302 	orr.w	r3, r3, #2
   1a2ee:	2200      	movs	r2, #0
   1a2f0:	490e      	ldr	r1, [pc, #56]	; (1a32c <gnss_interface_open+0x64>)
   1a2f2:	6023      	str	r3, [r4, #0]
   1a2f4:	f000 faac 	bl	1a850 <packet_handler_create>
   1a2f8:	4a0d      	ldr	r2, [pc, #52]	; (1a330 <gnss_interface_open+0x68>)
   1a2fa:	6010      	str	r0, [r2, #0]
   1a2fc:	b170      	cbz	r0, 1a31c <gnss_interface_open+0x54>
   1a2fe:	6823      	ldr	r3, [r4, #0]
   1a300:	6802      	ldr	r2, [r0, #0]
   1a302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a306:	6812      	ldr	r2, [r2, #0]
   1a308:	6023      	str	r3, [r4, #0]
   1a30a:	4790      	blx	r2
   1a30c:	4809      	ldr	r0, [pc, #36]	; (1a334 <gnss_interface_open+0x6c>)
   1a30e:	bd10      	pop	{r4, pc}
   1a310:	2016      	movs	r0, #22
   1a312:	f7f7 fa1f 	bl	11754 <bsd_os_errno_set>
   1a316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a31a:	bd10      	pop	{r4, pc}
   1a31c:	200e      	movs	r0, #14
   1a31e:	f7f7 fa19 	bl	11754 <bsd_os_errno_set>
   1a322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a326:	bd10      	pop	{r4, pc}
   1a328:	20020b0c 	.word	0x20020b0c
   1a32c:	00019625 	.word	0x00019625
   1a330:	20020b14 	.word	0x20020b14
   1a334:	49765443 	.word	0x49765443

0001a338 <gnss_interface_close>:
   1a338:	b530      	push	{r4, r5, lr}
   1a33a:	4b13      	ldr	r3, [pc, #76]	; (1a388 <gnss_interface_close+0x50>)
   1a33c:	b083      	sub	sp, #12
   1a33e:	4298      	cmp	r0, r3
   1a340:	d11c      	bne.n	1a37c <gnss_interface_close+0x44>
   1a342:	4c12      	ldr	r4, [pc, #72]	; (1a38c <gnss_interface_close+0x54>)
   1a344:	6823      	ldr	r3, [r4, #0]
   1a346:	b29b      	uxth	r3, r3
   1a348:	2b04      	cmp	r3, #4
   1a34a:	d00f      	beq.n	1a36c <gnss_interface_close+0x34>
   1a34c:	4d10      	ldr	r5, [pc, #64]	; (1a390 <gnss_interface_close+0x58>)
   1a34e:	6828      	ldr	r0, [r5, #0]
   1a350:	b118      	cbz	r0, 1a35a <gnss_interface_close+0x22>
   1a352:	f000 fa9d 	bl	1a890 <packet_handler_delete>
   1a356:	2300      	movs	r3, #0
   1a358:	602b      	str	r3, [r5, #0]
   1a35a:	2000      	movs	r0, #0
   1a35c:	6823      	ldr	r3, [r4, #0]
   1a35e:	0c1b      	lsrs	r3, r3, #16
   1a360:	041b      	lsls	r3, r3, #16
   1a362:	f043 0301 	orr.w	r3, r3, #1
   1a366:	6023      	str	r3, [r4, #0]
   1a368:	b003      	add	sp, #12
   1a36a:	bd30      	pop	{r4, r5, pc}
   1a36c:	2300      	movs	r3, #0
   1a36e:	2208      	movs	r2, #8
   1a370:	9300      	str	r3, [sp, #0]
   1a372:	f44f 7101 	mov.w	r1, #516	; 0x204
   1a376:	f7fc feaf 	bl	170d8 <nrf_setsockopt>
   1a37a:	e7e7      	b.n	1a34c <gnss_interface_close+0x14>
   1a37c:	2009      	movs	r0, #9
   1a37e:	f7f7 f9e9 	bl	11754 <bsd_os_errno_set>
   1a382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a386:	e7ef      	b.n	1a368 <gnss_interface_close+0x30>
   1a388:	49765443 	.word	0x49765443
   1a38c:	20020b0c 	.word	0x20020b0c
   1a390:	20020b14 	.word	0x20020b14

0001a394 <rpc_gnss_serialize_utc>:
   1a394:	4603      	mov	r3, r0
   1a396:	b1d8      	cbz	r0, 1a3d0 <rpc_gnss_serialize_utc+0x3c>
   1a398:	b1d1      	cbz	r1, 1a3d0 <rpc_gnss_serialize_utc+0x3c>
   1a39a:	2000      	movs	r0, #0
   1a39c:	2201      	movs	r2, #1
   1a39e:	7048      	strb	r0, [r1, #1]
   1a3a0:	700a      	strb	r2, [r1, #0]
   1a3a2:	685a      	ldr	r2, [r3, #4]
   1a3a4:	2010      	movs	r0, #16
   1a3a6:	f8c1 2006 	str.w	r2, [r1, #6]
   1a3aa:	681a      	ldr	r2, [r3, #0]
   1a3ac:	f8c1 2002 	str.w	r2, [r1, #2]
   1a3b0:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a3b4:	730a      	strb	r2, [r1, #12]
   1a3b6:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a3ba:	73ca      	strb	r2, [r1, #15]
   1a3bc:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a3c0:	738a      	strb	r2, [r1, #14]
   1a3c2:	7a1a      	ldrb	r2, [r3, #8]
   1a3c4:	728a      	strb	r2, [r1, #10]
   1a3c6:	7ada      	ldrb	r2, [r3, #11]
   1a3c8:	734a      	strb	r2, [r1, #13]
   1a3ca:	7a5b      	ldrb	r3, [r3, #9]
   1a3cc:	72cb      	strb	r3, [r1, #11]
   1a3ce:	4770      	bx	lr
   1a3d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a3d4:	4770      	bx	lr
   1a3d6:	bf00      	nop

0001a3d8 <rpc_gnss_serialize_ephe>:
   1a3d8:	4603      	mov	r3, r0
   1a3da:	2800      	cmp	r0, #0
   1a3dc:	d04b      	beq.n	1a476 <rpc_gnss_serialize_ephe+0x9e>
   1a3de:	2900      	cmp	r1, #0
   1a3e0:	d049      	beq.n	1a476 <rpc_gnss_serialize_ephe+0x9e>
   1a3e2:	2000      	movs	r0, #0
   1a3e4:	2202      	movs	r2, #2
   1a3e6:	7048      	strb	r0, [r1, #1]
   1a3e8:	700a      	strb	r2, [r1, #0]
   1a3ea:	68da      	ldr	r2, [r3, #12]
   1a3ec:	2040      	movs	r0, #64	; 0x40
   1a3ee:	f8c1 200b 	str.w	r2, [r1, #11]
   1a3f2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a3f6:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a3fa:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a3fe:	720a      	strb	r2, [r1, #8]
   1a400:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a404:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a406:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a40a:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a40c:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a410:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a412:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a416:	868a      	strh	r2, [r1, #52]	; 0x34
   1a418:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a41c:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a41e:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a422:	870a      	strh	r2, [r1, #56]	; 0x38
   1a424:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a428:	830a      	strh	r2, [r1, #24]
   1a42a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a42c:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a430:	7c9a      	ldrb	r2, [r3, #18]
   1a432:	744a      	strb	r2, [r1, #17]
   1a434:	785a      	ldrb	r2, [r3, #1]
   1a436:	70ca      	strb	r2, [r1, #3]
   1a438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a43a:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a43c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a440:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a442:	885a      	ldrh	r2, [r3, #2]
   1a444:	808a      	strh	r2, [r1, #4]
   1a446:	6a1a      	ldr	r2, [r3, #32]
   1a448:	f8c1 201a 	str.w	r2, [r1, #26]
   1a44c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a44e:	630a      	str	r2, [r1, #48]	; 0x30
   1a450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a452:	f8c1 201e 	str.w	r2, [r1, #30]
   1a456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a458:	628a      	str	r2, [r1, #40]	; 0x28
   1a45a:	781a      	ldrb	r2, [r3, #0]
   1a45c:	708a      	strb	r2, [r1, #2]
   1a45e:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a462:	73ca      	strb	r2, [r1, #15]
   1a464:	889a      	ldrh	r2, [r3, #4]
   1a466:	80ca      	strh	r2, [r1, #6]
   1a468:	8a9a      	ldrh	r2, [r3, #20]
   1a46a:	824a      	strh	r2, [r1, #18]
   1a46c:	7c5a      	ldrb	r2, [r3, #17]
   1a46e:	740a      	strb	r2, [r1, #16]
   1a470:	699b      	ldr	r3, [r3, #24]
   1a472:	614b      	str	r3, [r1, #20]
   1a474:	4770      	bx	lr
   1a476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a47a:	4770      	bx	lr

0001a47c <rpc_gnss_serialize_alm>:
   1a47c:	4603      	mov	r3, r0
   1a47e:	b360      	cbz	r0, 1a4da <rpc_gnss_serialize_alm+0x5e>
   1a480:	b359      	cbz	r1, 1a4da <rpc_gnss_serialize_alm+0x5e>
   1a482:	2000      	movs	r0, #0
   1a484:	2203      	movs	r2, #3
   1a486:	7048      	strb	r0, [r1, #1]
   1a488:	700a      	strb	r2, [r1, #0]
   1a48a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a48e:	2021      	movs	r0, #33	; 0x21
   1a490:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a494:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a498:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a49c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a4a0:	810a      	strh	r2, [r1, #8]
   1a4a2:	889a      	ldrh	r2, [r3, #4]
   1a4a4:	80ca      	strh	r2, [r1, #6]
   1a4a6:	78da      	ldrb	r2, [r3, #3]
   1a4a8:	714a      	strb	r2, [r1, #5]
   1a4aa:	699a      	ldr	r2, [r3, #24]
   1a4ac:	f8c1 2019 	str.w	r2, [r1, #25]
   1a4b0:	691a      	ldr	r2, [r3, #16]
   1a4b2:	f8c1 2011 	str.w	r2, [r1, #17]
   1a4b6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a4ba:	814a      	strh	r2, [r1, #10]
   1a4bc:	68da      	ldr	r2, [r3, #12]
   1a4be:	f8c1 200d 	str.w	r2, [r1, #13]
   1a4c2:	7a9a      	ldrb	r2, [r3, #10]
   1a4c4:	730a      	strb	r2, [r1, #12]
   1a4c6:	781a      	ldrb	r2, [r3, #0]
   1a4c8:	708a      	strb	r2, [r1, #2]
   1a4ca:	789a      	ldrb	r2, [r3, #2]
   1a4cc:	710a      	strb	r2, [r1, #4]
   1a4ce:	695a      	ldr	r2, [r3, #20]
   1a4d0:	f8c1 2015 	str.w	r2, [r1, #21]
   1a4d4:	785b      	ldrb	r3, [r3, #1]
   1a4d6:	70cb      	strb	r3, [r1, #3]
   1a4d8:	4770      	bx	lr
   1a4da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a4de:	4770      	bx	lr

0001a4e0 <rpc_gnss_serialize_klob>:
   1a4e0:	4603      	mov	r3, r0
   1a4e2:	b1f0      	cbz	r0, 1a522 <rpc_gnss_serialize_klob+0x42>
   1a4e4:	b1e9      	cbz	r1, 1a522 <rpc_gnss_serialize_klob+0x42>
   1a4e6:	2000      	movs	r0, #0
   1a4e8:	2204      	movs	r2, #4
   1a4ea:	7048      	strb	r0, [r1, #1]
   1a4ec:	700a      	strb	r2, [r1, #0]
   1a4ee:	f993 2000 	ldrsb.w	r2, [r3]
   1a4f2:	200a      	movs	r0, #10
   1a4f4:	708a      	strb	r2, [r1, #2]
   1a4f6:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a4fa:	70ca      	strb	r2, [r1, #3]
   1a4fc:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a500:	710a      	strb	r2, [r1, #4]
   1a502:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a506:	714a      	strb	r2, [r1, #5]
   1a508:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a50c:	718a      	strb	r2, [r1, #6]
   1a50e:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a512:	71ca      	strb	r2, [r1, #7]
   1a514:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a518:	720a      	strb	r2, [r1, #8]
   1a51a:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a51e:	724b      	strb	r3, [r1, #9]
   1a520:	4770      	bx	lr
   1a522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a526:	4770      	bx	lr

0001a528 <rpc_gnss_serialize_nequick>:
   1a528:	4603      	mov	r3, r0
   1a52a:	b198      	cbz	r0, 1a554 <rpc_gnss_serialize_nequick+0x2c>
   1a52c:	b191      	cbz	r1, 1a554 <rpc_gnss_serialize_nequick+0x2c>
   1a52e:	2000      	movs	r0, #0
   1a530:	2205      	movs	r2, #5
   1a532:	7048      	strb	r0, [r1, #1]
   1a534:	700a      	strb	r2, [r1, #0]
   1a536:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a53a:	200a      	movs	r0, #10
   1a53c:	804a      	strh	r2, [r1, #2]
   1a53e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a542:	808a      	strh	r2, [r1, #4]
   1a544:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a548:	80ca      	strh	r2, [r1, #6]
   1a54a:	799a      	ldrb	r2, [r3, #6]
   1a54c:	720a      	strb	r2, [r1, #8]
   1a54e:	79db      	ldrb	r3, [r3, #7]
   1a550:	724b      	strb	r3, [r1, #9]
   1a552:	4770      	bx	lr
   1a554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a558:	4770      	bx	lr
   1a55a:	bf00      	nop

0001a55c <rpc_gnss_serialize_time_and_sv_tow>:
   1a55c:	b310      	cbz	r0, 1a5a4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a55e:	b309      	cbz	r1, 1a5a4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a560:	b470      	push	{r4, r5, r6}
   1a562:	2500      	movs	r5, #0
   1a564:	2606      	movs	r6, #6
   1a566:	460c      	mov	r4, r1
   1a568:	704d      	strb	r5, [r1, #1]
   1a56a:	700e      	strb	r6, [r1, #0]
   1a56c:	462b      	mov	r3, r5
   1a56e:	8805      	ldrh	r5, [r0, #0]
   1a570:	4602      	mov	r2, r0
   1a572:	804d      	strh	r5, [r1, #2]
   1a574:	68c5      	ldr	r5, [r0, #12]
   1a576:	f8c1 500a 	str.w	r5, [r1, #10]
   1a57a:	8905      	ldrh	r5, [r0, #8]
   1a57c:	810d      	strh	r5, [r1, #8]
   1a57e:	6840      	ldr	r0, [r0, #4]
   1a580:	6048      	str	r0, [r1, #4]
   1a582:	8a15      	ldrh	r5, [r2, #16]
   1a584:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a588:	4408      	add	r0, r1
   1a58a:	81c5      	strh	r5, [r0, #14]
   1a58c:	7c90      	ldrb	r0, [r2, #18]
   1a58e:	3301      	adds	r3, #1
   1a590:	2b20      	cmp	r3, #32
   1a592:	7420      	strb	r0, [r4, #16]
   1a594:	f102 0204 	add.w	r2, r2, #4
   1a598:	f104 0403 	add.w	r4, r4, #3
   1a59c:	d1f1      	bne.n	1a582 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a59e:	206e      	movs	r0, #110	; 0x6e
   1a5a0:	bc70      	pop	{r4, r5, r6}
   1a5a2:	4770      	bx	lr
   1a5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5a8:	4770      	bx	lr
   1a5aa:	bf00      	nop

0001a5ac <rpc_gnss_serialize_location>:
   1a5ac:	4603      	mov	r3, r0
   1a5ae:	b1c8      	cbz	r0, 1a5e4 <rpc_gnss_serialize_location+0x38>
   1a5b0:	b1c1      	cbz	r1, 1a5e4 <rpc_gnss_serialize_location+0x38>
   1a5b2:	2000      	movs	r0, #0
   1a5b4:	2207      	movs	r2, #7
   1a5b6:	7048      	strb	r0, [r1, #1]
   1a5b8:	700a      	strb	r2, [r1, #0]
   1a5ba:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a5be:	2011      	movs	r0, #17
   1a5c0:	814a      	strh	r2, [r1, #10]
   1a5c2:	7b9a      	ldrb	r2, [r3, #14]
   1a5c4:	740a      	strb	r2, [r1, #16]
   1a5c6:	681a      	ldr	r2, [r3, #0]
   1a5c8:	f8c1 2002 	str.w	r2, [r1, #2]
   1a5cc:	685a      	ldr	r2, [r3, #4]
   1a5ce:	f8c1 2006 	str.w	r2, [r1, #6]
   1a5d2:	7b1a      	ldrb	r2, [r3, #12]
   1a5d4:	738a      	strb	r2, [r1, #14]
   1a5d6:	7b5a      	ldrb	r2, [r3, #13]
   1a5d8:	73ca      	strb	r2, [r1, #15]
   1a5da:	7a9a      	ldrb	r2, [r3, #10]
   1a5dc:	730a      	strb	r2, [r1, #12]
   1a5de:	7adb      	ldrb	r3, [r3, #11]
   1a5e0:	734b      	strb	r3, [r1, #13]
   1a5e2:	4770      	bx	lr
   1a5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5e8:	4770      	bx	lr
   1a5ea:	bf00      	nop

0001a5ec <rpc_gnss_serialize_integrity>:
   1a5ec:	b148      	cbz	r0, 1a602 <rpc_gnss_serialize_integrity+0x16>
   1a5ee:	b141      	cbz	r1, 1a602 <rpc_gnss_serialize_integrity+0x16>
   1a5f0:	2200      	movs	r2, #0
   1a5f2:	2308      	movs	r3, #8
   1a5f4:	704a      	strb	r2, [r1, #1]
   1a5f6:	700b      	strb	r3, [r1, #0]
   1a5f8:	6803      	ldr	r3, [r0, #0]
   1a5fa:	2006      	movs	r0, #6
   1a5fc:	f8c1 3002 	str.w	r3, [r1, #2]
   1a600:	4770      	bx	lr
   1a602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a606:	4770      	bx	lr

0001a608 <gnss_client_event_handler>:
   1a608:	f850 1b08 	ldr.w	r1, [r0], #8
   1a60c:	0c09      	lsrs	r1, r1, #16
   1a60e:	f7ff b817 	b.w	19640 <rpc_gnss_event_handler>
   1a612:	bf00      	nop

0001a614 <rpc_gnss_client_init>:
   1a614:	4801      	ldr	r0, [pc, #4]	; (1a61c <rpc_gnss_client_init+0x8>)
   1a616:	f7fe bb79 	b.w	18d0c <rpc_client_register>
   1a61a:	bf00      	nop
   1a61c:	0001f654 	.word	0x0001f654

0001a620 <rpc_gnss_client_request_alloc>:
   1a620:	2300      	movs	r3, #0
   1a622:	b510      	push	{r4, lr}
   1a624:	b082      	sub	sp, #8
   1a626:	9301      	str	r3, [sp, #4]
   1a628:	b158      	cbz	r0, 1a642 <rpc_gnss_client_request_alloc+0x22>
   1a62a:	4604      	mov	r4, r0
   1a62c:	aa01      	add	r2, sp, #4
   1a62e:	2007      	movs	r0, #7
   1a630:	f7fe fda4 	bl	1917c <rpc_message_alloc>
   1a634:	b918      	cbnz	r0, 1a63e <rpc_gnss_client_request_alloc+0x1e>
   1a636:	9b01      	ldr	r3, [sp, #4]
   1a638:	b10b      	cbz	r3, 1a63e <rpc_gnss_client_request_alloc+0x1e>
   1a63a:	3308      	adds	r3, #8
   1a63c:	6023      	str	r3, [r4, #0]
   1a63e:	b002      	add	sp, #8
   1a640:	bd10      	pop	{r4, pc}
   1a642:	2007      	movs	r0, #7
   1a644:	b002      	add	sp, #8
   1a646:	bd10      	pop	{r4, pc}

0001a648 <rpc_gnss_client_request_send>:
   1a648:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a64c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a650:	d10b      	bne.n	1a66a <rpc_gnss_client_request_send+0x22>
   1a652:	b160      	cbz	r0, 1a66e <rpc_gnss_client_request_send+0x26>
   1a654:	4603      	mov	r3, r0
   1a656:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a65a:	2007      	movs	r0, #7
   1a65c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a660:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a664:	4619      	mov	r1, r3
   1a666:	f7fe bd71 	b.w	1914c <rpc_message_send>
   1a66a:	200f      	movs	r0, #15
   1a66c:	4770      	bx	lr
   1a66e:	2007      	movs	r0, #7
   1a670:	4770      	bx	lr
   1a672:	bf00      	nop

0001a674 <rpc_gnss_client_message_free>:
   1a674:	b120      	cbz	r0, 1a680 <rpc_gnss_client_message_free+0xc>
   1a676:	f1a0 0108 	sub.w	r1, r0, #8
   1a67a:	2007      	movs	r0, #7
   1a67c:	f7fe bdb0 	b.w	191e0 <rpc_message_free>
   1a680:	2007      	movs	r0, #7
   1a682:	4770      	bx	lr

0001a684 <rpc_gnss_client_data_free>:
   1a684:	b118      	cbz	r0, 1a68e <rpc_gnss_client_data_free+0xa>
   1a686:	4601      	mov	r1, r0
   1a688:	2007      	movs	r0, #7
   1a68a:	f7fe bebb 	b.w	19404 <rpc_message_data_free>
   1a68e:	2007      	movs	r0, #7
   1a690:	4770      	bx	lr
   1a692:	bf00      	nop

0001a694 <datagram_handler_init>:
   1a694:	b510      	push	{r4, lr}
   1a696:	4604      	mov	r4, r0
   1a698:	200c      	movs	r0, #12
   1a69a:	f7f9 f901 	bl	138a0 <nrf_malloc>
   1a69e:	60e0      	str	r0, [r4, #12]
   1a6a0:	b118      	cbz	r0, 1a6aa <datagram_handler_init+0x16>
   1a6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a6a6:	f7fc bc0d 	b.w	16ec4 <linked_list_init>
   1a6aa:	2004      	movs	r0, #4
   1a6ac:	bd10      	pop	{r4, pc}
   1a6ae:	bf00      	nop

0001a6b0 <datagram_handler_put>:
   1a6b0:	b570      	push	{r4, r5, r6, lr}
   1a6b2:	4606      	mov	r6, r0
   1a6b4:	2014      	movs	r0, #20
   1a6b6:	460d      	mov	r5, r1
   1a6b8:	f7f9 f8f2 	bl	138a0 <nrf_malloc>
   1a6bc:	b178      	cbz	r0, 1a6de <datagram_handler_put+0x2e>
   1a6be:	682b      	ldr	r3, [r5, #0]
   1a6c0:	4604      	mov	r4, r0
   1a6c2:	6043      	str	r3, [r0, #4]
   1a6c4:	686b      	ldr	r3, [r5, #4]
   1a6c6:	4601      	mov	r1, r0
   1a6c8:	6083      	str	r3, [r0, #8]
   1a6ca:	68eb      	ldr	r3, [r5, #12]
   1a6cc:	60c3      	str	r3, [r0, #12]
   1a6ce:	68ab      	ldr	r3, [r5, #8]
   1a6d0:	6103      	str	r3, [r0, #16]
   1a6d2:	68f0      	ldr	r0, [r6, #12]
   1a6d4:	f7fc fc00 	bl	16ed8 <linked_list_push>
   1a6d8:	b920      	cbnz	r0, 1a6e4 <datagram_handler_put+0x34>
   1a6da:	6868      	ldr	r0, [r5, #4]
   1a6dc:	bd70      	pop	{r4, r5, r6, pc}
   1a6de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6e2:	bd70      	pop	{r4, r5, r6, pc}
   1a6e4:	4620      	mov	r0, r4
   1a6e6:	f7f9 f8e5 	bl	138b4 <nrf_free>
   1a6ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6ee:	bd70      	pop	{r4, r5, r6, pc}

0001a6f0 <datagram_handler_get>:
   1a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6f2:	4606      	mov	r6, r0
   1a6f4:	b085      	sub	sp, #20
   1a6f6:	68c0      	ldr	r0, [r0, #12]
   1a6f8:	460c      	mov	r4, r1
   1a6fa:	4617      	mov	r7, r2
   1a6fc:	f7fc fc0c 	bl	16f18 <linked_list_peek>
   1a700:	2800      	cmp	r0, #0
   1a702:	d037      	beq.n	1a774 <datagram_handler_get+0x84>
   1a704:	6882      	ldr	r2, [r0, #8]
   1a706:	4605      	mov	r5, r0
   1a708:	e9d4 0300 	ldrd	r0, r3, [r4]
   1a70c:	429a      	cmp	r2, r3
   1a70e:	bf28      	it	cs
   1a710:	461a      	movcs	r2, r3
   1a712:	6062      	str	r2, [r4, #4]
   1a714:	b110      	cbz	r0, 1a71c <datagram_handler_get+0x2c>
   1a716:	6869      	ldr	r1, [r5, #4]
   1a718:	f002 fe6b 	bl	1d3f2 <memcpy>
   1a71c:	68a0      	ldr	r0, [r4, #8]
   1a71e:	b118      	cbz	r0, 1a728 <datagram_handler_get+0x38>
   1a720:	692b      	ldr	r3, [r5, #16]
   1a722:	b10b      	cbz	r3, 1a728 <datagram_handler_get+0x38>
   1a724:	68ea      	ldr	r2, [r5, #12]
   1a726:	b9e2      	cbnz	r2, 1a762 <datagram_handler_get+0x72>
   1a728:	2300      	movs	r3, #0
   1a72a:	60e3      	str	r3, [r4, #12]
   1a72c:	073b      	lsls	r3, r7, #28
   1a72e:	d502      	bpl.n	1a736 <datagram_handler_get+0x46>
   1a730:	6860      	ldr	r0, [r4, #4]
   1a732:	b005      	add	sp, #20
   1a734:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a736:	68f0      	ldr	r0, [r6, #12]
   1a738:	f7fc fbe4 	bl	16f04 <linked_list_pop>
   1a73c:	4605      	mov	r5, r0
   1a73e:	2800      	cmp	r0, #0
   1a740:	d0f6      	beq.n	1a730 <datagram_handler_get+0x40>
   1a742:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a746:	6902      	ldr	r2, [r0, #16]
   1a748:	9300      	str	r3, [sp, #0]
   1a74a:	68c3      	ldr	r3, [r0, #12]
   1a74c:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1a750:	9303      	str	r3, [sp, #12]
   1a752:	4668      	mov	r0, sp
   1a754:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1a758:	4798      	blx	r3
   1a75a:	4628      	mov	r0, r5
   1a75c:	f7f9 f8aa 	bl	138b4 <nrf_free>
   1a760:	e7e6      	b.n	1a730 <datagram_handler_get+0x40>
   1a762:	68e3      	ldr	r3, [r4, #12]
   1a764:	429a      	cmp	r2, r3
   1a766:	bf28      	it	cs
   1a768:	461a      	movcs	r2, r3
   1a76a:	60e2      	str	r2, [r4, #12]
   1a76c:	6929      	ldr	r1, [r5, #16]
   1a76e:	f002 fe40 	bl	1d3f2 <memcpy>
   1a772:	e7db      	b.n	1a72c <datagram_handler_get+0x3c>
   1a774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a778:	e7db      	b.n	1a732 <datagram_handler_get+0x42>
   1a77a:	bf00      	nop

0001a77c <datagram_handler_available>:
   1a77c:	b508      	push	{r3, lr}
   1a77e:	68c0      	ldr	r0, [r0, #12]
   1a780:	f7fc fbca 	bl	16f18 <linked_list_peek>
   1a784:	b108      	cbz	r0, 1a78a <datagram_handler_available+0xe>
   1a786:	6880      	ldr	r0, [r0, #8]
   1a788:	bd08      	pop	{r3, pc}
   1a78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a78e:	bd08      	pop	{r3, pc}

0001a790 <datagram_handler_flush>:
   1a790:	b530      	push	{r4, r5, lr}
   1a792:	4605      	mov	r5, r0
   1a794:	68c0      	ldr	r0, [r0, #12]
   1a796:	b085      	sub	sp, #20
   1a798:	b9a8      	cbnz	r0, 1a7c6 <datagram_handler_flush+0x36>
   1a79a:	e01a      	b.n	1a7d2 <datagram_handler_flush+0x42>
   1a79c:	68e8      	ldr	r0, [r5, #12]
   1a79e:	f7fc fbb1 	bl	16f04 <linked_list_pop>
   1a7a2:	4604      	mov	r4, r0
   1a7a4:	b170      	cbz	r0, 1a7c4 <datagram_handler_flush+0x34>
   1a7a6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a7aa:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a7ae:	e9cd 0100 	strd	r0, r1, [sp]
   1a7b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a7b6:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a7ba:	4668      	mov	r0, sp
   1a7bc:	4798      	blx	r3
   1a7be:	4620      	mov	r0, r4
   1a7c0:	f7f9 f878 	bl	138b4 <nrf_free>
   1a7c4:	68e8      	ldr	r0, [r5, #12]
   1a7c6:	f7fc fbad 	bl	16f24 <linked_list_size_get>
   1a7ca:	2800      	cmp	r0, #0
   1a7cc:	d1e6      	bne.n	1a79c <datagram_handler_flush+0xc>
   1a7ce:	b005      	add	sp, #20
   1a7d0:	bd30      	pop	{r4, r5, pc}
   1a7d2:	2008      	movs	r0, #8
   1a7d4:	b005      	add	sp, #20
   1a7d6:	bd30      	pop	{r4, r5, pc}

0001a7d8 <datagram_handler_free>:
   1a7d8:	b530      	push	{r4, r5, lr}
   1a7da:	4605      	mov	r5, r0
   1a7dc:	68c0      	ldr	r0, [r0, #12]
   1a7de:	b085      	sub	sp, #20
   1a7e0:	b9a0      	cbnz	r0, 1a80c <datagram_handler_free+0x34>
   1a7e2:	e01c      	b.n	1a81e <datagram_handler_free+0x46>
   1a7e4:	f7fc fb8e 	bl	16f04 <linked_list_pop>
   1a7e8:	4604      	mov	r4, r0
   1a7ea:	b170      	cbz	r0, 1a80a <datagram_handler_free+0x32>
   1a7ec:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a7f0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a7f4:	e9cd 0100 	strd	r0, r1, [sp]
   1a7f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a7fc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a800:	4668      	mov	r0, sp
   1a802:	4798      	blx	r3
   1a804:	4620      	mov	r0, r4
   1a806:	f7f9 f855 	bl	138b4 <nrf_free>
   1a80a:	68e8      	ldr	r0, [r5, #12]
   1a80c:	f7fc fb8a 	bl	16f24 <linked_list_size_get>
   1a810:	4604      	mov	r4, r0
   1a812:	68e8      	ldr	r0, [r5, #12]
   1a814:	2c00      	cmp	r4, #0
   1a816:	d1e5      	bne.n	1a7e4 <datagram_handler_free+0xc>
   1a818:	f7f9 f84c 	bl	138b4 <nrf_free>
   1a81c:	60ec      	str	r4, [r5, #12]
   1a81e:	b005      	add	sp, #20
   1a820:	bd30      	pop	{r4, r5, pc}
   1a822:	bf00      	nop

0001a824 <null_handler_init>:
   1a824:	2000      	movs	r0, #0
   1a826:	4770      	bx	lr

0001a828 <null_handler_put>:
   1a828:	b510      	push	{r4, lr}
   1a82a:	460c      	mov	r4, r1
   1a82c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a830:	4620      	mov	r0, r4
   1a832:	4798      	blx	r3
   1a834:	6860      	ldr	r0, [r4, #4]
   1a836:	bd10      	pop	{r4, pc}

0001a838 <null_handler_get>:
   1a838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a83c:	4770      	bx	lr
   1a83e:	bf00      	nop

0001a840 <null_handler_available>:
   1a840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a844:	4770      	bx	lr
   1a846:	bf00      	nop

0001a848 <null_handler_flush>:
   1a848:	2000      	movs	r0, #0
   1a84a:	4770      	bx	lr

0001a84c <null_handler_free>:
   1a84c:	4770      	bx	lr
   1a84e:	bf00      	nop

0001a850 <packet_handler_create>:
   1a850:	2801      	cmp	r0, #1
   1a852:	b538      	push	{r3, r4, r5, lr}
   1a854:	460d      	mov	r5, r1
   1a856:	4614      	mov	r4, r2
   1a858:	d00d      	beq.n	1a876 <packet_handler_create+0x26>
   1a85a:	db11      	blt.n	1a880 <packet_handler_create+0x30>
   1a85c:	2803      	cmp	r0, #3
   1a85e:	dc0f      	bgt.n	1a880 <packet_handler_create+0x30>
   1a860:	2010      	movs	r0, #16
   1a862:	f7f9 f81d 	bl	138a0 <nrf_malloc>
   1a866:	2218      	movs	r2, #24
   1a868:	b120      	cbz	r0, 1a874 <packet_handler_create+0x24>
   1a86a:	4b08      	ldr	r3, [pc, #32]	; (1a88c <packet_handler_create+0x3c>)
   1a86c:	6045      	str	r5, [r0, #4]
   1a86e:	4413      	add	r3, r2
   1a870:	6084      	str	r4, [r0, #8]
   1a872:	6003      	str	r3, [r0, #0]
   1a874:	bd38      	pop	{r3, r4, r5, pc}
   1a876:	2014      	movs	r0, #20
   1a878:	f7f9 f812 	bl	138a0 <nrf_malloc>
   1a87c:	2230      	movs	r2, #48	; 0x30
   1a87e:	e7f3      	b.n	1a868 <packet_handler_create+0x18>
   1a880:	200c      	movs	r0, #12
   1a882:	f7f9 f80d 	bl	138a0 <nrf_malloc>
   1a886:	2200      	movs	r2, #0
   1a888:	e7ee      	b.n	1a868 <packet_handler_create+0x18>
   1a88a:	bf00      	nop
   1a88c:	0001f664 	.word	0x0001f664

0001a890 <packet_handler_delete>:
   1a890:	b510      	push	{r4, lr}
   1a892:	4604      	mov	r4, r0
   1a894:	6803      	ldr	r3, [r0, #0]
   1a896:	691b      	ldr	r3, [r3, #16]
   1a898:	4798      	blx	r3
   1a89a:	6823      	ldr	r3, [r4, #0]
   1a89c:	4620      	mov	r0, r4
   1a89e:	695b      	ldr	r3, [r3, #20]
   1a8a0:	4798      	blx	r3
   1a8a2:	4620      	mov	r0, r4
   1a8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a8a8:	f7f9 b804 	b.w	138b4 <nrf_free>

0001a8ac <stream_handler_init>:
   1a8ac:	b510      	push	{r4, lr}
   1a8ae:	4604      	mov	r4, r0
   1a8b0:	200c      	movs	r0, #12
   1a8b2:	f7f8 fff5 	bl	138a0 <nrf_malloc>
   1a8b6:	60e0      	str	r0, [r4, #12]
   1a8b8:	b128      	cbz	r0, 1a8c6 <stream_handler_init+0x1a>
   1a8ba:	2300      	movs	r3, #0
   1a8bc:	6123      	str	r3, [r4, #16]
   1a8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a8c2:	f7fc baff 	b.w	16ec4 <linked_list_init>
   1a8c6:	2004      	movs	r0, #4
   1a8c8:	bd10      	pop	{r4, pc}
   1a8ca:	bf00      	nop

0001a8cc <stream_handler_put>:
   1a8cc:	b570      	push	{r4, r5, r6, lr}
   1a8ce:	4606      	mov	r6, r0
   1a8d0:	2014      	movs	r0, #20
   1a8d2:	460d      	mov	r5, r1
   1a8d4:	f7f8 ffe4 	bl	138a0 <nrf_malloc>
   1a8d8:	b178      	cbz	r0, 1a8fa <stream_handler_put+0x2e>
   1a8da:	682b      	ldr	r3, [r5, #0]
   1a8dc:	4604      	mov	r4, r0
   1a8de:	6043      	str	r3, [r0, #4]
   1a8e0:	686b      	ldr	r3, [r5, #4]
   1a8e2:	4601      	mov	r1, r0
   1a8e4:	6083      	str	r3, [r0, #8]
   1a8e6:	68eb      	ldr	r3, [r5, #12]
   1a8e8:	60c3      	str	r3, [r0, #12]
   1a8ea:	68ab      	ldr	r3, [r5, #8]
   1a8ec:	6103      	str	r3, [r0, #16]
   1a8ee:	68f0      	ldr	r0, [r6, #12]
   1a8f0:	f7fc faf2 	bl	16ed8 <linked_list_push>
   1a8f4:	b920      	cbnz	r0, 1a900 <stream_handler_put+0x34>
   1a8f6:	6868      	ldr	r0, [r5, #4]
   1a8f8:	bd70      	pop	{r4, r5, r6, pc}
   1a8fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a8fe:	bd70      	pop	{r4, r5, r6, pc}
   1a900:	4620      	mov	r0, r4
   1a902:	f7f8 ffd7 	bl	138b4 <nrf_free>
   1a906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a90a:	bd70      	pop	{r4, r5, r6, pc}

0001a90c <stream_handler_get>:
   1a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a910:	4682      	mov	sl, r0
   1a912:	b087      	sub	sp, #28
   1a914:	68c0      	ldr	r0, [r0, #12]
   1a916:	4689      	mov	r9, r1
   1a918:	4693      	mov	fp, r2
   1a91a:	f7fc fafd 	bl	16f18 <linked_list_peek>
   1a91e:	2800      	cmp	r0, #0
   1a920:	d072      	beq.n	1aa08 <stream_handler_get+0xfc>
   1a922:	4605      	mov	r5, r0
   1a924:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1a928:	b120      	cbz	r0, 1a934 <stream_handler_get+0x28>
   1a92a:	692b      	ldr	r3, [r5, #16]
   1a92c:	b113      	cbz	r3, 1a934 <stream_handler_get+0x28>
   1a92e:	68ea      	ldr	r2, [r5, #12]
   1a930:	2a00      	cmp	r2, #0
   1a932:	d15c      	bne.n	1a9ee <stream_handler_get+0xe2>
   1a934:	2300      	movs	r3, #0
   1a936:	f8c9 300c 	str.w	r3, [r9, #12]
   1a93a:	f8d9 2000 	ldr.w	r2, [r9]
   1a93e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1a942:	f8da 1010 	ldr.w	r1, [sl, #16]
   1a946:	9201      	str	r2, [sp, #4]
   1a948:	f1b8 0f00 	cmp.w	r8, #0
   1a94c:	d05a      	beq.n	1aa04 <stream_handler_get+0xf8>
   1a94e:	f00b 0308 	and.w	r3, fp, #8
   1a952:	2400      	movs	r4, #0
   1a954:	9300      	str	r3, [sp, #0]
   1a956:	e010      	b.n	1a97a <stream_handler_get+0x6e>
   1a958:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a95c:	443b      	add	r3, r7
   1a95e:	f8ca 3010 	str.w	r3, [sl, #16]
   1a962:	4628      	mov	r0, r5
   1a964:	f7fc fae0 	bl	16f28 <linked_list_get_next>
   1a968:	443c      	add	r4, r7
   1a96a:	4605      	mov	r5, r0
   1a96c:	2800      	cmp	r0, #0
   1a96e:	d038      	beq.n	1a9e2 <stream_handler_get+0xd6>
   1a970:	45a0      	cmp	r8, r4
   1a972:	d936      	bls.n	1a9e2 <stream_handler_get+0xd6>
   1a974:	2100      	movs	r1, #0
   1a976:	f8d9 2000 	ldr.w	r2, [r9]
   1a97a:	68ae      	ldr	r6, [r5, #8]
   1a97c:	eba8 0b04 	sub.w	fp, r8, r4
   1a980:	1a76      	subs	r6, r6, r1
   1a982:	455e      	cmp	r6, fp
   1a984:	4637      	mov	r7, r6
   1a986:	bf28      	it	cs
   1a988:	465f      	movcs	r7, fp
   1a98a:	b132      	cbz	r2, 1a99a <stream_handler_get+0x8e>
   1a98c:	6868      	ldr	r0, [r5, #4]
   1a98e:	9b01      	ldr	r3, [sp, #4]
   1a990:	4401      	add	r1, r0
   1a992:	463a      	mov	r2, r7
   1a994:	1918      	adds	r0, r3, r4
   1a996:	f002 fd2c 	bl	1d3f2 <memcpy>
   1a99a:	9b00      	ldr	r3, [sp, #0]
   1a99c:	2b00      	cmp	r3, #0
   1a99e:	d1e0      	bne.n	1a962 <stream_handler_get+0x56>
   1a9a0:	455e      	cmp	r6, fp
   1a9a2:	d8d9      	bhi.n	1a958 <stream_handler_get+0x4c>
   1a9a4:	f8da 000c 	ldr.w	r0, [sl, #12]
   1a9a8:	f7fc faac 	bl	16f04 <linked_list_pop>
   1a9ac:	4606      	mov	r6, r0
   1a9ae:	b170      	cbz	r0, 1a9ce <stream_handler_get+0xc2>
   1a9b0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1a9b4:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1a9b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a9bc:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1a9c0:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1a9c4:	a802      	add	r0, sp, #8
   1a9c6:	4798      	blx	r3
   1a9c8:	4630      	mov	r0, r6
   1a9ca:	f7f8 ff73 	bl	138b4 <nrf_free>
   1a9ce:	2300      	movs	r3, #0
   1a9d0:	4628      	mov	r0, r5
   1a9d2:	f8ca 3010 	str.w	r3, [sl, #16]
   1a9d6:	f7fc faa7 	bl	16f28 <linked_list_get_next>
   1a9da:	443c      	add	r4, r7
   1a9dc:	4605      	mov	r5, r0
   1a9de:	2800      	cmp	r0, #0
   1a9e0:	d1c6      	bne.n	1a970 <stream_handler_get+0x64>
   1a9e2:	4620      	mov	r0, r4
   1a9e4:	f8c9 4004 	str.w	r4, [r9, #4]
   1a9e8:	b007      	add	sp, #28
   1a9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1a9f2:	429a      	cmp	r2, r3
   1a9f4:	bf28      	it	cs
   1a9f6:	461a      	movcs	r2, r3
   1a9f8:	f8c9 200c 	str.w	r2, [r9, #12]
   1a9fc:	6929      	ldr	r1, [r5, #16]
   1a9fe:	f002 fcf8 	bl	1d3f2 <memcpy>
   1aa02:	e79a      	b.n	1a93a <stream_handler_get+0x2e>
   1aa04:	4644      	mov	r4, r8
   1aa06:	e7ec      	b.n	1a9e2 <stream_handler_get+0xd6>
   1aa08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa0c:	e7ec      	b.n	1a9e8 <stream_handler_get+0xdc>
   1aa0e:	bf00      	nop

0001aa10 <stream_handler_available>:
   1aa10:	b510      	push	{r4, lr}
   1aa12:	4604      	mov	r4, r0
   1aa14:	68c0      	ldr	r0, [r0, #12]
   1aa16:	f7fc fa7f 	bl	16f18 <linked_list_peek>
   1aa1a:	b150      	cbz	r0, 1aa32 <stream_handler_available+0x22>
   1aa1c:	6924      	ldr	r4, [r4, #16]
   1aa1e:	4264      	negs	r4, r4
   1aa20:	6883      	ldr	r3, [r0, #8]
   1aa22:	441c      	add	r4, r3
   1aa24:	f7fc fa80 	bl	16f28 <linked_list_get_next>
   1aa28:	2800      	cmp	r0, #0
   1aa2a:	d1f9      	bne.n	1aa20 <stream_handler_available+0x10>
   1aa2c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1aa30:	bd10      	pop	{r4, pc}
   1aa32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa36:	bd10      	pop	{r4, pc}

0001aa38 <stream_handler_flush>:
   1aa38:	b530      	push	{r4, r5, lr}
   1aa3a:	4605      	mov	r5, r0
   1aa3c:	68c0      	ldr	r0, [r0, #12]
   1aa3e:	b085      	sub	sp, #20
   1aa40:	b9a8      	cbnz	r0, 1aa6e <stream_handler_flush+0x36>
   1aa42:	e01a      	b.n	1aa7a <stream_handler_flush+0x42>
   1aa44:	68e8      	ldr	r0, [r5, #12]
   1aa46:	f7fc fa5d 	bl	16f04 <linked_list_pop>
   1aa4a:	4604      	mov	r4, r0
   1aa4c:	b170      	cbz	r0, 1aa6c <stream_handler_flush+0x34>
   1aa4e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1aa52:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1aa56:	e9cd 0100 	strd	r0, r1, [sp]
   1aa5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aa5e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1aa62:	4668      	mov	r0, sp
   1aa64:	4798      	blx	r3
   1aa66:	4620      	mov	r0, r4
   1aa68:	f7f8 ff24 	bl	138b4 <nrf_free>
   1aa6c:	68e8      	ldr	r0, [r5, #12]
   1aa6e:	f7fc fa59 	bl	16f24 <linked_list_size_get>
   1aa72:	2800      	cmp	r0, #0
   1aa74:	d1e6      	bne.n	1aa44 <stream_handler_flush+0xc>
   1aa76:	b005      	add	sp, #20
   1aa78:	bd30      	pop	{r4, r5, pc}
   1aa7a:	2008      	movs	r0, #8
   1aa7c:	b005      	add	sp, #20
   1aa7e:	bd30      	pop	{r4, r5, pc}

0001aa80 <stream_handler_free>:
   1aa80:	b530      	push	{r4, r5, lr}
   1aa82:	4605      	mov	r5, r0
   1aa84:	68c0      	ldr	r0, [r0, #12]
   1aa86:	b085      	sub	sp, #20
   1aa88:	b9a0      	cbnz	r0, 1aab4 <stream_handler_free+0x34>
   1aa8a:	e01c      	b.n	1aac6 <stream_handler_free+0x46>
   1aa8c:	f7fc fa3a 	bl	16f04 <linked_list_pop>
   1aa90:	4604      	mov	r4, r0
   1aa92:	b170      	cbz	r0, 1aab2 <stream_handler_free+0x32>
   1aa94:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1aa98:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1aa9c:	e9cd 0100 	strd	r0, r1, [sp]
   1aaa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1aaa4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1aaa8:	4668      	mov	r0, sp
   1aaaa:	4798      	blx	r3
   1aaac:	4620      	mov	r0, r4
   1aaae:	f7f8 ff01 	bl	138b4 <nrf_free>
   1aab2:	68e8      	ldr	r0, [r5, #12]
   1aab4:	f7fc fa36 	bl	16f24 <linked_list_size_get>
   1aab8:	4604      	mov	r4, r0
   1aaba:	68e8      	ldr	r0, [r5, #12]
   1aabc:	2c00      	cmp	r4, #0
   1aabe:	d1e5      	bne.n	1aa8c <stream_handler_free+0xc>
   1aac0:	f7f8 fef8 	bl	138b4 <nrf_free>
   1aac4:	60ec      	str	r4, [r5, #12]
   1aac6:	b005      	add	sp, #20
   1aac8:	bd30      	pop	{r4, r5, pc}
   1aaca:	bf00      	nop

0001aacc <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1aacc:	4a07      	ldr	r2, [pc, #28]	; (1aaec <SystemInit+0x20>)
   1aace:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1aad2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1aad6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1aada:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1aade:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1aae2:	4b03      	ldr	r3, [pc, #12]	; (1aaf0 <SystemInit+0x24>)
   1aae4:	4a03      	ldr	r2, [pc, #12]	; (1aaf4 <SystemInit+0x28>)
   1aae6:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1aae8:	4770      	bx	lr
   1aaea:	bf00      	nop
   1aaec:	e000ed00 	.word	0xe000ed00
   1aaf0:	2002c530 	.word	0x2002c530
   1aaf4:	03d09000 	.word	0x03d09000

0001aaf8 <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   1aaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aafc:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1aafe:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ab00:	2024      	movs	r0, #36	; 0x24
   1ab02:	4d42      	ldr	r5, [pc, #264]	; (1ac0c <nrfx_uarte_init+0x114>)
   1ab04:	fb00 5004 	mla	r0, r0, r4, r5
   1ab08:	f890 0020 	ldrb.w	r0, [r0, #32]
   1ab0c:	2800      	cmp	r0, #0
   1ab0e:	d17a      	bne.n	1ac06 <nrfx_uarte_init+0x10e>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   1ab10:	680f      	ldr	r7, [r1, #0]
   1ab12:	1c7b      	adds	r3, r7, #1
   1ab14:	d009      	beq.n	1ab2a <nrfx_uarte_init+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ab16:	2301      	movs	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ab18:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
   1ab1c:	483c      	ldr	r0, [pc, #240]	; (1ac10 <nrfx_uarte_init+0x118>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ab1e:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1ab20:	6083      	str	r3, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ab22:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1ab26:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   1ab2a:	f8d1 c004 	ldr.w	ip, [r1, #4]
                    | (uint32_t)p_cfg->hwfc;
   1ab2e:	f891 801b 	ldrb.w	r8, [r1, #27]
   1ab32:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1ab36:	bf1f      	itttt	ne
   1ab38:	f04f 0e00 	movne.w	lr, #0
   1ab3c:	4834      	ldrne	r0, [pc, #208]	; (1ac10 <nrfx_uarte_init+0x118>)
   1ab3e:	f10c 0380 	addne.w	r3, ip, #128	; 0x80
   1ab42:	f840 e023 	strne.w	lr, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   1ab46:	6948      	ldr	r0, [r1, #20]
   1ab48:	6833      	ldr	r3, [r6, #0]
   1ab4a:	f891 e019 	ldrb.w	lr, [r1, #25]
    p_reg->BAUDRATE = baudrate;
   1ab4e:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   1ab52:	7e88      	ldrb	r0, [r1, #26]
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   1ab54:	f1be 0f01 	cmp.w	lr, #1
   1ab58:	ea40 0008 	orr.w	r0, r0, r8
   1ab5c:	ea4e 0000 	orr.w	r0, lr, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ab60:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->PSEL.TXD = pseltxd;
   1ab64:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1ab68:	f8c3 c514 	str.w	ip, [r3, #1300]	; 0x514
   1ab6c:	d120      	bne.n	1abb0 <nrfx_uarte_init+0xb8>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   1ab6e:	688f      	ldr	r7, [r1, #8]
   1ab70:	1c78      	adds	r0, r7, #1
   1ab72:	bf1f      	itttt	ne
   1ab74:	f04f 0e00 	movne.w	lr, #0
   1ab78:	f8df c094 	ldrne.w	ip, [pc, #148]	; 1ac10 <nrfx_uarte_init+0x118>
   1ab7c:	f107 0080 	addne.w	r0, r7, #128	; 0x80
   1ab80:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   1ab84:	68c8      	ldr	r0, [r1, #12]
   1ab86:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ab8a:	d00d      	beq.n	1aba8 <nrfx_uarte_init+0xb0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ab8c:	f04f 0c01 	mov.w	ip, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ab90:	f04f 0803 	mov.w	r8, #3
    p_reg->OUTSET = set_mask;
   1ab94:	f8df e078 	ldr.w	lr, [pc, #120]	; 1ac10 <nrfx_uarte_init+0x118>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ab98:	fa0c fc00 	lsl.w	ip, ip, r0
    p_reg->OUTSET = set_mask;
   1ab9c:	f8ce c008 	str.w	ip, [lr, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1aba0:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   1aba4:	f84e 802c 	str.w	r8, [lr, ip, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1aba8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1abac:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    apply_config(p_instance, p_config);

    p_cb->handler   = event_handler;
   1abb0:	2324      	movs	r3, #36	; 0x24
   1abb2:	4363      	muls	r3, r4
    p_cb->p_context = p_config->p_context;
   1abb4:	6909      	ldr	r1, [r1, #16]
    p_cb->handler   = event_handler;
   1abb6:	18e8      	adds	r0, r5, r3
   1abb8:	6042      	str	r2, [r0, #4]
    p_cb->p_context = p_config->p_context;
   1abba:	50e9      	str	r1, [r5, r3]

    if (p_cb->handler)
   1abbc:	b192      	cbz	r2, 1abe4 <nrfx_uarte_init+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1abbe:	2300      	movs	r3, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   1abc0:	6830      	ldr	r0, [r6, #0]
   1abc2:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1abc6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   1abca:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1abce:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   1abd2:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   1abd6:	4b0f      	ldr	r3, [pc, #60]	; (1ac14 <nrfx_uarte_init+0x11c>)
   1abd8:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   1abdc:	f340 3007 	sbfx	r0, r0, #12, #8
   1abe0:	f7f4 fd38 	bl	f654 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1abe4:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   1abe6:	6833      	ldr	r3, [r6, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1abe8:	480b      	ldr	r0, [pc, #44]	; (1ac18 <nrfx_uarte_init+0x120>)
   1abea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   1abee:	2324      	movs	r3, #36	; 0x24
   1abf0:	2200      	movs	r2, #0
   1abf2:	fb03 5304 	mla	r3, r3, r4, r5
    p_cb->rx_secondary_buffer_length = 0;
   1abf6:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   1abfa:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   1abfc:	2201      	movs	r2, #1
   1abfe:	f883 2020 	strb.w	r2, [r3, #32]
}
   1ac02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1ac06:	4805      	ldr	r0, [pc, #20]	; (1ac1c <nrfx_uarte_init+0x124>)
   1ac08:	e7fb      	b.n	1ac02 <nrfx_uarte_init+0x10a>
   1ac0a:	bf00      	nop
   1ac0c:	20020b18 	.word	0x20020b18
   1ac10:	40842500 	.word	0x40842500
   1ac14:	00420310 	.word	0x00420310
   1ac18:	0bad0000 	.word	0x0bad0000
   1ac1c:	0bad0005 	.word	0x0bad0005

0001ac20 <nrfx_uarte_tx>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1ac20:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   1ac24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   1ac28:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!nrfx_is_in_ram(p_data))
   1ac2a:	d12e      	bne.n	1ac8a <nrfx_uarte_tx+0x6a>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1ac2c:	2424      	movs	r4, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ac2e:	7905      	ldrb	r5, [r0, #4]
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   1ac30:	4f19      	ldr	r7, [pc, #100]	; (1ac98 <nrfx_uarte_tx+0x78>)
   1ac32:	fb04 7405 	mla	r4, r4, r5, r7
   1ac36:	6966      	ldr	r6, [r4, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   1ac38:	bb4e      	cbnz	r6, 1ac8e <nrfx_uarte_tx+0x6e>
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   1ac3a:	6803      	ldr	r3, [r0, #0]
    p_cb->tx_buffer_length = length;
   1ac3c:	6162      	str	r2, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac3e:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
   1ac42:	f8c3 6158 	str.w	r6, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   1ac46:	6962      	ldr	r2, [r4, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ac48:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ac4c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac50:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   1ac52:	60a1      	str	r1, [r4, #8]
   1ac54:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   1ac56:	6862      	ldr	r2, [r4, #4]
   1ac58:	b9da      	cbnz	r2, 1ac92 <nrfx_uarte_tx+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac5a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1ac5e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   1ac62:	b919      	cbnz	r1, 1ac6c <nrfx_uarte_tx+0x4c>
   1ac64:	2a00      	cmp	r2, #0
   1ac66:	d0f8      	beq.n	1ac5a <nrfx_uarte_tx+0x3a>
            err_code = NRFX_ERROR_FORBIDDEN;
   1ac68:	480c      	ldr	r0, [pc, #48]	; (1ac9c <nrfx_uarte_tx+0x7c>)
   1ac6a:	e008      	b.n	1ac7e <nrfx_uarte_tx+0x5e>
        if (txstopped)
   1ac6c:	2a00      	cmp	r2, #0
   1ac6e:	d1fb      	bne.n	1ac68 <nrfx_uarte_tx+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac70:	2201      	movs	r2, #1
   1ac72:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac74:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   1ac78:	2a00      	cmp	r2, #0
   1ac7a:	d0fb      	beq.n	1ac74 <nrfx_uarte_tx+0x54>
    err_code = NRFX_SUCCESS;
   1ac7c:	4808      	ldr	r0, [pc, #32]	; (1aca0 <nrfx_uarte_tx+0x80>)
        p_cb->tx_buffer_length = 0;
   1ac7e:	2324      	movs	r3, #36	; 0x24
   1ac80:	fb03 7505 	mla	r5, r3, r5, r7
   1ac84:	2300      	movs	r3, #0
   1ac86:	616b      	str	r3, [r5, #20]
}
   1ac88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
   1ac8a:	4806      	ldr	r0, [pc, #24]	; (1aca4 <nrfx_uarte_tx+0x84>)
   1ac8c:	e7fc      	b.n	1ac88 <nrfx_uarte_tx+0x68>
        return err_code;
   1ac8e:	4806      	ldr	r0, [pc, #24]	; (1aca8 <nrfx_uarte_tx+0x88>)
   1ac90:	e7fa      	b.n	1ac88 <nrfx_uarte_tx+0x68>
    err_code = NRFX_SUCCESS;
   1ac92:	4803      	ldr	r0, [pc, #12]	; (1aca0 <nrfx_uarte_tx+0x80>)
   1ac94:	e7f8      	b.n	1ac88 <nrfx_uarte_tx+0x68>
   1ac96:	bf00      	nop
   1ac98:	20020b18 	.word	0x20020b18
   1ac9c:	0bad0008 	.word	0x0bad0008
   1aca0:	0bad0000 	.word	0x0bad0000
   1aca4:	0bad000a 	.word	0x0bad000a
   1aca8:	0bad000b 	.word	0x0bad000b

0001acac <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   1acac:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1acae:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1acb0:	4b08      	ldr	r3, [pc, #32]	; (1acd4 <z_sys_device_do_config_level+0x28>)
   1acb2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1acb6:	3001      	adds	r0, #1
   1acb8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1acbc:	42a5      	cmp	r5, r4
   1acbe:	d800      	bhi.n	1acc2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1acc0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1acc2:	6823      	ldr	r3, [r4, #0]
   1acc4:	4620      	mov	r0, r4
   1acc6:	685b      	ldr	r3, [r3, #4]
   1acc8:	4798      	blx	r3
		if (retval != 0) {
   1acca:	b100      	cbz	r0, 1acce <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1accc:	6066      	str	r6, [r4, #4]
								info++) {
   1acce:	340c      	adds	r4, #12
   1acd0:	e7f4      	b.n	1acbc <z_sys_device_do_config_level+0x10>
   1acd2:	bf00      	nop
   1acd4:	0001f6ac 	.word	0x0001f6ac

0001acd8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1acd8:	4b10      	ldr	r3, [pc, #64]	; (1ad1c <z_impl_device_get_binding+0x44>)
{
   1acda:	b570      	push	{r4, r5, r6, lr}
   1acdc:	4605      	mov	r5, r0
   1acde:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1ace0:	4c0f      	ldr	r4, [pc, #60]	; (1ad20 <z_impl_device_get_binding+0x48>)
   1ace2:	429c      	cmp	r4, r3
   1ace4:	d104      	bne.n	1acf0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1ace6:	4c0e      	ldr	r4, [pc, #56]	; (1ad20 <z_impl_device_get_binding+0x48>)
   1ace8:	42b4      	cmp	r4, r6
   1acea:	d109      	bne.n	1ad00 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1acec:	2400      	movs	r4, #0
   1acee:	e012      	b.n	1ad16 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1acf0:	6862      	ldr	r2, [r4, #4]
   1acf2:	b11a      	cbz	r2, 1acfc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1acf4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1acf6:	6812      	ldr	r2, [r2, #0]
   1acf8:	42aa      	cmp	r2, r5
   1acfa:	d00c      	beq.n	1ad16 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1acfc:	340c      	adds	r4, #12
   1acfe:	e7f0      	b.n	1ace2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1ad00:	6863      	ldr	r3, [r4, #4]
   1ad02:	b90b      	cbnz	r3, 1ad08 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1ad04:	340c      	adds	r4, #12
   1ad06:	e7ef      	b.n	1ace8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1ad08:	6823      	ldr	r3, [r4, #0]
   1ad0a:	4628      	mov	r0, r5
   1ad0c:	6819      	ldr	r1, [r3, #0]
   1ad0e:	f002 fb3c 	bl	1d38a <strcmp>
   1ad12:	2800      	cmp	r0, #0
   1ad14:	d1f6      	bne.n	1ad04 <z_impl_device_get_binding+0x2c>
}
   1ad16:	4620      	mov	r0, r4
   1ad18:	bd70      	pop	{r4, r5, r6, pc}
   1ad1a:	bf00      	nop
   1ad1c:	2002c620 	.word	0x2002c620
   1ad20:	2002c53c 	.word	0x2002c53c

0001ad24 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1ad24:	4b01      	ldr	r3, [pc, #4]	; (1ad2c <z_impl_z_errno+0x8>)
   1ad26:	6898      	ldr	r0, [r3, #8]
}
   1ad28:	3054      	adds	r0, #84	; 0x54
   1ad2a:	4770      	bx	lr
   1ad2c:	20024d00 	.word	0x20024d00

0001ad30 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ad30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ad34:	4605      	mov	r5, r0
   1ad36:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   1ad38:	f000 fe9a 	bl	1ba70 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1ad3c:	2201      	movs	r2, #1
   1ad3e:	f04f 0300 	mov.w	r3, #0
   1ad42:	4c26      	ldr	r4, [pc, #152]	; (1addc <z_fatal_error+0xac>)
   1ad44:	f362 0307 	bfi	r3, r2, #0, #8
   1ad48:	4a25      	ldr	r2, [pc, #148]	; (1ade0 <z_fatal_error+0xb0>)
   1ad4a:	2d04      	cmp	r5, #4
   1ad4c:	eba4 0402 	sub.w	r4, r4, r2
   1ad50:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1ad54:	bf98      	it	ls
   1ad56:	4a23      	ldrls	r2, [pc, #140]	; (1ade4 <z_fatal_error+0xb4>)
   1ad58:	f364 138f 	bfi	r3, r4, #6, #10
   1ad5c:	f8ad 3000 	strh.w	r3, [sp]
   1ad60:	4606      	mov	r6, r0
   1ad62:	f04f 0300 	mov.w	r3, #0
   1ad66:	bf94      	ite	ls
   1ad68:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1ad6c:	4a1e      	ldrhi	r2, [pc, #120]	; (1ade8 <z_fatal_error+0xb8>)
   1ad6e:	4629      	mov	r1, r5
   1ad70:	481e      	ldr	r0, [pc, #120]	; (1adec <z_fatal_error+0xbc>)
   1ad72:	f001 fe01 	bl	1c978 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1ad76:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1ad7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   1ad7e:	b14b      	cbz	r3, 1ad94 <z_fatal_error+0x64>
		LOG_ERR("Fault during interrupt handling\n");
   1ad80:	f04f 0100 	mov.w	r1, #0
   1ad84:	2301      	movs	r3, #1
   1ad86:	f363 0107 	bfi	r1, r3, #0, #8
   1ad8a:	f364 118f 	bfi	r1, r4, #6, #10
   1ad8e:	4818      	ldr	r0, [pc, #96]	; (1adf0 <z_fatal_error+0xc0>)
   1ad90:	f001 fdb9 	bl	1c906 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1ad94:	f04f 0700 	mov.w	r7, #0
   1ad98:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   1ad9a:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   1ad9c:	f363 0707 	bfi	r7, r3, #0, #8
   1ada0:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   1ada4:	f003 fe6f 	bl	1ea86 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1ada8:	b1b0      	cbz	r0, 1add8 <z_fatal_error+0xa8>
   1adaa:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1adac:	4b11      	ldr	r3, [pc, #68]	; (1adf4 <z_fatal_error+0xc4>)
   1adae:	2a00      	cmp	r2, #0
   1adb0:	bf08      	it	eq
   1adb2:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1adb4:	f7f3 ff92 	bl	ecdc <log_strdup>
   1adb8:	463b      	mov	r3, r7
   1adba:	4602      	mov	r2, r0
   1adbc:	4631      	mov	r1, r6
   1adbe:	480e      	ldr	r0, [pc, #56]	; (1adf8 <z_fatal_error+0xc8>)
   1adc0:	f001 fdc2 	bl	1c948 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1adc4:	4641      	mov	r1, r8
   1adc6:	4628      	mov	r0, r5
   1adc8:	f7f7 fbce 	bl	12568 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   1adcc:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   1adce:	b002      	add	sp, #8
   1add0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1add4:	f7f5 b89e 	b.w	ff14 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1add8:	4806      	ldr	r0, [pc, #24]	; (1adf4 <z_fatal_error+0xc4>)
   1adda:	e7eb      	b.n	1adb4 <z_fatal_error+0x84>
   1addc:	0001f16c 	.word	0x0001f16c
   1ade0:	0001f10c 	.word	0x0001f10c
   1ade4:	0001f6c4 	.word	0x0001f6c4
   1ade8:	00020c82 	.word	0x00020c82
   1adec:	00020c98 	.word	0x00020c98
   1adf0:	00020cc0 	.word	0x00020cc0
   1adf4:	00020c90 	.word	0x00020c90
   1adf8:	00020ce1 	.word	0x00020ce1

0001adfc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1adfc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1adfe:	4d0b      	ldr	r5, [pc, #44]	; (1ae2c <idle+0x30>)
	__asm__ volatile(
   1ae00:	f04f 0220 	mov.w	r2, #32
   1ae04:	f3ef 8311 	mrs	r3, BASEPRI
   1ae08:	f382 8811 	msr	BASEPRI, r2
   1ae0c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   1ae10:	f003 fe91 	bl	1eb36 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ae14:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   1ae16:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ae18:	2802      	cmp	r0, #2
   1ae1a:	bfd8      	it	le
   1ae1c:	4608      	movle	r0, r1
   1ae1e:	f003 fe9a 	bl	1eb56 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1ae22:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1ae24:	f7f4 fca0 	bl	f768 <arch_cpu_idle>
   1ae28:	e7ea      	b.n	1ae00 <idle+0x4>
   1ae2a:	bf00      	nop
   1ae2c:	20024d00 	.word	0x20024d00

0001ae30 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1ae30:	4802      	ldr	r0, [pc, #8]	; (1ae3c <z_bss_zero+0xc>)
   1ae32:	4a03      	ldr	r2, [pc, #12]	; (1ae40 <z_bss_zero+0x10>)
   1ae34:	2100      	movs	r1, #0
   1ae36:	1a12      	subs	r2, r2, r0
   1ae38:	f002 bb05 	b.w	1d446 <memset>
   1ae3c:	20020000 	.word	0x20020000
   1ae40:	20026688 	.word	0x20026688

0001ae44 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ae44:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1ae46:	4806      	ldr	r0, [pc, #24]	; (1ae60 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1ae48:	4a06      	ldr	r2, [pc, #24]	; (1ae64 <z_data_copy+0x20>)
   1ae4a:	4907      	ldr	r1, [pc, #28]	; (1ae68 <z_data_copy+0x24>)
   1ae4c:	1a12      	subs	r2, r2, r0
   1ae4e:	f002 fad0 	bl	1d3f2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ae52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1ae56:	4a05      	ldr	r2, [pc, #20]	; (1ae6c <z_data_copy+0x28>)
   1ae58:	4905      	ldr	r1, [pc, #20]	; (1ae70 <z_data_copy+0x2c>)
   1ae5a:	4806      	ldr	r0, [pc, #24]	; (1ae74 <z_data_copy+0x30>)
   1ae5c:	f002 bac9 	b.w	1d3f2 <memcpy>
   1ae60:	2002c4dc 	.word	0x2002c4dc
   1ae64:	2002c71c 	.word	0x2002c71c
   1ae68:	00020d48 	.word	0x00020d48
   1ae6c:	00000000 	.word	0x00000000
   1ae70:	00020d48 	.word	0x00020d48
   1ae74:	20020000 	.word	0x20020000

0001ae78 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1ae78:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ae7a:	2002      	movs	r0, #2
   1ae7c:	f7ff ff16 	bl	1acac <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   1ae80:	4a08      	ldr	r2, [pc, #32]	; (1aea4 <bg_thread_main+0x2c>)
   1ae82:	4909      	ldr	r1, [pc, #36]	; (1aea8 <bg_thread_main+0x30>)
   1ae84:	4809      	ldr	r0, [pc, #36]	; (1aeac <bg_thread_main+0x34>)
   1ae86:	f001 fd0b 	bl	1c8a0 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1ae8a:	2003      	movs	r0, #3
   1ae8c:	f7ff ff0e 	bl	1acac <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1ae90:	f000 ff38 	bl	1bd04 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1ae94:	f001 f974 	bl	1c180 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ae98:	4a05      	ldr	r2, [pc, #20]	; (1aeb0 <bg_thread_main+0x38>)
   1ae9a:	7b13      	ldrb	r3, [r2, #12]
   1ae9c:	f023 0301 	bic.w	r3, r3, #1
   1aea0:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1aea2:	bd08      	pop	{r3, pc}
   1aea4:	0001fb65 	.word	0x0001fb65
   1aea8:	00020cf9 	.word	0x00020cf9
   1aeac:	00020cff 	.word	0x00020cff
   1aeb0:	20020bec 	.word	0x20020bec

0001aeb4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1aeb4:	b580      	push	{r7, lr}
   1aeb6:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1aeb8:	f7f3 fd84 	bl	e9c4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   1aebc:	4b33      	ldr	r3, [pc, #204]	; (1af8c <z_cstart+0xd8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1aebe:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aec2:	2400      	movs	r4, #0
   1aec4:	23e0      	movs	r3, #224	; 0xe0
   1aec6:	4d32      	ldr	r5, [pc, #200]	; (1af90 <z_cstart+0xdc>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   1aec8:	2701      	movs	r7, #1
   1aeca:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1aece:	77ec      	strb	r4, [r5, #31]
   1aed0:	762c      	strb	r4, [r5, #24]
   1aed2:	766c      	strb	r4, [r5, #25]
   1aed4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1aed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1aed8:	4e2e      	ldr	r6, [pc, #184]	; (1af94 <z_cstart+0xe0>)
   1aeda:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1aede:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1aee0:	f7f4 fff2 	bl	fec8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1aee4:	f7f4 fc3a 	bl	f75c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1aee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aeec:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1aeee:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   1aef0:	ab06      	add	r3, sp, #24
   1aef2:	22b0      	movs	r2, #176	; 0xb0
   1aef4:	4621      	mov	r1, r4
   1aef6:	4618      	mov	r0, r3
   1aef8:	f002 faa5 	bl	1d446 <memset>
	_current = &dummy_thread;
   1aefc:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1aefe:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1af00:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1af04:	f7ff fed2 	bl	1acac <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1af08:	4638      	mov	r0, r7
   1af0a:	f7ff fecf 	bl	1acac <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   1af0e:	4d22      	ldr	r5, [pc, #136]	; (1af98 <z_cstart+0xe4>)
	z_sched_init();
   1af10:	f000 fd2e 	bl	1b970 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1af14:	4b21      	ldr	r3, [pc, #132]	; (1af9c <z_cstart+0xe8>)
   1af16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1af1a:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1af1e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1af22:	4b1f      	ldr	r3, [pc, #124]	; (1afa0 <z_cstart+0xec>)
   1af24:	e9cd 4400 	strd	r4, r4, [sp]
   1af28:	491e      	ldr	r1, [pc, #120]	; (1afa4 <z_cstart+0xf0>)
   1af2a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1af2c:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   1af2e:	f000 fe49 	bl	1bbc4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1af32:	7b6b      	ldrb	r3, [r5, #13]
   1af34:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1af38:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1af3c:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1af3e:	d104      	bne.n	1af4a <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1af40:	69ab      	ldr	r3, [r5, #24]
   1af42:	b913      	cbnz	r3, 1af4a <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   1af44:	4628      	mov	r0, r5
   1af46:	f000 fb53 	bl	1b5f0 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1af4a:	4b17      	ldr	r3, [pc, #92]	; (1afa8 <z_cstart+0xf4>)
   1af4c:	2201      	movs	r2, #1
   1af4e:	9305      	str	r3, [sp, #20]
   1af50:	230f      	movs	r3, #15
   1af52:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1af56:	2300      	movs	r3, #0
   1af58:	4d14      	ldr	r5, [pc, #80]	; (1afac <z_cstart+0xf8>)
   1af5a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1af5e:	9300      	str	r3, [sp, #0]
   1af60:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1af64:	4b12      	ldr	r3, [pc, #72]	; (1afb0 <z_cstart+0xfc>)
   1af66:	4913      	ldr	r1, [pc, #76]	; (1afb4 <z_cstart+0x100>)
   1af68:	4628      	mov	r0, r5
   1af6a:	f000 fe2b 	bl	1bbc4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1af6e:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1af70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1af74:	f023 0304 	bic.w	r3, r3, #4
   1af78:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1af7a:	4b0f      	ldr	r3, [pc, #60]	; (1afb8 <z_cstart+0x104>)
   1af7c:	4909      	ldr	r1, [pc, #36]	; (1afa4 <z_cstart+0xf0>)
	list->tail = (sys_dnode_t *)list;
   1af7e:	e9c6 3306 	strd	r3, r3, [r6, #24]
   1af82:	4805      	ldr	r0, [pc, #20]	; (1af98 <z_cstart+0xe4>)
   1af84:	4b06      	ldr	r3, [pc, #24]	; (1afa0 <z_cstart+0xec>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1af86:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1af88:	f7f4 fbbe 	bl	f708 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1af8c:	20028ac8 	.word	0x20028ac8
   1af90:	e000ed00 	.word	0xe000ed00
   1af94:	20024d00 	.word	0x20024d00
   1af98:	20020bec 	.word	0x20020bec
   1af9c:	00020d2b 	.word	0x00020d2b
   1afa0:	0001ae79 	.word	0x0001ae79
   1afa4:	20027188 	.word	0x20027188
   1afa8:	00020d30 	.word	0x00020d30
   1afac:	20020b3c 	.word	0x20020b3c
   1afb0:	0001adfd 	.word	0x0001adfd
   1afb4:	20028188 	.word	0x20028188
   1afb8:	20024d18 	.word	0x20024d18

0001afbc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1afbc:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1afbe:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1afc0:	4b0a      	ldr	r3, [pc, #40]	; (1afec <init_mem_slab_module+0x30>)
   1afc2:	480b      	ldr	r0, [pc, #44]	; (1aff0 <init_mem_slab_module+0x34>)
   1afc4:	4283      	cmp	r3, r0
   1afc6:	d301      	bcc.n	1afcc <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1afc8:	2000      	movs	r0, #0
   1afca:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   1afcc:	2100      	movs	r1, #0
	p = slab->buffer;
   1afce:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1afd0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1afd2:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1afd4:	42a9      	cmp	r1, r5
   1afd6:	d101      	bne.n	1afdc <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1afd8:	331c      	adds	r3, #28
   1afda:	e7f3      	b.n	1afc4 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1afdc:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1afde:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   1afe0:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1afe2:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1afe4:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   1afe6:	4432      	add	r2, r6
   1afe8:	e7f4      	b.n	1afd4 <init_mem_slab_module+0x18>
   1afea:	bf00      	nop
   1afec:	2002c620 	.word	0x2002c620
   1aff0:	2002c63c 	.word	0x2002c63c

0001aff4 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1aff4:	b510      	push	{r4, lr}
   1aff6:	4613      	mov	r3, r2
   1aff8:	460c      	mov	r4, r1
   1affa:	f04f 0220 	mov.w	r2, #32
   1affe:	f3ef 8111 	mrs	r1, BASEPRI
   1b002:	f382 8811 	msr	BASEPRI, r2
   1b006:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1b00a:	6942      	ldr	r2, [r0, #20]
   1b00c:	b15a      	cbz	r2, 1b026 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
   1b00e:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b010:	6813      	ldr	r3, [r2, #0]
   1b012:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b014:	6983      	ldr	r3, [r0, #24]
   1b016:	3301      	adds	r3, #1
   1b018:	6183      	str	r3, [r0, #24]
		result = 0;
   1b01a:	2000      	movs	r0, #0
	__asm__ volatile(
   1b01c:	f381 8811 	msr	BASEPRI, r1
   1b020:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b024:	e00d      	b.n	1b042 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   1b026:	b91b      	cbnz	r3, 1b030 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
   1b028:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b02a:	f06f 000b 	mvn.w	r0, #11
   1b02e:	e7f5      	b.n	1b01c <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b030:	4602      	mov	r2, r0
   1b032:	4804      	ldr	r0, [pc, #16]	; (1b044 <k_mem_slab_alloc+0x50>)
   1b034:	f000 fc18 	bl	1b868 <z_pend_curr>
		if (result == 0) {
   1b038:	b918      	cbnz	r0, 1b042 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   1b03a:	4b03      	ldr	r3, [pc, #12]	; (1b048 <k_mem_slab_alloc+0x54>)
   1b03c:	689b      	ldr	r3, [r3, #8]
   1b03e:	695b      	ldr	r3, [r3, #20]
   1b040:	6023      	str	r3, [r4, #0]
}
   1b042:	bd10      	pop	{r4, pc}
   1b044:	20026568 	.word	0x20026568
   1b048:	20024d00 	.word	0x20024d00

0001b04c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b04c:	b570      	push	{r4, r5, r6, lr}
   1b04e:	4604      	mov	r4, r0
   1b050:	460d      	mov	r5, r1
	__asm__ volatile(
   1b052:	f04f 0320 	mov.w	r3, #32
   1b056:	f3ef 8611 	mrs	r6, BASEPRI
   1b05a:	f383 8811 	msr	BASEPRI, r3
   1b05e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b062:	f003 fcb8 	bl	1e9d6 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1b066:	b180      	cbz	r0, 1b08a <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b068:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1b06a:	682a      	ldr	r2, [r5, #0]
   1b06c:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1b06e:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b070:	7b42      	ldrb	r2, [r0, #13]
   1b072:	06d2      	lsls	r2, r2, #27
   1b074:	d103      	bne.n	1b07e <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   1b076:	6983      	ldr	r3, [r0, #24]
   1b078:	b90b      	cbnz	r3, 1b07e <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1b07a:	f000 fab9 	bl	1b5f0 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1b07e:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1b080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b084:	4807      	ldr	r0, [pc, #28]	; (1b0a4 <k_mem_slab_free+0x58>)
   1b086:	f003 bc30 	b.w	1e8ea <z_reschedule>
		**(char ***)mem = slab->free_list;
   1b08a:	682b      	ldr	r3, [r5, #0]
   1b08c:	6962      	ldr	r2, [r4, #20]
   1b08e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1b090:	682b      	ldr	r3, [r5, #0]
   1b092:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1b094:	69a3      	ldr	r3, [r4, #24]
   1b096:	3b01      	subs	r3, #1
   1b098:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1b09a:	f386 8811 	msr	BASEPRI, r6
   1b09e:	f3bf 8f6f 	isb	sy
}
   1b0a2:	bd70      	pop	{r4, r5, r6, pc}
   1b0a4:	20026568 	.word	0x20026568

0001b0a8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1b0a8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b0aa:	4c07      	ldr	r4, [pc, #28]	; (1b0c8 <init_static_pools+0x20>)
   1b0ac:	4d07      	ldr	r5, [pc, #28]	; (1b0cc <init_static_pools+0x24>)
   1b0ae:	42ac      	cmp	r4, r5
   1b0b0:	d301      	bcc.n	1b0b6 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1b0b2:	2000      	movs	r0, #0
   1b0b4:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b0b6:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1b0ba:	4620      	mov	r0, r4
   1b0bc:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1b0c0:	f001 f8b7 	bl	1c232 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   1b0c4:	341c      	adds	r4, #28
   1b0c6:	e7f2      	b.n	1b0ae <init_static_pools+0x6>
   1b0c8:	2002c63c 	.word	0x2002c63c
   1b0cc:	2002c658 	.word	0x2002c658

0001b0d0 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1b0d4:	1e1c      	subs	r4, r3, #0
{
   1b0d6:	b085      	sub	sp, #20
   1b0d8:	4607      	mov	r7, r0
   1b0da:	460d      	mov	r5, r1
   1b0dc:	4692      	mov	sl, r2
	if (timeout > 0) {
   1b0de:	dd3b      	ble.n	1b158 <k_mem_pool_alloc+0x88>
	return z_impl_k_uptime_get();
   1b0e0:	f003 fd57 	bl	1eb92 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   1b0e4:	eb10 0804 	adds.w	r8, r0, r4
	return pool - &_k_mem_pool_list_start[0];
   1b0e8:	4b1d      	ldr	r3, [pc, #116]	; (1b160 <k_mem_pool_alloc+0x90>)
   1b0ea:	4e1e      	ldr	r6, [pc, #120]	; (1b164 <k_mem_pool_alloc+0x94>)
   1b0ec:	1afb      	subs	r3, r7, r3
   1b0ee:	109b      	asrs	r3, r3, #2
   1b0f0:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1b0f2:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   1b0f6:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1b0f8:	ab03      	add	r3, sp, #12
   1b0fa:	aa02      	add	r2, sp, #8
   1b0fc:	9500      	str	r5, [sp, #0]
   1b0fe:	4651      	mov	r1, sl
   1b100:	4638      	mov	r0, r7
   1b102:	f001 f8dc 	bl	1c2be <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   1b106:	796b      	ldrb	r3, [r5, #5]
   1b108:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1b10a:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   1b10c:	f362 0303 	bfi	r3, r2, #0, #4
   1b110:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   1b112:	686b      	ldr	r3, [r5, #4]
   1b114:	9a03      	ldr	r2, [sp, #12]
   1b116:	f362 331f 	bfi	r3, r2, #12, #20
   1b11a:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1b11c:	b1c8      	cbz	r0, 1b152 <k_mem_pool_alloc+0x82>
   1b11e:	b1c4      	cbz	r4, 1b152 <k_mem_pool_alloc+0x82>
   1b120:	f110 0f0c 	cmn.w	r0, #12
   1b124:	d115      	bne.n	1b152 <k_mem_pool_alloc+0x82>
	__asm__ volatile(
   1b126:	f04f 0320 	mov.w	r3, #32
   1b12a:	f3ef 8011 	mrs	r0, BASEPRI
   1b12e:	f383 8811 	msr	BASEPRI, r3
   1b132:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   1b136:	4622      	mov	r2, r4
   1b138:	4659      	mov	r1, fp
   1b13a:	f000 fb71 	bl	1b820 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1b13e:	1c63      	adds	r3, r4, #1
   1b140:	d0da      	beq.n	1b0f8 <k_mem_pool_alloc+0x28>
   1b142:	f003 fd26 	bl	1eb92 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   1b146:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   1b14a:	2c00      	cmp	r4, #0
   1b14c:	dcd4      	bgt.n	1b0f8 <k_mem_pool_alloc+0x28>
				break;
			}
		}
	}

	return -EAGAIN;
   1b14e:	f06f 000a 	mvn.w	r0, #10
}
   1b152:	b005      	add	sp, #20
   1b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1b158:	f04f 0800 	mov.w	r8, #0
   1b15c:	e7c4      	b.n	1b0e8 <k_mem_pool_alloc+0x18>
   1b15e:	bf00      	nop
   1b160:	2002c63c 	.word	0x2002c63c
   1b164:	b6db6db7 	.word	0xb6db6db7

0001b168 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1b168:	b570      	push	{r4, r5, r6, lr}
   1b16a:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1b16c:	6802      	ldr	r2, [r0, #0]
   1b16e:	7841      	ldrb	r1, [r0, #1]
   1b170:	4e11      	ldr	r6, [pc, #68]	; (1b1b8 <k_mem_pool_free_id+0x50>)
   1b172:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1b176:	00a4      	lsls	r4, r4, #2
   1b178:	0b12      	lsrs	r2, r2, #12
   1b17a:	f001 010f 	and.w	r1, r1, #15
   1b17e:	1930      	adds	r0, r6, r4
   1b180:	f001 f94f 	bl	1c422 <z_sys_mem_pool_block_free>
   1b184:	f04f 0320 	mov.w	r3, #32
   1b188:	f3ef 8511 	mrs	r5, BASEPRI
   1b18c:	f383 8811 	msr	BASEPRI, r3
   1b190:	f3bf 8f6f 	isb	sy
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1b194:	f104 0014 	add.w	r0, r4, #20
   1b198:	4430      	add	r0, r6
   1b19a:	f003 fc49 	bl	1ea30 <z_unpend_all>

	if (need_sched != 0) {
   1b19e:	b128      	cbz	r0, 1b1ac <k_mem_pool_free_id+0x44>
		z_reschedule(&lock, key);
   1b1a0:	4629      	mov	r1, r5
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1b1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b1a6:	4805      	ldr	r0, [pc, #20]	; (1b1bc <k_mem_pool_free_id+0x54>)
   1b1a8:	f003 bb9f 	b.w	1e8ea <z_reschedule>
	__asm__ volatile(
   1b1ac:	f385 8811 	msr	BASEPRI, r5
   1b1b0:	f3bf 8f6f 	isb	sy
}
   1b1b4:	bd70      	pop	{r4, r5, r6, pc}
   1b1b6:	bf00      	nop
   1b1b8:	2002c63c 	.word	0x2002c63c
   1b1bc:	20026568 	.word	0x20026568

0001b1c0 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1b1c0:	4601      	mov	r1, r0
   1b1c2:	4801      	ldr	r0, [pc, #4]	; (1b1c8 <k_malloc+0x8>)
   1b1c4:	f003 ba53 	b.w	1e66e <k_mem_pool_malloc>
   1b1c8:	2002c63c 	.word	0x2002c63c

0001b1cc <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1b1cc:	4b03      	ldr	r3, [pc, #12]	; (1b1dc <z_thread_malloc+0x10>)
{
   1b1ce:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1b1d0:	689b      	ldr	r3, [r3, #8]
   1b1d2:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1b1d4:	b108      	cbz	r0, 1b1da <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1b1d6:	f003 ba4a 	b.w	1e66e <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1b1da:	4770      	bx	lr
   1b1dc:	20024d00 	.word	0x20024d00

0001b1e0 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1e4:	4613      	mov	r3, r2
   1b1e6:	4604      	mov	r4, r0
   1b1e8:	460f      	mov	r7, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b1ea:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1b1ee:	f04f 0220 	mov.w	r2, #32
   1b1f2:	f3ef 8611 	mrs	r6, BASEPRI
   1b1f6:	f382 8811 	msr	BASEPRI, r2
   1b1fa:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1b1fe:	6a01      	ldr	r1, [r0, #32]
   1b200:	68c2      	ldr	r2, [r0, #12]
   1b202:	4291      	cmp	r1, r2
   1b204:	d22e      	bcs.n	1b264 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b206:	f003 fbe6 	bl	1e9d6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1b20a:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1b20c:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1b20e:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   1b210:	b198      	cbz	r0, 1b23a <z_impl_k_msgq_put+0x5a>
			(void)memcpy(pending_thread->base.swap_data, data,
   1b212:	6940      	ldr	r0, [r0, #20]
   1b214:	f002 f8ed 	bl	1d3f2 <memcpy>
   1b218:	2300      	movs	r3, #0
   1b21a:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b21c:	7b6b      	ldrb	r3, [r5, #13]
   1b21e:	06db      	lsls	r3, r3, #27
   1b220:	d104      	bne.n	1b22c <z_impl_k_msgq_put+0x4c>
	if (z_is_thread_ready(thread)) {
   1b222:	69ab      	ldr	r3, [r5, #24]
   1b224:	b913      	cbnz	r3, 1b22c <z_impl_k_msgq_put+0x4c>
		z_add_thread_to_ready_q(thread);
   1b226:	4628      	mov	r0, r5
   1b228:	f000 f9e2 	bl	1b5f0 <z_add_thread_to_ready_q>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b22c:	4640      	mov	r0, r8
   1b22e:	4631      	mov	r1, r6
   1b230:	f003 fb5b 	bl	1e8ea <z_reschedule>
			return 0;
   1b234:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1b23a:	69e0      	ldr	r0, [r4, #28]
   1b23c:	f002 f8d9 	bl	1d3f2 <memcpy>
		result = 0;
   1b240:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1b242:	69e3      	ldr	r3, [r4, #28]
   1b244:	68a2      	ldr	r2, [r4, #8]
   1b246:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b248:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b24a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b24c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b24e:	bf04      	itt	eq
   1b250:	6923      	ldreq	r3, [r4, #16]
   1b252:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1b254:	6a23      	ldr	r3, [r4, #32]
   1b256:	3301      	adds	r3, #1
   1b258:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1b25a:	f386 8811 	msr	BASEPRI, r6
   1b25e:	f3bf 8f6f 	isb	sy
	return result;
   1b262:	e7e8      	b.n	1b236 <z_impl_k_msgq_put+0x56>
	} else if (timeout == K_NO_WAIT) {
   1b264:	b14b      	cbz	r3, 1b27a <z_impl_k_msgq_put+0x9a>
		_current->base.swap_data = data;
   1b266:	4a06      	ldr	r2, [pc, #24]	; (1b280 <z_impl_k_msgq_put+0xa0>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b268:	4631      	mov	r1, r6
		_current->base.swap_data = data;
   1b26a:	6892      	ldr	r2, [r2, #8]
   1b26c:	6157      	str	r7, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b26e:	4602      	mov	r2, r0
   1b270:	4640      	mov	r0, r8
}
   1b272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b276:	f000 baf7 	b.w	1b868 <z_pend_curr>
		result = -ENOMSG;
   1b27a:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1b27e:	e7ec      	b.n	1b25a <z_impl_k_msgq_put+0x7a>
   1b280:	20024d00 	.word	0x20024d00

0001b284 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   1b284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b288:	4604      	mov	r4, r0
   1b28a:	4613      	mov	r3, r2
   1b28c:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b28e:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1b292:	f04f 0220 	mov.w	r2, #32
   1b296:	f3ef 8611 	mrs	r6, BASEPRI
   1b29a:	f382 8811 	msr	BASEPRI, r2
   1b29e:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1b2a2:	6a22      	ldr	r2, [r4, #32]
   1b2a4:	2a00      	cmp	r2, #0
   1b2a6:	d037      	beq.n	1b318 <z_impl_k_msgq_get+0x94>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1b2a8:	68a2      	ldr	r2, [r4, #8]
   1b2aa:	69a1      	ldr	r1, [r4, #24]
   1b2ac:	f002 f8a1 	bl	1d3f2 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1b2b0:	69a3      	ldr	r3, [r4, #24]
   1b2b2:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b2b4:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1b2b6:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1b2b8:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1b2ba:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1b2bc:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1b2be:	bf04      	itt	eq
   1b2c0:	6923      	ldreq	r3, [r4, #16]
   1b2c2:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1b2c4:	6a23      	ldr	r3, [r4, #32]
   1b2c6:	3b01      	subs	r3, #1
   1b2c8:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b2ca:	f003 fb84 	bl	1e9d6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b2ce:	4605      	mov	r5, r0
   1b2d0:	2800      	cmp	r0, #0
   1b2d2:	d02e      	beq.n	1b332 <z_impl_k_msgq_get+0xae>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1b2d4:	68a2      	ldr	r2, [r4, #8]
   1b2d6:	6941      	ldr	r1, [r0, #20]
   1b2d8:	69e0      	ldr	r0, [r4, #28]
   1b2da:	f002 f88a 	bl	1d3f2 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1b2de:	69e3      	ldr	r3, [r4, #28]
   1b2e0:	68a2      	ldr	r2, [r4, #8]
   1b2e2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1b2e4:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1b2e6:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b2e8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1b2ea:	bf04      	itt	eq
   1b2ec:	6923      	ldreq	r3, [r4, #16]
   1b2ee:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1b2f0:	6a23      	ldr	r3, [r4, #32]
   1b2f2:	3301      	adds	r3, #1
   1b2f4:	6223      	str	r3, [r4, #32]
   1b2f6:	2300      	movs	r3, #0
   1b2f8:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b2fa:	7b6b      	ldrb	r3, [r5, #13]
   1b2fc:	06db      	lsls	r3, r3, #27
   1b2fe:	d104      	bne.n	1b30a <z_impl_k_msgq_get+0x86>
	if (z_is_thread_ready(thread)) {
   1b300:	69ab      	ldr	r3, [r5, #24]
   1b302:	b913      	cbnz	r3, 1b30a <z_impl_k_msgq_get+0x86>
		z_add_thread_to_ready_q(thread);
   1b304:	4628      	mov	r0, r5
   1b306:	f000 f973 	bl	1b5f0 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   1b30a:	4638      	mov	r0, r7
   1b30c:	4631      	mov	r1, r6
   1b30e:	f003 faec 	bl	1e8ea <z_reschedule>
			return 0;
   1b312:	2000      	movs	r0, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   1b318:	b14b      	cbz	r3, 1b32e <z_impl_k_msgq_get+0xaa>
		_current->base.swap_data = data;
   1b31a:	4a08      	ldr	r2, [pc, #32]	; (1b33c <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b31c:	4638      	mov	r0, r7
		_current->base.swap_data = data;
   1b31e:	6892      	ldr	r2, [r2, #8]
   1b320:	6151      	str	r1, [r2, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b322:	4622      	mov	r2, r4
   1b324:	4631      	mov	r1, r6
}
   1b326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b32a:	f000 ba9d 	b.w	1b868 <z_pend_curr>
		result = -ENOMSG;
   1b32e:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1b332:	f386 8811 	msr	BASEPRI, r6
   1b336:	f3bf 8f6f 	isb	sy
	return result;
   1b33a:	e7eb      	b.n	1b314 <z_impl_k_msgq_get+0x90>
   1b33c:	20024d00 	.word	0x20024d00

0001b340 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b342:	4604      	mov	r4, r0
   1b344:	460f      	mov	r7, r1
	__asm__ volatile(
   1b346:	f04f 0320 	mov.w	r3, #32
   1b34a:	f3ef 8511 	mrs	r5, BASEPRI
   1b34e:	f383 8811 	msr	BASEPRI, r3
   1b352:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b356:	68c2      	ldr	r2, [r0, #12]
   1b358:	4930      	ldr	r1, [pc, #192]	; (1b41c <z_impl_k_mutex_lock+0xdc>)
   1b35a:	b15a      	cbz	r2, 1b374 <z_impl_k_mutex_lock+0x34>
   1b35c:	6880      	ldr	r0, [r0, #8]
   1b35e:	688e      	ldr	r6, [r1, #8]
   1b360:	42b0      	cmp	r0, r6
   1b362:	d015      	beq.n	1b390 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1b364:	b9b7      	cbnz	r7, 1b394 <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1b366:	f385 8811 	msr	BASEPRI, r5
   1b36a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b36e:	f06f 000f 	mvn.w	r0, #15
   1b372:	e00c      	b.n	1b38e <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1b374:	688b      	ldr	r3, [r1, #8]
   1b376:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b37a:	6123      	str	r3, [r4, #16]
		mutex->owner = _current;
   1b37c:	688b      	ldr	r3, [r1, #8]
		mutex->lock_count++;
   1b37e:	3201      	adds	r2, #1
   1b380:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1b382:	60a3      	str	r3, [r4, #8]
   1b384:	f385 8811 	msr	BASEPRI, r5
   1b388:	f3bf 8f6f 	isb	sy
		return 0;
   1b38c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   1b390:	6923      	ldr	r3, [r4, #16]
   1b392:	e7f2      	b.n	1b37a <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b394:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b398:	f996 100e 	ldrsb.w	r1, [r6, #14]
   1b39c:	4299      	cmp	r1, r3
   1b39e:	bfa8      	it	ge
   1b3a0:	4619      	movge	r1, r3
   1b3a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b3a6:	4299      	cmp	r1, r3
   1b3a8:	da2b      	bge.n	1b402 <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   1b3aa:	f000 fa9f 	bl	1b8ec <z_set_prio>
   1b3ae:	4606      	mov	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b3b0:	463b      	mov	r3, r7
   1b3b2:	4622      	mov	r2, r4
   1b3b4:	4629      	mov	r1, r5
   1b3b6:	481a      	ldr	r0, [pc, #104]	; (1b420 <z_impl_k_mutex_lock+0xe0>)
   1b3b8:	f000 fa56 	bl	1b868 <z_pend_curr>
	if (got_mutex == 0) {
   1b3bc:	2800      	cmp	r0, #0
   1b3be:	d0e6      	beq.n	1b38e <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   1b3c0:	f04f 0320 	mov.w	r3, #32
   1b3c4:	f3ef 8511 	mrs	r5, BASEPRI
   1b3c8:	f383 8811 	msr	BASEPRI, r3
   1b3cc:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b3d0:	6823      	ldr	r3, [r4, #0]
   1b3d2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b3d4:	429c      	cmp	r4, r3
   1b3d6:	d007      	beq.n	1b3e8 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1b3d8:	b133      	cbz	r3, 1b3e8 <z_impl_k_mutex_lock+0xa8>
   1b3da:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b3de:	4299      	cmp	r1, r3
   1b3e0:	bfa8      	it	ge
   1b3e2:	4619      	movge	r1, r3
   1b3e4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b3e8:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b3ea:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b3ee:	4299      	cmp	r1, r3
   1b3f0:	d109      	bne.n	1b406 <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1b3f2:	b16e      	cbz	r6, 1b410 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1b3f4:	4629      	mov	r1, r5
   1b3f6:	480a      	ldr	r0, [pc, #40]	; (1b420 <z_impl_k_mutex_lock+0xe0>)
   1b3f8:	f003 fa77 	bl	1e8ea <z_reschedule>
	return -EAGAIN;
   1b3fc:	f06f 000a 	mvn.w	r0, #10
   1b400:	e7c5      	b.n	1b38e <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1b402:	2600      	movs	r6, #0
   1b404:	e7d4      	b.n	1b3b0 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1b406:	f000 fa71 	bl	1b8ec <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b40a:	2800      	cmp	r0, #0
   1b40c:	d1f2      	bne.n	1b3f4 <z_impl_k_mutex_lock+0xb4>
   1b40e:	e7f0      	b.n	1b3f2 <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   1b410:	f385 8811 	msr	BASEPRI, r5
   1b414:	f3bf 8f6f 	isb	sy
   1b418:	e7f0      	b.n	1b3fc <z_impl_k_mutex_lock+0xbc>
   1b41a:	bf00      	nop
   1b41c:	20024d00 	.word	0x20024d00
   1b420:	20026568 	.word	0x20026568

0001b424 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b424:	b538      	push	{r3, r4, r5, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b426:	4b1d      	ldr	r3, [pc, #116]	; (1b49c <z_impl_k_mutex_unlock+0x78>)
   1b428:	4604      	mov	r4, r0
   1b42a:	689a      	ldr	r2, [r3, #8]
   1b42c:	7bd3      	ldrb	r3, [r2, #15]
   1b42e:	3b01      	subs	r3, #1
   1b430:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1b432:	68c3      	ldr	r3, [r0, #12]
   1b434:	2b01      	cmp	r3, #1
   1b436:	d005      	beq.n	1b444 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1b438:	3b01      	subs	r3, #1
   1b43a:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   1b43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sched_unlock();
   1b440:	f000 b8ba 	b.w	1b5b8 <k_sched_unlock>
	__asm__ volatile(
   1b444:	f04f 0320 	mov.w	r3, #32
   1b448:	f3ef 8511 	mrs	r5, BASEPRI
   1b44c:	f383 8811 	msr	BASEPRI, r3
   1b450:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b454:	6901      	ldr	r1, [r0, #16]
   1b456:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b458:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b45c:	4299      	cmp	r1, r3
   1b45e:	d001      	beq.n	1b464 <z_impl_k_mutex_unlock+0x40>
		return z_set_prio(mutex->owner, new_prio);
   1b460:	f000 fa44 	bl	1b8ec <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b464:	4620      	mov	r0, r4
   1b466:	f003 fab6 	bl	1e9d6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b46a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b46c:	b180      	cbz	r0, 1b490 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b46e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b472:	6122      	str	r2, [r4, #16]
   1b474:	2200      	movs	r2, #0
   1b476:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b478:	7b42      	ldrb	r2, [r0, #13]
   1b47a:	06d2      	lsls	r2, r2, #27
   1b47c:	d103      	bne.n	1b486 <z_impl_k_mutex_unlock+0x62>
	if (z_is_thread_ready(thread)) {
   1b47e:	6983      	ldr	r3, [r0, #24]
   1b480:	b90b      	cbnz	r3, 1b486 <z_impl_k_mutex_unlock+0x62>
		z_add_thread_to_ready_q(thread);
   1b482:	f000 f8b5 	bl	1b5f0 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   1b486:	4629      	mov	r1, r5
   1b488:	4805      	ldr	r0, [pc, #20]	; (1b4a0 <z_impl_k_mutex_unlock+0x7c>)
   1b48a:	f003 fa2e 	bl	1e8ea <z_reschedule>
   1b48e:	e7d5      	b.n	1b43c <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0U;
   1b490:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b492:	f385 8811 	msr	BASEPRI, r5
   1b496:	f3bf 8f6f 	isb	sy
   1b49a:	e7cf      	b.n	1b43c <z_impl_k_mutex_unlock+0x18>
   1b49c:	20024d00 	.word	0x20024d00
   1b4a0:	20026568 	.word	0x20026568

0001b4a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b4a4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b4a6:	4c08      	ldr	r4, [pc, #32]	; (1b4c8 <z_reset_time_slice+0x24>)
   1b4a8:	6823      	ldr	r3, [r4, #0]
   1b4aa:	b15b      	cbz	r3, 1b4c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b4ac:	f7f4 f808 	bl	f4c0 <z_clock_elapsed>
   1b4b0:	6823      	ldr	r3, [r4, #0]
   1b4b2:	4a06      	ldr	r2, [pc, #24]	; (1b4cc <z_reset_time_slice+0x28>)
   1b4b4:	4418      	add	r0, r3
   1b4b6:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b4b8:	2100      	movs	r1, #0
	}
}
   1b4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1b4be:	4618      	mov	r0, r3
   1b4c0:	f003 bb49 	b.w	1eb56 <z_set_timeout_expiry>
}
   1b4c4:	bd10      	pop	{r4, pc}
   1b4c6:	bf00      	nop
   1b4c8:	20024d3c 	.word	0x20024d3c
   1b4cc:	20024d00 	.word	0x20024d00

0001b4d0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   1b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4d2:	460d      	mov	r5, r1
	__asm__ volatile(
   1b4d4:	f04f 0320 	mov.w	r3, #32
   1b4d8:	f3ef 8411 	mrs	r4, BASEPRI
   1b4dc:	f383 8811 	msr	BASEPRI, r3
   1b4e0:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   1b4e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b4e8:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b4ec:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b4ee:	2200      	movs	r2, #0
   1b4f0:	fbe1 6700 	umlal	r6, r7, r1, r0
   1b4f4:	4b09      	ldr	r3, [pc, #36]	; (1b51c <k_sched_time_slice_set+0x4c>)
   1b4f6:	4630      	mov	r0, r6
   1b4f8:	611a      	str	r2, [r3, #16]
   1b4fa:	4639      	mov	r1, r7
   1b4fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b500:	2300      	movs	r3, #0
   1b502:	f7f0 feb5 	bl	c270 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b506:	4b06      	ldr	r3, [pc, #24]	; (1b520 <k_sched_time_slice_set+0x50>)
   1b508:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b50a:	4b06      	ldr	r3, [pc, #24]	; (1b524 <k_sched_time_slice_set+0x54>)
   1b50c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1b50e:	f7ff ffc9 	bl	1b4a4 <z_reset_time_slice>
	__asm__ volatile(
   1b512:	f384 8811 	msr	BASEPRI, r4
   1b516:	f3bf 8f6f 	isb	sy
	}
}
   1b51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b51c:	20024d00 	.word	0x20024d00
   1b520:	20024d3c 	.word	0x20024d3c
   1b524:	20024d38 	.word	0x20024d38

0001b528 <k_sched_lock>:
	__asm__ volatile(
   1b528:	f04f 0320 	mov.w	r3, #32
   1b52c:	f3ef 8111 	mrs	r1, BASEPRI
   1b530:	f383 8811 	msr	BASEPRI, r3
   1b534:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b538:	4b04      	ldr	r3, [pc, #16]	; (1b54c <k_sched_lock+0x24>)
   1b53a:	689a      	ldr	r2, [r3, #8]
   1b53c:	7bd3      	ldrb	r3, [r2, #15]
   1b53e:	3b01      	subs	r3, #1
   1b540:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b542:	f381 8811 	msr	BASEPRI, r1
   1b546:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b54a:	4770      	bx	lr
   1b54c:	20024d00 	.word	0x20024d00

0001b550 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b550:	4b09      	ldr	r3, [pc, #36]	; (1b578 <z_priq_dumb_remove+0x28>)
   1b552:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b556:	4282      	cmp	r2, r0
   1b558:	d105      	bne.n	1b566 <z_priq_dumb_remove+0x16>
   1b55a:	689b      	ldr	r3, [r3, #8]
   1b55c:	428b      	cmp	r3, r1
   1b55e:	d102      	bne.n	1b566 <z_priq_dumb_remove+0x16>
   1b560:	7b4b      	ldrb	r3, [r1, #13]
   1b562:	06db      	lsls	r3, r3, #27
   1b564:	d106      	bne.n	1b574 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b566:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b56a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b56c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b56e:	2300      	movs	r3, #0
	node->prev = NULL;
   1b570:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b574:	4770      	bx	lr
   1b576:	bf00      	nop
   1b578:	20024d00 	.word	0x20024d00

0001b57c <update_cache>:
{
   1b57c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b57e:	4c0d      	ldr	r4, [pc, #52]	; (1b5b4 <update_cache+0x38>)
{
   1b580:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1b582:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b586:	f003 f9ef 	bl	1e968 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1b58a:	4605      	mov	r5, r0
   1b58c:	b900      	cbnz	r0, 1b590 <update_cache+0x14>
   1b58e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b590:	68a3      	ldr	r3, [r4, #8]
   1b592:	b94a      	cbnz	r2, 1b5a8 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1b594:	7b5a      	ldrb	r2, [r3, #13]
   1b596:	06d2      	lsls	r2, r2, #27
   1b598:	d106      	bne.n	1b5a8 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b59a:	69aa      	ldr	r2, [r5, #24]
   1b59c:	b922      	cbnz	r2, 1b5a8 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1b59e:	89da      	ldrh	r2, [r3, #14]
   1b5a0:	2a7f      	cmp	r2, #127	; 0x7f
   1b5a2:	d901      	bls.n	1b5a8 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1b5a4:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b5a6:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   1b5a8:	429d      	cmp	r5, r3
   1b5aa:	d001      	beq.n	1b5b0 <update_cache+0x34>
			z_reset_time_slice();
   1b5ac:	f7ff ff7a 	bl	1b4a4 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   1b5b0:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b5b2:	e7f8      	b.n	1b5a6 <update_cache+0x2a>
   1b5b4:	20024d00 	.word	0x20024d00

0001b5b8 <k_sched_unlock>:
{
   1b5b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b5ba:	f04f 0320 	mov.w	r3, #32
   1b5be:	f3ef 8411 	mrs	r4, BASEPRI
   1b5c2:	f383 8811 	msr	BASEPRI, r3
   1b5c6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b5ca:	4b08      	ldr	r3, [pc, #32]	; (1b5ec <k_sched_unlock+0x34>)
		update_cache(0);
   1b5cc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b5ce:	689a      	ldr	r2, [r3, #8]
   1b5d0:	7bd3      	ldrb	r3, [r2, #15]
   1b5d2:	3301      	adds	r3, #1
   1b5d4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b5d6:	f7ff ffd1 	bl	1b57c <update_cache>
	__asm__ volatile(
   1b5da:	f384 8811 	msr	BASEPRI, r4
   1b5de:	f3bf 8f6f 	isb	sy
}
   1b5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b5e6:	f003 b997 	b.w	1e918 <z_reschedule_unlocked>
   1b5ea:	bf00      	nop
   1b5ec:	20024d00 	.word	0x20024d00

0001b5f0 <z_add_thread_to_ready_q>:
{
   1b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b5f2:	f04f 0320 	mov.w	r3, #32
   1b5f6:	f3ef 8411 	mrs	r4, BASEPRI
   1b5fa:	f383 8811 	msr	BASEPRI, r3
   1b5fe:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1b602:	4a15      	ldr	r2, [pc, #84]	; (1b658 <z_add_thread_to_ready_q+0x68>)
   1b604:	4611      	mov	r1, r2
   1b606:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b60a:	428b      	cmp	r3, r1
   1b60c:	d01d      	beq.n	1b64a <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b60e:	b1e3      	cbz	r3, 1b64a <z_add_thread_to_ready_q+0x5a>
   1b610:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b612:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b616:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b61a:	42af      	cmp	r7, r5
   1b61c:	dd10      	ble.n	1b640 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
   1b61e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b620:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b624:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b626:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b628:	7b43      	ldrb	r3, [r0, #13]
   1b62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b62e:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1b630:	2000      	movs	r0, #0
   1b632:	f7ff ffa3 	bl	1b57c <update_cache>
	__asm__ volatile(
   1b636:	f384 8811 	msr	BASEPRI, r4
   1b63a:	f3bf 8f6f 	isb	sy
}
   1b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b640:	42b3      	cmp	r3, r6
   1b642:	d002      	beq.n	1b64a <z_add_thread_to_ready_q+0x5a>
   1b644:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b646:	2b00      	cmp	r3, #0
   1b648:	d1e5      	bne.n	1b616 <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
   1b64a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b64c:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1b64e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1b650:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b652:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b654:	62d0      	str	r0, [r2, #44]	; 0x2c
   1b656:	e7e7      	b.n	1b628 <z_add_thread_to_ready_q+0x38>
   1b658:	20024d00 	.word	0x20024d00

0001b65c <z_move_thread_to_end_of_prio_q>:
{
   1b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b65e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b660:	f04f 0320 	mov.w	r3, #32
   1b664:	f3ef 8511 	mrs	r5, BASEPRI
   1b668:	f383 8811 	msr	BASEPRI, r3
   1b66c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b670:	7b43      	ldrb	r3, [r0, #13]
   1b672:	065a      	lsls	r2, r3, #25
   1b674:	d503      	bpl.n	1b67e <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b676:	4601      	mov	r1, r0
   1b678:	4817      	ldr	r0, [pc, #92]	; (1b6d8 <z_move_thread_to_end_of_prio_q+0x7c>)
   1b67a:	f7ff ff69 	bl	1b550 <z_priq_dumb_remove>
	return list->head == list;
   1b67e:	4a17      	ldr	r2, [pc, #92]	; (1b6dc <z_move_thread_to_end_of_prio_q+0x80>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b680:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1b684:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   1b688:	428b      	cmp	r3, r1
   1b68a:	d01f      	beq.n	1b6cc <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b68c:	b1f3      	cbz	r3, 1b6cc <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
   1b68e:	f994 600e 	ldrsb.w	r6, [r4, #14]
   1b692:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1b696:	42b7      	cmp	r7, r6
   1b698:	dd13      	ble.n	1b6c2 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
   1b69a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1b69c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1b6a0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1b6a2:	605c      	str	r4, [r3, #4]
   1b6a4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1b6a6:	6890      	ldr	r0, [r2, #8]
   1b6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b6ac:	7363      	strb	r3, [r4, #13]
   1b6ae:	1b03      	subs	r3, r0, r4
   1b6b0:	4258      	negs	r0, r3
   1b6b2:	4158      	adcs	r0, r3
   1b6b4:	f7ff ff62 	bl	1b57c <update_cache>
	__asm__ volatile(
   1b6b8:	f385 8811 	msr	BASEPRI, r5
   1b6bc:	f3bf 8f6f 	isb	sy
}
   1b6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b6c2:	4298      	cmp	r0, r3
   1b6c4:	d002      	beq.n	1b6cc <z_move_thread_to_end_of_prio_q+0x70>
   1b6c6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6c8:	2b00      	cmp	r3, #0
   1b6ca:	d1e2      	bne.n	1b692 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
   1b6cc:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   1b6d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b6d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b6d4:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b6d6:	e7e5      	b.n	1b6a4 <z_move_thread_to_end_of_prio_q+0x48>
   1b6d8:	20024d28 	.word	0x20024d28
   1b6dc:	20024d00 	.word	0x20024d00

0001b6e0 <z_time_slice>:
	if (pending_current == _current) {
   1b6e0:	4a15      	ldr	r2, [pc, #84]	; (1b738 <z_time_slice+0x58>)
   1b6e2:	4916      	ldr	r1, [pc, #88]	; (1b73c <z_time_slice+0x5c>)
{
   1b6e4:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b6e6:	680c      	ldr	r4, [r1, #0]
   1b6e8:	6893      	ldr	r3, [r2, #8]
   1b6ea:	42a3      	cmp	r3, r4
   1b6ec:	4614      	mov	r4, r2
   1b6ee:	d103      	bne.n	1b6f8 <z_time_slice+0x18>
}
   1b6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b6f4:	f7ff bed6 	b.w	1b4a4 <z_reset_time_slice>
	pending_current = NULL;
   1b6f8:	2500      	movs	r5, #0
   1b6fa:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   1b6fc:	4910      	ldr	r1, [pc, #64]	; (1b740 <z_time_slice+0x60>)
   1b6fe:	6809      	ldr	r1, [r1, #0]
   1b700:	b1b9      	cbz	r1, 1b732 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b702:	89d9      	ldrh	r1, [r3, #14]
   1b704:	297f      	cmp	r1, #127	; 0x7f
   1b706:	d814      	bhi.n	1b732 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1b708:	490e      	ldr	r1, [pc, #56]	; (1b744 <z_time_slice+0x64>)
   1b70a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b70e:	6809      	ldr	r1, [r1, #0]
   1b710:	428d      	cmp	r5, r1
   1b712:	db0e      	blt.n	1b732 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   1b714:	490c      	ldr	r1, [pc, #48]	; (1b748 <z_time_slice+0x68>)
   1b716:	428b      	cmp	r3, r1
   1b718:	d00b      	beq.n	1b732 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   1b71a:	6999      	ldr	r1, [r3, #24]
   1b71c:	b949      	cbnz	r1, 1b732 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b71e:	6911      	ldr	r1, [r2, #16]
   1b720:	4281      	cmp	r1, r0
   1b722:	dc03      	bgt.n	1b72c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b724:	4618      	mov	r0, r3
   1b726:	f7ff ff99 	bl	1b65c <z_move_thread_to_end_of_prio_q>
   1b72a:	e7e1      	b.n	1b6f0 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   1b72c:	1a09      	subs	r1, r1, r0
   1b72e:	6111      	str	r1, [r2, #16]
}
   1b730:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b732:	2300      	movs	r3, #0
   1b734:	6123      	str	r3, [r4, #16]
   1b736:	e7fb      	b.n	1b730 <z_time_slice+0x50>
   1b738:	20024d00 	.word	0x20024d00
   1b73c:	20024d34 	.word	0x20024d34
   1b740:	20024d3c 	.word	0x20024d3c
   1b744:	20024d38 	.word	0x20024d38
   1b748:	20020b3c 	.word	0x20020b3c

0001b74c <z_remove_thread_from_ready_q>:
{
   1b74c:	b538      	push	{r3, r4, r5, lr}
   1b74e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b750:	f04f 0320 	mov.w	r3, #32
   1b754:	f3ef 8511 	mrs	r5, BASEPRI
   1b758:	f383 8811 	msr	BASEPRI, r3
   1b75c:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b760:	7b43      	ldrb	r3, [r0, #13]
   1b762:	065a      	lsls	r2, r3, #25
   1b764:	d507      	bpl.n	1b776 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b766:	4601      	mov	r1, r0
   1b768:	4809      	ldr	r0, [pc, #36]	; (1b790 <z_remove_thread_from_ready_q+0x44>)
   1b76a:	f7ff fef1 	bl	1b550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b76e:	7b63      	ldrb	r3, [r4, #13]
   1b770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b774:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b776:	4b07      	ldr	r3, [pc, #28]	; (1b794 <z_remove_thread_from_ready_q+0x48>)
   1b778:	6898      	ldr	r0, [r3, #8]
   1b77a:	1b03      	subs	r3, r0, r4
   1b77c:	4258      	negs	r0, r3
   1b77e:	4158      	adcs	r0, r3
   1b780:	f7ff fefc 	bl	1b57c <update_cache>
	__asm__ volatile(
   1b784:	f385 8811 	msr	BASEPRI, r5
   1b788:	f3bf 8f6f 	isb	sy
}
   1b78c:	bd38      	pop	{r3, r4, r5, pc}
   1b78e:	bf00      	nop
   1b790:	20024d28 	.word	0x20024d28
   1b794:	20024d00 	.word	0x20024d00

0001b798 <pend>:
{
   1b798:	b570      	push	{r4, r5, r6, lr}
   1b79a:	4604      	mov	r4, r0
   1b79c:	460d      	mov	r5, r1
   1b79e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1b7a0:	f7ff ffd4 	bl	1b74c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1b7a4:	7b63      	ldrb	r3, [r4, #13]
   1b7a6:	f043 0302 	orr.w	r3, r3, #2
   1b7aa:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b7ac:	b17d      	cbz	r5, 1b7ce <pend+0x36>
	return list->head == list;
   1b7ae:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1b7b0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b7b2:	429d      	cmp	r5, r3
   1b7b4:	d029      	beq.n	1b80a <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b7b6:	b343      	cbz	r3, 1b80a <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
   1b7b8:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1b7bc:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b7c0:	4291      	cmp	r1, r2
   1b7c2:	dd1c      	ble.n	1b7fe <pend+0x66>
	node->prev = successor->prev;
   1b7c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b7c6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b7ca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b7cc:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1b7ce:	1c73      	adds	r3, r6, #1
   1b7d0:	d022      	beq.n	1b818 <pend+0x80>
   1b7d2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1b7d6:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b7da:	2100      	movs	r1, #0
   1b7dc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1b7e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b7e4:	fbc5 0106 	smlal	r0, r1, r5, r6
   1b7e8:	2300      	movs	r3, #0
   1b7ea:	f7f0 fd41 	bl	c270 <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1b7ee:	490b      	ldr	r1, [pc, #44]	; (1b81c <pend+0x84>)
   1b7f0:	1c42      	adds	r2, r0, #1
   1b7f2:	f104 0018 	add.w	r0, r4, #24
}
   1b7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b7fa:	f000 bb3b 	b.w	1be74 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1b7fe:	6869      	ldr	r1, [r5, #4]
   1b800:	428b      	cmp	r3, r1
   1b802:	d002      	beq.n	1b80a <pend+0x72>
   1b804:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b806:	2b00      	cmp	r3, #0
   1b808:	d1d8      	bne.n	1b7bc <pend+0x24>
	node->prev = list->tail;
   1b80a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1b80c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1b80e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b810:	686b      	ldr	r3, [r5, #4]
   1b812:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b814:	606c      	str	r4, [r5, #4]
   1b816:	e7da      	b.n	1b7ce <pend+0x36>
}
   1b818:	bd70      	pop	{r4, r5, r6, pc}
   1b81a:	bf00      	nop
   1b81c:	0001e975 	.word	0x0001e975

0001b820 <z_pend_curr_irqlock>:
{
   1b820:	b570      	push	{r4, r5, r6, lr}
   1b822:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1b824:	4d0e      	ldr	r5, [pc, #56]	; (1b860 <z_pend_curr_irqlock+0x40>)
	pending_current = _current;
   1b826:	4c0f      	ldr	r4, [pc, #60]	; (1b864 <z_pend_curr_irqlock+0x44>)
	pend(_current, wait_q, timeout);
   1b828:	68a8      	ldr	r0, [r5, #8]
   1b82a:	f7ff ffb5 	bl	1b798 <pend>
	pending_current = _current;
   1b82e:	68ab      	ldr	r3, [r5, #8]
	int ret = z_swap_irqlock(key);
   1b830:	4630      	mov	r0, r6
	pending_current = _current;
   1b832:	6023      	str	r3, [r4, #0]
	int ret = z_swap_irqlock(key);
   1b834:	f003 f81e 	bl	1e874 <z_swap_irqlock>
	__asm__ volatile(
   1b838:	f04f 0220 	mov.w	r2, #32
   1b83c:	f3ef 8311 	mrs	r3, BASEPRI
   1b840:	f382 8811 	msr	BASEPRI, r2
   1b844:	f3bf 8f6f 	isb	sy
		if (pending_current == _current) {
   1b848:	6822      	ldr	r2, [r4, #0]
   1b84a:	68a9      	ldr	r1, [r5, #8]
   1b84c:	4291      	cmp	r1, r2
			pending_current = NULL;
   1b84e:	bf04      	itt	eq
   1b850:	2200      	moveq	r2, #0
   1b852:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1b854:	f383 8811 	msr	BASEPRI, r3
   1b858:	f3bf 8f6f 	isb	sy
}
   1b85c:	bd70      	pop	{r4, r5, r6, pc}
   1b85e:	bf00      	nop
   1b860:	20024d00 	.word	0x20024d00
   1b864:	20024d34 	.word	0x20024d34

0001b868 <z_pend_curr>:
{
   1b868:	b510      	push	{r4, lr}
   1b86a:	460c      	mov	r4, r1
   1b86c:	4611      	mov	r1, r2
	pending_current = _current;
   1b86e:	4a06      	ldr	r2, [pc, #24]	; (1b888 <z_pend_curr+0x20>)
   1b870:	6890      	ldr	r0, [r2, #8]
   1b872:	4a06      	ldr	r2, [pc, #24]	; (1b88c <z_pend_curr+0x24>)
   1b874:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1b876:	461a      	mov	r2, r3
   1b878:	f7ff ff8e 	bl	1b798 <pend>
 * handling.
 */
static ALWAYS_INLINE int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
{
	k_spin_release(lock);
	return z_swap_irqlock(key.key);
   1b87c:	4620      	mov	r0, r4
}
   1b87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b882:	f002 bff7 	b.w	1e874 <z_swap_irqlock>
   1b886:	bf00      	nop
   1b888:	20024d00 	.word	0x20024d00
   1b88c:	20024d34 	.word	0x20024d34

0001b890 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1b890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
   1b892:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1b894:	f003 f979 	bl	1eb8a <z_tick_get_32>
   1b898:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   1b89a:	f04f 0320 	mov.w	r3, #32
   1b89e:	f3ef 8711 	mrs	r7, BASEPRI
   1b8a2:	f383 8811 	msr	BASEPRI, r3
   1b8a6:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1b8aa:	4d0d      	ldr	r5, [pc, #52]	; (1b8e0 <z_tick_sleep.part.19+0x50>)
   1b8ac:	4b0d      	ldr	r3, [pc, #52]	; (1b8e4 <z_tick_sleep.part.19+0x54>)
   1b8ae:	68a8      	ldr	r0, [r5, #8]
   1b8b0:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1b8b2:	f7ff ff4b 	bl	1b74c <z_remove_thread_from_ready_q>
   1b8b6:	68a8      	ldr	r0, [r5, #8]
   1b8b8:	490b      	ldr	r1, [pc, #44]	; (1b8e8 <z_tick_sleep.part.19+0x58>)
   1b8ba:	4632      	mov	r2, r6
   1b8bc:	3018      	adds	r0, #24
   1b8be:	f000 fad9 	bl	1be74 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
   1b8c2:	68aa      	ldr	r2, [r5, #8]
   1b8c4:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b8c6:	7b53      	ldrb	r3, [r2, #13]
   1b8c8:	f043 0310 	orr.w	r3, r3, #16
   1b8cc:	7353      	strb	r3, [r2, #13]
   1b8ce:	f002 ffd1 	bl	1e874 <z_swap_irqlock>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1b8d2:	f003 f95a 	bl	1eb8a <z_tick_get_32>
   1b8d6:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1b8d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1b8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8de:	bf00      	nop
   1b8e0:	20024d00 	.word	0x20024d00
   1b8e4:	20024d34 	.word	0x20024d34
   1b8e8:	0001e975 	.word	0x0001e975

0001b8ec <z_set_prio>:
{
   1b8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b8f0:	4604      	mov	r4, r0
   1b8f2:	f04f 0320 	mov.w	r3, #32
   1b8f6:	f3ef 8911 	mrs	r9, BASEPRI
   1b8fa:	f383 8811 	msr	BASEPRI, r3
   1b8fe:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   1b902:	f002 ffae 	bl	1e862 <z_is_thread_ready>
		if (need_sched) {
   1b906:	b24e      	sxtb	r6, r1
   1b908:	4680      	mov	r8, r0
   1b90a:	b360      	cbz	r0, 1b966 <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b90c:	4d17      	ldr	r5, [pc, #92]	; (1b96c <z_set_prio+0x80>)
   1b90e:	4621      	mov	r1, r4
   1b910:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1b914:	4638      	mov	r0, r7
   1b916:	f7ff fe1b 	bl	1b550 <z_priq_dumb_remove>
	return list->head == list;
   1b91a:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   1b91c:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b91e:	42bb      	cmp	r3, r7
   1b920:	462a      	mov	r2, r5
   1b922:	d019      	beq.n	1b958 <z_set_prio+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b924:	b1c3      	cbz	r3, 1b958 <z_set_prio+0x6c>
   1b926:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b928:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1b92c:	42b0      	cmp	r0, r6
   1b92e:	dd0e      	ble.n	1b94e <z_set_prio+0x62>
	node->prev = successor->prev;
   1b930:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b932:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b936:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b938:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b93a:	2001      	movs	r0, #1
   1b93c:	f7ff fe1e 	bl	1b57c <update_cache>
	__asm__ volatile(
   1b940:	f389 8811 	msr	BASEPRI, r9
   1b944:	f3bf 8f6f 	isb	sy
}
   1b948:	4640      	mov	r0, r8
   1b94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (node == list->tail) ? NULL : node->next;
   1b94e:	4299      	cmp	r1, r3
   1b950:	d002      	beq.n	1b958 <z_set_prio+0x6c>
   1b952:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b954:	2b00      	cmp	r3, #0
   1b956:	d1e7      	bne.n	1b928 <z_set_prio+0x3c>
	node->prev = list->tail;
   1b958:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1b95a:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   1b95c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b95e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b960:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b962:	62d4      	str	r4, [r2, #44]	; 0x2c
   1b964:	e7e9      	b.n	1b93a <z_set_prio+0x4e>
			thread->base.prio = prio;
   1b966:	73a6      	strb	r6, [r4, #14]
   1b968:	e7ea      	b.n	1b940 <z_set_prio+0x54>
   1b96a:	bf00      	nop
   1b96c:	20024d00 	.word	0x20024d00

0001b970 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b970:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1b972:	4b04      	ldr	r3, [pc, #16]	; (1b984 <z_sched_init+0x14>)
   1b974:	4608      	mov	r0, r1
   1b976:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1b97a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1b97e:	f7ff bda7 	b.w	1b4d0 <k_sched_time_slice_set>
   1b982:	bf00      	nop
   1b984:	20024d00 	.word	0x20024d00

0001b988 <z_impl_k_yield>:
{
   1b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1b98a:	4c23      	ldr	r4, [pc, #140]	; (1ba18 <z_impl_k_yield+0x90>)
   1b98c:	4b23      	ldr	r3, [pc, #140]	; (1ba1c <z_impl_k_yield+0x94>)
   1b98e:	68a2      	ldr	r2, [r4, #8]
   1b990:	429a      	cmp	r2, r3
   1b992:	d029      	beq.n	1b9e8 <z_impl_k_yield+0x60>
	__asm__ volatile(
   1b994:	f04f 0320 	mov.w	r3, #32
   1b998:	f3ef 8611 	mrs	r6, BASEPRI
   1b99c:	f383 8811 	msr	BASEPRI, r3
   1b9a0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1b9a4:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1b9a8:	68a1      	ldr	r1, [r4, #8]
   1b9aa:	4628      	mov	r0, r5
   1b9ac:	f7ff fdd0 	bl	1b550 <z_priq_dumb_remove>
	return list->head == list;
   1b9b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1b9b2:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b9b4:	42aa      	cmp	r2, r5
   1b9b6:	d028      	beq.n	1ba0a <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b9b8:	b33a      	cbz	r2, 1ba0a <z_impl_k_yield+0x82>
   1b9ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1b9bc:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b9c0:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1b9c4:	428f      	cmp	r7, r1
   1b9c6:	dd1b      	ble.n	1ba00 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   1b9c8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b9ca:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1b9ce:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1b9d0:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1b9d2:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   1b9d4:	2001      	movs	r0, #1
   1b9d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1b9da:	735a      	strb	r2, [r3, #13]
   1b9dc:	f7ff fdce 	bl	1b57c <update_cache>
	__asm__ volatile(
   1b9e0:	f386 8811 	msr	BASEPRI, r6
   1b9e4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b9e8:	f04f 0320 	mov.w	r3, #32
   1b9ec:	f3ef 8011 	mrs	r0, BASEPRI
   1b9f0:	f383 8811 	msr	BASEPRI, r3
   1b9f4:	f3bf 8f6f 	isb	sy
}
   1b9f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
   1b9fc:	f002 bf3a 	b.w	1e874 <z_swap_irqlock>
	return (node == list->tail) ? NULL : node->next;
   1ba00:	4282      	cmp	r2, r0
   1ba02:	d002      	beq.n	1ba0a <z_impl_k_yield+0x82>
   1ba04:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ba06:	2a00      	cmp	r2, #0
   1ba08:	d1da      	bne.n	1b9c0 <z_impl_k_yield+0x38>
	node->prev = list->tail;
   1ba0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   1ba0c:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1ba0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1ba10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1ba12:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1ba14:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ba16:	e7dc      	b.n	1b9d2 <z_impl_k_yield+0x4a>
   1ba18:	20024d00 	.word	0x20024d00
   1ba1c:	20020b3c 	.word	0x20020b3c

0001ba20 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   1ba20:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   1ba22:	1c43      	adds	r3, r0, #1
{
   1ba24:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   1ba26:	d105      	bne.n	1ba34 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   1ba28:	4b10      	ldr	r3, [pc, #64]	; (1ba6c <z_impl_k_sleep+0x4c>)
   1ba2a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1ba2c:	f000 f936 	bl	1bc9c <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1ba30:	4620      	mov	r0, r4
   1ba32:	bd38      	pop	{r3, r4, r5, pc}
   1ba34:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1ba38:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ba3c:	2100      	movs	r1, #0
   1ba3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba42:	fbe5 0104 	umlal	r0, r1, r5, r4
   1ba46:	2300      	movs	r3, #0
   1ba48:	f7f0 fc12 	bl	c270 <__aeabi_uldivmod>
	if (ticks == 0) {
   1ba4c:	4604      	mov	r4, r0
   1ba4e:	b948      	cbnz	r0, 1ba64 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
   1ba50:	f7ff ff9a 	bl	1b988 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1ba54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1ba58:	fb84 0100 	smull	r0, r1, r4, r0
   1ba5c:	0bc4      	lsrs	r4, r0, #15
   1ba5e:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1ba62:	e7e5      	b.n	1ba30 <z_impl_k_sleep+0x10>
   1ba64:	f7ff ff14 	bl	1b890 <z_tick_sleep.part.19>
   1ba68:	4604      	mov	r4, r0
   1ba6a:	e7f3      	b.n	1ba54 <z_impl_k_sleep+0x34>
   1ba6c:	20024d00 	.word	0x20024d00

0001ba70 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1ba70:	4b01      	ldr	r3, [pc, #4]	; (1ba78 <z_impl_k_current_get+0x8>)
   1ba72:	6898      	ldr	r0, [r3, #8]
   1ba74:	4770      	bx	lr
   1ba76:	bf00      	nop
   1ba78:	20024d00 	.word	0x20024d00

0001ba7c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ba7c:	b570      	push	{r4, r5, r6, lr}
   1ba7e:	4604      	mov	r4, r0
   1ba80:	f04f 0320 	mov.w	r3, #32
   1ba84:	f3ef 8611 	mrs	r6, BASEPRI
   1ba88:	f383 8811 	msr	BASEPRI, r3
   1ba8c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1ba90:	f002 ffa1 	bl	1e9d6 <z_unpend_first_thread>
	if (thread != NULL) {
   1ba94:	4605      	mov	r5, r0
   1ba96:	b170      	cbz	r0, 1bab6 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ba98:	7b43      	ldrb	r3, [r0, #13]
   1ba9a:	06db      	lsls	r3, r3, #27
   1ba9c:	d103      	bne.n	1baa6 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
   1ba9e:	6983      	ldr	r3, [r0, #24]
   1baa0:	b90b      	cbnz	r3, 1baa6 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
   1baa2:	f7ff fda5 	bl	1b5f0 <z_add_thread_to_ready_q>
   1baa6:	2300      	movs	r3, #0
   1baa8:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1baaa:	4631      	mov	r1, r6
}
   1baac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1bab0:	4807      	ldr	r0, [pc, #28]	; (1bad0 <z_impl_k_sem_give+0x54>)
   1bab2:	f002 bf1a 	b.w	1e8ea <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bab6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1baba:	429a      	cmp	r2, r3
   1babc:	bf18      	it	ne
   1babe:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bac0:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bac2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bac4:	f104 0010 	add.w	r0, r4, #16
   1bac8:	f003 f996 	bl	1edf8 <z_handle_obj_poll_events>
   1bacc:	e7ed      	b.n	1baaa <z_impl_k_sem_give+0x2e>
   1bace:	bf00      	nop
   1bad0:	20026568 	.word	0x20026568

0001bad4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1bad4:	b410      	push	{r4}
   1bad6:	4602      	mov	r2, r0
   1bad8:	460b      	mov	r3, r1
   1bada:	f04f 0020 	mov.w	r0, #32
   1bade:	f3ef 8111 	mrs	r1, BASEPRI
   1bae2:	f380 8811 	msr	BASEPRI, r0
   1bae6:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1baea:	6894      	ldr	r4, [r2, #8]
   1baec:	b14c      	cbz	r4, 1bb02 <z_impl_k_sem_take+0x2e>
		sem->count--;
   1baee:	3c01      	subs	r4, #1
   1baf0:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1baf2:	f381 8811 	msr	BASEPRI, r1
   1baf6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1bafa:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1bafc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bb00:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1bb02:	b933      	cbnz	r3, 1bb12 <z_impl_k_sem_take+0x3e>
   1bb04:	f381 8811 	msr	BASEPRI, r1
   1bb08:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1bb0c:	f06f 000f 	mvn.w	r0, #15
   1bb10:	e7f4      	b.n	1bafc <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bb12:	4802      	ldr	r0, [pc, #8]	; (1bb1c <z_impl_k_sem_take+0x48>)
}
   1bb14:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bb18:	f7ff bea6 	b.w	1b868 <z_pend_curr>
   1bb1c:	20026568 	.word	0x20026568

0001bb20 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1bb20:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1bb22:	4c08      	ldr	r4, [pc, #32]	; (1bb44 <k_sys_work_q_init+0x24>)
   1bb24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bb28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1bb2c:	4906      	ldr	r1, [pc, #24]	; (1bb48 <k_sys_work_q_init+0x28>)
   1bb2e:	4620      	mov	r0, r4
   1bb30:	f000 f942 	bl	1bdb8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1bb34:	4905      	ldr	r1, [pc, #20]	; (1bb4c <k_sys_work_q_init+0x2c>)
   1bb36:	f104 0010 	add.w	r0, r4, #16
   1bb3a:	f002 ffa1 	bl	1ea80 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1bb3e:	2000      	movs	r0, #0
   1bb40:	bd10      	pop	{r4, pc}
   1bb42:	bf00      	nop
   1bb44:	20024d40 	.word	0x20024d40
   1bb48:	20028ac8 	.word	0x20028ac8
   1bb4c:	00020d35 	.word	0x00020d35

0001bb50 <z_check_stack_sentinel>:
 */
void z_check_stack_sentinel(void)
{
	u32_t *stack;

	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
   1bb50:	4b09      	ldr	r3, [pc, #36]	; (1bb78 <z_check_stack_sentinel+0x28>)
   1bb52:	689b      	ldr	r3, [r3, #8]
   1bb54:	7b5a      	ldrb	r2, [r3, #13]
   1bb56:	07d2      	lsls	r2, r2, #31
   1bb58:	d40d      	bmi.n	1bb76 <z_check_stack_sentinel+0x26>
		return;
	}

	stack = (u32_t *)_current->stack_info.start;
   1bb5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	if (*stack != STACK_SENTINEL) {
   1bb5c:	681a      	ldr	r2, [r3, #0]
   1bb5e:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   1bb62:	d008      	beq.n	1bb76 <z_check_stack_sentinel+0x26>
		/* Restore it so further checks don't trigger this same error */
		*stack = STACK_SENTINEL;
   1bb64:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   1bb68:	601a      	str	r2, [r3, #0]
		z_except_reason(K_ERR_STACK_CHK_FAIL);
   1bb6a:	4040      	eors	r0, r0
   1bb6c:	f380 8811 	msr	BASEPRI, r0
   1bb70:	f04f 0002 	mov.w	r0, #2
   1bb74:	df02      	svc	2
	}
}
   1bb76:	4770      	bx	lr
   1bb78:	20024d00 	.word	0x20024d00

0001bb7c <z_impl_k_thread_start>:
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1bb7c:	b510      	push	{r4, lr}
   1bb7e:	4602      	mov	r2, r0
	__asm__ volatile(
   1bb80:	f04f 0320 	mov.w	r3, #32
   1bb84:	f3ef 8411 	mrs	r4, BASEPRI
   1bb88:	f383 8811 	msr	BASEPRI, r3
   1bb8c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1bb90:	7b43      	ldrb	r3, [r0, #13]
   1bb92:	0759      	lsls	r1, r3, #29
   1bb94:	d404      	bmi.n	1bba0 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
   1bb96:	f384 8811 	msr	BASEPRI, r4
   1bb9a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1bb9e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bba0:	f023 0304 	bic.w	r3, r3, #4
   1bba4:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1bba6:	f002 ff62 	bl	1ea6e <z_is_thread_ready>
   1bbaa:	b110      	cbz	r0, 1bbb2 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   1bbac:	4610      	mov	r0, r2
   1bbae:	f7ff fd1f 	bl	1b5f0 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1bbb2:	4621      	mov	r1, r4
}
   1bbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1bbb8:	4801      	ldr	r0, [pc, #4]	; (1bbc0 <z_impl_k_thread_start+0x44>)
   1bbba:	f002 be96 	b.w	1e8ea <z_reschedule>
   1bbbe:	bf00      	nop
   1bbc0:	20026568 	.word	0x20026568

0001bbc4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1bbc4:	b530      	push	{r4, r5, lr}
   1bbc6:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bbc8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1bbca:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bbcc:	9504      	str	r5, [sp, #16]
   1bbce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1bbd0:	9503      	str	r5, [sp, #12]
   1bbd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1bbd4:	9502      	str	r5, [sp, #8]
   1bbd6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1bbd8:	9501      	str	r5, [sp, #4]
   1bbda:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1bbdc:	9500      	str	r5, [sp, #0]
   1bbde:	f7f3 fd6f 	bl	f6c0 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1bbe2:	4b03      	ldr	r3, [pc, #12]	; (1bbf0 <z_setup_new_thread+0x2c>)
   1bbe4:	689b      	ldr	r3, [r3, #8]
   1bbe6:	b103      	cbz	r3, 1bbea <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1bbe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1bbea:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1bbec:	b007      	add	sp, #28
   1bbee:	bd30      	pop	{r4, r5, pc}
   1bbf0:	20024d00 	.word	0x20024d00

0001bbf4 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1bbf4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bbf6:	2600      	movs	r6, #0
{
   1bbf8:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bbfa:	9605      	str	r6, [sp, #20]
   1bbfc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
{
   1bbfe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bc00:	9604      	str	r6, [sp, #16]
   1bc02:	9e0d      	ldr	r6, [sp, #52]	; 0x34
{
   1bc04:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bc06:	9603      	str	r6, [sp, #12]
   1bc08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1bc0a:	9602      	str	r6, [sp, #8]
   1bc0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1bc0e:	9601      	str	r6, [sp, #4]
   1bc10:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1bc12:	9600      	str	r6, [sp, #0]
   1bc14:	f7ff ffd6 	bl	1bbc4 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1bc18:	1c6b      	adds	r3, r5, #1
   1bc1a:	d003      	beq.n	1bc24 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1bc1c:	b92d      	cbnz	r5, 1bc2a <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
   1bc1e:	4620      	mov	r0, r4
   1bc20:	f7ff ffac 	bl	1bb7c <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1bc24:	4620      	mov	r0, r4
   1bc26:	b006      	add	sp, #24
   1bc28:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   1bc2a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1bc2e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bc32:	2100      	movs	r1, #0
   1bc34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc38:	2300      	movs	r3, #0
   1bc3a:	fbe6 0105 	umlal	r0, r1, r6, r5
   1bc3e:	f7f0 fb17 	bl	c270 <__aeabi_uldivmod>
   1bc42:	4903      	ldr	r1, [pc, #12]	; (1bc50 <z_impl_k_thread_create+0x5c>)
   1bc44:	1c42      	adds	r2, r0, #1
   1bc46:	f104 0018 	add.w	r0, r4, #24
   1bc4a:	f000 f913 	bl	1be74 <z_add_timeout>
   1bc4e:	e7e9      	b.n	1bc24 <z_impl_k_thread_create+0x30>
   1bc50:	0001e975 	.word	0x0001e975

0001bc54 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
   1bc54:	b510      	push	{r4, lr}
   1bc56:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   1bc58:	f002 ff09 	bl	1ea6e <z_is_thread_ready>
   1bc5c:	b110      	cbz	r0, 1bc64 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   1bc5e:	4620      	mov	r0, r4
   1bc60:	f7ff fd74 	bl	1b74c <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1bc64:	f104 0018 	add.w	r0, r4, #24
   1bc68:	f002 ff4f 	bl	1eb0a <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bc6c:	7b63      	ldrb	r3, [r4, #13]
   1bc6e:	f043 0310 	orr.w	r3, r3, #16
   1bc72:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
   1bc74:	4b08      	ldr	r3, [pc, #32]	; (1bc98 <z_thread_single_suspend+0x44>)
   1bc76:	689b      	ldr	r3, [r3, #8]
   1bc78:	42a3      	cmp	r3, r4
   1bc7a:	d10b      	bne.n	1bc94 <z_thread_single_suspend+0x40>
	__asm__ volatile(
   1bc7c:	f04f 0320 	mov.w	r3, #32
   1bc80:	f3ef 8011 	mrs	r0, BASEPRI
   1bc84:	f383 8811 	msr	BASEPRI, r3
   1bc88:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1bc8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1bc90:	f002 be36 	b.w	1e900 <z_reschedule_irqlock>
   1bc94:	bd10      	pop	{r4, pc}
   1bc96:	bf00      	nop
   1bc98:	20024d00 	.word	0x20024d00

0001bc9c <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
   1bc9c:	b538      	push	{r3, r4, r5, lr}
   1bc9e:	4605      	mov	r5, r0
   1bca0:	f04f 0320 	mov.w	r3, #32
   1bca4:	f3ef 8411 	mrs	r4, BASEPRI
   1bca8:	f383 8811 	msr	BASEPRI, r3
   1bcac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
   1bcb0:	f7ff ffd0 	bl	1bc54 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
   1bcb4:	4b07      	ldr	r3, [pc, #28]	; (1bcd4 <z_impl_k_thread_suspend+0x38>)
   1bcb6:	689b      	ldr	r3, [r3, #8]
   1bcb8:	42ab      	cmp	r3, r5
   1bcba:	d105      	bne.n	1bcc8 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
   1bcbc:	4621      	mov	r1, r4
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1bcbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   1bcc2:	4805      	ldr	r0, [pc, #20]	; (1bcd8 <z_impl_k_thread_suspend+0x3c>)
   1bcc4:	f002 be11 	b.w	1e8ea <z_reschedule>
	__asm__ volatile(
   1bcc8:	f384 8811 	msr	BASEPRI, r4
   1bccc:	f3bf 8f6f 	isb	sy
}
   1bcd0:	bd38      	pop	{r3, r4, r5, pc}
   1bcd2:	bf00      	nop
   1bcd4:	20024d00 	.word	0x20024d00
   1bcd8:	20026568 	.word	0x20026568

0001bcdc <z_impl_k_thread_resume>:
	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);
}

void z_impl_k_thread_resume(struct k_thread *thread)
{
   1bcdc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bcde:	f04f 0320 	mov.w	r3, #32
   1bce2:	f3ef 8411 	mrs	r4, BASEPRI
   1bce6:	f383 8811 	msr	BASEPRI, r3
   1bcea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_resume(thread);
   1bcee:	f002 fede 	bl	1eaae <z_thread_single_resume>

	sys_trace_thread_resume(thread);
	z_reschedule(&lock, key);
   1bcf2:	4621      	mov	r1, r4
}
   1bcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1bcf8:	4801      	ldr	r0, [pc, #4]	; (1bd00 <z_impl_k_thread_resume+0x24>)
   1bcfa:	f002 bdf6 	b.w	1e8ea <z_reschedule>
   1bcfe:	bf00      	nop
   1bd00:	20026568 	.word	0x20026568

0001bd04 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1bd08:	4e28      	ldr	r6, [pc, #160]	; (1bdac <z_init_static_threads+0xa8>)
   1bd0a:	4d29      	ldr	r5, [pc, #164]	; (1bdb0 <z_init_static_threads+0xac>)
   1bd0c:	46b0      	mov	r8, r6
{
   1bd0e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1bd10:	42b5      	cmp	r5, r6
   1bd12:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1bd16:	d310      	bcc.n	1bd3a <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1bd18:	f7ff fc06 	bl	1b528 <k_sched_lock>
   1bd1c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1bd20:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bd24:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1bd26:	4c22      	ldr	r4, [pc, #136]	; (1bdb0 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1bd28:	f8df a088 	ldr.w	sl, [pc, #136]	; 1bdb4 <z_init_static_threads+0xb0>
   1bd2c:	4544      	cmp	r4, r8
   1bd2e:	d321      	bcc.n	1bd74 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1bd30:	b007      	add	sp, #28
   1bd32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1bd36:	f7ff bc3f 	b.w	1b5b8 <k_sched_unlock>
		z_setup_new_thread(
   1bd3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1bd3e:	9305      	str	r3, [sp, #20]
   1bd40:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1bd44:	9304      	str	r3, [sp, #16]
   1bd46:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1bd4a:	9303      	str	r3, [sp, #12]
   1bd4c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1bd50:	9302      	str	r3, [sp, #8]
   1bd52:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1bd56:	9301      	str	r3, [sp, #4]
   1bd58:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1bd5c:	9300      	str	r3, [sp, #0]
   1bd5e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1bd62:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1bd66:	f7ff ff2d 	bl	1bbc4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1bd6a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1bd6e:	64dd      	str	r5, [r3, #76]	; 0x4c
   1bd70:	4625      	mov	r5, r4
   1bd72:	e7cd      	b.n	1bd10 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1bd74:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1bd76:	1c4b      	adds	r3, r1, #1
   1bd78:	d004      	beq.n	1bd84 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   1bd7a:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1bd7c:	b921      	cbnz	r1, 1bd88 <z_init_static_threads+0x84>
   1bd7e:	4628      	mov	r0, r5
   1bd80:	f7ff fefc 	bl	1bb7c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1bd84:	3430      	adds	r4, #48	; 0x30
   1bd86:	e7d1      	b.n	1bd2c <z_init_static_threads+0x28>
   1bd88:	46b3      	mov	fp, r6
   1bd8a:	46bc      	mov	ip, r7
   1bd8c:	fbe9 bc01 	umlal	fp, ip, r9, r1
   1bd90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd94:	2300      	movs	r3, #0
   1bd96:	4658      	mov	r0, fp
   1bd98:	4661      	mov	r1, ip
   1bd9a:	f7f0 fa69 	bl	c270 <__aeabi_uldivmod>
   1bd9e:	4651      	mov	r1, sl
   1bda0:	1c42      	adds	r2, r0, #1
   1bda2:	f105 0018 	add.w	r0, r5, #24
   1bda6:	f000 f865 	bl	1be74 <z_add_timeout>
   1bdaa:	e7eb      	b.n	1bd84 <z_init_static_threads+0x80>
   1bdac:	2002c620 	.word	0x2002c620
   1bdb0:	2002c620 	.word	0x2002c620
   1bdb4:	0001e975 	.word	0x0001e975

0001bdb8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1bdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdbc:	4605      	mov	r5, r0
   1bdbe:	b086      	sub	sp, #24
   1bdc0:	460e      	mov	r6, r1
   1bdc2:	4617      	mov	r7, r2
   1bdc4:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   1bdc6:	f002 fcda 	bl	1e77e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1bdca:	f105 0410 	add.w	r4, r5, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bdce:	2000      	movs	r0, #0
   1bdd0:	4b09      	ldr	r3, [pc, #36]	; (1bdf8 <k_work_q_start+0x40>)
   1bdd2:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1bdd6:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1bdda:	e9cd 5000 	strd	r5, r0, [sp]
   1bdde:	463a      	mov	r2, r7
   1bde0:	4631      	mov	r1, r6
   1bde2:	4620      	mov	r0, r4
   1bde4:	f7ff ff06 	bl	1bbf4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1bde8:	4620      	mov	r0, r4
   1bdea:	4904      	ldr	r1, [pc, #16]	; (1bdfc <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1bdec:	b006      	add	sp, #24
   1bdee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bdf2:	f002 be45 	b.w	1ea80 <z_impl_k_thread_name_set>
   1bdf6:	bf00      	nop
   1bdf8:	0001c56b 	.word	0x0001c56b
   1bdfc:	00020d3e 	.word	0x00020d3e

0001be00 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1be00:	4b03      	ldr	r3, [pc, #12]	; (1be10 <elapsed+0x10>)
   1be02:	681b      	ldr	r3, [r3, #0]
   1be04:	b90b      	cbnz	r3, 1be0a <elapsed+0xa>
   1be06:	f7f3 bb5b 	b.w	f4c0 <z_clock_elapsed>
}
   1be0a:	2000      	movs	r0, #0
   1be0c:	4770      	bx	lr
   1be0e:	bf00      	nop
   1be10:	20024e00 	.word	0x20024e00

0001be14 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1be14:	6803      	ldr	r3, [r0, #0]
   1be16:	b140      	cbz	r0, 1be2a <remove_timeout+0x16>
   1be18:	4a07      	ldr	r2, [pc, #28]	; (1be38 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1be1a:	6852      	ldr	r2, [r2, #4]
   1be1c:	4290      	cmp	r0, r2
   1be1e:	d004      	beq.n	1be2a <remove_timeout+0x16>
	if (next(t) != NULL) {
   1be20:	b11b      	cbz	r3, 1be2a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1be22:	689a      	ldr	r2, [r3, #8]
   1be24:	6881      	ldr	r1, [r0, #8]
   1be26:	440a      	add	r2, r1
   1be28:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1be2a:	6842      	ldr	r2, [r0, #4]
   1be2c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1be2e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1be30:	2300      	movs	r3, #0
	node->prev = NULL;
   1be32:	e9c0 3300 	strd	r3, r3, [r0]
}
   1be36:	4770      	bx	lr
   1be38:	2002c534 	.word	0x2002c534

0001be3c <next_timeout>:
	return list->head == list;
   1be3c:	4b0b      	ldr	r3, [pc, #44]	; (1be6c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1be3e:	b510      	push	{r4, lr}
   1be40:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be42:	429c      	cmp	r4, r3
   1be44:	bf08      	it	eq
   1be46:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1be48:	f7ff ffda 	bl	1be00 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1be4c:	b154      	cbz	r4, 1be64 <next_timeout+0x28>
   1be4e:	68a3      	ldr	r3, [r4, #8]
   1be50:	1a18      	subs	r0, r3, r0
   1be52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1be56:	4b06      	ldr	r3, [pc, #24]	; (1be70 <next_timeout+0x34>)
   1be58:	691b      	ldr	r3, [r3, #16]
   1be5a:	b113      	cbz	r3, 1be62 <next_timeout+0x26>
   1be5c:	4298      	cmp	r0, r3
   1be5e:	bfa8      	it	ge
   1be60:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1be62:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1be64:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1be68:	e7f5      	b.n	1be56 <next_timeout+0x1a>
   1be6a:	bf00      	nop
   1be6c:	2002c534 	.word	0x2002c534
   1be70:	20024d00 	.word	0x20024d00

0001be74 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1be74:	b570      	push	{r4, r5, r6, lr}
   1be76:	4604      	mov	r4, r0
   1be78:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1be7a:	60c1      	str	r1, [r0, #12]
   1be7c:	f04f 0320 	mov.w	r3, #32
   1be80:	f3ef 8511 	mrs	r5, BASEPRI
   1be84:	f383 8811 	msr	BASEPRI, r3
   1be88:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1be8c:	f7ff ffb8 	bl	1be00 <elapsed>
   1be90:	2e01      	cmp	r6, #1
   1be92:	bfac      	ite	ge
   1be94:	1980      	addge	r0, r0, r6
   1be96:	3001      	addlt	r0, #1
	return list->head == list;
   1be98:	4b16      	ldr	r3, [pc, #88]	; (1bef4 <z_add_timeout+0x80>)
   1be9a:	60a0      	str	r0, [r4, #8]
   1be9c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be9e:	429a      	cmp	r2, r3
   1bea0:	d001      	beq.n	1bea6 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bea2:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1bea4:	b932      	cbnz	r2, 1beb4 <z_add_timeout+0x40>
	node->prev = list->tail;
   1bea6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1bea8:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   1beaa:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1beac:	685a      	ldr	r2, [r3, #4]
   1beae:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1beb0:	605c      	str	r4, [r3, #4]
   1beb2:	e00a      	b.n	1beca <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1beb4:	6890      	ldr	r0, [r2, #8]
   1beb6:	68a1      	ldr	r1, [r4, #8]
   1beb8:	4288      	cmp	r0, r1
   1beba:	dd15      	ble.n	1bee8 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   1bebc:	1a41      	subs	r1, r0, r1
   1bebe:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1bec0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bec2:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1bec6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1bec8:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1beca:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1becc:	429a      	cmp	r2, r3
   1bece:	d006      	beq.n	1bede <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bed0:	4294      	cmp	r4, r2
   1bed2:	d104      	bne.n	1bede <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   1bed4:	f7ff ffb2 	bl	1be3c <next_timeout>
   1bed8:	2100      	movs	r1, #0
   1beda:	f7f3 fa9b 	bl	f414 <z_clock_set_timeout>
	__asm__ volatile(
   1bede:	f385 8811 	msr	BASEPRI, r5
   1bee2:	f3bf 8f6f 	isb	sy
		}
	}
}
   1bee6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1bee8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1beea:	4296      	cmp	r6, r2
   1beec:	60a1      	str	r1, [r4, #8]
   1beee:	d0da      	beq.n	1bea6 <z_add_timeout+0x32>
   1bef0:	6812      	ldr	r2, [r2, #0]
   1bef2:	e7d7      	b.n	1bea4 <z_add_timeout+0x30>
   1bef4:	2002c534 	.word	0x2002c534

0001bef8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1bef8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1befc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1befe:	f7ff fbef 	bl	1b6e0 <z_time_slice>
	__asm__ volatile(
   1bf02:	f04f 0320 	mov.w	r3, #32
   1bf06:	f3ef 8511 	mrs	r5, BASEPRI
   1bf0a:	f383 8811 	msr	BASEPRI, r3
   1bf0e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bf12:	4f21      	ldr	r7, [pc, #132]	; (1bf98 <z_clock_announce+0xa0>)
   1bf14:	4e21      	ldr	r6, [pc, #132]	; (1bf9c <z_clock_announce+0xa4>)
   1bf16:	46b8      	mov	r8, r7
	return list->head == list;
   1bf18:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1bfa0 <z_clock_announce+0xa8>
   1bf1c:	6034      	str	r4, [r6, #0]
   1bf1e:	f8d9 4000 	ldr.w	r4, [r9]
   1bf22:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf24:	454c      	cmp	r4, r9
   1bf26:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1bf2a:	d005      	beq.n	1bf38 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bf2c:	b124      	cbz	r4, 1bf38 <z_clock_announce+0x40>
   1bf2e:	68a3      	ldr	r3, [r4, #8]
   1bf30:	4293      	cmp	r3, r2
   1bf32:	dd14      	ble.n	1bf5e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bf34:	1a9b      	subs	r3, r3, r2
   1bf36:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1bf38:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1bf3a:	eb1b 0002 	adds.w	r0, fp, r2
   1bf3e:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   1bf42:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1bf46:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1bf48:	f7ff ff78 	bl	1be3c <next_timeout>
   1bf4c:	4621      	mov	r1, r4
   1bf4e:	f7f3 fa61 	bl	f414 <z_clock_set_timeout>
	__asm__ volatile(
   1bf52:	f385 8811 	msr	BASEPRI, r5
   1bf56:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bf5a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1bf5e:	eb1b 0003 	adds.w	r0, fp, r3
   1bf62:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1bf66:	1ad3      	subs	r3, r2, r3
   1bf68:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1bf6a:	2300      	movs	r3, #0
		curr_tick += dt;
   1bf6c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1bf70:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1bf72:	4620      	mov	r0, r4
   1bf74:	f7ff ff4e 	bl	1be14 <remove_timeout>
   1bf78:	f385 8811 	msr	BASEPRI, r5
   1bf7c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bf80:	68e3      	ldr	r3, [r4, #12]
   1bf82:	4798      	blx	r3
	__asm__ volatile(
   1bf84:	f04f 0320 	mov.w	r3, #32
   1bf88:	f3ef 8511 	mrs	r5, BASEPRI
   1bf8c:	f383 8811 	msr	BASEPRI, r3
   1bf90:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bf94:	e7c3      	b.n	1bf1e <z_clock_announce+0x26>
   1bf96:	bf00      	nop
   1bf98:	200200e0 	.word	0x200200e0
   1bf9c:	20024e00 	.word	0x20024e00
   1bfa0:	2002c534 	.word	0x2002c534

0001bfa4 <z_tick_get>:

s64_t z_tick_get(void)
{
   1bfa4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1bfa8:	f04f 0320 	mov.w	r3, #32
   1bfac:	f3ef 8411 	mrs	r4, BASEPRI
   1bfb0:	f383 8811 	msr	BASEPRI, r3
   1bfb4:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1bfb8:	f7f3 fa82 	bl	f4c0 <z_clock_elapsed>
   1bfbc:	4b07      	ldr	r3, [pc, #28]	; (1bfdc <z_tick_get+0x38>)
   1bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bfc2:	eb12 0b00 	adds.w	fp, r2, r0
   1bfc6:	f143 0c00 	adc.w	ip, r3, #0
   1bfca:	4658      	mov	r0, fp
   1bfcc:	4661      	mov	r1, ip
	__asm__ volatile(
   1bfce:	f384 8811 	msr	BASEPRI, r4
   1bfd2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bfd6:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1bfda:	bf00      	nop
   1bfdc:	200200e0 	.word	0x200200e0

0001bfe0 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1bfe0:	6a02      	ldr	r2, [r0, #32]
{
   1bfe2:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   1bfe4:	2a00      	cmp	r2, #0
{
   1bfe6:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1bfe8:	dd02      	ble.n	1bff0 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bfea:	490e      	ldr	r1, [pc, #56]	; (1c024 <z_timer_expiration_handler+0x44>)
   1bfec:	f7ff ff42 	bl	1be74 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bff2:	3301      	adds	r3, #1
   1bff4:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bff6:	69a3      	ldr	r3, [r4, #24]
   1bff8:	b10b      	cbz	r3, 1bffe <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1bffa:	4620      	mov	r0, r4
   1bffc:	4798      	blx	r3
	return list->head == list;
   1bffe:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c002:	42a5      	cmp	r5, r4
   1c004:	d00d      	beq.n	1c022 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c006:	b165      	cbz	r5, 1c022 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1c008:	4628      	mov	r0, r5
   1c00a:	f002 fc55 	bl	1e8b8 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c00e:	7b6b      	ldrb	r3, [r5, #13]
   1c010:	06db      	lsls	r3, r3, #27
   1c012:	d104      	bne.n	1c01e <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1c014:	69ab      	ldr	r3, [r5, #24]
   1c016:	b913      	cbnz	r3, 1c01e <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1c018:	4628      	mov	r0, r5
   1c01a:	f7ff fae9 	bl	1b5f0 <z_add_thread_to_ready_q>
   1c01e:	2300      	movs	r3, #0
   1c020:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
   1c022:	bd38      	pop	{r3, r4, r5, pc}
   1c024:	0001bfe1 	.word	0x0001bfe1

0001c028 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1c028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c02c:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c030:	2700      	movs	r7, #0
   1c032:	4604      	mov	r4, r0
   1c034:	4688      	mov	r8, r1
   1c036:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c03a:	4630      	mov	r0, r6
   1c03c:	4639      	mov	r1, r7
   1c03e:	2300      	movs	r3, #0
   1c040:	fbe5 0102 	umlal	r0, r1, r5, r2
   1c044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c048:	f7f0 f912 	bl	c270 <__aeabi_uldivmod>
   1c04c:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
   1c04e:	9000      	str	r0, [sp, #0]
   1c050:	4630      	mov	r0, r6
   1c052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c056:	2300      	movs	r3, #0
   1c058:	fbe5 0108 	umlal	r0, r1, r5, r8
   1c05c:	f7f0 f908 	bl	c270 <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
   1c060:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1c062:	4620      	mov	r0, r4
   1c064:	f002 fd51 	bl	1eb0a <z_abort_timeout>
	timer->period = period_in_ticks;
   1c068:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c06a:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   1c06c:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   1c06e:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c070:	9a01      	ldr	r2, [sp, #4]
   1c072:	4903      	ldr	r1, [pc, #12]	; (1c080 <z_impl_k_timer_start+0x58>)
	timer->status = 0U;
   1c074:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1c076:	b002      	add	sp, #8
   1c078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c07c:	f7ff befa 	b.w	1be74 <z_add_timeout>
   1c080:	0001bfe1 	.word	0x0001bfe1

0001c084 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1c084:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1c086:	7b44      	ldrb	r4, [r0, #13]
   1c088:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1c08c:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1c08e:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1c090:	f362 0141 	bfi	r1, r2, #1, #1
	event->poller = NULL;
   1c094:	2200      	movs	r2, #0
	event->mode = mode;
   1c096:	7381      	strb	r1, [r0, #14]
	event->state = K_POLL_STATE_NOT_READY;
   1c098:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1c09a:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1c09c:	4a02      	ldr	r2, [pc, #8]	; (1c0a8 <k_poll_event_init+0x24>)
   1c09e:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   1c0a0:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1c0a4:	bd10      	pop	{r4, pc}
   1c0a6:	bf00      	nop
   1c0a8:	00020fff 	.word	0x00020fff

0001c0ac <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1c0ac:	2301      	movs	r3, #1
{
   1c0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0b2:	b086      	sub	sp, #24
	struct _poller poller = { .is_polling = true,
   1c0b4:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   1c0b8:	4b23      	ldr	r3, [pc, #140]	; (1c148 <z_impl_k_poll+0x9c>)

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	events_registered = register_events(events, num_events, &poller,
   1c0ba:	4690      	mov	r8, r2
	struct _poller poller = { .is_polling = true,
   1c0bc:	689b      	ldr	r3, [r3, #8]
{
   1c0be:	4606      	mov	r6, r0
	struct _poller poller = { .is_polling = true,
   1c0c0:	9304      	str	r3, [sp, #16]
   1c0c2:	4b22      	ldr	r3, [pc, #136]	; (1c14c <z_impl_k_poll+0xa0>)
   1c0c4:	9305      	str	r3, [sp, #20]
	events_registered = register_events(events, num_events, &poller,
   1c0c6:	fab2 f382 	clz	r3, r2
   1c0ca:	aa03      	add	r2, sp, #12
   1c0cc:	095b      	lsrs	r3, r3, #5
   1c0ce:	f002 fe39 	bl	1ed44 <register_events>
   1c0d2:	4607      	mov	r7, r0
	__asm__ volatile(
   1c0d4:	f04f 0320 	mov.w	r3, #32
   1c0d8:	f3ef 8511 	mrs	r5, BASEPRI
   1c0dc:	f383 8811 	msr	BASEPRI, r3
   1c0e0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1c0e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c0e8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1c0ec:	b94b      	cbnz	r3, 1c102 <z_impl_k_poll+0x56>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   1c0ee:	462a      	mov	r2, r5
   1c0f0:	4639      	mov	r1, r7
   1c0f2:	4630      	mov	r0, r6
   1c0f4:	f002 fd8e 	bl	1ec14 <clear_event_registrations>
	__asm__ volatile(
   1c0f8:	f385 8811 	msr	BASEPRI, r5
   1c0fc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1c100:	e00b      	b.n	1c11a <z_impl_k_poll+0x6e>
	poller.is_polling = false;
   1c102:	2300      	movs	r3, #0
   1c104:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   1c108:	f1b8 0f00 	cmp.w	r8, #0
   1c10c:	d109      	bne.n	1c122 <z_impl_k_poll+0x76>
   1c10e:	f385 8811 	msr	BASEPRI, r5
   1c112:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c116:	f06f 040a 	mvn.w	r4, #10
}
   1c11a:	4620      	mov	r0, r4
   1c11c:	b006      	add	sp, #24
   1c11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c122:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c124:	4643      	mov	r3, r8
   1c126:	4629      	mov	r1, r5
   1c128:	4809      	ldr	r0, [pc, #36]	; (1c150 <z_impl_k_poll+0xa4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c12a:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c12e:	f7ff fb9b 	bl	1b868 <z_pend_curr>
   1c132:	4604      	mov	r4, r0
	__asm__ volatile(
   1c134:	f04f 0320 	mov.w	r3, #32
   1c138:	f3ef 8511 	mrs	r5, BASEPRI
   1c13c:	f383 8811 	msr	BASEPRI, r3
   1c140:	f3bf 8f6f 	isb	sy
   1c144:	e7d3      	b.n	1c0ee <z_impl_k_poll+0x42>
   1c146:	bf00      	nop
   1c148:	20024d00 	.word	0x20024d00
   1c14c:	0001eca5 	.word	0x0001eca5
   1c150:	20026568 	.word	0x20026568

0001c154 <enter_sleep>:

void enter_sleep(u16_t mode)
{
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1c154:	2803      	cmp	r0, #3
{
   1c156:	b508      	push	{r3, lr}
	if (mode == SHUTDOWN_MODEM_ONLY) {
   1c158:	d103      	bne.n	1c162 <enter_sleep+0xe>
	if (mode == SHUTDOWN_APP_MODEM) {
		lte_lc_power_off();
	}
	bsd_shutdown();
	nrf_regulators_system_off(NRF_REGULATORS_NS);
}
   1c15a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lte_lc_power_off();
   1c15e:	f7f6 b9f5 	b.w	1254c <lte_lc_power_off>
	if (mode == SHUTDOWN_APP_MODEM) {
   1c162:	2801      	cmp	r0, #1
   1c164:	d101      	bne.n	1c16a <enter_sleep+0x16>
		lte_lc_power_off();
   1c166:	f7f6 f9f1 	bl	1254c <lte_lc_power_off>
	bsd_shutdown();
   1c16a:	f7f8 fb31 	bl	147d0 <bsd_shutdown>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1c16e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1c172:	2201      	movs	r2, #1
   1c174:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1c178:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1c17c:	bf20      	wfe
   1c17e:	e7fd      	b.n	1c17c <enter_sleep+0x28>

0001c180 <main>:
		enter_sleep(SHUTDOWN_APP_MODEM);
	}
}
#else
void main(void)
{
   1c180:	b508      	push	{r3, lr}
	start_execute();
   1c182:	f7f0 fa09 	bl	c598 <start_execute>
	return z_impl_k_sleep(ms);
   1c186:	f242 7010 	movw	r0, #10000	; 0x2710
   1c18a:	f7ff fc49 	bl	1ba20 <z_impl_k_sleep>
	k_sleep(K_SECONDS(10));
	while(1)
	{
		send_message();
   1c18e:	f7f1 fe5f 	bl	de50 <send_message>
   1c192:	f241 3088 	movw	r0, #5000	; 0x1388
   1c196:	e7f8      	b.n	1c18a <main+0xa>

0001c198 <uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1c198:	6843      	ldr	r3, [r0, #4]
   1c19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c19c:	b103      	cbz	r3, 1c1a0 <uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1c19e:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
   1c1a0:	4770      	bx	lr

0001c1a2 <slm_at_callback>:
{
   1c1a2:	b510      	push	{r4, lr}
   1c1a4:	4604      	mov	r4, r0
	write_uart_string(str, strlen(str));
   1c1a6:	f001 f8e9 	bl	1d37c <strlen>
   1c1aa:	4601      	mov	r1, r0
   1c1ac:	4620      	mov	r0, r4
}
   1c1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_uart_string(str, strlen(str));
   1c1b2:	f7f0 ba2d 	b.w	c610 <write_uart_string>

0001c1b6 <response_handler>:
{
   1c1b6:	b510      	push	{r4, lr}
	int len = strlen(response) + 1;
   1c1b8:	4608      	mov	r0, r1
{
   1c1ba:	460c      	mov	r4, r1
	int len = strlen(response) + 1;
   1c1bc:	f001 f8de 	bl	1d37c <strlen>
   1c1c0:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   1c1c2:	2901      	cmp	r1, #1
   1c1c4:	dd04      	ble.n	1c1d0 <response_handler+0x1a>
		write_uart_string(response, len);
   1c1c6:	4620      	mov	r0, r4
}
   1c1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   1c1cc:	f7f0 ba20 	b.w	c610 <write_uart_string>
}
   1c1d0:	bd10      	pop	{r4, pc}

0001c1d2 <z_errno>:
   1c1d2:	f7fe bda7 	b.w	1ad24 <z_impl_z_errno>

0001c1d6 <k_sleep>:
   1c1d6:	f7ff bc23 	b.w	1ba20 <z_impl_k_sleep>

0001c1da <slm_at_tcpip_uninit>:
	return do_socket_close(0);
   1c1da:	2000      	movs	r0, #0
   1c1dc:	f7f0 bcf0 	b.w	cbc0 <do_socket_close>

0001c1e0 <z_errno>:
   1c1e0:	f7fe bda0 	b.w	1ad24 <z_impl_z_errno>

0001c1e4 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1c1e4:	b570      	push	{r4, r5, r6, lr}
   1c1e6:	250c      	movs	r5, #12
   1c1e8:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1c1ea:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1c1ee:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   1c1f0:	4288      	cmp	r0, r1

	*word = &bitarray[bn / 32];
   1c1f2:	4610      	mov	r0, r2
   1c1f4:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   1c1f8:	bfb8      	it	lt
   1c1fa:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   1c1fc:	2a00      	cmp	r2, #0
   1c1fe:	bfb8      	it	lt
   1c200:	f102 001f 	addlt.w	r0, r2, #31
   1c204:	1140      	asrs	r0, r0, #5
   1c206:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1c20a:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1c20c:	f002 001f 	and.w	r0, r2, #31
   1c210:	bd70      	pop	{r4, r5, r6, pc}

0001c212 <pool_irq_lock.isra.2.part.3>:
   1c212:	f04f 0320 	mov.w	r3, #32
   1c216:	f3ef 8011 	mrs	r0, BASEPRI
   1c21a:	f383 8811 	msr	BASEPRI, r3
   1c21e:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
		return irq_lock();
	} else {
		return 0;
	}
}
   1c222:	4770      	bx	lr

0001c224 <pool_irq_unlock.isra.4>:

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c224:	07c3      	lsls	r3, r0, #31
   1c226:	d503      	bpl.n	1c230 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   1c228:	f381 8811 	msr	BASEPRI, r1
   1c22c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1c230:	4770      	bx	lr

0001c232 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   1c232:	23ff      	movs	r3, #255	; 0xff
{
   1c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c238:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   1c23a:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c23c:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   1c23e:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   1c240:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c244:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c246:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1c248:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   1c24c:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1c250:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   1c252:	4598      	cmp	r8, r3
   1c254:	dc05      	bgt.n	1c262 <z_sys_mem_pool_base_init+0x30>
   1c256:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   1c258:	4619      	mov	r1, r3
   1c25a:	428f      	cmp	r7, r1
   1c25c:	dc20      	bgt.n	1c2a0 <z_sys_mem_pool_base_init+0x6e>
}
   1c25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   1c262:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   1c266:	fb09 fe03 	mul.w	lr, r9, r3
   1c26a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c26e:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   1c270:	eb0a 040e 	add.w	r4, sl, lr
   1c274:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   1c278:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   1c27c:	d805      	bhi.n	1c28a <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1c27e:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   1c280:	0892      	lsrs	r2, r2, #2
   1c282:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   1c286:	3301      	adds	r3, #1
   1c288:	e7e3      	b.n	1c252 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   1c28a:	f115 041f 	adds.w	r4, r5, #31
   1c28e:	bf48      	it	mi
   1c290:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   1c294:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   1c296:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   1c29a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1c29e:	e7ef      	b.n	1c280 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   1c2a0:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   1c2a2:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   1c2a4:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   1c2a8:	18ec      	adds	r4, r5, r3
	node->next = list;
   1c2aa:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   1c2ae:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   1c2b0:	3101      	adds	r1, #1
   1c2b2:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   1c2b4:	6895      	ldr	r5, [r2, #8]
   1c2b6:	4433      	add	r3, r6
   1c2b8:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c2ba:	6094      	str	r4, [r2, #8]
   1c2bc:	e7cd      	b.n	1c25a <z_sys_mem_pool_base_init+0x28>

0001c2be <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1c2be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2c2:	b087      	sub	sp, #28
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c2c4:	7a84      	ldrb	r4, [r0, #10]
{
   1c2c6:	af00      	add	r7, sp, #0
   1c2c8:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c2cc:	00a3      	lsls	r3, r4, #2
   1c2ce:	3307      	adds	r3, #7
   1c2d0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c2d4:	ebad 0d03 	sub.w	sp, sp, r3
   1c2d8:	46ea      	mov	sl, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = p->max_sz;
   1c2da:	4653      	mov	r3, sl
   1c2dc:	6842      	ldr	r2, [r0, #4]
{
   1c2de:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   1c2e0:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   1c2e4:	2200      	movs	r2, #0
   1c2e6:	4294      	cmp	r4, r2
   1c2e8:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   1c2ec:	dd09      	ble.n	1c302 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   1c2ee:	b122      	cbz	r2, 1c2fa <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c2f0:	6818      	ldr	r0, [r3, #0]
   1c2f2:	0880      	lsrs	r0, r0, #2
   1c2f4:	f020 0003 	bic.w	r0, r0, #3
   1c2f8:	6058      	str	r0, [r3, #4]
		}

		if (lsizes[i] < size) {
   1c2fa:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1c2fe:	4288      	cmp	r0, r1
   1c300:	d208      	bcs.n	1c314 <z_sys_mem_pool_block_alloc+0x56>
		}

		alloc_l = i;
	}

	if (alloc_l < 0) {
   1c302:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1c306:	d107      	bne.n	1c318 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   1c308:	2300      	movs	r3, #0
   1c30a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c30c:	6013      	str	r3, [r2, #0]
	pool_irq_unlock(p, key);

	*data_p = data;

	if (data == NULL) {
		return -ENOMEM;
   1c30e:	f06f 000b 	mvn.w	r0, #11
   1c312:	e02c      	b.n	1c36e <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   1c314:	3201      	adds	r2, #1
   1c316:	e7e6      	b.n	1c2e6 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c318:	7c28      	ldrb	r0, [r5, #16]
   1c31a:	f010 0001 	ands.w	r0, r0, #1
   1c31e:	d001      	beq.n	1c324 <z_sys_mem_pool_block_alloc+0x66>
   1c320:	f7ff ff77 	bl	1c212 <pool_irq_lock.isra.2.part.3>
   1c324:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   1c326:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   1c328:	464e      	mov	r6, r9
   1c32a:	68ea      	ldr	r2, [r5, #12]
   1c32c:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   1c330:	461a      	mov	r2, r3
   1c332:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c336:	4294      	cmp	r4, r2
   1c338:	d11d      	bne.n	1c376 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   1c33a:	3e01      	subs	r6, #1
   1c33c:	1c72      	adds	r2, r6, #1
   1c33e:	f1a3 030c 	sub.w	r3, r3, #12
   1c342:	d1f5      	bne.n	1c330 <z_sys_mem_pool_block_alloc+0x72>
   1c344:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   1c346:	4641      	mov	r1, r8
   1c348:	7c28      	ldrb	r0, [r5, #16]
   1c34a:	f7ff ff6b 	bl	1c224 <pool_irq_unlock.isra.4>
	*data_p = data;
   1c34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c350:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   1c352:	2c00      	cmp	r4, #0
   1c354:	d0db      	beq.n	1c30e <z_sys_mem_pool_block_alloc+0x50>
	}

	*level_p = alloc_l;
   1c356:	68bb      	ldr	r3, [r7, #8]
	*block_p = block_num(p, data, lsizes[alloc_l]);

	return 0;
   1c358:	2000      	movs	r0, #0
	*level_p = alloc_l;
   1c35a:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c35e:	682b      	ldr	r3, [r5, #0]
   1c360:	1ae4      	subs	r4, r4, r3
   1c362:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   1c366:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1c36a:	687b      	ldr	r3, [r7, #4]
   1c36c:	601c      	str	r4, [r3, #0]
}
   1c36e:	371c      	adds	r7, #28
   1c370:	46bd      	mov	sp, r7
   1c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   1c376:	e9d4 3200 	ldrd	r3, r2, [r4]
   1c37a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c37c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c37e:	2300      	movs	r3, #0
	node->prev = NULL;
   1c380:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c384:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   1c386:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c38a:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   1c38c:	f107 0b14 	add.w	fp, r7, #20
   1c390:	fb92 f2f1 	sdiv	r2, r2, r1
   1c394:	465b      	mov	r3, fp
   1c396:	4631      	mov	r1, r6
   1c398:	4628      	mov	r0, r5
   1c39a:	f7ff ff23 	bl	1c1e4 <get_bit_ptr>
	*word |= (1<<bit);
   1c39e:	2201      	movs	r2, #1
   1c3a0:	6979      	ldr	r1, [r7, #20]
   1c3a2:	fa02 f000 	lsl.w	r0, r2, r0
   1c3a6:	680b      	ldr	r3, [r1, #0]
   1c3a8:	603a      	str	r2, [r7, #0]
   1c3aa:	4303      	orrs	r3, r0
   1c3ac:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1c3ae:	454e      	cmp	r6, r9
   1c3b0:	dac9      	bge.n	1c346 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1c3b2:	682a      	ldr	r2, [r5, #0]
   1c3b4:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   1c3b8:	1aa2      	subs	r2, r4, r2
   1c3ba:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   1c3be:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   1c3c0:	465b      	mov	r3, fp
   1c3c2:	0092      	lsls	r2, r2, #2
   1c3c4:	4631      	mov	r1, r6
   1c3c6:	4628      	mov	r0, r5
   1c3c8:	f7ff ff0c 	bl	1c1e4 <get_bit_ptr>
	*word |= (1<<bit);
   1c3cc:	697a      	ldr	r2, [r7, #20]
   1c3ce:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c3d0:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   1c3d2:	fa03 f000 	lsl.w	r0, r3, r0
   1c3d6:	6813      	ldr	r3, [r2, #0]
   1c3d8:	4303      	orrs	r3, r0
   1c3da:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c3dc:	230c      	movs	r3, #12
   1c3de:	2203      	movs	r2, #3
   1c3e0:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   1c3e4:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1c3e8:	f101 0e04 	add.w	lr, r1, #4
   1c3ec:	1823      	adds	r3, r4, r0
   1c3ee:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   1c3f0:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   1c3f2:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   1c3f6:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1c3f8:	688a      	ldr	r2, [r1, #8]
   1c3fa:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   1c3fc:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   1c3fe:	608b      	str	r3, [r1, #8]
   1c400:	3a01      	subs	r2, #1
   1c402:	4403      	add	r3, r0
   1c404:	60fa      	str	r2, [r7, #12]
   1c406:	d1f3      	bne.n	1c3f0 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   1c408:	4641      	mov	r1, r8
   1c40a:	7c28      	ldrb	r0, [r5, #16]
   1c40c:	f7ff ff0a 	bl	1c224 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c410:	7c2b      	ldrb	r3, [r5, #16]
   1c412:	07db      	lsls	r3, r3, #31
   1c414:	d503      	bpl.n	1c41e <z_sys_mem_pool_block_alloc+0x160>
   1c416:	f7ff fefc 	bl	1c212 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   1c41a:	4680      	mov	r8, r0
   1c41c:	e7c7      	b.n	1c3ae <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   1c41e:	68f8      	ldr	r0, [r7, #12]
   1c420:	e7fb      	b.n	1c41a <z_sys_mem_pool_block_alloc+0x15c>

0001c422 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1c422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c426:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c428:	7a83      	ldrb	r3, [r0, #10]
{
   1c42a:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1c42c:	009b      	lsls	r3, r3, #2
   1c42e:	3307      	adds	r3, #7
   1c430:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1c434:	ebad 0d03 	sub.w	sp, sp, r3
   1c438:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1c43a:	6843      	ldr	r3, [r0, #4]
{
   1c43c:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1c43e:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1c440:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1c442:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1c446:	4281      	cmp	r1, r0
   1c448:	d215      	bcs.n	1c476 <z_sys_mem_pool_block_free+0x54>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c44a:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1c44c:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c44e:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1c452:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c454:	d001      	beq.n	1c45a <z_sys_mem_pool_block_free+0x38>
   1c456:	f7ff fedc 	bl	1c212 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1c45a:	4604      	mov	r4, r0
	while (level >= 0) {
   1c45c:	f1b8 0f00 	cmp.w	r8, #0
   1c460:	da11      	bge.n	1c486 <z_sys_mem_pool_block_free+0x64>
	return -1;
   1c462:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1c466:	4621      	mov	r1, r4
   1c468:	7c30      	ldrb	r0, [r6, #16]
   1c46a:	f7ff fedb 	bl	1c224 <pool_irq_unlock.isra.4>
}
   1c46e:	3714      	adds	r7, #20
   1c470:	46bd      	mov	sp, r7
   1c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c476:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1c478:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1c47a:	089b      	lsrs	r3, r3, #2
   1c47c:	f023 0303 	bic.w	r3, r3, #3
   1c480:	f844 3f04 	str.w	r3, [r4, #4]!
   1c484:	e7df      	b.n	1c446 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1c486:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c48a:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1c48c:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1c490:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1c492:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c494:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1c496:	eb03 090a 	add.w	r9, r3, sl
   1c49a:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1c49c:	4630      	mov	r0, r6
   1c49e:	f107 030c 	add.w	r3, r7, #12
   1c4a2:	f7ff fe9f 	bl	1c1e4 <get_bit_ptr>
	*word &= ~(1<<bit);
   1c4a6:	2301      	movs	r3, #1
   1c4a8:	68fa      	ldr	r2, [r7, #12]
   1c4aa:	fa03 f000 	lsl.w	r0, r3, r0
   1c4ae:	6813      	ldr	r3, [r2, #0]
	node->next = list;
   1c4b0:	6839      	ldr	r1, [r7, #0]
   1c4b2:	ea23 0300 	bic.w	r3, r3, r0
   1c4b6:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1c4b8:	220c      	movs	r2, #12
   1c4ba:	68f3      	ldr	r3, [r6, #12]
   1c4bc:	fb02 3308 	mla	r3, r2, r8, r3
   1c4c0:	1d1a      	adds	r2, r3, #4
   1c4c2:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1c4c6:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1c4c8:	4621      	mov	r1, r4
   1c4ca:	f8c9 2004 	str.w	r2, [r9, #4]
	list->tail->next = node;
   1c4ce:	689a      	ldr	r2, [r3, #8]
   1c4d0:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1c4d4:	f8c3 9008 	str.w	r9, [r3, #8]
   1c4d8:	7c30      	ldrb	r0, [r6, #16]
   1c4da:	f7ff fea3 	bl	1c224 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1c4de:	7c30      	ldrb	r0, [r6, #16]
   1c4e0:	f010 0001 	ands.w	r0, r0, #1
   1c4e4:	d001      	beq.n	1c4ea <z_sys_mem_pool_block_free+0xc8>
   1c4e6:	f7ff fe94 	bl	1c212 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1c4ea:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c4ec:	f1b8 0f00 	cmp.w	r8, #0
   1c4f0:	d0b9      	beq.n	1c466 <z_sys_mem_pool_block_free+0x44>
	int bit = get_bit_ptr(p, level, bn, &word);
   1c4f2:	f107 030c 	add.w	r3, r7, #12
   1c4f6:	462a      	mov	r2, r5
   1c4f8:	4641      	mov	r1, r8
   1c4fa:	4630      	mov	r0, r6
   1c4fc:	f7ff fe72 	bl	1c1e4 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1c500:	68fb      	ldr	r3, [r7, #12]
   1c502:	2800      	cmp	r0, #0
   1c504:	bfb8      	it	lt
   1c506:	3003      	addlt	r0, #3
   1c508:	681b      	ldr	r3, [r3, #0]
   1c50a:	f020 0003 	bic.w	r0, r0, #3
   1c50e:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1c512:	f010 000f 	ands.w	r0, r0, #15
   1c516:	d1a6      	bne.n	1c466 <z_sys_mem_pool_block_free+0x44>
	node->next = NULL;
   1c518:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1c51a:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1c51e:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1c520:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1c524:	4353      	muls	r3, r2
   1c526:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1c528:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1c52a:	18d1      	adds	r1, r2, r3
	node->prev->next = node->next;
   1c52c:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1c530:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1c534:	2804      	cmp	r0, #4
   1c536:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1c53a:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1c53e:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1c542:	f8c1 c004 	str.w	ip, [r1, #4]
   1c546:	d1ea      	bne.n	1c51e <z_sys_mem_pool_block_free+0xfc>
		bn = bn / 4;
   1c548:	2d00      	cmp	r5, #0
   1c54a:	bfb8      	it	lt
   1c54c:	3503      	addlt	r5, #3
		level = level - 1;
   1c54e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1c552:	10ad      	asrs	r5, r5, #2
   1c554:	e782      	b.n	1c45c <z_sys_mem_pool_block_free+0x3a>

0001c556 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c556:	4604      	mov	r4, r0
   1c558:	b508      	push	{r3, lr}
   1c55a:	4608      	mov	r0, r1
   1c55c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c55e:	461a      	mov	r2, r3
   1c560:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c562:	f7ff fa85 	bl	1ba70 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c566:	f7f3 fcd5 	bl	ff14 <z_impl_k_thread_abort>

0001c56a <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c56a:	b510      	push	{r4, lr}
   1c56c:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c56e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c572:	4620      	mov	r0, r4
   1c574:	f002 f910 	bl	1e798 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c578:	4603      	mov	r3, r0
   1c57a:	2800      	cmp	r0, #0
   1c57c:	d0f7      	beq.n	1c56e <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1c57e:	6842      	ldr	r2, [r0, #4]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c580:	3308      	adds	r3, #8
   1c582:	e8d3 1fef 	ldaex	r1, [r3]
   1c586:	f021 0c01 	bic.w	ip, r1, #1
   1c58a:	e8c3 cfee 	stlex	lr, ip, [r3]
   1c58e:	f1be 0f00 	cmp.w	lr, #0
   1c592:	d1f6      	bne.n	1c582 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c594:	07cb      	lsls	r3, r1, #31
   1c596:	d500      	bpl.n	1c59a <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c598:	4790      	blx	r2
	z_impl_k_yield();
   1c59a:	f7ff f9f5 	bl	1b988 <z_impl_k_yield>
   1c59e:	e7e6      	b.n	1c56e <z_work_q_main+0x4>

0001c5a0 <arch_printk_char_out>:
}
   1c5a0:	2000      	movs	r0, #0
   1c5a2:	4770      	bx	lr

0001c5a4 <print_err>:
{
   1c5a4:	b570      	push	{r4, r5, r6, lr}
   1c5a6:	460d      	mov	r5, r1
   1c5a8:	4604      	mov	r4, r0
	out('E', ctx);
   1c5aa:	2045      	movs	r0, #69	; 0x45
   1c5ac:	47a0      	blx	r4
	out('R', ctx);
   1c5ae:	4629      	mov	r1, r5
   1c5b0:	2052      	movs	r0, #82	; 0x52
   1c5b2:	47a0      	blx	r4
	out('R', ctx);
   1c5b4:	4629      	mov	r1, r5
   1c5b6:	4623      	mov	r3, r4
}
   1c5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1c5bc:	2052      	movs	r0, #82	; 0x52
   1c5be:	4718      	bx	r3

0001c5c0 <z_vprintk>:
{
   1c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1c5c4:	f04f 0800 	mov.w	r8, #0
{
   1c5c8:	4606      	mov	r6, r0
   1c5ca:	460f      	mov	r7, r1
	int min_width = -1;
   1c5cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1c5d0:	46c1      	mov	r9, r8
{
   1c5d2:	b08b      	sub	sp, #44	; 0x2c
   1c5d4:	461c      	mov	r4, r3
	while (*fmt) {
   1c5d6:	1e53      	subs	r3, r2, #1
   1c5d8:	9302      	str	r3, [sp, #8]
			might_format = 0;
   1c5da:	2500      	movs	r5, #0
					break;
   1c5dc:	e005      	b.n	1c5ea <z_vprintk+0x2a>
		if (!might_format) {
   1c5de:	b96d      	cbnz	r5, 1c5fc <z_vprintk+0x3c>
			if (*fmt != '%') {
   1c5e0:	2825      	cmp	r0, #37	; 0x25
   1c5e2:	f000 814f 	beq.w	1c884 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   1c5e6:	4639      	mov	r1, r7
   1c5e8:	47b0      	blx	r6
	while (*fmt) {
   1c5ea:	9b02      	ldr	r3, [sp, #8]
   1c5ec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1c5f0:	9302      	str	r3, [sp, #8]
   1c5f2:	2800      	cmp	r0, #0
   1c5f4:	d1f3      	bne.n	1c5de <z_vprintk+0x1e>
}
   1c5f6:	b00b      	add	sp, #44	; 0x2c
   1c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1c5fc:	2864      	cmp	r0, #100	; 0x64
   1c5fe:	d06e      	beq.n	1c6de <z_vprintk+0x11e>
   1c600:	d81a      	bhi.n	1c638 <z_vprintk+0x78>
   1c602:	2839      	cmp	r0, #57	; 0x39
   1c604:	d80a      	bhi.n	1c61c <z_vprintk+0x5c>
   1c606:	2831      	cmp	r0, #49	; 0x31
   1c608:	d260      	bcs.n	1c6cc <z_vprintk+0x10c>
   1c60a:	282d      	cmp	r0, #45	; 0x2d
   1c60c:	f000 8140 	beq.w	1c890 <z_vprintk+0x2d0>
   1c610:	2830      	cmp	r0, #48	; 0x30
   1c612:	d04c      	beq.n	1c6ae <z_vprintk+0xee>
   1c614:	2825      	cmp	r0, #37	; 0x25
   1c616:	d107      	bne.n	1c628 <z_vprintk+0x68>
				out((int)'%', ctx);
   1c618:	4639      	mov	r1, r7
   1c61a:	e00b      	b.n	1c634 <z_vprintk+0x74>
			switch (*fmt) {
   1c61c:	2858      	cmp	r0, #88	; 0x58
   1c61e:	f000 80bb 	beq.w	1c798 <z_vprintk+0x1d8>
   1c622:	2863      	cmp	r0, #99	; 0x63
   1c624:	f000 812a 	beq.w	1c87c <z_vprintk+0x2bc>
					out((int)'%', ctx);
   1c628:	4639      	mov	r1, r7
   1c62a:	2025      	movs	r0, #37	; 0x25
   1c62c:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1c62e:	4639      	mov	r1, r7
   1c630:	9b02      	ldr	r3, [sp, #8]
   1c632:	7818      	ldrb	r0, [r3, #0]
   1c634:	47b0      	blx	r6
   1c636:	e7d0      	b.n	1c5da <z_vprintk+0x1a>
			switch (*fmt) {
   1c638:	2870      	cmp	r0, #112	; 0x70
   1c63a:	f000 80a3 	beq.w	1c784 <z_vprintk+0x1c4>
   1c63e:	d811      	bhi.n	1c664 <z_vprintk+0xa4>
   1c640:	2869      	cmp	r0, #105	; 0x69
   1c642:	d04c      	beq.n	1c6de <z_vprintk+0x11e>
   1c644:	286c      	cmp	r0, #108	; 0x6c
   1c646:	d105      	bne.n	1c654 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1c648:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c64c:	d12a      	bne.n	1c6a4 <z_vprintk+0xe4>
					length_mod = 'L';
   1c64e:	f04f 084c 	mov.w	r8, #76	; 0x4c
   1c652:	e7ca      	b.n	1c5ea <z_vprintk+0x2a>
			switch (*fmt) {
   1c654:	2868      	cmp	r0, #104	; 0x68
   1c656:	d1e7      	bne.n	1c628 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   1c658:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   1c65c:	d122      	bne.n	1c6a4 <z_vprintk+0xe4>
					length_mod = 'H';
   1c65e:	f04f 0848 	mov.w	r8, #72	; 0x48
   1c662:	e7c2      	b.n	1c5ea <z_vprintk+0x2a>
			switch (*fmt) {
   1c664:	2875      	cmp	r0, #117	; 0x75
   1c666:	d071      	beq.n	1c74c <z_vprintk+0x18c>
   1c668:	d818      	bhi.n	1c69c <z_vprintk+0xdc>
   1c66a:	2873      	cmp	r0, #115	; 0x73
   1c66c:	d1dc      	bne.n	1c628 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   1c66e:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   1c672:	46ab      	mov	fp, r5
   1c674:	465b      	mov	r3, fp
   1c676:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1c67a:	2800      	cmp	r0, #0
   1c67c:	f040 80fb 	bne.w	1c876 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   1c680:	f1b9 0f03 	cmp.w	r9, #3
   1c684:	f040 810a 	bne.w	1c89c <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   1c688:	1b5d      	subs	r5, r3, r5
   1c68a:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   1c68e:	2d00      	cmp	r5, #0
   1c690:	dda3      	ble.n	1c5da <z_vprintk+0x1a>
						out(' ', ctx);
   1c692:	4639      	mov	r1, r7
   1c694:	2020      	movs	r0, #32
   1c696:	47b0      	blx	r6
   1c698:	3d01      	subs	r5, #1
   1c69a:	e7f8      	b.n	1c68e <z_vprintk+0xce>
			switch (*fmt) {
   1c69c:	2878      	cmp	r0, #120	; 0x78
   1c69e:	d07b      	beq.n	1c798 <z_vprintk+0x1d8>
   1c6a0:	287a      	cmp	r0, #122	; 0x7a
   1c6a2:	d1c1      	bne.n	1c628 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   1c6a4:	f1b8 0f00 	cmp.w	r8, #0
   1c6a8:	d1be      	bne.n	1c628 <z_vprintk+0x68>
   1c6aa:	4680      	mov	r8, r0
   1c6ac:	e79d      	b.n	1c5ea <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   1c6ae:	f1ba 0f00 	cmp.w	sl, #0
   1c6b2:	da0e      	bge.n	1c6d2 <z_vprintk+0x112>
   1c6b4:	f1b9 0f00 	cmp.w	r9, #0
   1c6b8:	f000 80ed 	beq.w	1c896 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   1c6bc:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1c6c0:	f1b9 0f00 	cmp.w	r9, #0
   1c6c4:	bf08      	it	eq
   1c6c6:	f04f 0902 	moveq.w	r9, #2
   1c6ca:	e78e      	b.n	1c5ea <z_vprintk+0x2a>
				if (min_width < 0) {
   1c6cc:	f1ba 0f00 	cmp.w	sl, #0
   1c6d0:	dbf4      	blt.n	1c6bc <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   1c6d2:	230a      	movs	r3, #10
   1c6d4:	fb03 0a0a 	mla	sl, r3, sl, r0
   1c6d8:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   1c6dc:	e7f0      	b.n	1c6c0 <z_vprintk+0x100>
				if (length_mod == 'z') {
   1c6de:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c6e2:	d102      	bne.n	1c6ea <z_vprintk+0x12a>
					d = va_arg(ap, int);
   1c6e4:	f854 5b04 	ldr.w	r5, [r4], #4
   1c6e8:	e01f      	b.n	1c72a <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   1c6ea:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c6ee:	d0f9      	beq.n	1c6e4 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   1c6f0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c6f4:	d1f6      	bne.n	1c6e4 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   1c6f6:	3407      	adds	r4, #7
   1c6f8:	f024 0407 	bic.w	r4, r4, #7
   1c6fc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   1c700:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   1c704:	9106      	str	r1, [sp, #24]
   1c706:	f143 0100 	adc.w	r1, r3, #0
   1c70a:	9107      	str	r1, [sp, #28]
   1c70c:	2100      	movs	r1, #0
   1c70e:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1c712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c716:	4561      	cmp	r1, ip
   1c718:	bf08      	it	eq
   1c71a:	4558      	cmpeq	r0, fp
   1c71c:	d204      	bcs.n	1c728 <z_vprintk+0x168>
						print_err(out, ctx);
   1c71e:	4639      	mov	r1, r7
   1c720:	4630      	mov	r0, r6
   1c722:	f7ff ff3f 	bl	1c5a4 <print_err>
						break;
   1c726:	e758      	b.n	1c5da <z_vprintk+0x1a>
					d = lld;
   1c728:	4615      	mov	r5, r2
				if (d < 0) {
   1c72a:	2d00      	cmp	r5, #0
   1c72c:	da05      	bge.n	1c73a <z_vprintk+0x17a>
					out((int)'-', ctx);
   1c72e:	4639      	mov	r1, r7
   1c730:	202d      	movs	r0, #45	; 0x2d
   1c732:	47b0      	blx	r6
					d = -d;
   1c734:	426d      	negs	r5, r5
					min_width--;
   1c736:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1c73a:	464b      	mov	r3, r9
   1c73c:	462a      	mov	r2, r5
   1c73e:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1c742:	4639      	mov	r1, r7
   1c744:	4630      	mov	r0, r6
   1c746:	f7f2 f899 	bl	e87c <_printk_dec_ulong>
				break;
   1c74a:	e746      	b.n	1c5da <z_vprintk+0x1a>
				if (length_mod == 'z') {
   1c74c:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   1c750:	d102      	bne.n	1c758 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   1c752:	f854 2b04 	ldr.w	r2, [r4], #4
   1c756:	e011      	b.n	1c77c <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   1c758:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c75c:	d0f9      	beq.n	1c752 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   1c75e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c762:	d1f6      	bne.n	1c752 <z_vprintk+0x192>
					if (llu > ~0UL) {
   1c764:	2100      	movs	r1, #0
   1c766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1c76a:	3407      	adds	r4, #7
   1c76c:	f024 0407 	bic.w	r4, r4, #7
   1c770:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1c774:	4299      	cmp	r1, r3
   1c776:	bf08      	it	eq
   1c778:	4290      	cmpeq	r0, r2
   1c77a:	d3d0      	bcc.n	1c71e <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   1c77c:	f8cd a000 	str.w	sl, [sp]
   1c780:	464b      	mov	r3, r9
   1c782:	e7de      	b.n	1c742 <z_vprintk+0x182>
				out('0', ctx);
   1c784:	4639      	mov	r1, r7
   1c786:	2030      	movs	r0, #48	; 0x30
   1c788:	47b0      	blx	r6
				out('x', ctx);
   1c78a:	4639      	mov	r1, r7
   1c78c:	2078      	movs	r0, #120	; 0x78
   1c78e:	47b0      	blx	r6
					min_width = 8;
   1c790:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   1c794:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   1c798:	9b02      	ldr	r3, [sp, #8]
   1c79a:	781b      	ldrb	r3, [r3, #0]
   1c79c:	2b70      	cmp	r3, #112	; 0x70
   1c79e:	d104      	bne.n	1c7aa <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   1c7a0:	f854 3b04 	ldr.w	r3, [r4], #4
   1c7a4:	9304      	str	r3, [sp, #16]
   1c7a6:	2300      	movs	r3, #0
   1c7a8:	e00d      	b.n	1c7c6 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   1c7aa:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1c7ae:	d0f7      	beq.n	1c7a0 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   1c7b0:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   1c7b4:	d1f4      	bne.n	1c7a0 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   1c7b6:	3407      	adds	r4, #7
   1c7b8:	f024 0307 	bic.w	r3, r4, #7
   1c7bc:	461c      	mov	r4, r3
   1c7be:	f854 2b08 	ldr.w	r2, [r4], #8
   1c7c2:	685b      	ldr	r3, [r3, #4]
   1c7c4:	9204      	str	r2, [sp, #16]
	int digits = 0;
   1c7c6:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1c7c8:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   1c7ca:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   1c7ce:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   1c7d0:	9105      	str	r1, [sp, #20]
		shift -= 4;
   1c7d2:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   1c7d6:	9804      	ldr	r0, [sp, #16]
   1c7d8:	f1cb 0c20 	rsb	ip, fp, #32
   1c7dc:	f1ab 0120 	sub.w	r1, fp, #32
   1c7e0:	fa20 f00b 	lsr.w	r0, r0, fp
   1c7e4:	fa03 fc0c 	lsl.w	ip, r3, ip
   1c7e8:	ea40 000c 	orr.w	r0, r0, ip
   1c7ec:	fa23 f101 	lsr.w	r1, r3, r1
   1c7f0:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1c7f2:	f010 000f 	ands.w	r0, r0, #15
   1c7f6:	d106      	bne.n	1c806 <z_vprintk+0x246>
   1c7f8:	9905      	ldr	r1, [sp, #20]
   1c7fa:	b911      	cbnz	r1, 1c802 <z_vprintk+0x242>
   1c7fc:	f1bb 0f00 	cmp.w	fp, #0
   1c800:	d122      	bne.n	1c848 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   1c802:	2130      	movs	r1, #48	; 0x30
   1c804:	e003      	b.n	1c80e <z_vprintk+0x24e>
   1c806:	2809      	cmp	r0, #9
   1c808:	bf8c      	ite	hi
   1c80a:	2157      	movhi	r1, #87	; 0x57
   1c80c:	2130      	movls	r1, #48	; 0x30
   1c80e:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1c810:	b240      	sxtb	r0, r0
   1c812:	4639      	mov	r1, r7
   1c814:	9308      	str	r3, [sp, #32]
   1c816:	9205      	str	r2, [sp, #20]
   1c818:	47b0      	blx	r6
			digits++;
   1c81a:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   1c81c:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1c81e:	3301      	adds	r3, #1
   1c820:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   1c822:	9b08      	ldr	r3, [sp, #32]
   1c824:	f1bb 0f00 	cmp.w	fp, #0
   1c828:	d123      	bne.n	1c872 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   1c82a:	f1b9 0f03 	cmp.w	r9, #3
   1c82e:	f47f aed4 	bne.w	1c5da <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1c832:	9b03      	ldr	r3, [sp, #12]
   1c834:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   1c838:	2d00      	cmp	r5, #0
   1c83a:	f77f aece 	ble.w	1c5da <z_vprintk+0x1a>
			out(' ', ctx);
   1c83e:	4639      	mov	r1, r7
   1c840:	2020      	movs	r0, #32
   1c842:	47b0      	blx	r6
   1c844:	3d01      	subs	r5, #1
   1c846:	e7f7      	b.n	1c838 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   1c848:	1e51      	subs	r1, r2, #1
   1c84a:	4592      	cmp	sl, r2
   1c84c:	9108      	str	r1, [sp, #32]
   1c84e:	db07      	blt.n	1c860 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   1c850:	f1b9 0f01 	cmp.w	r9, #1
   1c854:	d106      	bne.n	1c864 <z_vprintk+0x2a4>
				out('0', ctx);
   1c856:	4639      	mov	r1, r7
   1c858:	2030      	movs	r0, #48	; 0x30
   1c85a:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1c85c:	47b0      	blx	r6
   1c85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   1c860:	9a08      	ldr	r2, [sp, #32]
   1c862:	e7b6      	b.n	1c7d2 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   1c864:	f1b9 0f02 	cmp.w	r9, #2
   1c868:	d1fa      	bne.n	1c860 <z_vprintk+0x2a0>
   1c86a:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   1c86c:	4639      	mov	r1, r7
   1c86e:	2020      	movs	r0, #32
   1c870:	e7f4      	b.n	1c85c <z_vprintk+0x29c>
			found_largest_digit = 1;
   1c872:	9505      	str	r5, [sp, #20]
   1c874:	e7ad      	b.n	1c7d2 <z_vprintk+0x212>
					out((int)(*s++), ctx);
   1c876:	4639      	mov	r1, r7
   1c878:	47b0      	blx	r6
   1c87a:	e6fb      	b.n	1c674 <z_vprintk+0xb4>
				out(c, ctx);
   1c87c:	4639      	mov	r1, r7
   1c87e:	f854 0b04 	ldr.w	r0, [r4], #4
   1c882:	e6d7      	b.n	1c634 <z_vprintk+0x74>
				length_mod = 0;
   1c884:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   1c886:	46a9      	mov	r9, r5
				min_width = -1;
   1c888:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   1c88c:	2501      	movs	r5, #1
   1c88e:	e6ac      	b.n	1c5ea <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   1c890:	f04f 0903 	mov.w	r9, #3
   1c894:	e6a9      	b.n	1c5ea <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   1c896:	f04f 0901 	mov.w	r9, #1
   1c89a:	e6a6      	b.n	1c5ea <z_vprintk+0x2a>
			might_format = 0;
   1c89c:	4605      	mov	r5, r0
		++fmt;
   1c89e:	e6a4      	b.n	1c5ea <z_vprintk+0x2a>

0001c8a0 <printk>:
{
   1c8a0:	b40f      	push	{r0, r1, r2, r3}
   1c8a2:	b507      	push	{r0, r1, r2, lr}
   1c8a4:	a904      	add	r1, sp, #16
   1c8a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c8aa:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c8ac:	f7f2 f838 	bl	e920 <vprintk>
}
   1c8b0:	b003      	add	sp, #12
   1c8b2:	f85d eb04 	ldr.w	lr, [sp], #4
   1c8b6:	b004      	add	sp, #16
   1c8b8:	4770      	bx	lr

0001c8ba <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SLM_CR_LF_TERMINATION, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_AT_HOST_TERMINATION, 3);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_SLM_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   1c8ba:	4770      	bx	lr

0001c8bc <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   1c8bc:	f7fe b906 	b.w	1aacc <SystemInit>

0001c8c0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1c8c0:	2300      	movs	r3, #0
	list->head = NULL;
   1c8c2:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c8c6:	4770      	bx	lr

0001c8c8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1c8c8:	6803      	ldr	r3, [r0, #0]
   1c8ca:	b923      	cbnz	r3, 1c8d6 <log_list_add_tail+0xe>
		list->head = msg;
   1c8cc:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1c8ce:	2300      	movs	r3, #0
	list->tail = msg;
   1c8d0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1c8d2:	600b      	str	r3, [r1, #0]
}
   1c8d4:	4770      	bx	lr
		list->tail->next = msg;
   1c8d6:	6843      	ldr	r3, [r0, #4]
   1c8d8:	6019      	str	r1, [r3, #0]
   1c8da:	e7f8      	b.n	1c8ce <log_list_add_tail+0x6>

0001c8dc <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1c8dc:	6800      	ldr	r0, [r0, #0]
   1c8de:	4770      	bx	lr

0001c8e0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1c8e0:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1c8e2:	b10b      	cbz	r3, 1c8e8 <log_list_head_get+0x8>
		list->head = list->head->next;
   1c8e4:	681a      	ldr	r2, [r3, #0]
   1c8e6:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1c8e8:	4618      	mov	r0, r3
   1c8ea:	4770      	bx	lr

0001c8ec <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1c8ec:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c8ee:	f7f2 fa6d 	bl	edcc <log_msg_chunk_alloc>

	if (msg != NULL) {
   1c8f2:	b118      	cbz	r0, 1c8fc <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1c8f4:	2301      	movs	r3, #1
   1c8f6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c8f8:	2300      	movs	r3, #0
   1c8fa:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   1c8fc:	bd08      	pop	{r3, pc}

0001c8fe <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1c8fe:	f7f2 bdf9 	b.w	f4f4 <z_timer_cycle_get_32>

0001c902 <dummy_timestamp>:
   1c902:	2000      	movs	r0, #0
   1c904:	4770      	bx	lr

0001c906 <log_0>:
{
   1c906:	b538      	push	{r3, r4, r5, lr}
   1c908:	4605      	mov	r5, r0
   1c90a:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1c90c:	f7ff ffee 	bl	1c8ec <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c910:	b128      	cbz	r0, 1c91e <log_0+0x18>
		msg->str = str;
   1c912:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1c914:	4621      	mov	r1, r4
}
   1c916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1c91a:	f7f2 b8e7 	b.w	eaec <msg_finalize>
}
   1c91e:	bd38      	pop	{r3, r4, r5, pc}

0001c920 <log_1>:
{
   1c920:	b570      	push	{r4, r5, r6, lr}
   1c922:	4604      	mov	r4, r0
   1c924:	460e      	mov	r6, r1
   1c926:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c928:	f7ff ffe0 	bl	1c8ec <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c92c:	b158      	cbz	r0, 1c946 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1c92e:	2201      	movs	r2, #1
		msg->str = str;
   1c930:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1c932:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1c934:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1c936:	f362 1407 	bfi	r4, r2, #4, #4
   1c93a:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
   1c93c:	4629      	mov	r1, r5
}
   1c93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1c942:	f7f2 b8d3 	b.w	eaec <msg_finalize>
}
   1c946:	bd70      	pop	{r4, r5, r6, pc}

0001c948 <log_2>:
{
   1c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c94c:	4605      	mov	r5, r0
   1c94e:	4688      	mov	r8, r1
   1c950:	4617      	mov	r7, r2
   1c952:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c954:	f7ff ffca 	bl	1c8ec <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c958:	b160      	cbz	r0, 1c974 <log_2+0x2c>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c95a:	2302      	movs	r3, #2
		msg->str = str;
   1c95c:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1c95e:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c960:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1c964:	f363 1507 	bfi	r5, r3, #4, #4
   1c968:	7245      	strb	r5, [r0, #9]
		msg_finalize(msg, src_level);
   1c96a:	4631      	mov	r1, r6
}
   1c96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c970:	f7f2 b8bc 	b.w	eaec <msg_finalize>
}
   1c974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c978 <log_3>:
{
   1c978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c97c:	4605      	mov	r5, r0
   1c97e:	4689      	mov	r9, r1
   1c980:	4690      	mov	r8, r2
   1c982:	461f      	mov	r7, r3
   1c984:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c988:	f7ff ffb0 	bl	1c8ec <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c98c:	b168      	cbz	r0, 1c9aa <log_3+0x32>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c98e:	2303      	movs	r3, #3
		msg->str = str;
   1c990:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1c992:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c994:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1c998:	f363 1507 	bfi	r5, r3, #4, #4
   1c99c:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[2] = arg3;
   1c99e:	61c7      	str	r7, [r0, #28]
		msg_finalize(msg, src_level);
   1c9a0:	4631      	mov	r1, r6
}
   1c9a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1c9a6:	f7f2 b8a1 	b.w	eaec <msg_finalize>
}
   1c9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c9ae <log_n>:
{
   1c9ae:	b510      	push	{r4, lr}
   1c9b0:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1c9b2:	f000 f893 	bl	1cadc <log_msg_create_n>
		if (msg == NULL) {
   1c9b6:	b120      	cbz	r0, 1c9c2 <log_n+0x14>
		msg_finalize(msg, src_level);
   1c9b8:	4621      	mov	r1, r4
}
   1c9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c9be:	f7f2 b895 	b.w	eaec <msg_finalize>
}
   1c9c2:	bd10      	pop	{r4, pc}

0001c9c4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1c9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c9c8:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1c9ca:	8903      	ldrh	r3, [r0, #8]
{
   1c9cc:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   1c9ce:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1c9d0:	42a3      	cmp	r3, r4
{
   1c9d2:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1c9d6:	d803      	bhi.n	1c9e0 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   1c9d8:	2300      	movs	r3, #0
   1c9da:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1c9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1c9e0:	6811      	ldr	r1, [r2, #0]
   1c9e2:	4421      	add	r1, r4
   1c9e4:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1c9e6:	bf84      	itt	hi
   1c9e8:	1b19      	subhi	r1, r3, r4
   1c9ea:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c9ec:	2b0c      	cmp	r3, #12
	req_len = *length;
   1c9ee:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c9f2:	d928      	bls.n	1ca46 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1c9f4:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1c9f6:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1c9fa:	d82b      	bhi.n	1ca54 <log_msg_hexdump_data_op+0x90>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c9fc:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1c9fe:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ca00:	454b      	cmp	r3, r9
   1ca02:	bf28      	it	cs
   1ca04:	464b      	movcs	r3, r9
   1ca06:	4420      	add	r0, r4
   1ca08:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1ca0a:	461a      	mov	r2, r3
		if (put_op) {
   1ca0c:	b1ff      	cbz	r7, 1ca4e <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1ca0e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1ca10:	f000 fcef 	bl	1d3f2 <memcpy>
		req_len -= cpy_len;
   1ca14:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1ca18:	442e      	add	r6, r5
	while (req_len > 0) {
   1ca1a:	f1b9 0f00 	cmp.w	r9, #0
   1ca1e:	d0dd      	beq.n	1c9dc <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1ca20:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ca24:	454d      	cmp	r5, r9
   1ca26:	bf28      	it	cs
   1ca28:	464d      	movcs	r5, r9
		if (put_op) {
   1ca2a:	1d20      	adds	r0, r4, #4
   1ca2c:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1ca2e:	462a      	mov	r2, r5
		if (put_op) {
   1ca30:	b1bf      	cbz	r7, 1ca62 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   1ca32:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1ca34:	f000 fcdd 	bl	1d3f2 <memcpy>
		req_len -= cpy_len;
   1ca38:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1ca3c:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1ca40:	442e      	add	r6, r5
		offset = 0;
   1ca42:	2400      	movs	r4, #0
   1ca44:	e7e9      	b.n	1ca1a <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1ca46:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1ca48:	f04f 0800 	mov.w	r8, #0
   1ca4c:	e7d8      	b.n	1ca00 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1ca4e:	4601      	mov	r1, r0
   1ca50:	4630      	mov	r0, r6
   1ca52:	e7dd      	b.n	1ca10 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1ca54:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1ca56:	2c1b      	cmp	r4, #27
   1ca58:	d9df      	bls.n	1ca1a <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1ca5a:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1ca5e:	3c1c      	subs	r4, #28
   1ca60:	e7f9      	b.n	1ca56 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1ca62:	4601      	mov	r1, r0
   1ca64:	4630      	mov	r0, r6
   1ca66:	e7e5      	b.n	1ca34 <log_msg_hexdump_data_op+0x70>

0001ca68 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ca68:	3004      	adds	r0, #4
   1ca6a:	e8d0 3fef 	ldaex	r3, [r0]
   1ca6e:	3301      	adds	r3, #1
   1ca70:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ca74:	2a00      	cmp	r2, #0
   1ca76:	d1f8      	bne.n	1ca6a <log_msg_get+0x2>
}
   1ca78:	4770      	bx	lr

0001ca7a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1ca7a:	7a40      	ldrb	r0, [r0, #9]
}
   1ca7c:	0900      	lsrs	r0, r0, #4
   1ca7e:	4770      	bx	lr

0001ca80 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1ca80:	7a43      	ldrb	r3, [r0, #9]
   1ca82:	091b      	lsrs	r3, r3, #4
   1ca84:	428b      	cmp	r3, r1
   1ca86:	d916      	bls.n	1cab6 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1ca88:	2b03      	cmp	r3, #3
   1ca8a:	d803      	bhi.n	1ca94 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1ca8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ca90:	6948      	ldr	r0, [r1, #20]
   1ca92:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1ca94:	2901      	cmp	r1, #1
   1ca96:	d803      	bhi.n	1caa0 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1ca98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ca9c:	6988      	ldr	r0, [r1, #24]
   1ca9e:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1caa0:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1caa2:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1caa4:	2906      	cmp	r1, #6
   1caa6:	d803      	bhi.n	1cab0 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1caa8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1caac:	6848      	ldr	r0, [r1, #4]
   1caae:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1cab0:	3907      	subs	r1, #7
		cont = cont->next;
   1cab2:	681b      	ldr	r3, [r3, #0]
   1cab4:	e7f6      	b.n	1caa4 <log_msg_arg_get+0x24>
		return 0;
   1cab6:	2000      	movs	r0, #0
}
   1cab8:	4770      	bx	lr

0001caba <log_msg_put>:
{
   1caba:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cabc:	1d02      	adds	r2, r0, #4
   1cabe:	e8d2 1fef 	ldaex	r1, [r2]
   1cac2:	3901      	subs	r1, #1
   1cac4:	e8c2 1fec 	stlex	ip, r1, [r2]
   1cac8:	f1bc 0f00 	cmp.w	ip, #0
   1cacc:	d1f7      	bne.n	1cabe <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1cace:	685b      	ldr	r3, [r3, #4]
   1cad0:	b90b      	cbnz	r3, 1cad6 <log_msg_put+0x1c>
		msg_free(msg);
   1cad2:	f7f2 b98d 	b.w	edf0 <msg_free>
}
   1cad6:	4770      	bx	lr

0001cad8 <log_msg_str_get>:
}
   1cad8:	6900      	ldr	r0, [r0, #16]
   1cada:	4770      	bx	lr

0001cadc <log_msg_create_n>:
{
   1cadc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cae0:	4682      	mov	sl, r0
   1cae2:	4688      	mov	r8, r1
   1cae4:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1cae6:	f7f2 f971 	bl	edcc <log_msg_chunk_alloc>
	if (msg != NULL) {
   1caea:	4604      	mov	r4, r0
   1caec:	b330      	cbz	r0, 1cb3c <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1caee:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1caf0:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1caf2:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1caf4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1caf6:	8106      	strh	r6, [r0, #8]
   1caf8:	d909      	bls.n	1cb0e <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1cafa:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cafc:	f1a5 0902 	sub.w	r9, r5, #2
	msg->hdr.params.generic.ext = 1;
   1cb00:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1cb02:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1cb06:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1cb08:	f1b9 0f00 	cmp.w	r9, #0
   1cb0c:	dc0e      	bgt.n	1cb2c <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1cb0e:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cb10:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1cb12:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1cb16:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1cb1a:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cb1c:	d818      	bhi.n	1cb50 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1cb1e:	00aa      	lsls	r2, r5, #2
   1cb20:	4641      	mov	r1, r8
   1cb22:	f104 0014 	add.w	r0, r4, #20
   1cb26:	f000 fc64 	bl	1d3f2 <memcpy>
		nargs  = 0U;
   1cb2a:	e007      	b.n	1cb3c <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1cb2c:	f7f2 f94e 	bl	edcc <log_msg_chunk_alloc>
		if (cont == NULL) {
   1cb30:	4607      	mov	r7, r0
   1cb32:	b930      	cbnz	r0, 1cb42 <log_msg_create_n+0x66>
			msg_free(msg);
   1cb34:	4620      	mov	r0, r4
   1cb36:	f7f2 f95b 	bl	edf0 <msg_free>
			return NULL;
   1cb3a:	463c      	mov	r4, r7
}
   1cb3c:	4620      	mov	r0, r4
   1cb3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1cb42:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1cb46:	f1a9 0907 	sub.w	r9, r9, #7
   1cb4a:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1cb4c:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1cb4e:	e7db      	b.n	1cb08 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1cb50:	4641      	mov	r1, r8
   1cb52:	2208      	movs	r2, #8
   1cb54:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1cb58:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1cb5a:	f000 fc4a 	bl	1d3f2 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cb5e:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1cb60:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1cb64:	2d07      	cmp	r5, #7
   1cb66:	462e      	mov	r6, r5
   1cb68:	bf28      	it	cs
   1cb6a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1cb6c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1cb70:	4641      	mov	r1, r8
   1cb72:	1d38      	adds	r0, r7, #4
   1cb74:	464a      	mov	r2, r9
   1cb76:	f000 fc3c 	bl	1d3f2 <memcpy>
	while (nargs != 0U) {
   1cb7a:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1cb7c:	44c8      	add	r8, r9
		cont = cont->next;
   1cb7e:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
   1cb80:	d1f0      	bne.n	1cb64 <log_msg_create_n+0x88>
   1cb82:	e7db      	b.n	1cb3c <log_msg_create_n+0x60>

0001cb84 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1cb84:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1cb86:	2400      	movs	r4, #0
   1cb88:	9400      	str	r4, [sp, #0]
   1cb8a:	f7ff ff1b 	bl	1c9c4 <log_msg_hexdump_data_op>
}
   1cb8e:	b002      	add	sp, #8
   1cb90:	bd10      	pop	{r4, pc}

0001cb92 <buffer_write>:
{
   1cb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb94:	4606      	mov	r6, r0
   1cb96:	460d      	mov	r5, r1
   1cb98:	4614      	mov	r4, r2
   1cb9a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1cb9c:	4621      	mov	r1, r4
   1cb9e:	4628      	mov	r0, r5
   1cba0:	463a      	mov	r2, r7
   1cba2:	47b0      	blx	r6
	} while (len != 0);
   1cba4:	1a24      	subs	r4, r4, r0
		buf += processed;
   1cba6:	4405      	add	r5, r0
	} while (len != 0);
   1cba8:	d1f8      	bne.n	1cb9c <buffer_write+0xa>
}
   1cbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cbac <std_print>:
{
   1cbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cbb0:	b08e      	sub	sp, #56	; 0x38
   1cbb2:	af0e      	add	r7, sp, #56	; 0x38
   1cbb4:	4681      	mov	r9, r0
   1cbb6:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1cbb8:	f7ff ff8e 	bl	1cad8 <log_msg_str_get>
   1cbbc:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1cbbe:	4648      	mov	r0, r9
   1cbc0:	f7ff ff5b 	bl	1ca7a <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1cbc4:	f04f 0800 	mov.w	r8, #0
	u32_t nargs = log_msg_nargs_get(msg);
   1cbc8:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1cbca:	0083      	lsls	r3, r0, #2
   1cbcc:	3307      	adds	r3, #7
   1cbce:	f023 0307 	bic.w	r3, r3, #7
   1cbd2:	ebad 0d03 	sub.w	sp, sp, r3
   1cbd6:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1cbd8:	45d0      	cmp	r8, sl
   1cbda:	d116      	bne.n	1cc0a <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1cbdc:	4648      	mov	r0, r9
   1cbde:	f7ff ff4c 	bl	1ca7a <log_msg_nargs_get>
   1cbe2:	280f      	cmp	r0, #15
   1cbe4:	d81e      	bhi.n	1cc24 <std_print+0x78>
   1cbe6:	e8df f010 	tbh	[pc, r0, lsl #1]
   1cbea:	0019      	.short	0x0019
   1cbec:	00260020 	.word	0x00260020
   1cbf0:	0036002d 	.word	0x0036002d
   1cbf4:	004e0041 	.word	0x004e0041
   1cbf8:	006e005d 	.word	0x006e005d
   1cbfc:	00960081 	.word	0x00960081
   1cc00:	00c600ad 	.word	0x00c600ad
   1cc04:	00fe00e1 	.word	0x00fe00e1
   1cc08:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1cc0a:	4641      	mov	r1, r8
   1cc0c:	4648      	mov	r0, r9
   1cc0e:	f7ff ff37 	bl	1ca80 <log_msg_arg_get>
   1cc12:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1cc16:	f108 0801 	add.w	r8, r8, #1
   1cc1a:	e7dd      	b.n	1cbd8 <std_print+0x2c>
		print_formatted(log_output, str);
   1cc1c:	4631      	mov	r1, r6
   1cc1e:	4628      	mov	r0, r5
   1cc20:	f7f2 f918 	bl	ee54 <print_formatted>
}
   1cc24:	46bd      	mov	sp, r7
   1cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1cc2a:	6822      	ldr	r2, [r4, #0]
   1cc2c:	4631      	mov	r1, r6
   1cc2e:	4628      	mov	r0, r5
   1cc30:	f7f2 f910 	bl	ee54 <print_formatted>
		break;
   1cc34:	e7f6      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1cc36:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc3a:	4631      	mov	r1, r6
   1cc3c:	4628      	mov	r0, r5
   1cc3e:	f7f2 f909 	bl	ee54 <print_formatted>
		break;
   1cc42:	e7ef      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1cc44:	68a3      	ldr	r3, [r4, #8]
   1cc46:	4631      	mov	r1, r6
   1cc48:	9300      	str	r3, [sp, #0]
   1cc4a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc4e:	4628      	mov	r0, r5
   1cc50:	f7f2 f900 	bl	ee54 <print_formatted>
		break;
   1cc54:	e7e6      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cc56:	68e3      	ldr	r3, [r4, #12]
   1cc58:	4631      	mov	r1, r6
   1cc5a:	9301      	str	r3, [sp, #4]
   1cc5c:	68a3      	ldr	r3, [r4, #8]
   1cc5e:	4628      	mov	r0, r5
   1cc60:	9300      	str	r3, [sp, #0]
   1cc62:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc66:	f7f2 f8f5 	bl	ee54 <print_formatted>
		break;
   1cc6a:	e7db      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cc6c:	6923      	ldr	r3, [r4, #16]
   1cc6e:	4631      	mov	r1, r6
   1cc70:	9302      	str	r3, [sp, #8]
   1cc72:	68e3      	ldr	r3, [r4, #12]
   1cc74:	4628      	mov	r0, r5
   1cc76:	9301      	str	r3, [sp, #4]
   1cc78:	68a3      	ldr	r3, [r4, #8]
   1cc7a:	9300      	str	r3, [sp, #0]
   1cc7c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc80:	f7f2 f8e8 	bl	ee54 <print_formatted>
		break;
   1cc84:	e7ce      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cc86:	6963      	ldr	r3, [r4, #20]
   1cc88:	4631      	mov	r1, r6
   1cc8a:	9303      	str	r3, [sp, #12]
   1cc8c:	6923      	ldr	r3, [r4, #16]
   1cc8e:	4628      	mov	r0, r5
   1cc90:	9302      	str	r3, [sp, #8]
   1cc92:	68e3      	ldr	r3, [r4, #12]
   1cc94:	9301      	str	r3, [sp, #4]
   1cc96:	68a3      	ldr	r3, [r4, #8]
   1cc98:	9300      	str	r3, [sp, #0]
   1cc9a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc9e:	f7f2 f8d9 	bl	ee54 <print_formatted>
		break;
   1cca2:	e7bf      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cca4:	69a3      	ldr	r3, [r4, #24]
   1cca6:	4631      	mov	r1, r6
   1cca8:	9304      	str	r3, [sp, #16]
   1ccaa:	6963      	ldr	r3, [r4, #20]
   1ccac:	4628      	mov	r0, r5
   1ccae:	9303      	str	r3, [sp, #12]
   1ccb0:	6923      	ldr	r3, [r4, #16]
   1ccb2:	9302      	str	r3, [sp, #8]
   1ccb4:	68e3      	ldr	r3, [r4, #12]
   1ccb6:	9301      	str	r3, [sp, #4]
   1ccb8:	68a3      	ldr	r3, [r4, #8]
   1ccba:	9300      	str	r3, [sp, #0]
   1ccbc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ccc0:	f7f2 f8c8 	bl	ee54 <print_formatted>
		break;
   1ccc4:	e7ae      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ccc6:	69e3      	ldr	r3, [r4, #28]
   1ccc8:	4631      	mov	r1, r6
   1ccca:	9305      	str	r3, [sp, #20]
   1cccc:	69a3      	ldr	r3, [r4, #24]
   1ccce:	4628      	mov	r0, r5
   1ccd0:	9304      	str	r3, [sp, #16]
   1ccd2:	6963      	ldr	r3, [r4, #20]
   1ccd4:	9303      	str	r3, [sp, #12]
   1ccd6:	6923      	ldr	r3, [r4, #16]
   1ccd8:	9302      	str	r3, [sp, #8]
   1ccda:	68e3      	ldr	r3, [r4, #12]
   1ccdc:	9301      	str	r3, [sp, #4]
   1ccde:	68a3      	ldr	r3, [r4, #8]
   1cce0:	9300      	str	r3, [sp, #0]
   1cce2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cce6:	f7f2 f8b5 	bl	ee54 <print_formatted>
		break;
   1ccea:	e79b      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ccec:	6a23      	ldr	r3, [r4, #32]
   1ccee:	4631      	mov	r1, r6
   1ccf0:	9306      	str	r3, [sp, #24]
   1ccf2:	69e3      	ldr	r3, [r4, #28]
   1ccf4:	4628      	mov	r0, r5
   1ccf6:	9305      	str	r3, [sp, #20]
   1ccf8:	69a3      	ldr	r3, [r4, #24]
   1ccfa:	9304      	str	r3, [sp, #16]
   1ccfc:	6963      	ldr	r3, [r4, #20]
   1ccfe:	9303      	str	r3, [sp, #12]
   1cd00:	6923      	ldr	r3, [r4, #16]
   1cd02:	9302      	str	r3, [sp, #8]
   1cd04:	68e3      	ldr	r3, [r4, #12]
   1cd06:	9301      	str	r3, [sp, #4]
   1cd08:	68a3      	ldr	r3, [r4, #8]
   1cd0a:	9300      	str	r3, [sp, #0]
   1cd0c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cd10:	f7f2 f8a0 	bl	ee54 <print_formatted>
		break;
   1cd14:	e786      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd18:	4631      	mov	r1, r6
   1cd1a:	9307      	str	r3, [sp, #28]
   1cd1c:	6a23      	ldr	r3, [r4, #32]
   1cd1e:	4628      	mov	r0, r5
   1cd20:	9306      	str	r3, [sp, #24]
   1cd22:	69e3      	ldr	r3, [r4, #28]
   1cd24:	9305      	str	r3, [sp, #20]
   1cd26:	69a3      	ldr	r3, [r4, #24]
   1cd28:	9304      	str	r3, [sp, #16]
   1cd2a:	6963      	ldr	r3, [r4, #20]
   1cd2c:	9303      	str	r3, [sp, #12]
   1cd2e:	6923      	ldr	r3, [r4, #16]
   1cd30:	9302      	str	r3, [sp, #8]
   1cd32:	68e3      	ldr	r3, [r4, #12]
   1cd34:	9301      	str	r3, [sp, #4]
   1cd36:	68a3      	ldr	r3, [r4, #8]
   1cd38:	9300      	str	r3, [sp, #0]
   1cd3a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cd3e:	f7f2 f889 	bl	ee54 <print_formatted>
		break;
   1cd42:	e76f      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cd44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cd46:	4631      	mov	r1, r6
   1cd48:	9308      	str	r3, [sp, #32]
   1cd4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd4c:	4628      	mov	r0, r5
   1cd4e:	9307      	str	r3, [sp, #28]
   1cd50:	6a23      	ldr	r3, [r4, #32]
   1cd52:	9306      	str	r3, [sp, #24]
   1cd54:	69e3      	ldr	r3, [r4, #28]
   1cd56:	9305      	str	r3, [sp, #20]
   1cd58:	69a3      	ldr	r3, [r4, #24]
   1cd5a:	9304      	str	r3, [sp, #16]
   1cd5c:	6963      	ldr	r3, [r4, #20]
   1cd5e:	9303      	str	r3, [sp, #12]
   1cd60:	6923      	ldr	r3, [r4, #16]
   1cd62:	9302      	str	r3, [sp, #8]
   1cd64:	68e3      	ldr	r3, [r4, #12]
   1cd66:	9301      	str	r3, [sp, #4]
   1cd68:	68a3      	ldr	r3, [r4, #8]
   1cd6a:	9300      	str	r3, [sp, #0]
   1cd6c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cd70:	f7f2 f870 	bl	ee54 <print_formatted>
		break;
   1cd74:	e756      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cd76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cd78:	4631      	mov	r1, r6
   1cd7a:	9309      	str	r3, [sp, #36]	; 0x24
   1cd7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cd7e:	4628      	mov	r0, r5
   1cd80:	9308      	str	r3, [sp, #32]
   1cd82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd84:	9307      	str	r3, [sp, #28]
   1cd86:	6a23      	ldr	r3, [r4, #32]
   1cd88:	9306      	str	r3, [sp, #24]
   1cd8a:	69e3      	ldr	r3, [r4, #28]
   1cd8c:	9305      	str	r3, [sp, #20]
   1cd8e:	69a3      	ldr	r3, [r4, #24]
   1cd90:	9304      	str	r3, [sp, #16]
   1cd92:	6963      	ldr	r3, [r4, #20]
   1cd94:	9303      	str	r3, [sp, #12]
   1cd96:	6923      	ldr	r3, [r4, #16]
   1cd98:	9302      	str	r3, [sp, #8]
   1cd9a:	68e3      	ldr	r3, [r4, #12]
   1cd9c:	9301      	str	r3, [sp, #4]
   1cd9e:	68a3      	ldr	r3, [r4, #8]
   1cda0:	9300      	str	r3, [sp, #0]
   1cda2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cda6:	f7f2 f855 	bl	ee54 <print_formatted>
		break;
   1cdaa:	e73b      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cdac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cdae:	4631      	mov	r1, r6
   1cdb0:	930a      	str	r3, [sp, #40]	; 0x28
   1cdb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cdb4:	4628      	mov	r0, r5
   1cdb6:	9309      	str	r3, [sp, #36]	; 0x24
   1cdb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cdba:	9308      	str	r3, [sp, #32]
   1cdbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cdbe:	9307      	str	r3, [sp, #28]
   1cdc0:	6a23      	ldr	r3, [r4, #32]
   1cdc2:	9306      	str	r3, [sp, #24]
   1cdc4:	69e3      	ldr	r3, [r4, #28]
   1cdc6:	9305      	str	r3, [sp, #20]
   1cdc8:	69a3      	ldr	r3, [r4, #24]
   1cdca:	9304      	str	r3, [sp, #16]
   1cdcc:	6963      	ldr	r3, [r4, #20]
   1cdce:	9303      	str	r3, [sp, #12]
   1cdd0:	6923      	ldr	r3, [r4, #16]
   1cdd2:	9302      	str	r3, [sp, #8]
   1cdd4:	68e3      	ldr	r3, [r4, #12]
   1cdd6:	9301      	str	r3, [sp, #4]
   1cdd8:	68a3      	ldr	r3, [r4, #8]
   1cdda:	9300      	str	r3, [sp, #0]
   1cddc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cde0:	f7f2 f838 	bl	ee54 <print_formatted>
		break;
   1cde4:	e71e      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1cde6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cde8:	4631      	mov	r1, r6
   1cdea:	930b      	str	r3, [sp, #44]	; 0x2c
   1cdec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cdee:	4628      	mov	r0, r5
   1cdf0:	930a      	str	r3, [sp, #40]	; 0x28
   1cdf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cdf4:	9309      	str	r3, [sp, #36]	; 0x24
   1cdf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cdf8:	9308      	str	r3, [sp, #32]
   1cdfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cdfc:	9307      	str	r3, [sp, #28]
   1cdfe:	6a23      	ldr	r3, [r4, #32]
   1ce00:	9306      	str	r3, [sp, #24]
   1ce02:	69e3      	ldr	r3, [r4, #28]
   1ce04:	9305      	str	r3, [sp, #20]
   1ce06:	69a3      	ldr	r3, [r4, #24]
   1ce08:	9304      	str	r3, [sp, #16]
   1ce0a:	6963      	ldr	r3, [r4, #20]
   1ce0c:	9303      	str	r3, [sp, #12]
   1ce0e:	6923      	ldr	r3, [r4, #16]
   1ce10:	9302      	str	r3, [sp, #8]
   1ce12:	68e3      	ldr	r3, [r4, #12]
   1ce14:	9301      	str	r3, [sp, #4]
   1ce16:	68a3      	ldr	r3, [r4, #8]
   1ce18:	9300      	str	r3, [sp, #0]
   1ce1a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ce1e:	f7f2 f819 	bl	ee54 <print_formatted>
		break;
   1ce22:	e6ff      	b.n	1cc24 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ce24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ce26:	4631      	mov	r1, r6
   1ce28:	930c      	str	r3, [sp, #48]	; 0x30
   1ce2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ce2c:	4628      	mov	r0, r5
   1ce2e:	930b      	str	r3, [sp, #44]	; 0x2c
   1ce30:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ce32:	930a      	str	r3, [sp, #40]	; 0x28
   1ce34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ce36:	9309      	str	r3, [sp, #36]	; 0x24
   1ce38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ce3a:	9308      	str	r3, [sp, #32]
   1ce3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ce3e:	9307      	str	r3, [sp, #28]
   1ce40:	6a23      	ldr	r3, [r4, #32]
   1ce42:	9306      	str	r3, [sp, #24]
   1ce44:	69e3      	ldr	r3, [r4, #28]
   1ce46:	9305      	str	r3, [sp, #20]
   1ce48:	69a3      	ldr	r3, [r4, #24]
   1ce4a:	9304      	str	r3, [sp, #16]
   1ce4c:	6963      	ldr	r3, [r4, #20]
   1ce4e:	9303      	str	r3, [sp, #12]
   1ce50:	6923      	ldr	r3, [r4, #16]
   1ce52:	9302      	str	r3, [sp, #8]
   1ce54:	68e3      	ldr	r3, [r4, #12]
   1ce56:	9301      	str	r3, [sp, #4]
   1ce58:	68a3      	ldr	r3, [r4, #8]
   1ce5a:	9300      	str	r3, [sp, #0]
   1ce5c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ce60:	f7f1 fff8 	bl	ee54 <print_formatted>
}
   1ce64:	e6de      	b.n	1cc24 <std_print+0x78>

0001ce66 <log_output_flush>:
		     log_output->control_block->offset,
   1ce66:	6842      	ldr	r2, [r0, #4]
{
   1ce68:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1ce6a:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1ce6e:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1ce70:	6881      	ldr	r1, [r0, #8]
   1ce72:	6800      	ldr	r0, [r0, #0]
   1ce74:	f7ff fe8d 	bl	1cb92 <buffer_write>
	log_output->control_block->offset = 0;
   1ce78:	2200      	movs	r2, #0
   1ce7a:	6863      	ldr	r3, [r4, #4]
   1ce7c:	601a      	str	r2, [r3, #0]
}
   1ce7e:	bd10      	pop	{r4, pc}

0001ce80 <out_func>:
{
   1ce80:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1ce82:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1ce86:	681b      	ldr	r3, [r3, #0]
   1ce88:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1ce8a:	684a      	ldr	r2, [r1, #4]
   1ce8c:	6813      	ldr	r3, [r2, #0]
   1ce8e:	3301      	adds	r3, #1
   1ce90:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ce92:	68ca      	ldr	r2, [r1, #12]
   1ce94:	4293      	cmp	r3, r2
   1ce96:	d102      	bne.n	1ce9e <out_func+0x1e>
		log_output_flush(out_ctx);
   1ce98:	4608      	mov	r0, r1
   1ce9a:	f7ff ffe4 	bl	1ce66 <log_output_flush>
}
   1ce9e:	2000      	movs	r0, #0
   1cea0:	bd08      	pop	{r3, pc}

0001cea2 <char_out>:
{
   1cea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cea4:	460d      	mov	r5, r1
   1cea6:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1cea8:	4604      	mov	r4, r0
   1ceaa:	1847      	adds	r7, r0, r1
   1ceac:	42bc      	cmp	r4, r7
   1ceae:	d101      	bne.n	1ceb4 <char_out+0x12>
}
   1ceb0:	4628      	mov	r0, r5
   1ceb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1ceb4:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1ceb8:	6873      	ldr	r3, [r6, #4]
   1ceba:	4630      	mov	r0, r6
   1cebc:	685b      	ldr	r3, [r3, #4]
   1cebe:	4798      	blx	r3
   1cec0:	e7f4      	b.n	1ceac <char_out+0xa>

0001cec2 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   1cec2:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   1cec4:	7a5a      	ldrb	r2, [r3, #9]
   1cec6:	b932      	cbnz	r2, 1ced6 <get_status+0x14>
	if (data->ref > 0) {
   1cec8:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1cecc:	2800      	cmp	r0, #0
   1cece:	bfcc      	ite	gt
   1ced0:	2000      	movgt	r0, #0
   1ced2:	2001      	movle	r0, #1
   1ced4:	4770      	bx	lr
   1ced6:	2002      	movs	r0, #2
}
   1ced8:	4770      	bx	lr

0001ceda <clock_stop>:
	const struct nrf_clock_control_config *config =
   1ceda:	6802      	ldr	r2, [r0, #0]
{
   1cedc:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   1cede:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   1cee0:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   1cee2:	f04f 0320 	mov.w	r3, #32
   1cee6:	f3ef 8511 	mrs	r5, BASEPRI
   1ceea:	f383 8811 	msr	BASEPRI, r3
   1ceee:	f3bf 8f6f 	isb	sy
	data->ref--;
   1cef2:	7a23      	ldrb	r3, [r4, #8]
   1cef4:	3b01      	subs	r3, #1
   1cef6:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   1cef8:	2b00      	cmp	r3, #0
	data->ref--;
   1cefa:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   1cefc:	d11c      	bne.n	1cf38 <clock_stop+0x5e>
	list->tail = NULL;
   1cefe:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   1cf02:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   1cf04:	b9a3      	cbnz	r3, 1cf30 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf06:	2201      	movs	r2, #1
   1cf08:	7af3      	ldrb	r3, [r6, #11]
   1cf0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cf0e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cf12:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cf14:	2200      	movs	r2, #0
   1cf16:	8933      	ldrh	r3, [r6, #8]
   1cf18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cf1c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cf20:	601a      	str	r2, [r3, #0]
		data->started = false;
   1cf22:	2000      	movs	r0, #0
   1cf24:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1cf26:	f385 8811 	msr	BASEPRI, r5
   1cf2a:	f3bf 8f6f 	isb	sy
}
   1cf2e:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   1cf30:	4798      	blx	r3
   1cf32:	2800      	cmp	r0, #0
   1cf34:	d1e7      	bne.n	1cf06 <clock_stop+0x2c>
   1cf36:	e7f4      	b.n	1cf22 <clock_stop+0x48>
	} else if (data->ref < 0) {
   1cf38:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   1cf3c:	bfbc      	itt	lt
   1cf3e:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   1cf40:	f06f 0044 	mvnlt.w	r0, #68	; 0x44
   1cf44:	e7ef      	b.n	1cf26 <clock_stop+0x4c>

0001cf46 <clock_async_start>:
{
   1cf46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1cf48:	6803      	ldr	r3, [r0, #0]
{
   1cf4a:	4606      	mov	r6, r0
   1cf4c:	4614      	mov	r4, r2
	const struct nrf_clock_control_config *config =
   1cf4e:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1cf50:	6885      	ldr	r5, [r0, #8]
	__asm__ volatile(
   1cf52:	f04f 0320 	mov.w	r3, #32
   1cf56:	f3ef 8211 	mrs	r2, BASEPRI
   1cf5a:	f383 8811 	msr	BASEPRI, r3
   1cf5e:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1cf62:	7a2b      	ldrb	r3, [r5, #8]
   1cf64:	3301      	adds	r3, #1
   1cf66:	b25b      	sxtb	r3, r3
   1cf68:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1cf6a:	f382 8811 	msr	BASEPRI, r2
   1cf6e:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1cf72:	7a6a      	ldrb	r2, [r5, #9]
   1cf74:	b132      	cbz	r2, 1cf84 <clock_async_start+0x3e>
		if (data) {
   1cf76:	b90c      	cbnz	r4, 1cf7c <clock_async_start+0x36>
	return 0;
   1cf78:	2000      	movs	r0, #0
}
   1cf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1cf7c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1cf80:	4798      	blx	r3
   1cf82:	e7f9      	b.n	1cf78 <clock_async_start+0x32>
		if (ref == 1) {
   1cf84:	2b01      	cmp	r3, #1
   1cf86:	d108      	bne.n	1cf9a <clock_async_start+0x54>
			do_start =  (config->start_handler) ?
   1cf88:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1cf8a:	b943      	cbnz	r3, 1cf9e <clock_async_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf8c:	2201      	movs	r2, #1
   1cf8e:	7abb      	ldrb	r3, [r7, #10]
   1cf90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cf94:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1cf98:	601a      	str	r2, [r3, #0]
		if (data) {
   1cf9a:	b94c      	cbnz	r4, 1cfb0 <clock_async_start+0x6a>
   1cf9c:	e7ec      	b.n	1cf78 <clock_async_start+0x32>
					config->start_handler(dev) : true;
   1cf9e:	4798      	blx	r3
   1cfa0:	2800      	cmp	r0, #0
   1cfa2:	d1f3      	bne.n	1cf8c <clock_async_start+0x46>
			} else if (data) {
   1cfa4:	2c00      	cmp	r4, #0
   1cfa6:	d0e7      	beq.n	1cf78 <clock_async_start+0x32>
				data->cb(dev, data->user_data);
   1cfa8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1cfac:	4630      	mov	r0, r6
   1cfae:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1cfb0:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1cfb2:	429c      	cmp	r4, r3
   1cfb4:	d00d      	beq.n	1cfd2 <clock_async_start+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cfb6:	b113      	cbz	r3, 1cfbe <clock_async_start+0x78>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cfb8:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1cfba:	2b00      	cmp	r3, #0
   1cfbc:	d1f9      	bne.n	1cfb2 <clock_async_start+0x6c>
	parent->next = child;
   1cfbe:	2000      	movs	r0, #0
   1cfc0:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1cfc2:	686b      	ldr	r3, [r5, #4]
   1cfc4:	b913      	cbnz	r3, 1cfcc <clock_async_start+0x86>
	list->head = node;
   1cfc6:	e9c5 4400 	strd	r4, r4, [r5]
   1cfca:	e7d5      	b.n	1cf78 <clock_async_start+0x32>
	parent->next = child;
   1cfcc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cfce:	606c      	str	r4, [r5, #4]
   1cfd0:	e7d3      	b.n	1cf7a <clock_async_start+0x34>
				return -EALREADY;
   1cfd2:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1cfd6:	e7d0      	b.n	1cf7a <clock_async_start+0x34>

0001cfd8 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   1cfd8:	2200      	movs	r2, #0
   1cfda:	f7ff bfb4 	b.w	1cf46 <clock_async_start>

0001cfde <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1cfde:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   1cfe0:	2000      	movs	r0, #0
	list->tail = NULL;
   1cfe2:	e9c3 0000 	strd	r0, r0, [r3]
}
   1cfe6:	4770      	bx	lr

0001cfe8 <clkstarted_handle>:
{
   1cfe8:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   1cfea:	6884      	ldr	r4, [r0, #8]
{
   1cfec:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   1cfee:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1cff0:	b12b      	cbz	r3, 1cffe <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cff2:	6861      	ldr	r1, [r4, #4]
   1cff4:	681a      	ldr	r2, [r3, #0]
   1cff6:	428b      	cmp	r3, r1
	list->head = node;
   1cff8:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1cffa:	bf08      	it	eq
   1cffc:	6062      	streq	r2, [r4, #4]
	data->started = true;
   1cffe:	2201      	movs	r2, #1
   1d000:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   1d002:	b903      	cbnz	r3, 1d006 <clkstarted_handle+0x1e>
}
   1d004:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   1d006:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1d00a:	4628      	mov	r0, r5
   1d00c:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   1d00e:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d010:	2b00      	cmp	r3, #0
   1d012:	d0f7      	beq.n	1d004 <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d014:	6861      	ldr	r1, [r4, #4]
   1d016:	681a      	ldr	r2, [r3, #0]
   1d018:	428b      	cmp	r3, r1
	list->head = node;
   1d01a:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1d01c:	bf08      	it	eq
   1d01e:	6062      	streq	r2, [r4, #4]
   1d020:	e7ef      	b.n	1d002 <clkstarted_handle+0x1a>

0001d022 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d022:	4770      	bx	lr

0001d024 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1d024:	4770      	bx	lr

0001d026 <z_irq_spurious>:
	z_arm_reserved();
   1d026:	f7f2 bba5 	b.w	f774 <z_arm_bus_fault>

0001d02a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d02a:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1d02c:	6800      	ldr	r0, [r0, #0]
   1d02e:	f7f2 bbab 	b.w	f788 <z_arm_fatal_error>

0001d032 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d032:	b508      	push	{r3, lr}
	handler();
   1d034:	f7f2 fc42 	bl	f8bc <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   1d038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   1d03c:	f7f2 ba74 	b.w	f528 <z_arm_exc_exit>

0001d040 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1d040:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1d042:	2100      	movs	r1, #0
   1d044:	a801      	add	r0, sp, #4
   1d046:	f7f3 f94d 	bl	102e4 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1d04a:	b003      	add	sp, #12
   1d04c:	f85d fb04 	ldr.w	pc, [sp], #4

0001d050 <mpu_configure_region>:
{
   1d050:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1d052:	684b      	ldr	r3, [r1, #4]
{
   1d054:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1d056:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   1d058:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1d05c:	890d      	ldrh	r5, [r1, #8]
   1d05e:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   1d060:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d062:	f024 041f 	bic.w	r4, r4, #31
   1d066:	3b01      	subs	r3, #1
   1d068:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1d06a:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1d06e:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d072:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1d076:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   1d078:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1d07c:	9303      	str	r3, [sp, #12]
   1d07e:	4604      	mov	r4, r0
   1d080:	d905      	bls.n	1d08e <mpu_configure_region+0x3e>
   1d082:	f7f2 ffb1 	bl	ffe8 <region_allocate_and_init.part.0>
   1d086:	4604      	mov	r4, r0
}
   1d088:	4620      	mov	r0, r4
   1d08a:	b005      	add	sp, #20
   1d08c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1d08e:	4669      	mov	r1, sp
   1d090:	f7f2 ff92 	bl	ffb8 <region_init>
	return region_allocate_and_init(index,
   1d094:	e7f8      	b.n	1d088 <mpu_configure_region+0x38>

0001d096 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1d096:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1d09a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d09e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1d0a0:	bf08      	it	eq
   1d0a2:	f06f 0015 	mvneq.w	r0, #21
   1d0a6:	4770      	bx	lr

0001d0a8 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1d0a8:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1d0aa:	7802      	ldrb	r2, [r0, #0]
   1d0ac:	4603      	mov	r3, r0
   1d0ae:	2a20      	cmp	r2, #32
   1d0b0:	f100 0001 	add.w	r0, r0, #1
   1d0b4:	d0f9      	beq.n	1d0aa <atoi+0x2>
   1d0b6:	f1a2 0109 	sub.w	r1, r2, #9
   1d0ba:	2904      	cmp	r1, #4
   1d0bc:	d9f5      	bls.n	1d0aa <atoi+0x2>
		s++;
	}
	switch (*s) {
   1d0be:	2a2b      	cmp	r2, #43	; 0x2b
   1d0c0:	d008      	beq.n	1d0d4 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1d0c2:	2a2d      	cmp	r2, #45	; 0x2d
   1d0c4:	bf0a      	itet	eq
   1d0c6:	4603      	moveq	r3, r0
   1d0c8:	2100      	movne	r1, #0
   1d0ca:	2101      	moveq	r1, #1
   1d0cc:	3b01      	subs	r3, #1
	int neg = 0;
   1d0ce:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1d0d0:	250a      	movs	r5, #10
   1d0d2:	e006      	b.n	1d0e2 <atoi+0x3a>
		s++;
   1d0d4:	4603      	mov	r3, r0
	int neg = 0;
   1d0d6:	2100      	movs	r1, #0
   1d0d8:	e7f8      	b.n	1d0cc <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1d0da:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1d0de:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1d0e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d0e6:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1d0ea:	2c09      	cmp	r4, #9
   1d0ec:	d9f5      	bls.n	1d0da <atoi+0x32>
	}
	return neg ? n : -n;
   1d0ee:	b901      	cbnz	r1, 1d0f2 <atoi+0x4a>
   1d0f0:	4240      	negs	r0, r0
}
   1d0f2:	bd30      	pop	{r4, r5, pc}

0001d0f4 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1d0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d0f8:	4684      	mov	ip, r0
   1d0fa:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d0fc:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1d0fe:	462c      	mov	r4, r5
   1d100:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d104:	2b20      	cmp	r3, #32
   1d106:	d036      	beq.n	1d176 <strtol+0x82>
   1d108:	f1a3 0109 	sub.w	r1, r3, #9
   1d10c:	2904      	cmp	r1, #4
   1d10e:	d932      	bls.n	1d176 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1d110:	2b2d      	cmp	r3, #45	; 0x2d
   1d112:	d132      	bne.n	1d17a <strtol+0x86>
		neg = 1;
   1d114:	2101      	movs	r1, #1
		c = *s++;
   1d116:	786b      	ldrb	r3, [r5, #1]
   1d118:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d11a:	2a00      	cmp	r2, #0
   1d11c:	d05c      	beq.n	1d1d8 <strtol+0xe4>
   1d11e:	2a10      	cmp	r2, #16
   1d120:	d109      	bne.n	1d136 <strtol+0x42>
   1d122:	2b30      	cmp	r3, #48	; 0x30
   1d124:	d107      	bne.n	1d136 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d126:	7823      	ldrb	r3, [r4, #0]
   1d128:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d12c:	2b58      	cmp	r3, #88	; 0x58
   1d12e:	d14e      	bne.n	1d1ce <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1d130:	2210      	movs	r2, #16
		c = s[1];
   1d132:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d134:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1d136:	2900      	cmp	r1, #0
   1d138:	bf14      	ite	ne
   1d13a:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1d13e:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d142:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1d144:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1d148:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1d14a:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d14e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d152:	2d09      	cmp	r5, #9
   1d154:	d817      	bhi.n	1d186 <strtol+0x92>
			c -= '0';
   1d156:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d158:	429a      	cmp	r2, r3
   1d15a:	dd24      	ble.n	1d1a6 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d15c:	1c75      	adds	r5, r6, #1
   1d15e:	d007      	beq.n	1d170 <strtol+0x7c>
   1d160:	4570      	cmp	r0, lr
   1d162:	d81d      	bhi.n	1d1a0 <strtol+0xac>
   1d164:	d101      	bne.n	1d16a <strtol+0x76>
   1d166:	454b      	cmp	r3, r9
   1d168:	dc1a      	bgt.n	1d1a0 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   1d16a:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d16c:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d170:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d174:	e7eb      	b.n	1d14e <strtol+0x5a>
{
   1d176:	4625      	mov	r5, r4
   1d178:	e7c1      	b.n	1d0fe <strtol+0xa>
	} else if (c == '+') {
   1d17a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d17c:	bf04      	itt	eq
   1d17e:	1cac      	addeq	r4, r5, #2
   1d180:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d182:	2100      	movs	r1, #0
   1d184:	e7c9      	b.n	1d11a <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d186:	f043 0520 	orr.w	r5, r3, #32
   1d18a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d18c:	2d19      	cmp	r5, #25
   1d18e:	d80a      	bhi.n	1d1a6 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d190:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d194:	2d1a      	cmp	r5, #26
   1d196:	bf34      	ite	cc
   1d198:	2537      	movcc	r5, #55	; 0x37
   1d19a:	2557      	movcs	r5, #87	; 0x57
   1d19c:	1b5b      	subs	r3, r3, r5
   1d19e:	e7db      	b.n	1d158 <strtol+0x64>
			any = -1;
   1d1a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d1a4:	e7e4      	b.n	1d170 <strtol+0x7c>
		}
	}

	if (any < 0) {
   1d1a6:	1c73      	adds	r3, r6, #1
   1d1a8:	d107      	bne.n	1d1ba <strtol+0xc6>
   1d1aa:	f7fd fdbb 	bl	1ad24 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1d1ae:	2326      	movs	r3, #38	; 0x26
   1d1b0:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1d1b2:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1d1b4:	b937      	cbnz	r7, 1d1c4 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1d1ba:	b101      	cbz	r1, 1d1be <strtol+0xca>
		acc = -acc;
   1d1bc:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d1be:	2f00      	cmp	r7, #0
   1d1c0:	d0f9      	beq.n	1d1b6 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d1c2:	b10e      	cbz	r6, 1d1c8 <strtol+0xd4>
   1d1c4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d1c8:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d1cc:	e7f3      	b.n	1d1b6 <strtol+0xc2>
	if (base == 0) {
   1d1ce:	2330      	movs	r3, #48	; 0x30
   1d1d0:	2a00      	cmp	r2, #0
   1d1d2:	d1b0      	bne.n	1d136 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1d1d4:	2208      	movs	r2, #8
   1d1d6:	e7ae      	b.n	1d136 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1d1d8:	2b30      	cmp	r3, #48	; 0x30
   1d1da:	d0a4      	beq.n	1d126 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1d1dc:	220a      	movs	r2, #10
   1d1de:	e7aa      	b.n	1d136 <strtol+0x42>

0001d1e0 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1d1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1e4:	4684      	mov	ip, r0
   1d1e6:	460f      	mov	r7, r1
	register const char *s = nptr;
   1d1e8:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1d1ea:	462c      	mov	r4, r5
   1d1ec:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1d1f0:	2b20      	cmp	r3, #32
   1d1f2:	d035      	beq.n	1d260 <strtoul+0x80>
   1d1f4:	f1a3 0109 	sub.w	r1, r3, #9
   1d1f8:	2904      	cmp	r1, #4
   1d1fa:	d931      	bls.n	1d260 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1d1fc:	2b2d      	cmp	r3, #45	; 0x2d
   1d1fe:	d131      	bne.n	1d264 <strtoul+0x84>
		neg = 1;
   1d200:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1d204:	786b      	ldrb	r3, [r5, #1]
   1d206:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1d208:	2a00      	cmp	r2, #0
   1d20a:	d05e      	beq.n	1d2ca <strtoul+0xea>
   1d20c:	2a10      	cmp	r2, #16
   1d20e:	d109      	bne.n	1d224 <strtoul+0x44>
   1d210:	2b30      	cmp	r3, #48	; 0x30
   1d212:	d107      	bne.n	1d224 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1d214:	7823      	ldrb	r3, [r4, #0]
   1d216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d21a:	2b58      	cmp	r3, #88	; 0x58
   1d21c:	d150      	bne.n	1d2c0 <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1d21e:	2210      	movs	r2, #16
		c = s[1];
   1d220:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1d222:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1d224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d228:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1d22c:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d22e:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1d232:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1d234:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d238:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1d23c:	2d09      	cmp	r5, #9
   1d23e:	d818      	bhi.n	1d272 <strtoul+0x92>
			c -= '0';
   1d240:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1d242:	429a      	cmp	r2, r3
   1d244:	dd25      	ble.n	1d292 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1d246:	2e00      	cmp	r6, #0
   1d248:	db20      	blt.n	1d28c <strtoul+0xac>
   1d24a:	4288      	cmp	r0, r1
   1d24c:	d81e      	bhi.n	1d28c <strtoul+0xac>
   1d24e:	d101      	bne.n	1d254 <strtoul+0x74>
   1d250:	4543      	cmp	r3, r8
   1d252:	dc1b      	bgt.n	1d28c <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1d254:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1d256:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1d25a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1d25e:	e7eb      	b.n	1d238 <strtoul+0x58>
{
   1d260:	4625      	mov	r5, r4
   1d262:	e7c2      	b.n	1d1ea <strtoul+0xa>
	} else if (c == '+') {
   1d264:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1d266:	bf04      	itt	eq
   1d268:	1cac      	addeq	r4, r5, #2
   1d26a:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1d26c:	f04f 0e00 	mov.w	lr, #0
   1d270:	e7ca      	b.n	1d208 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d272:	f043 0520 	orr.w	r5, r3, #32
   1d276:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1d278:	2d19      	cmp	r5, #25
   1d27a:	d80a      	bhi.n	1d292 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d27c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1d280:	2d1a      	cmp	r5, #26
   1d282:	bf34      	ite	cc
   1d284:	2537      	movcc	r5, #55	; 0x37
   1d286:	2557      	movcs	r5, #87	; 0x57
   1d288:	1b5b      	subs	r3, r3, r5
   1d28a:	e7da      	b.n	1d242 <strtoul+0x62>
			any = -1;
   1d28c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d290:	e7e3      	b.n	1d25a <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1d292:	2e00      	cmp	r6, #0
   1d294:	da08      	bge.n	1d2a8 <strtoul+0xc8>
   1d296:	f7fd fd45 	bl	1ad24 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1d29a:	2326      	movs	r3, #38	; 0x26
   1d29c:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1d29e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1d2a2:	b947      	cbnz	r7, 1d2b6 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1d2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1d2a8:	f1be 0f00 	cmp.w	lr, #0
   1d2ac:	d000      	beq.n	1d2b0 <strtoul+0xd0>
		acc = -acc;
   1d2ae:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1d2b0:	2f00      	cmp	r7, #0
   1d2b2:	d0f7      	beq.n	1d2a4 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1d2b4:	b10e      	cbz	r6, 1d2ba <strtoul+0xda>
   1d2b6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1d2ba:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1d2be:	e7f1      	b.n	1d2a4 <strtoul+0xc4>
	if (base == 0) {
   1d2c0:	2330      	movs	r3, #48	; 0x30
   1d2c2:	2a00      	cmp	r2, #0
   1d2c4:	d1ae      	bne.n	1d224 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1d2c6:	2208      	movs	r2, #8
   1d2c8:	e7ac      	b.n	1d224 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1d2ca:	2b30      	cmp	r3, #48	; 0x30
   1d2cc:	d0a2      	beq.n	1d214 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1d2ce:	220a      	movs	r2, #10
   1d2d0:	e7a8      	b.n	1d224 <strtoul+0x44>

0001d2d2 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1d2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1d2d6:	780f      	ldrb	r7, [r1, #0]
{
   1d2d8:	4605      	mov	r5, r0
	if (c != 0) {
   1d2da:	b187      	cbz	r7, 1d2fe <strstr+0x2c>
	c = *find++;
   1d2dc:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1d2de:	4620      	mov	r0, r4
   1d2e0:	f000 f84c 	bl	1d37c <strlen>
   1d2e4:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   1d2e6:	462e      	mov	r6, r5
   1d2e8:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1d2ec:	b163      	cbz	r3, 1d308 <strstr+0x36>
					return NULL;
				}
			} while (sc != c);
   1d2ee:	429f      	cmp	r7, r3
   1d2f0:	d108      	bne.n	1d304 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   1d2f2:	4642      	mov	r2, r8
   1d2f4:	4621      	mov	r1, r4
   1d2f6:	4630      	mov	r0, r6
   1d2f8:	f000 f853 	bl	1d3a2 <strncmp>
   1d2fc:	b910      	cbnz	r0, 1d304 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   1d2fe:	4628      	mov	r0, r5
   1d300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1d304:	4635      	mov	r5, r6
   1d306:	e7ee      	b.n	1d2e6 <strstr+0x14>
					return NULL;
   1d308:	461d      	mov	r5, r3
   1d30a:	e7f8      	b.n	1d2fe <strstr+0x2c>

0001d30c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1d30c:	4603      	mov	r3, r0
   1d30e:	3901      	subs	r1, #1
   1d310:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d314:	b90a      	cbnz	r2, 1d31a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1d316:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1d318:	4770      	bx	lr
		*d = *s;
   1d31a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1d31e:	e7f7      	b.n	1d310 <strcpy+0x4>

0001d320 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1d320:	b570      	push	{r4, r5, r6, lr}
   1d322:	4605      	mov	r5, r0
   1d324:	3901      	subs	r1, #1
   1d326:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1d328:	b142      	cbz	r2, 1d33c <strncpy+0x1c>
   1d32a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1d32e:	1e56      	subs	r6, r2, #1
   1d330:	b92b      	cbnz	r3, 1d33e <strncpy+0x1e>
   1d332:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1d334:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1d338:	42a2      	cmp	r2, r4
   1d33a:	d1fb      	bne.n	1d334 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1d33c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1d33e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1d342:	4632      	mov	r2, r6
   1d344:	e7ef      	b.n	1d326 <strncpy+0x6>

0001d346 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1d346:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1d348:	7802      	ldrb	r2, [r0, #0]
   1d34a:	4603      	mov	r3, r0
   1d34c:	428a      	cmp	r2, r1
   1d34e:	f100 0001 	add.w	r0, r0, #1
   1d352:	d004      	beq.n	1d35e <strchr+0x18>
   1d354:	2a00      	cmp	r2, #0
   1d356:	d1f7      	bne.n	1d348 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1d358:	2900      	cmp	r1, #0
   1d35a:	bf18      	it	ne
   1d35c:	2300      	movne	r3, #0
}
   1d35e:	4618      	mov	r0, r3
   1d360:	4770      	bx	lr

0001d362 <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
   1d362:	2300      	movs	r3, #0
{
   1d364:	b510      	push	{r4, lr}

	do {
		if (*s == (char)c) {
   1d366:	b2c9      	uxtb	r1, r1
   1d368:	4604      	mov	r4, r0
   1d36a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d36e:	428a      	cmp	r2, r1
   1d370:	bf08      	it	eq
   1d372:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
   1d374:	2a00      	cmp	r2, #0
   1d376:	d1f7      	bne.n	1d368 <strrchr+0x6>

	return match;
}
   1d378:	4618      	mov	r0, r3
   1d37a:	bd10      	pop	{r4, pc}

0001d37c <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1d37c:	2300      	movs	r3, #0

	while (*s != '\0') {
   1d37e:	5cc2      	ldrb	r2, [r0, r3]
   1d380:	b90a      	cbnz	r2, 1d386 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d382:	4618      	mov	r0, r3
   1d384:	4770      	bx	lr
		n++;
   1d386:	3301      	adds	r3, #1
   1d388:	e7f9      	b.n	1d37e <strlen+0x2>

0001d38a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d38a:	3801      	subs	r0, #1
   1d38c:	3901      	subs	r1, #1
   1d38e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d392:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d396:	4293      	cmp	r3, r2
   1d398:	d101      	bne.n	1d39e <strcmp+0x14>
   1d39a:	2b00      	cmp	r3, #0
   1d39c:	d1f7      	bne.n	1d38e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d39e:	1a98      	subs	r0, r3, r2
   1d3a0:	4770      	bx	lr

0001d3a2 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1d3a2:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1d3a4:	2400      	movs	r4, #0
   1d3a6:	42a2      	cmp	r2, r4
   1d3a8:	d008      	beq.n	1d3bc <strncmp+0x1a>
   1d3aa:	5d03      	ldrb	r3, [r0, r4]
   1d3ac:	5d0d      	ldrb	r5, [r1, r4]
   1d3ae:	42ab      	cmp	r3, r5
   1d3b0:	d102      	bne.n	1d3b8 <strncmp+0x16>
   1d3b2:	3401      	adds	r4, #1
   1d3b4:	2b00      	cmp	r3, #0
   1d3b6:	d1f6      	bne.n	1d3a6 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1d3b8:	1b58      	subs	r0, r3, r5
   1d3ba:	e000      	b.n	1d3be <strncmp+0x1c>
   1d3bc:	2000      	movs	r0, #0
}
   1d3be:	bd30      	pop	{r4, r5, pc}

0001d3c0 <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   1d3c0:	b510      	push	{r4, lr}
   1d3c2:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   1d3c4:	f7ff ffda 	bl	1d37c <strlen>
   1d3c8:	4420      	add	r0, r4
   1d3ca:	f7ff ff9f 	bl	1d30c <strcpy>
	return dest;
}
   1d3ce:	4620      	mov	r0, r4
   1d3d0:	bd10      	pop	{r4, pc}

0001d3d2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d3d2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d3d4:	b15a      	cbz	r2, 1d3ee <memcmp+0x1c>
   1d3d6:	3901      	subs	r1, #1
   1d3d8:	1884      	adds	r4, r0, r2
   1d3da:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d3de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d3e2:	42a0      	cmp	r0, r4
   1d3e4:	d001      	beq.n	1d3ea <memcmp+0x18>
   1d3e6:	429a      	cmp	r2, r3
   1d3e8:	d0f7      	beq.n	1d3da <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1d3ea:	1ad0      	subs	r0, r2, r3
}
   1d3ec:	bd10      	pop	{r4, pc}
		return 0;
   1d3ee:	4610      	mov	r0, r2
   1d3f0:	e7fc      	b.n	1d3ec <memcmp+0x1a>

0001d3f2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1d3f2:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1d3f4:	ea81 0400 	eor.w	r4, r1, r0
   1d3f8:	07a5      	lsls	r5, r4, #30
   1d3fa:	4603      	mov	r3, r0
   1d3fc:	d00b      	beq.n	1d416 <memcpy+0x24>
   1d3fe:	3b01      	subs	r3, #1
   1d400:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1d402:	4291      	cmp	r1, r2
   1d404:	d11a      	bne.n	1d43c <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1d406:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1d408:	2a00      	cmp	r2, #0
   1d40a:	d0fc      	beq.n	1d406 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1d40c:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1d410:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1d412:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1d416:	079c      	lsls	r4, r3, #30
   1d418:	d1f6      	bne.n	1d408 <memcpy+0x16>
   1d41a:	0895      	lsrs	r5, r2, #2
   1d41c:	00ac      	lsls	r4, r5, #2
   1d41e:	1f1e      	subs	r6, r3, #4
   1d420:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1d422:	42b9      	cmp	r1, r7
   1d424:	d105      	bne.n	1d432 <memcpy+0x40>
   1d426:	f06f 0603 	mvn.w	r6, #3
   1d42a:	4423      	add	r3, r4
   1d42c:	fb06 2205 	mla	r2, r6, r5, r2
   1d430:	e7e5      	b.n	1d3fe <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1d432:	f851 cb04 	ldr.w	ip, [r1], #4
   1d436:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   1d43a:	e7f2      	b.n	1d422 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1d43c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d440:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1d444:	e7dd      	b.n	1d402 <memcpy+0x10>

0001d446 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1d446:	4603      	mov	r3, r0
{
   1d448:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1d44a:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1d44c:	079c      	lsls	r4, r3, #30
   1d44e:	d110      	bne.n	1d472 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1d450:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1d454:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1d458:	0894      	lsrs	r4, r2, #2
   1d45a:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1d45e:	42b3      	cmp	r3, r6
   1d460:	d10d      	bne.n	1d47e <memset+0x38>
   1d462:	f06f 0503 	mvn.w	r5, #3
   1d466:	fb05 2404 	mla	r4, r5, r4, r2
   1d46a:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1d46c:	42a3      	cmp	r3, r4
   1d46e:	d109      	bne.n	1d484 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1d470:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1d472:	2a00      	cmp	r2, #0
   1d474:	d0fc      	beq.n	1d470 <memset+0x2a>
		*(d_byte++) = c_byte;
   1d476:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d47a:	3a01      	subs	r2, #1
   1d47c:	e7e6      	b.n	1d44c <memset+0x6>
		*(d_word++) = c_word;
   1d47e:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1d482:	e7ec      	b.n	1d45e <memset+0x18>
		*(d_byte++) = c_byte;
   1d484:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1d488:	e7f0      	b.n	1d46c <memset+0x26>

0001d48a <_to_x>:
{
   1d48a:	4603      	mov	r3, r0
   1d48c:	b5f0      	push	{r4, r5, r6, r7, lr}
		unsigned int d = n % base;
   1d48e:	fbb1 f7f2 	udiv	r7, r1, r2
   1d492:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d496:	2d09      	cmp	r5, #9
   1d498:	bf8c      	ite	hi
   1d49a:	2627      	movhi	r6, #39	; 0x27
   1d49c:	2600      	movls	r6, #0
   1d49e:	461c      	mov	r4, r3
   1d4a0:	3530      	adds	r5, #48	; 0x30
   1d4a2:	4435      	add	r5, r6
	} while (n);
   1d4a4:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1d4a6:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1d4aa:	d206      	bcs.n	1d4ba <_to_x+0x30>
	*buf = 0;
   1d4ac:	2200      	movs	r2, #0
   1d4ae:	7022      	strb	r2, [r4, #0]
	len = buf - start;
   1d4b0:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
   1d4b2:	4283      	cmp	r3, r0
   1d4b4:	d804      	bhi.n	1d4c0 <_to_x+0x36>
}
   1d4b6:	4620      	mov	r0, r4
   1d4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1d4ba:	4639      	mov	r1, r7
   1d4bc:	4623      	mov	r3, r4
   1d4be:	e7e6      	b.n	1d48e <_to_x+0x4>
		char tmp = *buf;
   1d4c0:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
   1d4c2:	7801      	ldrb	r1, [r0, #0]
   1d4c4:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
   1d4c8:	f800 2b01 	strb.w	r2, [r0], #1
   1d4cc:	e7f1      	b.n	1d4b2 <_to_x+0x28>

0001d4ce <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1d4ce:	2100      	movs	r1, #0
{
   1d4d0:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1d4d2:	e9d0 6500 	ldrd	r6, r5, [r0]
   1d4d6:	0872      	lsrs	r2, r6, #1
   1d4d8:	f006 0301 	and.w	r3, r6, #1
   1d4dc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1d4e0:	189b      	adds	r3, r3, r2
   1d4e2:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1d4e6:	eb44 0101 	adc.w	r1, r4, r1
   1d4ea:	e9c0 3100 	strd	r3, r1, [r0]
}
   1d4ee:	bd70      	pop	{r4, r5, r6, pc}

0001d4f0 <_ldiv5>:
{
   1d4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t rem = *v, quot = 0U, q;
   1d4f4:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d4f8:	2705      	movs	r7, #5
	rem += 2U;
   1d4fa:	3302      	adds	r3, #2
   1d4fc:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d500:	fbb2 fef7 	udiv	lr, r2, r7
   1d504:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1d508:	fb07 f10e 	mul.w	r1, r7, lr
   1d50c:	ebb3 060c 	subs.w	r6, r3, ip
   1d510:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1d514:	08f2      	lsrs	r2, r6, #3
   1d516:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d51a:	fbb2 f1f7 	udiv	r1, r2, r7
   1d51e:	00ca      	lsls	r2, r1, #3
		quot += q;
   1d520:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d524:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1d528:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
   1d52c:	fba2 2307 	umull	r2, r3, r2, r7
   1d530:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1d532:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1d536:	eb18 0403 	adds.w	r4, r8, r3
   1d53a:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1d53e:	e9c0 4500 	strd	r4, r5, [r0]
}
   1d542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d546 <_get_digit>:
	if (*digit_count > 0) {
   1d546:	680b      	ldr	r3, [r1, #0]
{
   1d548:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	dd10      	ble.n	1d570 <_get_digit+0x2a>
		*digit_count -= 1;
   1d54e:	3b01      	subs	r3, #1
   1d550:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1d552:	210a      	movs	r1, #10
   1d554:	6802      	ldr	r2, [r0, #0]
   1d556:	6844      	ldr	r4, [r0, #4]
   1d558:	fba2 5601 	umull	r5, r6, r2, r1
   1d55c:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1d560:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1d564:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d568:	0f31      	lsrs	r1, r6, #28
   1d56a:	3130      	adds	r1, #48	; 0x30
}
   1d56c:	4608      	mov	r0, r1
   1d56e:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1d570:	2130      	movs	r1, #48	; 0x30
   1d572:	e7fb      	b.n	1d56c <_get_digit+0x26>

0001d574 <_stdout_hook_default>:
}
   1d574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d578:	4770      	bx	lr

0001d57a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1d57a:	684b      	ldr	r3, [r1, #4]
   1d57c:	2b01      	cmp	r3, #1
   1d57e:	dd07      	ble.n	1d590 <sprintf_out+0x16>
		*(p->ptr) = c;
   1d580:	680b      	ldr	r3, [r1, #0]
   1d582:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1d584:	680b      	ldr	r3, [r1, #0]
   1d586:	3301      	adds	r3, #1
   1d588:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1d58a:	684b      	ldr	r3, [r1, #4]
   1d58c:	3b01      	subs	r3, #1
   1d58e:	604b      	str	r3, [r1, #4]
}
   1d590:	2000      	movs	r0, #0
   1d592:	4770      	bx	lr

0001d594 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   1d594:	b508      	push	{r3, lr}
	net_if_init();
   1d596:	f7f3 fbbf 	bl	10d18 <net_if_init>
	net_if_post_init();
   1d59a:	f7f3 fbd1 	bl	10d40 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1d59e:	2000      	movs	r0, #0
   1d5a0:	bd08      	pop	{r3, pc}

0001d5a2 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d5a2:	e8d0 0faf 	lda	r0, [r0]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d5a6:	4108      	asrs	r0, r1
}
   1d5a8:	f000 0001 	and.w	r0, r0, #1
   1d5ac:	4770      	bx	lr

0001d5ae <l2_flags_get>:
	if (!iface) {
   1d5ae:	b128      	cbz	r0, 1d5bc <l2_flags_get+0xe>
	return iface->if_dev->l2;
   1d5b0:	6803      	ldr	r3, [r0, #0]
   1d5b2:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1d5b4:	b113      	cbz	r3, 1d5bc <l2_flags_get+0xe>
   1d5b6:	68db      	ldr	r3, [r3, #12]
   1d5b8:	b103      	cbz	r3, 1d5bc <l2_flags_get+0xe>
		flags = net_if_l2(iface)->get_flags(iface);
   1d5ba:	4718      	bx	r3
}
   1d5bc:	2000      	movs	r0, #0
   1d5be:	4770      	bx	lr

0001d5c0 <net_if_up>:
{
   1d5c0:	b510      	push	{r4, lr}
   1d5c2:	4604      	mov	r4, r0
	return atomic_test_bit(iface->if_dev->flags, value);
   1d5c4:	6800      	ldr	r0, [r0, #0]
   1d5c6:	2100      	movs	r1, #0
   1d5c8:	300c      	adds	r0, #12
   1d5ca:	f7ff ffea 	bl	1d5a2 <atomic_test_bit>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d5ce:	b9d8      	cbnz	r0, 1d608 <net_if_up+0x48>
	     net_if_is_socket_offloaded(iface))) {
   1d5d0:	6823      	ldr	r3, [r4, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d5d2:	7e9a      	ldrb	r2, [r3, #26]
   1d5d4:	b14a      	cbz	r2, 1d5ea <net_if_up+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d5d6:	330c      	adds	r3, #12
   1d5d8:	e8d3 2fef 	ldaex	r2, [r3]
   1d5dc:	f042 0201 	orr.w	r2, r2, #1
   1d5e0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d5e4:	2900      	cmp	r1, #0
   1d5e6:	d1f7      	bne.n	1d5d8 <net_if_up+0x18>
}
   1d5e8:	bd10      	pop	{r4, pc}
	return iface->if_dev->l2;
   1d5ea:	685b      	ldr	r3, [r3, #4]
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d5ec:	b973      	cbnz	r3, 1d60c <net_if_up+0x4c>
   1d5ee:	6823      	ldr	r3, [r4, #0]
   1d5f0:	330c      	adds	r3, #12
   1d5f2:	e8d3 2fef 	ldaex	r2, [r3]
   1d5f6:	f042 0201 	orr.w	r2, r2, #1
   1d5fa:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d5fe:	2900      	cmp	r1, #0
   1d600:	d1f7      	bne.n	1d5f2 <net_if_up+0x32>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d602:	4620      	mov	r0, r4
   1d604:	f7ff ffd3 	bl	1d5ae <l2_flags_get>
		return 0;
   1d608:	2000      	movs	r0, #0
   1d60a:	e7ed      	b.n	1d5e8 <net_if_up+0x28>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d60c:	689b      	ldr	r3, [r3, #8]
   1d60e:	2b00      	cmp	r3, #0
   1d610:	d0ed      	beq.n	1d5ee <net_if_up+0x2e>
	status = net_if_l2(iface)->enable(iface, true);
   1d612:	2101      	movs	r1, #1
   1d614:	4620      	mov	r0, r4
   1d616:	4798      	blx	r3
	if (status < 0) {
   1d618:	2800      	cmp	r0, #0
   1d61a:	dae8      	bge.n	1d5ee <net_if_up+0x2e>
   1d61c:	e7e4      	b.n	1d5e8 <net_if_up+0x28>

0001d61e <net_byte_to_hex>:
{
   1d61e:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d620:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   1d622:	b1b3      	cbz	r3, 1d652 <net_byte_to_hex+0x34>
		if (val < 10) {
   1d624:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   1d626:	b274      	sxtb	r4, r6
   1d628:	bf86      	itte	hi
   1d62a:	f1a2 030a 	subhi.w	r3, r2, #10
   1d62e:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   1d630:	3430      	addls	r4, #48	; 0x30
   1d632:	1c45      	adds	r5, r0, #1
   1d634:	7004      	strb	r4, [r0, #0]
   1d636:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   1d63a:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   1d63c:	b24b      	sxtb	r3, r1
   1d63e:	bf83      	ittte	hi
   1d640:	3a0a      	subhi	r2, #10
   1d642:	189b      	addhi	r3, r3, r2
   1d644:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   1d646:	3330      	addls	r3, #48	; 0x30
   1d648:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   1d64a:	2300      	movs	r3, #0
   1d64c:	706b      	strb	r3, [r5, #1]
   1d64e:	1c68      	adds	r0, r5, #1
}
   1d650:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   1d652:	2e00      	cmp	r6, #0
   1d654:	d1e6      	bne.n	1d624 <net_byte_to_hex+0x6>
   1d656:	4605      	mov	r5, r0
   1d658:	e7ed      	b.n	1d636 <net_byte_to_hex+0x18>

0001d65a <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   1d65a:	2801      	cmp	r0, #1
{
   1d65c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d660:	460c      	mov	r4, r1
   1d662:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d664:	d128      	bne.n	1d6b8 <z_impl_net_addr_pton+0x5e>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   1d666:	4608      	mov	r0, r1
   1d668:	f7ff fe88 	bl	1d37c <strlen>
		for (i = 0; i < len; i++) {
   1d66c:	4623      	mov	r3, r4
   1d66e:	4420      	add	r0, r4
   1d670:	4298      	cmp	r0, r3
   1d672:	d114      	bne.n	1d69e <z_impl_net_addr_pton+0x44>
			    src[i] != '.') {
				return -EINVAL;
			}
		}

		(void)memset(addr, 0, sizeof(struct in_addr));
   1d674:	4630      	mov	r0, r6
   1d676:	2204      	movs	r2, #4
   1d678:	2100      	movs	r1, #0
   1d67a:	f7ff fee4 	bl	1d446 <memset>

		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d67e:	1e75      	subs	r5, r6, #1
   1d680:	3603      	adds	r6, #3
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d682:	4620      	mov	r0, r4
   1d684:	220a      	movs	r2, #10
   1d686:	a901      	add	r1, sp, #4
   1d688:	f7ff fd34 	bl	1d0f4 <strtol>

			src = ++endptr;
   1d68c:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d68e:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d692:	42b5      	cmp	r5, r6
			src = ++endptr;
   1d694:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d698:	d1f3      	bne.n	1d682 <z_impl_net_addr_pton+0x28>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   1d69a:	2000      	movs	r0, #0
   1d69c:	e009      	b.n	1d6b2 <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d69e:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d6a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d6a6:	2909      	cmp	r1, #9
   1d6a8:	d9e2      	bls.n	1d670 <z_impl_net_addr_pton+0x16>
   1d6aa:	2a2e      	cmp	r2, #46	; 0x2e
   1d6ac:	d0e0      	beq.n	1d670 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   1d6ae:	f06f 0015 	mvn.w	r0, #21
}
   1d6b2:	b003      	add	sp, #12
   1d6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   1d6b8:	2802      	cmp	r0, #2
   1d6ba:	d1f8      	bne.n	1d6ae <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d6bc:	212e      	movs	r1, #46	; 0x2e
   1d6be:	4620      	mov	r0, r4
   1d6c0:	f7ff fe41 	bl	1d346 <strchr>
		if (*src == ':') {
   1d6c4:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d6c6:	2800      	cmp	r0, #0
   1d6c8:	bf14      	ite	ne
   1d6ca:	2706      	movne	r7, #6
   1d6cc:	2708      	moveq	r7, #8
		if (*src == ':') {
   1d6ce:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1d6d0:	bf08      	it	eq
   1d6d2:	3401      	addeq	r4, #1
		len = strlen(src);
   1d6d4:	4620      	mov	r0, r4
   1d6d6:	f7ff fe51 	bl	1d37c <strlen>
		for (i = 0; i < len; i++) {
   1d6da:	2300      	movs	r3, #0
   1d6dc:	4283      	cmp	r3, r0
   1d6de:	db21      	blt.n	1d724 <z_impl_net_addr_pton+0xca>
		for (i = 0; i < expected_groups; i++) {
   1d6e0:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d6e2:	46a9      	mov	r9, r5
			if (!src || *src == '\0') {
   1d6e4:	2c00      	cmp	r4, #0
   1d6e6:	d0e2      	beq.n	1d6ae <z_impl_net_addr_pton+0x54>
   1d6e8:	7823      	ldrb	r3, [r4, #0]
   1d6ea:	2b00      	cmp	r3, #0
   1d6ec:	d0df      	beq.n	1d6ae <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
   1d6ee:	2b3a      	cmp	r3, #58	; 0x3a
   1d6f0:	d02d      	beq.n	1d74e <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d6f2:	2210      	movs	r2, #16
   1d6f4:	2100      	movs	r1, #0
   1d6f6:	4620      	mov	r0, r4
   1d6f8:	f7ff fcfc 	bl	1d0f4 <strtol>
   1d6fc:	2210      	movs	r2, #16
   1d6fe:	4680      	mov	r8, r0
   1d700:	2100      	movs	r1, #0
   1d702:	4620      	mov	r0, r4
   1d704:	f7ff fcf6 	bl	1d0f4 <strtol>
   1d708:	f3c8 2807 	ubfx	r8, r8, #8, #8
   1d70c:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   1d710:	f826 8015 	strh.w	r8, [r6, r5, lsl #1]
				src = strchr(src, ':');
   1d714:	213a      	movs	r1, #58	; 0x3a
   1d716:	4620      	mov	r0, r4
   1d718:	f7ff fe15 	bl	1d346 <strchr>
				if (src) {
   1d71c:	4604      	mov	r4, r0
   1d71e:	b178      	cbz	r0, 1d740 <z_impl_net_addr_pton+0xe6>
			src++;
   1d720:	3401      	adds	r4, #1
   1d722:	e010      	b.n	1d746 <z_impl_net_addr_pton+0xec>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d724:	5ce2      	ldrb	r2, [r4, r3]
   1d726:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d72a:	290a      	cmp	r1, #10
   1d72c:	d906      	bls.n	1d73c <z_impl_net_addr_pton+0xe2>
   1d72e:	f022 0120 	bic.w	r1, r2, #32
   1d732:	3941      	subs	r1, #65	; 0x41
   1d734:	2905      	cmp	r1, #5
   1d736:	d901      	bls.n	1d73c <z_impl_net_addr_pton+0xe2>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d738:	2a2e      	cmp	r2, #46	; 0x2e
   1d73a:	d1b8      	bne.n	1d6ae <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
   1d73c:	3301      	adds	r3, #1
   1d73e:	e7cd      	b.n	1d6dc <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
   1d740:	1e7b      	subs	r3, r7, #1
   1d742:	42ab      	cmp	r3, r5
   1d744:	dcb3      	bgt.n	1d6ae <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
   1d746:	3501      	adds	r5, #1
   1d748:	42af      	cmp	r7, r5
   1d74a:	dccb      	bgt.n	1d6e4 <z_impl_net_addr_pton+0x8a>
   1d74c:	e013      	b.n	1d776 <z_impl_net_addr_pton+0x11c>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d74e:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   1d752:	f806 9015 	strb.w	r9, [r6, r5, lsl #1]
   1d756:	f883 9001 	strb.w	r9, [r3, #1]
			for (; i < expected_groups; i++) {
   1d75a:	3501      	adds	r5, #1
   1d75c:	42af      	cmp	r7, r5
   1d75e:	dcf6      	bgt.n	1d74e <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
   1d760:	213a      	movs	r1, #58	; 0x3a
   1d762:	4620      	mov	r0, r4
   1d764:	f7ff fdfd 	bl	1d362 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d768:	42a0      	cmp	r0, r4
   1d76a:	d11f      	bne.n	1d7ac <z_impl_net_addr_pton+0x152>
   1d76c:	2f06      	cmp	r7, #6
   1d76e:	d001      	beq.n	1d774 <z_impl_net_addr_pton+0x11a>
   1d770:	7863      	ldrb	r3, [r4, #1]
   1d772:	bb63      	cbnz	r3, 1d7ce <z_impl_net_addr_pton+0x174>
				src++;
   1d774:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   1d776:	2f06      	cmp	r7, #6
   1d778:	d18f      	bne.n	1d69a <z_impl_net_addr_pton+0x40>
			for (i = 0; i < 4; i++) {
   1d77a:	2500      	movs	r5, #0
   1d77c:	360c      	adds	r6, #12
				if (!src || !*src) {
   1d77e:	2c00      	cmp	r4, #0
   1d780:	d095      	beq.n	1d6ae <z_impl_net_addr_pton+0x54>
   1d782:	7823      	ldrb	r3, [r4, #0]
   1d784:	2b00      	cmp	r3, #0
   1d786:	d092      	beq.n	1d6ae <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d788:	220a      	movs	r2, #10
   1d78a:	2100      	movs	r1, #0
   1d78c:	4620      	mov	r0, r4
   1d78e:	f7ff fcb1 	bl	1d0f4 <strtol>
				src = strchr(src, '.');
   1d792:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d794:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   1d798:	4620      	mov	r0, r4
   1d79a:	f7ff fdd4 	bl	1d346 <strchr>
				if (src) {
   1d79e:	4604      	mov	r4, r0
   1d7a0:	b1b8      	cbz	r0, 1d7d2 <z_impl_net_addr_pton+0x178>
					src++;
   1d7a2:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   1d7a4:	3501      	adds	r5, #1
   1d7a6:	2d04      	cmp	r5, #4
   1d7a8:	d1e9      	bne.n	1d77e <z_impl_net_addr_pton+0x124>
   1d7aa:	e776      	b.n	1d69a <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
   1d7ac:	2f06      	cmp	r7, #6
   1d7ae:	d100      	bne.n	1d7b2 <z_impl_net_addr_pton+0x158>
				tmp--;
   1d7b0:	3801      	subs	r0, #1
			i = expected_groups - 1;
   1d7b2:	1e7d      	subs	r5, r7, #1
   1d7b4:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1d7b6:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1d7ba:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1d7bc:	bf08      	it	eq
   1d7be:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
   1d7c2:	2d00      	cmp	r5, #0
   1d7c4:	f6ff af73 	blt.w	1d6ae <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
   1d7c8:	42a0      	cmp	r0, r4
   1d7ca:	d1f4      	bne.n	1d7b6 <z_impl_net_addr_pton+0x15c>
   1d7cc:	e7a8      	b.n	1d720 <z_impl_net_addr_pton+0xc6>
   1d7ce:	4620      	mov	r0, r4
   1d7d0:	e7ef      	b.n	1d7b2 <z_impl_net_addr_pton+0x158>
					if (i < 3) {
   1d7d2:	2d03      	cmp	r5, #3
   1d7d4:	f47f af6b 	bne.w	1d6ae <z_impl_net_addr_pton+0x54>
   1d7d8:	e7e4      	b.n	1d7a4 <z_impl_net_addr_pton+0x14a>

0001d7da <gpio_nrfx_write>:
{
   1d7da:	b510      	push	{r4, lr}
	return port->config->config_info;
   1d7dc:	6804      	ldr	r4, [r0, #0]
   1d7de:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d7e0:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d7e2:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d7e4:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d7e6:	69c0      	ldr	r0, [r0, #28]
   1d7e8:	d103      	bne.n	1d7f2 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1d7ea:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1d7ec:	6060      	str	r0, [r4, #4]
}
   1d7ee:	2000      	movs	r0, #0
   1d7f0:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1d7f2:	3300      	adds	r3, #0
   1d7f4:	f04f 0101 	mov.w	r1, #1
   1d7f8:	bf18      	it	ne
   1d7fa:	2301      	movne	r3, #1
   1d7fc:	40d0      	lsrs	r0, r2
   1d7fe:	f000 0001 	and.w	r0, r0, #1
   1d802:	4091      	lsls	r1, r2
   1d804:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1d806:	bf14      	ite	ne
   1d808:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1d80a:	60e1      	streq	r1, [r4, #12]
   1d80c:	e7ef      	b.n	1d7ee <gpio_nrfx_write+0x14>

0001d80e <gpio_nrfx_read>:
{
   1d80e:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1d810:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d812:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d814:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d816:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d818:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d81a:	2901      	cmp	r1, #1
    return p_reg->DIR;
   1d81c:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   1d81e:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   1d820:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1d822:	ea80 0004 	eor.w	r0, r0, r4
   1d826:	ea84 0405 	eor.w	r4, r4, r5
   1d82a:	ea04 0406 	and.w	r4, r4, r6
   1d82e:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1d832:	bf1c      	itt	ne
   1d834:	40d0      	lsrne	r0, r2
   1d836:	f000 0001 	andne.w	r0, r0, #1
   1d83a:	6018      	str	r0, [r3, #0]
}
   1d83c:	2000      	movs	r0, #0
   1d83e:	bd70      	pop	{r4, r5, r6, pc}

0001d840 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d840:	6883      	ldr	r3, [r0, #8]
{
   1d842:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1d844:	6818      	ldr	r0, [r3, #0]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1d846:	b158      	cbz	r0, 1d860 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d848:	2400      	movs	r4, #0
   1d84a:	4281      	cmp	r1, r0
   1d84c:	d113      	bne.n	1d876 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1d84e:	6808      	ldr	r0, [r1, #0]
   1d850:	b95c      	cbnz	r4, 1d86a <gpio_nrfx_manage_callback+0x2a>
   1d852:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1d854:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d856:	42a1      	cmp	r1, r4
   1d858:	d100      	bne.n	1d85c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1d85a:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1d85c:	2000      	movs	r0, #0
   1d85e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d860:	b972      	cbnz	r2, 1d880 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d862:	2000      	movs	r0, #0
}
   1d864:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d866:	4628      	mov	r0, r5
   1d868:	e7ef      	b.n	1d84a <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1d86a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d86c:	6858      	ldr	r0, [r3, #4]
   1d86e:	4281      	cmp	r1, r0
	list->tail = node;
   1d870:	bf08      	it	eq
   1d872:	605c      	streq	r4, [r3, #4]
   1d874:	e7f2      	b.n	1d85c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d876:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1d878:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d87a:	2d00      	cmp	r5, #0
   1d87c:	d1f3      	bne.n	1d866 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1d87e:	b13a      	cbz	r2, 1d890 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1d880:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1d882:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d884:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1d886:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d888:	2800      	cmp	r0, #0
   1d88a:	d1ea      	bne.n	1d862 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1d88c:	6059      	str	r1, [r3, #4]
   1d88e:	e7e9      	b.n	1d864 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1d890:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d894:	e7e6      	b.n	1d864 <gpio_nrfx_manage_callback+0x24>

0001d896 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d896:	2901      	cmp	r1, #1
{
   1d898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1d89c:	bf18      	it	ne
   1d89e:	b2d4      	uxtbne	r4, r2
{
   1d8a0:	4606      	mov	r6, r0
		to_pin   = pin;
   1d8a2:	bf12      	itee	ne
   1d8a4:	4625      	movne	r5, r4
		to_pin   = 31U;
   1d8a6:	251f      	moveq	r5, #31
		from_pin = 0U;
   1d8a8:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d8aa:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1d8ae:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d8b0:	42ac      	cmp	r4, r5
   1d8b2:	d902      	bls.n	1d8ba <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1d8b4:	2000      	movs	r0, #0
}
   1d8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d8ba:	68fb      	ldr	r3, [r7, #12]
   1d8bc:	fa08 f204 	lsl.w	r2, r8, r4
   1d8c0:	ea23 0302 	bic.w	r3, r3, r2
   1d8c4:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1d8c6:	4621      	mov	r1, r4
   1d8c8:	4630      	mov	r0, r6
   1d8ca:	f7f3 fb41 	bl	10f50 <gpiote_pin_int_cfg>
		if (res != 0) {
   1d8ce:	2800      	cmp	r0, #0
   1d8d0:	d1f1      	bne.n	1d8b6 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d8d2:	3401      	adds	r4, #1
   1d8d4:	b2e4      	uxtb	r4, r4
   1d8d6:	e7eb      	b.n	1d8b0 <gpio_nrfx_pin_disable_callback+0x1a>

0001d8d8 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1d8d8:	2901      	cmp	r1, #1
{
   1d8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1d8de:	bf18      	it	ne
   1d8e0:	b2d4      	uxtbne	r4, r2
{
   1d8e2:	4606      	mov	r6, r0
		to_pin   = pin;
   1d8e4:	bf12      	itee	ne
   1d8e6:	4625      	movne	r5, r4
		to_pin   = 31U;
   1d8e8:	251f      	moveq	r5, #31
		from_pin = 0U;
   1d8ea:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d8ec:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   1d8f0:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d8f2:	42ac      	cmp	r4, r5
   1d8f4:	d902      	bls.n	1d8fc <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1d8f6:	2000      	movs	r0, #0
}
   1d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1d8fc:	68fb      	ldr	r3, [r7, #12]
   1d8fe:	fa08 f204 	lsl.w	r2, r8, r4
   1d902:	4313      	orrs	r3, r2
   1d904:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1d906:	4621      	mov	r1, r4
   1d908:	4630      	mov	r0, r6
   1d90a:	f7f3 fb21 	bl	10f50 <gpiote_pin_int_cfg>
		if (res != 0) {
   1d90e:	2800      	cmp	r0, #0
   1d910:	d1f2      	bne.n	1d8f8 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1d912:	3401      	adds	r4, #1
   1d914:	b2e4      	uxtb	r4, r4
   1d916:	e7ec      	b.n	1d8f2 <gpio_nrfx_pin_enable_callback+0x1a>

0001d918 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1d918:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   1d91a:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   1d91c:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1d91e:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   1d920:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   1d922:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1d924:	b159      	cbz	r1, 1d93e <uarte_nrfx_isr_int+0x26>
   1d926:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1d92a:	b141      	cbz	r1, 1d93e <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   1d92c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d930:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d934:	2101      	movs	r1, #1
   1d936:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1d938:	2300      	movs	r3, #0
   1d93a:	7393      	strb	r3, [r2, #14]
		return;
   1d93c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d93e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d942:	b111      	cbz	r1, 1d94a <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d944:	2100      	movs	r1, #0
   1d946:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d94a:	6813      	ldr	r3, [r2, #0]
   1d94c:	b10b      	cbz	r3, 1d952 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   1d94e:	6850      	ldr	r0, [r2, #4]
   1d950:	4718      	bx	r3
}
   1d952:	4770      	bx	lr

0001d954 <uarte_nrfx_config_get>:
{
   1d954:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d956:	6882      	ldr	r2, [r0, #8]
   1d958:	e892 0003 	ldmia.w	r2, {r0, r1}
   1d95c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d960:	2000      	movs	r0, #0
   1d962:	4770      	bx	lr

0001d964 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   1d964:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1d966:	689b      	ldr	r3, [r3, #8]
   1d968:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d96a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d96e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d972:	4770      	bx	lr

0001d974 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   1d974:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1d976:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1d978:	689b      	ldr	r3, [r3, #8]
   1d97a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d97c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d980:	b138      	cbz	r0, 1d992 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1d982:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d984:	2000      	movs	r0, #0
   1d986:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d988:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d98a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d98e:	601a      	str	r2, [r3, #0]
	return 0;
   1d990:	4770      	bx	lr
		return -1;
   1d992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d996:	4770      	bx	lr

0001d998 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d998:	2200      	movs	r2, #0
	return dev->config->config_info;
   1d99a:	6803      	ldr	r3, [r0, #0]
{
   1d99c:	b082      	sub	sp, #8
	return config->uarte_regs;
   1d99e:	689b      	ldr	r3, [r3, #8]
{
   1d9a0:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1d9a4:	681b      	ldr	r3, [r3, #0]
   1d9a6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d9aa:	f10d 0207 	add.w	r2, sp, #7
   1d9ae:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d9b2:	2201      	movs	r2, #1
   1d9b4:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d9b8:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d9ba:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d9be:	2900      	cmp	r1, #0
   1d9c0:	d0fb      	beq.n	1d9ba <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d9c2:	60da      	str	r2, [r3, #12]
}
   1d9c4:	b002      	add	sp, #8
   1d9c6:	4770      	bx	lr

0001d9c8 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   1d9c8:	6803      	ldr	r3, [r0, #0]
{
   1d9ca:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1d9cc:	689b      	ldr	r3, [r3, #8]
   1d9ce:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d9d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d9d4:	b1bb      	cbz	r3, 1da06 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d9d6:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   1d9d8:	68ab      	ldr	r3, [r5, #8]
   1d9da:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d9dc:	2300      	movs	r3, #0
   1d9de:	4290      	cmp	r0, r2
   1d9e0:	bfa8      	it	ge
   1d9e2:	4610      	movge	r0, r2
   1d9e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1d9e8:	68aa      	ldr	r2, [r5, #8]
   1d9ea:	4283      	cmp	r3, r0
   1d9ec:	6892      	ldr	r2, [r2, #8]
   1d9ee:	db06      	blt.n	1d9fe <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d9f0:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d9f2:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d9f6:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d9fa:	60a3      	str	r3, [r4, #8]
}
   1d9fc:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d9fe:	5cce      	ldrb	r6, [r1, r3]
   1da00:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1da02:	3301      	adds	r3, #1
   1da04:	e7f0      	b.n	1d9e8 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   1da06:	4618      	mov	r0, r3
   1da08:	e7f8      	b.n	1d9fc <uarte_nrfx_fifo_fill+0x34>

0001da0a <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   1da0a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1da0c:	689b      	ldr	r3, [r3, #8]
   1da0e:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da10:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1da14:	b143      	cbz	r3, 1da28 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1da16:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da18:	2000      	movs	r0, #0
   1da1a:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1da1e:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   1da20:	7b1b      	ldrb	r3, [r3, #12]
   1da22:	700b      	strb	r3, [r1, #0]
   1da24:	6010      	str	r0, [r2, #0]
   1da26:	4770      	bx	lr
	int num_rx = 0;
   1da28:	4618      	mov	r0, r3
}
   1da2a:	4770      	bx	lr

0001da2c <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1da2c:	2100      	movs	r1, #0
	return dev->config->config_info;
   1da2e:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   1da30:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   1da32:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   1da34:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   1da36:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1da38:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1da3a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1da3e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1da42:	4770      	bx	lr

0001da44 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1da44:	2201      	movs	r2, #1
   1da46:	6883      	ldr	r3, [r0, #8]
   1da48:	689b      	ldr	r3, [r3, #8]
   1da4a:	739a      	strb	r2, [r3, #14]
}
   1da4c:	4770      	bx	lr

0001da4e <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   1da4e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1da50:	689b      	ldr	r3, [r3, #8]
   1da52:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da54:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1da58:	b118      	cbz	r0, 1da62 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   1da5a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1da5e:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1da62:	4770      	bx	lr

0001da64 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   1da64:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1da66:	689b      	ldr	r3, [r3, #8]
   1da68:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da6a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1da6e:	3000      	adds	r0, #0
   1da70:	bf18      	it	ne
   1da72:	2001      	movne	r0, #1
   1da74:	4770      	bx	lr

0001da76 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1da76:	2210      	movs	r2, #16
	return dev->config->config_info;
   1da78:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1da7a:	689b      	ldr	r3, [r3, #8]
   1da7c:	681b      	ldr	r3, [r3, #0]
   1da7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1da82:	4770      	bx	lr

0001da84 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1da84:	2210      	movs	r2, #16
	return dev->config->config_info;
   1da86:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1da88:	689b      	ldr	r3, [r3, #8]
   1da8a:	681b      	ldr	r3, [r3, #0]
   1da8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1da90:	4770      	bx	lr

0001da92 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1da92:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1da96:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1da98:	689b      	ldr	r3, [r3, #8]
   1da9a:	681b      	ldr	r3, [r3, #0]
   1da9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1daa0:	4770      	bx	lr

0001daa2 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1daa2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   1daa6:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   1daa8:	689b      	ldr	r3, [r3, #8]
   1daaa:	681b      	ldr	r3, [r3, #0]
   1daac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1dab0:	4770      	bx	lr

0001dab2 <uarte_nrfx_irq_update>:
}
   1dab2:	2001      	movs	r0, #1
   1dab4:	4770      	bx	lr

0001dab6 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1dab6:	6883      	ldr	r3, [r0, #8]
   1dab8:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   1daba:	e9c3 1200 	strd	r1, r2, [r3]
}
   1dabe:	4770      	bx	lr

0001dac0 <uarte_nrfx_irq_is_pending>:
{
   1dac0:	b508      	push	{r3, lr}
	return dev->config->config_info;
   1dac2:	6803      	ldr	r3, [r0, #0]
{
   1dac4:	4602      	mov	r2, r0
	return config->uarte_regs;
   1dac6:	689b      	ldr	r3, [r3, #8]
   1dac8:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1daca:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1dace:	05db      	lsls	r3, r3, #23
   1dad0:	d405      	bmi.n	1dade <uarte_nrfx_irq_is_pending+0x1e>
   1dad2:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1dad6:	f010 0010 	ands.w	r0, r0, #16
   1dada:	d106      	bne.n	1daea <uarte_nrfx_irq_is_pending+0x2a>
}
   1dadc:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1dade:	f7ff ffb6 	bl	1da4e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1dae2:	2800      	cmp	r0, #0
   1dae4:	d0f5      	beq.n	1dad2 <uarte_nrfx_irq_is_pending+0x12>
		||
   1dae6:	2001      	movs	r0, #1
   1dae8:	e7f8      	b.n	1dadc <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   1daea:	4610      	mov	r0, r2
   1daec:	f7ff ffba 	bl	1da64 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1daf0:	3000      	adds	r0, #0
   1daf2:	bf18      	it	ne
   1daf4:	2001      	movne	r0, #1
   1daf6:	e7f1      	b.n	1dadc <uarte_nrfx_irq_is_pending+0x1c>

0001daf8 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1daf8:	2000      	movs	r0, #0
   1dafa:	4770      	bx	lr

0001dafc <entropy_cc310_rng_get_entropy>:
{
   1dafc:	b513      	push	{r0, r1, r4, lr}
   1dafe:	4614      	mov	r4, r2
   1db00:	4608      	mov	r0, r1
	res = spm_request_random_number(buffer, length, &olen);
   1db02:	aa01      	add	r2, sp, #4
   1db04:	4621      	mov	r1, r4
   1db06:	f7ea fa73 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1db0a:	9b01      	ldr	r3, [sp, #4]
   1db0c:	429c      	cmp	r4, r3
}
   1db0e:	bf18      	it	ne
   1db10:	f06f 0015 	mvnne.w	r0, #21
   1db14:	b002      	add	sp, #8
   1db16:	bd10      	pop	{r4, pc}

0001db18 <z_errno>:
   1db18:	f7fd b904 	b.w	1ad24 <z_impl_z_errno>

0001db1c <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1db1c:	4668      	mov	r0, sp
   1db1e:	f020 0107 	bic.w	r1, r0, #7
   1db22:	468d      	mov	sp, r1
   1db24:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1db26:	f7f7 f815 	bl	14b54 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1db2a:	f7f1 fdbb 	bl	f6a4 <_arch_isr_direct_pm>
   1db2e:	f7f1 fcfb 	bl	f528 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1db32:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1db36:	4685      	mov	sp, r0
   1db38:	4770      	bx	lr

0001db3a <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1db3a:	4668      	mov	r0, sp
   1db3c:	f020 0107 	bic.w	r1, r0, #7
   1db40:	468d      	mov	sp, r1
   1db42:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1db44:	f7f7 fc0a 	bl	1535c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1db48:	f7f1 fdac 	bl	f6a4 <_arch_isr_direct_pm>
   1db4c:	f7f1 fcec 	bl	f528 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1db50:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1db54:	4685      	mov	sp, r0
   1db56:	4770      	bx	lr

0001db58 <trace_task_create>:
{
   1db58:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1db5a:	201d      	movs	r0, #29
   1db5c:	2200      	movs	r2, #0
   1db5e:	2106      	movs	r1, #6
   1db60:	f7f1 fd88 	bl	f674 <z_arm_irq_priority_set>
}
   1db64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1db68:	201d      	movs	r0, #29
   1db6a:	f7f1 bd73 	b.w	f654 <arch_irq_enable>

0001db6e <read_task_create>:
{
   1db6e:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1db70:	201c      	movs	r0, #28
   1db72:	2200      	movs	r2, #0
   1db74:	2106      	movs	r1, #6
   1db76:	f7f1 fd7d 	bl	f674 <z_arm_irq_priority_set>
}
   1db7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1db7e:	201c      	movs	r0, #28
   1db80:	f7f1 bd68 	b.w	f654 <arch_irq_enable>

0001db84 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   1db84:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1db88:	bf18      	it	ne
   1db8a:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   1db8c:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   1db8e:	bf48      	it	mi
   1db90:	f043 0308 	orrmi.w	r3, r3, #8
}
   1db94:	4618      	mov	r0, r3
   1db96:	4770      	bx	lr

0001db98 <z_to_nrf_family>:
	switch (z_family) {
   1db98:	2803      	cmp	r0, #3
   1db9a:	d00f      	beq.n	1dbbc <z_to_nrf_family+0x24>
   1db9c:	d808      	bhi.n	1dbb0 <z_to_nrf_family+0x18>
   1db9e:	2801      	cmp	r0, #1
   1dba0:	d00e      	beq.n	1dbc0 <z_to_nrf_family+0x28>
   1dba2:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   1dba4:	bf08      	it	eq
   1dba6:	200a      	moveq	r0, #10
   1dba8:	bf18      	it	ne
   1dbaa:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1dbae:	4770      	bx	lr
	switch (z_family) {
   1dbb0:	2866      	cmp	r0, #102	; 0x66
   1dbb2:	d006      	beq.n	1dbc2 <z_to_nrf_family+0x2a>
   1dbb4:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   1dbb6:	bf08      	it	eq
   1dbb8:	2001      	moveq	r0, #1
   1dbba:	e7f5      	b.n	1dba8 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   1dbbc:	2005      	movs	r0, #5
   1dbbe:	4770      	bx	lr
		return NRF_AF_INET;
   1dbc0:	2002      	movs	r0, #2
}
   1dbc2:	4770      	bx	lr

0001dbc4 <z_to_nrf_protocol>:
	switch (proto) {
   1dbc4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1dbc8:	d01d      	beq.n	1dc06 <z_to_nrf_protocol+0x42>
   1dbca:	dc08      	bgt.n	1dbde <z_to_nrf_protocol+0x1a>
   1dbcc:	2806      	cmp	r0, #6
   1dbce:	d01d      	beq.n	1dc0c <z_to_nrf_protocol+0x48>
   1dbd0:	2811      	cmp	r0, #17
   1dbd2:	d01d      	beq.n	1dc10 <z_to_nrf_protocol+0x4c>
   1dbd4:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   1dbd6:	bf18      	it	ne
   1dbd8:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1dbdc:	4770      	bx	lr
	switch (proto) {
   1dbde:	f240 2301 	movw	r3, #513	; 0x201
   1dbe2:	4298      	cmp	r0, r3
   1dbe4:	d015      	beq.n	1dc12 <z_to_nrf_protocol+0x4e>
   1dbe6:	dc06      	bgt.n	1dbf6 <z_to_nrf_protocol+0x32>
   1dbe8:	f240 1311 	movw	r3, #273	; 0x111
   1dbec:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   1dbee:	bf08      	it	eq
   1dbf0:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   1dbf4:	e7ef      	b.n	1dbd6 <z_to_nrf_protocol+0x12>
	switch (proto) {
   1dbf6:	f240 2302 	movw	r3, #514	; 0x202
   1dbfa:	4298      	cmp	r0, r3
   1dbfc:	d009      	beq.n	1dc12 <z_to_nrf_protocol+0x4e>
   1dbfe:	f240 2303 	movw	r3, #515	; 0x203
   1dc02:	4298      	cmp	r0, r3
   1dc04:	e7e7      	b.n	1dbd6 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   1dc06:	f44f 7082 	mov.w	r0, #260	; 0x104
   1dc0a:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   1dc0c:	2001      	movs	r0, #1
   1dc0e:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   1dc10:	2002      	movs	r0, #2
}
   1dc12:	4770      	bx	lr

0001dc14 <nrf91_bsdlib_socket_offload_init>:
}
   1dc14:	2000      	movs	r0, #0
   1dc16:	4770      	bx	lr

0001dc18 <z_errno>:
   1dc18:	f7fd b884 	b.w	1ad24 <z_impl_z_errno>

0001dc1c <nrf91_socket_offload_freeaddrinfo>:
{
   1dc1c:	b538      	push	{r3, r4, r5, lr}
   1dc1e:	4604      	mov	r4, r0
	while (next != NULL) {
   1dc20:	b904      	cbnz	r4, 1dc24 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1dc22:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1dc24:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   1dc26:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   1dc28:	f000 fd35 	bl	1e696 <k_free>
		k_free(this);
   1dc2c:	4620      	mov	r0, r4
   1dc2e:	f000 fd32 	bl	1e696 <k_free>
		next = next->ai_next;
   1dc32:	462c      	mov	r4, r5
   1dc34:	e7f4      	b.n	1dc20 <nrf91_socket_offload_freeaddrinfo+0x4>

0001dc36 <z_to_nrf_addrinfo_hints>:
{
   1dc36:	b538      	push	{r3, r4, r5, lr}
   1dc38:	460c      	mov	r4, r1
   1dc3a:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1dc3c:	2220      	movs	r2, #32
   1dc3e:	2100      	movs	r1, #0
   1dc40:	4620      	mov	r0, r4
   1dc42:	f7ff fc00 	bl	1d446 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1dc46:	2300      	movs	r3, #0
   1dc48:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1dc4a:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   1dc4c:	2b03      	cmp	r3, #3
   1dc4e:	d003      	beq.n	1dc58 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   1dc50:	2b04      	cmp	r3, #4
   1dc52:	bf08      	it	eq
   1dc54:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1dc58:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1dc5a:	88a8      	ldrh	r0, [r5, #4]
   1dc5c:	f7ff ff9c 	bl	1db98 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1dc60:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1dc64:	d00b      	beq.n	1dc7e <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1dc66:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1dc68:	68e8      	ldr	r0, [r5, #12]
   1dc6a:	f7ff ffab 	bl	1dbc4 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1dc6e:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1dc72:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1dc74:	d003      	beq.n	1dc7e <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1dc76:	69a8      	ldr	r0, [r5, #24]
   1dc78:	b108      	cbz	r0, 1dc7e <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1dc7a:	61a0      	str	r0, [r4, #24]
	return 0;
   1dc7c:	2000      	movs	r0, #0
}
   1dc7e:	bd38      	pop	{r3, r4, r5, pc}

0001dc80 <nrf91_socket_offload_send>:
{
   1dc80:	b570      	push	{r4, r5, r6, lr}
   1dc82:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1dc84:	4618      	mov	r0, r3
{
   1dc86:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1dc88:	f7ff ff7c 	bl	1db84 <z_to_nrf_flags>
   1dc8c:	462a      	mov	r2, r5
   1dc8e:	4603      	mov	r3, r0
   1dc90:	4620      	mov	r0, r4
}
   1dc92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   1dc96:	f7f9 b985 	b.w	16fa4 <nrf_send>

0001dc9a <nrf91_socket_offload_recv>:
{
   1dc9a:	b570      	push	{r4, r5, r6, lr}
   1dc9c:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1dc9e:	4618      	mov	r0, r3
{
   1dca0:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1dca2:	f7ff ff6f 	bl	1db84 <z_to_nrf_flags>
   1dca6:	462a      	mov	r2, r5
   1dca8:	4603      	mov	r3, r0
   1dcaa:	4620      	mov	r0, r4
}
   1dcac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   1dcb0:	f7f9 b9ae 	b.w	17010 <nrf_recv>

0001dcb4 <nrf91_socket_offload_getsockopt>:
{
   1dcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dcb8:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1dcba:	2300      	movs	r3, #0
{
   1dcbc:	b086      	sub	sp, #24
   1dcbe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   1dcc2:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1dcc6:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   1dcca:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1dcce:	4607      	mov	r7, r0
   1dcd0:	460c      	mov	r4, r1
   1dcd2:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1dcd4:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1dcd6:	d002      	beq.n	1dcde <nrf91_socket_offload_getsockopt+0x2a>
   1dcd8:	dc2b      	bgt.n	1dd32 <nrf91_socket_offload_getsockopt+0x7e>
   1dcda:	2901      	cmp	r1, #1
   1dcdc:	d13d      	bne.n	1dd5a <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1dcde:	aa02      	add	r2, sp, #8
   1dce0:	4631      	mov	r1, r6
   1dce2:	4620      	mov	r0, r4
   1dce4:	f7f3 fe52 	bl	1198c <z_to_nrf_optname>
   1dce8:	2800      	cmp	r0, #0
   1dcea:	db36      	blt.n	1dd5a <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1dcec:	2c01      	cmp	r4, #1
   1dcee:	d128      	bne.n	1dd42 <nrf91_socket_offload_getsockopt+0x8e>
   1dcf0:	2e14      	cmp	r6, #20
   1dcf2:	d126      	bne.n	1dd42 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1dcf4:	2308      	movs	r3, #8
   1dcf6:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   1dcf8:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1dcfa:	aa03      	add	r2, sp, #12
   1dcfc:	9200      	str	r2, [sp, #0]
   1dcfe:	4638      	mov	r0, r7
   1dd00:	9a02      	ldr	r2, [sp, #8]
   1dd02:	4621      	mov	r1, r4
   1dd04:	f7f9 fa04 	bl	17110 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1dd08:	4607      	mov	r7, r0
   1dd0a:	b970      	cbnz	r0, 1dd2a <nrf91_socket_offload_getsockopt+0x76>
   1dd0c:	b16d      	cbz	r5, 1dd2a <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   1dd0e:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1dd10:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1dd12:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1dd16:	d108      	bne.n	1dd2a <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   1dd18:	2e04      	cmp	r6, #4
   1dd1a:	d114      	bne.n	1dd46 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   1dd1c:	6828      	ldr	r0, [r5, #0]
   1dd1e:	f7f3 fd19 	bl	11754 <bsd_os_errno_set>
				*(int *)optval = errno;
   1dd22:	f7ff ff79 	bl	1dc18 <z_errno>
   1dd26:	6803      	ldr	r3, [r0, #0]
   1dd28:	602b      	str	r3, [r5, #0]
}
   1dd2a:	4638      	mov	r0, r7
   1dd2c:	b006      	add	sp, #24
   1dd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1dd32:	f240 2302 	movw	r3, #514	; 0x202
   1dd36:	4299      	cmp	r1, r3
   1dd38:	d0d1      	beq.n	1dcde <nrf91_socket_offload_getsockopt+0x2a>
   1dd3a:	f240 2303 	movw	r3, #515	; 0x203
   1dd3e:	4299      	cmp	r1, r3
   1dd40:	e7cc      	b.n	1dcdc <nrf91_socket_offload_getsockopt+0x28>
   1dd42:	462b      	mov	r3, r5
   1dd44:	e7d9      	b.n	1dcfa <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   1dd46:	2e14      	cmp	r6, #20
   1dd48:	d1ef      	bne.n	1dd2a <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   1dd4a:	9b04      	ldr	r3, [sp, #16]
   1dd4c:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1dd4e:	9b05      	ldr	r3, [sp, #20]
   1dd50:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1dd52:	2308      	movs	r3, #8
   1dd54:	f8c8 3000 	str.w	r3, [r8]
   1dd58:	e7e7      	b.n	1dd2a <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   1dd5a:	f7ff ff5d 	bl	1dc18 <z_errno>
   1dd5e:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1dd60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   1dd64:	6003      	str	r3, [r0, #0]
	return retval;
   1dd66:	e7e0      	b.n	1dd2a <nrf91_socket_offload_getsockopt+0x76>

0001dd68 <nrf91_socket_offload_poll>:
{
   1dd68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd6a:	b091      	sub	sp, #68	; 0x44
   1dd6c:	4605      	mov	r5, r0
   1dd6e:	460c      	mov	r4, r1
   1dd70:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   1dd72:	2100      	movs	r1, #0
   1dd74:	2240      	movs	r2, #64	; 0x40
   1dd76:	4668      	mov	r0, sp
   1dd78:	f7ff fb65 	bl	1d446 <memset>
	for (int i = 0; i < nfds; i++) {
   1dd7c:	466a      	mov	r2, sp
   1dd7e:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   1dd80:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   1dd82:	42a1      	cmp	r1, r4
   1dd84:	db0c      	blt.n	1dda0 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1dd86:	4632      	mov	r2, r6
   1dd88:	4621      	mov	r1, r4
   1dd8a:	4668      	mov	r0, sp
   1dd8c:	f7f9 f9e0 	bl	17150 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1dd90:	2200      	movs	r2, #0
   1dd92:	462b      	mov	r3, r5
		fds[i].revents = 0;
   1dd94:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   1dd96:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   1dd98:	42a2      	cmp	r2, r4
   1dd9a:	db1a      	blt.n	1ddd2 <nrf91_socket_offload_poll+0x6a>
}
   1dd9c:	b011      	add	sp, #68	; 0x44
   1dd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   1dda0:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   1dda4:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   1dda8:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   1ddaa:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   1ddac:	bf48      	it	mi
   1ddae:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   1ddb0:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   1ddb4:	bf44      	itt	mi
   1ddb6:	f043 0301 	orrmi.w	r3, r3, #1
   1ddba:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   1ddbc:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   1ddbe:	bf48      	it	mi
   1ddc0:	8893      	ldrhmi	r3, [r2, #4]
   1ddc2:	f102 0208 	add.w	r2, r2, #8
   1ddc6:	bf44      	itt	mi
   1ddc8:	f043 0302 	orrmi.w	r3, r3, #2
   1ddcc:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   1ddd0:	e7d7      	b.n	1dd82 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   1ddd2:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   1ddd6:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   1ddd8:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   1ddda:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   1dddc:	bf48      	it	mi
   1ddde:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   1dde0:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   1dde2:	bf48      	it	mi
   1dde4:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   1dde6:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   1ddea:	bf44      	itt	mi
   1ddec:	f045 0504 	orrmi.w	r5, r5, #4
   1ddf0:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   1ddf2:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   1ddf4:	bf48      	it	mi
   1ddf6:	88dd      	ldrhmi	r5, [r3, #6]
   1ddf8:	f103 0308 	add.w	r3, r3, #8
   1ddfc:	bf44      	itt	mi
   1ddfe:	f045 0508 	orrmi.w	r5, r5, #8
   1de02:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   1de06:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   1de08:	bf42      	ittt	mi
   1de0a:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   1de0e:	f045 0520 	orrmi.w	r5, r5, #32
   1de12:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   1de16:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   1de18:	bf42      	ittt	mi
   1de1a:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   1de1e:	f041 0110 	orrmi.w	r1, r1, #16
   1de22:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   1de26:	e7b7      	b.n	1dd98 <nrf91_socket_offload_poll+0x30>

0001de28 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1de28:	f7f9 b91e 	b.w	17068 <nrf_listen>

0001de2c <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1de2c:	f7f9 b890 	b.w	16f50 <nrf_close>

0001de30 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   1de30:	2903      	cmp	r1, #3
{
   1de32:	b508      	push	{r3, lr}
	switch (cmd) {
   1de34:	d00b      	beq.n	1de4e <nrf91_socket_offload_fcntl+0x1e>
   1de36:	2904      	cmp	r1, #4
   1de38:	d111      	bne.n	1de5e <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   1de3a:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1de3c:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1de40:	d10d      	bne.n	1de5e <nrf91_socket_offload_fcntl+0x2e>
}
   1de42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1de46:	1392      	asrs	r2, r2, #14
   1de48:	2101      	movs	r1, #1
   1de4a:	f7f9 b983 	b.w	17154 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1de4e:	2200      	movs	r2, #0
   1de50:	2102      	movs	r1, #2
   1de52:	f7f9 f97f 	bl	17154 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1de56:	0380      	lsls	r0, r0, #14
   1de58:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   1de5c:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   1de5e:	f7ff fedb 	bl	1dc18 <z_errno>
   1de62:	2316      	movs	r3, #22
   1de64:	6003      	str	r3, [r0, #0]
	return retval;
   1de66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de6a:	e7f7      	b.n	1de5c <nrf91_socket_offload_fcntl+0x2c>

0001de6c <nrf91_socket_offload_recvfrom>:
{
   1de6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de6e:	4605      	mov	r5, r0
   1de70:	b08d      	sub	sp, #52	; 0x34
   1de72:	4618      	mov	r0, r3
   1de74:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1de78:	4617      	mov	r7, r2
	if (from == NULL) {
   1de7a:	f7ff fe83 	bl	1db84 <z_to_nrf_flags>
   1de7e:	4603      	mov	r3, r0
   1de80:	b94c      	cbnz	r4, 1de96 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1de82:	4628      	mov	r0, r5
   1de84:	e9cd 4400 	strd	r4, r4, [sp]
   1de88:	463a      	mov	r2, r7
   1de8a:	f7f9 f8a5 	bl	16fd8 <nrf_recvfrom>
   1de8e:	4605      	mov	r5, r0
}
   1de90:	4628      	mov	r0, r5
   1de92:	b00d      	add	sp, #52	; 0x34
   1de94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1de96:	2224      	movs	r2, #36	; 0x24
   1de98:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1de9a:	aa02      	add	r2, sp, #8
   1de9c:	9201      	str	r2, [sp, #4]
   1de9e:	aa03      	add	r2, sp, #12
   1dea0:	9200      	str	r2, [sp, #0]
   1dea2:	4628      	mov	r0, r5
   1dea4:	463a      	mov	r2, r7
   1dea6:	f7f9 f897 	bl	16fd8 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1deaa:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1deac:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1deae:	2b02      	cmp	r3, #2
   1deb0:	d109      	bne.n	1dec6 <nrf91_socket_offload_recvfrom+0x5a>
	ptr->sin_port = nrf_in->sin_port;
   1deb2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1deb6:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1deb8:	2301      	movs	r3, #1
   1deba:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1debc:	9b06      	ldr	r3, [sp, #24]
   1debe:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1dec0:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1dec2:	6033      	str	r3, [r6, #0]
	return retval;
   1dec4:	e7e4      	b.n	1de90 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1dec6:	2b0a      	cmp	r3, #10
   1dec8:	d1e2      	bne.n	1de90 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1deca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   1dece:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1ded0:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1ded2:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1ded4:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1ded6:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1deda:	a907      	add	r1, sp, #28
   1dedc:	f7ff fa89 	bl	1d3f2 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1dee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1dee2:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1dee4:	2318      	movs	r3, #24
   1dee6:	e7ec      	b.n	1dec2 <nrf91_socket_offload_recvfrom+0x56>

0001dee8 <nrf91_socket_offload_connect>:
{
   1dee8:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1deea:	880b      	ldrh	r3, [r1, #0]
{
   1deec:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1deee:	2b01      	cmp	r3, #1
{
   1def0:	4606      	mov	r6, r0
   1def2:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1def4:	d10e      	bne.n	1df14 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1def6:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1def8:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1defa:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1defe:	2302      	movs	r3, #2
   1df00:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1df02:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1df04:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1df08:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   1df0a:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1df0c:	f7f9 f89a 	bl	17044 <nrf_connect>
}
   1df10:	b00a      	add	sp, #40	; 0x28
   1df12:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1df14:	2b02      	cmp	r3, #2
   1df16:	d112      	bne.n	1df3e <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1df18:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1df1a:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1df1c:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1df20:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1df22:	2210      	movs	r2, #16
   1df24:	3104      	adds	r1, #4
   1df26:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1df28:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1df2a:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1df2e:	f7ff fa60 	bl	1d3f2 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1df32:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1df34:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1df36:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1df38:	a901      	add	r1, sp, #4
   1df3a:	4630      	mov	r0, r6
   1df3c:	e7e6      	b.n	1df0c <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1df3e:	f7f9 f881 	bl	17044 <nrf_connect>
		if (retval < 0) {
   1df42:	2800      	cmp	r0, #0
   1df44:	dae4      	bge.n	1df10 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   1df46:	f7ff fe67 	bl	1dc18 <z_errno>
   1df4a:	2323      	movs	r3, #35	; 0x23
   1df4c:	6003      	str	r3, [r0, #0]
   1df4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df52:	e7dd      	b.n	1df10 <nrf91_socket_offload_connect+0x28>

0001df54 <nrf91_socket_offload_socket>:
{
   1df54:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   1df56:	b280      	uxth	r0, r0
   1df58:	f7ff fe1e 	bl	1db98 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1df5c:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   1df60:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   1df62:	d106      	bne.n	1df72 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   1df64:	f7ff fe58 	bl	1dc18 <z_errno>
   1df68:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   1df6a:	6003      	str	r3, [r0, #0]
}
   1df6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df70:	bd10      	pop	{r4, pc}
	switch (socktype) {
   1df72:	2903      	cmp	r1, #3
   1df74:	d003      	beq.n	1df7e <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   1df76:	2904      	cmp	r1, #4
   1df78:	bf08      	it	eq
   1df7a:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   1df7e:	4610      	mov	r0, r2
   1df80:	f7ff fe20 	bl	1dbc4 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1df84:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   1df88:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1df8a:	d103      	bne.n	1df94 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   1df8c:	f7ff fe44 	bl	1dc18 <z_errno>
   1df90:	232b      	movs	r3, #43	; 0x2b
   1df92:	e7ea      	b.n	1df6a <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   1df94:	4620      	mov	r0, r4
}
   1df96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   1df9a:	f7f8 bfc7 	b.w	16f2c <nrf_socket>

0001df9e <nrf91_socket_offload_accept>:
{
   1df9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1dfa0:	2708      	movs	r7, #8
{
   1dfa2:	b085      	sub	sp, #20
   1dfa4:	460c      	mov	r4, r1
   1dfa6:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1dfa8:	eb0d 0107 	add.w	r1, sp, r7
   1dfac:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   1dfae:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   1dfb0:	f7f9 f86a 	bl	17088 <nrf_accept>
	if (retval < 0) {
   1dfb4:	1e05      	subs	r5, r0, #0
   1dfb6:	db23      	blt.n	1e000 <nrf91_socket_offload_accept+0x62>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   1dfb8:	9b03      	ldr	r3, [sp, #12]
   1dfba:	2b02      	cmp	r3, #2
   1dfbc:	d10a      	bne.n	1dfd4 <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   1dfbe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   1dfc2:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   1dfc4:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1dfc6:	2301      	movs	r3, #1
   1dfc8:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1dfca:	9b05      	ldr	r3, [sp, #20]
   1dfcc:	6063      	str	r3, [r4, #4]
}
   1dfce:	4628      	mov	r0, r5
   1dfd0:	b005      	add	sp, #20
   1dfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   1dfd4:	2b0a      	cmp	r3, #10
   1dfd6:	d10f      	bne.n	1dff8 <nrf91_socket_offload_accept+0x5a>
		*addrlen = sizeof(struct sockaddr_in6);
   1dfd8:	2318      	movs	r3, #24
   1dfda:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   1dfdc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	ptr->sin6_family = AF_INET6;
   1dfe0:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1dfe2:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1dfe4:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dfe6:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1dfe8:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1dfec:	a906      	add	r1, sp, #24
   1dfee:	f7ff fa00 	bl	1d3f2 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1dff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dff4:	7523      	strb	r3, [r4, #20]
   1dff6:	e7ea      	b.n	1dfce <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   1dff8:	f7ff fe0e 	bl	1dc18 <z_errno>
   1dffc:	2323      	movs	r3, #35	; 0x23
   1dffe:	6003      	str	r3, [r0, #0]
		return -1;
   1e000:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e004:	e7e3      	b.n	1dfce <nrf91_socket_offload_accept+0x30>

0001e006 <nrf91_socket_offload_getaddrinfo>:
{
   1e006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e00a:	4614      	mov	r4, r2
   1e00c:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1e00e:	2100      	movs	r1, #0
{
   1e010:	b093      	sub	sp, #76	; 0x4c
   1e012:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e014:	2220      	movs	r2, #32
   1e016:	a802      	add	r0, sp, #8
{
   1e018:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1e01a:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1e01c:	f7ff fa13 	bl	1d446 <memset>
	if (hints != NULL) {
   1e020:	b194      	cbz	r4, 1e048 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1e022:	a902      	add	r1, sp, #8
   1e024:	4620      	mov	r0, r4
   1e026:	f7ff fe06 	bl	1dc36 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1e02a:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1e02e:	f000 80bf 	beq.w	1e1b0 <nrf91_socket_offload_getaddrinfo+0x1aa>
		} else if (error == -EAFNOSUPPORT) {
   1e032:	302f      	adds	r0, #47	; 0x2f
   1e034:	f000 80bf 	beq.w	1e1b6 <nrf91_socket_offload_getaddrinfo+0x1b0>
		if (hints->ai_next != NULL) {
   1e038:	69e0      	ldr	r0, [r4, #28]
   1e03a:	b120      	cbz	r0, 1e046 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1e03c:	ac0a      	add	r4, sp, #40	; 0x28
   1e03e:	4621      	mov	r1, r4
   1e040:	f7ff fdf9 	bl	1dc36 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1e044:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1e046:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1e048:	4631      	mov	r1, r6
   1e04a:	4628      	mov	r0, r5
   1e04c:	ab01      	add	r3, sp, #4
   1e04e:	4622      	mov	r2, r4
   1e050:	f7f9 f87a 	bl	17148 <nrf_getaddrinfo>
	*res = NULL;
   1e054:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1e056:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1e058:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   1e05c:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e060:	4605      	mov	r5, r0
   1e062:	2800      	cmp	r0, #0
   1e064:	d04a      	beq.n	1e0fc <nrf91_socket_offload_getaddrinfo+0xf6>
		nrf91_socket_offload_freeaddrinfo(*res);
   1e066:	f8d8 0000 	ldr.w	r0, [r8]
   1e06a:	f7ff fdd7 	bl	1dc1c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1e06e:	2300      	movs	r3, #0
   1e070:	f8c8 3000 	str.w	r3, [r8]
   1e074:	e044      	b.n	1e100 <nrf91_socket_offload_getaddrinfo+0xfa>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   1e076:	2020      	movs	r0, #32
   1e078:	f7fd f8a2 	bl	1b1c0 <k_malloc>
		if (next_z_res == NULL) {
   1e07c:	4604      	mov	r4, r0
   1e07e:	2800      	cmp	r0, #0
   1e080:	f000 8091 	beq.w	1e1a6 <nrf91_socket_offload_getaddrinfo+0x1a0>
	family = nrf_to_z_family(nrf_in->ai_family);
   1e084:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e086:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   1e088:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1e08a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1e08e:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1e090:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   1e092:	d03c      	beq.n	1e10e <nrf91_socket_offload_getaddrinfo+0x108>
   1e094:	dc09      	bgt.n	1e0aa <nrf91_socket_offload_getaddrinfo+0xa4>
   1e096:	2a01      	cmp	r2, #1
   1e098:	d03b      	beq.n	1e112 <nrf91_socket_offload_getaddrinfo+0x10c>
   1e09a:	2a02      	cmp	r2, #2
   1e09c:	d03b      	beq.n	1e116 <nrf91_socket_offload_getaddrinfo+0x110>
			k_free(next_z_res);
   1e09e:	4620      	mov	r0, r4
   1e0a0:	f000 faf9 	bl	1e696 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1e0a4:	f06f 0508 	mvn.w	r5, #8
   1e0a8:	e7dd      	b.n	1e066 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (nrf_family) {
   1e0aa:	2a0a      	cmp	r2, #10
   1e0ac:	d035      	beq.n	1e11a <nrf91_socket_offload_getaddrinfo+0x114>
   1e0ae:	2a66      	cmp	r2, #102	; 0x66
   1e0b0:	d1f5      	bne.n	1e09e <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   1e0b2:	4613      	mov	r3, r2
	z_out->ai_family = family;
   1e0b4:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e0b6:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1e0b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1e0bc:	d04e      	beq.n	1e15c <nrf91_socket_offload_getaddrinfo+0x156>
   1e0be:	dc2e      	bgt.n	1e11e <nrf91_socket_offload_getaddrinfo+0x118>
   1e0c0:	2b01      	cmp	r3, #1
   1e0c2:	d050      	beq.n	1e166 <nrf91_socket_offload_getaddrinfo+0x160>
   1e0c4:	2b02      	cmp	r3, #2
   1e0c6:	d04c      	beq.n	1e162 <nrf91_socket_offload_getaddrinfo+0x15c>
   1e0c8:	2b00      	cmp	r3, #0
   1e0ca:	d130      	bne.n	1e12e <nrf91_socket_offload_getaddrinfo+0x128>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e0cc:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e0ce:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1e0d0:	d14b      	bne.n	1e16a <nrf91_socket_offload_getaddrinfo+0x164>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1e0d2:	2008      	movs	r0, #8
   1e0d4:	f7fd f874 	bl	1b1c0 <k_malloc>
   1e0d8:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e0da:	2800      	cmp	r0, #0
   1e0dc:	d060      	beq.n	1e1a0 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1e0de:	2308      	movs	r3, #8
   1e0e0:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1e0e2:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1e0e4:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e0e6:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1e0e8:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1e0ea:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1e0ec:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1e0ee:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1e0f0:	2f00      	cmp	r7, #0
   1e0f2:	d15b      	bne.n	1e1ac <nrf91_socket_offload_getaddrinfo+0x1a6>
			*res = next_z_res;
   1e0f4:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1e0f8:	4627      	mov	r7, r4
   1e0fa:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1e0fc:	2e00      	cmp	r6, #0
   1e0fe:	d1ba      	bne.n	1e076 <nrf91_socket_offload_getaddrinfo+0x70>
	nrf_freeaddrinfo(nrf_res);
   1e100:	9801      	ldr	r0, [sp, #4]
   1e102:	f7f9 f823 	bl	1714c <nrf_freeaddrinfo>
}
   1e106:	4628      	mov	r0, r5
   1e108:	b013      	add	sp, #76	; 0x4c
   1e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return AF_PACKET;
   1e10e:	2303      	movs	r3, #3
   1e110:	e7d0      	b.n	1e0b4 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_LOCAL;
   1e112:	2367      	movs	r3, #103	; 0x67
   1e114:	e7ce      	b.n	1e0b4 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET;
   1e116:	2301      	movs	r3, #1
   1e118:	e7cc      	b.n	1e0b4 <nrf91_socket_offload_getaddrinfo+0xae>
		return AF_INET6;
   1e11a:	2302      	movs	r3, #2
   1e11c:	e7ca      	b.n	1e0b4 <nrf91_socket_offload_getaddrinfo+0xae>
	switch (proto) {
   1e11e:	f240 2101 	movw	r1, #513	; 0x201
   1e122:	428b      	cmp	r3, r1
   1e124:	d0d2      	beq.n	1e0cc <nrf91_socket_offload_getaddrinfo+0xc6>
   1e126:	dc0d      	bgt.n	1e144 <nrf91_socket_offload_getaddrinfo+0x13e>
   1e128:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1e12c:	d013      	beq.n	1e156 <nrf91_socket_offload_getaddrinfo+0x150>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e12e:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1e132:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   1e134:	2300      	movs	r3, #0
   1e136:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   1e138:	4620      	mov	r0, r4
   1e13a:	f000 faac 	bl	1e696 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1e13e:	f06f 0506 	mvn.w	r5, #6
   1e142:	e790      	b.n	1e066 <nrf91_socket_offload_getaddrinfo+0x60>
	switch (proto) {
   1e144:	f240 2102 	movw	r1, #514	; 0x202
   1e148:	428b      	cmp	r3, r1
   1e14a:	d0bf      	beq.n	1e0cc <nrf91_socket_offload_getaddrinfo+0xc6>
   1e14c:	f240 2103 	movw	r1, #515	; 0x203
   1e150:	428b      	cmp	r3, r1
   1e152:	d0bb      	beq.n	1e0cc <nrf91_socket_offload_getaddrinfo+0xc6>
   1e154:	e7eb      	b.n	1e12e <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1e156:	f240 1311 	movw	r3, #273	; 0x111
   1e15a:	e7b7      	b.n	1e0cc <nrf91_socket_offload_getaddrinfo+0xc6>
   1e15c:	f44f 7381 	mov.w	r3, #258	; 0x102
   1e160:	e7b4      	b.n	1e0cc <nrf91_socket_offload_getaddrinfo+0xc6>
   1e162:	2311      	movs	r3, #17
   1e164:	e7b2      	b.n	1e0cc <nrf91_socket_offload_getaddrinfo+0xc6>
   1e166:	2306      	movs	r3, #6
   1e168:	e7b0      	b.n	1e0cc <nrf91_socket_offload_getaddrinfo+0xc6>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1e16a:	2a0a      	cmp	r2, #10
   1e16c:	d1e4      	bne.n	1e138 <nrf91_socket_offload_getaddrinfo+0x132>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1e16e:	2018      	movs	r0, #24
   1e170:	f7fd f826 	bl	1b1c0 <k_malloc>
   1e174:	4682      	mov	sl, r0
   1e176:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   1e178:	b190      	cbz	r0, 1e1a0 <nrf91_socket_offload_getaddrinfo+0x19a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e17a:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e17c:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1e17e:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1e182:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   1e184:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e188:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   1e18c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1e18e:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1e192:	f7ff f92e 	bl	1d3f2 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   1e196:	f8db 3020 	ldr.w	r3, [fp, #32]
   1e19a:	f88a 3014 	strb.w	r3, [sl, #20]
		} else if (error == -EAFNOSUPPORT) {
   1e19e:	e7a7      	b.n	1e0f0 <nrf91_socket_offload_getaddrinfo+0xea>
			k_free(next_z_res);
   1e1a0:	4620      	mov	r0, r4
   1e1a2:	f000 fa78 	bl	1e696 <k_free>
			retval = DNS_EAI_MEMORY;
   1e1a6:	f06f 0509 	mvn.w	r5, #9
   1e1aa:	e75c      	b.n	1e066 <nrf91_socket_offload_getaddrinfo+0x60>
			latest_z_res->ai_next = next_z_res;
   1e1ac:	61fc      	str	r4, [r7, #28]
   1e1ae:	e7a3      	b.n	1e0f8 <nrf91_socket_offload_getaddrinfo+0xf2>
			return DNS_EAI_SOCKTYPE;
   1e1b0:	f06f 0506 	mvn.w	r5, #6
   1e1b4:	e7a7      	b.n	1e106 <nrf91_socket_offload_getaddrinfo+0x100>
			return DNS_EAI_ADDRFAMILY;
   1e1b6:	f06f 0508 	mvn.w	r5, #8
   1e1ba:	e7a4      	b.n	1e106 <nrf91_socket_offload_getaddrinfo+0x100>

0001e1bc <nrf91_socket_offload_setsockopt>:
{
   1e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   1e1c0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   1e1c4:	b086      	sub	sp, #24
   1e1c6:	4680      	mov	r8, r0
   1e1c8:	460c      	mov	r4, r1
   1e1ca:	4617      	mov	r7, r2
   1e1cc:	461d      	mov	r5, r3
   1e1ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   1e1d0:	d002      	beq.n	1e1d8 <nrf91_socket_offload_setsockopt+0x1c>
   1e1d2:	dc1c      	bgt.n	1e20e <nrf91_socket_offload_setsockopt+0x52>
   1e1d4:	2901      	cmp	r1, #1
   1e1d6:	d122      	bne.n	1e21e <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1e1d8:	aa03      	add	r2, sp, #12
   1e1da:	4639      	mov	r1, r7
   1e1dc:	4620      	mov	r0, r4
   1e1de:	f7f3 fbd5 	bl	1198c <z_to_nrf_optname>
   1e1e2:	2800      	cmp	r0, #0
   1e1e4:	db1b      	blt.n	1e21e <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   1e1e6:	2c01      	cmp	r4, #1
   1e1e8:	d107      	bne.n	1e1fa <nrf91_socket_offload_setsockopt+0x3e>
   1e1ea:	2f14      	cmp	r7, #20
   1e1ec:	d105      	bne.n	1e1fa <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   1e1ee:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1e1f0:	682b      	ldr	r3, [r5, #0]
   1e1f2:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e1f4:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   1e1f6:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1e1f8:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1e1fa:	9600      	str	r6, [sp, #0]
   1e1fc:	462b      	mov	r3, r5
   1e1fe:	9a03      	ldr	r2, [sp, #12]
   1e200:	4621      	mov	r1, r4
   1e202:	4640      	mov	r0, r8
   1e204:	f7f8 ff68 	bl	170d8 <nrf_setsockopt>
}
   1e208:	b006      	add	sp, #24
   1e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1e20e:	f240 2302 	movw	r3, #514	; 0x202
   1e212:	4299      	cmp	r1, r3
   1e214:	d0e0      	beq.n	1e1d8 <nrf91_socket_offload_setsockopt+0x1c>
   1e216:	f240 2303 	movw	r3, #515	; 0x203
   1e21a:	4299      	cmp	r1, r3
   1e21c:	e7db      	b.n	1e1d6 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   1e21e:	f7ff fcfb 	bl	1dc18 <z_errno>
   1e222:	232a      	movs	r3, #42	; 0x2a
   1e224:	6003      	str	r3, [r0, #0]
   1e226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e22a:	e7ed      	b.n	1e208 <nrf91_socket_offload_setsockopt+0x4c>

0001e22c <nrf91_socket_offload_sendto>:
{
   1e22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e230:	b08d      	sub	sp, #52	; 0x34
   1e232:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1e234:	4605      	mov	r5, r0
   1e236:	460e      	mov	r6, r1
   1e238:	4617      	mov	r7, r2
   1e23a:	4698      	mov	r8, r3
	if (to == NULL) {
   1e23c:	b96c      	cbnz	r4, 1e25a <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1e23e:	4618      	mov	r0, r3
   1e240:	f7ff fca0 	bl	1db84 <z_to_nrf_flags>
   1e244:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e248:	4603      	mov	r3, r0
   1e24a:	463a      	mov	r2, r7
   1e24c:	4631      	mov	r1, r6
   1e24e:	4628      	mov	r0, r5
   1e250:	f7f8 fe8c 	bl	16f6c <nrf_sendto>
}
   1e254:	b00d      	add	sp, #52	; 0x34
   1e256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1e25a:	8823      	ldrh	r3, [r4, #0]
   1e25c:	2b01      	cmp	r3, #1
   1e25e:	d110      	bne.n	1e282 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   1e260:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e262:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1e264:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1e268:	2302      	movs	r3, #2
   1e26a:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e26c:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e26e:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e270:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e274:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1e276:	f7ff fc85 	bl	1db84 <z_to_nrf_flags>
   1e27a:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e27c:	ab03      	add	r3, sp, #12
   1e27e:	9300      	str	r3, [sp, #0]
   1e280:	e7e2      	b.n	1e248 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   1e282:	2b02      	cmp	r3, #2
   1e284:	d115      	bne.n	1e2b2 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   1e286:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e288:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e28c:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e290:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e292:	2210      	movs	r2, #16
   1e294:	1d21      	adds	r1, r4, #4
   1e296:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1e298:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e29a:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e29e:	f7ff f8a8 	bl	1d3f2 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e2a2:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e2a4:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e2a6:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1e2a8:	f7ff fc6c 	bl	1db84 <z_to_nrf_flags>
   1e2ac:	f8cd 9004 	str.w	r9, [sp, #4]
   1e2b0:	e7e4      	b.n	1e27c <nrf91_socket_offload_sendto+0x50>
	errno = ENOTSUP;
   1e2b2:	f7ff fcb1 	bl	1dc18 <z_errno>
   1e2b6:	2323      	movs	r3, #35	; 0x23
   1e2b8:	6003      	str	r3, [r0, #0]
	return retval;
   1e2ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2be:	e7c9      	b.n	1e254 <nrf91_socket_offload_sendto+0x28>

0001e2c0 <nrf91_socket_offload_bind>:
{
   1e2c0:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1e2c2:	880b      	ldrh	r3, [r1, #0]
{
   1e2c4:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   1e2c6:	2b01      	cmp	r3, #1
{
   1e2c8:	4606      	mov	r6, r0
   1e2ca:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1e2cc:	d10e      	bne.n	1e2ec <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   1e2ce:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e2d0:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1e2d2:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1e2d6:	2302      	movs	r3, #2
   1e2d8:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e2da:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1e2dc:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1e2e0:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   1e2e2:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e2e4:	f7f8 fee6 	bl	170b4 <nrf_bind>
}
   1e2e8:	b00a      	add	sp, #40	; 0x28
   1e2ea:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1e2ec:	2b02      	cmp	r3, #2
   1e2ee:	d112      	bne.n	1e316 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1e2f0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e2f2:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1e2f4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1e2f8:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e2fa:	2210      	movs	r2, #16
   1e2fc:	3104      	adds	r1, #4
   1e2fe:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1e300:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1e302:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1e306:	f7ff f874 	bl	1d3f2 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e30a:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e30c:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   1e30e:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1e310:	a901      	add	r1, sp, #4
   1e312:	4630      	mov	r0, r6
   1e314:	e7e6      	b.n	1e2e4 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1e316:	f7ff fc7f 	bl	1dc18 <z_errno>
   1e31a:	2323      	movs	r3, #35	; 0x23
   1e31c:	6003      	str	r3, [r0, #0]
   1e31e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e322:	e7e1      	b.n	1e2e8 <nrf91_socket_offload_bind+0x28>

0001e324 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1e324:	280d      	cmp	r0, #13
   1e326:	d004      	beq.n	1e332 <is_lfcr+0xe>
   1e328:	f1a0 030a 	sub.w	r3, r0, #10
   1e32c:	4258      	negs	r0, r3
   1e32e:	4158      	adcs	r0, r3
   1e330:	4770      	bx	lr
		return true;
   1e332:	2001      	movs	r0, #1
}
   1e334:	4770      	bx	lr

0001e336 <skip_command_prefix>:
{
   1e336:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1e338:	6802      	ldr	r2, [r0, #0]
{
   1e33a:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   1e33c:	1c93      	adds	r3, r2, #2
   1e33e:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1e340:	7894      	ldrb	r4, [r2, #2]
   1e342:	4620      	mov	r0, r4
   1e344:	f7ff ffee 	bl	1e324 <is_lfcr>
   1e348:	b910      	cbnz	r0, 1e350 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e34a:	b10c      	cbz	r4, 1e350 <skip_command_prefix+0x1a>
	(*cmd)++;
   1e34c:	3203      	adds	r2, #3
   1e34e:	600a      	str	r2, [r1, #0]
}
   1e350:	bd10      	pop	{r4, pc}

0001e352 <is_valid_notification_char>:
	return (int)((chr >= (int)'a' && chr <=
   1e352:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1e356:	2b19      	cmp	r3, #25
   1e358:	bf98      	it	ls
   1e35a:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1e35c:	3841      	subs	r0, #65	; 0x41
   1e35e:	b2c0      	uxtb	r0, r0
}
   1e360:	2819      	cmp	r0, #25
   1e362:	bf8c      	ite	hi
   1e364:	2000      	movhi	r0, #0
   1e366:	2001      	movls	r0, #1
   1e368:	4770      	bx	lr

0001e36a <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1e36a:	b510      	push	{r4, lr}
   1e36c:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1e36e:	f7ff f805 	bl	1d37c <strlen>
   1e372:	2801      	cmp	r0, #1
   1e374:	d91e      	bls.n	1e3b4 <is_command+0x4a>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1e376:	7823      	ldrb	r3, [r4, #0]
   1e378:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e37c:	2a19      	cmp	r2, #25
   1e37e:	bf98      	it	ls
   1e380:	3b20      	subls	r3, #32
   1e382:	2b41      	cmp	r3, #65	; 0x41
   1e384:	d116      	bne.n	1e3b4 <is_command+0x4a>
   1e386:	7863      	ldrb	r3, [r4, #1]
   1e388:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1e38c:	2a19      	cmp	r2, #25
   1e38e:	bf98      	it	ls
   1e390:	3b20      	subls	r3, #32
   1e392:	2b54      	cmp	r3, #84	; 0x54
   1e394:	d10e      	bne.n	1e3b4 <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1e396:	78a2      	ldrb	r2, [r4, #2]
   1e398:	2a25      	cmp	r2, #37	; 0x25
   1e39a:	d00d      	beq.n	1e3b8 <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1e39c:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1e3a0:	2b23      	cmp	r3, #35	; 0x23
   1e3a2:	d009      	beq.n	1e3b8 <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1e3a4:	4610      	mov	r0, r2
   1e3a6:	f7ff ffbd 	bl	1e324 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1e3aa:	b910      	cbnz	r0, 1e3b2 <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1e3ac:	fab2 f082 	clz	r0, r2
   1e3b0:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1e3b2:	bd10      	pop	{r4, pc}
		return false;
   1e3b4:	2000      	movs	r0, #0
   1e3b6:	e7fc      	b.n	1e3b2 <is_command+0x48>
		return true;
   1e3b8:	2001      	movs	r0, #1
   1e3ba:	e7fa      	b.n	1e3b2 <is_command+0x48>

0001e3bc <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1e3bc:	6813      	ldr	r3, [r2, #0]
   1e3be:	f7f4 b839 	b.w	12434 <at_parser_max_params_from_str>

0001e3c2 <at_parser_cmd_type_get>:

enum at_cmd_type at_parser_cmd_type_get(const char *at_cmd)
{
   1e3c2:	b507      	push	{r0, r1, r2, lr}
   1e3c4:	9001      	str	r0, [sp, #4]
	enum at_cmd_type type;

	if (!is_command(at_cmd)) {
   1e3c6:	f7ff ffd0 	bl	1e36a <is_command>
   1e3ca:	b178      	cbz	r0, 1e3ec <at_parser_cmd_type_get+0x2a>
		return AT_CMD_TYPE_UNKNOWN;
	}

	skip_command_prefix(&at_cmd);
   1e3cc:	a801      	add	r0, sp, #4
   1e3ce:	f7ff ffb2 	bl	1e336 <skip_command_prefix>

	while (is_valid_notification_char(*at_cmd)) {
   1e3d2:	9901      	ldr	r1, [sp, #4]
   1e3d4:	780a      	ldrb	r2, [r1, #0]
   1e3d6:	4610      	mov	r0, r2
   1e3d8:	f7ff ffbb 	bl	1e352 <is_valid_notification_char>
   1e3dc:	b948      	cbnz	r0, 1e3f2 <at_parser_cmd_type_get+0x30>
		at_cmd++;
	}

	if ((*at_cmd == AT_CMD_SEPARATOR) &&
   1e3de:	2a3d      	cmp	r2, #61	; 0x3d
   1e3e0:	d114      	bne.n	1e40c <at_parser_cmd_type_get+0x4a>
   1e3e2:	784b      	ldrb	r3, [r1, #1]
	    (*(at_cmd + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
		type = AT_CMD_TYPE_TEST_COMMAND;
   1e3e4:	2b3f      	cmp	r3, #63	; 0x3f
   1e3e6:	bf14      	ite	ne
   1e3e8:	2001      	movne	r0, #1
   1e3ea:	2003      	moveq	r0, #3
	} else {
		type = AT_CMD_TYPE_UNKNOWN;
	}

	return type;
}
   1e3ec:	b003      	add	sp, #12
   1e3ee:	f85d fb04 	ldr.w	pc, [sp], #4
		at_cmd++;
   1e3f2:	3101      	adds	r1, #1
   1e3f4:	9101      	str	r1, [sp, #4]
   1e3f6:	e7ec      	b.n	1e3d2 <at_parser_cmd_type_get+0x10>
	} else if ((*at_cmd == AT_CMD_SEPARATOR) || is_lfcr(*at_cmd) ||
   1e3f8:	4610      	mov	r0, r2
   1e3fa:	f7ff ff93 	bl	1e324 <is_lfcr>
   1e3fe:	b918      	cbnz	r0, 1e408 <at_parser_cmd_type_get+0x46>
		return AT_CMD_TYPE_UNKNOWN;
   1e400:	fab2 f082 	clz	r0, r2
   1e404:	0940      	lsrs	r0, r0, #5
   1e406:	e7f1      	b.n	1e3ec <at_parser_cmd_type_get+0x2a>
		type = AT_CMD_TYPE_SET_COMMAND;
   1e408:	2001      	movs	r0, #1
   1e40a:	e7ef      	b.n	1e3ec <at_parser_cmd_type_get+0x2a>
	} else if (*at_cmd == AT_CMD_READ_TEST_IDENTIFIER) {
   1e40c:	2a3f      	cmp	r2, #63	; 0x3f
   1e40e:	d1f3      	bne.n	1e3f8 <at_parser_cmd_type_get+0x36>
		type = AT_CMD_TYPE_READ_COMMAND;
   1e410:	2002      	movs	r0, #2
   1e412:	e7eb      	b.n	1e3ec <at_parser_cmd_type_get+0x2a>

0001e414 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1e414:	6803      	ldr	r3, [r0, #0]
   1e416:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1e418:	bf83      	ittte	hi
   1e41a:	230c      	movhi	r3, #12
   1e41c:	6840      	ldrhi	r0, [r0, #4]
   1e41e:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1e422:	2000      	movls	r0, #0
}
   1e424:	4770      	bx	lr

0001e426 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1e426:	7803      	ldrb	r3, [r0, #0]
   1e428:	2b01      	cmp	r3, #1
   1e42a:	d006      	beq.n	1e43a <at_param_size+0x14>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1e42c:	2b02      	cmp	r3, #2
   1e42e:	d006      	beq.n	1e43e <at_param_size+0x18>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e430:	3b03      	subs	r3, #3
   1e432:	2b01      	cmp	r3, #1
   1e434:	d805      	bhi.n	1e442 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1e436:	6840      	ldr	r0, [r0, #4]
   1e438:	4770      	bx	lr
		return sizeof(u16_t);
   1e43a:	2002      	movs	r0, #2
   1e43c:	4770      	bx	lr
		return sizeof(u32_t);
   1e43e:	2004      	movs	r0, #4
   1e440:	4770      	bx	lr
	}

	return 0;
   1e442:	2000      	movs	r0, #0
}
   1e444:	4770      	bx	lr

0001e446 <at_param_clear>:
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e446:	7803      	ldrb	r3, [r0, #0]
{
   1e448:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e44a:	3b03      	subs	r3, #3
   1e44c:	2b01      	cmp	r3, #1
{
   1e44e:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1e450:	d802      	bhi.n	1e458 <at_param_clear+0x12>
		k_free(param->value.str_val);
   1e452:	6880      	ldr	r0, [r0, #8]
   1e454:	f000 f91f 	bl	1e696 <k_free>
	param->value.int_val = 0;
   1e458:	2300      	movs	r3, #0
   1e45a:	60a3      	str	r3, [r4, #8]
}
   1e45c:	bd10      	pop	{r4, pc}

0001e45e <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   1e45e:	b538      	push	{r3, r4, r5, lr}
   1e460:	460d      	mov	r5, r1
	if (list == NULL) {
   1e462:	4604      	mov	r4, r0
   1e464:	b140      	cbz	r0, 1e478 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   1e466:	210c      	movs	r1, #12
   1e468:	4628      	mov	r0, r5
   1e46a:	f000 f919 	bl	1e6a0 <k_calloc>
   1e46e:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   1e470:	b128      	cbz	r0, 1e47e <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   1e472:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   1e474:	6025      	str	r5, [r4, #0]
}
   1e476:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e478:	f06f 0015 	mvn.w	r0, #21
   1e47c:	e7fb      	b.n	1e476 <at_params_list_init+0x18>
		return -ENOMEM;
   1e47e:	f06f 000b 	mvn.w	r0, #11
   1e482:	e7f8      	b.n	1e476 <at_params_list_init+0x18>

0001e484 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   1e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (list == NULL || list->params == NULL) {
   1e486:	4605      	mov	r5, r0
   1e488:	b130      	cbz	r0, 1e498 <at_params_list_clear+0x14>
   1e48a:	6843      	ldr	r3, [r0, #4]
   1e48c:	b123      	cbz	r3, 1e498 <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1e48e:	2400      	movs	r4, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   1e490:	270c      	movs	r7, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   1e492:	682b      	ldr	r3, [r5, #0]
   1e494:	429c      	cmp	r4, r3
   1e496:	d300      	bcc.n	1e49a <at_params_list_clear+0x16>
		at_param_init(&params[i]);
	}
}
   1e498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		at_param_clear(&params[i]);
   1e49a:	686e      	ldr	r6, [r5, #4]
   1e49c:	fb07 6604 	mla	r6, r7, r4, r6
   1e4a0:	4630      	mov	r0, r6
   1e4a2:	f7ff ffd0 	bl	1e446 <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   1e4a6:	220c      	movs	r2, #12
   1e4a8:	2100      	movs	r1, #0
   1e4aa:	4630      	mov	r0, r6
   1e4ac:	f7fe ffcb 	bl	1d446 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1e4b0:	3401      	adds	r4, #1
   1e4b2:	e7ee      	b.n	1e492 <at_params_list_clear+0xe>

0001e4b4 <at_params_short_put>:
	list->params = NULL;
}

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   1e4b4:	b538      	push	{r3, r4, r5, lr}
   1e4b6:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e4b8:	b160      	cbz	r0, 1e4d4 <at_params_short_put+0x20>
   1e4ba:	6843      	ldr	r3, [r0, #4]
   1e4bc:	b153      	cbz	r3, 1e4d4 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e4be:	f7ff ffa9 	bl	1e414 <at_params_get>

	if (param == NULL) {
   1e4c2:	4604      	mov	r4, r0
   1e4c4:	b130      	cbz	r0, 1e4d4 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e4c6:	f7ff ffbe 	bl	1e446 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e4ca:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
   1e4cc:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   1e4ce:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   1e4d0:	60a5      	str	r5, [r4, #8]
}
   1e4d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e4d4:	f06f 0015 	mvn.w	r0, #21
   1e4d8:	e7fb      	b.n	1e4d2 <at_params_short_put+0x1e>

0001e4da <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   1e4da:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e4dc:	b160      	cbz	r0, 1e4f8 <at_params_empty_put+0x1e>
   1e4de:	6843      	ldr	r3, [r0, #4]
   1e4e0:	b153      	cbz	r3, 1e4f8 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e4e2:	f7ff ff97 	bl	1e414 <at_params_get>

	if (param == NULL) {
   1e4e6:	4604      	mov	r4, r0
   1e4e8:	b130      	cbz	r0, 1e4f8 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   1e4ea:	f7ff ffac 	bl	1e446 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   1e4ee:	2305      	movs	r3, #5
	param->value.int_val = 0;
   1e4f0:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   1e4f2:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   1e4f4:	60a0      	str	r0, [r4, #8]

	return 0;
}
   1e4f6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e4f8:	f06f 0015 	mvn.w	r0, #21
   1e4fc:	e7fb      	b.n	1e4f6 <at_params_empty_put+0x1c>

0001e4fe <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   1e4fe:	b538      	push	{r3, r4, r5, lr}
   1e500:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   1e502:	b160      	cbz	r0, 1e51e <at_params_int_put+0x20>
   1e504:	6843      	ldr	r3, [r0, #4]
   1e506:	b153      	cbz	r3, 1e51e <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e508:	f7ff ff84 	bl	1e414 <at_params_get>

	if (param == NULL) {
   1e50c:	4604      	mov	r4, r0
   1e50e:	b130      	cbz	r0, 1e51e <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   1e510:	f7ff ff99 	bl	1e446 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   1e514:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   1e516:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   1e518:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   1e51a:	60a5      	str	r5, [r4, #8]
}
   1e51c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1e51e:	f06f 0015 	mvn.w	r0, #21
   1e522:	e7fb      	b.n	1e51c <at_params_int_put+0x1e>

0001e524 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   1e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e526:	4616      	mov	r6, r2
   1e528:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   1e52a:	b1c0      	cbz	r0, 1e55e <at_params_string_put+0x3a>
   1e52c:	6843      	ldr	r3, [r0, #4]
   1e52e:	b1b3      	cbz	r3, 1e55e <at_params_string_put+0x3a>
   1e530:	b1aa      	cbz	r2, 1e55e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e532:	f7ff ff6f 	bl	1e414 <at_params_get>

	if (param == NULL) {
   1e536:	4604      	mov	r4, r0
   1e538:	b188      	cbz	r0, 1e55e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   1e53a:	1c68      	adds	r0, r5, #1
   1e53c:	f7fc fe40 	bl	1b1c0 <k_malloc>

	if (param_value == NULL) {
   1e540:	4607      	mov	r7, r0
   1e542:	b178      	cbz	r0, 1e564 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   1e544:	462a      	mov	r2, r5
   1e546:	4631      	mov	r1, r6
   1e548:	f7fe ff53 	bl	1d3f2 <memcpy>

	at_param_clear(param);
   1e54c:	4620      	mov	r0, r4
   1e54e:	f7ff ff7a 	bl	1e446 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   1e552:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   1e554:	2000      	movs	r0, #0
	param->size = str_len;
   1e556:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   1e558:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   1e55a:	60a7      	str	r7, [r4, #8]
}
   1e55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e55e:	f06f 0015 	mvn.w	r0, #21
   1e562:	e7fb      	b.n	1e55c <at_params_string_put+0x38>
		return -ENOMEM;
   1e564:	f06f 000b 	mvn.w	r0, #11
   1e568:	e7f8      	b.n	1e55c <at_params_string_put+0x38>

0001e56a <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   1e56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e56c:	4616      	mov	r6, r2
   1e56e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   1e570:	b1c0      	cbz	r0, 1e5a4 <at_params_array_put+0x3a>
   1e572:	6843      	ldr	r3, [r0, #4]
   1e574:	b1b3      	cbz	r3, 1e5a4 <at_params_array_put+0x3a>
   1e576:	b1aa      	cbz	r2, 1e5a4 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e578:	f7ff ff4c 	bl	1e414 <at_params_get>

	if (param == NULL) {
   1e57c:	4604      	mov	r4, r0
   1e57e:	b188      	cbz	r0, 1e5a4 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	u32_t *param_value = (u32_t *)k_malloc(array_len);
   1e580:	4628      	mov	r0, r5
   1e582:	f7fc fe1d 	bl	1b1c0 <k_malloc>

	if (param_value == NULL) {
   1e586:	4607      	mov	r7, r0
   1e588:	b178      	cbz	r0, 1e5aa <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   1e58a:	462a      	mov	r2, r5
   1e58c:	4631      	mov	r1, r6
   1e58e:	f7fe ff30 	bl	1d3f2 <memcpy>

	at_param_clear(param);
   1e592:	4620      	mov	r0, r4
   1e594:	f7ff ff57 	bl	1e446 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   1e598:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   1e59a:	2000      	movs	r0, #0
	param->size = array_len;
   1e59c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   1e59e:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   1e5a0:	60a7      	str	r7, [r4, #8]
}
   1e5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1e5a4:	f06f 0015 	mvn.w	r0, #21
   1e5a8:	e7fb      	b.n	1e5a2 <at_params_array_put+0x38>
		return -ENOMEM;
   1e5aa:	f06f 000b 	mvn.w	r0, #11
   1e5ae:	e7f8      	b.n	1e5a2 <at_params_array_put+0x38>

0001e5b0 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   1e5b0:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   1e5b2:	b160      	cbz	r0, 1e5ce <at_params_short_get+0x1e>
   1e5b4:	6843      	ldr	r3, [r0, #4]
   1e5b6:	b153      	cbz	r3, 1e5ce <at_params_short_get+0x1e>
   1e5b8:	b14a      	cbz	r2, 1e5ce <at_params_short_get+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e5ba:	f7ff ff2b 	bl	1e414 <at_params_get>

	if (param == NULL) {
   1e5be:	b130      	cbz	r0, 1e5ce <at_params_short_get+0x1e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   1e5c0:	7803      	ldrb	r3, [r0, #0]
   1e5c2:	2b01      	cmp	r3, #1
   1e5c4:	d103      	bne.n	1e5ce <at_params_short_get+0x1e>
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
   1e5c6:	6883      	ldr	r3, [r0, #8]
	return 0;
   1e5c8:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   1e5ca:	8013      	strh	r3, [r2, #0]
}
   1e5cc:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1e5ce:	f06f 0015 	mvn.w	r0, #21
   1e5d2:	e7fb      	b.n	1e5cc <at_params_short_get+0x1c>

0001e5d4 <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   1e5d4:	b570      	push	{r4, r5, r6, lr}
   1e5d6:	4616      	mov	r6, r2
   1e5d8:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   1e5da:	b1c0      	cbz	r0, 1e60e <at_params_string_get+0x3a>
   1e5dc:	6843      	ldr	r3, [r0, #4]
   1e5de:	b1b3      	cbz	r3, 1e60e <at_params_string_get+0x3a>
   1e5e0:	b1aa      	cbz	r2, 1e60e <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   1e5e2:	b1a4      	cbz	r4, 1e60e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   1e5e4:	f7ff ff16 	bl	1e414 <at_params_get>

	if (param == NULL) {
   1e5e8:	4601      	mov	r1, r0
   1e5ea:	b180      	cbz	r0, 1e60e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   1e5ec:	7803      	ldrb	r3, [r0, #0]
   1e5ee:	2b03      	cmp	r3, #3
   1e5f0:	d10d      	bne.n	1e60e <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   1e5f2:	f7ff ff18 	bl	1e426 <at_param_size>

	if (*len < param_len) {
   1e5f6:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   1e5f8:	4605      	mov	r5, r0
	if (*len < param_len) {
   1e5fa:	4283      	cmp	r3, r0
   1e5fc:	d30a      	bcc.n	1e614 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   1e5fe:	4602      	mov	r2, r0
   1e600:	6889      	ldr	r1, [r1, #8]
   1e602:	4630      	mov	r0, r6
   1e604:	f7fe fef5 	bl	1d3f2 <memcpy>
	*len = param_len;

	return 0;
   1e608:	2000      	movs	r0, #0
	*len = param_len;
   1e60a:	6025      	str	r5, [r4, #0]
}
   1e60c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e60e:	f06f 0015 	mvn.w	r0, #21
   1e612:	e7fb      	b.n	1e60c <at_params_string_get+0x38>
		return -ENOMEM;
   1e614:	f06f 000b 	mvn.w	r0, #11
   1e618:	e7f8      	b.n	1e60c <at_params_string_get+0x38>

0001e61a <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   1e61a:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   1e61c:	4604      	mov	r4, r0
   1e61e:	b178      	cbz	r0, 1e640 <at_params_valid_count_get+0x26>
   1e620:	6840      	ldr	r0, [r0, #4]
   1e622:	b168      	cbz	r0, 1e640 <at_params_valid_count_get+0x26>
	if (index >= list->param_count) {
   1e624:	6822      	ldr	r2, [r4, #0]
   1e626:	b14a      	cbz	r2, 1e63c <at_params_valid_count_get+0x22>
   1e628:	2200      	movs	r2, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e62a:	7803      	ldrb	r3, [r0, #0]
   1e62c:	b133      	cbz	r3, 1e63c <at_params_valid_count_get+0x22>
		valid_i += 1;
   1e62e:	3201      	adds	r2, #1
		param = at_params_get(list, valid_i);
   1e630:	4611      	mov	r1, r2
   1e632:	4620      	mov	r0, r4
   1e634:	f7ff feee 	bl	1e414 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   1e638:	2800      	cmp	r0, #0
   1e63a:	d1f6      	bne.n	1e62a <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   1e63c:	4610      	mov	r0, r2
   1e63e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e640:	f06f 0215 	mvn.w	r2, #21
   1e644:	e7fa      	b.n	1e63c <at_params_valid_count_get+0x22>

0001e646 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1e646:	f7fe bced 	b.w	1d024 <z_clock_idle_exit>

0001e64a <k_mem_slab_init>:
{
   1e64a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1e64c:	2400      	movs	r4, #0
	slab->block_size = block_size;
   1e64e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   1e652:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   1e656:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e658:	42a3      	cmp	r3, r4
   1e65a:	d102      	bne.n	1e662 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   1e65c:	e9c0 0000 	strd	r0, r0, [r0]
}
   1e660:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1e662:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e664:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1e666:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1e668:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1e66a:	4411      	add	r1, r2
   1e66c:	e7f4      	b.n	1e658 <k_mem_slab_init+0xe>

0001e66e <k_mem_pool_malloc>:
{
   1e66e:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e670:	2404      	movs	r4, #4
   1e672:	190a      	adds	r2, r1, r4
   1e674:	d204      	bcs.n	1e680 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1e676:	2300      	movs	r3, #0
   1e678:	4669      	mov	r1, sp
   1e67a:	f7fc fd29 	bl	1b0d0 <k_mem_pool_alloc>
   1e67e:	b110      	cbz	r0, 1e686 <k_mem_pool_malloc+0x18>
		return NULL;
   1e680:	2000      	movs	r0, #0
}
   1e682:	b002      	add	sp, #8
   1e684:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1e686:	4622      	mov	r2, r4
   1e688:	a901      	add	r1, sp, #4
   1e68a:	9800      	ldr	r0, [sp, #0]
   1e68c:	f7fe feb1 	bl	1d3f2 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1e690:	9800      	ldr	r0, [sp, #0]
   1e692:	3004      	adds	r0, #4
   1e694:	e7f5      	b.n	1e682 <k_mem_pool_malloc+0x14>

0001e696 <k_free>:
	if (ptr != NULL) {
   1e696:	b110      	cbz	r0, 1e69e <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1e698:	3804      	subs	r0, #4
   1e69a:	f7fc bd65 	b.w	1b168 <k_mem_pool_free_id>
}
   1e69e:	4770      	bx	lr

0001e6a0 <k_calloc>:
{
   1e6a0:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   1e6a2:	fba0 4501 	umull	r4, r5, r0, r1
   1e6a6:	b935      	cbnz	r5, 1e6b6 <k_calloc+0x16>
	ret = k_malloc(bounds);
   1e6a8:	4620      	mov	r0, r4
   1e6aa:	f7fc fd89 	bl	1b1c0 <k_malloc>
	if (ret != NULL) {
   1e6ae:	4606      	mov	r6, r0
   1e6b0:	b918      	cbnz	r0, 1e6ba <k_calloc+0x1a>
}
   1e6b2:	4630      	mov	r0, r6
   1e6b4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1e6b6:	2600      	movs	r6, #0
   1e6b8:	e7fb      	b.n	1e6b2 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   1e6ba:	4622      	mov	r2, r4
   1e6bc:	4629      	mov	r1, r5
   1e6be:	f7fe fec2 	bl	1d446 <memset>
   1e6c2:	e7f6      	b.n	1e6b2 <k_calloc+0x12>

0001e6c4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1e6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6c8:	4604      	mov	r4, r0
   1e6ca:	460f      	mov	r7, r1
   1e6cc:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e6ce:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e6d2:	f04f 0220 	mov.w	r2, #32
   1e6d6:	f3ef 8611 	mrs	r6, BASEPRI
   1e6da:	f382 8811 	msr	BASEPRI, r2
   1e6de:	f3bf 8f6f 	isb	sy
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1e6e2:	b1db      	cbz	r3, 1e71c <queue_insert+0x58>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1e6e4:	2008      	movs	r0, #8
   1e6e6:	f7fc fd71 	bl	1b1cc <z_thread_malloc>
		if (anode == NULL) {
   1e6ea:	b938      	cbnz	r0, 1e6fc <queue_insert+0x38>
	__asm__ volatile(
   1e6ec:	f386 8811 	msr	BASEPRI, r6
   1e6f0:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1e6f4:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1e6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1e6fc:	2301      	movs	r3, #1
		anode->data = data;
   1e6fe:	f8c0 8004 	str.w	r8, [r0, #4]
   1e702:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1e704:	6803      	ldr	r3, [r0, #0]
   1e706:	f003 0203 	and.w	r2, r3, #3
   1e70a:	b95f      	cbnz	r7, 1e724 <queue_insert+0x60>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e70c:	6823      	ldr	r3, [r4, #0]
   1e70e:	4313      	orrs	r3, r2
   1e710:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e712:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1e714:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1e716:	b973      	cbnz	r3, 1e736 <queue_insert+0x72>
	list->tail = node;
   1e718:	6060      	str	r0, [r4, #4]
   1e71a:	e00c      	b.n	1e736 <queue_insert+0x72>
	node->next_and_flags = flags;
   1e71c:	f8c8 3000 	str.w	r3, [r8]
   1e720:	4640      	mov	r0, r8
   1e722:	e7ef      	b.n	1e704 <queue_insert+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e724:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1e726:	f033 0303 	bics.w	r3, r3, #3
   1e72a:	d114      	bne.n	1e756 <queue_insert+0x92>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e72c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1e72e:	6862      	ldr	r2, [r4, #4]
   1e730:	b95a      	cbnz	r2, 1e74a <queue_insert+0x86>
	list->head = node;
   1e732:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1e736:	2104      	movs	r1, #4
   1e738:	4628      	mov	r0, r5
   1e73a:	f000 fb5d 	bl	1edf8 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1e73e:	4628      	mov	r0, r5
   1e740:	4631      	mov	r1, r6
   1e742:	f000 f8d2 	bl	1e8ea <z_reschedule>
	return 0;
   1e746:	2000      	movs	r0, #0
   1e748:	e7d6      	b.n	1e6f8 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e74a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e74c:	f003 0303 	and.w	r3, r3, #3
   1e750:	4303      	orrs	r3, r0
   1e752:	6013      	str	r3, [r2, #0]
   1e754:	e7e0      	b.n	1e718 <queue_insert+0x54>
   1e756:	4313      	orrs	r3, r2
   1e758:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e75a:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e75c:	f003 0303 	and.w	r3, r3, #3
   1e760:	4318      	orrs	r0, r3
   1e762:	6038      	str	r0, [r7, #0]
   1e764:	e7e7      	b.n	1e736 <queue_insert+0x72>

0001e766 <z_queue_node_peek>:
{
   1e766:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1e768:	4604      	mov	r4, r0
   1e76a:	b130      	cbz	r0, 1e77a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e76c:	6802      	ldr	r2, [r0, #0]
   1e76e:	0793      	lsls	r3, r2, #30
   1e770:	d003      	beq.n	1e77a <z_queue_node_peek+0x14>
		ret = anode->data;
   1e772:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e774:	b109      	cbz	r1, 1e77a <z_queue_node_peek+0x14>
			k_free(anode);
   1e776:	f7ff ff8e 	bl	1e696 <k_free>
}
   1e77a:	4620      	mov	r0, r4
   1e77c:	bd10      	pop	{r4, pc}

0001e77e <z_impl_k_queue_init>:
	list->head = NULL;
   1e77e:	2300      	movs	r3, #0
	list->tail = NULL;
   1e780:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1e784:	f100 0308 	add.w	r3, r0, #8
   1e788:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1e78c:	4770      	bx	lr

0001e78e <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1e78e:	460a      	mov	r2, r1
   1e790:	2300      	movs	r3, #0
   1e792:	6841      	ldr	r1, [r0, #4]
   1e794:	f7ff bf96 	b.w	1e6c4 <queue_insert>

0001e798 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1e798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e79c:	4604      	mov	r4, r0
   1e79e:	b086      	sub	sp, #24
   1e7a0:	460d      	mov	r5, r1
	__asm__ volatile(
   1e7a2:	f04f 0320 	mov.w	r3, #32
   1e7a6:	f3ef 8711 	mrs	r7, BASEPRI
   1e7aa:	f383 8811 	msr	BASEPRI, r3
   1e7ae:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1e7b2:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e7b4:	b188      	cbz	r0, 1e7da <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e7b6:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e7b8:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e7ba:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e7be:	4290      	cmp	r0, r2
	list->head = node;
   1e7c0:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1e7c2:	bf08      	it	eq
   1e7c4:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e7c6:	2101      	movs	r1, #1
   1e7c8:	f7ff ffcd 	bl	1e766 <z_queue_node_peek>
	__asm__ volatile(
   1e7cc:	f387 8811 	msr	BASEPRI, r7
   1e7d0:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1e7d4:	b006      	add	sp, #24
   1e7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1e7da:	2900      	cmp	r1, #0
   1e7dc:	d0f6      	beq.n	1e7cc <z_impl_k_queue_get+0x34>
   1e7de:	f387 8811 	msr	BASEPRI, r7
   1e7e2:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1e7e6:	2104      	movs	r1, #4
   1e7e8:	4602      	mov	r2, r0
   1e7ea:	4623      	mov	r3, r4
   1e7ec:	eb0d 0001 	add.w	r0, sp, r1
   1e7f0:	f7fd fc48 	bl	1c084 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1e7f4:	1c6a      	adds	r2, r5, #1
   1e7f6:	d002      	beq.n	1e7fe <z_impl_k_queue_get+0x66>
	return z_impl_k_uptime_get();
   1e7f8:	f000 f9cb 	bl	1eb92 <z_impl_k_uptime_get>
   1e7fc:	4606      	mov	r6, r0
{
   1e7fe:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1e800:	9b04      	ldr	r3, [sp, #16]
   1e802:	f36f 3310 	bfc	r3, #12, #5
   1e806:	9304      	str	r3, [sp, #16]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1e808:	2101      	movs	r1, #1
   1e80a:	1bea      	subs	r2, r5, r7
   1e80c:	a801      	add	r0, sp, #4
   1e80e:	f7fd fc4d 	bl	1c0ac <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1e812:	b118      	cbz	r0, 1e81c <z_impl_k_queue_get+0x84>
   1e814:	300b      	adds	r0, #11
   1e816:	d001      	beq.n	1e81c <z_impl_k_queue_get+0x84>
			return NULL;
   1e818:	2000      	movs	r0, #0
   1e81a:	e7db      	b.n	1e7d4 <z_impl_k_queue_get+0x3c>
	__asm__ volatile(
   1e81c:	f04f 0320 	mov.w	r3, #32
   1e820:	f3ef 8811 	mrs	r8, BASEPRI
   1e824:	f383 8811 	msr	BASEPRI, r3
   1e828:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(sflist)
   1e82c:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1e82e:	b138      	cbz	r0, 1e840 <z_impl_k_queue_get+0xa8>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e830:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e832:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e834:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e838:	4290      	cmp	r0, r2
	list->head = node;
   1e83a:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1e83c:	bf08      	it	eq
   1e83e:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1e840:	2101      	movs	r1, #1
   1e842:	f7ff ff90 	bl	1e766 <z_queue_node_peek>
	__asm__ volatile(
   1e846:	f388 8811 	msr	BASEPRI, r8
   1e84a:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1e84e:	2800      	cmp	r0, #0
   1e850:	d1c0      	bne.n	1e7d4 <z_impl_k_queue_get+0x3c>
   1e852:	1c6b      	adds	r3, r5, #1
   1e854:	d0d4      	beq.n	1e800 <z_impl_k_queue_get+0x68>
	return z_impl_k_uptime_get();
   1e856:	f000 f99c 	bl	1eb92 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   1e85a:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1e85c:	42bd      	cmp	r5, r7
   1e85e:	dacf      	bge.n	1e800 <z_impl_k_queue_get+0x68>
   1e860:	e7da      	b.n	1e818 <z_impl_k_queue_get+0x80>

0001e862 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e862:	7b43      	ldrb	r3, [r0, #13]
   1e864:	06db      	lsls	r3, r3, #27
   1e866:	bf03      	ittte	eq
   1e868:	6980      	ldreq	r0, [r0, #24]
   1e86a:	fab0 f080 	clzeq	r0, r0
   1e86e:	0940      	lsreq	r0, r0, #5
   1e870:	2000      	movne	r0, #0
}
   1e872:	4770      	bx	lr

0001e874 <z_swap_irqlock>:
{
   1e874:	b510      	push	{r4, lr}
   1e876:	4604      	mov	r4, r0
	z_check_stack_sentinel();
   1e878:	f7fd f96a 	bl	1bb50 <z_check_stack_sentinel>
	ret = arch_swap(key);
   1e87c:	4620      	mov	r0, r4
}
   1e87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1e882:	f7f0 be65 	b.w	f550 <arch_swap>

0001e886 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1e886:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1e88a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1e88e:	4298      	cmp	r0, r3
   1e890:	bfac      	ite	ge
   1e892:	2000      	movge	r0, #0
   1e894:	2001      	movlt	r0, #1
   1e896:	4770      	bx	lr

0001e898 <z_find_first_thread_to_unpend>:
{
   1e898:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e89a:	f04f 0320 	mov.w	r3, #32
   1e89e:	f3ef 8411 	mrs	r4, BASEPRI
   1e8a2:	f383 8811 	msr	BASEPRI, r3
   1e8a6:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1e8aa:	f000 f85d 	bl	1e968 <z_priq_dumb_best>
	__asm__ volatile(
   1e8ae:	f384 8811 	msr	BASEPRI, r4
   1e8b2:	f3bf 8f6f 	isb	sy
}
   1e8b6:	bd10      	pop	{r4, pc}

0001e8b8 <z_unpend_thread_no_timeout>:
{
   1e8b8:	b538      	push	{r3, r4, r5, lr}
   1e8ba:	4604      	mov	r4, r0
	__asm__ volatile(
   1e8bc:	f04f 0320 	mov.w	r3, #32
   1e8c0:	f3ef 8511 	mrs	r5, BASEPRI
   1e8c4:	f383 8811 	msr	BASEPRI, r3
   1e8c8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e8cc:	4601      	mov	r1, r0
   1e8ce:	6880      	ldr	r0, [r0, #8]
   1e8d0:	f7fc fe3e 	bl	1b550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e8d4:	7b63      	ldrb	r3, [r4, #13]
   1e8d6:	f023 0302 	bic.w	r3, r3, #2
   1e8da:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1e8dc:	f385 8811 	msr	BASEPRI, r5
   1e8e0:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e8e4:	2300      	movs	r3, #0
   1e8e6:	60a3      	str	r3, [r4, #8]
}
   1e8e8:	bd38      	pop	{r3, r4, r5, pc}

0001e8ea <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e8ea:	b921      	cbnz	r1, 1e8f6 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e8ec:	f3ef 8005 	mrs	r0, IPSR
   1e8f0:	b908      	cbnz	r0, 1e8f6 <z_reschedule+0xc>
	return z_swap_irqlock(key.key);
   1e8f2:	f7ff bfbf 	b.w	1e874 <z_swap_irqlock>
   1e8f6:	f381 8811 	msr	BASEPRI, r1
   1e8fa:	f3bf 8f6f 	isb	sy
}
   1e8fe:	4770      	bx	lr

0001e900 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e900:	4603      	mov	r3, r0
   1e902:	b920      	cbnz	r0, 1e90e <z_reschedule_irqlock+0xe>
   1e904:	f3ef 8205 	mrs	r2, IPSR
   1e908:	b90a      	cbnz	r2, 1e90e <z_reschedule_irqlock+0xe>
		z_swap_irqlock(key);
   1e90a:	f7ff bfb3 	b.w	1e874 <z_swap_irqlock>
   1e90e:	f383 8811 	msr	BASEPRI, r3
   1e912:	f3bf 8f6f 	isb	sy
}
   1e916:	4770      	bx	lr

0001e918 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e918:	f04f 0320 	mov.w	r3, #32
   1e91c:	f3ef 8011 	mrs	r0, BASEPRI
   1e920:	f383 8811 	msr	BASEPRI, r3
   1e924:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e928:	f7ff bfea 	b.w	1e900 <z_reschedule_irqlock>

0001e92c <z_unpend_thread>:
{
   1e92c:	b538      	push	{r3, r4, r5, lr}
   1e92e:	4604      	mov	r4, r0
   1e930:	f04f 0320 	mov.w	r3, #32
   1e934:	f3ef 8511 	mrs	r5, BASEPRI
   1e938:	f383 8811 	msr	BASEPRI, r3
   1e93c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e940:	4601      	mov	r1, r0
   1e942:	6880      	ldr	r0, [r0, #8]
   1e944:	f7fc fe04 	bl	1b550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e948:	7b63      	ldrb	r3, [r4, #13]
   1e94a:	f023 0302 	bic.w	r3, r3, #2
   1e94e:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1e950:	f385 8811 	msr	BASEPRI, r5
   1e954:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e958:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   1e95a:	f104 0018 	add.w	r0, r4, #24
   1e95e:	60a3      	str	r3, [r4, #8]
}
   1e960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e964:	f000 b8d1 	b.w	1eb0a <z_abort_timeout>

0001e968 <z_priq_dumb_best>:
	return list->head == list;
   1e968:	6803      	ldr	r3, [r0, #0]
}
   1e96a:	4298      	cmp	r0, r3
   1e96c:	bf14      	ite	ne
   1e96e:	4618      	movne	r0, r3
   1e970:	2000      	moveq	r0, #0
   1e972:	4770      	bx	lr

0001e974 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1e974:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1e978:	b570      	push	{r4, r5, r6, lr}
   1e97a:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   1e97c:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1e980:	b1cb      	cbz	r3, 1e9b6 <z_thread_timeout+0x42>
	__asm__ volatile(
   1e982:	f04f 0320 	mov.w	r3, #32
   1e986:	f3ef 8611 	mrs	r6, BASEPRI
   1e98a:	f383 8811 	msr	BASEPRI, r3
   1e98e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e992:	4629      	mov	r1, r5
   1e994:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1e998:	f7fc fdda 	bl	1b550 <z_priq_dumb_remove>
   1e99c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1e9a0:	f023 0302 	bic.w	r3, r3, #2
   1e9a4:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1e9a8:	f386 8811 	msr	BASEPRI, r6
   1e9ac:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1e9b0:	2300      	movs	r3, #0
   1e9b2:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e9b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1e9ba:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e9bc:	f023 0314 	bic.w	r3, r3, #20
   1e9c0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1e9c4:	f7ff ff4d 	bl	1e862 <z_is_thread_ready>
   1e9c8:	b120      	cbz	r0, 1e9d4 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
   1e9ca:	4628      	mov	r0, r5
}
   1e9cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e9d0:	f7fc be0e 	b.w	1b5f0 <z_add_thread_to_ready_q>
   1e9d4:	bd70      	pop	{r4, r5, r6, pc}

0001e9d6 <z_unpend_first_thread>:
{
   1e9d6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e9d8:	f04f 0320 	mov.w	r3, #32
   1e9dc:	f3ef 8211 	mrs	r2, BASEPRI
   1e9e0:	f383 8811 	msr	BASEPRI, r3
   1e9e4:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1e9e8:	f7ff ffbe 	bl	1e968 <z_priq_dumb_best>
   1e9ec:	4604      	mov	r4, r0
	__asm__ volatile(
   1e9ee:	f382 8811 	msr	BASEPRI, r2
   1e9f2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1e9f6:	b1c8      	cbz	r0, 1ea2c <z_unpend_first_thread+0x56>
	__asm__ volatile(
   1e9f8:	f04f 0320 	mov.w	r3, #32
   1e9fc:	f3ef 8511 	mrs	r5, BASEPRI
   1ea00:	f383 8811 	msr	BASEPRI, r3
   1ea04:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ea08:	4601      	mov	r1, r0
   1ea0a:	6880      	ldr	r0, [r0, #8]
   1ea0c:	f7fc fda0 	bl	1b550 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ea10:	7b63      	ldrb	r3, [r4, #13]
   1ea12:	f023 0302 	bic.w	r3, r3, #2
   1ea16:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1ea18:	f385 8811 	msr	BASEPRI, r5
   1ea1c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1ea20:	2300      	movs	r3, #0
   1ea22:	f104 0018 	add.w	r0, r4, #24
   1ea26:	60a3      	str	r3, [r4, #8]
   1ea28:	f000 f86f 	bl	1eb0a <z_abort_timeout>
}
   1ea2c:	4620      	mov	r0, r4
   1ea2e:	bd38      	pop	{r3, r4, r5, pc}

0001ea30 <z_unpend_all>:
{
   1ea30:	b570      	push	{r4, r5, r6, lr}
   1ea32:	4606      	mov	r6, r0
	int need_sched = 0;
   1ea34:	2500      	movs	r5, #0
   1ea36:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ea38:	42a6      	cmp	r6, r4
   1ea3a:	d000      	beq.n	1ea3e <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   1ea3c:	b90c      	cbnz	r4, 1ea42 <z_unpend_all+0x12>
}
   1ea3e:	4628      	mov	r0, r5
   1ea40:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   1ea42:	4620      	mov	r0, r4
   1ea44:	f7ff ff72 	bl	1e92c <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1ea48:	4620      	mov	r0, r4
   1ea4a:	f7ff ff0a 	bl	1e862 <z_is_thread_ready>
		need_sched = 1;
   1ea4e:	2501      	movs	r5, #1
   1ea50:	2800      	cmp	r0, #0
   1ea52:	d0f0      	beq.n	1ea36 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1ea54:	4620      	mov	r0, r4
   1ea56:	f7fc fdcb 	bl	1b5f0 <z_add_thread_to_ready_q>
   1ea5a:	e7ec      	b.n	1ea36 <z_unpend_all+0x6>

0001ea5c <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1ea5c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1ea60:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1ea64:	e9c0 0000 	strd	r0, r0, [r0]
   1ea68:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1ea6c:	4770      	bx	lr

0001ea6e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ea6e:	7b43      	ldrb	r3, [r0, #13]
   1ea70:	06db      	lsls	r3, r3, #27
   1ea72:	bf03      	ittte	eq
   1ea74:	6980      	ldreq	r0, [r0, #24]
   1ea76:	fab0 f080 	clzeq	r0, r0
   1ea7a:	0940      	lsreq	r0, r0, #5
   1ea7c:	2000      	movne	r0, #0
}
   1ea7e:	4770      	bx	lr

0001ea80 <z_impl_k_thread_name_set>:
}
   1ea80:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1ea84:	4770      	bx	lr

0001ea86 <k_thread_name_get>:
}
   1ea86:	2000      	movs	r0, #0
   1ea88:	4770      	bx	lr

0001ea8a <z_new_thread_init>:
{
   1ea8a:	b510      	push	{r4, lr}
	*((u32_t *)pStack) = STACK_SENTINEL;
   1ea8c:	f04f 34f0 	mov.w	r4, #4042322160	; 0xf0f0f0f0
   1ea90:	600c      	str	r4, [r1, #0]
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1ea92:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   1ea94:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   1ea96:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   1ea98:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1ea9a:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   1ea9c:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   1ea9e:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   1eaa0:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   1eaa4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1eaa8:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   1eaac:	bd10      	pop	{r4, pc}

0001eaae <z_thread_single_resume>:
{
   1eaae:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1eab0:	7b43      	ldrb	r3, [r0, #13]
   1eab2:	4602      	mov	r2, r0
   1eab4:	f023 0310 	bic.w	r3, r3, #16
   1eab8:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1eaba:	f7ff ffd8 	bl	1ea6e <z_is_thread_ready>
   1eabe:	b120      	cbz	r0, 1eaca <z_thread_single_resume+0x1c>
}
   1eac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   1eac4:	4610      	mov	r0, r2
   1eac6:	f7fc bd93 	b.w	1b5f0 <z_add_thread_to_ready_q>
   1eaca:	bd08      	pop	{r3, pc}

0001eacc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1eacc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1eace:	b510      	push	{r4, lr}
   1ead0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1ead2:	b103      	cbz	r3, 1ead6 <z_thread_single_abort+0xa>
		thread->fn_abort();
   1ead4:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1ead6:	4620      	mov	r0, r4
   1ead8:	f7ff ffc9 	bl	1ea6e <z_is_thread_ready>
   1eadc:	b138      	cbz	r0, 1eaee <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1eade:	4620      	mov	r0, r4
   1eae0:	f7fc fe34 	bl	1b74c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1eae4:	7b63      	ldrb	r3, [r4, #13]
   1eae6:	f043 0308 	orr.w	r3, r3, #8
   1eaea:	7363      	strb	r3, [r4, #13]
}
   1eaec:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1eaee:	7b63      	ldrb	r3, [r4, #13]
   1eaf0:	079b      	lsls	r3, r3, #30
   1eaf2:	d502      	bpl.n	1eafa <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   1eaf4:	4620      	mov	r0, r4
   1eaf6:	f7ff fedf 	bl	1e8b8 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   1eafa:	69a3      	ldr	r3, [r4, #24]
   1eafc:	2b00      	cmp	r3, #0
   1eafe:	d0f1      	beq.n	1eae4 <z_thread_single_abort+0x18>
   1eb00:	f104 0018 	add.w	r0, r4, #24
   1eb04:	f000 f801 	bl	1eb0a <z_abort_timeout>
   1eb08:	e7ec      	b.n	1eae4 <z_thread_single_abort+0x18>

0001eb0a <z_abort_timeout>:
{
   1eb0a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eb0c:	f04f 0220 	mov.w	r2, #32
   1eb10:	f3ef 8411 	mrs	r4, BASEPRI
   1eb14:	f382 8811 	msr	BASEPRI, r2
   1eb18:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1eb1c:	6803      	ldr	r3, [r0, #0]
   1eb1e:	b13b      	cbz	r3, 1eb30 <z_abort_timeout+0x26>
			remove_timeout(to);
   1eb20:	f7fd f978 	bl	1be14 <remove_timeout>
			ret = 0;
   1eb24:	2000      	movs	r0, #0
	__asm__ volatile(
   1eb26:	f384 8811 	msr	BASEPRI, r4
   1eb2a:	f3bf 8f6f 	isb	sy
}
   1eb2e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1eb30:	f06f 0015 	mvn.w	r0, #21
   1eb34:	e7f7      	b.n	1eb26 <z_abort_timeout+0x1c>

0001eb36 <z_get_next_timeout_expiry>:
{
   1eb36:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eb38:	f04f 0320 	mov.w	r3, #32
   1eb3c:	f3ef 8411 	mrs	r4, BASEPRI
   1eb40:	f383 8811 	msr	BASEPRI, r3
   1eb44:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1eb48:	f7fd f978 	bl	1be3c <next_timeout>
	__asm__ volatile(
   1eb4c:	f384 8811 	msr	BASEPRI, r4
   1eb50:	f3bf 8f6f 	isb	sy
}
   1eb54:	bd10      	pop	{r4, pc}

0001eb56 <z_set_timeout_expiry>:
{
   1eb56:	b570      	push	{r4, r5, r6, lr}
   1eb58:	4604      	mov	r4, r0
   1eb5a:	460e      	mov	r6, r1
	__asm__ volatile(
   1eb5c:	f04f 0320 	mov.w	r3, #32
   1eb60:	f3ef 8511 	mrs	r5, BASEPRI
   1eb64:	f383 8811 	msr	BASEPRI, r3
   1eb68:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   1eb6c:	f7fd f966 	bl	1be3c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1eb70:	2801      	cmp	r0, #1
   1eb72:	dd05      	ble.n	1eb80 <z_set_timeout_expiry+0x2a>
   1eb74:	42a0      	cmp	r0, r4
   1eb76:	dd03      	ble.n	1eb80 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   1eb78:	4631      	mov	r1, r6
   1eb7a:	4620      	mov	r0, r4
   1eb7c:	f7f0 fc4a 	bl	f414 <z_clock_set_timeout>
	__asm__ volatile(
   1eb80:	f385 8811 	msr	BASEPRI, r5
   1eb84:	f3bf 8f6f 	isb	sy
}
   1eb88:	bd70      	pop	{r4, r5, r6, pc}

0001eb8a <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1eb8a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1eb8c:	f7fd fa0a 	bl	1bfa4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1eb90:	bd08      	pop	{r3, pc}

0001eb92 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   1eb92:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   1eb94:	f7fd fa06 	bl	1bfa4 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   1eb98:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1eb9c:	fba0 2304 	umull	r2, r3, r0, r4
   1eba0:	fb04 3301 	mla	r3, r4, r1, r3
   1eba4:	0bd0      	lsrs	r0, r2, #15
}
   1eba6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1ebaa:	0bd9      	lsrs	r1, r3, #15
   1ebac:	bd10      	pop	{r4, pc}

0001ebae <k_timer_init>:
	timer->status = 0U;
   1ebae:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1ebb0:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1ebb4:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   1ebb8:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1ebba:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1ebbe:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1ebc2:	6283      	str	r3, [r0, #40]	; 0x28
}
   1ebc4:	4770      	bx	lr

0001ebc6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1ebc6:	b510      	push	{r4, lr}
   1ebc8:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1ebca:	f7ff ff9e 	bl	1eb0a <z_abort_timeout>

	if (inactive) {
   1ebce:	bb00      	cbnz	r0, 1ec12 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
   1ebd0:	69e3      	ldr	r3, [r4, #28]
   1ebd2:	b10b      	cbz	r3, 1ebd8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1ebd4:	4620      	mov	r0, r4
   1ebd6:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1ebd8:	f104 0010 	add.w	r0, r4, #16
   1ebdc:	2100      	movs	r1, #0
   1ebde:	f7ff fe5b 	bl	1e898 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1ebe2:	4604      	mov	r4, r0
   1ebe4:	b1a8      	cbz	r0, 1ec12 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
   1ebe6:	f7ff fe67 	bl	1e8b8 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ebea:	7b63      	ldrb	r3, [r4, #13]
   1ebec:	06db      	lsls	r3, r3, #27
   1ebee:	d104      	bne.n	1ebfa <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1ebf0:	69a3      	ldr	r3, [r4, #24]
   1ebf2:	b913      	cbnz	r3, 1ebfa <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1ebf4:	4620      	mov	r0, r4
   1ebf6:	f7fc fcfb 	bl	1b5f0 <z_add_thread_to_ready_q>
	__asm__ volatile(
   1ebfa:	f04f 0320 	mov.w	r3, #32
   1ebfe:	f3ef 8011 	mrs	r0, BASEPRI
   1ec02:	f383 8811 	msr	BASEPRI, r3
   1ec06:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1ec0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ec0e:	f7ff be77 	b.w	1e900 <z_reschedule_irqlock>
   1ec12:	bd10      	pop	{r4, pc}

0001ec14 <clear_event_registrations>:
	while (num_events--) {
   1ec14:	2314      	movs	r3, #20
{
   1ec16:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   1ec18:	2400      	movs	r4, #0
   1ec1a:	2601      	movs	r6, #1
   1ec1c:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1ec20:	4281      	cmp	r1, r0
   1ec22:	d100      	bne.n	1ec26 <clear_event_registrations+0x12>
}
   1ec24:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1ec26:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1ec2a:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1ec2e:	f003 030f 	and.w	r3, r3, #15
   1ec32:	2b04      	cmp	r3, #4
   1ec34:	d80d      	bhi.n	1ec52 <clear_event_registrations+0x3e>
   1ec36:	fa06 f303 	lsl.w	r3, r6, r3
   1ec3a:	f013 0f16 	tst.w	r3, #22
   1ec3e:	d008      	beq.n	1ec52 <clear_event_registrations+0x3e>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1ec40:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1ec44:	b12b      	cbz	r3, 1ec52 <clear_event_registrations+0x3e>
	node->prev->next = node->next;
   1ec46:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1ec4a:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1ec4c:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1ec4e:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1ec52:	f382 8811 	msr	BASEPRI, r2
   1ec56:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ec5a:	f04f 0320 	mov.w	r3, #32
   1ec5e:	f3ef 8211 	mrs	r2, BASEPRI
   1ec62:	f383 8811 	msr	BASEPRI, r3
   1ec66:	f3bf 8f6f 	isb	sy
   1ec6a:	3914      	subs	r1, #20
   1ec6c:	e7d8      	b.n	1ec20 <clear_event_registrations+0xc>

0001ec6e <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   1ec6e:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1ec70:	6884      	ldr	r4, [r0, #8]
{
   1ec72:	4605      	mov	r5, r0
   1ec74:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1ec76:	b19c      	cbz	r4, 1eca0 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1ec78:	68a3      	ldr	r3, [r4, #8]
   1ec7a:	b95b      	cbnz	r3, 1ec94 <signal_poll_event+0x26>
	int retcode = 0;
   1ec7c:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   1ec7e:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1ec80:	2300      	movs	r3, #0
   1ec82:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1ec84:	68eb      	ldr	r3, [r5, #12]
   1ec86:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1ec8a:	4316      	orrs	r6, r2
   1ec8c:	f366 3310 	bfi	r3, r6, #12, #5
   1ec90:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1ec92:	e004      	b.n	1ec9e <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1ec94:	4798      	blx	r3
		poller->is_polling = false;
   1ec96:	2300      	movs	r3, #0
		if (retcode < 0) {
   1ec98:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1ec9a:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1ec9c:	daf0      	bge.n	1ec80 <signal_poll_event+0x12>
}
   1ec9e:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1eca0:	4620      	mov	r0, r4
   1eca2:	e7ed      	b.n	1ec80 <signal_poll_event+0x12>

0001eca4 <k_poll_poller_cb>:
{
   1eca4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1eca6:	6883      	ldr	r3, [r0, #8]
{
   1eca8:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   1ecaa:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1ecac:	7b63      	ldrb	r3, [r4, #13]
   1ecae:	079a      	lsls	r2, r3, #30
   1ecb0:	d401      	bmi.n	1ecb6 <k_poll_poller_cb+0x12>
		return 0;
   1ecb2:	2000      	movs	r0, #0
}
   1ecb4:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   1ecb6:	6a23      	ldr	r3, [r4, #32]
   1ecb8:	3302      	adds	r3, #2
   1ecba:	d012      	beq.n	1ece2 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   1ecbc:	4620      	mov	r0, r4
   1ecbe:	f7ff fe35 	bl	1e92c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ecc2:	2d08      	cmp	r5, #8
   1ecc4:	bf0c      	ite	eq
   1ecc6:	f06f 0303 	mvneq.w	r3, #3
   1ecca:	2300      	movne	r3, #0
   1eccc:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ecce:	7b63      	ldrb	r3, [r4, #13]
   1ecd0:	06db      	lsls	r3, r3, #27
   1ecd2:	d1ee      	bne.n	1ecb2 <k_poll_poller_cb+0xe>
	if (!z_is_thread_ready(thread)) {
   1ecd4:	69a5      	ldr	r5, [r4, #24]
   1ecd6:	2d00      	cmp	r5, #0
   1ecd8:	d1eb      	bne.n	1ecb2 <k_poll_poller_cb+0xe>
		z_add_thread_to_ready_q(thread);
   1ecda:	4620      	mov	r0, r4
   1ecdc:	f7fc fc88 	bl	1b5f0 <z_add_thread_to_ready_q>
	return 0;
   1ece0:	e7e7      	b.n	1ecb2 <k_poll_poller_cb+0xe>
		return -EAGAIN;
   1ece2:	f06f 000a 	mvn.w	r0, #10
   1ece6:	e7e5      	b.n	1ecb4 <k_poll_poller_cb+0x10>

0001ece8 <add_event>:
{
   1ece8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ecea:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ecec:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ecf0:	4290      	cmp	r0, r2
   1ecf2:	4604      	mov	r4, r0
   1ecf4:	460d      	mov	r5, r1
   1ecf6:	d106      	bne.n	1ed06 <add_event+0x1e>
	node->prev = list->tail;
   1ecf8:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1ecfa:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1ecfc:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1ecfe:	6863      	ldr	r3, [r4, #4]
   1ed00:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ed02:	6065      	str	r5, [r4, #4]
}
   1ed04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ed06:	2b00      	cmp	r3, #0
   1ed08:	d0f6      	beq.n	1ecf8 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1ed0a:	689b      	ldr	r3, [r3, #8]
   1ed0c:	6879      	ldr	r1, [r7, #4]
   1ed0e:	6858      	ldr	r0, [r3, #4]
   1ed10:	f7ff fdb9 	bl	1e886 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1ed14:	2800      	cmp	r0, #0
   1ed16:	d1ef      	bne.n	1ecf8 <add_event+0x10>
	return list->head == list;
   1ed18:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ed1a:	42b4      	cmp	r4, r6
   1ed1c:	d0ec      	beq.n	1ecf8 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ed1e:	2e00      	cmp	r6, #0
   1ed20:	d0ea      	beq.n	1ecf8 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1ed22:	68b3      	ldr	r3, [r6, #8]
   1ed24:	6878      	ldr	r0, [r7, #4]
   1ed26:	6859      	ldr	r1, [r3, #4]
   1ed28:	f7ff fdad 	bl	1e886 <z_is_t1_higher_prio_than_t2>
   1ed2c:	b128      	cbz	r0, 1ed3a <add_event+0x52>
	node->prev = successor->prev;
   1ed2e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ed30:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1ed34:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ed36:	6075      	str	r5, [r6, #4]
			return;
   1ed38:	e7e4      	b.n	1ed04 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1ed3a:	6863      	ldr	r3, [r4, #4]
   1ed3c:	429e      	cmp	r6, r3
   1ed3e:	d0db      	beq.n	1ecf8 <add_event+0x10>
   1ed40:	6836      	ldr	r6, [r6, #0]
   1ed42:	e7ec      	b.n	1ed1e <add_event+0x36>

0001ed44 <register_events>:
{
   1ed44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1ed48:	f04f 0b00 	mov.w	fp, #0
{
   1ed4c:	4688      	mov	r8, r1
   1ed4e:	4615      	mov	r5, r2
   1ed50:	4699      	mov	r9, r3
   1ed52:	4604      	mov	r4, r0
	int events_registered = 0;
   1ed54:	465e      	mov	r6, fp
	event->poller = NULL;
   1ed56:	465f      	mov	r7, fp
	for (int ii = 0; ii < num_events; ii++) {
   1ed58:	45c3      	cmp	fp, r8
   1ed5a:	db02      	blt.n	1ed62 <register_events+0x1e>
}
   1ed5c:	4630      	mov	r0, r6
   1ed5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed62:	f04f 0320 	mov.w	r3, #32
   1ed66:	f3ef 8a11 	mrs	sl, BASEPRI
   1ed6a:	f383 8811 	msr	BASEPRI, r3
   1ed6e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1ed72:	7b63      	ldrb	r3, [r4, #13]
   1ed74:	f003 030f 	and.w	r3, r3, #15
   1ed78:	2b02      	cmp	r3, #2
   1ed7a:	d005      	beq.n	1ed88 <register_events+0x44>
   1ed7c:	2b04      	cmp	r3, #4
   1ed7e:	d006      	beq.n	1ed8e <register_events+0x4a>
   1ed80:	2b01      	cmp	r3, #1
   1ed82:	d118      	bne.n	1edb6 <register_events+0x72>
		if (event->signal->signaled != 0U) {
   1ed84:	6922      	ldr	r2, [r4, #16]
   1ed86:	e000      	b.n	1ed8a <register_events+0x46>
		if (k_sem_count_get(event->sem) > 0) {
   1ed88:	6922      	ldr	r2, [r4, #16]
		if (event->signal->signaled != 0U) {
   1ed8a:	6892      	ldr	r2, [r2, #8]
   1ed8c:	e001      	b.n	1ed92 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1ed8e:	6922      	ldr	r2, [r4, #16]
   1ed90:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0U) {
   1ed92:	b182      	cbz	r2, 1edb6 <register_events+0x72>
	event->state |= state;
   1ed94:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1ed96:	60a7      	str	r7, [r4, #8]
	event->state |= state;
   1ed98:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1ed9c:	430b      	orrs	r3, r1
   1ed9e:	f363 3210 	bfi	r2, r3, #12, #5
   1eda2:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1eda4:	702f      	strb	r7, [r5, #0]
	__asm__ volatile(
   1eda6:	f38a 8811 	msr	BASEPRI, sl
   1edaa:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1edae:	f10b 0b01 	add.w	fp, fp, #1
   1edb2:	3414      	adds	r4, #20
   1edb4:	e7d0      	b.n	1ed58 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1edb6:	f1b9 0f00 	cmp.w	r9, #0
   1edba:	d1f4      	bne.n	1eda6 <register_events+0x62>
   1edbc:	782b      	ldrb	r3, [r5, #0]
   1edbe:	2b00      	cmp	r3, #0
   1edc0:	d0f1      	beq.n	1eda6 <register_events+0x62>
	switch (event->type) {
   1edc2:	7b63      	ldrb	r3, [r4, #13]
   1edc4:	f003 030f 	and.w	r3, r3, #15
   1edc8:	2b02      	cmp	r3, #2
   1edca:	d007      	beq.n	1eddc <register_events+0x98>
   1edcc:	2b04      	cmp	r3, #4
   1edce:	d00e      	beq.n	1edee <register_events+0xaa>
   1edd0:	2b01      	cmp	r3, #1
   1edd2:	d109      	bne.n	1ede8 <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   1edd4:	462a      	mov	r2, r5
   1edd6:	4621      	mov	r1, r4
   1edd8:	6920      	ldr	r0, [r4, #16]
   1edda:	e003      	b.n	1ede4 <register_events+0xa0>
		add_event(&event->sem->poll_events, event, poller);
   1eddc:	462a      	mov	r2, r5
   1edde:	4621      	mov	r1, r4
   1ede0:	6920      	ldr	r0, [r4, #16]
   1ede2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1ede4:	f7ff ff80 	bl	1ece8 <add_event>
	event->poller = poller;
   1ede8:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   1edea:	3601      	adds	r6, #1
   1edec:	e7db      	b.n	1eda6 <register_events+0x62>
		add_event(&event->queue->poll_events, event, poller);
   1edee:	6920      	ldr	r0, [r4, #16]
   1edf0:	462a      	mov	r2, r5
   1edf2:	4621      	mov	r1, r4
   1edf4:	3008      	adds	r0, #8
   1edf6:	e7f5      	b.n	1ede4 <register_events+0xa0>

0001edf8 <z_handle_obj_poll_events>:
	return list->head == list;
   1edf8:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1edfa:	4298      	cmp	r0, r3
   1edfc:	d009      	beq.n	1ee12 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1edfe:	e9d3 2000 	ldrd	r2, r0, [r3]
   1ee02:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1ee04:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1ee06:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   1ee08:	4618      	mov	r0, r3
	node->prev = NULL;
   1ee0a:	e9c3 2200 	strd	r2, r2, [r3]
   1ee0e:	f7ff bf2e 	b.w	1ec6e <signal_poll_event>
	}
}
   1ee12:	4770      	bx	lr

0001ee14 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1ee14:	4770      	bx	lr
